// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.events.k8s.io_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.EventSourceArgs;
import io.pulumi.kubernetes.core_v1.inputs.ObjectReferenceArgs;
import io.pulumi.kubernetes.events.k8s.io_v1.inputs.EventSeriesArgs;
import io.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventArgs Empty = new EventArgs();

    @InputImport(name="action")
    private final @Nullable Input<String> action;

    public Input<String> getAction() {
        return this.action == null ? Input.empty() : this.action;
    }

    @InputImport(name="apiVersion")
    private final @Nullable Input<String> apiVersion;

    public Input<String> getApiVersion() {
        return this.apiVersion == null ? Input.empty() : this.apiVersion;
    }

    @InputImport(name="deprecatedCount")
    private final @Nullable Input<Integer> deprecatedCount;

    public Input<Integer> getDeprecatedCount() {
        return this.deprecatedCount == null ? Input.empty() : this.deprecatedCount;
    }

    @InputImport(name="deprecatedFirstTimestamp")
    private final @Nullable Input<String> deprecatedFirstTimestamp;

    public Input<String> getDeprecatedFirstTimestamp() {
        return this.deprecatedFirstTimestamp == null ? Input.empty() : this.deprecatedFirstTimestamp;
    }

    @InputImport(name="deprecatedLastTimestamp")
    private final @Nullable Input<String> deprecatedLastTimestamp;

    public Input<String> getDeprecatedLastTimestamp() {
        return this.deprecatedLastTimestamp == null ? Input.empty() : this.deprecatedLastTimestamp;
    }

    @InputImport(name="deprecatedSource")
    private final @Nullable Input<EventSourceArgs> deprecatedSource;

    public Input<EventSourceArgs> getDeprecatedSource() {
        return this.deprecatedSource == null ? Input.empty() : this.deprecatedSource;
    }

    @InputImport(name="eventTime", required=true)
    private final Input<String> eventTime;

    public Input<String> getEventTime() {
        return this.eventTime;
    }

    @InputImport(name="kind")
    private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    @InputImport(name="metadata")
    private final @Nullable Input<ObjectMetaArgs> metadata;

    public Input<ObjectMetaArgs> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    @InputImport(name="note")
    private final @Nullable Input<String> note;

    public Input<String> getNote() {
        return this.note == null ? Input.empty() : this.note;
    }

    @InputImport(name="reason")
    private final @Nullable Input<String> reason;

    public Input<String> getReason() {
        return this.reason == null ? Input.empty() : this.reason;
    }

    @InputImport(name="regarding")
    private final @Nullable Input<ObjectReferenceArgs> regarding;

    public Input<ObjectReferenceArgs> getRegarding() {
        return this.regarding == null ? Input.empty() : this.regarding;
    }

    @InputImport(name="related")
    private final @Nullable Input<ObjectReferenceArgs> related;

    public Input<ObjectReferenceArgs> getRelated() {
        return this.related == null ? Input.empty() : this.related;
    }

    @InputImport(name="reportingController")
    private final @Nullable Input<String> reportingController;

    public Input<String> getReportingController() {
        return this.reportingController == null ? Input.empty() : this.reportingController;
    }

    @InputImport(name="reportingInstance")
    private final @Nullable Input<String> reportingInstance;

    public Input<String> getReportingInstance() {
        return this.reportingInstance == null ? Input.empty() : this.reportingInstance;
    }

    @InputImport(name="series")
    private final @Nullable Input<EventSeriesArgs> series;

    public Input<EventSeriesArgs> getSeries() {
        return this.series == null ? Input.empty() : this.series;
    }

    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public EventArgs(
        @Nullable Input<String> action,
        @Nullable Input<String> apiVersion,
        @Nullable Input<Integer> deprecatedCount,
        @Nullable Input<String> deprecatedFirstTimestamp,
        @Nullable Input<String> deprecatedLastTimestamp,
        @Nullable Input<EventSourceArgs> deprecatedSource,
        Input<String> eventTime,
        @Nullable Input<String> kind,
        @Nullable Input<ObjectMetaArgs> metadata,
        @Nullable Input<String> note,
        @Nullable Input<String> reason,
        @Nullable Input<ObjectReferenceArgs> regarding,
        @Nullable Input<ObjectReferenceArgs> related,
        @Nullable Input<String> reportingController,
        @Nullable Input<String> reportingInstance,
        @Nullable Input<EventSeriesArgs> series,
        @Nullable Input<String> type) {
        this.action = action;
        this.apiVersion = apiVersion;
        this.deprecatedCount = deprecatedCount;
        this.deprecatedFirstTimestamp = deprecatedFirstTimestamp;
        this.deprecatedLastTimestamp = deprecatedLastTimestamp;
        this.deprecatedSource = deprecatedSource;
        this.eventTime = Objects.requireNonNull(eventTime, "expected parameter 'eventTime' to be non-null");
        this.kind = kind;
        this.metadata = metadata;
        this.note = note;
        this.reason = reason;
        this.regarding = regarding;
        this.related = related;
        this.reportingController = reportingController;
        this.reportingInstance = reportingInstance;
        this.series = series;
        this.type = type;
    }

    private EventArgs() {
        this.action = Input.empty();
        this.apiVersion = Input.empty();
        this.deprecatedCount = Input.empty();
        this.deprecatedFirstTimestamp = Input.empty();
        this.deprecatedLastTimestamp = Input.empty();
        this.deprecatedSource = Input.empty();
        this.eventTime = Input.empty();
        this.kind = Input.empty();
        this.metadata = Input.empty();
        this.note = Input.empty();
        this.reason = Input.empty();
        this.regarding = Input.empty();
        this.related = Input.empty();
        this.reportingController = Input.empty();
        this.reportingInstance = Input.empty();
        this.series = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> action;
        private @Nullable Input<String> apiVersion;
        private @Nullable Input<Integer> deprecatedCount;
        private @Nullable Input<String> deprecatedFirstTimestamp;
        private @Nullable Input<String> deprecatedLastTimestamp;
        private @Nullable Input<EventSourceArgs> deprecatedSource;
        private Input<String> eventTime;
        private @Nullable Input<String> kind;
        private @Nullable Input<ObjectMetaArgs> metadata;
        private @Nullable Input<String> note;
        private @Nullable Input<String> reason;
        private @Nullable Input<ObjectReferenceArgs> regarding;
        private @Nullable Input<ObjectReferenceArgs> related;
        private @Nullable Input<String> reportingController;
        private @Nullable Input<String> reportingInstance;
        private @Nullable Input<EventSeriesArgs> series;
        private @Nullable Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(EventArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.apiVersion = defaults.apiVersion;
    	      this.deprecatedCount = defaults.deprecatedCount;
    	      this.deprecatedFirstTimestamp = defaults.deprecatedFirstTimestamp;
    	      this.deprecatedLastTimestamp = defaults.deprecatedLastTimestamp;
    	      this.deprecatedSource = defaults.deprecatedSource;
    	      this.eventTime = defaults.eventTime;
    	      this.kind = defaults.kind;
    	      this.metadata = defaults.metadata;
    	      this.note = defaults.note;
    	      this.reason = defaults.reason;
    	      this.regarding = defaults.regarding;
    	      this.related = defaults.related;
    	      this.reportingController = defaults.reportingController;
    	      this.reportingInstance = defaults.reportingInstance;
    	      this.series = defaults.series;
    	      this.type = defaults.type;
        }

        public Builder setAction(@Nullable Input<String> action) {
            this.action = action;
            return this;
        }

        public Builder setAction(@Nullable String action) {
            this.action = Input.ofNullable(action);
            return this;
        }

        public Builder setApiVersion(@Nullable Input<String> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder setApiVersion(@Nullable String apiVersion) {
            this.apiVersion = Input.ofNullable(apiVersion);
            return this;
        }

        public Builder setDeprecatedCount(@Nullable Input<Integer> deprecatedCount) {
            this.deprecatedCount = deprecatedCount;
            return this;
        }

        public Builder setDeprecatedCount(@Nullable Integer deprecatedCount) {
            this.deprecatedCount = Input.ofNullable(deprecatedCount);
            return this;
        }

        public Builder setDeprecatedFirstTimestamp(@Nullable Input<String> deprecatedFirstTimestamp) {
            this.deprecatedFirstTimestamp = deprecatedFirstTimestamp;
            return this;
        }

        public Builder setDeprecatedFirstTimestamp(@Nullable String deprecatedFirstTimestamp) {
            this.deprecatedFirstTimestamp = Input.ofNullable(deprecatedFirstTimestamp);
            return this;
        }

        public Builder setDeprecatedLastTimestamp(@Nullable Input<String> deprecatedLastTimestamp) {
            this.deprecatedLastTimestamp = deprecatedLastTimestamp;
            return this;
        }

        public Builder setDeprecatedLastTimestamp(@Nullable String deprecatedLastTimestamp) {
            this.deprecatedLastTimestamp = Input.ofNullable(deprecatedLastTimestamp);
            return this;
        }

        public Builder setDeprecatedSource(@Nullable Input<EventSourceArgs> deprecatedSource) {
            this.deprecatedSource = deprecatedSource;
            return this;
        }

        public Builder setDeprecatedSource(@Nullable EventSourceArgs deprecatedSource) {
            this.deprecatedSource = Input.ofNullable(deprecatedSource);
            return this;
        }

        public Builder setEventTime(Input<String> eventTime) {
            this.eventTime = Objects.requireNonNull(eventTime);
            return this;
        }

        public Builder setEventTime(String eventTime) {
            this.eventTime = Input.of(Objects.requireNonNull(eventTime));
            return this;
        }

        public Builder setKind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setMetadata(@Nullable Input<ObjectMetaArgs> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable ObjectMetaArgs metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setNote(@Nullable Input<String> note) {
            this.note = note;
            return this;
        }

        public Builder setNote(@Nullable String note) {
            this.note = Input.ofNullable(note);
            return this;
        }

        public Builder setReason(@Nullable Input<String> reason) {
            this.reason = reason;
            return this;
        }

        public Builder setReason(@Nullable String reason) {
            this.reason = Input.ofNullable(reason);
            return this;
        }

        public Builder setRegarding(@Nullable Input<ObjectReferenceArgs> regarding) {
            this.regarding = regarding;
            return this;
        }

        public Builder setRegarding(@Nullable ObjectReferenceArgs regarding) {
            this.regarding = Input.ofNullable(regarding);
            return this;
        }

        public Builder setRelated(@Nullable Input<ObjectReferenceArgs> related) {
            this.related = related;
            return this;
        }

        public Builder setRelated(@Nullable ObjectReferenceArgs related) {
            this.related = Input.ofNullable(related);
            return this;
        }

        public Builder setReportingController(@Nullable Input<String> reportingController) {
            this.reportingController = reportingController;
            return this;
        }

        public Builder setReportingController(@Nullable String reportingController) {
            this.reportingController = Input.ofNullable(reportingController);
            return this;
        }

        public Builder setReportingInstance(@Nullable Input<String> reportingInstance) {
            this.reportingInstance = reportingInstance;
            return this;
        }

        public Builder setReportingInstance(@Nullable String reportingInstance) {
            this.reportingInstance = Input.ofNullable(reportingInstance);
            return this;
        }

        public Builder setSeries(@Nullable Input<EventSeriesArgs> series) {
            this.series = series;
            return this;
        }

        public Builder setSeries(@Nullable EventSeriesArgs series) {
            this.series = Input.ofNullable(series);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public EventArgs build() {
            return new EventArgs(action, apiVersion, deprecatedCount, deprecatedFirstTimestamp, deprecatedLastTimestamp, deprecatedSource, eventTime, kind, metadata, note, reason, regarding, related, reportingController, reportingInstance, series, type);
        }
    }
}
