// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.eks.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents the AWS credentials to scope a given kubeconfig when using a non-default credential chain.
 * 
 * The options can be used independently, or additively.
 * 
 * A scoped kubeconfig is necessary for certain auth scenarios. For example:
 *   1. Assume a role on the default account caller,
 *   2. Use an AWS creds profile instead of the default account caller,
 *   3. Use an AWS creds creds profile instead of the default account caller,
 *      and then assume a given role on the profile. This scenario is also
 *      possible by only using a profile, iff the profile includes a role to
 *      assume in its settings.
 * 
 * See for more details:
 * - https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html
 * - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html
 * - https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html
 * 
 */
public final class KubeconfigOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final KubeconfigOptionsArgs Empty = new KubeconfigOptionsArgs();

    /**
     * AWS credential profile name to always use instead of the default AWS credential provider chain.
     * 
     * The profile is passed to kubeconfig as an authentication environment setting.
     * 
     */
    @Import(name="profileName")
      private final @Nullable Output<String> profileName;

    public Output<String> getProfileName() {
        return this.profileName == null ? Output.empty() : this.profileName;
    }

    /**
     * Role ARN to assume instead of the default AWS credential provider chain.
     * 
     * The role is passed to kubeconfig as an authentication exec argument.
     * 
     */
    @Import(name="roleArn")
      private final @Nullable Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn == null ? Output.empty() : this.roleArn;
    }

    public KubeconfigOptionsArgs(
        @Nullable Output<String> profileName,
        @Nullable Output<String> roleArn) {
        this.profileName = profileName;
        this.roleArn = roleArn;
    }

    private KubeconfigOptionsArgs() {
        this.profileName = Output.empty();
        this.roleArn = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubeconfigOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> profileName;
        private @Nullable Output<String> roleArn;

        public Builder() {
    	      // Empty
        }

        public Builder(KubeconfigOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.profileName = defaults.profileName;
    	      this.roleArn = defaults.roleArn;
        }

        public Builder profileName(@Nullable Output<String> profileName) {
            this.profileName = profileName;
            return this;
        }

        public Builder profileName(@Nullable String profileName) {
            this.profileName = Output.ofNullable(profileName);
            return this;
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = Output.ofNullable(roleArn);
            return this;
        }
        public KubeconfigOptionsArgs build() {
            return new KubeconfigOptionsArgs(profileName, roleArn);
        }
    }
}
