// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.random;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RandomPetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RandomPetArgs Empty = new RandomPetArgs();

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     * 
     */
    @Import(name="keepers")
    private @Nullable Output<Map<String,Object>> keepers;

    public Optional<Output<Map<String,Object>>> keepers() {
        return Optional.ofNullable(this.keepers);
    }

    /**
     * The length (in words) of the pet name.
     * 
     */
    @Import(name="length")
    private @Nullable Output<Integer> length;

    public Optional<Output<Integer>> length() {
        return Optional.ofNullable(this.length);
    }

    /**
     * A string to prefix the name with.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * The character to separate words in the pet name.
     * 
     */
    @Import(name="separator")
    private @Nullable Output<String> separator;

    public Optional<Output<String>> separator() {
        return Optional.ofNullable(this.separator);
    }

    private RandomPetArgs() {}

    private RandomPetArgs(RandomPetArgs $) {
        this.keepers = $.keepers;
        this.length = $.length;
        this.prefix = $.prefix;
        this.separator = $.separator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RandomPetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RandomPetArgs $;

        public Builder() {
            $ = new RandomPetArgs();
        }

        public Builder(RandomPetArgs defaults) {
            $ = new RandomPetArgs(Objects.requireNonNull(defaults));
        }

        public Builder keepers(@Nullable Output<Map<String,Object>> keepers) {
            $.keepers = keepers;
            return this;
        }

        public Builder keepers(Map<String,Object> keepers) {
            return keepers(Output.of(keepers));
        }

        public Builder length(@Nullable Output<Integer> length) {
            $.length = length;
            return this;
        }

        public Builder length(Integer length) {
            return length(Output.of(length));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder separator(@Nullable Output<String> separator) {
            $.separator = separator;
            return this;
        }

        public Builder separator(String separator) {
            return separator(Output.of(separator));
        }

        public RandomPetArgs build() {
            return $;
        }
    }

}
