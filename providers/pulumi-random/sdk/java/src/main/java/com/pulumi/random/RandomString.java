// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.random;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.random.RandomStringArgs;
import com.pulumi.random.Utilities;
import com.pulumi.random.inputs.RandomStringState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The resource `random.RandomString` generates a random permutation of alphanumeric characters and optionally special characters.
 * 
 * This resource *does* use a cryptographic random number generator.
 * 
 * Historically this resource&#39;s intended usage has been ambiguous as the original example used it in a password. For backwards compatibility it will continue to exist. For unique ids please use random_id, for sensitive random values please use random_password.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var random = new RandomString(&#34;random&#34;, RandomStringArgs.builder()        
 *             .length(16)
 *             .overrideSpecial(&#34;/@Â£$&#34;)
 *             .special(true)
 *             .build());
 * 
 *         }
 * }
 * ```
 * 
 * ## Import
 * 
 * # Strings can be imported by just specifying the value of the string
 * 
 * ```sh
 *  $ pulumi import random:index/randomString:RandomString test test
 * ```
 * 
 */
@ResourceType(type="random:index/randomString:RandomString")
public class RandomString extends com.pulumi.resources.CustomResource {
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider
     * documentation](../index.html) for more information.
     * 
     */
    @Export(name="keepers", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> keepers;

    /**
     * @return Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider
     * documentation](../index.html) for more information.
     * 
     */
    public Output<Optional<Map<String,Object>>> keepers() {
        return Codegen.optional(this.keepers);
    }
    /**
     * The length of the string desired. The minimum value for length is 1 and, length must also be &gt;= (`min_upper` +
     * `min_lower` + `min_numeric` + `min_special`).
     * 
     */
    @Export(name="length", type=Integer.class, parameters={})
    private Output<Integer> length;

    /**
     * @return The length of the string desired. The minimum value for length is 1 and, length must also be &gt;= (`min_upper` +
     * `min_lower` + `min_numeric` + `min_special`).
     * 
     */
    public Output<Integer> length() {
        return this.length;
    }
    /**
     * Include lowercase alphabet characters in the result. Default value is `true`.
     * 
     */
    @Export(name="lower", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> lower;

    /**
     * @return Include lowercase alphabet characters in the result. Default value is `true`.
     * 
     */
    public Output<Optional<Boolean>> lower() {
        return Codegen.optional(this.lower);
    }
    /**
     * Minimum number of lowercase alphabet characters in the result. Default value is `0`.
     * 
     */
    @Export(name="minLower", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minLower;

    /**
     * @return Minimum number of lowercase alphabet characters in the result. Default value is `0`.
     * 
     */
    public Output<Optional<Integer>> minLower() {
        return Codegen.optional(this.minLower);
    }
    /**
     * Minimum number of numeric characters in the result. Default value is `0`.
     * 
     */
    @Export(name="minNumeric", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minNumeric;

    /**
     * @return Minimum number of numeric characters in the result. Default value is `0`.
     * 
     */
    public Output<Optional<Integer>> minNumeric() {
        return Codegen.optional(this.minNumeric);
    }
    /**
     * Minimum number of special characters in the result. Default value is `0`.
     * 
     */
    @Export(name="minSpecial", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minSpecial;

    /**
     * @return Minimum number of special characters in the result. Default value is `0`.
     * 
     */
    public Output<Optional<Integer>> minSpecial() {
        return Codegen.optional(this.minSpecial);
    }
    /**
     * Minimum number of uppercase alphabet characters in the result. Default value is `0`.
     * 
     */
    @Export(name="minUpper", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minUpper;

    /**
     * @return Minimum number of uppercase alphabet characters in the result. Default value is `0`.
     * 
     */
    public Output<Optional<Integer>> minUpper() {
        return Codegen.optional(this.minUpper);
    }
    /**
     * Include numeric characters in the result. Default value is `true`.
     * 
     */
    @Export(name="number", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> number;

    /**
     * @return Include numeric characters in the result. Default value is `true`.
     * 
     */
    public Output<Optional<Boolean>> number() {
        return Codegen.optional(this.number);
    }
    /**
     * Supply your own list of special characters to use for string generation. This overrides the default character list in
     * the special argument. The `special` argument must still be set to true for any overwritten characters to be used in
     * generation.
     * 
     */
    @Export(name="overrideSpecial", type=String.class, parameters={})
    private Output</* @Nullable */ String> overrideSpecial;

    /**
     * @return Supply your own list of special characters to use for string generation. This overrides the default character list in
     * the special argument. The `special` argument must still be set to true for any overwritten characters to be used in
     * generation.
     * 
     */
    public Output<Optional<String>> overrideSpecial() {
        return Codegen.optional(this.overrideSpecial);
    }
    /**
     * The generated random string.
     * 
     */
    @Export(name="result", type=String.class, parameters={})
    private Output<String> result;

    /**
     * @return The generated random string.
     * 
     */
    public Output<String> result() {
        return this.result;
    }
    /**
     * Include special characters in the result. These are `!@#$%&amp;*()-_=+[]{}&lt;&gt;:?`. Default value is `true`.
     * 
     */
    @Export(name="special", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> special;

    /**
     * @return Include special characters in the result. These are `!@#$%&amp;*()-_=+[]{}&lt;&gt;:?`. Default value is `true`.
     * 
     */
    public Output<Optional<Boolean>> special() {
        return Codegen.optional(this.special);
    }
    /**
     * Include uppercase alphabet characters in the result. Default value is `true`.
     * 
     */
    @Export(name="upper", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> upper;

    /**
     * @return Include uppercase alphabet characters in the result. Default value is `true`.
     * 
     */
    public Output<Optional<Boolean>> upper() {
        return Codegen.optional(this.upper);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RandomString(String name) {
        this(name, RandomStringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RandomString(String name, RandomStringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RandomString(String name, RandomStringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("random:index/randomString:RandomString", name, args == null ? RandomStringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RandomString(String name, Output<String> id, @Nullable RandomStringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("random:index/randomString:RandomString", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RandomString get(String name, Output<String> id, @Nullable RandomStringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RandomString(name, id, state, options);
    }
}
