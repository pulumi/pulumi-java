// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.random.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RandomIntegerState extends com.pulumi.resources.ResourceArgs {

    public static final RandomIntegerState Empty = new RandomIntegerState();

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     * 
     */
    @Import(name="keepers")
    private @Nullable Output<Map<String,Object>> keepers;

    public Optional<Output<Map<String,Object>>> keepers() {
        return Optional.ofNullable(this.keepers);
    }

    /**
     * The maximum inclusive value of the range.
     * 
     */
    @Import(name="max")
    private @Nullable Output<Integer> max;

    public Optional<Output<Integer>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * The minimum inclusive value of the range.
     * 
     */
    @Import(name="min")
    private @Nullable Output<Integer> min;

    public Optional<Output<Integer>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * The random integer result.
     * 
     */
    @Import(name="result")
    private @Nullable Output<Integer> result;

    public Optional<Output<Integer>> result() {
        return Optional.ofNullable(this.result);
    }

    /**
     * A custom seed to always produce the same value.
     * 
     */
    @Import(name="seed")
    private @Nullable Output<String> seed;

    public Optional<Output<String>> seed() {
        return Optional.ofNullable(this.seed);
    }

    private RandomIntegerState() {}

    private RandomIntegerState(RandomIntegerState $) {
        this.keepers = $.keepers;
        this.max = $.max;
        this.min = $.min;
        this.result = $.result;
        this.seed = $.seed;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RandomIntegerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RandomIntegerState $;

        public Builder() {
            $ = new RandomIntegerState();
        }

        public Builder(RandomIntegerState defaults) {
            $ = new RandomIntegerState(Objects.requireNonNull(defaults));
        }

        public Builder keepers(@Nullable Output<Map<String,Object>> keepers) {
            $.keepers = keepers;
            return this;
        }

        public Builder keepers(Map<String,Object> keepers) {
            return keepers(Output.of(keepers));
        }

        public Builder max(@Nullable Output<Integer> max) {
            $.max = max;
            return this;
        }

        public Builder max(Integer max) {
            return max(Output.of(max));
        }

        public Builder min(@Nullable Output<Integer> min) {
            $.min = min;
            return this;
        }

        public Builder min(Integer min) {
            return min(Output.of(min));
        }

        public Builder result(@Nullable Output<Integer> result) {
            $.result = result;
            return this;
        }

        public Builder result(Integer result) {
            return result(Output.of(result));
        }

        public Builder seed(@Nullable Output<String> seed) {
            $.seed = seed;
            return this;
        }

        public Builder seed(String seed) {
            return seed(Output.of(seed));
        }

        public RandomIntegerState build() {
            return $;
        }
    }

}
