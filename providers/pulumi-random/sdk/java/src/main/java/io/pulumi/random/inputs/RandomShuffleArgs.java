// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.random.inputs;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;
import io.pulumi.random.Utilities;


public final class RandomShuffleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RandomShuffleArgs Empty = new RandomShuffleArgs();

    @InputImport(name="inputs", required=true)
    private final Input<List<String>> inputs;

    public Input<List<String>> getInputs() {
        return this.inputs;
    }

    @InputImport(name="keepers")
    private final @Nullable Input<Map<String,Object>> keepers;

    public Input<Map<String,Object>> getKeepers() {
        return this.keepers == null ? Input.empty() : this.keepers;
    }

    @InputImport(name="resultCount")
    private final @Nullable Input<Integer> resultCount;

    public Input<Integer> getResultCount() {
        return this.resultCount == null ? Input.empty() : this.resultCount;
    }

    @InputImport(name="seed")
    private final @Nullable Input<String> seed;

    public Input<String> getSeed() {
        return this.seed == null ? Input.empty() : this.seed;
    }

    public RandomShuffleArgs(
        Input<List<String>> inputs,
        @Nullable Input<Map<String,Object>> keepers,
        @Nullable Input<Integer> resultCount,
        @Nullable Input<String> seed) {
        this.inputs = Objects.requireNonNull(inputs, "expected parameter 'inputs' to be non-null");
        this.keepers = keepers;
        this.resultCount = resultCount;
        this.seed = seed;
    }

    private RandomShuffleArgs() {
        this.inputs = Input.empty();
        this.keepers = Input.empty();
        this.resultCount = Input.empty();
        this.seed = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RandomShuffleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> inputs;
        private @Nullable Input<Map<String,Object>> keepers;
        private @Nullable Input<Integer> resultCount;
        private @Nullable Input<String> seed;

        public Builder() {
    	      // Empty
        }

        public Builder(RandomShuffleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputs = defaults.inputs;
    	      this.keepers = defaults.keepers;
    	      this.resultCount = defaults.resultCount;
    	      this.seed = defaults.seed;
        }

        public Builder setInputs(Input<List<String>> inputs) {
            this.inputs = Objects.requireNonNull(inputs);
            return this;
        }

        public Builder setInputs(List<String> inputs) {
            this.inputs = Input.of(Objects.requireNonNull(inputs));
            return this;
        }

        public Builder setKeepers(@Nullable Input<Map<String,Object>> keepers) {
            this.keepers = keepers;
            return this;
        }

        public Builder setKeepers(@Nullable Map<String,Object> keepers) {
            this.keepers = Input.ofNullable(keepers);
            return this;
        }

        public Builder setResultCount(@Nullable Input<Integer> resultCount) {
            this.resultCount = resultCount;
            return this;
        }

        public Builder setResultCount(@Nullable Integer resultCount) {
            this.resultCount = Input.ofNullable(resultCount);
            return this;
        }

        public Builder setSeed(@Nullable Input<String> seed) {
            this.seed = seed;
            return this;
        }

        public Builder setSeed(@Nullable String seed) {
            this.seed = Input.ofNullable(seed);
            return this;
        }

        public RandomShuffleArgs build() {
            return new RandomShuffleArgs(inputs, keepers, resultCount, seed);
        }
    }
}
