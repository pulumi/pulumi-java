// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.random;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;

import javax.annotation.Nullable;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class RandomShuffleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RandomShuffleArgs Empty = new RandomShuffleArgs();

    /**
     * The list of strings to shuffle.
     * 
     */
    @InputImport(name="inputs", required=true)
      private final Output<List<String>> inputs;

    public Output<List<String>> getInputs() {
        return this.inputs;
    }

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     * 
     */
    @InputImport(name="keepers")
      private final @Nullable Output<Map<String,Object>> keepers;

    public Output<Map<String,Object>> getKeepers() {
        return this.keepers == null ? Output.empty() : this.keepers;
    }

    /**
     * The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some elements will be excluded from the result. If more items are requested, items will be repeated in the result but not more frequently than the number of items in the input list.
     * 
     */
    @InputImport(name="resultCount")
      private final @Nullable Output<Integer> resultCount;

    public Output<Integer> getResultCount() {
        return this.resultCount == null ? Output.empty() : this.resultCount;
    }

    /**
     * Arbitrary string with which to seed the random number generator, in order to produce less-volatile permutations of the list.
     * 
     */
    @InputImport(name="seed")
      private final @Nullable Output<String> seed;

    public Output<String> getSeed() {
        return this.seed == null ? Output.empty() : this.seed;
    }

    public RandomShuffleArgs(
        Output<List<String>> inputs,
        @Nullable Output<Map<String,Object>> keepers,
        @Nullable Output<Integer> resultCount,
        @Nullable Output<String> seed) {
        this.inputs = Objects.requireNonNull(inputs, "expected parameter 'inputs' to be non-null");
        this.keepers = keepers;
        this.resultCount = resultCount;
        this.seed = seed;
    }

    private RandomShuffleArgs() {
        this.inputs = Output.empty();
        this.keepers = Output.empty();
        this.resultCount = Output.empty();
        this.seed = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RandomShuffleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> inputs;
        private @Nullable Output<Map<String,Object>> keepers;
        private @Nullable Output<Integer> resultCount;
        private @Nullable Output<String> seed;

        public Builder() {
    	      // Empty
        }

        public Builder(RandomShuffleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputs = defaults.inputs;
    	      this.keepers = defaults.keepers;
    	      this.resultCount = defaults.resultCount;
    	      this.seed = defaults.seed;
        }

        public Builder inputs(Output<List<String>> inputs) {
            this.inputs = Objects.requireNonNull(inputs);
            return this;
        }

        public Builder inputs(List<String> inputs) {
            this.inputs = Output.of(Objects.requireNonNull(inputs));
            return this;
        }

        public Builder keepers(@Nullable Output<Map<String,Object>> keepers) {
            this.keepers = keepers;
            return this;
        }

        public Builder keepers(@Nullable Map<String,Object> keepers) {
            this.keepers = Output.ofNullable(keepers);
            return this;
        }

        public Builder resultCount(@Nullable Output<Integer> resultCount) {
            this.resultCount = resultCount;
            return this;
        }

        public Builder resultCount(@Nullable Integer resultCount) {
            this.resultCount = Output.ofNullable(resultCount);
            return this;
        }

        public Builder seed(@Nullable Output<String> seed) {
            this.seed = seed;
            return this;
        }

        public Builder seed(@Nullable String seed) {
            this.seed = Output.ofNullable(seed);
            return this;
        }
        public RandomShuffleArgs build() {
            return new RandomShuffleArgs(inputs, keepers, resultCount, seed);
        }
    }
}
