// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.random;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;

import javax.annotation.Nullable;
import java.util.Map;
import java.util.Objects;


public final class RandomIntegerArgs extends io.pulumi.resources.ResourceArgs {

    public static final RandomIntegerArgs Empty = new RandomIntegerArgs();

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     * 
     */
    @InputImport(name="keepers")
      private final @Nullable Output<Map<String,Object>> keepers;

    public Output<Map<String,Object>> getKeepers() {
        return this.keepers == null ? Output.empty() : this.keepers;
    }

    /**
     * The maximum inclusive value of the range.
     * 
     */
    @InputImport(name="max", required=true)
      private final Output<Integer> max;

    public Output<Integer> getMax() {
        return this.max;
    }

    /**
     * The minimum inclusive value of the range.
     * 
     */
    @InputImport(name="min", required=true)
      private final Output<Integer> min;

    public Output<Integer> getMin() {
        return this.min;
    }

    /**
     * A custom seed to always produce the same value.
     * 
     */
    @InputImport(name="seed")
      private final @Nullable Output<String> seed;

    public Output<String> getSeed() {
        return this.seed == null ? Output.empty() : this.seed;
    }

    public RandomIntegerArgs(
        @Nullable Output<Map<String,Object>> keepers,
        Output<Integer> max,
        Output<Integer> min,
        @Nullable Output<String> seed) {
        this.keepers = keepers;
        this.max = Objects.requireNonNull(max, "expected parameter 'max' to be non-null");
        this.min = Objects.requireNonNull(min, "expected parameter 'min' to be non-null");
        this.seed = seed;
    }

    private RandomIntegerArgs() {
        this.keepers = Output.empty();
        this.max = Output.empty();
        this.min = Output.empty();
        this.seed = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RandomIntegerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,Object>> keepers;
        private Output<Integer> max;
        private Output<Integer> min;
        private @Nullable Output<String> seed;

        public Builder() {
    	      // Empty
        }

        public Builder(RandomIntegerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keepers = defaults.keepers;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.seed = defaults.seed;
        }

        public Builder keepers(@Nullable Output<Map<String,Object>> keepers) {
            this.keepers = keepers;
            return this;
        }

        public Builder keepers(@Nullable Map<String,Object> keepers) {
            this.keepers = Output.ofNullable(keepers);
            return this;
        }

        public Builder max(Output<Integer> max) {
            this.max = Objects.requireNonNull(max);
            return this;
        }

        public Builder max(Integer max) {
            this.max = Output.of(Objects.requireNonNull(max));
            return this;
        }

        public Builder min(Output<Integer> min) {
            this.min = Objects.requireNonNull(min);
            return this;
        }

        public Builder min(Integer min) {
            this.min = Output.of(Objects.requireNonNull(min));
            return this;
        }

        public Builder seed(@Nullable Output<String> seed) {
            this.seed = seed;
            return this;
        }

        public Builder seed(@Nullable String seed) {
            this.seed = Output.ofNullable(seed);
            return this;
        }
        public RandomIntegerArgs build() {
            return new RandomIntegerArgs(keepers, max, min, seed);
        }
    }
}
