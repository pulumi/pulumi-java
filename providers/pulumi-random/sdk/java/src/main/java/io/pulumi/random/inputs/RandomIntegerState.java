// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.random.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RandomIntegerState extends io.pulumi.resources.ResourceArgs {

    public static final RandomIntegerState Empty = new RandomIntegerState();

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     * 
     */
    @InputImport(name="keepers")
    private final @Nullable Input<Map<String,Object>> keepers;

    public Input<Map<String,Object>> getKeepers() {
        return this.keepers == null ? Input.empty() : this.keepers;
    }

    /**
     * The maximum inclusive value of the range.
     * 
     */
    @InputImport(name="max")
    private final @Nullable Input<Integer> max;

    public Input<Integer> getMax() {
        return this.max == null ? Input.empty() : this.max;
    }

    /**
     * The minimum inclusive value of the range.
     * 
     */
    @InputImport(name="min")
    private final @Nullable Input<Integer> min;

    public Input<Integer> getMin() {
        return this.min == null ? Input.empty() : this.min;
    }

    /**
     * The random integer result.
     * 
     */
    @InputImport(name="result")
    private final @Nullable Input<Integer> result;

    public Input<Integer> getResult() {
        return this.result == null ? Input.empty() : this.result;
    }

    /**
     * A custom seed to always produce the same value.
     * 
     */
    @InputImport(name="seed")
    private final @Nullable Input<String> seed;

    public Input<String> getSeed() {
        return this.seed == null ? Input.empty() : this.seed;
    }

    public RandomIntegerState(
        @Nullable Input<Map<String,Object>> keepers,
        @Nullable Input<Integer> max,
        @Nullable Input<Integer> min,
        @Nullable Input<Integer> result,
        @Nullable Input<String> seed) {
        this.keepers = keepers;
        this.max = max;
        this.min = min;
        this.result = result;
        this.seed = seed;
    }

    private RandomIntegerState() {
        this.keepers = Input.empty();
        this.max = Input.empty();
        this.min = Input.empty();
        this.result = Input.empty();
        this.seed = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RandomIntegerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,Object>> keepers;
        private @Nullable Input<Integer> max;
        private @Nullable Input<Integer> min;
        private @Nullable Input<Integer> result;
        private @Nullable Input<String> seed;

        public Builder() {
    	      // Empty
        }

        public Builder(RandomIntegerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keepers = defaults.keepers;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.result = defaults.result;
    	      this.seed = defaults.seed;
        }

        public Builder setKeepers(@Nullable Input<Map<String,Object>> keepers) {
            this.keepers = keepers;
            return this;
        }

        public Builder setKeepers(@Nullable Map<String,Object> keepers) {
            this.keepers = Input.ofNullable(keepers);
            return this;
        }

        public Builder setMax(@Nullable Input<Integer> max) {
            this.max = max;
            return this;
        }

        public Builder setMax(@Nullable Integer max) {
            this.max = Input.ofNullable(max);
            return this;
        }

        public Builder setMin(@Nullable Input<Integer> min) {
            this.min = min;
            return this;
        }

        public Builder setMin(@Nullable Integer min) {
            this.min = Input.ofNullable(min);
            return this;
        }

        public Builder setResult(@Nullable Input<Integer> result) {
            this.result = result;
            return this;
        }

        public Builder setResult(@Nullable Integer result) {
            this.result = Input.ofNullable(result);
            return this;
        }

        public Builder setSeed(@Nullable Input<String> seed) {
            this.seed = seed;
            return this;
        }

        public Builder setSeed(@Nullable String seed) {
            this.seed = Input.ofNullable(seed);
            return this;
        }

        public RandomIntegerState build() {
            return new RandomIntegerState(keepers, max, min, result, seed);
        }
    }
}
