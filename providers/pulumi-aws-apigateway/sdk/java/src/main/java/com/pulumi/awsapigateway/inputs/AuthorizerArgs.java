// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsapigateway.inputs;

import com.pulumi.aws.lambda.Function;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * LambdaAuthorizer provides the definition for a custom Authorizer for API Gateway.
 * 
 */
public final class AuthorizerArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizerArgs Empty = new AuthorizerArgs();

    /**
     * Specifies the authorization mechanism for the client. Typical values are &#34;oauth2&#34; or &#34;custom&#34;.
     * 
     */
    @Import(name="authType")
    private @Nullable String authType;

    /**
     * @return Specifies the authorization mechanism for the client. Typical values are &#34;oauth2&#34; or &#34;custom&#34;.
     * 
     */
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * The name for the Authorizer to be referenced as. This must be unique for each unique
     * authorizer within the API. If no name if specified, a name will be generated for you.
     * 
     */
    @Import(name="authorizerName")
    private @Nullable String authorizerName;

    /**
     * @return The name for the Authorizer to be referenced as. This must be unique for each unique
     * authorizer within the API. If no name if specified, a name will be generated for you.
     * 
     */
    public Optional<String> authorizerName() {
        return Optional.ofNullable(this.authorizerName);
    }

    /**
     * The number of seconds during which the resulting IAM policy is cached. Default is 300s. You
     * can set this value to 0 to disable caching. Max value is 3600s. Note - if you are sharing an
     * authorizer across more than one route you will want to disable the cache or else it will
     * cause problems for you.
     * 
     */
    @Import(name="authorizerResultTtlInSeconds")
    private @Nullable Double authorizerResultTtlInSeconds;

    /**
     * @return The number of seconds during which the resulting IAM policy is cached. Default is 300s. You
     * can set this value to 0 to disable caching. Max value is 3600s. Note - if you are sharing an
     * authorizer across more than one route you will want to disable the cache or else it will
     * cause problems for you.
     * 
     */
    public Optional<Double> authorizerResultTtlInSeconds() {
        return Optional.ofNullable(this.authorizerResultTtlInSeconds);
    }

    /**
     * The authorizerHandler specifies information about the authorizing Lambda.
     * 
     */
    @Import(name="handler")
    private @Nullable Output<Function> handler;

    /**
     * @return The authorizerHandler specifies information about the authorizing Lambda.
     * 
     */
    public Optional<Output<Function>> handler() {
        return Optional.ofNullable(this.handler);
    }

    /**
     * List of mapping expressions of the request parameters as the identity source. This indicates
     * where in the request identity information is expected. Applicable for the authorizer of the
     * &#34;request&#34; type only. Example: [&#34;method.request.header.HeaderAuth1&#34;,
     * &#34;method.request.querystring.QueryString1&#34;]
     * 
     */
    @Import(name="identitySource")
    private @Nullable List<String> identitySource;

    /**
     * @return List of mapping expressions of the request parameters as the identity source. This indicates
     * where in the request identity information is expected. Applicable for the authorizer of the
     * &#34;request&#34; type only. Example: [&#34;method.request.header.HeaderAuth1&#34;,
     * &#34;method.request.querystring.QueryString1&#34;]
     * 
     */
    public Optional<List<String>> identitySource() {
        return Optional.ofNullable(this.identitySource);
    }

    /**
     * A regular expression for validating the token as the incoming identity. It only invokes the
     * authorizer&#39;s lambda if there is a match, else it will return a 401. This does not apply to
     * REQUEST Lambda Authorizers. Example: &#34;^x-[a-z]+&#34;.
     * 
     */
    @Import(name="identityValidationExpression")
    private @Nullable String identityValidationExpression;

    /**
     * @return A regular expression for validating the token as the incoming identity. It only invokes the
     * authorizer&#39;s lambda if there is a match, else it will return a 401. This does not apply to
     * REQUEST Lambda Authorizers. Example: &#34;^x-[a-z]+&#34;.
     * 
     */
    public Optional<String> identityValidationExpression() {
        return Optional.ofNullable(this.identityValidationExpression);
    }

    /**
     * For method authorization, you can define resource servers and custom scopes by specifying the
     * &#34;resource-server/scope&#34;. e.g. [&#34;com.hamuta.movies/drama.view&#34;,
     * &#34;http://my.resource.com/file.read&#34;] For more information on resource servers and custom
     * scopes visit the AWS documentation -
     * https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html
     * 
     */
    @Import(name="methodsToAuthorize")
    private @Nullable List<String> methodsToAuthorize;

    /**
     * @return For method authorization, you can define resource servers and custom scopes by specifying the
     * &#34;resource-server/scope&#34;. e.g. [&#34;com.hamuta.movies/drama.view&#34;,
     * &#34;http://my.resource.com/file.read&#34;] For more information on resource servers and custom
     * scopes visit the AWS documentation -
     * https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html
     * 
     */
    public Optional<List<String>> methodsToAuthorize() {
        return Optional.ofNullable(this.methodsToAuthorize);
    }

    /**
     * Defines where in the request API Gateway should look for identity information. The value must
     * be &#34;header&#34; or &#34;query&#34;. If there are multiple identity sources, the value must be &#34;header&#34;.
     * 
     */
    @Import(name="parameterLocation")
    private @Nullable String parameterLocation;

    /**
     * @return Defines where in the request API Gateway should look for identity information. The value must
     * be &#34;header&#34; or &#34;query&#34;. If there are multiple identity sources, the value must be &#34;header&#34;.
     * 
     */
    public Optional<String> parameterLocation() {
        return Optional.ofNullable(this.parameterLocation);
    }

    /**
     * parameterName is the name of the header or query parameter containing the authorization
     * token. Must be &#34;Unused&#34; for multiple identity sources.
     * 
     */
    @Import(name="parameterName", required=true)
    private String parameterName;

    /**
     * @return parameterName is the name of the header or query parameter containing the authorization
     * token. Must be &#34;Unused&#34; for multiple identity sources.
     * 
     */
    public String parameterName() {
        return this.parameterName;
    }

    /**
     * The ARNs of the Cognito User Pools to use.
     * 
     */
    @Import(name="providerARNs")
    private @Nullable List<String> providerARNs;

    /**
     * @return The ARNs of the Cognito User Pools to use.
     * 
     */
    public Optional<List<String>> providerARNs() {
        return Optional.ofNullable(this.providerARNs);
    }

    /**
     * The type of the authorizer. This value must be one of the following:
     * - &#34;token&#34;, for an authorizer with the caller identity embedded in an authorization token
     * - &#34;request&#34;, for an authorizer with the caller identity contained in request parameters
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the authorizer. This value must be one of the following:
     * - &#34;token&#34;, for an authorizer with the caller identity embedded in an authorization token
     * - &#34;request&#34;, for an authorizer with the caller identity contained in request parameters
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private AuthorizerArgs() {}

    private AuthorizerArgs(AuthorizerArgs $) {
        this.authType = $.authType;
        this.authorizerName = $.authorizerName;
        this.authorizerResultTtlInSeconds = $.authorizerResultTtlInSeconds;
        this.handler = $.handler;
        this.identitySource = $.identitySource;
        this.identityValidationExpression = $.identityValidationExpression;
        this.methodsToAuthorize = $.methodsToAuthorize;
        this.parameterLocation = $.parameterLocation;
        this.parameterName = $.parameterName;
        this.providerARNs = $.providerARNs;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizerArgs $;

        public Builder() {
            $ = new AuthorizerArgs();
        }

        public Builder(AuthorizerArgs defaults) {
            $ = new AuthorizerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType Specifies the authorization mechanism for the client. Typical values are &#34;oauth2&#34; or &#34;custom&#34;.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable String authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authorizerName The name for the Authorizer to be referenced as. This must be unique for each unique
         * authorizer within the API. If no name if specified, a name will be generated for you.
         * 
         * @return builder
         * 
         */
        public Builder authorizerName(@Nullable String authorizerName) {
            $.authorizerName = authorizerName;
            return this;
        }

        /**
         * @param authorizerResultTtlInSeconds The number of seconds during which the resulting IAM policy is cached. Default is 300s. You
         * can set this value to 0 to disable caching. Max value is 3600s. Note - if you are sharing an
         * authorizer across more than one route you will want to disable the cache or else it will
         * cause problems for you.
         * 
         * @return builder
         * 
         */
        public Builder authorizerResultTtlInSeconds(@Nullable Double authorizerResultTtlInSeconds) {
            $.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            return this;
        }

        /**
         * @param handler The authorizerHandler specifies information about the authorizing Lambda.
         * 
         * @return builder
         * 
         */
        public Builder handler(@Nullable Output<Function> handler) {
            $.handler = handler;
            return this;
        }

        /**
         * @param handler The authorizerHandler specifies information about the authorizing Lambda.
         * 
         * @return builder
         * 
         */
        public Builder handler(Function handler) {
            return handler(Output.of(handler));
        }

        /**
         * @param identitySource List of mapping expressions of the request parameters as the identity source. This indicates
         * where in the request identity information is expected. Applicable for the authorizer of the
         * &#34;request&#34; type only. Example: [&#34;method.request.header.HeaderAuth1&#34;,
         * &#34;method.request.querystring.QueryString1&#34;]
         * 
         * @return builder
         * 
         */
        public Builder identitySource(@Nullable List<String> identitySource) {
            $.identitySource = identitySource;
            return this;
        }

        /**
         * @param identitySource List of mapping expressions of the request parameters as the identity source. This indicates
         * where in the request identity information is expected. Applicable for the authorizer of the
         * &#34;request&#34; type only. Example: [&#34;method.request.header.HeaderAuth1&#34;,
         * &#34;method.request.querystring.QueryString1&#34;]
         * 
         * @return builder
         * 
         */
        public Builder identitySource(String... identitySource) {
            return identitySource(List.of(identitySource));
        }

        /**
         * @param identityValidationExpression A regular expression for validating the token as the incoming identity. It only invokes the
         * authorizer&#39;s lambda if there is a match, else it will return a 401. This does not apply to
         * REQUEST Lambda Authorizers. Example: &#34;^x-[a-z]+&#34;.
         * 
         * @return builder
         * 
         */
        public Builder identityValidationExpression(@Nullable String identityValidationExpression) {
            $.identityValidationExpression = identityValidationExpression;
            return this;
        }

        /**
         * @param methodsToAuthorize For method authorization, you can define resource servers and custom scopes by specifying the
         * &#34;resource-server/scope&#34;. e.g. [&#34;com.hamuta.movies/drama.view&#34;,
         * &#34;http://my.resource.com/file.read&#34;] For more information on resource servers and custom
         * scopes visit the AWS documentation -
         * https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html
         * 
         * @return builder
         * 
         */
        public Builder methodsToAuthorize(@Nullable List<String> methodsToAuthorize) {
            $.methodsToAuthorize = methodsToAuthorize;
            return this;
        }

        /**
         * @param methodsToAuthorize For method authorization, you can define resource servers and custom scopes by specifying the
         * &#34;resource-server/scope&#34;. e.g. [&#34;com.hamuta.movies/drama.view&#34;,
         * &#34;http://my.resource.com/file.read&#34;] For more information on resource servers and custom
         * scopes visit the AWS documentation -
         * https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html
         * 
         * @return builder
         * 
         */
        public Builder methodsToAuthorize(String... methodsToAuthorize) {
            return methodsToAuthorize(List.of(methodsToAuthorize));
        }

        /**
         * @param parameterLocation Defines where in the request API Gateway should look for identity information. The value must
         * be &#34;header&#34; or &#34;query&#34;. If there are multiple identity sources, the value must be &#34;header&#34;.
         * 
         * @return builder
         * 
         */
        public Builder parameterLocation(@Nullable String parameterLocation) {
            $.parameterLocation = parameterLocation;
            return this;
        }

        /**
         * @param parameterName parameterName is the name of the header or query parameter containing the authorization
         * token. Must be &#34;Unused&#34; for multiple identity sources.
         * 
         * @return builder
         * 
         */
        public Builder parameterName(String parameterName) {
            $.parameterName = parameterName;
            return this;
        }

        /**
         * @param providerARNs The ARNs of the Cognito User Pools to use.
         * 
         * @return builder
         * 
         */
        public Builder providerARNs(@Nullable List<String> providerARNs) {
            $.providerARNs = providerARNs;
            return this;
        }

        /**
         * @param providerARNs The ARNs of the Cognito User Pools to use.
         * 
         * @return builder
         * 
         */
        public Builder providerARNs(String... providerARNs) {
            return providerARNs(List.of(providerARNs));
        }

        /**
         * @param type The type of the authorizer. This value must be one of the following:
         * - &#34;token&#34;, for an authorizer with the caller identity embedded in an authorization token
         * - &#34;request&#34;, for an authorizer with the caller identity contained in request parameters
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public AuthorizerArgs build() {
            $.parameterName = Objects.requireNonNull($.parameterName, "expected parameter 'parameterName' to be non-null");
            return $;
        }
    }

}
