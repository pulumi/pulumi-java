// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.billing;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.billing.inputs.AccountIamMemberConditionArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccountIamMemberArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccountIamMemberArgs Empty = new AccountIamMemberArgs();

    @InputImport(name="billingAccountId", required=true)
      private final Input<String> billingAccountId;

    public Input<String> getBillingAccountId() {
        return this.billingAccountId;
    }

    @InputImport(name="condition")
      private final @Nullable Input<AccountIamMemberConditionArgs> condition;

    public Input<AccountIamMemberConditionArgs> getCondition() {
        return this.condition == null ? Input.empty() : this.condition;
    }

    @InputImport(name="member", required=true)
      private final Input<String> member;

    public Input<String> getMember() {
        return this.member;
    }

    @InputImport(name="role", required=true)
      private final Input<String> role;

    public Input<String> getRole() {
        return this.role;
    }

    public AccountIamMemberArgs(
        Input<String> billingAccountId,
        @Nullable Input<AccountIamMemberConditionArgs> condition,
        Input<String> member,
        Input<String> role) {
        this.billingAccountId = Objects.requireNonNull(billingAccountId, "expected parameter 'billingAccountId' to be non-null");
        this.condition = condition;
        this.member = Objects.requireNonNull(member, "expected parameter 'member' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
    }

    private AccountIamMemberArgs() {
        this.billingAccountId = Input.empty();
        this.condition = Input.empty();
        this.member = Input.empty();
        this.role = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountIamMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> billingAccountId;
        private @Nullable Input<AccountIamMemberConditionArgs> condition;
        private Input<String> member;
        private Input<String> role;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountIamMemberArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingAccountId = defaults.billingAccountId;
    	      this.condition = defaults.condition;
    	      this.member = defaults.member;
    	      this.role = defaults.role;
        }

        public Builder billingAccountId(Input<String> billingAccountId) {
            this.billingAccountId = Objects.requireNonNull(billingAccountId);
            return this;
        }

        public Builder billingAccountId(String billingAccountId) {
            this.billingAccountId = Input.of(Objects.requireNonNull(billingAccountId));
            return this;
        }

        public Builder condition(@Nullable Input<AccountIamMemberConditionArgs> condition) {
            this.condition = condition;
            return this;
        }

        public Builder condition(@Nullable AccountIamMemberConditionArgs condition) {
            this.condition = Input.ofNullable(condition);
            return this;
        }

        public Builder member(Input<String> member) {
            this.member = Objects.requireNonNull(member);
            return this;
        }

        public Builder member(String member) {
            this.member = Input.of(Objects.requireNonNull(member));
            return this;
        }

        public Builder role(Input<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }

        public Builder role(String role) {
            this.role = Input.of(Objects.requireNonNull(role));
            return this;
        }
        public AccountIamMemberArgs build() {
            return new AccountIamMemberArgs(billingAccountId, condition, member, role);
        }
    }
}
