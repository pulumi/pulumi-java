// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.container.AwsNodePoolArgs;
import io.pulumi.gcp.container.inputs.AwsNodePoolState;
import io.pulumi.gcp.container.outputs.AwsNodePoolAutoscaling;
import io.pulumi.gcp.container.outputs.AwsNodePoolConfig;
import io.pulumi.gcp.container.outputs.AwsNodePoolMaxPodsConstraint;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * An Anthos node pool running on AWS.
 * 
 * For more information, see:
 * * [Multicloud overview](https://cloud.google.com/anthos/clusters/docs/multi-cloud)
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic_aws_cluster
 * A basic example of a containeraws node pool
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const versions = gcp.container.getAwsVersions({
 *     project: "my-project-name",
 *     location: "us-west1",
 * });
 * const primaryAwsCluster = new gcp.container.AwsCluster("primaryAwsCluster", {
 *     authorization: {
 *         adminUsers: [{
 *             username: "emailAddress:my@service-account.com",
 *         }],
 *     },
 *     awsRegion: "my-aws-region",
 *     controlPlane: {
 *         awsServicesAuthentication: {
 *             roleArn: "arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
 *             roleSessionName: "my--1p-dev-session",
 *         },
 *         configEncryption: {
 *             kmsKeyArn: "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *         },
 *         databaseEncryption: {
 *             kmsKeyArn: "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *         },
 *         iamInstanceProfile: "my--1p-dev-controlplane",
 *         subnetIds: ["subnet-00000000000000000"],
 *         version: versions.then(versions => versions.validVersions?[0]),
 *         instanceType: "t3.medium",
 *         mainVolume: {
 *             iops: 3000,
 *             kmsKeyArn: "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *             sizeGib: 10,
 *             volumeType: "GP3",
 *         },
 *         proxyConfig: {
 *             secretArn: "arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
 *             secretVersion: "12345678-ABCD-EFGH-IJKL-987654321098",
 *         },
 *         rootVolume: {
 *             iops: 3000,
 *             kmsKeyArn: "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *             sizeGib: 10,
 *             volumeType: "GP3",
 *         },
 *         securityGroupIds: ["sg-00000000000000000"],
 *         sshConfig: {
 *             ec2KeyPair: "my--1p-dev-ssh",
 *         },
 *         tags: {
 *             owner: "emailAddress:my@service-account.com",
 *         },
 *     },
 *     fleet: {
 *         project: "my-project-number",
 *     },
 *     location: "us-west1",
 *     networking: {
 *         podAddressCidrBlocks: ["10.2.0.0/16"],
 *         serviceAddressCidrBlocks: ["10.1.0.0/16"],
 *         vpcId: "vpc-00000000000000000",
 *     },
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 *     description: "A sample aws cluster",
 *     project: "my-project-name",
 * });
 * const primaryAwsNodePool = new gcp.container.AwsNodePool("primaryAwsNodePool", {
 *     autoscaling: {
 *         maxNodeCount: 5,
 *         minNodeCount: 1,
 *     },
 *     cluster: primaryAwsCluster.name,
 *     config: {
 *         configEncryption: {
 *             kmsKeyArn: "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *         },
 *         iamInstanceProfile: "my--1p-dev-nodepool",
 *         instanceType: "t3.medium",
 *         labels: {
 *             "label-one": "value-one",
 *         },
 *         rootVolume: {
 *             iops: 3000,
 *             kmsKeyArn: "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *             sizeGib: 10,
 *             volumeType: "GP3",
 *         },
 *         securityGroupIds: ["sg-00000000000000000"],
 *         sshConfig: {
 *             ec2KeyPair: "my--1p-dev-ssh",
 *         },
 *         tags: {
 *             "tag-one": "value-one",
 *         },
 *         taints: [{
 *             effect: "PREFER_NO_SCHEDULE",
 *             key: "taint-key",
 *             value: "taint-value",
 *         }],
 *     },
 *     location: "us-west1",
 *     maxPodsConstraint: {
 *         maxPodsPerNode: 110,
 *     },
 *     subnetId: "subnet-00000000000000000",
 *     version: versions.then(versions => versions.validVersions?[0]),
 *     annotations: {
 *         "label-one": "value-one",
 *     },
 *     project: "my-project-name",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * versions = gcp.container.get_aws_versions(project="my-project-name",
 *     location="us-west1")
 * primary_aws_cluster = gcp.container.AwsCluster("primaryAwsCluster",
 *     authorization=gcp.container.AwsClusterAuthorizationArgs(
 *         admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
 *             username="emailAddress:my@service-account.com",
 *         )],
 *     ),
 *     aws_region="my-aws-region",
 *     control_plane=gcp.container.AwsClusterControlPlaneArgs(
 *         aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
 *             role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
 *             role_session_name="my--1p-dev-session",
 *         ),
 *         config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
 *             kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *         ),
 *         database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
 *             kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *         ),
 *         iam_instance_profile="my--1p-dev-controlplane",
 *         subnet_ids=["subnet-00000000000000000"],
 *         version=versions.valid_versions[0],
 *         instance_type="t3.medium",
 *         main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
 *             iops=3000,
 *             kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *             size_gib=10,
 *             volume_type="GP3",
 *         ),
 *         proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
 *             secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
 *             secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
 *         ),
 *         root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
 *             iops=3000,
 *             kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *             size_gib=10,
 *             volume_type="GP3",
 *         ),
 *         security_group_ids=["sg-00000000000000000"],
 *         ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
 *             ec2_key_pair="my--1p-dev-ssh",
 *         ),
 *         tags={
 *             "owner": "emailAddress:my@service-account.com",
 *         },
 *     ),
 *     fleet=gcp.container.AwsClusterFleetArgs(
 *         project="my-project-number",
 *     ),
 *     location="us-west1",
 *     networking=gcp.container.AwsClusterNetworkingArgs(
 *         pod_address_cidr_blocks=["10.2.0.0/16"],
 *         service_address_cidr_blocks=["10.1.0.0/16"],
 *         vpc_id="vpc-00000000000000000",
 *     ),
 *     annotations={
 *         "label-one": "value-one",
 *     },
 *     description="A sample aws cluster",
 *     project="my-project-name")
 * primary_aws_node_pool = gcp.container.AwsNodePool("primaryAwsNodePool",
 *     autoscaling=gcp.container.AwsNodePoolAutoscalingArgs(
 *         max_node_count=5,
 *         min_node_count=1,
 *     ),
 *     cluster=primary_aws_cluster.name,
 *     config=gcp.container.AwsNodePoolConfigArgs(
 *         config_encryption=gcp.container.AwsNodePoolConfigConfigEncryptionArgs(
 *             kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *         ),
 *         iam_instance_profile="my--1p-dev-nodepool",
 *         instance_type="t3.medium",
 *         labels={
 *             "label-one": "value-one",
 *         },
 *         root_volume=gcp.container.AwsNodePoolConfigRootVolumeArgs(
 *             iops=3000,
 *             kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *             size_gib=10,
 *             volume_type="GP3",
 *         ),
 *         security_group_ids=["sg-00000000000000000"],
 *         ssh_config=gcp.container.AwsNodePoolConfigSshConfigArgs(
 *             ec2_key_pair="my--1p-dev-ssh",
 *         ),
 *         tags={
 *             "tag-one": "value-one",
 *         },
 *         taints=[gcp.container.AwsNodePoolConfigTaintArgs(
 *             effect="PREFER_NO_SCHEDULE",
 *             key="taint-key",
 *             value="taint-value",
 *         )],
 *     ),
 *     location="us-west1",
 *     max_pods_constraint=gcp.container.AwsNodePoolMaxPodsConstraintArgs(
 *         max_pods_per_node=110,
 *     ),
 *     subnet_id="subnet-00000000000000000",
 *     version=versions.valid_versions[0],
 *     annotations={
 *         "label-one": "value-one",
 *     },
 *     project="my-project-name")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var versions = Output.Create(Gcp.Container.GetAwsVersions.InvokeAsync(new Gcp.Container.GetAwsVersionsArgs
 *         {
 *             Project = "my-project-name",
 *             Location = "us-west1",
 *         }));
 *         var primaryAwsCluster = new Gcp.Container.AwsCluster("primaryAwsCluster", new Gcp.Container.AwsClusterArgs
 *         {
 *             Authorization = new Gcp.Container.Inputs.AwsClusterAuthorizationArgs
 *             {
 *                 AdminUsers = 
 *                 {
 *                     new Gcp.Container.Inputs.AwsClusterAuthorizationAdminUserArgs
 *                     {
 *                         Username = "emailAddress:my@service-account.com",
 *                     },
 *                 },
 *             },
 *             AwsRegion = "my-aws-region",
 *             ControlPlane = new Gcp.Container.Inputs.AwsClusterControlPlaneArgs
 *             {
 *                 AwsServicesAuthentication = new Gcp.Container.Inputs.AwsClusterControlPlaneAwsServicesAuthenticationArgs
 *                 {
 *                     RoleArn = "arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
 *                     RoleSessionName = "my--1p-dev-session",
 *                 },
 *                 ConfigEncryption = new Gcp.Container.Inputs.AwsClusterControlPlaneConfigEncryptionArgs
 *                 {
 *                     KmsKeyArn = "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *                 },
 *                 DatabaseEncryption = new Gcp.Container.Inputs.AwsClusterControlPlaneDatabaseEncryptionArgs
 *                 {
 *                     KmsKeyArn = "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *                 },
 *                 IamInstanceProfile = "my--1p-dev-controlplane",
 *                 SubnetIds = 
 *                 {
 *                     "subnet-00000000000000000",
 *                 },
 *                 Version = versions.Apply(versions => versions.ValidVersions?[0]),
 *                 InstanceType = "t3.medium",
 *                 MainVolume = new Gcp.Container.Inputs.AwsClusterControlPlaneMainVolumeArgs
 *                 {
 *                     Iops = 3000,
 *                     KmsKeyArn = "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *                     SizeGib = 10,
 *                     VolumeType = "GP3",
 *                 },
 *                 ProxyConfig = new Gcp.Container.Inputs.AwsClusterControlPlaneProxyConfigArgs
 *                 {
 *                     SecretArn = "arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
 *                     SecretVersion = "12345678-ABCD-EFGH-IJKL-987654321098",
 *                 },
 *                 RootVolume = new Gcp.Container.Inputs.AwsClusterControlPlaneRootVolumeArgs
 *                 {
 *                     Iops = 3000,
 *                     KmsKeyArn = "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *                     SizeGib = 10,
 *                     VolumeType = "GP3",
 *                 },
 *                 SecurityGroupIds = 
 *                 {
 *                     "sg-00000000000000000",
 *                 },
 *                 SshConfig = new Gcp.Container.Inputs.AwsClusterControlPlaneSshConfigArgs
 *                 {
 *                     Ec2KeyPair = "my--1p-dev-ssh",
 *                 },
 *                 Tags = 
 *                 {
 *                     { "owner", "emailAddress:my@service-account.com" },
 *                 },
 *             },
 *             Fleet = new Gcp.Container.Inputs.AwsClusterFleetArgs
 *             {
 *                 Project = "my-project-number",
 *             },
 *             Location = "us-west1",
 *             Networking = new Gcp.Container.Inputs.AwsClusterNetworkingArgs
 *             {
 *                 PodAddressCidrBlocks = 
 *                 {
 *                     "10.2.0.0/16",
 *                 },
 *                 ServiceAddressCidrBlocks = 
 *                 {
 *                     "10.1.0.0/16",
 *                 },
 *                 VpcId = "vpc-00000000000000000",
 *             },
 *             Annotations = 
 *             {
 *                 { "label-one", "value-one" },
 *             },
 *             Description = "A sample aws cluster",
 *             Project = "my-project-name",
 *         });
 *         var primaryAwsNodePool = new Gcp.Container.AwsNodePool("primaryAwsNodePool", new Gcp.Container.AwsNodePoolArgs
 *         {
 *             Autoscaling = new Gcp.Container.Inputs.AwsNodePoolAutoscalingArgs
 *             {
 *                 MaxNodeCount = 5,
 *                 MinNodeCount = 1,
 *             },
 *             Cluster = primaryAwsCluster.Name,
 *             Config = new Gcp.Container.Inputs.AwsNodePoolConfigArgs
 *             {
 *                 ConfigEncryption = new Gcp.Container.Inputs.AwsNodePoolConfigConfigEncryptionArgs
 *                 {
 *                     KmsKeyArn = "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *                 },
 *                 IamInstanceProfile = "my--1p-dev-nodepool",
 *                 InstanceType = "t3.medium",
 *                 Labels = 
 *                 {
 *                     { "label-one", "value-one" },
 *                 },
 *                 RootVolume = new Gcp.Container.Inputs.AwsNodePoolConfigRootVolumeArgs
 *                 {
 *                     Iops = 3000,
 *                     KmsKeyArn = "arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
 *                     SizeGib = 10,
 *                     VolumeType = "GP3",
 *                 },
 *                 SecurityGroupIds = 
 *                 {
 *                     "sg-00000000000000000",
 *                 },
 *                 SshConfig = new Gcp.Container.Inputs.AwsNodePoolConfigSshConfigArgs
 *                 {
 *                     Ec2KeyPair = "my--1p-dev-ssh",
 *                 },
 *                 Tags = 
 *                 {
 *                     { "tag-one", "value-one" },
 *                 },
 *                 Taints = 
 *                 {
 *                     new Gcp.Container.Inputs.AwsNodePoolConfigTaintArgs
 *                     {
 *                         Effect = "PREFER_NO_SCHEDULE",
 *                         Key = "taint-key",
 *                         Value = "taint-value",
 *                     },
 *                 },
 *             },
 *             Location = "us-west1",
 *             MaxPodsConstraint = new Gcp.Container.Inputs.AwsNodePoolMaxPodsConstraintArgs
 *             {
 *                 MaxPodsPerNode = 110,
 *             },
 *             SubnetId = "subnet-00000000000000000",
 *             Version = versions.Apply(versions => versions.ValidVersions?[0]),
 *             Annotations = 
 *             {
 *                 { "label-one", "value-one" },
 *             },
 *             Project = "my-project-name",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "my-project-name"
 * 		opt1 := "us-west1"
 * 		versions, err := container.GetAwsVersions(ctx, &container.GetAwsVersionsArgs{
 * 			Project:  &opt0,
 * 			Location: &opt1,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		primaryAwsCluster, err := container.NewAwsCluster(ctx, "primaryAwsCluster", &container.AwsClusterArgs{
 * 			Authorization: &container.AwsClusterAuthorizationArgs{
 * 				AdminUsers: container.AwsClusterAuthorizationAdminUserArray{
 * 					&container.AwsClusterAuthorizationAdminUserArgs{
 * 						Username: pulumi.String("emailAddress:my@service-account.com"),
 * 					},
 * 				},
 * 			},
 * 			AwsRegion: pulumi.String("my-aws-region"),
 * 			ControlPlane: &container.AwsClusterControlPlaneArgs{
 * 				AwsServicesAuthentication: &container.AwsClusterControlPlaneAwsServicesAuthenticationArgs{
 * 					RoleArn:         pulumi.String("arn:aws:iam::012345678910:role/my--1p-dev-oneplatform"),
 * 					RoleSessionName: pulumi.String("my--1p-dev-session"),
 * 				},
 * 				ConfigEncryption: &container.AwsClusterControlPlaneConfigEncryptionArgs{
 * 					KmsKeyArn: pulumi.String("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111"),
 * 				},
 * 				DatabaseEncryption: &container.AwsClusterControlPlaneDatabaseEncryptionArgs{
 * 					KmsKeyArn: pulumi.String("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111"),
 * 				},
 * 				IamInstanceProfile: pulumi.String("my--1p-dev-controlplane"),
 * 				SubnetIds: pulumi.StringArray{
 * 					pulumi.String("subnet-00000000000000000"),
 * 				},
 * 				Version:      pulumi.String(versions.ValidVersions[0]),
 * 				InstanceType: pulumi.String("t3.medium"),
 * 				MainVolume: &container.AwsClusterControlPlaneMainVolumeArgs{
 * 					Iops:       pulumi.Int(3000),
 * 					KmsKeyArn:  pulumi.String("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111"),
 * 					SizeGib:    pulumi.Int(10),
 * 					VolumeType: pulumi.String("GP3"),
 * 				},
 * 				ProxyConfig: &container.AwsClusterControlPlaneProxyConfigArgs{
 * 					SecretArn:     pulumi.String("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF"),
 * 					SecretVersion: pulumi.String("12345678-ABCD-EFGH-IJKL-987654321098"),
 * 				},
 * 				RootVolume: &container.AwsClusterControlPlaneRootVolumeArgs{
 * 					Iops:       pulumi.Int(3000),
 * 					KmsKeyArn:  pulumi.String("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111"),
 * 					SizeGib:    pulumi.Int(10),
 * 					VolumeType: pulumi.String("GP3"),
 * 				},
 * 				SecurityGroupIds: pulumi.StringArray{
 * 					pulumi.String("sg-00000000000000000"),
 * 				},
 * 				SshConfig: &container.AwsClusterControlPlaneSshConfigArgs{
 * 					Ec2KeyPair: pulumi.String("my--1p-dev-ssh"),
 * 				},
 * 				Tags: pulumi.StringMap{
 * 					"owner": pulumi.String("emailAddress:my@service-account.com"),
 * 				},
 * 			},
 * 			Fleet: &container.AwsClusterFleetArgs{
 * 				Project: pulumi.String("my-project-number"),
 * 			},
 * 			Location: pulumi.String("us-west1"),
 * 			Networking: &container.AwsClusterNetworkingArgs{
 * 				PodAddressCidrBlocks: pulumi.StringArray{
 * 					pulumi.String("10.2.0.0/16"),
 * 				},
 * 				ServiceAddressCidrBlocks: pulumi.StringArray{
 * 					pulumi.String("10.1.0.0/16"),
 * 				},
 * 				VpcId: pulumi.String("vpc-00000000000000000"),
 * 			},
 * 			Annotations: pulumi.StringMap{
 * 				"label-one": pulumi.String("value-one"),
 * 			},
 * 			Description: pulumi.String("A sample aws cluster"),
 * 			Project:     pulumi.String("my-project-name"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = container.NewAwsNodePool(ctx, "primaryAwsNodePool", &container.AwsNodePoolArgs{
 * 			Autoscaling: &container.AwsNodePoolAutoscalingArgs{
 * 				MaxNodeCount: pulumi.Int(5),
 * 				MinNodeCount: pulumi.Int(1),
 * 			},
 * 			Cluster: primaryAwsCluster.Name,
 * 			Config: &container.AwsNodePoolConfigArgs{
 * 				ConfigEncryption: &container.AwsNodePoolConfigConfigEncryptionArgs{
 * 					KmsKeyArn: pulumi.String("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111"),
 * 				},
 * 				IamInstanceProfile: pulumi.String("my--1p-dev-nodepool"),
 * 				InstanceType:       pulumi.String("t3.medium"),
 * 				Labels: pulumi.StringMap{
 * 					"label-one": pulumi.String("value-one"),
 * 				},
 * 				RootVolume: &container.AwsNodePoolConfigRootVolumeArgs{
 * 					Iops:       pulumi.Int(3000),
 * 					KmsKeyArn:  pulumi.String("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111"),
 * 					SizeGib:    pulumi.Int(10),
 * 					VolumeType: pulumi.String("GP3"),
 * 				},
 * 				SecurityGroupIds: pulumi.StringArray{
 * 					pulumi.String("sg-00000000000000000"),
 * 				},
 * 				SshConfig: &container.AwsNodePoolConfigSshConfigArgs{
 * 					Ec2KeyPair: pulumi.String("my--1p-dev-ssh"),
 * 				},
 * 				Tags: pulumi.StringMap{
 * 					"tag-one": pulumi.String("value-one"),
 * 				},
 * 				Taints: container.AwsNodePoolConfigTaintArray{
 * 					&container.AwsNodePoolConfigTaintArgs{
 * 						Effect: pulumi.String("PREFER_NO_SCHEDULE"),
 * 						Key:    pulumi.String("taint-key"),
 * 						Value:  pulumi.String("taint-value"),
 * 					},
 * 				},
 * 			},
 * 			Location: pulumi.String("us-west1"),
 * 			MaxPodsConstraint: &container.AwsNodePoolMaxPodsConstraintArgs{
 * 				MaxPodsPerNode: pulumi.Int(110),
 * 			},
 * 			SubnetId: pulumi.String("subnet-00000000000000000"),
 * 			Version:  pulumi.String(versions.ValidVersions[0]),
 * 			Annotations: pulumi.StringMap{
 * 				"label-one": pulumi.String("value-one"),
 * 			},
 * 			Project: pulumi.String("my-project-name"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * NodePool can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:container/awsNodePool:AwsNodePool default projects/{{project}}/locations/{{location}}/awsClusters/{{cluster}}/awsNodePools/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:container/awsNodePool:AwsNodePool default {{project}}/{{location}}/{{cluster}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:container/awsNodePool:AwsNodePool default {{location}}/{{cluster}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:container/awsNodePool:AwsNodePool")
public class AwsNodePool extends io.pulumi.resources.CustomResource {
    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Export(name="annotations", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getAnnotations() {
        return this.annotations;
    }
    /**
     * Required. Autoscaler configuration for this node pool.
     * 
     */
    @Export(name="autoscaling", type=AwsNodePoolAutoscaling.class, parameters={})
    private Output<AwsNodePoolAutoscaling> autoscaling;

    /**
     * @return Required. Autoscaler configuration for this node pool.
     * 
     */
    public Output<AwsNodePoolAutoscaling> getAutoscaling() {
        return this.autoscaling;
    }
    /**
     * The awsCluster for the resource
     * 
     */
    @Export(name="cluster", type=String.class, parameters={})
    private Output<String> cluster;

    /**
     * @return The awsCluster for the resource
     * 
     */
    public Output<String> getCluster() {
        return this.cluster;
    }
    /**
     * Required. The configuration of the node pool.
     * 
     */
    @Export(name="config", type=AwsNodePoolConfig.class, parameters={})
    private Output<AwsNodePoolConfig> config;

    /**
     * @return Required. The configuration of the node pool.
     * 
     */
    public Output<AwsNodePoolConfig> getConfig() {
        return this.config;
    }
    /**
     * Output only. The time at which this node pool was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Output only. The time at which this node pool was created.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
     * and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
     * and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Export(name="maxPodsConstraint", type=AwsNodePoolMaxPodsConstraint.class, parameters={})
    private Output<AwsNodePoolMaxPodsConstraint> maxPodsConstraint;

    /**
     * @return Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    public Output<AwsNodePoolMaxPodsConstraint> getMaxPodsConstraint() {
        return this.maxPodsConstraint;
    }
    /**
     * The name of this resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of this resource.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The project for the resource
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Output only. If set, there are currently changes in flight to the node pool.
     * 
     */
    @Export(name="reconciling", type=Boolean.class, parameters={})
    private Output<Boolean> reconciling;

    /**
     * @return Output only. If set, there are currently changes in flight to the node pool.
     * 
     */
    public Output<Boolean> getReconciling() {
        return this.reconciling;
    }
    /**
     * Output only. The lifecycle state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING,
     * RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return Output only. The lifecycle state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING,
     * RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * Required. The subnet where the node pool node run.
     * 
     */
    @Export(name="subnetId", type=String.class, parameters={})
    private Output<String> subnetId;

    /**
     * @return Required. The subnet where the node pool node run.
     * 
     */
    public Output<String> getSubnetId() {
        return this.subnetId;
    }
    /**
     * Output only. A globally unique identifier for the node pool.
     * 
     */
    @Export(name="uid", type=String.class, parameters={})
    private Output<String> uid;

    /**
     * @return Output only. A globally unique identifier for the node pool.
     * 
     */
    public Output<String> getUid() {
        return this.uid;
    }
    /**
     * Output only. The time at which this node pool was last updated.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Output only. The time at which this node pool was last updated.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }
    /**
     * Required. The Kubernetes version to run on this node pool (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAwsServerConfig.
     * 
     */
    @Export(name="version", type=String.class, parameters={})
    private Output<String> version;

    /**
     * @return Required. The Kubernetes version to run on this node pool (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAwsServerConfig.
     * 
     */
    public Output<String> getVersion() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AwsNodePool(String name) {
        this(name, AwsNodePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AwsNodePool(String name, AwsNodePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AwsNodePool(String name, AwsNodePoolArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:container/awsNodePool:AwsNodePool", name, args == null ? AwsNodePoolArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private AwsNodePool(String name, Output<String> id, @Nullable AwsNodePoolState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:container/awsNodePool:AwsNodePool", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AwsNodePool get(String name, Output<String> id, @Nullable AwsNodePoolState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new AwsNodePool(name, id, state, options);
    }
}
