// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildArtifactsGetArgs;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildAvailableSecretsGetArgs;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildOptionsGetArgs;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildSecretGetArgs;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildSourceGetArgs;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildStepGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerBuildGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerBuildGetArgs Empty = new TriggerBuildGetArgs();

    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     * Structure is documented below.
     * 
     */
    @InputImport(name="artifacts")
        private final @Nullable Input<TriggerBuildArtifactsGetArgs> artifacts;

    public Input<TriggerBuildArtifactsGetArgs> getArtifacts() {
        return this.artifacts == null ? Input.empty() : this.artifacts;
    }

    /**
     * Secrets and secret environment variables.
     * Structure is documented below.
     * 
     */
    @InputImport(name="availableSecrets")
        private final @Nullable Input<TriggerBuildAvailableSecretsGetArgs> availableSecrets;

    public Input<TriggerBuildAvailableSecretsGetArgs> getAvailableSecrets() {
        return this.availableSecrets == null ? Input.empty() : this.availableSecrets;
    }

    /**
     * A list of images to be pushed upon the successful completion of all build steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * 
     */
    @InputImport(name="images")
        private final @Nullable Input<List<String>> images;

    public Input<List<String>> getImages() {
        return this.images == null ? Input.empty() : this.images;
    }

    /**
     * Google Cloud Storage bucket where logs should be written.
     * Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
     * 
     */
    @InputImport(name="logsBucket")
        private final @Nullable Input<String> logsBucket;

    public Input<String> getLogsBucket() {
        return this.logsBucket == null ? Input.empty() : this.logsBucket;
    }

    /**
     * Special options for this build.
     * Structure is documented below.
     * 
     */
    @InputImport(name="options")
        private final @Nullable Input<TriggerBuildOptionsGetArgs> options;

    public Input<TriggerBuildOptionsGetArgs> getOptions() {
        return this.options == null ? Input.empty() : this.options;
    }

    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value,
     * the build will expire and the build status will be EXPIRED.
     * The TTL starts ticking from createTime.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @InputImport(name="queueTtl")
        private final @Nullable Input<String> queueTtl;

    public Input<String> getQueueTtl() {
        return this.queueTtl == null ? Input.empty() : this.queueTtl;
    }

    /**
     * Secrets to decrypt using Cloud Key Management Service.
     * Structure is documented below.
     * 
     */
    @InputImport(name="secrets")
        private final @Nullable Input<List<TriggerBuildSecretGetArgs>> secrets;

    public Input<List<TriggerBuildSecretGetArgs>> getSecrets() {
        return this.secrets == null ? Input.empty() : this.secrets;
    }

    /**
     * The location of the source files to build.
     * One of `storageSource` or `repoSource` must be provided.
     * Structure is documented below.
     * 
     */
    @InputImport(name="source")
        private final @Nullable Input<TriggerBuildSourceGetArgs> source;

    public Input<TriggerBuildSourceGetArgs> getSource() {
        return this.source == null ? Input.empty() : this.source;
    }

    /**
     * The operations to be performed on the workspace.
     * Structure is documented below.
     * 
     */
    @InputImport(name="steps", required=true)
        private final Input<List<TriggerBuildStepGetArgs>> steps;

    public Input<List<TriggerBuildStepGetArgs>> getSteps() {
        return this.steps;
    }

    /**
     * Substitutions to use in a triggered build. Should only be used with triggers.run
     * 
     */
    @InputImport(name="substitutions")
        private final @Nullable Input<Map<String,String>> substitutions;

    public Input<Map<String,String>> getSubstitutions() {
        return this.substitutions == null ? Input.empty() : this.substitutions;
    }

    /**
     * Tags for annotation of a Build. These are not docker tags.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<List<String>> tags;

    public Input<List<String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Time limit for executing this build step. If not defined,
     * the step has no
     * time limit and will be allowed to continue to run until either it
     * completes or the build itself times out.
     * 
     */
    @InputImport(name="timeout")
        private final @Nullable Input<String> timeout;

    public Input<String> getTimeout() {
        return this.timeout == null ? Input.empty() : this.timeout;
    }

    public TriggerBuildGetArgs(
        @Nullable Input<TriggerBuildArtifactsGetArgs> artifacts,
        @Nullable Input<TriggerBuildAvailableSecretsGetArgs> availableSecrets,
        @Nullable Input<List<String>> images,
        @Nullable Input<String> logsBucket,
        @Nullable Input<TriggerBuildOptionsGetArgs> options,
        @Nullable Input<String> queueTtl,
        @Nullable Input<List<TriggerBuildSecretGetArgs>> secrets,
        @Nullable Input<TriggerBuildSourceGetArgs> source,
        Input<List<TriggerBuildStepGetArgs>> steps,
        @Nullable Input<Map<String,String>> substitutions,
        @Nullable Input<List<String>> tags,
        @Nullable Input<String> timeout) {
        this.artifacts = artifacts;
        this.availableSecrets = availableSecrets;
        this.images = images;
        this.logsBucket = logsBucket;
        this.options = options;
        this.queueTtl = queueTtl;
        this.secrets = secrets;
        this.source = source;
        this.steps = Objects.requireNonNull(steps, "expected parameter 'steps' to be non-null");
        this.substitutions = substitutions;
        this.tags = tags;
        this.timeout = timeout;
    }

    private TriggerBuildGetArgs() {
        this.artifacts = Input.empty();
        this.availableSecrets = Input.empty();
        this.images = Input.empty();
        this.logsBucket = Input.empty();
        this.options = Input.empty();
        this.queueTtl = Input.empty();
        this.secrets = Input.empty();
        this.source = Input.empty();
        this.steps = Input.empty();
        this.substitutions = Input.empty();
        this.tags = Input.empty();
        this.timeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBuildGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<TriggerBuildArtifactsGetArgs> artifacts;
        private @Nullable Input<TriggerBuildAvailableSecretsGetArgs> availableSecrets;
        private @Nullable Input<List<String>> images;
        private @Nullable Input<String> logsBucket;
        private @Nullable Input<TriggerBuildOptionsGetArgs> options;
        private @Nullable Input<String> queueTtl;
        private @Nullable Input<List<TriggerBuildSecretGetArgs>> secrets;
        private @Nullable Input<TriggerBuildSourceGetArgs> source;
        private Input<List<TriggerBuildStepGetArgs>> steps;
        private @Nullable Input<Map<String,String>> substitutions;
        private @Nullable Input<List<String>> tags;
        private @Nullable Input<String> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerBuildGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.availableSecrets = defaults.availableSecrets;
    	      this.images = defaults.images;
    	      this.logsBucket = defaults.logsBucket;
    	      this.options = defaults.options;
    	      this.queueTtl = defaults.queueTtl;
    	      this.secrets = defaults.secrets;
    	      this.source = defaults.source;
    	      this.steps = defaults.steps;
    	      this.substitutions = defaults.substitutions;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
        }

        public Builder setArtifacts(@Nullable Input<TriggerBuildArtifactsGetArgs> artifacts) {
            this.artifacts = artifacts;
            return this;
        }

        public Builder setArtifacts(@Nullable TriggerBuildArtifactsGetArgs artifacts) {
            this.artifacts = Input.ofNullable(artifacts);
            return this;
        }

        public Builder setAvailableSecrets(@Nullable Input<TriggerBuildAvailableSecretsGetArgs> availableSecrets) {
            this.availableSecrets = availableSecrets;
            return this;
        }

        public Builder setAvailableSecrets(@Nullable TriggerBuildAvailableSecretsGetArgs availableSecrets) {
            this.availableSecrets = Input.ofNullable(availableSecrets);
            return this;
        }

        public Builder setImages(@Nullable Input<List<String>> images) {
            this.images = images;
            return this;
        }

        public Builder setImages(@Nullable List<String> images) {
            this.images = Input.ofNullable(images);
            return this;
        }

        public Builder setLogsBucket(@Nullable Input<String> logsBucket) {
            this.logsBucket = logsBucket;
            return this;
        }

        public Builder setLogsBucket(@Nullable String logsBucket) {
            this.logsBucket = Input.ofNullable(logsBucket);
            return this;
        }

        public Builder setOptions(@Nullable Input<TriggerBuildOptionsGetArgs> options) {
            this.options = options;
            return this;
        }

        public Builder setOptions(@Nullable TriggerBuildOptionsGetArgs options) {
            this.options = Input.ofNullable(options);
            return this;
        }

        public Builder setQueueTtl(@Nullable Input<String> queueTtl) {
            this.queueTtl = queueTtl;
            return this;
        }

        public Builder setQueueTtl(@Nullable String queueTtl) {
            this.queueTtl = Input.ofNullable(queueTtl);
            return this;
        }

        public Builder setSecrets(@Nullable Input<List<TriggerBuildSecretGetArgs>> secrets) {
            this.secrets = secrets;
            return this;
        }

        public Builder setSecrets(@Nullable List<TriggerBuildSecretGetArgs> secrets) {
            this.secrets = Input.ofNullable(secrets);
            return this;
        }

        public Builder setSource(@Nullable Input<TriggerBuildSourceGetArgs> source) {
            this.source = source;
            return this;
        }

        public Builder setSource(@Nullable TriggerBuildSourceGetArgs source) {
            this.source = Input.ofNullable(source);
            return this;
        }

        public Builder setSteps(Input<List<TriggerBuildStepGetArgs>> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }

        public Builder setSteps(List<TriggerBuildStepGetArgs> steps) {
            this.steps = Input.of(Objects.requireNonNull(steps));
            return this;
        }

        public Builder setSubstitutions(@Nullable Input<Map<String,String>> substitutions) {
            this.substitutions = substitutions;
            return this;
        }

        public Builder setSubstitutions(@Nullable Map<String,String> substitutions) {
            this.substitutions = Input.ofNullable(substitutions);
            return this;
        }

        public Builder setTags(@Nullable Input<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTimeout(@Nullable Input<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = Input.ofNullable(timeout);
            return this;
        }
        public TriggerBuildGetArgs build() {
            return new TriggerBuildGetArgs(artifacts, availableSecrets, images, logsBucket, options, queueTtl, secrets, source, steps, substitutions, tags, timeout);
        }
    }
}
