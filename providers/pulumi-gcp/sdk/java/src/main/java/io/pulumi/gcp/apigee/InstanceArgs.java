// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.apigee;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="diskEncryptionKeyName")
    private final @Nullable Input<String> diskEncryptionKeyName;

    public Input<String> getDiskEncryptionKeyName() {
        return this.diskEncryptionKeyName == null ? Input.empty() : this.diskEncryptionKeyName;
    }

    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    @InputImport(name="ipRange")
    private final @Nullable Input<String> ipRange;

    public Input<String> getIpRange() {
        return this.ipRange == null ? Input.empty() : this.ipRange;
    }

    @InputImport(name="location", required=true)
    private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="orgId", required=true)
    private final Input<String> orgId;

    public Input<String> getOrgId() {
        return this.orgId;
    }

    @InputImport(name="peeringCidrRange")
    private final @Nullable Input<String> peeringCidrRange;

    public Input<String> getPeeringCidrRange() {
        return this.peeringCidrRange == null ? Input.empty() : this.peeringCidrRange;
    }

    public InstanceArgs(
        @Nullable Input<String> description,
        @Nullable Input<String> diskEncryptionKeyName,
        @Nullable Input<String> displayName,
        @Nullable Input<String> ipRange,
        Input<String> location,
        @Nullable Input<String> name,
        Input<String> orgId,
        @Nullable Input<String> peeringCidrRange) {
        this.description = description;
        this.diskEncryptionKeyName = diskEncryptionKeyName;
        this.displayName = displayName;
        this.ipRange = ipRange;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.orgId = Objects.requireNonNull(orgId, "expected parameter 'orgId' to be non-null");
        this.peeringCidrRange = peeringCidrRange;
    }

    private InstanceArgs() {
        this.description = Input.empty();
        this.diskEncryptionKeyName = Input.empty();
        this.displayName = Input.empty();
        this.ipRange = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.orgId = Input.empty();
        this.peeringCidrRange = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> diskEncryptionKeyName;
        private @Nullable Input<String> displayName;
        private @Nullable Input<String> ipRange;
        private Input<String> location;
        private @Nullable Input<String> name;
        private Input<String> orgId;
        private @Nullable Input<String> peeringCidrRange;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.diskEncryptionKeyName = defaults.diskEncryptionKeyName;
    	      this.displayName = defaults.displayName;
    	      this.ipRange = defaults.ipRange;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.peeringCidrRange = defaults.peeringCidrRange;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDiskEncryptionKeyName(@Nullable Input<String> diskEncryptionKeyName) {
            this.diskEncryptionKeyName = diskEncryptionKeyName;
            return this;
        }

        public Builder setDiskEncryptionKeyName(@Nullable String diskEncryptionKeyName) {
            this.diskEncryptionKeyName = Input.ofNullable(diskEncryptionKeyName);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setIpRange(@Nullable Input<String> ipRange) {
            this.ipRange = ipRange;
            return this;
        }

        public Builder setIpRange(@Nullable String ipRange) {
            this.ipRange = Input.ofNullable(ipRange);
            return this;
        }

        public Builder setLocation(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOrgId(Input<String> orgId) {
            this.orgId = Objects.requireNonNull(orgId);
            return this;
        }

        public Builder setOrgId(String orgId) {
            this.orgId = Input.of(Objects.requireNonNull(orgId));
            return this;
        }

        public Builder setPeeringCidrRange(@Nullable Input<String> peeringCidrRange) {
            this.peeringCidrRange = peeringCidrRange;
            return this;
        }

        public Builder setPeeringCidrRange(@Nullable String peeringCidrRange) {
            this.peeringCidrRange = Input.ofNullable(peeringCidrRange);
            return this;
        }

        public InstanceArgs build() {
            return new InstanceArgs(description, diskEncryptionKeyName, displayName, ipRange, location, name, orgId, peeringCidrRange);
        }
    }
}
