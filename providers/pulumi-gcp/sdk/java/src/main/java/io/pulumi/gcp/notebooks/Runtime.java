// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.notebooks;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.notebooks.RuntimeArgs;
import io.pulumi.gcp.notebooks.inputs.RuntimeState;
import io.pulumi.gcp.notebooks.outputs.RuntimeAccessConfig;
import io.pulumi.gcp.notebooks.outputs.RuntimeMetric;
import io.pulumi.gcp.notebooks.outputs.RuntimeSoftwareConfig;
import io.pulumi.gcp.notebooks.outputs.RuntimeVirtualMachine;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A Cloud AI Platform Notebook runtime.
 * 
 * 
 * > **Note:** Due to limitations of the Notebooks Runtime API, many fields
 * in this resource do not properly detect drift. These fields will also not
 * appear in state once imported.
 * 
 * 
 * To get more information about Runtime, see:
 * 
 * * [API documentation](https://cloud.google.com/ai-platform/notebooks/docs/reference/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/ai-platform-notebooks)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Notebook Runtime Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const runtime = new gcp.notebooks.Runtime("runtime", {
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     location: "us-central1",
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *             machineType: "n1-standard-4",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * runtime = gcp.notebooks.Runtime("runtime",
 *     access_config=gcp.notebooks.RuntimeAccessConfigArgs(
 *         access_type="SINGLE_USER",
 *         runtime_owner="admin@hashicorptest.com",
 *     ),
 *     location="us-central1",
 *     virtual_machine=gcp.notebooks.RuntimeVirtualMachineArgs(
 *         virtual_machine_config=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigArgs(
 *             data_disk=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs(
 *                 initialize_params=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs(
 *                     disk_size_gb=100,
 *                     disk_type="PD_STANDARD",
 *                 ),
 *             ),
 *             machine_type="n1-standard-4",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var runtime = new Gcp.Notebooks.Runtime("runtime", new Gcp.Notebooks.RuntimeArgs
 *         {
 *             AccessConfig = new Gcp.Notebooks.Inputs.RuntimeAccessConfigArgs
 *             {
 *                 AccessType = "SINGLE_USER",
 *                 RuntimeOwner = "admin@hashicorptest.com",
 *             },
 *             Location = "us-central1",
 *             VirtualMachine = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineArgs
 *             {
 *                 VirtualMachineConfig = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigArgs
 *                 {
 *                     DataDisk = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs
 *                     {
 *                         InitializeParams = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs
 *                         {
 *                             DiskSizeGb = 100,
 *                             DiskType = "PD_STANDARD",
 *                         },
 *                     },
 *                     MachineType = "n1-standard-4",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/notebooks"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := notebooks.NewRuntime(ctx, "runtime", &notebooks.RuntimeArgs{
 * 			AccessConfig: &notebooks.RuntimeAccessConfigArgs{
 * 				AccessType:   pulumi.String("SINGLE_USER"),
 * 				RuntimeOwner: pulumi.String("admin@hashicorptest.com"),
 * 			},
 * 			Location: pulumi.String("us-central1"),
 * 			VirtualMachine: &notebooks.RuntimeVirtualMachineArgs{
 * 				VirtualMachineConfig: &notebooks.RuntimeVirtualMachineVirtualMachineConfigArgs{
 * 					DataDisk: &notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs{
 * 						InitializeParams: &notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs{
 * 							DiskSizeGb: pulumi.Int(100),
 * 							DiskType:   pulumi.String("PD_STANDARD"),
 * 						},
 * 					},
 * 					MachineType: pulumi.String("n1-standard-4"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Notebook Runtime Basic Gpu
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const runtimeGpu = new gcp.notebooks.Runtime("runtime_gpu", {
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     location: "us-central1",
 *     softwareConfig: {
 *         installGpuDriver: true,
 *     },
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             acceleratorConfig: {
 *                 coreCount: 1,
 *                 type: "NVIDIA_TESLA_V100",
 *             },
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *             machineType: "n1-standard-4",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * runtime_gpu = gcp.notebooks.Runtime("runtimeGpu",
 *     access_config=gcp.notebooks.RuntimeAccessConfigArgs(
 *         access_type="SINGLE_USER",
 *         runtime_owner="admin@hashicorptest.com",
 *     ),
 *     location="us-central1",
 *     software_config=gcp.notebooks.RuntimeSoftwareConfigArgs(
 *         install_gpu_driver=True,
 *     ),
 *     virtual_machine=gcp.notebooks.RuntimeVirtualMachineArgs(
 *         virtual_machine_config=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigArgs(
 *             accelerator_config=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs(
 *                 core_count=1,
 *                 type="NVIDIA_TESLA_V100",
 *             ),
 *             data_disk=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs(
 *                 initialize_params=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs(
 *                     disk_size_gb=100,
 *                     disk_type="PD_STANDARD",
 *                 ),
 *             ),
 *             machine_type="n1-standard-4",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var runtimeGpu = new Gcp.Notebooks.Runtime("runtimeGpu", new Gcp.Notebooks.RuntimeArgs
 *         {
 *             AccessConfig = new Gcp.Notebooks.Inputs.RuntimeAccessConfigArgs
 *             {
 *                 AccessType = "SINGLE_USER",
 *                 RuntimeOwner = "admin@hashicorptest.com",
 *             },
 *             Location = "us-central1",
 *             SoftwareConfig = new Gcp.Notebooks.Inputs.RuntimeSoftwareConfigArgs
 *             {
 *                 InstallGpuDriver = true,
 *             },
 *             VirtualMachine = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineArgs
 *             {
 *                 VirtualMachineConfig = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigArgs
 *                 {
 *                     AcceleratorConfig = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs
 *                     {
 *                         CoreCount = 1,
 *                         Type = "NVIDIA_TESLA_V100",
 *                     },
 *                     DataDisk = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs
 *                     {
 *                         InitializeParams = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs
 *                         {
 *                             DiskSizeGb = 100,
 *                             DiskType = "PD_STANDARD",
 *                         },
 *                     },
 *                     MachineType = "n1-standard-4",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/notebooks"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := notebooks.NewRuntime(ctx, "runtimeGpu", &notebooks.RuntimeArgs{
 * 			AccessConfig: &notebooks.RuntimeAccessConfigArgs{
 * 				AccessType:   pulumi.String("SINGLE_USER"),
 * 				RuntimeOwner: pulumi.String("admin@hashicorptest.com"),
 * 			},
 * 			Location: pulumi.String("us-central1"),
 * 			SoftwareConfig: &notebooks.RuntimeSoftwareConfigArgs{
 * 				InstallGpuDriver: pulumi.Bool(true),
 * 			},
 * 			VirtualMachine: &notebooks.RuntimeVirtualMachineArgs{
 * 				VirtualMachineConfig: &notebooks.RuntimeVirtualMachineVirtualMachineConfigArgs{
 * 					AcceleratorConfig: &notebooks.RuntimeVirtualMachineVirtualMachineConfigAcceleratorConfigArgs{
 * 						CoreCount: pulumi.Int(1),
 * 						Type:      pulumi.String("NVIDIA_TESLA_V100"),
 * 					},
 * 					DataDisk: &notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs{
 * 						InitializeParams: &notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs{
 * 							DiskSizeGb: pulumi.Int(100),
 * 							DiskType:   pulumi.String("PD_STANDARD"),
 * 						},
 * 					},
 * 					MachineType: pulumi.String("n1-standard-4"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Notebook Runtime Basic Container
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const runtimeContainer = new gcp.notebooks.Runtime("runtime_container", {
 *     accessConfig: {
 *         accessType: "SINGLE_USER",
 *         runtimeOwner: "admin@hashicorptest.com",
 *     },
 *     location: "us-central1",
 *     virtualMachine: {
 *         virtualMachineConfig: {
 *             containerImages: [
 *                 {
 *                     repository: "gcr.io/deeplearning-platform-release/base-cpu",
 *                     tag: "latest",
 *                 },
 *                 {
 *                     repository: "gcr.io/deeplearning-platform-release/beam-notebooks",
 *                     tag: "latest",
 *                 },
 *             ],
 *             dataDisk: {
 *                 initializeParams: {
 *                     diskSizeGb: 100,
 *                     diskType: "PD_STANDARD",
 *                 },
 *             },
 *             machineType: "n1-standard-4",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * runtime_container = gcp.notebooks.Runtime("runtimeContainer",
 *     access_config=gcp.notebooks.RuntimeAccessConfigArgs(
 *         access_type="SINGLE_USER",
 *         runtime_owner="admin@hashicorptest.com",
 *     ),
 *     location="us-central1",
 *     virtual_machine=gcp.notebooks.RuntimeVirtualMachineArgs(
 *         virtual_machine_config=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigArgs(
 *             container_images=[
 *                 gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs(
 *                     repository="gcr.io/deeplearning-platform-release/base-cpu",
 *                     tag="latest",
 *                 ),
 *                 gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs(
 *                     repository="gcr.io/deeplearning-platform-release/beam-notebooks",
 *                     tag="latest",
 *                 ),
 *             ],
 *             data_disk=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs(
 *                 initialize_params=gcp.notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs(
 *                     disk_size_gb=100,
 *                     disk_type="PD_STANDARD",
 *                 ),
 *             ),
 *             machine_type="n1-standard-4",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var runtimeContainer = new Gcp.Notebooks.Runtime("runtimeContainer", new Gcp.Notebooks.RuntimeArgs
 *         {
 *             AccessConfig = new Gcp.Notebooks.Inputs.RuntimeAccessConfigArgs
 *             {
 *                 AccessType = "SINGLE_USER",
 *                 RuntimeOwner = "admin@hashicorptest.com",
 *             },
 *             Location = "us-central1",
 *             VirtualMachine = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineArgs
 *             {
 *                 VirtualMachineConfig = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigArgs
 *                 {
 *                     ContainerImages = 
 *                     {
 *                         new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs
 *                         {
 *                             Repository = "gcr.io/deeplearning-platform-release/base-cpu",
 *                             Tag = "latest",
 *                         },
 *                         new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs
 *                         {
 *                             Repository = "gcr.io/deeplearning-platform-release/beam-notebooks",
 *                             Tag = "latest",
 *                         },
 *                     },
 *                     DataDisk = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs
 *                     {
 *                         InitializeParams = new Gcp.Notebooks.Inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs
 *                         {
 *                             DiskSizeGb = 100,
 *                             DiskType = "PD_STANDARD",
 *                         },
 *                     },
 *                     MachineType = "n1-standard-4",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/notebooks"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := notebooks.NewRuntime(ctx, "runtimeContainer", &notebooks.RuntimeArgs{
 * 			AccessConfig: &notebooks.RuntimeAccessConfigArgs{
 * 				AccessType:   pulumi.String("SINGLE_USER"),
 * 				RuntimeOwner: pulumi.String("admin@hashicorptest.com"),
 * 			},
 * 			Location: pulumi.String("us-central1"),
 * 			VirtualMachine: &notebooks.RuntimeVirtualMachineArgs{
 * 				VirtualMachineConfig: &notebooks.RuntimeVirtualMachineVirtualMachineConfigArgs{
 * 					ContainerImages: notebooks.RuntimeVirtualMachineVirtualMachineConfigContainerImageArray{
 * 						&notebooks.RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs{
 * 							Repository: pulumi.String("gcr.io/deeplearning-platform-release/base-cpu"),
 * 							Tag:        pulumi.String("latest"),
 * 						},
 * 						&notebooks.RuntimeVirtualMachineVirtualMachineConfigContainerImageArgs{
 * 							Repository: pulumi.String("gcr.io/deeplearning-platform-release/beam-notebooks"),
 * 							Tag:        pulumi.String("latest"),
 * 						},
 * 					},
 * 					DataDisk: &notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskArgs{
 * 						InitializeParams: &notebooks.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsArgs{
 * 							DiskSizeGb: pulumi.Int(100),
 * 							DiskType:   pulumi.String("PD_STANDARD"),
 * 						},
 * 					},
 * 					MachineType: pulumi.String("n1-standard-4"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Runtime can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:notebooks/runtime:Runtime default projects/{{project}}/locations/{{location}}/runtimes/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:notebooks/runtime:Runtime default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:notebooks/runtime:Runtime default {{location}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:notebooks/runtime:Runtime")
public class Runtime extends io.pulumi.resources.CustomResource {
    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="accessConfig", type=RuntimeAccessConfig.class, parameters={})
    private Output</* @Nullable */ RuntimeAccessConfig> accessConfig;

    /**
     * @return The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RuntimeAccessConfig> getAccessConfig() {
        return this.accessConfig;
    }
    /**
     * The health state of this runtime. For a list of possible output values, see
     * 'https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate'.
     * 
     */
    @Export(name="healthState", type=String.class, parameters={})
    private Output<String> healthState;

    /**
     * @return The health state of this runtime. For a list of possible output values, see
     * 'https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate'.
     * 
     */
    public Output<String> getHealthState() {
        return this.healthState;
    }
    /**
     * A reference to the zone where the machine resides.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return A reference to the zone where the machine resides.
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Contains Runtime daemon metrics such as Service status and JupyterLab status
     * 
     */
    @Export(name="metrics", type=List.class, parameters={RuntimeMetric.class})
    private Output<List<RuntimeMetric>> metrics;

    /**
     * @return Contains Runtime daemon metrics such as Service status and JupyterLab status
     * 
     */
    public Output<List<RuntimeMetric>> getMetrics() {
        return this.metrics;
    }
    /**
     * The name specified for the Notebook instance.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name specified for the Notebook instance.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="softwareConfig", type=RuntimeSoftwareConfig.class, parameters={})
    private Output<RuntimeSoftwareConfig> softwareConfig;

    /**
     * @return The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeSoftwareConfig> getSoftwareConfig() {
        return this.softwareConfig;
    }
    /**
     * The state of this runtime.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The state of this runtime.
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    @Export(name="virtualMachine", type=RuntimeVirtualMachine.class, parameters={})
    private Output</* @Nullable */ RuntimeVirtualMachine> virtualMachine;

    /**
     * @return Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RuntimeVirtualMachine> getVirtualMachine() {
        return this.virtualMachine;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Runtime(String name) {
        this(name, RuntimeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Runtime(String name, RuntimeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Runtime(String name, RuntimeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:notebooks/runtime:Runtime", name, args == null ? RuntimeArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Runtime(String name, Output<String> id, @Nullable RuntimeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:notebooks/runtime:Runtime", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Runtime get(String name, Output<String> id, @Nullable RuntimeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Runtime(name, id, state, options);
    }
}
