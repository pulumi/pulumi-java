// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.certificateauthority.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.certificateauthority.inputs.CertificateCertificateDescriptionGetArgs;
import io.pulumi.gcp.certificateauthority.inputs.CertificateConfigGetArgs;
import io.pulumi.gcp.certificateauthority.inputs.CertificateRevocationDetailGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateState extends io.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * Certificate Authority name.
     * 
     */
    @InputImport(name="certificateAuthority")
      private final @Nullable Output<String> certificateAuthority;

    public Output<String> getCertificateAuthority() {
        return this.certificateAuthority == null ? Output.empty() : this.certificateAuthority;
    }

    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     * 
     */
    @InputImport(name="certificateDescriptions")
      private final @Nullable Output<List<CertificateCertificateDescriptionGetArgs>> certificateDescriptions;

    public Output<List<CertificateCertificateDescriptionGetArgs>> getCertificateDescriptions() {
        return this.certificateDescriptions == null ? Output.empty() : this.certificateDescriptions;
    }

    /**
     * The resource name for a CertificateTemplate used to issue this certificate,
     * in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified,
     * the caller must have the necessary permission to use this template. If this is
     * omitted, no template will be used. This template must be in the same location
     * as the Certificate.
     * 
     */
    @InputImport(name="certificateTemplate")
      private final @Nullable Output<String> certificateTemplate;

    public Output<String> getCertificateTemplate() {
        return this.certificateTemplate == null ? Output.empty() : this.certificateTemplate;
    }

    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     * 
     */
    @InputImport(name="config")
      private final @Nullable Output<CertificateConfigGetArgs> config;

    public Output<CertificateConfigGetArgs> getConfig() {
        return this.config == null ? Output.empty() : this.config;
    }

    /**
     * The time that this resource was created on the server. This is in RFC3339 text format.
     * 
     */
    @InputImport(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> getCreateTime() {
        return this.createTime == null ? Output.empty() : this.createTime;
    }

    /**
     * Labels with user-defined metadata to apply to this resource.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @InputImport(name="lifetime")
      private final @Nullable Output<String> lifetime;

    public Output<String> getLifetime() {
        return this.lifetime == null ? Output.empty() : this.lifetime;
    }

    /**
     * Location of the Certificate. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name for this Certificate.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Output only. The pem-encoded, signed X.509 certificate.
     * 
     */
    @InputImport(name="pemCertificate")
      private final @Nullable Output<String> pemCertificate;

    public Output<String> getPemCertificate() {
        return this.pemCertificate == null ? Output.empty() : this.pemCertificate;
    }

    /**
     * Required. Expected to be in leaf-to-root order according to RFC 5246.
     * 
     */
    @InputImport(name="pemCertificates")
      private final @Nullable Output<List<String>> pemCertificates;

    public Output<List<String>> getPemCertificates() {
        return this.pemCertificates == null ? Output.empty() : this.pemCertificates;
    }

    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    @InputImport(name="pemCsr")
      private final @Nullable Output<String> pemCsr;

    public Output<String> getPemCsr() {
        return this.pemCsr == null ? Output.empty() : this.pemCsr;
    }

    /**
     * The name of the CaPool this Certificate belongs to.
     * 
     */
    @InputImport(name="pool")
      private final @Nullable Output<String> pool;

    public Output<String> getPool() {
        return this.pool == null ? Output.empty() : this.pool;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     * 
     */
    @InputImport(name="revocationDetails")
      private final @Nullable Output<List<CertificateRevocationDetailGetArgs>> revocationDetails;

    public Output<List<CertificateRevocationDetailGetArgs>> getRevocationDetails() {
        return this.revocationDetails == null ? Output.empty() : this.revocationDetails;
    }

    /**
     * Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
     * 
     */
    @InputImport(name="updateTime")
      private final @Nullable Output<String> updateTime;

    public Output<String> getUpdateTime() {
        return this.updateTime == null ? Output.empty() : this.updateTime;
    }

    public CertificateState(
        @Nullable Output<String> certificateAuthority,
        @Nullable Output<List<CertificateCertificateDescriptionGetArgs>> certificateDescriptions,
        @Nullable Output<String> certificateTemplate,
        @Nullable Output<CertificateConfigGetArgs> config,
        @Nullable Output<String> createTime,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> lifetime,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> pemCertificate,
        @Nullable Output<List<String>> pemCertificates,
        @Nullable Output<String> pemCsr,
        @Nullable Output<String> pool,
        @Nullable Output<String> project,
        @Nullable Output<List<CertificateRevocationDetailGetArgs>> revocationDetails,
        @Nullable Output<String> updateTime) {
        this.certificateAuthority = certificateAuthority;
        this.certificateDescriptions = certificateDescriptions;
        this.certificateTemplate = certificateTemplate;
        this.config = config;
        this.createTime = createTime;
        this.labels = labels;
        this.lifetime = lifetime;
        this.location = location;
        this.name = name;
        this.pemCertificate = pemCertificate;
        this.pemCertificates = pemCertificates;
        this.pemCsr = pemCsr;
        this.pool = pool;
        this.project = project;
        this.revocationDetails = revocationDetails;
        this.updateTime = updateTime;
    }

    private CertificateState() {
        this.certificateAuthority = Output.empty();
        this.certificateDescriptions = Output.empty();
        this.certificateTemplate = Output.empty();
        this.config = Output.empty();
        this.createTime = Output.empty();
        this.labels = Output.empty();
        this.lifetime = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.pemCertificate = Output.empty();
        this.pemCertificates = Output.empty();
        this.pemCsr = Output.empty();
        this.pool = Output.empty();
        this.project = Output.empty();
        this.revocationDetails = Output.empty();
        this.updateTime = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> certificateAuthority;
        private @Nullable Output<List<CertificateCertificateDescriptionGetArgs>> certificateDescriptions;
        private @Nullable Output<String> certificateTemplate;
        private @Nullable Output<CertificateConfigGetArgs> config;
        private @Nullable Output<String> createTime;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> lifetime;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> pemCertificate;
        private @Nullable Output<List<String>> pemCertificates;
        private @Nullable Output<String> pemCsr;
        private @Nullable Output<String> pool;
        private @Nullable Output<String> project;
        private @Nullable Output<List<CertificateRevocationDetailGetArgs>> revocationDetails;
        private @Nullable Output<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthority = defaults.certificateAuthority;
    	      this.certificateDescriptions = defaults.certificateDescriptions;
    	      this.certificateTemplate = defaults.certificateTemplate;
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pemCertificate = defaults.pemCertificate;
    	      this.pemCertificates = defaults.pemCertificates;
    	      this.pemCsr = defaults.pemCsr;
    	      this.pool = defaults.pool;
    	      this.project = defaults.project;
    	      this.revocationDetails = defaults.revocationDetails;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder certificateAuthority(@Nullable Output<String> certificateAuthority) {
            this.certificateAuthority = certificateAuthority;
            return this;
        }

        public Builder certificateAuthority(@Nullable String certificateAuthority) {
            this.certificateAuthority = Output.ofNullable(certificateAuthority);
            return this;
        }

        public Builder certificateDescriptions(@Nullable Output<List<CertificateCertificateDescriptionGetArgs>> certificateDescriptions) {
            this.certificateDescriptions = certificateDescriptions;
            return this;
        }

        public Builder certificateDescriptions(@Nullable List<CertificateCertificateDescriptionGetArgs> certificateDescriptions) {
            this.certificateDescriptions = Output.ofNullable(certificateDescriptions);
            return this;
        }

        public Builder certificateTemplate(@Nullable Output<String> certificateTemplate) {
            this.certificateTemplate = certificateTemplate;
            return this;
        }

        public Builder certificateTemplate(@Nullable String certificateTemplate) {
            this.certificateTemplate = Output.ofNullable(certificateTemplate);
            return this;
        }

        public Builder config(@Nullable Output<CertificateConfigGetArgs> config) {
            this.config = config;
            return this;
        }

        public Builder config(@Nullable CertificateConfigGetArgs config) {
            this.config = Output.ofNullable(config);
            return this;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder createTime(@Nullable String createTime) {
            this.createTime = Output.ofNullable(createTime);
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder lifetime(@Nullable Output<String> lifetime) {
            this.lifetime = lifetime;
            return this;
        }

        public Builder lifetime(@Nullable String lifetime) {
            this.lifetime = Output.ofNullable(lifetime);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder pemCertificate(@Nullable Output<String> pemCertificate) {
            this.pemCertificate = pemCertificate;
            return this;
        }

        public Builder pemCertificate(@Nullable String pemCertificate) {
            this.pemCertificate = Output.ofNullable(pemCertificate);
            return this;
        }

        public Builder pemCertificates(@Nullable Output<List<String>> pemCertificates) {
            this.pemCertificates = pemCertificates;
            return this;
        }

        public Builder pemCertificates(@Nullable List<String> pemCertificates) {
            this.pemCertificates = Output.ofNullable(pemCertificates);
            return this;
        }

        public Builder pemCsr(@Nullable Output<String> pemCsr) {
            this.pemCsr = pemCsr;
            return this;
        }

        public Builder pemCsr(@Nullable String pemCsr) {
            this.pemCsr = Output.ofNullable(pemCsr);
            return this;
        }

        public Builder pool(@Nullable Output<String> pool) {
            this.pool = pool;
            return this;
        }

        public Builder pool(@Nullable String pool) {
            this.pool = Output.ofNullable(pool);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder revocationDetails(@Nullable Output<List<CertificateRevocationDetailGetArgs>> revocationDetails) {
            this.revocationDetails = revocationDetails;
            return this;
        }

        public Builder revocationDetails(@Nullable List<CertificateRevocationDetailGetArgs> revocationDetails) {
            this.revocationDetails = Output.ofNullable(revocationDetails);
            return this;
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Output.ofNullable(updateTime);
            return this;
        }
        public CertificateState build() {
            return new CertificateState(certificateAuthority, certificateDescriptions, certificateTemplate, config, createTime, labels, lifetime, location, name, pemCertificate, pemCertificates, pemCsr, pool, project, revocationDetails, updateTime);
        }
    }
}
