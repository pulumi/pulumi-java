// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.compute.inputs.InterconnectAttachmentPrivateInterconnectInfoGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InterconnectAttachmentState extends io.pulumi.resources.ResourceArgs {

    public static final InterconnectAttachmentState Empty = new InterconnectAttachmentState();

    /**
     * Whether the VLAN attachment is enabled or disabled.  When using
     * PARTNER type this will Pre-Activate the interconnect attachment
     * 
     */
    @Import(name="adminEnabled")
      private final @Nullable Output<Boolean> adminEnabled;

    public Output<Boolean> adminEnabled() {
        return this.adminEnabled == null ? Codegen.empty() : this.adminEnabled;
    }

    /**
     * Provisioned bandwidth capacity for the interconnect attachment.
     * For attachments of type DEDICATED, the user can set the bandwidth.
     * For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
     * Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
     * Defaults to BPS_10G
     * Possible values are `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, and `BPS_50G`.
     * 
     */
    @Import(name="bandwidth")
      private final @Nullable Output<String> bandwidth;

    public Output<String> bandwidth() {
        return this.bandwidth == null ? Codegen.empty() : this.bandwidth;
    }

    /**
     * Up to 16 candidate prefixes that can be used to restrict the allocation
     * of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
     * All prefixes must be within link-local address space (169.254.0.0/16)
     * and must be /29 or shorter (/28, /27, etc). Google will attempt to select
     * an unused /29 from the supplied candidate prefix(es). The request will
     * fail if all possible /29s are in use on Google's edge. If not supplied,
     * Google will randomly select an unused /29 from all of link-local space.
     * 
     */
    @Import(name="candidateSubnets")
      private final @Nullable Output<List<String>> candidateSubnets;

    public Output<List<String>> candidateSubnets() {
        return this.candidateSubnets == null ? Codegen.empty() : this.candidateSubnets;
    }

    /**
     * IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     * 
     */
    @Import(name="cloudRouterIpAddress")
      private final @Nullable Output<String> cloudRouterIpAddress;

    public Output<String> cloudRouterIpAddress() {
        return this.cloudRouterIpAddress == null ? Codegen.empty() : this.cloudRouterIpAddress;
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
      private final @Nullable Output<String> creationTimestamp;

    public Output<String> creationTimestamp() {
        return this.creationTimestamp == null ? Codegen.empty() : this.creationTimestamp;
    }

    /**
     * IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     * 
     */
    @Import(name="customerRouterIpAddress")
      private final @Nullable Output<String> customerRouterIpAddress;

    public Output<String> customerRouterIpAddress() {
        return this.customerRouterIpAddress == null ? Codegen.empty() : this.customerRouterIpAddress;
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Desired availability domain for the attachment. Only available for type
     * PARTNER, at creation time. For improved reliability, customers should
     * configure a pair of attachments with one per availability domain. The
     * selected availability domain will be provided to the Partner via the
     * pairing key so that the provisioned circuit will lie in the specified
     * domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
     * 
     */
    @Import(name="edgeAvailabilityDomain")
      private final @Nullable Output<String> edgeAvailabilityDomain;

    public Output<String> edgeAvailabilityDomain() {
        return this.edgeAvailabilityDomain == null ? Codegen.empty() : this.edgeAvailabilityDomain;
    }

    /**
     * Indicates the user-supplied encryption option of this interconnect
     * attachment:
     * NONE is the default value, which means that the attachment carries
     * unencrypted traffic. VMs can send traffic to, or receive traffic
     * from, this type of attachment.
     * IPSEC indicates that the attachment carries only traffic encrypted by
     * an IPsec device such as an HA VPN gateway. VMs cannot directly send
     * traffic to, or receive traffic from, such an attachment. To use
     * IPsec-encrypted Cloud Interconnect create the attachment using this
     * option.
     * Not currently available publicly.
     * Default value is `NONE`.
     * Possible values are `NONE` and `IPSEC`.
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<String> encryption;

    public Output<String> encryption() {
        return this.encryption == null ? Codegen.empty() : this.encryption;
    }

    /**
     * Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity
     * issues.
     * 
     */
    @Import(name="googleReferenceId")
      private final @Nullable Output<String> googleReferenceId;

    public Output<String> googleReferenceId() {
        return this.googleReferenceId == null ? Codegen.empty() : this.googleReferenceId;
    }

    /**
     * URL of the underlying Interconnect object that this attachment's
     * traffic will traverse through. Required if type is DEDICATED, must not
     * be set if type is PARTNER.
     * 
     */
    @Import(name="interconnect")
      private final @Nullable Output<String> interconnect;

    public Output<String> interconnect() {
        return this.interconnect == null ? Codegen.empty() : this.interconnect;
    }

    /**
     * URL of addresses that have been reserved for the interconnect
     * attachment, Used only for interconnect attachment that has the
     * encryption option as IPSEC.
     * The addresses must be RFC 1918 IP address ranges. When creating HA
     * VPN gateway over the interconnect attachment, if the attachment is
     * configured to use an RFC 1918 IP address, then the VPN gateway's IP
     * address will be allocated from the IP address range specified
     * here.
     * For example, if the HA VPN gateway's interface 0 is paired to this
     * interconnect attachment, then an RFC 1918 IP address for the VPN
     * gateway interface 0 will be allocated from the IP address specified
     * for this interconnect attachment.
     * If this field is not specified for interconnect attachment that has
     * encryption option as IPSEC, later on when creating HA VPN gateway on
     * this interconnect attachment, the HA VPN gateway's IP address will be
     * allocated from regional external IP address pool.
     * 
     */
    @Import(name="ipsecInternalAddresses")
      private final @Nullable Output<List<String>> ipsecInternalAddresses;

    public Output<List<String>> ipsecInternalAddresses() {
        return this.ipsecInternalAddresses == null ? Codegen.empty() : this.ipsecInternalAddresses;
    }

    /**
     * Maximum Transmission Unit (MTU), in bytes, of packets passing through
     * this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
     * 
     */
    @Import(name="mtu")
      private final @Nullable Output<String> mtu;

    public Output<String> mtu() {
        return this.mtu == null ? Codegen.empty() : this.mtu;
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The
     * name must be 1-63 characters long, and comply with RFC1035. Specifically, the
     * name must be 1-63 characters long and match the regular expression
     * `a-z?` which means the first character must be a
     * lowercase letter, and all following characters must be a dash, lowercase
     * letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * [Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to
     * initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
     * 
     */
    @Import(name="pairingKey")
      private final @Nullable Output<String> pairingKey;

    public Output<String> pairingKey() {
        return this.pairingKey == null ? Codegen.empty() : this.pairingKey;
    }

    /**
     * [Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a
     * layer 3 Partner if they configured BGP on behalf of the customer.
     * 
     */
    @Import(name="partnerAsn")
      private final @Nullable Output<String> partnerAsn;

    public Output<String> partnerAsn() {
        return this.partnerAsn == null ? Codegen.empty() : this.partnerAsn;
    }

    /**
     * Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached
     * to is of type DEDICATED.
     * 
     */
    @Import(name="privateInterconnectInfos")
      private final @Nullable Output<List<InterconnectAttachmentPrivateInterconnectInfoGetArgs>> privateInterconnectInfos;

    public Output<List<InterconnectAttachmentPrivateInterconnectInfoGetArgs>> privateInterconnectInfos() {
        return this.privateInterconnectInfos == null ? Codegen.empty() : this.privateInterconnectInfos;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Region where the regional interconnect attachment resides.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * URL of the cloud router to be used for dynamic routing. This router must be in
     * the same region as this InterconnectAttachment. The InterconnectAttachment will
     * automatically connect the Interconnect to the network & region within which the
     * Cloud Router is configured.
     * 
     */
    @Import(name="router")
      private final @Nullable Output<String> router;

    public Output<String> router() {
        return this.router == null ? Codegen.empty() : this.router;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> selfLink() {
        return this.selfLink == null ? Codegen.empty() : this.selfLink;
    }

    /**
     * [Output Only] The current state of this attachment's functionality.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * The type of InterconnectAttachment you wish to create. Defaults to
     * DEDICATED.
     * Possible values are `DEDICATED`, `PARTNER`, and `PARTNER_PROVIDER`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
     * using PARTNER type this will be managed upstream.
     * 
     */
    @Import(name="vlanTag8021q")
      private final @Nullable Output<Integer> vlanTag8021q;

    public Output<Integer> vlanTag8021q() {
        return this.vlanTag8021q == null ? Codegen.empty() : this.vlanTag8021q;
    }

    public InterconnectAttachmentState(
        @Nullable Output<Boolean> adminEnabled,
        @Nullable Output<String> bandwidth,
        @Nullable Output<List<String>> candidateSubnets,
        @Nullable Output<String> cloudRouterIpAddress,
        @Nullable Output<String> creationTimestamp,
        @Nullable Output<String> customerRouterIpAddress,
        @Nullable Output<String> description,
        @Nullable Output<String> edgeAvailabilityDomain,
        @Nullable Output<String> encryption,
        @Nullable Output<String> googleReferenceId,
        @Nullable Output<String> interconnect,
        @Nullable Output<List<String>> ipsecInternalAddresses,
        @Nullable Output<String> mtu,
        @Nullable Output<String> name,
        @Nullable Output<String> pairingKey,
        @Nullable Output<String> partnerAsn,
        @Nullable Output<List<InterconnectAttachmentPrivateInterconnectInfoGetArgs>> privateInterconnectInfos,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<String> router,
        @Nullable Output<String> selfLink,
        @Nullable Output<String> state,
        @Nullable Output<String> type,
        @Nullable Output<Integer> vlanTag8021q) {
        this.adminEnabled = adminEnabled;
        this.bandwidth = bandwidth;
        this.candidateSubnets = candidateSubnets;
        this.cloudRouterIpAddress = cloudRouterIpAddress;
        this.creationTimestamp = creationTimestamp;
        this.customerRouterIpAddress = customerRouterIpAddress;
        this.description = description;
        this.edgeAvailabilityDomain = edgeAvailabilityDomain;
        this.encryption = encryption;
        this.googleReferenceId = googleReferenceId;
        this.interconnect = interconnect;
        this.ipsecInternalAddresses = ipsecInternalAddresses;
        this.mtu = mtu;
        this.name = name;
        this.pairingKey = pairingKey;
        this.partnerAsn = partnerAsn;
        this.privateInterconnectInfos = privateInterconnectInfos;
        this.project = project;
        this.region = region;
        this.router = router;
        this.selfLink = selfLink;
        this.state = state;
        this.type = type;
        this.vlanTag8021q = vlanTag8021q;
    }

    private InterconnectAttachmentState() {
        this.adminEnabled = Codegen.empty();
        this.bandwidth = Codegen.empty();
        this.candidateSubnets = Codegen.empty();
        this.cloudRouterIpAddress = Codegen.empty();
        this.creationTimestamp = Codegen.empty();
        this.customerRouterIpAddress = Codegen.empty();
        this.description = Codegen.empty();
        this.edgeAvailabilityDomain = Codegen.empty();
        this.encryption = Codegen.empty();
        this.googleReferenceId = Codegen.empty();
        this.interconnect = Codegen.empty();
        this.ipsecInternalAddresses = Codegen.empty();
        this.mtu = Codegen.empty();
        this.name = Codegen.empty();
        this.pairingKey = Codegen.empty();
        this.partnerAsn = Codegen.empty();
        this.privateInterconnectInfos = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.router = Codegen.empty();
        this.selfLink = Codegen.empty();
        this.state = Codegen.empty();
        this.type = Codegen.empty();
        this.vlanTag8021q = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InterconnectAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> adminEnabled;
        private @Nullable Output<String> bandwidth;
        private @Nullable Output<List<String>> candidateSubnets;
        private @Nullable Output<String> cloudRouterIpAddress;
        private @Nullable Output<String> creationTimestamp;
        private @Nullable Output<String> customerRouterIpAddress;
        private @Nullable Output<String> description;
        private @Nullable Output<String> edgeAvailabilityDomain;
        private @Nullable Output<String> encryption;
        private @Nullable Output<String> googleReferenceId;
        private @Nullable Output<String> interconnect;
        private @Nullable Output<List<String>> ipsecInternalAddresses;
        private @Nullable Output<String> mtu;
        private @Nullable Output<String> name;
        private @Nullable Output<String> pairingKey;
        private @Nullable Output<String> partnerAsn;
        private @Nullable Output<List<InterconnectAttachmentPrivateInterconnectInfoGetArgs>> privateInterconnectInfos;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<String> router;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<String> state;
        private @Nullable Output<String> type;
        private @Nullable Output<Integer> vlanTag8021q;

        public Builder() {
    	      // Empty
        }

        public Builder(InterconnectAttachmentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminEnabled = defaults.adminEnabled;
    	      this.bandwidth = defaults.bandwidth;
    	      this.candidateSubnets = defaults.candidateSubnets;
    	      this.cloudRouterIpAddress = defaults.cloudRouterIpAddress;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.customerRouterIpAddress = defaults.customerRouterIpAddress;
    	      this.description = defaults.description;
    	      this.edgeAvailabilityDomain = defaults.edgeAvailabilityDomain;
    	      this.encryption = defaults.encryption;
    	      this.googleReferenceId = defaults.googleReferenceId;
    	      this.interconnect = defaults.interconnect;
    	      this.ipsecInternalAddresses = defaults.ipsecInternalAddresses;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.pairingKey = defaults.pairingKey;
    	      this.partnerAsn = defaults.partnerAsn;
    	      this.privateInterconnectInfos = defaults.privateInterconnectInfos;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
    	      this.selfLink = defaults.selfLink;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.vlanTag8021q = defaults.vlanTag8021q;
        }

        public Builder adminEnabled(@Nullable Output<Boolean> adminEnabled) {
            this.adminEnabled = adminEnabled;
            return this;
        }
        public Builder adminEnabled(@Nullable Boolean adminEnabled) {
            this.adminEnabled = Codegen.ofNullable(adminEnabled);
            return this;
        }
        public Builder bandwidth(@Nullable Output<String> bandwidth) {
            this.bandwidth = bandwidth;
            return this;
        }
        public Builder bandwidth(@Nullable String bandwidth) {
            this.bandwidth = Codegen.ofNullable(bandwidth);
            return this;
        }
        public Builder candidateSubnets(@Nullable Output<List<String>> candidateSubnets) {
            this.candidateSubnets = candidateSubnets;
            return this;
        }
        public Builder candidateSubnets(@Nullable List<String> candidateSubnets) {
            this.candidateSubnets = Codegen.ofNullable(candidateSubnets);
            return this;
        }
        public Builder candidateSubnets(String... candidateSubnets) {
            return candidateSubnets(List.of(candidateSubnets));
        }
        public Builder cloudRouterIpAddress(@Nullable Output<String> cloudRouterIpAddress) {
            this.cloudRouterIpAddress = cloudRouterIpAddress;
            return this;
        }
        public Builder cloudRouterIpAddress(@Nullable String cloudRouterIpAddress) {
            this.cloudRouterIpAddress = Codegen.ofNullable(cloudRouterIpAddress);
            return this;
        }
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        public Builder creationTimestamp(@Nullable String creationTimestamp) {
            this.creationTimestamp = Codegen.ofNullable(creationTimestamp);
            return this;
        }
        public Builder customerRouterIpAddress(@Nullable Output<String> customerRouterIpAddress) {
            this.customerRouterIpAddress = customerRouterIpAddress;
            return this;
        }
        public Builder customerRouterIpAddress(@Nullable String customerRouterIpAddress) {
            this.customerRouterIpAddress = Codegen.ofNullable(customerRouterIpAddress);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder edgeAvailabilityDomain(@Nullable Output<String> edgeAvailabilityDomain) {
            this.edgeAvailabilityDomain = edgeAvailabilityDomain;
            return this;
        }
        public Builder edgeAvailabilityDomain(@Nullable String edgeAvailabilityDomain) {
            this.edgeAvailabilityDomain = Codegen.ofNullable(edgeAvailabilityDomain);
            return this;
        }
        public Builder encryption(@Nullable Output<String> encryption) {
            this.encryption = encryption;
            return this;
        }
        public Builder encryption(@Nullable String encryption) {
            this.encryption = Codegen.ofNullable(encryption);
            return this;
        }
        public Builder googleReferenceId(@Nullable Output<String> googleReferenceId) {
            this.googleReferenceId = googleReferenceId;
            return this;
        }
        public Builder googleReferenceId(@Nullable String googleReferenceId) {
            this.googleReferenceId = Codegen.ofNullable(googleReferenceId);
            return this;
        }
        public Builder interconnect(@Nullable Output<String> interconnect) {
            this.interconnect = interconnect;
            return this;
        }
        public Builder interconnect(@Nullable String interconnect) {
            this.interconnect = Codegen.ofNullable(interconnect);
            return this;
        }
        public Builder ipsecInternalAddresses(@Nullable Output<List<String>> ipsecInternalAddresses) {
            this.ipsecInternalAddresses = ipsecInternalAddresses;
            return this;
        }
        public Builder ipsecInternalAddresses(@Nullable List<String> ipsecInternalAddresses) {
            this.ipsecInternalAddresses = Codegen.ofNullable(ipsecInternalAddresses);
            return this;
        }
        public Builder ipsecInternalAddresses(String... ipsecInternalAddresses) {
            return ipsecInternalAddresses(List.of(ipsecInternalAddresses));
        }
        public Builder mtu(@Nullable Output<String> mtu) {
            this.mtu = mtu;
            return this;
        }
        public Builder mtu(@Nullable String mtu) {
            this.mtu = Codegen.ofNullable(mtu);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder pairingKey(@Nullable Output<String> pairingKey) {
            this.pairingKey = pairingKey;
            return this;
        }
        public Builder pairingKey(@Nullable String pairingKey) {
            this.pairingKey = Codegen.ofNullable(pairingKey);
            return this;
        }
        public Builder partnerAsn(@Nullable Output<String> partnerAsn) {
            this.partnerAsn = partnerAsn;
            return this;
        }
        public Builder partnerAsn(@Nullable String partnerAsn) {
            this.partnerAsn = Codegen.ofNullable(partnerAsn);
            return this;
        }
        public Builder privateInterconnectInfos(@Nullable Output<List<InterconnectAttachmentPrivateInterconnectInfoGetArgs>> privateInterconnectInfos) {
            this.privateInterconnectInfos = privateInterconnectInfos;
            return this;
        }
        public Builder privateInterconnectInfos(@Nullable List<InterconnectAttachmentPrivateInterconnectInfoGetArgs> privateInterconnectInfos) {
            this.privateInterconnectInfos = Codegen.ofNullable(privateInterconnectInfos);
            return this;
        }
        public Builder privateInterconnectInfos(InterconnectAttachmentPrivateInterconnectInfoGetArgs... privateInterconnectInfos) {
            return privateInterconnectInfos(List.of(privateInterconnectInfos));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder router(@Nullable Output<String> router) {
            this.router = router;
            return this;
        }
        public Builder router(@Nullable String router) {
            this.router = Codegen.ofNullable(router);
            return this;
        }
        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }
        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Codegen.ofNullable(selfLink);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder vlanTag8021q(@Nullable Output<Integer> vlanTag8021q) {
            this.vlanTag8021q = vlanTag8021q;
            return this;
        }
        public Builder vlanTag8021q(@Nullable Integer vlanTag8021q) {
            this.vlanTag8021q = Codegen.ofNullable(vlanTag8021q);
            return this;
        }        public InterconnectAttachmentState build() {
            return new InterconnectAttachmentState(adminEnabled, bandwidth, candidateSubnets, cloudRouterIpAddress, creationTimestamp, customerRouterIpAddress, description, edgeAvailabilityDomain, encryption, googleReferenceId, interconnect, ipsecInternalAddresses, mtu, name, pairingKey, partnerAsn, privateInterconnectInfos, project, region, router, selfLink, state, type, vlanTag8021q);
        }
    }
}
