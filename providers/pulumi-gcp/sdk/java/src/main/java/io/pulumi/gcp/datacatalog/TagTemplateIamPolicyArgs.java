// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TagTemplateIamPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final TagTemplateIamPolicyArgs Empty = new TagTemplateIamPolicyArgs();

    @InputImport(name="policyData", required=true)
      private final Input<String> policyData;

    public Input<String> getPolicyData() {
        return this.policyData;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
      private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    @InputImport(name="tagTemplate", required=true)
      private final Input<String> tagTemplate;

    public Input<String> getTagTemplate() {
        return this.tagTemplate;
    }

    public TagTemplateIamPolicyArgs(
        Input<String> policyData,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        Input<String> tagTemplate) {
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
        this.project = project;
        this.region = region;
        this.tagTemplate = Objects.requireNonNull(tagTemplate, "expected parameter 'tagTemplate' to be non-null");
    }

    private TagTemplateIamPolicyArgs() {
        this.policyData = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.tagTemplate = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TagTemplateIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> policyData;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private Input<String> tagTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(TagTemplateIamPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.tagTemplate = defaults.tagTemplate;
        }

        public Builder policyData(Input<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }

        public Builder policyData(String policyData) {
            this.policyData = Input.of(Objects.requireNonNull(policyData));
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder region(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder tagTemplate(Input<String> tagTemplate) {
            this.tagTemplate = Objects.requireNonNull(tagTemplate);
            return this;
        }

        public Builder tagTemplate(String tagTemplate) {
            this.tagTemplate = Input.of(Objects.requireNonNull(tagTemplate));
            return this;
        }
        public TagTemplateIamPolicyArgs build() {
            return new TagTemplateIamPolicyArgs(policyData, project, region, tagTemplate);
        }
    }
}
