// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.ManagedSslCertificateArgs;
import io.pulumi.gcp.compute.inputs.ManagedSslCertificateState;
import io.pulumi.gcp.compute.outputs.ManagedSslCertificateManaged;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * An SslCertificate resource, used for HTTPS load balancing.  This resource
 * represents a certificate for which the certificate secrets are created and
 * managed by Google.
 * 
 * For a resource where you provide the key, see the
 * SSL Certificate resource.
 * 
 * To get more information about ManagedSslCertificate, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/sslCertificates)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/ssl-certificates)
 * 
 * > **Warning:** This resource should be used with extreme caution!  Provisioning an SSL
 * certificate is complex.  Ensure that you understand the lifecycle of a
 * certificate before attempting complex tasks like cert rotation automatically.
 * This resource will "return" as soon as the certificate object is created,
 * but post-creation the certificate object will go through a "provisioning"
 * process.  The provisioning process can complete only when the domain name
 * for which the certificate is created points to a target pool which, itself,
 * points at the certificate.  Depending on your DNS provider, this may take
 * some time, and migrating from self-managed certificates to Google-managed
 * certificates may entail some downtime while the certificate provisions.
 * 
 * In conclusion: Be extremely cautious.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Managed Ssl Certificate Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const defaultManagedSslCertificate = new gcp.compute.ManagedSslCertificate("defaultManagedSslCertificate", {managed: {
 *     domains: ["sslcert.tf-test.club."],
 * }});
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("defaultHttpHealthCheck", {
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const defaultBackendService = new gcp.compute.BackendService("defaultBackendService", {
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     healthChecks: [defaultHttpHealthCheck.id],
 * });
 * const defaultURLMap = new gcp.compute.URLMap("defaultURLMap", {
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["sslcert.tf-test.club"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultTargetHttpsProxy = new gcp.compute.TargetHttpsProxy("defaultTargetHttpsProxy", {
 *     urlMap: defaultURLMap.id,
 *     sslCertificates: [defaultManagedSslCertificate.id],
 * });
 * const zone = new gcp.dns.ManagedZone("zone", {dnsName: "sslcert.tf-test.club."});
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("defaultGlobalForwardingRule", {
 *     target: defaultTargetHttpsProxy.id,
 *     portRange: 443,
 * });
 * const set = new gcp.dns.RecordSet("set", {
 *     name: "sslcert.tf-test.club.",
 *     type: "A",
 *     ttl: 3600,
 *     managedZone: zone.name,
 *     rrdatas: [defaultGlobalForwardingRule.ipAddress],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default_managed_ssl_certificate = gcp.compute.ManagedSslCertificate("defaultManagedSslCertificate", managed=gcp.compute.ManagedSslCertificateManagedArgs(
 *     domains=["sslcert.tf-test.club."],
 * ))
 * default_http_health_check = gcp.compute.HttpHealthCheck("defaultHttpHealthCheck",
 *     request_path="/",
 *     check_interval_sec=1,
 *     timeout_sec=1)
 * default_backend_service = gcp.compute.BackendService("defaultBackendService",
 *     port_name="http",
 *     protocol="HTTP",
 *     timeout_sec=10,
 *     health_checks=[default_http_health_check.id])
 * default_url_map = gcp.compute.URLMap("defaultURLMap",
 *     description="a description",
 *     default_service=default_backend_service.id,
 *     host_rules=[gcp.compute.URLMapHostRuleArgs(
 *         hosts=["sslcert.tf-test.club"],
 *         path_matcher="allpaths",
 *     )],
 *     path_matchers=[gcp.compute.URLMapPathMatcherArgs(
 *         name="allpaths",
 *         default_service=default_backend_service.id,
 *         path_rules=[gcp.compute.URLMapPathMatcherPathRuleArgs(
 *             paths=["/*"],
 *             service=default_backend_service.id,
 *         )],
 *     )])
 * default_target_https_proxy = gcp.compute.TargetHttpsProxy("defaultTargetHttpsProxy",
 *     url_map=default_url_map.id,
 *     ssl_certificates=[default_managed_ssl_certificate.id])
 * zone = gcp.dns.ManagedZone("zone", dns_name="sslcert.tf-test.club.")
 * default_global_forwarding_rule = gcp.compute.GlobalForwardingRule("defaultGlobalForwardingRule",
 *     target=default_target_https_proxy.id,
 *     port_range="443")
 * set = gcp.dns.RecordSet("set",
 *     name="sslcert.tf-test.club.",
 *     type="A",
 *     ttl=3600,
 *     managed_zone=zone.name,
 *     rrdatas=[default_global_forwarding_rule.ip_address])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var defaultManagedSslCertificate = new Gcp.Compute.ManagedSslCertificate("defaultManagedSslCertificate", new Gcp.Compute.ManagedSslCertificateArgs
 *         {
 *             Managed = new Gcp.Compute.Inputs.ManagedSslCertificateManagedArgs
 *             {
 *                 Domains = 
 *                 {
 *                     "sslcert.tf-test.club.",
 *                 },
 *             },
 *         });
 *         var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("defaultHttpHealthCheck", new Gcp.Compute.HttpHealthCheckArgs
 *         {
 *             RequestPath = "/",
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *         });
 *         var defaultBackendService = new Gcp.Compute.BackendService("defaultBackendService", new Gcp.Compute.BackendServiceArgs
 *         {
 *             PortName = "http",
 *             Protocol = "HTTP",
 *             TimeoutSec = 10,
 *             HealthChecks = 
 *             {
 *                 defaultHttpHealthCheck.Id,
 *             },
 *         });
 *         var defaultURLMap = new Gcp.Compute.URLMap("defaultURLMap", new Gcp.Compute.URLMapArgs
 *         {
 *             Description = "a description",
 *             DefaultService = defaultBackendService.Id,
 *             HostRules = 
 *             {
 *                 new Gcp.Compute.Inputs.URLMapHostRuleArgs
 *                 {
 *                     Hosts = 
 *                     {
 *                         "sslcert.tf-test.club",
 *                     },
 *                     PathMatcher = "allpaths",
 *                 },
 *             },
 *             PathMatchers = 
 *             {
 *                 new Gcp.Compute.Inputs.URLMapPathMatcherArgs
 *                 {
 *                     Name = "allpaths",
 *                     DefaultService = defaultBackendService.Id,
 *                     PathRules = 
 *                     {
 *                         new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
 *                         {
 *                             Paths = 
 *                             {
 *                                 "/*",
 *                             },
 *                             Service = defaultBackendService.Id,
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var defaultTargetHttpsProxy = new Gcp.Compute.TargetHttpsProxy("defaultTargetHttpsProxy", new Gcp.Compute.TargetHttpsProxyArgs
 *         {
 *             UrlMap = defaultURLMap.Id,
 *             SslCertificates = 
 *             {
 *                 defaultManagedSslCertificate.Id,
 *             },
 *         });
 *         var zone = new Gcp.Dns.ManagedZone("zone", new Gcp.Dns.ManagedZoneArgs
 *         {
 *             DnsName = "sslcert.tf-test.club.",
 *         });
 *         var defaultGlobalForwardingRule = new Gcp.Compute.GlobalForwardingRule("defaultGlobalForwardingRule", new Gcp.Compute.GlobalForwardingRuleArgs
 *         {
 *             Target = defaultTargetHttpsProxy.Id,
 *             PortRange = "443",
 *         });
 *         var @set = new Gcp.Dns.RecordSet("set", new Gcp.Dns.RecordSetArgs
 *         {
 *             Name = "sslcert.tf-test.club.",
 *             Type = "A",
 *             Ttl = 3600,
 *             ManagedZone = zone.Name,
 *             Rrdatas = 
 *             {
 *                 defaultGlobalForwardingRule.IpAddress,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultManagedSslCertificate, err := compute.NewManagedSslCertificate(ctx, "defaultManagedSslCertificate", &compute.ManagedSslCertificateArgs{
 * 			Managed: &compute.ManagedSslCertificateManagedArgs{
 * 				Domains: pulumi.StringArray{
 * 					pulumi.String("sslcert.tf-test.club."),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "defaultHttpHealthCheck", &compute.HttpHealthCheckArgs{
 * 			RequestPath:      pulumi.String("/"),
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultBackendService, err := compute.NewBackendService(ctx, "defaultBackendService", &compute.BackendServiceArgs{
 * 			PortName:   pulumi.String("http"),
 * 			Protocol:   pulumi.String("HTTP"),
 * 			TimeoutSec: pulumi.Int(10),
 * 			HealthChecks: pulumi.String{
 * 				defaultHttpHealthCheck.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultURLMap, err := compute.NewURLMap(ctx, "defaultURLMap", &compute.URLMapArgs{
 * 			Description:    pulumi.String("a description"),
 * 			DefaultService: defaultBackendService.ID(),
 * 			HostRules: compute.URLMapHostRuleArray{
 * 				&compute.URLMapHostRuleArgs{
 * 					Hosts: pulumi.StringArray{
 * 						pulumi.String("sslcert.tf-test.club"),
 * 					},
 * 					PathMatcher: pulumi.String("allpaths"),
 * 				},
 * 			},
 * 			PathMatchers: compute.URLMapPathMatcherArray{
 * 				&compute.URLMapPathMatcherArgs{
 * 					Name:           pulumi.String("allpaths"),
 * 					DefaultService: defaultBackendService.ID(),
 * 					PathRules: compute.URLMapPathMatcherPathRuleArray{
 * 						&compute.URLMapPathMatcherPathRuleArgs{
 * 							Paths: pulumi.StringArray{
 * 								pulumi.String("/*"),
 * 							},
 * 							Service: defaultBackendService.ID(),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultTargetHttpsProxy, err := compute.NewTargetHttpsProxy(ctx, "defaultTargetHttpsProxy", &compute.TargetHttpsProxyArgs{
 * 			UrlMap: defaultURLMap.ID(),
 * 			SslCertificates: pulumi.StringArray{
 * 				defaultManagedSslCertificate.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		zone, err := dns.NewManagedZone(ctx, "zone", &dns.ManagedZoneArgs{
 * 			DnsName: pulumi.String("sslcert.tf-test.club."),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultGlobalForwardingRule, err := compute.NewGlobalForwardingRule(ctx, "defaultGlobalForwardingRule", &compute.GlobalForwardingRuleArgs{
 * 			Target:    defaultTargetHttpsProxy.ID(),
 * 			PortRange: pulumi.String("443"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dns.NewRecordSet(ctx, "set", &dns.RecordSetArgs{
 * 			Name:        pulumi.String("sslcert.tf-test.club."),
 * 			Type:        pulumi.String("A"),
 * 			Ttl:         pulumi.Int(3600),
 * 			ManagedZone: zone.Name,
 * 			Rrdatas: pulumi.StringArray{
 * 				defaultGlobalForwardingRule.IpAddress,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ManagedSslCertificate can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/managedSslCertificate:ManagedSslCertificate default projects/{{project}}/global/sslCertificates/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/managedSslCertificate:ManagedSslCertificate default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/managedSslCertificate:ManagedSslCertificate default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/managedSslCertificate:ManagedSslCertificate")
public class ManagedSslCertificate extends io.pulumi.resources.CustomResource {
    /**
     * The unique identifier for the resource.
     * 
     */
    @Export(name="certificateId", type=Integer.class, parameters={})
    private Output<Integer> certificateId;

    /**
     * @return The unique identifier for the resource.
     * 
     */
    public Output<Integer> getCertificateId() {
        return this.certificateId;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> getCreationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Expire time of the certificate.
     * 
     */
    @Export(name="expireTime", type=String.class, parameters={})
    private Output<String> expireTime;

    /**
     * @return Expire time of the certificate.
     * 
     */
    public Output<String> getExpireTime() {
        return this.expireTime;
    }
    /**
     * Properties relevant to a managed certificate.  These will be used if the
     * certificate is managed (as indicated by a value of `MANAGED` in `type`).
     * Structure is documented below.
     * 
     */
    @Export(name="managed", type=ManagedSslCertificateManaged.class, parameters={})
    private Output</* @Nullable */ ManagedSslCertificateManaged> managed;

    /**
     * @return Properties relevant to a managed certificate.  These will be used if the
     * certificate is managed (as indicated by a value of `MANAGED` in `type`).
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ManagedSslCertificateManaged> getManaged() {
        return this.managed;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * Domains associated with the certificate via Subject Alternative Name.
     * 
     */
    @Export(name="subjectAlternativeNames", type=List.class, parameters={String.class})
    private Output<List<String>> subjectAlternativeNames;

    /**
     * @return Domains associated with the certificate via Subject Alternative Name.
     * 
     */
    public Output<List<String>> getSubjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }
    /**
     * Enum field whose value is always `MANAGED` - used to signal to the API
     * which type this is.
     * Default value is `MANAGED`.
     * Possible values are `MANAGED`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return Enum field whose value is always `MANAGED` - used to signal to the API
     * which type this is.
     * Default value is `MANAGED`.
     * Possible values are `MANAGED`.
     * 
     */
    public Output</* @Nullable */ String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedSslCertificate(String name) {
        this(name, ManagedSslCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedSslCertificate(String name, @Nullable ManagedSslCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedSslCertificate(String name, @Nullable ManagedSslCertificateArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/managedSslCertificate:ManagedSslCertificate", name, args == null ? ManagedSslCertificateArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ManagedSslCertificate(String name, Output<String> id, @Nullable ManagedSslCertificateState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/managedSslCertificate:ManagedSslCertificate", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("gcp:compute/mangedSslCertificate:MangedSslCertificate").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedSslCertificate get(String name, Output<String> id, @Nullable ManagedSslCertificateState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ManagedSslCertificate(name, id, state, options);
    }
}
