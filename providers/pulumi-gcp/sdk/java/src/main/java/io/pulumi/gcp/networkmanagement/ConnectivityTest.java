// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.networkmanagement;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
import io.pulumi.gcp.networkmanagement.inputs.ConnectivityTestState;
import io.pulumi.gcp.networkmanagement.outputs.ConnectivityTestDestination;
import io.pulumi.gcp.networkmanagement.outputs.ConnectivityTestSource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A connectivity test are a static analysis of your resource configurations
 * that enables you to evaluate connectivity to and from Google Cloud
 * resources in your Virtual Private Cloud (VPC) network.
 * 
 * 
 * To get more information about ConnectivityTest, see:
 * 
 * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/connectivity-tests/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Network Management Connectivity Test Instances
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const vpc = new gcp.compute.Network("vpc", {});
 * const debian9 = gcp.compute.getImage({
 *     family: "debian-9",
 *     project: "debian-cloud",
 * });
 * const source = new gcp.compute.Instance("source", {
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debian9.then(debian9 => debian9.id),
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: vpc.id,
 *         accessConfigs: [{}],
 *     }],
 * });
 * const destination = new gcp.compute.Instance("destination", {
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debian9.then(debian9 => debian9.id),
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: vpc.id,
 *         accessConfigs: [{}],
 *     }],
 * });
 * const instance_test = new gcp.networkmanagement.ConnectivityTest("instance-test", {
 *     source: {
 *         instance: source.id,
 *     },
 *     destination: {
 *         instance: destination.id,
 *     },
 *     protocol: "TCP",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * vpc = gcp.compute.Network("vpc")
 * debian9 = gcp.compute.get_image(family="debian-9",
 *     project="debian-cloud")
 * source = gcp.compute.Instance("source",
 *     machine_type="e2-medium",
 *     boot_disk=gcp.compute.InstanceBootDiskArgs(
 *         initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
 *             image=debian9.id,
 *         ),
 *     ),
 *     network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
 *         network=vpc.id,
 *         access_configs=[gcp.compute.InstanceNetworkInterfaceAccessConfigArgs()],
 *     )])
 * destination = gcp.compute.Instance("destination",
 *     machine_type="e2-medium",
 *     boot_disk=gcp.compute.InstanceBootDiskArgs(
 *         initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
 *             image=debian9.id,
 *         ),
 *     ),
 *     network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
 *         network=vpc.id,
 *         access_configs=[gcp.compute.InstanceNetworkInterfaceAccessConfigArgs()],
 *     )])
 * instance_test = gcp.networkmanagement.ConnectivityTest("instance-test",
 *     source=gcp.networkmanagement.ConnectivityTestSourceArgs(
 *         instance=source.id,
 *     ),
 *     destination=gcp.networkmanagement.ConnectivityTestDestinationArgs(
 *         instance=destination.id,
 *     ),
 *     protocol="TCP")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var vpc = new Gcp.Compute.Network("vpc", new Gcp.Compute.NetworkArgs
 *         {
 *         });
 *         var debian9 = Output.Create(Gcp.Compute.GetImage.InvokeAsync(new Gcp.Compute.GetImageArgs
 *         {
 *             Family = "debian-9",
 *             Project = "debian-cloud",
 *         }));
 *         var source = new Gcp.Compute.Instance("source", new Gcp.Compute.InstanceArgs
 *         {
 *             MachineType = "e2-medium",
 *             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
 *             {
 *                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
 *                 {
 *                     Image = debian9.Apply(debian9 => debian9.Id),
 *                 },
 *             },
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
 *                 {
 *                     Network = vpc.Id,
 *                     AccessConfigs = 
 *                     {
 *                         ,
 *                     },
 *                 },
 *             },
 *         });
 *         var destination = new Gcp.Compute.Instance("destination", new Gcp.Compute.InstanceArgs
 *         {
 *             MachineType = "e2-medium",
 *             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
 *             {
 *                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
 *                 {
 *                     Image = debian9.Apply(debian9 => debian9.Id),
 *                 },
 *             },
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
 *                 {
 *                     Network = vpc.Id,
 *                     AccessConfigs = 
 *                     {
 *                         ,
 *                     },
 *                 },
 *             },
 *         });
 *         var instance_test = new Gcp.NetworkManagement.ConnectivityTest("instance-test", new Gcp.NetworkManagement.ConnectivityTestArgs
 *         {
 *             Source = new Gcp.NetworkManagement.Inputs.ConnectivityTestSourceArgs
 *             {
 *                 Instance = source.Id,
 *             },
 *             Destination = new Gcp.NetworkManagement.Inputs.ConnectivityTestDestinationArgs
 *             {
 *                 Instance = destination.Id,
 *             },
 *             Protocol = "TCP",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networkmanagement"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		vpc, err := compute.NewNetwork(ctx, "vpc", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		opt0 := "debian-9"
 * 		opt1 := "debian-cloud"
 * 		debian9, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
 * 			Family:  &opt0,
 * 			Project: &opt1,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		source, err := compute.NewInstance(ctx, "source", &compute.InstanceArgs{
 * 			MachineType: pulumi.String("e2-medium"),
 * 			BootDisk: &compute.InstanceBootDiskArgs{
 * 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
 * 					Image: pulumi.String(debian9.Id),
 * 				},
 * 			},
 * 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
 * 				&compute.InstanceNetworkInterfaceArgs{
 * 					Network: vpc.ID(),
 * 					AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
 * 						nil,
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		destination, err := compute.NewInstance(ctx, "destination", &compute.InstanceArgs{
 * 			MachineType: pulumi.String("e2-medium"),
 * 			BootDisk: &compute.InstanceBootDiskArgs{
 * 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
 * 					Image: pulumi.String(debian9.Id),
 * 				},
 * 			},
 * 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
 * 				&compute.InstanceNetworkInterfaceArgs{
 * 					Network: vpc.ID(),
 * 					AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
 * 						nil,
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = networkmanagement.NewConnectivityTest(ctx, "instance-test", &networkmanagement.ConnectivityTestArgs{
 * 			Source: &networkmanagement.ConnectivityTestSourceArgs{
 * 				Instance: source.ID(),
 * 			},
 * 			Destination: &networkmanagement.ConnectivityTestDestinationArgs{
 * 				Instance: destination.ID(),
 * 			},
 * 			Protocol: pulumi.String("TCP"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Network Management Connectivity Test Addresses
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const vpc = new gcp.compute.Network("vpc", {});
 * const subnet = new gcp.compute.Subnetwork("subnet", {
 *     ipCidrRange: "10.0.0.0/16",
 *     region: "us-central1",
 *     network: vpc.id,
 * });
 * const source_addr = new gcp.compute.Address("source-addr", {
 *     subnetwork: subnet.id,
 *     addressType: "INTERNAL",
 *     address: "10.0.42.42",
 *     region: "us-central1",
 * });
 * const dest_addr = new gcp.compute.Address("dest-addr", {
 *     subnetwork: subnet.id,
 *     addressType: "INTERNAL",
 *     address: "10.0.43.43",
 *     region: "us-central1",
 * });
 * const address_test = new gcp.networkmanagement.ConnectivityTest("address-test", {
 *     source: {
 *         ipAddress: source_addr.address,
 *         projectId: source_addr.project,
 *         network: vpc.id,
 *         networkType: "GCP_NETWORK",
 *     },
 *     destination: {
 *         ipAddress: dest_addr.address,
 *         projectId: dest_addr.project,
 *         network: vpc.id,
 *     },
 *     protocol: "UDP",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * vpc = gcp.compute.Network("vpc")
 * subnet = gcp.compute.Subnetwork("subnet",
 *     ip_cidr_range="10.0.0.0/16",
 *     region="us-central1",
 *     network=vpc.id)
 * source_addr = gcp.compute.Address("source-addr",
 *     subnetwork=subnet.id,
 *     address_type="INTERNAL",
 *     address="10.0.42.42",
 *     region="us-central1")
 * dest_addr = gcp.compute.Address("dest-addr",
 *     subnetwork=subnet.id,
 *     address_type="INTERNAL",
 *     address="10.0.43.43",
 *     region="us-central1")
 * address_test = gcp.networkmanagement.ConnectivityTest("address-test",
 *     source=gcp.networkmanagement.ConnectivityTestSourceArgs(
 *         ip_address=source_addr.address,
 *         project_id=source_addr.project,
 *         network=vpc.id,
 *         network_type="GCP_NETWORK",
 *     ),
 *     destination=gcp.networkmanagement.ConnectivityTestDestinationArgs(
 *         ip_address=dest_addr.address,
 *         project_id=dest_addr.project,
 *         network=vpc.id,
 *     ),
 *     protocol="UDP")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var vpc = new Gcp.Compute.Network("vpc", new Gcp.Compute.NetworkArgs
 *         {
 *         });
 *         var subnet = new Gcp.Compute.Subnetwork("subnet", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.0.0/16",
 *             Region = "us-central1",
 *             Network = vpc.Id,
 *         });
 *         var source_addr = new Gcp.Compute.Address("source-addr", new Gcp.Compute.AddressArgs
 *         {
 *             Subnetwork = subnet.Id,
 *             AddressType = "INTERNAL",
 *             Address = "10.0.42.42",
 *             Region = "us-central1",
 *         });
 *         var dest_addr = new Gcp.Compute.Address("dest-addr", new Gcp.Compute.AddressArgs
 *         {
 *             Subnetwork = subnet.Id,
 *             AddressType = "INTERNAL",
 *             Address = "10.0.43.43",
 *             Region = "us-central1",
 *         });
 *         var address_test = new Gcp.NetworkManagement.ConnectivityTest("address-test", new Gcp.NetworkManagement.ConnectivityTestArgs
 *         {
 *             Source = new Gcp.NetworkManagement.Inputs.ConnectivityTestSourceArgs
 *             {
 *                 IpAddress = source_addr.IPAddress,
 *                 ProjectId = source_addr.Project,
 *                 Network = vpc.Id,
 *                 NetworkType = "GCP_NETWORK",
 *             },
 *             Destination = new Gcp.NetworkManagement.Inputs.ConnectivityTestDestinationArgs
 *             {
 *                 IpAddress = dest_addr.IPAddress,
 *                 ProjectId = dest_addr.Project,
 *                 Network = vpc.Id,
 *             },
 *             Protocol = "UDP",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networkmanagement"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		vpc, err := compute.NewNetwork(ctx, "vpc", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.0.0/16"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     vpc.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewAddress(ctx, "source-addr", &compute.AddressArgs{
 * 			Subnetwork:  subnet.ID(),
 * 			AddressType: pulumi.String("INTERNAL"),
 * 			Address:     pulumi.String("10.0.42.42"),
 * 			Region:      pulumi.String("us-central1"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewAddress(ctx, "dest-addr", &compute.AddressArgs{
 * 			Subnetwork:  subnet.ID(),
 * 			AddressType: pulumi.String("INTERNAL"),
 * 			Address:     pulumi.String("10.0.43.43"),
 * 			Region:      pulumi.String("us-central1"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = networkmanagement.NewConnectivityTest(ctx, "address-test", &networkmanagement.ConnectivityTestArgs{
 * 			Source: &networkmanagement.ConnectivityTestSourceArgs{
 * 				IpAddress:   source_addr.Address,
 * 				ProjectId:   source_addr.Project,
 * 				Network:     vpc.ID(),
 * 				NetworkType: pulumi.String("GCP_NETWORK"),
 * 			},
 * 			Destination: &networkmanagement.ConnectivityTestDestinationArgs{
 * 				IpAddress: dest_addr.Address,
 * 				ProjectId: dest_addr.Project,
 * 				Network:   vpc.ID(),
 * 			},
 * 			Protocol: pulumi.String("UDP"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ConnectivityTest can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default projects/{{project}}/locations/global/connectivityTests/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:networkmanagement/connectivityTest:ConnectivityTest")
public class ConnectivityTest extends io.pulumi.resources.CustomResource {
    /**
     * The user-supplied description of the Connectivity Test.
     * Maximum of 512 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The user-supplied description of the Connectivity Test.
     * Maximum of 512 characters.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Required. Destination specification of the Connectivity Test.
     * You can use a combination of destination IP address, Compute
     * Engine VM instance, or VPC network to uniquely identify the
     * destination location.
     * Even if the destination IP address is not unique, the source IP
     * location is unique. Usually, the analysis can infer the destination
     * endpoint from route information.
     * If the destination you specify is a VM instance and the instance has
     * multiple network interfaces, then you must also specify either a
     * destination IP address or VPC network to identify the destination
     * interface.
     * A reachability analysis proceeds even if the destination location
     * is ambiguous. However, the result can include endpoints that you
     * don't intend to test.
     * Structure is documented below.
     * 
     */
    @Export(name="destination", type=ConnectivityTestDestination.class, parameters={})
    private Output<ConnectivityTestDestination> destination;

    /**
     * @return Required. Destination specification of the Connectivity Test.
     * You can use a combination of destination IP address, Compute
     * Engine VM instance, or VPC network to uniquely identify the
     * destination location.
     * Even if the destination IP address is not unique, the source IP
     * location is unique. Usually, the analysis can infer the destination
     * endpoint from route information.
     * If the destination you specify is a VM instance and the instance has
     * multiple network interfaces, then you must also specify either a
     * destination IP address or VPC network to identify the destination
     * interface.
     * A reachability analysis proceeds even if the destination location
     * is ambiguous. However, the result can include endpoints that you
     * don't intend to test.
     * Structure is documented below.
     * 
     */
    public Output<ConnectivityTestDestination> getDestination() {
        return this.destination;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * Unique name for the connectivity test.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Unique name for the connectivity test.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * IP Protocol of the test. When not provided, "TCP" is assumed.
     * 
     */
    @Export(name="protocol", type=String.class, parameters={})
    private Output</* @Nullable */ String> protocol;

    /**
     * @return IP Protocol of the test. When not provided, "TCP" is assumed.
     * 
     */
    public Output</* @Nullable */ String> getProtocol() {
        return this.protocol;
    }
    /**
     * Other projects that may be relevant for reachability analysis.
     * This is applicable to scenarios where a test can cross project
     * boundaries.
     * 
     */
    @Export(name="relatedProjects", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> relatedProjects;

    /**
     * @return Other projects that may be relevant for reachability analysis.
     * This is applicable to scenarios where a test can cross project
     * boundaries.
     * 
     */
    public Output</* @Nullable */ List<String>> getRelatedProjects() {
        return this.relatedProjects;
    }
    /**
     * Required. Source specification of the Connectivity Test.
     * You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the
     * source location.
     * Examples: If the source IP address is an internal IP address within
     * a Google Cloud Virtual Private Cloud (VPC) network, then you must
     * also specify the VPC network. Otherwise, specify the VM instance,
     * which already contains its internal IP address and VPC network
     * information.
     * If the source of the test is within an on-premises network, then
     * you must provide the destination VPC network.
     * If the source endpoint is a Compute Engine VM instance with multiple
     * network interfaces, the instance itself is not sufficient to
     * identify the endpoint. So, you must also specify the source IP
     * address or VPC network.
     * A reachability analysis proceeds even if the source location is
     * ambiguous. However, the test result may include endpoints that
     * you don't intend to test.
     * Structure is documented below.
     * 
     */
    @Export(name="source", type=ConnectivityTestSource.class, parameters={})
    private Output<ConnectivityTestSource> source;

    /**
     * @return Required. Source specification of the Connectivity Test.
     * You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the
     * source location.
     * Examples: If the source IP address is an internal IP address within
     * a Google Cloud Virtual Private Cloud (VPC) network, then you must
     * also specify the VPC network. Otherwise, specify the VM instance,
     * which already contains its internal IP address and VPC network
     * information.
     * If the source of the test is within an on-premises network, then
     * you must provide the destination VPC network.
     * If the source endpoint is a Compute Engine VM instance with multiple
     * network interfaces, the instance itself is not sufficient to
     * identify the endpoint. So, you must also specify the source IP
     * address or VPC network.
     * A reachability analysis proceeds even if the source location is
     * ambiguous. However, the test result may include endpoints that
     * you don't intend to test.
     * Structure is documented below.
     * 
     */
    public Output<ConnectivityTestSource> getSource() {
        return this.source;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectivityTest(String name) {
        this(name, ConnectivityTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectivityTest(String name, ConnectivityTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectivityTest(String name, ConnectivityTestArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkmanagement/connectivityTest:ConnectivityTest", name, args == null ? ConnectivityTestArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ConnectivityTest(String name, Output<String> id, @Nullable ConnectivityTestState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkmanagement/connectivityTest:ConnectivityTest", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectivityTest get(String name, Output<String> id, @Nullable ConnectivityTestState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ConnectivityTest(name, id, state, options);
    }
}
