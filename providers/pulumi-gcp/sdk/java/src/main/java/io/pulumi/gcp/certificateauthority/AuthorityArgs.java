// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.certificateauthority;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
import io.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AuthorityArgs extends io.pulumi.resources.ResourceArgs {

    public static final AuthorityArgs Empty = new AuthorityArgs();

    /**
     * The user provided Resource ID for this Certificate Authority.
     * 
     */
    @InputImport(name="certificateAuthorityId", required=true)
      private final Output<String> certificateAuthorityId;

    public Output<String> getCertificateAuthorityId() {
        return this.certificateAuthorityId;
    }

    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     * 
     */
    @InputImport(name="config", required=true)
      private final Output<AuthorityConfigArgs> config;

    public Output<AuthorityConfigArgs> getConfig() {
        return this.config;
    }

    /**
     * The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
     * such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
     * (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
     * my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
     * created.
     * 
     */
    @InputImport(name="gcsBucket")
      private final @Nullable Output<String> gcsBucket;

    public Output<String> getGcsBucket() {
        return this.gcsBucket == null ? Output.empty() : this.gcsBucket;
    }

    /**
     * This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
     * Use with care. Defaults to `false`.
     * 
     */
    @InputImport(name="ignoreActiveCertificatesOnDeletion")
      private final @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion;

    public Output<Boolean> getIgnoreActiveCertificatesOnDeletion() {
        return this.ignoreActiveCertificatesOnDeletion == null ? Output.empty() : this.ignoreActiveCertificatesOnDeletion;
    }

    /**
     * Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
     * is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
     * certificate. Otherwise, it is used to sign a CSR.
     * Structure is documented below.
     * 
     */
    @InputImport(name="keySpec", required=true)
      private final Output<AuthorityKeySpecArgs> keySpec;

    public Output<AuthorityKeySpecArgs> getKeySpec() {
        return this.keySpec;
    }

    /**
     * Labels with user-defined metadata.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
     * "1.3kg", "count": "3" }.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @InputImport(name="lifetime")
      private final @Nullable Output<String> lifetime;

    public Output<String> getLifetime() {
        return this.lifetime == null ? Output.empty() : this.lifetime;
    }

    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * 
     */
    @InputImport(name="location", required=true)
      private final Output<String> location;

    public Output<String> getLocation() {
        return this.location;
    }

    /**
     * The name of the CaPool this Certificate Authority belongs to.
     * 
     */
    @InputImport(name="pool", required=true)
      private final Output<String> pool;

    public Output<String> getPool() {
        return this.pool;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The Type of this CertificateAuthority.
     * > **Note:** For `SUBORDINATE` Certificate Authorities, they need to
     * be manually activated (via Cloud Console of `gcloud`) before they can
     * issue certificates.
     * Default value is `SELF_SIGNED`.
     * Possible values are `SELF_SIGNED` and `SUBORDINATE`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public AuthorityArgs(
        Output<String> certificateAuthorityId,
        Output<AuthorityConfigArgs> config,
        @Nullable Output<String> gcsBucket,
        @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion,
        Output<AuthorityKeySpecArgs> keySpec,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> lifetime,
        Output<String> location,
        Output<String> pool,
        @Nullable Output<String> project,
        @Nullable Output<String> type) {
        this.certificateAuthorityId = Objects.requireNonNull(certificateAuthorityId, "expected parameter 'certificateAuthorityId' to be non-null");
        this.config = Objects.requireNonNull(config, "expected parameter 'config' to be non-null");
        this.gcsBucket = gcsBucket;
        this.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
        this.keySpec = Objects.requireNonNull(keySpec, "expected parameter 'keySpec' to be non-null");
        this.labels = labels;
        this.lifetime = lifetime;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.pool = Objects.requireNonNull(pool, "expected parameter 'pool' to be non-null");
        this.project = project;
        this.type = type;
    }

    private AuthorityArgs() {
        this.certificateAuthorityId = Output.empty();
        this.config = Output.empty();
        this.gcsBucket = Output.empty();
        this.ignoreActiveCertificatesOnDeletion = Output.empty();
        this.keySpec = Output.empty();
        this.labels = Output.empty();
        this.lifetime = Output.empty();
        this.location = Output.empty();
        this.pool = Output.empty();
        this.project = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> certificateAuthorityId;
        private Output<AuthorityConfigArgs> config;
        private @Nullable Output<String> gcsBucket;
        private @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion;
        private Output<AuthorityKeySpecArgs> keySpec;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> lifetime;
        private Output<String> location;
        private Output<String> pool;
        private @Nullable Output<String> project;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.config = defaults.config;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.ignoreActiveCertificatesOnDeletion = defaults.ignoreActiveCertificatesOnDeletion;
    	      this.keySpec = defaults.keySpec;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.pool = defaults.pool;
    	      this.project = defaults.project;
    	      this.type = defaults.type;
        }

        public Builder certificateAuthorityId(Output<String> certificateAuthorityId) {
            this.certificateAuthorityId = Objects.requireNonNull(certificateAuthorityId);
            return this;
        }

        public Builder certificateAuthorityId(String certificateAuthorityId) {
            this.certificateAuthorityId = Output.of(Objects.requireNonNull(certificateAuthorityId));
            return this;
        }

        public Builder config(Output<AuthorityConfigArgs> config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }

        public Builder config(AuthorityConfigArgs config) {
            this.config = Output.of(Objects.requireNonNull(config));
            return this;
        }

        public Builder gcsBucket(@Nullable Output<String> gcsBucket) {
            this.gcsBucket = gcsBucket;
            return this;
        }

        public Builder gcsBucket(@Nullable String gcsBucket) {
            this.gcsBucket = Output.ofNullable(gcsBucket);
            return this;
        }

        public Builder ignoreActiveCertificatesOnDeletion(@Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion) {
            this.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
            return this;
        }

        public Builder ignoreActiveCertificatesOnDeletion(@Nullable Boolean ignoreActiveCertificatesOnDeletion) {
            this.ignoreActiveCertificatesOnDeletion = Output.ofNullable(ignoreActiveCertificatesOnDeletion);
            return this;
        }

        public Builder keySpec(Output<AuthorityKeySpecArgs> keySpec) {
            this.keySpec = Objects.requireNonNull(keySpec);
            return this;
        }

        public Builder keySpec(AuthorityKeySpecArgs keySpec) {
            this.keySpec = Output.of(Objects.requireNonNull(keySpec));
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder lifetime(@Nullable Output<String> lifetime) {
            this.lifetime = lifetime;
            return this;
        }

        public Builder lifetime(@Nullable String lifetime) {
            this.lifetime = Output.ofNullable(lifetime);
            return this;
        }

        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder pool(Output<String> pool) {
            this.pool = Objects.requireNonNull(pool);
            return this;
        }

        public Builder pool(String pool) {
            this.pool = Output.of(Objects.requireNonNull(pool));
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public AuthorityArgs build() {
            return new AuthorityArgs(certificateAuthorityId, config, gcsBucket, ignoreActiveCertificatesOnDeletion, keySpec, labels, lifetime, location, pool, project, type);
        }
    }
}
