// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.certificateauthority;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.certificateauthority.inputs.CertificateConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    @InputImport(name="certificateAuthority")
    private final @Nullable Input<String> certificateAuthority;

    public Input<String> getCertificateAuthority() {
        return this.certificateAuthority == null ? Input.empty() : this.certificateAuthority;
    }

    @InputImport(name="certificateTemplate")
    private final @Nullable Input<String> certificateTemplate;

    public Input<String> getCertificateTemplate() {
        return this.certificateTemplate == null ? Input.empty() : this.certificateTemplate;
    }

    @InputImport(name="config")
    private final @Nullable Input<CertificateConfigArgs> config;

    public Input<CertificateConfigArgs> getConfig() {
        return this.config == null ? Input.empty() : this.config;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="lifetime")
    private final @Nullable Input<String> lifetime;

    public Input<String> getLifetime() {
        return this.lifetime == null ? Input.empty() : this.lifetime;
    }

    @InputImport(name="location", required=true)
    private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="pemCsr")
    private final @Nullable Input<String> pemCsr;

    public Input<String> getPemCsr() {
        return this.pemCsr == null ? Input.empty() : this.pemCsr;
    }

    @InputImport(name="pool", required=true)
    private final Input<String> pool;

    public Input<String> getPool() {
        return this.pool;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    public CertificateArgs(
        @Nullable Input<String> certificateAuthority,
        @Nullable Input<String> certificateTemplate,
        @Nullable Input<CertificateConfigArgs> config,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> lifetime,
        Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> pemCsr,
        Input<String> pool,
        @Nullable Input<String> project) {
        this.certificateAuthority = certificateAuthority;
        this.certificateTemplate = certificateTemplate;
        this.config = config;
        this.labels = labels;
        this.lifetime = lifetime;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.pemCsr = pemCsr;
        this.pool = Objects.requireNonNull(pool, "expected parameter 'pool' to be non-null");
        this.project = project;
    }

    private CertificateArgs() {
        this.certificateAuthority = Input.empty();
        this.certificateTemplate = Input.empty();
        this.config = Input.empty();
        this.labels = Input.empty();
        this.lifetime = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.pemCsr = Input.empty();
        this.pool = Input.empty();
        this.project = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> certificateAuthority;
        private @Nullable Input<String> certificateTemplate;
        private @Nullable Input<CertificateConfigArgs> config;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> lifetime;
        private Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> pemCsr;
        private Input<String> pool;
        private @Nullable Input<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthority = defaults.certificateAuthority;
    	      this.certificateTemplate = defaults.certificateTemplate;
    	      this.config = defaults.config;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pemCsr = defaults.pemCsr;
    	      this.pool = defaults.pool;
    	      this.project = defaults.project;
        }

        public Builder setCertificateAuthority(@Nullable Input<String> certificateAuthority) {
            this.certificateAuthority = certificateAuthority;
            return this;
        }

        public Builder setCertificateAuthority(@Nullable String certificateAuthority) {
            this.certificateAuthority = Input.ofNullable(certificateAuthority);
            return this;
        }

        public Builder setCertificateTemplate(@Nullable Input<String> certificateTemplate) {
            this.certificateTemplate = certificateTemplate;
            return this;
        }

        public Builder setCertificateTemplate(@Nullable String certificateTemplate) {
            this.certificateTemplate = Input.ofNullable(certificateTemplate);
            return this;
        }

        public Builder setConfig(@Nullable Input<CertificateConfigArgs> config) {
            this.config = config;
            return this;
        }

        public Builder setConfig(@Nullable CertificateConfigArgs config) {
            this.config = Input.ofNullable(config);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLifetime(@Nullable Input<String> lifetime) {
            this.lifetime = lifetime;
            return this;
        }

        public Builder setLifetime(@Nullable String lifetime) {
            this.lifetime = Input.ofNullable(lifetime);
            return this;
        }

        public Builder setLocation(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPemCsr(@Nullable Input<String> pemCsr) {
            this.pemCsr = pemCsr;
            return this;
        }

        public Builder setPemCsr(@Nullable String pemCsr) {
            this.pemCsr = Input.ofNullable(pemCsr);
            return this;
        }

        public Builder setPool(Input<String> pool) {
            this.pool = Objects.requireNonNull(pool);
            return this;
        }

        public Builder setPool(String pool) {
            this.pool = Input.of(Objects.requireNonNull(pool));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public CertificateArgs build() {
            return new CertificateArgs(certificateAuthority, certificateTemplate, config, labels, lifetime, location, name, pemCsr, pool, project);
        }
    }
}
