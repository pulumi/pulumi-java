// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudrun.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerGetArgs;
import io.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecVolumeGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceTemplateSpecGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecGetArgs Empty = new ServiceTemplateSpecGetArgs();

    @InputImport(name="containerConcurrency")
    private final @Nullable Input<Integer> containerConcurrency;

    public Input<Integer> getContainerConcurrency() {
        return this.containerConcurrency == null ? Input.empty() : this.containerConcurrency;
    }

    @InputImport(name="containers")
    private final @Nullable Input<List<ServiceTemplateSpecContainerGetArgs>> containers;

    public Input<List<ServiceTemplateSpecContainerGetArgs>> getContainers() {
        return this.containers == null ? Input.empty() : this.containers;
    }

    @InputImport(name="serviceAccountName")
    private final @Nullable Input<String> serviceAccountName;

    public Input<String> getServiceAccountName() {
        return this.serviceAccountName == null ? Input.empty() : this.serviceAccountName;
    }

    @InputImport(name="servingState")
    private final @Nullable Input<String> servingState;

    @Deprecated /* Not supported by Cloud Run fully managed */
    public Input<String> getServingState() {
        return this.servingState == null ? Input.empty() : this.servingState;
    }

    @InputImport(name="timeoutSeconds")
    private final @Nullable Input<Integer> timeoutSeconds;

    public Input<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Input.empty() : this.timeoutSeconds;
    }

    @InputImport(name="volumes")
    private final @Nullable Input<List<ServiceTemplateSpecVolumeGetArgs>> volumes;

    public Input<List<ServiceTemplateSpecVolumeGetArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public ServiceTemplateSpecGetArgs(
        @Nullable Input<Integer> containerConcurrency,
        @Nullable Input<List<ServiceTemplateSpecContainerGetArgs>> containers,
        @Nullable Input<String> serviceAccountName,
        @Nullable Input<String> servingState,
        @Nullable Input<Integer> timeoutSeconds,
        @Nullable Input<List<ServiceTemplateSpecVolumeGetArgs>> volumes) {
        this.containerConcurrency = containerConcurrency;
        this.containers = containers;
        this.serviceAccountName = serviceAccountName;
        this.servingState = servingState;
        this.timeoutSeconds = timeoutSeconds;
        this.volumes = volumes;
    }

    private ServiceTemplateSpecGetArgs() {
        this.containerConcurrency = Input.empty();
        this.containers = Input.empty();
        this.serviceAccountName = Input.empty();
        this.servingState = Input.empty();
        this.timeoutSeconds = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTemplateSpecGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> containerConcurrency;
        private @Nullable Input<List<ServiceTemplateSpecContainerGetArgs>> containers;
        private @Nullable Input<String> serviceAccountName;
        private @Nullable Input<String> servingState;
        private @Nullable Input<Integer> timeoutSeconds;
        private @Nullable Input<List<ServiceTemplateSpecVolumeGetArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceTemplateSpecGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerConcurrency = defaults.containerConcurrency;
    	      this.containers = defaults.containers;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.servingState = defaults.servingState;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder setContainerConcurrency(@Nullable Input<Integer> containerConcurrency) {
            this.containerConcurrency = containerConcurrency;
            return this;
        }

        public Builder setContainerConcurrency(@Nullable Integer containerConcurrency) {
            this.containerConcurrency = Input.ofNullable(containerConcurrency);
            return this;
        }

        public Builder setContainers(@Nullable Input<List<ServiceTemplateSpecContainerGetArgs>> containers) {
            this.containers = containers;
            return this;
        }

        public Builder setContainers(@Nullable List<ServiceTemplateSpecContainerGetArgs> containers) {
            this.containers = Input.ofNullable(containers);
            return this;
        }

        public Builder setServiceAccountName(@Nullable Input<String> serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder setServiceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = Input.ofNullable(serviceAccountName);
            return this;
        }

        public Builder setServingState(@Nullable Input<String> servingState) {
            this.servingState = servingState;
            return this;
        }

        public Builder setServingState(@Nullable String servingState) {
            this.servingState = Input.ofNullable(servingState);
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Input<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Input.ofNullable(timeoutSeconds);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<ServiceTemplateSpecVolumeGetArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<ServiceTemplateSpecVolumeGetArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }

        public ServiceTemplateSpecGetArgs build() {
            return new ServiceTemplateSpecGetArgs(containerConcurrency, containers, serviceAccountName, servingState, timeoutSeconds, volumes);
        }
    }
}
