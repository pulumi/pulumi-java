// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.apigee;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.apigee.OrganizationArgs;
import io.pulumi.gcp.apigee.inputs.OrganizationState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * An `Organization` is the top-level container in Apigee.
 * 
 * 
 * To get more information about Organization, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations)
 * * How-to Guides
 *     * [Creating an API organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Apigee Organization Cloud Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigeeNetwork", {});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigeeRange", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigeeVpcConnection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const org = new gcp.apigee.Organization("org", {
 *     analyticsRegion: "us-central1",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 * }, {
 *     dependsOn: [apigeeVpcConnection],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * current = gcp.organizations.get_client_config()
 * apigee_network = gcp.compute.Network("apigeeNetwork")
 * apigee_range = gcp.compute.GlobalAddress("apigeeRange",
 *     purpose="VPC_PEERING",
 *     address_type="INTERNAL",
 *     prefix_length=16,
 *     network=apigee_network.id)
 * apigee_vpc_connection = gcp.servicenetworking.Connection("apigeeVpcConnection",
 *     network=apigee_network.id,
 *     service="servicenetworking.googleapis.com",
 *     reserved_peering_ranges=[apigee_range.name])
 * org = gcp.apigee.Organization("org",
 *     analytics_region="us-central1",
 *     project_id=current.project,
 *     authorized_network=apigee_network.id,
 *     opts=pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var current = Output.Create(Gcp.Organizations.GetClientConfig.InvokeAsync());
 *         var apigeeNetwork = new Gcp.Compute.Network("apigeeNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *         });
 *         var apigeeRange = new Gcp.Compute.GlobalAddress("apigeeRange", new Gcp.Compute.GlobalAddressArgs
 *         {
 *             Purpose = "VPC_PEERING",
 *             AddressType = "INTERNAL",
 *             PrefixLength = 16,
 *             Network = apigeeNetwork.Id,
 *         });
 *         var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigeeVpcConnection", new Gcp.ServiceNetworking.ConnectionArgs
 *         {
 *             Network = apigeeNetwork.Id,
 *             Service = "servicenetworking.googleapis.com",
 *             ReservedPeeringRanges = 
 *             {
 *                 apigeeRange.Name,
 *             },
 *         });
 *         var org = new Gcp.Apigee.Organization("org", new Gcp.Apigee.OrganizationArgs
 *         {
 *             AnalyticsRegion = "us-central1",
 *             ProjectId = current.Apply(current => current.Project),
 *             AuthorizedNetwork = apigeeNetwork.Id,
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 apigeeVpcConnection,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/apigee"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		current, err := organizations.GetClientConfig(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeNetwork, err := compute.NewNetwork(ctx, "apigeeNetwork", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigeeRange", &compute.GlobalAddressArgs{
 * 			Purpose:      pulumi.String("VPC_PEERING"),
 * 			AddressType:  pulumi.String("INTERNAL"),
 * 			PrefixLength: pulumi.Int(16),
 * 			Network:      apigeeNetwork.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigeeVpcConnection", &servicenetworking.ConnectionArgs{
 * 			Network: apigeeNetwork.ID(),
 * 			Service: pulumi.String("servicenetworking.googleapis.com"),
 * 			ReservedPeeringRanges: pulumi.StringArray{
 * 				apigeeRange.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
 * 			AnalyticsRegion:   pulumi.String("us-central1"),
 * 			ProjectId:         pulumi.String(current.Project),
 * 			AuthorizedNetwork: apigeeNetwork.ID(),
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			apigeeVpcConnection,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Apigee Organization Cloud Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigeeNetwork", {});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigeeRange", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigeeVpcConnection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeKeyring = new gcp.kms.KeyRing("apigeeKeyring", {location: "us-central1"});
 * const apigeeKey = new gcp.kms.CryptoKey("apigeeKey", {keyRing: apigeeKeyring.id});
 * const apigeeSa = new gcp.projects.ServiceIdentity("apigeeSa", {
 *     project: google_project.project.project_id,
 *     service: google_project_service.apigee.service,
 * }, {
 *     provider: google_beta,
 * });
 * const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMBinding("apigeeSaKeyuser", {
 *     cryptoKeyId: apigeeKey.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [pulumi.interpolate`serviceAccount:${apigeeSa.email}`],
 * });
 * const org = new gcp.apigee.Organization("org", {
 *     analyticsRegion: "us-central1",
 *     displayName: "apigee-org",
 *     description: "Auto-provisioned Apigee Org.",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 *     runtimeDatabaseEncryptionKeyName: apigeeKey.id,
 * }, {
 *     dependsOn: [
 *         apigeeVpcConnection,
 *         apigeeSaKeyuser,
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * current = gcp.organizations.get_client_config()
 * apigee_network = gcp.compute.Network("apigeeNetwork")
 * apigee_range = gcp.compute.GlobalAddress("apigeeRange",
 *     purpose="VPC_PEERING",
 *     address_type="INTERNAL",
 *     prefix_length=16,
 *     network=apigee_network.id)
 * apigee_vpc_connection = gcp.servicenetworking.Connection("apigeeVpcConnection",
 *     network=apigee_network.id,
 *     service="servicenetworking.googleapis.com",
 *     reserved_peering_ranges=[apigee_range.name])
 * apigee_keyring = gcp.kms.KeyRing("apigeeKeyring", location="us-central1")
 * apigee_key = gcp.kms.CryptoKey("apigeeKey", key_ring=apigee_keyring.id)
 * apigee_sa = gcp.projects.ServiceIdentity("apigeeSa",
 *     project=google_project["project"]["project_id"],
 *     service=google_project_service["apigee"]["service"],
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * apigee_sa_keyuser = gcp.kms.CryptoKeyIAMBinding("apigeeSaKeyuser",
 *     crypto_key_id=apigee_key.id,
 *     role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members=[apigee_sa.email.apply(lambda email: f"serviceAccount:{email}")])
 * org = gcp.apigee.Organization("org",
 *     analytics_region="us-central1",
 *     display_name="apigee-org",
 *     description="Auto-provisioned Apigee Org.",
 *     project_id=current.project,
 *     authorized_network=apigee_network.id,
 *     runtime_database_encryption_key_name=apigee_key.id,
 *     opts=pulumi.ResourceOptions(depends_on=[
 *             apigee_vpc_connection,
 *             apigee_sa_keyuser,
 *         ]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var current = Output.Create(Gcp.Organizations.GetClientConfig.InvokeAsync());
 *         var apigeeNetwork = new Gcp.Compute.Network("apigeeNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *         });
 *         var apigeeRange = new Gcp.Compute.GlobalAddress("apigeeRange", new Gcp.Compute.GlobalAddressArgs
 *         {
 *             Purpose = "VPC_PEERING",
 *             AddressType = "INTERNAL",
 *             PrefixLength = 16,
 *             Network = apigeeNetwork.Id,
 *         });
 *         var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigeeVpcConnection", new Gcp.ServiceNetworking.ConnectionArgs
 *         {
 *             Network = apigeeNetwork.Id,
 *             Service = "servicenetworking.googleapis.com",
 *             ReservedPeeringRanges = 
 *             {
 *                 apigeeRange.Name,
 *             },
 *         });
 *         var apigeeKeyring = new Gcp.Kms.KeyRing("apigeeKeyring", new Gcp.Kms.KeyRingArgs
 *         {
 *             Location = "us-central1",
 *         });
 *         var apigeeKey = new Gcp.Kms.CryptoKey("apigeeKey", new Gcp.Kms.CryptoKeyArgs
 *         {
 *             KeyRing = apigeeKeyring.Id,
 *         });
 *         var apigeeSa = new Gcp.Projects.ServiceIdentity("apigeeSa", new Gcp.Projects.ServiceIdentityArgs
 *         {
 *             Project = google_project.Project.Project_id,
 *             Service = google_project_service.Apigee.Service,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var apigeeSaKeyuser = new Gcp.Kms.CryptoKeyIAMBinding("apigeeSaKeyuser", new Gcp.Kms.CryptoKeyIAMBindingArgs
 *         {
 *             CryptoKeyId = apigeeKey.Id,
 *             Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *             Members = 
 *             {
 *                 apigeeSa.Email.Apply(email => $"serviceAccount:{email}"),
 *             },
 *         });
 *         var org = new Gcp.Apigee.Organization("org", new Gcp.Apigee.OrganizationArgs
 *         {
 *             AnalyticsRegion = "us-central1",
 *             DisplayName = "apigee-org",
 *             Description = "Auto-provisioned Apigee Org.",
 *             ProjectId = current.Apply(current => current.Project),
 *             AuthorizedNetwork = apigeeNetwork.Id,
 *             RuntimeDatabaseEncryptionKeyName = apigeeKey.Id,
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 apigeeVpcConnection,
 *                 apigeeSaKeyuser,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/apigee"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		current, err := organizations.GetClientConfig(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeNetwork, err := compute.NewNetwork(ctx, "apigeeNetwork", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigeeRange", &compute.GlobalAddressArgs{
 * 			Purpose:      pulumi.String("VPC_PEERING"),
 * 			AddressType:  pulumi.String("INTERNAL"),
 * 			PrefixLength: pulumi.Int(16),
 * 			Network:      apigeeNetwork.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigeeVpcConnection", &servicenetworking.ConnectionArgs{
 * 			Network: apigeeNetwork.ID(),
 * 			Service: pulumi.String("servicenetworking.googleapis.com"),
 * 			ReservedPeeringRanges: pulumi.StringArray{
 * 				apigeeRange.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeKeyring, err := kms.NewKeyRing(ctx, "apigeeKeyring", &kms.KeyRingArgs{
 * 			Location: pulumi.String("us-central1"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeKey, err := kms.NewCryptoKey(ctx, "apigeeKey", &kms.CryptoKeyArgs{
 * 			KeyRing: apigeeKeyring.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeSa, err := projects.NewServiceIdentity(ctx, "apigeeSa", &projects.ServiceIdentityArgs{
 * 			Project: pulumi.Any(google_project.Project.Project_id),
 * 			Service: pulumi.Any(google_project_service.Apigee.Service),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		apigeeSaKeyuser, err := kms.NewCryptoKeyIAMBinding(ctx, "apigeeSaKeyuser", &kms.CryptoKeyIAMBindingArgs{
 * 			CryptoKeyId: apigeeKey.ID(),
 * 			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
 * 			Members: pulumi.StringArray{
 * 				apigeeSa.Email.ApplyT(func(email string) (string, error) {
 * 					return fmt.Sprintf("%v%v", "serviceAccount:", email), nil
 * 				}).(pulumi.StringOutput),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
 * 			AnalyticsRegion:                  pulumi.String("us-central1"),
 * 			DisplayName:                      pulumi.String("apigee-org"),
 * 			Description:                      pulumi.String("Auto-provisioned Apigee Org."),
 * 			ProjectId:                        pulumi.String(current.Project),
 * 			AuthorizedNetwork:                apigeeNetwork.ID(),
 * 			RuntimeDatabaseEncryptionKeyName: apigeeKey.ID(),
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			apigeeVpcConnection,
 * 			apigeeSaKeyuser,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Organization can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:apigee/organization:Organization default organizations/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:apigee/organization:Organization default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:apigee/organization:Organization")
public class Organization extends io.pulumi.resources.CustomResource {
    /**
     * Primary GCP region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
     * 
     */
    @Export(name="analyticsRegion", type=String.class, parameters={})
    private Output</* @Nullable */ String> analyticsRegion;

    /**
     * @return Primary GCP region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
     * 
     */
    public Output</* @Nullable */ String> getAnalyticsRegion() {
        return this.analyticsRegion;
    }
    /**
     * Compute Engine network used for Service Networking to be peered with Apigee runtime instances.
     * See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started).
     * Valid only when `RuntimeType` is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
     * 
     */
    @Export(name="authorizedNetwork", type=String.class, parameters={})
    private Output</* @Nullable */ String> authorizedNetwork;

    /**
     * @return Compute Engine network used for Service Networking to be peered with Apigee runtime instances.
     * See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started).
     * Valid only when `RuntimeType` is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
     * 
     */
    public Output</* @Nullable */ String> getAuthorizedNetwork() {
        return this.authorizedNetwork;
    }
    /**
     * Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when 'RuntimeType'
     * is CLOUD. A base64-encoded string.
     * 
     */
    @Export(name="caCertificate", type=String.class, parameters={})
    private Output<String> caCertificate;

    /**
     * @return Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when 'RuntimeType'
     * is CLOUD. A base64-encoded string.
     * 
     */
    public Output<String> getCaCertificate() {
        return this.caCertificate;
    }
    /**
     * Description of the Apigee organization.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the Apigee organization.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The display name of the Apigee organization.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The display name of the Apigee organization.
     * 
     */
    public Output</* @Nullable */ String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Output only. Name of the Apigee organization.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Output only. Name of the Apigee organization.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The project ID associated with the Apigee organization.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The project ID associated with the Apigee organization.
     * 
     */
    public Output<String> getProjectId() {
        return this.projectId;
    }
    /**
     * Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
     * Update is not allowed after the organization is created.
     * If not specified, a Google-Managed encryption key will be used.
     * Valid only when `RuntimeType` is CLOUD. For example: `projects/foo/locations/us/keyRings/bar/cryptoKeys/baz`.
     * 
     */
    @Export(name="runtimeDatabaseEncryptionKeyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> runtimeDatabaseEncryptionKeyName;

    /**
     * @return Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
     * Update is not allowed after the organization is created.
     * If not specified, a Google-Managed encryption key will be used.
     * Valid only when `RuntimeType` is CLOUD. For example: `projects/foo/locations/us/keyRings/bar/cryptoKeys/baz`.
     * 
     */
    public Output</* @Nullable */ String> getRuntimeDatabaseEncryptionKeyName() {
        return this.runtimeDatabaseEncryptionKeyName;
    }
    /**
     * Runtime type of the Apigee organization based on the Apigee subscription purchased.
     * Default value is `CLOUD`.
     * Possible values are `CLOUD` and `HYBRID`.
     * 
     */
    @Export(name="runtimeType", type=String.class, parameters={})
    private Output</* @Nullable */ String> runtimeType;

    /**
     * @return Runtime type of the Apigee organization based on the Apigee subscription purchased.
     * Default value is `CLOUD`.
     * Possible values are `CLOUD` and `HYBRID`.
     * 
     */
    public Output</* @Nullable */ String> getRuntimeType() {
        return this.runtimeType;
    }
    /**
     * Output only. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation
     * purposes only) or paid (full subscription has been purchased).
     * 
     */
    @Export(name="subscriptionType", type=String.class, parameters={})
    private Output<String> subscriptionType;

    /**
     * @return Output only. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation
     * purposes only) or paid (full subscription has been purchased).
     * 
     */
    public Output<String> getSubscriptionType() {
        return this.subscriptionType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Organization(String name) {
        this(name, OrganizationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Organization(String name, OrganizationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Organization(String name, OrganizationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/organization:Organization", name, args == null ? OrganizationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Organization(String name, Output<String> id, @Nullable OrganizationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/organization:Organization", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Organization get(String name, Output<String> id, @Nullable OrganizationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Organization(name, id, state, options);
    }
}
