// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.iot;

import io.pulumi.core.Alias;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.iot.RegistryArgs;
import io.pulumi.gcp.iot.inputs.RegistryState;
import io.pulumi.gcp.iot.outputs.RegistryCredential;
import io.pulumi.gcp.iot.outputs.RegistryEventNotificationConfigItem;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A Google Cloud IoT Core device registry.
 * 
 * 
 * To get more information about DeviceRegistry, see:
 * 
 * * [API documentation](https://cloud.google.com/iot/docs/reference/cloudiot/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/iot/docs/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Cloudiot Device Registry Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const test_registry = new gcp.iot.Registry("test-registry", {});
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * test_registry = gcp.iot.Registry("test-registry")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test_registry = new Gcp.Iot.Registry("test-registry", new Gcp.Iot.RegistryArgs
 *         {
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iot.NewRegistry(ctx, "test-registry", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Cloudiot Device Registry Single Event Notification Configs
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const test_registry = new gcp.iot.Registry("test-registry", {eventNotificationConfigs: [{
 *     pubsubTopicName: default_telemetry.id,
 *     subfolderMatches: "",
 * }]});
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default_telemetry = gcp.pubsub.Topic("default-telemetry")
 * test_registry = gcp.iot.Registry("test-registry", event_notification_configs=[gcp.iot.RegistryEventNotificationConfigItemArgs(
 *     pubsub_topic_name=default_telemetry.id,
 *     subfolder_matches="",
 * )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var default_telemetry = new Gcp.PubSub.Topic("default-telemetry", new Gcp.PubSub.TopicArgs
 *         {
 *         });
 *         var test_registry = new Gcp.Iot.Registry("test-registry", new Gcp.Iot.RegistryArgs
 *         {
 *             EventNotificationConfigs = 
 *             {
 *                 new Gcp.Iot.Inputs.RegistryEventNotificationConfigItemArgs
 *                 {
 *                     PubsubTopicName = default_telemetry.Id,
 *                     SubfolderMatches = "",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := pubsub.NewTopic(ctx, "default-telemetry", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iot.NewRegistry(ctx, "test-registry", &iot.RegistryArgs{
 * 			EventNotificationConfigs: iot.RegistryEventNotificationConfigItemArray{
 * 				&iot.RegistryEventNotificationConfigItemArgs{
 * 					PubsubTopicName:  default_telemetry.ID(),
 * 					SubfolderMatches: pulumi.String(""),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Cloudiot Device Registry Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const default_devicestatus = new gcp.pubsub.Topic("default-devicestatus", {});
 * const default_telemetry = new gcp.pubsub.Topic("default-telemetry", {});
 * const additional_telemetry = new gcp.pubsub.Topic("additional-telemetry", {});
 * const test_registry = new gcp.iot.Registry("test-registry", {
 *     eventNotificationConfigs: [
 *         {
 *             pubsubTopicName: additional_telemetry.id,
 *             subfolderMatches: "test/path",
 *         },
 *         {
 *             pubsubTopicName: default_telemetry.id,
 *             subfolderMatches: "",
 *         },
 *     ],
 *     stateNotificationConfig: {
 *         pubsub_topic_name: default_devicestatus.id,
 *     },
 *     mqttConfig: {
 *         mqtt_enabled_state: "MQTT_ENABLED",
 *     },
 *     httpConfig: {
 *         http_enabled_state: "HTTP_ENABLED",
 *     },
 *     logLevel: "INFO",
 *     credentials: [{
 *         publicKeyCertificate: {
 *             format: "X509_CERTIFICATE_PEM",
 *             certificate: fs.readFileSync("test-fixtures/rsa_cert.pem"),
 *         },
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default_devicestatus = gcp.pubsub.Topic("default-devicestatus")
 * default_telemetry = gcp.pubsub.Topic("default-telemetry")
 * additional_telemetry = gcp.pubsub.Topic("additional-telemetry")
 * test_registry = gcp.iot.Registry("test-registry",
 *     event_notification_configs=[
 *         gcp.iot.RegistryEventNotificationConfigItemArgs(
 *             pubsub_topic_name=additional_telemetry.id,
 *             subfolder_matches="test/path",
 *         ),
 *         gcp.iot.RegistryEventNotificationConfigItemArgs(
 *             pubsub_topic_name=default_telemetry.id,
 *             subfolder_matches="",
 *         ),
 *     ],
 *     state_notification_config={
 *         "pubsub_topic_name": default_devicestatus.id,
 *     },
 *     mqtt_config={
 *         "mqtt_enabled_state": "MQTT_ENABLED",
 *     },
 *     http_config={
 *         "http_enabled_state": "HTTP_ENABLED",
 *     },
 *     log_level="INFO",
 *     credentials=[gcp.iot.RegistryCredentialArgs(
 *         public_key_certificate={
 *             "format": "X509_CERTIFICATE_PEM",
 *             "certificate": (lambda path: open(path).read())("test-fixtures/rsa_cert.pem"),
 *         },
 *     )])
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var default_devicestatus = new Gcp.PubSub.Topic("default-devicestatus", new Gcp.PubSub.TopicArgs
 *         {
 *         });
 *         var default_telemetry = new Gcp.PubSub.Topic("default-telemetry", new Gcp.PubSub.TopicArgs
 *         {
 *         });
 *         var additional_telemetry = new Gcp.PubSub.Topic("additional-telemetry", new Gcp.PubSub.TopicArgs
 *         {
 *         });
 *         var test_registry = new Gcp.Iot.Registry("test-registry", new Gcp.Iot.RegistryArgs
 *         {
 *             EventNotificationConfigs = 
 *             {
 *                 new Gcp.Iot.Inputs.RegistryEventNotificationConfigItemArgs
 *                 {
 *                     PubsubTopicName = additional_telemetry.Id,
 *                     SubfolderMatches = "test/path",
 *                 },
 *                 new Gcp.Iot.Inputs.RegistryEventNotificationConfigItemArgs
 *                 {
 *                     PubsubTopicName = default_telemetry.Id,
 *                     SubfolderMatches = "",
 *                 },
 *             },
 *             StateNotificationConfig = 
 *             {
 *                 { "pubsub_topic_name", default_devicestatus.Id },
 *             },
 *             MqttConfig = 
 *             {
 *                 { "mqtt_enabled_state", "MQTT_ENABLED" },
 *             },
 *             HttpConfig = 
 *             {
 *                 { "http_enabled_state", "HTTP_ENABLED" },
 *             },
 *             LogLevel = "INFO",
 *             Credentials = 
 *             {
 *                 new Gcp.Iot.Inputs.RegistryCredentialArgs
 *                 {
 *                     PublicKeyCertificate = 
 *                     {
 *                         { "format", "X509_CERTIFICATE_PEM" },
 *                         { "certificate", File.ReadAllText("test-fixtures/rsa_cert.pem") },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iot"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := pubsub.NewTopic(ctx, "default-devicestatus", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = pubsub.NewTopic(ctx, "default-telemetry", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = pubsub.NewTopic(ctx, "additional-telemetry", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iot.NewRegistry(ctx, "test-registry", &iot.RegistryArgs{
 * 			EventNotificationConfigs: iot.RegistryEventNotificationConfigItemArray{
 * 				&iot.RegistryEventNotificationConfigItemArgs{
 * 					PubsubTopicName:  additional_telemetry.ID(),
 * 					SubfolderMatches: pulumi.String("test/path"),
 * 				},
 * 				&iot.RegistryEventNotificationConfigItemArgs{
 * 					PubsubTopicName:  default_telemetry.ID(),
 * 					SubfolderMatches: pulumi.String(""),
 * 				},
 * 			},
 * 			StateNotificationConfig: pulumi.AnyMap{
 * 				"pubsub_topic_name": default_devicestatus.ID(),
 * 			},
 * 			MqttConfig: pulumi.AnyMap{
 * 				"mqtt_enabled_state": pulumi.Any("MQTT_ENABLED"),
 * 			},
 * 			HttpConfig: pulumi.AnyMap{
 * 				"http_enabled_state": pulumi.Any("HTTP_ENABLED"),
 * 			},
 * 			LogLevel: pulumi.String("INFO"),
 * 			Credentials: iot.RegistryCredentialArray{
 * 				&iot.RegistryCredentialArgs{
 * 					PublicKeyCertificate: pulumi.AnyMap{
 * 						"format":      pulumi.Any("X509_CERTIFICATE_PEM"),
 * 						"certificate": readFileOrPanic("test-fixtures/rsa_cert.pem"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * DeviceRegistry can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{project}}/locations/{{region}}/registries/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:iot/registry:Registry default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:iot/registry:Registry")
public class Registry extends io.pulumi.resources.CustomResource {
    /**
     * List of public key certificates to authenticate devices.
     * The structure is documented below.
     * 
     */
    @Export(name="credentials", type=List.class, parameters={RegistryCredential.class})
    private Output</* @Nullable */ List<RegistryCredential>> credentials;

    /**
     * @return List of public key certificates to authenticate devices.
     * The structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<RegistryCredential>> getCredentials() {
        return this.credentials;
    }
    /**
     * List of configurations for event notifications, such as PubSub topics
     * to publish device events to.
     * Structure is documented below.
     * 
     */
    @Export(name="eventNotificationConfigs", type=List.class, parameters={RegistryEventNotificationConfigItem.class})
    private Output<List<RegistryEventNotificationConfigItem>> eventNotificationConfigs;

    /**
     * @return List of configurations for event notifications, such as PubSub topics
     * to publish device events to.
     * Structure is documented below.
     * 
     */
    public Output<List<RegistryEventNotificationConfigItem>> getEventNotificationConfigs() {
        return this.eventNotificationConfigs;
    }
    /**
     * Activate or deactivate HTTP.
     * The structure is documented below.
     * 
     */
    @Export(name="httpConfig", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> httpConfig;

    /**
     * @return Activate or deactivate HTTP.
     * The structure is documented below.
     * 
     */
    public Output<Map<String,Object>> getHttpConfig() {
        return this.httpConfig;
    }
    /**
     * The default logging verbosity for activity from devices in this
     * registry. Specifies which events should be written to logs. For
     * example, if the LogLevel is ERROR, only events that terminate in
     * errors will be logged. LogLevel is inclusive; enabling INFO logging
     * will also enable ERROR logging.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ERROR`, `INFO`, and `DEBUG`.
     * 
     */
    @Export(name="logLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> logLevel;

    /**
     * @return The default logging verbosity for activity from devices in this
     * registry. Specifies which events should be written to logs. For
     * example, if the LogLevel is ERROR, only events that terminate in
     * errors will be logged. LogLevel is inclusive; enabling INFO logging
     * will also enable ERROR logging.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ERROR`, `INFO`, and `DEBUG`.
     * 
     */
    public Output</* @Nullable */ String> getLogLevel() {
        return this.logLevel;
    }
    /**
     * Activate or deactivate MQTT.
     * The structure is documented below.
     * 
     */
    @Export(name="mqttConfig", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> mqttConfig;

    /**
     * @return Activate or deactivate MQTT.
     * The structure is documented below.
     * 
     */
    public Output<Map<String,Object>> getMqttConfig() {
        return this.mqttConfig;
    }
    /**
     * A unique name for the resource, required by device registry.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A unique name for the resource, required by device registry.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The region in which the created registry should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region in which the created registry should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * A PubSub topic to publish device state updates.
     * The structure is documented below.
     * 
     */
    @Export(name="stateNotificationConfig", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> stateNotificationConfig;

    /**
     * @return A PubSub topic to publish device state updates.
     * The structure is documented below.
     * 
     */
    public Output</* @Nullable */ Map<String,Object>> getStateNotificationConfig() {
        return this.stateNotificationConfig;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Registry(String name) {
        this(name, RegistryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Registry(String name, @Nullable RegistryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Registry(String name, @Nullable RegistryArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:iot/registry:Registry", name, args == null ? RegistryArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Registry(String name, Output<String> id, @Nullable RegistryState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:iot/registry:Registry", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("gcp:kms/registry:Registry").build())
            ))
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Registry get(String name, Output<String> id, @Nullable RegistryState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Registry(name, id, state, options);
    }
}
