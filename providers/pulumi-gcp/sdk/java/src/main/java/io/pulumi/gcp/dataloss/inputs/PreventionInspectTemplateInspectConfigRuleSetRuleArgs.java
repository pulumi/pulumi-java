// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataloss.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.dataloss.inputs.PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs;
import io.pulumi.gcp.dataloss.inputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PreventionInspectTemplateInspectConfigRuleSetRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final PreventionInspectTemplateInspectConfigRuleSetRuleArgs Empty = new PreventionInspectTemplateInspectConfigRuleSetRuleArgs();

    /**
     * The rule that specifies conditions when findings of infoTypes specified in InspectionRuleSet are removed from results.
     * Structure is documented below.
     * 
     */
    @InputImport(name="exclusionRule")
        private final @Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs> exclusionRule;

    public Input<PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs> getExclusionRule() {
        return this.exclusionRule == null ? Input.empty() : this.exclusionRule;
    }

    /**
     * Hotword-based detection rule.
     * Structure is documented below.
     * 
     */
    @InputImport(name="hotwordRule")
        private final @Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs> hotwordRule;

    public Input<PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs> getHotwordRule() {
        return this.hotwordRule == null ? Input.empty() : this.hotwordRule;
    }

    public PreventionInspectTemplateInspectConfigRuleSetRuleArgs(
        @Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs> exclusionRule,
        @Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs> hotwordRule) {
        this.exclusionRule = exclusionRule;
        this.hotwordRule = hotwordRule;
    }

    private PreventionInspectTemplateInspectConfigRuleSetRuleArgs() {
        this.exclusionRule = Input.empty();
        this.hotwordRule = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreventionInspectTemplateInspectConfigRuleSetRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs> exclusionRule;
        private @Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs> hotwordRule;

        public Builder() {
    	      // Empty
        }

        public Builder(PreventionInspectTemplateInspectConfigRuleSetRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclusionRule = defaults.exclusionRule;
    	      this.hotwordRule = defaults.hotwordRule;
        }

        public Builder setExclusionRule(@Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs> exclusionRule) {
            this.exclusionRule = exclusionRule;
            return this;
        }

        public Builder setExclusionRule(@Nullable PreventionInspectTemplateInspectConfigRuleSetRuleExclusionRuleArgs exclusionRule) {
            this.exclusionRule = Input.ofNullable(exclusionRule);
            return this;
        }

        public Builder setHotwordRule(@Nullable Input<PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs> hotwordRule) {
            this.hotwordRule = hotwordRule;
            return this;
        }

        public Builder setHotwordRule(@Nullable PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleArgs hotwordRule) {
            this.hotwordRule = Input.ofNullable(hotwordRule);
            return this;
        }
        public PreventionInspectTemplateInspectConfigRuleSetRuleArgs build() {
            return new PreventionInspectTemplateInspectConfigRuleSetRuleArgs(exclusionRule, hotwordRule);
        }
    }
}
