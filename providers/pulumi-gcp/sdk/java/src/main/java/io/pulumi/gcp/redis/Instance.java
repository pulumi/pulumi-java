// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.redis;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.redis.InstanceArgs;
import io.pulumi.gcp.redis.inputs.InstanceState;
import io.pulumi.gcp.redis.outputs.InstanceMaintenancePolicy;
import io.pulumi.gcp.redis.outputs.InstanceMaintenanceSchedule;
import io.pulumi.gcp.redis.outputs.InstanceNode;
import io.pulumi.gcp.redis.outputs.InstanceServerCaCert;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A Google Cloud Redis instance.
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/memorystore/docs/redis/)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:redis/instance:Instance default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:redis/instance:Instance")
public class Instance extends io.pulumi.resources.CustomResource {
    /**
     * Only applicable to STANDARD_HA tier which protects the instance
     * against zonal failures by provisioning it across two zones.
     * If provided, it must be a different zone from the one provided in
     * [locationId].
     * 
     */
    @Export(name="alternativeLocationId", type=String.class, parameters={})
    private Output<String> alternativeLocationId;

    /**
     * @return Only applicable to STANDARD_HA tier which protects the instance
     * against zonal failures by provisioning it across two zones.
     * If provided, it must be a different zone from the one provided in
     * [locationId].
     * 
     */
    public Output<String> getAlternativeLocationId() {
        return this.alternativeLocationId;
    }
    /**
     * Optional. Indicates whether OSS Redis AUTH is enabled for the
     * instance. If set to "true" AUTH is enabled on the instance.
     * Default value is "false" meaning AUTH is disabled.
     * 
     */
    @Export(name="authEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> authEnabled;

    /**
     * @return Optional. Indicates whether OSS Redis AUTH is enabled for the
     * instance. If set to "true" AUTH is enabled on the instance.
     * Default value is "false" meaning AUTH is disabled.
     * 
     */
    public Output</* @Nullable */ Boolean> getAuthEnabled() {
        return this.authEnabled;
    }
    /**
     * AUTH String set on the instance. This field will only be populated if auth_enabled is true.
     * 
     */
    @Export(name="authString", type=String.class, parameters={})
    private Output<String> authString;

    /**
     * @return AUTH String set on the instance. This field will only be populated if auth_enabled is true.
     * 
     */
    public Output<String> getAuthString() {
        return this.authString;
    }
    /**
     * The full name of the Google Compute Engine network to which the
     * instance is connected. If left unspecified, the default network
     * will be used.
     * 
     */
    @Export(name="authorizedNetwork", type=String.class, parameters={})
    private Output<String> authorizedNetwork;

    /**
     * @return The full name of the Google Compute Engine network to which the
     * instance is connected. If left unspecified, the default network
     * will be used.
     * 
     */
    public Output<String> getAuthorizedNetwork() {
        return this.authorizedNetwork;
    }
    /**
     * The connection mode of the Redis instance.
     * Default value is `DIRECT_PEERING`.
     * Possible values are `DIRECT_PEERING` and `PRIVATE_SERVICE_ACCESS`.
     * 
     */
    @Export(name="connectMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> connectMode;

    /**
     * @return The connection mode of the Redis instance.
     * Default value is `DIRECT_PEERING`.
     * Possible values are `DIRECT_PEERING` and `PRIVATE_SERVICE_ACCESS`.
     * 
     */
    public Output</* @Nullable */ String> getConnectMode() {
        return this.connectMode;
    }
    /**
     * - 
     * Output only. The time when the policy was created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return -
     * Output only. The time when the policy was created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
     * [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
     * [alternativeLocationId] and can change after a failover event.
     * 
     */
    @Export(name="currentLocationId", type=String.class, parameters={})
    private Output<String> currentLocationId;

    /**
     * @return The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
     * [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
     * [alternativeLocationId] and can change after a failover event.
     * 
     */
    public Output<String> getCurrentLocationId() {
        return this.currentLocationId;
    }
    /**
     * An arbitrary and optional user-provided name for the instance.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return An arbitrary and optional user-provided name for the instance.
     * 
     */
    public Output</* @Nullable */ String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
     * 
     */
    @Export(name="host", type=String.class, parameters={})
    private Output<String> host;

    /**
     * @return Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
     * 
     */
    public Output<String> getHost() {
        return this.host;
    }
    /**
     * Resource labels to represent user provided metadata.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * The zone where the instance will be provisioned. If not provided,
     * the service will choose a zone for the instance. For STANDARD_HA tier,
     * instances will be created across two zones for protection against
     * zonal failures. If [alternativeLocationId] is also provided, it must
     * be different from [locationId].
     * 
     */
    @Export(name="locationId", type=String.class, parameters={})
    private Output<String> locationId;

    /**
     * @return The zone where the instance will be provisioned. If not provided,
     * the service will choose a zone for the instance. For STANDARD_HA tier,
     * instances will be created across two zones for protection against
     * zonal failures. If [alternativeLocationId] is also provided, it must
     * be different from [locationId].
     * 
     */
    public Output<String> getLocationId() {
        return this.locationId;
    }
    /**
     * Maintenance policy for an instance.
     * Structure is documented below.
     * 
     */
    @Export(name="maintenancePolicy", type=InstanceMaintenancePolicy.class, parameters={})
    private Output</* @Nullable */ InstanceMaintenancePolicy> maintenancePolicy;

    /**
     * @return Maintenance policy for an instance.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ InstanceMaintenancePolicy> getMaintenancePolicy() {
        return this.maintenancePolicy;
    }
    /**
     * Upcoming maintenance schedule.
     * Structure is documented below.
     * 
     */
    @Export(name="maintenanceSchedule", type=InstanceMaintenanceSchedule.class, parameters={})
    private Output</* @Nullable */ InstanceMaintenanceSchedule> maintenanceSchedule;

    /**
     * @return Upcoming maintenance schedule.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ InstanceMaintenanceSchedule> getMaintenanceSchedule() {
        return this.maintenanceSchedule;
    }
    /**
     * Redis memory size in GiB.
     * 
     */
    @Export(name="memorySizeGb", type=Integer.class, parameters={})
    private Output<Integer> memorySizeGb;

    /**
     * @return Redis memory size in GiB.
     * 
     */
    public Output<Integer> getMemorySizeGb() {
        return this.memorySizeGb;
    }
    /**
     * The ID of the instance or a fully qualified identifier for the instance.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The ID of the instance or a fully qualified identifier for the instance.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Output only. Info per node.
     * 
     */
    @Export(name="nodes", type=List.class, parameters={InstanceNode.class})
    private Output<List<InstanceNode>> nodes;

    /**
     * @return Output only. Info per node.
     * 
     */
    public Output<List<InstanceNode>> getNodes() {
        return this.nodes;
    }
    /**
     * Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is
     * "serviceAccount:". The value may change over time for a given instance so should be checked before each import/export
     * operation.
     * 
     */
    @Export(name="persistenceIamIdentity", type=String.class, parameters={})
    private Output<String> persistenceIamIdentity;

    /**
     * @return Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is
     * "serviceAccount:". The value may change over time for a given instance so should be checked before each import/export
     * operation.
     * 
     */
    public Output<String> getPersistenceIamIdentity() {
        return this.persistenceIamIdentity;
    }
    /**
     * The port number of the exposed Redis endpoint.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output<Integer> port;

    /**
     * @return The port number of the exposed Redis endpoint.
     * 
     */
    public Output<Integer> getPort() {
        return this.port;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy
     * replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write
     * requests must target 'host'.
     * 
     */
    @Export(name="readEndpoint", type=String.class, parameters={})
    private Output<String> readEndpoint;

    /**
     * @return Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy
     * replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write
     * requests must target 'host'.
     * 
     */
    public Output<String> getReadEndpoint() {
        return this.readEndpoint;
    }
    /**
     * Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target
     * 'port'.
     * 
     */
    @Export(name="readEndpointPort", type=Integer.class, parameters={})
    private Output<Integer> readEndpointPort;

    /**
     * @return Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target
     * 'port'.
     * 
     */
    public Output<Integer> getReadEndpointPort() {
        return this.readEndpointPort;
    }
    /**
     * Optional. Read replica mode. Can only be specified when trying to create the instance. If not set, Memorystore Redis
     * backend will default to READ_REPLICAS_DISABLED. - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be
     * provided and the instance cannot scale up or down the number of replicas. - READ_REPLICAS_ENABLED: If enabled, read
     * endpoint will be provided and the instance can scale up and down the number of replicas. Default value:
     * "READ_REPLICAS_DISABLED" Possible values: ["READ_REPLICAS_DISABLED", "READ_REPLICAS_ENABLED"]
     * 
     */
    @Export(name="readReplicasMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> readReplicasMode;

    /**
     * @return Optional. Read replica mode. Can only be specified when trying to create the instance. If not set, Memorystore Redis
     * backend will default to READ_REPLICAS_DISABLED. - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be
     * provided and the instance cannot scale up or down the number of replicas. - READ_REPLICAS_ENABLED: If enabled, read
     * endpoint will be provided and the instance can scale up and down the number of replicas. Default value:
     * "READ_REPLICAS_DISABLED" Possible values: ["READ_REPLICAS_DISABLED", "READ_REPLICAS_ENABLED"]
     * 
     */
    public Output</* @Nullable */ String> getReadReplicasMode() {
        return this.readReplicasMode;
    }
    /**
     * Redis configuration parameters, according to http://redis.io/topics/config.
     * Please check Memorystore documentation for the list of supported parameters:
     * https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
     * 
     */
    @Export(name="redisConfigs", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> redisConfigs;

    /**
     * @return Redis configuration parameters, according to http://redis.io/topics/config.
     * Please check Memorystore documentation for the list of supported parameters:
     * https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getRedisConfigs() {
        return this.redisConfigs;
    }
    /**
     * The version of Redis software. If not provided, latest supported
     * version will be used. Please check the API documentation linked
     * at the top for the latest valid values.
     * 
     */
    @Export(name="redisVersion", type=String.class, parameters={})
    private Output<String> redisVersion;

    /**
     * @return The version of Redis software. If not provided, latest supported
     * version will be used. Please check the API documentation linked
     * at the top for the latest valid values.
     * 
     */
    public Output<String> getRedisVersion() {
        return this.redisVersion;
    }
    /**
     * The name of the Redis region of the instance.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The name of the Redis region of the instance.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and
     * defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default
     * is 1. The valid value for basic tier is 0 and the default is also 0.
     * 
     */
    @Export(name="replicaCount", type=Integer.class, parameters={})
    private Output<Integer> replicaCount;

    /**
     * @return Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and
     * defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default
     * is 1. The valid value for basic tier is 0 and the default is also 0.
     * 
     */
    public Output<Integer> getReplicaCount() {
        return this.replicaCount;
    }
    /**
     * The CIDR range of internal addresses that are reserved for this
     * instance. If not provided, the service will choose an unused /29
     * block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
     * unique and non-overlapping with existing subnets in an authorized
     * network.
     * 
     */
    @Export(name="reservedIpRange", type=String.class, parameters={})
    private Output<String> reservedIpRange;

    /**
     * @return The CIDR range of internal addresses that are reserved for this
     * instance. If not provided, the service will choose an unused /29
     * block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
     * unique and non-overlapping with existing subnets in an authorized
     * network.
     * 
     */
    public Output<String> getReservedIpRange() {
        return this.reservedIpRange;
    }
    /**
     * List of server CA certificates for the instance.
     * 
     */
    @Export(name="serverCaCerts", type=List.class, parameters={InstanceServerCaCert.class})
    private Output<List<InstanceServerCaCert>> serverCaCerts;

    /**
     * @return List of server CA certificates for the instance.
     * 
     */
    public Output<List<InstanceServerCaCert>> getServerCaCerts() {
        return this.serverCaCerts;
    }
    /**
     * The service tier of the instance. Must be one of these values:
     * - BASIC: standalone instance
     * - STANDARD_HA: highly available primary/replica instances
     *   Default value is `BASIC`.
     *   Possible values are `BASIC` and `STANDARD_HA`.
     * 
     */
    @Export(name="tier", type=String.class, parameters={})
    private Output</* @Nullable */ String> tier;

    /**
     * @return The service tier of the instance. Must be one of these values:
     * - BASIC: standalone instance
     * - STANDARD_HA: highly available primary/replica instances
     *   Default value is `BASIC`.
     *   Possible values are `BASIC` and `STANDARD_HA`.
     * 
     */
    public Output</* @Nullable */ String> getTier() {
        return this.tier;
    }
    /**
     * The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
     * - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
     *   Default value is `DISABLED`.
     *   Possible values are `SERVER_AUTHENTICATION` and `DISABLED`.
     * 
     */
    @Export(name="transitEncryptionMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> transitEncryptionMode;

    /**
     * @return The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
     * - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
     *   Default value is `DISABLED`.
     *   Possible values are `SERVER_AUTHENTICATION` and `DISABLED`.
     * 
     */
    public Output</* @Nullable */ String> getTransitEncryptionMode() {
        return this.transitEncryptionMode;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:redis/instance:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:redis/instance:Instance", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
