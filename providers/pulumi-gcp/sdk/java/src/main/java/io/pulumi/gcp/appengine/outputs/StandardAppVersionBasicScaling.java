// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class StandardAppVersionBasicScaling {
    private final @Nullable String idleTimeout;
    private final Integer maxInstances;

    @OutputCustomType.Constructor({"idleTimeout","maxInstances"})
    private StandardAppVersionBasicScaling(
        @Nullable String idleTimeout,
        Integer maxInstances) {
        this.idleTimeout = idleTimeout;
        this.maxInstances = Objects.requireNonNull(maxInstances);
    }

    public Optional<String> getIdleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }
    public Integer getMaxInstances() {
        return this.maxInstances;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardAppVersionBasicScaling defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String idleTimeout;
        private Integer maxInstances;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardAppVersionBasicScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.maxInstances = defaults.maxInstances;
        }

        public Builder setIdleTimeout(@Nullable String idleTimeout) {
            this.idleTimeout = idleTimeout;
            return this;
        }

        public Builder setMaxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }

        public StandardAppVersionBasicScaling build() {
            return new StandardAppVersionBasicScaling(idleTimeout, maxInstances);
        }
    }
}
