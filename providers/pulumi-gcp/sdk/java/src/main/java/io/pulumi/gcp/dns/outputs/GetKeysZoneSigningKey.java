// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dns.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.gcp.dns.outputs.GetKeysZoneSigningKeyDigest;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKeysZoneSigningKey {
    /**
     * String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
     * 
     */
    private final String algorithm;
    /**
     * The time that this resource was created in the control plane. This is in RFC3339 text format.
     * 
     */
    private final String creationTime;
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience.
     * 
     */
    private final String description;
    /**
     * A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
     * 
     */
    private final List<GetKeysZoneSigningKeyDigest> digests;
    /**
     * Unique identifier for the resource; defined by the server.
     * 
     */
    private final String id;
    /**
     * Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
     * 
     */
    private final Boolean isActive;
    /**
     * Length of the key in bits. Specified at creation time then immutable.
     * 
     */
    private final Integer keyLength;
    /**
     * The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
     * 
     */
    private final Integer keyTag;
    /**
     * Base64 encoded public half of this key.
     * 
     */
    private final String publicKey;

    @CustomType.Constructor
    private GetKeysZoneSigningKey(
        @CustomType.Parameter("algorithm") String algorithm,
        @CustomType.Parameter("creationTime") String creationTime,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("digests") List<GetKeysZoneSigningKeyDigest> digests,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isActive") Boolean isActive,
        @CustomType.Parameter("keyLength") Integer keyLength,
        @CustomType.Parameter("keyTag") Integer keyTag,
        @CustomType.Parameter("publicKey") String publicKey) {
        this.algorithm = algorithm;
        this.creationTime = creationTime;
        this.description = description;
        this.digests = digests;
        this.id = id;
        this.isActive = isActive;
        this.keyLength = keyLength;
        this.keyTag = keyTag;
        this.publicKey = publicKey;
    }

    /**
     * String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. Possible values are `ecdsap256sha256`, `ecdsap384sha384`, `rsasha1`, `rsasha256`, and `rsasha512`.
     * 
    */
    public String getAlgorithm() {
        return this.algorithm;
    }
    /**
     * The time that this resource was created in the control plane. This is in RFC3339 text format.
     * 
    */
    public String getCreationTime() {
        return this.creationTime;
    }
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * A list of cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Each contains:
     * 
    */
    public List<GetKeysZoneSigningKeyDigest> getDigests() {
        return this.digests;
    }
    /**
     * Unique identifier for the resource; defined by the server.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
     * 
    */
    public Boolean getIsActive() {
        return this.isActive;
    }
    /**
     * Length of the key in bits. Specified at creation time then immutable.
     * 
    */
    public Integer getKeyLength() {
        return this.keyLength;
    }
    /**
     * The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B.
     * 
    */
    public Integer getKeyTag() {
        return this.keyTag;
    }
    /**
     * Base64 encoded public half of this key.
     * 
    */
    public String getPublicKey() {
        return this.publicKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeysZoneSigningKey defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String algorithm;
        private String creationTime;
        private String description;
        private List<GetKeysZoneSigningKeyDigest> digests;
        private String id;
        private Boolean isActive;
        private Integer keyLength;
        private Integer keyTag;
        private String publicKey;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKeysZoneSigningKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.digests = defaults.digests;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.keyLength = defaults.keyLength;
    	      this.keyTag = defaults.keyTag;
    	      this.publicKey = defaults.publicKey;
        }

        public Builder algorithm(String algorithm) {
            this.algorithm = Objects.requireNonNull(algorithm);
            return this;
        }

        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder digests(List<GetKeysZoneSigningKeyDigest> digests) {
            this.digests = Objects.requireNonNull(digests);
            return this;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder isActive(Boolean isActive) {
            this.isActive = Objects.requireNonNull(isActive);
            return this;
        }

        public Builder keyLength(Integer keyLength) {
            this.keyLength = Objects.requireNonNull(keyLength);
            return this;
        }

        public Builder keyTag(Integer keyTag) {
            this.keyTag = Objects.requireNonNull(keyTag);
            return this;
        }

        public Builder publicKey(String publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }
        public GetKeysZoneSigningKey build() {
            return new GetKeysZoneSigningKey(algorithm, creationTime, description, digests, id, isActive, keyLength, keyTag, publicKey);
        }
    }
}
