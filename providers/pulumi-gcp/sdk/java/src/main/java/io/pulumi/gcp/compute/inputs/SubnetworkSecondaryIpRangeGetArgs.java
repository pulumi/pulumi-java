// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class SubnetworkSecondaryIpRangeGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubnetworkSecondaryIpRangeGetArgs Empty = new SubnetworkSecondaryIpRangeGetArgs();

    /**
     * The range of IP addresses belonging to this subnetwork secondary
     * range. Provide this property when you create the subnetwork.
     * Ranges must be unique and non-overlapping with all primary and
     * secondary IP ranges within a network. Only IPv4 is supported.
     * 
     */
    @Import(name="ipCidrRange", required=true)
      private final Output<String> ipCidrRange;

    public Output<String> getIpCidrRange() {
        return this.ipCidrRange;
    }

    /**
     * The name associated with this subnetwork secondary range, used
     * when adding an alias IP range to a VM instance. The name must
     * be 1-63 characters long, and comply with RFC1035. The name
     * must be unique within the subnetwork.
     * 
     */
    @Import(name="rangeName", required=true)
      private final Output<String> rangeName;

    public Output<String> getRangeName() {
        return this.rangeName;
    }

    public SubnetworkSecondaryIpRangeGetArgs(
        Output<String> ipCidrRange,
        Output<String> rangeName) {
        this.ipCidrRange = Objects.requireNonNull(ipCidrRange, "expected parameter 'ipCidrRange' to be non-null");
        this.rangeName = Objects.requireNonNull(rangeName, "expected parameter 'rangeName' to be non-null");
    }

    private SubnetworkSecondaryIpRangeGetArgs() {
        this.ipCidrRange = Output.empty();
        this.rangeName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubnetworkSecondaryIpRangeGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> ipCidrRange;
        private Output<String> rangeName;

        public Builder() {
    	      // Empty
        }

        public Builder(SubnetworkSecondaryIpRangeGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.rangeName = defaults.rangeName;
        }

        public Builder ipCidrRange(Output<String> ipCidrRange) {
            this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
            return this;
        }
        public Builder ipCidrRange(String ipCidrRange) {
            this.ipCidrRange = Output.of(Objects.requireNonNull(ipCidrRange));
            return this;
        }
        public Builder rangeName(Output<String> rangeName) {
            this.rangeName = Objects.requireNonNull(rangeName);
            return this;
        }
        public Builder rangeName(String rangeName) {
            this.rangeName = Output.of(Objects.requireNonNull(rangeName));
            return this;
        }        public SubnetworkSecondaryIpRangeGetArgs build() {
            return new SubnetworkSecondaryIpRangeGetArgs(ipCidrRange, rangeName);
        }
    }
}
