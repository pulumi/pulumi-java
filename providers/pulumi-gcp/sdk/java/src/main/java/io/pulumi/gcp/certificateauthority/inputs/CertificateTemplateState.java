// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.certificateauthority.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.certificateauthority.inputs.CertificateTemplateIdentityConstraintsGetArgs;
import io.pulumi.gcp.certificateauthority.inputs.CertificateTemplatePassthroughExtensionsGetArgs;
import io.pulumi.gcp.certificateauthority.inputs.CertificateTemplatePredefinedValuesGetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateTemplateState extends io.pulumi.resources.ResourceArgs {

    public static final CertificateTemplateState Empty = new CertificateTemplateState();

    /**
     * Output only. The time at which this CertificateTemplate was created.
     * 
     */
    @InputImport(name="createTime")
      private final @Nullable Input<String> createTime;

    public Input<String> getCreateTime() {
        return this.createTime == null ? Input.empty() : this.createTime;
    }

    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
     * 
     */
    @InputImport(name="identityConstraints")
      private final @Nullable Input<CertificateTemplateIdentityConstraintsGetArgs> identityConstraints;

    public Input<CertificateTemplateIdentityConstraintsGetArgs> getIdentityConstraints() {
        return this.identityConstraints == null ? Input.empty() : this.identityConstraints;
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The resource name for this CertificateTemplate in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
     * 
     */
    @InputImport(name="passthroughExtensions")
      private final @Nullable Input<CertificateTemplatePassthroughExtensionsGetArgs> passthroughExtensions;

    public Input<CertificateTemplatePassthroughExtensionsGetArgs> getPassthroughExtensions() {
        return this.passthroughExtensions == null ? Input.empty() : this.passthroughExtensions;
    }

    /**
     * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @InputImport(name="predefinedValues")
      private final @Nullable Input<CertificateTemplatePredefinedValuesGetArgs> predefinedValues;

    public Input<CertificateTemplatePredefinedValuesGetArgs> getPredefinedValues() {
        return this.predefinedValues == null ? Input.empty() : this.predefinedValues;
    }

    /**
     * The project for the resource
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Output only. The time at which this CertificateTemplate was updated.
     * 
     */
    @InputImport(name="updateTime")
      private final @Nullable Input<String> updateTime;

    public Input<String> getUpdateTime() {
        return this.updateTime == null ? Input.empty() : this.updateTime;
    }

    public CertificateTemplateState(
        @Nullable Input<String> createTime,
        @Nullable Input<String> description,
        @Nullable Input<CertificateTemplateIdentityConstraintsGetArgs> identityConstraints,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<CertificateTemplatePassthroughExtensionsGetArgs> passthroughExtensions,
        @Nullable Input<CertificateTemplatePredefinedValuesGetArgs> predefinedValues,
        @Nullable Input<String> project,
        @Nullable Input<String> updateTime) {
        this.createTime = createTime;
        this.description = description;
        this.identityConstraints = identityConstraints;
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.passthroughExtensions = passthroughExtensions;
        this.predefinedValues = predefinedValues;
        this.project = project;
        this.updateTime = updateTime;
    }

    private CertificateTemplateState() {
        this.createTime = Input.empty();
        this.description = Input.empty();
        this.identityConstraints = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.passthroughExtensions = Input.empty();
        this.predefinedValues = Input.empty();
        this.project = Input.empty();
        this.updateTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createTime;
        private @Nullable Input<String> description;
        private @Nullable Input<CertificateTemplateIdentityConstraintsGetArgs> identityConstraints;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<CertificateTemplatePassthroughExtensionsGetArgs> passthroughExtensions;
        private @Nullable Input<CertificateTemplatePredefinedValuesGetArgs> predefinedValues;
        private @Nullable Input<String> project;
        private @Nullable Input<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateTemplateState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.passthroughExtensions = defaults.passthroughExtensions;
    	      this.predefinedValues = defaults.predefinedValues;
    	      this.project = defaults.project;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder createTime(@Nullable Input<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder createTime(@Nullable String createTime) {
            this.createTime = Input.ofNullable(createTime);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder identityConstraints(@Nullable Input<CertificateTemplateIdentityConstraintsGetArgs> identityConstraints) {
            this.identityConstraints = identityConstraints;
            return this;
        }

        public Builder identityConstraints(@Nullable CertificateTemplateIdentityConstraintsGetArgs identityConstraints) {
            this.identityConstraints = Input.ofNullable(identityConstraints);
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder passthroughExtensions(@Nullable Input<CertificateTemplatePassthroughExtensionsGetArgs> passthroughExtensions) {
            this.passthroughExtensions = passthroughExtensions;
            return this;
        }

        public Builder passthroughExtensions(@Nullable CertificateTemplatePassthroughExtensionsGetArgs passthroughExtensions) {
            this.passthroughExtensions = Input.ofNullable(passthroughExtensions);
            return this;
        }

        public Builder predefinedValues(@Nullable Input<CertificateTemplatePredefinedValuesGetArgs> predefinedValues) {
            this.predefinedValues = predefinedValues;
            return this;
        }

        public Builder predefinedValues(@Nullable CertificateTemplatePredefinedValuesGetArgs predefinedValues) {
            this.predefinedValues = Input.ofNullable(predefinedValues);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder updateTime(@Nullable Input<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Input.ofNullable(updateTime);
            return this;
        }
        public CertificateTemplateState build() {
            return new CertificateTemplateState(createTime, description, identityConstraints, labels, location, name, passthroughExtensions, predefinedValues, project, updateTime);
        }
    }
}
