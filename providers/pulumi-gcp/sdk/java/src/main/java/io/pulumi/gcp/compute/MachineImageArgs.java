// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.MachineImageMachineImageEncryptionKeyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MachineImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final MachineImageArgs Empty = new MachineImageArgs();

    /**
     * A text description of the resource.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Specify this to create an application consistent machine image by informing the OS to prepare for the snapshot process.
     * Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     * 
     */
    @InputImport(name="guestFlush")
    private final @Nullable Input<Boolean> guestFlush;

    public Input<Boolean> getGuestFlush() {
        return this.guestFlush == null ? Input.empty() : this.guestFlush;
    }

    /**
     * Encrypts the machine image using a customer-supplied encryption key.
     * After you encrypt a machine image with a customer-supplied key, you must
     * provide the same key if you use the machine image later (e.g. to create a
     * instance from the image)
     * Structure is documented below.
     * 
     */
    @InputImport(name="machineImageEncryptionKey")
    private final @Nullable Input<MachineImageMachineImageEncryptionKeyArgs> machineImageEncryptionKey;

    public Input<MachineImageMachineImageEncryptionKeyArgs> getMachineImageEncryptionKey() {
        return this.machineImageEncryptionKey == null ? Input.empty() : this.machineImageEncryptionKey;
    }

    /**
     * Name of the resource.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource.
     * 
     */
    @InputImport(name="sourceInstance", required=true)
    private final Input<String> sourceInstance;

    public Input<String> getSourceInstance() {
        return this.sourceInstance;
    }

    public MachineImageArgs(
        @Nullable Input<String> description,
        @Nullable Input<Boolean> guestFlush,
        @Nullable Input<MachineImageMachineImageEncryptionKeyArgs> machineImageEncryptionKey,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        Input<String> sourceInstance) {
        this.description = description;
        this.guestFlush = guestFlush;
        this.machineImageEncryptionKey = machineImageEncryptionKey;
        this.name = name;
        this.project = project;
        this.sourceInstance = Objects.requireNonNull(sourceInstance, "expected parameter 'sourceInstance' to be non-null");
    }

    private MachineImageArgs() {
        this.description = Input.empty();
        this.guestFlush = Input.empty();
        this.machineImageEncryptionKey = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.sourceInstance = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> guestFlush;
        private @Nullable Input<MachineImageMachineImageEncryptionKeyArgs> machineImageEncryptionKey;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private Input<String> sourceInstance;

        public Builder() {
    	      // Empty
        }

        public Builder(MachineImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.guestFlush = defaults.guestFlush;
    	      this.machineImageEncryptionKey = defaults.machineImageEncryptionKey;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.sourceInstance = defaults.sourceInstance;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setGuestFlush(@Nullable Input<Boolean> guestFlush) {
            this.guestFlush = guestFlush;
            return this;
        }

        public Builder setGuestFlush(@Nullable Boolean guestFlush) {
            this.guestFlush = Input.ofNullable(guestFlush);
            return this;
        }

        public Builder setMachineImageEncryptionKey(@Nullable Input<MachineImageMachineImageEncryptionKeyArgs> machineImageEncryptionKey) {
            this.machineImageEncryptionKey = machineImageEncryptionKey;
            return this;
        }

        public Builder setMachineImageEncryptionKey(@Nullable MachineImageMachineImageEncryptionKeyArgs machineImageEncryptionKey) {
            this.machineImageEncryptionKey = Input.ofNullable(machineImageEncryptionKey);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSourceInstance(Input<String> sourceInstance) {
            this.sourceInstance = Objects.requireNonNull(sourceInstance);
            return this;
        }

        public Builder setSourceInstance(String sourceInstance) {
            this.sourceInstance = Input.of(Objects.requireNonNull(sourceInstance));
            return this;
        }

        public MachineImageArgs build() {
            return new MachineImageArgs(description, guestFlush, machineImageEncryptionKey, name, project, sourceInstance);
        }
    }
}
