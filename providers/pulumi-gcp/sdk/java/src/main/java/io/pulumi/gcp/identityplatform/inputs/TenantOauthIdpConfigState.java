// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.identityplatform.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TenantOauthIdpConfigState extends io.pulumi.resources.ResourceArgs {

    public static final TenantOauthIdpConfigState Empty = new TenantOauthIdpConfigState();

    /**
     * The client id of an OAuth client.
     * 
     */
    @InputImport(name="clientId")
    private final @Nullable Input<String> clientId;

    public Input<String> getClientId() {
        return this.clientId == null ? Input.empty() : this.clientId;
    }

    /**
     * The client secret of the OAuth client, to enable OIDC code flow.
     * 
     */
    @InputImport(name="clientSecret")
    private final @Nullable Input<String> clientSecret;

    public Input<String> getClientSecret() {
        return this.clientSecret == null ? Input.empty() : this.clientSecret;
    }

    /**
     * Human friendly display name.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * If this config allows users to sign in with the provider.
     * 
     */
    @InputImport(name="enabled")
    private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * For OIDC Idps, the issuer identifier.
     * 
     */
    @InputImport(name="issuer")
    private final @Nullable Input<String> issuer;

    public Input<String> getIssuer() {
        return this.issuer == null ? Input.empty() : this.issuer;
    }

    /**
     * The name of the OauthIdpConfig. Must start with `oidc.`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The name of the tenant where this OIDC IDP configuration resource exists
     * 
     */
    @InputImport(name="tenant")
    private final @Nullable Input<String> tenant;

    public Input<String> getTenant() {
        return this.tenant == null ? Input.empty() : this.tenant;
    }

    public TenantOauthIdpConfigState(
        @Nullable Input<String> clientId,
        @Nullable Input<String> clientSecret,
        @Nullable Input<String> displayName,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> issuer,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> tenant) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.displayName = displayName;
        this.enabled = enabled;
        this.issuer = issuer;
        this.name = name;
        this.project = project;
        this.tenant = tenant;
    }

    private TenantOauthIdpConfigState() {
        this.clientId = Input.empty();
        this.clientSecret = Input.empty();
        this.displayName = Input.empty();
        this.enabled = Input.empty();
        this.issuer = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.tenant = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TenantOauthIdpConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> clientId;
        private @Nullable Input<String> clientSecret;
        private @Nullable Input<String> displayName;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> issuer;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> tenant;

        public Builder() {
    	      // Empty
        }

        public Builder(TenantOauthIdpConfigState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.issuer = defaults.issuer;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.tenant = defaults.tenant;
        }

        public Builder setClientId(@Nullable Input<String> clientId) {
            this.clientId = clientId;
            return this;
        }

        public Builder setClientId(@Nullable String clientId) {
            this.clientId = Input.ofNullable(clientId);
            return this;
        }

        public Builder setClientSecret(@Nullable Input<String> clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder setClientSecret(@Nullable String clientSecret) {
            this.clientSecret = Input.ofNullable(clientSecret);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setIssuer(@Nullable Input<String> issuer) {
            this.issuer = issuer;
            return this;
        }

        public Builder setIssuer(@Nullable String issuer) {
            this.issuer = Input.ofNullable(issuer);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setTenant(@Nullable Input<String> tenant) {
            this.tenant = tenant;
            return this;
        }

        public Builder setTenant(@Nullable String tenant) {
            this.tenant = Input.ofNullable(tenant);
            return this;
        }

        public TenantOauthIdpConfigState build() {
            return new TenantOauthIdpConfigState(clientId, clientSecret, displayName, enabled, issuer, name, project, tenant);
        }
    }
}
