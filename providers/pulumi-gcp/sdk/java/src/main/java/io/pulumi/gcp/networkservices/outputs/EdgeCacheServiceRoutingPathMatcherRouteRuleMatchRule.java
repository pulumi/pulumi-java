// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.networkservices.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.networkservices.outputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch;
import io.pulumi.gcp.networkservices.outputs.EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule {
    /**
     * For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
     * 
     */
    private final @Nullable String fullPathMatch;
    /**
     * Specifies a list of header match criteria, all of which must match corresponding headers in the request.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches;
    /**
     * Specifies that prefixMatch and fullPathMatch matches are case sensitive.
     * 
     */
    private final @Nullable Boolean ignoreCase;
    /**
     * For satisfying the matchRule condition, the path of the request
     * must match the wildcard pattern specified in pathTemplateMatch
     * after removing any query parameters and anchor that may be part
     * of the original URL.
     * pathTemplateMatch must be between 1 and 255 characters
     * (inclusive).  The pattern specified by pathTemplateMatch may
     * have at most 5 wildcard operators and at most 5 variable
     * captures in total.
     * 
     */
    private final @Nullable String pathTemplateMatch;
    /**
     * The value of the header must start with the contents of prefixMatch.
     * 
     */
    private final @Nullable String prefixMatch;
    /**
     * Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches;

    @OutputCustomType.Constructor
    private EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule(
        @OutputCustomType.Parameter("fullPathMatch") @Nullable String fullPathMatch,
        @OutputCustomType.Parameter("headerMatches") @Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches,
        @OutputCustomType.Parameter("ignoreCase") @Nullable Boolean ignoreCase,
        @OutputCustomType.Parameter("pathTemplateMatch") @Nullable String pathTemplateMatch,
        @OutputCustomType.Parameter("prefixMatch") @Nullable String prefixMatch,
        @OutputCustomType.Parameter("queryParameterMatches") @Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches) {
        this.fullPathMatch = fullPathMatch;
        this.headerMatches = headerMatches;
        this.ignoreCase = ignoreCase;
        this.pathTemplateMatch = pathTemplateMatch;
        this.prefixMatch = prefixMatch;
        this.queryParameterMatches = queryParameterMatches;
    }

    /**
     * For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
     * 
    */
    public Optional<String> getFullPathMatch() {
        return Optional.ofNullable(this.fullPathMatch);
    }
    /**
     * Specifies a list of header match criteria, all of which must match corresponding headers in the request.
     * Structure is documented below.
     * 
    */
    public List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch> getHeaderMatches() {
        return this.headerMatches == null ? List.of() : this.headerMatches;
    }
    /**
     * Specifies that prefixMatch and fullPathMatch matches are case sensitive.
     * 
    */
    public Optional<Boolean> getIgnoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    /**
     * For satisfying the matchRule condition, the path of the request
     * must match the wildcard pattern specified in pathTemplateMatch
     * after removing any query parameters and anchor that may be part
     * of the original URL.
     * pathTemplateMatch must be between 1 and 255 characters
     * (inclusive).  The pattern specified by pathTemplateMatch may
     * have at most 5 wildcard operators and at most 5 variable
     * captures in total.
     * 
    */
    public Optional<String> getPathTemplateMatch() {
        return Optional.ofNullable(this.pathTemplateMatch);
    }
    /**
     * The value of the header must start with the contents of prefixMatch.
     * 
    */
    public Optional<String> getPrefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }
    /**
     * Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
     * Structure is documented below.
     * 
    */
    public List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch> getQueryParameterMatches() {
        return this.queryParameterMatches == null ? List.of() : this.queryParameterMatches;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String fullPathMatch;
        private @Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches;
        private @Nullable Boolean ignoreCase;
        private @Nullable String pathTemplateMatch;
        private @Nullable String prefixMatch;
        private @Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches;

        public Builder() {
    	      // Empty
        }

        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fullPathMatch = defaults.fullPathMatch;
    	      this.headerMatches = defaults.headerMatches;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.pathTemplateMatch = defaults.pathTemplateMatch;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.queryParameterMatches = defaults.queryParameterMatches;
        }

        public Builder setFullPathMatch(@Nullable String fullPathMatch) {
            this.fullPathMatch = fullPathMatch;
            return this;
        }

        public Builder setHeaderMatches(@Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches) {
            this.headerMatches = headerMatches;
            return this;
        }

        public Builder setIgnoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }

        public Builder setPathTemplateMatch(@Nullable String pathTemplateMatch) {
            this.pathTemplateMatch = pathTemplateMatch;
            return this;
        }

        public Builder setPrefixMatch(@Nullable String prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }

        public Builder setQueryParameterMatches(@Nullable List<EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches) {
            this.queryParameterMatches = queryParameterMatches;
            return this;
        }
        public EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule build() {
            return new EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRule(fullPathMatch, headerMatches, ignoreCase, pathTemplateMatch, prefixMatch, queryParameterMatches);
        }
    }
}
