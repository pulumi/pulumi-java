// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.bigquery.ConnectionArgs;
import io.pulumi.gcp.bigquery.inputs.ConnectionState;
import io.pulumi.gcp.bigquery.outputs.ConnectionCloudSql;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A connection allows BigQuery connections to external data sources..
 * 
 * To get more information about Connection, see:
 * 
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/create)
 * * How-to Guides
 *     * [Cloud SQL federated queries](https://cloud.google.com/bigquery/docs/cloud-sql-federated-queries)
 * 
 * > **Warning:** All arguments including `cloud_sql.credential.password` will be stored in the raw
 * state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Bigquery Connection Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 * 
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     databaseVersion: "POSTGRES_11",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: "true",
 * }, {
 *     provider: google_beta,
 * });
 * const db = new gcp.sql.Database("db", {instance: instance.name}, {
 *     provider: google_beta,
 * });
 * const pwd = new random.RandomPassword("pwd", {
 *     length: 16,
 *     special: false,
 * });
 * const user = new gcp.sql.User("user", {
 *     instance: instance.name,
 *     password: pwd.result,
 * }, {
 *     provider: google_beta,
 * });
 * const connection = new gcp.bigquery.Connection("connection", {
 *     friendlyName: "ðŸ‘‹",
 *     description: "a riveting description",
 *     cloudSql: {
 *         instanceId: instance.connectionName,
 *         database: db.name,
 *         type: "POSTGRES",
 *         credential: {
 *             username: user.name,
 *             password: user.password,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * import pulumi_random as random
 * 
 * instance = gcp.sql.DatabaseInstance("instance",
 *     database_version="POSTGRES_11",
 *     region="us-central1",
 *     settings=gcp.sql.DatabaseInstanceSettingsArgs(
 *         tier="db-f1-micro",
 *     ),
 *     deletion_protection=True,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * db = gcp.sql.Database("db", instance=instance.name,
 * opts=pulumi.ResourceOptions(provider=google_beta))
 * pwd = random.RandomPassword("pwd",
 *     length=16,
 *     special=False)
 * user = gcp.sql.User("user",
 *     instance=instance.name,
 *     password=pwd.result,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * connection = gcp.bigquery.Connection("connection",
 *     friendly_name="ðŸ‘‹",
 *     description="a riveting description",
 *     cloud_sql=gcp.bigquery.ConnectionCloudSqlArgs(
 *         instance_id=instance.connection_name,
 *         database=db.name,
 *         type="POSTGRES",
 *         credential=gcp.bigquery.ConnectionCloudSqlCredentialArgs(
 *             username=user.name,
 *             password=user.password,
 *         ),
 *     ),
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * using Random = Pulumi.Random;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var instance = new Gcp.Sql.DatabaseInstance("instance", new Gcp.Sql.DatabaseInstanceArgs
 *         {
 *             DatabaseVersion = "POSTGRES_11",
 *             Region = "us-central1",
 *             Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
 *             {
 *                 Tier = "db-f1-micro",
 *             },
 *             DeletionProtection = true,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var db = new Gcp.Sql.Database("db", new Gcp.Sql.DatabaseArgs
 *         {
 *             Instance = instance.Name,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var pwd = new Random.RandomPassword("pwd", new Random.RandomPasswordArgs
 *         {
 *             Length = 16,
 *             Special = false,
 *         });
 *         var user = new Gcp.Sql.User("user", new Gcp.Sql.UserArgs
 *         {
 *             Instance = instance.Name,
 *             Password = pwd.Result,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
 *         {
 *             FriendlyName = "ðŸ‘‹",
 *             Description = "a riveting description",
 *             CloudSql = new Gcp.BigQuery.Inputs.ConnectionCloudSqlArgs
 *             {
 *                 InstanceId = instance.ConnectionName,
 *                 Database = db.Name,
 *                 Type = "POSTGRES",
 *                 Credential = new Gcp.BigQuery.Inputs.ConnectionCloudSqlCredentialArgs
 *                 {
 *                     Username = user.Name,
 *                     Password = user.Password,
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/sql"
 * 	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		instance, err := sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
 * 			DatabaseVersion: pulumi.String("POSTGRES_11"),
 * 			Region:          pulumi.String("us-central1"),
 * 			Settings: &sql.DatabaseInstanceSettingsArgs{
 * 				Tier: pulumi.String("db-f1-micro"),
 * 			},
 * 			DeletionProtection: pulumi.Bool(true),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		db, err := sql.NewDatabase(ctx, "db", &sql.DatabaseArgs{
 * 			Instance: instance.Name,
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pwd, err := random.NewRandomPassword(ctx, "pwd", &random.RandomPasswordArgs{
 * 			Length:  pulumi.Int(16),
 * 			Special: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		user, err := sql.NewUser(ctx, "user", &sql.UserArgs{
 * 			Instance: instance.Name,
 * 			Password: pwd.Result,
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewConnection(ctx, "connection", &bigquery.ConnectionArgs{
 * 			FriendlyName: pulumi.String("ðŸ‘‹"),
 * 			Description:  pulumi.String("a riveting description"),
 * 			CloudSql: &bigquery.ConnectionCloudSqlArgs{
 * 				InstanceId: instance.ConnectionName,
 * 				Database:   db.Name,
 * 				Type:       pulumi.String("POSTGRES"),
 * 				Credential: &bigquery.ConnectionCloudSqlCredentialArgs{
 * 					Username: user.Name,
 * 					Password: user.Password,
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Bigquery Connection Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 * 
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     databaseVersion: "POSTGRES_11",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: "true",
 * }, {
 *     provider: google_beta,
 * });
 * const db = new gcp.sql.Database("db", {instance: instance.name}, {
 *     provider: google_beta,
 * });
 * const pwd = new random.RandomPassword("pwd", {
 *     length: 16,
 *     special: false,
 * });
 * const user = new gcp.sql.User("user", {
 *     instance: instance.name,
 *     password: pwd.result,
 * }, {
 *     provider: google_beta,
 * });
 * const connection = new gcp.bigquery.Connection("connection", {
 *     connectionId: "my-connection",
 *     location: "US",
 *     friendlyName: "ðŸ‘‹",
 *     description: "a riveting description",
 *     cloudSql: {
 *         instanceId: instance.connectionName,
 *         database: db.name,
 *         type: "POSTGRES",
 *         credential: {
 *             username: user.name,
 *             password: user.password,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * import pulumi_random as random
 * 
 * instance = gcp.sql.DatabaseInstance("instance",
 *     database_version="POSTGRES_11",
 *     region="us-central1",
 *     settings=gcp.sql.DatabaseInstanceSettingsArgs(
 *         tier="db-f1-micro",
 *     ),
 *     deletion_protection=True,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * db = gcp.sql.Database("db", instance=instance.name,
 * opts=pulumi.ResourceOptions(provider=google_beta))
 * pwd = random.RandomPassword("pwd",
 *     length=16,
 *     special=False)
 * user = gcp.sql.User("user",
 *     instance=instance.name,
 *     password=pwd.result,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * connection = gcp.bigquery.Connection("connection",
 *     connection_id="my-connection",
 *     location="US",
 *     friendly_name="ðŸ‘‹",
 *     description="a riveting description",
 *     cloud_sql=gcp.bigquery.ConnectionCloudSqlArgs(
 *         instance_id=instance.connection_name,
 *         database=db.name,
 *         type="POSTGRES",
 *         credential=gcp.bigquery.ConnectionCloudSqlCredentialArgs(
 *             username=user.name,
 *             password=user.password,
 *         ),
 *     ),
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * using Random = Pulumi.Random;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var instance = new Gcp.Sql.DatabaseInstance("instance", new Gcp.Sql.DatabaseInstanceArgs
 *         {
 *             DatabaseVersion = "POSTGRES_11",
 *             Region = "us-central1",
 *             Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
 *             {
 *                 Tier = "db-f1-micro",
 *             },
 *             DeletionProtection = true,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var db = new Gcp.Sql.Database("db", new Gcp.Sql.DatabaseArgs
 *         {
 *             Instance = instance.Name,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var pwd = new Random.RandomPassword("pwd", new Random.RandomPasswordArgs
 *         {
 *             Length = 16,
 *             Special = false,
 *         });
 *         var user = new Gcp.Sql.User("user", new Gcp.Sql.UserArgs
 *         {
 *             Instance = instance.Name,
 *             Password = pwd.Result,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var connection = new Gcp.BigQuery.Connection("connection", new Gcp.BigQuery.ConnectionArgs
 *         {
 *             ConnectionId = "my-connection",
 *             Location = "US",
 *             FriendlyName = "ðŸ‘‹",
 *             Description = "a riveting description",
 *             CloudSql = new Gcp.BigQuery.Inputs.ConnectionCloudSqlArgs
 *             {
 *                 InstanceId = instance.ConnectionName,
 *                 Database = db.Name,
 *                 Type = "POSTGRES",
 *                 Credential = new Gcp.BigQuery.Inputs.ConnectionCloudSqlCredentialArgs
 *                 {
 *                     Username = user.Name,
 *                     Password = user.Password,
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/sql"
 * 	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		instance, err := sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
 * 			DatabaseVersion: pulumi.String("POSTGRES_11"),
 * 			Region:          pulumi.String("us-central1"),
 * 			Settings: &sql.DatabaseInstanceSettingsArgs{
 * 				Tier: pulumi.String("db-f1-micro"),
 * 			},
 * 			DeletionProtection: pulumi.Bool(true),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		db, err := sql.NewDatabase(ctx, "db", &sql.DatabaseArgs{
 * 			Instance: instance.Name,
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pwd, err := random.NewRandomPassword(ctx, "pwd", &random.RandomPasswordArgs{
 * 			Length:  pulumi.Int(16),
 * 			Special: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		user, err := sql.NewUser(ctx, "user", &sql.UserArgs{
 * 			Instance: instance.Name,
 * 			Password: pwd.Result,
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewConnection(ctx, "connection", &bigquery.ConnectionArgs{
 * 			ConnectionId: pulumi.String("my-connection"),
 * 			Location:     pulumi.String("US"),
 * 			FriendlyName: pulumi.String("ðŸ‘‹"),
 * 			Description:  pulumi.String("a riveting description"),
 * 			CloudSql: &bigquery.ConnectionCloudSqlArgs{
 * 				InstanceId: instance.ConnectionName,
 * 				Database:   db.Name,
 * 				Type:       pulumi.String("POSTGRES"),
 * 				Credential: &bigquery.ConnectionCloudSqlCredentialArgs{
 * 					Username: user.Name,
 * 					Password: user.Password,
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Connection can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/connection:Connection default {{project}}/{{location}}/{{connection_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/connection:Connection default {{location}}/{{connection_id}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:bigquery/connection:Connection")
public class Connection extends io.pulumi.resources.CustomResource {
    /**
     * Cloud SQL properties.
     * Structure is documented below.
     * 
     */
    @Export(name="cloudSql", type=ConnectionCloudSql.class, parameters={})
    private Output<ConnectionCloudSql> cloudSql;

    /**
     * @return Cloud SQL properties.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionCloudSql> getCloudSql() {
        return this.cloudSql;
    }
    /**
     * Optional connection id that should be assigned to the created connection.
     * 
     */
    @Export(name="connectionId", type=String.class, parameters={})
    private Output<String> connectionId;

    /**
     * @return Optional connection id that should be assigned to the created connection.
     * 
     */
    public Output<String> getConnectionId() {
        return this.connectionId;
    }
    /**
     * A descriptive description for the connection
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A descriptive description for the connection
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * A descriptive name for the connection
     * 
     */
    @Export(name="friendlyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> friendlyName;

    /**
     * @return A descriptive name for the connection
     * 
     */
    public Output</* @Nullable */ String> getFriendlyName() {
        return this.friendlyName;
    }
    /**
     * True if the connection has credential assigned.
     * 
     */
    @Export(name="hasCredential", type=Boolean.class, parameters={})
    private Output<Boolean> hasCredential;

    /**
     * @return True if the connection has credential assigned.
     * 
     */
    public Output<Boolean> getHasCredential() {
        return this.hasCredential;
    }
    /**
     * The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1. The default value is US.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1. The default value is US.
     * 
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * The resource name of the connection in the form of:
     * "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name of the connection in the form of:
     * "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(String name, ConnectionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/connection:Connection", name, args == null ? ConnectionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Connection(String name, Output<String> id, @Nullable ConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/connection:Connection", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(String name, Output<String> id, @Nullable ConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
