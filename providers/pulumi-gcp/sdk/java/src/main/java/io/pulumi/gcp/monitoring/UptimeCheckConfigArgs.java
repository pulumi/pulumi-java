// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigContentMatcherArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigHttpCheckArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigMonitoredResourceArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigResourceGroupArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigTcpCheckArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UptimeCheckConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final UptimeCheckConfigArgs Empty = new UptimeCheckConfigArgs();

    @InputImport(name="contentMatchers")
    private final @Nullable Input<List<UptimeCheckConfigContentMatcherArgs>> contentMatchers;

    public Input<List<UptimeCheckConfigContentMatcherArgs>> getContentMatchers() {
        return this.contentMatchers == null ? Input.empty() : this.contentMatchers;
    }

    @InputImport(name="displayName", required=true)
    private final Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName;
    }

    @InputImport(name="httpCheck")
    private final @Nullable Input<UptimeCheckConfigHttpCheckArgs> httpCheck;

    public Input<UptimeCheckConfigHttpCheckArgs> getHttpCheck() {
        return this.httpCheck == null ? Input.empty() : this.httpCheck;
    }

    @InputImport(name="monitoredResource")
    private final @Nullable Input<UptimeCheckConfigMonitoredResourceArgs> monitoredResource;

    public Input<UptimeCheckConfigMonitoredResourceArgs> getMonitoredResource() {
        return this.monitoredResource == null ? Input.empty() : this.monitoredResource;
    }

    @InputImport(name="period")
    private final @Nullable Input<String> period;

    public Input<String> getPeriod() {
        return this.period == null ? Input.empty() : this.period;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="resourceGroup")
    private final @Nullable Input<UptimeCheckConfigResourceGroupArgs> resourceGroup;

    public Input<UptimeCheckConfigResourceGroupArgs> getResourceGroup() {
        return this.resourceGroup == null ? Input.empty() : this.resourceGroup;
    }

    @InputImport(name="selectedRegions")
    private final @Nullable Input<List<String>> selectedRegions;

    public Input<List<String>> getSelectedRegions() {
        return this.selectedRegions == null ? Input.empty() : this.selectedRegions;
    }

    @InputImport(name="tcpCheck")
    private final @Nullable Input<UptimeCheckConfigTcpCheckArgs> tcpCheck;

    public Input<UptimeCheckConfigTcpCheckArgs> getTcpCheck() {
        return this.tcpCheck == null ? Input.empty() : this.tcpCheck;
    }

    @InputImport(name="timeout", required=true)
    private final Input<String> timeout;

    public Input<String> getTimeout() {
        return this.timeout;
    }

    public UptimeCheckConfigArgs(
        @Nullable Input<List<UptimeCheckConfigContentMatcherArgs>> contentMatchers,
        Input<String> displayName,
        @Nullable Input<UptimeCheckConfigHttpCheckArgs> httpCheck,
        @Nullable Input<UptimeCheckConfigMonitoredResourceArgs> monitoredResource,
        @Nullable Input<String> period,
        @Nullable Input<String> project,
        @Nullable Input<UptimeCheckConfigResourceGroupArgs> resourceGroup,
        @Nullable Input<List<String>> selectedRegions,
        @Nullable Input<UptimeCheckConfigTcpCheckArgs> tcpCheck,
        Input<String> timeout) {
        this.contentMatchers = contentMatchers;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.httpCheck = httpCheck;
        this.monitoredResource = monitoredResource;
        this.period = period;
        this.project = project;
        this.resourceGroup = resourceGroup;
        this.selectedRegions = selectedRegions;
        this.tcpCheck = tcpCheck;
        this.timeout = Objects.requireNonNull(timeout, "expected parameter 'timeout' to be non-null");
    }

    private UptimeCheckConfigArgs() {
        this.contentMatchers = Input.empty();
        this.displayName = Input.empty();
        this.httpCheck = Input.empty();
        this.monitoredResource = Input.empty();
        this.period = Input.empty();
        this.project = Input.empty();
        this.resourceGroup = Input.empty();
        this.selectedRegions = Input.empty();
        this.tcpCheck = Input.empty();
        this.timeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UptimeCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<UptimeCheckConfigContentMatcherArgs>> contentMatchers;
        private Input<String> displayName;
        private @Nullable Input<UptimeCheckConfigHttpCheckArgs> httpCheck;
        private @Nullable Input<UptimeCheckConfigMonitoredResourceArgs> monitoredResource;
        private @Nullable Input<String> period;
        private @Nullable Input<String> project;
        private @Nullable Input<UptimeCheckConfigResourceGroupArgs> resourceGroup;
        private @Nullable Input<List<String>> selectedRegions;
        private @Nullable Input<UptimeCheckConfigTcpCheckArgs> tcpCheck;
        private Input<String> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(UptimeCheckConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentMatchers = defaults.contentMatchers;
    	      this.displayName = defaults.displayName;
    	      this.httpCheck = defaults.httpCheck;
    	      this.monitoredResource = defaults.monitoredResource;
    	      this.period = defaults.period;
    	      this.project = defaults.project;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.selectedRegions = defaults.selectedRegions;
    	      this.tcpCheck = defaults.tcpCheck;
    	      this.timeout = defaults.timeout;
        }

        public Builder setContentMatchers(@Nullable Input<List<UptimeCheckConfigContentMatcherArgs>> contentMatchers) {
            this.contentMatchers = contentMatchers;
            return this;
        }

        public Builder setContentMatchers(@Nullable List<UptimeCheckConfigContentMatcherArgs> contentMatchers) {
            this.contentMatchers = Input.ofNullable(contentMatchers);
            return this;
        }

        public Builder setDisplayName(Input<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Input.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder setHttpCheck(@Nullable Input<UptimeCheckConfigHttpCheckArgs> httpCheck) {
            this.httpCheck = httpCheck;
            return this;
        }

        public Builder setHttpCheck(@Nullable UptimeCheckConfigHttpCheckArgs httpCheck) {
            this.httpCheck = Input.ofNullable(httpCheck);
            return this;
        }

        public Builder setMonitoredResource(@Nullable Input<UptimeCheckConfigMonitoredResourceArgs> monitoredResource) {
            this.monitoredResource = monitoredResource;
            return this;
        }

        public Builder setMonitoredResource(@Nullable UptimeCheckConfigMonitoredResourceArgs monitoredResource) {
            this.monitoredResource = Input.ofNullable(monitoredResource);
            return this;
        }

        public Builder setPeriod(@Nullable Input<String> period) {
            this.period = period;
            return this;
        }

        public Builder setPeriod(@Nullable String period) {
            this.period = Input.ofNullable(period);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setResourceGroup(@Nullable Input<UptimeCheckConfigResourceGroupArgs> resourceGroup) {
            this.resourceGroup = resourceGroup;
            return this;
        }

        public Builder setResourceGroup(@Nullable UptimeCheckConfigResourceGroupArgs resourceGroup) {
            this.resourceGroup = Input.ofNullable(resourceGroup);
            return this;
        }

        public Builder setSelectedRegions(@Nullable Input<List<String>> selectedRegions) {
            this.selectedRegions = selectedRegions;
            return this;
        }

        public Builder setSelectedRegions(@Nullable List<String> selectedRegions) {
            this.selectedRegions = Input.ofNullable(selectedRegions);
            return this;
        }

        public Builder setTcpCheck(@Nullable Input<UptimeCheckConfigTcpCheckArgs> tcpCheck) {
            this.tcpCheck = tcpCheck;
            return this;
        }

        public Builder setTcpCheck(@Nullable UptimeCheckConfigTcpCheckArgs tcpCheck) {
            this.tcpCheck = Input.ofNullable(tcpCheck);
            return this;
        }

        public Builder setTimeout(Input<String> timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setTimeout(String timeout) {
            this.timeout = Input.of(Objects.requireNonNull(timeout));
            return this;
        }

        public UptimeCheckConfigArgs build() {
            return new UptimeCheckConfigArgs(contentMatchers, displayName, httpCheck, monitoredResource, period, project, resourceGroup, selectedRegions, tcpCheck, timeout);
        }
    }
}
