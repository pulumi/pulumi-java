// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataproc.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs Empty = new WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs();

    /**
     * Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    @InputImport(name="crossRealmTrustAdminServer")
      private final @Nullable Output<String> crossRealmTrustAdminServer;

    public Output<String> getCrossRealmTrustAdminServer() {
        return this.crossRealmTrustAdminServer == null ? Output.empty() : this.crossRealmTrustAdminServer;
    }

    /**
     * Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    @InputImport(name="crossRealmTrustKdc")
      private final @Nullable Output<String> crossRealmTrustKdc;

    public Output<String> getCrossRealmTrustKdc() {
        return this.crossRealmTrustKdc == null ? Output.empty() : this.crossRealmTrustKdc;
    }

    /**
     * Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     * 
     */
    @InputImport(name="crossRealmTrustRealm")
      private final @Nullable Output<String> crossRealmTrustRealm;

    public Output<String> getCrossRealmTrustRealm() {
        return this.crossRealmTrustRealm == null ? Output.empty() : this.crossRealmTrustRealm;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     * 
     */
    @InputImport(name="crossRealmTrustSharedPassword")
      private final @Nullable Output<String> crossRealmTrustSharedPassword;

    public Output<String> getCrossRealmTrustSharedPassword() {
        return this.crossRealmTrustSharedPassword == null ? Output.empty() : this.crossRealmTrustSharedPassword;
    }

    /**
     * Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     * 
     */
    @InputImport(name="enableKerberos")
      private final @Nullable Output<Boolean> enableKerberos;

    public Output<Boolean> getEnableKerberos() {
        return this.enableKerberos == null ? Output.empty() : this.enableKerberos;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     * 
     */
    @InputImport(name="kdcDbKey")
      private final @Nullable Output<String> kdcDbKey;

    public Output<String> getKdcDbKey() {
        return this.kdcDbKey == null ? Output.empty() : this.kdcDbKey;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @InputImport(name="keyPassword")
      private final @Nullable Output<String> keyPassword;

    public Output<String> getKeyPassword() {
        return this.keyPassword == null ? Output.empty() : this.keyPassword;
    }

    /**
     * Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    @InputImport(name="keystore")
      private final @Nullable Output<String> keystore;

    public Output<String> getKeystore() {
        return this.keystore == null ? Output.empty() : this.keystore;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @InputImport(name="keystorePassword")
      private final @Nullable Output<String> keystorePassword;

    public Output<String> getKeystorePassword() {
        return this.keystorePassword == null ? Output.empty() : this.keystorePassword;
    }

    /**
     * Optional. The uri of the KMS key used to encrypt various sensitive files.
     * 
     */
    @InputImport(name="kmsKey")
      private final @Nullable Output<String> kmsKey;

    public Output<String> getKmsKey() {
        return this.kmsKey == null ? Output.empty() : this.kmsKey;
    }

    /**
     * Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     * 
     */
    @InputImport(name="realm")
      private final @Nullable Output<String> realm;

    public Output<String> getRealm() {
        return this.realm == null ? Output.empty() : this.realm;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     * 
     */
    @InputImport(name="rootPrincipalPassword")
      private final @Nullable Output<String> rootPrincipalPassword;

    public Output<String> getRootPrincipalPassword() {
        return this.rootPrincipalPassword == null ? Output.empty() : this.rootPrincipalPassword;
    }

    /**
     * Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     * 
     */
    @InputImport(name="tgtLifetimeHours")
      private final @Nullable Output<Integer> tgtLifetimeHours;

    public Output<Integer> getTgtLifetimeHours() {
        return this.tgtLifetimeHours == null ? Output.empty() : this.tgtLifetimeHours;
    }

    /**
     * Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    @InputImport(name="truststore")
      private final @Nullable Output<String> truststore;

    public Output<String> getTruststore() {
        return this.truststore == null ? Output.empty() : this.truststore;
    }

    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @InputImport(name="truststorePassword")
      private final @Nullable Output<String> truststorePassword;

    public Output<String> getTruststorePassword() {
        return this.truststorePassword == null ? Output.empty() : this.truststorePassword;
    }

    public WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs(
        @Nullable Output<String> crossRealmTrustAdminServer,
        @Nullable Output<String> crossRealmTrustKdc,
        @Nullable Output<String> crossRealmTrustRealm,
        @Nullable Output<String> crossRealmTrustSharedPassword,
        @Nullable Output<Boolean> enableKerberos,
        @Nullable Output<String> kdcDbKey,
        @Nullable Output<String> keyPassword,
        @Nullable Output<String> keystore,
        @Nullable Output<String> keystorePassword,
        @Nullable Output<String> kmsKey,
        @Nullable Output<String> realm,
        @Nullable Output<String> rootPrincipalPassword,
        @Nullable Output<Integer> tgtLifetimeHours,
        @Nullable Output<String> truststore,
        @Nullable Output<String> truststorePassword) {
        this.crossRealmTrustAdminServer = crossRealmTrustAdminServer;
        this.crossRealmTrustKdc = crossRealmTrustKdc;
        this.crossRealmTrustRealm = crossRealmTrustRealm;
        this.crossRealmTrustSharedPassword = crossRealmTrustSharedPassword;
        this.enableKerberos = enableKerberos;
        this.kdcDbKey = kdcDbKey;
        this.keyPassword = keyPassword;
        this.keystore = keystore;
        this.keystorePassword = keystorePassword;
        this.kmsKey = kmsKey;
        this.realm = realm;
        this.rootPrincipalPassword = rootPrincipalPassword;
        this.tgtLifetimeHours = tgtLifetimeHours;
        this.truststore = truststore;
        this.truststorePassword = truststorePassword;
    }

    private WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs() {
        this.crossRealmTrustAdminServer = Output.empty();
        this.crossRealmTrustKdc = Output.empty();
        this.crossRealmTrustRealm = Output.empty();
        this.crossRealmTrustSharedPassword = Output.empty();
        this.enableKerberos = Output.empty();
        this.kdcDbKey = Output.empty();
        this.keyPassword = Output.empty();
        this.keystore = Output.empty();
        this.keystorePassword = Output.empty();
        this.kmsKey = Output.empty();
        this.realm = Output.empty();
        this.rootPrincipalPassword = Output.empty();
        this.tgtLifetimeHours = Output.empty();
        this.truststore = Output.empty();
        this.truststorePassword = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> crossRealmTrustAdminServer;
        private @Nullable Output<String> crossRealmTrustKdc;
        private @Nullable Output<String> crossRealmTrustRealm;
        private @Nullable Output<String> crossRealmTrustSharedPassword;
        private @Nullable Output<Boolean> enableKerberos;
        private @Nullable Output<String> kdcDbKey;
        private @Nullable Output<String> keyPassword;
        private @Nullable Output<String> keystore;
        private @Nullable Output<String> keystorePassword;
        private @Nullable Output<String> kmsKey;
        private @Nullable Output<String> realm;
        private @Nullable Output<String> rootPrincipalPassword;
        private @Nullable Output<Integer> tgtLifetimeHours;
        private @Nullable Output<String> truststore;
        private @Nullable Output<String> truststorePassword;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crossRealmTrustAdminServer = defaults.crossRealmTrustAdminServer;
    	      this.crossRealmTrustKdc = defaults.crossRealmTrustKdc;
    	      this.crossRealmTrustRealm = defaults.crossRealmTrustRealm;
    	      this.crossRealmTrustSharedPassword = defaults.crossRealmTrustSharedPassword;
    	      this.enableKerberos = defaults.enableKerberos;
    	      this.kdcDbKey = defaults.kdcDbKey;
    	      this.keyPassword = defaults.keyPassword;
    	      this.keystore = defaults.keystore;
    	      this.keystorePassword = defaults.keystorePassword;
    	      this.kmsKey = defaults.kmsKey;
    	      this.realm = defaults.realm;
    	      this.rootPrincipalPassword = defaults.rootPrincipalPassword;
    	      this.tgtLifetimeHours = defaults.tgtLifetimeHours;
    	      this.truststore = defaults.truststore;
    	      this.truststorePassword = defaults.truststorePassword;
        }

        public Builder crossRealmTrustAdminServer(@Nullable Output<String> crossRealmTrustAdminServer) {
            this.crossRealmTrustAdminServer = crossRealmTrustAdminServer;
            return this;
        }

        public Builder crossRealmTrustAdminServer(@Nullable String crossRealmTrustAdminServer) {
            this.crossRealmTrustAdminServer = Output.ofNullable(crossRealmTrustAdminServer);
            return this;
        }

        public Builder crossRealmTrustKdc(@Nullable Output<String> crossRealmTrustKdc) {
            this.crossRealmTrustKdc = crossRealmTrustKdc;
            return this;
        }

        public Builder crossRealmTrustKdc(@Nullable String crossRealmTrustKdc) {
            this.crossRealmTrustKdc = Output.ofNullable(crossRealmTrustKdc);
            return this;
        }

        public Builder crossRealmTrustRealm(@Nullable Output<String> crossRealmTrustRealm) {
            this.crossRealmTrustRealm = crossRealmTrustRealm;
            return this;
        }

        public Builder crossRealmTrustRealm(@Nullable String crossRealmTrustRealm) {
            this.crossRealmTrustRealm = Output.ofNullable(crossRealmTrustRealm);
            return this;
        }

        public Builder crossRealmTrustSharedPassword(@Nullable Output<String> crossRealmTrustSharedPassword) {
            this.crossRealmTrustSharedPassword = crossRealmTrustSharedPassword;
            return this;
        }

        public Builder crossRealmTrustSharedPassword(@Nullable String crossRealmTrustSharedPassword) {
            this.crossRealmTrustSharedPassword = Output.ofNullable(crossRealmTrustSharedPassword);
            return this;
        }

        public Builder enableKerberos(@Nullable Output<Boolean> enableKerberos) {
            this.enableKerberos = enableKerberos;
            return this;
        }

        public Builder enableKerberos(@Nullable Boolean enableKerberos) {
            this.enableKerberos = Output.ofNullable(enableKerberos);
            return this;
        }

        public Builder kdcDbKey(@Nullable Output<String> kdcDbKey) {
            this.kdcDbKey = kdcDbKey;
            return this;
        }

        public Builder kdcDbKey(@Nullable String kdcDbKey) {
            this.kdcDbKey = Output.ofNullable(kdcDbKey);
            return this;
        }

        public Builder keyPassword(@Nullable Output<String> keyPassword) {
            this.keyPassword = keyPassword;
            return this;
        }

        public Builder keyPassword(@Nullable String keyPassword) {
            this.keyPassword = Output.ofNullable(keyPassword);
            return this;
        }

        public Builder keystore(@Nullable Output<String> keystore) {
            this.keystore = keystore;
            return this;
        }

        public Builder keystore(@Nullable String keystore) {
            this.keystore = Output.ofNullable(keystore);
            return this;
        }

        public Builder keystorePassword(@Nullable Output<String> keystorePassword) {
            this.keystorePassword = keystorePassword;
            return this;
        }

        public Builder keystorePassword(@Nullable String keystorePassword) {
            this.keystorePassword = Output.ofNullable(keystorePassword);
            return this;
        }

        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            this.kmsKey = kmsKey;
            return this;
        }

        public Builder kmsKey(@Nullable String kmsKey) {
            this.kmsKey = Output.ofNullable(kmsKey);
            return this;
        }

        public Builder realm(@Nullable Output<String> realm) {
            this.realm = realm;
            return this;
        }

        public Builder realm(@Nullable String realm) {
            this.realm = Output.ofNullable(realm);
            return this;
        }

        public Builder rootPrincipalPassword(@Nullable Output<String> rootPrincipalPassword) {
            this.rootPrincipalPassword = rootPrincipalPassword;
            return this;
        }

        public Builder rootPrincipalPassword(@Nullable String rootPrincipalPassword) {
            this.rootPrincipalPassword = Output.ofNullable(rootPrincipalPassword);
            return this;
        }

        public Builder tgtLifetimeHours(@Nullable Output<Integer> tgtLifetimeHours) {
            this.tgtLifetimeHours = tgtLifetimeHours;
            return this;
        }

        public Builder tgtLifetimeHours(@Nullable Integer tgtLifetimeHours) {
            this.tgtLifetimeHours = Output.ofNullable(tgtLifetimeHours);
            return this;
        }

        public Builder truststore(@Nullable Output<String> truststore) {
            this.truststore = truststore;
            return this;
        }

        public Builder truststore(@Nullable String truststore) {
            this.truststore = Output.ofNullable(truststore);
            return this;
        }

        public Builder truststorePassword(@Nullable Output<String> truststorePassword) {
            this.truststorePassword = truststorePassword;
            return this;
        }

        public Builder truststorePassword(@Nullable String truststorePassword) {
            this.truststorePassword = Output.ofNullable(truststorePassword);
            return this;
        }
        public WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs build() {
            return new WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigGetArgs(crossRealmTrustAdminServer, crossRealmTrustKdc, crossRealmTrustRealm, crossRealmTrustSharedPassword, enableKerberos, kdcDbKey, keyPassword, keystore, keystorePassword, kmsKey, realm, rootPrincipalPassword, tgtLifetimeHours, truststore, truststorePassword);
        }
    }
}
