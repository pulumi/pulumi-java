// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.recaptcha;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.recaptcha.inputs.EnterpriseKeyAndroidSettingsArgs;
import io.pulumi.gcp.recaptcha.inputs.EnterpriseKeyIosSettingsArgs;
import io.pulumi.gcp.recaptcha.inputs.EnterpriseKeyTestingOptionsArgs;
import io.pulumi.gcp.recaptcha.inputs.EnterpriseKeyWebSettingsArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnterpriseKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnterpriseKeyArgs Empty = new EnterpriseKeyArgs();

    /**
     * Settings for keys that can be used by Android apps.
     * 
     */
    @InputImport(name="androidSettings")
      private final @Nullable Output<EnterpriseKeyAndroidSettingsArgs> androidSettings;

    public Output<EnterpriseKeyAndroidSettingsArgs> getAndroidSettings() {
        return this.androidSettings == null ? Output.empty() : this.androidSettings;
    }

    /**
     * Human-readable display name of this key. Modifiable by user.
     * 
     */
    @InputImport(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * Settings for keys that can be used by iOS apps.
     * 
     */
    @InputImport(name="iosSettings")
      private final @Nullable Output<EnterpriseKeyIosSettingsArgs> iosSettings;

    public Output<EnterpriseKeyIosSettingsArgs> getIosSettings() {
        return this.iosSettings == null ? Output.empty() : this.iosSettings;
    }

    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The project for the resource
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Options for user acceptance testing.
     * 
     */
    @InputImport(name="testingOptions")
      private final @Nullable Output<EnterpriseKeyTestingOptionsArgs> testingOptions;

    public Output<EnterpriseKeyTestingOptionsArgs> getTestingOptions() {
        return this.testingOptions == null ? Output.empty() : this.testingOptions;
    }

    /**
     * Settings for keys that can be used by websites.
     * 
     */
    @InputImport(name="webSettings")
      private final @Nullable Output<EnterpriseKeyWebSettingsArgs> webSettings;

    public Output<EnterpriseKeyWebSettingsArgs> getWebSettings() {
        return this.webSettings == null ? Output.empty() : this.webSettings;
    }

    public EnterpriseKeyArgs(
        @Nullable Output<EnterpriseKeyAndroidSettingsArgs> androidSettings,
        Output<String> displayName,
        @Nullable Output<EnterpriseKeyIosSettingsArgs> iosSettings,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> project,
        @Nullable Output<EnterpriseKeyTestingOptionsArgs> testingOptions,
        @Nullable Output<EnterpriseKeyWebSettingsArgs> webSettings) {
        this.androidSettings = androidSettings;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.iosSettings = iosSettings;
        this.labels = labels;
        this.project = project;
        this.testingOptions = testingOptions;
        this.webSettings = webSettings;
    }

    private EnterpriseKeyArgs() {
        this.androidSettings = Output.empty();
        this.displayName = Output.empty();
        this.iosSettings = Output.empty();
        this.labels = Output.empty();
        this.project = Output.empty();
        this.testingOptions = Output.empty();
        this.webSettings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnterpriseKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<EnterpriseKeyAndroidSettingsArgs> androidSettings;
        private Output<String> displayName;
        private @Nullable Output<EnterpriseKeyIosSettingsArgs> iosSettings;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> project;
        private @Nullable Output<EnterpriseKeyTestingOptionsArgs> testingOptions;
        private @Nullable Output<EnterpriseKeyWebSettingsArgs> webSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(EnterpriseKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.androidSettings = defaults.androidSettings;
    	      this.displayName = defaults.displayName;
    	      this.iosSettings = defaults.iosSettings;
    	      this.labels = defaults.labels;
    	      this.project = defaults.project;
    	      this.testingOptions = defaults.testingOptions;
    	      this.webSettings = defaults.webSettings;
        }

        public Builder androidSettings(@Nullable Output<EnterpriseKeyAndroidSettingsArgs> androidSettings) {
            this.androidSettings = androidSettings;
            return this;
        }

        public Builder androidSettings(@Nullable EnterpriseKeyAndroidSettingsArgs androidSettings) {
            this.androidSettings = Output.ofNullable(androidSettings);
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder iosSettings(@Nullable Output<EnterpriseKeyIosSettingsArgs> iosSettings) {
            this.iosSettings = iosSettings;
            return this;
        }

        public Builder iosSettings(@Nullable EnterpriseKeyIosSettingsArgs iosSettings) {
            this.iosSettings = Output.ofNullable(iosSettings);
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder testingOptions(@Nullable Output<EnterpriseKeyTestingOptionsArgs> testingOptions) {
            this.testingOptions = testingOptions;
            return this;
        }

        public Builder testingOptions(@Nullable EnterpriseKeyTestingOptionsArgs testingOptions) {
            this.testingOptions = Output.ofNullable(testingOptions);
            return this;
        }

        public Builder webSettings(@Nullable Output<EnterpriseKeyWebSettingsArgs> webSettings) {
            this.webSettings = webSettings;
            return this;
        }

        public Builder webSettings(@Nullable EnterpriseKeyWebSettingsArgs webSettings) {
            this.webSettings = Output.ofNullable(webSettings);
            return this;
        }
        public EnterpriseKeyArgs build() {
            return new EnterpriseKeyArgs(androidSettings, displayName, iosSettings, labels, project, testingOptions, webSettings);
        }
    }
}
