// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.identityplatform.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.identityplatform.inputs.TenantInboundSamlConfigIdpConfigGetArgs;
import io.pulumi.gcp.identityplatform.inputs.TenantInboundSamlConfigSpConfigGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TenantInboundSamlConfigState extends io.pulumi.resources.ResourceArgs {

    public static final TenantInboundSamlConfigState Empty = new TenantInboundSamlConfigState();

    /**
     * Human friendly display name.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * If this config allows users to sign in with the provider.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * SAML IdP configuration when the project acts as the relying party
     * Structure is documented below.
     * 
     */
    @Import(name="idpConfig")
      private final @Nullable Output<TenantInboundSamlConfigIdpConfigGetArgs> idpConfig;

    public Output<TenantInboundSamlConfigIdpConfigGetArgs> getIdpConfig() {
        return this.idpConfig == null ? Output.empty() : this.idpConfig;
    }

    /**
     * The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters,
     * hyphens, underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an
     * alphanumeric character, and have at least 2 characters.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * SAML SP (Service Provider) configuration when the project acts as the relying party to receive
     * and accept an authentication assertion issued by a SAML identity provider.
     * Structure is documented below.
     * 
     */
    @Import(name="spConfig")
      private final @Nullable Output<TenantInboundSamlConfigSpConfigGetArgs> spConfig;

    public Output<TenantInboundSamlConfigSpConfigGetArgs> getSpConfig() {
        return this.spConfig == null ? Output.empty() : this.spConfig;
    }

    /**
     * The name of the tenant where this inbound SAML config resource exists
     * 
     */
    @Import(name="tenant")
      private final @Nullable Output<String> tenant;

    public Output<String> getTenant() {
        return this.tenant == null ? Output.empty() : this.tenant;
    }

    public TenantInboundSamlConfigState(
        @Nullable Output<String> displayName,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<TenantInboundSamlConfigIdpConfigGetArgs> idpConfig,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<TenantInboundSamlConfigSpConfigGetArgs> spConfig,
        @Nullable Output<String> tenant) {
        this.displayName = displayName;
        this.enabled = enabled;
        this.idpConfig = idpConfig;
        this.name = name;
        this.project = project;
        this.spConfig = spConfig;
        this.tenant = tenant;
    }

    private TenantInboundSamlConfigState() {
        this.displayName = Output.empty();
        this.enabled = Output.empty();
        this.idpConfig = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.spConfig = Output.empty();
        this.tenant = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TenantInboundSamlConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<TenantInboundSamlConfigIdpConfigGetArgs> idpConfig;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<TenantInboundSamlConfigSpConfigGetArgs> spConfig;
        private @Nullable Output<String> tenant;

        public Builder() {
    	      // Empty
        }

        public Builder(TenantInboundSamlConfigState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.idpConfig = defaults.idpConfig;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.spConfig = defaults.spConfig;
    	      this.tenant = defaults.tenant;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }

        public Builder idpConfig(@Nullable Output<TenantInboundSamlConfigIdpConfigGetArgs> idpConfig) {
            this.idpConfig = idpConfig;
            return this;
        }

        public Builder idpConfig(@Nullable TenantInboundSamlConfigIdpConfigGetArgs idpConfig) {
            this.idpConfig = Output.ofNullable(idpConfig);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder spConfig(@Nullable Output<TenantInboundSamlConfigSpConfigGetArgs> spConfig) {
            this.spConfig = spConfig;
            return this;
        }

        public Builder spConfig(@Nullable TenantInboundSamlConfigSpConfigGetArgs spConfig) {
            this.spConfig = Output.ofNullable(spConfig);
            return this;
        }

        public Builder tenant(@Nullable Output<String> tenant) {
            this.tenant = tenant;
            return this;
        }

        public Builder tenant(@Nullable String tenant) {
            this.tenant = Output.ofNullable(tenant);
            return this;
        }
        public TenantInboundSamlConfigState build() {
            return new TenantInboundSamlConfigState(displayName, enabled, idpConfig, name, project, spConfig, tenant);
        }
    }
}
