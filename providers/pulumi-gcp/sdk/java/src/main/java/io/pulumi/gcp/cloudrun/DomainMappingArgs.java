// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudrun;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.cloudrun.inputs.DomainMappingMetadataArgs;
import io.pulumi.gcp.cloudrun.inputs.DomainMappingSpecArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainMappingArgs Empty = new DomainMappingArgs();

    /**
     * The location of the cloud run instance. eg us-central1
     * 
     */
    @InputImport(name="location", required=true)
    private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    /**
     * Metadata associated with this DomainMapping.
     * Structure is documented below.
     * 
     */
    @InputImport(name="metadata", required=true)
    private final Input<DomainMappingMetadataArgs> metadata;

    public Input<DomainMappingMetadataArgs> getMetadata() {
        return this.metadata;
    }

    /**
     * Name should be a [verified](https://support.google.com/webmasters/answer/9008080) domain
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The spec for this DomainMapping.
     * Structure is documented below.
     * 
     */
    @InputImport(name="spec", required=true)
    private final Input<DomainMappingSpecArgs> spec;

    public Input<DomainMappingSpecArgs> getSpec() {
        return this.spec;
    }

    public DomainMappingArgs(
        Input<String> location,
        Input<DomainMappingMetadataArgs> metadata,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        Input<DomainMappingSpecArgs> spec) {
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.metadata = Objects.requireNonNull(metadata, "expected parameter 'metadata' to be non-null");
        this.name = name;
        this.project = project;
        this.spec = Objects.requireNonNull(spec, "expected parameter 'spec' to be non-null");
    }

    private DomainMappingArgs() {
        this.location = Input.empty();
        this.metadata = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.spec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> location;
        private Input<DomainMappingMetadataArgs> metadata;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private Input<DomainMappingSpecArgs> spec;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.spec = defaults.spec;
        }

        public Builder setLocation(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder setMetadata(Input<DomainMappingMetadataArgs> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setMetadata(DomainMappingMetadataArgs metadata) {
            this.metadata = Input.of(Objects.requireNonNull(metadata));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSpec(Input<DomainMappingSpecArgs> spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }

        public Builder setSpec(DomainMappingSpecArgs spec) {
            this.spec = Input.of(Objects.requireNonNull(spec));
            return this;
        }

        public DomainMappingArgs build() {
            return new DomainMappingArgs(location, metadata, name, project, spec);
        }
    }
}
