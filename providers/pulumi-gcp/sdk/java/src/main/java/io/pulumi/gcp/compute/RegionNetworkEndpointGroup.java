// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.RegionNetworkEndpointGroupArgs;
import io.pulumi.gcp.compute.inputs.RegionNetworkEndpointGroupState;
import io.pulumi.gcp.compute.outputs.RegionNetworkEndpointGroupAppEngine;
import io.pulumi.gcp.compute.outputs.RegionNetworkEndpointGroupCloudFunction;
import io.pulumi.gcp.compute.outputs.RegionNetworkEndpointGroupCloudRun;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A regional NEG that can support Serverless Products.
 * 
 * To get more information about RegionNetworkEndpointGroup, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/regionNetworkEndpointGroups)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/negs/serverless-neg-concepts)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Region Network Endpoint Group Functions
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const bucket = new gcp.storage.Bucket("bucket", {location: "US"});
 * const archive = new gcp.storage.BucketObject("archive", {
 *     bucket: bucket.name,
 *     source: new pulumi.asset.FileAsset("path/to/index.zip"),
 * });
 * const functionNegFunction = new gcp.cloudfunctions.Function("functionNegFunction", {
 *     description: "My function",
 *     runtime: "nodejs10",
 *     availableMemoryMb: 128,
 *     sourceArchiveBucket: bucket.name,
 *     sourceArchiveObject: archive.name,
 *     triggerHttp: true,
 *     timeout: 60,
 *     entryPoint: "helloGET",
 * });
 * // Cloud Functions Example
 * const functionNegRegionNetworkEndpointGroup = new gcp.compute.RegionNetworkEndpointGroup("functionNegRegionNetworkEndpointGroup", {
 *     networkEndpointType: "SERVERLESS",
 *     region: "us-central1",
 *     cloudFunction: {
 *         "function": functionNegFunction.name,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * bucket = gcp.storage.Bucket("bucket", location="US")
 * archive = gcp.storage.BucketObject("archive",
 *     bucket=bucket.name,
 *     source=pulumi.FileAsset("path/to/index.zip"))
 * function_neg_function = gcp.cloudfunctions.Function("functionNegFunction",
 *     description="My function",
 *     runtime="nodejs10",
 *     available_memory_mb=128,
 *     source_archive_bucket=bucket.name,
 *     source_archive_object=archive.name,
 *     trigger_http=True,
 *     timeout=60,
 *     entry_point="helloGET")
 * # Cloud Functions Example
 * function_neg_region_network_endpoint_group = gcp.compute.RegionNetworkEndpointGroup("functionNegRegionNetworkEndpointGroup",
 *     network_endpoint_type="SERVERLESS",
 *     region="us-central1",
 *     cloud_function=gcp.compute.RegionNetworkEndpointGroupCloudFunctionArgs(
 *         function=function_neg_function.name,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Gcp.Storage.Bucket("bucket", new Gcp.Storage.BucketArgs
 *         {
 *             Location = "US",
 *         });
 *         var archive = new Gcp.Storage.BucketObject("archive", new Gcp.Storage.BucketObjectArgs
 *         {
 *             Bucket = bucket.Name,
 *             Source = new FileAsset("path/to/index.zip"),
 *         });
 *         var functionNegFunction = new Gcp.CloudFunctions.Function("functionNegFunction", new Gcp.CloudFunctions.FunctionArgs
 *         {
 *             Description = "My function",
 *             Runtime = "nodejs10",
 *             AvailableMemoryMb = 128,
 *             SourceArchiveBucket = bucket.Name,
 *             SourceArchiveObject = archive.Name,
 *             TriggerHttp = true,
 *             Timeout = 60,
 *             EntryPoint = "helloGET",
 *         });
 *         // Cloud Functions Example
 *         var functionNegRegionNetworkEndpointGroup = new Gcp.Compute.RegionNetworkEndpointGroup("functionNegRegionNetworkEndpointGroup", new Gcp.Compute.RegionNetworkEndpointGroupArgs
 *         {
 *             NetworkEndpointType = "SERVERLESS",
 *             Region = "us-central1",
 *             CloudFunction = new Gcp.Compute.Inputs.RegionNetworkEndpointGroupCloudFunctionArgs
 *             {
 *                 Function = functionNegFunction.Name,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudfunctions"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
 * 			Location: pulumi.String("US"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		archive, err := storage.NewBucketObject(ctx, "archive", &storage.BucketObjectArgs{
 * 			Bucket: bucket.Name,
 * 			Source: pulumi.NewFileAsset("path/to/index.zip"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		functionNegFunction, err := cloudfunctions.NewFunction(ctx, "functionNegFunction", &cloudfunctions.FunctionArgs{
 * 			Description:         pulumi.String("My function"),
 * 			Runtime:             pulumi.String("nodejs10"),
 * 			AvailableMemoryMb:   pulumi.Int(128),
 * 			SourceArchiveBucket: bucket.Name,
 * 			SourceArchiveObject: archive.Name,
 * 			TriggerHttp:         pulumi.Bool(true),
 * 			Timeout:             pulumi.Int(60),
 * 			EntryPoint:          pulumi.String("helloGET"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRegionNetworkEndpointGroup(ctx, "functionNegRegionNetworkEndpointGroup", &compute.RegionNetworkEndpointGroupArgs{
 * 			NetworkEndpointType: pulumi.String("SERVERLESS"),
 * 			Region:              pulumi.String("us-central1"),
 * 			CloudFunction: &compute.RegionNetworkEndpointGroupCloudFunctionArgs{
 * 				Function: functionNegFunction.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Network Endpoint Group Cloudrun
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const cloudrunNegService = new gcp.cloudrun.Service("cloudrunNegService", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * });
 * // Cloud Run Example
 * const cloudrunNegRegionNetworkEndpointGroup = new gcp.compute.RegionNetworkEndpointGroup("cloudrunNegRegionNetworkEndpointGroup", {
 *     networkEndpointType: "SERVERLESS",
 *     region: "us-central1",
 *     cloudRun: {
 *         service: cloudrunNegService.name,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * cloudrun_neg_service = gcp.cloudrun.Service("cloudrunNegService",
 *     location="us-central1",
 *     template=gcp.cloudrun.ServiceTemplateArgs(
 *         spec=gcp.cloudrun.ServiceTemplateSpecArgs(
 *             containers=[gcp.cloudrun.ServiceTemplateSpecContainerArgs(
 *                 image="us-docker.pkg.dev/cloudrun/container/hello",
 *             )],
 *         ),
 *     ),
 *     traffics=[gcp.cloudrun.ServiceTrafficArgs(
 *         percent=100,
 *         latest_revision=True,
 *     )])
 * # Cloud Run Example
 * cloudrun_neg_region_network_endpoint_group = gcp.compute.RegionNetworkEndpointGroup("cloudrunNegRegionNetworkEndpointGroup",
 *     network_endpoint_type="SERVERLESS",
 *     region="us-central1",
 *     cloud_run=gcp.compute.RegionNetworkEndpointGroupCloudRunArgs(
 *         service=cloudrun_neg_service.name,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var cloudrunNegService = new Gcp.CloudRun.Service("cloudrunNegService", new Gcp.CloudRun.ServiceArgs
 *         {
 *             Location = "us-central1",
 *             Template = new Gcp.CloudRun.Inputs.ServiceTemplateArgs
 *             {
 *                 Spec = new Gcp.CloudRun.Inputs.ServiceTemplateSpecArgs
 *                 {
 *                     Containers = 
 *                     {
 *                         new Gcp.CloudRun.Inputs.ServiceTemplateSpecContainerArgs
 *                         {
 *                             Image = "us-docker.pkg.dev/cloudrun/container/hello",
 *                         },
 *                     },
 *                 },
 *             },
 *             Traffics = 
 *             {
 *                 new Gcp.CloudRun.Inputs.ServiceTrafficArgs
 *                 {
 *                     Percent = 100,
 *                     LatestRevision = true,
 *                 },
 *             },
 *         });
 *         // Cloud Run Example
 *         var cloudrunNegRegionNetworkEndpointGroup = new Gcp.Compute.RegionNetworkEndpointGroup("cloudrunNegRegionNetworkEndpointGroup", new Gcp.Compute.RegionNetworkEndpointGroupArgs
 *         {
 *             NetworkEndpointType = "SERVERLESS",
 *             Region = "us-central1",
 *             CloudRun = new Gcp.Compute.Inputs.RegionNetworkEndpointGroupCloudRunArgs
 *             {
 *                 Service = cloudrunNegService.Name,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrun"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		cloudrunNegService, err := cloudrun.NewService(ctx, "cloudrunNegService", &cloudrun.ServiceArgs{
 * 			Location: pulumi.String("us-central1"),
 * 			Template: &cloudrun.ServiceTemplateArgs{
 * 				Spec: &cloudrun.ServiceTemplateSpecArgs{
 * 					Containers: cloudrun.ServiceTemplateSpecContainerArray{
 * 						&cloudrun.ServiceTemplateSpecContainerArgs{
 * 							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Traffics: cloudrun.ServiceTrafficArray{
 * 				&cloudrun.ServiceTrafficArgs{
 * 					Percent:        pulumi.Int(100),
 * 					LatestRevision: pulumi.Bool(true),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRegionNetworkEndpointGroup(ctx, "cloudrunNegRegionNetworkEndpointGroup", &compute.RegionNetworkEndpointGroupArgs{
 * 			NetworkEndpointType: pulumi.String("SERVERLESS"),
 * 			Region:              pulumi.String("us-central1"),
 * 			CloudRun: &compute.RegionNetworkEndpointGroupCloudRunArgs{
 * 				Service: cloudrunNegService.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Network Endpoint Group Appengine
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const appengineNegBucket = new gcp.storage.Bucket("appengineNegBucket", {location: "US"});
 * const appengineNegBucketObject = new gcp.storage.BucketObject("appengineNegBucketObject", {
 *     bucket: appengineNegBucket.name,
 *     source: new pulumi.asset.FileAsset("./test-fixtures/appengine/hello-world.zip"),
 * });
 * const appengineNegFlexibleAppVersion = new gcp.appengine.FlexibleAppVersion("appengineNegFlexibleAppVersion", {
 *     versionId: "v1",
 *     service: "appengine-network-endpoint-group",
 *     runtime: "nodejs",
 *     entrypoint: {
 *         shell: "node ./app.js",
 *     },
 *     deployment: {
 *         zip: {
 *             sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${appengineNegBucket.name}/${appengineNegBucketObject.name}`,
 *         },
 *     },
 *     livenessCheck: {
 *         path: "/",
 *     },
 *     readinessCheck: {
 *         path: "/",
 *     },
 *     envVariables: {
 *         port: "8080",
 *     },
 *     handlers: [{
 *         urlRegex: ".*\\/my-path\\/*",
 *         securityLevel: "SECURE_ALWAYS",
 *         login: "LOGIN_REQUIRED",
 *         authFailAction: "AUTH_FAIL_ACTION_REDIRECT",
 *         staticFiles: {
 *             path: "my-other-path",
 *             uploadPathRegex: ".*\\/my-path\\/*",
 *         },
 *     }],
 *     automaticScaling: {
 *         coolDownPeriod: "120s",
 *         cpuUtilization: {
 *             targetUtilization: 0.5,
 *         },
 *     },
 *     noopOnDestroy: true,
 * });
 * // App Engine Example
 * const appengineNegRegionNetworkEndpointGroup = new gcp.compute.RegionNetworkEndpointGroup("appengineNegRegionNetworkEndpointGroup", {
 *     networkEndpointType: "SERVERLESS",
 *     region: "us-central1",
 *     appEngine: {
 *         service: appengineNegFlexibleAppVersion.service,
 *         version: appengineNegFlexibleAppVersion.versionId,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * appengine_neg_bucket = gcp.storage.Bucket("appengineNegBucket", location="US")
 * appengine_neg_bucket_object = gcp.storage.BucketObject("appengineNegBucketObject",
 *     bucket=appengine_neg_bucket.name,
 *     source=pulumi.FileAsset("./test-fixtures/appengine/hello-world.zip"))
 * appengine_neg_flexible_app_version = gcp.appengine.FlexibleAppVersion("appengineNegFlexibleAppVersion",
 *     version_id="v1",
 *     service="appengine-network-endpoint-group",
 *     runtime="nodejs",
 *     entrypoint=gcp.appengine.FlexibleAppVersionEntrypointArgs(
 *         shell="node ./app.js",
 *     ),
 *     deployment=gcp.appengine.FlexibleAppVersionDeploymentArgs(
 *         zip=gcp.appengine.FlexibleAppVersionDeploymentZipArgs(
 *             source_url=pulumi.Output.all(appengine_neg_bucket.name, appengine_neg_bucket_object.name).apply(lambda appengineNegBucketName, appengineNegBucketObjectName: f"https://storage.googleapis.com/{appengine_neg_bucket_name}/{appengine_neg_bucket_object_name}"),
 *         ),
 *     ),
 *     liveness_check=gcp.appengine.FlexibleAppVersionLivenessCheckArgs(
 *         path="/",
 *     ),
 *     readiness_check=gcp.appengine.FlexibleAppVersionReadinessCheckArgs(
 *         path="/",
 *     ),
 *     env_variables={
 *         "port": "8080",
 *     },
 *     handlers=[gcp.appengine.FlexibleAppVersionHandlerArgs(
 *         url_regex=".*\\/my-path\\/*",
 *         security_level="SECURE_ALWAYS",
 *         login="LOGIN_REQUIRED",
 *         auth_fail_action="AUTH_FAIL_ACTION_REDIRECT",
 *         static_files=gcp.appengine.FlexibleAppVersionHandlerStaticFilesArgs(
 *             path="my-other-path",
 *             upload_path_regex=".*\\/my-path\\/*",
 *         ),
 *     )],
 *     automatic_scaling=gcp.appengine.FlexibleAppVersionAutomaticScalingArgs(
 *         cool_down_period="120s",
 *         cpu_utilization=gcp.appengine.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs(
 *             target_utilization=0.5,
 *         ),
 *     ),
 *     noop_on_destroy=True)
 * # App Engine Example
 * appengine_neg_region_network_endpoint_group = gcp.compute.RegionNetworkEndpointGroup("appengineNegRegionNetworkEndpointGroup",
 *     network_endpoint_type="SERVERLESS",
 *     region="us-central1",
 *     app_engine=gcp.compute.RegionNetworkEndpointGroupAppEngineArgs(
 *         service=appengine_neg_flexible_app_version.service,
 *         version=appengine_neg_flexible_app_version.version_id,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var appengineNegBucket = new Gcp.Storage.Bucket("appengineNegBucket", new Gcp.Storage.BucketArgs
 *         {
 *             Location = "US",
 *         });
 *         var appengineNegBucketObject = new Gcp.Storage.BucketObject("appengineNegBucketObject", new Gcp.Storage.BucketObjectArgs
 *         {
 *             Bucket = appengineNegBucket.Name,
 *             Source = new FileAsset("./test-fixtures/appengine/hello-world.zip"),
 *         });
 *         var appengineNegFlexibleAppVersion = new Gcp.AppEngine.FlexibleAppVersion("appengineNegFlexibleAppVersion", new Gcp.AppEngine.FlexibleAppVersionArgs
 *         {
 *             VersionId = "v1",
 *             Service = "appengine-network-endpoint-group",
 *             Runtime = "nodejs",
 *             Entrypoint = new Gcp.AppEngine.Inputs.FlexibleAppVersionEntrypointArgs
 *             {
 *                 Shell = "node ./app.js",
 *             },
 *             Deployment = new Gcp.AppEngine.Inputs.FlexibleAppVersionDeploymentArgs
 *             {
 *                 Zip = new Gcp.AppEngine.Inputs.FlexibleAppVersionDeploymentZipArgs
 *                 {
 *                     SourceUrl = Output.Tuple(appengineNegBucket.Name, appengineNegBucketObject.Name).Apply(values =>
 *                     {
 *                         var appengineNegBucketName = values.Item1;
 *                         var appengineNegBucketObjectName = values.Item2;
 *                         return $"https://storage.googleapis.com/{appengineNegBucketName}/{appengineNegBucketObjectName}";
 *                     }),
 *                 },
 *             },
 *             LivenessCheck = new Gcp.AppEngine.Inputs.FlexibleAppVersionLivenessCheckArgs
 *             {
 *                 Path = "/",
 *             },
 *             ReadinessCheck = new Gcp.AppEngine.Inputs.FlexibleAppVersionReadinessCheckArgs
 *             {
 *                 Path = "/",
 *             },
 *             EnvVariables = 
 *             {
 *                 { "port", "8080" },
 *             },
 *             Handlers = 
 *             {
 *                 new Gcp.AppEngine.Inputs.FlexibleAppVersionHandlerArgs
 *                 {
 *                     UrlRegex = ".*\\/my-path\\/*",
 *                     SecurityLevel = "SECURE_ALWAYS",
 *                     Login = "LOGIN_REQUIRED",
 *                     AuthFailAction = "AUTH_FAIL_ACTION_REDIRECT",
 *                     StaticFiles = new Gcp.AppEngine.Inputs.FlexibleAppVersionHandlerStaticFilesArgs
 *                     {
 *                         Path = "my-other-path",
 *                         UploadPathRegex = ".*\\/my-path\\/*",
 *                     },
 *                 },
 *             },
 *             AutomaticScaling = new Gcp.AppEngine.Inputs.FlexibleAppVersionAutomaticScalingArgs
 *             {
 *                 CoolDownPeriod = "120s",
 *                 CpuUtilization = new Gcp.AppEngine.Inputs.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs
 *                 {
 *                     TargetUtilization = 0.5,
 *                 },
 *             },
 *             NoopOnDestroy = true,
 *         });
 *         // App Engine Example
 *         var appengineNegRegionNetworkEndpointGroup = new Gcp.Compute.RegionNetworkEndpointGroup("appengineNegRegionNetworkEndpointGroup", new Gcp.Compute.RegionNetworkEndpointGroupArgs
 *         {
 *             NetworkEndpointType = "SERVERLESS",
 *             Region = "us-central1",
 *             AppEngine = new Gcp.Compute.Inputs.RegionNetworkEndpointGroupAppEngineArgs
 *             {
 *                 Service = appengineNegFlexibleAppVersion.Service,
 *                 Version = appengineNegFlexibleAppVersion.VersionId,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/appengine"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		appengineNegBucket, err := storage.NewBucket(ctx, "appengineNegBucket", &storage.BucketArgs{
 * 			Location: pulumi.String("US"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		appengineNegBucketObject, err := storage.NewBucketObject(ctx, "appengineNegBucketObject", &storage.BucketObjectArgs{
 * 			Bucket: appengineNegBucket.Name,
 * 			Source: pulumi.NewFileAsset("./test-fixtures/appengine/hello-world.zip"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		appengineNegFlexibleAppVersion, err := appengine.NewFlexibleAppVersion(ctx, "appengineNegFlexibleAppVersion", &appengine.FlexibleAppVersionArgs{
 * 			VersionId: pulumi.String("v1"),
 * 			Service:   pulumi.String("appengine-network-endpoint-group"),
 * 			Runtime:   pulumi.String("nodejs"),
 * 			Entrypoint: &appengine.FlexibleAppVersionEntrypointArgs{
 * 				Shell: pulumi.String("node ./app.js"),
 * 			},
 * 			Deployment: &appengine.FlexibleAppVersionDeploymentArgs{
 * 				Zip: &appengine.FlexibleAppVersionDeploymentZipArgs{
 * 					SourceUrl: pulumi.All(appengineNegBucket.Name, appengineNegBucketObject.Name).ApplyT(func(_args []interface{}) (string, error) {
 * 						appengineNegBucketName := _args[0].(string)
 * 						appengineNegBucketObjectName := _args[1].(string)
 * 						return fmt.Sprintf("%v%v%v%v", "https://storage.googleapis.com/", appengineNegBucketName, "/", appengineNegBucketObjectName), nil
 * 					}).(pulumi.StringOutput),
 * 				},
 * 			},
 * 			LivenessCheck: &appengine.FlexibleAppVersionLivenessCheckArgs{
 * 				Path: pulumi.String("/"),
 * 			},
 * 			ReadinessCheck: &appengine.FlexibleAppVersionReadinessCheckArgs{
 * 				Path: pulumi.String("/"),
 * 			},
 * 			EnvVariables: pulumi.StringMap{
 * 				"port": pulumi.String("8080"),
 * 			},
 * 			Handlers: appengine.FlexibleAppVersionHandlerArray{
 * 				&appengine.FlexibleAppVersionHandlerArgs{
 * 					UrlRegex:       pulumi.String(".*\\/my-path\\/*"),
 * 					SecurityLevel:  pulumi.String("SECURE_ALWAYS"),
 * 					Login:          pulumi.String("LOGIN_REQUIRED"),
 * 					AuthFailAction: pulumi.String("AUTH_FAIL_ACTION_REDIRECT"),
 * 					StaticFiles: &appengine.FlexibleAppVersionHandlerStaticFilesArgs{
 * 						Path:            pulumi.String("my-other-path"),
 * 						UploadPathRegex: pulumi.String(".*\\/my-path\\/*"),
 * 					},
 * 				},
 * 			},
 * 			AutomaticScaling: &appengine.FlexibleAppVersionAutomaticScalingArgs{
 * 				CoolDownPeriod: pulumi.String("120s"),
 * 				CpuUtilization: &appengine.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs{
 * 					TargetUtilization: pulumi.Float64(0.5),
 * 				},
 * 			},
 * 			NoopOnDestroy: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRegionNetworkEndpointGroup(ctx, "appengineNegRegionNetworkEndpointGroup", &compute.RegionNetworkEndpointGroupArgs{
 * 			NetworkEndpointType: pulumi.String("SERVERLESS"),
 * 			Region:              pulumi.String("us-central1"),
 * 			AppEngine: &compute.RegionNetworkEndpointGroupAppEngineArgs{
 * 				Service: appengineNegFlexibleAppVersion.Service,
 * 				Version: appengineNegFlexibleAppVersion.VersionId,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * RegionNetworkEndpointGroup can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup default projects/{{project}}/regions/{{region}}/networkEndpointGroups/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup")
public class RegionNetworkEndpointGroup extends io.pulumi.resources.CustomResource {
    /**
     * Only valid when networkEndpointType is "SERVERLESS".
     * Only one of cloud_run, app_engine or cloud_function may be set.
     * Structure is documented below.
     * 
     */
    @Export(name="appEngine", type=RegionNetworkEndpointGroupAppEngine.class, parameters={})
    private Output</* @Nullable */ RegionNetworkEndpointGroupAppEngine> appEngine;

    /**
     * @return Only valid when networkEndpointType is "SERVERLESS".
     * Only one of cloud_run, app_engine or cloud_function may be set.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionNetworkEndpointGroupAppEngine> getAppEngine() {
        return this.appEngine;
    }
    /**
     * Only valid when networkEndpointType is "SERVERLESS".
     * Only one of cloud_run, app_engine or cloud_function may be set.
     * Structure is documented below.
     * 
     */
    @Export(name="cloudFunction", type=RegionNetworkEndpointGroupCloudFunction.class, parameters={})
    private Output</* @Nullable */ RegionNetworkEndpointGroupCloudFunction> cloudFunction;

    /**
     * @return Only valid when networkEndpointType is "SERVERLESS".
     * Only one of cloud_run, app_engine or cloud_function may be set.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionNetworkEndpointGroupCloudFunction> getCloudFunction() {
        return this.cloudFunction;
    }
    /**
     * Only valid when networkEndpointType is "SERVERLESS".
     * Only one of cloud_run, app_engine or cloud_function may be set.
     * Structure is documented below.
     * 
     */
    @Export(name="cloudRun", type=RegionNetworkEndpointGroupCloudRun.class, parameters={})
    private Output</* @Nullable */ RegionNetworkEndpointGroupCloudRun> cloudRun;

    /**
     * @return Only valid when networkEndpointType is "SERVERLESS".
     * Only one of cloud_run, app_engine or cloud_function may be set.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionNetworkEndpointGroupCloudRun> getCloudRun() {
        return this.cloudRun;
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Type of network endpoints in this network endpoint group. Defaults to SERVERLESS
     * Default value is `SERVERLESS`.
     * Possible values are `SERVERLESS`.
     * 
     */
    @Export(name="networkEndpointType", type=String.class, parameters={})
    private Output</* @Nullable */ String> networkEndpointType;

    /**
     * @return Type of network endpoints in this network endpoint group. Defaults to SERVERLESS
     * Default value is `SERVERLESS`.
     * Possible values are `SERVERLESS`.
     * 
     */
    public Output</* @Nullable */ String> getNetworkEndpointType() {
        return this.networkEndpointType;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * A reference to the region where the Serverless NEGs Reside.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return A reference to the region where the Serverless NEGs Reside.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionNetworkEndpointGroup(String name) {
        this(name, RegionNetworkEndpointGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionNetworkEndpointGroup(String name, RegionNetworkEndpointGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionNetworkEndpointGroup(String name, RegionNetworkEndpointGroupArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup", name, args == null ? RegionNetworkEndpointGroupArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RegionNetworkEndpointGroup(String name, Output<String> id, @Nullable RegionNetworkEndpointGroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionNetworkEndpointGroup get(String name, Output<String> id, @Nullable RegionNetworkEndpointGroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RegionNetworkEndpointGroup(name, id, state, options);
    }
}
