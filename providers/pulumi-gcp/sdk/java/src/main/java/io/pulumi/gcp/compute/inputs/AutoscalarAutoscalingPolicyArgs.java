// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.AutoscalarAutoscalingPolicyCpuUtilizationArgs;
import io.pulumi.gcp.compute.inputs.AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs;
import io.pulumi.gcp.compute.inputs.AutoscalarAutoscalingPolicyMetricArgs;
import io.pulumi.gcp.compute.inputs.AutoscalarAutoscalingPolicyScaleDownControlArgs;
import io.pulumi.gcp.compute.inputs.AutoscalarAutoscalingPolicyScaleInControlArgs;
import io.pulumi.gcp.compute.inputs.AutoscalarAutoscalingPolicyScalingScheduleArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AutoscalarAutoscalingPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoscalarAutoscalingPolicyArgs Empty = new AutoscalarAutoscalingPolicyArgs();

    /**
     * The number of seconds that the autoscaler should wait before it
     * starts collecting information from a new instance. This prevents
     * the autoscaler from collecting information when the instance is
     * initializing, during which the collected usage would not be
     * reliable. The default time autoscaler waits is 60 seconds.
     * Virtual machine initialization times might vary because of
     * numerous factors. We recommend that you test how long an
     * instance may take to initialize. To do this, create an instance
     * and time the startup process.
     * 
     */
    @InputImport(name="cooldownPeriod")
    private final @Nullable Input<Integer> cooldownPeriod;

    public Input<Integer> getCooldownPeriod() {
        return this.cooldownPeriod == null ? Input.empty() : this.cooldownPeriod;
    }

    /**
     * Defines the CPU utilization policy that allows the autoscaler to
     * scale based on the average CPU utilization of a managed instance
     * group.
     * Structure is documented below.
     * 
     */
    @InputImport(name="cpuUtilization")
    private final @Nullable Input<AutoscalarAutoscalingPolicyCpuUtilizationArgs> cpuUtilization;

    public Input<AutoscalarAutoscalingPolicyCpuUtilizationArgs> getCpuUtilization() {
        return this.cpuUtilization == null ? Input.empty() : this.cpuUtilization;
    }

    /**
     * Configuration parameters of autoscaling based on a load balancer.
     * Structure is documented below.
     * 
     */
    @InputImport(name="loadBalancingUtilization")
    private final @Nullable Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs> loadBalancingUtilization;

    public Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs> getLoadBalancingUtilization() {
        return this.loadBalancingUtilization == null ? Input.empty() : this.loadBalancingUtilization;
    }

    /**
     * The maximum number of instances that the autoscaler can scale up
     * to. This is required when creating or updating an autoscaler. The
     * maximum number of replicas should not be lower than minimal number
     * of replicas.
     * 
     */
    @InputImport(name="maxReplicas", required=true)
    private final Input<Integer> maxReplicas;

    public Input<Integer> getMaxReplicas() {
        return this.maxReplicas;
    }

    /**
     * Configuration parameters of autoscaling based on a custom metric.
     * Structure is documented below.
     * 
     */
    @InputImport(name="metrics")
    private final @Nullable Input<List<AutoscalarAutoscalingPolicyMetricArgs>> metrics;

    public Input<List<AutoscalarAutoscalingPolicyMetricArgs>> getMetrics() {
        return this.metrics == null ? Input.empty() : this.metrics;
    }

    /**
     * The minimum number of replicas that the autoscaler can scale down
     * to. This cannot be less than 0. If not provided, autoscaler will
     * choose a default value depending on maximum number of instances
     * allowed.
     * 
     */
    @InputImport(name="minReplicas", required=true)
    private final Input<Integer> minReplicas;

    public Input<Integer> getMinReplicas() {
        return this.minReplicas;
    }

    /**
     * Defines operating mode for this policy.
     * Default value is `ON`.
     * Possible values are `OFF`, `ONLY_UP`, and `ON`.
     * 
     */
    @InputImport(name="mode")
    private final @Nullable Input<String> mode;

    public Input<String> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    /**
     * Defines scale down controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events
     * Structure is documented below.
     * 
     */
    @InputImport(name="scaleDownControl")
    private final @Nullable Input<AutoscalarAutoscalingPolicyScaleDownControlArgs> scaleDownControl;

    public Input<AutoscalarAutoscalingPolicyScaleDownControlArgs> getScaleDownControl() {
        return this.scaleDownControl == null ? Input.empty() : this.scaleDownControl;
    }

    /**
     * Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events
     * Structure is documented below.
     * 
     */
    @InputImport(name="scaleInControl")
    private final @Nullable Input<AutoscalarAutoscalingPolicyScaleInControlArgs> scaleInControl;

    public Input<AutoscalarAutoscalingPolicyScaleInControlArgs> getScaleInControl() {
        return this.scaleInControl == null ? Input.empty() : this.scaleInControl;
    }

    /**
     * Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler and they can overlap.
     * Structure is documented below.
     * 
     */
    @InputImport(name="scalingSchedules")
    private final @Nullable Input<List<AutoscalarAutoscalingPolicyScalingScheduleArgs>> scalingSchedules;

    public Input<List<AutoscalarAutoscalingPolicyScalingScheduleArgs>> getScalingSchedules() {
        return this.scalingSchedules == null ? Input.empty() : this.scalingSchedules;
    }

    public AutoscalarAutoscalingPolicyArgs(
        @Nullable Input<Integer> cooldownPeriod,
        @Nullable Input<AutoscalarAutoscalingPolicyCpuUtilizationArgs> cpuUtilization,
        @Nullable Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs> loadBalancingUtilization,
        Input<Integer> maxReplicas,
        @Nullable Input<List<AutoscalarAutoscalingPolicyMetricArgs>> metrics,
        Input<Integer> minReplicas,
        @Nullable Input<String> mode,
        @Nullable Input<AutoscalarAutoscalingPolicyScaleDownControlArgs> scaleDownControl,
        @Nullable Input<AutoscalarAutoscalingPolicyScaleInControlArgs> scaleInControl,
        @Nullable Input<List<AutoscalarAutoscalingPolicyScalingScheduleArgs>> scalingSchedules) {
        this.cooldownPeriod = cooldownPeriod;
        this.cpuUtilization = cpuUtilization;
        this.loadBalancingUtilization = loadBalancingUtilization;
        this.maxReplicas = Objects.requireNonNull(maxReplicas, "expected parameter 'maxReplicas' to be non-null");
        this.metrics = metrics;
        this.minReplicas = Objects.requireNonNull(minReplicas, "expected parameter 'minReplicas' to be non-null");
        this.mode = mode;
        this.scaleDownControl = scaleDownControl;
        this.scaleInControl = scaleInControl;
        this.scalingSchedules = scalingSchedules;
    }

    private AutoscalarAutoscalingPolicyArgs() {
        this.cooldownPeriod = Input.empty();
        this.cpuUtilization = Input.empty();
        this.loadBalancingUtilization = Input.empty();
        this.maxReplicas = Input.empty();
        this.metrics = Input.empty();
        this.minReplicas = Input.empty();
        this.mode = Input.empty();
        this.scaleDownControl = Input.empty();
        this.scaleInControl = Input.empty();
        this.scalingSchedules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscalarAutoscalingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> cooldownPeriod;
        private @Nullable Input<AutoscalarAutoscalingPolicyCpuUtilizationArgs> cpuUtilization;
        private @Nullable Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs> loadBalancingUtilization;
        private Input<Integer> maxReplicas;
        private @Nullable Input<List<AutoscalarAutoscalingPolicyMetricArgs>> metrics;
        private Input<Integer> minReplicas;
        private @Nullable Input<String> mode;
        private @Nullable Input<AutoscalarAutoscalingPolicyScaleDownControlArgs> scaleDownControl;
        private @Nullable Input<AutoscalarAutoscalingPolicyScaleInControlArgs> scaleInControl;
        private @Nullable Input<List<AutoscalarAutoscalingPolicyScalingScheduleArgs>> scalingSchedules;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoscalarAutoscalingPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cooldownPeriod = defaults.cooldownPeriod;
    	      this.cpuUtilization = defaults.cpuUtilization;
    	      this.loadBalancingUtilization = defaults.loadBalancingUtilization;
    	      this.maxReplicas = defaults.maxReplicas;
    	      this.metrics = defaults.metrics;
    	      this.minReplicas = defaults.minReplicas;
    	      this.mode = defaults.mode;
    	      this.scaleDownControl = defaults.scaleDownControl;
    	      this.scaleInControl = defaults.scaleInControl;
    	      this.scalingSchedules = defaults.scalingSchedules;
        }

        public Builder setCooldownPeriod(@Nullable Input<Integer> cooldownPeriod) {
            this.cooldownPeriod = cooldownPeriod;
            return this;
        }

        public Builder setCooldownPeriod(@Nullable Integer cooldownPeriod) {
            this.cooldownPeriod = Input.ofNullable(cooldownPeriod);
            return this;
        }

        public Builder setCpuUtilization(@Nullable Input<AutoscalarAutoscalingPolicyCpuUtilizationArgs> cpuUtilization) {
            this.cpuUtilization = cpuUtilization;
            return this;
        }

        public Builder setCpuUtilization(@Nullable AutoscalarAutoscalingPolicyCpuUtilizationArgs cpuUtilization) {
            this.cpuUtilization = Input.ofNullable(cpuUtilization);
            return this;
        }

        public Builder setLoadBalancingUtilization(@Nullable Input<AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs> loadBalancingUtilization) {
            this.loadBalancingUtilization = loadBalancingUtilization;
            return this;
        }

        public Builder setLoadBalancingUtilization(@Nullable AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs loadBalancingUtilization) {
            this.loadBalancingUtilization = Input.ofNullable(loadBalancingUtilization);
            return this;
        }

        public Builder setMaxReplicas(Input<Integer> maxReplicas) {
            this.maxReplicas = Objects.requireNonNull(maxReplicas);
            return this;
        }

        public Builder setMaxReplicas(Integer maxReplicas) {
            this.maxReplicas = Input.of(Objects.requireNonNull(maxReplicas));
            return this;
        }

        public Builder setMetrics(@Nullable Input<List<AutoscalarAutoscalingPolicyMetricArgs>> metrics) {
            this.metrics = metrics;
            return this;
        }

        public Builder setMetrics(@Nullable List<AutoscalarAutoscalingPolicyMetricArgs> metrics) {
            this.metrics = Input.ofNullable(metrics);
            return this;
        }

        public Builder setMinReplicas(Input<Integer> minReplicas) {
            this.minReplicas = Objects.requireNonNull(minReplicas);
            return this;
        }

        public Builder setMinReplicas(Integer minReplicas) {
            this.minReplicas = Input.of(Objects.requireNonNull(minReplicas));
            return this;
        }

        public Builder setMode(@Nullable Input<String> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable String mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder setScaleDownControl(@Nullable Input<AutoscalarAutoscalingPolicyScaleDownControlArgs> scaleDownControl) {
            this.scaleDownControl = scaleDownControl;
            return this;
        }

        public Builder setScaleDownControl(@Nullable AutoscalarAutoscalingPolicyScaleDownControlArgs scaleDownControl) {
            this.scaleDownControl = Input.ofNullable(scaleDownControl);
            return this;
        }

        public Builder setScaleInControl(@Nullable Input<AutoscalarAutoscalingPolicyScaleInControlArgs> scaleInControl) {
            this.scaleInControl = scaleInControl;
            return this;
        }

        public Builder setScaleInControl(@Nullable AutoscalarAutoscalingPolicyScaleInControlArgs scaleInControl) {
            this.scaleInControl = Input.ofNullable(scaleInControl);
            return this;
        }

        public Builder setScalingSchedules(@Nullable Input<List<AutoscalarAutoscalingPolicyScalingScheduleArgs>> scalingSchedules) {
            this.scalingSchedules = scalingSchedules;
            return this;
        }

        public Builder setScalingSchedules(@Nullable List<AutoscalarAutoscalingPolicyScalingScheduleArgs> scalingSchedules) {
            this.scalingSchedules = Input.ofNullable(scalingSchedules);
            return this;
        }

        public AutoscalarAutoscalingPolicyArgs build() {
            return new AutoscalarAutoscalingPolicyArgs(cooldownPeriod, cpuUtilization, loadBalancingUtilization, maxReplicas, metrics, minReplicas, mode, scaleDownControl, scaleInControl, scalingSchedules);
        }
    }
}
