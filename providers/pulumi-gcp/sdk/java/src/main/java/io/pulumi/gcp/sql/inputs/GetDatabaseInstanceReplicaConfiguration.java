// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetDatabaseInstanceReplicaConfiguration extends io.pulumi.resources.InvokeArgs {

    public static final GetDatabaseInstanceReplicaConfiguration Empty = new GetDatabaseInstanceReplicaConfiguration();

    @Import(name="caCertificate", required=true)
      private final String caCertificate;

    public String getCaCertificate() {
        return this.caCertificate;
    }

    @Import(name="clientCertificate", required=true)
      private final String clientCertificate;

    public String getClientCertificate() {
        return this.clientCertificate;
    }

    @Import(name="clientKey", required=true)
      private final String clientKey;

    public String getClientKey() {
        return this.clientKey;
    }

    @Import(name="connectRetryInterval", required=true)
      private final Integer connectRetryInterval;

    public Integer getConnectRetryInterval() {
        return this.connectRetryInterval;
    }

    @Import(name="dumpFilePath", required=true)
      private final String dumpFilePath;

    public String getDumpFilePath() {
        return this.dumpFilePath;
    }

    @Import(name="failoverTarget", required=true)
      private final Boolean failoverTarget;

    public Boolean getFailoverTarget() {
        return this.failoverTarget;
    }

    @Import(name="masterHeartbeatPeriod", required=true)
      private final Integer masterHeartbeatPeriod;

    public Integer getMasterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }

    @Import(name="password", required=true)
      private final String password;

    public String getPassword() {
        return this.password;
    }

    @Import(name="sslCipher", required=true)
      private final String sslCipher;

    public String getSslCipher() {
        return this.sslCipher;
    }

    @Import(name="username", required=true)
      private final String username;

    public String getUsername() {
        return this.username;
    }

    @Import(name="verifyServerCertificate", required=true)
      private final Boolean verifyServerCertificate;

    public Boolean getVerifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    public GetDatabaseInstanceReplicaConfiguration(
        String caCertificate,
        String clientCertificate,
        String clientKey,
        Integer connectRetryInterval,
        String dumpFilePath,
        Boolean failoverTarget,
        Integer masterHeartbeatPeriod,
        String password,
        String sslCipher,
        String username,
        Boolean verifyServerCertificate) {
        this.caCertificate = Objects.requireNonNull(caCertificate, "expected parameter 'caCertificate' to be non-null");
        this.clientCertificate = Objects.requireNonNull(clientCertificate, "expected parameter 'clientCertificate' to be non-null");
        this.clientKey = Objects.requireNonNull(clientKey, "expected parameter 'clientKey' to be non-null");
        this.connectRetryInterval = Objects.requireNonNull(connectRetryInterval, "expected parameter 'connectRetryInterval' to be non-null");
        this.dumpFilePath = Objects.requireNonNull(dumpFilePath, "expected parameter 'dumpFilePath' to be non-null");
        this.failoverTarget = Objects.requireNonNull(failoverTarget, "expected parameter 'failoverTarget' to be non-null");
        this.masterHeartbeatPeriod = Objects.requireNonNull(masterHeartbeatPeriod, "expected parameter 'masterHeartbeatPeriod' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.sslCipher = Objects.requireNonNull(sslCipher, "expected parameter 'sslCipher' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
        this.verifyServerCertificate = Objects.requireNonNull(verifyServerCertificate, "expected parameter 'verifyServerCertificate' to be non-null");
    }

    private GetDatabaseInstanceReplicaConfiguration() {
        this.caCertificate = null;
        this.clientCertificate = null;
        this.clientKey = null;
        this.connectRetryInterval = null;
        this.dumpFilePath = null;
        this.failoverTarget = null;
        this.masterHeartbeatPeriod = null;
        this.password = null;
        this.sslCipher = null;
        this.username = null;
        this.verifyServerCertificate = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceReplicaConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private Integer connectRetryInterval;
        private String dumpFilePath;
        private Boolean failoverTarget;
        private Integer masterHeartbeatPeriod;
        private String password;
        private String sslCipher;
        private String username;
        private Boolean verifyServerCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseInstanceReplicaConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        public Builder caCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }

        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }

        public Builder connectRetryInterval(Integer connectRetryInterval) {
            this.connectRetryInterval = Objects.requireNonNull(connectRetryInterval);
            return this;
        }

        public Builder dumpFilePath(String dumpFilePath) {
            this.dumpFilePath = Objects.requireNonNull(dumpFilePath);
            return this;
        }

        public Builder failoverTarget(Boolean failoverTarget) {
            this.failoverTarget = Objects.requireNonNull(failoverTarget);
            return this;
        }

        public Builder masterHeartbeatPeriod(Integer masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = Objects.requireNonNull(masterHeartbeatPeriod);
            return this;
        }

        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder sslCipher(String sslCipher) {
            this.sslCipher = Objects.requireNonNull(sslCipher);
            return this;
        }

        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            this.verifyServerCertificate = Objects.requireNonNull(verifyServerCertificate);
            return this;
        }
        public GetDatabaseInstanceReplicaConfiguration build() {
            return new GetDatabaseInstanceReplicaConfiguration(caCertificate, clientCertificate, clientKey, connectRetryInterval, dumpFilePath, failoverTarget, masterHeartbeatPeriod, password, sslCipher, username, verifyServerCertificate);
        }
    }
}
