// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.RouterNatLogConfigGetArgs;
import io.pulumi.gcp.compute.inputs.RouterNatSubnetworkGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterNatState extends io.pulumi.resources.ResourceArgs {

    public static final RouterNatState Empty = new RouterNatState();

    @InputImport(name="drainNatIps")
    private final @Nullable Input<List<String>> drainNatIps;

    public Input<List<String>> getDrainNatIps() {
        return this.drainNatIps == null ? Input.empty() : this.drainNatIps;
    }

    @InputImport(name="enableEndpointIndependentMapping")
    private final @Nullable Input<Boolean> enableEndpointIndependentMapping;

    public Input<Boolean> getEnableEndpointIndependentMapping() {
        return this.enableEndpointIndependentMapping == null ? Input.empty() : this.enableEndpointIndependentMapping;
    }

    @InputImport(name="icmpIdleTimeoutSec")
    private final @Nullable Input<Integer> icmpIdleTimeoutSec;

    public Input<Integer> getIcmpIdleTimeoutSec() {
        return this.icmpIdleTimeoutSec == null ? Input.empty() : this.icmpIdleTimeoutSec;
    }

    @InputImport(name="logConfig")
    private final @Nullable Input<RouterNatLogConfigGetArgs> logConfig;

    public Input<RouterNatLogConfigGetArgs> getLogConfig() {
        return this.logConfig == null ? Input.empty() : this.logConfig;
    }

    @InputImport(name="minPortsPerVm")
    private final @Nullable Input<Integer> minPortsPerVm;

    public Input<Integer> getMinPortsPerVm() {
        return this.minPortsPerVm == null ? Input.empty() : this.minPortsPerVm;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="natIpAllocateOption")
    private final @Nullable Input<String> natIpAllocateOption;

    public Input<String> getNatIpAllocateOption() {
        return this.natIpAllocateOption == null ? Input.empty() : this.natIpAllocateOption;
    }

    @InputImport(name="natIps")
    private final @Nullable Input<List<String>> natIps;

    public Input<List<String>> getNatIps() {
        return this.natIps == null ? Input.empty() : this.natIps;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    @InputImport(name="router")
    private final @Nullable Input<String> router;

    public Input<String> getRouter() {
        return this.router == null ? Input.empty() : this.router;
    }

    @InputImport(name="sourceSubnetworkIpRangesToNat")
    private final @Nullable Input<String> sourceSubnetworkIpRangesToNat;

    public Input<String> getSourceSubnetworkIpRangesToNat() {
        return this.sourceSubnetworkIpRangesToNat == null ? Input.empty() : this.sourceSubnetworkIpRangesToNat;
    }

    @InputImport(name="subnetworks")
    private final @Nullable Input<List<RouterNatSubnetworkGetArgs>> subnetworks;

    public Input<List<RouterNatSubnetworkGetArgs>> getSubnetworks() {
        return this.subnetworks == null ? Input.empty() : this.subnetworks;
    }

    @InputImport(name="tcpEstablishedIdleTimeoutSec")
    private final @Nullable Input<Integer> tcpEstablishedIdleTimeoutSec;

    public Input<Integer> getTcpEstablishedIdleTimeoutSec() {
        return this.tcpEstablishedIdleTimeoutSec == null ? Input.empty() : this.tcpEstablishedIdleTimeoutSec;
    }

    @InputImport(name="tcpTransitoryIdleTimeoutSec")
    private final @Nullable Input<Integer> tcpTransitoryIdleTimeoutSec;

    public Input<Integer> getTcpTransitoryIdleTimeoutSec() {
        return this.tcpTransitoryIdleTimeoutSec == null ? Input.empty() : this.tcpTransitoryIdleTimeoutSec;
    }

    @InputImport(name="udpIdleTimeoutSec")
    private final @Nullable Input<Integer> udpIdleTimeoutSec;

    public Input<Integer> getUdpIdleTimeoutSec() {
        return this.udpIdleTimeoutSec == null ? Input.empty() : this.udpIdleTimeoutSec;
    }

    public RouterNatState(
        @Nullable Input<List<String>> drainNatIps,
        @Nullable Input<Boolean> enableEndpointIndependentMapping,
        @Nullable Input<Integer> icmpIdleTimeoutSec,
        @Nullable Input<RouterNatLogConfigGetArgs> logConfig,
        @Nullable Input<Integer> minPortsPerVm,
        @Nullable Input<String> name,
        @Nullable Input<String> natIpAllocateOption,
        @Nullable Input<List<String>> natIps,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        @Nullable Input<String> router,
        @Nullable Input<String> sourceSubnetworkIpRangesToNat,
        @Nullable Input<List<RouterNatSubnetworkGetArgs>> subnetworks,
        @Nullable Input<Integer> tcpEstablishedIdleTimeoutSec,
        @Nullable Input<Integer> tcpTransitoryIdleTimeoutSec,
        @Nullable Input<Integer> udpIdleTimeoutSec) {
        this.drainNatIps = drainNatIps;
        this.enableEndpointIndependentMapping = enableEndpointIndependentMapping;
        this.icmpIdleTimeoutSec = icmpIdleTimeoutSec;
        this.logConfig = logConfig;
        this.minPortsPerVm = minPortsPerVm;
        this.name = name;
        this.natIpAllocateOption = natIpAllocateOption;
        this.natIps = natIps;
        this.project = project;
        this.region = region;
        this.router = router;
        this.sourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
        this.subnetworks = subnetworks;
        this.tcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
        this.tcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
        this.udpIdleTimeoutSec = udpIdleTimeoutSec;
    }

    private RouterNatState() {
        this.drainNatIps = Input.empty();
        this.enableEndpointIndependentMapping = Input.empty();
        this.icmpIdleTimeoutSec = Input.empty();
        this.logConfig = Input.empty();
        this.minPortsPerVm = Input.empty();
        this.name = Input.empty();
        this.natIpAllocateOption = Input.empty();
        this.natIps = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.router = Input.empty();
        this.sourceSubnetworkIpRangesToNat = Input.empty();
        this.subnetworks = Input.empty();
        this.tcpEstablishedIdleTimeoutSec = Input.empty();
        this.tcpTransitoryIdleTimeoutSec = Input.empty();
        this.udpIdleTimeoutSec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterNatState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> drainNatIps;
        private @Nullable Input<Boolean> enableEndpointIndependentMapping;
        private @Nullable Input<Integer> icmpIdleTimeoutSec;
        private @Nullable Input<RouterNatLogConfigGetArgs> logConfig;
        private @Nullable Input<Integer> minPortsPerVm;
        private @Nullable Input<String> name;
        private @Nullable Input<String> natIpAllocateOption;
        private @Nullable Input<List<String>> natIps;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private @Nullable Input<String> router;
        private @Nullable Input<String> sourceSubnetworkIpRangesToNat;
        private @Nullable Input<List<RouterNatSubnetworkGetArgs>> subnetworks;
        private @Nullable Input<Integer> tcpEstablishedIdleTimeoutSec;
        private @Nullable Input<Integer> tcpTransitoryIdleTimeoutSec;
        private @Nullable Input<Integer> udpIdleTimeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterNatState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.drainNatIps = defaults.drainNatIps;
    	      this.enableEndpointIndependentMapping = defaults.enableEndpointIndependentMapping;
    	      this.icmpIdleTimeoutSec = defaults.icmpIdleTimeoutSec;
    	      this.logConfig = defaults.logConfig;
    	      this.minPortsPerVm = defaults.minPortsPerVm;
    	      this.name = defaults.name;
    	      this.natIpAllocateOption = defaults.natIpAllocateOption;
    	      this.natIps = defaults.natIps;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
    	      this.sourceSubnetworkIpRangesToNat = defaults.sourceSubnetworkIpRangesToNat;
    	      this.subnetworks = defaults.subnetworks;
    	      this.tcpEstablishedIdleTimeoutSec = defaults.tcpEstablishedIdleTimeoutSec;
    	      this.tcpTransitoryIdleTimeoutSec = defaults.tcpTransitoryIdleTimeoutSec;
    	      this.udpIdleTimeoutSec = defaults.udpIdleTimeoutSec;
        }

        public Builder setDrainNatIps(@Nullable Input<List<String>> drainNatIps) {
            this.drainNatIps = drainNatIps;
            return this;
        }

        public Builder setDrainNatIps(@Nullable List<String> drainNatIps) {
            this.drainNatIps = Input.ofNullable(drainNatIps);
            return this;
        }

        public Builder setEnableEndpointIndependentMapping(@Nullable Input<Boolean> enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = enableEndpointIndependentMapping;
            return this;
        }

        public Builder setEnableEndpointIndependentMapping(@Nullable Boolean enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = Input.ofNullable(enableEndpointIndependentMapping);
            return this;
        }

        public Builder setIcmpIdleTimeoutSec(@Nullable Input<Integer> icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = icmpIdleTimeoutSec;
            return this;
        }

        public Builder setIcmpIdleTimeoutSec(@Nullable Integer icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = Input.ofNullable(icmpIdleTimeoutSec);
            return this;
        }

        public Builder setLogConfig(@Nullable Input<RouterNatLogConfigGetArgs> logConfig) {
            this.logConfig = logConfig;
            return this;
        }

        public Builder setLogConfig(@Nullable RouterNatLogConfigGetArgs logConfig) {
            this.logConfig = Input.ofNullable(logConfig);
            return this;
        }

        public Builder setMinPortsPerVm(@Nullable Input<Integer> minPortsPerVm) {
            this.minPortsPerVm = minPortsPerVm;
            return this;
        }

        public Builder setMinPortsPerVm(@Nullable Integer minPortsPerVm) {
            this.minPortsPerVm = Input.ofNullable(minPortsPerVm);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNatIpAllocateOption(@Nullable Input<String> natIpAllocateOption) {
            this.natIpAllocateOption = natIpAllocateOption;
            return this;
        }

        public Builder setNatIpAllocateOption(@Nullable String natIpAllocateOption) {
            this.natIpAllocateOption = Input.ofNullable(natIpAllocateOption);
            return this;
        }

        public Builder setNatIps(@Nullable Input<List<String>> natIps) {
            this.natIps = natIps;
            return this;
        }

        public Builder setNatIps(@Nullable List<String> natIps) {
            this.natIps = Input.ofNullable(natIps);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setRouter(@Nullable Input<String> router) {
            this.router = router;
            return this;
        }

        public Builder setRouter(@Nullable String router) {
            this.router = Input.ofNullable(router);
            return this;
        }

        public Builder setSourceSubnetworkIpRangesToNat(@Nullable Input<String> sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
            return this;
        }

        public Builder setSourceSubnetworkIpRangesToNat(@Nullable String sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = Input.ofNullable(sourceSubnetworkIpRangesToNat);
            return this;
        }

        public Builder setSubnetworks(@Nullable Input<List<RouterNatSubnetworkGetArgs>> subnetworks) {
            this.subnetworks = subnetworks;
            return this;
        }

        public Builder setSubnetworks(@Nullable List<RouterNatSubnetworkGetArgs> subnetworks) {
            this.subnetworks = Input.ofNullable(subnetworks);
            return this;
        }

        public Builder setTcpEstablishedIdleTimeoutSec(@Nullable Input<Integer> tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
            return this;
        }

        public Builder setTcpEstablishedIdleTimeoutSec(@Nullable Integer tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = Input.ofNullable(tcpEstablishedIdleTimeoutSec);
            return this;
        }

        public Builder setTcpTransitoryIdleTimeoutSec(@Nullable Input<Integer> tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
            return this;
        }

        public Builder setTcpTransitoryIdleTimeoutSec(@Nullable Integer tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = Input.ofNullable(tcpTransitoryIdleTimeoutSec);
            return this;
        }

        public Builder setUdpIdleTimeoutSec(@Nullable Input<Integer> udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = udpIdleTimeoutSec;
            return this;
        }

        public Builder setUdpIdleTimeoutSec(@Nullable Integer udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = Input.ofNullable(udpIdleTimeoutSec);
            return this;
        }

        public RouterNatState build() {
            return new RouterNatState(drainNatIps, enableEndpointIndependentMapping, icmpIdleTimeoutSec, logConfig, minPortsPerVm, name, natIpAllocateOption, natIps, project, region, router, sourceSubnetworkIpRangesToNat, subnetworks, tcpEstablishedIdleTimeoutSec, tcpTransitoryIdleTimeoutSec, udpIdleTimeoutSec);
        }
    }
}
