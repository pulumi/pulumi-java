// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.kms;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.kms.inputs.CryptoKeyIAMMemberConditionArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CryptoKeyIAMMemberArgs extends io.pulumi.resources.ResourceArgs {

    public static final CryptoKeyIAMMemberArgs Empty = new CryptoKeyIAMMemberArgs();

    /**
     * ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    @InputImport(name="condition")
      private final @Nullable Input<CryptoKeyIAMMemberConditionArgs> condition;

    public Input<CryptoKeyIAMMemberConditionArgs> getCondition() {
        return this.condition == null ? Input.empty() : this.condition;
    }

    /**
     * The crypto key ID, in the form
     * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
     * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
     * the provider's project setting will be used as a fallback.
     * 
     */
    @InputImport(name="cryptoKeyId", required=true)
      private final Input<String> cryptoKeyId;

    public Input<String> getCryptoKeyId() {
        return this.cryptoKeyId;
    }

    @InputImport(name="member", required=true)
      private final Input<String> member;

    public Input<String> getMember() {
        return this.member;
    }

    /**
     * The role that should be applied. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @InputImport(name="role", required=true)
      private final Input<String> role;

    public Input<String> getRole() {
        return this.role;
    }

    public CryptoKeyIAMMemberArgs(
        @Nullable Input<CryptoKeyIAMMemberConditionArgs> condition,
        Input<String> cryptoKeyId,
        Input<String> member,
        Input<String> role) {
        this.condition = condition;
        this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
        this.member = Objects.requireNonNull(member, "expected parameter 'member' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
    }

    private CryptoKeyIAMMemberArgs() {
        this.condition = Input.empty();
        this.cryptoKeyId = Input.empty();
        this.member = Input.empty();
        this.role = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyIAMMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<CryptoKeyIAMMemberConditionArgs> condition;
        private Input<String> cryptoKeyId;
        private Input<String> member;
        private Input<String> role;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyIAMMemberArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.cryptoKeyId = defaults.cryptoKeyId;
    	      this.member = defaults.member;
    	      this.role = defaults.role;
        }

        public Builder condition(@Nullable Input<CryptoKeyIAMMemberConditionArgs> condition) {
            this.condition = condition;
            return this;
        }

        public Builder condition(@Nullable CryptoKeyIAMMemberConditionArgs condition) {
            this.condition = Input.ofNullable(condition);
            return this;
        }

        public Builder cryptoKeyId(Input<String> cryptoKeyId) {
            this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId);
            return this;
        }

        public Builder cryptoKeyId(String cryptoKeyId) {
            this.cryptoKeyId = Input.of(Objects.requireNonNull(cryptoKeyId));
            return this;
        }

        public Builder member(Input<String> member) {
            this.member = Objects.requireNonNull(member);
            return this;
        }

        public Builder member(String member) {
            this.member = Input.of(Objects.requireNonNull(member));
            return this;
        }

        public Builder role(Input<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }

        public Builder role(String role) {
            this.role = Input.of(Objects.requireNonNull(role));
            return this;
        }
        public CryptoKeyIAMMemberArgs build() {
            return new CryptoKeyIAMMemberArgs(condition, cryptoKeyId, member, role);
        }
    }
}
