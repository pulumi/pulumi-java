// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.ServiceAttachmentArgs;
import io.pulumi.gcp.compute.inputs.ServiceAttachmentState;
import io.pulumi.gcp.compute.outputs.ServiceAttachmentConnectedEndpoint;
import io.pulumi.gcp.compute.outputs.ServiceAttachmentConsumerAcceptList;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Represents a ServiceAttachment resource.
 * 
 * 
 * To get more information about ServiceAttachment, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/beta/serviceAttachments)
 * * How-to Guides
 *     * [Configuring Private Service Connect to access services](https://cloud.google.com/vpc/docs/configure-private-service-connect-services)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Service Attachment Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const producerServiceHealthCheck = new gcp.compute.HealthCheck("producerServiceHealthCheck", {
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 *     tcpHealthCheck: {
 *         port: "80",
 *     },
 * });
 * const producerServiceBackend = new gcp.compute.RegionBackendService("producerServiceBackend", {
 *     region: "us-west2",
 *     healthChecks: [producerServiceHealthCheck.id],
 * });
 * const pscIlbNetwork = new gcp.compute.Network("pscIlbNetwork", {autoCreateSubnetworks: false});
 * const pscIlbProducerSubnetwork = new gcp.compute.Subnetwork("pscIlbProducerSubnetwork", {
 *     region: "us-west2",
 *     network: pscIlbNetwork.id,
 *     ipCidrRange: "10.0.0.0/16",
 * });
 * const pscIlbTargetService = new gcp.compute.ForwardingRule("pscIlbTargetService", {
 *     region: "us-west2",
 *     loadBalancingScheme: "INTERNAL",
 *     backendService: producerServiceBackend.id,
 *     allPorts: true,
 *     network: pscIlbNetwork.name,
 *     subnetwork: pscIlbProducerSubnetwork.name,
 * });
 * const pscIlbNat = new gcp.compute.Subnetwork("pscIlbNat", {
 *     region: "us-west2",
 *     network: pscIlbNetwork.id,
 *     purpose: "PRIVATE_SERVICE_CONNECT",
 *     ipCidrRange: "10.1.0.0/16",
 * });
 * const pscIlbServiceAttachment = new gcp.compute.ServiceAttachment("pscIlbServiceAttachment", {
 *     region: "us-west2",
 *     description: "A service attachment configured with Terraform",
 *     enableProxyProtocol: true,
 *     connectionPreference: "ACCEPT_AUTOMATIC",
 *     natSubnets: [pscIlbNat.id],
 *     targetService: pscIlbTargetService.id,
 * });
 * const pscIlbConsumerAddress = new gcp.compute.Address("pscIlbConsumerAddress", {
 *     region: "us-west2",
 *     subnetwork: "default",
 *     addressType: "INTERNAL",
 * });
 * const pscIlbConsumer = new gcp.compute.ForwardingRule("pscIlbConsumer", {
 *     region: "us-west2",
 *     target: pscIlbServiceAttachment.id,
 *     loadBalancingScheme: "",
 *     network: "default",
 *     ipAddress: pscIlbConsumerAddress.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * producer_service_health_check = gcp.compute.HealthCheck("producerServiceHealthCheck",
 *     check_interval_sec=1,
 *     timeout_sec=1,
 *     tcp_health_check=gcp.compute.HealthCheckTcpHealthCheckArgs(
 *         port=80,
 *     ))
 * producer_service_backend = gcp.compute.RegionBackendService("producerServiceBackend",
 *     region="us-west2",
 *     health_checks=[producer_service_health_check.id])
 * psc_ilb_network = gcp.compute.Network("pscIlbNetwork", auto_create_subnetworks=False)
 * psc_ilb_producer_subnetwork = gcp.compute.Subnetwork("pscIlbProducerSubnetwork",
 *     region="us-west2",
 *     network=psc_ilb_network.id,
 *     ip_cidr_range="10.0.0.0/16")
 * psc_ilb_target_service = gcp.compute.ForwardingRule("pscIlbTargetService",
 *     region="us-west2",
 *     load_balancing_scheme="INTERNAL",
 *     backend_service=producer_service_backend.id,
 *     all_ports=True,
 *     network=psc_ilb_network.name,
 *     subnetwork=psc_ilb_producer_subnetwork.name)
 * psc_ilb_nat = gcp.compute.Subnetwork("pscIlbNat",
 *     region="us-west2",
 *     network=psc_ilb_network.id,
 *     purpose="PRIVATE_SERVICE_CONNECT",
 *     ip_cidr_range="10.1.0.0/16")
 * psc_ilb_service_attachment = gcp.compute.ServiceAttachment("pscIlbServiceAttachment",
 *     region="us-west2",
 *     description="A service attachment configured with Terraform",
 *     enable_proxy_protocol=True,
 *     connection_preference="ACCEPT_AUTOMATIC",
 *     nat_subnets=[psc_ilb_nat.id],
 *     target_service=psc_ilb_target_service.id)
 * psc_ilb_consumer_address = gcp.compute.Address("pscIlbConsumerAddress",
 *     region="us-west2",
 *     subnetwork="default",
 *     address_type="INTERNAL")
 * psc_ilb_consumer = gcp.compute.ForwardingRule("pscIlbConsumer",
 *     region="us-west2",
 *     target=psc_ilb_service_attachment.id,
 *     load_balancing_scheme="",
 *     network="default",
 *     ip_address=psc_ilb_consumer_address.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var producerServiceHealthCheck = new Gcp.Compute.HealthCheck("producerServiceHealthCheck", new Gcp.Compute.HealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *             TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *         });
 *         var producerServiceBackend = new Gcp.Compute.RegionBackendService("producerServiceBackend", new Gcp.Compute.RegionBackendServiceArgs
 *         {
 *             Region = "us-west2",
 *             HealthChecks = 
 *             {
 *                 producerServiceHealthCheck.Id,
 *             },
 *         });
 *         var pscIlbNetwork = new Gcp.Compute.Network("pscIlbNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var pscIlbProducerSubnetwork = new Gcp.Compute.Subnetwork("pscIlbProducerSubnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             Region = "us-west2",
 *             Network = pscIlbNetwork.Id,
 *             IpCidrRange = "10.0.0.0/16",
 *         });
 *         var pscIlbTargetService = new Gcp.Compute.ForwardingRule("pscIlbTargetService", new Gcp.Compute.ForwardingRuleArgs
 *         {
 *             Region = "us-west2",
 *             LoadBalancingScheme = "INTERNAL",
 *             BackendService = producerServiceBackend.Id,
 *             AllPorts = true,
 *             Network = pscIlbNetwork.Name,
 *             Subnetwork = pscIlbProducerSubnetwork.Name,
 *         });
 *         var pscIlbNat = new Gcp.Compute.Subnetwork("pscIlbNat", new Gcp.Compute.SubnetworkArgs
 *         {
 *             Region = "us-west2",
 *             Network = pscIlbNetwork.Id,
 *             Purpose = "PRIVATE_SERVICE_CONNECT",
 *             IpCidrRange = "10.1.0.0/16",
 *         });
 *         var pscIlbServiceAttachment = new Gcp.Compute.ServiceAttachment("pscIlbServiceAttachment", new Gcp.Compute.ServiceAttachmentArgs
 *         {
 *             Region = "us-west2",
 *             Description = "A service attachment configured with Terraform",
 *             EnableProxyProtocol = true,
 *             ConnectionPreference = "ACCEPT_AUTOMATIC",
 *             NatSubnets = 
 *             {
 *                 pscIlbNat.Id,
 *             },
 *             TargetService = pscIlbTargetService.Id,
 *         });
 *         var pscIlbConsumerAddress = new Gcp.Compute.Address("pscIlbConsumerAddress", new Gcp.Compute.AddressArgs
 *         {
 *             Region = "us-west2",
 *             Subnetwork = "default",
 *             AddressType = "INTERNAL",
 *         });
 *         var pscIlbConsumer = new Gcp.Compute.ForwardingRule("pscIlbConsumer", new Gcp.Compute.ForwardingRuleArgs
 *         {
 *             Region = "us-west2",
 *             Target = pscIlbServiceAttachment.Id,
 *             LoadBalancingScheme = "",
 *             Network = "default",
 *             IpAddress = pscIlbConsumerAddress.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		producerServiceHealthCheck, err := compute.NewHealthCheck(ctx, "producerServiceHealthCheck", &compute.HealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		producerServiceBackend, err := compute.NewRegionBackendService(ctx, "producerServiceBackend", &compute.RegionBackendServiceArgs{
 * 			Region: pulumi.String("us-west2"),
 * 			HealthChecks: pulumi.String{
 * 				producerServiceHealthCheck.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbNetwork, err := compute.NewNetwork(ctx, "pscIlbNetwork", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbProducerSubnetwork, err := compute.NewSubnetwork(ctx, "pscIlbProducerSubnetwork", &compute.SubnetworkArgs{
 * 			Region:      pulumi.String("us-west2"),
 * 			Network:     pscIlbNetwork.ID(),
 * 			IpCidrRange: pulumi.String("10.0.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbTargetService, err := compute.NewForwardingRule(ctx, "pscIlbTargetService", &compute.ForwardingRuleArgs{
 * 			Region:              pulumi.String("us-west2"),
 * 			LoadBalancingScheme: pulumi.String("INTERNAL"),
 * 			BackendService:      producerServiceBackend.ID(),
 * 			AllPorts:            pulumi.Bool(true),
 * 			Network:             pscIlbNetwork.Name,
 * 			Subnetwork:          pscIlbProducerSubnetwork.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbNat, err := compute.NewSubnetwork(ctx, "pscIlbNat", &compute.SubnetworkArgs{
 * 			Region:      pulumi.String("us-west2"),
 * 			Network:     pscIlbNetwork.ID(),
 * 			Purpose:     pulumi.String("PRIVATE_SERVICE_CONNECT"),
 * 			IpCidrRange: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbServiceAttachment, err := compute.NewServiceAttachment(ctx, "pscIlbServiceAttachment", &compute.ServiceAttachmentArgs{
 * 			Region:               pulumi.String("us-west2"),
 * 			Description:          pulumi.String("A service attachment configured with Terraform"),
 * 			EnableProxyProtocol:  pulumi.Bool(true),
 * 			ConnectionPreference: pulumi.String("ACCEPT_AUTOMATIC"),
 * 			NatSubnets: pulumi.StringArray{
 * 				pscIlbNat.ID(),
 * 			},
 * 			TargetService: pscIlbTargetService.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbConsumerAddress, err := compute.NewAddress(ctx, "pscIlbConsumerAddress", &compute.AddressArgs{
 * 			Region:      pulumi.String("us-west2"),
 * 			Subnetwork:  pulumi.String("default"),
 * 			AddressType: pulumi.String("INTERNAL"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewForwardingRule(ctx, "pscIlbConsumer", &compute.ForwardingRuleArgs{
 * 			Region:              pulumi.String("us-west2"),
 * 			Target:              pscIlbServiceAttachment.ID(),
 * 			LoadBalancingScheme: pulumi.String(""),
 * 			Network:             pulumi.String("default"),
 * 			IpAddress:           pscIlbConsumerAddress.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Service Attachment Explicit Projects
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const producerServiceHealthCheck = new gcp.compute.HealthCheck("producerServiceHealthCheck", {
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 *     tcpHealthCheck: {
 *         port: "80",
 *     },
 * });
 * const producerServiceBackend = new gcp.compute.RegionBackendService("producerServiceBackend", {
 *     region: "us-west2",
 *     healthChecks: [producerServiceHealthCheck.id],
 * });
 * const pscIlbNetwork = new gcp.compute.Network("pscIlbNetwork", {autoCreateSubnetworks: false});
 * const pscIlbProducerSubnetwork = new gcp.compute.Subnetwork("pscIlbProducerSubnetwork", {
 *     region: "us-west2",
 *     network: pscIlbNetwork.id,
 *     ipCidrRange: "10.0.0.0/16",
 * });
 * const pscIlbTargetService = new gcp.compute.ForwardingRule("pscIlbTargetService", {
 *     region: "us-west2",
 *     loadBalancingScheme: "INTERNAL",
 *     backendService: producerServiceBackend.id,
 *     allPorts: true,
 *     network: pscIlbNetwork.name,
 *     subnetwork: pscIlbProducerSubnetwork.name,
 * });
 * const pscIlbNat = new gcp.compute.Subnetwork("pscIlbNat", {
 *     region: "us-west2",
 *     network: pscIlbNetwork.id,
 *     purpose: "PRIVATE_SERVICE_CONNECT",
 *     ipCidrRange: "10.1.0.0/16",
 * });
 * const pscIlbServiceAttachment = new gcp.compute.ServiceAttachment("pscIlbServiceAttachment", {
 *     region: "us-west2",
 *     description: "A service attachment configured with Terraform",
 *     enableProxyProtocol: true,
 *     connectionPreference: "ACCEPT_MANUAL",
 *     natSubnets: [pscIlbNat.id],
 *     targetService: pscIlbTargetService.id,
 *     consumerRejectLists: [
 *         "673497134629",
 *         "482878270665",
 *     ],
 *     consumerAcceptLists: [{
 *         projectIdOrNum: "658859330310",
 *         connectionLimit: 4,
 *     }],
 * });
 * const pscIlbConsumerAddress = new gcp.compute.Address("pscIlbConsumerAddress", {
 *     region: "us-west2",
 *     subnetwork: "default",
 *     addressType: "INTERNAL",
 *     address: "10.168.1.17",
 * });
 * const pscIlbConsumer = new gcp.compute.ForwardingRule("pscIlbConsumer", {
 *     region: "us-west2",
 *     target: pscIlbServiceAttachment.id,
 *     loadBalancingScheme: "",
 *     network: "default",
 *     ipAddress: pscIlbConsumerAddress.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * producer_service_health_check = gcp.compute.HealthCheck("producerServiceHealthCheck",
 *     check_interval_sec=1,
 *     timeout_sec=1,
 *     tcp_health_check=gcp.compute.HealthCheckTcpHealthCheckArgs(
 *         port=80,
 *     ))
 * producer_service_backend = gcp.compute.RegionBackendService("producerServiceBackend",
 *     region="us-west2",
 *     health_checks=[producer_service_health_check.id])
 * psc_ilb_network = gcp.compute.Network("pscIlbNetwork", auto_create_subnetworks=False)
 * psc_ilb_producer_subnetwork = gcp.compute.Subnetwork("pscIlbProducerSubnetwork",
 *     region="us-west2",
 *     network=psc_ilb_network.id,
 *     ip_cidr_range="10.0.0.0/16")
 * psc_ilb_target_service = gcp.compute.ForwardingRule("pscIlbTargetService",
 *     region="us-west2",
 *     load_balancing_scheme="INTERNAL",
 *     backend_service=producer_service_backend.id,
 *     all_ports=True,
 *     network=psc_ilb_network.name,
 *     subnetwork=psc_ilb_producer_subnetwork.name)
 * psc_ilb_nat = gcp.compute.Subnetwork("pscIlbNat",
 *     region="us-west2",
 *     network=psc_ilb_network.id,
 *     purpose="PRIVATE_SERVICE_CONNECT",
 *     ip_cidr_range="10.1.0.0/16")
 * psc_ilb_service_attachment = gcp.compute.ServiceAttachment("pscIlbServiceAttachment",
 *     region="us-west2",
 *     description="A service attachment configured with Terraform",
 *     enable_proxy_protocol=True,
 *     connection_preference="ACCEPT_MANUAL",
 *     nat_subnets=[psc_ilb_nat.id],
 *     target_service=psc_ilb_target_service.id,
 *     consumer_reject_lists=[
 *         "673497134629",
 *         "482878270665",
 *     ],
 *     consumer_accept_lists=[gcp.compute.ServiceAttachmentConsumerAcceptListArgs(
 *         project_id_or_num="658859330310",
 *         connection_limit=4,
 *     )])
 * psc_ilb_consumer_address = gcp.compute.Address("pscIlbConsumerAddress",
 *     region="us-west2",
 *     subnetwork="default",
 *     address_type="INTERNAL",
 *     address="10.168.1.17")
 * psc_ilb_consumer = gcp.compute.ForwardingRule("pscIlbConsumer",
 *     region="us-west2",
 *     target=psc_ilb_service_attachment.id,
 *     load_balancing_scheme="",
 *     network="default",
 *     ip_address=psc_ilb_consumer_address.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var producerServiceHealthCheck = new Gcp.Compute.HealthCheck("producerServiceHealthCheck", new Gcp.Compute.HealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *             TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *         });
 *         var producerServiceBackend = new Gcp.Compute.RegionBackendService("producerServiceBackend", new Gcp.Compute.RegionBackendServiceArgs
 *         {
 *             Region = "us-west2",
 *             HealthChecks = 
 *             {
 *                 producerServiceHealthCheck.Id,
 *             },
 *         });
 *         var pscIlbNetwork = new Gcp.Compute.Network("pscIlbNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var pscIlbProducerSubnetwork = new Gcp.Compute.Subnetwork("pscIlbProducerSubnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             Region = "us-west2",
 *             Network = pscIlbNetwork.Id,
 *             IpCidrRange = "10.0.0.0/16",
 *         });
 *         var pscIlbTargetService = new Gcp.Compute.ForwardingRule("pscIlbTargetService", new Gcp.Compute.ForwardingRuleArgs
 *         {
 *             Region = "us-west2",
 *             LoadBalancingScheme = "INTERNAL",
 *             BackendService = producerServiceBackend.Id,
 *             AllPorts = true,
 *             Network = pscIlbNetwork.Name,
 *             Subnetwork = pscIlbProducerSubnetwork.Name,
 *         });
 *         var pscIlbNat = new Gcp.Compute.Subnetwork("pscIlbNat", new Gcp.Compute.SubnetworkArgs
 *         {
 *             Region = "us-west2",
 *             Network = pscIlbNetwork.Id,
 *             Purpose = "PRIVATE_SERVICE_CONNECT",
 *             IpCidrRange = "10.1.0.0/16",
 *         });
 *         var pscIlbServiceAttachment = new Gcp.Compute.ServiceAttachment("pscIlbServiceAttachment", new Gcp.Compute.ServiceAttachmentArgs
 *         {
 *             Region = "us-west2",
 *             Description = "A service attachment configured with Terraform",
 *             EnableProxyProtocol = true,
 *             ConnectionPreference = "ACCEPT_MANUAL",
 *             NatSubnets = 
 *             {
 *                 pscIlbNat.Id,
 *             },
 *             TargetService = pscIlbTargetService.Id,
 *             ConsumerRejectLists = 
 *             {
 *                 "673497134629",
 *                 "482878270665",
 *             },
 *             ConsumerAcceptLists = 
 *             {
 *                 new Gcp.Compute.Inputs.ServiceAttachmentConsumerAcceptListArgs
 *                 {
 *                     ProjectIdOrNum = "658859330310",
 *                     ConnectionLimit = 4,
 *                 },
 *             },
 *         });
 *         var pscIlbConsumerAddress = new Gcp.Compute.Address("pscIlbConsumerAddress", new Gcp.Compute.AddressArgs
 *         {
 *             Region = "us-west2",
 *             Subnetwork = "default",
 *             AddressType = "INTERNAL",
 *             Address = "10.168.1.17",
 *         });
 *         var pscIlbConsumer = new Gcp.Compute.ForwardingRule("pscIlbConsumer", new Gcp.Compute.ForwardingRuleArgs
 *         {
 *             Region = "us-west2",
 *             Target = pscIlbServiceAttachment.Id,
 *             LoadBalancingScheme = "",
 *             Network = "default",
 *             IpAddress = pscIlbConsumerAddress.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		producerServiceHealthCheck, err := compute.NewHealthCheck(ctx, "producerServiceHealthCheck", &compute.HealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		producerServiceBackend, err := compute.NewRegionBackendService(ctx, "producerServiceBackend", &compute.RegionBackendServiceArgs{
 * 			Region: pulumi.String("us-west2"),
 * 			HealthChecks: pulumi.String{
 * 				producerServiceHealthCheck.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbNetwork, err := compute.NewNetwork(ctx, "pscIlbNetwork", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbProducerSubnetwork, err := compute.NewSubnetwork(ctx, "pscIlbProducerSubnetwork", &compute.SubnetworkArgs{
 * 			Region:      pulumi.String("us-west2"),
 * 			Network:     pscIlbNetwork.ID(),
 * 			IpCidrRange: pulumi.String("10.0.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbTargetService, err := compute.NewForwardingRule(ctx, "pscIlbTargetService", &compute.ForwardingRuleArgs{
 * 			Region:              pulumi.String("us-west2"),
 * 			LoadBalancingScheme: pulumi.String("INTERNAL"),
 * 			BackendService:      producerServiceBackend.ID(),
 * 			AllPorts:            pulumi.Bool(true),
 * 			Network:             pscIlbNetwork.Name,
 * 			Subnetwork:          pscIlbProducerSubnetwork.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbNat, err := compute.NewSubnetwork(ctx, "pscIlbNat", &compute.SubnetworkArgs{
 * 			Region:      pulumi.String("us-west2"),
 * 			Network:     pscIlbNetwork.ID(),
 * 			Purpose:     pulumi.String("PRIVATE_SERVICE_CONNECT"),
 * 			IpCidrRange: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbServiceAttachment, err := compute.NewServiceAttachment(ctx, "pscIlbServiceAttachment", &compute.ServiceAttachmentArgs{
 * 			Region:               pulumi.String("us-west2"),
 * 			Description:          pulumi.String("A service attachment configured with Terraform"),
 * 			EnableProxyProtocol:  pulumi.Bool(true),
 * 			ConnectionPreference: pulumi.String("ACCEPT_MANUAL"),
 * 			NatSubnets: pulumi.StringArray{
 * 				pscIlbNat.ID(),
 * 			},
 * 			TargetService: pscIlbTargetService.ID(),
 * 			ConsumerRejectLists: pulumi.StringArray{
 * 				pulumi.String("673497134629"),
 * 				pulumi.String("482878270665"),
 * 			},
 * 			ConsumerAcceptLists: compute.ServiceAttachmentConsumerAcceptListArray{
 * 				&compute.ServiceAttachmentConsumerAcceptListArgs{
 * 					ProjectIdOrNum:  pulumi.String("658859330310"),
 * 					ConnectionLimit: pulumi.Int(4),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pscIlbConsumerAddress, err := compute.NewAddress(ctx, "pscIlbConsumerAddress", &compute.AddressArgs{
 * 			Region:      pulumi.String("us-west2"),
 * 			Subnetwork:  pulumi.String("default"),
 * 			AddressType: pulumi.String("INTERNAL"),
 * 			Address:     pulumi.String("10.168.1.17"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewForwardingRule(ctx, "pscIlbConsumer", &compute.ForwardingRuleArgs{
 * 			Region:              pulumi.String("us-west2"),
 * 			Target:              pscIlbServiceAttachment.ID(),
 * 			LoadBalancingScheme: pulumi.String(""),
 * 			Network:             pulumi.String("default"),
 * 			IpAddress:           pscIlbConsumerAddress.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ServiceAttachment can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default projects/{{project}}/regions/{{region}}/serviceAttachments/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/serviceAttachment:ServiceAttachment default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/serviceAttachment:ServiceAttachment")
public class ServiceAttachment extends io.pulumi.resources.CustomResource {
    /**
     * An array of the consumer forwarding rules connected to this service attachment.
     * 
     */
    @Export(name="connectedEndpoints", type=List.class, parameters={ServiceAttachmentConnectedEndpoint.class})
    private Output<List<ServiceAttachmentConnectedEndpoint>> connectedEndpoints;

    /**
     * @return An array of the consumer forwarding rules connected to this service attachment.
     * 
     */
    public Output<List<ServiceAttachmentConnectedEndpoint>> getConnectedEndpoints() {
        return this.connectedEndpoints;
    }
    /**
     * The connection preference to use for this service attachment. Valid
     * values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
     * 
     */
    @Export(name="connectionPreference", type=String.class, parameters={})
    private Output<String> connectionPreference;

    /**
     * @return The connection preference to use for this service attachment. Valid
     * values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
     * 
     */
    public Output<String> getConnectionPreference() {
        return this.connectionPreference;
    }
    /**
     * An array of projects that are allowed to connect to this service
     * attachment.
     * Structure is documented below.
     * 
     */
    @Export(name="consumerAcceptLists", type=List.class, parameters={ServiceAttachmentConsumerAcceptList.class})
    private Output</* @Nullable */ List<ServiceAttachmentConsumerAcceptList>> consumerAcceptLists;

    /**
     * @return An array of projects that are allowed to connect to this service
     * attachment.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<ServiceAttachmentConsumerAcceptList>> getConsumerAcceptLists() {
        return this.consumerAcceptLists;
    }
    /**
     * An array of projects that are not allowed to connect to this service
     * attachment.
     * 
     */
    @Export(name="consumerRejectLists", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> consumerRejectLists;

    /**
     * @return An array of projects that are not allowed to connect to this service
     * attachment.
     * 
     */
    public Output</* @Nullable */ List<String>> getConsumerRejectLists() {
        return this.consumerRejectLists;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * If true, enable the proxy protocol which is for supplying client TCP/IP
     * address data in TCP connections that traverse proxies on their way to
     * destination servers.
     * 
     */
    @Export(name="enableProxyProtocol", type=Boolean.class, parameters={})
    private Output<Boolean> enableProxyProtocol;

    /**
     * @return If true, enable the proxy protocol which is for supplying client TCP/IP
     * address data in TCP connections that traverse proxies on their way to
     * destination servers.
     * 
     */
    public Output<Boolean> getEnableProxyProtocol() {
        return this.enableProxyProtocol;
    }
    /**
     * Fingerprint of this resource. This field is used internally during updates of this resource.
     * 
     */
    @Export(name="fingerprint", type=String.class, parameters={})
    private Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. This field is used internally during updates of this resource.
     * 
     */
    public Output<String> getFingerprint() {
        return this.fingerprint;
    }
    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * An array of subnets that is provided for NAT in this service attachment.
     * 
     */
    @Export(name="natSubnets", type=List.class, parameters={String.class})
    private Output<List<String>> natSubnets;

    /**
     * @return An array of subnets that is provided for NAT in this service attachment.
     * 
     */
    public Output<List<String>> getNatSubnets() {
        return this.natSubnets;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * URL of the region where the resource resides.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return URL of the region where the resource resides.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * The URL of a forwarding rule that represents the service identified by
     * this service attachment.
     * 
     */
    @Export(name="targetService", type=String.class, parameters={})
    private Output<String> targetService;

    /**
     * @return The URL of a forwarding rule that represents the service identified by
     * this service attachment.
     * 
     */
    public Output<String> getTargetService() {
        return this.targetService;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceAttachment(String name) {
        this(name, ServiceAttachmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceAttachment(String name, ServiceAttachmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceAttachment(String name, ServiceAttachmentArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/serviceAttachment:ServiceAttachment", name, args == null ? ServiceAttachmentArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ServiceAttachment(String name, Output<String> id, @Nullable ServiceAttachmentState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/serviceAttachment:ServiceAttachment", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceAttachment get(String name, Output<String> id, @Nullable ServiceAttachmentState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ServiceAttachment(name, id, state, options);
    }
}
