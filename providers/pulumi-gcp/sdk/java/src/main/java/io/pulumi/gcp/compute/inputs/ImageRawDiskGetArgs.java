// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImageRawDiskGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageRawDiskGetArgs Empty = new ImageRawDiskGetArgs();

    /**
     * The format used to encode and transmit the block device, which
     * should be TAR. This is just a container and transmission format
     * and not a runtime format. Provided by the client when the disk
     * image is created.
     * Default value is `TAR`.
     * Possible values are `TAR`.
     * 
     */
    @InputImport(name="containerType")
      private final @Nullable Input<String> containerType;

    public Input<String> getContainerType() {
        return this.containerType == null ? Input.empty() : this.containerType;
    }

    /**
     * An optional SHA1 checksum of the disk image before unpackaging.
     * This is provided by the client when the disk image is created.
     * 
     */
    @InputImport(name="sha1")
      private final @Nullable Input<String> sha1;

    public Input<String> getSha1() {
        return this.sha1 == null ? Input.empty() : this.sha1;
    }

    /**
     * The full Google Cloud Storage URL where disk storage is stored
     * You must provide either this property or the sourceDisk property
     * but not both.
     * 
     */
    @InputImport(name="source", required=true)
      private final Input<String> source;

    public Input<String> getSource() {
        return this.source;
    }

    public ImageRawDiskGetArgs(
        @Nullable Input<String> containerType,
        @Nullable Input<String> sha1,
        Input<String> source) {
        this.containerType = containerType;
        this.sha1 = sha1;
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
    }

    private ImageRawDiskGetArgs() {
        this.containerType = Input.empty();
        this.sha1 = Input.empty();
        this.source = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageRawDiskGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> containerType;
        private @Nullable Input<String> sha1;
        private Input<String> source;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageRawDiskGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerType = defaults.containerType;
    	      this.sha1 = defaults.sha1;
    	      this.source = defaults.source;
        }

        public Builder setContainerType(@Nullable Input<String> containerType) {
            this.containerType = containerType;
            return this;
        }

        public Builder setContainerType(@Nullable String containerType) {
            this.containerType = Input.ofNullable(containerType);
            return this;
        }

        public Builder setSha1(@Nullable Input<String> sha1) {
            this.sha1 = sha1;
            return this;
        }

        public Builder setSha1(@Nullable String sha1) {
            this.sha1 = Input.ofNullable(sha1);
            return this;
        }

        public Builder setSource(Input<String> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder setSource(String source) {
            this.source = Input.of(Objects.requireNonNull(source));
            return this;
        }
        public ImageRawDiskGetArgs build() {
            return new ImageRawDiskGetArgs(containerType, sha1, source);
        }
    }
}
