// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DatabaseInstanceReplicaConfiguration {
    private final @Nullable String caCertificate;
    private final @Nullable String clientCertificate;
    private final @Nullable String clientKey;
    private final @Nullable Integer connectRetryInterval;
    private final @Nullable String dumpFilePath;
    private final @Nullable Boolean failoverTarget;
    private final @Nullable Integer masterHeartbeatPeriod;
    private final @Nullable String password;
    private final @Nullable String sslCipher;
    private final @Nullable String username;
    private final @Nullable Boolean verifyServerCertificate;

    @OutputCustomType.Constructor({"caCertificate","clientCertificate","clientKey","connectRetryInterval","dumpFilePath","failoverTarget","masterHeartbeatPeriod","password","sslCipher","username","verifyServerCertificate"})
    private DatabaseInstanceReplicaConfiguration(
        @Nullable String caCertificate,
        @Nullable String clientCertificate,
        @Nullable String clientKey,
        @Nullable Integer connectRetryInterval,
        @Nullable String dumpFilePath,
        @Nullable Boolean failoverTarget,
        @Nullable Integer masterHeartbeatPeriod,
        @Nullable String password,
        @Nullable String sslCipher,
        @Nullable String username,
        @Nullable Boolean verifyServerCertificate) {
        this.caCertificate = caCertificate;
        this.clientCertificate = clientCertificate;
        this.clientKey = clientKey;
        this.connectRetryInterval = connectRetryInterval;
        this.dumpFilePath = dumpFilePath;
        this.failoverTarget = failoverTarget;
        this.masterHeartbeatPeriod = masterHeartbeatPeriod;
        this.password = password;
        this.sslCipher = sslCipher;
        this.username = username;
        this.verifyServerCertificate = verifyServerCertificate;
    }

    public Optional<String> getCaCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }
    public Optional<String> getClientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }
    public Optional<String> getClientKey() {
        return Optional.ofNullable(this.clientKey);
    }
    public Optional<Integer> getConnectRetryInterval() {
        return Optional.ofNullable(this.connectRetryInterval);
    }
    public Optional<String> getDumpFilePath() {
        return Optional.ofNullable(this.dumpFilePath);
    }
    public Optional<Boolean> getFailoverTarget() {
        return Optional.ofNullable(this.failoverTarget);
    }
    public Optional<Integer> getMasterHeartbeatPeriod() {
        return Optional.ofNullable(this.masterHeartbeatPeriod);
    }
    public Optional<String> getPassword() {
        return Optional.ofNullable(this.password);
    }
    public Optional<String> getSslCipher() {
        return Optional.ofNullable(this.sslCipher);
    }
    public Optional<String> getUsername() {
        return Optional.ofNullable(this.username);
    }
    public Optional<Boolean> getVerifyServerCertificate() {
        return Optional.ofNullable(this.verifyServerCertificate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceReplicaConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String caCertificate;
        private @Nullable String clientCertificate;
        private @Nullable String clientKey;
        private @Nullable Integer connectRetryInterval;
        private @Nullable String dumpFilePath;
        private @Nullable Boolean failoverTarget;
        private @Nullable Integer masterHeartbeatPeriod;
        private @Nullable String password;
        private @Nullable String sslCipher;
        private @Nullable String username;
        private @Nullable Boolean verifyServerCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceReplicaConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        public Builder setCaCertificate(@Nullable String caCertificate) {
            this.caCertificate = caCertificate;
            return this;
        }

        public Builder setClientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        public Builder setClientKey(@Nullable String clientKey) {
            this.clientKey = clientKey;
            return this;
        }

        public Builder setConnectRetryInterval(@Nullable Integer connectRetryInterval) {
            this.connectRetryInterval = connectRetryInterval;
            return this;
        }

        public Builder setDumpFilePath(@Nullable String dumpFilePath) {
            this.dumpFilePath = dumpFilePath;
            return this;
        }

        public Builder setFailoverTarget(@Nullable Boolean failoverTarget) {
            this.failoverTarget = failoverTarget;
            return this;
        }

        public Builder setMasterHeartbeatPeriod(@Nullable Integer masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = masterHeartbeatPeriod;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = password;
            return this;
        }

        public Builder setSslCipher(@Nullable String sslCipher) {
            this.sslCipher = sslCipher;
            return this;
        }

        public Builder setUsername(@Nullable String username) {
            this.username = username;
            return this;
        }

        public Builder setVerifyServerCertificate(@Nullable Boolean verifyServerCertificate) {
            this.verifyServerCertificate = verifyServerCertificate;
            return this;
        }

        public DatabaseInstanceReplicaConfiguration build() {
            return new DatabaseInstanceReplicaConfiguration(caCertificate, clientCertificate, clientKey, connectRetryInterval, dumpFilePath, failoverTarget, masterHeartbeatPeriod, password, sslCipher, username, verifyServerCertificate);
        }
    }
}
