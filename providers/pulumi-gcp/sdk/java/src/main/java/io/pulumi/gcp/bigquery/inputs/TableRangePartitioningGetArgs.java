// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.TableRangePartitioningRangeGetArgs;
import java.lang.String;
import java.util.Objects;


public final class TableRangePartitioningGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableRangePartitioningGetArgs Empty = new TableRangePartitioningGetArgs();

    /**
     * The field used to determine how to create a range-based
     * partition.
     * 
     */
    @InputImport(name="field", required=true)
    private final Input<String> field;

    public Input<String> getField() {
        return this.field;
    }

    /**
     * Information required to partition based on ranges.
     * Structure is documented below.
     * 
     */
    @InputImport(name="range", required=true)
    private final Input<TableRangePartitioningRangeGetArgs> range;

    public Input<TableRangePartitioningRangeGetArgs> getRange() {
        return this.range;
    }

    public TableRangePartitioningGetArgs(
        Input<String> field,
        Input<TableRangePartitioningRangeGetArgs> range) {
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.range = Objects.requireNonNull(range, "expected parameter 'range' to be non-null");
    }

    private TableRangePartitioningGetArgs() {
        this.field = Input.empty();
        this.range = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableRangePartitioningGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> field;
        private Input<TableRangePartitioningRangeGetArgs> range;

        public Builder() {
    	      // Empty
        }

        public Builder(TableRangePartitioningGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.field = defaults.field;
    	      this.range = defaults.range;
        }

        public Builder setField(Input<String> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }

        public Builder setField(String field) {
            this.field = Input.of(Objects.requireNonNull(field));
            return this;
        }

        public Builder setRange(Input<TableRangePartitioningRangeGetArgs> range) {
            this.range = Objects.requireNonNull(range);
            return this;
        }

        public Builder setRange(TableRangePartitioningRangeGetArgs range) {
            this.range = Input.of(Objects.requireNonNull(range));
            return this;
        }

        public TableRangePartitioningGetArgs build() {
            return new TableRangePartitioningGetArgs(field, range);
        }
    }
}
