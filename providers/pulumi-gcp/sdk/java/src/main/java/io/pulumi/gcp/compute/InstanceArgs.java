// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.compute.inputs.InstanceAdvancedMachineFeaturesArgs;
import io.pulumi.gcp.compute.inputs.InstanceAttachedDiskArgs;
import io.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
import io.pulumi.gcp.compute.inputs.InstanceConfidentialInstanceConfigArgs;
import io.pulumi.gcp.compute.inputs.InstanceGuestAcceleratorArgs;
import io.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
import io.pulumi.gcp.compute.inputs.InstanceNetworkPerformanceConfigArgs;
import io.pulumi.gcp.compute.inputs.InstanceReservationAffinityArgs;
import io.pulumi.gcp.compute.inputs.InstanceSchedulingArgs;
import io.pulumi.gcp.compute.inputs.InstanceScratchDiskArgs;
import io.pulumi.gcp.compute.inputs.InstanceServiceAccountArgs;
import io.pulumi.gcp.compute.inputs.InstanceShieldedInstanceConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Configure Nested Virtualisation and Simultaneous Hyper Threading  on this VM. Structure is documented below
     * 
     */
    @Import(name="advancedMachineFeatures")
      private final @Nullable Output<InstanceAdvancedMachineFeaturesArgs> advancedMachineFeatures;

    public Output<InstanceAdvancedMachineFeaturesArgs> getAdvancedMachineFeatures() {
        return this.advancedMachineFeatures == null ? Output.empty() : this.advancedMachineFeatures;
    }

    /**
     * If true, allows this prvider to stop the instance to update its properties.
     * If you try to update a property that requires stopping the instance without setting this field, the update will fail.
     * 
     */
    @Import(name="allowStoppingForUpdate")
      private final @Nullable Output<Boolean> allowStoppingForUpdate;

    public Output<Boolean> getAllowStoppingForUpdate() {
        return this.allowStoppingForUpdate == null ? Output.empty() : this.allowStoppingForUpdate;
    }

    /**
     * Additional disks to attach to the instance. Can be repeated multiple times for multiple disks. Structure is documented below.
     * 
     */
    @Import(name="attachedDisks")
      private final @Nullable Output<List<InstanceAttachedDiskArgs>> attachedDisks;

    public Output<List<InstanceAttachedDiskArgs>> getAttachedDisks() {
        return this.attachedDisks == null ? Output.empty() : this.attachedDisks;
    }

    /**
     * The boot disk for the instance.
     * Structure is documented below.
     * 
     */
    @Import(name="bootDisk", required=true)
      private final Output<InstanceBootDiskArgs> bootDisk;

    public Output<InstanceBootDiskArgs> getBootDisk() {
        return this.bootDisk;
    }

    /**
     * Whether to allow sending and receiving of
     * packets with non-matching source or destination IPs.
     * This defaults to false.
     * 
     */
    @Import(name="canIpForward")
      private final @Nullable Output<Boolean> canIpForward;

    public Output<Boolean> getCanIpForward() {
        return this.canIpForward == null ? Output.empty() : this.canIpForward;
    }

    /**
     * Enable [Confidential Mode](https://cloud.google.com/compute/confidential-vm/docs/about-cvm) on this VM. Structure is documented below
     * 
     */
    @Import(name="confidentialInstanceConfig")
      private final @Nullable Output<InstanceConfidentialInstanceConfigArgs> confidentialInstanceConfig;

    public Output<InstanceConfidentialInstanceConfigArgs> getConfidentialInstanceConfig() {
        return this.confidentialInstanceConfig == null ? Output.empty() : this.confidentialInstanceConfig;
    }

    /**
     * Enable deletion protection on this instance. Defaults to false.
     * **Note:** you must disable deletion protection before removing the resource (e.g., via `pulumi destroy`), or the instance cannot be deleted and the provider run will not complete successfully.
     * 
     */
    @Import(name="deletionProtection")
      private final @Nullable Output<Boolean> deletionProtection;

    public Output<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Output.empty() : this.deletionProtection;
    }

    /**
     * A brief description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Desired status of the instance. Either
     * `"RUNNING"` or `"TERMINATED"`.
     * 
     */
    @Import(name="desiredStatus")
      private final @Nullable Output<String> desiredStatus;

    public Output<String> getDesiredStatus() {
        return this.desiredStatus == null ? Output.empty() : this.desiredStatus;
    }

    /**
     * Enable [Virtual Displays](https://cloud.google.com/compute/docs/instances/enable-instance-virtual-display#verify_display_driver) on this instance.
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @Import(name="enableDisplay")
      private final @Nullable Output<Boolean> enableDisplay;

    public Output<Boolean> getEnableDisplay() {
        return this.enableDisplay == null ? Output.empty() : this.enableDisplay;
    }

    /**
     * List of the type and count of accelerator cards attached to the instance. Structure documented below.
     * **Note:** GPU accelerators can only be used with `on_host_maintenance` option set to TERMINATE.
     * 
     */
    @Import(name="guestAccelerators")
      private final @Nullable Output<List<InstanceGuestAcceleratorArgs>> guestAccelerators;

    public Output<List<InstanceGuestAcceleratorArgs>> getGuestAccelerators() {
        return this.guestAccelerators == null ? Output.empty() : this.guestAccelerators;
    }

    /**
     * A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid.
     * Valid format is a series of labels 1-63 characters long matching the regular expression `a-z`, concatenated with periods.
     * The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname == null ? Output.empty() : this.hostname;
    }

    /**
     * A map of key/value label pairs to assign to the instance.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The machine type to create.
     * 
     */
    @Import(name="machineType", required=true)
      private final Output<String> machineType;

    public Output<String> getMachineType() {
        return this.machineType;
    }

    /**
     * Metadata key/value pairs to make available from
     * within the instance. Ssh keys attached in the Cloud Console will be removed.
     * Add them to your config in order to keep them attached to your instance.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> getMetadata() {
        return this.metadata == null ? Output.empty() : this.metadata;
    }

    /**
     * An alternative to using the
     * startup-script metadata key, except this one forces the instance to be recreated
     * (thus re-running the script) if it is changed. This replaces the startup-script
     * metadata key on the created instance and thus the two mechanisms are not
     * allowed to be used simultaneously.  Users are free to use either mechanism - the
     * only distinction is that this separate attribute will cause a recreate on
     * modification.  On import, `metadata_startup_script` will not be set - if you
     * choose to specify it you will see a diff immediately after import causing a
     * destroy/recreate operation. If importing an instance and specifying this value
     * is desired, you will need to modify your state file.
     * 
     */
    @Import(name="metadataStartupScript")
      private final @Nullable Output<String> metadataStartupScript;

    public Output<String> getMetadataStartupScript() {
        return this.metadataStartupScript == null ? Output.empty() : this.metadataStartupScript;
    }

    /**
     * Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as
     * `Intel Haswell` or `Intel Skylake`. See the complete list [here](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @Import(name="minCpuPlatform")
      private final @Nullable Output<String> minCpuPlatform;

    public Output<String> getMinCpuPlatform() {
        return this.minCpuPlatform == null ? Output.empty() : this.minCpuPlatform;
    }

    /**
     * A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Networks to attach to the instance. This can
     * be specified multiple times. Structure is documented below.
     * 
     */
    @Import(name="networkInterfaces", required=true)
      private final Output<List<InstanceNetworkInterfaceArgs>> networkInterfaces;

    public Output<List<InstanceNetworkInterfaceArgs>> getNetworkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Configures network performance settings for the instance. Structure is
     * documented below. **Note**: `machine_type` must be a [supported type](https://cloud.google.com/compute/docs/networking/configure-vm-with-high-bandwidth-configuration),
     * the `image` used must include the [`GVNIC`](https://cloud.google.com/compute/docs/networking/using-gvnic#create-instance-gvnic-image)
     * in `guest-os-features`, and `network_interface.0.nic-type` must be `GVNIC`
     * in order for this setting to take effect.
     * 
     */
    @Import(name="networkPerformanceConfig")
      private final @Nullable Output<InstanceNetworkPerformanceConfigArgs> networkPerformanceConfig;

    public Output<InstanceNetworkPerformanceConfigArgs> getNetworkPerformanceConfig() {
        return this.networkPerformanceConfig == null ? Output.empty() : this.networkPerformanceConfig;
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Specifies the reservations that this instance can consume from.
     * Structure is documented below.
     * 
     */
    @Import(name="reservationAffinity")
      private final @Nullable Output<InstanceReservationAffinityArgs> reservationAffinity;

    public Output<InstanceReservationAffinityArgs> getReservationAffinity() {
        return this.reservationAffinity == null ? Output.empty() : this.reservationAffinity;
    }

    /**
     * -- A list of short names or self_links of resource policies to attach to the instance. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.
     * 
     */
    @Import(name="resourcePolicies")
      private final @Nullable Output<String> resourcePolicies;

    public Output<String> getResourcePolicies() {
        return this.resourcePolicies == null ? Output.empty() : this.resourcePolicies;
    }

    /**
     * The scheduling strategy to use. More details about
     * this configuration option are detailed below.
     * 
     */
    @Import(name="scheduling")
      private final @Nullable Output<InstanceSchedulingArgs> scheduling;

    public Output<InstanceSchedulingArgs> getScheduling() {
        return this.scheduling == null ? Output.empty() : this.scheduling;
    }

    /**
     * Scratch disks to attach to the instance. This can be
     * specified multiple times for multiple scratch disks. Structure is documented below.
     * 
     */
    @Import(name="scratchDisks")
      private final @Nullable Output<List<InstanceScratchDiskArgs>> scratchDisks;

    public Output<List<InstanceScratchDiskArgs>> getScratchDisks() {
        return this.scratchDisks == null ? Output.empty() : this.scratchDisks;
    }

    /**
     * Service account to attach to the instance.
     * Structure is documented below.
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @Import(name="serviceAccount")
      private final @Nullable Output<InstanceServiceAccountArgs> serviceAccount;

    public Output<InstanceServiceAccountArgs> getServiceAccount() {
        return this.serviceAccount == null ? Output.empty() : this.serviceAccount;
    }

    /**
     * Enable [Shielded VM](https://cloud.google.com/security/shielded-cloud/shielded-vm) on this instance. Shielded VM provides verifiable integrity to prevent against malware and rootkits. Defaults to disabled. Structure is documented below.
     * **Note**: `shielded_instance_config` can only be used with boot images with shielded vm support. See the complete list [here](https://cloud.google.com/compute/docs/images#shielded-images).
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @Import(name="shieldedInstanceConfig")
      private final @Nullable Output<InstanceShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Output<InstanceShieldedInstanceConfigArgs> getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Output.empty() : this.shieldedInstanceConfig;
    }

    /**
     * A list of network tags to attach to the instance.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The zone that the machine should be created in. If it is not provided, the provider zone is used.
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> getZone() {
        return this.zone == null ? Output.empty() : this.zone;
    }

    public InstanceArgs(
        @Nullable Output<InstanceAdvancedMachineFeaturesArgs> advancedMachineFeatures,
        @Nullable Output<Boolean> allowStoppingForUpdate,
        @Nullable Output<List<InstanceAttachedDiskArgs>> attachedDisks,
        Output<InstanceBootDiskArgs> bootDisk,
        @Nullable Output<Boolean> canIpForward,
        @Nullable Output<InstanceConfidentialInstanceConfigArgs> confidentialInstanceConfig,
        @Nullable Output<Boolean> deletionProtection,
        @Nullable Output<String> description,
        @Nullable Output<String> desiredStatus,
        @Nullable Output<Boolean> enableDisplay,
        @Nullable Output<List<InstanceGuestAcceleratorArgs>> guestAccelerators,
        @Nullable Output<String> hostname,
        @Nullable Output<Map<String,String>> labels,
        Output<String> machineType,
        @Nullable Output<Map<String,String>> metadata,
        @Nullable Output<String> metadataStartupScript,
        @Nullable Output<String> minCpuPlatform,
        @Nullable Output<String> name,
        Output<List<InstanceNetworkInterfaceArgs>> networkInterfaces,
        @Nullable Output<InstanceNetworkPerformanceConfigArgs> networkPerformanceConfig,
        @Nullable Output<String> project,
        @Nullable Output<InstanceReservationAffinityArgs> reservationAffinity,
        @Nullable Output<String> resourcePolicies,
        @Nullable Output<InstanceSchedulingArgs> scheduling,
        @Nullable Output<List<InstanceScratchDiskArgs>> scratchDisks,
        @Nullable Output<InstanceServiceAccountArgs> serviceAccount,
        @Nullable Output<InstanceShieldedInstanceConfigArgs> shieldedInstanceConfig,
        @Nullable Output<List<String>> tags,
        @Nullable Output<String> zone) {
        this.advancedMachineFeatures = advancedMachineFeatures;
        this.allowStoppingForUpdate = allowStoppingForUpdate;
        this.attachedDisks = attachedDisks;
        this.bootDisk = Objects.requireNonNull(bootDisk, "expected parameter 'bootDisk' to be non-null");
        this.canIpForward = canIpForward;
        this.confidentialInstanceConfig = confidentialInstanceConfig;
        this.deletionProtection = deletionProtection;
        this.description = description;
        this.desiredStatus = desiredStatus;
        this.enableDisplay = enableDisplay;
        this.guestAccelerators = guestAccelerators;
        this.hostname = hostname;
        this.labels = labels;
        this.machineType = Objects.requireNonNull(machineType, "expected parameter 'machineType' to be non-null");
        this.metadata = metadata;
        this.metadataStartupScript = metadataStartupScript;
        this.minCpuPlatform = minCpuPlatform;
        this.name = name;
        this.networkInterfaces = Objects.requireNonNull(networkInterfaces, "expected parameter 'networkInterfaces' to be non-null");
        this.networkPerformanceConfig = networkPerformanceConfig;
        this.project = project;
        this.reservationAffinity = reservationAffinity;
        this.resourcePolicies = resourcePolicies;
        this.scheduling = scheduling;
        this.scratchDisks = scratchDisks;
        this.serviceAccount = serviceAccount;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.tags = tags;
        this.zone = zone;
    }

    private InstanceArgs() {
        this.advancedMachineFeatures = Output.empty();
        this.allowStoppingForUpdate = Output.empty();
        this.attachedDisks = Output.empty();
        this.bootDisk = Output.empty();
        this.canIpForward = Output.empty();
        this.confidentialInstanceConfig = Output.empty();
        this.deletionProtection = Output.empty();
        this.description = Output.empty();
        this.desiredStatus = Output.empty();
        this.enableDisplay = Output.empty();
        this.guestAccelerators = Output.empty();
        this.hostname = Output.empty();
        this.labels = Output.empty();
        this.machineType = Output.empty();
        this.metadata = Output.empty();
        this.metadataStartupScript = Output.empty();
        this.minCpuPlatform = Output.empty();
        this.name = Output.empty();
        this.networkInterfaces = Output.empty();
        this.networkPerformanceConfig = Output.empty();
        this.project = Output.empty();
        this.reservationAffinity = Output.empty();
        this.resourcePolicies = Output.empty();
        this.scheduling = Output.empty();
        this.scratchDisks = Output.empty();
        this.serviceAccount = Output.empty();
        this.shieldedInstanceConfig = Output.empty();
        this.tags = Output.empty();
        this.zone = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<InstanceAdvancedMachineFeaturesArgs> advancedMachineFeatures;
        private @Nullable Output<Boolean> allowStoppingForUpdate;
        private @Nullable Output<List<InstanceAttachedDiskArgs>> attachedDisks;
        private Output<InstanceBootDiskArgs> bootDisk;
        private @Nullable Output<Boolean> canIpForward;
        private @Nullable Output<InstanceConfidentialInstanceConfigArgs> confidentialInstanceConfig;
        private @Nullable Output<Boolean> deletionProtection;
        private @Nullable Output<String> description;
        private @Nullable Output<String> desiredStatus;
        private @Nullable Output<Boolean> enableDisplay;
        private @Nullable Output<List<InstanceGuestAcceleratorArgs>> guestAccelerators;
        private @Nullable Output<String> hostname;
        private @Nullable Output<Map<String,String>> labels;
        private Output<String> machineType;
        private @Nullable Output<Map<String,String>> metadata;
        private @Nullable Output<String> metadataStartupScript;
        private @Nullable Output<String> minCpuPlatform;
        private @Nullable Output<String> name;
        private Output<List<InstanceNetworkInterfaceArgs>> networkInterfaces;
        private @Nullable Output<InstanceNetworkPerformanceConfigArgs> networkPerformanceConfig;
        private @Nullable Output<String> project;
        private @Nullable Output<InstanceReservationAffinityArgs> reservationAffinity;
        private @Nullable Output<String> resourcePolicies;
        private @Nullable Output<InstanceSchedulingArgs> scheduling;
        private @Nullable Output<List<InstanceScratchDiskArgs>> scratchDisks;
        private @Nullable Output<InstanceServiceAccountArgs> serviceAccount;
        private @Nullable Output<InstanceShieldedInstanceConfigArgs> shieldedInstanceConfig;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedMachineFeatures = defaults.advancedMachineFeatures;
    	      this.allowStoppingForUpdate = defaults.allowStoppingForUpdate;
    	      this.attachedDisks = defaults.attachedDisks;
    	      this.bootDisk = defaults.bootDisk;
    	      this.canIpForward = defaults.canIpForward;
    	      this.confidentialInstanceConfig = defaults.confidentialInstanceConfig;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.desiredStatus = defaults.desiredStatus;
    	      this.enableDisplay = defaults.enableDisplay;
    	      this.guestAccelerators = defaults.guestAccelerators;
    	      this.hostname = defaults.hostname;
    	      this.labels = defaults.labels;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.metadataStartupScript = defaults.metadataStartupScript;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.name = defaults.name;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.networkPerformanceConfig = defaults.networkPerformanceConfig;
    	      this.project = defaults.project;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.scheduling = defaults.scheduling;
    	      this.scratchDisks = defaults.scratchDisks;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.tags = defaults.tags;
    	      this.zone = defaults.zone;
        }

        public Builder advancedMachineFeatures(@Nullable Output<InstanceAdvancedMachineFeaturesArgs> advancedMachineFeatures) {
            this.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }
        public Builder advancedMachineFeatures(@Nullable InstanceAdvancedMachineFeaturesArgs advancedMachineFeatures) {
            this.advancedMachineFeatures = Output.ofNullable(advancedMachineFeatures);
            return this;
        }
        public Builder allowStoppingForUpdate(@Nullable Output<Boolean> allowStoppingForUpdate) {
            this.allowStoppingForUpdate = allowStoppingForUpdate;
            return this;
        }
        public Builder allowStoppingForUpdate(@Nullable Boolean allowStoppingForUpdate) {
            this.allowStoppingForUpdate = Output.ofNullable(allowStoppingForUpdate);
            return this;
        }
        public Builder attachedDisks(@Nullable Output<List<InstanceAttachedDiskArgs>> attachedDisks) {
            this.attachedDisks = attachedDisks;
            return this;
        }
        public Builder attachedDisks(@Nullable List<InstanceAttachedDiskArgs> attachedDisks) {
            this.attachedDisks = Output.ofNullable(attachedDisks);
            return this;
        }
        public Builder attachedDisks(InstanceAttachedDiskArgs... attachedDisks) {
            return attachedDisks(List.of(attachedDisks));
        }
        public Builder bootDisk(Output<InstanceBootDiskArgs> bootDisk) {
            this.bootDisk = Objects.requireNonNull(bootDisk);
            return this;
        }
        public Builder bootDisk(InstanceBootDiskArgs bootDisk) {
            this.bootDisk = Output.of(Objects.requireNonNull(bootDisk));
            return this;
        }
        public Builder canIpForward(@Nullable Output<Boolean> canIpForward) {
            this.canIpForward = canIpForward;
            return this;
        }
        public Builder canIpForward(@Nullable Boolean canIpForward) {
            this.canIpForward = Output.ofNullable(canIpForward);
            return this;
        }
        public Builder confidentialInstanceConfig(@Nullable Output<InstanceConfidentialInstanceConfigArgs> confidentialInstanceConfig) {
            this.confidentialInstanceConfig = confidentialInstanceConfig;
            return this;
        }
        public Builder confidentialInstanceConfig(@Nullable InstanceConfidentialInstanceConfigArgs confidentialInstanceConfig) {
            this.confidentialInstanceConfig = Output.ofNullable(confidentialInstanceConfig);
            return this;
        }
        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }
        public Builder deletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Output.ofNullable(deletionProtection);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder desiredStatus(@Nullable Output<String> desiredStatus) {
            this.desiredStatus = desiredStatus;
            return this;
        }
        public Builder desiredStatus(@Nullable String desiredStatus) {
            this.desiredStatus = Output.ofNullable(desiredStatus);
            return this;
        }
        public Builder enableDisplay(@Nullable Output<Boolean> enableDisplay) {
            this.enableDisplay = enableDisplay;
            return this;
        }
        public Builder enableDisplay(@Nullable Boolean enableDisplay) {
            this.enableDisplay = Output.ofNullable(enableDisplay);
            return this;
        }
        public Builder guestAccelerators(@Nullable Output<List<InstanceGuestAcceleratorArgs>> guestAccelerators) {
            this.guestAccelerators = guestAccelerators;
            return this;
        }
        public Builder guestAccelerators(@Nullable List<InstanceGuestAcceleratorArgs> guestAccelerators) {
            this.guestAccelerators = Output.ofNullable(guestAccelerators);
            return this;
        }
        public Builder guestAccelerators(InstanceGuestAcceleratorArgs... guestAccelerators) {
            return guestAccelerators(List.of(guestAccelerators));
        }
        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }
        public Builder hostname(@Nullable String hostname) {
            this.hostname = Output.ofNullable(hostname);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder machineType(Output<String> machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }
        public Builder machineType(String machineType) {
            this.machineType = Output.of(Objects.requireNonNull(machineType));
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Output.ofNullable(metadata);
            return this;
        }
        public Builder metadataStartupScript(@Nullable Output<String> metadataStartupScript) {
            this.metadataStartupScript = metadataStartupScript;
            return this;
        }
        public Builder metadataStartupScript(@Nullable String metadataStartupScript) {
            this.metadataStartupScript = Output.ofNullable(metadataStartupScript);
            return this;
        }
        public Builder minCpuPlatform(@Nullable Output<String> minCpuPlatform) {
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }
        public Builder minCpuPlatform(@Nullable String minCpuPlatform) {
            this.minCpuPlatform = Output.ofNullable(minCpuPlatform);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder networkInterfaces(Output<List<InstanceNetworkInterfaceArgs>> networkInterfaces) {
            this.networkInterfaces = Objects.requireNonNull(networkInterfaces);
            return this;
        }
        public Builder networkInterfaces(List<InstanceNetworkInterfaceArgs> networkInterfaces) {
            this.networkInterfaces = Output.of(Objects.requireNonNull(networkInterfaces));
            return this;
        }
        public Builder networkInterfaces(InstanceNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }
        public Builder networkPerformanceConfig(@Nullable Output<InstanceNetworkPerformanceConfigArgs> networkPerformanceConfig) {
            this.networkPerformanceConfig = networkPerformanceConfig;
            return this;
        }
        public Builder networkPerformanceConfig(@Nullable InstanceNetworkPerformanceConfigArgs networkPerformanceConfig) {
            this.networkPerformanceConfig = Output.ofNullable(networkPerformanceConfig);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder reservationAffinity(@Nullable Output<InstanceReservationAffinityArgs> reservationAffinity) {
            this.reservationAffinity = reservationAffinity;
            return this;
        }
        public Builder reservationAffinity(@Nullable InstanceReservationAffinityArgs reservationAffinity) {
            this.reservationAffinity = Output.ofNullable(reservationAffinity);
            return this;
        }
        public Builder resourcePolicies(@Nullable Output<String> resourcePolicies) {
            this.resourcePolicies = resourcePolicies;
            return this;
        }
        public Builder resourcePolicies(@Nullable String resourcePolicies) {
            this.resourcePolicies = Output.ofNullable(resourcePolicies);
            return this;
        }
        public Builder scheduling(@Nullable Output<InstanceSchedulingArgs> scheduling) {
            this.scheduling = scheduling;
            return this;
        }
        public Builder scheduling(@Nullable InstanceSchedulingArgs scheduling) {
            this.scheduling = Output.ofNullable(scheduling);
            return this;
        }
        public Builder scratchDisks(@Nullable Output<List<InstanceScratchDiskArgs>> scratchDisks) {
            this.scratchDisks = scratchDisks;
            return this;
        }
        public Builder scratchDisks(@Nullable List<InstanceScratchDiskArgs> scratchDisks) {
            this.scratchDisks = Output.ofNullable(scratchDisks);
            return this;
        }
        public Builder scratchDisks(InstanceScratchDiskArgs... scratchDisks) {
            return scratchDisks(List.of(scratchDisks));
        }
        public Builder serviceAccount(@Nullable Output<InstanceServiceAccountArgs> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }
        public Builder serviceAccount(@Nullable InstanceServiceAccountArgs serviceAccount) {
            this.serviceAccount = Output.ofNullable(serviceAccount);
            return this;
        }
        public Builder shieldedInstanceConfig(@Nullable Output<InstanceShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }
        public Builder shieldedInstanceConfig(@Nullable InstanceShieldedInstanceConfigArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Output.ofNullable(shieldedInstanceConfig);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = Output.ofNullable(zone);
            return this;
        }        public InstanceArgs build() {
            return new InstanceArgs(advancedMachineFeatures, allowStoppingForUpdate, attachedDisks, bootDisk, canIpForward, confidentialInstanceConfig, deletionProtection, description, desiredStatus, enableDisplay, guestAccelerators, hostname, labels, machineType, metadata, metadataStartupScript, minCpuPlatform, name, networkInterfaces, networkPerformanceConfig, project, reservationAffinity, resourcePolicies, scheduling, scratchDisks, serviceAccount, shieldedInstanceConfig, tags, zone);
        }
    }
}
