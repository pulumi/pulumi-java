// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.compute.inputs.SnapshotSnapshotEncryptionKeyGetArgs;
import io.pulumi.gcp.compute.inputs.SnapshotSourceDiskEncryptionKeyGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SnapshotState extends io.pulumi.resources.ResourceArgs {

    public static final SnapshotState Empty = new SnapshotState();

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
      private final @Nullable Output<String> creationTimestamp;

    public Output<String> getCreationTimestamp() {
        return this.creationTimestamp == null ? Codegen.empty() : this.creationTimestamp;
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Size of the snapshot, specified in GB.
     * 
     */
    @Import(name="diskSizeGb")
      private final @Nullable Output<Integer> diskSizeGb;

    public Output<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Codegen.empty() : this.diskSizeGb;
    }

    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     * 
     */
    @Import(name="labelFingerprint")
      private final @Nullable Output<String> labelFingerprint;

    public Output<String> getLabelFingerprint() {
        return this.labelFingerprint == null ? Codegen.empty() : this.labelFingerprint;
    }

    /**
     * Labels to apply to this Snapshot.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses
     * attached (such as a Windows image). snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied
     * encryption key.
     * 
     */
    @Import(name="licenses")
      private final @Nullable Output<List<String>> licenses;

    public Output<List<String>> getLicenses() {
        return this.licenses == null ? Codegen.empty() : this.licenses;
    }

    /**
     * Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> getSelfLink() {
        return this.selfLink == null ? Codegen.empty() : this.selfLink;
    }

    /**
     * The customer-supplied encryption key of the snapshot. Required if the
     * source snapshot is protected by a customer-supplied encryption key.
     * Structure is documented below.
     * 
     */
    @Import(name="snapshotEncryptionKey")
      private final @Nullable Output<SnapshotSnapshotEncryptionKeyGetArgs> snapshotEncryptionKey;

    public Output<SnapshotSnapshotEncryptionKeyGetArgs> getSnapshotEncryptionKey() {
        return this.snapshotEncryptionKey == null ? Codegen.empty() : this.snapshotEncryptionKey;
    }

    /**
     * The unique identifier for the resource.
     * 
     */
    @Import(name="snapshotId")
      private final @Nullable Output<Integer> snapshotId;

    public Output<Integer> getSnapshotId() {
        return this.snapshotId == null ? Codegen.empty() : this.snapshotId;
    }

    /**
     * A reference to the disk used to create this snapshot.
     * 
     */
    @Import(name="sourceDisk")
      private final @Nullable Output<String> sourceDisk;

    public Output<String> getSourceDisk() {
        return this.sourceDisk == null ? Codegen.empty() : this.sourceDisk;
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceDiskEncryptionKey")
      private final @Nullable Output<SnapshotSourceDiskEncryptionKeyGetArgs> sourceDiskEncryptionKey;

    public Output<SnapshotSourceDiskEncryptionKeyGetArgs> getSourceDiskEncryptionKey() {
        return this.sourceDiskEncryptionKey == null ? Codegen.empty() : this.sourceDiskEncryptionKey;
    }

    /**
     * A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot
     * creation/deletion.
     * 
     */
    @Import(name="storageBytes")
      private final @Nullable Output<Integer> storageBytes;

    public Output<Integer> getStorageBytes() {
        return this.storageBytes == null ? Codegen.empty() : this.storageBytes;
    }

    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     * 
     */
    @Import(name="storageLocations")
      private final @Nullable Output<List<String>> storageLocations;

    public Output<List<String>> getStorageLocations() {
        return this.storageLocations == null ? Codegen.empty() : this.storageLocations;
    }

    /**
     * A reference to the zone where the disk is hosted.
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> getZone() {
        return this.zone == null ? Codegen.empty() : this.zone;
    }

    public SnapshotState(
        @Nullable Output<String> creationTimestamp,
        @Nullable Output<String> description,
        @Nullable Output<Integer> diskSizeGb,
        @Nullable Output<String> labelFingerprint,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<List<String>> licenses,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> selfLink,
        @Nullable Output<SnapshotSnapshotEncryptionKeyGetArgs> snapshotEncryptionKey,
        @Nullable Output<Integer> snapshotId,
        @Nullable Output<String> sourceDisk,
        @Nullable Output<SnapshotSourceDiskEncryptionKeyGetArgs> sourceDiskEncryptionKey,
        @Nullable Output<Integer> storageBytes,
        @Nullable Output<List<String>> storageLocations,
        @Nullable Output<String> zone) {
        this.creationTimestamp = creationTimestamp;
        this.description = description;
        this.diskSizeGb = diskSizeGb;
        this.labelFingerprint = labelFingerprint;
        this.labels = labels;
        this.licenses = licenses;
        this.name = name;
        this.project = project;
        this.selfLink = selfLink;
        this.snapshotEncryptionKey = snapshotEncryptionKey;
        this.snapshotId = snapshotId;
        this.sourceDisk = sourceDisk;
        this.sourceDiskEncryptionKey = sourceDiskEncryptionKey;
        this.storageBytes = storageBytes;
        this.storageLocations = storageLocations;
        this.zone = zone;
    }

    private SnapshotState() {
        this.creationTimestamp = Codegen.empty();
        this.description = Codegen.empty();
        this.diskSizeGb = Codegen.empty();
        this.labelFingerprint = Codegen.empty();
        this.labels = Codegen.empty();
        this.licenses = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.selfLink = Codegen.empty();
        this.snapshotEncryptionKey = Codegen.empty();
        this.snapshotId = Codegen.empty();
        this.sourceDisk = Codegen.empty();
        this.sourceDiskEncryptionKey = Codegen.empty();
        this.storageBytes = Codegen.empty();
        this.storageLocations = Codegen.empty();
        this.zone = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> creationTimestamp;
        private @Nullable Output<String> description;
        private @Nullable Output<Integer> diskSizeGb;
        private @Nullable Output<String> labelFingerprint;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<List<String>> licenses;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<SnapshotSnapshotEncryptionKeyGetArgs> snapshotEncryptionKey;
        private @Nullable Output<Integer> snapshotId;
        private @Nullable Output<String> sourceDisk;
        private @Nullable Output<SnapshotSourceDiskEncryptionKeyGetArgs> sourceDiskEncryptionKey;
        private @Nullable Output<Integer> storageBytes;
        private @Nullable Output<List<String>> storageLocations;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.snapshotEncryptionKey = defaults.snapshotEncryptionKey;
    	      this.snapshotId = defaults.snapshotId;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskEncryptionKey = defaults.sourceDiskEncryptionKey;
    	      this.storageBytes = defaults.storageBytes;
    	      this.storageLocations = defaults.storageLocations;
    	      this.zone = defaults.zone;
        }

        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        public Builder creationTimestamp(@Nullable String creationTimestamp) {
            this.creationTimestamp = Codegen.ofNullable(creationTimestamp);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Codegen.ofNullable(diskSizeGb);
            return this;
        }
        public Builder labelFingerprint(@Nullable Output<String> labelFingerprint) {
            this.labelFingerprint = labelFingerprint;
            return this;
        }
        public Builder labelFingerprint(@Nullable String labelFingerprint) {
            this.labelFingerprint = Codegen.ofNullable(labelFingerprint);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder licenses(@Nullable Output<List<String>> licenses) {
            this.licenses = licenses;
            return this;
        }
        public Builder licenses(@Nullable List<String> licenses) {
            this.licenses = Codegen.ofNullable(licenses);
            return this;
        }
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }
        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Codegen.ofNullable(selfLink);
            return this;
        }
        public Builder snapshotEncryptionKey(@Nullable Output<SnapshotSnapshotEncryptionKeyGetArgs> snapshotEncryptionKey) {
            this.snapshotEncryptionKey = snapshotEncryptionKey;
            return this;
        }
        public Builder snapshotEncryptionKey(@Nullable SnapshotSnapshotEncryptionKeyGetArgs snapshotEncryptionKey) {
            this.snapshotEncryptionKey = Codegen.ofNullable(snapshotEncryptionKey);
            return this;
        }
        public Builder snapshotId(@Nullable Output<Integer> snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        public Builder snapshotId(@Nullable Integer snapshotId) {
            this.snapshotId = Codegen.ofNullable(snapshotId);
            return this;
        }
        public Builder sourceDisk(@Nullable Output<String> sourceDisk) {
            this.sourceDisk = sourceDisk;
            return this;
        }
        public Builder sourceDisk(@Nullable String sourceDisk) {
            this.sourceDisk = Codegen.ofNullable(sourceDisk);
            return this;
        }
        public Builder sourceDiskEncryptionKey(@Nullable Output<SnapshotSourceDiskEncryptionKeyGetArgs> sourceDiskEncryptionKey) {
            this.sourceDiskEncryptionKey = sourceDiskEncryptionKey;
            return this;
        }
        public Builder sourceDiskEncryptionKey(@Nullable SnapshotSourceDiskEncryptionKeyGetArgs sourceDiskEncryptionKey) {
            this.sourceDiskEncryptionKey = Codegen.ofNullable(sourceDiskEncryptionKey);
            return this;
        }
        public Builder storageBytes(@Nullable Output<Integer> storageBytes) {
            this.storageBytes = storageBytes;
            return this;
        }
        public Builder storageBytes(@Nullable Integer storageBytes) {
            this.storageBytes = Codegen.ofNullable(storageBytes);
            return this;
        }
        public Builder storageLocations(@Nullable Output<List<String>> storageLocations) {
            this.storageLocations = storageLocations;
            return this;
        }
        public Builder storageLocations(@Nullable List<String> storageLocations) {
            this.storageLocations = Codegen.ofNullable(storageLocations);
            return this;
        }
        public Builder storageLocations(String... storageLocations) {
            return storageLocations(List.of(storageLocations));
        }
        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = Codegen.ofNullable(zone);
            return this;
        }        public SnapshotState build() {
            return new SnapshotState(creationTimestamp, description, diskSizeGb, labelFingerprint, labels, licenses, name, project, selfLink, snapshotEncryptionKey, snapshotId, sourceDisk, sourceDiskEncryptionKey, storageBytes, storageLocations, zone);
        }
    }
}
