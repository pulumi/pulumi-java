// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.networkmanagement.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectivityTestSourceGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectivityTestSourceGetArgs Empty = new ConnectivityTestSourceGetArgs();

    /**
     * A Compute Engine instance URI.
     * 
     */
    @Import(name="instance")
      private final @Nullable Output<String> instance;

    public Output<String> getInstance() {
        return this.instance == null ? Output.empty() : this.instance;
    }

    /**
     * The IP address of the endpoint, which can be an external or
     * internal IP. An IPv6 address is only allowed when the test's
     * destination is a global load balancer VIP.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable Output<String> ipAddress;

    public Output<String> getIpAddress() {
        return this.ipAddress == null ? Output.empty() : this.ipAddress;
    }

    /**
     * A Compute Engine network URI.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Output.empty() : this.network;
    }

    /**
     * Type of the network where the endpoint is located.
     * Possible values are `GCP_NETWORK` and `NON_GCP_NETWORK`.
     * 
     */
    @Import(name="networkType")
      private final @Nullable Output<String> networkType;

    public Output<String> getNetworkType() {
        return this.networkType == null ? Output.empty() : this.networkType;
    }

    /**
     * The IP protocol port of the endpoint. Only applicable when
     * protocol is TCP or UDP.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * Project ID where the endpoint is located. The Project ID can be
     * derived from the URI if you provide a VM instance or network URI.
     * The following are two cases where you must provide the project ID:
     * 1. Only the IP address is specified, and the IP address is within
     *    a GCP project. 2. When you are using Shared VPC and the IP address
     *    that you provide is from the service project. In this case, the
     *    network that the IP address resides in is defined in the host
     *    project.
     * 
     */
    @Import(name="projectId")
      private final @Nullable Output<String> projectId;

    public Output<String> getProjectId() {
        return this.projectId == null ? Output.empty() : this.projectId;
    }

    public ConnectivityTestSourceGetArgs(
        @Nullable Output<String> instance,
        @Nullable Output<String> ipAddress,
        @Nullable Output<String> network,
        @Nullable Output<String> networkType,
        @Nullable Output<Integer> port,
        @Nullable Output<String> projectId) {
        this.instance = instance;
        this.ipAddress = ipAddress;
        this.network = network;
        this.networkType = networkType;
        this.port = port;
        this.projectId = projectId;
    }

    private ConnectivityTestSourceGetArgs() {
        this.instance = Output.empty();
        this.ipAddress = Output.empty();
        this.network = Output.empty();
        this.networkType = Output.empty();
        this.port = Output.empty();
        this.projectId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectivityTestSourceGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> instance;
        private @Nullable Output<String> ipAddress;
        private @Nullable Output<String> network;
        private @Nullable Output<String> networkType;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> projectId;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectivityTestSourceGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instance = defaults.instance;
    	      this.ipAddress = defaults.ipAddress;
    	      this.network = defaults.network;
    	      this.networkType = defaults.networkType;
    	      this.port = defaults.port;
    	      this.projectId = defaults.projectId;
        }

        public Builder instance(@Nullable Output<String> instance) {
            this.instance = instance;
            return this;
        }
        public Builder instance(@Nullable String instance) {
            this.instance = Output.ofNullable(instance);
            return this;
        }
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = Output.ofNullable(ipAddress);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Output.ofNullable(network);
            return this;
        }
        public Builder networkType(@Nullable Output<String> networkType) {
            this.networkType = networkType;
            return this;
        }
        public Builder networkType(@Nullable String networkType) {
            this.networkType = Output.ofNullable(networkType);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }
        public Builder projectId(@Nullable Output<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        public Builder projectId(@Nullable String projectId) {
            this.projectId = Output.ofNullable(projectId);
            return this;
        }        public ConnectivityTestSourceGetArgs build() {
            return new ConnectivityTestSourceGetArgs(instance, ipAddress, network, networkType, port, projectId);
        }
    }
}
