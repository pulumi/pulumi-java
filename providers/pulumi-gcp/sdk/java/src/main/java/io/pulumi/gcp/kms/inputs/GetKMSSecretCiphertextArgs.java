// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.kms.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class GetKMSSecretCiphertextArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetKMSSecretCiphertextArgs Empty = new GetKMSSecretCiphertextArgs();

    /**
     * The id of the CryptoKey that will be used to
     * encrypt the provided plaintext. This is represented by the format
     * `{projectId}/{location}/{keyRingName}/{cryptoKeyName}`.
     * 
     */
    @InputImport(name="cryptoKey", required=true)
        private final String cryptoKey;

    public String getCryptoKey() {
        return this.cryptoKey;
    }

    /**
     * The plaintext to be encrypted
     * 
     */
    @InputImport(name="plaintext", required=true)
        private final String plaintext;

    public String getPlaintext() {
        return this.plaintext;
    }

    public GetKMSSecretCiphertextArgs(
        String cryptoKey,
        String plaintext) {
        this.cryptoKey = Objects.requireNonNull(cryptoKey, "expected parameter 'cryptoKey' to be non-null");
        this.plaintext = Objects.requireNonNull(plaintext, "expected parameter 'plaintext' to be non-null");
    }

    private GetKMSSecretCiphertextArgs() {
        this.cryptoKey = null;
        this.plaintext = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKMSSecretCiphertextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String cryptoKey;
        private String plaintext;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKMSSecretCiphertextArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKey = defaults.cryptoKey;
    	      this.plaintext = defaults.plaintext;
        }

        public Builder setCryptoKey(String cryptoKey) {
            this.cryptoKey = Objects.requireNonNull(cryptoKey);
            return this;
        }

        public Builder setPlaintext(String plaintext) {
            this.plaintext = Objects.requireNonNull(plaintext);
            return this;
        }
        public GetKMSSecretCiphertextArgs build() {
            return new GetKMSSecretCiphertextArgs(cryptoKey, plaintext);
        }
    }
}
