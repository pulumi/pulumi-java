// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataproc.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.dataproc.outputs.ClusterClusterConfigGceClusterConfigShieldedInstanceConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ClusterClusterConfigGceClusterConfig {
    /**
     * By default, clusters are not restricted to internal IP addresses,
     * and will have ephemeral external IP addresses assigned to each instance. If set to true, all
     * instances in the cluster will only have internal IP addresses. Note: Private Google Access
     * (also known as `privateIpGoogleAccess`) must be enabled on the subnetwork that the cluster
     * will be launched in.
     * 
     */
    private final @Nullable Boolean internalIpOnly;
    /**
     * A map of the Compute Engine metadata entries to add to all instances
     * (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
     * 
     */
    private final @Nullable Map<String,String> metadata;
    /**
     * The name or self_link of the Google Compute Engine
     * network to the cluster will be part of. Conflicts with `subnetwork`.
     * If neither is specified, this defaults to the "default" network.
     * 
     */
    private final @Nullable String network;
    /**
     * The service account to be used by the Node VMs.
     * If not specified, the "default" service account is used.
     * 
     */
    private final @Nullable String serviceAccount;
    /**
     * The set of Google API scopes
     * to be made available on all of the node VMs under the `service_account`
     * specified. Both OAuth2 URLs and gcloud
     * short names are supported. To allow full access to all Cloud APIs, use the
     * `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
     * 
     */
    private final @Nullable List<String> serviceAccountScopes;
    /**
     * Shielded Instance Config for clusters using [Compute Engine Shielded VMs](https://cloud.google.com/security/shielded-cloud/shielded-vm).
     * 
     */
    private final @Nullable ClusterClusterConfigGceClusterConfigShieldedInstanceConfig shieldedInstanceConfig;
    /**
     * The name or self_link of the Google Compute Engine
     * subnetwork the cluster will be part of. Conflicts with `network`.
     * 
     */
    private final @Nullable String subnetwork;
    /**
     * The list of instance tags applied to instances in the cluster.
     * Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    private final @Nullable List<String> tags;
    /**
     * The GCP zone where your data is stored and used (i.e. where
     * the master and the worker nodes will be created in). If `region` is set to 'global' (default)
     * then `zone` is mandatory, otherwise GCP is able to make use of [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/auto-zone)
     * to determine this automatically for you.
     * Note: This setting additionally determines and restricts
     * which computing resources are available for use with other configs such as
     * `cluster_config.master_config.machine_type` and `cluster_config.worker_config.machine_type`.
     * 
     */
    private final @Nullable String zone;

    @OutputCustomType.Constructor({"internalIpOnly","metadata","network","serviceAccount","serviceAccountScopes","shieldedInstanceConfig","subnetwork","tags","zone"})
    private ClusterClusterConfigGceClusterConfig(
        @Nullable Boolean internalIpOnly,
        @Nullable Map<String,String> metadata,
        @Nullable String network,
        @Nullable String serviceAccount,
        @Nullable List<String> serviceAccountScopes,
        @Nullable ClusterClusterConfigGceClusterConfigShieldedInstanceConfig shieldedInstanceConfig,
        @Nullable String subnetwork,
        @Nullable List<String> tags,
        @Nullable String zone) {
        this.internalIpOnly = internalIpOnly;
        this.metadata = metadata;
        this.network = network;
        this.serviceAccount = serviceAccount;
        this.serviceAccountScopes = serviceAccountScopes;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.subnetwork = subnetwork;
        this.tags = tags;
        this.zone = zone;
    }

    /**
     * By default, clusters are not restricted to internal IP addresses,
     * and will have ephemeral external IP addresses assigned to each instance. If set to true, all
     * instances in the cluster will only have internal IP addresses. Note: Private Google Access
     * (also known as `privateIpGoogleAccess`) must be enabled on the subnetwork that the cluster
     * will be launched in.
     * 
     */
    public Optional<Boolean> getInternalIpOnly() {
        return Optional.ofNullable(this.internalIpOnly);
    }
    /**
     * A map of the Compute Engine metadata entries to add to all instances
     * (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
     * 
     */
    public Map<String,String> getMetadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * The name or self_link of the Google Compute Engine
     * network to the cluster will be part of. Conflicts with `subnetwork`.
     * If neither is specified, this defaults to the "default" network.
     * 
     */
    public Optional<String> getNetwork() {
        return Optional.ofNullable(this.network);
    }
    /**
     * The service account to be used by the Node VMs.
     * If not specified, the "default" service account is used.
     * 
     */
    public Optional<String> getServiceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * The set of Google API scopes
     * to be made available on all of the node VMs under the `service_account`
     * specified. Both OAuth2 URLs and gcloud
     * short names are supported. To allow full access to all Cloud APIs, use the
     * `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
     * 
     */
    public List<String> getServiceAccountScopes() {
        return this.serviceAccountScopes == null ? List.of() : this.serviceAccountScopes;
    }
    /**
     * Shielded Instance Config for clusters using [Compute Engine Shielded VMs](https://cloud.google.com/security/shielded-cloud/shielded-vm).
     * 
     */
    public Optional<ClusterClusterConfigGceClusterConfigShieldedInstanceConfig> getShieldedInstanceConfig() {
        return Optional.ofNullable(this.shieldedInstanceConfig);
    }
    /**
     * The name or self_link of the Google Compute Engine
     * subnetwork the cluster will be part of. Conflicts with `network`.
     * 
     */
    public Optional<String> getSubnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }
    /**
     * The list of instance tags applied to instances in the cluster.
     * Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    public List<String> getTags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * The GCP zone where your data is stored and used (i.e. where
     * the master and the worker nodes will be created in). If `region` is set to 'global' (default)
     * then `zone` is mandatory, otherwise GCP is able to make use of [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/auto-zone)
     * to determine this automatically for you.
     * Note: This setting additionally determines and restricts
     * which computing resources are available for use with other configs such as
     * `cluster_config.master_config.machine_type` and `cluster_config.worker_config.machine_type`.
     * 
     */
    public Optional<String> getZone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterClusterConfigGceClusterConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean internalIpOnly;
        private @Nullable Map<String,String> metadata;
        private @Nullable String network;
        private @Nullable String serviceAccount;
        private @Nullable List<String> serviceAccountScopes;
        private @Nullable ClusterClusterConfigGceClusterConfigShieldedInstanceConfig shieldedInstanceConfig;
        private @Nullable String subnetwork;
        private @Nullable List<String> tags;
        private @Nullable String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterClusterConfigGceClusterConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.internalIpOnly = defaults.internalIpOnly;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountScopes = defaults.serviceAccountScopes;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tags = defaults.tags;
    	      this.zone = defaults.zone;
        }

        public Builder setInternalIpOnly(@Nullable Boolean internalIpOnly) {
            this.internalIpOnly = internalIpOnly;
            return this;
        }

        public Builder setMetadata(@Nullable Map<String,String> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = network;
            return this;
        }

        public Builder setServiceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder setServiceAccountScopes(@Nullable List<String> serviceAccountScopes) {
            this.serviceAccountScopes = serviceAccountScopes;
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable ClusterClusterConfigGceClusterConfigShieldedInstanceConfig shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder setSubnetwork(@Nullable String subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setZone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }

        public ClusterClusterConfigGceClusterConfig build() {
            return new ClusterClusterConfigGceClusterConfig(internalIpOnly, metadata, network, serviceAccount, serviceAccountScopes, shieldedInstanceConfig, subnetwork, tags, zone);
        }
    }
}
