// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildStepVolumeGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerBuildStepGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerBuildStepGetArgs Empty = new TriggerBuildStepGetArgs();

    @InputImport(name="args")
    private final @Nullable Input<List<String>> args;

    public Input<List<String>> getArgs() {
        return this.args == null ? Input.empty() : this.args;
    }

    @InputImport(name="dir")
    private final @Nullable Input<String> dir;

    public Input<String> getDir() {
        return this.dir == null ? Input.empty() : this.dir;
    }

    @InputImport(name="entrypoint")
    private final @Nullable Input<String> entrypoint;

    public Input<String> getEntrypoint() {
        return this.entrypoint == null ? Input.empty() : this.entrypoint;
    }

    @InputImport(name="envs")
    private final @Nullable Input<List<String>> envs;

    public Input<List<String>> getEnvs() {
        return this.envs == null ? Input.empty() : this.envs;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="secretEnvs")
    private final @Nullable Input<List<String>> secretEnvs;

    public Input<List<String>> getSecretEnvs() {
        return this.secretEnvs == null ? Input.empty() : this.secretEnvs;
    }

    @InputImport(name="timeout")
    private final @Nullable Input<String> timeout;

    public Input<String> getTimeout() {
        return this.timeout == null ? Input.empty() : this.timeout;
    }

    @InputImport(name="timing")
    private final @Nullable Input<String> timing;

    public Input<String> getTiming() {
        return this.timing == null ? Input.empty() : this.timing;
    }

    @InputImport(name="volumes")
    private final @Nullable Input<List<TriggerBuildStepVolumeGetArgs>> volumes;

    public Input<List<TriggerBuildStepVolumeGetArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    @InputImport(name="waitFors")
    private final @Nullable Input<List<String>> waitFors;

    public Input<List<String>> getWaitFors() {
        return this.waitFors == null ? Input.empty() : this.waitFors;
    }

    public TriggerBuildStepGetArgs(
        @Nullable Input<List<String>> args,
        @Nullable Input<String> dir,
        @Nullable Input<String> entrypoint,
        @Nullable Input<List<String>> envs,
        @Nullable Input<String> id,
        Input<String> name,
        @Nullable Input<List<String>> secretEnvs,
        @Nullable Input<String> timeout,
        @Nullable Input<String> timing,
        @Nullable Input<List<TriggerBuildStepVolumeGetArgs>> volumes,
        @Nullable Input<List<String>> waitFors) {
        this.args = args;
        this.dir = dir;
        this.entrypoint = entrypoint;
        this.envs = envs;
        this.id = id;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.secretEnvs = secretEnvs;
        this.timeout = timeout;
        this.timing = timing;
        this.volumes = volumes;
        this.waitFors = waitFors;
    }

    private TriggerBuildStepGetArgs() {
        this.args = Input.empty();
        this.dir = Input.empty();
        this.entrypoint = Input.empty();
        this.envs = Input.empty();
        this.id = Input.empty();
        this.name = Input.empty();
        this.secretEnvs = Input.empty();
        this.timeout = Input.empty();
        this.timing = Input.empty();
        this.volumes = Input.empty();
        this.waitFors = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBuildStepGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> args;
        private @Nullable Input<String> dir;
        private @Nullable Input<String> entrypoint;
        private @Nullable Input<List<String>> envs;
        private @Nullable Input<String> id;
        private Input<String> name;
        private @Nullable Input<List<String>> secretEnvs;
        private @Nullable Input<String> timeout;
        private @Nullable Input<String> timing;
        private @Nullable Input<List<TriggerBuildStepVolumeGetArgs>> volumes;
        private @Nullable Input<List<String>> waitFors;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerBuildStepGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.dir = defaults.dir;
    	      this.entrypoint = defaults.entrypoint;
    	      this.envs = defaults.envs;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.secretEnvs = defaults.secretEnvs;
    	      this.timeout = defaults.timeout;
    	      this.timing = defaults.timing;
    	      this.volumes = defaults.volumes;
    	      this.waitFors = defaults.waitFors;
        }

        public Builder setArgs(@Nullable Input<List<String>> args) {
            this.args = args;
            return this;
        }

        public Builder setArgs(@Nullable List<String> args) {
            this.args = Input.ofNullable(args);
            return this;
        }

        public Builder setDir(@Nullable Input<String> dir) {
            this.dir = dir;
            return this;
        }

        public Builder setDir(@Nullable String dir) {
            this.dir = Input.ofNullable(dir);
            return this;
        }

        public Builder setEntrypoint(@Nullable Input<String> entrypoint) {
            this.entrypoint = entrypoint;
            return this;
        }

        public Builder setEntrypoint(@Nullable String entrypoint) {
            this.entrypoint = Input.ofNullable(entrypoint);
            return this;
        }

        public Builder setEnvs(@Nullable Input<List<String>> envs) {
            this.envs = envs;
            return this;
        }

        public Builder setEnvs(@Nullable List<String> envs) {
            this.envs = Input.ofNullable(envs);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setSecretEnvs(@Nullable Input<List<String>> secretEnvs) {
            this.secretEnvs = secretEnvs;
            return this;
        }

        public Builder setSecretEnvs(@Nullable List<String> secretEnvs) {
            this.secretEnvs = Input.ofNullable(secretEnvs);
            return this;
        }

        public Builder setTimeout(@Nullable Input<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = Input.ofNullable(timeout);
            return this;
        }

        public Builder setTiming(@Nullable Input<String> timing) {
            this.timing = timing;
            return this;
        }

        public Builder setTiming(@Nullable String timing) {
            this.timing = Input.ofNullable(timing);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<TriggerBuildStepVolumeGetArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<TriggerBuildStepVolumeGetArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }

        public Builder setWaitFors(@Nullable Input<List<String>> waitFors) {
            this.waitFors = waitFors;
            return this;
        }

        public Builder setWaitFors(@Nullable List<String> waitFors) {
            this.waitFors = Input.ofNullable(waitFors);
            return this;
        }

        public TriggerBuildStepGetArgs build() {
            return new TriggerBuildStepGetArgs(args, dir, entrypoint, envs, id, name, secretEnvs, timeout, timing, volumes, waitFors);
        }
    }
}
