// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildStepVolumeGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerBuildStepGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerBuildStepGetArgs Empty = new TriggerBuildStepGetArgs();

    /**
     * A list of arguments that will be presented to the step when it is started.
     * If the image used to run the step's container has an entrypoint, the args
     * are used as arguments to that entrypoint. If the image does not define an
     * entrypoint, the first element in args is used as the entrypoint, and the
     * remainder will be used as arguments.
     * 
     */
    @Import(name="args")
      private final @Nullable Output<List<String>> args;

    public Output<List<String>> getArgs() {
        return this.args == null ? Output.empty() : this.args;
    }

    /**
     * Working directory to use when running this step's container.
     * If this value is a relative path, it is relative to the build's working
     * directory. If this value is absolute, it may be outside the build's working
     * directory, in which case the contents of the path may not be persisted
     * across build step executions, unless a `volume` for that path is specified.
     * If the build specifies a `RepoSource` with `dir` and a step with a
     * `dir`,
     * which specifies an absolute path, the `RepoSource` `dir` is ignored
     * for the step's execution.
     * 
     */
    @Import(name="dir")
      private final @Nullable Output<String> dir;

    public Output<String> getDir() {
        return this.dir == null ? Output.empty() : this.dir;
    }

    /**
     * Entrypoint to be used instead of the build step image's
     * default entrypoint.
     * If unset, the image's default entrypoint is used
     * 
     */
    @Import(name="entrypoint")
      private final @Nullable Output<String> entrypoint;

    public Output<String> getEntrypoint() {
        return this.entrypoint == null ? Output.empty() : this.entrypoint;
    }

    /**
     * A list of global environment variable definitions that will exist for all build steps
     * in this build. If a variable is defined in both globally and in a build step,
     * the variable will use the build step value.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     * 
     */
    @Import(name="envs")
      private final @Nullable Output<List<String>> envs;

    public Output<List<String>> getEnvs() {
        return this.envs == null ? Output.empty() : this.envs;
    }

    /**
     * Unique identifier for this build step, used in `wait_for` to
     * reference this build step as a dependency.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * Name of the volume to mount.
     * Volume names must be unique per build step and must be valid names for Docker volumes.
     * Each named volume must be used by at least two build steps.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * A list of global environment variables, which are encrypted using a Cloud Key Management
     * Service crypto key. These values must be specified in the build's Secret. These variables
     * will be available to all build steps in this build.
     * 
     */
    @Import(name="secretEnvs")
      private final @Nullable Output<List<String>> secretEnvs;

    public Output<List<String>> getSecretEnvs() {
        return this.secretEnvs == null ? Output.empty() : this.secretEnvs;
    }

    /**
     * Time limit for executing this build step. If not defined,
     * the step has no
     * time limit and will be allowed to continue to run until either it
     * completes or the build itself times out.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<String> timeout;

    public Output<String> getTimeout() {
        return this.timeout == null ? Output.empty() : this.timeout;
    }

    /**
     * - 
     * Output only. Stores timing information for pushing all artifact objects.
     * Structure is documented below.
     * 
     */
    @Import(name="timing")
      private final @Nullable Output<String> timing;

    public Output<String> getTiming() {
        return this.timing == null ? Output.empty() : this.timing;
    }

    /**
     * Global list of volumes to mount for ALL build steps
     * Each volume is created as an empty volume prior to starting the build process.
     * Upon completion of the build, volumes and their contents are discarded. Global
     * volume names and paths cannot conflict with the volumes defined a build step.
     * Using a global volume in a build with only one step is not valid as it is indicative
     * of a build request with an incorrect configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="volumes")
      private final @Nullable Output<List<TriggerBuildStepVolumeGetArgs>> volumes;

    public Output<List<TriggerBuildStepVolumeGetArgs>> getVolumes() {
        return this.volumes == null ? Output.empty() : this.volumes;
    }

    /**
     * The ID(s) of the step(s) that this build step depends on.
     * This build step will not start until all the build steps in `wait_for`
     * have completed successfully. If `wait_for` is empty, this build step
     * will start when all previous build steps in the `Build.Steps` list
     * have completed successfully.
     * 
     */
    @Import(name="waitFors")
      private final @Nullable Output<List<String>> waitFors;

    public Output<List<String>> getWaitFors() {
        return this.waitFors == null ? Output.empty() : this.waitFors;
    }

    public TriggerBuildStepGetArgs(
        @Nullable Output<List<String>> args,
        @Nullable Output<String> dir,
        @Nullable Output<String> entrypoint,
        @Nullable Output<List<String>> envs,
        @Nullable Output<String> id,
        Output<String> name,
        @Nullable Output<List<String>> secretEnvs,
        @Nullable Output<String> timeout,
        @Nullable Output<String> timing,
        @Nullable Output<List<TriggerBuildStepVolumeGetArgs>> volumes,
        @Nullable Output<List<String>> waitFors) {
        this.args = args;
        this.dir = dir;
        this.entrypoint = entrypoint;
        this.envs = envs;
        this.id = id;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.secretEnvs = secretEnvs;
        this.timeout = timeout;
        this.timing = timing;
        this.volumes = volumes;
        this.waitFors = waitFors;
    }

    private TriggerBuildStepGetArgs() {
        this.args = Output.empty();
        this.dir = Output.empty();
        this.entrypoint = Output.empty();
        this.envs = Output.empty();
        this.id = Output.empty();
        this.name = Output.empty();
        this.secretEnvs = Output.empty();
        this.timeout = Output.empty();
        this.timing = Output.empty();
        this.volumes = Output.empty();
        this.waitFors = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBuildStepGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> args;
        private @Nullable Output<String> dir;
        private @Nullable Output<String> entrypoint;
        private @Nullable Output<List<String>> envs;
        private @Nullable Output<String> id;
        private Output<String> name;
        private @Nullable Output<List<String>> secretEnvs;
        private @Nullable Output<String> timeout;
        private @Nullable Output<String> timing;
        private @Nullable Output<List<TriggerBuildStepVolumeGetArgs>> volumes;
        private @Nullable Output<List<String>> waitFors;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerBuildStepGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.dir = defaults.dir;
    	      this.entrypoint = defaults.entrypoint;
    	      this.envs = defaults.envs;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.secretEnvs = defaults.secretEnvs;
    	      this.timeout = defaults.timeout;
    	      this.timing = defaults.timing;
    	      this.volumes = defaults.volumes;
    	      this.waitFors = defaults.waitFors;
        }

        public Builder args(@Nullable Output<List<String>> args) {
            this.args = args;
            return this;
        }

        public Builder args(@Nullable List<String> args) {
            this.args = Output.ofNullable(args);
            return this;
        }

        public Builder dir(@Nullable Output<String> dir) {
            this.dir = dir;
            return this;
        }

        public Builder dir(@Nullable String dir) {
            this.dir = Output.ofNullable(dir);
            return this;
        }

        public Builder entrypoint(@Nullable Output<String> entrypoint) {
            this.entrypoint = entrypoint;
            return this;
        }

        public Builder entrypoint(@Nullable String entrypoint) {
            this.entrypoint = Output.ofNullable(entrypoint);
            return this;
        }

        public Builder envs(@Nullable Output<List<String>> envs) {
            this.envs = envs;
            return this;
        }

        public Builder envs(@Nullable List<String> envs) {
            this.envs = Output.ofNullable(envs);
            return this;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder secretEnvs(@Nullable Output<List<String>> secretEnvs) {
            this.secretEnvs = secretEnvs;
            return this;
        }

        public Builder secretEnvs(@Nullable List<String> secretEnvs) {
            this.secretEnvs = Output.ofNullable(secretEnvs);
            return this;
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(@Nullable String timeout) {
            this.timeout = Output.ofNullable(timeout);
            return this;
        }

        public Builder timing(@Nullable Output<String> timing) {
            this.timing = timing;
            return this;
        }

        public Builder timing(@Nullable String timing) {
            this.timing = Output.ofNullable(timing);
            return this;
        }

        public Builder volumes(@Nullable Output<List<TriggerBuildStepVolumeGetArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder volumes(@Nullable List<TriggerBuildStepVolumeGetArgs> volumes) {
            this.volumes = Output.ofNullable(volumes);
            return this;
        }

        public Builder waitFors(@Nullable Output<List<String>> waitFors) {
            this.waitFors = waitFors;
            return this;
        }

        public Builder waitFors(@Nullable List<String> waitFors) {
            this.waitFors = Output.ofNullable(waitFors);
            return this;
        }
        public TriggerBuildStepGetArgs build() {
            return new TriggerBuildStepGetArgs(args, dir, entrypoint, envs, id, name, secretEnvs, timeout, timing, volumes, waitFors);
        }
    }
}
