// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.NetworkEndpointArgs;
import io.pulumi.gcp.compute.inputs.NetworkEndpointState;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A Network endpoint represents a IP address and port combination that is
 * part of a specific network endpoint group (NEG). NEGs are zonal
 * collections of these endpoints for GCP resources within a
 * single subnet. **NOTE**: Network endpoints cannot be created outside of a
 * network endpoint group.
 * 
 * 
 * To get more information about NetworkEndpoint, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/networkEndpointGroups)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/negs/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Network Endpoint
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const myImage = gcp.compute.getImage({
 *     family: "debian-9",
 *     project: "debian-cloud",
 * });
 * const defaultNetwork = new gcp.compute.Network("defaultNetwork", {autoCreateSubnetworks: false});
 * const defaultSubnetwork = new gcp.compute.Subnetwork("defaultSubnetwork", {
 *     ipCidrRange: "10.0.0.1/16",
 *     region: "us-central1",
 *     network: defaultNetwork.id,
 * });
 * const endpoint_instance = new gcp.compute.Instance("endpoint-instance", {
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: myImage.then(myImage => myImage.selfLink),
 *         },
 *     },
 *     networkInterfaces: [{
 *         subnetwork: defaultSubnetwork.id,
 *         accessConfigs: [{}],
 *     }],
 * });
 * const default_endpoint = new gcp.compute.NetworkEndpoint("default-endpoint", {
 *     networkEndpointGroup: google_compute_network_endpoint_group.neg.name,
 *     instance: endpoint_instance.name,
 *     port: google_compute_network_endpoint_group.neg.default_port,
 *     ipAddress: endpoint_instance.networkInterfaces.apply(networkInterfaces => networkInterfaces[0].networkIp),
 * });
 * const group = new gcp.compute.NetworkEndpointGroup("group", {
 *     network: defaultNetwork.id,
 *     subnetwork: defaultSubnetwork.id,
 *     defaultPort: "90",
 *     zone: "us-central1-a",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * my_image = gcp.compute.get_image(family="debian-9",
 *     project="debian-cloud")
 * default_network = gcp.compute.Network("defaultNetwork", auto_create_subnetworks=False)
 * default_subnetwork = gcp.compute.Subnetwork("defaultSubnetwork",
 *     ip_cidr_range="10.0.0.1/16",
 *     region="us-central1",
 *     network=default_network.id)
 * endpoint_instance = gcp.compute.Instance("endpoint-instance",
 *     machine_type="e2-medium",
 *     boot_disk=gcp.compute.InstanceBootDiskArgs(
 *         initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
 *             image=my_image.self_link,
 *         ),
 *     ),
 *     network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
 *         subnetwork=default_subnetwork.id,
 *         access_configs=[gcp.compute.InstanceNetworkInterfaceAccessConfigArgs()],
 *     )])
 * default_endpoint = gcp.compute.NetworkEndpoint("default-endpoint",
 *     network_endpoint_group=google_compute_network_endpoint_group["neg"]["name"],
 *     instance=endpoint_instance.name,
 *     port=google_compute_network_endpoint_group["neg"]["default_port"],
 *     ip_address=endpoint_instance.network_interfaces[0].network_ip)
 * group = gcp.compute.NetworkEndpointGroup("group",
 *     network=default_network.id,
 *     subnetwork=default_subnetwork.id,
 *     default_port=90,
 *     zone="us-central1-a")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var myImage = Output.Create(Gcp.Compute.GetImage.InvokeAsync(new Gcp.Compute.GetImageArgs
 *         {
 *             Family = "debian-9",
 *             Project = "debian-cloud",
 *         }));
 *         var defaultNetwork = new Gcp.Compute.Network("defaultNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var defaultSubnetwork = new Gcp.Compute.Subnetwork("defaultSubnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.0.1/16",
 *             Region = "us-central1",
 *             Network = defaultNetwork.Id,
 *         });
 *         var endpoint_instance = new Gcp.Compute.Instance("endpoint-instance", new Gcp.Compute.InstanceArgs
 *         {
 *             MachineType = "e2-medium",
 *             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
 *             {
 *                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
 *                 {
 *                     Image = myImage.Apply(myImage => myImage.SelfLink),
 *                 },
 *             },
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
 *                 {
 *                     Subnetwork = defaultSubnetwork.Id,
 *                     AccessConfigs = 
 *                     {
 *                         ,
 *                     },
 *                 },
 *             },
 *         });
 *         var default_endpoint = new Gcp.Compute.NetworkEndpoint("default-endpoint", new Gcp.Compute.NetworkEndpointArgs
 *         {
 *             NetworkEndpointGroup = google_compute_network_endpoint_group.Neg.Name,
 *             Instance = endpoint_instance.Name,
 *             Port = google_compute_network_endpoint_group.Neg.Default_port,
 *             IpAddress = endpoint_instance.NetworkInterfaces.Apply(networkInterfaces => networkInterfaces[0].NetworkIp),
 *         });
 *         var @group = new Gcp.Compute.NetworkEndpointGroup("group", new Gcp.Compute.NetworkEndpointGroupArgs
 *         {
 *             Network = defaultNetwork.Id,
 *             Subnetwork = defaultSubnetwork.Id,
 *             DefaultPort = 90,
 *             Zone = "us-central1-a",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "debian-9"
 * 		opt1 := "debian-cloud"
 * 		myImage, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
 * 			Family:  &opt0,
 * 			Project: &opt1,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.0.1/16"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     defaultNetwork.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewInstance(ctx, "endpoint-instance", &compute.InstanceArgs{
 * 			MachineType: pulumi.String("e2-medium"),
 * 			BootDisk: &compute.InstanceBootDiskArgs{
 * 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
 * 					Image: pulumi.String(myImage.SelfLink),
 * 				},
 * 			},
 * 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
 * 				&compute.InstanceNetworkInterfaceArgs{
 * 					Subnetwork: defaultSubnetwork.ID(),
 * 					AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
 * 						nil,
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetworkEndpoint(ctx, "default-endpoint", &compute.NetworkEndpointArgs{
 * 			NetworkEndpointGroup: pulumi.Any(google_compute_network_endpoint_group.Neg.Name),
 * 			Instance:             endpoint_instance.Name,
 * 			Port:                 pulumi.Any(google_compute_network_endpoint_group.Neg.Default_port),
 * 			IpAddress: endpoint_instance.NetworkInterfaces.ApplyT(func(networkInterfaces []compute.InstanceNetworkInterface) (string, error) {
 * 				return networkInterfaces[0].NetworkIp, nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetworkEndpointGroup(ctx, "group", &compute.NetworkEndpointGroupArgs{
 * 			Network:     defaultNetwork.ID(),
 * 			Subnetwork:  defaultSubnetwork.ID(),
 * 			DefaultPort: pulumi.Int(90),
 * 			Zone:        pulumi.String("us-central1-a"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * NetworkEndpoint can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/networkEndpoint:NetworkEndpoint default projects/{{project}}/zones/{{zone}}/networkEndpointGroups/{{network_endpoint_group}}/{{instance}}/{{ip_address}}/{{port}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/networkEndpoint:NetworkEndpoint default {{project}}/{{zone}}/{{network_endpoint_group}}/{{instance}}/{{ip_address}}/{{port}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/networkEndpoint:NetworkEndpoint default {{zone}}/{{network_endpoint_group}}/{{instance}}/{{ip_address}}/{{port}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/networkEndpoint:NetworkEndpoint default {{network_endpoint_group}}/{{instance}}/{{ip_address}}/{{port}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/networkEndpoint:NetworkEndpoint")
public class NetworkEndpoint extends io.pulumi.resources.CustomResource {
    /**
     * The name for a specific VM instance that the IP address belongs to.
     * This is required for network endpoints of type GCE_VM_IP_PORT.
     * The instance must be in the same zone of network endpoint group.
     * 
     */
    @Export(name="instance", type=String.class, parameters={})
    private Output<String> instance;

    /**
     * @return The name for a specific VM instance that the IP address belongs to.
     * This is required for network endpoints of type GCE_VM_IP_PORT.
     * The instance must be in the same zone of network endpoint group.
     * 
     */
    public Output<String> getInstance() {
        return this.instance;
    }
    /**
     * IPv4 address of network endpoint. The IP address must belong
     * to a VM in GCE (either the primary IP or as part of an aliased IP
     * range).
     * 
     */
    @Export(name="ipAddress", type=String.class, parameters={})
    private Output<String> ipAddress;

    /**
     * @return IPv4 address of network endpoint. The IP address must belong
     * to a VM in GCE (either the primary IP or as part of an aliased IP
     * range).
     * 
     */
    public Output<String> getIpAddress() {
        return this.ipAddress;
    }
    /**
     * The network endpoint group this endpoint is part of.
     * 
     */
    @Export(name="networkEndpointGroup", type=String.class, parameters={})
    private Output<String> networkEndpointGroup;

    /**
     * @return The network endpoint group this endpoint is part of.
     * 
     */
    public Output<String> getNetworkEndpointGroup() {
        return this.networkEndpointGroup;
    }
    /**
     * Port number of network endpoint.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output<Integer> port;

    /**
     * @return Port number of network endpoint.
     * 
     */
    public Output<Integer> getPort() {
        return this.port;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Zone where the containing network endpoint group is located.
     * 
     */
    @Export(name="zone", type=String.class, parameters={})
    private Output<String> zone;

    /**
     * @return Zone where the containing network endpoint group is located.
     * 
     */
    public Output<String> getZone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkEndpoint(String name) {
        this(name, NetworkEndpointArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkEndpoint(String name, NetworkEndpointArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkEndpoint(String name, NetworkEndpointArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/networkEndpoint:NetworkEndpoint", name, args == null ? NetworkEndpointArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private NetworkEndpoint(String name, Output<String> id, @Nullable NetworkEndpointState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/networkEndpoint:NetworkEndpoint", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkEndpoint get(String name, Output<String> id, @Nullable NetworkEndpointState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new NetworkEndpoint(name, id, state, options);
    }
}
