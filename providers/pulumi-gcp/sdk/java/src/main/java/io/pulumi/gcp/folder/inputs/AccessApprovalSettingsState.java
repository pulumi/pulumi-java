// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.folder.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.folder.inputs.AccessApprovalSettingsEnrolledServiceGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessApprovalSettingsState extends io.pulumi.resources.ResourceArgs {

    public static final AccessApprovalSettingsState Empty = new AccessApprovalSettingsState();

    /**
     * If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
     * of the Folder.
     * 
     */
    @InputImport(name="enrolledAncestor")
      private final @Nullable Input<Boolean> enrolledAncestor;

    public Input<Boolean> getEnrolledAncestor() {
        return this.enrolledAncestor == null ? Input.empty() : this.enrolledAncestor;
    }

    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     * 
     */
    @InputImport(name="enrolledServices")
      private final @Nullable Input<List<AccessApprovalSettingsEnrolledServiceGetArgs>> enrolledServices;

    public Input<List<AccessApprovalSettingsEnrolledServiceGetArgs>> getEnrolledServices() {
        return this.enrolledServices == null ? Input.empty() : this.enrolledServices;
    }

    /**
     * ID of the folder of the access approval settings.
     * 
     */
    @InputImport(name="folderId")
      private final @Nullable Input<String> folderId;

    public Input<String> getFolderId() {
        return this.folderId == null ? Input.empty() : this.folderId;
    }

    /**
     * The resource name of the settings. Format is "folders/{folder_id}/accessApprovalSettings"
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     * 
     */
    @InputImport(name="notificationEmails")
      private final @Nullable Input<List<String>> notificationEmails;

    public Input<List<String>> getNotificationEmails() {
        return this.notificationEmails == null ? Input.empty() : this.notificationEmails;
    }

    public AccessApprovalSettingsState(
        @Nullable Input<Boolean> enrolledAncestor,
        @Nullable Input<List<AccessApprovalSettingsEnrolledServiceGetArgs>> enrolledServices,
        @Nullable Input<String> folderId,
        @Nullable Input<String> name,
        @Nullable Input<List<String>> notificationEmails) {
        this.enrolledAncestor = enrolledAncestor;
        this.enrolledServices = enrolledServices;
        this.folderId = folderId;
        this.name = name;
        this.notificationEmails = notificationEmails;
    }

    private AccessApprovalSettingsState() {
        this.enrolledAncestor = Input.empty();
        this.enrolledServices = Input.empty();
        this.folderId = Input.empty();
        this.name = Input.empty();
        this.notificationEmails = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessApprovalSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> enrolledAncestor;
        private @Nullable Input<List<AccessApprovalSettingsEnrolledServiceGetArgs>> enrolledServices;
        private @Nullable Input<String> folderId;
        private @Nullable Input<String> name;
        private @Nullable Input<List<String>> notificationEmails;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessApprovalSettingsState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enrolledAncestor = defaults.enrolledAncestor;
    	      this.enrolledServices = defaults.enrolledServices;
    	      this.folderId = defaults.folderId;
    	      this.name = defaults.name;
    	      this.notificationEmails = defaults.notificationEmails;
        }

        public Builder enrolledAncestor(@Nullable Input<Boolean> enrolledAncestor) {
            this.enrolledAncestor = enrolledAncestor;
            return this;
        }

        public Builder enrolledAncestor(@Nullable Boolean enrolledAncestor) {
            this.enrolledAncestor = Input.ofNullable(enrolledAncestor);
            return this;
        }

        public Builder enrolledServices(@Nullable Input<List<AccessApprovalSettingsEnrolledServiceGetArgs>> enrolledServices) {
            this.enrolledServices = enrolledServices;
            return this;
        }

        public Builder enrolledServices(@Nullable List<AccessApprovalSettingsEnrolledServiceGetArgs> enrolledServices) {
            this.enrolledServices = Input.ofNullable(enrolledServices);
            return this;
        }

        public Builder folderId(@Nullable Input<String> folderId) {
            this.folderId = folderId;
            return this;
        }

        public Builder folderId(@Nullable String folderId) {
            this.folderId = Input.ofNullable(folderId);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder notificationEmails(@Nullable Input<List<String>> notificationEmails) {
            this.notificationEmails = notificationEmails;
            return this;
        }

        public Builder notificationEmails(@Nullable List<String> notificationEmails) {
            this.notificationEmails = Input.ofNullable(notificationEmails);
            return this;
        }
        public AccessApprovalSettingsState build() {
            return new AccessApprovalSettingsState(enrolledAncestor, enrolledServices, folderId, name, notificationEmails);
        }
    }
}
