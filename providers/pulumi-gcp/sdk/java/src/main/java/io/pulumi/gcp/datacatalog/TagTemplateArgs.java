// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.datacatalog.inputs.TagTemplateFieldArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TagTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final TagTemplateArgs Empty = new TagTemplateArgs();

    /**
     * The display name for this template.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     * 
     */
    @Import(name="fields", required=true)
      private final Output<List<TagTemplateFieldArgs>> fields;

    public Output<List<TagTemplateFieldArgs>> getFields() {
        return this.fields;
    }

    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     * 
     */
    @Import(name="forceDelete")
      private final @Nullable Output<Boolean> forceDelete;

    public Output<Boolean> getForceDelete() {
        return this.forceDelete == null ? Output.empty() : this.forceDelete;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Template location region.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Output.empty() : this.region;
    }

    /**
     * The id of the tag template to create.
     * 
     */
    @Import(name="tagTemplateId", required=true)
      private final Output<String> tagTemplateId;

    public Output<String> getTagTemplateId() {
        return this.tagTemplateId;
    }

    public TagTemplateArgs(
        @Nullable Output<String> displayName,
        Output<List<TagTemplateFieldArgs>> fields,
        @Nullable Output<Boolean> forceDelete,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        Output<String> tagTemplateId) {
        this.displayName = displayName;
        this.fields = Objects.requireNonNull(fields, "expected parameter 'fields' to be non-null");
        this.forceDelete = forceDelete;
        this.project = project;
        this.region = region;
        this.tagTemplateId = Objects.requireNonNull(tagTemplateId, "expected parameter 'tagTemplateId' to be non-null");
    }

    private TagTemplateArgs() {
        this.displayName = Output.empty();
        this.fields = Output.empty();
        this.forceDelete = Output.empty();
        this.project = Output.empty();
        this.region = Output.empty();
        this.tagTemplateId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TagTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private Output<List<TagTemplateFieldArgs>> fields;
        private @Nullable Output<Boolean> forceDelete;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private Output<String> tagTemplateId;

        public Builder() {
    	      // Empty
        }

        public Builder(TagTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.fields = defaults.fields;
    	      this.forceDelete = defaults.forceDelete;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.tagTemplateId = defaults.tagTemplateId;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder fields(Output<List<TagTemplateFieldArgs>> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }

        public Builder fields(List<TagTemplateFieldArgs> fields) {
            this.fields = Output.of(Objects.requireNonNull(fields));
            return this;
        }

        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            this.forceDelete = forceDelete;
            return this;
        }

        public Builder forceDelete(@Nullable Boolean forceDelete) {
            this.forceDelete = Output.ofNullable(forceDelete);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Output.ofNullable(region);
            return this;
        }

        public Builder tagTemplateId(Output<String> tagTemplateId) {
            this.tagTemplateId = Objects.requireNonNull(tagTemplateId);
            return this;
        }

        public Builder tagTemplateId(String tagTemplateId) {
            this.tagTemplateId = Output.of(Objects.requireNonNull(tagTemplateId));
            return this;
        }
        public TagTemplateArgs build() {
            return new TagTemplateArgs(displayName, fields, forceDelete, project, region, tagTemplateId);
        }
    }
}
