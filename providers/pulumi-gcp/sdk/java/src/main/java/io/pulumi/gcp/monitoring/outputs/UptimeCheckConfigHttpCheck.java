// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.monitoring.outputs.UptimeCheckConfigHttpCheckAuthInfo;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class UptimeCheckConfigHttpCheck {
    private final @Nullable UptimeCheckConfigHttpCheckAuthInfo authInfo;
    private final @Nullable String body;
    private final @Nullable String contentType;
    private final @Nullable Map<String,String> headers;
    private final @Nullable Boolean maskHeaders;
    private final @Nullable String path;
    private final @Nullable Integer port;
    private final @Nullable String requestMethod;
    private final @Nullable Boolean useSsl;
    private final @Nullable Boolean validateSsl;

    @OutputCustomType.Constructor({"authInfo","body","contentType","headers","maskHeaders","path","port","requestMethod","useSsl","validateSsl"})
    private UptimeCheckConfigHttpCheck(
        @Nullable UptimeCheckConfigHttpCheckAuthInfo authInfo,
        @Nullable String body,
        @Nullable String contentType,
        @Nullable Map<String,String> headers,
        @Nullable Boolean maskHeaders,
        @Nullable String path,
        @Nullable Integer port,
        @Nullable String requestMethod,
        @Nullable Boolean useSsl,
        @Nullable Boolean validateSsl) {
        this.authInfo = authInfo;
        this.body = body;
        this.contentType = contentType;
        this.headers = headers;
        this.maskHeaders = maskHeaders;
        this.path = path;
        this.port = port;
        this.requestMethod = requestMethod;
        this.useSsl = useSsl;
        this.validateSsl = validateSsl;
    }

    public Optional<UptimeCheckConfigHttpCheckAuthInfo> getAuthInfo() {
        return Optional.ofNullable(this.authInfo);
    }
    public Optional<String> getBody() {
        return Optional.ofNullable(this.body);
    }
    public Optional<String> getContentType() {
        return Optional.ofNullable(this.contentType);
    }
    public Map<String,String> getHeaders() {
        return this.headers == null ? Map.of() : this.headers;
    }
    public Optional<Boolean> getMaskHeaders() {
        return Optional.ofNullable(this.maskHeaders);
    }
    public Optional<String> getPath() {
        return Optional.ofNullable(this.path);
    }
    public Optional<Integer> getPort() {
        return Optional.ofNullable(this.port);
    }
    public Optional<String> getRequestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }
    public Optional<Boolean> getUseSsl() {
        return Optional.ofNullable(this.useSsl);
    }
    public Optional<Boolean> getValidateSsl() {
        return Optional.ofNullable(this.validateSsl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UptimeCheckConfigHttpCheck defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable UptimeCheckConfigHttpCheckAuthInfo authInfo;
        private @Nullable String body;
        private @Nullable String contentType;
        private @Nullable Map<String,String> headers;
        private @Nullable Boolean maskHeaders;
        private @Nullable String path;
        private @Nullable Integer port;
        private @Nullable String requestMethod;
        private @Nullable Boolean useSsl;
        private @Nullable Boolean validateSsl;

        public Builder() {
    	      // Empty
        }

        public Builder(UptimeCheckConfigHttpCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authInfo = defaults.authInfo;
    	      this.body = defaults.body;
    	      this.contentType = defaults.contentType;
    	      this.headers = defaults.headers;
    	      this.maskHeaders = defaults.maskHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.requestMethod = defaults.requestMethod;
    	      this.useSsl = defaults.useSsl;
    	      this.validateSsl = defaults.validateSsl;
        }

        public Builder setAuthInfo(@Nullable UptimeCheckConfigHttpCheckAuthInfo authInfo) {
            this.authInfo = authInfo;
            return this;
        }

        public Builder setBody(@Nullable String body) {
            this.body = body;
            return this;
        }

        public Builder setContentType(@Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder setHeaders(@Nullable Map<String,String> headers) {
            this.headers = headers;
            return this;
        }

        public Builder setMaskHeaders(@Nullable Boolean maskHeaders) {
            this.maskHeaders = maskHeaders;
            return this;
        }

        public Builder setPath(@Nullable String path) {
            this.path = path;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = port;
            return this;
        }

        public Builder setRequestMethod(@Nullable String requestMethod) {
            this.requestMethod = requestMethod;
            return this;
        }

        public Builder setUseSsl(@Nullable Boolean useSsl) {
            this.useSsl = useSsl;
            return this;
        }

        public Builder setValidateSsl(@Nullable Boolean validateSsl) {
            this.validateSsl = validateSsl;
            return this;
        }

        public UptimeCheckConfigHttpCheck build() {
            return new UptimeCheckConfigHttpCheck(authInfo, body, contentType, headers, maskHeaders, path, port, requestMethod, useSsl, validateSsl);
        }
    }
}
