// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudscheduler.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.cloudscheduler.outputs.JobHttpTargetOauthToken;
import io.pulumi.gcp.cloudscheduler.outputs.JobHttpTargetOidcToken;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class JobHttpTarget {
    /**
     * HTTP request body.
     * A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
     * It is an error to set body on a job with an incompatible HttpMethod.
     * A base64-encoded string.
     * 
     */
    private final @Nullable String body;
    /**
     * This map contains the header field names and values.
     * Repeated headers are not supported, but a header value can contain commas.
     * 
     */
    private final @Nullable Map<String,String> headers;
    /**
     * Which HTTP method to use for the request.
     * 
     */
    private final @Nullable String httpMethod;
    /**
     * Contains information needed for generating an OAuth token.
     * This type of authorization should be used when sending requests to a GCP endpoint.
     * Structure is documented below.
     * 
     */
    private final @Nullable JobHttpTargetOauthToken oauthToken;
    /**
     * Contains information needed for generating an OpenID Connect token.
     * This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
     * Structure is documented below.
     * 
     */
    private final @Nullable JobHttpTargetOidcToken oidcToken;
    /**
     * The full URI path that the request will be sent to.
     * 
     */
    private final String uri;

    @OutputCustomType.Constructor
    private JobHttpTarget(
        @OutputCustomType.Parameter("body") @Nullable String body,
        @OutputCustomType.Parameter("headers") @Nullable Map<String,String> headers,
        @OutputCustomType.Parameter("httpMethod") @Nullable String httpMethod,
        @OutputCustomType.Parameter("oauthToken") @Nullable JobHttpTargetOauthToken oauthToken,
        @OutputCustomType.Parameter("oidcToken") @Nullable JobHttpTargetOidcToken oidcToken,
        @OutputCustomType.Parameter("uri") String uri) {
        this.body = body;
        this.headers = headers;
        this.httpMethod = httpMethod;
        this.oauthToken = oauthToken;
        this.oidcToken = oidcToken;
        this.uri = uri;
    }

    /**
     * HTTP request body.
     * A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
     * It is an error to set body on a job with an incompatible HttpMethod.
     * A base64-encoded string.
     * 
    */
    public Optional<String> getBody() {
        return Optional.ofNullable(this.body);
    }
    /**
     * This map contains the header field names and values.
     * Repeated headers are not supported, but a header value can contain commas.
     * 
    */
    public Map<String,String> getHeaders() {
        return this.headers == null ? Map.of() : this.headers;
    }
    /**
     * Which HTTP method to use for the request.
     * 
    */
    public Optional<String> getHttpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }
    /**
     * Contains information needed for generating an OAuth token.
     * This type of authorization should be used when sending requests to a GCP endpoint.
     * Structure is documented below.
     * 
    */
    public Optional<JobHttpTargetOauthToken> getOauthToken() {
        return Optional.ofNullable(this.oauthToken);
    }
    /**
     * Contains information needed for generating an OpenID Connect token.
     * This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
     * Structure is documented below.
     * 
    */
    public Optional<JobHttpTargetOidcToken> getOidcToken() {
        return Optional.ofNullable(this.oidcToken);
    }
    /**
     * The full URI path that the request will be sent to.
     * 
    */
    public String getUri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobHttpTarget defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String body;
        private @Nullable Map<String,String> headers;
        private @Nullable String httpMethod;
        private @Nullable JobHttpTargetOauthToken oauthToken;
        private @Nullable JobHttpTargetOidcToken oidcToken;
        private String uri;

        public Builder() {
    	      // Empty
        }

        public Builder(JobHttpTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.headers = defaults.headers;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oidcToken = defaults.oidcToken;
    	      this.uri = defaults.uri;
        }

        public Builder body(@Nullable String body) {
            this.body = body;
            return this;
        }

        public Builder headers(@Nullable Map<String,String> headers) {
            this.headers = headers;
            return this;
        }

        public Builder httpMethod(@Nullable String httpMethod) {
            this.httpMethod = httpMethod;
            return this;
        }

        public Builder oauthToken(@Nullable JobHttpTargetOauthToken oauthToken) {
            this.oauthToken = oauthToken;
            return this;
        }

        public Builder oidcToken(@Nullable JobHttpTargetOidcToken oidcToken) {
            this.oidcToken = oidcToken;
            return this;
        }

        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public JobHttpTarget build() {
            return new JobHttpTarget(body, headers, httpMethod, oauthToken, oidcToken, uri);
        }
    }
}
