// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.logging.inputs.MetricBucketOptionsExplicitBucketsArgs;
import io.pulumi.gcp.logging.inputs.MetricBucketOptionsExponentialBucketsArgs;
import io.pulumi.gcp.logging.inputs.MetricBucketOptionsLinearBucketsArgs;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricBucketOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricBucketOptionsArgs Empty = new MetricBucketOptionsArgs();

    /**
     * Specifies a set of buckets with arbitrary widths.
     * Structure is documented below.
     * 
     */
    @InputImport(name="explicitBuckets")
      private final @Nullable Output<MetricBucketOptionsExplicitBucketsArgs> explicitBuckets;

    public Output<MetricBucketOptionsExplicitBucketsArgs> getExplicitBuckets() {
        return this.explicitBuckets == null ? Output.empty() : this.explicitBuckets;
    }

    /**
     * Specifies an exponential sequence of buckets that have a width that is proportional to the value of
     * the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @InputImport(name="exponentialBuckets")
      private final @Nullable Output<MetricBucketOptionsExponentialBucketsArgs> exponentialBuckets;

    public Output<MetricBucketOptionsExponentialBucketsArgs> getExponentialBuckets() {
        return this.exponentialBuckets == null ? Output.empty() : this.exponentialBuckets;
    }

    /**
     * Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
     * Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @InputImport(name="linearBuckets")
      private final @Nullable Output<MetricBucketOptionsLinearBucketsArgs> linearBuckets;

    public Output<MetricBucketOptionsLinearBucketsArgs> getLinearBuckets() {
        return this.linearBuckets == null ? Output.empty() : this.linearBuckets;
    }

    public MetricBucketOptionsArgs(
        @Nullable Output<MetricBucketOptionsExplicitBucketsArgs> explicitBuckets,
        @Nullable Output<MetricBucketOptionsExponentialBucketsArgs> exponentialBuckets,
        @Nullable Output<MetricBucketOptionsLinearBucketsArgs> linearBuckets) {
        this.explicitBuckets = explicitBuckets;
        this.exponentialBuckets = exponentialBuckets;
        this.linearBuckets = linearBuckets;
    }

    private MetricBucketOptionsArgs() {
        this.explicitBuckets = Output.empty();
        this.exponentialBuckets = Output.empty();
        this.linearBuckets = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricBucketOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<MetricBucketOptionsExplicitBucketsArgs> explicitBuckets;
        private @Nullable Output<MetricBucketOptionsExponentialBucketsArgs> exponentialBuckets;
        private @Nullable Output<MetricBucketOptionsLinearBucketsArgs> linearBuckets;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricBucketOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.explicitBuckets = defaults.explicitBuckets;
    	      this.exponentialBuckets = defaults.exponentialBuckets;
    	      this.linearBuckets = defaults.linearBuckets;
        }

        public Builder explicitBuckets(@Nullable Output<MetricBucketOptionsExplicitBucketsArgs> explicitBuckets) {
            this.explicitBuckets = explicitBuckets;
            return this;
        }

        public Builder explicitBuckets(@Nullable MetricBucketOptionsExplicitBucketsArgs explicitBuckets) {
            this.explicitBuckets = Output.ofNullable(explicitBuckets);
            return this;
        }

        public Builder exponentialBuckets(@Nullable Output<MetricBucketOptionsExponentialBucketsArgs> exponentialBuckets) {
            this.exponentialBuckets = exponentialBuckets;
            return this;
        }

        public Builder exponentialBuckets(@Nullable MetricBucketOptionsExponentialBucketsArgs exponentialBuckets) {
            this.exponentialBuckets = Output.ofNullable(exponentialBuckets);
            return this;
        }

        public Builder linearBuckets(@Nullable Output<MetricBucketOptionsLinearBucketsArgs> linearBuckets) {
            this.linearBuckets = linearBuckets;
            return this;
        }

        public Builder linearBuckets(@Nullable MetricBucketOptionsLinearBucketsArgs linearBuckets) {
            this.linearBuckets = Output.ofNullable(linearBuckets);
            return this;
        }
        public MetricBucketOptionsArgs build() {
            return new MetricBucketOptionsArgs(explicitBuckets, exponentialBuckets, linearBuckets);
        }
    }
}
