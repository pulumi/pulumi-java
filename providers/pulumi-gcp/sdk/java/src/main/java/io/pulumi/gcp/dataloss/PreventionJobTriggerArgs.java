// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataloss;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.dataloss.inputs.PreventionJobTriggerInspectJobArgs;
import io.pulumi.gcp.dataloss.inputs.PreventionJobTriggerTriggerArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PreventionJobTriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final PreventionJobTriggerArgs Empty = new PreventionJobTriggerArgs();

    /**
     * A description of the job trigger.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * User set display name of the job trigger.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Controls what and how to inspect for findings.
     * Structure is documented below.
     * 
     */
    @Import(name="inspectJob")
      private final @Nullable Output<PreventionJobTriggerInspectJobArgs> inspectJob;

    public Output<PreventionJobTriggerInspectJobArgs> inspectJob() {
        return this.inspectJob == null ? Codegen.empty() : this.inspectJob;
    }

    /**
     * The parent of the trigger, either in the format `projects/{{project}}`
     * or `projects/{{project}}/locations/{{location}}`
     * 
     */
    @Import(name="parent", required=true)
      private final Output<String> parent;

    public Output<String> parent() {
        return this.parent;
    }

    /**
     * Whether the trigger is currently active.
     * Default value is `HEALTHY`.
     * Possible values are `PAUSED`, `HEALTHY`, and `CANCELLED`.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * What event needs to occur for a new job to be started.
     * Structure is documented below.
     * 
     */
    @Import(name="triggers", required=true)
      private final Output<List<PreventionJobTriggerTriggerArgs>> triggers;

    public Output<List<PreventionJobTriggerTriggerArgs>> triggers() {
        return this.triggers;
    }

    public PreventionJobTriggerArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<PreventionJobTriggerInspectJobArgs> inspectJob,
        Output<String> parent,
        @Nullable Output<String> status,
        Output<List<PreventionJobTriggerTriggerArgs>> triggers) {
        this.description = description;
        this.displayName = displayName;
        this.inspectJob = inspectJob;
        this.parent = Objects.requireNonNull(parent, "expected parameter 'parent' to be non-null");
        this.status = status;
        this.triggers = Objects.requireNonNull(triggers, "expected parameter 'triggers' to be non-null");
    }

    private PreventionJobTriggerArgs() {
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.inspectJob = Codegen.empty();
        this.parent = Codegen.empty();
        this.status = Codegen.empty();
        this.triggers = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreventionJobTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<PreventionJobTriggerInspectJobArgs> inspectJob;
        private Output<String> parent;
        private @Nullable Output<String> status;
        private Output<List<PreventionJobTriggerTriggerArgs>> triggers;

        public Builder() {
    	      // Empty
        }

        public Builder(PreventionJobTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.inspectJob = defaults.inspectJob;
    	      this.parent = defaults.parent;
    	      this.status = defaults.status;
    	      this.triggers = defaults.triggers;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder inspectJob(@Nullable Output<PreventionJobTriggerInspectJobArgs> inspectJob) {
            this.inspectJob = inspectJob;
            return this;
        }
        public Builder inspectJob(@Nullable PreventionJobTriggerInspectJobArgs inspectJob) {
            this.inspectJob = Codegen.ofNullable(inspectJob);
            return this;
        }
        public Builder parent(Output<String> parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }
        public Builder parent(String parent) {
            this.parent = Output.of(Objects.requireNonNull(parent));
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder triggers(Output<List<PreventionJobTriggerTriggerArgs>> triggers) {
            this.triggers = Objects.requireNonNull(triggers);
            return this;
        }
        public Builder triggers(List<PreventionJobTriggerTriggerArgs> triggers) {
            this.triggers = Output.of(Objects.requireNonNull(triggers));
            return this;
        }
        public Builder triggers(PreventionJobTriggerTriggerArgs... triggers) {
            return triggers(List.of(triggers));
        }        public PreventionJobTriggerArgs build() {
            return new PreventionJobTriggerArgs(description, displayName, inspectJob, parent, status, triggers);
        }
    }
}
