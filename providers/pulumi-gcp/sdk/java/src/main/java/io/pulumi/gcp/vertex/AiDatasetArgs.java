// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.vertex;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.vertex.inputs.AiDatasetEncryptionSpecArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AiDatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final AiDatasetArgs Empty = new AiDatasetArgs();

    @InputImport(name="displayName", required=true)
    private final Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName;
    }

    @InputImport(name="encryptionSpec")
    private final @Nullable Input<AiDatasetEncryptionSpecArgs> encryptionSpec;

    public Input<AiDatasetEncryptionSpecArgs> getEncryptionSpec() {
        return this.encryptionSpec == null ? Input.empty() : this.encryptionSpec;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="metadataSchemaUri", required=true)
    private final Input<String> metadataSchemaUri;

    public Input<String> getMetadataSchemaUri() {
        return this.metadataSchemaUri;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    public AiDatasetArgs(
        Input<String> displayName,
        @Nullable Input<AiDatasetEncryptionSpecArgs> encryptionSpec,
        @Nullable Input<Map<String,String>> labels,
        Input<String> metadataSchemaUri,
        @Nullable Input<String> project,
        @Nullable Input<String> region) {
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.encryptionSpec = encryptionSpec;
        this.labels = labels;
        this.metadataSchemaUri = Objects.requireNonNull(metadataSchemaUri, "expected parameter 'metadataSchemaUri' to be non-null");
        this.project = project;
        this.region = region;
    }

    private AiDatasetArgs() {
        this.displayName = Input.empty();
        this.encryptionSpec = Input.empty();
        this.labels = Input.empty();
        this.metadataSchemaUri = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> displayName;
        private @Nullable Input<AiDatasetEncryptionSpecArgs> encryptionSpec;
        private @Nullable Input<Map<String,String>> labels;
        private Input<String> metadataSchemaUri;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;

        public Builder() {
    	      // Empty
        }

        public Builder(AiDatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.encryptionSpec = defaults.encryptionSpec;
    	      this.labels = defaults.labels;
    	      this.metadataSchemaUri = defaults.metadataSchemaUri;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
        }

        public Builder setDisplayName(Input<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Input.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder setEncryptionSpec(@Nullable Input<AiDatasetEncryptionSpecArgs> encryptionSpec) {
            this.encryptionSpec = encryptionSpec;
            return this;
        }

        public Builder setEncryptionSpec(@Nullable AiDatasetEncryptionSpecArgs encryptionSpec) {
            this.encryptionSpec = Input.ofNullable(encryptionSpec);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMetadataSchemaUri(Input<String> metadataSchemaUri) {
            this.metadataSchemaUri = Objects.requireNonNull(metadataSchemaUri);
            return this;
        }

        public Builder setMetadataSchemaUri(String metadataSchemaUri) {
            this.metadataSchemaUri = Input.of(Objects.requireNonNull(metadataSchemaUri));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public AiDatasetArgs build() {
            return new AiDatasetArgs(displayName, encryptionSpec, labels, metadataSchemaUri, project, region);
        }
    }
}
