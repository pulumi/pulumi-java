// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.iap;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppEngineVersionIamPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppEngineVersionIamPolicyArgs Empty = new AppEngineVersionIamPolicyArgs();

    @InputImport(name="appId", required=true)
    private final Input<String> appId;

    public Input<String> getAppId() {
        return this.appId;
    }

    @InputImport(name="policyData", required=true)
    private final Input<String> policyData;

    public Input<String> getPolicyData() {
        return this.policyData;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="service", required=true)
    private final Input<String> service;

    public Input<String> getService() {
        return this.service;
    }

    @InputImport(name="versionId", required=true)
    private final Input<String> versionId;

    public Input<String> getVersionId() {
        return this.versionId;
    }

    public AppEngineVersionIamPolicyArgs(
        Input<String> appId,
        Input<String> policyData,
        @Nullable Input<String> project,
        Input<String> service,
        Input<String> versionId) {
        this.appId = Objects.requireNonNull(appId, "expected parameter 'appId' to be non-null");
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
        this.project = project;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.versionId = Objects.requireNonNull(versionId, "expected parameter 'versionId' to be non-null");
    }

    private AppEngineVersionIamPolicyArgs() {
        this.appId = Input.empty();
        this.policyData = Input.empty();
        this.project = Input.empty();
        this.service = Input.empty();
        this.versionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppEngineVersionIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> appId;
        private Input<String> policyData;
        private @Nullable Input<String> project;
        private Input<String> service;
        private Input<String> versionId;

        public Builder() {
    	      // Empty
        }

        public Builder(AppEngineVersionIamPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
    	      this.service = defaults.service;
    	      this.versionId = defaults.versionId;
        }

        public Builder setAppId(Input<String> appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }

        public Builder setAppId(String appId) {
            this.appId = Input.of(Objects.requireNonNull(appId));
            return this;
        }

        public Builder setPolicyData(Input<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }

        public Builder setPolicyData(String policyData) {
            this.policyData = Input.of(Objects.requireNonNull(policyData));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setService(Input<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }

        public Builder setService(String service) {
            this.service = Input.of(Objects.requireNonNull(service));
            return this;
        }

        public Builder setVersionId(Input<String> versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }

        public Builder setVersionId(String versionId) {
            this.versionId = Input.of(Objects.requireNonNull(versionId));
            return this;
        }

        public AppEngineVersionIamPolicyArgs build() {
            return new AppEngineVersionIamPolicyArgs(appId, policyData, project, service, versionId);
        }
    }
}
