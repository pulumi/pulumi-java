// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.gameservices;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.gameservices.GameServerDeploymentRolloutArgs;
import io.pulumi.gcp.gameservices.inputs.GameServerDeploymentRolloutState;
import io.pulumi.gcp.gameservices.outputs.GameServerDeploymentRolloutGameServerConfigOverride;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This represents the rollout state. This is part of the game server
 * deployment.
 * 
 * To get more information about GameServerDeploymentRollout, see:
 * 
 * * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/GameServerDeploymentRollout)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/game-servers/docs)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Game Service Deployment Rollout Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const defaultGameServerDeployment = new gcp.gameservices.GameServerDeployment("defaultGameServerDeployment", {
 *     deploymentId: "tf-test-deployment",
 *     description: "a deployment description",
 * });
 * const defaultGameServerConfig = new gcp.gameservices.GameServerConfig("defaultGameServerConfig", {
 *     configId: "tf-test-config",
 *     deploymentId: defaultGameServerDeployment.deploymentId,
 *     description: "a config description",
 *     fleetConfigs: [{
 *         name: "some-non-guid",
 *         fleetSpec: JSON.stringify({
 *             replicas: 1,
 *             scheduling: "Packed",
 *             template: {
 *                 metadata: {
 *                     name: "tf-test-game-server-template",
 *                 },
 *                 spec: {
 *                     ports: [{
 *                         name: "default",
 *                         portPolicy: "Dynamic",
 *                         containerPort: 7654,
 *                         protocol: "UDP",
 *                     }],
 *                     template: {
 *                         spec: {
 *                             containers: [{
 *                                 name: "simple-udp-server",
 *                                 image: "gcr.io/agones-images/udp-server:0.14",
 *                             }],
 *                         },
 *                     },
 *                 },
 *             },
 *         }),
 *     }],
 * });
 * const defaultGameServerDeploymentRollout = new gcp.gameservices.GameServerDeploymentRollout("defaultGameServerDeploymentRollout", {
 *     deploymentId: defaultGameServerDeployment.deploymentId,
 *     defaultGameServerConfig: defaultGameServerConfig.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_gcp as gcp
 * 
 * default_game_server_deployment = gcp.gameservices.GameServerDeployment("defaultGameServerDeployment",
 *     deployment_id="tf-test-deployment",
 *     description="a deployment description")
 * default_game_server_config = gcp.gameservices.GameServerConfig("defaultGameServerConfig",
 *     config_id="tf-test-config",
 *     deployment_id=default_game_server_deployment.deployment_id,
 *     description="a config description",
 *     fleet_configs=[gcp.gameservices.GameServerConfigFleetConfigArgs(
 *         name="some-non-guid",
 *         fleet_spec=json.dumps({
 *             "replicas": 1,
 *             "scheduling": "Packed",
 *             "template": {
 *                 "metadata": {
 *                     "name": "tf-test-game-server-template",
 *                 },
 *                 "spec": {
 *                     "ports": [{
 *                         "name": "default",
 *                         "portPolicy": "Dynamic",
 *                         "containerPort": 7654,
 *                         "protocol": "UDP",
 *                     }],
 *                     "template": {
 *                         "spec": {
 *                             "containers": [{
 *                                 "name": "simple-udp-server",
 *                                 "image": "gcr.io/agones-images/udp-server:0.14",
 *                             }],
 *                         },
 *                     },
 *                 },
 *             },
 *         }),
 *     )])
 * default_game_server_deployment_rollout = gcp.gameservices.GameServerDeploymentRollout("defaultGameServerDeploymentRollout",
 *     deployment_id=default_game_server_deployment.deployment_id,
 *     default_game_server_config=default_game_server_config.name)
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var defaultGameServerDeployment = new Gcp.GameServices.GameServerDeployment("defaultGameServerDeployment", new Gcp.GameServices.GameServerDeploymentArgs
 *         {
 *             DeploymentId = "tf-test-deployment",
 *             Description = "a deployment description",
 *         });
 *         var defaultGameServerConfig = new Gcp.GameServices.GameServerConfig("defaultGameServerConfig", new Gcp.GameServices.GameServerConfigArgs
 *         {
 *             ConfigId = "tf-test-config",
 *             DeploymentId = defaultGameServerDeployment.DeploymentId,
 *             Description = "a config description",
 *             FleetConfigs = 
 *             {
 *                 new Gcp.GameServices.Inputs.GameServerConfigFleetConfigArgs
 *                 {
 *                     Name = "some-non-guid",
 *                     FleetSpec = JsonSerializer.Serialize(new Dictionary<string, object?>
 *                     {
 *                         { "replicas", 1 },
 *                         { "scheduling", "Packed" },
 *                         { "template", new Dictionary<string, object?>
 *                         {
 *                             { "metadata", new Dictionary<string, object?>
 *                             {
 *                                 { "name", "tf-test-game-server-template" },
 *                             } },
 *                             { "spec", new Dictionary<string, object?>
 *                             {
 *                                 { "ports", new[]
 *                                     {
 *                                         new Dictionary<string, object?>
 *                                         {
 *                                             { "name", "default" },
 *                                             { "portPolicy", "Dynamic" },
 *                                             { "containerPort", 7654 },
 *                                             { "protocol", "UDP" },
 *                                         },
 *                                     }
 *                                  },
 *                                 { "template", new Dictionary<string, object?>
 *                                 {
 *                                     { "spec", new Dictionary<string, object?>
 *                                     {
 *                                         { "containers", new[]
 *                                             {
 *                                                 new Dictionary<string, object?>
 *                                                 {
 *                                                     { "name", "simple-udp-server" },
 *                                                     { "image", "gcr.io/agones-images/udp-server:0.14" },
 *                                                 },
 *                                             }
 *                                          },
 *                                     } },
 *                                 } },
 *                             } },
 *                         } },
 *                     }),
 *                 },
 *             },
 *         });
 *         var defaultGameServerDeploymentRollout = new Gcp.GameServices.GameServerDeploymentRollout("defaultGameServerDeploymentRollout", new Gcp.GameServices.GameServerDeploymentRolloutArgs
 *         {
 *             DeploymentId = defaultGameServerDeployment.DeploymentId,
 *             DefaultGameServerConfig = defaultGameServerConfig.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/json"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gameservices"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultGameServerDeployment, err := gameservices.NewGameServerDeployment(ctx, "defaultGameServerDeployment", &gameservices.GameServerDeploymentArgs{
 * 			DeploymentId: pulumi.String("tf-test-deployment"),
 * 			Description:  pulumi.String("a deployment description"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"replicas":   1,
 * 			"scheduling": "Packed",
 * 			"template": map[string]interface{}{
 * 				"metadata": map[string]interface{}{
 * 					"name": "tf-test-game-server-template",
 * 				},
 * 				"spec": map[string]interface{}{
 * 					"ports": []map[string]interface{}{
 * 						map[string]interface{}{
 * 							"name":          "default",
 * 							"portPolicy":    "Dynamic",
 * 							"containerPort": 7654,
 * 							"protocol":      "UDP",
 * 						},
 * 					},
 * 					"template": map[string]interface{}{
 * 						"spec": map[string]interface{}{
 * 							"containers": []map[string]interface{}{
 * 								map[string]interface{}{
 * 									"name":  "simple-udp-server",
 * 									"image": "gcr.io/agones-images/udp-server:0.14",
 * 								},
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		defaultGameServerConfig, err := gameservices.NewGameServerConfig(ctx, "defaultGameServerConfig", &gameservices.GameServerConfigArgs{
 * 			ConfigId:     pulumi.String("tf-test-config"),
 * 			DeploymentId: defaultGameServerDeployment.DeploymentId,
 * 			Description:  pulumi.String("a config description"),
 * 			FleetConfigs: gameservices.GameServerConfigFleetConfigArray{
 * 				&gameservices.GameServerConfigFleetConfigArgs{
 * 					Name:      pulumi.String("some-non-guid"),
 * 					FleetSpec: pulumi.String(json0),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = gameservices.NewGameServerDeploymentRollout(ctx, "defaultGameServerDeploymentRollout", &gameservices.GameServerDeploymentRolloutArgs{
 * 			DeploymentId:            defaultGameServerDeployment.DeploymentId,
 * 			DefaultGameServerConfig: defaultGameServerConfig.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * GameServerDeploymentRollout can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default projects/{{project}}/locations/global/gameServerDeployments/{{deployment_id}}/rollout
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{project}}/{{deployment_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{deployment_id}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout")
public class GameServerDeploymentRollout extends io.pulumi.resources.CustomResource {
    /**
     * This field points to the game server config that is
     * applied by default to all realms and clusters. For example,
     * `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
     * 
     */
    @Export(name="defaultGameServerConfig", type=String.class, parameters={})
    private Output<String> defaultGameServerConfig;

    /**
     * @return This field points to the game server config that is
     * applied by default to all realms and clusters. For example,
     * `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
     * 
     */
    public Output<String> getDefaultGameServerConfig() {
        return this.defaultGameServerConfig;
    }
    /**
     * The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
     * 
     */
    @Export(name="deploymentId", type=String.class, parameters={})
    private Output<String> deploymentId;

    /**
     * @return The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
     * 
     */
    public Output<String> getDeploymentId() {
        return this.deploymentId;
    }
    /**
     * The game_server_config_overrides contains the per game server config
     * overrides. The overrides are processed in the order they are listed. As
     * soon as a match is found for a cluster, the rest of the list is not
     * processed.
     * Structure is documented below.
     * 
     */
    @Export(name="gameServerConfigOverrides", type=List.class, parameters={GameServerDeploymentRolloutGameServerConfigOverride.class})
    private Output</* @Nullable */ List<GameServerDeploymentRolloutGameServerConfigOverride>> gameServerConfigOverrides;

    /**
     * @return The game_server_config_overrides contains the per game server config
     * overrides. The overrides are processed in the order they are listed. As
     * soon as a match is found for a cluster, the rest of the list is not
     * processed.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<GameServerDeploymentRolloutGameServerConfigOverride>> getGameServerConfigOverrides() {
        return this.gameServerConfigOverrides;
    }
    /**
     * The resource id of the game server deployment eg:
     * 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource id of the game server deployment eg:
     * 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GameServerDeploymentRollout(String name) {
        this(name, GameServerDeploymentRolloutArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GameServerDeploymentRollout(String name, GameServerDeploymentRolloutArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GameServerDeploymentRollout(String name, GameServerDeploymentRolloutArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, args == null ? GameServerDeploymentRolloutArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private GameServerDeploymentRollout(String name, Output<String> id, @Nullable GameServerDeploymentRolloutState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GameServerDeploymentRollout get(String name, Output<String> id, @Nullable GameServerDeploymentRolloutState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new GameServerDeploymentRollout(name, id, state, options);
    }
}
