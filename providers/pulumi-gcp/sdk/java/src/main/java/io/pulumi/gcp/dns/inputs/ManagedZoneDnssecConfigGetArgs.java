// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dns.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.dns.inputs.ManagedZoneDnssecConfigDefaultKeySpecGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedZoneDnssecConfigGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedZoneDnssecConfigGetArgs Empty = new ManagedZoneDnssecConfigGetArgs();

    /**
     * Specifies parameters that will be used for generating initial DnsKeys
     * for this ManagedZone. If you provide a spec for keySigning or zoneSigning,
     * you must also provide one for the other.
     * default_key_specs can only be updated when the state is `off`.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultKeySpecs")
      private final @Nullable Output<List<ManagedZoneDnssecConfigDefaultKeySpecGetArgs>> defaultKeySpecs;

    public Output<List<ManagedZoneDnssecConfigDefaultKeySpecGetArgs>> defaultKeySpecs() {
        return this.defaultKeySpecs == null ? Codegen.empty() : this.defaultKeySpecs;
    }

    /**
     * Identifies what kind of resource this is
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * Specifies the mechanism used to provide authenticated denial-of-existence responses.
     * non_existence can only be updated when the state is `off`.
     * Possible values are `nsec` and `nsec3`.
     * 
     */
    @Import(name="nonExistence")
      private final @Nullable Output<String> nonExistence;

    public Output<String> nonExistence() {
        return this.nonExistence == null ? Codegen.empty() : this.nonExistence;
    }

    /**
     * Specifies whether DNSSEC is enabled, and what mode it is in
     * Possible values are `off`, `on`, and `transfer`.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    public ManagedZoneDnssecConfigGetArgs(
        @Nullable Output<List<ManagedZoneDnssecConfigDefaultKeySpecGetArgs>> defaultKeySpecs,
        @Nullable Output<String> kind,
        @Nullable Output<String> nonExistence,
        @Nullable Output<String> state) {
        this.defaultKeySpecs = defaultKeySpecs;
        this.kind = kind;
        this.nonExistence = nonExistence;
        this.state = state;
    }

    private ManagedZoneDnssecConfigGetArgs() {
        this.defaultKeySpecs = Codegen.empty();
        this.kind = Codegen.empty();
        this.nonExistence = Codegen.empty();
        this.state = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedZoneDnssecConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ManagedZoneDnssecConfigDefaultKeySpecGetArgs>> defaultKeySpecs;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> nonExistence;
        private @Nullable Output<String> state;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedZoneDnssecConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultKeySpecs = defaults.defaultKeySpecs;
    	      this.kind = defaults.kind;
    	      this.nonExistence = defaults.nonExistence;
    	      this.state = defaults.state;
        }

        public Builder defaultKeySpecs(@Nullable Output<List<ManagedZoneDnssecConfigDefaultKeySpecGetArgs>> defaultKeySpecs) {
            this.defaultKeySpecs = defaultKeySpecs;
            return this;
        }
        public Builder defaultKeySpecs(@Nullable List<ManagedZoneDnssecConfigDefaultKeySpecGetArgs> defaultKeySpecs) {
            this.defaultKeySpecs = Codegen.ofNullable(defaultKeySpecs);
            return this;
        }
        public Builder defaultKeySpecs(ManagedZoneDnssecConfigDefaultKeySpecGetArgs... defaultKeySpecs) {
            return defaultKeySpecs(List.of(defaultKeySpecs));
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder nonExistence(@Nullable Output<String> nonExistence) {
            this.nonExistence = nonExistence;
            return this;
        }
        public Builder nonExistence(@Nullable String nonExistence) {
            this.nonExistence = Codegen.ofNullable(nonExistence);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }        public ManagedZoneDnssecConfigGetArgs build() {
            return new ManagedZoneDnssecConfigGetArgs(defaultKeySpecs, kind, nonExistence, state);
        }
    }
}
