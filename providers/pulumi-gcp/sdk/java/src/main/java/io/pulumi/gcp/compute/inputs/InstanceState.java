// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.InstanceAdvancedMachineFeaturesGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceAttachedDiskGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceBootDiskGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceConfidentialInstanceConfigGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceGuestAcceleratorGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceNetworkPerformanceConfigGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceReservationAffinityGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceSchedulingGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceScratchDiskGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceServiceAccountGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceShieldedInstanceConfigGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceState extends io.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Configure Nested Virtualisation and Simultaneous Hyper Threading  on this VM. Structure is documented below
     * 
     */
    @InputImport(name="advancedMachineFeatures")
    private final @Nullable Input<InstanceAdvancedMachineFeaturesGetArgs> advancedMachineFeatures;

    public Input<InstanceAdvancedMachineFeaturesGetArgs> getAdvancedMachineFeatures() {
        return this.advancedMachineFeatures == null ? Input.empty() : this.advancedMachineFeatures;
    }

    /**
     * If true, allows this prvider to stop the instance to update its properties.
     * If you try to update a property that requires stopping the instance without setting this field, the update will fail.
     * 
     */
    @InputImport(name="allowStoppingForUpdate")
    private final @Nullable Input<Boolean> allowStoppingForUpdate;

    public Input<Boolean> getAllowStoppingForUpdate() {
        return this.allowStoppingForUpdate == null ? Input.empty() : this.allowStoppingForUpdate;
    }

    /**
     * Additional disks to attach to the instance. Can be repeated multiple times for multiple disks. Structure is documented below.
     * 
     */
    @InputImport(name="attachedDisks")
    private final @Nullable Input<List<InstanceAttachedDiskGetArgs>> attachedDisks;

    public Input<List<InstanceAttachedDiskGetArgs>> getAttachedDisks() {
        return this.attachedDisks == null ? Input.empty() : this.attachedDisks;
    }

    /**
     * The boot disk for the instance.
     * Structure is documented below.
     * 
     */
    @InputImport(name="bootDisk")
    private final @Nullable Input<InstanceBootDiskGetArgs> bootDisk;

    public Input<InstanceBootDiskGetArgs> getBootDisk() {
        return this.bootDisk == null ? Input.empty() : this.bootDisk;
    }

    /**
     * Whether to allow sending and receiving of
     * packets with non-matching source or destination IPs.
     * This defaults to false.
     * 
     */
    @InputImport(name="canIpForward")
    private final @Nullable Input<Boolean> canIpForward;

    public Input<Boolean> getCanIpForward() {
        return this.canIpForward == null ? Input.empty() : this.canIpForward;
    }

    /**
     * Enable [Confidential Mode](https://cloud.google.com/compute/confidential-vm/docs/about-cvm) on this VM. Structure is documented below
     * 
     */
    @InputImport(name="confidentialInstanceConfig")
    private final @Nullable Input<InstanceConfidentialInstanceConfigGetArgs> confidentialInstanceConfig;

    public Input<InstanceConfidentialInstanceConfigGetArgs> getConfidentialInstanceConfig() {
        return this.confidentialInstanceConfig == null ? Input.empty() : this.confidentialInstanceConfig;
    }

    /**
     * The CPU platform used by this instance.
     * 
     */
    @InputImport(name="cpuPlatform")
    private final @Nullable Input<String> cpuPlatform;

    public Input<String> getCpuPlatform() {
        return this.cpuPlatform == null ? Input.empty() : this.cpuPlatform;
    }

    /**
     * Current status of the instance.
     * 
     */
    @InputImport(name="currentStatus")
    private final @Nullable Input<String> currentStatus;

    public Input<String> getCurrentStatus() {
        return this.currentStatus == null ? Input.empty() : this.currentStatus;
    }

    /**
     * Enable deletion protection on this instance. Defaults to false.
     * **Note:** you must disable deletion protection before removing the resource (e.g., via `pulumi destroy`), or the instance cannot be deleted and the provider run will not complete successfully.
     * 
     */
    @InputImport(name="deletionProtection")
    private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * A brief description of this resource.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Desired status of the instance. Either
     * `"RUNNING"` or `"TERMINATED"`.
     * 
     */
    @InputImport(name="desiredStatus")
    private final @Nullable Input<String> desiredStatus;

    public Input<String> getDesiredStatus() {
        return this.desiredStatus == null ? Input.empty() : this.desiredStatus;
    }

    /**
     * Enable [Virtual Displays](https://cloud.google.com/compute/docs/instances/enable-instance-virtual-display#verify_display_driver) on this instance.
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @InputImport(name="enableDisplay")
    private final @Nullable Input<Boolean> enableDisplay;

    public Input<Boolean> getEnableDisplay() {
        return this.enableDisplay == null ? Input.empty() : this.enableDisplay;
    }

    /**
     * List of the type and count of accelerator cards attached to the instance. Structure documented below.
     * **Note:** GPU accelerators can only be used with `on_host_maintenance` option set to TERMINATE.
     * 
     */
    @InputImport(name="guestAccelerators")
    private final @Nullable Input<List<InstanceGuestAcceleratorGetArgs>> guestAccelerators;

    public Input<List<InstanceGuestAcceleratorGetArgs>> getGuestAccelerators() {
        return this.guestAccelerators == null ? Input.empty() : this.guestAccelerators;
    }

    /**
     * A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid.
     * Valid format is a series of labels 1-63 characters long matching the regular expression `a-z`, concatenated with periods.
     * The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.
     * 
     */
    @InputImport(name="hostname")
    private final @Nullable Input<String> hostname;

    public Input<String> getHostname() {
        return this.hostname == null ? Input.empty() : this.hostname;
    }

    /**
     * The server-assigned unique identifier of this instance.
     * 
     */
    @InputImport(name="instanceId")
    private final @Nullable Input<String> instanceId;

    public Input<String> getInstanceId() {
        return this.instanceId == null ? Input.empty() : this.instanceId;
    }

    /**
     * The unique fingerprint of the labels.
     * 
     */
    @InputImport(name="labelFingerprint")
    private final @Nullable Input<String> labelFingerprint;

    public Input<String> getLabelFingerprint() {
        return this.labelFingerprint == null ? Input.empty() : this.labelFingerprint;
    }

    /**
     * A map of key/value label pairs to assign to the instance.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The machine type to create.
     * 
     */
    @InputImport(name="machineType")
    private final @Nullable Input<String> machineType;

    public Input<String> getMachineType() {
        return this.machineType == null ? Input.empty() : this.machineType;
    }

    /**
     * Metadata key/value pairs to make available from
     * within the instance. Ssh keys attached in the Cloud Console will be removed.
     * Add them to your config in order to keep them attached to your instance.
     * 
     */
    @InputImport(name="metadata")
    private final @Nullable Input<Map<String,String>> metadata;

    public Input<Map<String,String>> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * The unique fingerprint of the metadata.
     * 
     */
    @InputImport(name="metadataFingerprint")
    private final @Nullable Input<String> metadataFingerprint;

    public Input<String> getMetadataFingerprint() {
        return this.metadataFingerprint == null ? Input.empty() : this.metadataFingerprint;
    }

    /**
     * An alternative to using the
     * startup-script metadata key, except this one forces the instance to be recreated
     * (thus re-running the script) if it is changed. This replaces the startup-script
     * metadata key on the created instance and thus the two mechanisms are not
     * allowed to be used simultaneously.  Users are free to use either mechanism - the
     * only distinction is that this separate attribute will cause a recreate on
     * modification.  On import, `metadata_startup_script` will not be set - if you
     * choose to specify it you will see a diff immediately after import causing a
     * destroy/recreate operation. If importing an instance and specifying this value
     * is desired, you will need to modify your state file.
     * 
     */
    @InputImport(name="metadataStartupScript")
    private final @Nullable Input<String> metadataStartupScript;

    public Input<String> getMetadataStartupScript() {
        return this.metadataStartupScript == null ? Input.empty() : this.metadataStartupScript;
    }

    /**
     * Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as
     * `Intel Haswell` or `Intel Skylake`. See the complete list [here](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @InputImport(name="minCpuPlatform")
    private final @Nullable Input<String> minCpuPlatform;

    public Input<String> getMinCpuPlatform() {
        return this.minCpuPlatform == null ? Input.empty() : this.minCpuPlatform;
    }

    /**
     * A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Networks to attach to the instance. This can
     * be specified multiple times. Structure is documented below.
     * 
     */
    @InputImport(name="networkInterfaces")
    private final @Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces;

    public Input<List<InstanceNetworkInterfaceGetArgs>> getNetworkInterfaces() {
        return this.networkInterfaces == null ? Input.empty() : this.networkInterfaces;
    }

    /**
     * Configures network performance settings for the instance. Structure is
     * documented below. **Note**: `machine_type` must be a [supported type](https://cloud.google.com/compute/docs/networking/configure-vm-with-high-bandwidth-configuration),
     * the `image` used must include the [`GVNIC`](https://cloud.google.com/compute/docs/networking/using-gvnic#create-instance-gvnic-image)
     * in `guest-os-features`, and `network_interface.0.nic-type` must be `GVNIC`
     * in order for this setting to take effect.
     * 
     */
    @InputImport(name="networkPerformanceConfig")
    private final @Nullable Input<InstanceNetworkPerformanceConfigGetArgs> networkPerformanceConfig;

    public Input<InstanceNetworkPerformanceConfigGetArgs> getNetworkPerformanceConfig() {
        return this.networkPerformanceConfig == null ? Input.empty() : this.networkPerformanceConfig;
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Specifies the reservations that this instance can consume from.
     * Structure is documented below.
     * 
     */
    @InputImport(name="reservationAffinity")
    private final @Nullable Input<InstanceReservationAffinityGetArgs> reservationAffinity;

    public Input<InstanceReservationAffinityGetArgs> getReservationAffinity() {
        return this.reservationAffinity == null ? Input.empty() : this.reservationAffinity;
    }

    /**
     * -- A list of short names or self_links of resource policies to attach to the instance. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.
     * 
     */
    @InputImport(name="resourcePolicies")
    private final @Nullable Input<String> resourcePolicies;

    public Input<String> getResourcePolicies() {
        return this.resourcePolicies == null ? Input.empty() : this.resourcePolicies;
    }

    /**
     * The scheduling strategy to use. More details about
     * this configuration option are detailed below.
     * 
     */
    @InputImport(name="scheduling")
    private final @Nullable Input<InstanceSchedulingGetArgs> scheduling;

    public Input<InstanceSchedulingGetArgs> getScheduling() {
        return this.scheduling == null ? Input.empty() : this.scheduling;
    }

    /**
     * Scratch disks to attach to the instance. This can be
     * specified multiple times for multiple scratch disks. Structure is documented below.
     * 
     */
    @InputImport(name="scratchDisks")
    private final @Nullable Input<List<InstanceScratchDiskGetArgs>> scratchDisks;

    public Input<List<InstanceScratchDiskGetArgs>> getScratchDisks() {
        return this.scratchDisks == null ? Input.empty() : this.scratchDisks;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @InputImport(name="selfLink")
    private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    /**
     * Service account to attach to the instance.
     * Structure is documented below.
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @InputImport(name="serviceAccount")
    private final @Nullable Input<InstanceServiceAccountGetArgs> serviceAccount;

    public Input<InstanceServiceAccountGetArgs> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    /**
     * Enable [Shielded VM](https://cloud.google.com/security/shielded-cloud/shielded-vm) on this instance. Shielded VM provides verifiable integrity to prevent against malware and rootkits. Defaults to disabled. Structure is documented below.
     * **Note**: `shielded_instance_config` can only be used with boot images with shielded vm support. See the complete list [here](https://cloud.google.com/compute/docs/images#shielded-images).
     * **Note**: `allow_stopping_for_update` must be set to true or your instance must have a `desired_status` of `TERMINATED` in order to update this field.
     * 
     */
    @InputImport(name="shieldedInstanceConfig")
    private final @Nullable Input<InstanceShieldedInstanceConfigGetArgs> shieldedInstanceConfig;

    public Input<InstanceShieldedInstanceConfigGetArgs> getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Input.empty() : this.shieldedInstanceConfig;
    }

    /**
     * A list of network tags to attach to the instance.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<String>> tags;

    public Input<List<String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The unique fingerprint of the tags.
     * 
     */
    @InputImport(name="tagsFingerprint")
    private final @Nullable Input<String> tagsFingerprint;

    public Input<String> getTagsFingerprint() {
        return this.tagsFingerprint == null ? Input.empty() : this.tagsFingerprint;
    }

    /**
     * The zone that the machine should be created in. If it is not provided, the provider zone is used.
     * 
     */
    @InputImport(name="zone")
    private final @Nullable Input<String> zone;

    public Input<String> getZone() {
        return this.zone == null ? Input.empty() : this.zone;
    }

    public InstanceState(
        @Nullable Input<InstanceAdvancedMachineFeaturesGetArgs> advancedMachineFeatures,
        @Nullable Input<Boolean> allowStoppingForUpdate,
        @Nullable Input<List<InstanceAttachedDiskGetArgs>> attachedDisks,
        @Nullable Input<InstanceBootDiskGetArgs> bootDisk,
        @Nullable Input<Boolean> canIpForward,
        @Nullable Input<InstanceConfidentialInstanceConfigGetArgs> confidentialInstanceConfig,
        @Nullable Input<String> cpuPlatform,
        @Nullable Input<String> currentStatus,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> description,
        @Nullable Input<String> desiredStatus,
        @Nullable Input<Boolean> enableDisplay,
        @Nullable Input<List<InstanceGuestAcceleratorGetArgs>> guestAccelerators,
        @Nullable Input<String> hostname,
        @Nullable Input<String> instanceId,
        @Nullable Input<String> labelFingerprint,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> machineType,
        @Nullable Input<Map<String,String>> metadata,
        @Nullable Input<String> metadataFingerprint,
        @Nullable Input<String> metadataStartupScript,
        @Nullable Input<String> minCpuPlatform,
        @Nullable Input<String> name,
        @Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces,
        @Nullable Input<InstanceNetworkPerformanceConfigGetArgs> networkPerformanceConfig,
        @Nullable Input<String> project,
        @Nullable Input<InstanceReservationAffinityGetArgs> reservationAffinity,
        @Nullable Input<String> resourcePolicies,
        @Nullable Input<InstanceSchedulingGetArgs> scheduling,
        @Nullable Input<List<InstanceScratchDiskGetArgs>> scratchDisks,
        @Nullable Input<String> selfLink,
        @Nullable Input<InstanceServiceAccountGetArgs> serviceAccount,
        @Nullable Input<InstanceShieldedInstanceConfigGetArgs> shieldedInstanceConfig,
        @Nullable Input<List<String>> tags,
        @Nullable Input<String> tagsFingerprint,
        @Nullable Input<String> zone) {
        this.advancedMachineFeatures = advancedMachineFeatures;
        this.allowStoppingForUpdate = allowStoppingForUpdate;
        this.attachedDisks = attachedDisks;
        this.bootDisk = bootDisk;
        this.canIpForward = canIpForward;
        this.confidentialInstanceConfig = confidentialInstanceConfig;
        this.cpuPlatform = cpuPlatform;
        this.currentStatus = currentStatus;
        this.deletionProtection = deletionProtection;
        this.description = description;
        this.desiredStatus = desiredStatus;
        this.enableDisplay = enableDisplay;
        this.guestAccelerators = guestAccelerators;
        this.hostname = hostname;
        this.instanceId = instanceId;
        this.labelFingerprint = labelFingerprint;
        this.labels = labels;
        this.machineType = machineType;
        this.metadata = metadata;
        this.metadataFingerprint = metadataFingerprint;
        this.metadataStartupScript = metadataStartupScript;
        this.minCpuPlatform = minCpuPlatform;
        this.name = name;
        this.networkInterfaces = networkInterfaces;
        this.networkPerformanceConfig = networkPerformanceConfig;
        this.project = project;
        this.reservationAffinity = reservationAffinity;
        this.resourcePolicies = resourcePolicies;
        this.scheduling = scheduling;
        this.scratchDisks = scratchDisks;
        this.selfLink = selfLink;
        this.serviceAccount = serviceAccount;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.tags = tags;
        this.tagsFingerprint = tagsFingerprint;
        this.zone = zone;
    }

    private InstanceState() {
        this.advancedMachineFeatures = Input.empty();
        this.allowStoppingForUpdate = Input.empty();
        this.attachedDisks = Input.empty();
        this.bootDisk = Input.empty();
        this.canIpForward = Input.empty();
        this.confidentialInstanceConfig = Input.empty();
        this.cpuPlatform = Input.empty();
        this.currentStatus = Input.empty();
        this.deletionProtection = Input.empty();
        this.description = Input.empty();
        this.desiredStatus = Input.empty();
        this.enableDisplay = Input.empty();
        this.guestAccelerators = Input.empty();
        this.hostname = Input.empty();
        this.instanceId = Input.empty();
        this.labelFingerprint = Input.empty();
        this.labels = Input.empty();
        this.machineType = Input.empty();
        this.metadata = Input.empty();
        this.metadataFingerprint = Input.empty();
        this.metadataStartupScript = Input.empty();
        this.minCpuPlatform = Input.empty();
        this.name = Input.empty();
        this.networkInterfaces = Input.empty();
        this.networkPerformanceConfig = Input.empty();
        this.project = Input.empty();
        this.reservationAffinity = Input.empty();
        this.resourcePolicies = Input.empty();
        this.scheduling = Input.empty();
        this.scratchDisks = Input.empty();
        this.selfLink = Input.empty();
        this.serviceAccount = Input.empty();
        this.shieldedInstanceConfig = Input.empty();
        this.tags = Input.empty();
        this.tagsFingerprint = Input.empty();
        this.zone = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<InstanceAdvancedMachineFeaturesGetArgs> advancedMachineFeatures;
        private @Nullable Input<Boolean> allowStoppingForUpdate;
        private @Nullable Input<List<InstanceAttachedDiskGetArgs>> attachedDisks;
        private @Nullable Input<InstanceBootDiskGetArgs> bootDisk;
        private @Nullable Input<Boolean> canIpForward;
        private @Nullable Input<InstanceConfidentialInstanceConfigGetArgs> confidentialInstanceConfig;
        private @Nullable Input<String> cpuPlatform;
        private @Nullable Input<String> currentStatus;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> description;
        private @Nullable Input<String> desiredStatus;
        private @Nullable Input<Boolean> enableDisplay;
        private @Nullable Input<List<InstanceGuestAcceleratorGetArgs>> guestAccelerators;
        private @Nullable Input<String> hostname;
        private @Nullable Input<String> instanceId;
        private @Nullable Input<String> labelFingerprint;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> machineType;
        private @Nullable Input<Map<String,String>> metadata;
        private @Nullable Input<String> metadataFingerprint;
        private @Nullable Input<String> metadataStartupScript;
        private @Nullable Input<String> minCpuPlatform;
        private @Nullable Input<String> name;
        private @Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces;
        private @Nullable Input<InstanceNetworkPerformanceConfigGetArgs> networkPerformanceConfig;
        private @Nullable Input<String> project;
        private @Nullable Input<InstanceReservationAffinityGetArgs> reservationAffinity;
        private @Nullable Input<String> resourcePolicies;
        private @Nullable Input<InstanceSchedulingGetArgs> scheduling;
        private @Nullable Input<List<InstanceScratchDiskGetArgs>> scratchDisks;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<InstanceServiceAccountGetArgs> serviceAccount;
        private @Nullable Input<InstanceShieldedInstanceConfigGetArgs> shieldedInstanceConfig;
        private @Nullable Input<List<String>> tags;
        private @Nullable Input<String> tagsFingerprint;
        private @Nullable Input<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedMachineFeatures = defaults.advancedMachineFeatures;
    	      this.allowStoppingForUpdate = defaults.allowStoppingForUpdate;
    	      this.attachedDisks = defaults.attachedDisks;
    	      this.bootDisk = defaults.bootDisk;
    	      this.canIpForward = defaults.canIpForward;
    	      this.confidentialInstanceConfig = defaults.confidentialInstanceConfig;
    	      this.cpuPlatform = defaults.cpuPlatform;
    	      this.currentStatus = defaults.currentStatus;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.desiredStatus = defaults.desiredStatus;
    	      this.enableDisplay = defaults.enableDisplay;
    	      this.guestAccelerators = defaults.guestAccelerators;
    	      this.hostname = defaults.hostname;
    	      this.instanceId = defaults.instanceId;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.metadataFingerprint = defaults.metadataFingerprint;
    	      this.metadataStartupScript = defaults.metadataStartupScript;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.name = defaults.name;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.networkPerformanceConfig = defaults.networkPerformanceConfig;
    	      this.project = defaults.project;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.scheduling = defaults.scheduling;
    	      this.scratchDisks = defaults.scratchDisks;
    	      this.selfLink = defaults.selfLink;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.tags = defaults.tags;
    	      this.tagsFingerprint = defaults.tagsFingerprint;
    	      this.zone = defaults.zone;
        }

        public Builder setAdvancedMachineFeatures(@Nullable Input<InstanceAdvancedMachineFeaturesGetArgs> advancedMachineFeatures) {
            this.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }

        public Builder setAdvancedMachineFeatures(@Nullable InstanceAdvancedMachineFeaturesGetArgs advancedMachineFeatures) {
            this.advancedMachineFeatures = Input.ofNullable(advancedMachineFeatures);
            return this;
        }

        public Builder setAllowStoppingForUpdate(@Nullable Input<Boolean> allowStoppingForUpdate) {
            this.allowStoppingForUpdate = allowStoppingForUpdate;
            return this;
        }

        public Builder setAllowStoppingForUpdate(@Nullable Boolean allowStoppingForUpdate) {
            this.allowStoppingForUpdate = Input.ofNullable(allowStoppingForUpdate);
            return this;
        }

        public Builder setAttachedDisks(@Nullable Input<List<InstanceAttachedDiskGetArgs>> attachedDisks) {
            this.attachedDisks = attachedDisks;
            return this;
        }

        public Builder setAttachedDisks(@Nullable List<InstanceAttachedDiskGetArgs> attachedDisks) {
            this.attachedDisks = Input.ofNullable(attachedDisks);
            return this;
        }

        public Builder setBootDisk(@Nullable Input<InstanceBootDiskGetArgs> bootDisk) {
            this.bootDisk = bootDisk;
            return this;
        }

        public Builder setBootDisk(@Nullable InstanceBootDiskGetArgs bootDisk) {
            this.bootDisk = Input.ofNullable(bootDisk);
            return this;
        }

        public Builder setCanIpForward(@Nullable Input<Boolean> canIpForward) {
            this.canIpForward = canIpForward;
            return this;
        }

        public Builder setCanIpForward(@Nullable Boolean canIpForward) {
            this.canIpForward = Input.ofNullable(canIpForward);
            return this;
        }

        public Builder setConfidentialInstanceConfig(@Nullable Input<InstanceConfidentialInstanceConfigGetArgs> confidentialInstanceConfig) {
            this.confidentialInstanceConfig = confidentialInstanceConfig;
            return this;
        }

        public Builder setConfidentialInstanceConfig(@Nullable InstanceConfidentialInstanceConfigGetArgs confidentialInstanceConfig) {
            this.confidentialInstanceConfig = Input.ofNullable(confidentialInstanceConfig);
            return this;
        }

        public Builder setCpuPlatform(@Nullable Input<String> cpuPlatform) {
            this.cpuPlatform = cpuPlatform;
            return this;
        }

        public Builder setCpuPlatform(@Nullable String cpuPlatform) {
            this.cpuPlatform = Input.ofNullable(cpuPlatform);
            return this;
        }

        public Builder setCurrentStatus(@Nullable Input<String> currentStatus) {
            this.currentStatus = currentStatus;
            return this;
        }

        public Builder setCurrentStatus(@Nullable String currentStatus) {
            this.currentStatus = Input.ofNullable(currentStatus);
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDesiredStatus(@Nullable Input<String> desiredStatus) {
            this.desiredStatus = desiredStatus;
            return this;
        }

        public Builder setDesiredStatus(@Nullable String desiredStatus) {
            this.desiredStatus = Input.ofNullable(desiredStatus);
            return this;
        }

        public Builder setEnableDisplay(@Nullable Input<Boolean> enableDisplay) {
            this.enableDisplay = enableDisplay;
            return this;
        }

        public Builder setEnableDisplay(@Nullable Boolean enableDisplay) {
            this.enableDisplay = Input.ofNullable(enableDisplay);
            return this;
        }

        public Builder setGuestAccelerators(@Nullable Input<List<InstanceGuestAcceleratorGetArgs>> guestAccelerators) {
            this.guestAccelerators = guestAccelerators;
            return this;
        }

        public Builder setGuestAccelerators(@Nullable List<InstanceGuestAcceleratorGetArgs> guestAccelerators) {
            this.guestAccelerators = Input.ofNullable(guestAccelerators);
            return this;
        }

        public Builder setHostname(@Nullable Input<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder setHostname(@Nullable String hostname) {
            this.hostname = Input.ofNullable(hostname);
            return this;
        }

        public Builder setInstanceId(@Nullable Input<String> instanceId) {
            this.instanceId = instanceId;
            return this;
        }

        public Builder setInstanceId(@Nullable String instanceId) {
            this.instanceId = Input.ofNullable(instanceId);
            return this;
        }

        public Builder setLabelFingerprint(@Nullable Input<String> labelFingerprint) {
            this.labelFingerprint = labelFingerprint;
            return this;
        }

        public Builder setLabelFingerprint(@Nullable String labelFingerprint) {
            this.labelFingerprint = Input.ofNullable(labelFingerprint);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMachineType(@Nullable Input<String> machineType) {
            this.machineType = machineType;
            return this;
        }

        public Builder setMachineType(@Nullable String machineType) {
            this.machineType = Input.ofNullable(machineType);
            return this;
        }

        public Builder setMetadata(@Nullable Input<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable Map<String,String> metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setMetadataFingerprint(@Nullable Input<String> metadataFingerprint) {
            this.metadataFingerprint = metadataFingerprint;
            return this;
        }

        public Builder setMetadataFingerprint(@Nullable String metadataFingerprint) {
            this.metadataFingerprint = Input.ofNullable(metadataFingerprint);
            return this;
        }

        public Builder setMetadataStartupScript(@Nullable Input<String> metadataStartupScript) {
            this.metadataStartupScript = metadataStartupScript;
            return this;
        }

        public Builder setMetadataStartupScript(@Nullable String metadataStartupScript) {
            this.metadataStartupScript = Input.ofNullable(metadataStartupScript);
            return this;
        }

        public Builder setMinCpuPlatform(@Nullable Input<String> minCpuPlatform) {
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }

        public Builder setMinCpuPlatform(@Nullable String minCpuPlatform) {
            this.minCpuPlatform = Input.ofNullable(minCpuPlatform);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNetworkInterfaces(@Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces) {
            this.networkInterfaces = networkInterfaces;
            return this;
        }

        public Builder setNetworkInterfaces(@Nullable List<InstanceNetworkInterfaceGetArgs> networkInterfaces) {
            this.networkInterfaces = Input.ofNullable(networkInterfaces);
            return this;
        }

        public Builder setNetworkPerformanceConfig(@Nullable Input<InstanceNetworkPerformanceConfigGetArgs> networkPerformanceConfig) {
            this.networkPerformanceConfig = networkPerformanceConfig;
            return this;
        }

        public Builder setNetworkPerformanceConfig(@Nullable InstanceNetworkPerformanceConfigGetArgs networkPerformanceConfig) {
            this.networkPerformanceConfig = Input.ofNullable(networkPerformanceConfig);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setReservationAffinity(@Nullable Input<InstanceReservationAffinityGetArgs> reservationAffinity) {
            this.reservationAffinity = reservationAffinity;
            return this;
        }

        public Builder setReservationAffinity(@Nullable InstanceReservationAffinityGetArgs reservationAffinity) {
            this.reservationAffinity = Input.ofNullable(reservationAffinity);
            return this;
        }

        public Builder setResourcePolicies(@Nullable Input<String> resourcePolicies) {
            this.resourcePolicies = resourcePolicies;
            return this;
        }

        public Builder setResourcePolicies(@Nullable String resourcePolicies) {
            this.resourcePolicies = Input.ofNullable(resourcePolicies);
            return this;
        }

        public Builder setScheduling(@Nullable Input<InstanceSchedulingGetArgs> scheduling) {
            this.scheduling = scheduling;
            return this;
        }

        public Builder setScheduling(@Nullable InstanceSchedulingGetArgs scheduling) {
            this.scheduling = Input.ofNullable(scheduling);
            return this;
        }

        public Builder setScratchDisks(@Nullable Input<List<InstanceScratchDiskGetArgs>> scratchDisks) {
            this.scratchDisks = scratchDisks;
            return this;
        }

        public Builder setScratchDisks(@Nullable List<InstanceScratchDiskGetArgs> scratchDisks) {
            this.scratchDisks = Input.ofNullable(scratchDisks);
            return this;
        }

        public Builder setSelfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder setSelfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder setServiceAccount(@Nullable Input<InstanceServiceAccountGetArgs> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder setServiceAccount(@Nullable InstanceServiceAccountGetArgs serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable Input<InstanceShieldedInstanceConfigGetArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable InstanceShieldedInstanceConfigGetArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Input.ofNullable(shieldedInstanceConfig);
            return this;
        }

        public Builder setTags(@Nullable Input<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsFingerprint(@Nullable Input<String> tagsFingerprint) {
            this.tagsFingerprint = tagsFingerprint;
            return this;
        }

        public Builder setTagsFingerprint(@Nullable String tagsFingerprint) {
            this.tagsFingerprint = Input.ofNullable(tagsFingerprint);
            return this;
        }

        public Builder setZone(@Nullable Input<String> zone) {
            this.zone = zone;
            return this;
        }

        public Builder setZone(@Nullable String zone) {
            this.zone = Input.ofNullable(zone);
            return this;
        }

        public InstanceState build() {
            return new InstanceState(advancedMachineFeatures, allowStoppingForUpdate, attachedDisks, bootDisk, canIpForward, confidentialInstanceConfig, cpuPlatform, currentStatus, deletionProtection, description, desiredStatus, enableDisplay, guestAccelerators, hostname, instanceId, labelFingerprint, labels, machineType, metadata, metadataFingerprint, metadataStartupScript, minCpuPlatform, name, networkInterfaces, networkPerformanceConfig, project, reservationAffinity, resourcePolicies, scheduling, scratchDisks, selfLink, serviceAccount, shieldedInstanceConfig, tags, tagsFingerprint, zone);
        }
    }
}
