// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseInstanceReplicaConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceReplicaConfigurationGetArgs Empty = new DatabaseInstanceReplicaConfigurationGetArgs();

    /**
     * PEM representation of the trusted CA's x509
     * certificate.
     * 
     */
    @Import(name="caCertificate")
      private final @Nullable Output<String> caCertificate;

    public Output<String> getCaCertificate() {
        return this.caCertificate == null ? Output.empty() : this.caCertificate;
    }

    /**
     * PEM representation of the replica's x509
     * certificate.
     * 
     */
    @Import(name="clientCertificate")
      private final @Nullable Output<String> clientCertificate;

    public Output<String> getClientCertificate() {
        return this.clientCertificate == null ? Output.empty() : this.clientCertificate;
    }

    /**
     * PEM representation of the replica's private key. The
     * corresponding public key in encoded in the `client_certificate`.
     * 
     */
    @Import(name="clientKey")
      private final @Nullable Output<String> clientKey;

    public Output<String> getClientKey() {
        return this.clientKey == null ? Output.empty() : this.clientKey;
    }

    /**
     * The number of seconds
     * between connect retries.
     * 
     */
    @Import(name="connectRetryInterval")
      private final @Nullable Output<Integer> connectRetryInterval;

    public Output<Integer> getConnectRetryInterval() {
        return this.connectRetryInterval == null ? Output.empty() : this.connectRetryInterval;
    }

    /**
     * Path to a SQL file in GCS from which replica
     * instances are created. Format is `gs://bucket/filename`.
     * 
     */
    @Import(name="dumpFilePath")
      private final @Nullable Output<String> dumpFilePath;

    public Output<String> getDumpFilePath() {
        return this.dumpFilePath == null ? Output.empty() : this.dumpFilePath;
    }

    /**
     * Specifies if the replica is the failover target.
     * If the field is set to true the replica will be designated as a failover replica.
     * If the master instance fails, the replica instance will be promoted as
     * the new master instance.
     * 
     */
    @Import(name="failoverTarget")
      private final @Nullable Output<Boolean> failoverTarget;

    public Output<Boolean> getFailoverTarget() {
        return this.failoverTarget == null ? Output.empty() : this.failoverTarget;
    }

    /**
     * Time in ms between replication
     * heartbeats.
     * 
     */
    @Import(name="masterHeartbeatPeriod")
      private final @Nullable Output<Integer> masterHeartbeatPeriod;

    public Output<Integer> getMasterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod == null ? Output.empty() : this.masterHeartbeatPeriod;
    }

    /**
     * Password for the replication connection.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> getPassword() {
        return this.password == null ? Output.empty() : this.password;
    }

    @Import(name="sslCipher")
      private final @Nullable Output<String> sslCipher;

    public Output<String> getSslCipher() {
        return this.sslCipher == null ? Output.empty() : this.sslCipher;
    }

    /**
     * Username for replication connection.
     * 
     */
    @Import(name="username")
      private final @Nullable Output<String> username;

    public Output<String> getUsername() {
        return this.username == null ? Output.empty() : this.username;
    }

    /**
     * True if the master's common name
     * value is checked during the SSL handshake.
     * 
     */
    @Import(name="verifyServerCertificate")
      private final @Nullable Output<Boolean> verifyServerCertificate;

    public Output<Boolean> getVerifyServerCertificate() {
        return this.verifyServerCertificate == null ? Output.empty() : this.verifyServerCertificate;
    }

    public DatabaseInstanceReplicaConfigurationGetArgs(
        @Nullable Output<String> caCertificate,
        @Nullable Output<String> clientCertificate,
        @Nullable Output<String> clientKey,
        @Nullable Output<Integer> connectRetryInterval,
        @Nullable Output<String> dumpFilePath,
        @Nullable Output<Boolean> failoverTarget,
        @Nullable Output<Integer> masterHeartbeatPeriod,
        @Nullable Output<String> password,
        @Nullable Output<String> sslCipher,
        @Nullable Output<String> username,
        @Nullable Output<Boolean> verifyServerCertificate) {
        this.caCertificate = caCertificate;
        this.clientCertificate = clientCertificate;
        this.clientKey = clientKey;
        this.connectRetryInterval = connectRetryInterval;
        this.dumpFilePath = dumpFilePath;
        this.failoverTarget = failoverTarget;
        this.masterHeartbeatPeriod = masterHeartbeatPeriod;
        this.password = password;
        this.sslCipher = sslCipher;
        this.username = username;
        this.verifyServerCertificate = verifyServerCertificate;
    }

    private DatabaseInstanceReplicaConfigurationGetArgs() {
        this.caCertificate = Output.empty();
        this.clientCertificate = Output.empty();
        this.clientKey = Output.empty();
        this.connectRetryInterval = Output.empty();
        this.dumpFilePath = Output.empty();
        this.failoverTarget = Output.empty();
        this.masterHeartbeatPeriod = Output.empty();
        this.password = Output.empty();
        this.sslCipher = Output.empty();
        this.username = Output.empty();
        this.verifyServerCertificate = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceReplicaConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> caCertificate;
        private @Nullable Output<String> clientCertificate;
        private @Nullable Output<String> clientKey;
        private @Nullable Output<Integer> connectRetryInterval;
        private @Nullable Output<String> dumpFilePath;
        private @Nullable Output<Boolean> failoverTarget;
        private @Nullable Output<Integer> masterHeartbeatPeriod;
        private @Nullable Output<String> password;
        private @Nullable Output<String> sslCipher;
        private @Nullable Output<String> username;
        private @Nullable Output<Boolean> verifyServerCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceReplicaConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            this.caCertificate = caCertificate;
            return this;
        }
        public Builder caCertificate(@Nullable String caCertificate) {
            this.caCertificate = Output.ofNullable(caCertificate);
            return this;
        }
        public Builder clientCertificate(@Nullable Output<String> clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = Output.ofNullable(clientCertificate);
            return this;
        }
        public Builder clientKey(@Nullable Output<String> clientKey) {
            this.clientKey = clientKey;
            return this;
        }
        public Builder clientKey(@Nullable String clientKey) {
            this.clientKey = Output.ofNullable(clientKey);
            return this;
        }
        public Builder connectRetryInterval(@Nullable Output<Integer> connectRetryInterval) {
            this.connectRetryInterval = connectRetryInterval;
            return this;
        }
        public Builder connectRetryInterval(@Nullable Integer connectRetryInterval) {
            this.connectRetryInterval = Output.ofNullable(connectRetryInterval);
            return this;
        }
        public Builder dumpFilePath(@Nullable Output<String> dumpFilePath) {
            this.dumpFilePath = dumpFilePath;
            return this;
        }
        public Builder dumpFilePath(@Nullable String dumpFilePath) {
            this.dumpFilePath = Output.ofNullable(dumpFilePath);
            return this;
        }
        public Builder failoverTarget(@Nullable Output<Boolean> failoverTarget) {
            this.failoverTarget = failoverTarget;
            return this;
        }
        public Builder failoverTarget(@Nullable Boolean failoverTarget) {
            this.failoverTarget = Output.ofNullable(failoverTarget);
            return this;
        }
        public Builder masterHeartbeatPeriod(@Nullable Output<Integer> masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = masterHeartbeatPeriod;
            return this;
        }
        public Builder masterHeartbeatPeriod(@Nullable Integer masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = Output.ofNullable(masterHeartbeatPeriod);
            return this;
        }
        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Output.ofNullable(password);
            return this;
        }
        public Builder sslCipher(@Nullable Output<String> sslCipher) {
            this.sslCipher = sslCipher;
            return this;
        }
        public Builder sslCipher(@Nullable String sslCipher) {
            this.sslCipher = Output.ofNullable(sslCipher);
            return this;
        }
        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = Output.ofNullable(username);
            return this;
        }
        public Builder verifyServerCertificate(@Nullable Output<Boolean> verifyServerCertificate) {
            this.verifyServerCertificate = verifyServerCertificate;
            return this;
        }
        public Builder verifyServerCertificate(@Nullable Boolean verifyServerCertificate) {
            this.verifyServerCertificate = Output.ofNullable(verifyServerCertificate);
            return this;
        }        public DatabaseInstanceReplicaConfigurationGetArgs build() {
            return new DatabaseInstanceReplicaConfigurationGetArgs(caCertificate, clientCertificate, clientKey, connectRetryInterval, dumpFilePath, failoverTarget, masterHeartbeatPeriod, password, sslCipher, username, verifyServerCertificate);
        }
    }
}
