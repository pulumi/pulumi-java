// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.compute.inputs.ManagedSslCertificateManagedArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedSslCertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedSslCertificateArgs Empty = new ManagedSslCertificateArgs();

    /**
     * The unique identifier for the resource.
     * 
     */
    @Import(name="certificateId")
      private final @Nullable Output<Integer> certificateId;

    public Output<Integer> getCertificateId() {
        return this.certificateId == null ? Output.empty() : this.certificateId;
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Properties relevant to a managed certificate.  These will be used if the
     * certificate is managed (as indicated by a value of `MANAGED` in `type`).
     * Structure is documented below.
     * 
     */
    @Import(name="managed")
      private final @Nullable Output<ManagedSslCertificateManagedArgs> managed;

    public Output<ManagedSslCertificateManagedArgs> getManaged() {
        return this.managed == null ? Output.empty() : this.managed;
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Enum field whose value is always `MANAGED` - used to signal to the API
     * which type this is.
     * Default value is `MANAGED`.
     * Possible values are `MANAGED`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public ManagedSslCertificateArgs(
        @Nullable Output<Integer> certificateId,
        @Nullable Output<String> description,
        @Nullable Output<ManagedSslCertificateManagedArgs> managed,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> type) {
        this.certificateId = certificateId;
        this.description = description;
        this.managed = managed;
        this.name = name;
        this.project = project;
        this.type = type;
    }

    private ManagedSslCertificateArgs() {
        this.certificateId = Output.empty();
        this.description = Output.empty();
        this.managed = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedSslCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> certificateId;
        private @Nullable Output<String> description;
        private @Nullable Output<ManagedSslCertificateManagedArgs> managed;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedSslCertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.description = defaults.description;
    	      this.managed = defaults.managed;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.type = defaults.type;
        }

        public Builder certificateId(@Nullable Output<Integer> certificateId) {
            this.certificateId = certificateId;
            return this;
        }

        public Builder certificateId(@Nullable Integer certificateId) {
            this.certificateId = Output.ofNullable(certificateId);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder managed(@Nullable Output<ManagedSslCertificateManagedArgs> managed) {
            this.managed = managed;
            return this;
        }

        public Builder managed(@Nullable ManagedSslCertificateManagedArgs managed) {
            this.managed = Output.ofNullable(managed);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public ManagedSslCertificateArgs build() {
            return new ManagedSslCertificateArgs(certificateId, description, managed, name, project, type);
        }
    }
}
