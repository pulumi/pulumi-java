// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.monitoring.DashboardArgs;
import io.pulumi.gcp.monitoring.inputs.DashboardState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.
 * 
 * To get more information about Dashboards, see:
 * 
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/dashboards)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Monitoring Dashboard Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const dashboard = new gcp.monitoring.Dashboard("dashboard", {
 *     dashboardJson: `{
 *   "displayName": "Demo Dashboard",
 *   "gridLayout": {
 *     "widgets": [
 *       {
 *         "blank": {}
 *       }
 *     ]
 *   }
 * }
 * 
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * dashboard = gcp.monitoring.Dashboard("dashboard", dashboard_json="""{
 *   "displayName": "Demo Dashboard",
 *   "gridLayout": {
 *     "widgets": [
 *       {
 *         "blank": {}
 *       }
 *     ]
 *   }
 * }
 * 
 * 
 * """)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var dashboard = new Gcp.Monitoring.Dashboard("dashboard", new Gcp.Monitoring.DashboardArgs
 *         {
 *             DashboardJson = @"{
 *   ""displayName"": ""Demo Dashboard"",
 *   ""gridLayout"": {
 *     ""widgets"": [
 *       {
 *         ""blank"": {}
 *       }
 *     ]
 *   }
 * }
 * 
 * 
 * ",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/monitoring"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := monitoring.NewDashboard(ctx, "dashboard", &monitoring.DashboardArgs{
 * 			DashboardJson: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"displayName\": \"Demo Dashboard\",\n", "  \"gridLayout\": {\n", "    \"widgets\": [\n", "      {\n", "        \"blank\": {}\n", "      }\n", "    ]\n", "  }\n", "}\n", "\n", "\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Monitoring Dashboard GridLayout
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const dashboard = new gcp.monitoring.Dashboard("dashboard", {
 *     dashboardJson: `{
 *   "displayName": "Grid Layout Example",
 *   "gridLayout": {
 *     "columns": "2",
 *     "widgets": [
 *       {
 *         "title": "Widget 1",
 *         "xyChart": {
 *           "dataSets": [{
 *             "timeSeriesQuery": {
 *               "timeSeriesFilter": {
 *                 "filter": "metric.type=\\"agent.googleapis.com/nginx/connections/accepted_count\\"",
 *                 "aggregation": {
 *                   "perSeriesAligner": "ALIGN_RATE"
 *                 }
 *               },
 *               "unitOverride": "1"
 *             },
 *             "plotType": "LINE"
 *           }],
 *           "timeshiftDuration": "0s",
 *           "yAxis": {
 *             "label": "y1Axis",
 *             "scale": "LINEAR"
 *           }
 *         }
 *       },
 *       {
 *         "text": {
 *           "content": "Widget 2",
 *           "format": "MARKDOWN"
 *         }
 *       },
 *       {
 *         "title": "Widget 3",
 *         "xyChart": {
 *           "dataSets": [{
 *             "timeSeriesQuery": {
 *               "timeSeriesFilter": {
 *                 "filter": "metric.type=\\"agent.googleapis.com/nginx/connections/accepted_count\\"",
 *                 "aggregation": {
 *                   "perSeriesAligner": "ALIGN_RATE"
 *                 }
 *               },
 *               "unitOverride": "1"
 *             },
 *             "plotType": "STACKED_BAR"
 *           }],
 *           "timeshiftDuration": "0s",
 *           "yAxis": {
 *             "label": "y1Axis",
 *             "scale": "LINEAR"
 *           }
 *         }
 *       }
 *     ]
 *   }
 * }
 * 
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * dashboard = gcp.monitoring.Dashboard("dashboard", dashboard_json="""{
 *   "displayName": "Grid Layout Example",
 *   "gridLayout": {
 *     "columns": "2",
 *     "widgets": [
 *       {
 *         "title": "Widget 1",
 *         "xyChart": {
 *           "dataSets": [{
 *             "timeSeriesQuery": {
 *               "timeSeriesFilter": {
 *                 "filter": "metric.type=\"agent.googleapis.com/nginx/connections/accepted_count\"",
 *                 "aggregation": {
 *                   "perSeriesAligner": "ALIGN_RATE"
 *                 }
 *               },
 *               "unitOverride": "1"
 *             },
 *             "plotType": "LINE"
 *           }],
 *           "timeshiftDuration": "0s",
 *           "yAxis": {
 *             "label": "y1Axis",
 *             "scale": "LINEAR"
 *           }
 *         }
 *       },
 *       {
 *         "text": {
 *           "content": "Widget 2",
 *           "format": "MARKDOWN"
 *         }
 *       },
 *       {
 *         "title": "Widget 3",
 *         "xyChart": {
 *           "dataSets": [{
 *             "timeSeriesQuery": {
 *               "timeSeriesFilter": {
 *                 "filter": "metric.type=\"agent.googleapis.com/nginx/connections/accepted_count\"",
 *                 "aggregation": {
 *                   "perSeriesAligner": "ALIGN_RATE"
 *                 }
 *               },
 *               "unitOverride": "1"
 *             },
 *             "plotType": "STACKED_BAR"
 *           }],
 *           "timeshiftDuration": "0s",
 *           "yAxis": {
 *             "label": "y1Axis",
 *             "scale": "LINEAR"
 *           }
 *         }
 *       }
 *     ]
 *   }
 * }
 * 
 * 
 * """)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var dashboard = new Gcp.Monitoring.Dashboard("dashboard", new Gcp.Monitoring.DashboardArgs
 *         {
 *             DashboardJson = @"{
 *   ""displayName"": ""Grid Layout Example"",
 *   ""gridLayout"": {
 *     ""columns"": ""2"",
 *     ""widgets"": [
 *       {
 *         ""title"": ""Widget 1"",
 *         ""xyChart"": {
 *           ""dataSets"": [{
 *             ""timeSeriesQuery"": {
 *               ""timeSeriesFilter"": {
 *                 ""filter"": ""metric.type=\""agent.googleapis.com/nginx/connections/accepted_count\"""",
 *                 ""aggregation"": {
 *                   ""perSeriesAligner"": ""ALIGN_RATE""
 *                 }
 *               },
 *               ""unitOverride"": ""1""
 *             },
 *             ""plotType"": ""LINE""
 *           }],
 *           ""timeshiftDuration"": ""0s"",
 *           ""yAxis"": {
 *             ""label"": ""y1Axis"",
 *             ""scale"": ""LINEAR""
 *           }
 *         }
 *       },
 *       {
 *         ""text"": {
 *           ""content"": ""Widget 2"",
 *           ""format"": ""MARKDOWN""
 *         }
 *       },
 *       {
 *         ""title"": ""Widget 3"",
 *         ""xyChart"": {
 *           ""dataSets"": [{
 *             ""timeSeriesQuery"": {
 *               ""timeSeriesFilter"": {
 *                 ""filter"": ""metric.type=\""agent.googleapis.com/nginx/connections/accepted_count\"""",
 *                 ""aggregation"": {
 *                   ""perSeriesAligner"": ""ALIGN_RATE""
 *                 }
 *               },
 *               ""unitOverride"": ""1""
 *             },
 *             ""plotType"": ""STACKED_BAR""
 *           }],
 *           ""timeshiftDuration"": ""0s"",
 *           ""yAxis"": {
 *             ""label"": ""y1Axis"",
 *             ""scale"": ""LINEAR""
 *           }
 *         }
 *       }
 *     ]
 *   }
 * }
 * 
 * 
 * ",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/monitoring"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := monitoring.NewDashboard(ctx, "dashboard", &monitoring.DashboardArgs{
 * 			DashboardJson: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"displayName\": \"Grid Layout Example\",\n", "  \"gridLayout\": {\n", "    \"columns\": \"2\",\n", "    \"widgets\": [\n", "      {\n", "        \"title\": \"Widget 1\",\n", "        \"xyChart\": {\n", "          \"dataSets\": [{\n", "            \"timeSeriesQuery\": {\n", "              \"timeSeriesFilter\": {\n", "                \"filter\": \"metric.type=\\\"agent.googleapis.com/nginx/connections/accepted_count\\\"\",\n", "                \"aggregation\": {\n", "                  \"perSeriesAligner\": \"ALIGN_RATE\"\n", "                }\n", "              },\n", "              \"unitOverride\": \"1\"\n", "            },\n", "            \"plotType\": \"LINE\"\n", "          }],\n", "          \"timeshiftDuration\": \"0s\",\n", "          \"yAxis\": {\n", "            \"label\": \"y1Axis\",\n", "            \"scale\": \"LINEAR\"\n", "          }\n", "        }\n", "      },\n", "      {\n", "        \"text\": {\n", "          \"content\": \"Widget 2\",\n", "          \"format\": \"MARKDOWN\"\n", "        }\n", "      },\n", "      {\n", "        \"title\": \"Widget 3\",\n", "        \"xyChart\": {\n", "          \"dataSets\": [{\n", "            \"timeSeriesQuery\": {\n", "              \"timeSeriesFilter\": {\n", "                \"filter\": \"metric.type=\\\"agent.googleapis.com/nginx/connections/accepted_count\\\"\",\n", "                \"aggregation\": {\n", "                  \"perSeriesAligner\": \"ALIGN_RATE\"\n", "                }\n", "              },\n", "              \"unitOverride\": \"1\"\n", "            },\n", "            \"plotType\": \"STACKED_BAR\"\n", "          }],\n", "          \"timeshiftDuration\": \"0s\",\n", "          \"yAxis\": {\n", "            \"label\": \"y1Axis\",\n", "            \"scale\": \"LINEAR\"\n", "          }\n", "        }\n", "      }\n", "    ]\n", "  }\n", "}\n", "\n", "\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Dashboard can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/dashboard:Dashboard default projects/{{project}}/dashboards/{{dashboard_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/dashboard:Dashboard default {{dashboard_id}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:monitoring/dashboard:Dashboard")
public class Dashboard extends io.pulumi.resources.CustomResource {
    /**
     * The JSON representation of a dashboard, following the format at https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards.
     * The representation of an existing dashboard can be found by using the [API Explorer](https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards/get)
     * 
     */
    @Export(name="dashboardJson", type=String.class, parameters={})
    private Output<String> dashboardJson;

    /**
     * @return The JSON representation of a dashboard, following the format at https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards.
     * The representation of an existing dashboard can be found by using the [API Explorer](https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards/get)
     * 
     */
    public Output<String> getDashboardJson() {
        return this.dashboardJson;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
