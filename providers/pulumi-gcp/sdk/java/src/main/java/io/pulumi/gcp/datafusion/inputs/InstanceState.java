// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datafusion.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceState extends io.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> getCreateTime() {
        return this.createTime == null ? Codegen.empty() : this.createTime;
    }

    /**
     * User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
     * 
     */
    @Import(name="dataprocServiceAccount")
      private final @Nullable Output<String> dataprocServiceAccount;

    public Output<String> getDataprocServiceAccount() {
        return this.dataprocServiceAccount == null ? Codegen.empty() : this.dataprocServiceAccount;
    }

    /**
     * An optional description of the instance.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Option to enable Stackdriver Logging.
     * 
     */
    @Import(name="enableStackdriverLogging")
      private final @Nullable Output<Boolean> enableStackdriverLogging;

    public Output<Boolean> getEnableStackdriverLogging() {
        return this.enableStackdriverLogging == null ? Codegen.empty() : this.enableStackdriverLogging;
    }

    /**
     * Option to enable Stackdriver Monitoring.
     * 
     */
    @Import(name="enableStackdriverMonitoring")
      private final @Nullable Output<Boolean> enableStackdriverMonitoring;

    public Output<Boolean> getEnableStackdriverMonitoring() {
        return this.enableStackdriverMonitoring == null ? Codegen.empty() : this.enableStackdriverMonitoring;
    }

    /**
     * The resource labels for instance to use to annotate any related underlying resources,
     * such as Compute Engine VMs.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The ID of the instance or a fully qualified identifier for the instance.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Network configuration options. These are required when a private Data Fusion instance is to be created.
     * Structure is documented below.
     * 
     */
    @Import(name="networkConfig")
      private final @Nullable Output<InstanceNetworkConfigGetArgs> networkConfig;

    public Output<InstanceNetworkConfigGetArgs> getNetworkConfig() {
        return this.networkConfig == null ? Codegen.empty() : this.networkConfig;
    }

    /**
     * Map of additional options used to configure the behavior of Data Fusion instance.
     * 
     */
    @Import(name="options")
      private final @Nullable Output<Map<String,String>> options;

    public Output<Map<String,String>> getOptions() {
        return this.options == null ? Codegen.empty() : this.options;
    }

    /**
     * Specifies whether the Data Fusion instance should be private. If set to
     * true, all Data Fusion nodes will have private IP addresses and will not be
     * able to access the public internet.
     * 
     */
    @Import(name="privateInstance")
      private final @Nullable Output<Boolean> privateInstance;

    public Output<Boolean> getPrivateInstance() {
        return this.privateInstance == null ? Codegen.empty() : this.privateInstance;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The region of the Data Fusion instance.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * Service account which will be used to access resources in the customer project.
     * 
     */
    @Import(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount == null ? Codegen.empty() : this.serviceAccount;
    }

    /**
     * Endpoint on which the Data Fusion UI and REST APIs are accessible.
     * 
     */
    @Import(name="serviceEndpoint")
      private final @Nullable Output<String> serviceEndpoint;

    public Output<String> getServiceEndpoint() {
        return this.serviceEndpoint == null ? Codegen.empty() : this.serviceEndpoint;
    }

    /**
     * The current state of this Data Fusion instance. - CREATING: Instance is being created - RUNNING: Instance is running and
     * ready for requests - FAILED: Instance creation failed - DELETING: Instance is being deleted - UPGRADING: Instance is
     * being upgraded - RESTARTING: Instance is being restarted
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * Additional information about the current state of this Data Fusion instance if available.
     * 
     */
    @Import(name="stateMessage")
      private final @Nullable Output<String> stateMessage;

    public Output<String> getStateMessage() {
        return this.stateMessage == null ? Codegen.empty() : this.stateMessage;
    }

    /**
     * Represents the type of Data Fusion instance. Each type is configured with
     * the default settings for processing and memory.
     * - BASIC: Basic Data Fusion instance. In Basic type, the user will be able to create data pipelines
     *   using point and click UI. However, there are certain limitations, such as fewer number
     *   of concurrent pipelines, no support for streaming pipelines, etc.
     * - ENTERPRISE: Enterprise Data Fusion instance. In Enterprise type, the user will have more features
     *   available, such as support for streaming pipelines, higher number of concurrent pipelines, etc.
     * - DEVELOPER: Developer Data Fusion instance. In Developer type, the user will have all features available but
     *   with restrictive capabilities. This is to help enterprises design and develop their data ingestion and integration
     *   pipelines at low cost.
     *   Possible values are `BASIC`, `ENTERPRISE`, and `DEVELOPER`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * The time the instance was last updated in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
     * 
     */
    @Import(name="updateTime")
      private final @Nullable Output<String> updateTime;

    public Output<String> getUpdateTime() {
        return this.updateTime == null ? Codegen.empty() : this.updateTime;
    }

    /**
     * Current version of the Data Fusion.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public InstanceState(
        @Nullable Output<String> createTime,
        @Nullable Output<String> dataprocServiceAccount,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> enableStackdriverLogging,
        @Nullable Output<Boolean> enableStackdriverMonitoring,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> name,
        @Nullable Output<InstanceNetworkConfigGetArgs> networkConfig,
        @Nullable Output<Map<String,String>> options,
        @Nullable Output<Boolean> privateInstance,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<String> serviceEndpoint,
        @Nullable Output<String> state,
        @Nullable Output<String> stateMessage,
        @Nullable Output<String> type,
        @Nullable Output<String> updateTime,
        @Nullable Output<String> version) {
        this.createTime = createTime;
        this.dataprocServiceAccount = dataprocServiceAccount;
        this.description = description;
        this.enableStackdriverLogging = enableStackdriverLogging;
        this.enableStackdriverMonitoring = enableStackdriverMonitoring;
        this.labels = labels;
        this.name = name;
        this.networkConfig = networkConfig;
        this.options = options;
        this.privateInstance = privateInstance;
        this.project = project;
        this.region = region;
        this.serviceAccount = serviceAccount;
        this.serviceEndpoint = serviceEndpoint;
        this.state = state;
        this.stateMessage = stateMessage;
        this.type = type;
        this.updateTime = updateTime;
        this.version = version;
    }

    private InstanceState() {
        this.createTime = Codegen.empty();
        this.dataprocServiceAccount = Codegen.empty();
        this.description = Codegen.empty();
        this.enableStackdriverLogging = Codegen.empty();
        this.enableStackdriverMonitoring = Codegen.empty();
        this.labels = Codegen.empty();
        this.name = Codegen.empty();
        this.networkConfig = Codegen.empty();
        this.options = Codegen.empty();
        this.privateInstance = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.serviceAccount = Codegen.empty();
        this.serviceEndpoint = Codegen.empty();
        this.state = Codegen.empty();
        this.stateMessage = Codegen.empty();
        this.type = Codegen.empty();
        this.updateTime = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createTime;
        private @Nullable Output<String> dataprocServiceAccount;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> enableStackdriverLogging;
        private @Nullable Output<Boolean> enableStackdriverMonitoring;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> name;
        private @Nullable Output<InstanceNetworkConfigGetArgs> networkConfig;
        private @Nullable Output<Map<String,String>> options;
        private @Nullable Output<Boolean> privateInstance;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<String> serviceEndpoint;
        private @Nullable Output<String> state;
        private @Nullable Output<String> stateMessage;
        private @Nullable Output<String> type;
        private @Nullable Output<String> updateTime;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.dataprocServiceAccount = defaults.dataprocServiceAccount;
    	      this.description = defaults.description;
    	      this.enableStackdriverLogging = defaults.enableStackdriverLogging;
    	      this.enableStackdriverMonitoring = defaults.enableStackdriverMonitoring;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.options = defaults.options;
    	      this.privateInstance = defaults.privateInstance;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceEndpoint = defaults.serviceEndpoint;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
    	      this.version = defaults.version;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }
        public Builder createTime(@Nullable String createTime) {
            this.createTime = Codegen.ofNullable(createTime);
            return this;
        }
        public Builder dataprocServiceAccount(@Nullable Output<String> dataprocServiceAccount) {
            this.dataprocServiceAccount = dataprocServiceAccount;
            return this;
        }
        public Builder dataprocServiceAccount(@Nullable String dataprocServiceAccount) {
            this.dataprocServiceAccount = Codegen.ofNullable(dataprocServiceAccount);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder enableStackdriverLogging(@Nullable Output<Boolean> enableStackdriverLogging) {
            this.enableStackdriverLogging = enableStackdriverLogging;
            return this;
        }
        public Builder enableStackdriverLogging(@Nullable Boolean enableStackdriverLogging) {
            this.enableStackdriverLogging = Codegen.ofNullable(enableStackdriverLogging);
            return this;
        }
        public Builder enableStackdriverMonitoring(@Nullable Output<Boolean> enableStackdriverMonitoring) {
            this.enableStackdriverMonitoring = enableStackdriverMonitoring;
            return this;
        }
        public Builder enableStackdriverMonitoring(@Nullable Boolean enableStackdriverMonitoring) {
            this.enableStackdriverMonitoring = Codegen.ofNullable(enableStackdriverMonitoring);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder networkConfig(@Nullable Output<InstanceNetworkConfigGetArgs> networkConfig) {
            this.networkConfig = networkConfig;
            return this;
        }
        public Builder networkConfig(@Nullable InstanceNetworkConfigGetArgs networkConfig) {
            this.networkConfig = Codegen.ofNullable(networkConfig);
            return this;
        }
        public Builder options(@Nullable Output<Map<String,String>> options) {
            this.options = options;
            return this;
        }
        public Builder options(@Nullable Map<String,String> options) {
            this.options = Codegen.ofNullable(options);
            return this;
        }
        public Builder privateInstance(@Nullable Output<Boolean> privateInstance) {
            this.privateInstance = privateInstance;
            return this;
        }
        public Builder privateInstance(@Nullable Boolean privateInstance) {
            this.privateInstance = Codegen.ofNullable(privateInstance);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }
        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Codegen.ofNullable(serviceAccount);
            return this;
        }
        public Builder serviceEndpoint(@Nullable Output<String> serviceEndpoint) {
            this.serviceEndpoint = serviceEndpoint;
            return this;
        }
        public Builder serviceEndpoint(@Nullable String serviceEndpoint) {
            this.serviceEndpoint = Codegen.ofNullable(serviceEndpoint);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder stateMessage(@Nullable Output<String> stateMessage) {
            this.stateMessage = stateMessage;
            return this;
        }
        public Builder stateMessage(@Nullable String stateMessage) {
            this.stateMessage = Codegen.ofNullable(stateMessage);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder updateTime(@Nullable Output<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }
        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Codegen.ofNullable(updateTime);
            return this;
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }        public InstanceState build() {
            return new InstanceState(createTime, dataprocServiceAccount, description, enableStackdriverLogging, enableStackdriverMonitoring, labels, name, networkConfig, options, privateInstance, project, region, serviceAccount, serviceEndpoint, state, stateMessage, type, updateTime, version);
        }
    }
}
