// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.diagflow.inputs.FulfillmentFeatureArgs;
import io.pulumi.gcp.diagflow.inputs.FulfillmentGenericWebServiceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FulfillmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final FulfillmentArgs Empty = new FulfillmentArgs();

    /**
     * The human-readable name of the fulfillment, unique within the agent.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * Whether fulfillment is enabled.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * The field defines whether the fulfillment is enabled for certain features.
     * Structure is documented below.
     * 
     */
    @Import(name="features")
      private final @Nullable Output<List<FulfillmentFeatureArgs>> features;

    public Output<List<FulfillmentFeatureArgs>> getFeatures() {
        return this.features == null ? Codegen.empty() : this.features;
    }

    /**
     * Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers.
     * Structure is documented below.
     * 
     */
    @Import(name="genericWebService")
      private final @Nullable Output<FulfillmentGenericWebServiceArgs> genericWebService;

    public Output<FulfillmentGenericWebServiceArgs> getGenericWebService() {
        return this.genericWebService == null ? Codegen.empty() : this.genericWebService;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    public FulfillmentArgs(
        Output<String> displayName,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<List<FulfillmentFeatureArgs>> features,
        @Nullable Output<FulfillmentGenericWebServiceArgs> genericWebService,
        @Nullable Output<String> project) {
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.enabled = enabled;
        this.features = features;
        this.genericWebService = genericWebService;
        this.project = project;
    }

    private FulfillmentArgs() {
        this.displayName = Codegen.empty();
        this.enabled = Codegen.empty();
        this.features = Codegen.empty();
        this.genericWebService = Codegen.empty();
        this.project = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FulfillmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> displayName;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<List<FulfillmentFeatureArgs>> features;
        private @Nullable Output<FulfillmentGenericWebServiceArgs> genericWebService;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(FulfillmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.features = defaults.features;
    	      this.genericWebService = defaults.genericWebService;
    	      this.project = defaults.project;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder features(@Nullable Output<List<FulfillmentFeatureArgs>> features) {
            this.features = features;
            return this;
        }
        public Builder features(@Nullable List<FulfillmentFeatureArgs> features) {
            this.features = Codegen.ofNullable(features);
            return this;
        }
        public Builder features(FulfillmentFeatureArgs... features) {
            return features(List.of(features));
        }
        public Builder genericWebService(@Nullable Output<FulfillmentGenericWebServiceArgs> genericWebService) {
            this.genericWebService = genericWebService;
            return this;
        }
        public Builder genericWebService(@Nullable FulfillmentGenericWebServiceArgs genericWebService) {
            this.genericWebService = Codegen.ofNullable(genericWebService);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }        public FulfillmentArgs build() {
            return new FulfillmentArgs(displayName, enabled, features, genericWebService, project);
        }
    }
}
