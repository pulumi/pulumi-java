// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceCircuitBreakersArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceConsistentHashArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceIapArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceLogConfigArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceOutlierDetectionArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceSecuritySettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackendServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackendServiceArgs Empty = new BackendServiceArgs();

    /**
     * Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    @InputImport(name="affinityCookieTtlSec")
    private final @Nullable Input<Integer> affinityCookieTtlSec;

    public Input<Integer> getAffinityCookieTtlSec() {
        return this.affinityCookieTtlSec == null ? Input.empty() : this.affinityCookieTtlSec;
    }

    /**
     * The set of backends that serve this BackendService.
     * Structure is documented below.
     * 
     */
    @InputImport(name="backends")
    private final @Nullable Input<List<BackendServiceBackendArgs>> backends;

    public Input<List<BackendServiceBackendArgs>> getBackends() {
        return this.backends == null ? Input.empty() : this.backends;
    }

    /**
     * Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    @InputImport(name="cdnPolicy")
    private final @Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy;

    public Input<BackendServiceCdnPolicyArgs> getCdnPolicy() {
        return this.cdnPolicy == null ? Input.empty() : this.cdnPolicy;
    }

    /**
     * Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @InputImport(name="circuitBreakers")
    private final @Nullable Input<BackendServiceCircuitBreakersArgs> circuitBreakers;

    public Input<BackendServiceCircuitBreakersArgs> getCircuitBreakers() {
        return this.circuitBreakers == null ? Input.empty() : this.circuitBreakers;
    }

    /**
     * Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    @InputImport(name="connectionDrainingTimeoutSec")
    private final @Nullable Input<Integer> connectionDrainingTimeoutSec;

    public Input<Integer> getConnectionDrainingTimeoutSec() {
        return this.connectionDrainingTimeoutSec == null ? Input.empty() : this.connectionDrainingTimeoutSec;
    }

    /**
     * Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing. This field only applies if the load_balancing_scheme is set to
     * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
     * set to MAGLEV or RING_HASH.
     * Structure is documented below.
     * 
     */
    @InputImport(name="consistentHash")
    private final @Nullable Input<BackendServiceConsistentHashArgs> consistentHash;

    public Input<BackendServiceConsistentHashArgs> getConsistentHash() {
        return this.consistentHash == null ? Input.empty() : this.consistentHash;
    }

    /**
     * Headers that the HTTP/S load balancer should add to proxied
     * requests.
     * 
     */
    @InputImport(name="customRequestHeaders")
    private final @Nullable Input<List<String>> customRequestHeaders;

    public Input<List<String>> getCustomRequestHeaders() {
        return this.customRequestHeaders == null ? Input.empty() : this.customRequestHeaders;
    }

    /**
     * Headers that the HTTP/S load balancer should add to proxied
     * responses.
     * 
     */
    @InputImport(name="customResponseHeaders")
    private final @Nullable Input<List<String>> customResponseHeaders;

    public Input<List<String>> getCustomResponseHeaders() {
        return this.customResponseHeaders == null ? Input.empty() : this.customResponseHeaders;
    }

    /**
     * An optional description of this resource.
     * Provide this property when you create the resource.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * If true, enable Cloud CDN for this BackendService.
     * 
     */
    @InputImport(name="enableCdn")
    private final @Nullable Input<Boolean> enableCdn;

    public Input<Boolean> getEnableCdn() {
        return this.enableCdn == null ? Input.empty() : this.enableCdn;
    }

    /**
     * The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
     * for health checking this BackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
     * 
     */
    @InputImport(name="healthChecks")
    private final @Nullable Input<String> healthChecks;

    public Input<String> getHealthChecks() {
        return this.healthChecks == null ? Input.empty() : this.healthChecks;
    }

    /**
     * Settings for enabling Cloud Identity Aware Proxy
     * Structure is documented below.
     * 
     */
    @InputImport(name="iap")
    private final @Nullable Input<BackendServiceIapArgs> iap;

    public Input<BackendServiceIapArgs> getIap() {
        return this.iap == null ? Input.empty() : this.iap;
    }

    /**
     * Indicates whether the backend service will be used with internal or
     * external load balancing. A backend service created for one type of
     * load balancing cannot be used with the other. For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
     * 
     */
    @InputImport(name="loadBalancingScheme")
    private final @Nullable Input<String> loadBalancingScheme;

    public Input<String> getLoadBalancingScheme() {
        return this.loadBalancingScheme == null ? Input.empty() : this.loadBalancingScheme;
    }

    /**
     * The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * 
     */
    @InputImport(name="localityLbPolicy")
    private final @Nullable Input<String> localityLbPolicy;

    public Input<String> getLocalityLbPolicy() {
        return this.localityLbPolicy == null ? Input.empty() : this.localityLbPolicy;
    }

    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    @InputImport(name="logConfig")
    private final @Nullable Input<BackendServiceLogConfigArgs> logConfig;

    public Input<BackendServiceLogConfigArgs> getLogConfig() {
        return this.logConfig == null ? Input.empty() : this.logConfig;
    }

    /**
     * Name of the cookie.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the load_balancing_scheme is set
     * to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @InputImport(name="outlierDetection")
    private final @Nullable Input<BackendServiceOutlierDetectionArgs> outlierDetection;

    public Input<BackendServiceOutlierDetectionArgs> getOutlierDetection() {
        return this.outlierDetection == null ? Input.empty() : this.outlierDetection;
    }

    /**
     * Name of backend port. The same name should appear in the instance
     * groups referenced by this service. Required when the load balancing
     * scheme is EXTERNAL.
     * 
     */
    @InputImport(name="portName")
    private final @Nullable Input<String> portName;

    public Input<String> getPortName() {
        return this.portName == null ? Input.empty() : this.portName;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
     * types and may result in errors if used with the GA API.
     * Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
     * 
     */
    @InputImport(name="protocol")
    private final @Nullable Input<String> protocol;

    public Input<String> getProtocol() {
        return this.protocol == null ? Input.empty() : this.protocol;
    }

    /**
     * The security policy associated with this backend service.
     * 
     */
    @InputImport(name="securityPolicy")
    private final @Nullable Input<String> securityPolicy;

    public Input<String> getSecurityPolicy() {
        return this.securityPolicy == null ? Input.empty() : this.securityPolicy;
    }

    /**
     * The security settings that apply to this backend service. This field is applicable to either
     * a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
     * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
     * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @InputImport(name="securitySettings")
    private final @Nullable Input<BackendServiceSecuritySettingsArgs> securitySettings;

    public Input<BackendServiceSecuritySettingsArgs> getSecuritySettings() {
        return this.securitySettings == null ? Input.empty() : this.securitySettings;
    }

    /**
     * Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
     * 
     */
    @InputImport(name="sessionAffinity")
    private final @Nullable Input<String> sessionAffinity;

    public Input<String> getSessionAffinity() {
        return this.sessionAffinity == null ? Input.empty() : this.sessionAffinity;
    }

    /**
     * How many seconds to wait for the backend before considering it a
     * failed request. Default is 30 seconds. Valid range is [1, 86400].
     * 
     */
    @InputImport(name="timeoutSec")
    private final @Nullable Input<Integer> timeoutSec;

    public Input<Integer> getTimeoutSec() {
        return this.timeoutSec == null ? Input.empty() : this.timeoutSec;
    }

    public BackendServiceArgs(
        @Nullable Input<Integer> affinityCookieTtlSec,
        @Nullable Input<List<BackendServiceBackendArgs>> backends,
        @Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy,
        @Nullable Input<BackendServiceCircuitBreakersArgs> circuitBreakers,
        @Nullable Input<Integer> connectionDrainingTimeoutSec,
        @Nullable Input<BackendServiceConsistentHashArgs> consistentHash,
        @Nullable Input<List<String>> customRequestHeaders,
        @Nullable Input<List<String>> customResponseHeaders,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> enableCdn,
        @Nullable Input<String> healthChecks,
        @Nullable Input<BackendServiceIapArgs> iap,
        @Nullable Input<String> loadBalancingScheme,
        @Nullable Input<String> localityLbPolicy,
        @Nullable Input<BackendServiceLogConfigArgs> logConfig,
        @Nullable Input<String> name,
        @Nullable Input<BackendServiceOutlierDetectionArgs> outlierDetection,
        @Nullable Input<String> portName,
        @Nullable Input<String> project,
        @Nullable Input<String> protocol,
        @Nullable Input<String> securityPolicy,
        @Nullable Input<BackendServiceSecuritySettingsArgs> securitySettings,
        @Nullable Input<String> sessionAffinity,
        @Nullable Input<Integer> timeoutSec) {
        this.affinityCookieTtlSec = affinityCookieTtlSec;
        this.backends = backends;
        this.cdnPolicy = cdnPolicy;
        this.circuitBreakers = circuitBreakers;
        this.connectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
        this.consistentHash = consistentHash;
        this.customRequestHeaders = customRequestHeaders;
        this.customResponseHeaders = customResponseHeaders;
        this.description = description;
        this.enableCdn = enableCdn;
        this.healthChecks = healthChecks;
        this.iap = iap;
        this.loadBalancingScheme = loadBalancingScheme;
        this.localityLbPolicy = localityLbPolicy;
        this.logConfig = logConfig;
        this.name = name;
        this.outlierDetection = outlierDetection;
        this.portName = portName;
        this.project = project;
        this.protocol = protocol;
        this.securityPolicy = securityPolicy;
        this.securitySettings = securitySettings;
        this.sessionAffinity = sessionAffinity;
        this.timeoutSec = timeoutSec;
    }

    private BackendServiceArgs() {
        this.affinityCookieTtlSec = Input.empty();
        this.backends = Input.empty();
        this.cdnPolicy = Input.empty();
        this.circuitBreakers = Input.empty();
        this.connectionDrainingTimeoutSec = Input.empty();
        this.consistentHash = Input.empty();
        this.customRequestHeaders = Input.empty();
        this.customResponseHeaders = Input.empty();
        this.description = Input.empty();
        this.enableCdn = Input.empty();
        this.healthChecks = Input.empty();
        this.iap = Input.empty();
        this.loadBalancingScheme = Input.empty();
        this.localityLbPolicy = Input.empty();
        this.logConfig = Input.empty();
        this.name = Input.empty();
        this.outlierDetection = Input.empty();
        this.portName = Input.empty();
        this.project = Input.empty();
        this.protocol = Input.empty();
        this.securityPolicy = Input.empty();
        this.securitySettings = Input.empty();
        this.sessionAffinity = Input.empty();
        this.timeoutSec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> affinityCookieTtlSec;
        private @Nullable Input<List<BackendServiceBackendArgs>> backends;
        private @Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy;
        private @Nullable Input<BackendServiceCircuitBreakersArgs> circuitBreakers;
        private @Nullable Input<Integer> connectionDrainingTimeoutSec;
        private @Nullable Input<BackendServiceConsistentHashArgs> consistentHash;
        private @Nullable Input<List<String>> customRequestHeaders;
        private @Nullable Input<List<String>> customResponseHeaders;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> enableCdn;
        private @Nullable Input<String> healthChecks;
        private @Nullable Input<BackendServiceIapArgs> iap;
        private @Nullable Input<String> loadBalancingScheme;
        private @Nullable Input<String> localityLbPolicy;
        private @Nullable Input<BackendServiceLogConfigArgs> logConfig;
        private @Nullable Input<String> name;
        private @Nullable Input<BackendServiceOutlierDetectionArgs> outlierDetection;
        private @Nullable Input<String> portName;
        private @Nullable Input<String> project;
        private @Nullable Input<String> protocol;
        private @Nullable Input<String> securityPolicy;
        private @Nullable Input<BackendServiceSecuritySettingsArgs> securitySettings;
        private @Nullable Input<String> sessionAffinity;
        private @Nullable Input<Integer> timeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieTtlSec = defaults.affinityCookieTtlSec;
    	      this.backends = defaults.backends;
    	      this.cdnPolicy = defaults.cdnPolicy;
    	      this.circuitBreakers = defaults.circuitBreakers;
    	      this.connectionDrainingTimeoutSec = defaults.connectionDrainingTimeoutSec;
    	      this.consistentHash = defaults.consistentHash;
    	      this.customRequestHeaders = defaults.customRequestHeaders;
    	      this.customResponseHeaders = defaults.customResponseHeaders;
    	      this.description = defaults.description;
    	      this.enableCdn = defaults.enableCdn;
    	      this.healthChecks = defaults.healthChecks;
    	      this.iap = defaults.iap;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.localityLbPolicy = defaults.localityLbPolicy;
    	      this.logConfig = defaults.logConfig;
    	      this.name = defaults.name;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.portName = defaults.portName;
    	      this.project = defaults.project;
    	      this.protocol = defaults.protocol;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.securitySettings = defaults.securitySettings;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.timeoutSec = defaults.timeoutSec;
        }

        public Builder setAffinityCookieTtlSec(@Nullable Input<Integer> affinityCookieTtlSec) {
            this.affinityCookieTtlSec = affinityCookieTtlSec;
            return this;
        }

        public Builder setAffinityCookieTtlSec(@Nullable Integer affinityCookieTtlSec) {
            this.affinityCookieTtlSec = Input.ofNullable(affinityCookieTtlSec);
            return this;
        }

        public Builder setBackends(@Nullable Input<List<BackendServiceBackendArgs>> backends) {
            this.backends = backends;
            return this;
        }

        public Builder setBackends(@Nullable List<BackendServiceBackendArgs> backends) {
            this.backends = Input.ofNullable(backends);
            return this;
        }

        public Builder setCdnPolicy(@Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy) {
            this.cdnPolicy = cdnPolicy;
            return this;
        }

        public Builder setCdnPolicy(@Nullable BackendServiceCdnPolicyArgs cdnPolicy) {
            this.cdnPolicy = Input.ofNullable(cdnPolicy);
            return this;
        }

        public Builder setCircuitBreakers(@Nullable Input<BackendServiceCircuitBreakersArgs> circuitBreakers) {
            this.circuitBreakers = circuitBreakers;
            return this;
        }

        public Builder setCircuitBreakers(@Nullable BackendServiceCircuitBreakersArgs circuitBreakers) {
            this.circuitBreakers = Input.ofNullable(circuitBreakers);
            return this;
        }

        public Builder setConnectionDrainingTimeoutSec(@Nullable Input<Integer> connectionDrainingTimeoutSec) {
            this.connectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            return this;
        }

        public Builder setConnectionDrainingTimeoutSec(@Nullable Integer connectionDrainingTimeoutSec) {
            this.connectionDrainingTimeoutSec = Input.ofNullable(connectionDrainingTimeoutSec);
            return this;
        }

        public Builder setConsistentHash(@Nullable Input<BackendServiceConsistentHashArgs> consistentHash) {
            this.consistentHash = consistentHash;
            return this;
        }

        public Builder setConsistentHash(@Nullable BackendServiceConsistentHashArgs consistentHash) {
            this.consistentHash = Input.ofNullable(consistentHash);
            return this;
        }

        public Builder setCustomRequestHeaders(@Nullable Input<List<String>> customRequestHeaders) {
            this.customRequestHeaders = customRequestHeaders;
            return this;
        }

        public Builder setCustomRequestHeaders(@Nullable List<String> customRequestHeaders) {
            this.customRequestHeaders = Input.ofNullable(customRequestHeaders);
            return this;
        }

        public Builder setCustomResponseHeaders(@Nullable Input<List<String>> customResponseHeaders) {
            this.customResponseHeaders = customResponseHeaders;
            return this;
        }

        public Builder setCustomResponseHeaders(@Nullable List<String> customResponseHeaders) {
            this.customResponseHeaders = Input.ofNullable(customResponseHeaders);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEnableCdn(@Nullable Input<Boolean> enableCdn) {
            this.enableCdn = enableCdn;
            return this;
        }

        public Builder setEnableCdn(@Nullable Boolean enableCdn) {
            this.enableCdn = Input.ofNullable(enableCdn);
            return this;
        }

        public Builder setHealthChecks(@Nullable Input<String> healthChecks) {
            this.healthChecks = healthChecks;
            return this;
        }

        public Builder setHealthChecks(@Nullable String healthChecks) {
            this.healthChecks = Input.ofNullable(healthChecks);
            return this;
        }

        public Builder setIap(@Nullable Input<BackendServiceIapArgs> iap) {
            this.iap = iap;
            return this;
        }

        public Builder setIap(@Nullable BackendServiceIapArgs iap) {
            this.iap = Input.ofNullable(iap);
            return this;
        }

        public Builder setLoadBalancingScheme(@Nullable Input<String> loadBalancingScheme) {
            this.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        public Builder setLoadBalancingScheme(@Nullable String loadBalancingScheme) {
            this.loadBalancingScheme = Input.ofNullable(loadBalancingScheme);
            return this;
        }

        public Builder setLocalityLbPolicy(@Nullable Input<String> localityLbPolicy) {
            this.localityLbPolicy = localityLbPolicy;
            return this;
        }

        public Builder setLocalityLbPolicy(@Nullable String localityLbPolicy) {
            this.localityLbPolicy = Input.ofNullable(localityLbPolicy);
            return this;
        }

        public Builder setLogConfig(@Nullable Input<BackendServiceLogConfigArgs> logConfig) {
            this.logConfig = logConfig;
            return this;
        }

        public Builder setLogConfig(@Nullable BackendServiceLogConfigArgs logConfig) {
            this.logConfig = Input.ofNullable(logConfig);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOutlierDetection(@Nullable Input<BackendServiceOutlierDetectionArgs> outlierDetection) {
            this.outlierDetection = outlierDetection;
            return this;
        }

        public Builder setOutlierDetection(@Nullable BackendServiceOutlierDetectionArgs outlierDetection) {
            this.outlierDetection = Input.ofNullable(outlierDetection);
            return this;
        }

        public Builder setPortName(@Nullable Input<String> portName) {
            this.portName = portName;
            return this;
        }

        public Builder setPortName(@Nullable String portName) {
            this.portName = Input.ofNullable(portName);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setProtocol(@Nullable Input<String> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setProtocol(@Nullable String protocol) {
            this.protocol = Input.ofNullable(protocol);
            return this;
        }

        public Builder setSecurityPolicy(@Nullable Input<String> securityPolicy) {
            this.securityPolicy = securityPolicy;
            return this;
        }

        public Builder setSecurityPolicy(@Nullable String securityPolicy) {
            this.securityPolicy = Input.ofNullable(securityPolicy);
            return this;
        }

        public Builder setSecuritySettings(@Nullable Input<BackendServiceSecuritySettingsArgs> securitySettings) {
            this.securitySettings = securitySettings;
            return this;
        }

        public Builder setSecuritySettings(@Nullable BackendServiceSecuritySettingsArgs securitySettings) {
            this.securitySettings = Input.ofNullable(securitySettings);
            return this;
        }

        public Builder setSessionAffinity(@Nullable Input<String> sessionAffinity) {
            this.sessionAffinity = sessionAffinity;
            return this;
        }

        public Builder setSessionAffinity(@Nullable String sessionAffinity) {
            this.sessionAffinity = Input.ofNullable(sessionAffinity);
            return this;
        }

        public Builder setTimeoutSec(@Nullable Input<Integer> timeoutSec) {
            this.timeoutSec = timeoutSec;
            return this;
        }

        public Builder setTimeoutSec(@Nullable Integer timeoutSec) {
            this.timeoutSec = Input.ofNullable(timeoutSec);
            return this;
        }

        public BackendServiceArgs build() {
            return new BackendServiceArgs(affinityCookieTtlSec, backends, cdnPolicy, circuitBreakers, connectionDrainingTimeoutSec, consistentHash, customRequestHeaders, customResponseHeaders, description, enableCdn, healthChecks, iap, loadBalancingScheme, localityLbPolicy, logConfig, name, outlierDetection, portName, project, protocol, securityPolicy, securitySettings, sessionAffinity, timeoutSec);
        }
    }
}
