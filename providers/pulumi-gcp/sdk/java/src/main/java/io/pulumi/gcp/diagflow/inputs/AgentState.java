// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AgentState extends io.pulumi.resources.ResourceArgs {

    public static final AgentState Empty = new AgentState();

    /**
     * API version displayed in Dialogflow console. If not specified, V2 API is assumed. Clients are free to query
     * different service endpoints for different API versions. However, bots connectors and webhook calls will follow
     * the specified API version.
     * * API_VERSION_V1: Legacy V1 API.
     * * API_VERSION_V2: V2 API.
     * * API_VERSION_V2_BETA_1: V2beta1 API.
     *   Possible values are `API_VERSION_V1`, `API_VERSION_V2`, and `API_VERSION_V2_BETA_1`.
     * 
     */
    @InputImport(name="apiVersion")
    private final @Nullable Input<String> apiVersion;

    public Input<String> getApiVersion() {
        return this.apiVersion == null ? Input.empty() : this.apiVersion;
    }

    /**
     * The URI of the agent's avatar, which are used throughout the Dialogflow console. When an image URL is entered
     * into this field, the Dialogflow will save the image in the backend. The address of the backend image returned
     * from the API will be shown in the [avatarUriBackend] field.
     * 
     */
    @InputImport(name="avatarUri")
    private final @Nullable Input<String> avatarUri;

    public Input<String> getAvatarUri() {
        return this.avatarUri == null ? Input.empty() : this.avatarUri;
    }

    /**
     * The URI of the agent's avatar as returned from the API. Output only. To provide an image URL for the agent avatar, the
     * [avatarUri] field can be used.
     * 
     */
    @InputImport(name="avatarUriBackend")
    private final @Nullable Input<String> avatarUriBackend;

    public Input<String> getAvatarUriBackend() {
        return this.avatarUriBackend == null ? Input.empty() : this.avatarUriBackend;
    }

    /**
     * To filter out false positive results and still get variety in matched natural language inputs for your agent,
     * you can tune the machine learning classification threshold. If the returned score value is less than the threshold
     * value, then a fallback intent will be triggered or, if there are no fallback intents defined, no intent will be
     * triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the
     * default of 0.3 is used.
     * 
     */
    @InputImport(name="classificationThreshold")
    private final @Nullable Input<Double> classificationThreshold;

    public Input<Double> getClassificationThreshold() {
        return this.classificationThreshold == null ? Input.empty() : this.classificationThreshold;
    }

    /**
     * The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/docs/reference/language)
     * for a list of the currently supported language codes. This field cannot be updated after creation.
     * 
     */
    @InputImport(name="defaultLanguageCode")
    private final @Nullable Input<String> defaultLanguageCode;

    public Input<String> getDefaultLanguageCode() {
        return this.defaultLanguageCode == null ? Input.empty() : this.defaultLanguageCode;
    }

    /**
     * The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The name of this agent.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * Determines whether this agent should log conversation queries.
     * 
     */
    @InputImport(name="enableLogging")
    private final @Nullable Input<Boolean> enableLogging;

    public Input<Boolean> getEnableLogging() {
        return this.enableLogging == null ? Input.empty() : this.enableLogging;
    }

    /**
     * Determines how intents are detected from user queries.
     * * MATCH_MODE_HYBRID: Best for agents with a small number of examples in intents and/or wide use of templates
     *   syntax and composite entities.
     * * MATCH_MODE_ML_ONLY: Can be used for agents with a large number of examples in intents, especially the ones
     *   using @sys.any or very large developer entities.
     *   Possible values are `MATCH_MODE_HYBRID` and `MATCH_MODE_ML_ONLY`.
     * 
     */
    @InputImport(name="matchMode")
    private final @Nullable Input<String> matchMode;

    public Input<String> getMatchMode() {
        return this.matchMode == null ? Input.empty() : this.matchMode;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The list of all languages supported by this agent (except for the defaultLanguageCode).
     * 
     */
    @InputImport(name="supportedLanguageCodes")
    private final @Nullable Input<List<String>> supportedLanguageCodes;

    public Input<List<String>> getSupportedLanguageCodes() {
        return this.supportedLanguageCodes == null ? Input.empty() : this.supportedLanguageCodes;
    }

    /**
     * The agent tier. If not specified, TIER_STANDARD is assumed.
     * * TIER_STANDARD: Standard tier.
     * * TIER_ENTERPRISE: Enterprise tier (Essentials).
     * * TIER_ENTERPRISE_PLUS: Enterprise tier (Plus).
     *   NOTE: Due to consistency issues, the provider will not read this field from the API. Drift is possible between
     *   the the provider state and Dialogflow if the agent tier is changed outside of the provider.
     * 
     */
    @InputImport(name="tier")
    private final @Nullable Input<String> tier;

    public Input<String> getTier() {
        return this.tier == null ? Input.empty() : this.tier;
    }

    /**
     * The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
     * Europe/Paris.
     * 
     */
    @InputImport(name="timeZone")
    private final @Nullable Input<String> timeZone;

    public Input<String> getTimeZone() {
        return this.timeZone == null ? Input.empty() : this.timeZone;
    }

    public AgentState(
        @Nullable Input<String> apiVersion,
        @Nullable Input<String> avatarUri,
        @Nullable Input<String> avatarUriBackend,
        @Nullable Input<Double> classificationThreshold,
        @Nullable Input<String> defaultLanguageCode,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<Boolean> enableLogging,
        @Nullable Input<String> matchMode,
        @Nullable Input<String> project,
        @Nullable Input<List<String>> supportedLanguageCodes,
        @Nullable Input<String> tier,
        @Nullable Input<String> timeZone) {
        this.apiVersion = apiVersion;
        this.avatarUri = avatarUri;
        this.avatarUriBackend = avatarUriBackend;
        this.classificationThreshold = classificationThreshold;
        this.defaultLanguageCode = defaultLanguageCode;
        this.description = description;
        this.displayName = displayName;
        this.enableLogging = enableLogging;
        this.matchMode = matchMode;
        this.project = project;
        this.supportedLanguageCodes = supportedLanguageCodes;
        this.tier = tier;
        this.timeZone = timeZone;
    }

    private AgentState() {
        this.apiVersion = Input.empty();
        this.avatarUri = Input.empty();
        this.avatarUriBackend = Input.empty();
        this.classificationThreshold = Input.empty();
        this.defaultLanguageCode = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.enableLogging = Input.empty();
        this.matchMode = Input.empty();
        this.project = Input.empty();
        this.supportedLanguageCodes = Input.empty();
        this.tier = Input.empty();
        this.timeZone = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AgentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> apiVersion;
        private @Nullable Input<String> avatarUri;
        private @Nullable Input<String> avatarUriBackend;
        private @Nullable Input<Double> classificationThreshold;
        private @Nullable Input<String> defaultLanguageCode;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<Boolean> enableLogging;
        private @Nullable Input<String> matchMode;
        private @Nullable Input<String> project;
        private @Nullable Input<List<String>> supportedLanguageCodes;
        private @Nullable Input<String> tier;
        private @Nullable Input<String> timeZone;

        public Builder() {
    	      // Empty
        }

        public Builder(AgentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.avatarUri = defaults.avatarUri;
    	      this.avatarUriBackend = defaults.avatarUriBackend;
    	      this.classificationThreshold = defaults.classificationThreshold;
    	      this.defaultLanguageCode = defaults.defaultLanguageCode;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enableLogging = defaults.enableLogging;
    	      this.matchMode = defaults.matchMode;
    	      this.project = defaults.project;
    	      this.supportedLanguageCodes = defaults.supportedLanguageCodes;
    	      this.tier = defaults.tier;
    	      this.timeZone = defaults.timeZone;
        }

        public Builder setApiVersion(@Nullable Input<String> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder setApiVersion(@Nullable String apiVersion) {
            this.apiVersion = Input.ofNullable(apiVersion);
            return this;
        }

        public Builder setAvatarUri(@Nullable Input<String> avatarUri) {
            this.avatarUri = avatarUri;
            return this;
        }

        public Builder setAvatarUri(@Nullable String avatarUri) {
            this.avatarUri = Input.ofNullable(avatarUri);
            return this;
        }

        public Builder setAvatarUriBackend(@Nullable Input<String> avatarUriBackend) {
            this.avatarUriBackend = avatarUriBackend;
            return this;
        }

        public Builder setAvatarUriBackend(@Nullable String avatarUriBackend) {
            this.avatarUriBackend = Input.ofNullable(avatarUriBackend);
            return this;
        }

        public Builder setClassificationThreshold(@Nullable Input<Double> classificationThreshold) {
            this.classificationThreshold = classificationThreshold;
            return this;
        }

        public Builder setClassificationThreshold(@Nullable Double classificationThreshold) {
            this.classificationThreshold = Input.ofNullable(classificationThreshold);
            return this;
        }

        public Builder setDefaultLanguageCode(@Nullable Input<String> defaultLanguageCode) {
            this.defaultLanguageCode = defaultLanguageCode;
            return this;
        }

        public Builder setDefaultLanguageCode(@Nullable String defaultLanguageCode) {
            this.defaultLanguageCode = Input.ofNullable(defaultLanguageCode);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setEnableLogging(@Nullable Input<Boolean> enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }

        public Builder setEnableLogging(@Nullable Boolean enableLogging) {
            this.enableLogging = Input.ofNullable(enableLogging);
            return this;
        }

        public Builder setMatchMode(@Nullable Input<String> matchMode) {
            this.matchMode = matchMode;
            return this;
        }

        public Builder setMatchMode(@Nullable String matchMode) {
            this.matchMode = Input.ofNullable(matchMode);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSupportedLanguageCodes(@Nullable Input<List<String>> supportedLanguageCodes) {
            this.supportedLanguageCodes = supportedLanguageCodes;
            return this;
        }

        public Builder setSupportedLanguageCodes(@Nullable List<String> supportedLanguageCodes) {
            this.supportedLanguageCodes = Input.ofNullable(supportedLanguageCodes);
            return this;
        }

        public Builder setTier(@Nullable Input<String> tier) {
            this.tier = tier;
            return this;
        }

        public Builder setTier(@Nullable String tier) {
            this.tier = Input.ofNullable(tier);
            return this;
        }

        public Builder setTimeZone(@Nullable Input<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder setTimeZone(@Nullable String timeZone) {
            this.timeZone = Input.ofNullable(timeZone);
            return this;
        }

        public AgentState build() {
            return new AgentState(apiVersion, avatarUri, avatarUriBackend, classificationThreshold, defaultLanguageCode, description, displayName, enableLogging, matchMode, project, supportedLanguageCodes, tier, timeZone);
        }
    }
}
