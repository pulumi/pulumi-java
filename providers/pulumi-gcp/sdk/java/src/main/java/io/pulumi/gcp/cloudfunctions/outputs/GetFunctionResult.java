// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudfunctions.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.cloudfunctions.outputs.GetFunctionEventTrigger;
import io.pulumi.gcp.cloudfunctions.outputs.GetFunctionSourceRepository;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetFunctionResult {
    /**
     * Available memory (in MB) to the function.
     * 
     */
    private final Integer availableMemoryMb;
    private final Map<String,Object> buildEnvironmentVariables;
    /**
     * Description of the function.
     * 
     */
    private final String description;
    /**
     * Name of a JavaScript function that will be executed when the Google Cloud Function is triggered.
     * 
     */
    private final String entryPoint;
    private final Map<String,Object> environmentVariables;
    /**
     * A source that fires events in response to a condition in another service. Structure is documented below.
     * 
     */
    private final List<GetFunctionEventTrigger> eventTriggers;
    /**
     * If function is triggered by HTTP, trigger URL is set here.
     * 
     */
    private final String httpsTriggerUrl;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * Controls what traffic can reach the function.
     * 
     */
    private final String ingressSettings;
    /**
     * A map of labels applied to this function.
     * 
     */
    private final Map<String,Object> labels;
    /**
     * The limit on the maximum number of function instances that may coexist at a given time.
     * 
     */
    private final Integer maxInstances;
    private final Integer minInstances;
    /**
     * The name of the Cloud Function.
     * 
     */
    private final String name;
    private final @Nullable String project;
    private final @Nullable String region;
    /**
     * The runtime in which the function is running.
     * 
     */
    private final String runtime;
    /**
     * The service account email to be assumed by the cloud function.
     * 
     */
    private final String serviceAccountEmail;
    /**
     * The GCS bucket containing the zip archive which contains the function.
     * 
     */
    private final String sourceArchiveBucket;
    /**
     * The source archive object (file) in archive bucket.
     * 
     */
    private final String sourceArchiveObject;
    /**
     * The URL of the Cloud Source Repository that the function is deployed from. Structure is documented below.
     * 
     */
    private final List<GetFunctionSourceRepository> sourceRepositories;
    /**
     * Function execution timeout (in seconds).
     * 
     */
    private final Integer timeout;
    /**
     * If function is triggered by HTTP, this boolean is set.
     * 
     */
    private final Boolean triggerHttp;
    /**
     * The VPC Network Connector that this cloud function can connect to.
     * 
     */
    private final String vpcConnector;
    /**
     * The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    private final String vpcConnectorEgressSettings;

    @OutputCustomType.Constructor({"availableMemoryMb","buildEnvironmentVariables","description","entryPoint","environmentVariables","eventTriggers","httpsTriggerUrl","id","ingressSettings","labels","maxInstances","minInstances","name","project","region","runtime","serviceAccountEmail","sourceArchiveBucket","sourceArchiveObject","sourceRepositories","timeout","triggerHttp","vpcConnector","vpcConnectorEgressSettings"})
    private GetFunctionResult(
        Integer availableMemoryMb,
        Map<String,Object> buildEnvironmentVariables,
        String description,
        String entryPoint,
        Map<String,Object> environmentVariables,
        List<GetFunctionEventTrigger> eventTriggers,
        String httpsTriggerUrl,
        String id,
        String ingressSettings,
        Map<String,Object> labels,
        Integer maxInstances,
        Integer minInstances,
        String name,
        @Nullable String project,
        @Nullable String region,
        String runtime,
        String serviceAccountEmail,
        String sourceArchiveBucket,
        String sourceArchiveObject,
        List<GetFunctionSourceRepository> sourceRepositories,
        Integer timeout,
        Boolean triggerHttp,
        String vpcConnector,
        String vpcConnectorEgressSettings) {
        this.availableMemoryMb = availableMemoryMb;
        this.buildEnvironmentVariables = buildEnvironmentVariables;
        this.description = description;
        this.entryPoint = entryPoint;
        this.environmentVariables = environmentVariables;
        this.eventTriggers = eventTriggers;
        this.httpsTriggerUrl = httpsTriggerUrl;
        this.id = id;
        this.ingressSettings = ingressSettings;
        this.labels = labels;
        this.maxInstances = maxInstances;
        this.minInstances = minInstances;
        this.name = name;
        this.project = project;
        this.region = region;
        this.runtime = runtime;
        this.serviceAccountEmail = serviceAccountEmail;
        this.sourceArchiveBucket = sourceArchiveBucket;
        this.sourceArchiveObject = sourceArchiveObject;
        this.sourceRepositories = sourceRepositories;
        this.timeout = timeout;
        this.triggerHttp = triggerHttp;
        this.vpcConnector = vpcConnector;
        this.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
    }

    /**
     * Available memory (in MB) to the function.
     * 
    */
    public Integer getAvailableMemoryMb() {
        return this.availableMemoryMb;
    }
    public Map<String,Object> getBuildEnvironmentVariables() {
        return this.buildEnvironmentVariables;
    }
    /**
     * Description of the function.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * Name of a JavaScript function that will be executed when the Google Cloud Function is triggered.
     * 
    */
    public String getEntryPoint() {
        return this.entryPoint;
    }
    public Map<String,Object> getEnvironmentVariables() {
        return this.environmentVariables;
    }
    /**
     * A source that fires events in response to a condition in another service. Structure is documented below.
     * 
    */
    public List<GetFunctionEventTrigger> getEventTriggers() {
        return this.eventTriggers;
    }
    /**
     * If function is triggered by HTTP, trigger URL is set here.
     * 
    */
    public String getHttpsTriggerUrl() {
        return this.httpsTriggerUrl;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * Controls what traffic can reach the function.
     * 
    */
    public String getIngressSettings() {
        return this.ingressSettings;
    }
    /**
     * A map of labels applied to this function.
     * 
    */
    public Map<String,Object> getLabels() {
        return this.labels;
    }
    /**
     * The limit on the maximum number of function instances that may coexist at a given time.
     * 
    */
    public Integer getMaxInstances() {
        return this.maxInstances;
    }
    public Integer getMinInstances() {
        return this.minInstances;
    }
    /**
     * The name of the Cloud Function.
     * 
    */
    public String getName() {
        return this.name;
    }
    public Optional<String> getProject() {
        return Optional.ofNullable(this.project);
    }
    public Optional<String> getRegion() {
        return Optional.ofNullable(this.region);
    }
    /**
     * The runtime in which the function is running.
     * 
    */
    public String getRuntime() {
        return this.runtime;
    }
    /**
     * The service account email to be assumed by the cloud function.
     * 
    */
    public String getServiceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * The GCS bucket containing the zip archive which contains the function.
     * 
    */
    public String getSourceArchiveBucket() {
        return this.sourceArchiveBucket;
    }
    /**
     * The source archive object (file) in archive bucket.
     * 
    */
    public String getSourceArchiveObject() {
        return this.sourceArchiveObject;
    }
    /**
     * The URL of the Cloud Source Repository that the function is deployed from. Structure is documented below.
     * 
    */
    public List<GetFunctionSourceRepository> getSourceRepositories() {
        return this.sourceRepositories;
    }
    /**
     * Function execution timeout (in seconds).
     * 
    */
    public Integer getTimeout() {
        return this.timeout;
    }
    /**
     * If function is triggered by HTTP, this boolean is set.
     * 
    */
    public Boolean getTriggerHttp() {
        return this.triggerHttp;
    }
    /**
     * The VPC Network Connector that this cloud function can connect to.
     * 
    */
    public String getVpcConnector() {
        return this.vpcConnector;
    }
    /**
     * The egress settings for the connector, controlling what traffic is diverted through it.
     * 
    */
    public String getVpcConnectorEgressSettings() {
        return this.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer availableMemoryMb;
        private Map<String,Object> buildEnvironmentVariables;
        private String description;
        private String entryPoint;
        private Map<String,Object> environmentVariables;
        private List<GetFunctionEventTrigger> eventTriggers;
        private String httpsTriggerUrl;
        private String id;
        private String ingressSettings;
        private Map<String,Object> labels;
        private Integer maxInstances;
        private Integer minInstances;
        private String name;
        private @Nullable String project;
        private @Nullable String region;
        private String runtime;
        private String serviceAccountEmail;
        private String sourceArchiveBucket;
        private String sourceArchiveObject;
        private List<GetFunctionSourceRepository> sourceRepositories;
        private Integer timeout;
        private Boolean triggerHttp;
        private String vpcConnector;
        private String vpcConnectorEgressSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableMemoryMb = defaults.availableMemoryMb;
    	      this.buildEnvironmentVariables = defaults.buildEnvironmentVariables;
    	      this.description = defaults.description;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.eventTriggers = defaults.eventTriggers;
    	      this.httpsTriggerUrl = defaults.httpsTriggerUrl;
    	      this.id = defaults.id;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.labels = defaults.labels;
    	      this.maxInstances = defaults.maxInstances;
    	      this.minInstances = defaults.minInstances;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.runtime = defaults.runtime;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.sourceArchiveBucket = defaults.sourceArchiveBucket;
    	      this.sourceArchiveObject = defaults.sourceArchiveObject;
    	      this.sourceRepositories = defaults.sourceRepositories;
    	      this.timeout = defaults.timeout;
    	      this.triggerHttp = defaults.triggerHttp;
    	      this.vpcConnector = defaults.vpcConnector;
    	      this.vpcConnectorEgressSettings = defaults.vpcConnectorEgressSettings;
        }

        public Builder setAvailableMemoryMb(Integer availableMemoryMb) {
            this.availableMemoryMb = Objects.requireNonNull(availableMemoryMb);
            return this;
        }

        public Builder setBuildEnvironmentVariables(Map<String,Object> buildEnvironmentVariables) {
            this.buildEnvironmentVariables = Objects.requireNonNull(buildEnvironmentVariables);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEntryPoint(String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint);
            return this;
        }

        public Builder setEnvironmentVariables(Map<String,Object> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }

        public Builder setEventTriggers(List<GetFunctionEventTrigger> eventTriggers) {
            this.eventTriggers = Objects.requireNonNull(eventTriggers);
            return this;
        }

        public Builder setHttpsTriggerUrl(String httpsTriggerUrl) {
            this.httpsTriggerUrl = Objects.requireNonNull(httpsTriggerUrl);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIngressSettings(String ingressSettings) {
            this.ingressSettings = Objects.requireNonNull(ingressSettings);
            return this;
        }

        public Builder setLabels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMaxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }

        public Builder setMinInstances(Integer minInstances) {
            this.minInstances = Objects.requireNonNull(minInstances);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = project;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = region;
            return this;
        }

        public Builder setRuntime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }

        public Builder setServiceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }

        public Builder setSourceArchiveBucket(String sourceArchiveBucket) {
            this.sourceArchiveBucket = Objects.requireNonNull(sourceArchiveBucket);
            return this;
        }

        public Builder setSourceArchiveObject(String sourceArchiveObject) {
            this.sourceArchiveObject = Objects.requireNonNull(sourceArchiveObject);
            return this;
        }

        public Builder setSourceRepositories(List<GetFunctionSourceRepository> sourceRepositories) {
            this.sourceRepositories = Objects.requireNonNull(sourceRepositories);
            return this;
        }

        public Builder setTimeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setTriggerHttp(Boolean triggerHttp) {
            this.triggerHttp = Objects.requireNonNull(triggerHttp);
            return this;
        }

        public Builder setVpcConnector(String vpcConnector) {
            this.vpcConnector = Objects.requireNonNull(vpcConnector);
            return this;
        }

        public Builder setVpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
            return this;
        }
        public GetFunctionResult build() {
            return new GetFunctionResult(availableMemoryMb, buildEnvironmentVariables, description, entryPoint, environmentVariables, eventTriggers, httpsTriggerUrl, id, ingressSettings, labels, maxInstances, minInstances, name, project, region, runtime, serviceAccountEmail, sourceArchiveBucket, sourceArchiveObject, sourceRepositories, timeout, triggerHttp, vpcConnector, vpcConnectorEgressSettings);
        }
    }
}
