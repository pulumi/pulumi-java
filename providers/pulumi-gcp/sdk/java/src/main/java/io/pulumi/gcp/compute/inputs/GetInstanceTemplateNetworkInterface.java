// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.GetInstanceTemplateNetworkInterfaceAccessConfig;
import io.pulumi.gcp.compute.inputs.GetInstanceTemplateNetworkInterfaceAliasIpRange;
import io.pulumi.gcp.compute.inputs.GetInstanceTemplateNetworkInterfaceIpv6AccessConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInstanceTemplateNetworkInterface extends io.pulumi.resources.InvokeArgs {

    public static final GetInstanceTemplateNetworkInterface Empty = new GetInstanceTemplateNetworkInterface();

    /**
     * Access configurations, i.e. IPs via which this
     * instance can be accessed via the Internet. Omit to ensure that the instance
     * is not accessible from the Internet (this means that ssh provisioners will
     * not work unless you are running the prvovider can send traffic to the instance's
     * network (e.g. via tunnel or because it is running on another cloud instance
     * on that network). This block can be repeated multiple times. Structure documented below.
     * 
     */
    @InputImport(name="accessConfigs", required=true)
      private final List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs;

    public List<GetInstanceTemplateNetworkInterfaceAccessConfig> getAccessConfigs() {
        return this.accessConfigs;
    }

    /**
     * An
     * array of alias IP ranges for this network interface. Can only be specified for network
     * interfaces on subnet-mode networks. Structure documented below.
     * 
     */
    @InputImport(name="aliasIpRanges", required=true)
      private final List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges;

    public List<GetInstanceTemplateNetworkInterfaceAliasIpRange> getAliasIpRanges() {
        return this.aliasIpRanges;
    }

    @InputImport(name="ipv6AccessConfigs", required=true)
      private final List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;

    public List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> getIpv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }

    @InputImport(name="ipv6AccessType", required=true)
      private final String ipv6AccessType;

    public String getIpv6AccessType() {
        return this.ipv6AccessType;
    }

    /**
     * The name of the instance template. One of `name` or `filter` must be provided.
     * 
     */
    @InputImport(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * The name or self_link of the network to attach this interface to.
     * Use `network` attribute for Legacy or Auto subnetted networks and
     * `subnetwork` for custom subnetted networks.
     * 
     */
    @InputImport(name="network", required=true)
      private final String network;

    public String getNetwork() {
        return this.network;
    }

    /**
     * The private IP address to assign to the instance. If
     * empty, the address will be automatically assigned.
     * 
     */
    @InputImport(name="networkIp", required=true)
      private final String networkIp;

    public String getNetworkIp() {
        return this.networkIp;
    }

    @InputImport(name="nicType", required=true)
      private final String nicType;

    public String getNicType() {
        return this.nicType;
    }

    @InputImport(name="queueCount", required=true)
      private final Integer queueCount;

    public Integer getQueueCount() {
        return this.queueCount;
    }

    @InputImport(name="stackType", required=true)
      private final String stackType;

    public String getStackType() {
        return this.stackType;
    }

    /**
     * the name of the subnetwork to attach this interface
     * to. The subnetwork must exist in the same `region` this instance will be
     * created in. Either `network` or `subnetwork` must be provided.
     * 
     */
    @InputImport(name="subnetwork", required=true)
      private final String subnetwork;

    public String getSubnetwork() {
        return this.subnetwork;
    }

    /**
     * The ID of the project in which the subnetwork belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="subnetworkProject", required=true)
      private final String subnetworkProject;

    public String getSubnetworkProject() {
        return this.subnetworkProject;
    }

    public GetInstanceTemplateNetworkInterface(
        List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs,
        List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges,
        List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs,
        String ipv6AccessType,
        String name,
        String network,
        String networkIp,
        String nicType,
        Integer queueCount,
        String stackType,
        String subnetwork,
        String subnetworkProject) {
        this.accessConfigs = Objects.requireNonNull(accessConfigs, "expected parameter 'accessConfigs' to be non-null");
        this.aliasIpRanges = Objects.requireNonNull(aliasIpRanges, "expected parameter 'aliasIpRanges' to be non-null");
        this.ipv6AccessConfigs = Objects.requireNonNull(ipv6AccessConfigs, "expected parameter 'ipv6AccessConfigs' to be non-null");
        this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType, "expected parameter 'ipv6AccessType' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.networkIp = Objects.requireNonNull(networkIp, "expected parameter 'networkIp' to be non-null");
        this.nicType = Objects.requireNonNull(nicType, "expected parameter 'nicType' to be non-null");
        this.queueCount = Objects.requireNonNull(queueCount, "expected parameter 'queueCount' to be non-null");
        this.stackType = Objects.requireNonNull(stackType, "expected parameter 'stackType' to be non-null");
        this.subnetwork = Objects.requireNonNull(subnetwork, "expected parameter 'subnetwork' to be non-null");
        this.subnetworkProject = Objects.requireNonNull(subnetworkProject, "expected parameter 'subnetworkProject' to be non-null");
    }

    private GetInstanceTemplateNetworkInterface() {
        this.accessConfigs = List.of();
        this.aliasIpRanges = List.of();
        this.ipv6AccessConfigs = List.of();
        this.ipv6AccessType = null;
        this.name = null;
        this.network = null;
        this.networkIp = null;
        this.nicType = null;
        this.queueCount = null;
        this.stackType = null;
        this.subnetwork = null;
        this.subnetworkProject = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTemplateNetworkInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs;
        private List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges;
        private List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
        private String ipv6AccessType;
        private String name;
        private String network;
        private String networkIp;
        private String nicType;
        private Integer queueCount;
        private String stackType;
        private String subnetwork;
        private String subnetworkProject;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceTemplateNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkIp = defaults.networkIp;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
    	      this.subnetworkProject = defaults.subnetworkProject;
        }

        public Builder setAccessConfigs(List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs) {
            this.accessConfigs = Objects.requireNonNull(accessConfigs);
            return this;
        }

        public Builder setAliasIpRanges(List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges) {
            this.aliasIpRanges = Objects.requireNonNull(aliasIpRanges);
            return this;
        }

        public Builder setIpv6AccessConfigs(List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs) {
            this.ipv6AccessConfigs = Objects.requireNonNull(ipv6AccessConfigs);
            return this;
        }

        public Builder setIpv6AccessType(String ipv6AccessType) {
            this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setNetworkIp(String networkIp) {
            this.networkIp = Objects.requireNonNull(networkIp);
            return this;
        }

        public Builder setNicType(String nicType) {
            this.nicType = Objects.requireNonNull(nicType);
            return this;
        }

        public Builder setQueueCount(Integer queueCount) {
            this.queueCount = Objects.requireNonNull(queueCount);
            return this;
        }

        public Builder setStackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public Builder setSubnetworkProject(String subnetworkProject) {
            this.subnetworkProject = Objects.requireNonNull(subnetworkProject);
            return this;
        }
        public GetInstanceTemplateNetworkInterface build() {
            return new GetInstanceTemplateNetworkInterface(accessConfigs, aliasIpRanges, ipv6AccessConfigs, ipv6AccessType, name, network, networkIp, nicType, queueCount, stackType, subnetwork, subnetworkProject);
        }
    }
}
