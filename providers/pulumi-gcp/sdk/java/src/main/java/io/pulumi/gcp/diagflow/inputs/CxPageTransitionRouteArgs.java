// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.diagflow.inputs.CxPageTransitionRouteTriggerFulfillmentArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxPageTransitionRouteArgs extends io.pulumi.resources.ResourceArgs {

    public static final CxPageTransitionRouteArgs Empty = new CxPageTransitionRouteArgs();

    /**
     * The condition to evaluate against form parameters or session parameters.
     * At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
     * 
     */
    @Import(name="condition")
      private final @Nullable Output<String> condition;

    public Output<String> condition() {
        return this.condition == null ? Codegen.empty() : this.condition;
    }

    /**
     * The unique identifier of an Intent.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
     * 
     */
    @Import(name="intent")
      private final @Nullable Output<String> intent;

    public Output<String> intent() {
        return this.intent == null ? Codegen.empty() : this.intent;
    }

    /**
     * - 
     * The unique identifier of this event handler.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The target flow to transition to.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
     * 
     */
    @Import(name="targetFlow")
      private final @Nullable Output<String> targetFlow;

    public Output<String> targetFlow() {
        return this.targetFlow == null ? Codegen.empty() : this.targetFlow;
    }

    /**
     * The target page to transition to.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
     * 
     */
    @Import(name="targetPage")
      private final @Nullable Output<String> targetPage;

    public Output<String> targetPage() {
        return this.targetPage == null ? Codegen.empty() : this.targetPage;
    }

    /**
     * The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
     * Structure is documented below.
     * 
     */
    @Import(name="triggerFulfillment")
      private final @Nullable Output<CxPageTransitionRouteTriggerFulfillmentArgs> triggerFulfillment;

    public Output<CxPageTransitionRouteTriggerFulfillmentArgs> triggerFulfillment() {
        return this.triggerFulfillment == null ? Codegen.empty() : this.triggerFulfillment;
    }

    public CxPageTransitionRouteArgs(
        @Nullable Output<String> condition,
        @Nullable Output<String> intent,
        @Nullable Output<String> name,
        @Nullable Output<String> targetFlow,
        @Nullable Output<String> targetPage,
        @Nullable Output<CxPageTransitionRouteTriggerFulfillmentArgs> triggerFulfillment) {
        this.condition = condition;
        this.intent = intent;
        this.name = name;
        this.targetFlow = targetFlow;
        this.targetPage = targetPage;
        this.triggerFulfillment = triggerFulfillment;
    }

    private CxPageTransitionRouteArgs() {
        this.condition = Codegen.empty();
        this.intent = Codegen.empty();
        this.name = Codegen.empty();
        this.targetFlow = Codegen.empty();
        this.targetPage = Codegen.empty();
        this.triggerFulfillment = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxPageTransitionRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> condition;
        private @Nullable Output<String> intent;
        private @Nullable Output<String> name;
        private @Nullable Output<String> targetFlow;
        private @Nullable Output<String> targetPage;
        private @Nullable Output<CxPageTransitionRouteTriggerFulfillmentArgs> triggerFulfillment;

        public Builder() {
    	      // Empty
        }

        public Builder(CxPageTransitionRouteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.intent = defaults.intent;
    	      this.name = defaults.name;
    	      this.targetFlow = defaults.targetFlow;
    	      this.targetPage = defaults.targetPage;
    	      this.triggerFulfillment = defaults.triggerFulfillment;
        }

        public Builder condition(@Nullable Output<String> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable String condition) {
            this.condition = Codegen.ofNullable(condition);
            return this;
        }
        public Builder intent(@Nullable Output<String> intent) {
            this.intent = intent;
            return this;
        }
        public Builder intent(@Nullable String intent) {
            this.intent = Codegen.ofNullable(intent);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder targetFlow(@Nullable Output<String> targetFlow) {
            this.targetFlow = targetFlow;
            return this;
        }
        public Builder targetFlow(@Nullable String targetFlow) {
            this.targetFlow = Codegen.ofNullable(targetFlow);
            return this;
        }
        public Builder targetPage(@Nullable Output<String> targetPage) {
            this.targetPage = targetPage;
            return this;
        }
        public Builder targetPage(@Nullable String targetPage) {
            this.targetPage = Codegen.ofNullable(targetPage);
            return this;
        }
        public Builder triggerFulfillment(@Nullable Output<CxPageTransitionRouteTriggerFulfillmentArgs> triggerFulfillment) {
            this.triggerFulfillment = triggerFulfillment;
            return this;
        }
        public Builder triggerFulfillment(@Nullable CxPageTransitionRouteTriggerFulfillmentArgs triggerFulfillment) {
            this.triggerFulfillment = Codegen.ofNullable(triggerFulfillment);
            return this;
        }        public CxPageTransitionRouteArgs build() {
            return new CxPageTransitionRouteArgs(condition, intent, name, targetFlow, targetPage, triggerFulfillment);
        }
    }
}
