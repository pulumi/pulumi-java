// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.gameservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.gameservices.inputs.GameServerClusterConnectionInfoGetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GameServerClusterState extends io.pulumi.resources.ResourceArgs {

    public static final GameServerClusterState Empty = new GameServerClusterState();

    /**
     * Required. The resource name of the game server cluster
     * 
     */
    @Import(name="clusterId")
      private final @Nullable Output<String> clusterId;

    public Output<String> getClusterId() {
        return this.clusterId == null ? Output.empty() : this.clusterId;
    }

    /**
     * Game server cluster connection information. This information is used to
     * manage game server clusters.
     * Structure is documented below.
     * 
     */
    @Import(name="connectionInfo")
      private final @Nullable Output<GameServerClusterConnectionInfoGetArgs> connectionInfo;

    public Output<GameServerClusterConnectionInfoGetArgs> getConnectionInfo() {
        return this.connectionInfo == null ? Output.empty() : this.connectionInfo;
    }

    /**
     * Human readable description of the cluster.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The labels associated with this game server cluster. Each label is a
     * key-value pair.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * Location of the Cluster.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The resource id of the game server cluster, eg:
     * 'projects/{project_id}/locations/{location}/realms/{realm_id}/gameServerClusters/{cluster_id}'. For example,
     * 'projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster'.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The realm id of the game server realm.
     * 
     */
    @Import(name="realmId")
      private final @Nullable Output<String> realmId;

    public Output<String> getRealmId() {
        return this.realmId == null ? Output.empty() : this.realmId;
    }

    public GameServerClusterState(
        @Nullable Output<String> clusterId,
        @Nullable Output<GameServerClusterConnectionInfoGetArgs> connectionInfo,
        @Nullable Output<String> description,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> realmId) {
        this.clusterId = clusterId;
        this.connectionInfo = connectionInfo;
        this.description = description;
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.project = project;
        this.realmId = realmId;
    }

    private GameServerClusterState() {
        this.clusterId = Output.empty();
        this.connectionInfo = Output.empty();
        this.description = Output.empty();
        this.labels = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.realmId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GameServerClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> clusterId;
        private @Nullable Output<GameServerClusterConnectionInfoGetArgs> connectionInfo;
        private @Nullable Output<String> description;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> realmId;

        public Builder() {
    	      // Empty
        }

        public Builder(GameServerClusterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.connectionInfo = defaults.connectionInfo;
    	      this.description = defaults.description;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.realmId = defaults.realmId;
        }

        public Builder clusterId(@Nullable Output<String> clusterId) {
            this.clusterId = clusterId;
            return this;
        }

        public Builder clusterId(@Nullable String clusterId) {
            this.clusterId = Output.ofNullable(clusterId);
            return this;
        }

        public Builder connectionInfo(@Nullable Output<GameServerClusterConnectionInfoGetArgs> connectionInfo) {
            this.connectionInfo = connectionInfo;
            return this;
        }

        public Builder connectionInfo(@Nullable GameServerClusterConnectionInfoGetArgs connectionInfo) {
            this.connectionInfo = Output.ofNullable(connectionInfo);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder realmId(@Nullable Output<String> realmId) {
            this.realmId = realmId;
            return this;
        }

        public Builder realmId(@Nullable String realmId) {
            this.realmId = Output.ofNullable(realmId);
            return this;
        }
        public GameServerClusterState build() {
            return new GameServerClusterState(clusterId, connectionInfo, description, labels, location, name, project, realmId);
        }
    }
}
