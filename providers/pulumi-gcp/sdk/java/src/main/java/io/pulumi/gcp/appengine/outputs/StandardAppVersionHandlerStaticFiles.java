// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class StandardAppVersionHandlerStaticFiles {
    private final @Nullable Boolean applicationReadable;
    private final @Nullable String expiration;
    private final @Nullable Map<String,String> httpHeaders;
    private final @Nullable String mimeType;
    private final @Nullable String path;
    private final @Nullable Boolean requireMatchingFile;
    private final @Nullable String uploadPathRegex;

    @OutputCustomType.Constructor({"applicationReadable","expiration","httpHeaders","mimeType","path","requireMatchingFile","uploadPathRegex"})
    private StandardAppVersionHandlerStaticFiles(
        @Nullable Boolean applicationReadable,
        @Nullable String expiration,
        @Nullable Map<String,String> httpHeaders,
        @Nullable String mimeType,
        @Nullable String path,
        @Nullable Boolean requireMatchingFile,
        @Nullable String uploadPathRegex) {
        this.applicationReadable = applicationReadable;
        this.expiration = expiration;
        this.httpHeaders = httpHeaders;
        this.mimeType = mimeType;
        this.path = path;
        this.requireMatchingFile = requireMatchingFile;
        this.uploadPathRegex = uploadPathRegex;
    }

    public Optional<Boolean> getApplicationReadable() {
        return Optional.ofNullable(this.applicationReadable);
    }
    public Optional<String> getExpiration() {
        return Optional.ofNullable(this.expiration);
    }
    public Map<String,String> getHttpHeaders() {
        return this.httpHeaders == null ? Map.of() : this.httpHeaders;
    }
    public Optional<String> getMimeType() {
        return Optional.ofNullable(this.mimeType);
    }
    public Optional<String> getPath() {
        return Optional.ofNullable(this.path);
    }
    public Optional<Boolean> getRequireMatchingFile() {
        return Optional.ofNullable(this.requireMatchingFile);
    }
    public Optional<String> getUploadPathRegex() {
        return Optional.ofNullable(this.uploadPathRegex);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardAppVersionHandlerStaticFiles defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean applicationReadable;
        private @Nullable String expiration;
        private @Nullable Map<String,String> httpHeaders;
        private @Nullable String mimeType;
        private @Nullable String path;
        private @Nullable Boolean requireMatchingFile;
        private @Nullable String uploadPathRegex;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardAppVersionHandlerStaticFiles defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReadable = defaults.applicationReadable;
    	      this.expiration = defaults.expiration;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.mimeType = defaults.mimeType;
    	      this.path = defaults.path;
    	      this.requireMatchingFile = defaults.requireMatchingFile;
    	      this.uploadPathRegex = defaults.uploadPathRegex;
        }

        public Builder setApplicationReadable(@Nullable Boolean applicationReadable) {
            this.applicationReadable = applicationReadable;
            return this;
        }

        public Builder setExpiration(@Nullable String expiration) {
            this.expiration = expiration;
            return this;
        }

        public Builder setHttpHeaders(@Nullable Map<String,String> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }

        public Builder setMimeType(@Nullable String mimeType) {
            this.mimeType = mimeType;
            return this;
        }

        public Builder setPath(@Nullable String path) {
            this.path = path;
            return this;
        }

        public Builder setRequireMatchingFile(@Nullable Boolean requireMatchingFile) {
            this.requireMatchingFile = requireMatchingFile;
            return this;
        }

        public Builder setUploadPathRegex(@Nullable String uploadPathRegex) {
            this.uploadPathRegex = uploadPathRegex;
            return this;
        }

        public StandardAppVersionHandlerStaticFiles build() {
            return new StandardAppVersionHandlerStaticFiles(applicationReadable, expiration, httpHeaders, mimeType, path, requireMatchingFile, uploadPathRegex);
        }
    }
}
