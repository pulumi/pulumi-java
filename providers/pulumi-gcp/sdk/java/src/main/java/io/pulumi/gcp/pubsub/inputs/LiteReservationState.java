// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.pubsub.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LiteReservationState extends io.pulumi.resources.ResourceArgs {

    public static final LiteReservationState Empty = new LiteReservationState();

    /**
     * Name of the reservation.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The region of the pubsub lite reservation.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The reserved throughput capacity. Every unit of throughput capacity is
     * equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed
     * messages.
     * 
     */
    @Import(name="throughputCapacity")
      private final @Nullable Output<Integer> throughputCapacity;

    public Output<Integer> getThroughputCapacity() {
        return this.throughputCapacity == null ? Codegen.empty() : this.throughputCapacity;
    }

    public LiteReservationState(
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<Integer> throughputCapacity) {
        this.name = name;
        this.project = project;
        this.region = region;
        this.throughputCapacity = throughputCapacity;
    }

    private LiteReservationState() {
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.throughputCapacity = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiteReservationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<Integer> throughputCapacity;

        public Builder() {
    	      // Empty
        }

        public Builder(LiteReservationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.throughputCapacity = defaults.throughputCapacity;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder throughputCapacity(@Nullable Output<Integer> throughputCapacity) {
            this.throughputCapacity = throughputCapacity;
            return this;
        }
        public Builder throughputCapacity(@Nullable Integer throughputCapacity) {
            this.throughputCapacity = Codegen.ofNullable(throughputCapacity);
            return this;
        }        public LiteReservationState build() {
            return new LiteReservationState(name, project, region, throughputCapacity);
        }
    }
}
