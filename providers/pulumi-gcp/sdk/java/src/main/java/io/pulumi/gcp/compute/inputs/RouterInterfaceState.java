// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterInterfaceState extends io.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceState Empty = new RouterInterfaceState();

    /**
     * The name or resource link to the
     * VLAN interconnect for this interface. Changing this forces a new interface to
     * be created. Only one of `vpn_tunnel` and `interconnect_attachment` can be
     * specified.
     * 
     */
    @Import(name="interconnectAttachment")
      private final @Nullable Output<String> interconnectAttachment;

    public Output<String> interconnectAttachment() {
        return this.interconnectAttachment == null ? Codegen.empty() : this.interconnectAttachment;
    }

    /**
     * IP address and range of the interface. The IP range must be
     * in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="ipRange")
      private final @Nullable Output<String> ipRange;

    public Output<String> ipRange() {
        return this.ipRange == null ? Codegen.empty() : this.ipRange;
    }

    /**
     * A unique name for the interface, required by GCE. Changing
     * this forces a new interface to be created.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which this interface's router belongs. If it
     * is not provided, the provider project is used. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The region this interface's router sits in. If not specified,
     * the project region will be used. Changing this forces a new interface to be
     * created.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The name of the router this interface will be attached to.
     * Changing this forces a new interface to be created.
     * 
     */
    @Import(name="router")
      private final @Nullable Output<String> router;

    public Output<String> router() {
        return this.router == null ? Codegen.empty() : this.router;
    }

    /**
     * The name or resource link to the VPN tunnel this
     * interface will be linked to. Changing this forces a new interface to be created. Only
     * one of `vpn_tunnel` and `interconnect_attachment` can be specified.
     * 
     */
    @Import(name="vpnTunnel")
      private final @Nullable Output<String> vpnTunnel;

    public Output<String> vpnTunnel() {
        return this.vpnTunnel == null ? Codegen.empty() : this.vpnTunnel;
    }

    public RouterInterfaceState(
        @Nullable Output<String> interconnectAttachment,
        @Nullable Output<String> ipRange,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<String> router,
        @Nullable Output<String> vpnTunnel) {
        this.interconnectAttachment = interconnectAttachment;
        this.ipRange = ipRange;
        this.name = name;
        this.project = project;
        this.region = region;
        this.router = router;
        this.vpnTunnel = vpnTunnel;
    }

    private RouterInterfaceState() {
        this.interconnectAttachment = Codegen.empty();
        this.ipRange = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.router = Codegen.empty();
        this.vpnTunnel = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterInterfaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> interconnectAttachment;
        private @Nullable Output<String> ipRange;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<String> router;
        private @Nullable Output<String> vpnTunnel;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterInterfaceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interconnectAttachment = defaults.interconnectAttachment;
    	      this.ipRange = defaults.ipRange;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
    	      this.vpnTunnel = defaults.vpnTunnel;
        }

        public Builder interconnectAttachment(@Nullable Output<String> interconnectAttachment) {
            this.interconnectAttachment = interconnectAttachment;
            return this;
        }
        public Builder interconnectAttachment(@Nullable String interconnectAttachment) {
            this.interconnectAttachment = Codegen.ofNullable(interconnectAttachment);
            return this;
        }
        public Builder ipRange(@Nullable Output<String> ipRange) {
            this.ipRange = ipRange;
            return this;
        }
        public Builder ipRange(@Nullable String ipRange) {
            this.ipRange = Codegen.ofNullable(ipRange);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder router(@Nullable Output<String> router) {
            this.router = router;
            return this;
        }
        public Builder router(@Nullable String router) {
            this.router = Codegen.ofNullable(router);
            return this;
        }
        public Builder vpnTunnel(@Nullable Output<String> vpnTunnel) {
            this.vpnTunnel = vpnTunnel;
            return this;
        }
        public Builder vpnTunnel(@Nullable String vpnTunnel) {
            this.vpnTunnel = Codegen.ofNullable(vpnTunnel);
            return this;
        }        public RouterInterfaceState build() {
            return new RouterInterfaceState(interconnectAttachment, ipRange, name, project, region, router, vpnTunnel);
        }
    }
}
