// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.RoutineArgumentGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RoutineState extends io.pulumi.resources.ResourceArgs {

    public static final RoutineState Empty = new RoutineState();

    /**
     * Input/output argument of a function or a stored procedure.
     * Structure is documented below.
     * 
     */
    @InputImport(name="arguments")
      private final @Nullable Input<List<RoutineArgumentGetArgs>> arguments;

    public Input<List<RoutineArgumentGetArgs>> getArguments() {
        return this.arguments == null ? Input.empty() : this.arguments;
    }

    /**
     * The time when this routine was created, in milliseconds since the epoch.
     * 
     */
    @InputImport(name="creationTime")
      private final @Nullable Input<Integer> creationTime;

    public Input<Integer> getCreationTime() {
        return this.creationTime == null ? Input.empty() : this.creationTime;
    }

    /**
     * The ID of the dataset containing this routine
     * 
     */
    @InputImport(name="datasetId")
      private final @Nullable Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId == null ? Input.empty() : this.datasetId;
    }

    /**
     * The body of the routine. For functions, this is the expression in the AS clause.
     * If language=SQL, it is the substring inside (but excluding) the parentheses.
     * 
     */
    @InputImport(name="definitionBody")
      private final @Nullable Input<String> definitionBody;

    public Input<String> getDefinitionBody() {
        return this.definitionBody == null ? Input.empty() : this.definitionBody;
    }

    /**
     * The description of the routine if defined.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The determinism level of the JavaScript UDF if defined.
     * Possible values are `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, and `NOT_DETERMINISTIC`.
     * 
     */
    @InputImport(name="determinismLevel")
      private final @Nullable Input<String> determinismLevel;

    public Input<String> getDeterminismLevel() {
        return this.determinismLevel == null ? Input.empty() : this.determinismLevel;
    }

    /**
     * Optional. If language = "JAVASCRIPT", this field stores the path of the
     * imported JAVASCRIPT libraries.
     * 
     */
    @InputImport(name="importedLibraries")
      private final @Nullable Input<List<String>> importedLibraries;

    public Input<List<String>> getImportedLibraries() {
        return this.importedLibraries == null ? Input.empty() : this.importedLibraries;
    }

    /**
     * The language of the routine.
     * Possible values are `SQL` and `JAVASCRIPT`.
     * 
     */
    @InputImport(name="language")
      private final @Nullable Input<String> language;

    public Input<String> getLanguage() {
        return this.language == null ? Input.empty() : this.language;
    }

    /**
     * The time when this routine was modified, in milliseconds since the epoch.
     * 
     */
    @InputImport(name="lastModifiedTime")
      private final @Nullable Input<Integer> lastModifiedTime;

    public Input<Integer> getLastModifiedTime() {
        return this.lastModifiedTime == null ? Input.empty() : this.lastModifiedTime;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
     * If absent, the return table type is inferred from definitionBody at query time in each query
     * that references this routine. If present, then the columns in the evaluated table result will
     * be cast to match the column types specificed in return table type, at query time.
     * 
     */
    @InputImport(name="returnTableType")
      private final @Nullable Input<String> returnTableType;

    public Input<String> getReturnTableType() {
        return this.returnTableType == null ? Input.empty() : this.returnTableType;
    }

    /**
     * A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
     * If absent, the return type is inferred from definitionBody at query time in each query
     * that references this routine. If present, then the evaluated result will be cast to
     * the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
     * string, any changes to the string will create a diff, even if the JSON itself hasn't
     * changed. If the API returns a different value for the same schema, e.g. it switche
     * d the order of values or replaced STRUCT field type with RECORD field type, we currently
     * cannot suppress the recurring diff this causes. As a workaround, we recommend using
     * the schema as returned by the API.
     * 
     */
    @InputImport(name="returnType")
      private final @Nullable Input<String> returnType;

    public Input<String> getReturnType() {
        return this.returnType == null ? Input.empty() : this.returnType;
    }

    /**
     * The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
     * 
     */
    @InputImport(name="routineId")
      private final @Nullable Input<String> routineId;

    public Input<String> getRoutineId() {
        return this.routineId == null ? Input.empty() : this.routineId;
    }

    /**
     * The type of routine.
     * Possible values are `SCALAR_FUNCTION`, `PROCEDURE`, and `TABLE_VALUED_FUNCTION`.
     * 
     */
    @InputImport(name="routineType")
      private final @Nullable Input<String> routineType;

    public Input<String> getRoutineType() {
        return this.routineType == null ? Input.empty() : this.routineType;
    }

    public RoutineState(
        @Nullable Input<List<RoutineArgumentGetArgs>> arguments,
        @Nullable Input<Integer> creationTime,
        @Nullable Input<String> datasetId,
        @Nullable Input<String> definitionBody,
        @Nullable Input<String> description,
        @Nullable Input<String> determinismLevel,
        @Nullable Input<List<String>> importedLibraries,
        @Nullable Input<String> language,
        @Nullable Input<Integer> lastModifiedTime,
        @Nullable Input<String> project,
        @Nullable Input<String> returnTableType,
        @Nullable Input<String> returnType,
        @Nullable Input<String> routineId,
        @Nullable Input<String> routineType) {
        this.arguments = arguments;
        this.creationTime = creationTime;
        this.datasetId = datasetId;
        this.definitionBody = definitionBody;
        this.description = description;
        this.determinismLevel = determinismLevel;
        this.importedLibraries = importedLibraries;
        this.language = language;
        this.lastModifiedTime = lastModifiedTime;
        this.project = project;
        this.returnTableType = returnTableType;
        this.returnType = returnType;
        this.routineId = routineId;
        this.routineType = routineType;
    }

    private RoutineState() {
        this.arguments = Input.empty();
        this.creationTime = Input.empty();
        this.datasetId = Input.empty();
        this.definitionBody = Input.empty();
        this.description = Input.empty();
        this.determinismLevel = Input.empty();
        this.importedLibraries = Input.empty();
        this.language = Input.empty();
        this.lastModifiedTime = Input.empty();
        this.project = Input.empty();
        this.returnTableType = Input.empty();
        this.returnType = Input.empty();
        this.routineId = Input.empty();
        this.routineType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<RoutineArgumentGetArgs>> arguments;
        private @Nullable Input<Integer> creationTime;
        private @Nullable Input<String> datasetId;
        private @Nullable Input<String> definitionBody;
        private @Nullable Input<String> description;
        private @Nullable Input<String> determinismLevel;
        private @Nullable Input<List<String>> importedLibraries;
        private @Nullable Input<String> language;
        private @Nullable Input<Integer> lastModifiedTime;
        private @Nullable Input<String> project;
        private @Nullable Input<String> returnTableType;
        private @Nullable Input<String> returnType;
        private @Nullable Input<String> routineId;
        private @Nullable Input<String> routineType;

        public Builder() {
    	      // Empty
        }

        public Builder(RoutineState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.creationTime = defaults.creationTime;
    	      this.datasetId = defaults.datasetId;
    	      this.definitionBody = defaults.definitionBody;
    	      this.description = defaults.description;
    	      this.determinismLevel = defaults.determinismLevel;
    	      this.importedLibraries = defaults.importedLibraries;
    	      this.language = defaults.language;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.project = defaults.project;
    	      this.returnTableType = defaults.returnTableType;
    	      this.returnType = defaults.returnType;
    	      this.routineId = defaults.routineId;
    	      this.routineType = defaults.routineType;
        }

        public Builder setArguments(@Nullable Input<List<RoutineArgumentGetArgs>> arguments) {
            this.arguments = arguments;
            return this;
        }

        public Builder setArguments(@Nullable List<RoutineArgumentGetArgs> arguments) {
            this.arguments = Input.ofNullable(arguments);
            return this;
        }

        public Builder setCreationTime(@Nullable Input<Integer> creationTime) {
            this.creationTime = creationTime;
            return this;
        }

        public Builder setCreationTime(@Nullable Integer creationTime) {
            this.creationTime = Input.ofNullable(creationTime);
            return this;
        }

        public Builder setDatasetId(@Nullable Input<String> datasetId) {
            this.datasetId = datasetId;
            return this;
        }

        public Builder setDatasetId(@Nullable String datasetId) {
            this.datasetId = Input.ofNullable(datasetId);
            return this;
        }

        public Builder setDefinitionBody(@Nullable Input<String> definitionBody) {
            this.definitionBody = definitionBody;
            return this;
        }

        public Builder setDefinitionBody(@Nullable String definitionBody) {
            this.definitionBody = Input.ofNullable(definitionBody);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDeterminismLevel(@Nullable Input<String> determinismLevel) {
            this.determinismLevel = determinismLevel;
            return this;
        }

        public Builder setDeterminismLevel(@Nullable String determinismLevel) {
            this.determinismLevel = Input.ofNullable(determinismLevel);
            return this;
        }

        public Builder setImportedLibraries(@Nullable Input<List<String>> importedLibraries) {
            this.importedLibraries = importedLibraries;
            return this;
        }

        public Builder setImportedLibraries(@Nullable List<String> importedLibraries) {
            this.importedLibraries = Input.ofNullable(importedLibraries);
            return this;
        }

        public Builder setLanguage(@Nullable Input<String> language) {
            this.language = language;
            return this;
        }

        public Builder setLanguage(@Nullable String language) {
            this.language = Input.ofNullable(language);
            return this;
        }

        public Builder setLastModifiedTime(@Nullable Input<Integer> lastModifiedTime) {
            this.lastModifiedTime = lastModifiedTime;
            return this;
        }

        public Builder setLastModifiedTime(@Nullable Integer lastModifiedTime) {
            this.lastModifiedTime = Input.ofNullable(lastModifiedTime);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setReturnTableType(@Nullable Input<String> returnTableType) {
            this.returnTableType = returnTableType;
            return this;
        }

        public Builder setReturnTableType(@Nullable String returnTableType) {
            this.returnTableType = Input.ofNullable(returnTableType);
            return this;
        }

        public Builder setReturnType(@Nullable Input<String> returnType) {
            this.returnType = returnType;
            return this;
        }

        public Builder setReturnType(@Nullable String returnType) {
            this.returnType = Input.ofNullable(returnType);
            return this;
        }

        public Builder setRoutineId(@Nullable Input<String> routineId) {
            this.routineId = routineId;
            return this;
        }

        public Builder setRoutineId(@Nullable String routineId) {
            this.routineId = Input.ofNullable(routineId);
            return this;
        }

        public Builder setRoutineType(@Nullable Input<String> routineType) {
            this.routineType = routineType;
            return this;
        }

        public Builder setRoutineType(@Nullable String routineType) {
            this.routineType = Input.ofNullable(routineType);
            return this;
        }
        public RoutineState build() {
            return new RoutineState(arguments, creationTime, datasetId, definitionBody, description, determinismLevel, importedLibraries, language, lastModifiedTime, project, returnTableType, returnType, routineId, routineType);
        }
    }
}
