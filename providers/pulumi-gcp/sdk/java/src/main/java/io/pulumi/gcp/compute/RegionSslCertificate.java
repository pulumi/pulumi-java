// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.RegionSslCertificateArgs;
import io.pulumi.gcp.compute.inputs.RegionSslCertificateState;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A RegionSslCertificate resource, used for HTTPS load balancing. This resource
 * provides a mechanism to upload an SSL key and certificate to
 * the load balancer to serve secure connections from the user.
 * 
 * 
 * To get more information about RegionSslCertificate, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionSslCertificates)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/ssl-certificates)
 * 
 * > **Warning:** All arguments including `certificate` and `private_key` will be stored in the raw
 * state as plain-text. [Read more about secrets in state](https://www.pulumi.com/docs/intro/concepts/programming-model/#secrets).
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Region Ssl Certificate Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const _default = new gcp.compute.RegionSslCertificate("default", {
 *     region: "us-central1",
 *     namePrefix: "my-certificate-",
 *     description: "a description",
 *     privateKey: fs.readFileSync("path/to/private.key"),
 *     certificate: fs.readFileSync("path/to/certificate.crt"),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default = gcp.compute.RegionSslCertificate("default",
 *     region="us-central1",
 *     name_prefix="my-certificate-",
 *     description="a description",
 *     private_key=(lambda path: open(path).read())("path/to/private.key"),
 *     certificate=(lambda path: open(path).read())("path/to/certificate.crt"))
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var @default = new Gcp.Compute.RegionSslCertificate("default", new Gcp.Compute.RegionSslCertificateArgs
 *         {
 *             Region = "us-central1",
 *             NamePrefix = "my-certificate-",
 *             Description = "a description",
 *             PrivateKey = File.ReadAllText("path/to/private.key"),
 *             Certificate = File.ReadAllText("path/to/certificate.crt"),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionSslCertificate(ctx, "default", &compute.RegionSslCertificateArgs{
 * 			Region:      pulumi.String("us-central1"),
 * 			NamePrefix:  pulumi.String("my-certificate-"),
 * 			Description: pulumi.String("a description"),
 * 			PrivateKey:  readFileOrPanic("path/to/private.key"),
 * 			Certificate: readFileOrPanic("path/to/certificate.crt"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Ssl Certificate Random Provider
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as crypto from "crypto";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 * import * from "fs";
 * 
 * func computeFilebase64sha256(path string) string {
 * 	const fileData = Buffer.from(fs.readFileSync(path), 'binary')
 * 	return crypto.createHash('sha256').update(fileData).digest('hex')
 * }
 * 
 * // You may also want to control name generation explicitly:
 * const _default = new gcp.compute.RegionSslCertificate("default", {
 *     region: "us-central1",
 *     privateKey: fs.readFileSync("path/to/private.key"),
 *     certificate: fs.readFileSync("path/to/certificate.crt"),
 * });
 * const certificate = new random.RandomId("certificate", {
 *     byteLength: 4,
 *     prefix: "my-certificate-",
 *     keepers: {
 *         private_key: computeFilebase64sha256("path/to/private.key"),
 *         certificate: computeFilebase64sha256("path/to/certificate.crt"),
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import base64
 * import hashlib
 * import pulumi_gcp as gcp
 * import pulumi_random as random
 * 
 * def computeFilebase64sha256(path):
 * 	fileData = open(path).read().encode()
 * 	hashedData = hashlib.sha256(fileData.encode()).digest()
 * 	return base64.b64encode(hashedData).decode()
 * 
 * # You may also want to control name generation explicitly:
 * default = gcp.compute.RegionSslCertificate("default",
 *     region="us-central1",
 *     private_key=(lambda path: open(path).read())("path/to/private.key"),
 *     certificate=(lambda path: open(path).read())("path/to/certificate.crt"))
 * certificate = random.RandomId("certificate",
 *     byte_length=4,
 *     prefix="my-certificate-",
 *     keepers={
 *         "private_key": computeFilebase64sha256("path/to/private.key"),
 *         "certificate": computeFilebase64sha256("path/to/certificate.crt"),
 *     })
 * ```
 * ```csharp
 * using System;
 * using System.IO;
 * using System.Security.Cryptography;
 * using System.Text;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * using Random = Pulumi.Random;
 * 
 * class MyStack : Stack
 * {
 * 	private static string ComputeFileBase64Sha256(string path) {
 * 		var fileData = Encoding.UTF8.GetBytes(File.ReadAllText(path));
 * 		var hashData = SHA256.Create().ComputeHash(fileData);
 * 		return Convert.ToBase64String(hashData);
 * 	}
 * 
 *     public MyStack()
 *     {
 *         // You may also want to control name generation explicitly:
 *         var @default = new Gcp.Compute.RegionSslCertificate("default", new Gcp.Compute.RegionSslCertificateArgs
 *         {
 *             Region = "us-central1",
 *             PrivateKey = File.ReadAllText("path/to/private.key"),
 *             Certificate = File.ReadAllText("path/to/certificate.crt"),
 *         });
 *         var certificate = new Random.RandomId("certificate", new Random.RandomIdArgs
 *         {
 *             ByteLength = 4,
 *             Prefix = "my-certificate-",
 *             Keepers = 
 *             {
 *                 { "private_key", ComputeFileBase64Sha256("path/to/private.key") },
 *                 { "certificate", ComputeFileBase64Sha256("path/to/certificate.crt") },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"crypto/sha256"
 * 	"fmt"
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func filebase64sha256OrPanic(path string) pulumi.StringPtrInput {
 * 	if fileData, err := ioutil.ReadFile(path); err == nil {
 * 		hashedData := sha256.Sum256([]byte(fileData))
 * 		return pulumi.String(base64.StdEncoding.EncodeToString(hashedData[:]))
 * 	} else {
 * 		panic(err.Error())
 * 	}
 * }
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionSslCertificate(ctx, "default", &compute.RegionSslCertificateArgs{
 * 			Region:      pulumi.String("us-central1"),
 * 			PrivateKey:  readFileOrPanic("path/to/private.key"),
 * 			Certificate: readFileOrPanic("path/to/certificate.crt"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = random.NewRandomId(ctx, "certificate", &random.RandomIdArgs{
 * 			ByteLength: pulumi.Int(4),
 * 			Prefix:     pulumi.String("my-certificate-"),
 * 			Keepers: pulumi.AnyMap{
 * 				"private_key": filebase64sha256OrPanic("path/to/private.key"),
 * 				"certificate": filebase64sha256OrPanic("path/to/certificate.crt"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Ssl Certificate Target Https Proxies
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * // Using with Region Target HTTPS Proxies
 * //
 * // SSL certificates cannot be updated after creation. In order to apply
 * // the specified configuration, the provider will destroy the existing
 * // resource and create a replacement. To effectively use an SSL
 * // certificate resource with a Target HTTPS Proxy resource, it's
 * // recommended to specify create_before_destroy in a lifecycle block.
 * // Either omit the Instance Template name attribute, specify a partial
 * // name with name_prefix, or use random_id resource. Example:
 * const defaultRegionSslCertificate = new gcp.compute.RegionSslCertificate("defaultRegionSslCertificate", {
 *     region: "us-central1",
 *     namePrefix: "my-certificate-",
 *     privateKey: fs.readFileSync("path/to/private.key"),
 *     certificate: fs.readFileSync("path/to/certificate.crt"),
 * });
 * const defaultRegionHealthCheck = new gcp.compute.RegionHealthCheck("defaultRegionHealthCheck", {
 *     region: "us-central1",
 *     httpHealthCheck: {
 *         port: 80,
 *     },
 * });
 * const defaultRegionBackendService = new gcp.compute.RegionBackendService("defaultRegionBackendService", {
 *     region: "us-central1",
 *     protocol: "HTTP",
 *     loadBalancingScheme: "INTERNAL_MANAGED",
 *     timeoutSec: 10,
 *     healthChecks: [defaultRegionHealthCheck.id],
 * });
 * const defaultRegionUrlMap = new gcp.compute.RegionUrlMap("defaultRegionUrlMap", {
 *     region: "us-central1",
 *     description: "a description",
 *     defaultService: defaultRegionBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultRegionBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultRegionBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultRegionTargetHttpsProxy = new gcp.compute.RegionTargetHttpsProxy("defaultRegionTargetHttpsProxy", {
 *     region: "us-central1",
 *     urlMap: defaultRegionUrlMap.id,
 *     sslCertificates: [defaultRegionSslCertificate.id],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * # Using with Region Target HTTPS Proxies
 * #
 * # SSL certificates cannot be updated after creation. In order to apply
 * # the specified configuration, the provider will destroy the existing
 * # resource and create a replacement. To effectively use an SSL
 * # certificate resource with a Target HTTPS Proxy resource, it's
 * # recommended to specify create_before_destroy in a lifecycle block.
 * # Either omit the Instance Template name attribute, specify a partial
 * # name with name_prefix, or use random_id resource. Example:
 * default_region_ssl_certificate = gcp.compute.RegionSslCertificate("defaultRegionSslCertificate",
 *     region="us-central1",
 *     name_prefix="my-certificate-",
 *     private_key=(lambda path: open(path).read())("path/to/private.key"),
 *     certificate=(lambda path: open(path).read())("path/to/certificate.crt"))
 * default_region_health_check = gcp.compute.RegionHealthCheck("defaultRegionHealthCheck",
 *     region="us-central1",
 *     http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
 *         port=80,
 *     ))
 * default_region_backend_service = gcp.compute.RegionBackendService("defaultRegionBackendService",
 *     region="us-central1",
 *     protocol="HTTP",
 *     load_balancing_scheme="INTERNAL_MANAGED",
 *     timeout_sec=10,
 *     health_checks=[default_region_health_check.id])
 * default_region_url_map = gcp.compute.RegionUrlMap("defaultRegionUrlMap",
 *     region="us-central1",
 *     description="a description",
 *     default_service=default_region_backend_service.id,
 *     host_rules=[gcp.compute.RegionUrlMapHostRuleArgs(
 *         hosts=["mysite.com"],
 *         path_matcher="allpaths",
 *     )],
 *     path_matchers=[gcp.compute.RegionUrlMapPathMatcherArgs(
 *         name="allpaths",
 *         default_service=default_region_backend_service.id,
 *         path_rules=[gcp.compute.RegionUrlMapPathMatcherPathRuleArgs(
 *             paths=["/*"],
 *             service=default_region_backend_service.id,
 *         )],
 *     )])
 * default_region_target_https_proxy = gcp.compute.RegionTargetHttpsProxy("defaultRegionTargetHttpsProxy",
 *     region="us-central1",
 *     url_map=default_region_url_map.id,
 *     ssl_certificates=[default_region_ssl_certificate.id])
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         // Using with Region Target HTTPS Proxies
 *         //
 *         // SSL certificates cannot be updated after creation. In order to apply
 *         // the specified configuration, the provider will destroy the existing
 *         // resource and create a replacement. To effectively use an SSL
 *         // certificate resource with a Target HTTPS Proxy resource, it's
 *         // recommended to specify create_before_destroy in a lifecycle block.
 *         // Either omit the Instance Template name attribute, specify a partial
 *         // name with name_prefix, or use random_id resource. Example:
 *         var defaultRegionSslCertificate = new Gcp.Compute.RegionSslCertificate("defaultRegionSslCertificate", new Gcp.Compute.RegionSslCertificateArgs
 *         {
 *             Region = "us-central1",
 *             NamePrefix = "my-certificate-",
 *             PrivateKey = File.ReadAllText("path/to/private.key"),
 *             Certificate = File.ReadAllText("path/to/certificate.crt"),
 *         });
 *         var defaultRegionHealthCheck = new Gcp.Compute.RegionHealthCheck("defaultRegionHealthCheck", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             Region = "us-central1",
 *             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *         });
 *         var defaultRegionBackendService = new Gcp.Compute.RegionBackendService("defaultRegionBackendService", new Gcp.Compute.RegionBackendServiceArgs
 *         {
 *             Region = "us-central1",
 *             Protocol = "HTTP",
 *             LoadBalancingScheme = "INTERNAL_MANAGED",
 *             TimeoutSec = 10,
 *             HealthChecks = 
 *             {
 *                 defaultRegionHealthCheck.Id,
 *             },
 *         });
 *         var defaultRegionUrlMap = new Gcp.Compute.RegionUrlMap("defaultRegionUrlMap", new Gcp.Compute.RegionUrlMapArgs
 *         {
 *             Region = "us-central1",
 *             Description = "a description",
 *             DefaultService = defaultRegionBackendService.Id,
 *             HostRules = 
 *             {
 *                 new Gcp.Compute.Inputs.RegionUrlMapHostRuleArgs
 *                 {
 *                     Hosts = 
 *                     {
 *                         "mysite.com",
 *                     },
 *                     PathMatcher = "allpaths",
 *                 },
 *             },
 *             PathMatchers = 
 *             {
 *                 new Gcp.Compute.Inputs.RegionUrlMapPathMatcherArgs
 *                 {
 *                     Name = "allpaths",
 *                     DefaultService = defaultRegionBackendService.Id,
 *                     PathRules = 
 *                     {
 *                         new Gcp.Compute.Inputs.RegionUrlMapPathMatcherPathRuleArgs
 *                         {
 *                             Paths = 
 *                             {
 *                                 "/*",
 *                             },
 *                             Service = defaultRegionBackendService.Id,
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var defaultRegionTargetHttpsProxy = new Gcp.Compute.RegionTargetHttpsProxy("defaultRegionTargetHttpsProxy", new Gcp.Compute.RegionTargetHttpsProxyArgs
 *         {
 *             Region = "us-central1",
 *             UrlMap = defaultRegionUrlMap.Id,
 *             SslCertificates = 
 *             {
 *                 defaultRegionSslCertificate.Id,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultRegionSslCertificate, err := compute.NewRegionSslCertificate(ctx, "defaultRegionSslCertificate", &compute.RegionSslCertificateArgs{
 * 			Region:      pulumi.String("us-central1"),
 * 			NamePrefix:  pulumi.String("my-certificate-"),
 * 			PrivateKey:  readFileOrPanic("path/to/private.key"),
 * 			Certificate: readFileOrPanic("path/to/certificate.crt"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultRegionHealthCheck, err := compute.NewRegionHealthCheck(ctx, "defaultRegionHealthCheck", &compute.RegionHealthCheckArgs{
 * 			Region: pulumi.String("us-central1"),
 * 			HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultRegionBackendService, err := compute.NewRegionBackendService(ctx, "defaultRegionBackendService", &compute.RegionBackendServiceArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			Protocol:            pulumi.String("HTTP"),
 * 			LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
 * 			TimeoutSec:          pulumi.Int(10),
 * 			HealthChecks: pulumi.String{
 * 				defaultRegionHealthCheck.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultRegionUrlMap, err := compute.NewRegionUrlMap(ctx, "defaultRegionUrlMap", &compute.RegionUrlMapArgs{
 * 			Region:         pulumi.String("us-central1"),
 * 			Description:    pulumi.String("a description"),
 * 			DefaultService: defaultRegionBackendService.ID(),
 * 			HostRules: compute.RegionUrlMapHostRuleArray{
 * 				&compute.RegionUrlMapHostRuleArgs{
 * 					Hosts: pulumi.StringArray{
 * 						pulumi.String("mysite.com"),
 * 					},
 * 					PathMatcher: pulumi.String("allpaths"),
 * 				},
 * 			},
 * 			PathMatchers: compute.RegionUrlMapPathMatcherArray{
 * 				&compute.RegionUrlMapPathMatcherArgs{
 * 					Name:           pulumi.String("allpaths"),
 * 					DefaultService: defaultRegionBackendService.ID(),
 * 					PathRules: compute.RegionUrlMapPathMatcherPathRuleArray{
 * 						&compute.RegionUrlMapPathMatcherPathRuleArgs{
 * 							Paths: pulumi.StringArray{
 * 								pulumi.String("/*"),
 * 							},
 * 							Service: defaultRegionBackendService.ID(),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRegionTargetHttpsProxy(ctx, "defaultRegionTargetHttpsProxy", &compute.RegionTargetHttpsProxyArgs{
 * 			Region: pulumi.String("us-central1"),
 * 			UrlMap: defaultRegionUrlMap.ID(),
 * 			SslCertificates: pulumi.StringArray{
 * 				defaultRegionSslCertificate.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * RegionSslCertificate can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionSslCertificate:RegionSslCertificate default projects/{{project}}/regions/{{region}}/sslCertificates/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionSslCertificate:RegionSslCertificate default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionSslCertificate:RegionSslCertificate default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionSslCertificate:RegionSslCertificate default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/regionSslCertificate:RegionSslCertificate")
public class RegionSslCertificate extends io.pulumi.resources.CustomResource {
    /**
     * The certificate in PEM format.
     * The certificate chain must be no greater than 5 certs long.
     * The chain must include at least one intermediate cert.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Export(name="certificate", type=String.class, parameters={})
    private Output<String> certificate;

    /**
     * @return The certificate in PEM format.
     * The certificate chain must be no greater than 5 certs long.
     * The chain must include at least one intermediate cert.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> getCertificate() {
        return this.certificate;
    }
    /**
     * The unique identifier for the resource.
     * 
     */
    @Export(name="certificateId", type=Integer.class, parameters={})
    private Output<Integer> certificateId;

    /**
     * @return The unique identifier for the resource.
     * 
     */
    public Output<Integer> getCertificateId() {
        return this.certificateId;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> getCreationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Creates a unique name beginning with the
     * specified prefix. Conflicts with `name`.
     * 
     */
    @Export(name="namePrefix", type=String.class, parameters={})
    private Output<String> namePrefix;

    /**
     * @return Creates a unique name beginning with the
     * specified prefix. Conflicts with `name`.
     * 
     */
    public Output<String> getNamePrefix() {
        return this.namePrefix;
    }
    /**
     * The write-only private key in PEM format.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Export(name="privateKey", type=String.class, parameters={})
    private Output<String> privateKey;

    /**
     * @return The write-only private key in PEM format.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> getPrivateKey() {
        return this.privateKey;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The Region in which the created regional ssl certificate should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The Region in which the created regional ssl certificate should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionSslCertificate(String name) {
        this(name, RegionSslCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionSslCertificate(String name, RegionSslCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionSslCertificate(String name, RegionSslCertificateArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionSslCertificate:RegionSslCertificate", name, args == null ? RegionSslCertificateArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RegionSslCertificate(String name, Output<String> id, @Nullable RegionSslCertificateState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionSslCertificate:RegionSslCertificate", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionSslCertificate get(String name, Output<String> id, @Nullable RegionSslCertificateState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RegionSslCertificate(name, id, state, options);
    }
}
