// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.composer.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigDatabaseConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigEncryptionConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigMaintenanceWindow;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigMasterAuthorizedNetworksConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigNodeConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigPrivateEnvironmentConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigSoftwareConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigWebServerConfig;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigWebServerNetworkAccessControl;
import io.pulumi.gcp.composer.inputs.GetEnvironmentConfigWorkloadsConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetEnvironmentConfig extends io.pulumi.resources.InvokeArgs {

    public static final GetEnvironmentConfig Empty = new GetEnvironmentConfig();

    @InputImport(name="airflowUri", required=true)
    private final String airflowUri;

    public String getAirflowUri() {
        return this.airflowUri;
    }

    @InputImport(name="dagGcsPrefix", required=true)
    private final String dagGcsPrefix;

    public String getDagGcsPrefix() {
        return this.dagGcsPrefix;
    }

    @InputImport(name="databaseConfigs", required=true)
    private final List<GetEnvironmentConfigDatabaseConfig> databaseConfigs;

    public List<GetEnvironmentConfigDatabaseConfig> getDatabaseConfigs() {
        return this.databaseConfigs;
    }

    @InputImport(name="encryptionConfigs", required=true)
    private final List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs;

    public List<GetEnvironmentConfigEncryptionConfig> getEncryptionConfigs() {
        return this.encryptionConfigs;
    }

    @InputImport(name="environmentSize", required=true)
    private final String environmentSize;

    public String getEnvironmentSize() {
        return this.environmentSize;
    }

    @InputImport(name="gkeCluster", required=true)
    private final String gkeCluster;

    public String getGkeCluster() {
        return this.gkeCluster;
    }

    @InputImport(name="maintenanceWindows", required=true)
    private final List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows;

    public List<GetEnvironmentConfigMaintenanceWindow> getMaintenanceWindows() {
        return this.maintenanceWindows;
    }

    @InputImport(name="masterAuthorizedNetworksConfigs", required=true)
    private final List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;

    public List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> getMasterAuthorizedNetworksConfigs() {
        return this.masterAuthorizedNetworksConfigs;
    }

    @InputImport(name="nodeConfigs", required=true)
    private final List<GetEnvironmentConfigNodeConfig> nodeConfigs;

    public List<GetEnvironmentConfigNodeConfig> getNodeConfigs() {
        return this.nodeConfigs;
    }

    @InputImport(name="nodeCount", required=true)
    private final Integer nodeCount;

    public Integer getNodeCount() {
        return this.nodeCount;
    }

    @InputImport(name="privateEnvironmentConfigs", required=true)
    private final List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs;

    public List<GetEnvironmentConfigPrivateEnvironmentConfig> getPrivateEnvironmentConfigs() {
        return this.privateEnvironmentConfigs;
    }

    @InputImport(name="softwareConfigs", required=true)
    private final List<GetEnvironmentConfigSoftwareConfig> softwareConfigs;

    public List<GetEnvironmentConfigSoftwareConfig> getSoftwareConfigs() {
        return this.softwareConfigs;
    }

    @InputImport(name="webServerConfigs", required=true)
    private final List<GetEnvironmentConfigWebServerConfig> webServerConfigs;

    public List<GetEnvironmentConfigWebServerConfig> getWebServerConfigs() {
        return this.webServerConfigs;
    }

    @InputImport(name="webServerNetworkAccessControls", required=true)
    private final List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls;

    public List<GetEnvironmentConfigWebServerNetworkAccessControl> getWebServerNetworkAccessControls() {
        return this.webServerNetworkAccessControls;
    }

    @InputImport(name="workloadsConfigs", required=true)
    private final List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs;

    public List<GetEnvironmentConfigWorkloadsConfig> getWorkloadsConfigs() {
        return this.workloadsConfigs;
    }

    public GetEnvironmentConfig(
        String airflowUri,
        String dagGcsPrefix,
        List<GetEnvironmentConfigDatabaseConfig> databaseConfigs,
        List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs,
        String environmentSize,
        String gkeCluster,
        List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows,
        List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs,
        List<GetEnvironmentConfigNodeConfig> nodeConfigs,
        Integer nodeCount,
        List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs,
        List<GetEnvironmentConfigSoftwareConfig> softwareConfigs,
        List<GetEnvironmentConfigWebServerConfig> webServerConfigs,
        List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls,
        List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs) {
        this.airflowUri = Objects.requireNonNull(airflowUri, "expected parameter 'airflowUri' to be non-null");
        this.dagGcsPrefix = Objects.requireNonNull(dagGcsPrefix, "expected parameter 'dagGcsPrefix' to be non-null");
        this.databaseConfigs = Objects.requireNonNull(databaseConfigs, "expected parameter 'databaseConfigs' to be non-null");
        this.encryptionConfigs = Objects.requireNonNull(encryptionConfigs, "expected parameter 'encryptionConfigs' to be non-null");
        this.environmentSize = Objects.requireNonNull(environmentSize, "expected parameter 'environmentSize' to be non-null");
        this.gkeCluster = Objects.requireNonNull(gkeCluster, "expected parameter 'gkeCluster' to be non-null");
        this.maintenanceWindows = Objects.requireNonNull(maintenanceWindows, "expected parameter 'maintenanceWindows' to be non-null");
        this.masterAuthorizedNetworksConfigs = Objects.requireNonNull(masterAuthorizedNetworksConfigs, "expected parameter 'masterAuthorizedNetworksConfigs' to be non-null");
        this.nodeConfigs = Objects.requireNonNull(nodeConfigs, "expected parameter 'nodeConfigs' to be non-null");
        this.nodeCount = Objects.requireNonNull(nodeCount, "expected parameter 'nodeCount' to be non-null");
        this.privateEnvironmentConfigs = Objects.requireNonNull(privateEnvironmentConfigs, "expected parameter 'privateEnvironmentConfigs' to be non-null");
        this.softwareConfigs = Objects.requireNonNull(softwareConfigs, "expected parameter 'softwareConfigs' to be non-null");
        this.webServerConfigs = Objects.requireNonNull(webServerConfigs, "expected parameter 'webServerConfigs' to be non-null");
        this.webServerNetworkAccessControls = Objects.requireNonNull(webServerNetworkAccessControls, "expected parameter 'webServerNetworkAccessControls' to be non-null");
        this.workloadsConfigs = Objects.requireNonNull(workloadsConfigs, "expected parameter 'workloadsConfigs' to be non-null");
    }

    private GetEnvironmentConfig() {
        this.airflowUri = null;
        this.dagGcsPrefix = null;
        this.databaseConfigs = List.of();
        this.encryptionConfigs = List.of();
        this.environmentSize = null;
        this.gkeCluster = null;
        this.maintenanceWindows = List.of();
        this.masterAuthorizedNetworksConfigs = List.of();
        this.nodeConfigs = List.of();
        this.nodeCount = null;
        this.privateEnvironmentConfigs = List.of();
        this.softwareConfigs = List.of();
        this.webServerConfigs = List.of();
        this.webServerNetworkAccessControls = List.of();
        this.workloadsConfigs = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String airflowUri;
        private String dagGcsPrefix;
        private List<GetEnvironmentConfigDatabaseConfig> databaseConfigs;
        private List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs;
        private String environmentSize;
        private String gkeCluster;
        private List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows;
        private List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
        private List<GetEnvironmentConfigNodeConfig> nodeConfigs;
        private Integer nodeCount;
        private List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs;
        private List<GetEnvironmentConfigSoftwareConfig> softwareConfigs;
        private List<GetEnvironmentConfigWebServerConfig> webServerConfigs;
        private List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls;
        private List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEnvironmentConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.airflowUri = defaults.airflowUri;
    	      this.dagGcsPrefix = defaults.dagGcsPrefix;
    	      this.databaseConfigs = defaults.databaseConfigs;
    	      this.encryptionConfigs = defaults.encryptionConfigs;
    	      this.environmentSize = defaults.environmentSize;
    	      this.gkeCluster = defaults.gkeCluster;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.masterAuthorizedNetworksConfigs = defaults.masterAuthorizedNetworksConfigs;
    	      this.nodeConfigs = defaults.nodeConfigs;
    	      this.nodeCount = defaults.nodeCount;
    	      this.privateEnvironmentConfigs = defaults.privateEnvironmentConfigs;
    	      this.softwareConfigs = defaults.softwareConfigs;
    	      this.webServerConfigs = defaults.webServerConfigs;
    	      this.webServerNetworkAccessControls = defaults.webServerNetworkAccessControls;
    	      this.workloadsConfigs = defaults.workloadsConfigs;
        }

        public Builder setAirflowUri(String airflowUri) {
            this.airflowUri = Objects.requireNonNull(airflowUri);
            return this;
        }

        public Builder setDagGcsPrefix(String dagGcsPrefix) {
            this.dagGcsPrefix = Objects.requireNonNull(dagGcsPrefix);
            return this;
        }

        public Builder setDatabaseConfigs(List<GetEnvironmentConfigDatabaseConfig> databaseConfigs) {
            this.databaseConfigs = Objects.requireNonNull(databaseConfigs);
            return this;
        }

        public Builder setEncryptionConfigs(List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs) {
            this.encryptionConfigs = Objects.requireNonNull(encryptionConfigs);
            return this;
        }

        public Builder setEnvironmentSize(String environmentSize) {
            this.environmentSize = Objects.requireNonNull(environmentSize);
            return this;
        }

        public Builder setGkeCluster(String gkeCluster) {
            this.gkeCluster = Objects.requireNonNull(gkeCluster);
            return this;
        }

        public Builder setMaintenanceWindows(List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows) {
            this.maintenanceWindows = Objects.requireNonNull(maintenanceWindows);
            return this;
        }

        public Builder setMasterAuthorizedNetworksConfigs(List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs) {
            this.masterAuthorizedNetworksConfigs = Objects.requireNonNull(masterAuthorizedNetworksConfigs);
            return this;
        }

        public Builder setNodeConfigs(List<GetEnvironmentConfigNodeConfig> nodeConfigs) {
            this.nodeConfigs = Objects.requireNonNull(nodeConfigs);
            return this;
        }

        public Builder setNodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }

        public Builder setPrivateEnvironmentConfigs(List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs) {
            this.privateEnvironmentConfigs = Objects.requireNonNull(privateEnvironmentConfigs);
            return this;
        }

        public Builder setSoftwareConfigs(List<GetEnvironmentConfigSoftwareConfig> softwareConfigs) {
            this.softwareConfigs = Objects.requireNonNull(softwareConfigs);
            return this;
        }

        public Builder setWebServerConfigs(List<GetEnvironmentConfigWebServerConfig> webServerConfigs) {
            this.webServerConfigs = Objects.requireNonNull(webServerConfigs);
            return this;
        }

        public Builder setWebServerNetworkAccessControls(List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls) {
            this.webServerNetworkAccessControls = Objects.requireNonNull(webServerNetworkAccessControls);
            return this;
        }

        public Builder setWorkloadsConfigs(List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs) {
            this.workloadsConfigs = Objects.requireNonNull(workloadsConfigs);
            return this;
        }

        public GetEnvironmentConfig build() {
            return new GetEnvironmentConfig(airflowUri, dagGcsPrefix, databaseConfigs, encryptionConfigs, environmentSize, gkeCluster, maintenanceWindows, masterAuthorizedNetworksConfigs, nodeConfigs, nodeCount, privateEnvironmentConfigs, softwareConfigs, webServerConfigs, webServerNetworkAccessControls, workloadsConfigs);
        }
    }
}
