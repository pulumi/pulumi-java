// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceCloneArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceReplicaConfigurationArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceRestoreBackupContextArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseInstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceArgs Empty = new DatabaseInstanceArgs();

    @InputImport(name="clone")
    private final @Nullable Input<DatabaseInstanceCloneArgs> clone;

    public Input<DatabaseInstanceCloneArgs> getClone() {
        return this.clone == null ? Input.empty() : this.clone;
    }

    @InputImport(name="databaseVersion", required=true)
    private final Input<String> databaseVersion;

    public Input<String> getDatabaseVersion() {
        return this.databaseVersion;
    }

    @InputImport(name="deletionProtection")
    private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    @InputImport(name="encryptionKeyName")
    private final @Nullable Input<String> encryptionKeyName;

    public Input<String> getEncryptionKeyName() {
        return this.encryptionKeyName == null ? Input.empty() : this.encryptionKeyName;
    }

    @InputImport(name="masterInstanceName")
    private final @Nullable Input<String> masterInstanceName;

    public Input<String> getMasterInstanceName() {
        return this.masterInstanceName == null ? Input.empty() : this.masterInstanceName;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    @InputImport(name="replicaConfiguration")
    private final @Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration;

    public Input<DatabaseInstanceReplicaConfigurationArgs> getReplicaConfiguration() {
        return this.replicaConfiguration == null ? Input.empty() : this.replicaConfiguration;
    }

    @InputImport(name="restoreBackupContext")
    private final @Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext;

    public Input<DatabaseInstanceRestoreBackupContextArgs> getRestoreBackupContext() {
        return this.restoreBackupContext == null ? Input.empty() : this.restoreBackupContext;
    }

    @InputImport(name="rootPassword")
    private final @Nullable Input<String> rootPassword;

    public Input<String> getRootPassword() {
        return this.rootPassword == null ? Input.empty() : this.rootPassword;
    }

    @InputImport(name="settings")
    private final @Nullable Input<DatabaseInstanceSettingsArgs> settings;

    public Input<DatabaseInstanceSettingsArgs> getSettings() {
        return this.settings == null ? Input.empty() : this.settings;
    }

    public DatabaseInstanceArgs(
        @Nullable Input<DatabaseInstanceCloneArgs> clone,
        Input<String> databaseVersion,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> encryptionKeyName,
        @Nullable Input<String> masterInstanceName,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        @Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration,
        @Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext,
        @Nullable Input<String> rootPassword,
        @Nullable Input<DatabaseInstanceSettingsArgs> settings) {
        this.clone = clone;
        this.databaseVersion = Objects.requireNonNull(databaseVersion, "expected parameter 'databaseVersion' to be non-null");
        this.deletionProtection = deletionProtection;
        this.encryptionKeyName = encryptionKeyName;
        this.masterInstanceName = masterInstanceName;
        this.name = name;
        this.project = project;
        this.region = region;
        this.replicaConfiguration = replicaConfiguration;
        this.restoreBackupContext = restoreBackupContext;
        this.rootPassword = rootPassword;
        this.settings = settings;
    }

    private DatabaseInstanceArgs() {
        this.clone = Input.empty();
        this.databaseVersion = Input.empty();
        this.deletionProtection = Input.empty();
        this.encryptionKeyName = Input.empty();
        this.masterInstanceName = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.replicaConfiguration = Input.empty();
        this.restoreBackupContext = Input.empty();
        this.rootPassword = Input.empty();
        this.settings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DatabaseInstanceCloneArgs> clone;
        private Input<String> databaseVersion;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> encryptionKeyName;
        private @Nullable Input<String> masterInstanceName;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private @Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration;
        private @Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext;
        private @Nullable Input<String> rootPassword;
        private @Nullable Input<DatabaseInstanceSettingsArgs> settings;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clone = defaults.clone;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.encryptionKeyName = defaults.encryptionKeyName;
    	      this.masterInstanceName = defaults.masterInstanceName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.replicaConfiguration = defaults.replicaConfiguration;
    	      this.restoreBackupContext = defaults.restoreBackupContext;
    	      this.rootPassword = defaults.rootPassword;
    	      this.settings = defaults.settings;
        }

        public Builder setClone(@Nullable Input<DatabaseInstanceCloneArgs> clone) {
            this.clone = clone;
            return this;
        }

        public Builder setClone(@Nullable DatabaseInstanceCloneArgs clone) {
            this.clone = Input.ofNullable(clone);
            return this;
        }

        public Builder setDatabaseVersion(Input<String> databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }

        public Builder setDatabaseVersion(String databaseVersion) {
            this.databaseVersion = Input.of(Objects.requireNonNull(databaseVersion));
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setEncryptionKeyName(@Nullable Input<String> encryptionKeyName) {
            this.encryptionKeyName = encryptionKeyName;
            return this;
        }

        public Builder setEncryptionKeyName(@Nullable String encryptionKeyName) {
            this.encryptionKeyName = Input.ofNullable(encryptionKeyName);
            return this;
        }

        public Builder setMasterInstanceName(@Nullable Input<String> masterInstanceName) {
            this.masterInstanceName = masterInstanceName;
            return this;
        }

        public Builder setMasterInstanceName(@Nullable String masterInstanceName) {
            this.masterInstanceName = Input.ofNullable(masterInstanceName);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setReplicaConfiguration(@Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration) {
            this.replicaConfiguration = replicaConfiguration;
            return this;
        }

        public Builder setReplicaConfiguration(@Nullable DatabaseInstanceReplicaConfigurationArgs replicaConfiguration) {
            this.replicaConfiguration = Input.ofNullable(replicaConfiguration);
            return this;
        }

        public Builder setRestoreBackupContext(@Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext) {
            this.restoreBackupContext = restoreBackupContext;
            return this;
        }

        public Builder setRestoreBackupContext(@Nullable DatabaseInstanceRestoreBackupContextArgs restoreBackupContext) {
            this.restoreBackupContext = Input.ofNullable(restoreBackupContext);
            return this;
        }

        public Builder setRootPassword(@Nullable Input<String> rootPassword) {
            this.rootPassword = rootPassword;
            return this;
        }

        public Builder setRootPassword(@Nullable String rootPassword) {
            this.rootPassword = Input.ofNullable(rootPassword);
            return this;
        }

        public Builder setSettings(@Nullable Input<DatabaseInstanceSettingsArgs> settings) {
            this.settings = settings;
            return this;
        }

        public Builder setSettings(@Nullable DatabaseInstanceSettingsArgs settings) {
            this.settings = Input.ofNullable(settings);
            return this;
        }

        public DatabaseInstanceArgs build() {
            return new DatabaseInstanceArgs(clone, databaseVersion, deletionProtection, encryptionKeyName, masterInstanceName, name, project, region, replicaConfiguration, restoreBackupContext, rootPassword, settings);
        }
    }
}
