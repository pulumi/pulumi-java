// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceCloneArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceReplicaConfigurationArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceRestoreBackupContextArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseInstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceArgs Empty = new DatabaseInstanceArgs();

    /**
     * The context needed to create this instance as a clone of another instance. When this field is set during
     * resource creation, this provider will attempt to clone another instance as indicated in the context. The
     * configuration is detailed below.
     * 
     */
    @InputImport(name="clone")
    private final @Nullable Input<DatabaseInstanceCloneArgs> clone;

    public Input<DatabaseInstanceCloneArgs> getClone() {
        return this.clone == null ? Input.empty() : this.clone;
    }

    /**
     * The MySQL, PostgreSQL or
     * SQL Server version to use. Supported values include `MYSQL_5_6`,
     * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
     * `POSTGRES_12`, `POSTGRES_13`, `SQLSERVER_2017_STANDARD`,
     * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
     * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
     * `SQLSERVER_2019_WEB`.
     * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
     * includes an up-to-date reference of supported versions.
     * 
     */
    @InputImport(name="databaseVersion", required=true)
    private final Input<String> databaseVersion;

    public Input<String> getDatabaseVersion() {
        return this.databaseVersion;
    }

    /**
     * Whether or not to allow he provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` command that deletes the instance will fail.
     * 
     */
    @InputImport(name="deletionProtection")
    private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * The full path to the encryption key used for the CMEK disk encryption.  Setting
     * up disk encryption currently requires manual steps outside of this provider.
     * The provided key must be in the same region as the SQL instance.  In order
     * to use this feature, a special kind of service account must be created and
     * granted permission on this key.  This step can currently only be done
     * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
     * That service account needs the `Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter` role on your
     * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
     * 
     */
    @InputImport(name="encryptionKeyName")
    private final @Nullable Input<String> encryptionKeyName;

    public Input<String> getEncryptionKeyName() {
        return this.encryptionKeyName == null ? Input.empty() : this.encryptionKeyName;
    }

    /**
     * The name of the existing instance that will
     * act as the master in the replication setup. Note, this requires the master to
     * have `binary_log_enabled` set, as well as existing backups.
     * 
     */
    @InputImport(name="masterInstanceName")
    private final @Nullable Input<String> masterInstanceName;

    public Input<String> getMasterInstanceName() {
        return this.masterInstanceName == null ? Input.empty() : this.masterInstanceName;
    }

    /**
     * A name for this whitelist entry.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The full project ID of the source instance.`
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The region the instance will sit in. Note, Cloud SQL is not
     * available in all regions - choose from one of the options listed [here](https://cloud.google.com/sql/docs/mysql/instance-locations).
     * A valid region must be provided to use this resource. If a region is not provided in the resource definition,
     * the provider region will be used instead, but this will be an apply-time error for instances if the provider
     * region is not supported with Cloud SQL. If you choose not to provide the `region` argument for this resource,
     * make sure you understand this.
     * 
     */
    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    /**
     * The configuration for replication. The
     * configuration is detailed below. Valid only for MySQL instances.
     * 
     */
    @InputImport(name="replicaConfiguration")
    private final @Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration;

    public Input<DatabaseInstanceReplicaConfigurationArgs> getReplicaConfiguration() {
        return this.replicaConfiguration == null ? Input.empty() : this.replicaConfiguration;
    }

    /**
     * The context needed to restore the database to a backup run. This field will
     * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
     * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
     * block during resource creation/update will trigger the restore action after the resource is created/updated.
     * 
     */
    @InputImport(name="restoreBackupContext")
    private final @Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext;

    public Input<DatabaseInstanceRestoreBackupContextArgs> getRestoreBackupContext() {
        return this.restoreBackupContext == null ? Input.empty() : this.restoreBackupContext;
    }

    /**
     * Initial root password. Required for MS SQL Server, ignored by MySQL and PostgreSQL.
     * 
     */
    @InputImport(name="rootPassword")
    private final @Nullable Input<String> rootPassword;

    public Input<String> getRootPassword() {
        return this.rootPassword == null ? Input.empty() : this.rootPassword;
    }

    /**
     * The settings to use for the database. The
     * configuration is detailed below. Required if `clone` is not set.
     * 
     */
    @InputImport(name="settings")
    private final @Nullable Input<DatabaseInstanceSettingsArgs> settings;

    public Input<DatabaseInstanceSettingsArgs> getSettings() {
        return this.settings == null ? Input.empty() : this.settings;
    }

    public DatabaseInstanceArgs(
        @Nullable Input<DatabaseInstanceCloneArgs> clone,
        Input<String> databaseVersion,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> encryptionKeyName,
        @Nullable Input<String> masterInstanceName,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        @Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration,
        @Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext,
        @Nullable Input<String> rootPassword,
        @Nullable Input<DatabaseInstanceSettingsArgs> settings) {
        this.clone = clone;
        this.databaseVersion = Objects.requireNonNull(databaseVersion, "expected parameter 'databaseVersion' to be non-null");
        this.deletionProtection = deletionProtection;
        this.encryptionKeyName = encryptionKeyName;
        this.masterInstanceName = masterInstanceName;
        this.name = name;
        this.project = project;
        this.region = region;
        this.replicaConfiguration = replicaConfiguration;
        this.restoreBackupContext = restoreBackupContext;
        this.rootPassword = rootPassword;
        this.settings = settings;
    }

    private DatabaseInstanceArgs() {
        this.clone = Input.empty();
        this.databaseVersion = Input.empty();
        this.deletionProtection = Input.empty();
        this.encryptionKeyName = Input.empty();
        this.masterInstanceName = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.replicaConfiguration = Input.empty();
        this.restoreBackupContext = Input.empty();
        this.rootPassword = Input.empty();
        this.settings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DatabaseInstanceCloneArgs> clone;
        private Input<String> databaseVersion;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> encryptionKeyName;
        private @Nullable Input<String> masterInstanceName;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private @Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration;
        private @Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext;
        private @Nullable Input<String> rootPassword;
        private @Nullable Input<DatabaseInstanceSettingsArgs> settings;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clone = defaults.clone;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.encryptionKeyName = defaults.encryptionKeyName;
    	      this.masterInstanceName = defaults.masterInstanceName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.replicaConfiguration = defaults.replicaConfiguration;
    	      this.restoreBackupContext = defaults.restoreBackupContext;
    	      this.rootPassword = defaults.rootPassword;
    	      this.settings = defaults.settings;
        }

        public Builder setClone(@Nullable Input<DatabaseInstanceCloneArgs> clone) {
            this.clone = clone;
            return this;
        }

        public Builder setClone(@Nullable DatabaseInstanceCloneArgs clone) {
            this.clone = Input.ofNullable(clone);
            return this;
        }

        public Builder setDatabaseVersion(Input<String> databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }

        public Builder setDatabaseVersion(String databaseVersion) {
            this.databaseVersion = Input.of(Objects.requireNonNull(databaseVersion));
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setEncryptionKeyName(@Nullable Input<String> encryptionKeyName) {
            this.encryptionKeyName = encryptionKeyName;
            return this;
        }

        public Builder setEncryptionKeyName(@Nullable String encryptionKeyName) {
            this.encryptionKeyName = Input.ofNullable(encryptionKeyName);
            return this;
        }

        public Builder setMasterInstanceName(@Nullable Input<String> masterInstanceName) {
            this.masterInstanceName = masterInstanceName;
            return this;
        }

        public Builder setMasterInstanceName(@Nullable String masterInstanceName) {
            this.masterInstanceName = Input.ofNullable(masterInstanceName);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setReplicaConfiguration(@Nullable Input<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration) {
            this.replicaConfiguration = replicaConfiguration;
            return this;
        }

        public Builder setReplicaConfiguration(@Nullable DatabaseInstanceReplicaConfigurationArgs replicaConfiguration) {
            this.replicaConfiguration = Input.ofNullable(replicaConfiguration);
            return this;
        }

        public Builder setRestoreBackupContext(@Nullable Input<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext) {
            this.restoreBackupContext = restoreBackupContext;
            return this;
        }

        public Builder setRestoreBackupContext(@Nullable DatabaseInstanceRestoreBackupContextArgs restoreBackupContext) {
            this.restoreBackupContext = Input.ofNullable(restoreBackupContext);
            return this;
        }

        public Builder setRootPassword(@Nullable Input<String> rootPassword) {
            this.rootPassword = rootPassword;
            return this;
        }

        public Builder setRootPassword(@Nullable String rootPassword) {
            this.rootPassword = Input.ofNullable(rootPassword);
            return this;
        }

        public Builder setSettings(@Nullable Input<DatabaseInstanceSettingsArgs> settings) {
            this.settings = settings;
            return this;
        }

        public Builder setSettings(@Nullable DatabaseInstanceSettingsArgs settings) {
            this.settings = Input.ofNullable(settings);
            return this;
        }

        public DatabaseInstanceArgs build() {
            return new DatabaseInstanceArgs(clone, databaseVersion, deletionProtection, encryptionKeyName, masterInstanceName, name, project, region, replicaConfiguration, restoreBackupContext, rootPassword, settings);
        }
    }
}
