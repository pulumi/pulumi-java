// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.folder;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.folder.inputs.AccessApprovalSettingsEnrolledServiceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessApprovalSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessApprovalSettingsArgs Empty = new AccessApprovalSettingsArgs();

    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     * 
     */
    @Import(name="enrolledServices", required=true)
      private final Output<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices;

    public Output<List<AccessApprovalSettingsEnrolledServiceArgs>> getEnrolledServices() {
        return this.enrolledServices;
    }

    /**
     * ID of the folder of the access approval settings.
     * 
     */
    @Import(name="folderId", required=true)
      private final Output<String> folderId;

    public Output<String> getFolderId() {
        return this.folderId;
    }

    /**
     * A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     * 
     */
    @Import(name="notificationEmails")
      private final @Nullable Output<List<String>> notificationEmails;

    public Output<List<String>> getNotificationEmails() {
        return this.notificationEmails == null ? Output.empty() : this.notificationEmails;
    }

    public AccessApprovalSettingsArgs(
        Output<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices,
        Output<String> folderId,
        @Nullable Output<List<String>> notificationEmails) {
        this.enrolledServices = Objects.requireNonNull(enrolledServices, "expected parameter 'enrolledServices' to be non-null");
        this.folderId = Objects.requireNonNull(folderId, "expected parameter 'folderId' to be non-null");
        this.notificationEmails = notificationEmails;
    }

    private AccessApprovalSettingsArgs() {
        this.enrolledServices = Output.empty();
        this.folderId = Output.empty();
        this.notificationEmails = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessApprovalSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices;
        private Output<String> folderId;
        private @Nullable Output<List<String>> notificationEmails;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessApprovalSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enrolledServices = defaults.enrolledServices;
    	      this.folderId = defaults.folderId;
    	      this.notificationEmails = defaults.notificationEmails;
        }

        public Builder enrolledServices(Output<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices) {
            this.enrolledServices = Objects.requireNonNull(enrolledServices);
            return this;
        }
        public Builder enrolledServices(List<AccessApprovalSettingsEnrolledServiceArgs> enrolledServices) {
            this.enrolledServices = Output.of(Objects.requireNonNull(enrolledServices));
            return this;
        }
        public Builder enrolledServices(AccessApprovalSettingsEnrolledServiceArgs... enrolledServices) {
            return enrolledServices(List.of(enrolledServices));
        }
        public Builder folderId(Output<String> folderId) {
            this.folderId = Objects.requireNonNull(folderId);
            return this;
        }
        public Builder folderId(String folderId) {
            this.folderId = Output.of(Objects.requireNonNull(folderId));
            return this;
        }
        public Builder notificationEmails(@Nullable Output<List<String>> notificationEmails) {
            this.notificationEmails = notificationEmails;
            return this;
        }
        public Builder notificationEmails(@Nullable List<String> notificationEmails) {
            this.notificationEmails = Output.ofNullable(notificationEmails);
            return this;
        }
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }        public AccessApprovalSettingsArgs build() {
            return new AccessApprovalSettingsArgs(enrolledServices, folderId, notificationEmails);
        }
    }
}
