// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.folder;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.folder.inputs.AccessApprovalSettingsEnrolledServiceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessApprovalSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessApprovalSettingsArgs Empty = new AccessApprovalSettingsArgs();

    @InputImport(name="enrolledServices", required=true)
    private final Input<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices;

    public Input<List<AccessApprovalSettingsEnrolledServiceArgs>> getEnrolledServices() {
        return this.enrolledServices;
    }

    @InputImport(name="folderId", required=true)
    private final Input<String> folderId;

    public Input<String> getFolderId() {
        return this.folderId;
    }

    @InputImport(name="notificationEmails")
    private final @Nullable Input<List<String>> notificationEmails;

    public Input<List<String>> getNotificationEmails() {
        return this.notificationEmails == null ? Input.empty() : this.notificationEmails;
    }

    public AccessApprovalSettingsArgs(
        Input<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices,
        Input<String> folderId,
        @Nullable Input<List<String>> notificationEmails) {
        this.enrolledServices = Objects.requireNonNull(enrolledServices, "expected parameter 'enrolledServices' to be non-null");
        this.folderId = Objects.requireNonNull(folderId, "expected parameter 'folderId' to be non-null");
        this.notificationEmails = notificationEmails;
    }

    private AccessApprovalSettingsArgs() {
        this.enrolledServices = Input.empty();
        this.folderId = Input.empty();
        this.notificationEmails = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessApprovalSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices;
        private Input<String> folderId;
        private @Nullable Input<List<String>> notificationEmails;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessApprovalSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enrolledServices = defaults.enrolledServices;
    	      this.folderId = defaults.folderId;
    	      this.notificationEmails = defaults.notificationEmails;
        }

        public Builder setEnrolledServices(Input<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices) {
            this.enrolledServices = Objects.requireNonNull(enrolledServices);
            return this;
        }

        public Builder setEnrolledServices(List<AccessApprovalSettingsEnrolledServiceArgs> enrolledServices) {
            this.enrolledServices = Input.of(Objects.requireNonNull(enrolledServices));
            return this;
        }

        public Builder setFolderId(Input<String> folderId) {
            this.folderId = Objects.requireNonNull(folderId);
            return this;
        }

        public Builder setFolderId(String folderId) {
            this.folderId = Input.of(Objects.requireNonNull(folderId));
            return this;
        }

        public Builder setNotificationEmails(@Nullable Input<List<String>> notificationEmails) {
            this.notificationEmails = notificationEmails;
            return this;
        }

        public Builder setNotificationEmails(@Nullable List<String> notificationEmails) {
            this.notificationEmails = Input.ofNullable(notificationEmails);
            return this;
        }

        public AccessApprovalSettingsArgs build() {
            return new AccessApprovalSettingsArgs(enrolledServices, folderId, notificationEmails);
        }
    }
}
