// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.logging.inputs.MetricBucketOptionsArgs;
import io.pulumi.gcp.logging.inputs.MetricMetricDescriptorArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricArgs Empty = new MetricArgs();

    /**
     * The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
     * describes the bucket boundaries used to create a histogram of the extracted values.
     * Structure is documented below.
     * 
     */
    @Import(name="bucketOptions")
      private final @Nullable Output<MetricBucketOptionsArgs> bucketOptions;

    public Output<MetricBucketOptionsArgs> bucketOptions() {
        return this.bucketOptions == null ? Codegen.empty() : this.bucketOptions;
    }

    /**
     * A description of this metric, which is used in documentation. The maximum length of the
     * description is 8000 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which
     * is used to match log entries.
     * 
     */
    @Import(name="filter", required=true)
      private final Output<String> filter;

    public Output<String> filter() {
        return this.filter;
    }

    /**
     * A map from a label key string to an extractor expression which is used to extract data from a log
     * entry field and assign as the label value. Each label key specified in the LabelDescriptor must
     * have an associated extractor expression in this map. The syntax of the extractor expression is
     * the same as for the valueExtractor field.
     * 
     */
    @Import(name="labelExtractors")
      private final @Nullable Output<Map<String,String>> labelExtractors;

    public Output<Map<String,String>> labelExtractors() {
        return this.labelExtractors == null ? Codegen.empty() : this.labelExtractors;
    }

    /**
     * The metric descriptor associated with the logs-based metric.
     * Structure is documented below.
     * 
     */
    @Import(name="metricDescriptor", required=true)
      private final Output<MetricMetricDescriptorArgs> metricDescriptor;

    public Output<MetricMetricDescriptorArgs> metricDescriptor() {
        return this.metricDescriptor;
    }

    /**
     * The client-assigned metric identifier. Examples - "error_count", "nginx/requests".
     * Metric identifiers are limited to 100 characters and can include only the following
     * characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash
     * character (/) denotes a hierarchy of name pieces, and it cannot be the first character
     * of the name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * A valueExtractor is required when using a distribution logs-based metric to extract the values to
     * record from a log entry. Two functions are supported for value extraction - EXTRACT(field) or
     * REGEXP_EXTRACT(field, regex). The argument are 1. field - The name of the log entry field from which
     * the value is to be extracted. 2. regex - A regular expression using the Google RE2 syntax
     * (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified
     * log entry field. The value of the field is converted to a string before applying the regex. It is an
     * error to specify a regex that does not include exactly one capture group.
     * 
     */
    @Import(name="valueExtractor")
      private final @Nullable Output<String> valueExtractor;

    public Output<String> valueExtractor() {
        return this.valueExtractor == null ? Codegen.empty() : this.valueExtractor;
    }

    public MetricArgs(
        @Nullable Output<MetricBucketOptionsArgs> bucketOptions,
        @Nullable Output<String> description,
        Output<String> filter,
        @Nullable Output<Map<String,String>> labelExtractors,
        Output<MetricMetricDescriptorArgs> metricDescriptor,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> valueExtractor) {
        this.bucketOptions = bucketOptions;
        this.description = description;
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.labelExtractors = labelExtractors;
        this.metricDescriptor = Objects.requireNonNull(metricDescriptor, "expected parameter 'metricDescriptor' to be non-null");
        this.name = name;
        this.project = project;
        this.valueExtractor = valueExtractor;
    }

    private MetricArgs() {
        this.bucketOptions = Codegen.empty();
        this.description = Codegen.empty();
        this.filter = Codegen.empty();
        this.labelExtractors = Codegen.empty();
        this.metricDescriptor = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.valueExtractor = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<MetricBucketOptionsArgs> bucketOptions;
        private @Nullable Output<String> description;
        private Output<String> filter;
        private @Nullable Output<Map<String,String>> labelExtractors;
        private Output<MetricMetricDescriptorArgs> metricDescriptor;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> valueExtractor;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketOptions = defaults.bucketOptions;
    	      this.description = defaults.description;
    	      this.filter = defaults.filter;
    	      this.labelExtractors = defaults.labelExtractors;
    	      this.metricDescriptor = defaults.metricDescriptor;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.valueExtractor = defaults.valueExtractor;
        }

        public Builder bucketOptions(@Nullable Output<MetricBucketOptionsArgs> bucketOptions) {
            this.bucketOptions = bucketOptions;
            return this;
        }
        public Builder bucketOptions(@Nullable MetricBucketOptionsArgs bucketOptions) {
            this.bucketOptions = Codegen.ofNullable(bucketOptions);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder filter(Output<String> filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        public Builder filter(String filter) {
            this.filter = Output.of(Objects.requireNonNull(filter));
            return this;
        }
        public Builder labelExtractors(@Nullable Output<Map<String,String>> labelExtractors) {
            this.labelExtractors = labelExtractors;
            return this;
        }
        public Builder labelExtractors(@Nullable Map<String,String> labelExtractors) {
            this.labelExtractors = Codegen.ofNullable(labelExtractors);
            return this;
        }
        public Builder metricDescriptor(Output<MetricMetricDescriptorArgs> metricDescriptor) {
            this.metricDescriptor = Objects.requireNonNull(metricDescriptor);
            return this;
        }
        public Builder metricDescriptor(MetricMetricDescriptorArgs metricDescriptor) {
            this.metricDescriptor = Output.of(Objects.requireNonNull(metricDescriptor));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder valueExtractor(@Nullable Output<String> valueExtractor) {
            this.valueExtractor = valueExtractor;
            return this;
        }
        public Builder valueExtractor(@Nullable String valueExtractor) {
            this.valueExtractor = Codegen.ofNullable(valueExtractor);
            return this;
        }        public MetricArgs build() {
            return new MetricArgs(bucketOptions, description, filter, labelExtractors, metricDescriptor, name, project, valueExtractor);
        }
    }
}
