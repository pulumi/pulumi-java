// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudscheduler.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.cloudscheduler.inputs.JobAppEngineHttpTargetAppEngineRoutingGetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobAppEngineHttpTargetGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobAppEngineHttpTargetGetArgs Empty = new JobAppEngineHttpTargetGetArgs();

    /**
     * App Engine Routing setting for the job.
     * Structure is documented below.
     * 
     */
    @Import(name="appEngineRouting")
      private final @Nullable Output<JobAppEngineHttpTargetAppEngineRoutingGetArgs> appEngineRouting;

    public Output<JobAppEngineHttpTargetAppEngineRoutingGetArgs> getAppEngineRouting() {
        return this.appEngineRouting == null ? Output.empty() : this.appEngineRouting;
    }

    /**
     * HTTP request body.
     * A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
     * It is an error to set body on a job with an incompatible HttpMethod.
     * A base64-encoded string.
     * 
     */
    @Import(name="body")
      private final @Nullable Output<String> body;

    public Output<String> getBody() {
        return this.body == null ? Output.empty() : this.body;
    }

    /**
     * This map contains the header field names and values.
     * Repeated headers are not supported, but a header value can contain commas.
     * 
     */
    @Import(name="headers")
      private final @Nullable Output<Map<String,String>> headers;

    public Output<Map<String,String>> getHeaders() {
        return this.headers == null ? Output.empty() : this.headers;
    }

    /**
     * Which HTTP method to use for the request.
     * 
     */
    @Import(name="httpMethod")
      private final @Nullable Output<String> httpMethod;

    public Output<String> getHttpMethod() {
        return this.httpMethod == null ? Output.empty() : this.httpMethod;
    }

    /**
     * The relative URI.
     * The relative URL must begin with "/" and must be a valid HTTP relative URL.
     * It can contain a path, query string arguments, and \# fragments.
     * If the relative URL is empty, then the root path "/" will be used.
     * No spaces are allowed, and the maximum length allowed is 2083 characters
     * 
     */
    @Import(name="relativeUri", required=true)
      private final Output<String> relativeUri;

    public Output<String> getRelativeUri() {
        return this.relativeUri;
    }

    public JobAppEngineHttpTargetGetArgs(
        @Nullable Output<JobAppEngineHttpTargetAppEngineRoutingGetArgs> appEngineRouting,
        @Nullable Output<String> body,
        @Nullable Output<Map<String,String>> headers,
        @Nullable Output<String> httpMethod,
        Output<String> relativeUri) {
        this.appEngineRouting = appEngineRouting;
        this.body = body;
        this.headers = headers;
        this.httpMethod = httpMethod;
        this.relativeUri = Objects.requireNonNull(relativeUri, "expected parameter 'relativeUri' to be non-null");
    }

    private JobAppEngineHttpTargetGetArgs() {
        this.appEngineRouting = Output.empty();
        this.body = Output.empty();
        this.headers = Output.empty();
        this.httpMethod = Output.empty();
        this.relativeUri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobAppEngineHttpTargetGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<JobAppEngineHttpTargetAppEngineRoutingGetArgs> appEngineRouting;
        private @Nullable Output<String> body;
        private @Nullable Output<Map<String,String>> headers;
        private @Nullable Output<String> httpMethod;
        private Output<String> relativeUri;

        public Builder() {
    	      // Empty
        }

        public Builder(JobAppEngineHttpTargetGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineRouting = defaults.appEngineRouting;
    	      this.body = defaults.body;
    	      this.headers = defaults.headers;
    	      this.httpMethod = defaults.httpMethod;
    	      this.relativeUri = defaults.relativeUri;
        }

        public Builder appEngineRouting(@Nullable Output<JobAppEngineHttpTargetAppEngineRoutingGetArgs> appEngineRouting) {
            this.appEngineRouting = appEngineRouting;
            return this;
        }

        public Builder appEngineRouting(@Nullable JobAppEngineHttpTargetAppEngineRoutingGetArgs appEngineRouting) {
            this.appEngineRouting = Output.ofNullable(appEngineRouting);
            return this;
        }

        public Builder body(@Nullable Output<String> body) {
            this.body = body;
            return this;
        }

        public Builder body(@Nullable String body) {
            this.body = Output.ofNullable(body);
            return this;
        }

        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            this.headers = headers;
            return this;
        }

        public Builder headers(@Nullable Map<String,String> headers) {
            this.headers = Output.ofNullable(headers);
            return this;
        }

        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            this.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(@Nullable String httpMethod) {
            this.httpMethod = Output.ofNullable(httpMethod);
            return this;
        }

        public Builder relativeUri(Output<String> relativeUri) {
            this.relativeUri = Objects.requireNonNull(relativeUri);
            return this;
        }

        public Builder relativeUri(String relativeUri) {
            this.relativeUri = Output.of(Objects.requireNonNull(relativeUri));
            return this;
        }
        public JobAppEngineHttpTargetGetArgs build() {
            return new JobAppEngineHttpTargetGetArgs(appEngineRouting, body, headers, httpMethod, relativeUri);
        }
    }
}
