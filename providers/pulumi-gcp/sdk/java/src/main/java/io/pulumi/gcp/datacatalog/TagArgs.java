// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.datacatalog.inputs.TagFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TagArgs extends io.pulumi.resources.ResourceArgs {

    public static final TagArgs Empty = new TagArgs();

    /**
     * Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an
     * individual column based on that schema.
     * For attaching a tag to a nested column, use `.` to separate the column names. Example:
     * `outer_column.inner_column`
     * 
     */
    @InputImport(name="column")
      private final @Nullable Output<String> column;

    public Output<String> getColumn() {
        return this.column == null ? Output.empty() : this.column;
    }

    /**
     * This maps the ID of a tag field to the value of and additional information about that field.
     * Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.
     * Structure is documented below.
     * 
     */
    @InputImport(name="fields", required=true)
      private final Output<List<TagFieldArgs>> fields;

    public Output<List<TagFieldArgs>> getFields() {
        return this.fields;
    }

    /**
     * The name of the parent this tag is attached to. This can be the name of an entry or an entry group. If an entry group, the tag will be attached to
     * all entries in that group.
     * 
     */
    @InputImport(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Output.empty() : this.parent;
    }

    /**
     * The resource name of the tag template that this tag uses. Example:
     * projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}
     * This field cannot be modified after creation.
     * 
     */
    @InputImport(name="template", required=true)
      private final Output<String> template;

    public Output<String> getTemplate() {
        return this.template;
    }

    public TagArgs(
        @Nullable Output<String> column,
        Output<List<TagFieldArgs>> fields,
        @Nullable Output<String> parent,
        Output<String> template) {
        this.column = column;
        this.fields = Objects.requireNonNull(fields, "expected parameter 'fields' to be non-null");
        this.parent = parent;
        this.template = Objects.requireNonNull(template, "expected parameter 'template' to be non-null");
    }

    private TagArgs() {
        this.column = Output.empty();
        this.fields = Output.empty();
        this.parent = Output.empty();
        this.template = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> column;
        private Output<List<TagFieldArgs>> fields;
        private @Nullable Output<String> parent;
        private Output<String> template;

        public Builder() {
    	      // Empty
        }

        public Builder(TagArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.fields = defaults.fields;
    	      this.parent = defaults.parent;
    	      this.template = defaults.template;
        }

        public Builder column(@Nullable Output<String> column) {
            this.column = column;
            return this;
        }

        public Builder column(@Nullable String column) {
            this.column = Output.ofNullable(column);
            return this;
        }

        public Builder fields(Output<List<TagFieldArgs>> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }

        public Builder fields(List<TagFieldArgs> fields) {
            this.fields = Output.of(Objects.requireNonNull(fields));
            return this;
        }

        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder parent(@Nullable String parent) {
            this.parent = Output.ofNullable(parent);
            return this;
        }

        public Builder template(Output<String> template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }

        public Builder template(String template) {
            this.template = Output.of(Objects.requireNonNull(template));
            return this;
        }
        public TagArgs build() {
            return new TagArgs(column, fields, parent, template);
        }
    }
}
