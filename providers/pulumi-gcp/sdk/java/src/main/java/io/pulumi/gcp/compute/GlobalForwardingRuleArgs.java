// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.compute.inputs.GlobalForwardingRuleMetadataFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GlobalForwardingRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final GlobalForwardingRuleArgs Empty = new GlobalForwardingRuleArgs();

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The IP address that this forwarding rule serves. When a client sends
     * traffic to this IP address, the forwarding rule directs the traffic to
     * the target that you specify in the forwarding rule. The
     * loadBalancingScheme and the forwarding rule's target determine the
     * type of IP address that you can use. For detailed information, refer
     * to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * An address can be specified either by a literal IP address or a
     * reference to an existing Address resource. If you don't specify a
     * reserved IP address, an ephemeral IP address is assigned.
     * The value must be set to 0.0.0.0 when the target is a targetGrpcProxy
     * that has validateForProxyless field set to true.
     * For Private Service Connect forwarding rules that forward traffic to
     * Google APIs, IP address must be provided.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable Output<String> ipAddress;

    public Output<String> ipAddress() {
        return this.ipAddress == null ? Codegen.empty() : this.ipAddress;
    }

    /**
     * The IP protocol to which this rule applies. When the load balancing scheme is
     * INTERNAL_SELF_MANAGED, only TCP is valid. This field must not be set if the
     * global address is configured as a purpose of PRIVATE_SERVICE_CONNECT
     * and addressType of INTERNAL
     * Possible values are `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, and `ICMP`.
     * 
     */
    @Import(name="ipProtocol")
      private final @Nullable Output<String> ipProtocol;

    public Output<String> ipProtocol() {
        return this.ipProtocol == null ? Codegen.empty() : this.ipProtocol;
    }

    /**
     * The IP Version that will be used by this global forwarding rule.
     * Possible values are `IPV4` and `IPV6`.
     * 
     */
    @Import(name="ipVersion")
      private final @Nullable Output<String> ipVersion;

    public Output<String> ipVersion() {
        return this.ipVersion == null ? Codegen.empty() : this.ipVersion;
    }

    /**
     * Labels to apply to this forwarding rule.  A list of key->value pairs.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * This signifies what the GlobalForwardingRule will be used for.
     * The value of INTERNAL_SELF_MANAGED means that this will be used for
     * Internal Global HTTP(S) LB. The value of EXTERNAL means that this
     * will be used for External Global Load Balancing (HTTP(S) LB,
     * External TCP/UDP LB, SSL Proxy)
     * Note: This field must be set "" if the global address is
     * External TCP/UDP LB, SSL Proxy). The value of EXTERNAL_MANAGED means
     * that this will be used for Global external HTTP(S) load balancers.
     * Note: This field must be set "" if the global address is
     * configured as a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL.
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, and `INTERNAL_SELF_MANAGED`.
     * 
     */
    @Import(name="loadBalancingScheme")
      private final @Nullable Output<String> loadBalancingScheme;

    public Output<String> loadBalancingScheme() {
        return this.loadBalancingScheme == null ? Codegen.empty() : this.loadBalancingScheme;
    }

    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Import(name="metadataFilters")
      private final @Nullable Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters;

    public Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters() {
        return this.metadataFilters == null ? Codegen.empty() : this.metadataFilters;
    }

    /**
     * Name of the metadata label. The length must be between
     * 1 and 1024 characters, inclusive.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * This field is not used for external load balancing.
     * For INTERNAL_SELF_MANAGED load balancing, this field
     * identifies the network that the load balanced IP should belong to
     * for this global forwarding rule. If this field is not specified,
     * the default network will be used.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> network() {
        return this.network == null ? Codegen.empty() : this.network;
    }

    /**
     * This field is used along with the target field for TargetHttpProxy,
     * TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway,
     * TargetPool, TargetInstance.
     * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
     * addressed to ports in the specified range will be forwarded to target.
     * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
     * disjoint port ranges.
     * Some types of forwarding target have constraints on the acceptable
     * ports:
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    @Import(name="portRange")
      private final @Nullable Output<String> portRange;

    public Output<String> portRange() {
        return this.portRange == null ? Codegen.empty() : this.portRange;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The URL of the target resource to receive the matched traffic.
     * The forwarded traffic must be of a type appropriate to the target object.
     * For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets
     * are valid.
     * For global address with a purpose of PRIVATE_SERVICE_CONNECT and
     * addressType of INTERNAL, only "all-apis" and "vpc-sc" are valid.
     * 
     */
    @Import(name="target", required=true)
      private final Output<String> target;

    public Output<String> target() {
        return this.target;
    }

    public GlobalForwardingRuleArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> ipAddress,
        @Nullable Output<String> ipProtocol,
        @Nullable Output<String> ipVersion,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> loadBalancingScheme,
        @Nullable Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters,
        @Nullable Output<String> name,
        @Nullable Output<String> network,
        @Nullable Output<String> portRange,
        @Nullable Output<String> project,
        Output<String> target) {
        this.description = description;
        this.ipAddress = ipAddress;
        this.ipProtocol = ipProtocol;
        this.ipVersion = ipVersion;
        this.labels = labels;
        this.loadBalancingScheme = loadBalancingScheme;
        this.metadataFilters = metadataFilters;
        this.name = name;
        this.network = network;
        this.portRange = portRange;
        this.project = project;
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
    }

    private GlobalForwardingRuleArgs() {
        this.description = Codegen.empty();
        this.ipAddress = Codegen.empty();
        this.ipProtocol = Codegen.empty();
        this.ipVersion = Codegen.empty();
        this.labels = Codegen.empty();
        this.loadBalancingScheme = Codegen.empty();
        this.metadataFilters = Codegen.empty();
        this.name = Codegen.empty();
        this.network = Codegen.empty();
        this.portRange = Codegen.empty();
        this.project = Codegen.empty();
        this.target = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> ipAddress;
        private @Nullable Output<String> ipProtocol;
        private @Nullable Output<String> ipVersion;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> loadBalancingScheme;
        private @Nullable Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters;
        private @Nullable Output<String> name;
        private @Nullable Output<String> network;
        private @Nullable Output<String> portRange;
        private @Nullable Output<String> project;
        private Output<String> target;

        public Builder() {
    	      // Empty
        }

        public Builder(GlobalForwardingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipProtocol = defaults.ipProtocol;
    	      this.ipVersion = defaults.ipVersion;
    	      this.labels = defaults.labels;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.metadataFilters = defaults.metadataFilters;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.portRange = defaults.portRange;
    	      this.project = defaults.project;
    	      this.target = defaults.target;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = Codegen.ofNullable(ipAddress);
            return this;
        }
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            this.ipProtocol = ipProtocol;
            return this;
        }
        public Builder ipProtocol(@Nullable String ipProtocol) {
            this.ipProtocol = Codegen.ofNullable(ipProtocol);
            return this;
        }
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            this.ipVersion = ipVersion;
            return this;
        }
        public Builder ipVersion(@Nullable String ipVersion) {
            this.ipVersion = Codegen.ofNullable(ipVersion);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            this.loadBalancingScheme = loadBalancingScheme;
            return this;
        }
        public Builder loadBalancingScheme(@Nullable String loadBalancingScheme) {
            this.loadBalancingScheme = Codegen.ofNullable(loadBalancingScheme);
            return this;
        }
        public Builder metadataFilters(@Nullable Output<List<GlobalForwardingRuleMetadataFilterArgs>> metadataFilters) {
            this.metadataFilters = metadataFilters;
            return this;
        }
        public Builder metadataFilters(@Nullable List<GlobalForwardingRuleMetadataFilterArgs> metadataFilters) {
            this.metadataFilters = Codegen.ofNullable(metadataFilters);
            return this;
        }
        public Builder metadataFilters(GlobalForwardingRuleMetadataFilterArgs... metadataFilters) {
            return metadataFilters(List.of(metadataFilters));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Codegen.ofNullable(network);
            return this;
        }
        public Builder portRange(@Nullable Output<String> portRange) {
            this.portRange = portRange;
            return this;
        }
        public Builder portRange(@Nullable String portRange) {
            this.portRange = Codegen.ofNullable(portRange);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder target(Output<String> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public Builder target(String target) {
            this.target = Output.of(Objects.requireNonNull(target));
            return this;
        }        public GlobalForwardingRuleArgs build() {
            return new GlobalForwardingRuleArgs(description, ipAddress, ipProtocol, ipVersion, labels, loadBalancingScheme, metadataFilters, name, network, portRange, project, target);
        }
    }
}
