// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.deploymentmanager.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.deploymentmanager.inputs.DeploymentTargetConfigGetArgs;
import io.pulumi.gcp.deploymentmanager.inputs.DeploymentTargetImportGetArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentTargetGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentTargetGetArgs Empty = new DeploymentTargetGetArgs();

    /**
     * The root configuration file to use for this deployment.
     * Structure is documented below.
     * 
     */
    @Import(name="config", required=true)
      private final Output<DeploymentTargetConfigGetArgs> config;

    public Output<DeploymentTargetConfigGetArgs> config() {
        return this.config;
    }

    /**
     * Specifies import files for this configuration. This can be
     * used to import templates or other files. For example, you might
     * import a text file in order to use the file in a template.
     * Structure is documented below.
     * 
     */
    @Import(name="imports")
      private final @Nullable Output<List<DeploymentTargetImportGetArgs>> imports;

    public Output<List<DeploymentTargetImportGetArgs>> imports() {
        return this.imports == null ? Codegen.empty() : this.imports;
    }

    public DeploymentTargetGetArgs(
        Output<DeploymentTargetConfigGetArgs> config,
        @Nullable Output<List<DeploymentTargetImportGetArgs>> imports) {
        this.config = Objects.requireNonNull(config, "expected parameter 'config' to be non-null");
        this.imports = imports;
    }

    private DeploymentTargetGetArgs() {
        this.config = Codegen.empty();
        this.imports = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentTargetGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<DeploymentTargetConfigGetArgs> config;
        private @Nullable Output<List<DeploymentTargetImportGetArgs>> imports;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentTargetGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.imports = defaults.imports;
        }

        public Builder config(Output<DeploymentTargetConfigGetArgs> config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        public Builder config(DeploymentTargetConfigGetArgs config) {
            this.config = Output.of(Objects.requireNonNull(config));
            return this;
        }
        public Builder imports(@Nullable Output<List<DeploymentTargetImportGetArgs>> imports) {
            this.imports = imports;
            return this;
        }
        public Builder imports(@Nullable List<DeploymentTargetImportGetArgs> imports) {
            this.imports = Codegen.ofNullable(imports);
            return this;
        }
        public Builder imports(DeploymentTargetImportGetArgs... imports) {
            return imports(List.of(imports));
        }        public DeploymentTargetGetArgs build() {
            return new DeploymentTargetGetArgs(config, imports);
        }
    }
}
