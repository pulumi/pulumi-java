// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.notebooks.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams {
    /**
     * Provide this property when creating the disk.
     * 
     */
    private final @Nullable String description;
    /**
     * Specifies the disk name. If not specified, the default is
     * to use the name of the instance. If the disk with the
     * instance name exists already in the given zone/region, a
     * new name will be automatically generated.
     * 
     */
    private final @Nullable String diskName;
    /**
     * Specifies the size of the disk in base-2 GB. If not
     * specified, the disk will be the same size as the image
     * (usually 10GB). If specified, the size must be equal to
     * or larger than 10GB. Default 100 GB.
     * 
     */
    private final @Nullable Integer diskSizeGb;
    /**
     * The type of the boot disk attached to this runtime,
     * defaults to standard persistent disk. For valid values,
     * see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#disktype`
     * 
     */
    private final @Nullable String diskType;
    /**
     * Labels to apply to this disk. These can be later modified
     * by the disks.setLabels method. This field is only
     * applicable for persistent disks.
     * 
     */
    private final @Nullable Map<String,String> labels;

    @OutputCustomType.Constructor
    private RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams(
        @OutputCustomType.Parameter("description") @Nullable String description,
        @OutputCustomType.Parameter("diskName") @Nullable String diskName,
        @OutputCustomType.Parameter("diskSizeGb") @Nullable Integer diskSizeGb,
        @OutputCustomType.Parameter("diskType") @Nullable String diskType,
        @OutputCustomType.Parameter("labels") @Nullable Map<String,String> labels) {
        this.description = description;
        this.diskName = diskName;
        this.diskSizeGb = diskSizeGb;
        this.diskType = diskType;
        this.labels = labels;
    }

    /**
     * Provide this property when creating the disk.
     * 
    */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Specifies the disk name. If not specified, the default is
     * to use the name of the instance. If the disk with the
     * instance name exists already in the given zone/region, a
     * new name will be automatically generated.
     * 
    */
    public Optional<String> getDiskName() {
        return Optional.ofNullable(this.diskName);
    }
    /**
     * Specifies the size of the disk in base-2 GB. If not
     * specified, the disk will be the same size as the image
     * (usually 10GB). If specified, the size must be equal to
     * or larger than 10GB. Default 100 GB.
     * 
    */
    public Optional<Integer> getDiskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    /**
     * The type of the boot disk attached to this runtime,
     * defaults to standard persistent disk. For valid values,
     * see `https://cloud.google.com/vertex-ai/docs/workbench/
     * reference/rest/v1/projects.locations.runtimes#disktype`
     * 
    */
    public Optional<String> getDiskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * Labels to apply to this disk. These can be later modified
     * by the disks.setLabels method. This field is only
     * applicable for persistent disks.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels == null ? Map.of() : this.labels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable String diskName;
        private @Nullable Integer diskSizeGb;
        private @Nullable String diskType;
        private @Nullable Map<String,String> labels;

        public Builder() {
    	      // Empty
        }

        public Builder(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.diskName = defaults.diskName;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.labels = defaults.labels;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder diskName(@Nullable String diskName) {
            this.diskName = diskName;
            return this;
        }

        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        public RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams build() {
            return new RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParams(description, diskName, diskSizeGb, diskType, labels);
        }
    }
}
