// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.monitoring.inputs.SloBasicSliGetArgs;
import io.pulumi.gcp.monitoring.inputs.SloRequestBasedSliGetArgs;
import io.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGetArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SloState extends io.pulumi.resources.ResourceArgs {

    public static final SloState Empty = new SloState();

    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service's
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @InputImport(name="basicSli")
      private final @Nullable Input<SloBasicSliGetArgs> basicSli;

    public Input<SloBasicSliGetArgs> getBasicSli() {
        return this.basicSli == null ? Input.empty() : this.basicSli;
    }

    /**
     * A calendar period, semantically "since the start of the current
     * <calendarPeriod>".
     * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
     * 
     */
    @InputImport(name="calendarPeriod")
      private final @Nullable Input<String> calendarPeriod;

    public Input<String> getCalendarPeriod() {
        return this.calendarPeriod == null ? Input.empty() : this.calendarPeriod;
    }

    /**
     * Name used for UI elements listing this SLO.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The fraction of service that must be good in order for this objective
     * to be met. 0 < goal <= 0.999
     * 
     */
    @InputImport(name="goal")
      private final @Nullable Input<Double> goal;

    public Input<Double> getGoal() {
        return this.goal == null ? Input.empty() : this.goal;
    }

    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service's
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @InputImport(name="requestBasedSli")
      private final @Nullable Input<SloRequestBasedSliGetArgs> requestBasedSli;

    public Input<SloRequestBasedSliGetArgs> getRequestBasedSli() {
        return this.requestBasedSli == null ? Input.empty() : this.requestBasedSli;
    }

    /**
     * A rolling time period, semantically "in the past X days".
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    @InputImport(name="rollingPeriodDays")
      private final @Nullable Input<Integer> rollingPeriodDays;

    public Input<Integer> getRollingPeriodDays() {
        return this.rollingPeriodDays == null ? Input.empty() : this.rollingPeriodDays;
    }

    /**
     * ID of the service to which this SLO belongs.
     * 
     */
    @InputImport(name="service")
      private final @Nullable Input<String> service;

    public Input<String> getService() {
        return this.service == null ? Input.empty() : this.service;
    }

    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    @InputImport(name="sloId")
      private final @Nullable Input<String> sloId;

    public Input<String> getSloId() {
        return this.sloId == null ? Input.empty() : this.sloId;
    }

    /**
     * A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service's performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @InputImport(name="windowsBasedSli")
      private final @Nullable Input<SloWindowsBasedSliGetArgs> windowsBasedSli;

    public Input<SloWindowsBasedSliGetArgs> getWindowsBasedSli() {
        return this.windowsBasedSli == null ? Input.empty() : this.windowsBasedSli;
    }

    public SloState(
        @Nullable Input<SloBasicSliGetArgs> basicSli,
        @Nullable Input<String> calendarPeriod,
        @Nullable Input<String> displayName,
        @Nullable Input<Double> goal,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<SloRequestBasedSliGetArgs> requestBasedSli,
        @Nullable Input<Integer> rollingPeriodDays,
        @Nullable Input<String> service,
        @Nullable Input<String> sloId,
        @Nullable Input<SloWindowsBasedSliGetArgs> windowsBasedSli) {
        this.basicSli = basicSli;
        this.calendarPeriod = calendarPeriod;
        this.displayName = displayName;
        this.goal = goal;
        this.name = name;
        this.project = project;
        this.requestBasedSli = requestBasedSli;
        this.rollingPeriodDays = rollingPeriodDays;
        this.service = service;
        this.sloId = sloId;
        this.windowsBasedSli = windowsBasedSli;
    }

    private SloState() {
        this.basicSli = Input.empty();
        this.calendarPeriod = Input.empty();
        this.displayName = Input.empty();
        this.goal = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.requestBasedSli = Input.empty();
        this.rollingPeriodDays = Input.empty();
        this.service = Input.empty();
        this.sloId = Input.empty();
        this.windowsBasedSli = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<SloBasicSliGetArgs> basicSli;
        private @Nullable Input<String> calendarPeriod;
        private @Nullable Input<String> displayName;
        private @Nullable Input<Double> goal;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<SloRequestBasedSliGetArgs> requestBasedSli;
        private @Nullable Input<Integer> rollingPeriodDays;
        private @Nullable Input<String> service;
        private @Nullable Input<String> sloId;
        private @Nullable Input<SloWindowsBasedSliGetArgs> windowsBasedSli;

        public Builder() {
    	      // Empty
        }

        public Builder(SloState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basicSli = defaults.basicSli;
    	      this.calendarPeriod = defaults.calendarPeriod;
    	      this.displayName = defaults.displayName;
    	      this.goal = defaults.goal;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.requestBasedSli = defaults.requestBasedSli;
    	      this.rollingPeriodDays = defaults.rollingPeriodDays;
    	      this.service = defaults.service;
    	      this.sloId = defaults.sloId;
    	      this.windowsBasedSli = defaults.windowsBasedSli;
        }

        public Builder basicSli(@Nullable Input<SloBasicSliGetArgs> basicSli) {
            this.basicSli = basicSli;
            return this;
        }

        public Builder basicSli(@Nullable SloBasicSliGetArgs basicSli) {
            this.basicSli = Input.ofNullable(basicSli);
            return this;
        }

        public Builder calendarPeriod(@Nullable Input<String> calendarPeriod) {
            this.calendarPeriod = calendarPeriod;
            return this;
        }

        public Builder calendarPeriod(@Nullable String calendarPeriod) {
            this.calendarPeriod = Input.ofNullable(calendarPeriod);
            return this;
        }

        public Builder displayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder goal(@Nullable Input<Double> goal) {
            this.goal = goal;
            return this;
        }

        public Builder goal(@Nullable Double goal) {
            this.goal = Input.ofNullable(goal);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder requestBasedSli(@Nullable Input<SloRequestBasedSliGetArgs> requestBasedSli) {
            this.requestBasedSli = requestBasedSli;
            return this;
        }

        public Builder requestBasedSli(@Nullable SloRequestBasedSliGetArgs requestBasedSli) {
            this.requestBasedSli = Input.ofNullable(requestBasedSli);
            return this;
        }

        public Builder rollingPeriodDays(@Nullable Input<Integer> rollingPeriodDays) {
            this.rollingPeriodDays = rollingPeriodDays;
            return this;
        }

        public Builder rollingPeriodDays(@Nullable Integer rollingPeriodDays) {
            this.rollingPeriodDays = Input.ofNullable(rollingPeriodDays);
            return this;
        }

        public Builder service(@Nullable Input<String> service) {
            this.service = service;
            return this;
        }

        public Builder service(@Nullable String service) {
            this.service = Input.ofNullable(service);
            return this;
        }

        public Builder sloId(@Nullable Input<String> sloId) {
            this.sloId = sloId;
            return this;
        }

        public Builder sloId(@Nullable String sloId) {
            this.sloId = Input.ofNullable(sloId);
            return this;
        }

        public Builder windowsBasedSli(@Nullable Input<SloWindowsBasedSliGetArgs> windowsBasedSli) {
            this.windowsBasedSli = windowsBasedSli;
            return this;
        }

        public Builder windowsBasedSli(@Nullable SloWindowsBasedSliGetArgs windowsBasedSli) {
            this.windowsBasedSli = Input.ofNullable(windowsBasedSli);
            return this;
        }
        public SloState build() {
            return new SloState(basicSli, calendarPeriod, displayName, goal, name, project, requestBasedSli, rollingPeriodDays, service, sloId, windowsBasedSli);
        }
    }
}
