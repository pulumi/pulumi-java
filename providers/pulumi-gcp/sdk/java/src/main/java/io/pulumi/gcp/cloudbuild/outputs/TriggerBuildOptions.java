// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildOptionsVolume;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class TriggerBuildOptions {
    /**
     * Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
     * some of the space will be used by the operating system and build utilities.
     * Also note that this is the minimum disk size that will be allocated for the build --
     * the build may run with a larger disk than requested. At present, the maximum disk size
     * is 1000GB; builds that request more than the maximum are rejected with an error.
     * 
     */
    private final @Nullable Integer diskSizeGb;
    /**
     * Option to specify whether or not to apply bash style string operations to the substitutions.
     * NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    private final @Nullable Boolean dynamicSubstitutions;
    /**
     * A list of global environment variable definitions that will exist for all build steps
     * in this build. If a variable is defined in both globally and in a build step,
     * the variable will use the build step value.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     * 
     */
    private final @Nullable List<String> envs;
    /**
     * Option to define build log streaming behavior to Google Cloud Storage.
     * Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
     * 
     */
    private final @Nullable String logStreamingOption;
    /**
     * Option to specify the logging mode, which determines if and where build logs are stored.
     * Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
     * 
     */
    private final @Nullable String logging;
    /**
     * Compute Engine machine type on which to run the build.
     * Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
     * 
     */
    private final @Nullable String machineType;
    /**
     * Requested verifiability options.
     * Possible values are `NOT_VERIFIED` and `VERIFIED`.
     * 
     */
    private final @Nullable String requestedVerifyOption;
    /**
     * A list of global environment variables, which are encrypted using a Cloud Key Management
     * Service crypto key. These values must be specified in the build's Secret. These variables
     * will be available to all build steps in this build.
     * 
     */
    private final @Nullable List<String> secretEnvs;
    /**
     * Requested hash for SourceProvenance.
     * Each value may be one of `NONE`, `SHA256`, and `MD5`.
     * 
     */
    private final @Nullable List<String> sourceProvenanceHashes;
    /**
     * Option to specify behavior when there is an error in the substitution checks.
     * NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
     * in the build configuration file.
     * Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
     * 
     */
    private final @Nullable String substitutionOption;
    /**
     * Global list of volumes to mount for ALL build steps
     * Each volume is created as an empty volume prior to starting the build process.
     * Upon completion of the build, volumes and their contents are discarded. Global
     * volume names and paths cannot conflict with the volumes defined a build step.
     * Using a global volume in a build with only one step is not valid as it is indicative
     * of a build request with an incorrect configuration.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<TriggerBuildOptionsVolume> volumes;
    /**
     * Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
     * This field is experimental.
     * 
     */
    private final @Nullable String workerPool;

    @OutputCustomType.Constructor({"diskSizeGb","dynamicSubstitutions","envs","logStreamingOption","logging","machineType","requestedVerifyOption","secretEnvs","sourceProvenanceHashes","substitutionOption","volumes","workerPool"})
    private TriggerBuildOptions(
        @Nullable Integer diskSizeGb,
        @Nullable Boolean dynamicSubstitutions,
        @Nullable List<String> envs,
        @Nullable String logStreamingOption,
        @Nullable String logging,
        @Nullable String machineType,
        @Nullable String requestedVerifyOption,
        @Nullable List<String> secretEnvs,
        @Nullable List<String> sourceProvenanceHashes,
        @Nullable String substitutionOption,
        @Nullable List<TriggerBuildOptionsVolume> volumes,
        @Nullable String workerPool) {
        this.diskSizeGb = diskSizeGb;
        this.dynamicSubstitutions = dynamicSubstitutions;
        this.envs = envs;
        this.logStreamingOption = logStreamingOption;
        this.logging = logging;
        this.machineType = machineType;
        this.requestedVerifyOption = requestedVerifyOption;
        this.secretEnvs = secretEnvs;
        this.sourceProvenanceHashes = sourceProvenanceHashes;
        this.substitutionOption = substitutionOption;
        this.volumes = volumes;
        this.workerPool = workerPool;
    }

    /**
     * Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
     * some of the space will be used by the operating system and build utilities.
     * Also note that this is the minimum disk size that will be allocated for the build --
     * the build may run with a larger disk than requested. At present, the maximum disk size
     * is 1000GB; builds that request more than the maximum are rejected with an error.
     * 
    */
    public Optional<Integer> getDiskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    /**
     * Option to specify whether or not to apply bash style string operations to the substitutions.
     * NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     * 
    */
    public Optional<Boolean> getDynamicSubstitutions() {
        return Optional.ofNullable(this.dynamicSubstitutions);
    }
    /**
     * A list of global environment variable definitions that will exist for all build steps
     * in this build. If a variable is defined in both globally and in a build step,
     * the variable will use the build step value.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     * 
    */
    public List<String> getEnvs() {
        return this.envs == null ? List.of() : this.envs;
    }
    /**
     * Option to define build log streaming behavior to Google Cloud Storage.
     * Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
     * 
    */
    public Optional<String> getLogStreamingOption() {
        return Optional.ofNullable(this.logStreamingOption);
    }
    /**
     * Option to specify the logging mode, which determines if and where build logs are stored.
     * Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
     * 
    */
    public Optional<String> getLogging() {
        return Optional.ofNullable(this.logging);
    }
    /**
     * Compute Engine machine type on which to run the build.
     * Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
     * 
    */
    public Optional<String> getMachineType() {
        return Optional.ofNullable(this.machineType);
    }
    /**
     * Requested verifiability options.
     * Possible values are `NOT_VERIFIED` and `VERIFIED`.
     * 
    */
    public Optional<String> getRequestedVerifyOption() {
        return Optional.ofNullable(this.requestedVerifyOption);
    }
    /**
     * A list of global environment variables, which are encrypted using a Cloud Key Management
     * Service crypto key. These values must be specified in the build's Secret. These variables
     * will be available to all build steps in this build.
     * 
    */
    public List<String> getSecretEnvs() {
        return this.secretEnvs == null ? List.of() : this.secretEnvs;
    }
    /**
     * Requested hash for SourceProvenance.
     * Each value may be one of `NONE`, `SHA256`, and `MD5`.
     * 
    */
    public List<String> getSourceProvenanceHashes() {
        return this.sourceProvenanceHashes == null ? List.of() : this.sourceProvenanceHashes;
    }
    /**
     * Option to specify behavior when there is an error in the substitution checks.
     * NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
     * in the build configuration file.
     * Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
     * 
    */
    public Optional<String> getSubstitutionOption() {
        return Optional.ofNullable(this.substitutionOption);
    }
    /**
     * Global list of volumes to mount for ALL build steps
     * Each volume is created as an empty volume prior to starting the build process.
     * Upon completion of the build, volumes and their contents are discarded. Global
     * volume names and paths cannot conflict with the volumes defined a build step.
     * Using a global volume in a build with only one step is not valid as it is indicative
     * of a build request with an incorrect configuration.
     * Structure is documented below.
     * 
    */
    public List<TriggerBuildOptionsVolume> getVolumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }
    /**
     * Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
     * This field is experimental.
     * 
    */
    public Optional<String> getWorkerPool() {
        return Optional.ofNullable(this.workerPool);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBuildOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer diskSizeGb;
        private @Nullable Boolean dynamicSubstitutions;
        private @Nullable List<String> envs;
        private @Nullable String logStreamingOption;
        private @Nullable String logging;
        private @Nullable String machineType;
        private @Nullable String requestedVerifyOption;
        private @Nullable List<String> secretEnvs;
        private @Nullable List<String> sourceProvenanceHashes;
        private @Nullable String substitutionOption;
        private @Nullable List<TriggerBuildOptionsVolume> volumes;
        private @Nullable String workerPool;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerBuildOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.dynamicSubstitutions = defaults.dynamicSubstitutions;
    	      this.envs = defaults.envs;
    	      this.logStreamingOption = defaults.logStreamingOption;
    	      this.logging = defaults.logging;
    	      this.machineType = defaults.machineType;
    	      this.requestedVerifyOption = defaults.requestedVerifyOption;
    	      this.secretEnvs = defaults.secretEnvs;
    	      this.sourceProvenanceHashes = defaults.sourceProvenanceHashes;
    	      this.substitutionOption = defaults.substitutionOption;
    	      this.volumes = defaults.volumes;
    	      this.workerPool = defaults.workerPool;
        }

        public Builder setDiskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder setDynamicSubstitutions(@Nullable Boolean dynamicSubstitutions) {
            this.dynamicSubstitutions = dynamicSubstitutions;
            return this;
        }

        public Builder setEnvs(@Nullable List<String> envs) {
            this.envs = envs;
            return this;
        }

        public Builder setLogStreamingOption(@Nullable String logStreamingOption) {
            this.logStreamingOption = logStreamingOption;
            return this;
        }

        public Builder setLogging(@Nullable String logging) {
            this.logging = logging;
            return this;
        }

        public Builder setMachineType(@Nullable String machineType) {
            this.machineType = machineType;
            return this;
        }

        public Builder setRequestedVerifyOption(@Nullable String requestedVerifyOption) {
            this.requestedVerifyOption = requestedVerifyOption;
            return this;
        }

        public Builder setSecretEnvs(@Nullable List<String> secretEnvs) {
            this.secretEnvs = secretEnvs;
            return this;
        }

        public Builder setSourceProvenanceHashes(@Nullable List<String> sourceProvenanceHashes) {
            this.sourceProvenanceHashes = sourceProvenanceHashes;
            return this;
        }

        public Builder setSubstitutionOption(@Nullable String substitutionOption) {
            this.substitutionOption = substitutionOption;
            return this;
        }

        public Builder setVolumes(@Nullable List<TriggerBuildOptionsVolume> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setWorkerPool(@Nullable String workerPool) {
            this.workerPool = workerPool;
            return this;
        }
        public TriggerBuildOptions build() {
            return new TriggerBuildOptions(diskSizeGb, dynamicSubstitutions, envs, logStreamingOption, logging, machineType, requestedVerifyOption, secretEnvs, sourceProvenanceHashes, substitutionOption, volumes, workerPool);
        }
    }
}
