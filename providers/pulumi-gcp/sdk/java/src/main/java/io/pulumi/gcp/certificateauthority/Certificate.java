// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.certificateauthority;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.certificateauthority.CertificateArgs;
import io.pulumi.gcp.certificateauthority.inputs.CertificateState;
import io.pulumi.gcp.certificateauthority.outputs.CertificateCertificateDescription;
import io.pulumi.gcp.certificateauthority.outputs.CertificateConfig;
import io.pulumi.gcp.certificateauthority.outputs.CertificateRevocationDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A Certificate corresponds to a signed X.509 certificate issued by a Certificate.
 * 
 * 
 * > **Note:** The Certificate Authority that is referenced by this resource **must** be
 * `tier = "ENTERPRISE"`
 * 
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Privateca Certificate Config
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const test_ca = new gcp.certificateauthority.Authority("test-ca", {
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     pool: "",
 *     ignoreActiveCertificatesOnDeletion: true,
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *                 commonName: "my-certificate-authority",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     certSign: true,
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: true,
 *                 },
 *             },
 *         },
 *     },
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 * });
 * const _default = new gcp.certificateauthority.Certificate("default", {
 *     pool: "",
 *     location: "us-central1",
 *     certificateAuthority: test_ca.certificateAuthorityId,
 *     lifetime: "860s",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 commonName: "san1.example.com",
 *                 countryCode: "us",
 *                 organization: "google",
 *                 organizationalUnit: "enterprise",
 *                 locality: "mountain view",
 *                 province: "california",
 *                 streetAddress: "1600 amphitheatre parkway",
 *             },
 *             subjectAltName: {
 *                 emailAddresses: ["email@example.com"],
 *                 ipAddresses: ["127.0.0.1"],
 *                 uris: ["http://www.ietf.org/rfc/rfc3986.txt"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: false,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     crlSign: false,
 *                     decipherOnly: false,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: false,
 *                 },
 *             },
 *         },
 *         publicKey: {
 *             format: "PEM",
 *             key: Buffer.from(fs.readFileSync("test-fixtures/rsa_public.pem"), 'binary').toString('base64'),
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import base64
 * import pulumi_gcp as gcp
 * 
 * test_ca = gcp.certificateauthority.Authority("test-ca",
 *     certificate_authority_id="my-certificate-authority",
 *     location="us-central1",
 *     pool="",
 *     ignore_active_certificates_on_deletion=True,
 *     config=gcp.certificateauthority.AuthorityConfigArgs(
 *         subject_config=gcp.certificateauthority.AuthorityConfigSubjectConfigArgs(
 *             subject=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectArgs(
 *                 organization="HashiCorp",
 *                 common_name="my-certificate-authority",
 *             ),
 *             subject_alt_name=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs(
 *                 dns_names=["hashicorp.com"],
 *             ),
 *         ),
 *         x509_config=gcp.certificateauthority.AuthorityConfigX509ConfigArgs(
 *             ca_options=gcp.certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs(
 *                 is_ca=True,
 *             ),
 *             key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs(
 *                 base_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs(
 *                     cert_sign=True,
 *                     crl_sign=True,
 *                 ),
 *                 extended_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs(
 *                     server_auth=True,
 *                 ),
 *             ),
 *         ),
 *     ),
 *     key_spec=gcp.certificateauthority.AuthorityKeySpecArgs(
 *         algorithm="RSA_PKCS1_4096_SHA256",
 *     ))
 * default = gcp.certificateauthority.Certificate("default",
 *     pool="",
 *     location="us-central1",
 *     certificate_authority=test_ca.certificate_authority_id,
 *     lifetime="860s",
 *     config=gcp.certificateauthority.CertificateConfigArgs(
 *         subject_config=gcp.certificateauthority.CertificateConfigSubjectConfigArgs(
 *             subject=gcp.certificateauthority.CertificateConfigSubjectConfigSubjectArgs(
 *                 common_name="san1.example.com",
 *                 country_code="us",
 *                 organization="google",
 *                 organizational_unit="enterprise",
 *                 locality="mountain view",
 *                 province="california",
 *                 street_address="1600 amphitheatre parkway",
 *             ),
 *             subject_alt_name=gcp.certificateauthority.CertificateConfigSubjectConfigSubjectAltNameArgs(
 *                 email_addresses=["email@example.com"],
 *                 ip_addresses=["127.0.0.1"],
 *                 uris=["http://www.ietf.org/rfc/rfc3986.txt"],
 *             ),
 *         ),
 *         x509_config=gcp.certificateauthority.CertificateConfigX509ConfigArgs(
 *             ca_options=gcp.certificateauthority.CertificateConfigX509ConfigCaOptionsArgs(
 *                 is_ca=False,
 *             ),
 *             key_usage=gcp.certificateauthority.CertificateConfigX509ConfigKeyUsageArgs(
 *                 base_key_usage=gcp.certificateauthority.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs(
 *                     crl_sign=False,
 *                     decipher_only=False,
 *                 ),
 *                 extended_key_usage=gcp.certificateauthority.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs(
 *                     server_auth=False,
 *                 ),
 *             ),
 *         ),
 *         public_key=gcp.certificateauthority.CertificateConfigPublicKeyArgs(
 *             format="PEM",
 *             key=(lambda path: base64.b64encode(open(path).read().encode()).decode())("test-fixtures/rsa_public.pem"),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using System;
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 * 	private static string ReadFileBase64(string path) {
 * 		return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)))
 * 	}
 * 
 *     public MyStack()
 *     {
 *         var test_ca = new Gcp.CertificateAuthority.Authority("test-ca", new Gcp.CertificateAuthority.AuthorityArgs
 *         {
 *             CertificateAuthorityId = "my-certificate-authority",
 *             Location = "us-central1",
 *             Pool = "",
 *             IgnoreActiveCertificatesOnDeletion = true,
 *             Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
 *             {
 *                 SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
 *                 {
 *                     Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
 *                     {
 *                         Organization = "HashiCorp",
 *                         CommonName = "my-certificate-authority",
 *                     },
 *                     SubjectAltName = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectAltNameArgs
 *                     {
 *                         DnsNames = 
 *                         {
 *                             "hashicorp.com",
 *                         },
 *                     },
 *                 },
 *                 X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
 *                 {
 *                     CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
 *                     {
 *                         IsCa = true,
 *                     },
 *                     KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
 *                     {
 *                         BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
 *                         {
 *                             CertSign = true,
 *                             CrlSign = true,
 *                         },
 *                         ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
 *                         {
 *                             ServerAuth = true,
 *                         },
 *                     },
 *                 },
 *             },
 *             KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
 *             {
 *                 Algorithm = "RSA_PKCS1_4096_SHA256",
 *             },
 *         });
 *         var @default = new Gcp.CertificateAuthority.Certificate("default", new Gcp.CertificateAuthority.CertificateArgs
 *         {
 *             Pool = "",
 *             Location = "us-central1",
 *             CertificateAuthority = test_ca.CertificateAuthorityId,
 *             Lifetime = "860s",
 *             Config = new Gcp.CertificateAuthority.Inputs.CertificateConfigArgs
 *             {
 *                 SubjectConfig = new Gcp.CertificateAuthority.Inputs.CertificateConfigSubjectConfigArgs
 *                 {
 *                     Subject = new Gcp.CertificateAuthority.Inputs.CertificateConfigSubjectConfigSubjectArgs
 *                     {
 *                         CommonName = "san1.example.com",
 *                         CountryCode = "us",
 *                         Organization = "google",
 *                         OrganizationalUnit = "enterprise",
 *                         Locality = "mountain view",
 *                         Province = "california",
 *                         StreetAddress = "1600 amphitheatre parkway",
 *                     },
 *                     SubjectAltName = new Gcp.CertificateAuthority.Inputs.CertificateConfigSubjectConfigSubjectAltNameArgs
 *                     {
 *                         EmailAddresses = 
 *                         {
 *                             "email@example.com",
 *                         },
 *                         IpAddresses = 
 *                         {
 *                             "127.0.0.1",
 *                         },
 *                         Uris = 
 *                         {
 *                             "http://www.ietf.org/rfc/rfc3986.txt",
 *                         },
 *                     },
 *                 },
 *                 X509Config = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigArgs
 *                 {
 *                     CaOptions = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigCaOptionsArgs
 *                     {
 *                         IsCa = false,
 *                     },
 *                     KeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigKeyUsageArgs
 *                     {
 *                         BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs
 *                         {
 *                             CrlSign = false,
 *                             DecipherOnly = false,
 *                         },
 *                         ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs
 *                         {
 *                             ServerAuth = false,
 *                         },
 *                     },
 *                 },
 *                 PublicKey = new Gcp.CertificateAuthority.Inputs.CertificateConfigPublicKeyArgs
 *                 {
 *                     Format = "PEM",
 *                     Key = ReadFileBase64("test-fixtures/rsa_public.pem"),
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/base64"
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func filebase64OrPanic(path string) pulumi.StringPtrInput {
 * 	if fileData, err := ioutil.ReadFile(path); err == nil {
 * 		return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
 * 	} else {
 * 		panic(err.Error())
 * 	}
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := certificateauthority.NewAuthority(ctx, "test-ca", &certificateauthority.AuthorityArgs{
 * 			CertificateAuthorityId:             pulumi.String("my-certificate-authority"),
 * 			Location:                           pulumi.String("us-central1"),
 * 			Pool:                               pulumi.String(""),
 * 			IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
 * 			Config: &certificateauthority.AuthorityConfigArgs{
 * 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
 * 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
 * 						Organization: pulumi.String("HashiCorp"),
 * 						CommonName:   pulumi.String("my-certificate-authority"),
 * 					},
 * 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
 * 						DnsNames: pulumi.StringArray{
 * 							pulumi.String("hashicorp.com"),
 * 						},
 * 					},
 * 				},
 * 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
 * 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
 * 						IsCa: pulumi.Bool(true),
 * 					},
 * 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
 * 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
 * 							CertSign: pulumi.Bool(true),
 * 							CrlSign:  pulumi.Bool(true),
 * 						},
 * 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
 * 							ServerAuth: pulumi.Bool(true),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
 * 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = certificateauthority.NewCertificate(ctx, "default", &certificateauthority.CertificateArgs{
 * 			Pool:                 pulumi.String(""),
 * 			Location:             pulumi.String("us-central1"),
 * 			CertificateAuthority: test_ca.CertificateAuthorityId,
 * 			Lifetime:             pulumi.String("860s"),
 * 			Config: &certificateauthority.CertificateConfigArgs{
 * 				SubjectConfig: &certificateauthority.CertificateConfigSubjectConfigArgs{
 * 					Subject: &certificateauthority.CertificateConfigSubjectConfigSubjectArgs{
 * 						CommonName:         pulumi.String("san1.example.com"),
 * 						CountryCode:        pulumi.String("us"),
 * 						Organization:       pulumi.String("google"),
 * 						OrganizationalUnit: pulumi.String("enterprise"),
 * 						Locality:           pulumi.String("mountain view"),
 * 						Province:           pulumi.String("california"),
 * 						StreetAddress:      pulumi.String("1600 amphitheatre parkway"),
 * 					},
 * 					SubjectAltName: &certificateauthority.CertificateConfigSubjectConfigSubjectAltNameArgs{
 * 						EmailAddresses: pulumi.StringArray{
 * 							pulumi.String("email@example.com"),
 * 						},
 * 						IpAddresses: pulumi.StringArray{
 * 							pulumi.String("127.0.0.1"),
 * 						},
 * 						Uris: pulumi.StringArray{
 * 							pulumi.String("http://www.ietf.org/rfc/rfc3986.txt"),
 * 						},
 * 					},
 * 				},
 * 				X509Config: &certificateauthority.CertificateConfigX509ConfigArgs{
 * 					CaOptions: &certificateauthority.CertificateConfigX509ConfigCaOptionsArgs{
 * 						IsCa: pulumi.Bool(false),
 * 					},
 * 					KeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageArgs{
 * 						BaseKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs{
 * 							CrlSign:      pulumi.Bool(false),
 * 							DecipherOnly: pulumi.Bool(false),
 * 						},
 * 						ExtendedKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
 * 							ServerAuth: pulumi.Bool(false),
 * 						},
 * 					},
 * 				},
 * 				PublicKey: &certificateauthority.CertificateConfigPublicKeyArgs{
 * 					Format: pulumi.String("PEM"),
 * 					Key:    filebase64OrPanic("test-fixtures/rsa_public.pem"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Privateca Certificate With Template
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const template = new gcp.certificateauthority.CertificateTemplate("template", {
 *     location: "us-central1",
 *     description: "An updated sample certificate template",
 *     identityConstraints: {
 *         allowSubjectAltNamesPassthrough: true,
 *         allowSubjectPassthrough: true,
 *         celExpression: {
 *             description: "Always true",
 *             expression: "true",
 *             location: "any.file.anywhere",
 *             title: "Sample expression",
 *         },
 *     },
 *     passthroughExtensions: {
 *         additionalExtensions: [{
 *             objectIdPaths: [
 *                 1,
 *                 6,
 *             ],
 *         }],
 *         knownExtensions: ["EXTENDED_KEY_USAGE"],
 *     },
 *     predefinedValues: {
 *         additionalExtensions: [{
 *             objectId: {
 *                 objectIdPaths: [
 *                     1,
 *                     6,
 *                 ],
 *             },
 *             value: "c3RyaW5nCg==",
 *             critical: true,
 *         }],
 *         aiaOcspServers: ["string"],
 *         caOptions: {
 *             isCa: false,
 *             maxIssuerPathLength: 6,
 *         },
 *         keyUsage: {
 *             baseKeyUsage: {
 *                 certSign: false,
 *                 contentCommitment: true,
 *                 crlSign: false,
 *                 dataEncipherment: true,
 *                 decipherOnly: true,
 *                 digitalSignature: true,
 *                 encipherOnly: true,
 *                 keyAgreement: true,
 *                 keyEncipherment: true,
 *             },
 *             extendedKeyUsage: {
 *                 clientAuth: true,
 *                 codeSigning: true,
 *                 emailProtection: true,
 *                 ocspSigning: true,
 *                 serverAuth: true,
 *                 timeStamping: true,
 *             },
 *             unknownExtendedKeyUsages: [{
 *                 objectIdPaths: [
 *                     1,
 *                     6,
 *                 ],
 *             }],
 *         },
 *         policyIds: [{
 *             objectIdPaths: [
 *                 1,
 *                 6,
 *             ],
 *         }],
 *     },
 * });
 * const test_ca = new gcp.certificateauthority.Authority("test-ca", {
 *     pool: "",
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *                 commonName: "my-certificate-authority",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     certSign: true,
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: false,
 *                 },
 *             },
 *         },
 *     },
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 * });
 * const _default = new gcp.certificateauthority.Certificate("default", {
 *     pool: "",
 *     location: "us-central1",
 *     certificateAuthority: test_ca.certificateAuthorityId,
 *     lifetime: "860s",
 *     pemCsr: fs.readFileSync("test-fixtures/rsa_csr.pem"),
 *     certificateTemplate: template.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * template = gcp.certificateauthority.CertificateTemplate("template",
 *     location="us-central1",
 *     description="An updated sample certificate template",
 *     identity_constraints=gcp.certificateauthority.CertificateTemplateIdentityConstraintsArgs(
 *         allow_subject_alt_names_passthrough=True,
 *         allow_subject_passthrough=True,
 *         cel_expression=gcp.certificateauthority.CertificateTemplateIdentityConstraintsCelExpressionArgs(
 *             description="Always true",
 *             expression="true",
 *             location="any.file.anywhere",
 *             title="Sample expression",
 *         ),
 *     ),
 *     passthrough_extensions=gcp.certificateauthority.CertificateTemplatePassthroughExtensionsArgs(
 *         additional_extensions=[gcp.certificateauthority.CertificateTemplatePassthroughExtensionsAdditionalExtensionArgs(
 *             object_id_paths=[
 *                 1,
 *                 6,
 *             ],
 *         )],
 *         known_extensions=["EXTENDED_KEY_USAGE"],
 *     ),
 *     predefined_values=gcp.certificateauthority.CertificateTemplatePredefinedValuesArgs(
 *         additional_extensions=[gcp.certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionArgs(
 *             object_id=gcp.certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionObjectIdArgs(
 *                 object_id_paths=[
 *                     1,
 *                     6,
 *                 ],
 *             ),
 *             value="c3RyaW5nCg==",
 *             critical=True,
 *         )],
 *         aia_ocsp_servers=["string"],
 *         ca_options=gcp.certificateauthority.CertificateTemplatePredefinedValuesCaOptionsArgs(
 *             is_ca=False,
 *             max_issuer_path_length=6,
 *         ),
 *         key_usage=gcp.certificateauthority.CertificateTemplatePredefinedValuesKeyUsageArgs(
 *             base_key_usage=gcp.certificateauthority.CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageArgs(
 *                 cert_sign=False,
 *                 content_commitment=True,
 *                 crl_sign=False,
 *                 data_encipherment=True,
 *                 decipher_only=True,
 *                 digital_signature=True,
 *                 encipher_only=True,
 *                 key_agreement=True,
 *                 key_encipherment=True,
 *             ),
 *             extended_key_usage=gcp.certificateauthority.CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageArgs(
 *                 client_auth=True,
 *                 code_signing=True,
 *                 email_protection=True,
 *                 ocsp_signing=True,
 *                 server_auth=True,
 *                 time_stamping=True,
 *             ),
 *             unknown_extended_key_usages=[gcp.certificateauthority.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArgs(
 *                 object_id_paths=[
 *                     1,
 *                     6,
 *                 ],
 *             )],
 *         ),
 *         policy_ids=[gcp.certificateauthority.CertificateTemplatePredefinedValuesPolicyIdArgs(
 *             object_id_paths=[
 *                 1,
 *                 6,
 *             ],
 *         )],
 *     ))
 * test_ca = gcp.certificateauthority.Authority("test-ca",
 *     pool="",
 *     certificate_authority_id="my-certificate-authority",
 *     location="us-central1",
 *     config=gcp.certificateauthority.AuthorityConfigArgs(
 *         subject_config=gcp.certificateauthority.AuthorityConfigSubjectConfigArgs(
 *             subject=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectArgs(
 *                 organization="HashiCorp",
 *                 common_name="my-certificate-authority",
 *             ),
 *             subject_alt_name=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs(
 *                 dns_names=["hashicorp.com"],
 *             ),
 *         ),
 *         x509_config=gcp.certificateauthority.AuthorityConfigX509ConfigArgs(
 *             ca_options=gcp.certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs(
 *                 is_ca=True,
 *             ),
 *             key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs(
 *                 base_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs(
 *                     cert_sign=True,
 *                     crl_sign=True,
 *                 ),
 *                 extended_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs(
 *                     server_auth=False,
 *                 ),
 *             ),
 *         ),
 *     ),
 *     key_spec=gcp.certificateauthority.AuthorityKeySpecArgs(
 *         algorithm="RSA_PKCS1_4096_SHA256",
 *     ))
 * default = gcp.certificateauthority.Certificate("default",
 *     pool="",
 *     location="us-central1",
 *     certificate_authority=test_ca.certificate_authority_id,
 *     lifetime="860s",
 *     pem_csr=(lambda path: open(path).read())("test-fixtures/rsa_csr.pem"),
 *     certificate_template=template.id)
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var template = new Gcp.CertificateAuthority.CertificateTemplate("template", new Gcp.CertificateAuthority.CertificateTemplateArgs
 *         {
 *             Location = "us-central1",
 *             Description = "An updated sample certificate template",
 *             IdentityConstraints = new Gcp.CertificateAuthority.Inputs.CertificateTemplateIdentityConstraintsArgs
 *             {
 *                 AllowSubjectAltNamesPassthrough = true,
 *                 AllowSubjectPassthrough = true,
 *                 CelExpression = new Gcp.CertificateAuthority.Inputs.CertificateTemplateIdentityConstraintsCelExpressionArgs
 *                 {
 *                     Description = "Always true",
 *                     Expression = "true",
 *                     Location = "any.file.anywhere",
 *                     Title = "Sample expression",
 *                 },
 *             },
 *             PassthroughExtensions = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePassthroughExtensionsArgs
 *             {
 *                 AdditionalExtensions = 
 *                 {
 *                     new Gcp.CertificateAuthority.Inputs.CertificateTemplatePassthroughExtensionsAdditionalExtensionArgs
 *                     {
 *                         ObjectIdPaths = 
 *                         {
 *                             1,
 *                             6,
 *                         },
 *                     },
 *                 },
 *                 KnownExtensions = 
 *                 {
 *                     "EXTENDED_KEY_USAGE",
 *                 },
 *             },
 *             PredefinedValues = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesArgs
 *             {
 *                 AdditionalExtensions = 
 *                 {
 *                     new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesAdditionalExtensionArgs
 *                     {
 *                         ObjectId = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesAdditionalExtensionObjectIdArgs
 *                         {
 *                             ObjectIdPaths = 
 *                             {
 *                                 1,
 *                                 6,
 *                             },
 *                         },
 *                         Value = "c3RyaW5nCg==",
 *                         Critical = true,
 *                     },
 *                 },
 *                 AiaOcspServers = 
 *                 {
 *                     "string",
 *                 },
 *                 CaOptions = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesCaOptionsArgs
 *                 {
 *                     IsCa = false,
 *                     MaxIssuerPathLength = 6,
 *                 },
 *                 KeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageArgs
 *                 {
 *                     BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageArgs
 *                     {
 *                         CertSign = false,
 *                         ContentCommitment = true,
 *                         CrlSign = false,
 *                         DataEncipherment = true,
 *                         DecipherOnly = true,
 *                         DigitalSignature = true,
 *                         EncipherOnly = true,
 *                         KeyAgreement = true,
 *                         KeyEncipherment = true,
 *                     },
 *                     ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageArgs
 *                     {
 *                         ClientAuth = true,
 *                         CodeSigning = true,
 *                         EmailProtection = true,
 *                         OcspSigning = true,
 *                         ServerAuth = true,
 *                         TimeStamping = true,
 *                     },
 *                     UnknownExtendedKeyUsages = 
 *                     {
 *                         new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArgs
 *                         {
 *                             ObjectIdPaths = 
 *                             {
 *                                 1,
 *                                 6,
 *                             },
 *                         },
 *                     },
 *                 },
 *                 PolicyIds = 
 *                 {
 *                     new Gcp.CertificateAuthority.Inputs.CertificateTemplatePredefinedValuesPolicyIdArgs
 *                     {
 *                         ObjectIdPaths = 
 *                         {
 *                             1,
 *                             6,
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var test_ca = new Gcp.CertificateAuthority.Authority("test-ca", new Gcp.CertificateAuthority.AuthorityArgs
 *         {
 *             Pool = "",
 *             CertificateAuthorityId = "my-certificate-authority",
 *             Location = "us-central1",
 *             Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
 *             {
 *                 SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
 *                 {
 *                     Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
 *                     {
 *                         Organization = "HashiCorp",
 *                         CommonName = "my-certificate-authority",
 *                     },
 *                     SubjectAltName = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectAltNameArgs
 *                     {
 *                         DnsNames = 
 *                         {
 *                             "hashicorp.com",
 *                         },
 *                     },
 *                 },
 *                 X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
 *                 {
 *                     CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
 *                     {
 *                         IsCa = true,
 *                     },
 *                     KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
 *                     {
 *                         BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
 *                         {
 *                             CertSign = true,
 *                             CrlSign = true,
 *                         },
 *                         ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
 *                         {
 *                             ServerAuth = false,
 *                         },
 *                     },
 *                 },
 *             },
 *             KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
 *             {
 *                 Algorithm = "RSA_PKCS1_4096_SHA256",
 *             },
 *         });
 *         var @default = new Gcp.CertificateAuthority.Certificate("default", new Gcp.CertificateAuthority.CertificateArgs
 *         {
 *             Pool = "",
 *             Location = "us-central1",
 *             CertificateAuthority = test_ca.CertificateAuthorityId,
 *             Lifetime = "860s",
 *             PemCsr = File.ReadAllText("test-fixtures/rsa_csr.pem"),
 *             CertificateTemplate = template.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		template, err := certificateauthority.NewCertificateTemplate(ctx, "template", &certificateauthority.CertificateTemplateArgs{
 * 			Location:    pulumi.String("us-central1"),
 * 			Description: pulumi.String("An updated sample certificate template"),
 * 			IdentityConstraints: &certificateauthority.CertificateTemplateIdentityConstraintsArgs{
 * 				AllowSubjectAltNamesPassthrough: pulumi.Bool(true),
 * 				AllowSubjectPassthrough:         pulumi.Bool(true),
 * 				CelExpression: &certificateauthority.CertificateTemplateIdentityConstraintsCelExpressionArgs{
 * 					Description: pulumi.String("Always true"),
 * 					Expression:  pulumi.String("true"),
 * 					Location:    pulumi.String("any.file.anywhere"),
 * 					Title:       pulumi.String("Sample expression"),
 * 				},
 * 			},
 * 			PassthroughExtensions: &certificateauthority.CertificateTemplatePassthroughExtensionsArgs{
 * 				AdditionalExtensions: certificateauthority.CertificateTemplatePassthroughExtensionsAdditionalExtensionArray{
 * 					&certificateauthority.CertificateTemplatePassthroughExtensionsAdditionalExtensionArgs{
 * 						ObjectIdPaths: pulumi.IntArray{
 * 							pulumi.Int(1),
 * 							pulumi.Int(6),
 * 						},
 * 					},
 * 				},
 * 				KnownExtensions: pulumi.StringArray{
 * 					pulumi.String("EXTENDED_KEY_USAGE"),
 * 				},
 * 			},
 * 			PredefinedValues: &certificateauthority.CertificateTemplatePredefinedValuesArgs{
 * 				AdditionalExtensions: certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionArray{
 * 					&certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionArgs{
 * 						ObjectId: &certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionObjectIdArgs{
 * 							ObjectIdPaths: pulumi.IntArray{
 * 								pulumi.Int(1),
 * 								pulumi.Int(6),
 * 							},
 * 						},
 * 						Value:    pulumi.String("c3RyaW5nCg=="),
 * 						Critical: pulumi.Bool(true),
 * 					},
 * 				},
 * 				AiaOcspServers: pulumi.StringArray{
 * 					pulumi.String("string"),
 * 				},
 * 				CaOptions: &certificateauthority.CertificateTemplatePredefinedValuesCaOptionsArgs{
 * 					IsCa:                pulumi.Bool(false),
 * 					MaxIssuerPathLength: pulumi.Int(6),
 * 				},
 * 				KeyUsage: &certificateauthority.CertificateTemplatePredefinedValuesKeyUsageArgs{
 * 					BaseKeyUsage: &certificateauthority.CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageArgs{
 * 						CertSign:          pulumi.Bool(false),
 * 						ContentCommitment: pulumi.Bool(true),
 * 						CrlSign:           pulumi.Bool(false),
 * 						DataEncipherment:  pulumi.Bool(true),
 * 						DecipherOnly:      pulumi.Bool(true),
 * 						DigitalSignature:  pulumi.Bool(true),
 * 						EncipherOnly:      pulumi.Bool(true),
 * 						KeyAgreement:      pulumi.Bool(true),
 * 						KeyEncipherment:   pulumi.Bool(true),
 * 					},
 * 					ExtendedKeyUsage: &certificateauthority.CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageArgs{
 * 						ClientAuth:      pulumi.Bool(true),
 * 						CodeSigning:     pulumi.Bool(true),
 * 						EmailProtection: pulumi.Bool(true),
 * 						OcspSigning:     pulumi.Bool(true),
 * 						ServerAuth:      pulumi.Bool(true),
 * 						TimeStamping:    pulumi.Bool(true),
 * 					},
 * 					UnknownExtendedKeyUsages: certificateauthority.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArray{
 * 						&certificateauthority.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArgs{
 * 							ObjectIdPaths: pulumi.IntArray{
 * 								pulumi.Int(1),
 * 								pulumi.Int(6),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				PolicyIds: certificateauthority.CertificateTemplatePredefinedValuesPolicyIdArray{
 * 					&certificateauthority.CertificateTemplatePredefinedValuesPolicyIdArgs{
 * 						ObjectIdPaths: pulumi.IntArray{
 * 							pulumi.Int(1),
 * 							pulumi.Int(6),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = certificateauthority.NewAuthority(ctx, "test-ca", &certificateauthority.AuthorityArgs{
 * 			Pool:                   pulumi.String(""),
 * 			CertificateAuthorityId: pulumi.String("my-certificate-authority"),
 * 			Location:               pulumi.String("us-central1"),
 * 			Config: &certificateauthority.AuthorityConfigArgs{
 * 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
 * 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
 * 						Organization: pulumi.String("HashiCorp"),
 * 						CommonName:   pulumi.String("my-certificate-authority"),
 * 					},
 * 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
 * 						DnsNames: pulumi.StringArray{
 * 							pulumi.String("hashicorp.com"),
 * 						},
 * 					},
 * 				},
 * 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
 * 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
 * 						IsCa: pulumi.Bool(true),
 * 					},
 * 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
 * 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
 * 							CertSign: pulumi.Bool(true),
 * 							CrlSign:  pulumi.Bool(true),
 * 						},
 * 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
 * 							ServerAuth: pulumi.Bool(false),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
 * 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = certificateauthority.NewCertificate(ctx, "default", &certificateauthority.CertificateArgs{
 * 			Pool:                 pulumi.String(""),
 * 			Location:             pulumi.String("us-central1"),
 * 			CertificateAuthority: test_ca.CertificateAuthorityId,
 * 			Lifetime:             pulumi.String("860s"),
 * 			PemCsr:               readFileOrPanic("test-fixtures/rsa_csr.pem"),
 * 			CertificateTemplate:  template.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Privateca Certificate Csr
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const test_ca = new gcp.certificateauthority.Authority("test-ca", {
 *     pool: "",
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *                 commonName: "my-certificate-authority",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     certSign: true,
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: false,
 *                 },
 *             },
 *         },
 *     },
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 * });
 * const _default = new gcp.certificateauthority.Certificate("default", {
 *     pool: "",
 *     location: "us-central1",
 *     certificateAuthority: test_ca.certificateAuthorityId,
 *     lifetime: "860s",
 *     pemCsr: fs.readFileSync("test-fixtures/rsa_csr.pem"),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * test_ca = gcp.certificateauthority.Authority("test-ca",
 *     pool="",
 *     certificate_authority_id="my-certificate-authority",
 *     location="us-central1",
 *     config=gcp.certificateauthority.AuthorityConfigArgs(
 *         subject_config=gcp.certificateauthority.AuthorityConfigSubjectConfigArgs(
 *             subject=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectArgs(
 *                 organization="HashiCorp",
 *                 common_name="my-certificate-authority",
 *             ),
 *             subject_alt_name=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs(
 *                 dns_names=["hashicorp.com"],
 *             ),
 *         ),
 *         x509_config=gcp.certificateauthority.AuthorityConfigX509ConfigArgs(
 *             ca_options=gcp.certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs(
 *                 is_ca=True,
 *             ),
 *             key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs(
 *                 base_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs(
 *                     cert_sign=True,
 *                     crl_sign=True,
 *                 ),
 *                 extended_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs(
 *                     server_auth=False,
 *                 ),
 *             ),
 *         ),
 *     ),
 *     key_spec=gcp.certificateauthority.AuthorityKeySpecArgs(
 *         algorithm="RSA_PKCS1_4096_SHA256",
 *     ))
 * default = gcp.certificateauthority.Certificate("default",
 *     pool="",
 *     location="us-central1",
 *     certificate_authority=test_ca.certificate_authority_id,
 *     lifetime="860s",
 *     pem_csr=(lambda path: open(path).read())("test-fixtures/rsa_csr.pem"))
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test_ca = new Gcp.CertificateAuthority.Authority("test-ca", new Gcp.CertificateAuthority.AuthorityArgs
 *         {
 *             Pool = "",
 *             CertificateAuthorityId = "my-certificate-authority",
 *             Location = "us-central1",
 *             Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
 *             {
 *                 SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
 *                 {
 *                     Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
 *                     {
 *                         Organization = "HashiCorp",
 *                         CommonName = "my-certificate-authority",
 *                     },
 *                     SubjectAltName = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectAltNameArgs
 *                     {
 *                         DnsNames = 
 *                         {
 *                             "hashicorp.com",
 *                         },
 *                     },
 *                 },
 *                 X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
 *                 {
 *                     CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
 *                     {
 *                         IsCa = true,
 *                     },
 *                     KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
 *                     {
 *                         BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
 *                         {
 *                             CertSign = true,
 *                             CrlSign = true,
 *                         },
 *                         ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
 *                         {
 *                             ServerAuth = false,
 *                         },
 *                     },
 *                 },
 *             },
 *             KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
 *             {
 *                 Algorithm = "RSA_PKCS1_4096_SHA256",
 *             },
 *         });
 *         var @default = new Gcp.CertificateAuthority.Certificate("default", new Gcp.CertificateAuthority.CertificateArgs
 *         {
 *             Pool = "",
 *             Location = "us-central1",
 *             CertificateAuthority = test_ca.CertificateAuthorityId,
 *             Lifetime = "860s",
 *             PemCsr = File.ReadAllText("test-fixtures/rsa_csr.pem"),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := certificateauthority.NewAuthority(ctx, "test-ca", &certificateauthority.AuthorityArgs{
 * 			Pool:                   pulumi.String(""),
 * 			CertificateAuthorityId: pulumi.String("my-certificate-authority"),
 * 			Location:               pulumi.String("us-central1"),
 * 			Config: &certificateauthority.AuthorityConfigArgs{
 * 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
 * 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
 * 						Organization: pulumi.String("HashiCorp"),
 * 						CommonName:   pulumi.String("my-certificate-authority"),
 * 					},
 * 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
 * 						DnsNames: pulumi.StringArray{
 * 							pulumi.String("hashicorp.com"),
 * 						},
 * 					},
 * 				},
 * 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
 * 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
 * 						IsCa: pulumi.Bool(true),
 * 					},
 * 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
 * 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
 * 							CertSign: pulumi.Bool(true),
 * 							CrlSign:  pulumi.Bool(true),
 * 						},
 * 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
 * 							ServerAuth: pulumi.Bool(false),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
 * 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = certificateauthority.NewCertificate(ctx, "default", &certificateauthority.CertificateArgs{
 * 			Pool:                 pulumi.String(""),
 * 			Location:             pulumi.String("us-central1"),
 * 			CertificateAuthority: test_ca.CertificateAuthorityId,
 * 			Lifetime:             pulumi.String("860s"),
 * 			PemCsr:               readFileOrPanic("test-fixtures/rsa_csr.pem"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Privateca Certificate No Authority
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const authority = new gcp.certificateauthority.Authority("authority", {
 *     pool: "",
 *     certificateAuthorityId: "my-authority",
 *     location: "us-central1",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *                 commonName: "my-certificate-authority",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     digitalSignature: true,
 *                     certSign: true,
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: true,
 *                 },
 *             },
 *         },
 *     },
 *     lifetime: "86400s",
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 * });
 * const _default = new gcp.certificateauthority.Certificate("default", {
 *     pool: "",
 *     location: "us-central1",
 *     lifetime: "860s",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 commonName: "san1.example.com",
 *                 countryCode: "us",
 *                 organization: "google",
 *                 organizationalUnit: "enterprise",
 *                 locality: "mountain view",
 *                 province: "california",
 *                 streetAddress: "1600 amphitheatre parkway",
 *                 postalCode: "94109",
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: false,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: true,
 *                 },
 *             },
 *         },
 *         publicKey: {
 *             format: "PEM",
 *             key: Buffer.from(fs.readFileSync("test-fixtures/rsa_public.pem"), 'binary').toString('base64'),
 *         },
 *     },
 * }, {
 *     dependsOn: [authority],
 * });
 * ```
 * ```python
 * import pulumi
 * import base64
 * import pulumi_gcp as gcp
 * 
 * authority = gcp.certificateauthority.Authority("authority",
 *     pool="",
 *     certificate_authority_id="my-authority",
 *     location="us-central1",
 *     config=gcp.certificateauthority.AuthorityConfigArgs(
 *         subject_config=gcp.certificateauthority.AuthorityConfigSubjectConfigArgs(
 *             subject=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectArgs(
 *                 organization="HashiCorp",
 *                 common_name="my-certificate-authority",
 *             ),
 *             subject_alt_name=gcp.certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs(
 *                 dns_names=["hashicorp.com"],
 *             ),
 *         ),
 *         x509_config=gcp.certificateauthority.AuthorityConfigX509ConfigArgs(
 *             ca_options=gcp.certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs(
 *                 is_ca=True,
 *             ),
 *             key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs(
 *                 base_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs(
 *                     digital_signature=True,
 *                     cert_sign=True,
 *                     crl_sign=True,
 *                 ),
 *                 extended_key_usage=gcp.certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs(
 *                     server_auth=True,
 *                 ),
 *             ),
 *         ),
 *     ),
 *     lifetime="86400s",
 *     key_spec=gcp.certificateauthority.AuthorityKeySpecArgs(
 *         algorithm="RSA_PKCS1_4096_SHA256",
 *     ))
 * default = gcp.certificateauthority.Certificate("default",
 *     pool="",
 *     location="us-central1",
 *     lifetime="860s",
 *     config=gcp.certificateauthority.CertificateConfigArgs(
 *         subject_config=gcp.certificateauthority.CertificateConfigSubjectConfigArgs(
 *             subject=gcp.certificateauthority.CertificateConfigSubjectConfigSubjectArgs(
 *                 common_name="san1.example.com",
 *                 country_code="us",
 *                 organization="google",
 *                 organizational_unit="enterprise",
 *                 locality="mountain view",
 *                 province="california",
 *                 street_address="1600 amphitheatre parkway",
 *                 postal_code="94109",
 *             ),
 *         ),
 *         x509_config=gcp.certificateauthority.CertificateConfigX509ConfigArgs(
 *             ca_options=gcp.certificateauthority.CertificateConfigX509ConfigCaOptionsArgs(
 *                 is_ca=False,
 *             ),
 *             key_usage=gcp.certificateauthority.CertificateConfigX509ConfigKeyUsageArgs(
 *                 base_key_usage=gcp.certificateauthority.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs(
 *                     crl_sign=True,
 *                 ),
 *                 extended_key_usage=gcp.certificateauthority.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs(
 *                     server_auth=True,
 *                 ),
 *             ),
 *         ),
 *         public_key=gcp.certificateauthority.CertificateConfigPublicKeyArgs(
 *             format="PEM",
 *             key=(lambda path: base64.b64encode(open(path).read().encode()).decode())("test-fixtures/rsa_public.pem"),
 *         ),
 *     ),
 *     opts=pulumi.ResourceOptions(depends_on=[authority]))
 * ```
 * ```csharp
 * using System;
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 * 	private static string ReadFileBase64(string path) {
 * 		return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)))
 * 	}
 * 
 *     public MyStack()
 *     {
 *         var authority = new Gcp.CertificateAuthority.Authority("authority", new Gcp.CertificateAuthority.AuthorityArgs
 *         {
 *             Pool = "",
 *             CertificateAuthorityId = "my-authority",
 *             Location = "us-central1",
 *             Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
 *             {
 *                 SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
 *                 {
 *                     Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
 *                     {
 *                         Organization = "HashiCorp",
 *                         CommonName = "my-certificate-authority",
 *                     },
 *                     SubjectAltName = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectAltNameArgs
 *                     {
 *                         DnsNames = 
 *                         {
 *                             "hashicorp.com",
 *                         },
 *                     },
 *                 },
 *                 X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
 *                 {
 *                     CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
 *                     {
 *                         IsCa = true,
 *                     },
 *                     KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
 *                     {
 *                         BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
 *                         {
 *                             DigitalSignature = true,
 *                             CertSign = true,
 *                             CrlSign = true,
 *                         },
 *                         ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
 *                         {
 *                             ServerAuth = true,
 *                         },
 *                     },
 *                 },
 *             },
 *             Lifetime = "86400s",
 *             KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
 *             {
 *                 Algorithm = "RSA_PKCS1_4096_SHA256",
 *             },
 *         });
 *         var @default = new Gcp.CertificateAuthority.Certificate("default", new Gcp.CertificateAuthority.CertificateArgs
 *         {
 *             Pool = "",
 *             Location = "us-central1",
 *             Lifetime = "860s",
 *             Config = new Gcp.CertificateAuthority.Inputs.CertificateConfigArgs
 *             {
 *                 SubjectConfig = new Gcp.CertificateAuthority.Inputs.CertificateConfigSubjectConfigArgs
 *                 {
 *                     Subject = new Gcp.CertificateAuthority.Inputs.CertificateConfigSubjectConfigSubjectArgs
 *                     {
 *                         CommonName = "san1.example.com",
 *                         CountryCode = "us",
 *                         Organization = "google",
 *                         OrganizationalUnit = "enterprise",
 *                         Locality = "mountain view",
 *                         Province = "california",
 *                         StreetAddress = "1600 amphitheatre parkway",
 *                         PostalCode = "94109",
 *                     },
 *                 },
 *                 X509Config = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigArgs
 *                 {
 *                     CaOptions = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigCaOptionsArgs
 *                     {
 *                         IsCa = false,
 *                     },
 *                     KeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigKeyUsageArgs
 *                     {
 *                         BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs
 *                         {
 *                             CrlSign = true,
 *                         },
 *                         ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs
 *                         {
 *                             ServerAuth = true,
 *                         },
 *                     },
 *                 },
 *                 PublicKey = new Gcp.CertificateAuthority.Inputs.CertificateConfigPublicKeyArgs
 *                 {
 *                     Format = "PEM",
 *                     Key = ReadFileBase64("test-fixtures/rsa_public.pem"),
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 authority,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/base64"
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func filebase64OrPanic(path string) pulumi.StringPtrInput {
 * 	if fileData, err := ioutil.ReadFile(path); err == nil {
 * 		return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
 * 	} else {
 * 		panic(err.Error())
 * 	}
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		authority, err := certificateauthority.NewAuthority(ctx, "authority", &certificateauthority.AuthorityArgs{
 * 			Pool:                   pulumi.String(""),
 * 			CertificateAuthorityId: pulumi.String("my-authority"),
 * 			Location:               pulumi.String("us-central1"),
 * 			Config: &certificateauthority.AuthorityConfigArgs{
 * 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
 * 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
 * 						Organization: pulumi.String("HashiCorp"),
 * 						CommonName:   pulumi.String("my-certificate-authority"),
 * 					},
 * 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
 * 						DnsNames: pulumi.StringArray{
 * 							pulumi.String("hashicorp.com"),
 * 						},
 * 					},
 * 				},
 * 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
 * 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
 * 						IsCa: pulumi.Bool(true),
 * 					},
 * 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
 * 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
 * 							DigitalSignature: pulumi.Bool(true),
 * 							CertSign:         pulumi.Bool(true),
 * 							CrlSign:          pulumi.Bool(true),
 * 						},
 * 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
 * 							ServerAuth: pulumi.Bool(true),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Lifetime: pulumi.String("86400s"),
 * 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
 * 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = certificateauthority.NewCertificate(ctx, "default", &certificateauthority.CertificateArgs{
 * 			Pool:     pulumi.String(""),
 * 			Location: pulumi.String("us-central1"),
 * 			Lifetime: pulumi.String("860s"),
 * 			Config: &certificateauthority.CertificateConfigArgs{
 * 				SubjectConfig: &certificateauthority.CertificateConfigSubjectConfigArgs{
 * 					Subject: &certificateauthority.CertificateConfigSubjectConfigSubjectArgs{
 * 						CommonName:         pulumi.String("san1.example.com"),
 * 						CountryCode:        pulumi.String("us"),
 * 						Organization:       pulumi.String("google"),
 * 						OrganizationalUnit: pulumi.String("enterprise"),
 * 						Locality:           pulumi.String("mountain view"),
 * 						Province:           pulumi.String("california"),
 * 						StreetAddress:      pulumi.String("1600 amphitheatre parkway"),
 * 						PostalCode:         pulumi.String("94109"),
 * 					},
 * 				},
 * 				X509Config: &certificateauthority.CertificateConfigX509ConfigArgs{
 * 					CaOptions: &certificateauthority.CertificateConfigX509ConfigCaOptionsArgs{
 * 						IsCa: pulumi.Bool(false),
 * 					},
 * 					KeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageArgs{
 * 						BaseKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs{
 * 							CrlSign: pulumi.Bool(true),
 * 						},
 * 						ExtendedKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
 * 							ServerAuth: pulumi.Bool(true),
 * 						},
 * 					},
 * 				},
 * 				PublicKey: &certificateauthority.CertificateConfigPublicKeyArgs{
 * 					Format: pulumi.String("PEM"),
 * 					Key:    filebase64OrPanic("test-fixtures/rsa_public.pem"),
 * 				},
 * 			},
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			authority,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Certificate can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:certificateauthority/certificate:Certificate default projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificates/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{project}}/{{location}}/{{pool}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{location}}/{{pool}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:certificateauthority/certificate:Certificate")
public class Certificate extends io.pulumi.resources.CustomResource {
    /**
     * Certificate Authority name.
     * 
     */
    @Export(name="certificateAuthority", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateAuthority;

    /**
     * @return Certificate Authority name.
     * 
     */
    public Output</* @Nullable */ String> getCertificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     * 
     */
    @Export(name="certificateDescriptions", type=List.class, parameters={CertificateCertificateDescription.class})
    private Output<List<CertificateCertificateDescription>> certificateDescriptions;

    /**
     * @return Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     * 
     */
    public Output<List<CertificateCertificateDescription>> getCertificateDescriptions() {
        return this.certificateDescriptions;
    }
    /**
     * The resource name for a CertificateTemplate used to issue this certificate,
     * in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified,
     * the caller must have the necessary permission to use this template. If this is
     * omitted, no template will be used. This template must be in the same location
     * as the Certificate.
     * 
     */
    @Export(name="certificateTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateTemplate;

    /**
     * @return The resource name for a CertificateTemplate used to issue this certificate,
     * in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified,
     * the caller must have the necessary permission to use this template. If this is
     * omitted, no template will be used. This template must be in the same location
     * as the Certificate.
     * 
     */
    public Output</* @Nullable */ String> getCertificateTemplate() {
        return this.certificateTemplate;
    }
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     * 
     */
    @Export(name="config", type=CertificateConfig.class, parameters={})
    private Output</* @Nullable */ CertificateConfig> config;

    /**
     * @return The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ CertificateConfig> getConfig() {
        return this.config;
    }
    /**
     * The time that this resource was created on the server. This is in RFC3339 text format.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time that this resource was created on the server. This is in RFC3339 text format.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * Labels with user-defined metadata to apply to this resource.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels with user-defined metadata to apply to this resource.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @Export(name="lifetime", type=String.class, parameters={})
    private Output</* @Nullable */ String> lifetime;

    /**
     * @return The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    public Output</* @Nullable */ String> getLifetime() {
        return this.lifetime;
    }
    /**
     * Location of the Certificate. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Location of the Certificate. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The name for this Certificate.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name for this Certificate.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Output only. The pem-encoded, signed X.509 certificate.
     * 
     */
    @Export(name="pemCertificate", type=String.class, parameters={})
    private Output<String> pemCertificate;

    /**
     * @return Output only. The pem-encoded, signed X.509 certificate.
     * 
     */
    public Output<String> getPemCertificate() {
        return this.pemCertificate;
    }
    /**
     * Required. Expected to be in leaf-to-root order according to RFC 5246.
     * 
     */
    @Export(name="pemCertificates", type=List.class, parameters={String.class})
    private Output<List<String>> pemCertificates;

    /**
     * @return Required. Expected to be in leaf-to-root order according to RFC 5246.
     * 
     */
    public Output<List<String>> getPemCertificates() {
        return this.pemCertificates;
    }
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    @Export(name="pemCsr", type=String.class, parameters={})
    private Output</* @Nullable */ String> pemCsr;

    /**
     * @return Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    public Output</* @Nullable */ String> getPemCsr() {
        return this.pemCsr;
    }
    /**
     * The name of the CaPool this Certificate belongs to.
     * 
     */
    @Export(name="pool", type=String.class, parameters={})
    private Output<String> pool;

    /**
     * @return The name of the CaPool this Certificate belongs to.
     * 
     */
    public Output<String> getPool() {
        return this.pool;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     * 
     */
    @Export(name="revocationDetails", type=List.class, parameters={CertificateRevocationDetail.class})
    private Output<List<CertificateRevocationDetail>> revocationDetails;

    /**
     * @return Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
     * this field is present.
     * 
     */
    public Output<List<CertificateRevocationDetail>> getRevocationDetails() {
        return this.revocationDetails;
    }
    /**
     * Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Certificate(String name) {
        this(name, CertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Certificate(String name, CertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certificate(String name, CertificateArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:certificateauthority/certificate:Certificate", name, args == null ? CertificateArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Certificate(String name, Output<String> id, @Nullable CertificateState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:certificateauthority/certificate:Certificate", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certificate get(String name, Output<String> id, @Nullable CertificateState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Certificate(name, id, state, options);
    }
}
