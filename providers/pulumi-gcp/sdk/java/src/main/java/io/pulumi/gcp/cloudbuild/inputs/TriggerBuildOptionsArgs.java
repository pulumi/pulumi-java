// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.cloudbuild.inputs.TriggerBuildOptionsVolumeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerBuildOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerBuildOptionsArgs Empty = new TriggerBuildOptionsArgs();

    /**
     * Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
     * some of the space will be used by the operating system and build utilities.
     * Also note that this is the minimum disk size that will be allocated for the build --
     * the build may run with a larger disk than requested. At present, the maximum disk size
     * is 1000GB; builds that request more than the maximum are rejected with an error.
     * 
     */
    @InputImport(name="diskSizeGb")
      private final @Nullable Output<Integer> diskSizeGb;

    public Output<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Output.empty() : this.diskSizeGb;
    }

    /**
     * Option to specify whether or not to apply bash style string operations to the substitutions.
     * NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    @InputImport(name="dynamicSubstitutions")
      private final @Nullable Output<Boolean> dynamicSubstitutions;

    public Output<Boolean> getDynamicSubstitutions() {
        return this.dynamicSubstitutions == null ? Output.empty() : this.dynamicSubstitutions;
    }

    /**
     * A list of global environment variable definitions that will exist for all build steps
     * in this build. If a variable is defined in both globally and in a build step,
     * the variable will use the build step value.
     * The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     * 
     */
    @InputImport(name="envs")
      private final @Nullable Output<List<String>> envs;

    public Output<List<String>> getEnvs() {
        return this.envs == null ? Output.empty() : this.envs;
    }

    /**
     * Option to define build log streaming behavior to Google Cloud Storage.
     * Possible values are `STREAM_DEFAULT`, `STREAM_ON`, and `STREAM_OFF`.
     * 
     */
    @InputImport(name="logStreamingOption")
      private final @Nullable Output<String> logStreamingOption;

    public Output<String> getLogStreamingOption() {
        return this.logStreamingOption == null ? Output.empty() : this.logStreamingOption;
    }

    /**
     * Option to specify the logging mode, which determines if and where build logs are stored.
     * Possible values are `LOGGING_UNSPECIFIED`, `LEGACY`, `GCS_ONLY`, `STACKDRIVER_ONLY`, and `NONE`.
     * 
     */
    @InputImport(name="logging")
      private final @Nullable Output<String> logging;

    public Output<String> getLogging() {
        return this.logging == null ? Output.empty() : this.logging;
    }

    /**
     * Compute Engine machine type on which to run the build.
     * Possible values are `UNSPECIFIED`, `N1_HIGHCPU_8`, `N1_HIGHCPU_32`, `E2_HIGHCPU_8`, and `E2_HIGHCPU_32`.
     * 
     */
    @InputImport(name="machineType")
      private final @Nullable Output<String> machineType;

    public Output<String> getMachineType() {
        return this.machineType == null ? Output.empty() : this.machineType;
    }

    /**
     * Requested verifiability options.
     * Possible values are `NOT_VERIFIED` and `VERIFIED`.
     * 
     */
    @InputImport(name="requestedVerifyOption")
      private final @Nullable Output<String> requestedVerifyOption;

    public Output<String> getRequestedVerifyOption() {
        return this.requestedVerifyOption == null ? Output.empty() : this.requestedVerifyOption;
    }

    /**
     * A list of global environment variables, which are encrypted using a Cloud Key Management
     * Service crypto key. These values must be specified in the build's Secret. These variables
     * will be available to all build steps in this build.
     * 
     */
    @InputImport(name="secretEnvs")
      private final @Nullable Output<List<String>> secretEnvs;

    public Output<List<String>> getSecretEnvs() {
        return this.secretEnvs == null ? Output.empty() : this.secretEnvs;
    }

    /**
     * Requested hash for SourceProvenance.
     * Each value may be one of `NONE`, `SHA256`, and `MD5`.
     * 
     */
    @InputImport(name="sourceProvenanceHashes")
      private final @Nullable Output<List<String>> sourceProvenanceHashes;

    public Output<List<String>> getSourceProvenanceHashes() {
        return this.sourceProvenanceHashes == null ? Output.empty() : this.sourceProvenanceHashes;
    }

    /**
     * Option to specify behavior when there is an error in the substitution checks.
     * NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
     * in the build configuration file.
     * Possible values are `MUST_MATCH` and `ALLOW_LOOSE`.
     * 
     */
    @InputImport(name="substitutionOption")
      private final @Nullable Output<String> substitutionOption;

    public Output<String> getSubstitutionOption() {
        return this.substitutionOption == null ? Output.empty() : this.substitutionOption;
    }

    /**
     * Global list of volumes to mount for ALL build steps
     * Each volume is created as an empty volume prior to starting the build process.
     * Upon completion of the build, volumes and their contents are discarded. Global
     * volume names and paths cannot conflict with the volumes defined a build step.
     * Using a global volume in a build with only one step is not valid as it is indicative
     * of a build request with an incorrect configuration.
     * Structure is documented below.
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Output<List<TriggerBuildOptionsVolumeArgs>> volumes;

    public Output<List<TriggerBuildOptionsVolumeArgs>> getVolumes() {
        return this.volumes == null ? Output.empty() : this.volumes;
    }

    /**
     * Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
     * This field is experimental.
     * 
     */
    @InputImport(name="workerPool")
      private final @Nullable Output<String> workerPool;

    public Output<String> getWorkerPool() {
        return this.workerPool == null ? Output.empty() : this.workerPool;
    }

    public TriggerBuildOptionsArgs(
        @Nullable Output<Integer> diskSizeGb,
        @Nullable Output<Boolean> dynamicSubstitutions,
        @Nullable Output<List<String>> envs,
        @Nullable Output<String> logStreamingOption,
        @Nullable Output<String> logging,
        @Nullable Output<String> machineType,
        @Nullable Output<String> requestedVerifyOption,
        @Nullable Output<List<String>> secretEnvs,
        @Nullable Output<List<String>> sourceProvenanceHashes,
        @Nullable Output<String> substitutionOption,
        @Nullable Output<List<TriggerBuildOptionsVolumeArgs>> volumes,
        @Nullable Output<String> workerPool) {
        this.diskSizeGb = diskSizeGb;
        this.dynamicSubstitutions = dynamicSubstitutions;
        this.envs = envs;
        this.logStreamingOption = logStreamingOption;
        this.logging = logging;
        this.machineType = machineType;
        this.requestedVerifyOption = requestedVerifyOption;
        this.secretEnvs = secretEnvs;
        this.sourceProvenanceHashes = sourceProvenanceHashes;
        this.substitutionOption = substitutionOption;
        this.volumes = volumes;
        this.workerPool = workerPool;
    }

    private TriggerBuildOptionsArgs() {
        this.diskSizeGb = Output.empty();
        this.dynamicSubstitutions = Output.empty();
        this.envs = Output.empty();
        this.logStreamingOption = Output.empty();
        this.logging = Output.empty();
        this.machineType = Output.empty();
        this.requestedVerifyOption = Output.empty();
        this.secretEnvs = Output.empty();
        this.sourceProvenanceHashes = Output.empty();
        this.substitutionOption = Output.empty();
        this.volumes = Output.empty();
        this.workerPool = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBuildOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> diskSizeGb;
        private @Nullable Output<Boolean> dynamicSubstitutions;
        private @Nullable Output<List<String>> envs;
        private @Nullable Output<String> logStreamingOption;
        private @Nullable Output<String> logging;
        private @Nullable Output<String> machineType;
        private @Nullable Output<String> requestedVerifyOption;
        private @Nullable Output<List<String>> secretEnvs;
        private @Nullable Output<List<String>> sourceProvenanceHashes;
        private @Nullable Output<String> substitutionOption;
        private @Nullable Output<List<TriggerBuildOptionsVolumeArgs>> volumes;
        private @Nullable Output<String> workerPool;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerBuildOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.dynamicSubstitutions = defaults.dynamicSubstitutions;
    	      this.envs = defaults.envs;
    	      this.logStreamingOption = defaults.logStreamingOption;
    	      this.logging = defaults.logging;
    	      this.machineType = defaults.machineType;
    	      this.requestedVerifyOption = defaults.requestedVerifyOption;
    	      this.secretEnvs = defaults.secretEnvs;
    	      this.sourceProvenanceHashes = defaults.sourceProvenanceHashes;
    	      this.substitutionOption = defaults.substitutionOption;
    	      this.volumes = defaults.volumes;
    	      this.workerPool = defaults.workerPool;
        }

        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Output.ofNullable(diskSizeGb);
            return this;
        }

        public Builder dynamicSubstitutions(@Nullable Output<Boolean> dynamicSubstitutions) {
            this.dynamicSubstitutions = dynamicSubstitutions;
            return this;
        }

        public Builder dynamicSubstitutions(@Nullable Boolean dynamicSubstitutions) {
            this.dynamicSubstitutions = Output.ofNullable(dynamicSubstitutions);
            return this;
        }

        public Builder envs(@Nullable Output<List<String>> envs) {
            this.envs = envs;
            return this;
        }

        public Builder envs(@Nullable List<String> envs) {
            this.envs = Output.ofNullable(envs);
            return this;
        }

        public Builder logStreamingOption(@Nullable Output<String> logStreamingOption) {
            this.logStreamingOption = logStreamingOption;
            return this;
        }

        public Builder logStreamingOption(@Nullable String logStreamingOption) {
            this.logStreamingOption = Output.ofNullable(logStreamingOption);
            return this;
        }

        public Builder logging(@Nullable Output<String> logging) {
            this.logging = logging;
            return this;
        }

        public Builder logging(@Nullable String logging) {
            this.logging = Output.ofNullable(logging);
            return this;
        }

        public Builder machineType(@Nullable Output<String> machineType) {
            this.machineType = machineType;
            return this;
        }

        public Builder machineType(@Nullable String machineType) {
            this.machineType = Output.ofNullable(machineType);
            return this;
        }

        public Builder requestedVerifyOption(@Nullable Output<String> requestedVerifyOption) {
            this.requestedVerifyOption = requestedVerifyOption;
            return this;
        }

        public Builder requestedVerifyOption(@Nullable String requestedVerifyOption) {
            this.requestedVerifyOption = Output.ofNullable(requestedVerifyOption);
            return this;
        }

        public Builder secretEnvs(@Nullable Output<List<String>> secretEnvs) {
            this.secretEnvs = secretEnvs;
            return this;
        }

        public Builder secretEnvs(@Nullable List<String> secretEnvs) {
            this.secretEnvs = Output.ofNullable(secretEnvs);
            return this;
        }

        public Builder sourceProvenanceHashes(@Nullable Output<List<String>> sourceProvenanceHashes) {
            this.sourceProvenanceHashes = sourceProvenanceHashes;
            return this;
        }

        public Builder sourceProvenanceHashes(@Nullable List<String> sourceProvenanceHashes) {
            this.sourceProvenanceHashes = Output.ofNullable(sourceProvenanceHashes);
            return this;
        }

        public Builder substitutionOption(@Nullable Output<String> substitutionOption) {
            this.substitutionOption = substitutionOption;
            return this;
        }

        public Builder substitutionOption(@Nullable String substitutionOption) {
            this.substitutionOption = Output.ofNullable(substitutionOption);
            return this;
        }

        public Builder volumes(@Nullable Output<List<TriggerBuildOptionsVolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder volumes(@Nullable List<TriggerBuildOptionsVolumeArgs> volumes) {
            this.volumes = Output.ofNullable(volumes);
            return this;
        }

        public Builder workerPool(@Nullable Output<String> workerPool) {
            this.workerPool = workerPool;
            return this;
        }

        public Builder workerPool(@Nullable String workerPool) {
            this.workerPool = Output.ofNullable(workerPool);
            return this;
        }
        public TriggerBuildOptionsArgs build() {
            return new TriggerBuildOptionsArgs(diskSizeGb, dynamicSubstitutions, envs, logStreamingOption, logging, machineType, requestedVerifyOption, secretEnvs, sourceProvenanceHashes, substitutionOption, volumes, workerPool);
        }
    }
}
