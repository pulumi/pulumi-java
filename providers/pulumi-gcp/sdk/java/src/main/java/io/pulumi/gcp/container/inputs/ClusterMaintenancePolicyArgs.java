// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.container.inputs.ClusterMaintenancePolicyDailyMaintenanceWindowArgs;
import io.pulumi.gcp.container.inputs.ClusterMaintenancePolicyMaintenanceExclusionArgs;
import io.pulumi.gcp.container.inputs.ClusterMaintenancePolicyRecurringWindowArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterMaintenancePolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterMaintenancePolicyArgs Empty = new ClusterMaintenancePolicyArgs();

    /**
     * Time window specified for daily maintenance operations.
     * Specify `start_time` in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM‚Äù,
     * where HH : \[00-23\] and MM : \[00-59\] GMT. For example:
     * 
     */
    @InputImport(name="dailyMaintenanceWindow")
      private final @Nullable Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> dailyMaintenanceWindow;

    public Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> getDailyMaintenanceWindow() {
        return this.dailyMaintenanceWindow == null ? Output.empty() : this.dailyMaintenanceWindow;
    }

    /**
     * Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows. A cluster can have up to three maintenance exclusions at a time [Maintenance Window and Exclusions](https://cloud.google.com/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions)
     * 
     */
    @InputImport(name="maintenanceExclusions")
      private final @Nullable Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> maintenanceExclusions;

    public Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> getMaintenanceExclusions() {
        return this.maintenanceExclusions == null ? Output.empty() : this.maintenanceExclusions;
    }

    /**
     * Time window for recurring maintenance operations.
     * 
     */
    @InputImport(name="recurringWindow")
      private final @Nullable Output<ClusterMaintenancePolicyRecurringWindowArgs> recurringWindow;

    public Output<ClusterMaintenancePolicyRecurringWindowArgs> getRecurringWindow() {
        return this.recurringWindow == null ? Output.empty() : this.recurringWindow;
    }

    public ClusterMaintenancePolicyArgs(
        @Nullable Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> dailyMaintenanceWindow,
        @Nullable Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> maintenanceExclusions,
        @Nullable Output<ClusterMaintenancePolicyRecurringWindowArgs> recurringWindow) {
        this.dailyMaintenanceWindow = dailyMaintenanceWindow;
        this.maintenanceExclusions = maintenanceExclusions;
        this.recurringWindow = recurringWindow;
    }

    private ClusterMaintenancePolicyArgs() {
        this.dailyMaintenanceWindow = Output.empty();
        this.maintenanceExclusions = Output.empty();
        this.recurringWindow = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterMaintenancePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> dailyMaintenanceWindow;
        private @Nullable Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> maintenanceExclusions;
        private @Nullable Output<ClusterMaintenancePolicyRecurringWindowArgs> recurringWindow;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterMaintenancePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dailyMaintenanceWindow = defaults.dailyMaintenanceWindow;
    	      this.maintenanceExclusions = defaults.maintenanceExclusions;
    	      this.recurringWindow = defaults.recurringWindow;
        }

        public Builder dailyMaintenanceWindow(@Nullable Output<ClusterMaintenancePolicyDailyMaintenanceWindowArgs> dailyMaintenanceWindow) {
            this.dailyMaintenanceWindow = dailyMaintenanceWindow;
            return this;
        }

        public Builder dailyMaintenanceWindow(@Nullable ClusterMaintenancePolicyDailyMaintenanceWindowArgs dailyMaintenanceWindow) {
            this.dailyMaintenanceWindow = Output.ofNullable(dailyMaintenanceWindow);
            return this;
        }

        public Builder maintenanceExclusions(@Nullable Output<List<ClusterMaintenancePolicyMaintenanceExclusionArgs>> maintenanceExclusions) {
            this.maintenanceExclusions = maintenanceExclusions;
            return this;
        }

        public Builder maintenanceExclusions(@Nullable List<ClusterMaintenancePolicyMaintenanceExclusionArgs> maintenanceExclusions) {
            this.maintenanceExclusions = Output.ofNullable(maintenanceExclusions);
            return this;
        }

        public Builder recurringWindow(@Nullable Output<ClusterMaintenancePolicyRecurringWindowArgs> recurringWindow) {
            this.recurringWindow = recurringWindow;
            return this;
        }

        public Builder recurringWindow(@Nullable ClusterMaintenancePolicyRecurringWindowArgs recurringWindow) {
            this.recurringWindow = Output.ofNullable(recurringWindow);
            return this;
        }
        public ClusterMaintenancePolicyArgs build() {
            return new ClusterMaintenancePolicyArgs(dailyMaintenanceWindow, maintenanceExclusions, recurringWindow);
        }
    }
}
