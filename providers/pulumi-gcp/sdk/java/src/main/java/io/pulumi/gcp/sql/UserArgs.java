// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    @InputImport(name="deletionPolicy")
    private final @Nullable Input<String> deletionPolicy;

    public Input<String> getDeletionPolicy() {
        return this.deletionPolicy == null ? Input.empty() : this.deletionPolicy;
    }

    @InputImport(name="host")
    private final @Nullable Input<String> host;

    public Input<String> getHost() {
        return this.host == null ? Input.empty() : this.host;
    }

    @InputImport(name="instance", required=true)
    private final Input<String> instance;

    public Input<String> getInstance() {
        return this.instance;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="password")
    private final @Nullable Input<String> password;

    public Input<String> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public UserArgs(
        @Nullable Input<String> deletionPolicy,
        @Nullable Input<String> host,
        Input<String> instance,
        @Nullable Input<String> name,
        @Nullable Input<String> password,
        @Nullable Input<String> project,
        @Nullable Input<String> type) {
        this.deletionPolicy = deletionPolicy;
        this.host = host;
        this.instance = Objects.requireNonNull(instance, "expected parameter 'instance' to be non-null");
        this.name = name;
        this.password = password;
        this.project = project;
        this.type = type;
    }

    private UserArgs() {
        this.deletionPolicy = Input.empty();
        this.host = Input.empty();
        this.instance = Input.empty();
        this.name = Input.empty();
        this.password = Input.empty();
        this.project = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> deletionPolicy;
        private @Nullable Input<String> host;
        private Input<String> instance;
        private @Nullable Input<String> name;
        private @Nullable Input<String> password;
        private @Nullable Input<String> project;
        private @Nullable Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(UserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deletionPolicy = defaults.deletionPolicy;
    	      this.host = defaults.host;
    	      this.instance = defaults.instance;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.project = defaults.project;
    	      this.type = defaults.type;
        }

        public Builder setDeletionPolicy(@Nullable Input<String> deletionPolicy) {
            this.deletionPolicy = deletionPolicy;
            return this;
        }

        public Builder setDeletionPolicy(@Nullable String deletionPolicy) {
            this.deletionPolicy = Input.ofNullable(deletionPolicy);
            return this;
        }

        public Builder setHost(@Nullable Input<String> host) {
            this.host = host;
            return this;
        }

        public Builder setHost(@Nullable String host) {
            this.host = Input.ofNullable(host);
            return this;
        }

        public Builder setInstance(Input<String> instance) {
            this.instance = Objects.requireNonNull(instance);
            return this;
        }

        public Builder setInstance(String instance) {
            this.instance = Input.of(Objects.requireNonNull(instance));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPassword(@Nullable Input<String> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public UserArgs build() {
            return new UserArgs(deletionPolicy, host, instance, name, password, project, type);
        }
    }
}
