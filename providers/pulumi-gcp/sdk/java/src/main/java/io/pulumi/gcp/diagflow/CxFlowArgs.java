// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerArgs;
import io.pulumi.gcp.diagflow.inputs.CxFlowNluSettingsArgs;
import io.pulumi.gcp.diagflow.inputs.CxFlowTransitionRouteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxFlowArgs extends io.pulumi.resources.ResourceArgs {

    public static final CxFlowArgs Empty = new CxFlowArgs();

    /**
     * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The human-readable name of the flow.
     * 
     */
    @InputImport(name="displayName", required=true)
      private final Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * A flow's event handlers serve two purposes:
     * They are responsible for handling events (e.g. no match, webhook errors) in the flow.
     * They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
     * Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
     * Structure is documented below.
     * 
     */
    @InputImport(name="eventHandlers")
      private final @Nullable Input<List<CxFlowEventHandlerArgs>> eventHandlers;

    public Input<List<CxFlowEventHandlerArgs>> getEventHandlers() {
        return this.eventHandlers == null ? Input.empty() : this.eventHandlers;
    }

    /**
     * The language of the following fields in flow:
     * Flow.event_handlers.trigger_fulfillment.messages
     * Flow.event_handlers.trigger_fulfillment.conditional_cases
     * Flow.transition_routes.trigger_fulfillment.messages
     * Flow.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @InputImport(name="languageCode")
      private final @Nullable Input<String> languageCode;

    public Input<String> getLanguageCode() {
        return this.languageCode == null ? Input.empty() : this.languageCode;
    }

    /**
     * NLU related settings of the flow.
     * Structure is documented below.
     * 
     */
    @InputImport(name="nluSettings")
      private final @Nullable Input<CxFlowNluSettingsArgs> nluSettings;

    public Input<CxFlowNluSettingsArgs> getNluSettings() {
        return this.nluSettings == null ? Input.empty() : this.nluSettings;
    }

    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     * 
     */
    @InputImport(name="parent")
      private final @Nullable Input<String> parent;

    public Input<String> getParent() {
        return this.parent == null ? Input.empty() : this.parent;
    }

    /**
     * A flow's transition route group serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     * 
     */
    @InputImport(name="transitionRouteGroups")
      private final @Nullable Input<List<String>> transitionRouteGroups;

    public Input<List<String>> getTransitionRouteGroups() {
        return this.transitionRouteGroups == null ? Input.empty() : this.transitionRouteGroups;
    }

    /**
     * A flow's transition routes serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
     * 
     */
    @InputImport(name="transitionRoutes")
      private final @Nullable Input<List<CxFlowTransitionRouteArgs>> transitionRoutes;

    public Input<List<CxFlowTransitionRouteArgs>> getTransitionRoutes() {
        return this.transitionRoutes == null ? Input.empty() : this.transitionRoutes;
    }

    public CxFlowArgs(
        @Nullable Input<String> description,
        Input<String> displayName,
        @Nullable Input<List<CxFlowEventHandlerArgs>> eventHandlers,
        @Nullable Input<String> languageCode,
        @Nullable Input<CxFlowNluSettingsArgs> nluSettings,
        @Nullable Input<String> parent,
        @Nullable Input<List<String>> transitionRouteGroups,
        @Nullable Input<List<CxFlowTransitionRouteArgs>> transitionRoutes) {
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.eventHandlers = eventHandlers;
        this.languageCode = languageCode;
        this.nluSettings = nluSettings;
        this.parent = parent;
        this.transitionRouteGroups = transitionRouteGroups;
        this.transitionRoutes = transitionRoutes;
    }

    private CxFlowArgs() {
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.eventHandlers = Input.empty();
        this.languageCode = Input.empty();
        this.nluSettings = Input.empty();
        this.parent = Input.empty();
        this.transitionRouteGroups = Input.empty();
        this.transitionRoutes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private Input<String> displayName;
        private @Nullable Input<List<CxFlowEventHandlerArgs>> eventHandlers;
        private @Nullable Input<String> languageCode;
        private @Nullable Input<CxFlowNluSettingsArgs> nluSettings;
        private @Nullable Input<String> parent;
        private @Nullable Input<List<String>> transitionRouteGroups;
        private @Nullable Input<List<CxFlowTransitionRouteArgs>> transitionRoutes;

        public Builder() {
    	      // Empty
        }

        public Builder(CxFlowArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.eventHandlers = defaults.eventHandlers;
    	      this.languageCode = defaults.languageCode;
    	      this.nluSettings = defaults.nluSettings;
    	      this.parent = defaults.parent;
    	      this.transitionRouteGroups = defaults.transitionRouteGroups;
    	      this.transitionRoutes = defaults.transitionRoutes;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(Input<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Input.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder setEventHandlers(@Nullable Input<List<CxFlowEventHandlerArgs>> eventHandlers) {
            this.eventHandlers = eventHandlers;
            return this;
        }

        public Builder setEventHandlers(@Nullable List<CxFlowEventHandlerArgs> eventHandlers) {
            this.eventHandlers = Input.ofNullable(eventHandlers);
            return this;
        }

        public Builder setLanguageCode(@Nullable Input<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder setLanguageCode(@Nullable String languageCode) {
            this.languageCode = Input.ofNullable(languageCode);
            return this;
        }

        public Builder setNluSettings(@Nullable Input<CxFlowNluSettingsArgs> nluSettings) {
            this.nluSettings = nluSettings;
            return this;
        }

        public Builder setNluSettings(@Nullable CxFlowNluSettingsArgs nluSettings) {
            this.nluSettings = Input.ofNullable(nluSettings);
            return this;
        }

        public Builder setParent(@Nullable Input<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder setParent(@Nullable String parent) {
            this.parent = Input.ofNullable(parent);
            return this;
        }

        public Builder setTransitionRouteGroups(@Nullable Input<List<String>> transitionRouteGroups) {
            this.transitionRouteGroups = transitionRouteGroups;
            return this;
        }

        public Builder setTransitionRouteGroups(@Nullable List<String> transitionRouteGroups) {
            this.transitionRouteGroups = Input.ofNullable(transitionRouteGroups);
            return this;
        }

        public Builder setTransitionRoutes(@Nullable Input<List<CxFlowTransitionRouteArgs>> transitionRoutes) {
            this.transitionRoutes = transitionRoutes;
            return this;
        }

        public Builder setTransitionRoutes(@Nullable List<CxFlowTransitionRouteArgs> transitionRoutes) {
            this.transitionRoutes = Input.ofNullable(transitionRoutes);
            return this;
        }
        public CxFlowArgs build() {
            return new CxFlowArgs(description, displayName, eventHandlers, languageCode, nluSettings, parent, transitionRouteGroups, transitionRoutes);
        }
    }
}
