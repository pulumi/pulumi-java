// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetDatabaseInstanceIpAddress extends io.pulumi.resources.InvokeArgs {

    public static final GetDatabaseInstanceIpAddress Empty = new GetDatabaseInstanceIpAddress();

    @Import(name="ipAddress", required=true)
      private final String ipAddress;

    public String ipAddress() {
        return this.ipAddress;
    }

    @Import(name="timeToRetire", required=true)
      private final String timeToRetire;

    public String timeToRetire() {
        return this.timeToRetire;
    }

    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public GetDatabaseInstanceIpAddress(
        String ipAddress,
        String timeToRetire,
        String type) {
        this.ipAddress = Objects.requireNonNull(ipAddress, "expected parameter 'ipAddress' to be non-null");
        this.timeToRetire = Objects.requireNonNull(timeToRetire, "expected parameter 'timeToRetire' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private GetDatabaseInstanceIpAddress() {
        this.ipAddress = null;
        this.timeToRetire = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceIpAddress defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String ipAddress;
        private String timeToRetire;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseInstanceIpAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.timeToRetire = defaults.timeToRetire;
    	      this.type = defaults.type;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder timeToRetire(String timeToRetire) {
            this.timeToRetire = Objects.requireNonNull(timeToRetire);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetDatabaseInstanceIpAddress build() {
            return new GetDatabaseInstanceIpAddress(ipAddress, timeToRetire, type);
        }
    }
}
