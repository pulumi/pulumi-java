// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class URLMapPathMatcherRouteRuleUrlRedirect {
    private final @Nullable String hostRedirect;
    private final @Nullable Boolean httpsRedirect;
    private final @Nullable String pathRedirect;
    private final @Nullable String prefixRedirect;
    private final @Nullable String redirectResponseCode;
    private final @Nullable Boolean stripQuery;

    @OutputCustomType.Constructor({"hostRedirect","httpsRedirect","pathRedirect","prefixRedirect","redirectResponseCode","stripQuery"})
    private URLMapPathMatcherRouteRuleUrlRedirect(
        @Nullable String hostRedirect,
        @Nullable Boolean httpsRedirect,
        @Nullable String pathRedirect,
        @Nullable String prefixRedirect,
        @Nullable String redirectResponseCode,
        @Nullable Boolean stripQuery) {
        this.hostRedirect = hostRedirect;
        this.httpsRedirect = httpsRedirect;
        this.pathRedirect = pathRedirect;
        this.prefixRedirect = prefixRedirect;
        this.redirectResponseCode = redirectResponseCode;
        this.stripQuery = stripQuery;
    }

    public Optional<String> getHostRedirect() {
        return Optional.ofNullable(this.hostRedirect);
    }
    public Optional<Boolean> getHttpsRedirect() {
        return Optional.ofNullable(this.httpsRedirect);
    }
    public Optional<String> getPathRedirect() {
        return Optional.ofNullable(this.pathRedirect);
    }
    public Optional<String> getPrefixRedirect() {
        return Optional.ofNullable(this.prefixRedirect);
    }
    public Optional<String> getRedirectResponseCode() {
        return Optional.ofNullable(this.redirectResponseCode);
    }
    public Optional<Boolean> getStripQuery() {
        return Optional.ofNullable(this.stripQuery);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapPathMatcherRouteRuleUrlRedirect defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String hostRedirect;
        private @Nullable Boolean httpsRedirect;
        private @Nullable String pathRedirect;
        private @Nullable String prefixRedirect;
        private @Nullable String redirectResponseCode;
        private @Nullable Boolean stripQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(URLMapPathMatcherRouteRuleUrlRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostRedirect = defaults.hostRedirect;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.pathRedirect = defaults.pathRedirect;
    	      this.prefixRedirect = defaults.prefixRedirect;
    	      this.redirectResponseCode = defaults.redirectResponseCode;
    	      this.stripQuery = defaults.stripQuery;
        }

        public Builder setHostRedirect(@Nullable String hostRedirect) {
            this.hostRedirect = hostRedirect;
            return this;
        }

        public Builder setHttpsRedirect(@Nullable Boolean httpsRedirect) {
            this.httpsRedirect = httpsRedirect;
            return this;
        }

        public Builder setPathRedirect(@Nullable String pathRedirect) {
            this.pathRedirect = pathRedirect;
            return this;
        }

        public Builder setPrefixRedirect(@Nullable String prefixRedirect) {
            this.prefixRedirect = prefixRedirect;
            return this;
        }

        public Builder setRedirectResponseCode(@Nullable String redirectResponseCode) {
            this.redirectResponseCode = redirectResponseCode;
            return this;
        }

        public Builder setStripQuery(@Nullable Boolean stripQuery) {
            this.stripQuery = stripQuery;
            return this;
        }

        public URLMapPathMatcherRouteRuleUrlRedirect build() {
            return new URLMapPathMatcherRouteRuleUrlRedirect(hostRedirect, httpsRedirect, pathRedirect, prefixRedirect, redirectResponseCode, stripQuery);
        }
    }
}
