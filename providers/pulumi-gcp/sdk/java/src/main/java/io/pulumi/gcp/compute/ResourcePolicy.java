// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.ResourcePolicyArgs;
import io.pulumi.gcp.compute.inputs.ResourcePolicyState;
import io.pulumi.gcp.compute.outputs.ResourcePolicyGroupPlacementPolicy;
import io.pulumi.gcp.compute.outputs.ResourcePolicyInstanceSchedulePolicy;
import io.pulumi.gcp.compute.outputs.ResourcePolicySnapshotSchedulePolicy;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A policy that can be attached to a resource to specify or schedule actions on that resource.
 * 
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Resource Policy Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const foo = new gcp.compute.ResourcePolicy("foo", {
 *     region: "us-central1",
 *     snapshotSchedulePolicy: {
 *         schedule: {
 *             dailySchedule: {
 *                 daysInCycle: 1,
 *                 startTime: "04:00",
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * foo = gcp.compute.ResourcePolicy("foo",
 *     region="us-central1",
 *     snapshot_schedule_policy=gcp.compute.ResourcePolicySnapshotSchedulePolicyArgs(
 *         schedule=gcp.compute.ResourcePolicySnapshotSchedulePolicyScheduleArgs(
 *             daily_schedule=gcp.compute.ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs(
 *                 days_in_cycle=1,
 *                 start_time="04:00",
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var foo = new Gcp.Compute.ResourcePolicy("foo", new Gcp.Compute.ResourcePolicyArgs
 *         {
 *             Region = "us-central1",
 *             SnapshotSchedulePolicy = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyArgs
 *             {
 *                 Schedule = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyScheduleArgs
 *                 {
 *                     DailySchedule = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs
 *                     {
 *                         DaysInCycle = 1,
 *                         StartTime = "04:00",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewResourcePolicy(ctx, "foo", &compute.ResourcePolicyArgs{
 * 			Region: pulumi.String("us-central1"),
 * 			SnapshotSchedulePolicy: &compute.ResourcePolicySnapshotSchedulePolicyArgs{
 * 				Schedule: &compute.ResourcePolicySnapshotSchedulePolicyScheduleArgs{
 * 					DailySchedule: &compute.ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs{
 * 						DaysInCycle: pulumi.Int(1),
 * 						StartTime:   pulumi.String("04:00"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Resource Policy Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const bar = new gcp.compute.ResourcePolicy("bar", {
 *     region: "us-central1",
 *     snapshotSchedulePolicy: {
 *         retentionPolicy: {
 *             maxRetentionDays: 10,
 *             onSourceDiskDelete: "KEEP_AUTO_SNAPSHOTS",
 *         },
 *         schedule: {
 *             hourlySchedule: {
 *                 hoursInCycle: 20,
 *                 startTime: "23:00",
 *             },
 *         },
 *         snapshotProperties: {
 *             guestFlush: true,
 *             labels: {
 *                 my_label: "value",
 *             },
 *             storageLocations: "us",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * bar = gcp.compute.ResourcePolicy("bar",
 *     region="us-central1",
 *     snapshot_schedule_policy=gcp.compute.ResourcePolicySnapshotSchedulePolicyArgs(
 *         retention_policy=gcp.compute.ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs(
 *             max_retention_days=10,
 *             on_source_disk_delete="KEEP_AUTO_SNAPSHOTS",
 *         ),
 *         schedule=gcp.compute.ResourcePolicySnapshotSchedulePolicyScheduleArgs(
 *             hourly_schedule=gcp.compute.ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs(
 *                 hours_in_cycle=20,
 *                 start_time="23:00",
 *             ),
 *         ),
 *         snapshot_properties=gcp.compute.ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs(
 *             guest_flush=True,
 *             labels={
 *                 "myLabel": "value",
 *             },
 *             storage_locations="us",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bar = new Gcp.Compute.ResourcePolicy("bar", new Gcp.Compute.ResourcePolicyArgs
 *         {
 *             Region = "us-central1",
 *             SnapshotSchedulePolicy = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyArgs
 *             {
 *                 RetentionPolicy = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs
 *                 {
 *                     MaxRetentionDays = 10,
 *                     OnSourceDiskDelete = "KEEP_AUTO_SNAPSHOTS",
 *                 },
 *                 Schedule = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyScheduleArgs
 *                 {
 *                     HourlySchedule = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs
 *                     {
 *                         HoursInCycle = 20,
 *                         StartTime = "23:00",
 *                     },
 *                 },
 *                 SnapshotProperties = new Gcp.Compute.Inputs.ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs
 *                 {
 *                     GuestFlush = true,
 *                     Labels = 
 *                     {
 *                         { "myLabel", "value" },
 *                     },
 *                     StorageLocations = "us",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewResourcePolicy(ctx, "bar", &compute.ResourcePolicyArgs{
 * 			Region: pulumi.String("us-central1"),
 * 			SnapshotSchedulePolicy: &compute.ResourcePolicySnapshotSchedulePolicyArgs{
 * 				RetentionPolicy: &compute.ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs{
 * 					MaxRetentionDays:   pulumi.Int(10),
 * 					OnSourceDiskDelete: pulumi.String("KEEP_AUTO_SNAPSHOTS"),
 * 				},
 * 				Schedule: &compute.ResourcePolicySnapshotSchedulePolicyScheduleArgs{
 * 					HourlySchedule: &compute.ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs{
 * 						HoursInCycle: pulumi.Int(20),
 * 						StartTime:    pulumi.String("23:00"),
 * 					},
 * 				},
 * 				SnapshotProperties: &compute.ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs{
 * 					GuestFlush: pulumi.Bool(true),
 * 					Labels: pulumi.StringMap{
 * 						"myLabel": pulumi.String("value"),
 * 					},
 * 					StorageLocations: pulumi.String("us"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Resource Policy Placement Policy
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const baz = new gcp.compute.ResourcePolicy("baz", {
 *     groupPlacementPolicy: {
 *         collocation: "COLLOCATED",
 *         vmCount: 2,
 *     },
 *     region: "us-central1",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * baz = gcp.compute.ResourcePolicy("baz",
 *     group_placement_policy=gcp.compute.ResourcePolicyGroupPlacementPolicyArgs(
 *         collocation="COLLOCATED",
 *         vm_count=2,
 *     ),
 *     region="us-central1")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var baz = new Gcp.Compute.ResourcePolicy("baz", new Gcp.Compute.ResourcePolicyArgs
 *         {
 *             GroupPlacementPolicy = new Gcp.Compute.Inputs.ResourcePolicyGroupPlacementPolicyArgs
 *             {
 *                 Collocation = "COLLOCATED",
 *                 VmCount = 2,
 *             },
 *             Region = "us-central1",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewResourcePolicy(ctx, "baz", &compute.ResourcePolicyArgs{
 * 			GroupPlacementPolicy: &compute.ResourcePolicyGroupPlacementPolicyArgs{
 * 				Collocation: pulumi.String("COLLOCATED"),
 * 				VmCount:     pulumi.Int(2),
 * 			},
 * 			Region: pulumi.String("us-central1"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Resource Policy Instance Schedule Policy
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const hourly = new gcp.compute.ResourcePolicy("hourly", {
 *     description: "Start and stop instances",
 *     instanceSchedulePolicy: {
 *         timeZone: "US/Central",
 *         vmStartSchedule: {
 *             schedule: "0 * * * *",
 *         },
 *         vmStopSchedule: {
 *             schedule: "15 * * * *",
 *         },
 *     },
 *     region: "us-central1",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * hourly = gcp.compute.ResourcePolicy("hourly",
 *     description="Start and stop instances",
 *     instance_schedule_policy=gcp.compute.ResourcePolicyInstanceSchedulePolicyArgs(
 *         time_zone="US/Central",
 *         vm_start_schedule=gcp.compute.ResourcePolicyInstanceSchedulePolicyVmStartScheduleArgs(
 *             schedule="0 * * * *",
 *         ),
 *         vm_stop_schedule=gcp.compute.ResourcePolicyInstanceSchedulePolicyVmStopScheduleArgs(
 *             schedule="15 * * * *",
 *         ),
 *     ),
 *     region="us-central1")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var hourly = new Gcp.Compute.ResourcePolicy("hourly", new Gcp.Compute.ResourcePolicyArgs
 *         {
 *             Description = "Start and stop instances",
 *             InstanceSchedulePolicy = new Gcp.Compute.Inputs.ResourcePolicyInstanceSchedulePolicyArgs
 *             {
 *                 TimeZone = "US/Central",
 *                 VmStartSchedule = new Gcp.Compute.Inputs.ResourcePolicyInstanceSchedulePolicyVmStartScheduleArgs
 *                 {
 *                     Schedule = "0 * * * *",
 *                 },
 *                 VmStopSchedule = new Gcp.Compute.Inputs.ResourcePolicyInstanceSchedulePolicyVmStopScheduleArgs
 *                 {
 *                     Schedule = "15 * * * *",
 *                 },
 *             },
 *             Region = "us-central1",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewResourcePolicy(ctx, "hourly", &compute.ResourcePolicyArgs{
 * 			Description: pulumi.String("Start and stop instances"),
 * 			InstanceSchedulePolicy: &compute.ResourcePolicyInstanceSchedulePolicyArgs{
 * 				TimeZone: pulumi.String("US/Central"),
 * 				VmStartSchedule: &compute.ResourcePolicyInstanceSchedulePolicyVmStartScheduleArgs{
 * 					Schedule: pulumi.String("0 * * * *"),
 * 				},
 * 				VmStopSchedule: &compute.ResourcePolicyInstanceSchedulePolicyVmStopScheduleArgs{
 * 					Schedule: pulumi.String("15 * * * *"),
 * 				},
 * 			},
 * 			Region: pulumi.String("us-central1"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ResourcePolicy can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/resourcePolicy:ResourcePolicy default projects/{{project}}/regions/{{region}}/resourcePolicies/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/resourcePolicy:ResourcePolicy default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/resourcePolicy:ResourcePolicy default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/resourcePolicy:ResourcePolicy default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/resourcePolicy:ResourcePolicy")
public class ResourcePolicy extends io.pulumi.resources.CustomResource {
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Resource policy for instances used for placement configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="groupPlacementPolicy", type=ResourcePolicyGroupPlacementPolicy.class, parameters={})
    private Output</* @Nullable */ ResourcePolicyGroupPlacementPolicy> groupPlacementPolicy;

    /**
     * @return Resource policy for instances used for placement configuration.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ResourcePolicyGroupPlacementPolicy> getGroupPlacementPolicy() {
        return this.groupPlacementPolicy;
    }
    /**
     * Resource policy for scheduling instance operations.
     * Structure is documented below.
     * 
     */
    @Export(name="instanceSchedulePolicy", type=ResourcePolicyInstanceSchedulePolicy.class, parameters={})
    private Output</* @Nullable */ ResourcePolicyInstanceSchedulePolicy> instanceSchedulePolicy;

    /**
     * @return Resource policy for scheduling instance operations.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ResourcePolicyInstanceSchedulePolicy> getInstanceSchedulePolicy() {
        return this.instanceSchedulePolicy;
    }
    /**
     * The name of the resource, provided by the client when initially creating
     * the resource. The resource name must be 1-63 characters long, and comply
     * with RFC1035. Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z`? which means the
     * first character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last character,
     * which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource, provided by the client when initially creating
     * the resource. The resource name must be 1-63 characters long, and comply
     * with RFC1035. Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z`? which means the
     * first character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last character,
     * which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Region where resource policy resides.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return Region where resource policy resides.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * Policy for creating snapshots of persistent disks.
     * Structure is documented below.
     * 
     */
    @Export(name="snapshotSchedulePolicy", type=ResourcePolicySnapshotSchedulePolicy.class, parameters={})
    private Output</* @Nullable */ ResourcePolicySnapshotSchedulePolicy> snapshotSchedulePolicy;

    /**
     * @return Policy for creating snapshots of persistent disks.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ResourcePolicySnapshotSchedulePolicy> getSnapshotSchedulePolicy() {
        return this.snapshotSchedulePolicy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ResourcePolicy(String name) {
        this(name, ResourcePolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ResourcePolicy(String name, @Nullable ResourcePolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ResourcePolicy(String name, @Nullable ResourcePolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/resourcePolicy:ResourcePolicy", name, args == null ? ResourcePolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ResourcePolicy(String name, Output<String> id, @Nullable ResourcePolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/resourcePolicy:ResourcePolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ResourcePolicy get(String name, Output<String> id, @Nullable ResourcePolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ResourcePolicy(name, id, state, options);
    }
}
