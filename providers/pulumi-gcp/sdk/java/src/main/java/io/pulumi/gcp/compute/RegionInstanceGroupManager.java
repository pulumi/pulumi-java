// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.RegionInstanceGroupManagerArgs;
import io.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerState;
import io.pulumi.gcp.compute.outputs.RegionInstanceGroupManagerAutoHealingPolicies;
import io.pulumi.gcp.compute.outputs.RegionInstanceGroupManagerNamedPort;
import io.pulumi.gcp.compute.outputs.RegionInstanceGroupManagerStatefulDisk;
import io.pulumi.gcp.compute.outputs.RegionInstanceGroupManagerStatus;
import io.pulumi.gcp.compute.outputs.RegionInstanceGroupManagerUpdatePolicy;
import io.pulumi.gcp.compute.outputs.RegionInstanceGroupManagerVersion;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The Google Compute Engine Regional Instance Group Manager API creates and manages pools
 * of homogeneous Compute Engine virtual machine instances from a common instance
 * template.
 * 
 * To get more information about regionInstanceGroupManagers, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionInstanceGroupManagers)
 * * How-to Guides
 *     * [Regional Instance Groups Guide](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups)
 * 
 * > **Note:** Use [gcp.compute.InstanceGroupManager](https://www.terraform.io/docs/providers/google/r/compute_instance_group_manager.html) to create a zonal instance group manager.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### With Top Level Instance Template (`Google` Provider)
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const autohealing = new gcp.compute.HealthCheck("autohealing", {
 *     checkIntervalSec: 5,
 *     timeoutSec: 5,
 *     healthyThreshold: 2,
 *     unhealthyThreshold: 10,
 *     httpHealthCheck: {
 *         requestPath: "/healthz",
 *         port: "8080",
 *     },
 * });
 * const appserver = new gcp.compute.RegionInstanceGroupManager("appserver", {
 *     baseInstanceName: "app",
 *     region: "us-central1",
 *     distributionPolicyZones: [
 *         "us-central1-a",
 *         "us-central1-f",
 *     ],
 *     versions: [{
 *         instanceTemplate: google_compute_instance_template.appserver.id,
 *     }],
 *     targetPools: [google_compute_target_pool.appserver.id],
 *     targetSize: 2,
 *     namedPorts: [{
 *         name: "custom",
 *         port: 8888,
 *     }],
 *     autoHealingPolicies: {
 *         healthCheck: autohealing.id,
 *         initialDelaySec: 300,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * autohealing = gcp.compute.HealthCheck("autohealing",
 *     check_interval_sec=5,
 *     timeout_sec=5,
 *     healthy_threshold=2,
 *     unhealthy_threshold=10,
 *     http_health_check=gcp.compute.HealthCheckHttpHealthCheckArgs(
 *         request_path="/healthz",
 *         port=8080,
 *     ))
 * appserver = gcp.compute.RegionInstanceGroupManager("appserver",
 *     base_instance_name="app",
 *     region="us-central1",
 *     distribution_policy_zones=[
 *         "us-central1-a",
 *         "us-central1-f",
 *     ],
 *     versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
 *         instance_template=google_compute_instance_template["appserver"]["id"],
 *     )],
 *     target_pools=[google_compute_target_pool["appserver"]["id"]],
 *     target_size=2,
 *     named_ports=[gcp.compute.RegionInstanceGroupManagerNamedPortArgs(
 *         name="custom",
 *         port=8888,
 *     )],
 *     auto_healing_policies=gcp.compute.RegionInstanceGroupManagerAutoHealingPoliciesArgs(
 *         health_check=autohealing.id,
 *         initial_delay_sec=300,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var autohealing = new Gcp.Compute.HealthCheck("autohealing", new Gcp.Compute.HealthCheckArgs
 *         {
 *             CheckIntervalSec = 5,
 *             TimeoutSec = 5,
 *             HealthyThreshold = 2,
 *             UnhealthyThreshold = 10,
 *             HttpHealthCheck = new Gcp.Compute.Inputs.HealthCheckHttpHealthCheckArgs
 *             {
 *                 RequestPath = "/healthz",
 *                 Port = 8080,
 *             },
 *         });
 *         var appserver = new Gcp.Compute.RegionInstanceGroupManager("appserver", new Gcp.Compute.RegionInstanceGroupManagerArgs
 *         {
 *             BaseInstanceName = "app",
 *             Region = "us-central1",
 *             DistributionPolicyZones = 
 *             {
 *                 "us-central1-a",
 *                 "us-central1-f",
 *             },
 *             Versions = 
 *             {
 *                 new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionArgs
 *                 {
 *                     InstanceTemplate = google_compute_instance_template.Appserver.Id,
 *                 },
 *             },
 *             TargetPools = 
 *             {
 *                 google_compute_target_pool.Appserver.Id,
 *             },
 *             TargetSize = 2,
 *             NamedPorts = 
 *             {
 *                 new Gcp.Compute.Inputs.RegionInstanceGroupManagerNamedPortArgs
 *                 {
 *                     Name = "custom",
 *                     Port = 8888,
 *                 },
 *             },
 *             AutoHealingPolicies = new Gcp.Compute.Inputs.RegionInstanceGroupManagerAutoHealingPoliciesArgs
 *             {
 *                 HealthCheck = autohealing.Id,
 *                 InitialDelaySec = 300,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		autohealing, err := compute.NewHealthCheck(ctx, "autohealing", &compute.HealthCheckArgs{
 * 			CheckIntervalSec:   pulumi.Int(5),
 * 			TimeoutSec:         pulumi.Int(5),
 * 			HealthyThreshold:   pulumi.Int(2),
 * 			UnhealthyThreshold: pulumi.Int(10),
 * 			HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
 * 				RequestPath: pulumi.String("/healthz"),
 * 				Port:        pulumi.Int(8080),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRegionInstanceGroupManager(ctx, "appserver", &compute.RegionInstanceGroupManagerArgs{
 * 			BaseInstanceName: pulumi.String("app"),
 * 			Region:           pulumi.String("us-central1"),
 * 			DistributionPolicyZones: pulumi.StringArray{
 * 				pulumi.String("us-central1-a"),
 * 				pulumi.String("us-central1-f"),
 * 			},
 * 			Versions: compute.RegionInstanceGroupManagerVersionArray{
 * 				&compute.RegionInstanceGroupManagerVersionArgs{
 * 					InstanceTemplate: pulumi.Any(google_compute_instance_template.Appserver.Id),
 * 				},
 * 			},
 * 			TargetPools: pulumi.StringArray{
 * 				pulumi.Any(google_compute_target_pool.Appserver.Id),
 * 			},
 * 			TargetSize: pulumi.Int(2),
 * 			NamedPorts: compute.RegionInstanceGroupManagerNamedPortArray{
 * 				&compute.RegionInstanceGroupManagerNamedPortArgs{
 * 					Name: pulumi.String("custom"),
 * 					Port: pulumi.Int(8888),
 * 				},
 * 			},
 * 			AutoHealingPolicies: &compute.RegionInstanceGroupManagerAutoHealingPoliciesArgs{
 * 				HealthCheck:     autohealing.ID(),
 * 				InitialDelaySec: pulumi.Int(300),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### With Multiple Versions
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const appserver = new gcp.compute.RegionInstanceGroupManager("appserver", {
 *     baseInstanceName: "app",
 *     region: "us-central1",
 *     targetSize: 5,
 *     versions: [
 *         {
 *             instanceTemplate: google_compute_instance_template.appserver.id,
 *         },
 *         {
 *             instanceTemplate: google_compute_instance_template["appserver-canary"].id,
 *             targetSize: {
 *                 fixed: 1,
 *             },
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * appserver = gcp.compute.RegionInstanceGroupManager("appserver",
 *     base_instance_name="app",
 *     region="us-central1",
 *     target_size=5,
 *     versions=[
 *         gcp.compute.RegionInstanceGroupManagerVersionArgs(
 *             instance_template=google_compute_instance_template["appserver"]["id"],
 *         ),
 *         gcp.compute.RegionInstanceGroupManagerVersionArgs(
 *             instance_template=google_compute_instance_template["appserver-canary"]["id"],
 *             target_size=gcp.compute.RegionInstanceGroupManagerVersionTargetSizeArgs(
 *                 fixed=1,
 *             ),
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var appserver = new Gcp.Compute.RegionInstanceGroupManager("appserver", new Gcp.Compute.RegionInstanceGroupManagerArgs
 *         {
 *             BaseInstanceName = "app",
 *             Region = "us-central1",
 *             TargetSize = 5,
 *             Versions = 
 *             {
 *                 new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionArgs
 *                 {
 *                     InstanceTemplate = google_compute_instance_template.Appserver.Id,
 *                 },
 *                 new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionArgs
 *                 {
 *                     InstanceTemplate = google_compute_instance_template.Appserver_canary.Id,
 *                     TargetSize = new Gcp.Compute.Inputs.RegionInstanceGroupManagerVersionTargetSizeArgs
 *                     {
 *                         Fixed = 1,
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionInstanceGroupManager(ctx, "appserver", &compute.RegionInstanceGroupManagerArgs{
 * 			BaseInstanceName: pulumi.String("app"),
 * 			Region:           pulumi.String("us-central1"),
 * 			TargetSize:       pulumi.Int(5),
 * 			Versions: compute.RegionInstanceGroupManagerVersionArray{
 * 				&compute.RegionInstanceGroupManagerVersionArgs{
 * 					InstanceTemplate: pulumi.Any(google_compute_instance_template.Appserver.Id),
 * 				},
 * 				&compute.RegionInstanceGroupManagerVersionArgs{
 * 					InstanceTemplate: pulumi.Any(google_compute_instance_template.Appserver - canary.Id),
 * 					TargetSize: &compute.RegionInstanceGroupManagerVersionTargetSizeArgs{
 * 						Fixed: pulumi.Int(1),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Instance group managers can be imported using the `name`, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager appserver appserver-igm
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager")
public class RegionInstanceGroupManager extends io.pulumi.resources.CustomResource {
    /**
     * The autohealing policies for this managed instance
     * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
     * 
     */
    @Export(name="autoHealingPolicies", type=RegionInstanceGroupManagerAutoHealingPolicies.class, parameters={})
    private Output</* @Nullable */ RegionInstanceGroupManagerAutoHealingPolicies> autoHealingPolicies;

    /**
     * @return The autohealing policies for this managed instance
     * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
     * 
     */
    public Output</* @Nullable */ RegionInstanceGroupManagerAutoHealingPolicies> getAutoHealingPolicies() {
        return this.autoHealingPolicies;
    }
    /**
     * The base instance name to use for
     * instances in this group. The value must be a valid
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
     * are lowercase letters, numbers, and hyphens (-). Instances are named by
     * appending a hyphen and a random four-character string to the base instance
     * name.
     * 
     */
    @Export(name="baseInstanceName", type=String.class, parameters={})
    private Output<String> baseInstanceName;

    /**
     * @return The base instance name to use for
     * instances in this group. The value must be a valid
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
     * are lowercase letters, numbers, and hyphens (-). Instances are named by
     * appending a hyphen and a random four-character string to the base instance
     * name.
     * 
     */
    public Output<String> getBaseInstanceName() {
        return this.baseInstanceName;
    }
    /**
     * An optional textual description of the instance
     * group manager.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional textual description of the instance
     * group manager.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
     * 
     */
    @Export(name="distributionPolicyTargetShape", type=String.class, parameters={})
    private Output<String> distributionPolicyTargetShape;

    /**
     * @return The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
     * 
     */
    public Output<String> getDistributionPolicyTargetShape() {
        return this.distributionPolicyTargetShape;
    }
    /**
     * The distribution policy for this managed instance
     * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
     * 
     */
    @Export(name="distributionPolicyZones", type=List.class, parameters={String.class})
    private Output<List<String>> distributionPolicyZones;

    /**
     * @return The distribution policy for this managed instance
     * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
     * 
     */
    public Output<List<String>> getDistributionPolicyZones() {
        return this.distributionPolicyZones;
    }
    /**
     * The fingerprint of the instance group manager.
     * 
     */
    @Export(name="fingerprint", type=String.class, parameters={})
    private Output<String> fingerprint;

    /**
     * @return The fingerprint of the instance group manager.
     * 
     */
    public Output<String> getFingerprint() {
        return this.fingerprint;
    }
    /**
     * The full URL of the instance group created by the manager.
     * 
     */
    @Export(name="instanceGroup", type=String.class, parameters={})
    private Output<String> instanceGroup;

    /**
     * @return The full URL of the instance group created by the manager.
     * 
     */
    public Output<String> getInstanceGroup() {
        return this.instanceGroup;
    }
    /**
     * - Version name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return - Version name.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The named port configuration. See the section below
     * for details on configuration.
     * 
     */
    @Export(name="namedPorts", type=List.class, parameters={RegionInstanceGroupManagerNamedPort.class})
    private Output</* @Nullable */ List<RegionInstanceGroupManagerNamedPort>> namedPorts;

    /**
     * @return The named port configuration. See the section below
     * for details on configuration.
     * 
     */
    public Output</* @Nullable */ List<RegionInstanceGroupManagerNamedPort>> getNamedPorts() {
        return this.namedPorts;
    }
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The region where the managed instance group resides. If not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region where the managed instance group resides. If not provided, the provider region is used.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URL of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URL of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
     * 
     */
    @Export(name="statefulDisks", type=List.class, parameters={RegionInstanceGroupManagerStatefulDisk.class})
    private Output</* @Nullable */ List<RegionInstanceGroupManagerStatefulDisk>> statefulDisks;

    /**
     * @return Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
     * 
     */
    public Output</* @Nullable */ List<RegionInstanceGroupManagerStatefulDisk>> getStatefulDisks() {
        return this.statefulDisks;
    }
    /**
     * The status of this managed instance group.
     * 
     */
    @Export(name="statuses", type=List.class, parameters={RegionInstanceGroupManagerStatus.class})
    private Output<List<RegionInstanceGroupManagerStatus>> statuses;

    /**
     * @return The status of this managed instance group.
     * 
     */
    public Output<List<RegionInstanceGroupManagerStatus>> getStatuses() {
        return this.statuses;
    }
    /**
     * The full URL of all target pools to which new
     * instances in the group are added. Updating the target pools attribute does
     * not affect existing instances.
     * 
     */
    @Export(name="targetPools", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> targetPools;

    /**
     * @return The full URL of all target pools to which new
     * instances in the group are added. Updating the target pools attribute does
     * not affect existing instances.
     * 
     */
    public Output</* @Nullable */ List<String>> getTargetPools() {
        return this.targetPools;
    }
    /**
     * - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
     * 
     */
    @Export(name="targetSize", type=Integer.class, parameters={})
    private Output<Integer> targetSize;

    /**
     * @return - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
     * 
     */
    public Output<Integer> getTargetSize() {
        return this.targetSize;
    }
    /**
     * The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
     * 
     */
    @Export(name="updatePolicy", type=RegionInstanceGroupManagerUpdatePolicy.class, parameters={})
    private Output<RegionInstanceGroupManagerUpdatePolicy> updatePolicy;

    /**
     * @return The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
     * 
     */
    public Output<RegionInstanceGroupManagerUpdatePolicy> getUpdatePolicy() {
        return this.updatePolicy;
    }
    /**
     * Application versions managed by this instance group. Each
     * version deals with a specific instance template, allowing canary release scenarios.
     * Structure is documented below.
     * 
     */
    @Export(name="versions", type=List.class, parameters={RegionInstanceGroupManagerVersion.class})
    private Output<List<RegionInstanceGroupManagerVersion>> versions;

    /**
     * @return Application versions managed by this instance group. Each
     * version deals with a specific instance template, allowing canary release scenarios.
     * Structure is documented below.
     * 
     */
    public Output<List<RegionInstanceGroupManagerVersion>> getVersions() {
        return this.versions;
    }
    /**
     * Whether to wait for all instances to be created/updated before
     * returning. Note that if this is set to true and the operation does not succeed, the provider will
     * continue trying until it times out.
     * 
     */
    @Export(name="waitForInstances", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> waitForInstances;

    /**
     * @return Whether to wait for all instances to be created/updated before
     * returning. Note that if this is set to true and the operation does not succeed, the provider will
     * continue trying until it times out.
     * 
     */
    public Output</* @Nullable */ Boolean> getWaitForInstances() {
        return this.waitForInstances;
    }
    /**
     * When used with `wait_for_instances` it specifies the status to wait for.
     * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
     * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
     * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
     * 
     */
    @Export(name="waitForInstancesStatus", type=String.class, parameters={})
    private Output</* @Nullable */ String> waitForInstancesStatus;

    /**
     * @return When used with `wait_for_instances` it specifies the status to wait for.
     * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
     * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
     * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
     * 
     */
    public Output</* @Nullable */ String> getWaitForInstancesStatus() {
        return this.waitForInstancesStatus;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionInstanceGroupManager(String name) {
        this(name, RegionInstanceGroupManagerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionInstanceGroupManager(String name, RegionInstanceGroupManagerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionInstanceGroupManager(String name, RegionInstanceGroupManagerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager", name, args == null ? RegionInstanceGroupManagerArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RegionInstanceGroupManager(String name, Output<String> id, @Nullable RegionInstanceGroupManagerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionInstanceGroupManager get(String name, Output<String> id, @Nullable RegionInstanceGroupManagerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RegionInstanceGroupManager(name, id, state, options);
    }
}
