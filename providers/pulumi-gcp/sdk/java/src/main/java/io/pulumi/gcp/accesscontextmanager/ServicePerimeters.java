// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.accesscontextmanager.ServicePerimetersArgs;
import io.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersState;
import io.pulumi.gcp.accesscontextmanager.outputs.ServicePerimetersServicePerimeter;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Replace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically.
 * This is a bulk edit of all Service Perimeters and may override existing Service Perimeters created by `gcp.accesscontextmanager.ServicePerimeter`,
 * thus causing a permadiff if used alongside `gcp.accesscontextmanager.ServicePerimeter` on the same parent.
 * 
 * 
 * To get more information about ServicePerimeters, see:
 * 
 * * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
 * * How-to Guides
 *     * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Access Context Manager Service Perimeters Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
 *     parent: "organizations/123456789",
 *     title: "my policy",
 * });
 * const service_perimeter = new gcp.accesscontextmanager.ServicePerimeters("service-perimeter", {
 *     parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
 *     servicePerimeters: [
 *         {
 *             name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/`,
 *             status: {
 *                 restrictedServices: ["storage.googleapis.com"],
 *             },
 *             title: "",
 *         },
 *         {
 *             name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/`,
 *             status: {
 *                 restrictedServices: ["bigtable.googleapis.com"],
 *             },
 *             title: "",
 *         },
 *     ],
 * });
 * const access_level = new gcp.accesscontextmanager.AccessLevel("access-level", {
 *     basic: {
 *         conditions: [{
 *             devicePolicy: {
 *                 osConstraints: [{
 *                     osType: "DESKTOP_CHROME_OS",
 *                 }],
 *                 requireScreenLock: false,
 *             },
 *             regions: [
 *                 "CH",
 *                 "IT",
 *                 "US",
 *             ],
 *         }],
 *     },
 *     parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
 *     title: "chromeos_no_lock",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
 *     parent="organizations/123456789",
 *     title="my policy")
 * service_perimeter = gcp.accesscontextmanager.ServicePerimeters("service-perimeter",
 *     parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
 *     service_perimeters=[
 *         gcp.accesscontextmanager.ServicePerimetersServicePerimeterArgs(
 *             name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/"),
 *             status=gcp.accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs(
 *                 restricted_services=["storage.googleapis.com"],
 *             ),
 *             title="",
 *         ),
 *         gcp.accesscontextmanager.ServicePerimetersServicePerimeterArgs(
 *             name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/"),
 *             status=gcp.accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs(
 *                 restricted_services=["bigtable.googleapis.com"],
 *             ),
 *             title="",
 *         ),
 *     ])
 * access_level = gcp.accesscontextmanager.AccessLevel("access-level",
 *     basic=gcp.accesscontextmanager.AccessLevelBasicArgs(
 *         conditions=[gcp.accesscontextmanager.AccessLevelBasicConditionArgs(
 *             device_policy=gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs(
 *                 os_constraints=[gcp.accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs(
 *                     os_type="DESKTOP_CHROME_OS",
 *                 )],
 *                 require_screen_lock=False,
 *             ),
 *             regions=[
 *                 "CH",
 *                 "IT",
 *                 "US",
 *             ],
 *         )],
 *     ),
 *     parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
 *     title="chromeos_no_lock")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new Gcp.AccessContextManager.AccessPolicyArgs
 *         {
 *             Parent = "organizations/123456789",
 *             Title = "my policy",
 *         });
 *         var service_perimeter = new Gcp.AccessContextManager.ServicePerimeters("service-perimeter", new Gcp.AccessContextManager.ServicePerimetersArgs
 *         {
 *             Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
 *             ServicePerimeters = 
 *             {
 *                 new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterArgs
 *                 {
 *                     Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/"),
 *                     Status = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusArgs
 *                     {
 *                         RestrictedServices = 
 *                         {
 *                             "storage.googleapis.com",
 *                         },
 *                     },
 *                     Title = "",
 *                 },
 *                 new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterArgs
 *                 {
 *                     Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/"),
 *                     Status = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusArgs
 *                     {
 *                         RestrictedServices = 
 *                         {
 *                             "bigtable.googleapis.com",
 *                         },
 *                     },
 *                     Title = "",
 *                 },
 *             },
 *         });
 *         var access_level = new Gcp.AccessContextManager.AccessLevel("access-level", new Gcp.AccessContextManager.AccessLevelArgs
 *         {
 *             Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
 *             {
 *                 Conditions = 
 *                 {
 *                     new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
 *                     {
 *                         DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
 *                         {
 *                             OsConstraints = 
 *                             {
 *                                 new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
 *                                 {
 *                                     OsType = "DESKTOP_CHROME_OS",
 *                                 },
 *                             },
 *                             RequireScreenLock = false,
 *                         },
 *                         Regions = 
 *                         {
 *                             "CH",
 *                             "IT",
 *                             "US",
 *                         },
 *                     },
 *                 },
 *             },
 *             Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
 *             Title = "chromeos_no_lock",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
 * 			Parent: pulumi.String("organizations/123456789"),
 * 			Title:  pulumi.String("my policy"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = accesscontextmanager.NewServicePerimeters(ctx, "service-perimeter", &accesscontextmanager.ServicePerimetersArgs{
 * 			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 				return fmt.Sprintf("%v%v", "accessPolicies/", name), nil
 * 			}).(pulumi.StringOutput),
 * 			ServicePerimeters: accesscontextmanager.ServicePerimetersServicePerimeterArray{
 * 				&accesscontextmanager.ServicePerimetersServicePerimeterArgs{
 * 					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 						return fmt.Sprintf("%v%v%v", "accessPolicies/", name, "/servicePerimeters/"), nil
 * 					}).(pulumi.StringOutput),
 * 					Status: &accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs{
 * 						RestrictedServices: pulumi.StringArray{
 * 							pulumi.String("storage.googleapis.com"),
 * 						},
 * 					},
 * 					Title: pulumi.String(""),
 * 				},
 * 				&accesscontextmanager.ServicePerimetersServicePerimeterArgs{
 * 					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 						return fmt.Sprintf("%v%v%v", "accessPolicies/", name, "/servicePerimeters/"), nil
 * 					}).(pulumi.StringOutput),
 * 					Status: &accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs{
 * 						RestrictedServices: pulumi.StringArray{
 * 							pulumi.String("bigtable.googleapis.com"),
 * 						},
 * 					},
 * 					Title: pulumi.String(""),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = accesscontextmanager.NewAccessLevel(ctx, "access-level", &accesscontextmanager.AccessLevelArgs{
 * 			Basic: &accesscontextmanager.AccessLevelBasicArgs{
 * 				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
 * 					&accesscontextmanager.AccessLevelBasicConditionArgs{
 * 						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
 * 							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
 * 								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
 * 									OsType: pulumi.String("DESKTOP_CHROME_OS"),
 * 								},
 * 							},
 * 							RequireScreenLock: pulumi.Bool(false),
 * 						},
 * 						Regions: pulumi.StringArray{
 * 							pulumi.String("CH"),
 * 							pulumi.String("IT"),
 * 							pulumi.String("US"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 				return fmt.Sprintf("%v%v", "accessPolicies/", name), nil
 * 			}).(pulumi.StringOutput),
 * 			Title: pulumi.String("chromeos_no_lock"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ServicePerimeters can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:accesscontextmanager/servicePerimeters:ServicePerimeters default {{parent}}/servicePerimeters
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:accesscontextmanager/servicePerimeters:ServicePerimeters default {{parent}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:accesscontextmanager/servicePerimeters:ServicePerimeters")
public class ServicePerimeters extends io.pulumi.resources.CustomResource {
    /**
     * The AccessPolicy this ServicePerimeter lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    @Export(name="parent", type=String.class, parameters={})
    private Output<String> parent;

    /**
     * @return The AccessPolicy this ServicePerimeter lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    public Output<String> getParent() {
        return this.parent;
    }
    /**
     * The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
     * Structure is documented below.
     * 
     */
    @Export(name="servicePerimeters", type=List.class, parameters={ServicePerimetersServicePerimeter.class})
    private Output</* @Nullable */ List<ServicePerimetersServicePerimeter>> servicePerimeters;

    /**
     * @return The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<ServicePerimetersServicePerimeter>> getServicePerimeters() {
        return this.servicePerimeters;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServicePerimeters(String name) {
        this(name, ServicePerimetersArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServicePerimeters(String name, ServicePerimetersArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServicePerimeters(String name, ServicePerimetersArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:accesscontextmanager/servicePerimeters:ServicePerimeters", name, args == null ? ServicePerimetersArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ServicePerimeters(String name, Output<String> id, @Nullable ServicePerimetersState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:accesscontextmanager/servicePerimeters:ServicePerimeters", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServicePerimeters get(String name, Output<String> id, @Nullable ServicePerimetersState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ServicePerimeters(name, id, state, options);
    }
}
