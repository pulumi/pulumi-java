// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.networkservices.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
    /**
     * If true, requests to different hosts will be cached separately.
     * Note: this should only be enabled if hosts share the same origin and content Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
     * 
     */
    private final @Nullable Boolean excludeHost;
    /**
     * If true, exclude query string parameters from the cache key
     * If false (the default), include the query string parameters in
     * the cache key according to includeQueryParameters and
     * excludeQueryParameters. If neither includeQueryParameters nor
     * excludeQueryParameters is set, the entire query string will be
     * included.
     * 
     */
    private final @Nullable Boolean excludeQueryString;
    /**
     * Names of query string parameters to exclude from cache keys. All other parameters will be included.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     * 
     */
    private final @Nullable List<String> excludedQueryParameters;
    /**
     * If true, http and https requests will be cached separately.
     * 
     */
    private final @Nullable Boolean includeProtocol;
    /**
     * Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
     * - Header names must be valid HTTP RFC 7230 header field values.
     * - Header field names are case insensitive
     * - To include the HTTP method, use ":method"
     *   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
     * 
     */
    private final @Nullable List<String> includedHeaderNames;
    /**
     * Names of query string parameters to include in cache keys. All other parameters will be excluded.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     * 
     */
    private final @Nullable List<String> includedQueryParameters;

    @OutputCustomType.Constructor({"excludeHost","excludeQueryString","excludedQueryParameters","includeProtocol","includedHeaderNames","includedQueryParameters"})
    private EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy(
        @Nullable Boolean excludeHost,
        @Nullable Boolean excludeQueryString,
        @Nullable List<String> excludedQueryParameters,
        @Nullable Boolean includeProtocol,
        @Nullable List<String> includedHeaderNames,
        @Nullable List<String> includedQueryParameters) {
        this.excludeHost = excludeHost;
        this.excludeQueryString = excludeQueryString;
        this.excludedQueryParameters = excludedQueryParameters;
        this.includeProtocol = includeProtocol;
        this.includedHeaderNames = includedHeaderNames;
        this.includedQueryParameters = includedQueryParameters;
    }

    /**
     * If true, requests to different hosts will be cached separately.
     * Note: this should only be enabled if hosts share the same origin and content Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
     * 
     */
    public Optional<Boolean> getExcludeHost() {
        return Optional.ofNullable(this.excludeHost);
    }
    /**
     * If true, exclude query string parameters from the cache key
     * If false (the default), include the query string parameters in
     * the cache key according to includeQueryParameters and
     * excludeQueryParameters. If neither includeQueryParameters nor
     * excludeQueryParameters is set, the entire query string will be
     * included.
     * 
     */
    public Optional<Boolean> getExcludeQueryString() {
        return Optional.ofNullable(this.excludeQueryString);
    }
    /**
     * Names of query string parameters to exclude from cache keys. All other parameters will be included.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     * 
     */
    public List<String> getExcludedQueryParameters() {
        return this.excludedQueryParameters == null ? List.of() : this.excludedQueryParameters;
    }
    /**
     * If true, http and https requests will be cached separately.
     * 
     */
    public Optional<Boolean> getIncludeProtocol() {
        return Optional.ofNullable(this.includeProtocol);
    }
    /**
     * Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
     * - Header names must be valid HTTP RFC 7230 header field values.
     * - Header field names are case insensitive
     * - To include the HTTP method, use ":method"
     *   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
     * 
     */
    public List<String> getIncludedHeaderNames() {
        return this.includedHeaderNames == null ? List.of() : this.includedHeaderNames;
    }
    /**
     * Names of query string parameters to include in cache keys. All other parameters will be excluded.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     * 
     */
    public List<String> getIncludedQueryParameters() {
        return this.includedQueryParameters == null ? List.of() : this.includedQueryParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean excludeHost;
        private @Nullable Boolean excludeQueryString;
        private @Nullable List<String> excludedQueryParameters;
        private @Nullable Boolean includeProtocol;
        private @Nullable List<String> includedHeaderNames;
        private @Nullable List<String> includedQueryParameters;

        public Builder() {
    	      // Empty
        }

        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeHost = defaults.excludeHost;
    	      this.excludeQueryString = defaults.excludeQueryString;
    	      this.excludedQueryParameters = defaults.excludedQueryParameters;
    	      this.includeProtocol = defaults.includeProtocol;
    	      this.includedHeaderNames = defaults.includedHeaderNames;
    	      this.includedQueryParameters = defaults.includedQueryParameters;
        }

        public Builder setExcludeHost(@Nullable Boolean excludeHost) {
            this.excludeHost = excludeHost;
            return this;
        }

        public Builder setExcludeQueryString(@Nullable Boolean excludeQueryString) {
            this.excludeQueryString = excludeQueryString;
            return this;
        }

        public Builder setExcludedQueryParameters(@Nullable List<String> excludedQueryParameters) {
            this.excludedQueryParameters = excludedQueryParameters;
            return this;
        }

        public Builder setIncludeProtocol(@Nullable Boolean includeProtocol) {
            this.includeProtocol = includeProtocol;
            return this;
        }

        public Builder setIncludedHeaderNames(@Nullable List<String> includedHeaderNames) {
            this.includedHeaderNames = includedHeaderNames;
            return this;
        }

        public Builder setIncludedQueryParameters(@Nullable List<String> includedQueryParameters) {
            this.includedQueryParameters = includedQueryParameters;
            return this;
        }

        public EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy build() {
            return new EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy(excludeHost, excludeQueryString, excludedQueryParameters, includeProtocol, includedHeaderNames, includedQueryParameters);
        }
    }
}
