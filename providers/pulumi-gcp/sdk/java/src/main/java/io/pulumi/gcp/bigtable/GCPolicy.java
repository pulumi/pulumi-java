// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigtable;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.bigtable.GCPolicyArgs;
import io.pulumi.gcp.bigtable.inputs.GCPolicyState;
import io.pulumi.gcp.bigtable.outputs.GCPolicyMaxAge;
import io.pulumi.gcp.bigtable.outputs.GCPolicyMaxVersion;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Creates a Google Cloud Bigtable GC Policy inside a family. For more information see
 * [the official documentation](https://cloud.google.com/bigtable/) and
 * [API](https://cloud.google.com/bigtable/docs/go/reference).
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const instance = new gcp.bigtable.Instance("instance", {clusters: [{
 *     clusterId: "tf-instance-cluster",
 *     numNodes: 3,
 *     storageType: "HDD",
 * }]});
 * const table = new gcp.bigtable.Table("table", {
 *     instanceName: instance.name,
 *     columnFamilies: [{
 *         family: "name",
 *     }],
 * });
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: instance.name,
 *     table: table.name,
 *     columnFamily: "name",
 *     maxAge: {
 *         duration: "168h",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * instance = gcp.bigtable.Instance("instance", clusters=[gcp.bigtable.InstanceClusterArgs(
 *     cluster_id="tf-instance-cluster",
 *     num_nodes=3,
 *     storage_type="HDD",
 * )])
 * table = gcp.bigtable.Table("table",
 *     instance_name=instance.name,
 *     column_families=[gcp.bigtable.TableColumnFamilyArgs(
 *         family="name",
 *     )])
 * policy = gcp.bigtable.GCPolicy("policy",
 *     instance_name=instance.name,
 *     table=table.name,
 *     column_family="name",
 *     max_age=gcp.bigtable.GCPolicyMaxAgeArgs(
 *         duration="168h",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var instance = new Gcp.BigTable.Instance("instance", new Gcp.BigTable.InstanceArgs
 *         {
 *             Clusters = 
 *             {
 *                 new Gcp.BigTable.Inputs.InstanceClusterArgs
 *                 {
 *                     ClusterId = "tf-instance-cluster",
 *                     NumNodes = 3,
 *                     StorageType = "HDD",
 *                 },
 *             },
 *         });
 *         var table = new Gcp.BigTable.Table("table", new Gcp.BigTable.TableArgs
 *         {
 *             InstanceName = instance.Name,
 *             ColumnFamilies = 
 *             {
 *                 new Gcp.BigTable.Inputs.TableColumnFamilyArgs
 *                 {
 *                     Family = "name",
 *                 },
 *             },
 *         });
 *         var policy = new Gcp.BigTable.GCPolicy("policy", new Gcp.BigTable.GCPolicyArgs
 *         {
 *             InstanceName = instance.Name,
 *             Table = table.Name,
 *             ColumnFamily = "name",
 *             MaxAge = new Gcp.BigTable.Inputs.GCPolicyMaxAgeArgs
 *             {
 *                 Duration = "168h",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigtable"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		instance, err := bigtable.NewInstance(ctx, "instance", &bigtable.InstanceArgs{
 * 			Clusters: bigtable.InstanceClusterArray{
 * 				&bigtable.InstanceClusterArgs{
 * 					ClusterId:   pulumi.String("tf-instance-cluster"),
 * 					NumNodes:    pulumi.Int(3),
 * 					StorageType: pulumi.String("HDD"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		table, err := bigtable.NewTable(ctx, "table", &bigtable.TableArgs{
 * 			InstanceName: instance.Name,
 * 			ColumnFamilies: bigtable.TableColumnFamilyArray{
 * 				&bigtable.TableColumnFamilyArgs{
 * 					Family: pulumi.String("name"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigtable.NewGCPolicy(ctx, "policy", &bigtable.GCPolicyArgs{
 * 			InstanceName: instance.Name,
 * 			Table:        table.Name,
 * 			ColumnFamily: pulumi.String("name"),
 * 			MaxAge: &bigtable.GCPolicyMaxAgeArgs{
 * 				Duration: pulumi.String("168h"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Multiple conditions is also supported. `UNION` when any of its sub-policies apply (OR). `INTERSECTION` when all its sub-policies apply (AND)
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: google_bigtable_instance.instance.name,
 *     table: google_bigtable_table.table.name,
 *     columnFamily: "name",
 *     mode: "UNION",
 *     maxAge: {
 *         duration: "168h",
 *     },
 *     maxVersions: [{
 *         number: 10,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * policy = gcp.bigtable.GCPolicy("policy",
 *     instance_name=google_bigtable_instance["instance"]["name"],
 *     table=google_bigtable_table["table"]["name"],
 *     column_family="name",
 *     mode="UNION",
 *     max_age=gcp.bigtable.GCPolicyMaxAgeArgs(
 *         duration="168h",
 *     ),
 *     max_versions=[gcp.bigtable.GCPolicyMaxVersionArgs(
 *         number=10,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var policy = new Gcp.BigTable.GCPolicy("policy", new Gcp.BigTable.GCPolicyArgs
 *         {
 *             InstanceName = google_bigtable_instance.Instance.Name,
 *             Table = google_bigtable_table.Table.Name,
 *             ColumnFamily = "name",
 *             Mode = "UNION",
 *             MaxAge = new Gcp.BigTable.Inputs.GCPolicyMaxAgeArgs
 *             {
 *                 Duration = "168h",
 *             },
 *             MaxVersions = 
 *             {
 *                 new Gcp.BigTable.Inputs.GCPolicyMaxVersionArgs
 *                 {
 *                     Number = 10,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigtable"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := bigtable.NewGCPolicy(ctx, "policy", &bigtable.GCPolicyArgs{
 * 			InstanceName: pulumi.Any(google_bigtable_instance.Instance.Name),
 * 			Table:        pulumi.Any(google_bigtable_table.Table.Name),
 * 			ColumnFamily: pulumi.String("name"),
 * 			Mode:         pulumi.String("UNION"),
 * 			MaxAge: &bigtable.GCPolicyMaxAgeArgs{
 * 				Duration: pulumi.String("168h"),
 * 			},
 * 			MaxVersions: bigtable.GCPolicyMaxVersionArray{
 * 				&bigtable.GCPolicyMaxVersionArgs{
 * 					Number: pulumi.Int(10),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * This resource does not support import. 
 */
@ResourceType(type="gcp:bigtable/gCPolicy:GCPolicy")
public class GCPolicy extends io.pulumi.resources.CustomResource {
    /**
     * The name of the column family.
     * 
     */
    @Export(name="columnFamily", type=String.class, parameters={})
    private Output<String> columnFamily;

    /**
     * @return The name of the column family.
     * 
     */
    public Output<String> getColumnFamily() {
        return this.columnFamily;
    }
    /**
     * The name of the Bigtable instance.
     * 
     */
    @Export(name="instanceName", type=String.class, parameters={})
    private Output<String> instanceName;

    /**
     * @return The name of the Bigtable instance.
     * 
     */
    public Output<String> getInstanceName() {
        return this.instanceName;
    }
    /**
     * GC policy that applies to all cells older than the given age.
     * 
     */
    @Export(name="maxAge", type=GCPolicyMaxAge.class, parameters={})
    private Output</* @Nullable */ GCPolicyMaxAge> maxAge;

    /**
     * @return GC policy that applies to all cells older than the given age.
     * 
     */
    public Output</* @Nullable */ GCPolicyMaxAge> getMaxAge() {
        return this.maxAge;
    }
    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     * 
     */
    @Export(name="maxVersions", type=List.class, parameters={GCPolicyMaxVersion.class})
    private Output</* @Nullable */ List<GCPolicyMaxVersion>> maxVersions;

    /**
     * @return GC policy that applies to all versions of a cell except for the most recent.
     * 
     */
    public Output</* @Nullable */ List<GCPolicyMaxVersion>> getMaxVersions() {
        return this.maxVersions;
    }
    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     * 
     */
    @Export(name="mode", type=String.class, parameters={})
    private Output</* @Nullable */ String> mode;

    /**
     * @return If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     * 
     */
    public Output</* @Nullable */ String> getMode() {
        return this.mode;
    }
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The name of the table.
     * 
     */
    @Export(name="table", type=String.class, parameters={})
    private Output<String> table;

    /**
     * @return The name of the table.
     * 
     */
    public Output<String> getTable() {
        return this.table;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GCPolicy(String name) {
        this(name, GCPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GCPolicy(String name, GCPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GCPolicy(String name, GCPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/gCPolicy:GCPolicy", name, args == null ? GCPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private GCPolicy(String name, Output<String> id, @Nullable GCPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/gCPolicy:GCPolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GCPolicy get(String name, Output<String> id, @Nullable GCPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new GCPolicy(name, id, state, options);
    }
}
