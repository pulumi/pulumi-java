// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.diagflow.EntityTypeArgs;
import io.pulumi.gcp.diagflow.inputs.EntityTypeState;
import io.pulumi.gcp.diagflow.outputs.EntityTypeEntity;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Represents an entity type. Entity types serve as a tool for extracting parameter values from natural language queries.
 * 
 * 
 * To get more information about EntityType, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/docs/reference/rest/v2/projects.agent.entityTypes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/docs/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Dialogflow Entity Type Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const basicAgent = new gcp.diagflow.Agent("basicAgent", {
 *     displayName: "example_agent",
 *     defaultLanguageCode: "en",
 *     timeZone: "America/New_York",
 * });
 * const basicEntityType = new gcp.diagflow.EntityType("basicEntityType", {
 *     displayName: "",
 *     kind: "KIND_MAP",
 *     entities: [
 *         {
 *             value: "value1",
 *             synonyms: [
 *                 "synonym1",
 *                 "synonym2",
 *             ],
 *         },
 *         {
 *             value: "value2",
 *             synonyms: [
 *                 "synonym3",
 *                 "synonym4",
 *             ],
 *         },
 *     ],
 * }, {
 *     dependsOn: [basicAgent],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * basic_agent = gcp.diagflow.Agent("basicAgent",
 *     display_name="example_agent",
 *     default_language_code="en",
 *     time_zone="America/New_York")
 * basic_entity_type = gcp.diagflow.EntityType("basicEntityType",
 *     display_name="",
 *     kind="KIND_MAP",
 *     entities=[
 *         gcp.diagflow.EntityTypeEntityArgs(
 *             value="value1",
 *             synonyms=[
 *                 "synonym1",
 *                 "synonym2",
 *             ],
 *         ),
 *         gcp.diagflow.EntityTypeEntityArgs(
 *             value="value2",
 *             synonyms=[
 *                 "synonym3",
 *                 "synonym4",
 *             ],
 *         ),
 *     ],
 *     opts=pulumi.ResourceOptions(depends_on=[basic_agent]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var basicAgent = new Gcp.Diagflow.Agent("basicAgent", new Gcp.Diagflow.AgentArgs
 *         {
 *             DisplayName = "example_agent",
 *             DefaultLanguageCode = "en",
 *             TimeZone = "America/New_York",
 *         });
 *         var basicEntityType = new Gcp.Diagflow.EntityType("basicEntityType", new Gcp.Diagflow.EntityTypeArgs
 *         {
 *             DisplayName = "",
 *             Kind = "KIND_MAP",
 *             Entities = 
 *             {
 *                 new Gcp.Diagflow.Inputs.EntityTypeEntityArgs
 *                 {
 *                     Value = "value1",
 *                     Synonyms = 
 *                     {
 *                         "synonym1",
 *                         "synonym2",
 *                     },
 *                 },
 *                 new Gcp.Diagflow.Inputs.EntityTypeEntityArgs
 *                 {
 *                     Value = "value2",
 *                     Synonyms = 
 *                     {
 *                         "synonym3",
 *                         "synonym4",
 *                     },
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 basicAgent,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/diagflow"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		basicAgent, err := diagflow.NewAgent(ctx, "basicAgent", &diagflow.AgentArgs{
 * 			DisplayName:         pulumi.String("example_agent"),
 * 			DefaultLanguageCode: pulumi.String("en"),
 * 			TimeZone:            pulumi.String("America/New_York"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = diagflow.NewEntityType(ctx, "basicEntityType", &diagflow.EntityTypeArgs{
 * 			DisplayName: pulumi.String(""),
 * 			Kind:        pulumi.String("KIND_MAP"),
 * 			Entities: diagflow.EntityTypeEntityArray{
 * 				&diagflow.EntityTypeEntityArgs{
 * 					Value: pulumi.String("value1"),
 * 					Synonyms: pulumi.StringArray{
 * 						pulumi.String("synonym1"),
 * 						pulumi.String("synonym2"),
 * 					},
 * 				},
 * 				&diagflow.EntityTypeEntityArgs{
 * 					Value: pulumi.String("value2"),
 * 					Synonyms: pulumi.StringArray{
 * 						pulumi.String("synonym3"),
 * 						pulumi.String("synonym4"),
 * 					},
 * 				},
 * 			},
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			basicAgent,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * EntityType can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:diagflow/entityType:EntityType default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:diagflow/entityType:EntityType")
public class EntityType extends io.pulumi.resources.CustomResource {
    /**
     * The name of this entity type to be displayed on the console.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The name of this entity type to be displayed on the console.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Enables fuzzy entity extraction during classification.
     * 
     */
    @Export(name="enableFuzzyExtraction", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableFuzzyExtraction;

    /**
     * @return Enables fuzzy entity extraction during classification.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableFuzzyExtraction() {
        return this.enableFuzzyExtraction;
    }
    /**
     * The collection of entity entries associated with the entity type.
     * Structure is documented below.
     * 
     */
    @Export(name="entities", type=List.class, parameters={EntityTypeEntity.class})
    private Output</* @Nullable */ List<EntityTypeEntity>> entities;

    /**
     * @return The collection of entity entries associated with the entity type.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<EntityTypeEntity>> getEntities() {
        return this.entities;
    }
    /**
     * Indicates the kind of entity type.
     * * KIND_MAP: Map entity types allow mapping of a group of synonyms to a reference value.
     * * KIND_LIST: List entity types contain a set of entries that do not map to reference values. However, list entity
     * types can contain references to other entity types (with or without aliases).
     * * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
     * Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return Indicates the kind of entity type.
     * * KIND_MAP: Map entity types allow mapping of a group of synonyms to a reference value.
     * * KIND_LIST: List entity types contain a set of entries that do not map to reference values. However, list entity
     * types can contain references to other entity types (with or without aliases).
     * * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
     * Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
     * 
     */
    public Output<String> getKind() {
        return this.kind;
    }
    /**
     * The unique identifier of the entity type. Format: projects/<Project ID>/agent/entityTypes/<Entity type ID>.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The unique identifier of the entity type. Format: projects/<Project ID>/agent/entityTypes/<Entity type ID>.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EntityType(String name) {
        this(name, EntityTypeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EntityType(String name, EntityTypeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EntityType(String name, EntityTypeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/entityType:EntityType", name, args == null ? EntityTypeArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EntityType(String name, Output<String> id, @Nullable EntityTypeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/entityType:EntityType", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EntityType get(String name, Output<String> id, @Nullable EntityTypeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EntityType(name, id, state, options);
    }
}
