// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataloss.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.dataloss.inputs.PreventionJobTriggerInspectJobGetArgs;
import io.pulumi.gcp.dataloss.inputs.PreventionJobTriggerTriggerGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PreventionJobTriggerState extends io.pulumi.resources.ResourceArgs {

    public static final PreventionJobTriggerState Empty = new PreventionJobTriggerState();

    /**
     * A description of the job trigger.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * User set display name of the job trigger.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Controls what and how to inspect for findings.
     * Structure is documented below.
     * 
     */
    @InputImport(name="inspectJob")
      private final @Nullable Output<PreventionJobTriggerInspectJobGetArgs> inspectJob;

    public Output<PreventionJobTriggerInspectJobGetArgs> getInspectJob() {
        return this.inspectJob == null ? Output.empty() : this.inspectJob;
    }

    /**
     * The timestamp of the last time this trigger executed.
     * 
     */
    @InputImport(name="lastRunTime")
      private final @Nullable Output<String> lastRunTime;

    public Output<String> getLastRunTime() {
        return this.lastRunTime == null ? Output.empty() : this.lastRunTime;
    }

    /**
     * The name of the Datastore kind.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The parent of the trigger, either in the format `projects/{{project}}`
     * or `projects/{{project}}/locations/{{location}}`
     * 
     */
    @InputImport(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Output.empty() : this.parent;
    }

    /**
     * Whether the trigger is currently active.
     * Default value is `HEALTHY`.
     * Possible values are `PAUSED`, `HEALTHY`, and `CANCELLED`.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * What event needs to occur for a new job to be started.
     * Structure is documented below.
     * 
     */
    @InputImport(name="triggers")
      private final @Nullable Output<List<PreventionJobTriggerTriggerGetArgs>> triggers;

    public Output<List<PreventionJobTriggerTriggerGetArgs>> getTriggers() {
        return this.triggers == null ? Output.empty() : this.triggers;
    }

    public PreventionJobTriggerState(
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<PreventionJobTriggerInspectJobGetArgs> inspectJob,
        @Nullable Output<String> lastRunTime,
        @Nullable Output<String> name,
        @Nullable Output<String> parent,
        @Nullable Output<String> status,
        @Nullable Output<List<PreventionJobTriggerTriggerGetArgs>> triggers) {
        this.description = description;
        this.displayName = displayName;
        this.inspectJob = inspectJob;
        this.lastRunTime = lastRunTime;
        this.name = name;
        this.parent = parent;
        this.status = status;
        this.triggers = triggers;
    }

    private PreventionJobTriggerState() {
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.inspectJob = Output.empty();
        this.lastRunTime = Output.empty();
        this.name = Output.empty();
        this.parent = Output.empty();
        this.status = Output.empty();
        this.triggers = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreventionJobTriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<PreventionJobTriggerInspectJobGetArgs> inspectJob;
        private @Nullable Output<String> lastRunTime;
        private @Nullable Output<String> name;
        private @Nullable Output<String> parent;
        private @Nullable Output<String> status;
        private @Nullable Output<List<PreventionJobTriggerTriggerGetArgs>> triggers;

        public Builder() {
    	      // Empty
        }

        public Builder(PreventionJobTriggerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.inspectJob = defaults.inspectJob;
    	      this.lastRunTime = defaults.lastRunTime;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.status = defaults.status;
    	      this.triggers = defaults.triggers;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder inspectJob(@Nullable Output<PreventionJobTriggerInspectJobGetArgs> inspectJob) {
            this.inspectJob = inspectJob;
            return this;
        }

        public Builder inspectJob(@Nullable PreventionJobTriggerInspectJobGetArgs inspectJob) {
            this.inspectJob = Output.ofNullable(inspectJob);
            return this;
        }

        public Builder lastRunTime(@Nullable Output<String> lastRunTime) {
            this.lastRunTime = lastRunTime;
            return this;
        }

        public Builder lastRunTime(@Nullable String lastRunTime) {
            this.lastRunTime = Output.ofNullable(lastRunTime);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder parent(@Nullable String parent) {
            this.parent = Output.ofNullable(parent);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder triggers(@Nullable Output<List<PreventionJobTriggerTriggerGetArgs>> triggers) {
            this.triggers = triggers;
            return this;
        }

        public Builder triggers(@Nullable List<PreventionJobTriggerTriggerGetArgs> triggers) {
            this.triggers = Output.ofNullable(triggers);
            return this;
        }
        public PreventionJobTriggerState build() {
            return new PreventionJobTriggerState(description, displayName, inspectJob, lastRunTime, name, parent, status, triggers);
        }
    }
}
