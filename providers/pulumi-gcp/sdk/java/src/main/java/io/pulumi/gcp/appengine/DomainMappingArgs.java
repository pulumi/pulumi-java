// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.appengine.inputs.DomainMappingSslSettingsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainMappingArgs Empty = new DomainMappingArgs();

    /**
     * Relative name of the domain serving the application. Example: example.com.
     * 
     */
    @InputImport(name="domainName", required=true)
      private final Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName;
    }

    /**
     * Whether the domain creation should override any existing mappings for this domain.
     * By default, overrides are rejected.
     * Default value is `STRICT`.
     * Possible values are `STRICT` and `OVERRIDE`.
     * 
     */
    @InputImport(name="overrideStrategy")
      private final @Nullable Output<String> overrideStrategy;

    public Output<String> getOverrideStrategy() {
        return this.overrideStrategy == null ? Output.empty() : this.overrideStrategy;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * Structure is documented below.
     * 
     */
    @InputImport(name="sslSettings")
      private final @Nullable Output<DomainMappingSslSettingsArgs> sslSettings;

    public Output<DomainMappingSslSettingsArgs> getSslSettings() {
        return this.sslSettings == null ? Output.empty() : this.sslSettings;
    }

    public DomainMappingArgs(
        Output<String> domainName,
        @Nullable Output<String> overrideStrategy,
        @Nullable Output<String> project,
        @Nullable Output<DomainMappingSslSettingsArgs> sslSettings) {
        this.domainName = Objects.requireNonNull(domainName, "expected parameter 'domainName' to be non-null");
        this.overrideStrategy = overrideStrategy;
        this.project = project;
        this.sslSettings = sslSettings;
    }

    private DomainMappingArgs() {
        this.domainName = Output.empty();
        this.overrideStrategy = Output.empty();
        this.project = Output.empty();
        this.sslSettings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> domainName;
        private @Nullable Output<String> overrideStrategy;
        private @Nullable Output<String> project;
        private @Nullable Output<DomainMappingSslSettingsArgs> sslSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.overrideStrategy = defaults.overrideStrategy;
    	      this.project = defaults.project;
    	      this.sslSettings = defaults.sslSettings;
        }

        public Builder domainName(Output<String> domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }

        public Builder domainName(String domainName) {
            this.domainName = Output.of(Objects.requireNonNull(domainName));
            return this;
        }

        public Builder overrideStrategy(@Nullable Output<String> overrideStrategy) {
            this.overrideStrategy = overrideStrategy;
            return this;
        }

        public Builder overrideStrategy(@Nullable String overrideStrategy) {
            this.overrideStrategy = Output.ofNullable(overrideStrategy);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder sslSettings(@Nullable Output<DomainMappingSslSettingsArgs> sslSettings) {
            this.sslSettings = sslSettings;
            return this;
        }

        public Builder sslSettings(@Nullable DomainMappingSslSettingsArgs sslSettings) {
            this.sslSettings = Output.ofNullable(sslSettings);
            return this;
        }
        public DomainMappingArgs build() {
            return new DomainMappingArgs(domainName, overrideStrategy, project, sslSettings);
        }
    }
}
