// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.BackendServiceSignedUrlKeyArgs;
import io.pulumi.gcp.compute.inputs.BackendServiceSignedUrlKeyState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A key for signing Cloud CDN signed URLs for Backend Services.
 * 
 * 
 * To get more information about BackendServiceSignedUrlKey, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices)
 * * How-to Guides
 *     * [Using Signed URLs](https://cloud.google.com/cdn/docs/using-signed-urls/)
 * 
 * > **Warning:** All arguments including `key_value` will be stored in the raw
 * state as plain-text.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Backend Service Signed Url Key
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 * 
 * const urlSignature = new random.RandomId("urlSignature", {byteLength: 16});
 * const webserver = new gcp.compute.InstanceTemplate("webserver", {
 *     machineType: "e2-medium",
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     disks: [{
 *         sourceImage: "debian-cloud/debian-9",
 *         autoDelete: true,
 *         boot: true,
 *     }],
 * });
 * const webservers = new gcp.compute.InstanceGroupManager("webservers", {
 *     versions: [{
 *         instanceTemplate: webserver.id,
 *         name: "primary",
 *     }],
 *     baseInstanceName: "webserver",
 *     zone: "us-central1-f",
 *     targetSize: 1,
 * });
 * const _default = new gcp.compute.HttpHealthCheck("default", {
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const exampleBackend = new gcp.compute.BackendService("exampleBackend", {
 *     description: "Our company website",
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     enableCdn: true,
 *     backends: [{
 *         group: webservers.instanceGroup,
 *     }],
 *     healthChecks: [_default.id],
 * });
 * const backendKey = new gcp.compute.BackendServiceSignedUrlKey("backendKey", {
 *     keyValue: urlSignature.b64Url,
 *     backendService: exampleBackend.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * import pulumi_random as random
 * 
 * url_signature = random.RandomId("urlSignature", byte_length=16)
 * webserver = gcp.compute.InstanceTemplate("webserver",
 *     machine_type="e2-medium",
 *     network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
 *         network="default",
 *     )],
 *     disks=[gcp.compute.InstanceTemplateDiskArgs(
 *         source_image="debian-cloud/debian-9",
 *         auto_delete=True,
 *         boot=True,
 *     )])
 * webservers = gcp.compute.InstanceGroupManager("webservers",
 *     versions=[gcp.compute.InstanceGroupManagerVersionArgs(
 *         instance_template=webserver.id,
 *         name="primary",
 *     )],
 *     base_instance_name="webserver",
 *     zone="us-central1-f",
 *     target_size=1)
 * default = gcp.compute.HttpHealthCheck("default",
 *     request_path="/",
 *     check_interval_sec=1,
 *     timeout_sec=1)
 * example_backend = gcp.compute.BackendService("exampleBackend",
 *     description="Our company website",
 *     port_name="http",
 *     protocol="HTTP",
 *     timeout_sec=10,
 *     enable_cdn=True,
 *     backends=[gcp.compute.BackendServiceBackendArgs(
 *         group=webservers.instance_group,
 *     )],
 *     health_checks=[default.id])
 * backend_key = gcp.compute.BackendServiceSignedUrlKey("backendKey",
 *     key_value=url_signature.b64_url,
 *     backend_service=example_backend.name)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * using Random = Pulumi.Random;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var urlSignature = new Random.RandomId("urlSignature", new Random.RandomIdArgs
 *         {
 *             ByteLength = 16,
 *         });
 *         var webserver = new Gcp.Compute.InstanceTemplate("webserver", new Gcp.Compute.InstanceTemplateArgs
 *         {
 *             MachineType = "e2-medium",
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceTemplateNetworkInterfaceArgs
 *                 {
 *                     Network = "default",
 *                 },
 *             },
 *             Disks = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceTemplateDiskArgs
 *                 {
 *                     SourceImage = "debian-cloud/debian-9",
 *                     AutoDelete = true,
 *                     Boot = true,
 *                 },
 *             },
 *         });
 *         var webservers = new Gcp.Compute.InstanceGroupManager("webservers", new Gcp.Compute.InstanceGroupManagerArgs
 *         {
 *             Versions = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceGroupManagerVersionArgs
 *                 {
 *                     InstanceTemplate = webserver.Id,
 *                     Name = "primary",
 *                 },
 *             },
 *             BaseInstanceName = "webserver",
 *             Zone = "us-central1-f",
 *             TargetSize = 1,
 *         });
 *         var @default = new Gcp.Compute.HttpHealthCheck("default", new Gcp.Compute.HttpHealthCheckArgs
 *         {
 *             RequestPath = "/",
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *         });
 *         var exampleBackend = new Gcp.Compute.BackendService("exampleBackend", new Gcp.Compute.BackendServiceArgs
 *         {
 *             Description = "Our company website",
 *             PortName = "http",
 *             Protocol = "HTTP",
 *             TimeoutSec = 10,
 *             EnableCdn = true,
 *             Backends = 
 *             {
 *                 new Gcp.Compute.Inputs.BackendServiceBackendArgs
 *                 {
 *                     Group = webservers.InstanceGroup,
 *                 },
 *             },
 *             HealthChecks = 
 *             {
 *                 @default.Id,
 *             },
 *         });
 *         var backendKey = new Gcp.Compute.BackendServiceSignedUrlKey("backendKey", new Gcp.Compute.BackendServiceSignedUrlKeyArgs
 *         {
 *             KeyValue = urlSignature.B64Url,
 *             BackendService = exampleBackend.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		urlSignature, err := random.NewRandomId(ctx, "urlSignature", &random.RandomIdArgs{
 * 			ByteLength: pulumi.Int(16),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		webserver, err := compute.NewInstanceTemplate(ctx, "webserver", &compute.InstanceTemplateArgs{
 * 			MachineType: pulumi.String("e2-medium"),
 * 			NetworkInterfaces: compute.InstanceTemplateNetworkInterfaceArray{
 * 				&compute.InstanceTemplateNetworkInterfaceArgs{
 * 					Network: pulumi.String("default"),
 * 				},
 * 			},
 * 			Disks: compute.InstanceTemplateDiskArray{
 * 				&compute.InstanceTemplateDiskArgs{
 * 					SourceImage: pulumi.String("debian-cloud/debian-9"),
 * 					AutoDelete:  pulumi.Bool(true),
 * 					Boot:        pulumi.Bool(true),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		webservers, err := compute.NewInstanceGroupManager(ctx, "webservers", &compute.InstanceGroupManagerArgs{
 * 			Versions: compute.InstanceGroupManagerVersionArray{
 * 				&compute.InstanceGroupManagerVersionArgs{
 * 					InstanceTemplate: webserver.ID(),
 * 					Name:             pulumi.String("primary"),
 * 				},
 * 			},
 * 			BaseInstanceName: pulumi.String("webserver"),
 * 			Zone:             pulumi.String("us-central1-f"),
 * 			TargetSize:       pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewHttpHealthCheck(ctx, "default", &compute.HttpHealthCheckArgs{
 * 			RequestPath:      pulumi.String("/"),
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleBackend, err := compute.NewBackendService(ctx, "exampleBackend", &compute.BackendServiceArgs{
 * 			Description: pulumi.String("Our company website"),
 * 			PortName:    pulumi.String("http"),
 * 			Protocol:    pulumi.String("HTTP"),
 * 			TimeoutSec:  pulumi.Int(10),
 * 			EnableCdn:   pulumi.Bool(true),
 * 			Backends: compute.BackendServiceBackendArray{
 * 				&compute.BackendServiceBackendArgs{
 * 					Group: webservers.InstanceGroup,
 * 				},
 * 			},
 * 			HealthChecks: pulumi.String{
 * 				_default.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewBackendServiceSignedUrlKey(ctx, "backendKey", &compute.BackendServiceSignedUrlKeyArgs{
 * 			KeyValue:       urlSignature.B64Url,
 * 			BackendService: exampleBackend.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * This resource does not support import. 
 */
@ResourceType(type="gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey")
public class BackendServiceSignedUrlKey extends io.pulumi.resources.CustomResource {
    /**
     * The backend service this signed URL key belongs.
     * 
     */
    @Export(name="backendService", type=String.class, parameters={})
    private Output<String> backendService;

    /**
     * @return The backend service this signed URL key belongs.
     * 
     */
    public Output<String> getBackendService() {
        return this.backendService;
    }
    /**
     * 128-bit key value used for signing the URL. The key value must be a
     * valid RFC 4648 Section 5 base64url encoded string.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Export(name="keyValue", type=String.class, parameters={})
    private Output<String> keyValue;

    /**
     * @return 128-bit key value used for signing the URL. The key value must be a
     * valid RFC 4648 Section 5 base64url encoded string.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> getKeyValue() {
        return this.keyValue;
    }
    /**
     * Name of the signed URL key.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the signed URL key.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendServiceSignedUrlKey(String name) {
        this(name, BackendServiceSignedUrlKeyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendServiceSignedUrlKey(String name, BackendServiceSignedUrlKeyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendServiceSignedUrlKey(String name, BackendServiceSignedUrlKeyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey", name, args == null ? BackendServiceSignedUrlKeyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private BackendServiceSignedUrlKey(String name, Output<String> id, @Nullable BackendServiceSignedUrlKeyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendServiceSignedUrlKey get(String name, Output<String> id, @Nullable BackendServiceSignedUrlKeyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new BackendServiceSignedUrlKey(name, id, state, options);
    }
}
