// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.firestore;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DocumentArgs extends io.pulumi.resources.ResourceArgs {

    public static final DocumentArgs Empty = new DocumentArgs();

    /**
     * The collection ID, relative to database. For example: chatrooms or chatrooms/my-document/private-messages.
     * 
     */
    @Import(name="collection", required=true)
      private final Output<String> collection;

    public Output<String> collection() {
        return this.collection;
    }

    /**
     * The Firestore database id. Defaults to `"(default)"`.
     * 
     */
    @Import(name="database")
      private final @Nullable Output<String> database;

    public Output<String> database() {
        return this.database == null ? Codegen.empty() : this.database;
    }

    /**
     * The client-assigned document ID to use for this document during creation.
     * 
     */
    @Import(name="documentId", required=true)
      private final Output<String> documentId;

    public Output<String> documentId() {
        return this.documentId;
    }

    /**
     * The document's [fields](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents) formated as a json string.
     * 
     */
    @Import(name="fields", required=true)
      private final Output<String> fields;

    public Output<String> fields() {
        return this.fields;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    public DocumentArgs(
        Output<String> collection,
        @Nullable Output<String> database,
        Output<String> documentId,
        Output<String> fields,
        @Nullable Output<String> project) {
        this.collection = Objects.requireNonNull(collection, "expected parameter 'collection' to be non-null");
        this.database = database;
        this.documentId = Objects.requireNonNull(documentId, "expected parameter 'documentId' to be non-null");
        this.fields = Objects.requireNonNull(fields, "expected parameter 'fields' to be non-null");
        this.project = project;
    }

    private DocumentArgs() {
        this.collection = Codegen.empty();
        this.database = Codegen.empty();
        this.documentId = Codegen.empty();
        this.fields = Codegen.empty();
        this.project = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> collection;
        private @Nullable Output<String> database;
        private Output<String> documentId;
        private Output<String> fields;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collection = defaults.collection;
    	      this.database = defaults.database;
    	      this.documentId = defaults.documentId;
    	      this.fields = defaults.fields;
    	      this.project = defaults.project;
        }

        public Builder collection(Output<String> collection) {
            this.collection = Objects.requireNonNull(collection);
            return this;
        }
        public Builder collection(String collection) {
            this.collection = Output.of(Objects.requireNonNull(collection));
            return this;
        }
        public Builder database(@Nullable Output<String> database) {
            this.database = database;
            return this;
        }
        public Builder database(@Nullable String database) {
            this.database = Codegen.ofNullable(database);
            return this;
        }
        public Builder documentId(Output<String> documentId) {
            this.documentId = Objects.requireNonNull(documentId);
            return this;
        }
        public Builder documentId(String documentId) {
            this.documentId = Output.of(Objects.requireNonNull(documentId));
            return this;
        }
        public Builder fields(Output<String> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(String fields) {
            this.fields = Output.of(Objects.requireNonNull(fields));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }        public DocumentArgs build() {
            return new DocumentArgs(collection, database, documentId, fields, project);
        }
    }
}
