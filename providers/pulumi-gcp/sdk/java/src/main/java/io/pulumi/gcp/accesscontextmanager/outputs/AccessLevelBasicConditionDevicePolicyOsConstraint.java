// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class AccessLevelBasicConditionDevicePolicyOsConstraint {
    /**
     * The minimum allowed OS version. If not set, any version
     * of this OS satisfies the constraint.
     * Format: "major.minor.patch" such as "10.5.301", "9.2.1".
     * 
     */
    private final @Nullable String minimumVersion;
    /**
     * The operating system type of the device.
     * Possible values are `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, `DESKTOP_CHROME_OS`, `ANDROID`, and `IOS`.
     * 
     */
    private final String osType;
    /**
     * If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
     * 
     */
    private final @Nullable Boolean requireVerifiedChromeOs;

    @OutputCustomType.Constructor({"minimumVersion","osType","requireVerifiedChromeOs"})
    private AccessLevelBasicConditionDevicePolicyOsConstraint(
        @Nullable String minimumVersion,
        String osType,
        @Nullable Boolean requireVerifiedChromeOs) {
        this.minimumVersion = minimumVersion;
        this.osType = Objects.requireNonNull(osType);
        this.requireVerifiedChromeOs = requireVerifiedChromeOs;
    }

    /**
     * The minimum allowed OS version. If not set, any version
     * of this OS satisfies the constraint.
     * Format: "major.minor.patch" such as "10.5.301", "9.2.1".
     * 
     */
    public Optional<String> getMinimumVersion() {
        return Optional.ofNullable(this.minimumVersion);
    }
    /**
     * The operating system type of the device.
     * Possible values are `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, `DESKTOP_CHROME_OS`, `ANDROID`, and `IOS`.
     * 
     */
    public String getOsType() {
        return this.osType;
    }
    /**
     * If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
     * 
     */
    public Optional<Boolean> getRequireVerifiedChromeOs() {
        return Optional.ofNullable(this.requireVerifiedChromeOs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessLevelBasicConditionDevicePolicyOsConstraint defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String minimumVersion;
        private String osType;
        private @Nullable Boolean requireVerifiedChromeOs;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessLevelBasicConditionDevicePolicyOsConstraint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.minimumVersion = defaults.minimumVersion;
    	      this.osType = defaults.osType;
    	      this.requireVerifiedChromeOs = defaults.requireVerifiedChromeOs;
        }

        public Builder setMinimumVersion(@Nullable String minimumVersion) {
            this.minimumVersion = minimumVersion;
            return this;
        }

        public Builder setOsType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }

        public Builder setRequireVerifiedChromeOs(@Nullable Boolean requireVerifiedChromeOs) {
            this.requireVerifiedChromeOs = requireVerifiedChromeOs;
            return this;
        }

        public AccessLevelBasicConditionDevicePolicyOsConstraint build() {
            return new AccessLevelBasicConditionDevicePolicyOsConstraint(minimumVersion, osType, requireVerifiedChromeOs);
        }
    }
}
