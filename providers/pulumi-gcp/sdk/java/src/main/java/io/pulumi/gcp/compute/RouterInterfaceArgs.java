// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceArgs Empty = new RouterInterfaceArgs();

    @InputImport(name="interconnectAttachment")
    private final @Nullable Input<String> interconnectAttachment;

    public Input<String> getInterconnectAttachment() {
        return this.interconnectAttachment == null ? Input.empty() : this.interconnectAttachment;
    }

    @InputImport(name="ipRange")
    private final @Nullable Input<String> ipRange;

    public Input<String> getIpRange() {
        return this.ipRange == null ? Input.empty() : this.ipRange;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    @InputImport(name="router", required=true)
    private final Input<String> router;

    public Input<String> getRouter() {
        return this.router;
    }

    @InputImport(name="vpnTunnel")
    private final @Nullable Input<String> vpnTunnel;

    public Input<String> getVpnTunnel() {
        return this.vpnTunnel == null ? Input.empty() : this.vpnTunnel;
    }

    public RouterInterfaceArgs(
        @Nullable Input<String> interconnectAttachment,
        @Nullable Input<String> ipRange,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        Input<String> router,
        @Nullable Input<String> vpnTunnel) {
        this.interconnectAttachment = interconnectAttachment;
        this.ipRange = ipRange;
        this.name = name;
        this.project = project;
        this.region = region;
        this.router = Objects.requireNonNull(router, "expected parameter 'router' to be non-null");
        this.vpnTunnel = vpnTunnel;
    }

    private RouterInterfaceArgs() {
        this.interconnectAttachment = Input.empty();
        this.ipRange = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.router = Input.empty();
        this.vpnTunnel = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> interconnectAttachment;
        private @Nullable Input<String> ipRange;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private Input<String> router;
        private @Nullable Input<String> vpnTunnel;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interconnectAttachment = defaults.interconnectAttachment;
    	      this.ipRange = defaults.ipRange;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
    	      this.vpnTunnel = defaults.vpnTunnel;
        }

        public Builder setInterconnectAttachment(@Nullable Input<String> interconnectAttachment) {
            this.interconnectAttachment = interconnectAttachment;
            return this;
        }

        public Builder setInterconnectAttachment(@Nullable String interconnectAttachment) {
            this.interconnectAttachment = Input.ofNullable(interconnectAttachment);
            return this;
        }

        public Builder setIpRange(@Nullable Input<String> ipRange) {
            this.ipRange = ipRange;
            return this;
        }

        public Builder setIpRange(@Nullable String ipRange) {
            this.ipRange = Input.ofNullable(ipRange);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setRouter(Input<String> router) {
            this.router = Objects.requireNonNull(router);
            return this;
        }

        public Builder setRouter(String router) {
            this.router = Input.of(Objects.requireNonNull(router));
            return this;
        }

        public Builder setVpnTunnel(@Nullable Input<String> vpnTunnel) {
            this.vpnTunnel = vpnTunnel;
            return this;
        }

        public Builder setVpnTunnel(@Nullable String vpnTunnel) {
            this.vpnTunnel = Input.ofNullable(vpnTunnel);
            return this;
        }

        public RouterInterfaceArgs build() {
            return new RouterInterfaceArgs(interconnectAttachment, ipRange, name, project, region, router, vpnTunnel);
        }
    }
}
