// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.serviceAccount.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class KeyState extends io.pulumi.resources.ResourceArgs {

    public static final KeyState Empty = new KeyState();

    /**
     * Arbitrary map of values that, when changed, will trigger a new key to be generated.
     * 
     */
    @Import(name="keepers")
      private final @Nullable Output<Map<String,Object>> keepers;

    public Output<Map<String,Object>> getKeepers() {
        return this.keepers == null ? Output.empty() : this.keepers;
    }

    /**
     * The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
     * Valid values are listed at
     * [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
     * (only used on create)
     * 
     */
    @Import(name="keyAlgorithm")
      private final @Nullable Output<String> keyAlgorithm;

    public Output<String> getKeyAlgorithm() {
        return this.keyAlgorithm == null ? Output.empty() : this.keyAlgorithm;
    }

    /**
     * The name used for this key pair
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
     * service account keys through the CLI or web console. This is only populated when creating a new key.
     * 
     */
    @Import(name="privateKey")
      private final @Nullable Output<String> privateKey;

    public Output<String> getPrivateKey() {
        return this.privateKey == null ? Output.empty() : this.privateKey;
    }

    /**
     * The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
     * 
     */
    @Import(name="privateKeyType")
      private final @Nullable Output<String> privateKeyType;

    public Output<String> getPrivateKeyType() {
        return this.privateKeyType == null ? Output.empty() : this.privateKeyType;
    }

    /**
     * The public key, base64 encoded
     * 
     */
    @Import(name="publicKey")
      private final @Nullable Output<String> publicKey;

    public Output<String> getPublicKey() {
        return this.publicKey == null ? Output.empty() : this.publicKey;
    }

    /**
     * Public key data to create a service account key for given service account. The expected format for this field is a base64 encoded X509_PEM and it conflicts with `public_key_type` and `private_key_type`.
     * 
     */
    @Import(name="publicKeyData")
      private final @Nullable Output<String> publicKeyData;

    public Output<String> getPublicKeyData() {
        return this.publicKeyData == null ? Output.empty() : this.publicKeyData;
    }

    /**
     * The output format of the public key requested. TYPE_X509_PEM_FILE is the default output format.
     * 
     */
    @Import(name="publicKeyType")
      private final @Nullable Output<String> publicKeyType;

    public Output<String> getPublicKeyType() {
        return this.publicKeyType == null ? Output.empty() : this.publicKeyType;
    }

    /**
     * The Service account id of the Key. This can be a string in the format
     * `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
     * unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
     * 
     */
    @Import(name="serviceAccountId")
      private final @Nullable Output<String> serviceAccountId;

    public Output<String> getServiceAccountId() {
        return this.serviceAccountId == null ? Output.empty() : this.serviceAccountId;
    }

    /**
     * The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Import(name="validAfter")
      private final @Nullable Output<String> validAfter;

    public Output<String> getValidAfter() {
        return this.validAfter == null ? Output.empty() : this.validAfter;
    }

    /**
     * The key can be used before this timestamp.
     * A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Import(name="validBefore")
      private final @Nullable Output<String> validBefore;

    public Output<String> getValidBefore() {
        return this.validBefore == null ? Output.empty() : this.validBefore;
    }

    public KeyState(
        @Nullable Output<Map<String,Object>> keepers,
        @Nullable Output<String> keyAlgorithm,
        @Nullable Output<String> name,
        @Nullable Output<String> privateKey,
        @Nullable Output<String> privateKeyType,
        @Nullable Output<String> publicKey,
        @Nullable Output<String> publicKeyData,
        @Nullable Output<String> publicKeyType,
        @Nullable Output<String> serviceAccountId,
        @Nullable Output<String> validAfter,
        @Nullable Output<String> validBefore) {
        this.keepers = keepers;
        this.keyAlgorithm = keyAlgorithm;
        this.name = name;
        this.privateKey = privateKey;
        this.privateKeyType = privateKeyType;
        this.publicKey = publicKey;
        this.publicKeyData = publicKeyData;
        this.publicKeyType = publicKeyType;
        this.serviceAccountId = serviceAccountId;
        this.validAfter = validAfter;
        this.validBefore = validBefore;
    }

    private KeyState() {
        this.keepers = Output.empty();
        this.keyAlgorithm = Output.empty();
        this.name = Output.empty();
        this.privateKey = Output.empty();
        this.privateKeyType = Output.empty();
        this.publicKey = Output.empty();
        this.publicKeyData = Output.empty();
        this.publicKeyType = Output.empty();
        this.serviceAccountId = Output.empty();
        this.validAfter = Output.empty();
        this.validBefore = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,Object>> keepers;
        private @Nullable Output<String> keyAlgorithm;
        private @Nullable Output<String> name;
        private @Nullable Output<String> privateKey;
        private @Nullable Output<String> privateKeyType;
        private @Nullable Output<String> publicKey;
        private @Nullable Output<String> publicKeyData;
        private @Nullable Output<String> publicKeyType;
        private @Nullable Output<String> serviceAccountId;
        private @Nullable Output<String> validAfter;
        private @Nullable Output<String> validBefore;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keepers = defaults.keepers;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.name = defaults.name;
    	      this.privateKey = defaults.privateKey;
    	      this.privateKeyType = defaults.privateKeyType;
    	      this.publicKey = defaults.publicKey;
    	      this.publicKeyData = defaults.publicKeyData;
    	      this.publicKeyType = defaults.publicKeyType;
    	      this.serviceAccountId = defaults.serviceAccountId;
    	      this.validAfter = defaults.validAfter;
    	      this.validBefore = defaults.validBefore;
        }

        public Builder keepers(@Nullable Output<Map<String,Object>> keepers) {
            this.keepers = keepers;
            return this;
        }

        public Builder keepers(@Nullable Map<String,Object> keepers) {
            this.keepers = Output.ofNullable(keepers);
            return this;
        }

        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }

        public Builder keyAlgorithm(@Nullable String keyAlgorithm) {
            this.keyAlgorithm = Output.ofNullable(keyAlgorithm);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder privateKey(@Nullable Output<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = Output.ofNullable(privateKey);
            return this;
        }

        public Builder privateKeyType(@Nullable Output<String> privateKeyType) {
            this.privateKeyType = privateKeyType;
            return this;
        }

        public Builder privateKeyType(@Nullable String privateKeyType) {
            this.privateKeyType = Output.ofNullable(privateKeyType);
            return this;
        }

        public Builder publicKey(@Nullable Output<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Output.ofNullable(publicKey);
            return this;
        }

        public Builder publicKeyData(@Nullable Output<String> publicKeyData) {
            this.publicKeyData = publicKeyData;
            return this;
        }

        public Builder publicKeyData(@Nullable String publicKeyData) {
            this.publicKeyData = Output.ofNullable(publicKeyData);
            return this;
        }

        public Builder publicKeyType(@Nullable Output<String> publicKeyType) {
            this.publicKeyType = publicKeyType;
            return this;
        }

        public Builder publicKeyType(@Nullable String publicKeyType) {
            this.publicKeyType = Output.ofNullable(publicKeyType);
            return this;
        }

        public Builder serviceAccountId(@Nullable Output<String> serviceAccountId) {
            this.serviceAccountId = serviceAccountId;
            return this;
        }

        public Builder serviceAccountId(@Nullable String serviceAccountId) {
            this.serviceAccountId = Output.ofNullable(serviceAccountId);
            return this;
        }

        public Builder validAfter(@Nullable Output<String> validAfter) {
            this.validAfter = validAfter;
            return this;
        }

        public Builder validAfter(@Nullable String validAfter) {
            this.validAfter = Output.ofNullable(validAfter);
            return this;
        }

        public Builder validBefore(@Nullable Output<String> validBefore) {
            this.validBefore = validBefore;
            return this;
        }

        public Builder validBefore(@Nullable String validBefore) {
            this.validBefore = Output.ofNullable(validBefore);
            return this;
        }
        public KeyState build() {
            return new KeyState(keepers, keyAlgorithm, name, privateKey, privateKeyType, publicKey, publicKeyData, publicKeyType, serviceAccountId, validAfter, validBefore);
        }
    }
}
