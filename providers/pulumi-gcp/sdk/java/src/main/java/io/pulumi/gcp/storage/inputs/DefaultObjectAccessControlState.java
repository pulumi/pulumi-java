// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.storage.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.storage.inputs.DefaultObjectAccessControlProjectTeamGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DefaultObjectAccessControlState extends io.pulumi.resources.ResourceArgs {

    public static final DefaultObjectAccessControlState Empty = new DefaultObjectAccessControlState();

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="bucket")
      private final @Nullable Output<String> bucket;

    public Output<String> getBucket() {
        return this.bucket == null ? Output.empty() : this.bucket;
    }

    /**
     * The domain associated with the entity.
     * 
     */
    @Import(name="domain")
      private final @Nullable Output<String> domain;

    public Output<String> getDomain() {
        return this.domain == null ? Output.empty() : this.domain;
    }

    /**
     * The email address associated with the entity.
     * 
     */
    @Import(name="email")
      private final @Nullable Output<String> email;

    public Output<String> getEmail() {
        return this.email == null ? Output.empty() : this.email;
    }

    /**
     * The entity holding the permission, in one of the following forms:
     * * user-{{userId}}
     * * user-{{email}} (such as "user-liz@example.com")
     * * group-{{groupId}}
     * * group-{{email}} (such as "group-example@googlegroups.com")
     * * domain-{{domain}} (such as "domain-example.com")
     * * project-team-{{projectId}}
     * * allUsers
     * * allAuthenticatedUsers
     * 
     */
    @Import(name="entity")
      private final @Nullable Output<String> entity;

    public Output<String> getEntity() {
        return this.entity == null ? Output.empty() : this.entity;
    }

    /**
     * The ID for the entity
     * 
     */
    @Import(name="entityId")
      private final @Nullable Output<String> entityId;

    public Output<String> getEntityId() {
        return this.entityId == null ? Output.empty() : this.entityId;
    }

    /**
     * The content generation of the object, if applied to an object.
     * 
     */
    @Import(name="generation")
      private final @Nullable Output<Integer> generation;

    public Output<Integer> getGeneration() {
        return this.generation == null ? Output.empty() : this.generation;
    }

    /**
     * The name of the object, if applied to an object.
     * 
     */
    @Import(name="object")
      private final @Nullable Output<String> object;

    public Output<String> getObject() {
        return this.object == null ? Output.empty() : this.object;
    }

    /**
     * The project team associated with the entity
     * 
     */
    @Import(name="projectTeams")
      private final @Nullable Output<List<DefaultObjectAccessControlProjectTeamGetArgs>> projectTeams;

    public Output<List<DefaultObjectAccessControlProjectTeamGetArgs>> getProjectTeams() {
        return this.projectTeams == null ? Output.empty() : this.projectTeams;
    }

    /**
     * The access permission for the entity.
     * Possible values are `OWNER` and `READER`.
     * 
     */
    @Import(name="role")
      private final @Nullable Output<String> role;

    public Output<String> getRole() {
        return this.role == null ? Output.empty() : this.role;
    }

    public DefaultObjectAccessControlState(
        @Nullable Output<String> bucket,
        @Nullable Output<String> domain,
        @Nullable Output<String> email,
        @Nullable Output<String> entity,
        @Nullable Output<String> entityId,
        @Nullable Output<Integer> generation,
        @Nullable Output<String> object,
        @Nullable Output<List<DefaultObjectAccessControlProjectTeamGetArgs>> projectTeams,
        @Nullable Output<String> role) {
        this.bucket = bucket;
        this.domain = domain;
        this.email = email;
        this.entity = entity;
        this.entityId = entityId;
        this.generation = generation;
        this.object = object;
        this.projectTeams = projectTeams;
        this.role = role;
    }

    private DefaultObjectAccessControlState() {
        this.bucket = Output.empty();
        this.domain = Output.empty();
        this.email = Output.empty();
        this.entity = Output.empty();
        this.entityId = Output.empty();
        this.generation = Output.empty();
        this.object = Output.empty();
        this.projectTeams = Output.empty();
        this.role = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefaultObjectAccessControlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> bucket;
        private @Nullable Output<String> domain;
        private @Nullable Output<String> email;
        private @Nullable Output<String> entity;
        private @Nullable Output<String> entityId;
        private @Nullable Output<Integer> generation;
        private @Nullable Output<String> object;
        private @Nullable Output<List<DefaultObjectAccessControlProjectTeamGetArgs>> projectTeams;
        private @Nullable Output<String> role;

        public Builder() {
    	      // Empty
        }

        public Builder(DefaultObjectAccessControlState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.domain = defaults.domain;
    	      this.email = defaults.email;
    	      this.entity = defaults.entity;
    	      this.entityId = defaults.entityId;
    	      this.generation = defaults.generation;
    	      this.object = defaults.object;
    	      this.projectTeams = defaults.projectTeams;
    	      this.role = defaults.role;
        }

        public Builder bucket(@Nullable Output<String> bucket) {
            this.bucket = bucket;
            return this;
        }

        public Builder bucket(@Nullable String bucket) {
            this.bucket = Output.ofNullable(bucket);
            return this;
        }

        public Builder domain(@Nullable Output<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder domain(@Nullable String domain) {
            this.domain = Output.ofNullable(domain);
            return this;
        }

        public Builder email(@Nullable Output<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(@Nullable String email) {
            this.email = Output.ofNullable(email);
            return this;
        }

        public Builder entity(@Nullable Output<String> entity) {
            this.entity = entity;
            return this;
        }

        public Builder entity(@Nullable String entity) {
            this.entity = Output.ofNullable(entity);
            return this;
        }

        public Builder entityId(@Nullable Output<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(@Nullable String entityId) {
            this.entityId = Output.ofNullable(entityId);
            return this;
        }

        public Builder generation(@Nullable Output<Integer> generation) {
            this.generation = generation;
            return this;
        }

        public Builder generation(@Nullable Integer generation) {
            this.generation = Output.ofNullable(generation);
            return this;
        }

        public Builder object(@Nullable Output<String> object) {
            this.object = object;
            return this;
        }

        public Builder object(@Nullable String object) {
            this.object = Output.ofNullable(object);
            return this;
        }

        public Builder projectTeams(@Nullable Output<List<DefaultObjectAccessControlProjectTeamGetArgs>> projectTeams) {
            this.projectTeams = projectTeams;
            return this;
        }

        public Builder projectTeams(@Nullable List<DefaultObjectAccessControlProjectTeamGetArgs> projectTeams) {
            this.projectTeams = Output.ofNullable(projectTeams);
            return this;
        }

        public Builder role(@Nullable Output<String> role) {
            this.role = role;
            return this;
        }

        public Builder role(@Nullable String role) {
            this.role = Output.ofNullable(role);
            return this;
        }
        public DefaultObjectAccessControlState build() {
            return new DefaultObjectAccessControlState(bucket, domain, email, entity, entityId, generation, object, projectTeams, role);
        }
    }
}
