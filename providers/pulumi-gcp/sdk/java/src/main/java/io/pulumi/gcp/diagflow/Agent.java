// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.diagflow.AgentArgs;
import io.pulumi.gcp.diagflow.inputs.AgentState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A Dialogflow agent is a virtual agent that handles conversations with your end-users. It is a natural language
 * understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio
 * during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow
 * agent to handle the types of conversations required for your system.
 * 
 * To get more information about Agent, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/docs/reference/rest/v2/projects/agent)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/docs/)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Agent can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:diagflow/agent:Agent default {{project}}
 * ```
 * 
 */
@ResourceType(type="gcp:diagflow/agent:Agent")
public class Agent extends io.pulumi.resources.CustomResource {
    /**
     * API version displayed in Dialogflow console. If not specified, V2 API is assumed. Clients are free to query
     * different service endpoints for different API versions. However, bots connectors and webhook calls will follow
     * the specified API version.
     * * API_VERSION_V1: Legacy V1 API.
     * * API_VERSION_V2: V2 API.
     * * API_VERSION_V2_BETA_1: V2beta1 API.
     *   Possible values are `API_VERSION_V1`, `API_VERSION_V2`, and `API_VERSION_V2_BETA_1`.
     * 
     */
    @OutputExport(name="apiVersion", type=String.class, parameters={})
    private Output<String> apiVersion;

    /**
     * @return API version displayed in Dialogflow console. If not specified, V2 API is assumed. Clients are free to query
     * different service endpoints for different API versions. However, bots connectors and webhook calls will follow
     * the specified API version.
     * * API_VERSION_V1: Legacy V1 API.
     * * API_VERSION_V2: V2 API.
     * * API_VERSION_V2_BETA_1: V2beta1 API.
     *   Possible values are `API_VERSION_V1`, `API_VERSION_V2`, and `API_VERSION_V2_BETA_1`.
     * 
     */
    public Output<String> getApiVersion() {
        return this.apiVersion;
    }
    /**
     * The URI of the agent's avatar, which are used throughout the Dialogflow console. When an image URL is entered
     * into this field, the Dialogflow will save the image in the backend. The address of the backend image returned
     * from the API will be shown in the [avatarUriBackend] field.
     * 
     */
    @OutputExport(name="avatarUri", type=String.class, parameters={})
    private Output</* @Nullable */ String> avatarUri;

    /**
     * @return The URI of the agent's avatar, which are used throughout the Dialogflow console. When an image URL is entered
     * into this field, the Dialogflow will save the image in the backend. The address of the backend image returned
     * from the API will be shown in the [avatarUriBackend] field.
     * 
     */
    public Output</* @Nullable */ String> getAvatarUri() {
        return this.avatarUri;
    }
    /**
     * The URI of the agent's avatar as returned from the API. Output only. To provide an image URL for the agent avatar, the
     * [avatarUri] field can be used.
     * 
     */
    @OutputExport(name="avatarUriBackend", type=String.class, parameters={})
    private Output<String> avatarUriBackend;

    /**
     * @return The URI of the agent's avatar as returned from the API. Output only. To provide an image URL for the agent avatar, the
     * [avatarUri] field can be used.
     * 
     */
    public Output<String> getAvatarUriBackend() {
        return this.avatarUriBackend;
    }
    /**
     * To filter out false positive results and still get variety in matched natural language inputs for your agent,
     * you can tune the machine learning classification threshold. If the returned score value is less than the threshold
     * value, then a fallback intent will be triggered or, if there are no fallback intents defined, no intent will be
     * triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the
     * default of 0.3 is used.
     * 
     */
    @OutputExport(name="classificationThreshold", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> classificationThreshold;

    /**
     * @return To filter out false positive results and still get variety in matched natural language inputs for your agent,
     * you can tune the machine learning classification threshold. If the returned score value is less than the threshold
     * value, then a fallback intent will be triggered or, if there are no fallback intents defined, no intent will be
     * triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the
     * default of 0.3 is used.
     * 
     */
    public Output</* @Nullable */ Double> getClassificationThreshold() {
        return this.classificationThreshold;
    }
    /**
     * The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/docs/reference/language)
     * for a list of the currently supported language codes. This field cannot be updated after creation.
     * 
     */
    @OutputExport(name="defaultLanguageCode", type=String.class, parameters={})
    private Output<String> defaultLanguageCode;

    /**
     * @return The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/docs/reference/language)
     * for a list of the currently supported language codes. This field cannot be updated after creation.
     * 
     */
    public Output<String> getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }
    /**
     * The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    @OutputExport(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The name of this agent.
     * 
     */
    @OutputExport(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The name of this agent.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Determines whether this agent should log conversation queries.
     * 
     */
    @OutputExport(name="enableLogging", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableLogging;

    /**
     * @return Determines whether this agent should log conversation queries.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableLogging() {
        return this.enableLogging;
    }
    /**
     * Determines how intents are detected from user queries.
     * * MATCH_MODE_HYBRID: Best for agents with a small number of examples in intents and/or wide use of templates
     *   syntax and composite entities.
     * * MATCH_MODE_ML_ONLY: Can be used for agents with a large number of examples in intents, especially the ones
     *   using @sys.any or very large developer entities.
     *   Possible values are `MATCH_MODE_HYBRID` and `MATCH_MODE_ML_ONLY`.
     * 
     */
    @OutputExport(name="matchMode", type=String.class, parameters={})
    private Output<String> matchMode;

    /**
     * @return Determines how intents are detected from user queries.
     * * MATCH_MODE_HYBRID: Best for agents with a small number of examples in intents and/or wide use of templates
     *   syntax and composite entities.
     * * MATCH_MODE_ML_ONLY: Can be used for agents with a large number of examples in intents, especially the ones
     *   using @sys.any or very large developer entities.
     *   Possible values are `MATCH_MODE_HYBRID` and `MATCH_MODE_ML_ONLY`.
     * 
     */
    public Output<String> getMatchMode() {
        return this.matchMode;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @OutputExport(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The list of all languages supported by this agent (except for the defaultLanguageCode).
     * 
     */
    @OutputExport(name="supportedLanguageCodes", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> supportedLanguageCodes;

    /**
     * @return The list of all languages supported by this agent (except for the defaultLanguageCode).
     * 
     */
    public Output</* @Nullable */ List<String>> getSupportedLanguageCodes() {
        return this.supportedLanguageCodes;
    }
    /**
     * The agent tier. If not specified, TIER_STANDARD is assumed.
     * * TIER_STANDARD: Standard tier.
     * * TIER_ENTERPRISE: Enterprise tier (Essentials).
     * * TIER_ENTERPRISE_PLUS: Enterprise tier (Plus).
     *   NOTE: Due to consistency issues, the provider will not read this field from the API. Drift is possible between
     *   the the provider state and Dialogflow if the agent tier is changed outside of the provider.
     * 
     */
    @OutputExport(name="tier", type=String.class, parameters={})
    private Output</* @Nullable */ String> tier;

    /**
     * @return The agent tier. If not specified, TIER_STANDARD is assumed.
     * * TIER_STANDARD: Standard tier.
     * * TIER_ENTERPRISE: Enterprise tier (Essentials).
     * * TIER_ENTERPRISE_PLUS: Enterprise tier (Plus).
     *   NOTE: Due to consistency issues, the provider will not read this field from the API. Drift is possible between
     *   the the provider state and Dialogflow if the agent tier is changed outside of the provider.
     * 
     */
    public Output</* @Nullable */ String> getTier() {
        return this.tier;
    }
    /**
     * The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
     * Europe/Paris.
     * 
     */
    @OutputExport(name="timeZone", type=String.class, parameters={})
    private Output<String> timeZone;

    /**
     * @return The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
     * Europe/Paris.
     * 
     */
    public Output<String> getTimeZone() {
        return this.timeZone;
    }

    public interface BuilderApplicator {
        public void apply(AgentArgs.Builder a);
    }
    private static io.pulumi.gcp.diagflow.AgentArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.gcp.diagflow.AgentArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Agent(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Agent(String name) {
        this(name, AgentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Agent(String name, AgentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Agent(String name, AgentArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/agent:Agent", name, args == null ? AgentArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Agent(String name, Output<String> id, @Nullable AgentState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/agent:Agent", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Agent get(String name, Output<String> id, @Nullable AgentState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Agent(name, id, state, options);
    }
}
