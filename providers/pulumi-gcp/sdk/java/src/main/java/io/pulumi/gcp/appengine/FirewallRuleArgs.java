// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FirewallRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final FirewallRuleArgs Empty = new FirewallRuleArgs();

    /**
     * The action to take if this rule matches.
     * Possible values are `UNSPECIFIED_ACTION`, `ALLOW`, and `DENY`.
     * 
     */
    @InputImport(name="action", required=true)
      private final Input<String> action;

    public Input<String> getAction() {
        return this.action;
    }

    /**
     * An optional string description of this rule.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * A positive integer that defines the order of rule evaluation.
     * Rules with the lowest priority are evaluated first.
     * A default rule at priority Int32.MaxValue matches all IPv4 and
     * IPv6 traffic when no previous rule matches. Only the action of
     * this rule can be modified by the user.
     * 
     */
    @InputImport(name="priority")
      private final @Nullable Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * IP address or range, defined using CIDR notation, of requests that this rule applies to.
     * 
     */
    @InputImport(name="sourceRange", required=true)
      private final Input<String> sourceRange;

    public Input<String> getSourceRange() {
        return this.sourceRange;
    }

    public FirewallRuleArgs(
        Input<String> action,
        @Nullable Input<String> description,
        @Nullable Input<Integer> priority,
        @Nullable Input<String> project,
        Input<String> sourceRange) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.description = description;
        this.priority = priority;
        this.project = project;
        this.sourceRange = Objects.requireNonNull(sourceRange, "expected parameter 'sourceRange' to be non-null");
    }

    private FirewallRuleArgs() {
        this.action = Input.empty();
        this.description = Input.empty();
        this.priority = Input.empty();
        this.project = Input.empty();
        this.sourceRange = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> action;
        private @Nullable Input<String> description;
        private @Nullable Input<Integer> priority;
        private @Nullable Input<String> project;
        private Input<String> sourceRange;

        public Builder() {
    	      // Empty
        }

        public Builder(FirewallRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.priority = defaults.priority;
    	      this.project = defaults.project;
    	      this.sourceRange = defaults.sourceRange;
        }

        public Builder action(Input<String> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }

        public Builder action(String action) {
            this.action = Input.of(Objects.requireNonNull(action));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder priority(@Nullable Input<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder sourceRange(Input<String> sourceRange) {
            this.sourceRange = Objects.requireNonNull(sourceRange);
            return this;
        }

        public Builder sourceRange(String sourceRange) {
            this.sourceRange = Input.of(Objects.requireNonNull(sourceRange));
            return this;
        }
        public FirewallRuleArgs build() {
            return new FirewallRuleArgs(action, description, priority, project, sourceRange);
        }
    }
}
