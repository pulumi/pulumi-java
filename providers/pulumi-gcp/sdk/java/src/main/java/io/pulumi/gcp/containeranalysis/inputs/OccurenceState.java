// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.containeranalysis.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.containeranalysis.inputs.OccurenceAttestationGetArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OccurenceState extends io.pulumi.resources.ResourceArgs {

    public static final OccurenceState Empty = new OccurenceState();

    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    @Import(name="attestation")
      private final @Nullable Output<OccurenceAttestationGetArgs> attestation;

    public Output<OccurenceAttestationGetArgs> attestation() {
        return this.attestation == null ? Codegen.empty() : this.attestation;
    }

    /**
     * The time when the repository was created.
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> createTime() {
        return this.createTime == null ? Codegen.empty() : this.createTime;
    }

    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * The name of the occurrence.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    @Import(name="noteName")
      private final @Nullable Output<String> noteName;

    public Output<String> noteName() {
        return this.noteName == null ? Codegen.empty() : this.noteName;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * A description of actions that can be taken to remedy the note.
     * 
     */
    @Import(name="remediation")
      private final @Nullable Output<String> remediation;

    public Output<String> remediation() {
        return this.remediation == null ? Codegen.empty() : this.remediation;
    }

    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     * 
     */
    @Import(name="resourceUri")
      private final @Nullable Output<String> resourceUri;

    public Output<String> resourceUri() {
        return this.resourceUri == null ? Codegen.empty() : this.resourceUri;
    }

    /**
     * The time when the repository was last updated.
     * 
     */
    @Import(name="updateTime")
      private final @Nullable Output<String> updateTime;

    public Output<String> updateTime() {
        return this.updateTime == null ? Codegen.empty() : this.updateTime;
    }

    public OccurenceState(
        @Nullable Output<OccurenceAttestationGetArgs> attestation,
        @Nullable Output<String> createTime,
        @Nullable Output<String> kind,
        @Nullable Output<String> name,
        @Nullable Output<String> noteName,
        @Nullable Output<String> project,
        @Nullable Output<String> remediation,
        @Nullable Output<String> resourceUri,
        @Nullable Output<String> updateTime) {
        this.attestation = attestation;
        this.createTime = createTime;
        this.kind = kind;
        this.name = name;
        this.noteName = noteName;
        this.project = project;
        this.remediation = remediation;
        this.resourceUri = resourceUri;
        this.updateTime = updateTime;
    }

    private OccurenceState() {
        this.attestation = Codegen.empty();
        this.createTime = Codegen.empty();
        this.kind = Codegen.empty();
        this.name = Codegen.empty();
        this.noteName = Codegen.empty();
        this.project = Codegen.empty();
        this.remediation = Codegen.empty();
        this.resourceUri = Codegen.empty();
        this.updateTime = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OccurenceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<OccurenceAttestationGetArgs> attestation;
        private @Nullable Output<String> createTime;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> name;
        private @Nullable Output<String> noteName;
        private @Nullable Output<String> project;
        private @Nullable Output<String> remediation;
        private @Nullable Output<String> resourceUri;
        private @Nullable Output<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(OccurenceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestation = defaults.attestation;
    	      this.createTime = defaults.createTime;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.noteName = defaults.noteName;
    	      this.project = defaults.project;
    	      this.remediation = defaults.remediation;
    	      this.resourceUri = defaults.resourceUri;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder attestation(@Nullable Output<OccurenceAttestationGetArgs> attestation) {
            this.attestation = attestation;
            return this;
        }
        public Builder attestation(@Nullable OccurenceAttestationGetArgs attestation) {
            this.attestation = Codegen.ofNullable(attestation);
            return this;
        }
        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }
        public Builder createTime(@Nullable String createTime) {
            this.createTime = Codegen.ofNullable(createTime);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder noteName(@Nullable Output<String> noteName) {
            this.noteName = noteName;
            return this;
        }
        public Builder noteName(@Nullable String noteName) {
            this.noteName = Codegen.ofNullable(noteName);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder remediation(@Nullable Output<String> remediation) {
            this.remediation = remediation;
            return this;
        }
        public Builder remediation(@Nullable String remediation) {
            this.remediation = Codegen.ofNullable(remediation);
            return this;
        }
        public Builder resourceUri(@Nullable Output<String> resourceUri) {
            this.resourceUri = resourceUri;
            return this;
        }
        public Builder resourceUri(@Nullable String resourceUri) {
            this.resourceUri = Codegen.ofNullable(resourceUri);
            return this;
        }
        public Builder updateTime(@Nullable Output<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }
        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Codegen.ofNullable(updateTime);
            return this;
        }        public OccurenceState build() {
            return new OccurenceState(attestation, createTime, kind, name, noteName, project, remediation, resourceUri, updateTime);
        }
    }
}
