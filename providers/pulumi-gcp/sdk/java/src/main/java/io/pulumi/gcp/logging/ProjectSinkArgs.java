// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.logging.inputs.ProjectSinkBigqueryOptionsArgs;
import io.pulumi.gcp.logging.inputs.ProjectSinkExclusionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectSinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectSinkArgs Empty = new ProjectSinkArgs();

    @InputImport(name="bigqueryOptions")
    private final @Nullable Input<ProjectSinkBigqueryOptionsArgs> bigqueryOptions;

    public Input<ProjectSinkBigqueryOptionsArgs> getBigqueryOptions() {
        return this.bigqueryOptions == null ? Input.empty() : this.bigqueryOptions;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="destination", required=true)
    private final Input<String> destination;

    public Input<String> getDestination() {
        return this.destination;
    }

    @InputImport(name="disabled")
    private final @Nullable Input<Boolean> disabled;

    public Input<Boolean> getDisabled() {
        return this.disabled == null ? Input.empty() : this.disabled;
    }

    @InputImport(name="exclusions")
    private final @Nullable Input<List<ProjectSinkExclusionArgs>> exclusions;

    public Input<List<ProjectSinkExclusionArgs>> getExclusions() {
        return this.exclusions == null ? Input.empty() : this.exclusions;
    }

    @InputImport(name="filter")
    private final @Nullable Input<String> filter;

    public Input<String> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="uniqueWriterIdentity")
    private final @Nullable Input<Boolean> uniqueWriterIdentity;

    public Input<Boolean> getUniqueWriterIdentity() {
        return this.uniqueWriterIdentity == null ? Input.empty() : this.uniqueWriterIdentity;
    }

    public ProjectSinkArgs(
        @Nullable Input<ProjectSinkBigqueryOptionsArgs> bigqueryOptions,
        @Nullable Input<String> description,
        Input<String> destination,
        @Nullable Input<Boolean> disabled,
        @Nullable Input<List<ProjectSinkExclusionArgs>> exclusions,
        @Nullable Input<String> filter,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<Boolean> uniqueWriterIdentity) {
        this.bigqueryOptions = bigqueryOptions;
        this.description = description;
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.disabled = disabled;
        this.exclusions = exclusions;
        this.filter = filter;
        this.name = name;
        this.project = project;
        this.uniqueWriterIdentity = uniqueWriterIdentity;
    }

    private ProjectSinkArgs() {
        this.bigqueryOptions = Input.empty();
        this.description = Input.empty();
        this.destination = Input.empty();
        this.disabled = Input.empty();
        this.exclusions = Input.empty();
        this.filter = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.uniqueWriterIdentity = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ProjectSinkBigqueryOptionsArgs> bigqueryOptions;
        private @Nullable Input<String> description;
        private Input<String> destination;
        private @Nullable Input<Boolean> disabled;
        private @Nullable Input<List<ProjectSinkExclusionArgs>> exclusions;
        private @Nullable Input<String> filter;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<Boolean> uniqueWriterIdentity;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectSinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigqueryOptions = defaults.bigqueryOptions;
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.disabled = defaults.disabled;
    	      this.exclusions = defaults.exclusions;
    	      this.filter = defaults.filter;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.uniqueWriterIdentity = defaults.uniqueWriterIdentity;
        }

        public Builder setBigqueryOptions(@Nullable Input<ProjectSinkBigqueryOptionsArgs> bigqueryOptions) {
            this.bigqueryOptions = bigqueryOptions;
            return this;
        }

        public Builder setBigqueryOptions(@Nullable ProjectSinkBigqueryOptionsArgs bigqueryOptions) {
            this.bigqueryOptions = Input.ofNullable(bigqueryOptions);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDestination(Input<String> destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }

        public Builder setDestination(String destination) {
            this.destination = Input.of(Objects.requireNonNull(destination));
            return this;
        }

        public Builder setDisabled(@Nullable Input<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }

        public Builder setDisabled(@Nullable Boolean disabled) {
            this.disabled = Input.ofNullable(disabled);
            return this;
        }

        public Builder setExclusions(@Nullable Input<List<ProjectSinkExclusionArgs>> exclusions) {
            this.exclusions = exclusions;
            return this;
        }

        public Builder setExclusions(@Nullable List<ProjectSinkExclusionArgs> exclusions) {
            this.exclusions = Input.ofNullable(exclusions);
            return this;
        }

        public Builder setFilter(@Nullable Input<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder setFilter(@Nullable String filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setUniqueWriterIdentity(@Nullable Input<Boolean> uniqueWriterIdentity) {
            this.uniqueWriterIdentity = uniqueWriterIdentity;
            return this;
        }

        public Builder setUniqueWriterIdentity(@Nullable Boolean uniqueWriterIdentity) {
            this.uniqueWriterIdentity = Input.ofNullable(uniqueWriterIdentity);
            return this;
        }

        public ProjectSinkArgs build() {
            return new ProjectSinkArgs(bigqueryOptions, description, destination, disabled, exclusions, filter, name, project, uniqueWriterIdentity);
        }
    }
}
