// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.URLMapDefaultRouteActionGetArgs;
import io.pulumi.gcp.compute.inputs.URLMapDefaultUrlRedirectGetArgs;
import io.pulumi.gcp.compute.inputs.URLMapHeaderActionGetArgs;
import io.pulumi.gcp.compute.inputs.URLMapHostRuleGetArgs;
import io.pulumi.gcp.compute.inputs.URLMapPathMatcherGetArgs;
import io.pulumi.gcp.compute.inputs.URLMapTestGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class URLMapState extends io.pulumi.resources.ResourceArgs {

    public static final URLMapState Empty = new URLMapState();

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @InputImport(name="creationTimestamp")
      private final @Nullable Input<String> creationTimestamp;

    public Input<String> getCreationTimestamp() {
        return this.creationTimestamp == null ? Input.empty() : this.creationTimestamp;
    }

    /**
     * defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
     * advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
     * to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
     * Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * Structure is documented below.
     * 
     */
    @InputImport(name="defaultRouteAction")
      private final @Nullable Input<URLMapDefaultRouteActionGetArgs> defaultRouteAction;

    public Input<URLMapDefaultRouteActionGetArgs> getDefaultRouteAction() {
        return this.defaultRouteAction == null ? Input.empty() : this.defaultRouteAction;
    }

    /**
     * The backend service or backend bucket to use when none of the given paths match.
     * 
     */
    @InputImport(name="defaultService")
      private final @Nullable Input<String> defaultService;

    public Input<String> getDefaultService() {
        return this.defaultService == null ? Input.empty() : this.defaultService;
    }

    /**
     * When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    @InputImport(name="defaultUrlRedirect")
      private final @Nullable Input<URLMapDefaultUrlRedirectGetArgs> defaultUrlRedirect;

    public Input<URLMapDefaultUrlRedirectGetArgs> getDefaultUrlRedirect() {
        return this.defaultUrlRedirect == null ? Input.empty() : this.defaultUrlRedirect;
    }

    /**
     * Description of this test case.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
     * 
     */
    @InputImport(name="fingerprint")
      private final @Nullable Input<String> fingerprint;

    public Input<String> getFingerprint() {
        return this.fingerprint == null ? Input.empty() : this.fingerprint;
    }

    /**
     * Specifies changes to request and response headers that need to take effect for
     * the selected backendService.
     * headerAction specified here take effect before headerAction in the enclosing
     * HttpRouteRule, PathMatcher and UrlMap.
     * Structure is documented below.
     * 
     */
    @InputImport(name="headerAction")
      private final @Nullable Input<URLMapHeaderActionGetArgs> headerAction;

    public Input<URLMapHeaderActionGetArgs> getHeaderAction() {
        return this.headerAction == null ? Input.empty() : this.headerAction;
    }

    /**
     * The list of HostRules to use against the URL.
     * Structure is documented below.
     * 
     */
    @InputImport(name="hostRules")
      private final @Nullable Input<List<URLMapHostRuleGetArgs>> hostRules;

    public Input<List<URLMapHostRuleGetArgs>> getHostRules() {
        return this.hostRules == null ? Input.empty() : this.hostRules;
    }

    /**
     * The unique identifier for the resource.
     * 
     */
    @InputImport(name="mapId")
      private final @Nullable Input<Integer> mapId;

    public Input<Integer> getMapId() {
        return this.mapId == null ? Input.empty() : this.mapId;
    }

    /**
     * The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The name of the PathMatcher to use to match the path portion of the URL if the
     * hostRule matches the URL's host portion.
     * 
     */
    @InputImport(name="pathMatchers")
      private final @Nullable Input<List<URLMapPathMatcherGetArgs>> pathMatchers;

    public Input<List<URLMapPathMatcherGetArgs>> getPathMatchers() {
        return this.pathMatchers == null ? Input.empty() : this.pathMatchers;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @InputImport(name="selfLink")
      private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    /**
     * The list of expected URL mapping tests. Request to update this UrlMap will
     * succeed only if all of the test cases pass. You can specify a maximum of 100
     * tests per UrlMap.
     * Structure is documented below.
     * 
     */
    @InputImport(name="tests")
      private final @Nullable Input<List<URLMapTestGetArgs>> tests;

    public Input<List<URLMapTestGetArgs>> getTests() {
        return this.tests == null ? Input.empty() : this.tests;
    }

    public URLMapState(
        @Nullable Input<String> creationTimestamp,
        @Nullable Input<URLMapDefaultRouteActionGetArgs> defaultRouteAction,
        @Nullable Input<String> defaultService,
        @Nullable Input<URLMapDefaultUrlRedirectGetArgs> defaultUrlRedirect,
        @Nullable Input<String> description,
        @Nullable Input<String> fingerprint,
        @Nullable Input<URLMapHeaderActionGetArgs> headerAction,
        @Nullable Input<List<URLMapHostRuleGetArgs>> hostRules,
        @Nullable Input<Integer> mapId,
        @Nullable Input<String> name,
        @Nullable Input<List<URLMapPathMatcherGetArgs>> pathMatchers,
        @Nullable Input<String> project,
        @Nullable Input<String> selfLink,
        @Nullable Input<List<URLMapTestGetArgs>> tests) {
        this.creationTimestamp = creationTimestamp;
        this.defaultRouteAction = defaultRouteAction;
        this.defaultService = defaultService;
        this.defaultUrlRedirect = defaultUrlRedirect;
        this.description = description;
        this.fingerprint = fingerprint;
        this.headerAction = headerAction;
        this.hostRules = hostRules;
        this.mapId = mapId;
        this.name = name;
        this.pathMatchers = pathMatchers;
        this.project = project;
        this.selfLink = selfLink;
        this.tests = tests;
    }

    private URLMapState() {
        this.creationTimestamp = Input.empty();
        this.defaultRouteAction = Input.empty();
        this.defaultService = Input.empty();
        this.defaultUrlRedirect = Input.empty();
        this.description = Input.empty();
        this.fingerprint = Input.empty();
        this.headerAction = Input.empty();
        this.hostRules = Input.empty();
        this.mapId = Input.empty();
        this.name = Input.empty();
        this.pathMatchers = Input.empty();
        this.project = Input.empty();
        this.selfLink = Input.empty();
        this.tests = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> creationTimestamp;
        private @Nullable Input<URLMapDefaultRouteActionGetArgs> defaultRouteAction;
        private @Nullable Input<String> defaultService;
        private @Nullable Input<URLMapDefaultUrlRedirectGetArgs> defaultUrlRedirect;
        private @Nullable Input<String> description;
        private @Nullable Input<String> fingerprint;
        private @Nullable Input<URLMapHeaderActionGetArgs> headerAction;
        private @Nullable Input<List<URLMapHostRuleGetArgs>> hostRules;
        private @Nullable Input<Integer> mapId;
        private @Nullable Input<String> name;
        private @Nullable Input<List<URLMapPathMatcherGetArgs>> pathMatchers;
        private @Nullable Input<String> project;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<List<URLMapTestGetArgs>> tests;

        public Builder() {
    	      // Empty
        }

        public Builder(URLMapState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.defaultRouteAction = defaults.defaultRouteAction;
    	      this.defaultService = defaults.defaultService;
    	      this.defaultUrlRedirect = defaults.defaultUrlRedirect;
    	      this.description = defaults.description;
    	      this.fingerprint = defaults.fingerprint;
    	      this.headerAction = defaults.headerAction;
    	      this.hostRules = defaults.hostRules;
    	      this.mapId = defaults.mapId;
    	      this.name = defaults.name;
    	      this.pathMatchers = defaults.pathMatchers;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.tests = defaults.tests;
        }

        public Builder creationTimestamp(@Nullable Input<String> creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder creationTimestamp(@Nullable String creationTimestamp) {
            this.creationTimestamp = Input.ofNullable(creationTimestamp);
            return this;
        }

        public Builder defaultRouteAction(@Nullable Input<URLMapDefaultRouteActionGetArgs> defaultRouteAction) {
            this.defaultRouteAction = defaultRouteAction;
            return this;
        }

        public Builder defaultRouteAction(@Nullable URLMapDefaultRouteActionGetArgs defaultRouteAction) {
            this.defaultRouteAction = Input.ofNullable(defaultRouteAction);
            return this;
        }

        public Builder defaultService(@Nullable Input<String> defaultService) {
            this.defaultService = defaultService;
            return this;
        }

        public Builder defaultService(@Nullable String defaultService) {
            this.defaultService = Input.ofNullable(defaultService);
            return this;
        }

        public Builder defaultUrlRedirect(@Nullable Input<URLMapDefaultUrlRedirectGetArgs> defaultUrlRedirect) {
            this.defaultUrlRedirect = defaultUrlRedirect;
            return this;
        }

        public Builder defaultUrlRedirect(@Nullable URLMapDefaultUrlRedirectGetArgs defaultUrlRedirect) {
            this.defaultUrlRedirect = Input.ofNullable(defaultUrlRedirect);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder fingerprint(@Nullable Input<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(@Nullable String fingerprint) {
            this.fingerprint = Input.ofNullable(fingerprint);
            return this;
        }

        public Builder headerAction(@Nullable Input<URLMapHeaderActionGetArgs> headerAction) {
            this.headerAction = headerAction;
            return this;
        }

        public Builder headerAction(@Nullable URLMapHeaderActionGetArgs headerAction) {
            this.headerAction = Input.ofNullable(headerAction);
            return this;
        }

        public Builder hostRules(@Nullable Input<List<URLMapHostRuleGetArgs>> hostRules) {
            this.hostRules = hostRules;
            return this;
        }

        public Builder hostRules(@Nullable List<URLMapHostRuleGetArgs> hostRules) {
            this.hostRules = Input.ofNullable(hostRules);
            return this;
        }

        public Builder mapId(@Nullable Input<Integer> mapId) {
            this.mapId = mapId;
            return this;
        }

        public Builder mapId(@Nullable Integer mapId) {
            this.mapId = Input.ofNullable(mapId);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder pathMatchers(@Nullable Input<List<URLMapPathMatcherGetArgs>> pathMatchers) {
            this.pathMatchers = pathMatchers;
            return this;
        }

        public Builder pathMatchers(@Nullable List<URLMapPathMatcherGetArgs> pathMatchers) {
            this.pathMatchers = Input.ofNullable(pathMatchers);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder selfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder tests(@Nullable Input<List<URLMapTestGetArgs>> tests) {
            this.tests = tests;
            return this;
        }

        public Builder tests(@Nullable List<URLMapTestGetArgs> tests) {
            this.tests = Input.ofNullable(tests);
            return this;
        }
        public URLMapState build() {
            return new URLMapState(creationTimestamp, defaultRouteAction, defaultService, defaultUrlRedirect, description, fingerprint, headerAction, hostRules, mapId, name, pathMatchers, project, selfLink, tests);
        }
    }
}
