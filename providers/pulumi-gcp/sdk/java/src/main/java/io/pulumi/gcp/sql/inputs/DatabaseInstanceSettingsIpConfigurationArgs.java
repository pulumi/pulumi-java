// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseInstanceSettingsIpConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceSettingsIpConfigurationArgs Empty = new DatabaseInstanceSettingsIpConfigurationArgs();

    /**
     * The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
     * 
     */
    @InputImport(name="allocatedIpRange")
        private final @Nullable Input<String> allocatedIpRange;

    public Input<String> getAllocatedIpRange() {
        return this.allocatedIpRange == null ? Input.empty() : this.allocatedIpRange;
    }

    @InputImport(name="authorizedNetworks")
        private final @Nullable Input<List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs>> authorizedNetworks;

    public Input<List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs>> getAuthorizedNetworks() {
        return this.authorizedNetworks == null ? Input.empty() : this.authorizedNetworks;
    }

    /**
     * Whether this Cloud SQL instance should be assigned
     * a public IPV4 address. At least `ipv4_enabled` must be enabled or a
     * `private_network` must be configured.
     * 
     */
    @InputImport(name="ipv4Enabled")
        private final @Nullable Input<Boolean> ipv4Enabled;

    public Input<Boolean> getIpv4Enabled() {
        return this.ipv4Enabled == null ? Input.empty() : this.ipv4Enabled;
    }

    /**
     * The VPC network from which the Cloud SQL
     * instance is accessible for private IP. For example,Â projects/myProject/global/networks/default.
     * Specifying a network enables private IP.
     * At least `ipv4_enabled` must be enabled or a `private_network` must be configured.
     * This setting can be updated, but it cannot be removed after it is set.
     * 
     */
    @InputImport(name="privateNetwork")
        private final @Nullable Input<String> privateNetwork;

    public Input<String> getPrivateNetwork() {
        return this.privateNetwork == null ? Input.empty() : this.privateNetwork;
    }

    /**
     * Whether SSL connections over IP are enforced or not.
     * 
     */
    @InputImport(name="requireSsl")
        private final @Nullable Input<Boolean> requireSsl;

    public Input<Boolean> getRequireSsl() {
        return this.requireSsl == null ? Input.empty() : this.requireSsl;
    }

    public DatabaseInstanceSettingsIpConfigurationArgs(
        @Nullable Input<String> allocatedIpRange,
        @Nullable Input<List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs>> authorizedNetworks,
        @Nullable Input<Boolean> ipv4Enabled,
        @Nullable Input<String> privateNetwork,
        @Nullable Input<Boolean> requireSsl) {
        this.allocatedIpRange = allocatedIpRange;
        this.authorizedNetworks = authorizedNetworks;
        this.ipv4Enabled = ipv4Enabled;
        this.privateNetwork = privateNetwork;
        this.requireSsl = requireSsl;
    }

    private DatabaseInstanceSettingsIpConfigurationArgs() {
        this.allocatedIpRange = Input.empty();
        this.authorizedNetworks = Input.empty();
        this.ipv4Enabled = Input.empty();
        this.privateNetwork = Input.empty();
        this.requireSsl = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceSettingsIpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> allocatedIpRange;
        private @Nullable Input<List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs>> authorizedNetworks;
        private @Nullable Input<Boolean> ipv4Enabled;
        private @Nullable Input<String> privateNetwork;
        private @Nullable Input<Boolean> requireSsl;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceSettingsIpConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpRange = defaults.allocatedIpRange;
    	      this.authorizedNetworks = defaults.authorizedNetworks;
    	      this.ipv4Enabled = defaults.ipv4Enabled;
    	      this.privateNetwork = defaults.privateNetwork;
    	      this.requireSsl = defaults.requireSsl;
        }

        public Builder setAllocatedIpRange(@Nullable Input<String> allocatedIpRange) {
            this.allocatedIpRange = allocatedIpRange;
            return this;
        }

        public Builder setAllocatedIpRange(@Nullable String allocatedIpRange) {
            this.allocatedIpRange = Input.ofNullable(allocatedIpRange);
            return this;
        }

        public Builder setAuthorizedNetworks(@Nullable Input<List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs>> authorizedNetworks) {
            this.authorizedNetworks = authorizedNetworks;
            return this;
        }

        public Builder setAuthorizedNetworks(@Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs> authorizedNetworks) {
            this.authorizedNetworks = Input.ofNullable(authorizedNetworks);
            return this;
        }

        public Builder setIpv4Enabled(@Nullable Input<Boolean> ipv4Enabled) {
            this.ipv4Enabled = ipv4Enabled;
            return this;
        }

        public Builder setIpv4Enabled(@Nullable Boolean ipv4Enabled) {
            this.ipv4Enabled = Input.ofNullable(ipv4Enabled);
            return this;
        }

        public Builder setPrivateNetwork(@Nullable Input<String> privateNetwork) {
            this.privateNetwork = privateNetwork;
            return this;
        }

        public Builder setPrivateNetwork(@Nullable String privateNetwork) {
            this.privateNetwork = Input.ofNullable(privateNetwork);
            return this;
        }

        public Builder setRequireSsl(@Nullable Input<Boolean> requireSsl) {
            this.requireSsl = requireSsl;
            return this;
        }

        public Builder setRequireSsl(@Nullable Boolean requireSsl) {
            this.requireSsl = Input.ofNullable(requireSsl);
            return this;
        }
        public DatabaseInstanceSettingsIpConfigurationArgs build() {
            return new DatabaseInstanceSettingsIpConfigurationArgs(allocatedIpRange, authorizedNetworks, ipv4Enabled, privateNetwork, requireSsl);
        }
    }
}
