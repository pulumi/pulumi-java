// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.billing.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BudgetBudgetFilter {
    private final @Nullable List<String> creditTypes;
    private final @Nullable String creditTypesTreatment;
    private final @Nullable Map<String,String> labels;
    private final @Nullable List<String> projects;
    private final @Nullable List<String> services;
    private final @Nullable List<String> subaccounts;

    @OutputCustomType.Constructor({"creditTypes","creditTypesTreatment","labels","projects","services","subaccounts"})
    private BudgetBudgetFilter(
        @Nullable List<String> creditTypes,
        @Nullable String creditTypesTreatment,
        @Nullable Map<String,String> labels,
        @Nullable List<String> projects,
        @Nullable List<String> services,
        @Nullable List<String> subaccounts) {
        this.creditTypes = creditTypes;
        this.creditTypesTreatment = creditTypesTreatment;
        this.labels = labels;
        this.projects = projects;
        this.services = services;
        this.subaccounts = subaccounts;
    }

    public List<String> getCreditTypes() {
        return this.creditTypes == null ? List.of() : this.creditTypes;
    }
    public Optional<String> getCreditTypesTreatment() {
        return Optional.ofNullable(this.creditTypesTreatment);
    }
    public Map<String,String> getLabels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    public List<String> getProjects() {
        return this.projects == null ? List.of() : this.projects;
    }
    public List<String> getServices() {
        return this.services == null ? List.of() : this.services;
    }
    public List<String> getSubaccounts() {
        return this.subaccounts == null ? List.of() : this.subaccounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetBudgetFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> creditTypes;
        private @Nullable String creditTypesTreatment;
        private @Nullable Map<String,String> labels;
        private @Nullable List<String> projects;
        private @Nullable List<String> services;
        private @Nullable List<String> subaccounts;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetBudgetFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creditTypes = defaults.creditTypes;
    	      this.creditTypesTreatment = defaults.creditTypesTreatment;
    	      this.labels = defaults.labels;
    	      this.projects = defaults.projects;
    	      this.services = defaults.services;
    	      this.subaccounts = defaults.subaccounts;
        }

        public Builder setCreditTypes(@Nullable List<String> creditTypes) {
            this.creditTypes = creditTypes;
            return this;
        }

        public Builder setCreditTypesTreatment(@Nullable String creditTypesTreatment) {
            this.creditTypesTreatment = creditTypesTreatment;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setProjects(@Nullable List<String> projects) {
            this.projects = projects;
            return this;
        }

        public Builder setServices(@Nullable List<String> services) {
            this.services = services;
            return this;
        }

        public Builder setSubaccounts(@Nullable List<String> subaccounts) {
            this.subaccounts = subaccounts;
            return this;
        }

        public BudgetBudgetFilter build() {
            return new BudgetBudgetFilter(creditTypes, creditTypesTreatment, labels, projects, services, subaccounts);
        }
    }
}
