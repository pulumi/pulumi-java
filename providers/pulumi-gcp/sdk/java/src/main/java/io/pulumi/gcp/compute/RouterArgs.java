// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.RouterBgpArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouterArgs Empty = new RouterArgs();

    /**
     * BGP information specific to this router.
     * Structure is documented below.
     * 
     */
    @InputImport(name="bgp")
      private final @Nullable Input<RouterBgpArgs> bgp;

    public Input<RouterBgpArgs> getBgp() {
        return this.bgp == null ? Input.empty() : this.bgp;
    }

    /**
     * User-specified description for the IP range.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Field to indicate if a router is dedicated to use with encrypted
     * Interconnect Attachment (IPsec-encrypted Cloud Interconnect feature).
     * Not currently available publicly.
     * 
     */
    @InputImport(name="encryptedInterconnectRouter")
      private final @Nullable Input<Boolean> encryptedInterconnectRouter;

    public Input<Boolean> getEncryptedInterconnectRouter() {
        return this.encryptedInterconnectRouter == null ? Input.empty() : this.encryptedInterconnectRouter;
    }

    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A reference to the network to which this router belongs.
     * 
     */
    @InputImport(name="network", required=true)
      private final Input<String> network;

    public Input<String> getNetwork() {
        return this.network;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Region where the router resides.
     * 
     */
    @InputImport(name="region")
      private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    public RouterArgs(
        @Nullable Input<RouterBgpArgs> bgp,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> encryptedInterconnectRouter,
        @Nullable Input<String> name,
        Input<String> network,
        @Nullable Input<String> project,
        @Nullable Input<String> region) {
        this.bgp = bgp;
        this.description = description;
        this.encryptedInterconnectRouter = encryptedInterconnectRouter;
        this.name = name;
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.project = project;
        this.region = region;
    }

    private RouterArgs() {
        this.bgp = Input.empty();
        this.description = Input.empty();
        this.encryptedInterconnectRouter = Input.empty();
        this.name = Input.empty();
        this.network = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RouterBgpArgs> bgp;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> encryptedInterconnectRouter;
        private @Nullable Input<String> name;
        private Input<String> network;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgp = defaults.bgp;
    	      this.description = defaults.description;
    	      this.encryptedInterconnectRouter = defaults.encryptedInterconnectRouter;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
        }

        public Builder bgp(@Nullable Input<RouterBgpArgs> bgp) {
            this.bgp = bgp;
            return this;
        }

        public Builder bgp(@Nullable RouterBgpArgs bgp) {
            this.bgp = Input.ofNullable(bgp);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder encryptedInterconnectRouter(@Nullable Input<Boolean> encryptedInterconnectRouter) {
            this.encryptedInterconnectRouter = encryptedInterconnectRouter;
            return this;
        }

        public Builder encryptedInterconnectRouter(@Nullable Boolean encryptedInterconnectRouter) {
            this.encryptedInterconnectRouter = Input.ofNullable(encryptedInterconnectRouter);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder network(Input<String> network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder network(String network) {
            this.network = Input.of(Objects.requireNonNull(network));
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder region(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }
        public RouterArgs build() {
            return new RouterArgs(bgp, description, encryptedInterconnectRouter, name, network, project, region);
        }
    }
}
