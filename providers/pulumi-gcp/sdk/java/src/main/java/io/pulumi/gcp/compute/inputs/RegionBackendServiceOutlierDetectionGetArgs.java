// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs;
import io.pulumi.gcp.compute.inputs.RegionBackendServiceOutlierDetectionIntervalGetArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegionBackendServiceOutlierDetectionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceOutlierDetectionGetArgs Empty = new RegionBackendServiceOutlierDetectionGetArgs();

    /**
     * The base time that a host is ejected for. The real time is equal to the base
     * time multiplied by the number of times the host has been ejected. Defaults to
     * 30000ms or 30s.
     * Structure is documented below.
     * 
     */
    @InputImport(name="baseEjectionTime")
      private final @Nullable Output<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime;

    public Output<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> getBaseEjectionTime() {
        return this.baseEjectionTime == null ? Output.empty() : this.baseEjectionTime;
    }

    /**
     * Number of errors before a host is ejected from the connection pool. When the
     * backend host is accessed over HTTP, a 5xx return code qualifies as an error.
     * Defaults to 5.
     * 
     */
    @InputImport(name="consecutiveErrors")
      private final @Nullable Output<Integer> consecutiveErrors;

    public Output<Integer> getConsecutiveErrors() {
        return this.consecutiveErrors == null ? Output.empty() : this.consecutiveErrors;
    }

    /**
     * The number of consecutive gateway failures (502, 503, 504 status or connection
     * errors that are mapped to one of those status codes) before a consecutive
     * gateway failure ejection occurs. Defaults to 5.
     * 
     */
    @InputImport(name="consecutiveGatewayFailure")
      private final @Nullable Output<Integer> consecutiveGatewayFailure;

    public Output<Integer> getConsecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure == null ? Output.empty() : this.consecutiveGatewayFailure;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier
     * status is detected through consecutive 5xx. This setting can be used to disable
     * ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    @InputImport(name="enforcingConsecutiveErrors")
      private final @Nullable Output<Integer> enforcingConsecutiveErrors;

    public Output<Integer> getEnforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors == null ? Output.empty() : this.enforcingConsecutiveErrors;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier
     * status is detected through consecutive gateway failures. This setting can be
     * used to disable ejection or to ramp it up slowly. Defaults to 0.
     * 
     */
    @InputImport(name="enforcingConsecutiveGatewayFailure")
      private final @Nullable Output<Integer> enforcingConsecutiveGatewayFailure;

    public Output<Integer> getEnforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure == null ? Output.empty() : this.enforcingConsecutiveGatewayFailure;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier
     * status is detected through success rate statistics. This setting can be used to
     * disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    @InputImport(name="enforcingSuccessRate")
      private final @Nullable Output<Integer> enforcingSuccessRate;

    public Output<Integer> getEnforcingSuccessRate() {
        return this.enforcingSuccessRate == null ? Output.empty() : this.enforcingSuccessRate;
    }

    /**
     * Time interval between ejection sweep analysis. This can result in both new
     * ejections as well as hosts being returned to service. Defaults to 10 seconds.
     * Structure is documented below.
     * 
     */
    @InputImport(name="interval")
      private final @Nullable Output<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval;

    public Output<RegionBackendServiceOutlierDetectionIntervalGetArgs> getInterval() {
        return this.interval == null ? Output.empty() : this.interval;
    }

    /**
     * Maximum percentage of hosts in the load balancing pool for the backend service
     * that can be ejected. Defaults to 10%.
     * 
     */
    @InputImport(name="maxEjectionPercent")
      private final @Nullable Output<Integer> maxEjectionPercent;

    public Output<Integer> getMaxEjectionPercent() {
        return this.maxEjectionPercent == null ? Output.empty() : this.maxEjectionPercent;
    }

    /**
     * The number of hosts in a cluster that must have enough request volume to detect
     * success rate outliers. If the number of hosts is less than this setting, outlier
     * detection via success rate statistics is not performed for any host in the
     * cluster. Defaults to 5.
     * 
     */
    @InputImport(name="successRateMinimumHosts")
      private final @Nullable Output<Integer> successRateMinimumHosts;

    public Output<Integer> getSuccessRateMinimumHosts() {
        return this.successRateMinimumHosts == null ? Output.empty() : this.successRateMinimumHosts;
    }

    /**
     * The minimum number of total requests that must be collected in one interval (as
     * defined by the interval duration above) to include this host in success rate
     * based outlier detection. If the volume is lower than this setting, outlier
     * detection via success rate statistics is not performed for that host. Defaults
     * to 100.
     * 
     */
    @InputImport(name="successRateRequestVolume")
      private final @Nullable Output<Integer> successRateRequestVolume;

    public Output<Integer> getSuccessRateRequestVolume() {
        return this.successRateRequestVolume == null ? Output.empty() : this.successRateRequestVolume;
    }

    /**
     * This factor is used to determine the ejection threshold for success rate outlier
     * ejection. The ejection threshold is the difference between the mean success
     * rate, and the product of this factor and the standard deviation of the mean
     * success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
     * by a thousand to get a double. That is, if the desired factor is 1.9, the
     * runtime value should be 1900. Defaults to 1900.
     * 
     */
    @InputImport(name="successRateStdevFactor")
      private final @Nullable Output<Integer> successRateStdevFactor;

    public Output<Integer> getSuccessRateStdevFactor() {
        return this.successRateStdevFactor == null ? Output.empty() : this.successRateStdevFactor;
    }

    public RegionBackendServiceOutlierDetectionGetArgs(
        @Nullable Output<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime,
        @Nullable Output<Integer> consecutiveErrors,
        @Nullable Output<Integer> consecutiveGatewayFailure,
        @Nullable Output<Integer> enforcingConsecutiveErrors,
        @Nullable Output<Integer> enforcingConsecutiveGatewayFailure,
        @Nullable Output<Integer> enforcingSuccessRate,
        @Nullable Output<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval,
        @Nullable Output<Integer> maxEjectionPercent,
        @Nullable Output<Integer> successRateMinimumHosts,
        @Nullable Output<Integer> successRateRequestVolume,
        @Nullable Output<Integer> successRateStdevFactor) {
        this.baseEjectionTime = baseEjectionTime;
        this.consecutiveErrors = consecutiveErrors;
        this.consecutiveGatewayFailure = consecutiveGatewayFailure;
        this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
        this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
        this.enforcingSuccessRate = enforcingSuccessRate;
        this.interval = interval;
        this.maxEjectionPercent = maxEjectionPercent;
        this.successRateMinimumHosts = successRateMinimumHosts;
        this.successRateRequestVolume = successRateRequestVolume;
        this.successRateStdevFactor = successRateStdevFactor;
    }

    private RegionBackendServiceOutlierDetectionGetArgs() {
        this.baseEjectionTime = Output.empty();
        this.consecutiveErrors = Output.empty();
        this.consecutiveGatewayFailure = Output.empty();
        this.enforcingConsecutiveErrors = Output.empty();
        this.enforcingConsecutiveGatewayFailure = Output.empty();
        this.enforcingSuccessRate = Output.empty();
        this.interval = Output.empty();
        this.maxEjectionPercent = Output.empty();
        this.successRateMinimumHosts = Output.empty();
        this.successRateRequestVolume = Output.empty();
        this.successRateStdevFactor = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceOutlierDetectionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime;
        private @Nullable Output<Integer> consecutiveErrors;
        private @Nullable Output<Integer> consecutiveGatewayFailure;
        private @Nullable Output<Integer> enforcingConsecutiveErrors;
        private @Nullable Output<Integer> enforcingConsecutiveGatewayFailure;
        private @Nullable Output<Integer> enforcingSuccessRate;
        private @Nullable Output<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval;
        private @Nullable Output<Integer> maxEjectionPercent;
        private @Nullable Output<Integer> successRateMinimumHosts;
        private @Nullable Output<Integer> successRateRequestVolume;
        private @Nullable Output<Integer> successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionBackendServiceOutlierDetectionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder baseEjectionTime(@Nullable Output<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime) {
            this.baseEjectionTime = baseEjectionTime;
            return this;
        }

        public Builder baseEjectionTime(@Nullable RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs baseEjectionTime) {
            this.baseEjectionTime = Output.ofNullable(baseEjectionTime);
            return this;
        }

        public Builder consecutiveErrors(@Nullable Output<Integer> consecutiveErrors) {
            this.consecutiveErrors = consecutiveErrors;
            return this;
        }

        public Builder consecutiveErrors(@Nullable Integer consecutiveErrors) {
            this.consecutiveErrors = Output.ofNullable(consecutiveErrors);
            return this;
        }

        public Builder consecutiveGatewayFailure(@Nullable Output<Integer> consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = consecutiveGatewayFailure;
            return this;
        }

        public Builder consecutiveGatewayFailure(@Nullable Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = Output.ofNullable(consecutiveGatewayFailure);
            return this;
        }

        public Builder enforcingConsecutiveErrors(@Nullable Output<Integer> enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
            return this;
        }

        public Builder enforcingConsecutiveErrors(@Nullable Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = Output.ofNullable(enforcingConsecutiveErrors);
            return this;
        }

        public Builder enforcingConsecutiveGatewayFailure(@Nullable Output<Integer> enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            return this;
        }

        public Builder enforcingConsecutiveGatewayFailure(@Nullable Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = Output.ofNullable(enforcingConsecutiveGatewayFailure);
            return this;
        }

        public Builder enforcingSuccessRate(@Nullable Output<Integer> enforcingSuccessRate) {
            this.enforcingSuccessRate = enforcingSuccessRate;
            return this;
        }

        public Builder enforcingSuccessRate(@Nullable Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = Output.ofNullable(enforcingSuccessRate);
            return this;
        }

        public Builder interval(@Nullable Output<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval) {
            this.interval = interval;
            return this;
        }

        public Builder interval(@Nullable RegionBackendServiceOutlierDetectionIntervalGetArgs interval) {
            this.interval = Output.ofNullable(interval);
            return this;
        }

        public Builder maxEjectionPercent(@Nullable Output<Integer> maxEjectionPercent) {
            this.maxEjectionPercent = maxEjectionPercent;
            return this;
        }

        public Builder maxEjectionPercent(@Nullable Integer maxEjectionPercent) {
            this.maxEjectionPercent = Output.ofNullable(maxEjectionPercent);
            return this;
        }

        public Builder successRateMinimumHosts(@Nullable Output<Integer> successRateMinimumHosts) {
            this.successRateMinimumHosts = successRateMinimumHosts;
            return this;
        }

        public Builder successRateMinimumHosts(@Nullable Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = Output.ofNullable(successRateMinimumHosts);
            return this;
        }

        public Builder successRateRequestVolume(@Nullable Output<Integer> successRateRequestVolume) {
            this.successRateRequestVolume = successRateRequestVolume;
            return this;
        }

        public Builder successRateRequestVolume(@Nullable Integer successRateRequestVolume) {
            this.successRateRequestVolume = Output.ofNullable(successRateRequestVolume);
            return this;
        }

        public Builder successRateStdevFactor(@Nullable Output<Integer> successRateStdevFactor) {
            this.successRateStdevFactor = successRateStdevFactor;
            return this;
        }

        public Builder successRateStdevFactor(@Nullable Integer successRateStdevFactor) {
            this.successRateStdevFactor = Output.ofNullable(successRateStdevFactor);
            return this;
        }
        public RegionBackendServiceOutlierDetectionGetArgs build() {
            return new RegionBackendServiceOutlierDetectionGetArgs(baseEjectionTime, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, interval, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
