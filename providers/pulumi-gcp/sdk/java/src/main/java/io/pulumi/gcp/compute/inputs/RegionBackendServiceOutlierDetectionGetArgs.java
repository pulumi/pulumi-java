// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs;
import io.pulumi.gcp.compute.inputs.RegionBackendServiceOutlierDetectionIntervalGetArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegionBackendServiceOutlierDetectionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceOutlierDetectionGetArgs Empty = new RegionBackendServiceOutlierDetectionGetArgs();

    @InputImport(name="baseEjectionTime")
    private final @Nullable Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime;

    public Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> getBaseEjectionTime() {
        return this.baseEjectionTime == null ? Input.empty() : this.baseEjectionTime;
    }

    @InputImport(name="consecutiveErrors")
    private final @Nullable Input<Integer> consecutiveErrors;

    public Input<Integer> getConsecutiveErrors() {
        return this.consecutiveErrors == null ? Input.empty() : this.consecutiveErrors;
    }

    @InputImport(name="consecutiveGatewayFailure")
    private final @Nullable Input<Integer> consecutiveGatewayFailure;

    public Input<Integer> getConsecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure == null ? Input.empty() : this.consecutiveGatewayFailure;
    }

    @InputImport(name="enforcingConsecutiveErrors")
    private final @Nullable Input<Integer> enforcingConsecutiveErrors;

    public Input<Integer> getEnforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors == null ? Input.empty() : this.enforcingConsecutiveErrors;
    }

    @InputImport(name="enforcingConsecutiveGatewayFailure")
    private final @Nullable Input<Integer> enforcingConsecutiveGatewayFailure;

    public Input<Integer> getEnforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure == null ? Input.empty() : this.enforcingConsecutiveGatewayFailure;
    }

    @InputImport(name="enforcingSuccessRate")
    private final @Nullable Input<Integer> enforcingSuccessRate;

    public Input<Integer> getEnforcingSuccessRate() {
        return this.enforcingSuccessRate == null ? Input.empty() : this.enforcingSuccessRate;
    }

    @InputImport(name="interval")
    private final @Nullable Input<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval;

    public Input<RegionBackendServiceOutlierDetectionIntervalGetArgs> getInterval() {
        return this.interval == null ? Input.empty() : this.interval;
    }

    @InputImport(name="maxEjectionPercent")
    private final @Nullable Input<Integer> maxEjectionPercent;

    public Input<Integer> getMaxEjectionPercent() {
        return this.maxEjectionPercent == null ? Input.empty() : this.maxEjectionPercent;
    }

    @InputImport(name="successRateMinimumHosts")
    private final @Nullable Input<Integer> successRateMinimumHosts;

    public Input<Integer> getSuccessRateMinimumHosts() {
        return this.successRateMinimumHosts == null ? Input.empty() : this.successRateMinimumHosts;
    }

    @InputImport(name="successRateRequestVolume")
    private final @Nullable Input<Integer> successRateRequestVolume;

    public Input<Integer> getSuccessRateRequestVolume() {
        return this.successRateRequestVolume == null ? Input.empty() : this.successRateRequestVolume;
    }

    @InputImport(name="successRateStdevFactor")
    private final @Nullable Input<Integer> successRateStdevFactor;

    public Input<Integer> getSuccessRateStdevFactor() {
        return this.successRateStdevFactor == null ? Input.empty() : this.successRateStdevFactor;
    }

    public RegionBackendServiceOutlierDetectionGetArgs(
        @Nullable Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime,
        @Nullable Input<Integer> consecutiveErrors,
        @Nullable Input<Integer> consecutiveGatewayFailure,
        @Nullable Input<Integer> enforcingConsecutiveErrors,
        @Nullable Input<Integer> enforcingConsecutiveGatewayFailure,
        @Nullable Input<Integer> enforcingSuccessRate,
        @Nullable Input<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval,
        @Nullable Input<Integer> maxEjectionPercent,
        @Nullable Input<Integer> successRateMinimumHosts,
        @Nullable Input<Integer> successRateRequestVolume,
        @Nullable Input<Integer> successRateStdevFactor) {
        this.baseEjectionTime = baseEjectionTime;
        this.consecutiveErrors = consecutiveErrors;
        this.consecutiveGatewayFailure = consecutiveGatewayFailure;
        this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
        this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
        this.enforcingSuccessRate = enforcingSuccessRate;
        this.interval = interval;
        this.maxEjectionPercent = maxEjectionPercent;
        this.successRateMinimumHosts = successRateMinimumHosts;
        this.successRateRequestVolume = successRateRequestVolume;
        this.successRateStdevFactor = successRateStdevFactor;
    }

    private RegionBackendServiceOutlierDetectionGetArgs() {
        this.baseEjectionTime = Input.empty();
        this.consecutiveErrors = Input.empty();
        this.consecutiveGatewayFailure = Input.empty();
        this.enforcingConsecutiveErrors = Input.empty();
        this.enforcingConsecutiveGatewayFailure = Input.empty();
        this.enforcingSuccessRate = Input.empty();
        this.interval = Input.empty();
        this.maxEjectionPercent = Input.empty();
        this.successRateMinimumHosts = Input.empty();
        this.successRateRequestVolume = Input.empty();
        this.successRateStdevFactor = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceOutlierDetectionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime;
        private @Nullable Input<Integer> consecutiveErrors;
        private @Nullable Input<Integer> consecutiveGatewayFailure;
        private @Nullable Input<Integer> enforcingConsecutiveErrors;
        private @Nullable Input<Integer> enforcingConsecutiveGatewayFailure;
        private @Nullable Input<Integer> enforcingSuccessRate;
        private @Nullable Input<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval;
        private @Nullable Input<Integer> maxEjectionPercent;
        private @Nullable Input<Integer> successRateMinimumHosts;
        private @Nullable Input<Integer> successRateRequestVolume;
        private @Nullable Input<Integer> successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionBackendServiceOutlierDetectionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder setBaseEjectionTime(@Nullable Input<RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs> baseEjectionTime) {
            this.baseEjectionTime = baseEjectionTime;
            return this;
        }

        public Builder setBaseEjectionTime(@Nullable RegionBackendServiceOutlierDetectionBaseEjectionTimeGetArgs baseEjectionTime) {
            this.baseEjectionTime = Input.ofNullable(baseEjectionTime);
            return this;
        }

        public Builder setConsecutiveErrors(@Nullable Input<Integer> consecutiveErrors) {
            this.consecutiveErrors = consecutiveErrors;
            return this;
        }

        public Builder setConsecutiveErrors(@Nullable Integer consecutiveErrors) {
            this.consecutiveErrors = Input.ofNullable(consecutiveErrors);
            return this;
        }

        public Builder setConsecutiveGatewayFailure(@Nullable Input<Integer> consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = consecutiveGatewayFailure;
            return this;
        }

        public Builder setConsecutiveGatewayFailure(@Nullable Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = Input.ofNullable(consecutiveGatewayFailure);
            return this;
        }

        public Builder setEnforcingConsecutiveErrors(@Nullable Input<Integer> enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
            return this;
        }

        public Builder setEnforcingConsecutiveErrors(@Nullable Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = Input.ofNullable(enforcingConsecutiveErrors);
            return this;
        }

        public Builder setEnforcingConsecutiveGatewayFailure(@Nullable Input<Integer> enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            return this;
        }

        public Builder setEnforcingConsecutiveGatewayFailure(@Nullable Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = Input.ofNullable(enforcingConsecutiveGatewayFailure);
            return this;
        }

        public Builder setEnforcingSuccessRate(@Nullable Input<Integer> enforcingSuccessRate) {
            this.enforcingSuccessRate = enforcingSuccessRate;
            return this;
        }

        public Builder setEnforcingSuccessRate(@Nullable Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = Input.ofNullable(enforcingSuccessRate);
            return this;
        }

        public Builder setInterval(@Nullable Input<RegionBackendServiceOutlierDetectionIntervalGetArgs> interval) {
            this.interval = interval;
            return this;
        }

        public Builder setInterval(@Nullable RegionBackendServiceOutlierDetectionIntervalGetArgs interval) {
            this.interval = Input.ofNullable(interval);
            return this;
        }

        public Builder setMaxEjectionPercent(@Nullable Input<Integer> maxEjectionPercent) {
            this.maxEjectionPercent = maxEjectionPercent;
            return this;
        }

        public Builder setMaxEjectionPercent(@Nullable Integer maxEjectionPercent) {
            this.maxEjectionPercent = Input.ofNullable(maxEjectionPercent);
            return this;
        }

        public Builder setSuccessRateMinimumHosts(@Nullable Input<Integer> successRateMinimumHosts) {
            this.successRateMinimumHosts = successRateMinimumHosts;
            return this;
        }

        public Builder setSuccessRateMinimumHosts(@Nullable Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = Input.ofNullable(successRateMinimumHosts);
            return this;
        }

        public Builder setSuccessRateRequestVolume(@Nullable Input<Integer> successRateRequestVolume) {
            this.successRateRequestVolume = successRateRequestVolume;
            return this;
        }

        public Builder setSuccessRateRequestVolume(@Nullable Integer successRateRequestVolume) {
            this.successRateRequestVolume = Input.ofNullable(successRateRequestVolume);
            return this;
        }

        public Builder setSuccessRateStdevFactor(@Nullable Input<Integer> successRateStdevFactor) {
            this.successRateStdevFactor = successRateStdevFactor;
            return this;
        }

        public Builder setSuccessRateStdevFactor(@Nullable Integer successRateStdevFactor) {
            this.successRateStdevFactor = Input.ofNullable(successRateStdevFactor);
            return this;
        }

        public RegionBackendServiceOutlierDetectionGetArgs build() {
            return new RegionBackendServiceOutlierDetectionGetArgs(baseEjectionTime, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, interval, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
