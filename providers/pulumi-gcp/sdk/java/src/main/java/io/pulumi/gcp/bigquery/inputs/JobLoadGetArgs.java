// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.JobLoadDestinationEncryptionConfigurationGetArgs;
import io.pulumi.gcp.bigquery.inputs.JobLoadDestinationTableGetArgs;
import io.pulumi.gcp.bigquery.inputs.JobLoadTimePartitioningGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobLoadGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobLoadGetArgs Empty = new JobLoadGetArgs();

    /**
     * Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
     * If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
     * an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
     * 
     */
    @InputImport(name="allowJaggedRows")
    private final @Nullable Input<Boolean> allowJaggedRows;

    public Input<Boolean> getAllowJaggedRows() {
        return this.allowJaggedRows == null ? Input.empty() : this.allowJaggedRows;
    }

    /**
     * Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
     * The default value is false.
     * 
     */
    @InputImport(name="allowQuotedNewlines")
    private final @Nullable Input<Boolean> allowQuotedNewlines;

    public Input<Boolean> getAllowQuotedNewlines() {
        return this.allowQuotedNewlines == null ? Input.empty() : this.allowQuotedNewlines;
    }

    /**
     * Indicates if we should automatically infer the options and schema for CSV and JSON sources.
     * 
     */
    @InputImport(name="autodetect")
    private final @Nullable Input<Boolean> autodetect;

    public Input<Boolean> getAutodetect() {
        return this.autodetect == null ? Input.empty() : this.autodetect;
    }

    /**
     * Specifies whether the job is allowed to create new tables. The following values are supported:
     * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
     * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
     * Creation, truncation and append actions occur as one atomic update upon job completion
     * Default value is `CREATE_IF_NEEDED`.
     * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
     * 
     */
    @InputImport(name="createDisposition")
    private final @Nullable Input<String> createDisposition;

    public Input<String> getCreateDisposition() {
        return this.createDisposition == null ? Input.empty() : this.createDisposition;
    }

    /**
     * Custom encryption configuration (e.g., Cloud KMS keys)
     * Structure is documented below.
     * 
     */
    @InputImport(name="destinationEncryptionConfiguration")
    private final @Nullable Input<JobLoadDestinationEncryptionConfigurationGetArgs> destinationEncryptionConfiguration;

    public Input<JobLoadDestinationEncryptionConfigurationGetArgs> getDestinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration == null ? Input.empty() : this.destinationEncryptionConfiguration;
    }

    /**
     * The destination table.
     * Structure is documented below.
     * 
     */
    @InputImport(name="destinationTable", required=true)
    private final Input<JobLoadDestinationTableGetArgs> destinationTable;

    public Input<JobLoadDestinationTableGetArgs> getDestinationTable() {
        return this.destinationTable;
    }

    /**
     * The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
     * The default value is UTF-8. BigQuery decodes the data after the raw, binary data
     * has been split using the values of the quote and fieldDelimiter properties.
     * 
     */
    @InputImport(name="encoding")
    private final @Nullable Input<String> encoding;

    public Input<String> getEncoding() {
        return this.encoding == null ? Input.empty() : this.encoding;
    }

    /**
     * When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
     * Default is ','
     * 
     */
    @InputImport(name="fieldDelimiter")
    private final @Nullable Input<String> fieldDelimiter;

    public Input<String> getFieldDelimiter() {
        return this.fieldDelimiter == null ? Input.empty() : this.fieldDelimiter;
    }

    /**
     * Indicates if BigQuery should allow extra values that are not represented in the table schema.
     * If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
     * and if there are too many bad records, an invalid error is returned in the job result.
     * The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
     * CSV: Trailing columns
     * JSON: Named values that don't match any column names
     * 
     */
    @InputImport(name="ignoreUnknownValues")
    private final @Nullable Input<Boolean> ignoreUnknownValues;

    public Input<Boolean> getIgnoreUnknownValues() {
        return this.ignoreUnknownValues == null ? Input.empty() : this.ignoreUnknownValues;
    }

    /**
     * The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
     * an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
     * 
     */
    @InputImport(name="maxBadRecords")
    private final @Nullable Input<Integer> maxBadRecords;

    public Input<Integer> getMaxBadRecords() {
        return this.maxBadRecords == null ? Input.empty() : this.maxBadRecords;
    }

    /**
     * Specifies a string that represents a null value in a CSV file. The default value is the empty string. If you set this
     * property to a custom value, BigQuery throws an error if an
     * empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
     * an empty value.
     * 
     */
    @InputImport(name="nullMarker")
    private final @Nullable Input<String> nullMarker;

    public Input<String> getNullMarker() {
        return this.nullMarker == null ? Input.empty() : this.nullMarker;
    }

    /**
     * If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
     * Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
     * If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
     * 
     */
    @InputImport(name="projectionFields")
    private final @Nullable Input<List<String>> projectionFields;

    public Input<List<String>> getProjectionFields() {
        return this.projectionFields == null ? Input.empty() : this.projectionFields;
    }

    /**
     * The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
     * and then uses the first byte of the encoded string to split the data in its raw, binary state.
     * The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
     * If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
     * 
     */
    @InputImport(name="quote")
    private final @Nullable Input<String> quote;

    public Input<String> getQuote() {
        return this.quote == null ? Input.empty() : this.quote;
    }

    /**
     * Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
     * supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
     * when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
     * For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
     * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
     * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
     * 
     */
    @InputImport(name="schemaUpdateOptions")
    private final @Nullable Input<List<String>> schemaUpdateOptions;

    public Input<List<String>> getSchemaUpdateOptions() {
        return this.schemaUpdateOptions == null ? Input.empty() : this.schemaUpdateOptions;
    }

    /**
     * The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
     * The default value is 0. This property is useful if you have header rows in the file that should be skipped.
     * When autodetect is on, the behavior is the following:
     * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
     * the row is read as data. Otherwise data is read starting from the second row.
     * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
     * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
     * row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
     * 
     */
    @InputImport(name="skipLeadingRows")
    private final @Nullable Input<Integer> skipLeadingRows;

    public Input<Integer> getSkipLeadingRows() {
        return this.skipLeadingRows == null ? Input.empty() : this.skipLeadingRows;
    }

    /**
     * The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
     * For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
     * For orc, specify "ORC". [Beta] For Bigtable, specify "BIGTABLE".
     * The default value is CSV.
     * 
     */
    @InputImport(name="sourceFormat")
    private final @Nullable Input<String> sourceFormat;

    public Input<String> getSourceFormat() {
        return this.sourceFormat == null ? Input.empty() : this.sourceFormat;
    }

    /**
     * The fully-qualified URIs that point to your data in Google Cloud.
     * For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character
     * and it must come after the 'bucket' name. Size limits related to load jobs apply
     * to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
     * specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
     * For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
     * 
     */
    @InputImport(name="sourceUris", required=true)
    private final Input<List<String>> sourceUris;

    public Input<List<String>> getSourceUris() {
        return this.sourceUris;
    }

    /**
     * Time-based partitioning specification for the destination table.
     * Structure is documented below.
     * 
     */
    @InputImport(name="timePartitioning")
    private final @Nullable Input<JobLoadTimePartitioningGetArgs> timePartitioning;

    public Input<JobLoadTimePartitioningGetArgs> getTimePartitioning() {
        return this.timePartitioning == null ? Input.empty() : this.timePartitioning;
    }

    /**
     * Specifies the action that occurs if the destination table already exists. The following values are supported:
     * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
     * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
     * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
     * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
     * Creation, truncation and append actions occur as one atomic update upon job completion.
     * Default value is `WRITE_EMPTY`.
     * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
     * 
     */
    @InputImport(name="writeDisposition")
    private final @Nullable Input<String> writeDisposition;

    public Input<String> getWriteDisposition() {
        return this.writeDisposition == null ? Input.empty() : this.writeDisposition;
    }

    public JobLoadGetArgs(
        @Nullable Input<Boolean> allowJaggedRows,
        @Nullable Input<Boolean> allowQuotedNewlines,
        @Nullable Input<Boolean> autodetect,
        @Nullable Input<String> createDisposition,
        @Nullable Input<JobLoadDestinationEncryptionConfigurationGetArgs> destinationEncryptionConfiguration,
        Input<JobLoadDestinationTableGetArgs> destinationTable,
        @Nullable Input<String> encoding,
        @Nullable Input<String> fieldDelimiter,
        @Nullable Input<Boolean> ignoreUnknownValues,
        @Nullable Input<Integer> maxBadRecords,
        @Nullable Input<String> nullMarker,
        @Nullable Input<List<String>> projectionFields,
        @Nullable Input<String> quote,
        @Nullable Input<List<String>> schemaUpdateOptions,
        @Nullable Input<Integer> skipLeadingRows,
        @Nullable Input<String> sourceFormat,
        Input<List<String>> sourceUris,
        @Nullable Input<JobLoadTimePartitioningGetArgs> timePartitioning,
        @Nullable Input<String> writeDisposition) {
        this.allowJaggedRows = allowJaggedRows;
        this.allowQuotedNewlines = allowQuotedNewlines;
        this.autodetect = autodetect;
        this.createDisposition = createDisposition;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationTable = Objects.requireNonNull(destinationTable, "expected parameter 'destinationTable' to be non-null");
        this.encoding = encoding;
        this.fieldDelimiter = fieldDelimiter;
        this.ignoreUnknownValues = ignoreUnknownValues;
        this.maxBadRecords = maxBadRecords;
        this.nullMarker = nullMarker;
        this.projectionFields = projectionFields;
        this.quote = quote;
        this.schemaUpdateOptions = schemaUpdateOptions;
        this.skipLeadingRows = skipLeadingRows;
        this.sourceFormat = sourceFormat;
        this.sourceUris = Objects.requireNonNull(sourceUris, "expected parameter 'sourceUris' to be non-null");
        this.timePartitioning = timePartitioning;
        this.writeDisposition = writeDisposition;
    }

    private JobLoadGetArgs() {
        this.allowJaggedRows = Input.empty();
        this.allowQuotedNewlines = Input.empty();
        this.autodetect = Input.empty();
        this.createDisposition = Input.empty();
        this.destinationEncryptionConfiguration = Input.empty();
        this.destinationTable = Input.empty();
        this.encoding = Input.empty();
        this.fieldDelimiter = Input.empty();
        this.ignoreUnknownValues = Input.empty();
        this.maxBadRecords = Input.empty();
        this.nullMarker = Input.empty();
        this.projectionFields = Input.empty();
        this.quote = Input.empty();
        this.schemaUpdateOptions = Input.empty();
        this.skipLeadingRows = Input.empty();
        this.sourceFormat = Input.empty();
        this.sourceUris = Input.empty();
        this.timePartitioning = Input.empty();
        this.writeDisposition = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobLoadGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowJaggedRows;
        private @Nullable Input<Boolean> allowQuotedNewlines;
        private @Nullable Input<Boolean> autodetect;
        private @Nullable Input<String> createDisposition;
        private @Nullable Input<JobLoadDestinationEncryptionConfigurationGetArgs> destinationEncryptionConfiguration;
        private Input<JobLoadDestinationTableGetArgs> destinationTable;
        private @Nullable Input<String> encoding;
        private @Nullable Input<String> fieldDelimiter;
        private @Nullable Input<Boolean> ignoreUnknownValues;
        private @Nullable Input<Integer> maxBadRecords;
        private @Nullable Input<String> nullMarker;
        private @Nullable Input<List<String>> projectionFields;
        private @Nullable Input<String> quote;
        private @Nullable Input<List<String>> schemaUpdateOptions;
        private @Nullable Input<Integer> skipLeadingRows;
        private @Nullable Input<String> sourceFormat;
        private Input<List<String>> sourceUris;
        private @Nullable Input<JobLoadTimePartitioningGetArgs> timePartitioning;
        private @Nullable Input<String> writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobLoadGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowJaggedRows = defaults.allowJaggedRows;
    	      this.allowQuotedNewlines = defaults.allowQuotedNewlines;
    	      this.autodetect = defaults.autodetect;
    	      this.createDisposition = defaults.createDisposition;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.encoding = defaults.encoding;
    	      this.fieldDelimiter = defaults.fieldDelimiter;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.nullMarker = defaults.nullMarker;
    	      this.projectionFields = defaults.projectionFields;
    	      this.quote = defaults.quote;
    	      this.schemaUpdateOptions = defaults.schemaUpdateOptions;
    	      this.skipLeadingRows = defaults.skipLeadingRows;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder setAllowJaggedRows(@Nullable Input<Boolean> allowJaggedRows) {
            this.allowJaggedRows = allowJaggedRows;
            return this;
        }

        public Builder setAllowJaggedRows(@Nullable Boolean allowJaggedRows) {
            this.allowJaggedRows = Input.ofNullable(allowJaggedRows);
            return this;
        }

        public Builder setAllowQuotedNewlines(@Nullable Input<Boolean> allowQuotedNewlines) {
            this.allowQuotedNewlines = allowQuotedNewlines;
            return this;
        }

        public Builder setAllowQuotedNewlines(@Nullable Boolean allowQuotedNewlines) {
            this.allowQuotedNewlines = Input.ofNullable(allowQuotedNewlines);
            return this;
        }

        public Builder setAutodetect(@Nullable Input<Boolean> autodetect) {
            this.autodetect = autodetect;
            return this;
        }

        public Builder setAutodetect(@Nullable Boolean autodetect) {
            this.autodetect = Input.ofNullable(autodetect);
            return this;
        }

        public Builder setCreateDisposition(@Nullable Input<String> createDisposition) {
            this.createDisposition = createDisposition;
            return this;
        }

        public Builder setCreateDisposition(@Nullable String createDisposition) {
            this.createDisposition = Input.ofNullable(createDisposition);
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(@Nullable Input<JobLoadDestinationEncryptionConfigurationGetArgs> destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(@Nullable JobLoadDestinationEncryptionConfigurationGetArgs destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Input.ofNullable(destinationEncryptionConfiguration);
            return this;
        }

        public Builder setDestinationTable(Input<JobLoadDestinationTableGetArgs> destinationTable) {
            this.destinationTable = Objects.requireNonNull(destinationTable);
            return this;
        }

        public Builder setDestinationTable(JobLoadDestinationTableGetArgs destinationTable) {
            this.destinationTable = Input.of(Objects.requireNonNull(destinationTable));
            return this;
        }

        public Builder setEncoding(@Nullable Input<String> encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder setEncoding(@Nullable String encoding) {
            this.encoding = Input.ofNullable(encoding);
            return this;
        }

        public Builder setFieldDelimiter(@Nullable Input<String> fieldDelimiter) {
            this.fieldDelimiter = fieldDelimiter;
            return this;
        }

        public Builder setFieldDelimiter(@Nullable String fieldDelimiter) {
            this.fieldDelimiter = Input.ofNullable(fieldDelimiter);
            return this;
        }

        public Builder setIgnoreUnknownValues(@Nullable Input<Boolean> ignoreUnknownValues) {
            this.ignoreUnknownValues = ignoreUnknownValues;
            return this;
        }

        public Builder setIgnoreUnknownValues(@Nullable Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Input.ofNullable(ignoreUnknownValues);
            return this;
        }

        public Builder setMaxBadRecords(@Nullable Input<Integer> maxBadRecords) {
            this.maxBadRecords = maxBadRecords;
            return this;
        }

        public Builder setMaxBadRecords(@Nullable Integer maxBadRecords) {
            this.maxBadRecords = Input.ofNullable(maxBadRecords);
            return this;
        }

        public Builder setNullMarker(@Nullable Input<String> nullMarker) {
            this.nullMarker = nullMarker;
            return this;
        }

        public Builder setNullMarker(@Nullable String nullMarker) {
            this.nullMarker = Input.ofNullable(nullMarker);
            return this;
        }

        public Builder setProjectionFields(@Nullable Input<List<String>> projectionFields) {
            this.projectionFields = projectionFields;
            return this;
        }

        public Builder setProjectionFields(@Nullable List<String> projectionFields) {
            this.projectionFields = Input.ofNullable(projectionFields);
            return this;
        }

        public Builder setQuote(@Nullable Input<String> quote) {
            this.quote = quote;
            return this;
        }

        public Builder setQuote(@Nullable String quote) {
            this.quote = Input.ofNullable(quote);
            return this;
        }

        public Builder setSchemaUpdateOptions(@Nullable Input<List<String>> schemaUpdateOptions) {
            this.schemaUpdateOptions = schemaUpdateOptions;
            return this;
        }

        public Builder setSchemaUpdateOptions(@Nullable List<String> schemaUpdateOptions) {
            this.schemaUpdateOptions = Input.ofNullable(schemaUpdateOptions);
            return this;
        }

        public Builder setSkipLeadingRows(@Nullable Input<Integer> skipLeadingRows) {
            this.skipLeadingRows = skipLeadingRows;
            return this;
        }

        public Builder setSkipLeadingRows(@Nullable Integer skipLeadingRows) {
            this.skipLeadingRows = Input.ofNullable(skipLeadingRows);
            return this;
        }

        public Builder setSourceFormat(@Nullable Input<String> sourceFormat) {
            this.sourceFormat = sourceFormat;
            return this;
        }

        public Builder setSourceFormat(@Nullable String sourceFormat) {
            this.sourceFormat = Input.ofNullable(sourceFormat);
            return this;
        }

        public Builder setSourceUris(Input<List<String>> sourceUris) {
            this.sourceUris = Objects.requireNonNull(sourceUris);
            return this;
        }

        public Builder setSourceUris(List<String> sourceUris) {
            this.sourceUris = Input.of(Objects.requireNonNull(sourceUris));
            return this;
        }

        public Builder setTimePartitioning(@Nullable Input<JobLoadTimePartitioningGetArgs> timePartitioning) {
            this.timePartitioning = timePartitioning;
            return this;
        }

        public Builder setTimePartitioning(@Nullable JobLoadTimePartitioningGetArgs timePartitioning) {
            this.timePartitioning = Input.ofNullable(timePartitioning);
            return this;
        }

        public Builder setWriteDisposition(@Nullable Input<String> writeDisposition) {
            this.writeDisposition = writeDisposition;
            return this;
        }

        public Builder setWriteDisposition(@Nullable String writeDisposition) {
            this.writeDisposition = Input.ofNullable(writeDisposition);
            return this;
        }

        public JobLoadGetArgs build() {
            return new JobLoadGetArgs(allowJaggedRows, allowQuotedNewlines, autodetect, createDisposition, destinationEncryptionConfiguration, destinationTable, encoding, fieldDelimiter, ignoreUnknownValues, maxBadRecords, nullMarker, projectionFields, quote, schemaUpdateOptions, skipLeadingRows, sourceFormat, sourceUris, timePartitioning, writeDisposition);
        }
    }
}
