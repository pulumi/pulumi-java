// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.essentialcontacts.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ContactState extends io.pulumi.resources.ResourceArgs {

    public static final ContactState Empty = new ContactState();

    /**
     * The email address to send notifications to. This does not need to be a Google account.
     * 
     */
    @Import(name="email")
      private final @Nullable Output<String> email;

    public Output<String> email() {
        return this.email == null ? Codegen.empty() : this.email;
    }

    /**
     * The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
     * 
     */
    @Import(name="languageTag")
      private final @Nullable Output<String> languageTag;

    public Output<String> languageTag() {
        return this.languageTag == null ? Codegen.empty() : this.languageTag;
    }

    /**
     * The identifier for the contact. Format: {resourceType}/{resource_id}/contacts/{contact_id}
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The categories of notifications that the contact will receive communications for.
     * 
     */
    @Import(name="notificationCategorySubscriptions")
      private final @Nullable Output<List<String>> notificationCategorySubscriptions;

    public Output<List<String>> notificationCategorySubscriptions() {
        return this.notificationCategorySubscriptions == null ? Codegen.empty() : this.notificationCategorySubscriptions;
    }

    /**
     * The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
     * 
     */
    @Import(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> parent() {
        return this.parent == null ? Codegen.empty() : this.parent;
    }

    public ContactState(
        @Nullable Output<String> email,
        @Nullable Output<String> languageTag,
        @Nullable Output<String> name,
        @Nullable Output<List<String>> notificationCategorySubscriptions,
        @Nullable Output<String> parent) {
        this.email = email;
        this.languageTag = languageTag;
        this.name = name;
        this.notificationCategorySubscriptions = notificationCategorySubscriptions;
        this.parent = parent;
    }

    private ContactState() {
        this.email = Codegen.empty();
        this.languageTag = Codegen.empty();
        this.name = Codegen.empty();
        this.notificationCategorySubscriptions = Codegen.empty();
        this.parent = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContactState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> email;
        private @Nullable Output<String> languageTag;
        private @Nullable Output<String> name;
        private @Nullable Output<List<String>> notificationCategorySubscriptions;
        private @Nullable Output<String> parent;

        public Builder() {
    	      // Empty
        }

        public Builder(ContactState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.languageTag = defaults.languageTag;
    	      this.name = defaults.name;
    	      this.notificationCategorySubscriptions = defaults.notificationCategorySubscriptions;
    	      this.parent = defaults.parent;
        }

        public Builder email(@Nullable Output<String> email) {
            this.email = email;
            return this;
        }
        public Builder email(@Nullable String email) {
            this.email = Codegen.ofNullable(email);
            return this;
        }
        public Builder languageTag(@Nullable Output<String> languageTag) {
            this.languageTag = languageTag;
            return this;
        }
        public Builder languageTag(@Nullable String languageTag) {
            this.languageTag = Codegen.ofNullable(languageTag);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder notificationCategorySubscriptions(@Nullable Output<List<String>> notificationCategorySubscriptions) {
            this.notificationCategorySubscriptions = notificationCategorySubscriptions;
            return this;
        }
        public Builder notificationCategorySubscriptions(@Nullable List<String> notificationCategorySubscriptions) {
            this.notificationCategorySubscriptions = Codegen.ofNullable(notificationCategorySubscriptions);
            return this;
        }
        public Builder notificationCategorySubscriptions(String... notificationCategorySubscriptions) {
            return notificationCategorySubscriptions(List.of(notificationCategorySubscriptions));
        }
        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }
        public Builder parent(@Nullable String parent) {
            this.parent = Codegen.ofNullable(parent);
            return this;
        }        public ContactState build() {
            return new ContactState(email, languageTag, name, notificationCategorySubscriptions, parent);
        }
    }
}
