// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.firestore.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DocumentState extends io.pulumi.resources.ResourceArgs {

    public static final DocumentState Empty = new DocumentState();

    /**
     * The collection ID, relative to database. For example: chatrooms or chatrooms/my-document/private-messages.
     * 
     */
    @Import(name="collection")
      private final @Nullable Output<String> collection;

    public Output<String> getCollection() {
        return this.collection == null ? Output.empty() : this.collection;
    }

    /**
     * Creation timestamp in RFC3339 format.
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> getCreateTime() {
        return this.createTime == null ? Output.empty() : this.createTime;
    }

    /**
     * The Firestore database id. Defaults to `"(default)"`.
     * 
     */
    @Import(name="database")
      private final @Nullable Output<String> database;

    public Output<String> getDatabase() {
        return this.database == null ? Output.empty() : this.database;
    }

    /**
     * The client-assigned document ID to use for this document during creation.
     * 
     */
    @Import(name="documentId")
      private final @Nullable Output<String> documentId;

    public Output<String> getDocumentId() {
        return this.documentId == null ? Output.empty() : this.documentId;
    }

    /**
     * The document's [fields](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents) formated as a json string.
     * 
     */
    @Import(name="fields")
      private final @Nullable Output<String> fields;

    public Output<String> getFields() {
        return this.fields == null ? Output.empty() : this.fields;
    }

    /**
     * A server defined name for this index. Format:
     * 'projects/{{project_id}}/databases/{{database_id}}/documents/{{path}}/{{document_id}}'
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A relative path to the collection this document exists within
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Last update timestamp in RFC3339 format.
     * 
     */
    @Import(name="updateTime")
      private final @Nullable Output<String> updateTime;

    public Output<String> getUpdateTime() {
        return this.updateTime == null ? Output.empty() : this.updateTime;
    }

    public DocumentState(
        @Nullable Output<String> collection,
        @Nullable Output<String> createTime,
        @Nullable Output<String> database,
        @Nullable Output<String> documentId,
        @Nullable Output<String> fields,
        @Nullable Output<String> name,
        @Nullable Output<String> path,
        @Nullable Output<String> project,
        @Nullable Output<String> updateTime) {
        this.collection = collection;
        this.createTime = createTime;
        this.database = database;
        this.documentId = documentId;
        this.fields = fields;
        this.name = name;
        this.path = path;
        this.project = project;
        this.updateTime = updateTime;
    }

    private DocumentState() {
        this.collection = Output.empty();
        this.createTime = Output.empty();
        this.database = Output.empty();
        this.documentId = Output.empty();
        this.fields = Output.empty();
        this.name = Output.empty();
        this.path = Output.empty();
        this.project = Output.empty();
        this.updateTime = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> collection;
        private @Nullable Output<String> createTime;
        private @Nullable Output<String> database;
        private @Nullable Output<String> documentId;
        private @Nullable Output<String> fields;
        private @Nullable Output<String> name;
        private @Nullable Output<String> path;
        private @Nullable Output<String> project;
        private @Nullable Output<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collection = defaults.collection;
    	      this.createTime = defaults.createTime;
    	      this.database = defaults.database;
    	      this.documentId = defaults.documentId;
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.project = defaults.project;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder collection(@Nullable Output<String> collection) {
            this.collection = collection;
            return this;
        }

        public Builder collection(@Nullable String collection) {
            this.collection = Output.ofNullable(collection);
            return this;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder createTime(@Nullable String createTime) {
            this.createTime = Output.ofNullable(createTime);
            return this;
        }

        public Builder database(@Nullable Output<String> database) {
            this.database = database;
            return this;
        }

        public Builder database(@Nullable String database) {
            this.database = Output.ofNullable(database);
            return this;
        }

        public Builder documentId(@Nullable Output<String> documentId) {
            this.documentId = documentId;
            return this;
        }

        public Builder documentId(@Nullable String documentId) {
            this.documentId = Output.ofNullable(documentId);
            return this;
        }

        public Builder fields(@Nullable Output<String> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(@Nullable String fields) {
            this.fields = Output.ofNullable(fields);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Output.ofNullable(updateTime);
            return this;
        }
        public DocumentState build() {
            return new DocumentState(collection, createTime, database, documentId, fields, name, path, project, updateTime);
        }
    }
}
