// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.ConnectionCloudSqlCredentialArgs;
import java.lang.String;
import java.util.Objects;


public final class ConnectionCloudSqlArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectionCloudSqlArgs Empty = new ConnectionCloudSqlArgs();

    /**
     * Cloud SQL properties.
     * Structure is documented below.
     * 
     */
    @InputImport(name="credential", required=true)
      private final Output<ConnectionCloudSqlCredentialArgs> credential;

    public Output<ConnectionCloudSqlCredentialArgs> getCredential() {
        return this.credential;
    }

    /**
     * Database name.
     * 
     */
    @InputImport(name="database", required=true)
      private final Output<String> database;

    public Output<String> getDatabase() {
        return this.database;
    }

    /**
     * Cloud SQL instance ID in the form project:location:instance.
     * 
     */
    @InputImport(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId;
    }

    /**
     * Type of the Cloud SQL database.
     * Possible values are `DATABASE_TYPE_UNSPECIFIED`, `POSTGRES`, and `MYSQL`.
     * 
     */
    @InputImport(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public ConnectionCloudSqlArgs(
        Output<ConnectionCloudSqlCredentialArgs> credential,
        Output<String> database,
        Output<String> instanceId,
        Output<String> type) {
        this.credential = Objects.requireNonNull(credential, "expected parameter 'credential' to be non-null");
        this.database = Objects.requireNonNull(database, "expected parameter 'database' to be non-null");
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ConnectionCloudSqlArgs() {
        this.credential = Output.empty();
        this.database = Output.empty();
        this.instanceId = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionCloudSqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ConnectionCloudSqlCredentialArgs> credential;
        private Output<String> database;
        private Output<String> instanceId;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectionCloudSqlArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credential = defaults.credential;
    	      this.database = defaults.database;
    	      this.instanceId = defaults.instanceId;
    	      this.type = defaults.type;
        }

        public Builder credential(Output<ConnectionCloudSqlCredentialArgs> credential) {
            this.credential = Objects.requireNonNull(credential);
            return this;
        }

        public Builder credential(ConnectionCloudSqlCredentialArgs credential) {
            this.credential = Output.of(Objects.requireNonNull(credential));
            return this;
        }

        public Builder database(Output<String> database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }

        public Builder database(String database) {
            this.database = Output.of(Objects.requireNonNull(database));
            return this;
        }

        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }

        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public ConnectionCloudSqlArgs build() {
            return new ConnectionCloudSqlArgs(credential, database, instanceId, type);
        }
    }
}
