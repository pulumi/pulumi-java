// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SourceRepresentationInstanceState extends io.pulumi.resources.ResourceArgs {

    public static final SourceRepresentationInstanceState Empty = new SourceRepresentationInstanceState();

    /**
     * The MySQL version running on your source database server.
     * Possible values are `MYSQL_5_5`, `MYSQL_5_6`, `MYSQL_5_7`, and `MYSQL_8_0`.
     * 
     */
    @Import(name="databaseVersion")
      private final @Nullable Output<String> databaseVersion;

    public Output<String> databaseVersion() {
        return this.databaseVersion == null ? Codegen.empty() : this.databaseVersion;
    }

    /**
     * The externally accessible IPv4 address for the source database server.
     * 
     */
    @Import(name="host")
      private final @Nullable Output<String> host;

    public Output<String> host() {
        return this.host == null ? Codegen.empty() : this.host;
    }

    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The externally accessible port for the source database server.
     * Defaults to 3306.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The Region in which the created instance should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    public SourceRepresentationInstanceState(
        @Nullable Output<String> databaseVersion,
        @Nullable Output<String> host,
        @Nullable Output<String> name,
        @Nullable Output<Integer> port,
        @Nullable Output<String> project,
        @Nullable Output<String> region) {
        this.databaseVersion = databaseVersion;
        this.host = host;
        this.name = name;
        this.port = port;
        this.project = project;
        this.region = region;
    }

    private SourceRepresentationInstanceState() {
        this.databaseVersion = Codegen.empty();
        this.host = Codegen.empty();
        this.name = Codegen.empty();
        this.port = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceRepresentationInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> databaseVersion;
        private @Nullable Output<String> host;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceRepresentationInstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.host = defaults.host;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
        }

        public Builder databaseVersion(@Nullable Output<String> databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }
        public Builder databaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = Codegen.ofNullable(databaseVersion);
            return this;
        }
        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = Codegen.ofNullable(host);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }        public SourceRepresentationInstanceState build() {
            return new SourceRepresentationInstanceState(databaseVersion, host, name, port, project, region);
        }
    }
}
