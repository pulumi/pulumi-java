// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.firestore;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.firestore.inputs.IndexFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IndexArgs extends io.pulumi.resources.ResourceArgs {

    public static final IndexArgs Empty = new IndexArgs();

    /**
     * The collection being indexed.
     * 
     */
    @Import(name="collection", required=true)
      private final Output<String> collection;

    public Output<String> getCollection() {
        return this.collection;
    }

    /**
     * The Firestore database id. Defaults to `"(default)"`.
     * 
     */
    @Import(name="database")
      private final @Nullable Output<String> database;

    public Output<String> getDatabase() {
        return this.database == null ? Codegen.empty() : this.database;
    }

    /**
     * The fields supported by this index. The last field entry is always for
     * the field path `__name__`. If, on creation, `__name__` was not
     * specified as the last field, it will be added automatically with the
     * same direction as that of the last field defined. If the final field
     * in a composite index is not directional, the `__name__` will be
     * ordered `"ASCENDING"` (unless explicitly specified otherwise).
     * Structure is documented below.
     * 
     */
    @Import(name="fields", required=true)
      private final Output<List<IndexFieldArgs>> fields;

    public Output<List<IndexFieldArgs>> getFields() {
        return this.fields;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The scope at which a query is run.
     * Default value is `COLLECTION`.
     * Possible values are `COLLECTION` and `COLLECTION_GROUP`.
     * 
     */
    @Import(name="queryScope")
      private final @Nullable Output<String> queryScope;

    public Output<String> getQueryScope() {
        return this.queryScope == null ? Codegen.empty() : this.queryScope;
    }

    public IndexArgs(
        Output<String> collection,
        @Nullable Output<String> database,
        Output<List<IndexFieldArgs>> fields,
        @Nullable Output<String> project,
        @Nullable Output<String> queryScope) {
        this.collection = Objects.requireNonNull(collection, "expected parameter 'collection' to be non-null");
        this.database = database;
        this.fields = Objects.requireNonNull(fields, "expected parameter 'fields' to be non-null");
        this.project = project;
        this.queryScope = queryScope;
    }

    private IndexArgs() {
        this.collection = Codegen.empty();
        this.database = Codegen.empty();
        this.fields = Codegen.empty();
        this.project = Codegen.empty();
        this.queryScope = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> collection;
        private @Nullable Output<String> database;
        private Output<List<IndexFieldArgs>> fields;
        private @Nullable Output<String> project;
        private @Nullable Output<String> queryScope;

        public Builder() {
    	      // Empty
        }

        public Builder(IndexArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collection = defaults.collection;
    	      this.database = defaults.database;
    	      this.fields = defaults.fields;
    	      this.project = defaults.project;
    	      this.queryScope = defaults.queryScope;
        }

        public Builder collection(Output<String> collection) {
            this.collection = Objects.requireNonNull(collection);
            return this;
        }
        public Builder collection(String collection) {
            this.collection = Output.of(Objects.requireNonNull(collection));
            return this;
        }
        public Builder database(@Nullable Output<String> database) {
            this.database = database;
            return this;
        }
        public Builder database(@Nullable String database) {
            this.database = Codegen.ofNullable(database);
            return this;
        }
        public Builder fields(Output<List<IndexFieldArgs>> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(List<IndexFieldArgs> fields) {
            this.fields = Output.of(Objects.requireNonNull(fields));
            return this;
        }
        public Builder fields(IndexFieldArgs... fields) {
            return fields(List.of(fields));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder queryScope(@Nullable Output<String> queryScope) {
            this.queryScope = queryScope;
            return this;
        }
        public Builder queryScope(@Nullable String queryScope) {
            this.queryScope = Codegen.ofNullable(queryScope);
            return this;
        }        public IndexArgs build() {
            return new IndexArgs(collection, database, fields, project, queryScope);
        }
    }
}
