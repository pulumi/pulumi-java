// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerGetArgs;
import io.pulumi.gcp.diagflow.inputs.CxFlowNluSettingsGetArgs;
import io.pulumi.gcp.diagflow.inputs.CxFlowTransitionRouteGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxFlowState extends io.pulumi.resources.ResourceArgs {

    public static final CxFlowState Empty = new CxFlowState();

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    @InputImport(name="eventHandlers")
    private final @Nullable Input<List<CxFlowEventHandlerGetArgs>> eventHandlers;

    public Input<List<CxFlowEventHandlerGetArgs>> getEventHandlers() {
        return this.eventHandlers == null ? Input.empty() : this.eventHandlers;
    }

    @InputImport(name="languageCode")
    private final @Nullable Input<String> languageCode;

    public Input<String> getLanguageCode() {
        return this.languageCode == null ? Input.empty() : this.languageCode;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="nluSettings")
    private final @Nullable Input<CxFlowNluSettingsGetArgs> nluSettings;

    public Input<CxFlowNluSettingsGetArgs> getNluSettings() {
        return this.nluSettings == null ? Input.empty() : this.nluSettings;
    }

    @InputImport(name="parent")
    private final @Nullable Input<String> parent;

    public Input<String> getParent() {
        return this.parent == null ? Input.empty() : this.parent;
    }

    @InputImport(name="transitionRouteGroups")
    private final @Nullable Input<List<String>> transitionRouteGroups;

    public Input<List<String>> getTransitionRouteGroups() {
        return this.transitionRouteGroups == null ? Input.empty() : this.transitionRouteGroups;
    }

    @InputImport(name="transitionRoutes")
    private final @Nullable Input<List<CxFlowTransitionRouteGetArgs>> transitionRoutes;

    public Input<List<CxFlowTransitionRouteGetArgs>> getTransitionRoutes() {
        return this.transitionRoutes == null ? Input.empty() : this.transitionRoutes;
    }

    public CxFlowState(
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<List<CxFlowEventHandlerGetArgs>> eventHandlers,
        @Nullable Input<String> languageCode,
        @Nullable Input<String> name,
        @Nullable Input<CxFlowNluSettingsGetArgs> nluSettings,
        @Nullable Input<String> parent,
        @Nullable Input<List<String>> transitionRouteGroups,
        @Nullable Input<List<CxFlowTransitionRouteGetArgs>> transitionRoutes) {
        this.description = description;
        this.displayName = displayName;
        this.eventHandlers = eventHandlers;
        this.languageCode = languageCode;
        this.name = name;
        this.nluSettings = nluSettings;
        this.parent = parent;
        this.transitionRouteGroups = transitionRouteGroups;
        this.transitionRoutes = transitionRoutes;
    }

    private CxFlowState() {
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.eventHandlers = Input.empty();
        this.languageCode = Input.empty();
        this.name = Input.empty();
        this.nluSettings = Input.empty();
        this.parent = Input.empty();
        this.transitionRouteGroups = Input.empty();
        this.transitionRoutes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxFlowState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<List<CxFlowEventHandlerGetArgs>> eventHandlers;
        private @Nullable Input<String> languageCode;
        private @Nullable Input<String> name;
        private @Nullable Input<CxFlowNluSettingsGetArgs> nluSettings;
        private @Nullable Input<String> parent;
        private @Nullable Input<List<String>> transitionRouteGroups;
        private @Nullable Input<List<CxFlowTransitionRouteGetArgs>> transitionRoutes;

        public Builder() {
    	      // Empty
        }

        public Builder(CxFlowState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.eventHandlers = defaults.eventHandlers;
    	      this.languageCode = defaults.languageCode;
    	      this.name = defaults.name;
    	      this.nluSettings = defaults.nluSettings;
    	      this.parent = defaults.parent;
    	      this.transitionRouteGroups = defaults.transitionRouteGroups;
    	      this.transitionRoutes = defaults.transitionRoutes;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setEventHandlers(@Nullable Input<List<CxFlowEventHandlerGetArgs>> eventHandlers) {
            this.eventHandlers = eventHandlers;
            return this;
        }

        public Builder setEventHandlers(@Nullable List<CxFlowEventHandlerGetArgs> eventHandlers) {
            this.eventHandlers = Input.ofNullable(eventHandlers);
            return this;
        }

        public Builder setLanguageCode(@Nullable Input<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder setLanguageCode(@Nullable String languageCode) {
            this.languageCode = Input.ofNullable(languageCode);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNluSettings(@Nullable Input<CxFlowNluSettingsGetArgs> nluSettings) {
            this.nluSettings = nluSettings;
            return this;
        }

        public Builder setNluSettings(@Nullable CxFlowNluSettingsGetArgs nluSettings) {
            this.nluSettings = Input.ofNullable(nluSettings);
            return this;
        }

        public Builder setParent(@Nullable Input<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder setParent(@Nullable String parent) {
            this.parent = Input.ofNullable(parent);
            return this;
        }

        public Builder setTransitionRouteGroups(@Nullable Input<List<String>> transitionRouteGroups) {
            this.transitionRouteGroups = transitionRouteGroups;
            return this;
        }

        public Builder setTransitionRouteGroups(@Nullable List<String> transitionRouteGroups) {
            this.transitionRouteGroups = Input.ofNullable(transitionRouteGroups);
            return this;
        }

        public Builder setTransitionRoutes(@Nullable Input<List<CxFlowTransitionRouteGetArgs>> transitionRoutes) {
            this.transitionRoutes = transitionRoutes;
            return this;
        }

        public Builder setTransitionRoutes(@Nullable List<CxFlowTransitionRouteGetArgs> transitionRoutes) {
            this.transitionRoutes = Input.ofNullable(transitionRoutes);
            return this;
        }

        public CxFlowState build() {
            return new CxFlowState(description, displayName, eventHandlers, languageCode, name, nluSettings, parent, transitionRouteGroups, transitionRoutes);
        }
    }
}
