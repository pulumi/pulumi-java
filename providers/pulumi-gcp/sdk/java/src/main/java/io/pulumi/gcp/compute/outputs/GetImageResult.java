// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetImageResult {
    private final Integer archiveSizeBytes;
    private final String creationTimestamp;
    private final String description;
    private final Integer diskSizeGb;
    private final String family;
    private final @Nullable String filter;
    private final String id;
    private final String imageEncryptionKeySha256;
    private final String imageId;
    private final String labelFingerprint;
    private final Map<String,String> labels;
    private final List<String> licenses;
    private final String name;
    private final String project;
    private final String selfLink;
    private final String sourceDisk;
    private final String sourceDiskEncryptionKeySha256;
    private final String sourceDiskId;
    private final String sourceImageId;
    private final String status;

    @OutputCustomType.Constructor({"archiveSizeBytes","creationTimestamp","description","diskSizeGb","family","filter","id","imageEncryptionKeySha256","imageId","labelFingerprint","labels","licenses","name","project","selfLink","sourceDisk","sourceDiskEncryptionKeySha256","sourceDiskId","sourceImageId","status"})
    private GetImageResult(
        Integer archiveSizeBytes,
        String creationTimestamp,
        String description,
        Integer diskSizeGb,
        String family,
        @Nullable String filter,
        String id,
        String imageEncryptionKeySha256,
        String imageId,
        String labelFingerprint,
        Map<String,String> labels,
        List<String> licenses,
        String name,
        String project,
        String selfLink,
        String sourceDisk,
        String sourceDiskEncryptionKeySha256,
        String sourceDiskId,
        String sourceImageId,
        String status) {
        this.archiveSizeBytes = Objects.requireNonNull(archiveSizeBytes);
        this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
        this.description = Objects.requireNonNull(description);
        this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
        this.family = Objects.requireNonNull(family);
        this.filter = filter;
        this.id = Objects.requireNonNull(id);
        this.imageEncryptionKeySha256 = Objects.requireNonNull(imageEncryptionKeySha256);
        this.imageId = Objects.requireNonNull(imageId);
        this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
        this.labels = Objects.requireNonNull(labels);
        this.licenses = Objects.requireNonNull(licenses);
        this.name = Objects.requireNonNull(name);
        this.project = Objects.requireNonNull(project);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.sourceDisk = Objects.requireNonNull(sourceDisk);
        this.sourceDiskEncryptionKeySha256 = Objects.requireNonNull(sourceDiskEncryptionKeySha256);
        this.sourceDiskId = Objects.requireNonNull(sourceDiskId);
        this.sourceImageId = Objects.requireNonNull(sourceImageId);
        this.status = Objects.requireNonNull(status);
    }

    public Integer getArchiveSizeBytes() {
        return this.archiveSizeBytes;
    }
    public String getCreationTimestamp() {
        return this.creationTimestamp;
    }
    public String getDescription() {
        return this.description;
    }
    public Integer getDiskSizeGb() {
        return this.diskSizeGb;
    }
    public String getFamily() {
        return this.family;
    }
    public Optional<String> getFilter() {
        return Optional.ofNullable(this.filter);
    }
    public String getId() {
        return this.id;
    }
    public String getImageEncryptionKeySha256() {
        return this.imageEncryptionKeySha256;
    }
    public String getImageId() {
        return this.imageId;
    }
    public String getLabelFingerprint() {
        return this.labelFingerprint;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public List<String> getLicenses() {
        return this.licenses;
    }
    public String getName() {
        return this.name;
    }
    public String getProject() {
        return this.project;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public String getSourceDisk() {
        return this.sourceDisk;
    }
    public String getSourceDiskEncryptionKeySha256() {
        return this.sourceDiskEncryptionKeySha256;
    }
    public String getSourceDiskId() {
        return this.sourceDiskId;
    }
    public String getSourceImageId() {
        return this.sourceImageId;
    }
    public String getStatus() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer archiveSizeBytes;
        private String creationTimestamp;
        private String description;
        private Integer diskSizeGb;
        private String family;
        private @Nullable String filter;
        private String id;
        private String imageEncryptionKeySha256;
        private String imageId;
        private String labelFingerprint;
        private Map<String,String> labels;
        private List<String> licenses;
        private String name;
        private String project;
        private String selfLink;
        private String sourceDisk;
        private String sourceDiskEncryptionKeySha256;
        private String sourceDiskId;
        private String sourceImageId;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveSizeBytes = defaults.archiveSizeBytes;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.family = defaults.family;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.imageEncryptionKeySha256 = defaults.imageEncryptionKeySha256;
    	      this.imageId = defaults.imageId;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskEncryptionKeySha256 = defaults.sourceDiskEncryptionKeySha256;
    	      this.sourceDiskId = defaults.sourceDiskId;
    	      this.sourceImageId = defaults.sourceImageId;
    	      this.status = defaults.status;
        }

        public Builder setArchiveSizeBytes(Integer archiveSizeBytes) {
            this.archiveSizeBytes = Objects.requireNonNull(archiveSizeBytes);
            return this;
        }

        public Builder setCreationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDiskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }

        public Builder setFamily(String family) {
            this.family = Objects.requireNonNull(family);
            return this;
        }

        public Builder setFilter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setImageEncryptionKeySha256(String imageEncryptionKeySha256) {
            this.imageEncryptionKeySha256 = Objects.requireNonNull(imageEncryptionKeySha256);
            return this;
        }

        public Builder setImageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }

        public Builder setLabelFingerprint(String labelFingerprint) {
            this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLicenses(List<String> licenses) {
            this.licenses = Objects.requireNonNull(licenses);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setSourceDisk(String sourceDisk) {
            this.sourceDisk = Objects.requireNonNull(sourceDisk);
            return this;
        }

        public Builder setSourceDiskEncryptionKeySha256(String sourceDiskEncryptionKeySha256) {
            this.sourceDiskEncryptionKeySha256 = Objects.requireNonNull(sourceDiskEncryptionKeySha256);
            return this;
        }

        public Builder setSourceDiskId(String sourceDiskId) {
            this.sourceDiskId = Objects.requireNonNull(sourceDiskId);
            return this;
        }

        public Builder setSourceImageId(String sourceImageId) {
            this.sourceImageId = Objects.requireNonNull(sourceImageId);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public GetImageResult build() {
            return new GetImageResult(archiveSizeBytes, creationTimestamp, description, diskSizeGb, family, filter, id, imageEncryptionKeySha256, imageId, labelFingerprint, labels, licenses, name, project, selfLink, sourceDisk, sourceDiskEncryptionKeySha256, sourceDiskId, sourceImageId, status);
        }
    }
}
