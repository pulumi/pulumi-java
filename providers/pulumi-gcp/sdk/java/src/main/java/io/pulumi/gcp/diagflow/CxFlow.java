// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.diagflow.CxFlowArgs;
import io.pulumi.gcp.diagflow.inputs.CxFlowState;
import io.pulumi.gcp.diagflow.outputs.CxFlowEventHandler;
import io.pulumi.gcp.diagflow.outputs.CxFlowNluSettings;
import io.pulumi.gcp.diagflow.outputs.CxFlowTransitionRoute;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

@ResourceType(type="gcp:diagflow/cxFlow:CxFlow")
public class CxFlow extends io.pulumi.resources.CustomResource {
    @OutputExport(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    @OutputExport(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }
    @OutputExport(name="eventHandlers", type=List.class, parameters={CxFlowEventHandler.class})
    private Output<List<CxFlowEventHandler>> eventHandlers;

    public Output<List<CxFlowEventHandler>> getEventHandlers() {
        return this.eventHandlers;
    }
    @OutputExport(name="languageCode", type=String.class, parameters={})
    private Output</* @Nullable */ String> languageCode;

    public Output</* @Nullable */ String> getLanguageCode() {
        return this.languageCode;
    }
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> getName() {
        return this.name;
    }
    @OutputExport(name="nluSettings", type=CxFlowNluSettings.class, parameters={})
    private Output</* @Nullable */ CxFlowNluSettings> nluSettings;

    public Output</* @Nullable */ CxFlowNluSettings> getNluSettings() {
        return this.nluSettings;
    }
    @OutputExport(name="parent", type=String.class, parameters={})
    private Output</* @Nullable */ String> parent;

    public Output</* @Nullable */ String> getParent() {
        return this.parent;
    }
    @OutputExport(name="transitionRouteGroups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> transitionRouteGroups;

    public Output</* @Nullable */ List<String>> getTransitionRouteGroups() {
        return this.transitionRouteGroups;
    }
    @OutputExport(name="transitionRoutes", type=List.class, parameters={CxFlowTransitionRoute.class})
    private Output</* @Nullable */ List<CxFlowTransitionRoute>> transitionRoutes;

    public Output</* @Nullable */ List<CxFlowTransitionRoute>> getTransitionRoutes() {
        return this.transitionRoutes;
    }

    public CxFlow(String name, CxFlowArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxFlow:CxFlow", name, args == null ? CxFlowArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private CxFlow(String name, Input<String> id, @Nullable CxFlowState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxFlow:CxFlow", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    public static CxFlow get(String name, Input<String> id, @Nullable CxFlowState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new CxFlow(name, id, state, options);
    }
}
