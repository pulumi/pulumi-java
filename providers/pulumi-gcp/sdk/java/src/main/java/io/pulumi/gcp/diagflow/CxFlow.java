// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.diagflow.CxFlowArgs;
import io.pulumi.gcp.diagflow.inputs.CxFlowState;
import io.pulumi.gcp.diagflow.outputs.CxFlowEventHandler;
import io.pulumi.gcp.diagflow.outputs.CxFlowNluSettings;
import io.pulumi.gcp.diagflow.outputs.CxFlowTransitionRoute;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Flows represents the conversation flows when you build your chatbot agent.
 * 
 * 
 * To get more information about Flow, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Dialogflowcx Flow Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 *     avatarUri: "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     enableStackdriverLogging: true,
 *     enableSpellCorrection: true,
 *     speechToTextSettings: {
 *         enableSpeechAdaptation: true,
 *     },
 * });
 * const basicFlow = new gcp.diagflow.CxFlow("basicFlow", {
 *     parent: agent.id,
 *     displayName: "MyFlow",
 *     description: "Test Flow",
 *     nluSettings: {
 *         classificationThreshold: 0.3,
 *         modelType: "MODEL_TYPE_STANDARD",
 *     },
 *     eventHandlers: [
 *         {
 *             event: "custom-event",
 *             triggerFulfillment: {
 *                 returnPartialResponses: false,
 *                 messages: [{
 *                     text: {
 *                         texts: ["I didn't get that. Can you say it again?"],
 *                     },
 *                 }],
 *             },
 *         },
 *         {
 *             event: "sys.no-match-default",
 *             triggerFulfillment: {
 *                 returnPartialResponses: false,
 *                 messages: [{
 *                     text: {
 *                         texts: ["Sorry, could you say that again?"],
 *                     },
 *                 }],
 *             },
 *         },
 *         {
 *             event: "sys.no-input-default",
 *             triggerFulfillment: {
 *                 returnPartialResponses: false,
 *                 messages: [{
 *                     text: {
 *                         texts: ["One more time?"],
 *                     },
 *                 }],
 *             },
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * agent = gcp.diagflow.CxAgent("agent",
 *     display_name="dialogflowcx-agent",
 *     location="global",
 *     default_language_code="en",
 *     supported_language_codes=[
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     time_zone="America/New_York",
 *     description="Example description.",
 *     avatar_uri="https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     enable_stackdriver_logging=True,
 *     enable_spell_correction=True,
 *     speech_to_text_settings=gcp.diagflow.CxAgentSpeechToTextSettingsArgs(
 *         enable_speech_adaptation=True,
 *     ))
 * basic_flow = gcp.diagflow.CxFlow("basicFlow",
 *     parent=agent.id,
 *     display_name="MyFlow",
 *     description="Test Flow",
 *     nlu_settings=gcp.diagflow.CxFlowNluSettingsArgs(
 *         classification_threshold=0.3,
 *         model_type="MODEL_TYPE_STANDARD",
 *     ),
 *     event_handlers=[
 *         gcp.diagflow.CxFlowEventHandlerArgs(
 *             event="custom-event",
 *             trigger_fulfillment=gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentArgs(
 *                 return_partial_responses=False,
 *                 messages=[gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs(
 *                     text=gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs(
 *                         texts=["I didn't get that. Can you say it again?"],
 *                     ),
 *                 )],
 *             ),
 *         ),
 *         gcp.diagflow.CxFlowEventHandlerArgs(
 *             event="sys.no-match-default",
 *             trigger_fulfillment=gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentArgs(
 *                 return_partial_responses=False,
 *                 messages=[gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs(
 *                     text=gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs(
 *                         texts=["Sorry, could you say that again?"],
 *                     ),
 *                 )],
 *             ),
 *         ),
 *         gcp.diagflow.CxFlowEventHandlerArgs(
 *             event="sys.no-input-default",
 *             trigger_fulfillment=gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentArgs(
 *                 return_partial_responses=False,
 *                 messages=[gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs(
 *                     text=gcp.diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs(
 *                         texts=["One more time?"],
 *                     ),
 *                 )],
 *             ),
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var agent = new Gcp.Diagflow.CxAgent("agent", new Gcp.Diagflow.CxAgentArgs
 *         {
 *             DisplayName = "dialogflowcx-agent",
 *             Location = "global",
 *             DefaultLanguageCode = "en",
 *             SupportedLanguageCodes = 
 *             {
 *                 "fr",
 *                 "de",
 *                 "es",
 *             },
 *             TimeZone = "America/New_York",
 *             Description = "Example description.",
 *             AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *             EnableStackdriverLogging = true,
 *             EnableSpellCorrection = true,
 *             SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
 *             {
 *                 EnableSpeechAdaptation = true,
 *             },
 *         });
 *         var basicFlow = new Gcp.Diagflow.CxFlow("basicFlow", new Gcp.Diagflow.CxFlowArgs
 *         {
 *             Parent = agent.Id,
 *             DisplayName = "MyFlow",
 *             Description = "Test Flow",
 *             NluSettings = new Gcp.Diagflow.Inputs.CxFlowNluSettingsArgs
 *             {
 *                 ClassificationThreshold = 0.3,
 *                 ModelType = "MODEL_TYPE_STANDARD",
 *             },
 *             EventHandlers = 
 *             {
 *                 new Gcp.Diagflow.Inputs.CxFlowEventHandlerArgs
 *                 {
 *                     Event = "custom-event",
 *                     TriggerFulfillment = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentArgs
 *                     {
 *                         ReturnPartialResponses = false,
 *                         Messages = 
 *                         {
 *                             new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageArgs
 *                             {
 *                                 Text = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs
 *                                 {
 *                                     Texts = 
 *                                     {
 *                                         "I didn't get that. Can you say it again?",
 *                                     },
 *                                 },
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Gcp.Diagflow.Inputs.CxFlowEventHandlerArgs
 *                 {
 *                     Event = "sys.no-match-default",
 *                     TriggerFulfillment = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentArgs
 *                     {
 *                         ReturnPartialResponses = false,
 *                         Messages = 
 *                         {
 *                             new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageArgs
 *                             {
 *                                 Text = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs
 *                                 {
 *                                     Texts = 
 *                                     {
 *                                         "Sorry, could you say that again?",
 *                                     },
 *                                 },
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Gcp.Diagflow.Inputs.CxFlowEventHandlerArgs
 *                 {
 *                     Event = "sys.no-input-default",
 *                     TriggerFulfillment = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentArgs
 *                     {
 *                         ReturnPartialResponses = false,
 *                         Messages = 
 *                         {
 *                             new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageArgs
 *                             {
 *                                 Text = new Gcp.Diagflow.Inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs
 *                                 {
 *                                     Texts = 
 *                                     {
 *                                         "One more time?",
 *                                     },
 *                                 },
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/diagflow"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
 * 			DisplayName:         pulumi.String("dialogflowcx-agent"),
 * 			Location:            pulumi.String("global"),
 * 			DefaultLanguageCode: pulumi.String("en"),
 * 			SupportedLanguageCodes: pulumi.StringArray{
 * 				pulumi.String("fr"),
 * 				pulumi.String("de"),
 * 				pulumi.String("es"),
 * 			},
 * 			TimeZone:                 pulumi.String("America/New_York"),
 * 			Description:              pulumi.String("Example description."),
 * 			AvatarUri:                pulumi.String("https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png"),
 * 			EnableStackdriverLogging: pulumi.Bool(true),
 * 			EnableSpellCorrection:    pulumi.Bool(true),
 * 			SpeechToTextSettings: &diagflow.CxAgentSpeechToTextSettingsArgs{
 * 				EnableSpeechAdaptation: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = diagflow.NewCxFlow(ctx, "basicFlow", &diagflow.CxFlowArgs{
 * 			Parent:      agent.ID(),
 * 			DisplayName: pulumi.String("MyFlow"),
 * 			Description: pulumi.String("Test Flow"),
 * 			NluSettings: &diagflow.CxFlowNluSettingsArgs{
 * 				ClassificationThreshold: pulumi.Float64(0.3),
 * 				ModelType:               pulumi.String("MODEL_TYPE_STANDARD"),
 * 			},
 * 			EventHandlers: diagflow.CxFlowEventHandlerArray{
 * 				&diagflow.CxFlowEventHandlerArgs{
 * 					Event: pulumi.String("custom-event"),
 * 					TriggerFulfillment: &diagflow.CxFlowEventHandlerTriggerFulfillmentArgs{
 * 						ReturnPartialResponses: pulumi.Bool(false),
 * 						Messages: diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArray{
 * 							&diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs{
 * 								Text: &diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{
 * 									Texts: pulumi.StringArray{
 * 										pulumi.String("I didn't get that. Can you say it again?"),
 * 									},
 * 								},
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&diagflow.CxFlowEventHandlerArgs{
 * 					Event: pulumi.String("sys.no-match-default"),
 * 					TriggerFulfillment: &diagflow.CxFlowEventHandlerTriggerFulfillmentArgs{
 * 						ReturnPartialResponses: pulumi.Bool(false),
 * 						Messages: diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArray{
 * 							&diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs{
 * 								Text: &diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{
 * 									Texts: pulumi.StringArray{
 * 										pulumi.String("Sorry, could you say that again?"),
 * 									},
 * 								},
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&diagflow.CxFlowEventHandlerArgs{
 * 					Event: pulumi.String("sys.no-input-default"),
 * 					TriggerFulfillment: &diagflow.CxFlowEventHandlerTriggerFulfillmentArgs{
 * 						ReturnPartialResponses: pulumi.Bool(false),
 * 						Messages: diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArray{
 * 							&diagflow.CxFlowEventHandlerTriggerFulfillmentMessageArgs{
 * 								Text: &diagflow.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs{
 * 									Texts: pulumi.StringArray{
 * 										pulumi.String("One more time?"),
 * 									},
 * 								},
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Flow can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/flows/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:diagflow/cxFlow:CxFlow default {{parent}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:diagflow/cxFlow:CxFlow")
public class CxFlow extends io.pulumi.resources.CustomResource {
    /**
     * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The human-readable name of the flow.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The human-readable name of the flow.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * A flow's event handlers serve two purposes:
     * They are responsible for handling events (e.g. no match, webhook errors) in the flow.
     * They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
     * Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
     * Structure is documented below.
     * 
     */
    @Export(name="eventHandlers", type=List.class, parameters={CxFlowEventHandler.class})
    private Output<List<CxFlowEventHandler>> eventHandlers;

    /**
     * @return A flow's event handlers serve two purposes:
     * They are responsible for handling events (e.g. no match, webhook errors) in the flow.
     * They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
     * Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
     * Structure is documented below.
     * 
     */
    public Output<List<CxFlowEventHandler>> getEventHandlers() {
        return this.eventHandlers;
    }
    /**
     * The language of the following fields in flow:
     * Flow.event_handlers.trigger_fulfillment.messages
     * Flow.event_handlers.trigger_fulfillment.conditional_cases
     * Flow.transition_routes.trigger_fulfillment.messages
     * Flow.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @Export(name="languageCode", type=String.class, parameters={})
    private Output</* @Nullable */ String> languageCode;

    /**
     * @return The language of the following fields in flow:
     * Flow.event_handlers.trigger_fulfillment.messages
     * Flow.event_handlers.trigger_fulfillment.conditional_cases
     * Flow.transition_routes.trigger_fulfillment.messages
     * Flow.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    public Output</* @Nullable */ String> getLanguageCode() {
        return this.languageCode;
    }
    /**
     * -
     * The unique identifier of this event handler.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return -
     * The unique identifier of this event handler.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * NLU related settings of the flow.
     * Structure is documented below.
     * 
     */
    @Export(name="nluSettings", type=CxFlowNluSettings.class, parameters={})
    private Output</* @Nullable */ CxFlowNluSettings> nluSettings;

    /**
     * @return NLU related settings of the flow.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ CxFlowNluSettings> getNluSettings() {
        return this.nluSettings;
    }
    /**
     * The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     * 
     */
    @Export(name="parent", type=String.class, parameters={})
    private Output</* @Nullable */ String> parent;

    /**
     * @return The agent to create a flow for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     * 
     */
    public Output</* @Nullable */ String> getParent() {
        return this.parent;
    }
    /**
     * A flow's transition route group serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     * 
     */
    @Export(name="transitionRouteGroups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> transitionRouteGroups;

    /**
     * @return A flow's transition route group serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     * 
     */
    public Output</* @Nullable */ List<String>> getTransitionRouteGroups() {
        return this.transitionRouteGroups;
    }
    /**
     * A flow's transition routes serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
     * 
     */
    @Export(name="transitionRoutes", type=List.class, parameters={CxFlowTransitionRoute.class})
    private Output</* @Nullable */ List<CxFlowTransitionRoute>> transitionRoutes;

    /**
     * @return A flow's transition routes serve two purposes:
     * They are responsible for matching the user's first utterances in the flow.
     * They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
     * 
     */
    public Output</* @Nullable */ List<CxFlowTransitionRoute>> getTransitionRoutes() {
        return this.transitionRoutes;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CxFlow(String name) {
        this(name, CxFlowArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CxFlow(String name, CxFlowArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CxFlow(String name, CxFlowArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxFlow:CxFlow", name, args == null ? CxFlowArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private CxFlow(String name, Output<String> id, @Nullable CxFlowState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxFlow:CxFlow", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CxFlow get(String name, Output<String> id, @Nullable CxFlowState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new CxFlow(name, id, state, options);
    }
}
