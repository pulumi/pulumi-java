// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch;
import io.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter;
import io.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class RegionUrlMapPathMatcherRouteRuleMatchRule {
    private final @Nullable String fullPathMatch;
    private final @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches;
    private final @Nullable Boolean ignoreCase;
    private final @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter> metadataFilters;
    private final @Nullable String prefixMatch;
    private final @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches;
    private final @Nullable String regexMatch;

    @OutputCustomType.Constructor({"fullPathMatch","headerMatches","ignoreCase","metadataFilters","prefixMatch","queryParameterMatches","regexMatch"})
    private RegionUrlMapPathMatcherRouteRuleMatchRule(
        @Nullable String fullPathMatch,
        @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches,
        @Nullable Boolean ignoreCase,
        @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter> metadataFilters,
        @Nullable String prefixMatch,
        @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches,
        @Nullable String regexMatch) {
        this.fullPathMatch = fullPathMatch;
        this.headerMatches = headerMatches;
        this.ignoreCase = ignoreCase;
        this.metadataFilters = metadataFilters;
        this.prefixMatch = prefixMatch;
        this.queryParameterMatches = queryParameterMatches;
        this.regexMatch = regexMatch;
    }

    public Optional<String> getFullPathMatch() {
        return Optional.ofNullable(this.fullPathMatch);
    }
    public List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch> getHeaderMatches() {
        return this.headerMatches == null ? List.of() : this.headerMatches;
    }
    public Optional<Boolean> getIgnoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    public List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter> getMetadataFilters() {
        return this.metadataFilters == null ? List.of() : this.metadataFilters;
    }
    public Optional<String> getPrefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }
    public List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch> getQueryParameterMatches() {
        return this.queryParameterMatches == null ? List.of() : this.queryParameterMatches;
    }
    public Optional<String> getRegexMatch() {
        return Optional.ofNullable(this.regexMatch);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapPathMatcherRouteRuleMatchRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String fullPathMatch;
        private @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches;
        private @Nullable Boolean ignoreCase;
        private @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter> metadataFilters;
        private @Nullable String prefixMatch;
        private @Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches;
        private @Nullable String regexMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionUrlMapPathMatcherRouteRuleMatchRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fullPathMatch = defaults.fullPathMatch;
    	      this.headerMatches = defaults.headerMatches;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.metadataFilters = defaults.metadataFilters;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.queryParameterMatches = defaults.queryParameterMatches;
    	      this.regexMatch = defaults.regexMatch;
        }

        public Builder setFullPathMatch(@Nullable String fullPathMatch) {
            this.fullPathMatch = fullPathMatch;
            return this;
        }

        public Builder setHeaderMatches(@Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch> headerMatches) {
            this.headerMatches = headerMatches;
            return this;
        }

        public Builder setIgnoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }

        public Builder setMetadataFilters(@Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter> metadataFilters) {
            this.metadataFilters = metadataFilters;
            return this;
        }

        public Builder setPrefixMatch(@Nullable String prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }

        public Builder setQueryParameterMatches(@Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch> queryParameterMatches) {
            this.queryParameterMatches = queryParameterMatches;
            return this;
        }

        public Builder setRegexMatch(@Nullable String regexMatch) {
            this.regexMatch = regexMatch;
            return this;
        }

        public RegionUrlMapPathMatcherRouteRuleMatchRule build() {
            return new RegionUrlMapPathMatcherRouteRuleMatchRule(fullPathMatch, headerMatches, ignoreCase, metadataFilters, prefixMatch, queryParameterMatches, regexMatch);
        }
    }
}
