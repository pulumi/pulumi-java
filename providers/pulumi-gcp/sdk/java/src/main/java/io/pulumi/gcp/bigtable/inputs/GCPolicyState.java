// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigtable.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigtable.inputs.GCPolicyMaxAgeGetArgs;
import io.pulumi.gcp.bigtable.inputs.GCPolicyMaxVersionGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GCPolicyState extends io.pulumi.resources.ResourceArgs {

    public static final GCPolicyState Empty = new GCPolicyState();

    /**
     * The name of the column family.
     * 
     */
    @InputImport(name="columnFamily")
      private final @Nullable Input<String> columnFamily;

    public Input<String> getColumnFamily() {
        return this.columnFamily == null ? Input.empty() : this.columnFamily;
    }

    /**
     * The name of the Bigtable instance.
     * 
     */
    @InputImport(name="instanceName")
      private final @Nullable Input<String> instanceName;

    public Input<String> getInstanceName() {
        return this.instanceName == null ? Input.empty() : this.instanceName;
    }

    /**
     * GC policy that applies to all cells older than the given age.
     * 
     */
    @InputImport(name="maxAge")
      private final @Nullable Input<GCPolicyMaxAgeGetArgs> maxAge;

    public Input<GCPolicyMaxAgeGetArgs> getMaxAge() {
        return this.maxAge == null ? Input.empty() : this.maxAge;
    }

    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     * 
     */
    @InputImport(name="maxVersions")
      private final @Nullable Input<List<GCPolicyMaxVersionGetArgs>> maxVersions;

    public Input<List<GCPolicyMaxVersionGetArgs>> getMaxVersions() {
        return this.maxVersions == null ? Input.empty() : this.maxVersions;
    }

    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     * 
     */
    @InputImport(name="mode")
      private final @Nullable Input<String> mode;

    public Input<String> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The name of the table.
     * 
     */
    @InputImport(name="table")
      private final @Nullable Input<String> table;

    public Input<String> getTable() {
        return this.table == null ? Input.empty() : this.table;
    }

    public GCPolicyState(
        @Nullable Input<String> columnFamily,
        @Nullable Input<String> instanceName,
        @Nullable Input<GCPolicyMaxAgeGetArgs> maxAge,
        @Nullable Input<List<GCPolicyMaxVersionGetArgs>> maxVersions,
        @Nullable Input<String> mode,
        @Nullable Input<String> project,
        @Nullable Input<String> table) {
        this.columnFamily = columnFamily;
        this.instanceName = instanceName;
        this.maxAge = maxAge;
        this.maxVersions = maxVersions;
        this.mode = mode;
        this.project = project;
        this.table = table;
    }

    private GCPolicyState() {
        this.columnFamily = Input.empty();
        this.instanceName = Input.empty();
        this.maxAge = Input.empty();
        this.maxVersions = Input.empty();
        this.mode = Input.empty();
        this.project = Input.empty();
        this.table = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GCPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> columnFamily;
        private @Nullable Input<String> instanceName;
        private @Nullable Input<GCPolicyMaxAgeGetArgs> maxAge;
        private @Nullable Input<List<GCPolicyMaxVersionGetArgs>> maxVersions;
        private @Nullable Input<String> mode;
        private @Nullable Input<String> project;
        private @Nullable Input<String> table;

        public Builder() {
    	      // Empty
        }

        public Builder(GCPolicyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnFamily = defaults.columnFamily;
    	      this.instanceName = defaults.instanceName;
    	      this.maxAge = defaults.maxAge;
    	      this.maxVersions = defaults.maxVersions;
    	      this.mode = defaults.mode;
    	      this.project = defaults.project;
    	      this.table = defaults.table;
        }

        public Builder columnFamily(@Nullable Input<String> columnFamily) {
            this.columnFamily = columnFamily;
            return this;
        }

        public Builder columnFamily(@Nullable String columnFamily) {
            this.columnFamily = Input.ofNullable(columnFamily);
            return this;
        }

        public Builder instanceName(@Nullable Input<String> instanceName) {
            this.instanceName = instanceName;
            return this;
        }

        public Builder instanceName(@Nullable String instanceName) {
            this.instanceName = Input.ofNullable(instanceName);
            return this;
        }

        public Builder maxAge(@Nullable Input<GCPolicyMaxAgeGetArgs> maxAge) {
            this.maxAge = maxAge;
            return this;
        }

        public Builder maxAge(@Nullable GCPolicyMaxAgeGetArgs maxAge) {
            this.maxAge = Input.ofNullable(maxAge);
            return this;
        }

        public Builder maxVersions(@Nullable Input<List<GCPolicyMaxVersionGetArgs>> maxVersions) {
            this.maxVersions = maxVersions;
            return this;
        }

        public Builder maxVersions(@Nullable List<GCPolicyMaxVersionGetArgs> maxVersions) {
            this.maxVersions = Input.ofNullable(maxVersions);
            return this;
        }

        public Builder mode(@Nullable Input<String> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(@Nullable String mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder table(@Nullable Input<String> table) {
            this.table = table;
            return this;
        }

        public Builder table(@Nullable String table) {
            this.table = Input.ofNullable(table);
            return this;
        }
        public GCPolicyState build() {
            return new GCPolicyState(columnFamily, instanceName, maxAge, maxVersions, mode, project, table);
        }
    }
}
