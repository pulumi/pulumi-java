// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.billing;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.billing.inputs.BudgetAllUpdatesRuleArgs;
import io.pulumi.gcp.billing.inputs.BudgetAmountArgs;
import io.pulumi.gcp.billing.inputs.BudgetBudgetFilterArgs;
import io.pulumi.gcp.billing.inputs.BudgetThresholdRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BudgetArgs extends io.pulumi.resources.ResourceArgs {

    public static final BudgetArgs Empty = new BudgetArgs();

    /**
     * Defines notifications that are sent on every update to the
     * billing account's spend, regardless of the thresholds defined
     * using threshold rules.
     * Structure is documented below.
     * 
     */
    @Import(name="allUpdatesRule")
      private final @Nullable Output<BudgetAllUpdatesRuleArgs> allUpdatesRule;

    public Output<BudgetAllUpdatesRuleArgs> getAllUpdatesRule() {
        return this.allUpdatesRule == null ? Output.empty() : this.allUpdatesRule;
    }

    /**
     * The budgeted amount for each usage period.
     * Structure is documented below.
     * 
     */
    @Import(name="amount", required=true)
      private final Output<BudgetAmountArgs> amount;

    public Output<BudgetAmountArgs> getAmount() {
        return this.amount;
    }

    /**
     * ID of the billing account to set a budget on.
     * 
     */
    @Import(name="billingAccount", required=true)
      private final Output<String> billingAccount;

    public Output<String> getBillingAccount() {
        return this.billingAccount;
    }

    /**
     * Filters that define which resources are used to compute the actual
     * spend against the budget.
     * Structure is documented below.
     * 
     */
    @Import(name="budgetFilter")
      private final @Nullable Output<BudgetBudgetFilterArgs> budgetFilter;

    public Output<BudgetBudgetFilterArgs> getBudgetFilter() {
        return this.budgetFilter == null ? Output.empty() : this.budgetFilter;
    }

    /**
     * User data for display name in UI. Must be <= 60 chars.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Rules that trigger alerts (notifications of thresholds being
     * crossed) when spend exceeds the specified percentages of the
     * budget.
     * Structure is documented below.
     * 
     */
    @Import(name="thresholdRules", required=true)
      private final Output<List<BudgetThresholdRuleArgs>> thresholdRules;

    public Output<List<BudgetThresholdRuleArgs>> getThresholdRules() {
        return this.thresholdRules;
    }

    public BudgetArgs(
        @Nullable Output<BudgetAllUpdatesRuleArgs> allUpdatesRule,
        Output<BudgetAmountArgs> amount,
        Output<String> billingAccount,
        @Nullable Output<BudgetBudgetFilterArgs> budgetFilter,
        @Nullable Output<String> displayName,
        Output<List<BudgetThresholdRuleArgs>> thresholdRules) {
        this.allUpdatesRule = allUpdatesRule;
        this.amount = Objects.requireNonNull(amount, "expected parameter 'amount' to be non-null");
        this.billingAccount = Objects.requireNonNull(billingAccount, "expected parameter 'billingAccount' to be non-null");
        this.budgetFilter = budgetFilter;
        this.displayName = displayName;
        this.thresholdRules = Objects.requireNonNull(thresholdRules, "expected parameter 'thresholdRules' to be non-null");
    }

    private BudgetArgs() {
        this.allUpdatesRule = Output.empty();
        this.amount = Output.empty();
        this.billingAccount = Output.empty();
        this.budgetFilter = Output.empty();
        this.displayName = Output.empty();
        this.thresholdRules = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BudgetAllUpdatesRuleArgs> allUpdatesRule;
        private Output<BudgetAmountArgs> amount;
        private Output<String> billingAccount;
        private @Nullable Output<BudgetBudgetFilterArgs> budgetFilter;
        private @Nullable Output<String> displayName;
        private Output<List<BudgetThresholdRuleArgs>> thresholdRules;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allUpdatesRule = defaults.allUpdatesRule;
    	      this.amount = defaults.amount;
    	      this.billingAccount = defaults.billingAccount;
    	      this.budgetFilter = defaults.budgetFilter;
    	      this.displayName = defaults.displayName;
    	      this.thresholdRules = defaults.thresholdRules;
        }

        public Builder allUpdatesRule(@Nullable Output<BudgetAllUpdatesRuleArgs> allUpdatesRule) {
            this.allUpdatesRule = allUpdatesRule;
            return this;
        }
        public Builder allUpdatesRule(@Nullable BudgetAllUpdatesRuleArgs allUpdatesRule) {
            this.allUpdatesRule = Output.ofNullable(allUpdatesRule);
            return this;
        }
        public Builder amount(Output<BudgetAmountArgs> amount) {
            this.amount = Objects.requireNonNull(amount);
            return this;
        }
        public Builder amount(BudgetAmountArgs amount) {
            this.amount = Output.of(Objects.requireNonNull(amount));
            return this;
        }
        public Builder billingAccount(Output<String> billingAccount) {
            this.billingAccount = Objects.requireNonNull(billingAccount);
            return this;
        }
        public Builder billingAccount(String billingAccount) {
            this.billingAccount = Output.of(Objects.requireNonNull(billingAccount));
            return this;
        }
        public Builder budgetFilter(@Nullable Output<BudgetBudgetFilterArgs> budgetFilter) {
            this.budgetFilter = budgetFilter;
            return this;
        }
        public Builder budgetFilter(@Nullable BudgetBudgetFilterArgs budgetFilter) {
            this.budgetFilter = Output.ofNullable(budgetFilter);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }
        public Builder thresholdRules(Output<List<BudgetThresholdRuleArgs>> thresholdRules) {
            this.thresholdRules = Objects.requireNonNull(thresholdRules);
            return this;
        }
        public Builder thresholdRules(List<BudgetThresholdRuleArgs> thresholdRules) {
            this.thresholdRules = Output.of(Objects.requireNonNull(thresholdRules));
            return this;
        }
        public Builder thresholdRules(BudgetThresholdRuleArgs... thresholdRules) {
            return thresholdRules(List.of(thresholdRules));
        }        public BudgetArgs build() {
            return new BudgetArgs(allUpdatesRule, amount, billingAccount, budgetFilter, displayName, thresholdRules);
        }
    }
}
