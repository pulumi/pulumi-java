// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.RouteArgs;
import io.pulumi.gcp.compute.inputs.RouteState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Represents a Route resource.
 * 
 * A route is a rule that specifies how certain packets should be handled by
 * the virtual network. Routes are associated with virtual machines by tag,
 * and the set of routes for a particular virtual machine is called its
 * routing table. For each packet leaving a virtual machine, the system
 * searches that virtual machine's routing table for a single best matching
 * route.
 * 
 * Routes match packets by destination IP address, preferring smaller or more
 * specific ranges over larger ones. If there is a tie, the system selects
 * the route with the smallest priority value. If there is still a tie, it
 * uses the layer three and four packet headers to select just one of the
 * remaining matching routes. The packet is then forwarded as specified by
 * the next_hop field of the winning route -- either to another virtual
 * machine destination, a virtual machine gateway or a Compute
 * Engine-operated gateway. Packets that do not match any route in the
 * sending virtual machine's routing table will be dropped.
 * 
 * A Route resource must have exactly one specification of either
 * nextHopGateway, nextHopInstance, nextHopIp, nextHopVpnTunnel, or
 * nextHopIlb.
 * 
 * 
 * To get more information about Route, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routes)
 * * How-to Guides
 *     * [Using Routes](https://cloud.google.com/vpc/docs/using-routes)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Route Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const defaultNetwork = new gcp.compute.Network("defaultNetwork", {});
 * const defaultRoute = new gcp.compute.Route("defaultRoute", {
 *     destRange: "15.0.0.0/24",
 *     network: defaultNetwork.name,
 *     nextHopIp: "10.132.1.5",
 *     priority: 100,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default_network = gcp.compute.Network("defaultNetwork")
 * default_route = gcp.compute.Route("defaultRoute",
 *     dest_range="15.0.0.0/24",
 *     network=default_network.name,
 *     next_hop_ip="10.132.1.5",
 *     priority=100)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var defaultNetwork = new Gcp.Compute.Network("defaultNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *         });
 *         var defaultRoute = new Gcp.Compute.Route("defaultRoute", new Gcp.Compute.RouteArgs
 *         {
 *             DestRange = "15.0.0.0/24",
 *             Network = defaultNetwork.Name,
 *             NextHopIp = "10.132.1.5",
 *             Priority = 100,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRoute(ctx, "defaultRoute", &compute.RouteArgs{
 * 			DestRange: pulumi.String("15.0.0.0/24"),
 * 			Network:   defaultNetwork.Name,
 * 			NextHopIp: pulumi.String("10.132.1.5"),
 * 			Priority:  pulumi.Int(100),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Route Ilb
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const defaultNetwork = new gcp.compute.Network("defaultNetwork", {autoCreateSubnetworks: false});
 * const defaultSubnetwork = new gcp.compute.Subnetwork("defaultSubnetwork", {
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: defaultNetwork.id,
 * });
 * const hc = new gcp.compute.HealthCheck("hc", {
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 *     tcpHealthCheck: {
 *         port: "80",
 *     },
 * });
 * const backend = new gcp.compute.RegionBackendService("backend", {
 *     region: "us-central1",
 *     healthChecks: [hc.id],
 * });
 * const defaultForwardingRule = new gcp.compute.ForwardingRule("defaultForwardingRule", {
 *     region: "us-central1",
 *     loadBalancingScheme: "INTERNAL",
 *     backendService: backend.id,
 *     allPorts: true,
 *     network: defaultNetwork.name,
 *     subnetwork: defaultSubnetwork.name,
 * });
 * const route_ilb = new gcp.compute.Route("route-ilb", {
 *     destRange: "0.0.0.0/0",
 *     network: defaultNetwork.name,
 *     nextHopIlb: defaultForwardingRule.id,
 *     priority: 2000,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default_network = gcp.compute.Network("defaultNetwork", auto_create_subnetworks=False)
 * default_subnetwork = gcp.compute.Subnetwork("defaultSubnetwork",
 *     ip_cidr_range="10.0.1.0/24",
 *     region="us-central1",
 *     network=default_network.id)
 * hc = gcp.compute.HealthCheck("hc",
 *     check_interval_sec=1,
 *     timeout_sec=1,
 *     tcp_health_check=gcp.compute.HealthCheckTcpHealthCheckArgs(
 *         port=80,
 *     ))
 * backend = gcp.compute.RegionBackendService("backend",
 *     region="us-central1",
 *     health_checks=[hc.id])
 * default_forwarding_rule = gcp.compute.ForwardingRule("defaultForwardingRule",
 *     region="us-central1",
 *     load_balancing_scheme="INTERNAL",
 *     backend_service=backend.id,
 *     all_ports=True,
 *     network=default_network.name,
 *     subnetwork=default_subnetwork.name)
 * route_ilb = gcp.compute.Route("route-ilb",
 *     dest_range="0.0.0.0/0",
 *     network=default_network.name,
 *     next_hop_ilb=default_forwarding_rule.id,
 *     priority=2000)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var defaultNetwork = new Gcp.Compute.Network("defaultNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var defaultSubnetwork = new Gcp.Compute.Subnetwork("defaultSubnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.1.0/24",
 *             Region = "us-central1",
 *             Network = defaultNetwork.Id,
 *         });
 *         var hc = new Gcp.Compute.HealthCheck("hc", new Gcp.Compute.HealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *             TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *         });
 *         var backend = new Gcp.Compute.RegionBackendService("backend", new Gcp.Compute.RegionBackendServiceArgs
 *         {
 *             Region = "us-central1",
 *             HealthChecks = 
 *             {
 *                 hc.Id,
 *             },
 *         });
 *         var defaultForwardingRule = new Gcp.Compute.ForwardingRule("defaultForwardingRule", new Gcp.Compute.ForwardingRuleArgs
 *         {
 *             Region = "us-central1",
 *             LoadBalancingScheme = "INTERNAL",
 *             BackendService = backend.Id,
 *             AllPorts = true,
 *             Network = defaultNetwork.Name,
 *             Subnetwork = defaultSubnetwork.Name,
 *         });
 *         var route_ilb = new Gcp.Compute.Route("route-ilb", new Gcp.Compute.RouteArgs
 *         {
 *             DestRange = "0.0.0.0/0",
 *             Network = defaultNetwork.Name,
 *             NextHopIlb = defaultForwardingRule.Id,
 *             Priority = 2000,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.1.0/24"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     defaultNetwork.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		hc, err := compute.NewHealthCheck(ctx, "hc", &compute.HealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		backend, err := compute.NewRegionBackendService(ctx, "backend", &compute.RegionBackendServiceArgs{
 * 			Region: pulumi.String("us-central1"),
 * 			HealthChecks: pulumi.String{
 * 				hc.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultForwardingRule, err := compute.NewForwardingRule(ctx, "defaultForwardingRule", &compute.ForwardingRuleArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			LoadBalancingScheme: pulumi.String("INTERNAL"),
 * 			BackendService:      backend.ID(),
 * 			AllPorts:            pulumi.Bool(true),
 * 			Network:             defaultNetwork.Name,
 * 			Subnetwork:          defaultSubnetwork.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRoute(ctx, "route-ilb", &compute.RouteArgs{
 * 			DestRange:  pulumi.String("0.0.0.0/0"),
 * 			Network:    defaultNetwork.Name,
 * 			NextHopIlb: defaultForwardingRule.ID(),
 * 			Priority:   pulumi.Int(2000),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Route Ilb Vip
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const producerNetwork = new gcp.compute.Network("producerNetwork", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * const producerSubnetwork = new gcp.compute.Subnetwork("producerSubnetwork", {
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: producerNetwork.id,
 * }, {
 *     provider: google_beta,
 * });
 * const consumerNetwork = new gcp.compute.Network("consumerNetwork", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * const consumerSubnetwork = new gcp.compute.Subnetwork("consumerSubnetwork", {
 *     ipCidrRange: "10.0.2.0/24",
 *     region: "us-central1",
 *     network: consumerNetwork.id,
 * }, {
 *     provider: google_beta,
 * });
 * const peering1 = new gcp.compute.NetworkPeering("peering1", {
 *     network: consumerNetwork.id,
 *     peerNetwork: producerNetwork.id,
 * }, {
 *     provider: google_beta,
 * });
 * const peering2 = new gcp.compute.NetworkPeering("peering2", {
 *     network: producerNetwork.id,
 *     peerNetwork: consumerNetwork.id,
 * }, {
 *     provider: google_beta,
 * });
 * const hc = new gcp.compute.HealthCheck("hc", {
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 *     tcpHealthCheck: {
 *         port: "80",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const backend = new gcp.compute.RegionBackendService("backend", {
 *     region: "us-central1",
 *     healthChecks: [hc.id],
 * }, {
 *     provider: google_beta,
 * });
 * const _default = new gcp.compute.ForwardingRule("default", {
 *     region: "us-central1",
 *     loadBalancingScheme: "INTERNAL",
 *     backendService: backend.id,
 *     allPorts: true,
 *     network: producerNetwork.name,
 *     subnetwork: producerSubnetwork.name,
 * }, {
 *     provider: google_beta,
 * });
 * const route_ilb = new gcp.compute.Route("route-ilb", {
 *     destRange: "0.0.0.0/0",
 *     network: consumerNetwork.name,
 *     nextHopIlb: _default.ipAddress,
 *     priority: 2000,
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 * }, {
 *     provider: google_beta,
 *     dependsOn: [
 *         peering1,
 *         peering2,
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * producer_network = gcp.compute.Network("producerNetwork", auto_create_subnetworks=False,
 * opts=pulumi.ResourceOptions(provider=google_beta))
 * producer_subnetwork = gcp.compute.Subnetwork("producerSubnetwork",
 *     ip_cidr_range="10.0.1.0/24",
 *     region="us-central1",
 *     network=producer_network.id,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * consumer_network = gcp.compute.Network("consumerNetwork", auto_create_subnetworks=False,
 * opts=pulumi.ResourceOptions(provider=google_beta))
 * consumer_subnetwork = gcp.compute.Subnetwork("consumerSubnetwork",
 *     ip_cidr_range="10.0.2.0/24",
 *     region="us-central1",
 *     network=consumer_network.id,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * peering1 = gcp.compute.NetworkPeering("peering1",
 *     network=consumer_network.id,
 *     peer_network=producer_network.id,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * peering2 = gcp.compute.NetworkPeering("peering2",
 *     network=producer_network.id,
 *     peer_network=consumer_network.id,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * hc = gcp.compute.HealthCheck("hc",
 *     check_interval_sec=1,
 *     timeout_sec=1,
 *     tcp_health_check=gcp.compute.HealthCheckTcpHealthCheckArgs(
 *         port=80,
 *     ),
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * backend = gcp.compute.RegionBackendService("backend",
 *     region="us-central1",
 *     health_checks=[hc.id],
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * default = gcp.compute.ForwardingRule("default",
 *     region="us-central1",
 *     load_balancing_scheme="INTERNAL",
 *     backend_service=backend.id,
 *     all_ports=True,
 *     network=producer_network.name,
 *     subnetwork=producer_subnetwork.name,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * route_ilb = gcp.compute.Route("route-ilb",
 *     dest_range="0.0.0.0/0",
 *     network=consumer_network.name,
 *     next_hop_ilb=default.ip_address,
 *     priority=2000,
 *     tags=[
 *         "tag1",
 *         "tag2",
 *     ],
 *     opts=pulumi.ResourceOptions(provider=google_beta,
 *         depends_on=[
 *             peering1,
 *             peering2,
 *         ]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var producerNetwork = new Gcp.Compute.Network("producerNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var producerSubnetwork = new Gcp.Compute.Subnetwork("producerSubnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.1.0/24",
 *             Region = "us-central1",
 *             Network = producerNetwork.Id,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var consumerNetwork = new Gcp.Compute.Network("consumerNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var consumerSubnetwork = new Gcp.Compute.Subnetwork("consumerSubnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.2.0/24",
 *             Region = "us-central1",
 *             Network = consumerNetwork.Id,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var peering1 = new Gcp.Compute.NetworkPeering("peering1", new Gcp.Compute.NetworkPeeringArgs
 *         {
 *             Network = consumerNetwork.Id,
 *             PeerNetwork = producerNetwork.Id,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var peering2 = new Gcp.Compute.NetworkPeering("peering2", new Gcp.Compute.NetworkPeeringArgs
 *         {
 *             Network = producerNetwork.Id,
 *             PeerNetwork = consumerNetwork.Id,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var hc = new Gcp.Compute.HealthCheck("hc", new Gcp.Compute.HealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *             TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var backend = new Gcp.Compute.RegionBackendService("backend", new Gcp.Compute.RegionBackendServiceArgs
 *         {
 *             Region = "us-central1",
 *             HealthChecks = 
 *             {
 *                 hc.Id,
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var @default = new Gcp.Compute.ForwardingRule("default", new Gcp.Compute.ForwardingRuleArgs
 *         {
 *             Region = "us-central1",
 *             LoadBalancingScheme = "INTERNAL",
 *             BackendService = backend.Id,
 *             AllPorts = true,
 *             Network = producerNetwork.Name,
 *             Subnetwork = producerSubnetwork.Name,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var route_ilb = new Gcp.Compute.Route("route-ilb", new Gcp.Compute.RouteArgs
 *         {
 *             DestRange = "0.0.0.0/0",
 *             Network = consumerNetwork.Name,
 *             NextHopIlb = @default.IpAddress,
 *             Priority = 2000,
 *             Tags = 
 *             {
 *                 "tag1",
 *                 "tag2",
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *             DependsOn = 
 *             {
 *                 peering1,
 *                 peering2,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		producerNetwork, err := compute.NewNetwork(ctx, "producerNetwork", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		producerSubnetwork, err := compute.NewSubnetwork(ctx, "producerSubnetwork", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.1.0/24"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     producerNetwork.ID(),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		consumerNetwork, err := compute.NewNetwork(ctx, "consumerNetwork", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetwork(ctx, "consumerSubnetwork", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.2.0/24"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     consumerNetwork.ID(),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		peering1, err := compute.NewNetworkPeering(ctx, "peering1", &compute.NetworkPeeringArgs{
 * 			Network:     consumerNetwork.ID(),
 * 			PeerNetwork: producerNetwork.ID(),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		peering2, err := compute.NewNetworkPeering(ctx, "peering2", &compute.NetworkPeeringArgs{
 * 			Network:     producerNetwork.ID(),
 * 			PeerNetwork: consumerNetwork.ID(),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		hc, err := compute.NewHealthCheck(ctx, "hc", &compute.HealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		backend, err := compute.NewRegionBackendService(ctx, "backend", &compute.RegionBackendServiceArgs{
 * 			Region: pulumi.String("us-central1"),
 * 			HealthChecks: pulumi.String{
 * 				hc.ID(),
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewForwardingRule(ctx, "default", &compute.ForwardingRuleArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			LoadBalancingScheme: pulumi.String("INTERNAL"),
 * 			BackendService:      backend.ID(),
 * 			AllPorts:            pulumi.Bool(true),
 * 			Network:             producerNetwork.Name,
 * 			Subnetwork:          producerSubnetwork.Name,
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRoute(ctx, "route-ilb", &compute.RouteArgs{
 * 			DestRange:  pulumi.String("0.0.0.0/0"),
 * 			Network:    consumerNetwork.Name,
 * 			NextHopIlb: _default.IpAddress,
 * 			Priority:   pulumi.Int(2000),
 * 			Tags: pulumi.StringArray{
 * 				pulumi.String("tag1"),
 * 				pulumi.String("tag2"),
 * 			},
 * 		}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
 * 			peering1,
 * 			peering2,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Route can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/route:Route default projects/{{project}}/global/routes/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/route:Route default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/route:Route default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/route:Route")
public class Route extends io.pulumi.resources.CustomResource {
    /**
     * An optional description of this resource. Provide this property
     * when you create the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property
     * when you create the resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The destination range of outgoing packets that this route applies to.
     * Only IPv4 is supported.
     * 
     */
    @Export(name="destRange", type=String.class, parameters={})
    private Output<String> destRange;

    /**
     * @return The destination range of outgoing packets that this route applies to.
     * Only IPv4 is supported.
     * 
     */
    public Output<String> getDestRange() {
        return this.destRange;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The network that this route applies to.
     * 
     */
    @Export(name="network", type=String.class, parameters={})
    private Output<String> network;

    /**
     * @return The network that this route applies to.
     * 
     */
    public Output<String> getNetwork() {
        return this.network;
    }
    /**
     * URL to a gateway that should handle matching packets.
     * Currently, you can only specify the internet gateway, using a full or
     * partial valid URL:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/gateways/default-internet-gateway`
     * * `projects/project/global/gateways/default-internet-gateway`
     * * `global/gateways/default-internet-gateway`
     * * The string `default-internet-gateway`.
     * 
     */
    @Export(name="nextHopGateway", type=String.class, parameters={})
    private Output</* @Nullable */ String> nextHopGateway;

    /**
     * @return URL to a gateway that should handle matching packets.
     * Currently, you can only specify the internet gateway, using a full or
     * partial valid URL:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/gateways/default-internet-gateway`
     * * `projects/project/global/gateways/default-internet-gateway`
     * * `global/gateways/default-internet-gateway`
     * * The string `default-internet-gateway`.
     * 
     */
    public Output</* @Nullable */ String> getNextHopGateway() {
        return this.nextHopGateway;
    }
    /**
     * The IP address or URL to a forwarding rule of type
     * loadBalancingScheme=INTERNAL that should handle matching
     * packets.
     * With the GA provider you can only specify the forwarding
     * rule as a partial or full URL. For example, the following
     * are all valid values:
     * * 10.128.0.56
     * * https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule
     * * regions/region/forwardingRules/forwardingRule
     * When the beta provider, you can also specify the IP address
     * of a forwarding rule from the same VPC or any peered VPC.
     * Note that this can only be used when the destinationRange is
     * a public (non-RFC 1918) IP CIDR range.
     * 
     */
    @Export(name="nextHopIlb", type=String.class, parameters={})
    private Output</* @Nullable */ String> nextHopIlb;

    /**
     * @return The IP address or URL to a forwarding rule of type
     * loadBalancingScheme=INTERNAL that should handle matching
     * packets.
     * With the GA provider you can only specify the forwarding
     * rule as a partial or full URL. For example, the following
     * are all valid values:
     * * 10.128.0.56
     * * https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule
     * * regions/region/forwardingRules/forwardingRule
     * When the beta provider, you can also specify the IP address
     * of a forwarding rule from the same VPC or any peered VPC.
     * Note that this can only be used when the destinationRange is
     * a public (non-RFC 1918) IP CIDR range.
     * 
     */
    public Output</* @Nullable */ String> getNextHopIlb() {
        return this.nextHopIlb;
    }
    /**
     * URL to an instance that should handle matching packets.
     * You can specify this as a full or partial URL. For example:
     * * `https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance`
     * * `projects/project/zones/zone/instances/instance`
     * * `zones/zone/instances/instance`
     * * Just the instance name, with the zone in `next_hop_instance_zone`.
     * 
     */
    @Export(name="nextHopInstance", type=String.class, parameters={})
    private Output</* @Nullable */ String> nextHopInstance;

    /**
     * @return URL to an instance that should handle matching packets.
     * You can specify this as a full or partial URL. For example:
     * * `https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance`
     * * `projects/project/zones/zone/instances/instance`
     * * `zones/zone/instances/instance`
     * * Just the instance name, with the zone in `next_hop_instance_zone`.
     * 
     */
    public Output</* @Nullable */ String> getNextHopInstance() {
        return this.nextHopInstance;
    }
    /**
     * (Optional when `next_hop_instance` is
     * specified)  The zone of the instance specified in
     * `next_hop_instance`.  Omit if `next_hop_instance` is specified as
     * a URL.
     * 
     */
    @Export(name="nextHopInstanceZone", type=String.class, parameters={})
    private Output<String> nextHopInstanceZone;

    /**
     * @return (Optional when `next_hop_instance` is
     * specified)  The zone of the instance specified in
     * `next_hop_instance`.  Omit if `next_hop_instance` is specified as
     * a URL.
     * 
     */
    public Output<String> getNextHopInstanceZone() {
        return this.nextHopInstanceZone;
    }
    /**
     * Network IP address of an instance that should handle matching packets.
     * 
     */
    @Export(name="nextHopIp", type=String.class, parameters={})
    private Output<String> nextHopIp;

    /**
     * @return Network IP address of an instance that should handle matching packets.
     * 
     */
    public Output<String> getNextHopIp() {
        return this.nextHopIp;
    }
    /**
     * URL to a Network that should handle matching packets.
     * 
     */
    @Export(name="nextHopNetwork", type=String.class, parameters={})
    private Output<String> nextHopNetwork;

    /**
     * @return URL to a Network that should handle matching packets.
     * 
     */
    public Output<String> getNextHopNetwork() {
        return this.nextHopNetwork;
    }
    /**
     * URL to a VpnTunnel that should handle matching packets.
     * 
     */
    @Export(name="nextHopVpnTunnel", type=String.class, parameters={})
    private Output</* @Nullable */ String> nextHopVpnTunnel;

    /**
     * @return URL to a VpnTunnel that should handle matching packets.
     * 
     */
    public Output</* @Nullable */ String> getNextHopVpnTunnel() {
        return this.nextHopVpnTunnel;
    }
    /**
     * The priority of this route. Priority is used to break ties in cases
     * where there is more than one matching route of equal prefix length.
     * In the case of two routes with equal prefix length, the one with the
     * lowest-numbered priority value wins.
     * Default value is 1000. Valid range is 0 through 65535.
     * 
     */
    @Export(name="priority", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return The priority of this route. Priority is used to break ties in cases
     * where there is more than one matching route of equal prefix length.
     * In the case of two routes with equal prefix length, the one with the
     * lowest-numbered priority value wins.
     * Default value is 1000. Valid range is 0 through 65535.
     * 
     */
    public Output</* @Nullable */ Integer> getPriority() {
        return this.priority;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * A list of instance tags to which this route applies.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of instance tags to which this route applies.
     * 
     */
    public Output</* @Nullable */ List<String>> getTags() {
        return this.tags;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Route(String name) {
        this(name, RouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Route(String name, RouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Route(String name, RouteArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/route:Route", name, args == null ? RouteArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Route(String name, Output<String> id, @Nullable RouteState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/route:Route", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Route get(String name, Output<String> id, @Nullable RouteState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Route(name, id, state, options);
    }
}
