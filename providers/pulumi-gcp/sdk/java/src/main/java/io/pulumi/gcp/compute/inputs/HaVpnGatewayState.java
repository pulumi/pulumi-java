// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.compute.inputs.HaVpnGatewayVpnInterfaceGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HaVpnGatewayState extends io.pulumi.resources.ResourceArgs {

    public static final HaVpnGatewayState Empty = new HaVpnGatewayState();

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The network this VPN gateway is accepting traffic for.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Codegen.empty() : this.network;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The region this gateway should sit in.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> getSelfLink() {
        return this.selfLink == null ? Codegen.empty() : this.selfLink;
    }

    /**
     * A list of interfaces on this VPN gateway.
     * Structure is documented below.
     * 
     */
    @Import(name="vpnInterfaces")
      private final @Nullable Output<List<HaVpnGatewayVpnInterfaceGetArgs>> vpnInterfaces;

    public Output<List<HaVpnGatewayVpnInterfaceGetArgs>> getVpnInterfaces() {
        return this.vpnInterfaces == null ? Codegen.empty() : this.vpnInterfaces;
    }

    public HaVpnGatewayState(
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<String> network,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<String> selfLink,
        @Nullable Output<List<HaVpnGatewayVpnInterfaceGetArgs>> vpnInterfaces) {
        this.description = description;
        this.name = name;
        this.network = network;
        this.project = project;
        this.region = region;
        this.selfLink = selfLink;
        this.vpnInterfaces = vpnInterfaces;
    }

    private HaVpnGatewayState() {
        this.description = Codegen.empty();
        this.name = Codegen.empty();
        this.network = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.selfLink = Codegen.empty();
        this.vpnInterfaces = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HaVpnGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<String> network;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<List<HaVpnGatewayVpnInterfaceGetArgs>> vpnInterfaces;

        public Builder() {
    	      // Empty
        }

        public Builder(HaVpnGatewayState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
    	      this.vpnInterfaces = defaults.vpnInterfaces;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Codegen.ofNullable(network);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }
        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Codegen.ofNullable(selfLink);
            return this;
        }
        public Builder vpnInterfaces(@Nullable Output<List<HaVpnGatewayVpnInterfaceGetArgs>> vpnInterfaces) {
            this.vpnInterfaces = vpnInterfaces;
            return this;
        }
        public Builder vpnInterfaces(@Nullable List<HaVpnGatewayVpnInterfaceGetArgs> vpnInterfaces) {
            this.vpnInterfaces = Codegen.ofNullable(vpnInterfaces);
            return this;
        }
        public Builder vpnInterfaces(HaVpnGatewayVpnInterfaceGetArgs... vpnInterfaces) {
            return vpnInterfaces(List.of(vpnInterfaces));
        }        public HaVpnGatewayState build() {
            return new HaVpnGatewayState(description, name, network, project, region, selfLink, vpnInterfaces);
        }
    }
}
