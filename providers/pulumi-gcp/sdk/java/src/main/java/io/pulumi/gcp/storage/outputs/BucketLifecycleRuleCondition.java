// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.storage.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BucketLifecycleRuleCondition {
    private final @Nullable Integer age;
    private final @Nullable String createdBefore;
    private final @Nullable String customTimeBefore;
    private final @Nullable Integer daysSinceCustomTime;
    private final @Nullable Integer daysSinceNoncurrentTime;
    private final @Nullable List<String> matchesStorageClasses;
    private final @Nullable String noncurrentTimeBefore;
    private final @Nullable Integer numNewerVersions;
    private final @Nullable String withState;

    @OutputCustomType.Constructor({"age","createdBefore","customTimeBefore","daysSinceCustomTime","daysSinceNoncurrentTime","matchesStorageClasses","noncurrentTimeBefore","numNewerVersions","withState"})
    private BucketLifecycleRuleCondition(
        @Nullable Integer age,
        @Nullable String createdBefore,
        @Nullable String customTimeBefore,
        @Nullable Integer daysSinceCustomTime,
        @Nullable Integer daysSinceNoncurrentTime,
        @Nullable List<String> matchesStorageClasses,
        @Nullable String noncurrentTimeBefore,
        @Nullable Integer numNewerVersions,
        @Nullable String withState) {
        this.age = age;
        this.createdBefore = createdBefore;
        this.customTimeBefore = customTimeBefore;
        this.daysSinceCustomTime = daysSinceCustomTime;
        this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
        this.matchesStorageClasses = matchesStorageClasses;
        this.noncurrentTimeBefore = noncurrentTimeBefore;
        this.numNewerVersions = numNewerVersions;
        this.withState = withState;
    }

    public Optional<Integer> getAge() {
        return Optional.ofNullable(this.age);
    }
    public Optional<String> getCreatedBefore() {
        return Optional.ofNullable(this.createdBefore);
    }
    public Optional<String> getCustomTimeBefore() {
        return Optional.ofNullable(this.customTimeBefore);
    }
    public Optional<Integer> getDaysSinceCustomTime() {
        return Optional.ofNullable(this.daysSinceCustomTime);
    }
    public Optional<Integer> getDaysSinceNoncurrentTime() {
        return Optional.ofNullable(this.daysSinceNoncurrentTime);
    }
    public List<String> getMatchesStorageClasses() {
        return this.matchesStorageClasses == null ? List.of() : this.matchesStorageClasses;
    }
    public Optional<String> getNoncurrentTimeBefore() {
        return Optional.ofNullable(this.noncurrentTimeBefore);
    }
    public Optional<Integer> getNumNewerVersions() {
        return Optional.ofNullable(this.numNewerVersions);
    }
    public Optional<String> getWithState() {
        return Optional.ofNullable(this.withState);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleRuleCondition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer age;
        private @Nullable String createdBefore;
        private @Nullable String customTimeBefore;
        private @Nullable Integer daysSinceCustomTime;
        private @Nullable Integer daysSinceNoncurrentTime;
        private @Nullable List<String> matchesStorageClasses;
        private @Nullable String noncurrentTimeBefore;
        private @Nullable Integer numNewerVersions;
        private @Nullable String withState;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketLifecycleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.createdBefore = defaults.createdBefore;
    	      this.customTimeBefore = defaults.customTimeBefore;
    	      this.daysSinceCustomTime = defaults.daysSinceCustomTime;
    	      this.daysSinceNoncurrentTime = defaults.daysSinceNoncurrentTime;
    	      this.matchesStorageClasses = defaults.matchesStorageClasses;
    	      this.noncurrentTimeBefore = defaults.noncurrentTimeBefore;
    	      this.numNewerVersions = defaults.numNewerVersions;
    	      this.withState = defaults.withState;
        }

        public Builder setAge(@Nullable Integer age) {
            this.age = age;
            return this;
        }

        public Builder setCreatedBefore(@Nullable String createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }

        public Builder setCustomTimeBefore(@Nullable String customTimeBefore) {
            this.customTimeBefore = customTimeBefore;
            return this;
        }

        public Builder setDaysSinceCustomTime(@Nullable Integer daysSinceCustomTime) {
            this.daysSinceCustomTime = daysSinceCustomTime;
            return this;
        }

        public Builder setDaysSinceNoncurrentTime(@Nullable Integer daysSinceNoncurrentTime) {
            this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            return this;
        }

        public Builder setMatchesStorageClasses(@Nullable List<String> matchesStorageClasses) {
            this.matchesStorageClasses = matchesStorageClasses;
            return this;
        }

        public Builder setNoncurrentTimeBefore(@Nullable String noncurrentTimeBefore) {
            this.noncurrentTimeBefore = noncurrentTimeBefore;
            return this;
        }

        public Builder setNumNewerVersions(@Nullable Integer numNewerVersions) {
            this.numNewerVersions = numNewerVersions;
            return this;
        }

        public Builder setWithState(@Nullable String withState) {
            this.withState = withState;
            return this;
        }

        public BucketLifecycleRuleCondition build() {
            return new BucketLifecycleRuleCondition(age, createdBefore, customTimeBefore, daysSinceCustomTime, daysSinceNoncurrentTime, matchesStorageClasses, noncurrentTimeBefore, numNewerVersions, withState);
        }
    }
}
