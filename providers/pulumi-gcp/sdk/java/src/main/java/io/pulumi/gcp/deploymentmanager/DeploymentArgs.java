// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.deploymentmanager;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.deploymentmanager.inputs.DeploymentLabelArgs;
import io.pulumi.gcp.deploymentmanager.inputs.DeploymentTargetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentArgs Empty = new DeploymentArgs();

    /**
     * Set the policy to use for creating new resources. Only used on
     * create and update. Valid values are `CREATE_OR_ACQUIRE` (default) or
     * `ACQUIRE`. If set to `ACQUIRE` and resources do not already exist,
     * the deployment will fail. Note that updating this field does not
     * actually affect the deployment, just how it is updated.
     * Default value is `CREATE_OR_ACQUIRE`.
     * Possible values are `ACQUIRE` and `CREATE_OR_ACQUIRE`.
     * 
     */
    @InputImport(name="createPolicy")
      private final @Nullable Input<String> createPolicy;

    public Input<String> getCreatePolicy() {
        return this.createPolicy == null ? Input.empty() : this.createPolicy;
    }

    /**
     * Set the policy to use for deleting new resources on update/delete.
     * Valid values are `DELETE` (default) or `ABANDON`. If `DELETE`,
     * resource is deleted after removal from Deployment Manager. If
     * `ABANDON`, the resource is only removed from Deployment Manager
     * and is not actually deleted. Note that updating this field does not
     * actually change the deployment, just how it is updated.
     * Default value is `DELETE`.
     * Possible values are `ABANDON` and `DELETE`.
     * 
     */
    @InputImport(name="deletePolicy")
      private final @Nullable Input<String> deletePolicy;

    public Input<String> getDeletePolicy() {
        return this.deletePolicy == null ? Input.empty() : this.deletePolicy;
    }

    /**
     * Optional user-provided description of deployment.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Key-value pairs to apply to this labels.
     * Structure is documented below.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<List<DeploymentLabelArgs>> labels;

    public Input<List<DeploymentLabelArgs>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The name of the template to import, as declared in the YAML
     * configuration.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * If set to true, a deployment is created with "shell" resources
     * that are not actually instantiated. This allows you to preview a
     * deployment. It can be updated to false to actually deploy
     * with real resources.
     * ~>**NOTE:** Deployment Manager does not allow update
     * of a deployment in preview (unless updating to preview=false). Thus,
     * the provider will force-recreate deployments if either preview is updated
     * to true or if other fields are updated while preview is true.
     * 
     */
    @InputImport(name="preview")
      private final @Nullable Input<Boolean> preview;

    public Input<Boolean> getPreview() {
        return this.preview == null ? Input.empty() : this.preview;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Parameters that define your deployment, including the deployment
     * configuration and relevant templates.
     * Structure is documented below.
     * 
     */
    @InputImport(name="target", required=true)
      private final Input<DeploymentTargetArgs> target;

    public Input<DeploymentTargetArgs> getTarget() {
        return this.target;
    }

    public DeploymentArgs(
        @Nullable Input<String> createPolicy,
        @Nullable Input<String> deletePolicy,
        @Nullable Input<String> description,
        @Nullable Input<List<DeploymentLabelArgs>> labels,
        @Nullable Input<String> name,
        @Nullable Input<Boolean> preview,
        @Nullable Input<String> project,
        Input<DeploymentTargetArgs> target) {
        this.createPolicy = createPolicy;
        this.deletePolicy = deletePolicy;
        this.description = description;
        this.labels = labels;
        this.name = name;
        this.preview = preview;
        this.project = project;
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
    }

    private DeploymentArgs() {
        this.createPolicy = Input.empty();
        this.deletePolicy = Input.empty();
        this.description = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.preview = Input.empty();
        this.project = Input.empty();
        this.target = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createPolicy;
        private @Nullable Input<String> deletePolicy;
        private @Nullable Input<String> description;
        private @Nullable Input<List<DeploymentLabelArgs>> labels;
        private @Nullable Input<String> name;
        private @Nullable Input<Boolean> preview;
        private @Nullable Input<String> project;
        private Input<DeploymentTargetArgs> target;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createPolicy = defaults.createPolicy;
    	      this.deletePolicy = defaults.deletePolicy;
    	      this.description = defaults.description;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.preview = defaults.preview;
    	      this.project = defaults.project;
    	      this.target = defaults.target;
        }

        public Builder createPolicy(@Nullable Input<String> createPolicy) {
            this.createPolicy = createPolicy;
            return this;
        }

        public Builder createPolicy(@Nullable String createPolicy) {
            this.createPolicy = Input.ofNullable(createPolicy);
            return this;
        }

        public Builder deletePolicy(@Nullable Input<String> deletePolicy) {
            this.deletePolicy = deletePolicy;
            return this;
        }

        public Builder deletePolicy(@Nullable String deletePolicy) {
            this.deletePolicy = Input.ofNullable(deletePolicy);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder labels(@Nullable Input<List<DeploymentLabelArgs>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable List<DeploymentLabelArgs> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder preview(@Nullable Input<Boolean> preview) {
            this.preview = preview;
            return this;
        }

        public Builder preview(@Nullable Boolean preview) {
            this.preview = Input.ofNullable(preview);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder target(Input<DeploymentTargetArgs> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder target(DeploymentTargetArgs target) {
            this.target = Input.of(Objects.requireNonNull(target));
            return this;
        }
        public DeploymentArgs build() {
            return new DeploymentArgs(createPolicy, deletePolicy, description, labels, name, preview, project, target);
        }
    }
}
