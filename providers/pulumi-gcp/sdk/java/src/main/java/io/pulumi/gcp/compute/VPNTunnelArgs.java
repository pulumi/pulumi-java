// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VPNTunnelArgs extends io.pulumi.resources.ResourceArgs {

    public static final VPNTunnelArgs Empty = new VPNTunnelArgs();

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * IKE protocol version to use when establishing the VPN tunnel with
     * peer VPN gateway.
     * Acceptable IKE versions are 1 or 2. Default version is 2.
     * 
     */
    @Import(name="ikeVersion")
      private final @Nullable Output<Integer> ikeVersion;

    public Output<Integer> ikeVersion() {
        return this.ikeVersion == null ? Codegen.empty() : this.ikeVersion;
    }

    /**
     * Labels to apply to this VpnTunnel.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Local traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     * 
     */
    @Import(name="localTrafficSelectors")
      private final @Nullable Output<List<String>> localTrafficSelectors;

    public Output<List<String>> localTrafficSelectors() {
        return this.localTrafficSelectors == null ? Codegen.empty() : this.localTrafficSelectors;
    }

    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63
     * characters long and match the regular expression
     * `a-z?` which means the first character
     * must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     * 
     */
    @Import(name="peerExternalGateway")
      private final @Nullable Output<String> peerExternalGateway;

    public Output<String> peerExternalGateway() {
        return this.peerExternalGateway == null ? Codegen.empty() : this.peerExternalGateway;
    }

    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     * 
     */
    @Import(name="peerExternalGatewayInterface")
      private final @Nullable Output<Integer> peerExternalGatewayInterface;

    public Output<Integer> peerExternalGatewayInterface() {
        return this.peerExternalGatewayInterface == null ? Codegen.empty() : this.peerExternalGatewayInterface;
    }

    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
     * If provided, the VPN tunnel will automatically use the same vpn_gateway_interface
     * ID in the peer GCP VPN gateway.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     * 
     */
    @Import(name="peerGcpGateway")
      private final @Nullable Output<String> peerGcpGateway;

    public Output<String> peerGcpGateway() {
        return this.peerGcpGateway == null ? Codegen.empty() : this.peerGcpGateway;
    }

    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     * 
     */
    @Import(name="peerIp")
      private final @Nullable Output<String> peerIp;

    public Output<String> peerIp() {
        return this.peerIp == null ? Codegen.empty() : this.peerIp;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The region where the tunnel is located. If unset, is set to the region of `target_vpn_gateway`.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * Remote traffic selector to use when establishing the VPN tunnel with
     * peer VPN gateway. The value should be a CIDR formatted string,
     * for example `192.168.0.0/16`. The ranges should be disjoint.
     * Only IPv4 is supported.
     * 
     */
    @Import(name="remoteTrafficSelectors")
      private final @Nullable Output<List<String>> remoteTrafficSelectors;

    public Output<List<String>> remoteTrafficSelectors() {
        return this.remoteTrafficSelectors == null ? Codegen.empty() : this.remoteTrafficSelectors;
    }

    /**
     * URL of router resource to be used for dynamic routing.
     * 
     */
    @Import(name="router")
      private final @Nullable Output<String> router;

    public Output<String> router() {
        return this.router == null ? Codegen.empty() : this.router;
    }

    /**
     * Shared secret used to set the secure session between the Cloud VPN
     * gateway and the peer VPN gateway.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="sharedSecret", required=true)
      private final Output<String> sharedSecret;

    public Output<String> sharedSecret() {
        return this.sharedSecret;
    }

    /**
     * URL of the Target VPN gateway with which this VPN tunnel is
     * associated.
     * 
     */
    @Import(name="targetVpnGateway")
      private final @Nullable Output<String> targetVpnGateway;

    public Output<String> targetVpnGateway() {
        return this.targetVpnGateway == null ? Codegen.empty() : this.targetVpnGateway;
    }

    /**
     * URL of the VPN gateway with which this VPN tunnel is associated.
     * This must be used if a High Availability VPN gateway resource is created.
     * This field must reference a `gcp.compute.HaVpnGateway` resource.
     * 
     */
    @Import(name="vpnGateway")
      private final @Nullable Output<String> vpnGateway;

    public Output<String> vpnGateway() {
        return this.vpnGateway == null ? Codegen.empty() : this.vpnGateway;
    }

    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     * 
     */
    @Import(name="vpnGatewayInterface")
      private final @Nullable Output<Integer> vpnGatewayInterface;

    public Output<Integer> vpnGatewayInterface() {
        return this.vpnGatewayInterface == null ? Codegen.empty() : this.vpnGatewayInterface;
    }

    public VPNTunnelArgs(
        @Nullable Output<String> description,
        @Nullable Output<Integer> ikeVersion,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<List<String>> localTrafficSelectors,
        @Nullable Output<String> name,
        @Nullable Output<String> peerExternalGateway,
        @Nullable Output<Integer> peerExternalGatewayInterface,
        @Nullable Output<String> peerGcpGateway,
        @Nullable Output<String> peerIp,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<List<String>> remoteTrafficSelectors,
        @Nullable Output<String> router,
        Output<String> sharedSecret,
        @Nullable Output<String> targetVpnGateway,
        @Nullable Output<String> vpnGateway,
        @Nullable Output<Integer> vpnGatewayInterface) {
        this.description = description;
        this.ikeVersion = ikeVersion;
        this.labels = labels;
        this.localTrafficSelectors = localTrafficSelectors;
        this.name = name;
        this.peerExternalGateway = peerExternalGateway;
        this.peerExternalGatewayInterface = peerExternalGatewayInterface;
        this.peerGcpGateway = peerGcpGateway;
        this.peerIp = peerIp;
        this.project = project;
        this.region = region;
        this.remoteTrafficSelectors = remoteTrafficSelectors;
        this.router = router;
        this.sharedSecret = Objects.requireNonNull(sharedSecret, "expected parameter 'sharedSecret' to be non-null");
        this.targetVpnGateway = targetVpnGateway;
        this.vpnGateway = vpnGateway;
        this.vpnGatewayInterface = vpnGatewayInterface;
    }

    private VPNTunnelArgs() {
        this.description = Codegen.empty();
        this.ikeVersion = Codegen.empty();
        this.labels = Codegen.empty();
        this.localTrafficSelectors = Codegen.empty();
        this.name = Codegen.empty();
        this.peerExternalGateway = Codegen.empty();
        this.peerExternalGatewayInterface = Codegen.empty();
        this.peerGcpGateway = Codegen.empty();
        this.peerIp = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.remoteTrafficSelectors = Codegen.empty();
        this.router = Codegen.empty();
        this.sharedSecret = Codegen.empty();
        this.targetVpnGateway = Codegen.empty();
        this.vpnGateway = Codegen.empty();
        this.vpnGatewayInterface = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VPNTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<Integer> ikeVersion;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<List<String>> localTrafficSelectors;
        private @Nullable Output<String> name;
        private @Nullable Output<String> peerExternalGateway;
        private @Nullable Output<Integer> peerExternalGatewayInterface;
        private @Nullable Output<String> peerGcpGateway;
        private @Nullable Output<String> peerIp;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<List<String>> remoteTrafficSelectors;
        private @Nullable Output<String> router;
        private Output<String> sharedSecret;
        private @Nullable Output<String> targetVpnGateway;
        private @Nullable Output<String> vpnGateway;
        private @Nullable Output<Integer> vpnGatewayInterface;

        public Builder() {
    	      // Empty
        }

        public Builder(VPNTunnelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.labels = defaults.labels;
    	      this.localTrafficSelectors = defaults.localTrafficSelectors;
    	      this.name = defaults.name;
    	      this.peerExternalGateway = defaults.peerExternalGateway;
    	      this.peerExternalGatewayInterface = defaults.peerExternalGatewayInterface;
    	      this.peerGcpGateway = defaults.peerGcpGateway;
    	      this.peerIp = defaults.peerIp;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.remoteTrafficSelectors = defaults.remoteTrafficSelectors;
    	      this.router = defaults.router;
    	      this.sharedSecret = defaults.sharedSecret;
    	      this.targetVpnGateway = defaults.targetVpnGateway;
    	      this.vpnGateway = defaults.vpnGateway;
    	      this.vpnGatewayInterface = defaults.vpnGatewayInterface;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder ikeVersion(@Nullable Output<Integer> ikeVersion) {
            this.ikeVersion = ikeVersion;
            return this;
        }
        public Builder ikeVersion(@Nullable Integer ikeVersion) {
            this.ikeVersion = Codegen.ofNullable(ikeVersion);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder localTrafficSelectors(@Nullable Output<List<String>> localTrafficSelectors) {
            this.localTrafficSelectors = localTrafficSelectors;
            return this;
        }
        public Builder localTrafficSelectors(@Nullable List<String> localTrafficSelectors) {
            this.localTrafficSelectors = Codegen.ofNullable(localTrafficSelectors);
            return this;
        }
        public Builder localTrafficSelectors(String... localTrafficSelectors) {
            return localTrafficSelectors(List.of(localTrafficSelectors));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder peerExternalGateway(@Nullable Output<String> peerExternalGateway) {
            this.peerExternalGateway = peerExternalGateway;
            return this;
        }
        public Builder peerExternalGateway(@Nullable String peerExternalGateway) {
            this.peerExternalGateway = Codegen.ofNullable(peerExternalGateway);
            return this;
        }
        public Builder peerExternalGatewayInterface(@Nullable Output<Integer> peerExternalGatewayInterface) {
            this.peerExternalGatewayInterface = peerExternalGatewayInterface;
            return this;
        }
        public Builder peerExternalGatewayInterface(@Nullable Integer peerExternalGatewayInterface) {
            this.peerExternalGatewayInterface = Codegen.ofNullable(peerExternalGatewayInterface);
            return this;
        }
        public Builder peerGcpGateway(@Nullable Output<String> peerGcpGateway) {
            this.peerGcpGateway = peerGcpGateway;
            return this;
        }
        public Builder peerGcpGateway(@Nullable String peerGcpGateway) {
            this.peerGcpGateway = Codegen.ofNullable(peerGcpGateway);
            return this;
        }
        public Builder peerIp(@Nullable Output<String> peerIp) {
            this.peerIp = peerIp;
            return this;
        }
        public Builder peerIp(@Nullable String peerIp) {
            this.peerIp = Codegen.ofNullable(peerIp);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder remoteTrafficSelectors(@Nullable Output<List<String>> remoteTrafficSelectors) {
            this.remoteTrafficSelectors = remoteTrafficSelectors;
            return this;
        }
        public Builder remoteTrafficSelectors(@Nullable List<String> remoteTrafficSelectors) {
            this.remoteTrafficSelectors = Codegen.ofNullable(remoteTrafficSelectors);
            return this;
        }
        public Builder remoteTrafficSelectors(String... remoteTrafficSelectors) {
            return remoteTrafficSelectors(List.of(remoteTrafficSelectors));
        }
        public Builder router(@Nullable Output<String> router) {
            this.router = router;
            return this;
        }
        public Builder router(@Nullable String router) {
            this.router = Codegen.ofNullable(router);
            return this;
        }
        public Builder sharedSecret(Output<String> sharedSecret) {
            this.sharedSecret = Objects.requireNonNull(sharedSecret);
            return this;
        }
        public Builder sharedSecret(String sharedSecret) {
            this.sharedSecret = Output.of(Objects.requireNonNull(sharedSecret));
            return this;
        }
        public Builder targetVpnGateway(@Nullable Output<String> targetVpnGateway) {
            this.targetVpnGateway = targetVpnGateway;
            return this;
        }
        public Builder targetVpnGateway(@Nullable String targetVpnGateway) {
            this.targetVpnGateway = Codegen.ofNullable(targetVpnGateway);
            return this;
        }
        public Builder vpnGateway(@Nullable Output<String> vpnGateway) {
            this.vpnGateway = vpnGateway;
            return this;
        }
        public Builder vpnGateway(@Nullable String vpnGateway) {
            this.vpnGateway = Codegen.ofNullable(vpnGateway);
            return this;
        }
        public Builder vpnGatewayInterface(@Nullable Output<Integer> vpnGatewayInterface) {
            this.vpnGatewayInterface = vpnGatewayInterface;
            return this;
        }
        public Builder vpnGatewayInterface(@Nullable Integer vpnGatewayInterface) {
            this.vpnGatewayInterface = Codegen.ofNullable(vpnGatewayInterface);
            return this;
        }        public VPNTunnelArgs build() {
            return new VPNTunnelArgs(description, ikeVersion, labels, localTrafficSelectors, name, peerExternalGateway, peerExternalGatewayInterface, peerGcpGateway, peerIp, project, region, remoteTrafficSelectors, router, sharedSecret, targetVpnGateway, vpnGateway, vpnGatewayInterface);
        }
    }
}
