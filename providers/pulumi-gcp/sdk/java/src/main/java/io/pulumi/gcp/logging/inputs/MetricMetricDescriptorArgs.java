// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.logging.inputs.MetricMetricDescriptorLabelArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricMetricDescriptorArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricMetricDescriptorArgs Empty = new MetricMetricDescriptorArgs();

    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    @InputImport(name="labels")
    private final @Nullable Input<List<MetricMetricDescriptorLabelArgs>> labels;

    public Input<List<MetricMetricDescriptorLabelArgs>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="metricKind", required=true)
    private final Input<String> metricKind;

    public Input<String> getMetricKind() {
        return this.metricKind;
    }

    @InputImport(name="unit")
    private final @Nullable Input<String> unit;

    public Input<String> getUnit() {
        return this.unit == null ? Input.empty() : this.unit;
    }

    @InputImport(name="valueType", required=true)
    private final Input<String> valueType;

    public Input<String> getValueType() {
        return this.valueType;
    }

    public MetricMetricDescriptorArgs(
        @Nullable Input<String> displayName,
        @Nullable Input<List<MetricMetricDescriptorLabelArgs>> labels,
        Input<String> metricKind,
        @Nullable Input<String> unit,
        Input<String> valueType) {
        this.displayName = displayName;
        this.labels = labels;
        this.metricKind = Objects.requireNonNull(metricKind, "expected parameter 'metricKind' to be non-null");
        this.unit = unit;
        this.valueType = Objects.requireNonNull(valueType, "expected parameter 'valueType' to be non-null");
    }

    private MetricMetricDescriptorArgs() {
        this.displayName = Input.empty();
        this.labels = Input.empty();
        this.metricKind = Input.empty();
        this.unit = Input.empty();
        this.valueType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricMetricDescriptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> displayName;
        private @Nullable Input<List<MetricMetricDescriptorLabelArgs>> labels;
        private Input<String> metricKind;
        private @Nullable Input<String> unit;
        private Input<String> valueType;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricMetricDescriptorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.labels = defaults.labels;
    	      this.metricKind = defaults.metricKind;
    	      this.unit = defaults.unit;
    	      this.valueType = defaults.valueType;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setLabels(@Nullable Input<List<MetricMetricDescriptorLabelArgs>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable List<MetricMetricDescriptorLabelArgs> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMetricKind(Input<String> metricKind) {
            this.metricKind = Objects.requireNonNull(metricKind);
            return this;
        }

        public Builder setMetricKind(String metricKind) {
            this.metricKind = Input.of(Objects.requireNonNull(metricKind));
            return this;
        }

        public Builder setUnit(@Nullable Input<String> unit) {
            this.unit = unit;
            return this;
        }

        public Builder setUnit(@Nullable String unit) {
            this.unit = Input.ofNullable(unit);
            return this;
        }

        public Builder setValueType(Input<String> valueType) {
            this.valueType = Objects.requireNonNull(valueType);
            return this;
        }

        public Builder setValueType(String valueType) {
            this.valueType = Input.of(Objects.requireNonNull(valueType));
            return this;
        }

        public MetricMetricDescriptorArgs build() {
            return new MetricMetricDescriptorArgs(displayName, labels, metricKind, unit, valueType);
        }
    }
}
