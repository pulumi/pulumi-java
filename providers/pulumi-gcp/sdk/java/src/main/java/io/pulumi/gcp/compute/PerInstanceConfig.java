// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.PerInstanceConfigArgs;
import io.pulumi.gcp.compute.inputs.PerInstanceConfigState;
import io.pulumi.gcp.compute.outputs.PerInstanceConfigPreservedState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A config defined for a single managed instance that belongs to an instance group manager. It preserves the instance name
 * across instance group manager operations and can define stateful disks or metadata that are unique to the instance.
 * 
 * To get more information about PerInstanceConfig, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/instanceGroupManagers)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/instance-groups/stateful-migs#per-instance_configs)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * PerInstanceConfig can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{instance_group_manager}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default {{project}}/{{zone}}/{{instance_group_manager}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default {{zone}}/{{instance_group_manager}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/perInstanceConfig:PerInstanceConfig default {{instance_group_manager}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/perInstanceConfig:PerInstanceConfig")
public class PerInstanceConfig extends io.pulumi.resources.CustomResource {
    /**
     * The instance group manager this instance config is part of.
     * 
     */
    @Export(name="instanceGroupManager", type=String.class, parameters={})
    private Output<String> instanceGroupManager;

    /**
     * @return The instance group manager this instance config is part of.
     * 
     */
    public Output<String> getInstanceGroupManager() {
        return this.instanceGroupManager;
    }
    /**
     * The minimal action to perform on the instance during an update.
     * Default is `NONE`. Possible values are:
     * * REPLACE
     * * RESTART
     * * REFRESH
     * * NONE
     * 
     */
    @Export(name="minimalAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> minimalAction;

    /**
     * @return The minimal action to perform on the instance during an update.
     * Default is `NONE`. Possible values are:
     * * REPLACE
     * * RESTART
     * * REFRESH
     * * NONE
     * 
     */
    public Output</* @Nullable */ String> getMinimalAction() {
        return this.minimalAction;
    }
    /**
     * The most disruptive action to perform on the instance during an update.
     * Default is `REPLACE`. Possible values are:
     * * REPLACE
     * * RESTART
     * * REFRESH
     * * NONE
     * 
     */
    @Export(name="mostDisruptiveAllowedAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> mostDisruptiveAllowedAction;

    /**
     * @return The most disruptive action to perform on the instance during an update.
     * Default is `REPLACE`. Possible values are:
     * * REPLACE
     * * RESTART
     * * REFRESH
     * * NONE
     * 
     */
    public Output</* @Nullable */ String> getMostDisruptiveAllowedAction() {
        return this.mostDisruptiveAllowedAction;
    }
    /**
     * The name for this per-instance config and its corresponding instance.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name for this per-instance config and its corresponding instance.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The preserved state for this instance.
     * Structure is documented below.
     * 
     */
    @Export(name="preservedState", type=PerInstanceConfigPreservedState.class, parameters={})
    private Output</* @Nullable */ PerInstanceConfigPreservedState> preservedState;

    /**
     * @return The preserved state for this instance.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ PerInstanceConfigPreservedState> getPreservedState() {
        return this.preservedState;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * When true, deleting this config will immediately remove any specified state from the underlying instance.
     * When false, deleting this config will *not* immediately remove any state from the underlying instance.
     * State will be removed on the next instance recreation or update.
     * 
     */
    @Export(name="removeInstanceStateOnDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> removeInstanceStateOnDestroy;

    /**
     * @return When true, deleting this config will immediately remove any specified state from the underlying instance.
     * When false, deleting this config will *not* immediately remove any state from the underlying instance.
     * State will be removed on the next instance recreation or update.
     * 
     */
    public Output</* @Nullable */ Boolean> getRemoveInstanceStateOnDestroy() {
        return this.removeInstanceStateOnDestroy;
    }
    /**
     * Zone where the containing instance group manager is located
     * 
     */
    @Export(name="zone", type=String.class, parameters={})
    private Output</* @Nullable */ String> zone;

    /**
     * @return Zone where the containing instance group manager is located
     * 
     */
    public Output</* @Nullable */ String> getZone() {
        return this.zone;
    }

    public interface BuilderApplicator {
        public void apply(PerInstanceConfigArgs.Builder a);
    }
    private static io.pulumi.gcp.compute.PerInstanceConfigArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.gcp.compute.PerInstanceConfigArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public PerInstanceConfig(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PerInstanceConfig(String name) {
        this(name, PerInstanceConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PerInstanceConfig(String name, PerInstanceConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PerInstanceConfig(String name, PerInstanceConfigArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/perInstanceConfig:PerInstanceConfig", name, args == null ? PerInstanceConfigArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private PerInstanceConfig(String name, Output<String> id, @Nullable PerInstanceConfigState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/perInstanceConfig:PerInstanceConfig", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PerInstanceConfig get(String name, Output<String> id, @Nullable PerInstanceConfigState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new PerInstanceConfig(name, id, state, options);
    }
}
