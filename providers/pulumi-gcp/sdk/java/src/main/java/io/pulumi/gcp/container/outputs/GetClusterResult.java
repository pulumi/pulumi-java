// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.container.outputs.GetClusterAddonsConfig;
import io.pulumi.gcp.container.outputs.GetClusterAuthenticatorGroupsConfig;
import io.pulumi.gcp.container.outputs.GetClusterClusterAutoscaling;
import io.pulumi.gcp.container.outputs.GetClusterClusterTelemetry;
import io.pulumi.gcp.container.outputs.GetClusterConfidentialNode;
import io.pulumi.gcp.container.outputs.GetClusterDatabaseEncryption;
import io.pulumi.gcp.container.outputs.GetClusterDefaultSnatStatus;
import io.pulumi.gcp.container.outputs.GetClusterDnsConfig;
import io.pulumi.gcp.container.outputs.GetClusterIdentityServiceConfig;
import io.pulumi.gcp.container.outputs.GetClusterIpAllocationPolicy;
import io.pulumi.gcp.container.outputs.GetClusterLoggingConfig;
import io.pulumi.gcp.container.outputs.GetClusterMaintenancePolicy;
import io.pulumi.gcp.container.outputs.GetClusterMasterAuth;
import io.pulumi.gcp.container.outputs.GetClusterMasterAuthorizedNetworksConfig;
import io.pulumi.gcp.container.outputs.GetClusterMonitoringConfig;
import io.pulumi.gcp.container.outputs.GetClusterNetworkPolicy;
import io.pulumi.gcp.container.outputs.GetClusterNodeConfig;
import io.pulumi.gcp.container.outputs.GetClusterNodePool;
import io.pulumi.gcp.container.outputs.GetClusterNotificationConfig;
import io.pulumi.gcp.container.outputs.GetClusterPodSecurityPolicyConfig;
import io.pulumi.gcp.container.outputs.GetClusterPrivateClusterConfig;
import io.pulumi.gcp.container.outputs.GetClusterReleaseChannel;
import io.pulumi.gcp.container.outputs.GetClusterResourceUsageExportConfig;
import io.pulumi.gcp.container.outputs.GetClusterVerticalPodAutoscaling;
import io.pulumi.gcp.container.outputs.GetClusterWorkloadIdentityConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetClusterResult {
    private final List<GetClusterAddonsConfig> addonsConfigs;
    private final List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs;
    private final List<GetClusterClusterAutoscaling> clusterAutoscalings;
    private final String clusterIpv4Cidr;
    private final List<GetClusterClusterTelemetry> clusterTelemetries;
    private final List<GetClusterConfidentialNode> confidentialNodes;
    private final List<GetClusterDatabaseEncryption> databaseEncryptions;
    private final String datapathProvider;
    private final Integer defaultMaxPodsPerNode;
    private final List<GetClusterDefaultSnatStatus> defaultSnatStatuses;
    private final String description;
    private final List<GetClusterDnsConfig> dnsConfigs;
    private final Boolean enableAutopilot;
    private final Boolean enableBinaryAuthorization;
    private final Boolean enableIntranodeVisibility;
    private final Boolean enableKubernetesAlpha;
    private final Boolean enableL4IlbSubsetting;
    private final Boolean enableLegacyAbac;
    private final Boolean enableShieldedNodes;
    private final Boolean enableTpu;
    private final String endpoint;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final List<GetClusterIdentityServiceConfig> identityServiceConfigs;
    private final Integer initialNodeCount;
    private final List<GetClusterIpAllocationPolicy> ipAllocationPolicies;
    private final String labelFingerprint;
    private final @Nullable String location;
    private final List<GetClusterLoggingConfig> loggingConfigs;
    private final String loggingService;
    private final List<GetClusterMaintenancePolicy> maintenancePolicies;
    private final List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
    private final List<GetClusterMasterAuth> masterAuths;
    private final String masterVersion;
    private final String minMasterVersion;
    private final List<GetClusterMonitoringConfig> monitoringConfigs;
    private final String monitoringService;
    private final String name;
    private final String network;
    private final List<GetClusterNetworkPolicy> networkPolicies;
    private final String networkingMode;
    private final List<GetClusterNodeConfig> nodeConfigs;
    private final List<String> nodeLocations;
    private final List<GetClusterNodePool> nodePools;
    private final String nodeVersion;
    private final List<GetClusterNotificationConfig> notificationConfigs;
    private final String operation;
    private final List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs;
    private final List<GetClusterPrivateClusterConfig> privateClusterConfigs;
    private final String privateIpv6GoogleAccess;
    private final @Nullable String project;
    private final List<GetClusterReleaseChannel> releaseChannels;
    private final Boolean removeDefaultNodePool;
    private final Map<String,String> resourceLabels;
    private final List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs;
    private final String selfLink;
    private final String servicesIpv4Cidr;
    private final String subnetwork;
    private final String tpuIpv4CidrBlock;
    private final List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings;
    private final List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs;

    @OutputCustomType.Constructor({"addonsConfigs","authenticatorGroupsConfigs","clusterAutoscalings","clusterIpv4Cidr","clusterTelemetries","confidentialNodes","databaseEncryptions","datapathProvider","defaultMaxPodsPerNode","defaultSnatStatuses","description","dnsConfigs","enableAutopilot","enableBinaryAuthorization","enableIntranodeVisibility","enableKubernetesAlpha","enableL4IlbSubsetting","enableLegacyAbac","enableShieldedNodes","enableTpu","endpoint","id","identityServiceConfigs","initialNodeCount","ipAllocationPolicies","labelFingerprint","location","loggingConfigs","loggingService","maintenancePolicies","masterAuthorizedNetworksConfigs","masterAuths","masterVersion","minMasterVersion","monitoringConfigs","monitoringService","name","network","networkPolicies","networkingMode","nodeConfigs","nodeLocations","nodePools","nodeVersion","notificationConfigs","operation","podSecurityPolicyConfigs","privateClusterConfigs","privateIpv6GoogleAccess","project","releaseChannels","removeDefaultNodePool","resourceLabels","resourceUsageExportConfigs","selfLink","servicesIpv4Cidr","subnetwork","tpuIpv4CidrBlock","verticalPodAutoscalings","workloadIdentityConfigs"})
    private GetClusterResult(
        List<GetClusterAddonsConfig> addonsConfigs,
        List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs,
        List<GetClusterClusterAutoscaling> clusterAutoscalings,
        String clusterIpv4Cidr,
        List<GetClusterClusterTelemetry> clusterTelemetries,
        List<GetClusterConfidentialNode> confidentialNodes,
        List<GetClusterDatabaseEncryption> databaseEncryptions,
        String datapathProvider,
        Integer defaultMaxPodsPerNode,
        List<GetClusterDefaultSnatStatus> defaultSnatStatuses,
        String description,
        List<GetClusterDnsConfig> dnsConfigs,
        Boolean enableAutopilot,
        Boolean enableBinaryAuthorization,
        Boolean enableIntranodeVisibility,
        Boolean enableKubernetesAlpha,
        Boolean enableL4IlbSubsetting,
        Boolean enableLegacyAbac,
        Boolean enableShieldedNodes,
        Boolean enableTpu,
        String endpoint,
        String id,
        List<GetClusterIdentityServiceConfig> identityServiceConfigs,
        Integer initialNodeCount,
        List<GetClusterIpAllocationPolicy> ipAllocationPolicies,
        String labelFingerprint,
        @Nullable String location,
        List<GetClusterLoggingConfig> loggingConfigs,
        String loggingService,
        List<GetClusterMaintenancePolicy> maintenancePolicies,
        List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs,
        List<GetClusterMasterAuth> masterAuths,
        String masterVersion,
        String minMasterVersion,
        List<GetClusterMonitoringConfig> monitoringConfigs,
        String monitoringService,
        String name,
        String network,
        List<GetClusterNetworkPolicy> networkPolicies,
        String networkingMode,
        List<GetClusterNodeConfig> nodeConfigs,
        List<String> nodeLocations,
        List<GetClusterNodePool> nodePools,
        String nodeVersion,
        List<GetClusterNotificationConfig> notificationConfigs,
        String operation,
        List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs,
        List<GetClusterPrivateClusterConfig> privateClusterConfigs,
        String privateIpv6GoogleAccess,
        @Nullable String project,
        List<GetClusterReleaseChannel> releaseChannels,
        Boolean removeDefaultNodePool,
        Map<String,String> resourceLabels,
        List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs,
        String selfLink,
        String servicesIpv4Cidr,
        String subnetwork,
        String tpuIpv4CidrBlock,
        List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings,
        List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs) {
        this.addonsConfigs = Objects.requireNonNull(addonsConfigs);
        this.authenticatorGroupsConfigs = Objects.requireNonNull(authenticatorGroupsConfigs);
        this.clusterAutoscalings = Objects.requireNonNull(clusterAutoscalings);
        this.clusterIpv4Cidr = Objects.requireNonNull(clusterIpv4Cidr);
        this.clusterTelemetries = Objects.requireNonNull(clusterTelemetries);
        this.confidentialNodes = Objects.requireNonNull(confidentialNodes);
        this.databaseEncryptions = Objects.requireNonNull(databaseEncryptions);
        this.datapathProvider = Objects.requireNonNull(datapathProvider);
        this.defaultMaxPodsPerNode = Objects.requireNonNull(defaultMaxPodsPerNode);
        this.defaultSnatStatuses = Objects.requireNonNull(defaultSnatStatuses);
        this.description = Objects.requireNonNull(description);
        this.dnsConfigs = Objects.requireNonNull(dnsConfigs);
        this.enableAutopilot = Objects.requireNonNull(enableAutopilot);
        this.enableBinaryAuthorization = Objects.requireNonNull(enableBinaryAuthorization);
        this.enableIntranodeVisibility = Objects.requireNonNull(enableIntranodeVisibility);
        this.enableKubernetesAlpha = Objects.requireNonNull(enableKubernetesAlpha);
        this.enableL4IlbSubsetting = Objects.requireNonNull(enableL4IlbSubsetting);
        this.enableLegacyAbac = Objects.requireNonNull(enableLegacyAbac);
        this.enableShieldedNodes = Objects.requireNonNull(enableShieldedNodes);
        this.enableTpu = Objects.requireNonNull(enableTpu);
        this.endpoint = Objects.requireNonNull(endpoint);
        this.id = Objects.requireNonNull(id);
        this.identityServiceConfigs = Objects.requireNonNull(identityServiceConfigs);
        this.initialNodeCount = Objects.requireNonNull(initialNodeCount);
        this.ipAllocationPolicies = Objects.requireNonNull(ipAllocationPolicies);
        this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
        this.location = location;
        this.loggingConfigs = Objects.requireNonNull(loggingConfigs);
        this.loggingService = Objects.requireNonNull(loggingService);
        this.maintenancePolicies = Objects.requireNonNull(maintenancePolicies);
        this.masterAuthorizedNetworksConfigs = Objects.requireNonNull(masterAuthorizedNetworksConfigs);
        this.masterAuths = Objects.requireNonNull(masterAuths);
        this.masterVersion = Objects.requireNonNull(masterVersion);
        this.minMasterVersion = Objects.requireNonNull(minMasterVersion);
        this.monitoringConfigs = Objects.requireNonNull(monitoringConfigs);
        this.monitoringService = Objects.requireNonNull(monitoringService);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.networkPolicies = Objects.requireNonNull(networkPolicies);
        this.networkingMode = Objects.requireNonNull(networkingMode);
        this.nodeConfigs = Objects.requireNonNull(nodeConfigs);
        this.nodeLocations = Objects.requireNonNull(nodeLocations);
        this.nodePools = Objects.requireNonNull(nodePools);
        this.nodeVersion = Objects.requireNonNull(nodeVersion);
        this.notificationConfigs = Objects.requireNonNull(notificationConfigs);
        this.operation = Objects.requireNonNull(operation);
        this.podSecurityPolicyConfigs = Objects.requireNonNull(podSecurityPolicyConfigs);
        this.privateClusterConfigs = Objects.requireNonNull(privateClusterConfigs);
        this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
        this.project = project;
        this.releaseChannels = Objects.requireNonNull(releaseChannels);
        this.removeDefaultNodePool = Objects.requireNonNull(removeDefaultNodePool);
        this.resourceLabels = Objects.requireNonNull(resourceLabels);
        this.resourceUsageExportConfigs = Objects.requireNonNull(resourceUsageExportConfigs);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.servicesIpv4Cidr = Objects.requireNonNull(servicesIpv4Cidr);
        this.subnetwork = Objects.requireNonNull(subnetwork);
        this.tpuIpv4CidrBlock = Objects.requireNonNull(tpuIpv4CidrBlock);
        this.verticalPodAutoscalings = Objects.requireNonNull(verticalPodAutoscalings);
        this.workloadIdentityConfigs = Objects.requireNonNull(workloadIdentityConfigs);
    }

    public List<GetClusterAddonsConfig> getAddonsConfigs() {
        return this.addonsConfigs;
    }
    public List<GetClusterAuthenticatorGroupsConfig> getAuthenticatorGroupsConfigs() {
        return this.authenticatorGroupsConfigs;
    }
    public List<GetClusterClusterAutoscaling> getClusterAutoscalings() {
        return this.clusterAutoscalings;
    }
    public String getClusterIpv4Cidr() {
        return this.clusterIpv4Cidr;
    }
    public List<GetClusterClusterTelemetry> getClusterTelemetries() {
        return this.clusterTelemetries;
    }
    public List<GetClusterConfidentialNode> getConfidentialNodes() {
        return this.confidentialNodes;
    }
    public List<GetClusterDatabaseEncryption> getDatabaseEncryptions() {
        return this.databaseEncryptions;
    }
    public String getDatapathProvider() {
        return this.datapathProvider;
    }
    public Integer getDefaultMaxPodsPerNode() {
        return this.defaultMaxPodsPerNode;
    }
    public List<GetClusterDefaultSnatStatus> getDefaultSnatStatuses() {
        return this.defaultSnatStatuses;
    }
    public String getDescription() {
        return this.description;
    }
    public List<GetClusterDnsConfig> getDnsConfigs() {
        return this.dnsConfigs;
    }
    public Boolean getEnableAutopilot() {
        return this.enableAutopilot;
    }
    public Boolean getEnableBinaryAuthorization() {
        return this.enableBinaryAuthorization;
    }
    public Boolean getEnableIntranodeVisibility() {
        return this.enableIntranodeVisibility;
    }
    public Boolean getEnableKubernetesAlpha() {
        return this.enableKubernetesAlpha;
    }
    public Boolean getEnableL4IlbSubsetting() {
        return this.enableL4IlbSubsetting;
    }
    public Boolean getEnableLegacyAbac() {
        return this.enableLegacyAbac;
    }
    public Boolean getEnableShieldedNodes() {
        return this.enableShieldedNodes;
    }
    public Boolean getEnableTpu() {
        return this.enableTpu;
    }
    public String getEndpoint() {
        return this.endpoint;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    public String getId() {
        return this.id;
    }
    public List<GetClusterIdentityServiceConfig> getIdentityServiceConfigs() {
        return this.identityServiceConfigs;
    }
    public Integer getInitialNodeCount() {
        return this.initialNodeCount;
    }
    public List<GetClusterIpAllocationPolicy> getIpAllocationPolicies() {
        return this.ipAllocationPolicies;
    }
    public String getLabelFingerprint() {
        return this.labelFingerprint;
    }
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    public List<GetClusterLoggingConfig> getLoggingConfigs() {
        return this.loggingConfigs;
    }
    public String getLoggingService() {
        return this.loggingService;
    }
    public List<GetClusterMaintenancePolicy> getMaintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetClusterMasterAuthorizedNetworksConfig> getMasterAuthorizedNetworksConfigs() {
        return this.masterAuthorizedNetworksConfigs;
    }
    public List<GetClusterMasterAuth> getMasterAuths() {
        return this.masterAuths;
    }
    public String getMasterVersion() {
        return this.masterVersion;
    }
    public String getMinMasterVersion() {
        return this.minMasterVersion;
    }
    public List<GetClusterMonitoringConfig> getMonitoringConfigs() {
        return this.monitoringConfigs;
    }
    public String getMonitoringService() {
        return this.monitoringService;
    }
    public String getName() {
        return this.name;
    }
    public String getNetwork() {
        return this.network;
    }
    public List<GetClusterNetworkPolicy> getNetworkPolicies() {
        return this.networkPolicies;
    }
    public String getNetworkingMode() {
        return this.networkingMode;
    }
    public List<GetClusterNodeConfig> getNodeConfigs() {
        return this.nodeConfigs;
    }
    public List<String> getNodeLocations() {
        return this.nodeLocations;
    }
    public List<GetClusterNodePool> getNodePools() {
        return this.nodePools;
    }
    public String getNodeVersion() {
        return this.nodeVersion;
    }
    public List<GetClusterNotificationConfig> getNotificationConfigs() {
        return this.notificationConfigs;
    }
    public String getOperation() {
        return this.operation;
    }
    public List<GetClusterPodSecurityPolicyConfig> getPodSecurityPolicyConfigs() {
        return this.podSecurityPolicyConfigs;
    }
    public List<GetClusterPrivateClusterConfig> getPrivateClusterConfigs() {
        return this.privateClusterConfigs;
    }
    public String getPrivateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }
    public Optional<String> getProject() {
        return Optional.ofNullable(this.project);
    }
    public List<GetClusterReleaseChannel> getReleaseChannels() {
        return this.releaseChannels;
    }
    public Boolean getRemoveDefaultNodePool() {
        return this.removeDefaultNodePool;
    }
    public Map<String,String> getResourceLabels() {
        return this.resourceLabels;
    }
    public List<GetClusterResourceUsageExportConfig> getResourceUsageExportConfigs() {
        return this.resourceUsageExportConfigs;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public String getServicesIpv4Cidr() {
        return this.servicesIpv4Cidr;
    }
    public String getSubnetwork() {
        return this.subnetwork;
    }
    public String getTpuIpv4CidrBlock() {
        return this.tpuIpv4CidrBlock;
    }
    public List<GetClusterVerticalPodAutoscaling> getVerticalPodAutoscalings() {
        return this.verticalPodAutoscalings;
    }
    public List<GetClusterWorkloadIdentityConfig> getWorkloadIdentityConfigs() {
        return this.workloadIdentityConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetClusterAddonsConfig> addonsConfigs;
        private List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs;
        private List<GetClusterClusterAutoscaling> clusterAutoscalings;
        private String clusterIpv4Cidr;
        private List<GetClusterClusterTelemetry> clusterTelemetries;
        private List<GetClusterConfidentialNode> confidentialNodes;
        private List<GetClusterDatabaseEncryption> databaseEncryptions;
        private String datapathProvider;
        private Integer defaultMaxPodsPerNode;
        private List<GetClusterDefaultSnatStatus> defaultSnatStatuses;
        private String description;
        private List<GetClusterDnsConfig> dnsConfigs;
        private Boolean enableAutopilot;
        private Boolean enableBinaryAuthorization;
        private Boolean enableIntranodeVisibility;
        private Boolean enableKubernetesAlpha;
        private Boolean enableL4IlbSubsetting;
        private Boolean enableLegacyAbac;
        private Boolean enableShieldedNodes;
        private Boolean enableTpu;
        private String endpoint;
        private String id;
        private List<GetClusterIdentityServiceConfig> identityServiceConfigs;
        private Integer initialNodeCount;
        private List<GetClusterIpAllocationPolicy> ipAllocationPolicies;
        private String labelFingerprint;
        private @Nullable String location;
        private List<GetClusterLoggingConfig> loggingConfigs;
        private String loggingService;
        private List<GetClusterMaintenancePolicy> maintenancePolicies;
        private List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
        private List<GetClusterMasterAuth> masterAuths;
        private String masterVersion;
        private String minMasterVersion;
        private List<GetClusterMonitoringConfig> monitoringConfigs;
        private String monitoringService;
        private String name;
        private String network;
        private List<GetClusterNetworkPolicy> networkPolicies;
        private String networkingMode;
        private List<GetClusterNodeConfig> nodeConfigs;
        private List<String> nodeLocations;
        private List<GetClusterNodePool> nodePools;
        private String nodeVersion;
        private List<GetClusterNotificationConfig> notificationConfigs;
        private String operation;
        private List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs;
        private List<GetClusterPrivateClusterConfig> privateClusterConfigs;
        private String privateIpv6GoogleAccess;
        private @Nullable String project;
        private List<GetClusterReleaseChannel> releaseChannels;
        private Boolean removeDefaultNodePool;
        private Map<String,String> resourceLabels;
        private List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs;
        private String selfLink;
        private String servicesIpv4Cidr;
        private String subnetwork;
        private String tpuIpv4CidrBlock;
        private List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings;
        private List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addonsConfigs = defaults.addonsConfigs;
    	      this.authenticatorGroupsConfigs = defaults.authenticatorGroupsConfigs;
    	      this.clusterAutoscalings = defaults.clusterAutoscalings;
    	      this.clusterIpv4Cidr = defaults.clusterIpv4Cidr;
    	      this.clusterTelemetries = defaults.clusterTelemetries;
    	      this.confidentialNodes = defaults.confidentialNodes;
    	      this.databaseEncryptions = defaults.databaseEncryptions;
    	      this.datapathProvider = defaults.datapathProvider;
    	      this.defaultMaxPodsPerNode = defaults.defaultMaxPodsPerNode;
    	      this.defaultSnatStatuses = defaults.defaultSnatStatuses;
    	      this.description = defaults.description;
    	      this.dnsConfigs = defaults.dnsConfigs;
    	      this.enableAutopilot = defaults.enableAutopilot;
    	      this.enableBinaryAuthorization = defaults.enableBinaryAuthorization;
    	      this.enableIntranodeVisibility = defaults.enableIntranodeVisibility;
    	      this.enableKubernetesAlpha = defaults.enableKubernetesAlpha;
    	      this.enableL4IlbSubsetting = defaults.enableL4IlbSubsetting;
    	      this.enableLegacyAbac = defaults.enableLegacyAbac;
    	      this.enableShieldedNodes = defaults.enableShieldedNodes;
    	      this.enableTpu = defaults.enableTpu;
    	      this.endpoint = defaults.endpoint;
    	      this.id = defaults.id;
    	      this.identityServiceConfigs = defaults.identityServiceConfigs;
    	      this.initialNodeCount = defaults.initialNodeCount;
    	      this.ipAllocationPolicies = defaults.ipAllocationPolicies;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.location = defaults.location;
    	      this.loggingConfigs = defaults.loggingConfigs;
    	      this.loggingService = defaults.loggingService;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.masterAuthorizedNetworksConfigs = defaults.masterAuthorizedNetworksConfigs;
    	      this.masterAuths = defaults.masterAuths;
    	      this.masterVersion = defaults.masterVersion;
    	      this.minMasterVersion = defaults.minMasterVersion;
    	      this.monitoringConfigs = defaults.monitoringConfigs;
    	      this.monitoringService = defaults.monitoringService;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkPolicies = defaults.networkPolicies;
    	      this.networkingMode = defaults.networkingMode;
    	      this.nodeConfigs = defaults.nodeConfigs;
    	      this.nodeLocations = defaults.nodeLocations;
    	      this.nodePools = defaults.nodePools;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.notificationConfigs = defaults.notificationConfigs;
    	      this.operation = defaults.operation;
    	      this.podSecurityPolicyConfigs = defaults.podSecurityPolicyConfigs;
    	      this.privateClusterConfigs = defaults.privateClusterConfigs;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.project = defaults.project;
    	      this.releaseChannels = defaults.releaseChannels;
    	      this.removeDefaultNodePool = defaults.removeDefaultNodePool;
    	      this.resourceLabels = defaults.resourceLabels;
    	      this.resourceUsageExportConfigs = defaults.resourceUsageExportConfigs;
    	      this.selfLink = defaults.selfLink;
    	      this.servicesIpv4Cidr = defaults.servicesIpv4Cidr;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tpuIpv4CidrBlock = defaults.tpuIpv4CidrBlock;
    	      this.verticalPodAutoscalings = defaults.verticalPodAutoscalings;
    	      this.workloadIdentityConfigs = defaults.workloadIdentityConfigs;
        }

        public Builder setAddonsConfigs(List<GetClusterAddonsConfig> addonsConfigs) {
            this.addonsConfigs = Objects.requireNonNull(addonsConfigs);
            return this;
        }

        public Builder setAuthenticatorGroupsConfigs(List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs) {
            this.authenticatorGroupsConfigs = Objects.requireNonNull(authenticatorGroupsConfigs);
            return this;
        }

        public Builder setClusterAutoscalings(List<GetClusterClusterAutoscaling> clusterAutoscalings) {
            this.clusterAutoscalings = Objects.requireNonNull(clusterAutoscalings);
            return this;
        }

        public Builder setClusterIpv4Cidr(String clusterIpv4Cidr) {
            this.clusterIpv4Cidr = Objects.requireNonNull(clusterIpv4Cidr);
            return this;
        }

        public Builder setClusterTelemetries(List<GetClusterClusterTelemetry> clusterTelemetries) {
            this.clusterTelemetries = Objects.requireNonNull(clusterTelemetries);
            return this;
        }

        public Builder setConfidentialNodes(List<GetClusterConfidentialNode> confidentialNodes) {
            this.confidentialNodes = Objects.requireNonNull(confidentialNodes);
            return this;
        }

        public Builder setDatabaseEncryptions(List<GetClusterDatabaseEncryption> databaseEncryptions) {
            this.databaseEncryptions = Objects.requireNonNull(databaseEncryptions);
            return this;
        }

        public Builder setDatapathProvider(String datapathProvider) {
            this.datapathProvider = Objects.requireNonNull(datapathProvider);
            return this;
        }

        public Builder setDefaultMaxPodsPerNode(Integer defaultMaxPodsPerNode) {
            this.defaultMaxPodsPerNode = Objects.requireNonNull(defaultMaxPodsPerNode);
            return this;
        }

        public Builder setDefaultSnatStatuses(List<GetClusterDefaultSnatStatus> defaultSnatStatuses) {
            this.defaultSnatStatuses = Objects.requireNonNull(defaultSnatStatuses);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDnsConfigs(List<GetClusterDnsConfig> dnsConfigs) {
            this.dnsConfigs = Objects.requireNonNull(dnsConfigs);
            return this;
        }

        public Builder setEnableAutopilot(Boolean enableAutopilot) {
            this.enableAutopilot = Objects.requireNonNull(enableAutopilot);
            return this;
        }

        public Builder setEnableBinaryAuthorization(Boolean enableBinaryAuthorization) {
            this.enableBinaryAuthorization = Objects.requireNonNull(enableBinaryAuthorization);
            return this;
        }

        public Builder setEnableIntranodeVisibility(Boolean enableIntranodeVisibility) {
            this.enableIntranodeVisibility = Objects.requireNonNull(enableIntranodeVisibility);
            return this;
        }

        public Builder setEnableKubernetesAlpha(Boolean enableKubernetesAlpha) {
            this.enableKubernetesAlpha = Objects.requireNonNull(enableKubernetesAlpha);
            return this;
        }

        public Builder setEnableL4IlbSubsetting(Boolean enableL4IlbSubsetting) {
            this.enableL4IlbSubsetting = Objects.requireNonNull(enableL4IlbSubsetting);
            return this;
        }

        public Builder setEnableLegacyAbac(Boolean enableLegacyAbac) {
            this.enableLegacyAbac = Objects.requireNonNull(enableLegacyAbac);
            return this;
        }

        public Builder setEnableShieldedNodes(Boolean enableShieldedNodes) {
            this.enableShieldedNodes = Objects.requireNonNull(enableShieldedNodes);
            return this;
        }

        public Builder setEnableTpu(Boolean enableTpu) {
            this.enableTpu = Objects.requireNonNull(enableTpu);
            return this;
        }

        public Builder setEndpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIdentityServiceConfigs(List<GetClusterIdentityServiceConfig> identityServiceConfigs) {
            this.identityServiceConfigs = Objects.requireNonNull(identityServiceConfigs);
            return this;
        }

        public Builder setInitialNodeCount(Integer initialNodeCount) {
            this.initialNodeCount = Objects.requireNonNull(initialNodeCount);
            return this;
        }

        public Builder setIpAllocationPolicies(List<GetClusterIpAllocationPolicy> ipAllocationPolicies) {
            this.ipAllocationPolicies = Objects.requireNonNull(ipAllocationPolicies);
            return this;
        }

        public Builder setLabelFingerprint(String labelFingerprint) {
            this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder setLoggingConfigs(List<GetClusterLoggingConfig> loggingConfigs) {
            this.loggingConfigs = Objects.requireNonNull(loggingConfigs);
            return this;
        }

        public Builder setLoggingService(String loggingService) {
            this.loggingService = Objects.requireNonNull(loggingService);
            return this;
        }

        public Builder setMaintenancePolicies(List<GetClusterMaintenancePolicy> maintenancePolicies) {
            this.maintenancePolicies = Objects.requireNonNull(maintenancePolicies);
            return this;
        }

        public Builder setMasterAuthorizedNetworksConfigs(List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs) {
            this.masterAuthorizedNetworksConfigs = Objects.requireNonNull(masterAuthorizedNetworksConfigs);
            return this;
        }

        public Builder setMasterAuths(List<GetClusterMasterAuth> masterAuths) {
            this.masterAuths = Objects.requireNonNull(masterAuths);
            return this;
        }

        public Builder setMasterVersion(String masterVersion) {
            this.masterVersion = Objects.requireNonNull(masterVersion);
            return this;
        }

        public Builder setMinMasterVersion(String minMasterVersion) {
            this.minMasterVersion = Objects.requireNonNull(minMasterVersion);
            return this;
        }

        public Builder setMonitoringConfigs(List<GetClusterMonitoringConfig> monitoringConfigs) {
            this.monitoringConfigs = Objects.requireNonNull(monitoringConfigs);
            return this;
        }

        public Builder setMonitoringService(String monitoringService) {
            this.monitoringService = Objects.requireNonNull(monitoringService);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setNetworkPolicies(List<GetClusterNetworkPolicy> networkPolicies) {
            this.networkPolicies = Objects.requireNonNull(networkPolicies);
            return this;
        }

        public Builder setNetworkingMode(String networkingMode) {
            this.networkingMode = Objects.requireNonNull(networkingMode);
            return this;
        }

        public Builder setNodeConfigs(List<GetClusterNodeConfig> nodeConfigs) {
            this.nodeConfigs = Objects.requireNonNull(nodeConfigs);
            return this;
        }

        public Builder setNodeLocations(List<String> nodeLocations) {
            this.nodeLocations = Objects.requireNonNull(nodeLocations);
            return this;
        }

        public Builder setNodePools(List<GetClusterNodePool> nodePools) {
            this.nodePools = Objects.requireNonNull(nodePools);
            return this;
        }

        public Builder setNodeVersion(String nodeVersion) {
            this.nodeVersion = Objects.requireNonNull(nodeVersion);
            return this;
        }

        public Builder setNotificationConfigs(List<GetClusterNotificationConfig> notificationConfigs) {
            this.notificationConfigs = Objects.requireNonNull(notificationConfigs);
            return this;
        }

        public Builder setOperation(String operation) {
            this.operation = Objects.requireNonNull(operation);
            return this;
        }

        public Builder setPodSecurityPolicyConfigs(List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs) {
            this.podSecurityPolicyConfigs = Objects.requireNonNull(podSecurityPolicyConfigs);
            return this;
        }

        public Builder setPrivateClusterConfigs(List<GetClusterPrivateClusterConfig> privateClusterConfigs) {
            this.privateClusterConfigs = Objects.requireNonNull(privateClusterConfigs);
            return this;
        }

        public Builder setPrivateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = project;
            return this;
        }

        public Builder setReleaseChannels(List<GetClusterReleaseChannel> releaseChannels) {
            this.releaseChannels = Objects.requireNonNull(releaseChannels);
            return this;
        }

        public Builder setRemoveDefaultNodePool(Boolean removeDefaultNodePool) {
            this.removeDefaultNodePool = Objects.requireNonNull(removeDefaultNodePool);
            return this;
        }

        public Builder setResourceLabels(Map<String,String> resourceLabels) {
            this.resourceLabels = Objects.requireNonNull(resourceLabels);
            return this;
        }

        public Builder setResourceUsageExportConfigs(List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs) {
            this.resourceUsageExportConfigs = Objects.requireNonNull(resourceUsageExportConfigs);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setServicesIpv4Cidr(String servicesIpv4Cidr) {
            this.servicesIpv4Cidr = Objects.requireNonNull(servicesIpv4Cidr);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public Builder setTpuIpv4CidrBlock(String tpuIpv4CidrBlock) {
            this.tpuIpv4CidrBlock = Objects.requireNonNull(tpuIpv4CidrBlock);
            return this;
        }

        public Builder setVerticalPodAutoscalings(List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings) {
            this.verticalPodAutoscalings = Objects.requireNonNull(verticalPodAutoscalings);
            return this;
        }

        public Builder setWorkloadIdentityConfigs(List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs) {
            this.workloadIdentityConfigs = Objects.requireNonNull(workloadIdentityConfigs);
            return this;
        }

        public GetClusterResult build() {
            return new GetClusterResult(addonsConfigs, authenticatorGroupsConfigs, clusterAutoscalings, clusterIpv4Cidr, clusterTelemetries, confidentialNodes, databaseEncryptions, datapathProvider, defaultMaxPodsPerNode, defaultSnatStatuses, description, dnsConfigs, enableAutopilot, enableBinaryAuthorization, enableIntranodeVisibility, enableKubernetesAlpha, enableL4IlbSubsetting, enableLegacyAbac, enableShieldedNodes, enableTpu, endpoint, id, identityServiceConfigs, initialNodeCount, ipAllocationPolicies, labelFingerprint, location, loggingConfigs, loggingService, maintenancePolicies, masterAuthorizedNetworksConfigs, masterAuths, masterVersion, minMasterVersion, monitoringConfigs, monitoringService, name, network, networkPolicies, networkingMode, nodeConfigs, nodeLocations, nodePools, nodeVersion, notificationConfigs, operation, podSecurityPolicyConfigs, privateClusterConfigs, privateIpv6GoogleAccess, project, releaseChannels, removeDefaultNodePool, resourceLabels, resourceUsageExportConfigs, selfLink, servicesIpv4Cidr, subnetwork, tpuIpv4CidrBlock, verticalPodAutoscalings, workloadIdentityConfigs);
        }
    }
}
