// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.TableEncryptionConfigurationArgs;
import io.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationArgs;
import io.pulumi.gcp.bigquery.inputs.TableMaterializedViewArgs;
import io.pulumi.gcp.bigquery.inputs.TableRangePartitioningArgs;
import io.pulumi.gcp.bigquery.inputs.TableTimePartitioningArgs;
import io.pulumi.gcp.bigquery.inputs.TableViewArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    /**
     * Specifies column names to use for data clustering.
     * Up to four top-level columns are allowed, and should be specified in
     * descending priority order.
     * 
     */
    @InputImport(name="clusterings")
        private final @Nullable Input<List<String>> clusterings;

    public Input<List<String>> getClusterings() {
        return this.clusterings == null ? Input.empty() : this.clusterings;
    }

    /**
     * The dataset ID to create the table in.
     * Changing this forces a new resource to be created.
     * 
     */
    @InputImport(name="datasetId", required=true)
        private final Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId;
    }

    /**
     * Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `=destroy` or `=update` that would delete the instance will fail.
     * 
     */
    @InputImport(name="deletionProtection")
        private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * The field description.
     * 
     */
    @InputImport(name="description")
        private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Specifies how the table should be encrypted.
     * If left blank, the table will be encrypted with a Google-managed key; that process
     * is transparent to the user.  Structure is documented below.
     * 
     */
    @InputImport(name="encryptionConfiguration")
        private final @Nullable Input<TableEncryptionConfigurationArgs> encryptionConfiguration;

    public Input<TableEncryptionConfigurationArgs> getEncryptionConfiguration() {
        return this.encryptionConfiguration == null ? Input.empty() : this.encryptionConfiguration;
    }

    /**
     * The time when this table expires, in
     * milliseconds since the epoch. If not present, the table will persist
     * indefinitely. Expired tables will be deleted and their storage
     * reclaimed.
     * 
     */
    @InputImport(name="expirationTime")
        private final @Nullable Input<Integer> expirationTime;

    public Input<Integer> getExpirationTime() {
        return this.expirationTime == null ? Input.empty() : this.expirationTime;
    }

    /**
     * Describes the data format,
     * location, and other properties of a table stored outside of BigQuery.
     * By defining these properties, the data source can then be queried as
     * if it were a standard BigQuery table. Structure is documented below.
     * 
     */
    @InputImport(name="externalDataConfiguration")
        private final @Nullable Input<TableExternalDataConfigurationArgs> externalDataConfiguration;

    public Input<TableExternalDataConfigurationArgs> getExternalDataConfiguration() {
        return this.externalDataConfiguration == null ? Input.empty() : this.externalDataConfiguration;
    }

    /**
     * A descriptive name for the table.
     * 
     */
    @InputImport(name="friendlyName")
        private final @Nullable Input<String> friendlyName;

    public Input<String> getFriendlyName() {
        return this.friendlyName == null ? Input.empty() : this.friendlyName;
    }

    /**
     * A mapping of labels to assign to the resource.
     * 
     */
    @InputImport(name="labels")
        private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * If specified, configures this table as a materialized view.
     * Structure is documented below.
     * 
     */
    @InputImport(name="materializedView")
        private final @Nullable Input<TableMaterializedViewArgs> materializedView;

    public Input<TableMaterializedViewArgs> getMaterializedView() {
        return this.materializedView == null ? Input.empty() : this.materializedView;
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
        private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * If specified, configures range-based
     * partitioning for this table. Structure is documented below.
     * 
     */
    @InputImport(name="rangePartitioning")
        private final @Nullable Input<TableRangePartitioningArgs> rangePartitioning;

    public Input<TableRangePartitioningArgs> getRangePartitioning() {
        return this.rangePartitioning == null ? Input.empty() : this.rangePartitioning;
    }

    /**
     * A JSON schema for the external table. Schema is required
     * for CSV and JSON formats if autodetect is not on. Schema is disallowed
     * for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
     * ~>**NOTE:** Because this field expects a JSON string, any changes to the
     * string will create a diff, even if the JSON itself hasn't changed.
     * Furthermore drift for this field cannot not be detected because BigQuery
     * only uses this schema to compute the effective schema for the table, therefore
     * any changes on the configured value will force the table to be recreated.
     * This schema is effectively only applied when creating a table from an external
     * datasource, after creation the computed schema will be stored in
     * `google_bigquery_table.schema`
     * 
     */
    @InputImport(name="schema")
        private final @Nullable Input<String> schema;

    public Input<String> getSchema() {
        return this.schema == null ? Input.empty() : this.schema;
    }

    /**
     * A unique ID for the resource.
     * Changing this forces a new resource to be created.
     * 
     */
    @InputImport(name="tableId", required=true)
        private final Input<String> tableId;

    public Input<String> getTableId() {
        return this.tableId;
    }

    /**
     * If specified, configures time-based
     * partitioning for this table. Structure is documented below.
     * 
     */
    @InputImport(name="timePartitioning")
        private final @Nullable Input<TableTimePartitioningArgs> timePartitioning;

    public Input<TableTimePartitioningArgs> getTimePartitioning() {
        return this.timePartitioning == null ? Input.empty() : this.timePartitioning;
    }

    /**
     * If specified, configures this table as a view.
     * Structure is documented below.
     * 
     */
    @InputImport(name="view")
        private final @Nullable Input<TableViewArgs> view;

    public Input<TableViewArgs> getView() {
        return this.view == null ? Input.empty() : this.view;
    }

    public TableArgs(
        @Nullable Input<List<String>> clusterings,
        Input<String> datasetId,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> description,
        @Nullable Input<TableEncryptionConfigurationArgs> encryptionConfiguration,
        @Nullable Input<Integer> expirationTime,
        @Nullable Input<TableExternalDataConfigurationArgs> externalDataConfiguration,
        @Nullable Input<String> friendlyName,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<TableMaterializedViewArgs> materializedView,
        @Nullable Input<String> project,
        @Nullable Input<TableRangePartitioningArgs> rangePartitioning,
        @Nullable Input<String> schema,
        Input<String> tableId,
        @Nullable Input<TableTimePartitioningArgs> timePartitioning,
        @Nullable Input<TableViewArgs> view) {
        this.clusterings = clusterings;
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.deletionProtection = deletionProtection;
        this.description = description;
        this.encryptionConfiguration = encryptionConfiguration;
        this.expirationTime = expirationTime;
        this.externalDataConfiguration = externalDataConfiguration;
        this.friendlyName = friendlyName;
        this.labels = labels;
        this.materializedView = materializedView;
        this.project = project;
        this.rangePartitioning = rangePartitioning;
        this.schema = schema;
        this.tableId = Objects.requireNonNull(tableId, "expected parameter 'tableId' to be non-null");
        this.timePartitioning = timePartitioning;
        this.view = view;
    }

    private TableArgs() {
        this.clusterings = Input.empty();
        this.datasetId = Input.empty();
        this.deletionProtection = Input.empty();
        this.description = Input.empty();
        this.encryptionConfiguration = Input.empty();
        this.expirationTime = Input.empty();
        this.externalDataConfiguration = Input.empty();
        this.friendlyName = Input.empty();
        this.labels = Input.empty();
        this.materializedView = Input.empty();
        this.project = Input.empty();
        this.rangePartitioning = Input.empty();
        this.schema = Input.empty();
        this.tableId = Input.empty();
        this.timePartitioning = Input.empty();
        this.view = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> clusterings;
        private Input<String> datasetId;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> description;
        private @Nullable Input<TableEncryptionConfigurationArgs> encryptionConfiguration;
        private @Nullable Input<Integer> expirationTime;
        private @Nullable Input<TableExternalDataConfigurationArgs> externalDataConfiguration;
        private @Nullable Input<String> friendlyName;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<TableMaterializedViewArgs> materializedView;
        private @Nullable Input<String> project;
        private @Nullable Input<TableRangePartitioningArgs> rangePartitioning;
        private @Nullable Input<String> schema;
        private Input<String> tableId;
        private @Nullable Input<TableTimePartitioningArgs> timePartitioning;
        private @Nullable Input<TableViewArgs> view;

        public Builder() {
    	      // Empty
        }

        public Builder(TableArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterings = defaults.clusterings;
    	      this.datasetId = defaults.datasetId;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.expirationTime = defaults.expirationTime;
    	      this.externalDataConfiguration = defaults.externalDataConfiguration;
    	      this.friendlyName = defaults.friendlyName;
    	      this.labels = defaults.labels;
    	      this.materializedView = defaults.materializedView;
    	      this.project = defaults.project;
    	      this.rangePartitioning = defaults.rangePartitioning;
    	      this.schema = defaults.schema;
    	      this.tableId = defaults.tableId;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.view = defaults.view;
        }

        public Builder setClusterings(@Nullable Input<List<String>> clusterings) {
            this.clusterings = clusterings;
            return this;
        }

        public Builder setClusterings(@Nullable List<String> clusterings) {
            this.clusterings = Input.ofNullable(clusterings);
            return this;
        }

        public Builder setDatasetId(Input<String> datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder setDatasetId(String datasetId) {
            this.datasetId = Input.of(Objects.requireNonNull(datasetId));
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEncryptionConfiguration(@Nullable Input<TableEncryptionConfigurationArgs> encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }

        public Builder setEncryptionConfiguration(@Nullable TableEncryptionConfigurationArgs encryptionConfiguration) {
            this.encryptionConfiguration = Input.ofNullable(encryptionConfiguration);
            return this;
        }

        public Builder setExpirationTime(@Nullable Input<Integer> expirationTime) {
            this.expirationTime = expirationTime;
            return this;
        }

        public Builder setExpirationTime(@Nullable Integer expirationTime) {
            this.expirationTime = Input.ofNullable(expirationTime);
            return this;
        }

        public Builder setExternalDataConfiguration(@Nullable Input<TableExternalDataConfigurationArgs> externalDataConfiguration) {
            this.externalDataConfiguration = externalDataConfiguration;
            return this;
        }

        public Builder setExternalDataConfiguration(@Nullable TableExternalDataConfigurationArgs externalDataConfiguration) {
            this.externalDataConfiguration = Input.ofNullable(externalDataConfiguration);
            return this;
        }

        public Builder setFriendlyName(@Nullable Input<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder setFriendlyName(@Nullable String friendlyName) {
            this.friendlyName = Input.ofNullable(friendlyName);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMaterializedView(@Nullable Input<TableMaterializedViewArgs> materializedView) {
            this.materializedView = materializedView;
            return this;
        }

        public Builder setMaterializedView(@Nullable TableMaterializedViewArgs materializedView) {
            this.materializedView = Input.ofNullable(materializedView);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRangePartitioning(@Nullable Input<TableRangePartitioningArgs> rangePartitioning) {
            this.rangePartitioning = rangePartitioning;
            return this;
        }

        public Builder setRangePartitioning(@Nullable TableRangePartitioningArgs rangePartitioning) {
            this.rangePartitioning = Input.ofNullable(rangePartitioning);
            return this;
        }

        public Builder setSchema(@Nullable Input<String> schema) {
            this.schema = schema;
            return this;
        }

        public Builder setSchema(@Nullable String schema) {
            this.schema = Input.ofNullable(schema);
            return this;
        }

        public Builder setTableId(Input<String> tableId) {
            this.tableId = Objects.requireNonNull(tableId);
            return this;
        }

        public Builder setTableId(String tableId) {
            this.tableId = Input.of(Objects.requireNonNull(tableId));
            return this;
        }

        public Builder setTimePartitioning(@Nullable Input<TableTimePartitioningArgs> timePartitioning) {
            this.timePartitioning = timePartitioning;
            return this;
        }

        public Builder setTimePartitioning(@Nullable TableTimePartitioningArgs timePartitioning) {
            this.timePartitioning = Input.ofNullable(timePartitioning);
            return this;
        }

        public Builder setView(@Nullable Input<TableViewArgs> view) {
            this.view = view;
            return this;
        }

        public Builder setView(@Nullable TableViewArgs view) {
            this.view = Input.ofNullable(view);
            return this;
        }
        public TableArgs build() {
            return new TableArgs(clusterings, datasetId, deletionProtection, description, encryptionConfiguration, expirationTime, externalDataConfiguration, friendlyName, labels, materializedView, project, rangePartitioning, schema, tableId, timePartitioning, view);
        }
    }
}
