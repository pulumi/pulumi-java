// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.kms;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CryptoKeyIAMPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final CryptoKeyIAMPolicyArgs Empty = new CryptoKeyIAMPolicyArgs();

    /**
     * The crypto key ID, in the form
     * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
     * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
     * the provider's project setting will be used as a fallback.
     * 
     */
    @Import(name="cryptoKeyId", required=true)
      private final Output<String> cryptoKeyId;

    public Output<String> getCryptoKeyId() {
        return this.cryptoKeyId;
    }

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Import(name="policyData", required=true)
      private final Output<String> policyData;

    public Output<String> getPolicyData() {
        return this.policyData;
    }

    public CryptoKeyIAMPolicyArgs(
        Output<String> cryptoKeyId,
        Output<String> policyData) {
        this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
    }

    private CryptoKeyIAMPolicyArgs() {
        this.cryptoKeyId = Output.empty();
        this.policyData = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyIAMPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> cryptoKeyId;
        private Output<String> policyData;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyIAMPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyId = defaults.cryptoKeyId;
    	      this.policyData = defaults.policyData;
        }

        public Builder cryptoKeyId(Output<String> cryptoKeyId) {
            this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId);
            return this;
        }
        public Builder cryptoKeyId(String cryptoKeyId) {
            this.cryptoKeyId = Output.of(Objects.requireNonNull(cryptoKeyId));
            return this;
        }
        public Builder policyData(Output<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }
        public Builder policyData(String policyData) {
            this.policyData = Output.of(Objects.requireNonNull(policyData));
            return this;
        }        public CryptoKeyIAMPolicyArgs build() {
            return new CryptoKeyIAMPolicyArgs(cryptoKeyId, policyData);
        }
    }
}
