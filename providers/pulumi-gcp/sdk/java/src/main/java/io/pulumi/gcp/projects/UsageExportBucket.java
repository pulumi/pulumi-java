// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.projects;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.projects.UsageExportBucketArgs;
import io.pulumi.gcp.projects.inputs.UsageExportBucketState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Allows creation and management of a Google Cloud Platform project.
 * 
 * Projects created with this resource must be associated with an Organization.
 * See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
 * 
 * The user or service account that is running this provider when creating a `gcp.organizations.Project`
 * resource must have `roles/resourcemanager.projectCreator` on the specified organization. See the
 * [Access Control for Organizations Using IAM](https://cloud.google.com/resource-manager/docs/access-control-org)
 * doc for more information.
 * 
 * > This resource reads the specified billing account on every provider apply and plan operation so you must have permissions on the specified billing account.
 * 
 * To get more information about projects, see:
 * 
 * * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v1/projects)
 * * How-to Guides
 *     * [Creating and managing projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const myProject = new gcp.organizations.Project("my_project", {
 *     orgId: "1234567",
 *     projectId: "your-project-id",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * my_project = gcp.organizations.Project("myProject",
 *     org_id="1234567",
 *     project_id="your-project-id")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var myProject = new Gcp.Organizations.Project("myProject", new Gcp.Organizations.ProjectArgs
 *         {
 *             OrgId = "1234567",
 *             ProjectId = "your-project-id",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.NewProject(ctx, "myProject", &organizations.ProjectArgs{
 * 			OrgId:     pulumi.String("1234567"),
 * 			ProjectId: pulumi.String("your-project-id"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * To create a project under a specific folder
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const department1 = new gcp.organizations.Folder("department1", {
 *     displayName: "Department 1",
 *     parent: "organizations/1234567",
 * });
 * const myProject_in_a_folder = new gcp.organizations.Project("myProject-in-a-folder", {
 *     projectId: "your-project-id",
 *     folderId: department1.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * department1 = gcp.organizations.Folder("department1",
 *     display_name="Department 1",
 *     parent="organizations/1234567")
 * my_project_in_a_folder = gcp.organizations.Project("myProject-in-a-folder",
 *     project_id="your-project-id",
 *     folder_id=department1.name)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var department1 = new Gcp.Organizations.Folder("department1", new Gcp.Organizations.FolderArgs
 *         {
 *             DisplayName = "Department 1",
 *             Parent = "organizations/1234567",
 *         });
 *         var myProject_in_a_folder = new Gcp.Organizations.Project("myProject-in-a-folder", new Gcp.Organizations.ProjectArgs
 *         {
 *             ProjectId = "your-project-id",
 *             FolderId = department1.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		department1, err := organizations.NewFolder(ctx, "department1", &organizations.FolderArgs{
 * 			DisplayName: pulumi.String("Department 1"),
 * 			Parent:      pulumi.String("organizations/1234567"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = organizations.NewProject(ctx, "myProject-in-a-folder", &organizations.ProjectArgs{
 * 			ProjectId: pulumi.String("your-project-id"),
 * 			FolderId:  department1.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Projects can be imported using the `project_id`, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:projects/usageExportBucket:UsageExportBucket my_project your-project-id
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:projects/usageExportBucket:UsageExportBucket")
public class UsageExportBucket extends io.pulumi.resources.CustomResource {
    /**
     * The bucket to store reports in.
     * 
     */
    @Export(name="bucketName", type=String.class, parameters={})
    private Output<String> bucketName;

    /**
     * @return The bucket to store reports in.
     * 
     */
    public Output<String> getBucketName() {
        return this.bucketName;
    }
    /**
     * A prefix for the reports, for instance, the project name.
     * 
     */
    @Export(name="prefix", type=String.class, parameters={})
    private Output</* @Nullable */ String> prefix;

    /**
     * @return A prefix for the reports, for instance, the project name.
     * 
     */
    public Output</* @Nullable */ String> getPrefix() {
        return this.prefix;
    }
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The project to set the export bucket on. If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UsageExportBucket(String name) {
        this(name, UsageExportBucketArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UsageExportBucket(String name, UsageExportBucketArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UsageExportBucket(String name, UsageExportBucketArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:projects/usageExportBucket:UsageExportBucket", name, args == null ? UsageExportBucketArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private UsageExportBucket(String name, Output<String> id, @Nullable UsageExportBucketState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:projects/usageExportBucket:UsageExportBucket", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UsageExportBucket get(String name, Output<String> id, @Nullable UsageExportBucketState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new UsageExportBucket(name, id, state, options);
    }
}
