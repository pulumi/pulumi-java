// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildArtifacts;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildAvailableSecrets;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildOptions;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildSecret;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildSource;
import io.pulumi.gcp.cloudbuild.outputs.TriggerBuildStep;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class TriggerBuild {
    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     * Structure is documented below.
     * 
     */
    private final @Nullable TriggerBuildArtifacts artifacts;
    /**
     * Secrets and secret environment variables.
     * Structure is documented below.
     * 
     */
    private final @Nullable TriggerBuildAvailableSecrets availableSecrets;
    /**
     * A list of images to be pushed upon the successful completion of all build steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * 
     */
    private final @Nullable List<String> images;
    /**
     * Google Cloud Storage bucket where logs should be written.
     * Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
     * 
     */
    private final @Nullable String logsBucket;
    /**
     * Special options for this build.
     * Structure is documented below.
     * 
     */
    private final @Nullable TriggerBuildOptions options;
    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value,
     * the build will expire and the build status will be EXPIRED.
     * The TTL starts ticking from createTime.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    private final @Nullable String queueTtl;
    /**
     * Secrets to decrypt using Cloud Key Management Service.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<TriggerBuildSecret> secrets;
    /**
     * The location of the source files to build.
     * One of `storageSource` or `repoSource` must be provided.
     * Structure is documented below.
     * 
     */
    private final @Nullable TriggerBuildSource source;
    /**
     * The operations to be performed on the workspace.
     * Structure is documented below.
     * 
     */
    private final List<TriggerBuildStep> steps;
    /**
     * Substitutions to use in a triggered build. Should only be used with triggers.run
     * 
     */
    private final @Nullable Map<String,String> substitutions;
    /**
     * Tags for annotation of a Build. These are not docker tags.
     * 
     */
    private final @Nullable List<String> tags;
    /**
     * Time limit for executing this build step. If not defined,
     * the step has no
     * time limit and will be allowed to continue to run until either it
     * completes or the build itself times out.
     * 
     */
    private final @Nullable String timeout;

    @OutputCustomType.Constructor({"artifacts","availableSecrets","images","logsBucket","options","queueTtl","secrets","source","steps","substitutions","tags","timeout"})
    private TriggerBuild(
        @Nullable TriggerBuildArtifacts artifacts,
        @Nullable TriggerBuildAvailableSecrets availableSecrets,
        @Nullable List<String> images,
        @Nullable String logsBucket,
        @Nullable TriggerBuildOptions options,
        @Nullable String queueTtl,
        @Nullable List<TriggerBuildSecret> secrets,
        @Nullable TriggerBuildSource source,
        List<TriggerBuildStep> steps,
        @Nullable Map<String,String> substitutions,
        @Nullable List<String> tags,
        @Nullable String timeout) {
        this.artifacts = artifacts;
        this.availableSecrets = availableSecrets;
        this.images = images;
        this.logsBucket = logsBucket;
        this.options = options;
        this.queueTtl = queueTtl;
        this.secrets = secrets;
        this.source = source;
        this.steps = Objects.requireNonNull(steps);
        this.substitutions = substitutions;
        this.tags = tags;
        this.timeout = timeout;
    }

    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     * Structure is documented below.
     * 
     */
    public Optional<TriggerBuildArtifacts> getArtifacts() {
        return Optional.ofNullable(this.artifacts);
    }
    /**
     * Secrets and secret environment variables.
     * Structure is documented below.
     * 
     */
    public Optional<TriggerBuildAvailableSecrets> getAvailableSecrets() {
        return Optional.ofNullable(this.availableSecrets);
    }
    /**
     * A list of images to be pushed upon the successful completion of all build steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * 
     */
    public List<String> getImages() {
        return this.images == null ? List.of() : this.images;
    }
    /**
     * Google Cloud Storage bucket where logs should be written.
     * Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
     * 
     */
    public Optional<String> getLogsBucket() {
        return Optional.ofNullable(this.logsBucket);
    }
    /**
     * Special options for this build.
     * Structure is documented below.
     * 
     */
    public Optional<TriggerBuildOptions> getOptions() {
        return Optional.ofNullable(this.options);
    }
    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value,
     * the build will expire and the build status will be EXPIRED.
     * The TTL starts ticking from createTime.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    public Optional<String> getQueueTtl() {
        return Optional.ofNullable(this.queueTtl);
    }
    /**
     * Secrets to decrypt using Cloud Key Management Service.
     * Structure is documented below.
     * 
     */
    public List<TriggerBuildSecret> getSecrets() {
        return this.secrets == null ? List.of() : this.secrets;
    }
    /**
     * The location of the source files to build.
     * One of `storageSource` or `repoSource` must be provided.
     * Structure is documented below.
     * 
     */
    public Optional<TriggerBuildSource> getSource() {
        return Optional.ofNullable(this.source);
    }
    /**
     * The operations to be performed on the workspace.
     * Structure is documented below.
     * 
     */
    public List<TriggerBuildStep> getSteps() {
        return this.steps;
    }
    /**
     * Substitutions to use in a triggered build. Should only be used with triggers.run
     * 
     */
    public Map<String,String> getSubstitutions() {
        return this.substitutions == null ? Map.of() : this.substitutions;
    }
    /**
     * Tags for annotation of a Build. These are not docker tags.
     * 
     */
    public List<String> getTags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * Time limit for executing this build step. If not defined,
     * the step has no
     * time limit and will be allowed to continue to run until either it
     * completes or the build itself times out.
     * 
     */
    public Optional<String> getTimeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBuild defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable TriggerBuildArtifacts artifacts;
        private @Nullable TriggerBuildAvailableSecrets availableSecrets;
        private @Nullable List<String> images;
        private @Nullable String logsBucket;
        private @Nullable TriggerBuildOptions options;
        private @Nullable String queueTtl;
        private @Nullable List<TriggerBuildSecret> secrets;
        private @Nullable TriggerBuildSource source;
        private List<TriggerBuildStep> steps;
        private @Nullable Map<String,String> substitutions;
        private @Nullable List<String> tags;
        private @Nullable String timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerBuild defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.availableSecrets = defaults.availableSecrets;
    	      this.images = defaults.images;
    	      this.logsBucket = defaults.logsBucket;
    	      this.options = defaults.options;
    	      this.queueTtl = defaults.queueTtl;
    	      this.secrets = defaults.secrets;
    	      this.source = defaults.source;
    	      this.steps = defaults.steps;
    	      this.substitutions = defaults.substitutions;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
        }

        public Builder setArtifacts(@Nullable TriggerBuildArtifacts artifacts) {
            this.artifacts = artifacts;
            return this;
        }

        public Builder setAvailableSecrets(@Nullable TriggerBuildAvailableSecrets availableSecrets) {
            this.availableSecrets = availableSecrets;
            return this;
        }

        public Builder setImages(@Nullable List<String> images) {
            this.images = images;
            return this;
        }

        public Builder setLogsBucket(@Nullable String logsBucket) {
            this.logsBucket = logsBucket;
            return this;
        }

        public Builder setOptions(@Nullable TriggerBuildOptions options) {
            this.options = options;
            return this;
        }

        public Builder setQueueTtl(@Nullable String queueTtl) {
            this.queueTtl = queueTtl;
            return this;
        }

        public Builder setSecrets(@Nullable List<TriggerBuildSecret> secrets) {
            this.secrets = secrets;
            return this;
        }

        public Builder setSource(@Nullable TriggerBuildSource source) {
            this.source = source;
            return this;
        }

        public Builder setSteps(List<TriggerBuildStep> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }

        public Builder setSubstitutions(@Nullable Map<String,String> substitutions) {
            this.substitutions = substitutions;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = timeout;
            return this;
        }
        public TriggerBuild build() {
            return new TriggerBuild(artifacts, availableSecrets, images, logsBucket, options, queueTtl, secrets, source, steps, substitutions, tags, timeout);
        }
    }
}
