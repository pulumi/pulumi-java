// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.kms;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.kms.RegistryArgs;
import io.pulumi.gcp.kms.inputs.RegistryState;
import io.pulumi.gcp.kms.outputs.RegistryCredential;
import io.pulumi.gcp.kms.outputs.RegistryEventNotificationConfigItem;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * @Deprecated
 * gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry
 * 
 */
@Deprecated /* gcp.kms.Registry has been deprecated in favor of gcp.iot.Registry */
@ResourceType(type="gcp:kms/registry:Registry")
public class Registry extends io.pulumi.resources.CustomResource {
    /**
     * List of public key certificates to authenticate devices.
     * 
     */
    @OutputExport(name="credentials", type=List.class, parameters={RegistryCredential.class})
    private Output</* @Nullable */ List<RegistryCredential>> credentials;

    /**
     * @return List of public key certificates to authenticate devices.
     * 
     */
    public Output</* @Nullable */ List<RegistryCredential>> getCredentials() {
        return this.credentials;
    }
    /**
     * List of configurations for event notifications, such as PubSub topics to publish device events to.
     * 
     */
    @OutputExport(name="eventNotificationConfigs", type=List.class, parameters={RegistryEventNotificationConfigItem.class})
    private Output<List<RegistryEventNotificationConfigItem>> eventNotificationConfigs;

    /**
     * @return List of configurations for event notifications, such as PubSub topics to publish device events to.
     * 
     */
    public Output<List<RegistryEventNotificationConfigItem>> getEventNotificationConfigs() {
        return this.eventNotificationConfigs;
    }
    /**
     * Activate or deactivate HTTP.
     * 
     */
    @OutputExport(name="httpConfig", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> httpConfig;

    /**
     * @return Activate or deactivate HTTP.
     * 
     */
    public Output<Map<String,Object>> getHttpConfig() {
        return this.httpConfig;
    }
    /**
     * The default logging verbosity for activity from devices in this registry. Specifies which events should be written to
     * logs. For example, if the LogLevel is ERROR, only events that terminate in errors will be logged. LogLevel is inclusive;
     * enabling INFO logging will also enable ERROR logging. Default value: "NONE" Possible values: ["NONE", "ERROR", "INFO",
     * "DEBUG"]
     * 
     */
    @OutputExport(name="logLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> logLevel;

    /**
     * @return The default logging verbosity for activity from devices in this registry. Specifies which events should be written to
     * logs. For example, if the LogLevel is ERROR, only events that terminate in errors will be logged. LogLevel is inclusive;
     * enabling INFO logging will also enable ERROR logging. Default value: "NONE" Possible values: ["NONE", "ERROR", "INFO",
     * "DEBUG"]
     * 
     */
    public Output</* @Nullable */ String> getLogLevel() {
        return this.logLevel;
    }
    /**
     * Activate or deactivate MQTT.
     * 
     */
    @OutputExport(name="mqttConfig", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> mqttConfig;

    /**
     * @return Activate or deactivate MQTT.
     * 
     */
    public Output<Map<String,Object>> getMqttConfig() {
        return this.mqttConfig;
    }
    /**
     * A unique name for the resource, required by device registry.
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A unique name for the resource, required by device registry.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    @OutputExport(name="project", type=String.class, parameters={})
    private Output<String> project;

    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The region in which the created registry should reside. If it is not provided, the provider region is used.
     * 
     */
    @OutputExport(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region in which the created registry should reside. If it is not provided, the provider region is used.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * A PubSub topic to publish device state updates.
     * 
     */
    @OutputExport(name="stateNotificationConfig", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> stateNotificationConfig;

    /**
     * @return A PubSub topic to publish device state updates.
     * 
     */
    public Output</* @Nullable */ Map<String,Object>> getStateNotificationConfig() {
        return this.stateNotificationConfig;
    }

    public interface BuilderApplicator {
        public void apply(@Nullable RegistryArgs.Builder a);
    }
    private static io.pulumi.gcp.kms.RegistryArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.gcp.kms.RegistryArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Registry(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Registry(String name) {
        this(name, RegistryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Registry(String name, @Nullable RegistryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Registry(String name, @Nullable RegistryArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/registry:Registry", name, args == null ? RegistryArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Registry(String name, Input<String> id, @Nullable RegistryState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/registry:Registry", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Registry get(String name, Input<String> id, @Nullable RegistryState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Registry(name, id, state, options);
    }
}
