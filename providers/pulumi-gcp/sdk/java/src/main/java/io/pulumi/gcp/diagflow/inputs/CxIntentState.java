// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.diagflow.inputs.CxIntentParameterGetArgs;
import io.pulumi.gcp.diagflow.inputs.CxIntentTrainingPhraseGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxIntentState extends io.pulumi.resources.ResourceArgs {

    public static final CxIntentState Empty = new CxIntentState();

    /**
     * Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The human-readable name of the intent, unique within the agent.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation.
     * Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.
     * 
     */
    @Import(name="isFallback")
      private final @Nullable Output<Boolean> isFallback;

    public Output<Boolean> getIsFallback() {
        return this.isFallback == null ? Output.empty() : this.isFallback;
    }

    /**
     * The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes.
     * Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The language of the following fields in intent:
     * Intent.training_phrases.parts.text
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @Import(name="languageCode")
      private final @Nullable Output<String> languageCode;

    public Output<String> getLanguageCode() {
        return this.languageCode == null ? Output.empty() : this.languageCode;
    }

    /**
     * The unique identifier of the intent. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
     * ID>/intents/<Intent ID>.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The collection of parameters associated with the intent.
     * Structure is documented below.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<List<CxIntentParameterGetArgs>> parameters;

    public Output<List<CxIntentParameterGetArgs>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * The agent to create an intent for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     * 
     */
    @Import(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Output.empty() : this.parent;
    }

    /**
     * The priority of this intent. Higher numbers represent higher priorities.
     * If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the Normal priority in the console.
     * If the supplied value is negative, the intent is ignored in runtime detect intent requests.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> getPriority() {
        return this.priority == null ? Output.empty() : this.priority;
    }

    /**
     * The collection of training phrases the agent is trained on to identify the intent.
     * Structure is documented below.
     * 
     */
    @Import(name="trainingPhrases")
      private final @Nullable Output<List<CxIntentTrainingPhraseGetArgs>> trainingPhrases;

    public Output<List<CxIntentTrainingPhraseGetArgs>> getTrainingPhrases() {
        return this.trainingPhrases == null ? Output.empty() : this.trainingPhrases;
    }

    public CxIntentState(
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<Boolean> isFallback,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> languageCode,
        @Nullable Output<String> name,
        @Nullable Output<List<CxIntentParameterGetArgs>> parameters,
        @Nullable Output<String> parent,
        @Nullable Output<Integer> priority,
        @Nullable Output<List<CxIntentTrainingPhraseGetArgs>> trainingPhrases) {
        this.description = description;
        this.displayName = displayName;
        this.isFallback = isFallback;
        this.labels = labels;
        this.languageCode = languageCode;
        this.name = name;
        this.parameters = parameters;
        this.parent = parent;
        this.priority = priority;
        this.trainingPhrases = trainingPhrases;
    }

    private CxIntentState() {
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.isFallback = Output.empty();
        this.labels = Output.empty();
        this.languageCode = Output.empty();
        this.name = Output.empty();
        this.parameters = Output.empty();
        this.parent = Output.empty();
        this.priority = Output.empty();
        this.trainingPhrases = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxIntentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<Boolean> isFallback;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> languageCode;
        private @Nullable Output<String> name;
        private @Nullable Output<List<CxIntentParameterGetArgs>> parameters;
        private @Nullable Output<String> parent;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<List<CxIntentTrainingPhraseGetArgs>> trainingPhrases;

        public Builder() {
    	      // Empty
        }

        public Builder(CxIntentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.isFallback = defaults.isFallback;
    	      this.labels = defaults.labels;
    	      this.languageCode = defaults.languageCode;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.parent = defaults.parent;
    	      this.priority = defaults.priority;
    	      this.trainingPhrases = defaults.trainingPhrases;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }
        public Builder isFallback(@Nullable Output<Boolean> isFallback) {
            this.isFallback = isFallback;
            return this;
        }
        public Builder isFallback(@Nullable Boolean isFallback) {
            this.isFallback = Output.ofNullable(isFallback);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder languageCode(@Nullable Output<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }
        public Builder languageCode(@Nullable String languageCode) {
            this.languageCode = Output.ofNullable(languageCode);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder parameters(@Nullable Output<List<CxIntentParameterGetArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable List<CxIntentParameterGetArgs> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }
        public Builder parameters(CxIntentParameterGetArgs... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }
        public Builder parent(@Nullable String parent) {
            this.parent = Output.ofNullable(parent);
            return this;
        }
        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = Output.ofNullable(priority);
            return this;
        }
        public Builder trainingPhrases(@Nullable Output<List<CxIntentTrainingPhraseGetArgs>> trainingPhrases) {
            this.trainingPhrases = trainingPhrases;
            return this;
        }
        public Builder trainingPhrases(@Nullable List<CxIntentTrainingPhraseGetArgs> trainingPhrases) {
            this.trainingPhrases = Output.ofNullable(trainingPhrases);
            return this;
        }
        public Builder trainingPhrases(CxIntentTrainingPhraseGetArgs... trainingPhrases) {
            return trainingPhrases(List.of(trainingPhrases));
        }        public CxIntentState build() {
            return new CxIntentState(description, displayName, isFallback, labels, languageCode, name, parameters, parent, priority, trainingPhrases);
        }
    }
}
