// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePerimetersArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServicePerimetersArgs Empty = new ServicePerimetersArgs();

    /**
     * The AccessPolicy this ServicePerimeter lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    @InputImport(name="parent", required=true)
        private final Input<String> parent;

    public Input<String> getParent() {
        return this.parent;
    }

    /**
     * The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
     * Structure is documented below.
     * 
     */
    @InputImport(name="servicePerimeters")
        private final @Nullable Input<List<ServicePerimetersServicePerimeterArgs>> servicePerimeters;

    public Input<List<ServicePerimetersServicePerimeterArgs>> getServicePerimeters() {
        return this.servicePerimeters == null ? Input.empty() : this.servicePerimeters;
    }

    public ServicePerimetersArgs(
        Input<String> parent,
        @Nullable Input<List<ServicePerimetersServicePerimeterArgs>> servicePerimeters) {
        this.parent = Objects.requireNonNull(parent, "expected parameter 'parent' to be non-null");
        this.servicePerimeters = servicePerimeters;
    }

    private ServicePerimetersArgs() {
        this.parent = Input.empty();
        this.servicePerimeters = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePerimetersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> parent;
        private @Nullable Input<List<ServicePerimetersServicePerimeterArgs>> servicePerimeters;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePerimetersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.parent = defaults.parent;
    	      this.servicePerimeters = defaults.servicePerimeters;
        }

        public Builder setParent(Input<String> parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }

        public Builder setParent(String parent) {
            this.parent = Input.of(Objects.requireNonNull(parent));
            return this;
        }

        public Builder setServicePerimeters(@Nullable Input<List<ServicePerimetersServicePerimeterArgs>> servicePerimeters) {
            this.servicePerimeters = servicePerimeters;
            return this;
        }

        public Builder setServicePerimeters(@Nullable List<ServicePerimetersServicePerimeterArgs> servicePerimeters) {
            this.servicePerimeters = Input.ofNullable(servicePerimeters);
            return this;
        }
        public ServicePerimetersArgs build() {
            return new ServicePerimetersArgs(parent, servicePerimeters);
        }
    }
}
