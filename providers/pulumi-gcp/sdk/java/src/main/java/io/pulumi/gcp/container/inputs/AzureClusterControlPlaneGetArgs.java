// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneDatabaseEncryptionGetArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneMainVolumeGetArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneProxyConfigGetArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneReplicaPlacementGetArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneRootVolumeGetArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneSshConfigGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AzureClusterControlPlaneGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureClusterControlPlaneGetArgs Empty = new AzureClusterControlPlaneGetArgs();

    /**
     * Optional. Configuration related to application-layer secrets encryption.
     * 
     */
    @InputImport(name="databaseEncryption")
      private final @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> databaseEncryption;

    public Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> getDatabaseEncryption() {
        return this.databaseEncryption == null ? Output.empty() : this.databaseEncryption;
    }

    /**
     * Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
     * 
     */
    @InputImport(name="mainVolume")
      private final @Nullable Output<AzureClusterControlPlaneMainVolumeGetArgs> mainVolume;

    public Output<AzureClusterControlPlaneMainVolumeGetArgs> getMainVolume() {
        return this.mainVolume == null ? Output.empty() : this.mainVolume;
    }

    /**
     * Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    @InputImport(name="proxyConfig")
      private final @Nullable Output<AzureClusterControlPlaneProxyConfigGetArgs> proxyConfig;

    public Output<AzureClusterControlPlaneProxyConfigGetArgs> getProxyConfig() {
        return this.proxyConfig == null ? Output.empty() : this.proxyConfig;
    }

    /**
     * Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
     * 
     */
    @InputImport(name="replicaPlacements")
      private final @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> replicaPlacements;

    public Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> getReplicaPlacements() {
        return this.replicaPlacements == null ? Output.empty() : this.replicaPlacements;
    }

    /**
     * Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
     * 
     */
    @InputImport(name="rootVolume")
      private final @Nullable Output<AzureClusterControlPlaneRootVolumeGetArgs> rootVolume;

    public Output<AzureClusterControlPlaneRootVolumeGetArgs> getRootVolume() {
        return this.rootVolume == null ? Output.empty() : this.rootVolume;
    }

    /**
     * Required. SSH configuration for how to access the underlying control plane machines.
     * 
     */
    @InputImport(name="sshConfig", required=true)
      private final Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig;

    public Output<AzureClusterControlPlaneSshConfigGetArgs> getSshConfig() {
        return this.sshConfig;
    }

    /**
     * For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
     * 
     */
    @InputImport(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> getSubnetId() {
        return this.subnetId;
    }

    /**
     * Optional. A set of tags to apply to all underlying control plane Azure resources.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Required. The Kubernetes version to run on control plane replicas (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
     * 
     */
    @InputImport(name="version", required=true)
      private final Output<String> version;

    public Output<String> getVersion() {
        return this.version;
    }

    /**
     * Optional. The Azure VM size name. Example: `Standard_DS2_v2`. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to `Standard_DS2_v2`.
     * 
     */
    @InputImport(name="vmSize")
      private final @Nullable Output<String> vmSize;

    public Output<String> getVmSize() {
        return this.vmSize == null ? Output.empty() : this.vmSize;
    }

    public AzureClusterControlPlaneGetArgs(
        @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> databaseEncryption,
        @Nullable Output<AzureClusterControlPlaneMainVolumeGetArgs> mainVolume,
        @Nullable Output<AzureClusterControlPlaneProxyConfigGetArgs> proxyConfig,
        @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> replicaPlacements,
        @Nullable Output<AzureClusterControlPlaneRootVolumeGetArgs> rootVolume,
        Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig,
        Output<String> subnetId,
        @Nullable Output<Map<String,String>> tags,
        Output<String> version,
        @Nullable Output<String> vmSize) {
        this.databaseEncryption = databaseEncryption;
        this.mainVolume = mainVolume;
        this.proxyConfig = proxyConfig;
        this.replicaPlacements = replicaPlacements;
        this.rootVolume = rootVolume;
        this.sshConfig = Objects.requireNonNull(sshConfig, "expected parameter 'sshConfig' to be non-null");
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.vmSize = vmSize;
    }

    private AzureClusterControlPlaneGetArgs() {
        this.databaseEncryption = Output.empty();
        this.mainVolume = Output.empty();
        this.proxyConfig = Output.empty();
        this.replicaPlacements = Output.empty();
        this.rootVolume = Output.empty();
        this.sshConfig = Output.empty();
        this.subnetId = Output.empty();
        this.tags = Output.empty();
        this.version = Output.empty();
        this.vmSize = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureClusterControlPlaneGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> databaseEncryption;
        private @Nullable Output<AzureClusterControlPlaneMainVolumeGetArgs> mainVolume;
        private @Nullable Output<AzureClusterControlPlaneProxyConfigGetArgs> proxyConfig;
        private @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> replicaPlacements;
        private @Nullable Output<AzureClusterControlPlaneRootVolumeGetArgs> rootVolume;
        private Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig;
        private Output<String> subnetId;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> version;
        private @Nullable Output<String> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureClusterControlPlaneGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseEncryption = defaults.databaseEncryption;
    	      this.mainVolume = defaults.mainVolume;
    	      this.proxyConfig = defaults.proxyConfig;
    	      this.replicaPlacements = defaults.replicaPlacements;
    	      this.rootVolume = defaults.rootVolume;
    	      this.sshConfig = defaults.sshConfig;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder databaseEncryption(@Nullable Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> databaseEncryption) {
            this.databaseEncryption = databaseEncryption;
            return this;
        }

        public Builder databaseEncryption(@Nullable AzureClusterControlPlaneDatabaseEncryptionGetArgs databaseEncryption) {
            this.databaseEncryption = Output.ofNullable(databaseEncryption);
            return this;
        }

        public Builder mainVolume(@Nullable Output<AzureClusterControlPlaneMainVolumeGetArgs> mainVolume) {
            this.mainVolume = mainVolume;
            return this;
        }

        public Builder mainVolume(@Nullable AzureClusterControlPlaneMainVolumeGetArgs mainVolume) {
            this.mainVolume = Output.ofNullable(mainVolume);
            return this;
        }

        public Builder proxyConfig(@Nullable Output<AzureClusterControlPlaneProxyConfigGetArgs> proxyConfig) {
            this.proxyConfig = proxyConfig;
            return this;
        }

        public Builder proxyConfig(@Nullable AzureClusterControlPlaneProxyConfigGetArgs proxyConfig) {
            this.proxyConfig = Output.ofNullable(proxyConfig);
            return this;
        }

        public Builder replicaPlacements(@Nullable Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> replicaPlacements) {
            this.replicaPlacements = replicaPlacements;
            return this;
        }

        public Builder replicaPlacements(@Nullable List<AzureClusterControlPlaneReplicaPlacementGetArgs> replicaPlacements) {
            this.replicaPlacements = Output.ofNullable(replicaPlacements);
            return this;
        }

        public Builder rootVolume(@Nullable Output<AzureClusterControlPlaneRootVolumeGetArgs> rootVolume) {
            this.rootVolume = rootVolume;
            return this;
        }

        public Builder rootVolume(@Nullable AzureClusterControlPlaneRootVolumeGetArgs rootVolume) {
            this.rootVolume = Output.ofNullable(rootVolume);
            return this;
        }

        public Builder sshConfig(Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig) {
            this.sshConfig = Objects.requireNonNull(sshConfig);
            return this;
        }

        public Builder sshConfig(AzureClusterControlPlaneSshConfigGetArgs sshConfig) {
            this.sshConfig = Output.of(Objects.requireNonNull(sshConfig));
            return this;
        }

        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder version(Output<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder version(String version) {
            this.version = Output.of(Objects.requireNonNull(version));
            return this;
        }

        public Builder vmSize(@Nullable Output<String> vmSize) {
            this.vmSize = vmSize;
            return this;
        }

        public Builder vmSize(@Nullable String vmSize) {
            this.vmSize = Output.ofNullable(vmSize);
            return this;
        }
        public AzureClusterControlPlaneGetArgs build() {
            return new AzureClusterControlPlaneGetArgs(databaseEncryption, mainVolume, proxyConfig, replicaPlacements, rootVolume, sshConfig, subnetId, tags, version, vmSize);
        }
    }
}
