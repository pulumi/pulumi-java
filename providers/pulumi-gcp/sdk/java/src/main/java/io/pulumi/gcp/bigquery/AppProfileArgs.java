// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.AppProfileSingleClusterRoutingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppProfileArgs Empty = new AppProfileArgs();

    /**
     * The unique name of the app profile in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     */
    @InputImport(name="appProfileId", required=true)
    private final Input<String> appProfileId;

    public Input<String> getAppProfileId() {
        return this.appProfileId;
    }

    /**
     * Long form description of the use case for this app profile.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * If true, ignore safety checks when deleting/updating the app profile.
     * 
     */
    @InputImport(name="ignoreWarnings")
    private final @Nullable Input<Boolean> ignoreWarnings;

    public Input<Boolean> getIgnoreWarnings() {
        return this.ignoreWarnings == null ? Input.empty() : this.ignoreWarnings;
    }

    /**
     * The name of the instance to create the app profile within.
     * 
     */
    @InputImport(name="instance")
    private final @Nullable Input<String> instance;

    public Input<String> getInstance() {
        return this.instance == null ? Input.empty() : this.instance;
    }

    /**
     * If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
     * in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
     * consistency to improve availability.
     * 
     */
    @InputImport(name="multiClusterRoutingUseAny")
    private final @Nullable Input<Boolean> multiClusterRoutingUseAny;

    public Input<Boolean> getMultiClusterRoutingUseAny() {
        return this.multiClusterRoutingUseAny == null ? Input.empty() : this.multiClusterRoutingUseAny;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Use a single-cluster routing policy.
     * Structure is documented below.
     * 
     */
    @InputImport(name="singleClusterRouting")
    private final @Nullable Input<AppProfileSingleClusterRoutingArgs> singleClusterRouting;

    public Input<AppProfileSingleClusterRoutingArgs> getSingleClusterRouting() {
        return this.singleClusterRouting == null ? Input.empty() : this.singleClusterRouting;
    }

    public AppProfileArgs(
        Input<String> appProfileId,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> ignoreWarnings,
        @Nullable Input<String> instance,
        @Nullable Input<Boolean> multiClusterRoutingUseAny,
        @Nullable Input<String> project,
        @Nullable Input<AppProfileSingleClusterRoutingArgs> singleClusterRouting) {
        this.appProfileId = Objects.requireNonNull(appProfileId, "expected parameter 'appProfileId' to be non-null");
        this.description = description;
        this.ignoreWarnings = ignoreWarnings;
        this.instance = instance;
        this.multiClusterRoutingUseAny = multiClusterRoutingUseAny;
        this.project = project;
        this.singleClusterRouting = singleClusterRouting;
    }

    private AppProfileArgs() {
        this.appProfileId = Input.empty();
        this.description = Input.empty();
        this.ignoreWarnings = Input.empty();
        this.instance = Input.empty();
        this.multiClusterRoutingUseAny = Input.empty();
        this.project = Input.empty();
        this.singleClusterRouting = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> appProfileId;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> ignoreWarnings;
        private @Nullable Input<String> instance;
        private @Nullable Input<Boolean> multiClusterRoutingUseAny;
        private @Nullable Input<String> project;
        private @Nullable Input<AppProfileSingleClusterRoutingArgs> singleClusterRouting;

        public Builder() {
    	      // Empty
        }

        public Builder(AppProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProfileId = defaults.appProfileId;
    	      this.description = defaults.description;
    	      this.ignoreWarnings = defaults.ignoreWarnings;
    	      this.instance = defaults.instance;
    	      this.multiClusterRoutingUseAny = defaults.multiClusterRoutingUseAny;
    	      this.project = defaults.project;
    	      this.singleClusterRouting = defaults.singleClusterRouting;
        }

        public Builder setAppProfileId(Input<String> appProfileId) {
            this.appProfileId = Objects.requireNonNull(appProfileId);
            return this;
        }

        public Builder setAppProfileId(String appProfileId) {
            this.appProfileId = Input.of(Objects.requireNonNull(appProfileId));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setIgnoreWarnings(@Nullable Input<Boolean> ignoreWarnings) {
            this.ignoreWarnings = ignoreWarnings;
            return this;
        }

        public Builder setIgnoreWarnings(@Nullable Boolean ignoreWarnings) {
            this.ignoreWarnings = Input.ofNullable(ignoreWarnings);
            return this;
        }

        public Builder setInstance(@Nullable Input<String> instance) {
            this.instance = instance;
            return this;
        }

        public Builder setInstance(@Nullable String instance) {
            this.instance = Input.ofNullable(instance);
            return this;
        }

        public Builder setMultiClusterRoutingUseAny(@Nullable Input<Boolean> multiClusterRoutingUseAny) {
            this.multiClusterRoutingUseAny = multiClusterRoutingUseAny;
            return this;
        }

        public Builder setMultiClusterRoutingUseAny(@Nullable Boolean multiClusterRoutingUseAny) {
            this.multiClusterRoutingUseAny = Input.ofNullable(multiClusterRoutingUseAny);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSingleClusterRouting(@Nullable Input<AppProfileSingleClusterRoutingArgs> singleClusterRouting) {
            this.singleClusterRouting = singleClusterRouting;
            return this;
        }

        public Builder setSingleClusterRouting(@Nullable AppProfileSingleClusterRoutingArgs singleClusterRouting) {
            this.singleClusterRouting = Input.ofNullable(singleClusterRouting);
            return this;
        }

        public AppProfileArgs build() {
            return new AppProfileArgs(appProfileId, description, ignoreWarnings, instance, multiClusterRoutingUseAny, project, singleClusterRouting);
        }
    }
}
