// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.organizations;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.organizations.PolicyArgs;
import io.pulumi.gcp.organizations.inputs.PolicyState;
import io.pulumi.gcp.organizations.outputs.PolicyBooleanPolicy;
import io.pulumi.gcp.organizations.outputs.PolicyListPolicy;
import io.pulumi.gcp.organizations.outputs.PolicyRestorePolicy;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Allows management of Organization Policies for a Google Cloud Organization. 
 * 
 * > **Warning:** This resource has been superseded by `gcp.orgpolicy.Policy`. `gcp.orgpolicy.Policy` uses Organization Policy API V2 instead of Cloud Resource Manager API V1 and it supports additional features such as tags and conditions.
 * 
 * To get more information about Organization Policies, see:
 * 
 * * [API documentation](https://cloud.google.com/resource-manager/reference/rest/v1/organizations/setOrgPolicy)
 * * How-to Guides
 *     * [Introduction to the Organization Policy Service](https://cloud.google.com/resource-manager/docs/organization-policy/overview)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * To set policy with a [boolean constraint](https://cloud.google.com/resource-manager/docs/organization-policy/quickstart-boolean-constraints):
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const serialPortPolicy = new gcp.organizations.Policy("serial_port_policy", {
 *     booleanPolicy: {
 *         enforced: true,
 *     },
 *     constraint: "compute.disableSerialPortAccess",
 *     orgId: "123456789",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * serial_port_policy = gcp.organizations.Policy("serialPortPolicy",
 *     boolean_policy=gcp.organizations.PolicyBooleanPolicyArgs(
 *         enforced=True,
 *     ),
 *     constraint="compute.disableSerialPortAccess",
 *     org_id="123456789")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serialPortPolicy = new Gcp.Organizations.Policy("serialPortPolicy", new Gcp.Organizations.PolicyArgs
 *         {
 *             BooleanPolicy = new Gcp.Organizations.Inputs.PolicyBooleanPolicyArgs
 *             {
 *                 Enforced = true,
 *             },
 *             Constraint = "compute.disableSerialPortAccess",
 *             OrgId = "123456789",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.NewPolicy(ctx, "serialPortPolicy", &organizations.PolicyArgs{
 * 			BooleanPolicy: &organizations.PolicyBooleanPolicyArgs{
 * 				Enforced: pulumi.Bool(true),
 * 			},
 * 			Constraint: pulumi.String("compute.disableSerialPortAccess"),
 * 			OrgId:      pulumi.String("123456789"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * To set a policy with a [list constraint](https://cloud.google.com/resource-manager/docs/organization-policy/quickstart-list-constraints):
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const servicesPolicy = new gcp.organizations.Policy("services_policy", {
 *     constraint: "serviceuser.services",
 *     listPolicy: {
 *         allow: {
 *             all: true,
 *         },
 *     },
 *     orgId: "123456789",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * services_policy = gcp.organizations.Policy("servicesPolicy",
 *     constraint="serviceuser.services",
 *     list_policy=gcp.organizations.PolicyListPolicyArgs(
 *         allow=gcp.organizations.PolicyListPolicyAllowArgs(
 *             all=True,
 *         ),
 *     ),
 *     org_id="123456789")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var servicesPolicy = new Gcp.Organizations.Policy("servicesPolicy", new Gcp.Organizations.PolicyArgs
 *         {
 *             Constraint = "serviceuser.services",
 *             ListPolicy = new Gcp.Organizations.Inputs.PolicyListPolicyArgs
 *             {
 *                 Allow = new Gcp.Organizations.Inputs.PolicyListPolicyAllowArgs
 *                 {
 *                     All = true,
 *                 },
 *             },
 *             OrgId = "123456789",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.NewPolicy(ctx, "servicesPolicy", &organizations.PolicyArgs{
 * 			Constraint: pulumi.String("serviceuser.services"),
 * 			ListPolicy: &organizations.PolicyListPolicyArgs{
 * 				Allow: &organizations.PolicyListPolicyAllowArgs{
 * 					All: pulumi.Bool(true),
 * 				},
 * 			},
 * 			OrgId: pulumi.String("123456789"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Or to deny some services, use the following instead:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const servicesPolicy = new gcp.organizations.Policy("services_policy", {
 *     constraint: "serviceuser.services",
 *     listPolicy: {
 *         deny: {
 *             values: ["cloudresourcemanager.googleapis.com"],
 *         },
 *         suggestedValue: "compute.googleapis.com",
 *     },
 *     orgId: "123456789",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * services_policy = gcp.organizations.Policy("servicesPolicy",
 *     constraint="serviceuser.services",
 *     list_policy=gcp.organizations.PolicyListPolicyArgs(
 *         deny=gcp.organizations.PolicyListPolicyDenyArgs(
 *             values=["cloudresourcemanager.googleapis.com"],
 *         ),
 *         suggested_value="compute.googleapis.com",
 *     ),
 *     org_id="123456789")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var servicesPolicy = new Gcp.Organizations.Policy("servicesPolicy", new Gcp.Organizations.PolicyArgs
 *         {
 *             Constraint = "serviceuser.services",
 *             ListPolicy = new Gcp.Organizations.Inputs.PolicyListPolicyArgs
 *             {
 *                 Deny = new Gcp.Organizations.Inputs.PolicyListPolicyDenyArgs
 *                 {
 *                     Values = 
 *                     {
 *                         "cloudresourcemanager.googleapis.com",
 *                     },
 *                 },
 *                 SuggestedValue = "compute.googleapis.com",
 *             },
 *             OrgId = "123456789",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.NewPolicy(ctx, "servicesPolicy", &organizations.PolicyArgs{
 * 			Constraint: pulumi.String("serviceuser.services"),
 * 			ListPolicy: &organizations.PolicyListPolicyArgs{
 * 				Deny: &organizations.PolicyListPolicyDenyArgs{
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("cloudresourcemanager.googleapis.com"),
 * 					},
 * 				},
 * 				SuggestedValue: pulumi.String("compute.googleapis.com"),
 * 			},
 * 			OrgId: pulumi.String("123456789"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * To restore the default organization policy, use the following instead:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const servicesPolicy = new gcp.organizations.Policy("services_policy", {
 *     constraint: "serviceuser.services",
 *     orgId: "123456789",
 *     restorePolicy: {
 *         default: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * services_policy = gcp.organizations.Policy("servicesPolicy",
 *     constraint="serviceuser.services",
 *     org_id="123456789",
 *     restore_policy=gcp.organizations.PolicyRestorePolicyArgs(
 *         default=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var servicesPolicy = new Gcp.Organizations.Policy("servicesPolicy", new Gcp.Organizations.PolicyArgs
 *         {
 *             Constraint = "serviceuser.services",
 *             OrgId = "123456789",
 *             RestorePolicy = new Gcp.Organizations.Inputs.PolicyRestorePolicyArgs
 *             {
 *                 Default = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.NewPolicy(ctx, "servicesPolicy", &organizations.PolicyArgs{
 * 			Constraint: pulumi.String("serviceuser.services"),
 * 			OrgId:      pulumi.String("123456789"),
 * 			RestorePolicy: &organizations.PolicyRestorePolicyArgs{
 * 				Default: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Organization Policies can be imported using the `org_id` and the `constraint`, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:organizations/policy:Policy services_policy 123456789/constraints/serviceuser.services
 * ```
 * 
 *  It is all right if the constraint contains a slash, as in the example above. 
 */
@ResourceType(type="gcp:organizations/policy:Policy")
public class Policy extends io.pulumi.resources.CustomResource {
    /**
     * A boolean policy is a constraint that is either enforced or not. Structure is documented
     * below.
     * 
     */
    @Export(name="booleanPolicy", type=PolicyBooleanPolicy.class, parameters={})
    private Output</* @Nullable */ PolicyBooleanPolicy> booleanPolicy;

    /**
     * @return A boolean policy is a constraint that is either enforced or not. Structure is documented
     * below.
     * 
     */
    public Output</* @Nullable */ PolicyBooleanPolicy> getBooleanPolicy() {
        return this.booleanPolicy;
    }
    /**
     * The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     * 
     */
    @Export(name="constraint", type=String.class, parameters={})
    private Output<String> constraint;

    /**
     * @return The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     * 
     */
    public Output<String> getConstraint() {
        return this.constraint;
    }
    /**
     * (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return (Computed) The etag of the organization policy. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     * 
     */
    @Export(name="listPolicy", type=PolicyListPolicy.class, parameters={})
    private Output</* @Nullable */ PolicyListPolicy> listPolicy;

    /**
     * @return A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     * 
     */
    public Output</* @Nullable */ PolicyListPolicy> getListPolicy() {
        return this.listPolicy;
    }
    /**
     * The numeric ID of the organization to set the policy for.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output<String> orgId;

    /**
     * @return The numeric ID of the organization to set the policy for.
     * 
     */
    public Output<String> getOrgId() {
        return this.orgId;
    }
    /**
     * A restore policy is a constraint to restore the default policy. Structure is documented below.
     * 
     */
    @Export(name="restorePolicy", type=PolicyRestorePolicy.class, parameters={})
    private Output</* @Nullable */ PolicyRestorePolicy> restorePolicy;

    /**
     * @return A restore policy is a constraint to restore the default policy. Structure is documented below.
     * 
     */
    public Output</* @Nullable */ PolicyRestorePolicy> getRestorePolicy() {
        return this.restorePolicy;
    }
    /**
     * (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return (Computed) The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated. Example: "2016-10-09T12:33:37.578138407Z".
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }
    /**
     * Version of the Policy. Default version is 0.
     * 
     */
    @Export(name="version", type=Integer.class, parameters={})
    private Output<Integer> version;

    /**
     * @return Version of the Policy. Default version is 0.
     * 
     */
    public Output<Integer> getVersion() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Policy(String name) {
        this(name, PolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Policy(String name, PolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Policy(String name, PolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:organizations/policy:Policy", name, args == null ? PolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Policy(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:organizations/policy:Policy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Policy get(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Policy(name, id, state, options);
    }
}
