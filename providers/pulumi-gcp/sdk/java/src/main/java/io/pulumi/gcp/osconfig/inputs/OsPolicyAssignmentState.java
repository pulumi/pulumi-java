// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.osconfig.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentInstanceFilterGetArgs;
import io.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentOsPolicyGetArgs;
import io.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentRolloutGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OsPolicyAssignmentState extends io.pulumi.resources.ResourceArgs {

    public static final OsPolicyAssignmentState Empty = new OsPolicyAssignmentState();

    /**
     * Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
     * policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
     * this field.
     * 
     */
    @Import(name="baseline")
      private final @Nullable Output<Boolean> baseline;

    public Output<Boolean> baseline() {
        return this.baseline == null ? Codegen.empty() : this.baseline;
    }

    /**
     * Output only. Indicates that this revision deletes the OS policy assignment.
     * 
     */
    @Import(name="deleted")
      private final @Nullable Output<Boolean> deleted;

    public Output<Boolean> deleted() {
        return this.deleted == null ? Codegen.empty() : this.deleted;
    }

    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> etag() {
        return this.etag == null ? Codegen.empty() : this.etag;
    }

    /**
     * Required. Filter to select VMs.
     * 
     */
    @Import(name="instanceFilter")
      private final @Nullable Output<OsPolicyAssignmentInstanceFilterGetArgs> instanceFilter;

    public Output<OsPolicyAssignmentInstanceFilterGetArgs> instanceFilter() {
        return this.instanceFilter == null ? Codegen.empty() : this.instanceFilter;
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Required. The name of the repository.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Required. List of OS policies to be applied to the VMs.
     * 
     */
    @Import(name="osPolicies")
      private final @Nullable Output<List<OsPolicyAssignmentOsPolicyGetArgs>> osPolicies;

    public Output<List<OsPolicyAssignmentOsPolicyGetArgs>> osPolicies() {
        return this.osPolicies == null ? Codegen.empty() : this.osPolicies;
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
     * `rollout_state` is one of: * IN_PROGRESS * CANCELLING
     * 
     */
    @Import(name="reconciling")
      private final @Nullable Output<Boolean> reconciling;

    public Output<Boolean> reconciling() {
        return this.reconciling == null ? Codegen.empty() : this.reconciling;
    }

    /**
     * Output only. The timestamp that the revision was created.
     * 
     */
    @Import(name="revisionCreateTime")
      private final @Nullable Output<String> revisionCreateTime;

    public Output<String> revisionCreateTime() {
        return this.revisionCreateTime == null ? Codegen.empty() : this.revisionCreateTime;
    }

    /**
     * Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    @Import(name="revisionId")
      private final @Nullable Output<String> revisionId;

    public Output<String> revisionId() {
        return this.revisionId == null ? Codegen.empty() : this.revisionId;
    }

    /**
     * Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     * 
     */
    @Import(name="rollout")
      private final @Nullable Output<OsPolicyAssignmentRolloutGetArgs> rollout;

    public Output<OsPolicyAssignmentRolloutGetArgs> rollout() {
        return this.rollout == null ? Codegen.empty() : this.rollout;
    }

    /**
     * Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
     * CANCELLED, SUCCEEDED
     * 
     */
    @Import(name="rolloutState")
      private final @Nullable Output<String> rolloutState;

    public Output<String> rolloutState() {
        return this.rolloutState == null ? Codegen.empty() : this.rolloutState;
    }

    /**
     * Output only. Server generated unique id for the OS policy assignment resource.
     * 
     */
    @Import(name="uid")
      private final @Nullable Output<String> uid;

    public Output<String> uid() {
        return this.uid == null ? Codegen.empty() : this.uid;
    }

    public OsPolicyAssignmentState(
        @Nullable Output<Boolean> baseline,
        @Nullable Output<Boolean> deleted,
        @Nullable Output<String> description,
        @Nullable Output<String> etag,
        @Nullable Output<OsPolicyAssignmentInstanceFilterGetArgs> instanceFilter,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<List<OsPolicyAssignmentOsPolicyGetArgs>> osPolicies,
        @Nullable Output<String> project,
        @Nullable Output<Boolean> reconciling,
        @Nullable Output<String> revisionCreateTime,
        @Nullable Output<String> revisionId,
        @Nullable Output<OsPolicyAssignmentRolloutGetArgs> rollout,
        @Nullable Output<String> rolloutState,
        @Nullable Output<String> uid) {
        this.baseline = baseline;
        this.deleted = deleted;
        this.description = description;
        this.etag = etag;
        this.instanceFilter = instanceFilter;
        this.location = location;
        this.name = name;
        this.osPolicies = osPolicies;
        this.project = project;
        this.reconciling = reconciling;
        this.revisionCreateTime = revisionCreateTime;
        this.revisionId = revisionId;
        this.rollout = rollout;
        this.rolloutState = rolloutState;
        this.uid = uid;
    }

    private OsPolicyAssignmentState() {
        this.baseline = Codegen.empty();
        this.deleted = Codegen.empty();
        this.description = Codegen.empty();
        this.etag = Codegen.empty();
        this.instanceFilter = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.osPolicies = Codegen.empty();
        this.project = Codegen.empty();
        this.reconciling = Codegen.empty();
        this.revisionCreateTime = Codegen.empty();
        this.revisionId = Codegen.empty();
        this.rollout = Codegen.empty();
        this.rolloutState = Codegen.empty();
        this.uid = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OsPolicyAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> baseline;
        private @Nullable Output<Boolean> deleted;
        private @Nullable Output<String> description;
        private @Nullable Output<String> etag;
        private @Nullable Output<OsPolicyAssignmentInstanceFilterGetArgs> instanceFilter;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<List<OsPolicyAssignmentOsPolicyGetArgs>> osPolicies;
        private @Nullable Output<String> project;
        private @Nullable Output<Boolean> reconciling;
        private @Nullable Output<String> revisionCreateTime;
        private @Nullable Output<String> revisionId;
        private @Nullable Output<OsPolicyAssignmentRolloutGetArgs> rollout;
        private @Nullable Output<String> rolloutState;
        private @Nullable Output<String> uid;

        public Builder() {
    	      // Empty
        }

        public Builder(OsPolicyAssignmentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseline = defaults.baseline;
    	      this.deleted = defaults.deleted;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.instanceFilter = defaults.instanceFilter;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.osPolicies = defaults.osPolicies;
    	      this.project = defaults.project;
    	      this.reconciling = defaults.reconciling;
    	      this.revisionCreateTime = defaults.revisionCreateTime;
    	      this.revisionId = defaults.revisionId;
    	      this.rollout = defaults.rollout;
    	      this.rolloutState = defaults.rolloutState;
    	      this.uid = defaults.uid;
        }

        public Builder baseline(@Nullable Output<Boolean> baseline) {
            this.baseline = baseline;
            return this;
        }
        public Builder baseline(@Nullable Boolean baseline) {
            this.baseline = Codegen.ofNullable(baseline);
            return this;
        }
        public Builder deleted(@Nullable Output<Boolean> deleted) {
            this.deleted = deleted;
            return this;
        }
        public Builder deleted(@Nullable Boolean deleted) {
            this.deleted = Codegen.ofNullable(deleted);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Codegen.ofNullable(etag);
            return this;
        }
        public Builder instanceFilter(@Nullable Output<OsPolicyAssignmentInstanceFilterGetArgs> instanceFilter) {
            this.instanceFilter = instanceFilter;
            return this;
        }
        public Builder instanceFilter(@Nullable OsPolicyAssignmentInstanceFilterGetArgs instanceFilter) {
            this.instanceFilter = Codegen.ofNullable(instanceFilter);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder osPolicies(@Nullable Output<List<OsPolicyAssignmentOsPolicyGetArgs>> osPolicies) {
            this.osPolicies = osPolicies;
            return this;
        }
        public Builder osPolicies(@Nullable List<OsPolicyAssignmentOsPolicyGetArgs> osPolicies) {
            this.osPolicies = Codegen.ofNullable(osPolicies);
            return this;
        }
        public Builder osPolicies(OsPolicyAssignmentOsPolicyGetArgs... osPolicies) {
            return osPolicies(List.of(osPolicies));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            this.reconciling = reconciling;
            return this;
        }
        public Builder reconciling(@Nullable Boolean reconciling) {
            this.reconciling = Codegen.ofNullable(reconciling);
            return this;
        }
        public Builder revisionCreateTime(@Nullable Output<String> revisionCreateTime) {
            this.revisionCreateTime = revisionCreateTime;
            return this;
        }
        public Builder revisionCreateTime(@Nullable String revisionCreateTime) {
            this.revisionCreateTime = Codegen.ofNullable(revisionCreateTime);
            return this;
        }
        public Builder revisionId(@Nullable Output<String> revisionId) {
            this.revisionId = revisionId;
            return this;
        }
        public Builder revisionId(@Nullable String revisionId) {
            this.revisionId = Codegen.ofNullable(revisionId);
            return this;
        }
        public Builder rollout(@Nullable Output<OsPolicyAssignmentRolloutGetArgs> rollout) {
            this.rollout = rollout;
            return this;
        }
        public Builder rollout(@Nullable OsPolicyAssignmentRolloutGetArgs rollout) {
            this.rollout = Codegen.ofNullable(rollout);
            return this;
        }
        public Builder rolloutState(@Nullable Output<String> rolloutState) {
            this.rolloutState = rolloutState;
            return this;
        }
        public Builder rolloutState(@Nullable String rolloutState) {
            this.rolloutState = Codegen.ofNullable(rolloutState);
            return this;
        }
        public Builder uid(@Nullable Output<String> uid) {
            this.uid = uid;
            return this;
        }
        public Builder uid(@Nullable String uid) {
            this.uid = Codegen.ofNullable(uid);
            return this;
        }        public OsPolicyAssignmentState build() {
            return new OsPolicyAssignmentState(baseline, deleted, description, etag, instanceFilter, location, name, osPolicies, project, reconciling, revisionCreateTime, revisionId, rollout, rolloutState, uid);
        }
    }
}
