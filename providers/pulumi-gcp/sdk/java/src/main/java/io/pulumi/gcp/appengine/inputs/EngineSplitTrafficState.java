// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.appengine.inputs.EngineSplitTrafficSplitGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EngineSplitTrafficState extends io.pulumi.resources.ResourceArgs {

    public static final EngineSplitTrafficState Empty = new EngineSplitTrafficState();

    /**
     * If set to true traffic will be migrated to this version.
     * 
     */
    @InputImport(name="migrateTraffic")
      private final @Nullable Input<Boolean> migrateTraffic;

    public Input<Boolean> getMigrateTraffic() {
        return this.migrateTraffic == null ? Input.empty() : this.migrateTraffic;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The name of the service these settings apply to.
     * 
     */
    @InputImport(name="service")
      private final @Nullable Input<String> service;

    public Input<String> getService() {
        return this.service == null ? Input.empty() : this.service;
    }

    /**
     * Mapping that defines fractional HTTP traffic diversion to different versions within the service.
     * Structure is documented below.
     * 
     */
    @InputImport(name="split")
      private final @Nullable Input<EngineSplitTrafficSplitGetArgs> split;

    public Input<EngineSplitTrafficSplitGetArgs> getSplit() {
        return this.split == null ? Input.empty() : this.split;
    }

    public EngineSplitTrafficState(
        @Nullable Input<Boolean> migrateTraffic,
        @Nullable Input<String> project,
        @Nullable Input<String> service,
        @Nullable Input<EngineSplitTrafficSplitGetArgs> split) {
        this.migrateTraffic = migrateTraffic;
        this.project = project;
        this.service = service;
        this.split = split;
    }

    private EngineSplitTrafficState() {
        this.migrateTraffic = Input.empty();
        this.project = Input.empty();
        this.service = Input.empty();
        this.split = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EngineSplitTrafficState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> migrateTraffic;
        private @Nullable Input<String> project;
        private @Nullable Input<String> service;
        private @Nullable Input<EngineSplitTrafficSplitGetArgs> split;

        public Builder() {
    	      // Empty
        }

        public Builder(EngineSplitTrafficState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.migrateTraffic = defaults.migrateTraffic;
    	      this.project = defaults.project;
    	      this.service = defaults.service;
    	      this.split = defaults.split;
        }

        public Builder migrateTraffic(@Nullable Input<Boolean> migrateTraffic) {
            this.migrateTraffic = migrateTraffic;
            return this;
        }

        public Builder migrateTraffic(@Nullable Boolean migrateTraffic) {
            this.migrateTraffic = Input.ofNullable(migrateTraffic);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder service(@Nullable Input<String> service) {
            this.service = service;
            return this;
        }

        public Builder service(@Nullable String service) {
            this.service = Input.ofNullable(service);
            return this;
        }

        public Builder split(@Nullable Input<EngineSplitTrafficSplitGetArgs> split) {
            this.split = split;
            return this;
        }

        public Builder split(@Nullable EngineSplitTrafficSplitGetArgs split) {
            this.split = Input.ofNullable(split);
            return this;
        }
        public EngineSplitTrafficState build() {
            return new EngineSplitTrafficState(migrateTraffic, project, service, split);
        }
    }
}
