// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.tpu.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.tpu.inputs.NodeNetworkEndpointGetArgs;
import io.pulumi.gcp.tpu.inputs.NodeSchedulingConfigGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NodeState extends io.pulumi.resources.ResourceArgs {

    public static final NodeState Empty = new NodeState();

    /**
     * The type of hardware accelerators associated with this node.
     * 
     */
    @InputImport(name="acceleratorType")
      private final @Nullable Input<String> acceleratorType;

    public Input<String> getAcceleratorType() {
        return this.acceleratorType == null ? Input.empty() : this.acceleratorType;
    }

    /**
     * The CIDR block that the TPU node will use when selecting an IP
     * address. This CIDR block must be a /29 block; the Compute Engine
     * networks API forbids a smaller block, and using a larger block would
     * be wasteful (a node can only consume one IP address).
     * Errors will occur if the CIDR block has already been used for a
     * currently existing TPU node, the CIDR block conflicts with any
     * subnetworks in the user's provided network, or the provided network
     * is peered with another network that is using that CIDR block.
     * 
     */
    @InputImport(name="cidrBlock")
      private final @Nullable Input<String> cidrBlock;

    public Input<String> getCidrBlock() {
        return this.cidrBlock == null ? Input.empty() : this.cidrBlock;
    }

    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The immutable name of the TPU.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The name of a network to peer the TPU node to. It must be a
     * preexisting Compute Engine network inside of the project on which
     * this API has been activated. If none is provided, "default" will be
     * used.
     * 
     */
    @InputImport(name="network")
      private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the
     * node first reach out to the first (index 0) entry.
     * 
     */
    @InputImport(name="networkEndpoints")
      private final @Nullable Input<List<NodeNetworkEndpointGetArgs>> networkEndpoints;

    public Input<List<NodeNetworkEndpointGetArgs>> getNetworkEndpoints() {
        return this.networkEndpoints == null ? Input.empty() : this.networkEndpoints;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Sets the scheduling options for this TPU instance.
     * Structure is documented below.
     * 
     */
    @InputImport(name="schedulingConfig")
      private final @Nullable Input<NodeSchedulingConfigGetArgs> schedulingConfig;

    public Input<NodeSchedulingConfigGetArgs> getSchedulingConfig() {
        return this.schedulingConfig == null ? Input.empty() : this.schedulingConfig;
    }

    /**
     * The service account used to run the tensor flow services within the node. To share resources, including Google Cloud
     * Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
     * 
     */
    @InputImport(name="serviceAccount")
      private final @Nullable Input<String> serviceAccount;

    public Input<String> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    /**
     * The version of Tensorflow running in the Node.
     * 
     */
    @InputImport(name="tensorflowVersion")
      private final @Nullable Input<String> tensorflowVersion;

    public Input<String> getTensorflowVersion() {
        return this.tensorflowVersion == null ? Input.empty() : this.tensorflowVersion;
    }

    /**
     * Whether the VPC peering for the node is set up through Service Networking API.
     * The VPC Peering should be set up before provisioning the node. If this field is set,
     * cidr_block field should not be specified. If the network that you want to peer the
     * TPU Node to is a Shared VPC network, the node must be created with this this field enabled.
     * 
     */
    @InputImport(name="useServiceNetworking")
      private final @Nullable Input<Boolean> useServiceNetworking;

    public Input<Boolean> getUseServiceNetworking() {
        return this.useServiceNetworking == null ? Input.empty() : this.useServiceNetworking;
    }

    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    @InputImport(name="zone")
      private final @Nullable Input<String> zone;

    public Input<String> getZone() {
        return this.zone == null ? Input.empty() : this.zone;
    }

    public NodeState(
        @Nullable Input<String> acceleratorType,
        @Nullable Input<String> cidrBlock,
        @Nullable Input<String> description,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> name,
        @Nullable Input<String> network,
        @Nullable Input<List<NodeNetworkEndpointGetArgs>> networkEndpoints,
        @Nullable Input<String> project,
        @Nullable Input<NodeSchedulingConfigGetArgs> schedulingConfig,
        @Nullable Input<String> serviceAccount,
        @Nullable Input<String> tensorflowVersion,
        @Nullable Input<Boolean> useServiceNetworking,
        @Nullable Input<String> zone) {
        this.acceleratorType = acceleratorType;
        this.cidrBlock = cidrBlock;
        this.description = description;
        this.labels = labels;
        this.name = name;
        this.network = network;
        this.networkEndpoints = networkEndpoints;
        this.project = project;
        this.schedulingConfig = schedulingConfig;
        this.serviceAccount = serviceAccount;
        this.tensorflowVersion = tensorflowVersion;
        this.useServiceNetworking = useServiceNetworking;
        this.zone = zone;
    }

    private NodeState() {
        this.acceleratorType = Input.empty();
        this.cidrBlock = Input.empty();
        this.description = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.network = Input.empty();
        this.networkEndpoints = Input.empty();
        this.project = Input.empty();
        this.schedulingConfig = Input.empty();
        this.serviceAccount = Input.empty();
        this.tensorflowVersion = Input.empty();
        this.useServiceNetworking = Input.empty();
        this.zone = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> acceleratorType;
        private @Nullable Input<String> cidrBlock;
        private @Nullable Input<String> description;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> name;
        private @Nullable Input<String> network;
        private @Nullable Input<List<NodeNetworkEndpointGetArgs>> networkEndpoints;
        private @Nullable Input<String> project;
        private @Nullable Input<NodeSchedulingConfigGetArgs> schedulingConfig;
        private @Nullable Input<String> serviceAccount;
        private @Nullable Input<String> tensorflowVersion;
        private @Nullable Input<Boolean> useServiceNetworking;
        private @Nullable Input<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.description = defaults.description;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkEndpoints = defaults.networkEndpoints;
    	      this.project = defaults.project;
    	      this.schedulingConfig = defaults.schedulingConfig;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.tensorflowVersion = defaults.tensorflowVersion;
    	      this.useServiceNetworking = defaults.useServiceNetworking;
    	      this.zone = defaults.zone;
        }

        public Builder acceleratorType(@Nullable Input<String> acceleratorType) {
            this.acceleratorType = acceleratorType;
            return this;
        }

        public Builder acceleratorType(@Nullable String acceleratorType) {
            this.acceleratorType = Input.ofNullable(acceleratorType);
            return this;
        }

        public Builder cidrBlock(@Nullable Input<String> cidrBlock) {
            this.cidrBlock = cidrBlock;
            return this;
        }

        public Builder cidrBlock(@Nullable String cidrBlock) {
            this.cidrBlock = Input.ofNullable(cidrBlock);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder network(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder network(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder networkEndpoints(@Nullable Input<List<NodeNetworkEndpointGetArgs>> networkEndpoints) {
            this.networkEndpoints = networkEndpoints;
            return this;
        }

        public Builder networkEndpoints(@Nullable List<NodeNetworkEndpointGetArgs> networkEndpoints) {
            this.networkEndpoints = Input.ofNullable(networkEndpoints);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder schedulingConfig(@Nullable Input<NodeSchedulingConfigGetArgs> schedulingConfig) {
            this.schedulingConfig = schedulingConfig;
            return this;
        }

        public Builder schedulingConfig(@Nullable NodeSchedulingConfigGetArgs schedulingConfig) {
            this.schedulingConfig = Input.ofNullable(schedulingConfig);
            return this;
        }

        public Builder serviceAccount(@Nullable Input<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder tensorflowVersion(@Nullable Input<String> tensorflowVersion) {
            this.tensorflowVersion = tensorflowVersion;
            return this;
        }

        public Builder tensorflowVersion(@Nullable String tensorflowVersion) {
            this.tensorflowVersion = Input.ofNullable(tensorflowVersion);
            return this;
        }

        public Builder useServiceNetworking(@Nullable Input<Boolean> useServiceNetworking) {
            this.useServiceNetworking = useServiceNetworking;
            return this;
        }

        public Builder useServiceNetworking(@Nullable Boolean useServiceNetworking) {
            this.useServiceNetworking = Input.ofNullable(useServiceNetworking);
            return this;
        }

        public Builder zone(@Nullable Input<String> zone) {
            this.zone = zone;
            return this;
        }

        public Builder zone(@Nullable String zone) {
            this.zone = Input.ofNullable(zone);
            return this;
        }
        public NodeState build() {
            return new NodeState(acceleratorType, cidrBlock, description, labels, name, network, networkEndpoints, project, schedulingConfig, serviceAccount, tensorflowVersion, useServiceNetworking, zone);
        }
    }
}
