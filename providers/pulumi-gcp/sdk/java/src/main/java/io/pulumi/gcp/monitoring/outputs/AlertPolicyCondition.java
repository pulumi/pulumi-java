// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionAbsent;
import io.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionMatchedLog;
import io.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionMonitoringQueryLanguage;
import io.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionThreshold;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class AlertPolicyCondition {
    /**
     * A condition that checks that a time series
     * continues to receive new data points.
     * Structure is documented below.
     * 
     */
    private final @Nullable AlertPolicyConditionConditionAbsent conditionAbsent;
    /**
     * A condition that checks for log messages matching given constraints.
     * If set, no other conditions can be present.
     * Structure is documented below.
     * 
     */
    private final @Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog;
    /**
     * A Monitoring Query Language query that outputs a boolean stream
     * Structure is documented below.
     * 
     */
    private final @Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage;
    /**
     * A condition that compares a time series against a
     * threshold.
     * Structure is documented below.
     * 
     */
    private final @Nullable AlertPolicyConditionConditionThreshold conditionThreshold;
    /**
     * A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don't use the same
     * display name for multiple conditions in the same
     * policy.
     * 
     */
    private final String displayName;
    /**
     * - 
     * The unique resource name for this condition.
     * Its syntax is:
     * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
     * [CONDITION_ID] is assigned by Stackdriver Monitoring when
     * the condition is created as part of a new or updated alerting
     * policy.
     * 
     */
    private final @Nullable String name;

    @OutputCustomType.Constructor({"conditionAbsent","conditionMatchedLog","conditionMonitoringQueryLanguage","conditionThreshold","displayName","name"})
    private AlertPolicyCondition(
        @Nullable AlertPolicyConditionConditionAbsent conditionAbsent,
        @Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog,
        @Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage,
        @Nullable AlertPolicyConditionConditionThreshold conditionThreshold,
        String displayName,
        @Nullable String name) {
        this.conditionAbsent = conditionAbsent;
        this.conditionMatchedLog = conditionMatchedLog;
        this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
        this.conditionThreshold = conditionThreshold;
        this.displayName = displayName;
        this.name = name;
    }

    /**
     * A condition that checks that a time series
     * continues to receive new data points.
     * Structure is documented below.
     * 
    */
    public Optional<AlertPolicyConditionConditionAbsent> getConditionAbsent() {
        return Optional.ofNullable(this.conditionAbsent);
    }
    /**
     * A condition that checks for log messages matching given constraints.
     * If set, no other conditions can be present.
     * Structure is documented below.
     * 
    */
    public Optional<AlertPolicyConditionConditionMatchedLog> getConditionMatchedLog() {
        return Optional.ofNullable(this.conditionMatchedLog);
    }
    /**
     * A Monitoring Query Language query that outputs a boolean stream
     * Structure is documented below.
     * 
    */
    public Optional<AlertPolicyConditionConditionMonitoringQueryLanguage> getConditionMonitoringQueryLanguage() {
        return Optional.ofNullable(this.conditionMonitoringQueryLanguage);
    }
    /**
     * A condition that compares a time series against a
     * threshold.
     * Structure is documented below.
     * 
    */
    public Optional<AlertPolicyConditionConditionThreshold> getConditionThreshold() {
        return Optional.ofNullable(this.conditionThreshold);
    }
    /**
     * A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don't use the same
     * display name for multiple conditions in the same
     * policy.
     * 
    */
    public String getDisplayName() {
        return this.displayName;
    }
    /**
     * - 
     * The unique resource name for this condition.
     * Its syntax is:
     * projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
     * [CONDITION_ID] is assigned by Stackdriver Monitoring when
     * the condition is created as part of a new or updated alerting
     * policy.
     * 
    */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyCondition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AlertPolicyConditionConditionAbsent conditionAbsent;
        private @Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog;
        private @Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage;
        private @Nullable AlertPolicyConditionConditionThreshold conditionThreshold;
        private String displayName;
        private @Nullable String name;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertPolicyCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionAbsent = defaults.conditionAbsent;
    	      this.conditionMatchedLog = defaults.conditionMatchedLog;
    	      this.conditionMonitoringQueryLanguage = defaults.conditionMonitoringQueryLanguage;
    	      this.conditionThreshold = defaults.conditionThreshold;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
        }

        public Builder setConditionAbsent(@Nullable AlertPolicyConditionConditionAbsent conditionAbsent) {
            this.conditionAbsent = conditionAbsent;
            return this;
        }

        public Builder setConditionMatchedLog(@Nullable AlertPolicyConditionConditionMatchedLog conditionMatchedLog) {
            this.conditionMatchedLog = conditionMatchedLog;
            return this;
        }

        public Builder setConditionMonitoringQueryLanguage(@Nullable AlertPolicyConditionConditionMonitoringQueryLanguage conditionMonitoringQueryLanguage) {
            this.conditionMonitoringQueryLanguage = conditionMonitoringQueryLanguage;
            return this;
        }

        public Builder setConditionThreshold(@Nullable AlertPolicyConditionConditionThreshold conditionThreshold) {
            this.conditionThreshold = conditionThreshold;
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }
        public AlertPolicyCondition build() {
            return new AlertPolicyCondition(conditionAbsent, conditionMatchedLog, conditionMonitoringQueryLanguage, conditionThreshold, displayName, name);
        }
    }
}
