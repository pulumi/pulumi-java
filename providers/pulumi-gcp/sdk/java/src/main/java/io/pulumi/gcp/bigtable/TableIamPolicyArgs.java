// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigtable;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableIamPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableIamPolicyArgs Empty = new TableIamPolicyArgs();

    /**
     * The name or relative resource id of the instance that owns the table.
     * 
     */
    @InputImport(name="instance", required=true)
      private final Output<String> instance;

    public Output<String> getInstance() {
        return this.instance;
    }

    /**
     * The policy data generated by a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @InputImport(name="policyData", required=true)
      private final Output<String> policyData;

    public Output<String> getPolicyData() {
        return this.policyData;
    }

    /**
     * The project in which the table belongs. If it
     * is not provided, this provider will use the provider default.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The name or relative resource id of the table to manage IAM policies for.
     * 
     */
    @InputImport(name="table", required=true)
      private final Output<String> table;

    public Output<String> getTable() {
        return this.table;
    }

    public TableIamPolicyArgs(
        Output<String> instance,
        Output<String> policyData,
        @Nullable Output<String> project,
        Output<String> table) {
        this.instance = Objects.requireNonNull(instance, "expected parameter 'instance' to be non-null");
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
        this.project = project;
        this.table = Objects.requireNonNull(table, "expected parameter 'table' to be non-null");
    }

    private TableIamPolicyArgs() {
        this.instance = Output.empty();
        this.policyData = Output.empty();
        this.project = Output.empty();
        this.table = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> instance;
        private Output<String> policyData;
        private @Nullable Output<String> project;
        private Output<String> table;

        public Builder() {
    	      // Empty
        }

        public Builder(TableIamPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instance = defaults.instance;
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
    	      this.table = defaults.table;
        }

        public Builder instance(Output<String> instance) {
            this.instance = Objects.requireNonNull(instance);
            return this;
        }

        public Builder instance(String instance) {
            this.instance = Output.of(Objects.requireNonNull(instance));
            return this;
        }

        public Builder policyData(Output<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }

        public Builder policyData(String policyData) {
            this.policyData = Output.of(Objects.requireNonNull(policyData));
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder table(Output<String> table) {
            this.table = Objects.requireNonNull(table);
            return this;
        }

        public Builder table(String table) {
            this.table = Output.of(Objects.requireNonNull(table));
            return this;
        }
        public TableIamPolicyArgs build() {
            return new TableIamPolicyArgs(instance, policyData, project, table);
        }
    }
}
