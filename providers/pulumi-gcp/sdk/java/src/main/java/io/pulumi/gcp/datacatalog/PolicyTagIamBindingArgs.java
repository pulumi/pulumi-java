// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.datacatalog.inputs.PolicyTagIamBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyTagIamBindingArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyTagIamBindingArgs Empty = new PolicyTagIamBindingArgs();

    @InputImport(name="condition")
        private final @Nullable Input<PolicyTagIamBindingConditionArgs> condition;

    public Input<PolicyTagIamBindingConditionArgs> getCondition() {
        return this.condition == null ? Input.empty() : this.condition;
    }

    @InputImport(name="members", required=true)
        private final Input<List<String>> members;

    public Input<List<String>> getMembers() {
        return this.members;
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @InputImport(name="policyTag", required=true)
        private final Input<String> policyTag;

    public Input<String> getPolicyTag() {
        return this.policyTag;
    }

    /**
     * The role that should be applied. Only one
     * `gcp.datacatalog.PolicyTagIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @InputImport(name="role", required=true)
        private final Input<String> role;

    public Input<String> getRole() {
        return this.role;
    }

    public PolicyTagIamBindingArgs(
        @Nullable Input<PolicyTagIamBindingConditionArgs> condition,
        Input<List<String>> members,
        Input<String> policyTag,
        Input<String> role) {
        this.condition = condition;
        this.members = Objects.requireNonNull(members, "expected parameter 'members' to be non-null");
        this.policyTag = Objects.requireNonNull(policyTag, "expected parameter 'policyTag' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
    }

    private PolicyTagIamBindingArgs() {
        this.condition = Input.empty();
        this.members = Input.empty();
        this.policyTag = Input.empty();
        this.role = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyTagIamBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<PolicyTagIamBindingConditionArgs> condition;
        private Input<List<String>> members;
        private Input<String> policyTag;
        private Input<String> role;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyTagIamBindingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.members = defaults.members;
    	      this.policyTag = defaults.policyTag;
    	      this.role = defaults.role;
        }

        public Builder setCondition(@Nullable Input<PolicyTagIamBindingConditionArgs> condition) {
            this.condition = condition;
            return this;
        }

        public Builder setCondition(@Nullable PolicyTagIamBindingConditionArgs condition) {
            this.condition = Input.ofNullable(condition);
            return this;
        }

        public Builder setMembers(Input<List<String>> members) {
            this.members = Objects.requireNonNull(members);
            return this;
        }

        public Builder setMembers(List<String> members) {
            this.members = Input.of(Objects.requireNonNull(members));
            return this;
        }

        public Builder setPolicyTag(Input<String> policyTag) {
            this.policyTag = Objects.requireNonNull(policyTag);
            return this;
        }

        public Builder setPolicyTag(String policyTag) {
            this.policyTag = Input.of(Objects.requireNonNull(policyTag));
            return this;
        }

        public Builder setRole(Input<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }

        public Builder setRole(String role) {
            this.role = Input.of(Objects.requireNonNull(role));
            return this;
        }
        public PolicyTagIamBindingArgs build() {
            return new PolicyTagIamBindingArgs(condition, members, policyTag, role);
        }
    }
}
