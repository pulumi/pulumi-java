// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DatabaseInstanceSettingsIpConfiguration {
    private final @Nullable String allocatedIpRange;
    private final @Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks;
    private final @Nullable Boolean ipv4Enabled;
    private final @Nullable String privateNetwork;
    private final @Nullable Boolean requireSsl;

    @OutputCustomType.Constructor({"allocatedIpRange","authorizedNetworks","ipv4Enabled","privateNetwork","requireSsl"})
    private DatabaseInstanceSettingsIpConfiguration(
        @Nullable String allocatedIpRange,
        @Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks,
        @Nullable Boolean ipv4Enabled,
        @Nullable String privateNetwork,
        @Nullable Boolean requireSsl) {
        this.allocatedIpRange = allocatedIpRange;
        this.authorizedNetworks = authorizedNetworks;
        this.ipv4Enabled = ipv4Enabled;
        this.privateNetwork = privateNetwork;
        this.requireSsl = requireSsl;
    }

    public Optional<String> getAllocatedIpRange() {
        return Optional.ofNullable(this.allocatedIpRange);
    }
    public List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> getAuthorizedNetworks() {
        return this.authorizedNetworks == null ? List.of() : this.authorizedNetworks;
    }
    public Optional<Boolean> getIpv4Enabled() {
        return Optional.ofNullable(this.ipv4Enabled);
    }
    public Optional<String> getPrivateNetwork() {
        return Optional.ofNullable(this.privateNetwork);
    }
    public Optional<Boolean> getRequireSsl() {
        return Optional.ofNullable(this.requireSsl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceSettingsIpConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String allocatedIpRange;
        private @Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks;
        private @Nullable Boolean ipv4Enabled;
        private @Nullable String privateNetwork;
        private @Nullable Boolean requireSsl;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceSettingsIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpRange = defaults.allocatedIpRange;
    	      this.authorizedNetworks = defaults.authorizedNetworks;
    	      this.ipv4Enabled = defaults.ipv4Enabled;
    	      this.privateNetwork = defaults.privateNetwork;
    	      this.requireSsl = defaults.requireSsl;
        }

        public Builder setAllocatedIpRange(@Nullable String allocatedIpRange) {
            this.allocatedIpRange = allocatedIpRange;
            return this;
        }

        public Builder setAuthorizedNetworks(@Nullable List<DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork> authorizedNetworks) {
            this.authorizedNetworks = authorizedNetworks;
            return this;
        }

        public Builder setIpv4Enabled(@Nullable Boolean ipv4Enabled) {
            this.ipv4Enabled = ipv4Enabled;
            return this;
        }

        public Builder setPrivateNetwork(@Nullable String privateNetwork) {
            this.privateNetwork = privateNetwork;
            return this;
        }

        public Builder setRequireSsl(@Nullable Boolean requireSsl) {
            this.requireSsl = requireSsl;
            return this;
        }

        public DatabaseInstanceSettingsIpConfiguration build() {
            return new DatabaseInstanceSettingsIpConfiguration(allocatedIpRange, authorizedNetworks, ipv4Enabled, privateNetwork, requireSsl);
        }
    }
}
