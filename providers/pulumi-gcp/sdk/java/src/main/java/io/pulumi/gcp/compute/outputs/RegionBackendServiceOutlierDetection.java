// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.compute.outputs.RegionBackendServiceOutlierDetectionBaseEjectionTime;
import io.pulumi.gcp.compute.outputs.RegionBackendServiceOutlierDetectionInterval;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class RegionBackendServiceOutlierDetection {
    private final @Nullable RegionBackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime;
    private final @Nullable Integer consecutiveErrors;
    private final @Nullable Integer consecutiveGatewayFailure;
    private final @Nullable Integer enforcingConsecutiveErrors;
    private final @Nullable Integer enforcingConsecutiveGatewayFailure;
    private final @Nullable Integer enforcingSuccessRate;
    private final @Nullable RegionBackendServiceOutlierDetectionInterval interval;
    private final @Nullable Integer maxEjectionPercent;
    private final @Nullable Integer successRateMinimumHosts;
    private final @Nullable Integer successRateRequestVolume;
    private final @Nullable Integer successRateStdevFactor;

    @OutputCustomType.Constructor({"baseEjectionTime","consecutiveErrors","consecutiveGatewayFailure","enforcingConsecutiveErrors","enforcingConsecutiveGatewayFailure","enforcingSuccessRate","interval","maxEjectionPercent","successRateMinimumHosts","successRateRequestVolume","successRateStdevFactor"})
    private RegionBackendServiceOutlierDetection(
        @Nullable RegionBackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime,
        @Nullable Integer consecutiveErrors,
        @Nullable Integer consecutiveGatewayFailure,
        @Nullable Integer enforcingConsecutiveErrors,
        @Nullable Integer enforcingConsecutiveGatewayFailure,
        @Nullable Integer enforcingSuccessRate,
        @Nullable RegionBackendServiceOutlierDetectionInterval interval,
        @Nullable Integer maxEjectionPercent,
        @Nullable Integer successRateMinimumHosts,
        @Nullable Integer successRateRequestVolume,
        @Nullable Integer successRateStdevFactor) {
        this.baseEjectionTime = baseEjectionTime;
        this.consecutiveErrors = consecutiveErrors;
        this.consecutiveGatewayFailure = consecutiveGatewayFailure;
        this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
        this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
        this.enforcingSuccessRate = enforcingSuccessRate;
        this.interval = interval;
        this.maxEjectionPercent = maxEjectionPercent;
        this.successRateMinimumHosts = successRateMinimumHosts;
        this.successRateRequestVolume = successRateRequestVolume;
        this.successRateStdevFactor = successRateStdevFactor;
    }

    public Optional<RegionBackendServiceOutlierDetectionBaseEjectionTime> getBaseEjectionTime() {
        return Optional.ofNullable(this.baseEjectionTime);
    }
    public Optional<Integer> getConsecutiveErrors() {
        return Optional.ofNullable(this.consecutiveErrors);
    }
    public Optional<Integer> getConsecutiveGatewayFailure() {
        return Optional.ofNullable(this.consecutiveGatewayFailure);
    }
    public Optional<Integer> getEnforcingConsecutiveErrors() {
        return Optional.ofNullable(this.enforcingConsecutiveErrors);
    }
    public Optional<Integer> getEnforcingConsecutiveGatewayFailure() {
        return Optional.ofNullable(this.enforcingConsecutiveGatewayFailure);
    }
    public Optional<Integer> getEnforcingSuccessRate() {
        return Optional.ofNullable(this.enforcingSuccessRate);
    }
    public Optional<RegionBackendServiceOutlierDetectionInterval> getInterval() {
        return Optional.ofNullable(this.interval);
    }
    public Optional<Integer> getMaxEjectionPercent() {
        return Optional.ofNullable(this.maxEjectionPercent);
    }
    public Optional<Integer> getSuccessRateMinimumHosts() {
        return Optional.ofNullable(this.successRateMinimumHosts);
    }
    public Optional<Integer> getSuccessRateRequestVolume() {
        return Optional.ofNullable(this.successRateRequestVolume);
    }
    public Optional<Integer> getSuccessRateStdevFactor() {
        return Optional.ofNullable(this.successRateStdevFactor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceOutlierDetection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable RegionBackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime;
        private @Nullable Integer consecutiveErrors;
        private @Nullable Integer consecutiveGatewayFailure;
        private @Nullable Integer enforcingConsecutiveErrors;
        private @Nullable Integer enforcingConsecutiveGatewayFailure;
        private @Nullable Integer enforcingSuccessRate;
        private @Nullable RegionBackendServiceOutlierDetectionInterval interval;
        private @Nullable Integer maxEjectionPercent;
        private @Nullable Integer successRateMinimumHosts;
        private @Nullable Integer successRateRequestVolume;
        private @Nullable Integer successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionBackendServiceOutlierDetection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder setBaseEjectionTime(@Nullable RegionBackendServiceOutlierDetectionBaseEjectionTime baseEjectionTime) {
            this.baseEjectionTime = baseEjectionTime;
            return this;
        }

        public Builder setConsecutiveErrors(@Nullable Integer consecutiveErrors) {
            this.consecutiveErrors = consecutiveErrors;
            return this;
        }

        public Builder setConsecutiveGatewayFailure(@Nullable Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = consecutiveGatewayFailure;
            return this;
        }

        public Builder setEnforcingConsecutiveErrors(@Nullable Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
            return this;
        }

        public Builder setEnforcingConsecutiveGatewayFailure(@Nullable Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            return this;
        }

        public Builder setEnforcingSuccessRate(@Nullable Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = enforcingSuccessRate;
            return this;
        }

        public Builder setInterval(@Nullable RegionBackendServiceOutlierDetectionInterval interval) {
            this.interval = interval;
            return this;
        }

        public Builder setMaxEjectionPercent(@Nullable Integer maxEjectionPercent) {
            this.maxEjectionPercent = maxEjectionPercent;
            return this;
        }

        public Builder setSuccessRateMinimumHosts(@Nullable Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = successRateMinimumHosts;
            return this;
        }

        public Builder setSuccessRateRequestVolume(@Nullable Integer successRateRequestVolume) {
            this.successRateRequestVolume = successRateRequestVolume;
            return this;
        }

        public Builder setSuccessRateStdevFactor(@Nullable Integer successRateStdevFactor) {
            this.successRateStdevFactor = successRateStdevFactor;
            return this;
        }

        public RegionBackendServiceOutlierDetection build() {
            return new RegionBackendServiceOutlierDetection(baseEjectionTime, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, interval, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
