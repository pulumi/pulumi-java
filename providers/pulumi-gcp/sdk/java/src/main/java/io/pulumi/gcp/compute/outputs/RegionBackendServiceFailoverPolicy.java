// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class RegionBackendServiceFailoverPolicy {
    private final @Nullable Boolean disableConnectionDrainOnFailover;
    private final @Nullable Boolean dropTrafficIfUnhealthy;
    private final @Nullable Double failoverRatio;

    @OutputCustomType.Constructor({"disableConnectionDrainOnFailover","dropTrafficIfUnhealthy","failoverRatio"})
    private RegionBackendServiceFailoverPolicy(
        @Nullable Boolean disableConnectionDrainOnFailover,
        @Nullable Boolean dropTrafficIfUnhealthy,
        @Nullable Double failoverRatio) {
        this.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
        this.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
        this.failoverRatio = failoverRatio;
    }

    public Optional<Boolean> getDisableConnectionDrainOnFailover() {
        return Optional.ofNullable(this.disableConnectionDrainOnFailover);
    }
    public Optional<Boolean> getDropTrafficIfUnhealthy() {
        return Optional.ofNullable(this.dropTrafficIfUnhealthy);
    }
    public Optional<Double> getFailoverRatio() {
        return Optional.ofNullable(this.failoverRatio);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceFailoverPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean disableConnectionDrainOnFailover;
        private @Nullable Boolean dropTrafficIfUnhealthy;
        private @Nullable Double failoverRatio;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionBackendServiceFailoverPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableConnectionDrainOnFailover = defaults.disableConnectionDrainOnFailover;
    	      this.dropTrafficIfUnhealthy = defaults.dropTrafficIfUnhealthy;
    	      this.failoverRatio = defaults.failoverRatio;
        }

        public Builder setDisableConnectionDrainOnFailover(@Nullable Boolean disableConnectionDrainOnFailover) {
            this.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
            return this;
        }

        public Builder setDropTrafficIfUnhealthy(@Nullable Boolean dropTrafficIfUnhealthy) {
            this.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
            return this;
        }

        public Builder setFailoverRatio(@Nullable Double failoverRatio) {
            this.failoverRatio = failoverRatio;
            return this;
        }

        public RegionBackendServiceFailoverPolicy build() {
            return new RegionBackendServiceFailoverPolicy(disableConnectionDrainOnFailover, dropTrafficIfUnhealthy, failoverRatio);
        }
    }
}
