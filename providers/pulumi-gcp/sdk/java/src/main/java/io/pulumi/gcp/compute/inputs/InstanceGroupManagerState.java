// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.compute.inputs.InstanceGroupManagerAutoHealingPoliciesGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceGroupManagerNamedPortGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceGroupManagerStatefulDiskGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceGroupManagerStatusGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceGroupManagerUpdatePolicyGetArgs;
import io.pulumi.gcp.compute.inputs.InstanceGroupManagerVersionGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceGroupManagerState extends io.pulumi.resources.ResourceArgs {

    public static final InstanceGroupManagerState Empty = new InstanceGroupManagerState();

    /**
     * The autohealing policies for this managed instance
     * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
     * 
     */
    @Import(name="autoHealingPolicies")
      private final @Nullable Output<InstanceGroupManagerAutoHealingPoliciesGetArgs> autoHealingPolicies;

    public Output<InstanceGroupManagerAutoHealingPoliciesGetArgs> getAutoHealingPolicies() {
        return this.autoHealingPolicies == null ? Output.empty() : this.autoHealingPolicies;
    }

    /**
     * The base instance name to use for
     * instances in this group. The value must be a valid
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
     * are lowercase letters, numbers, and hyphens (-). Instances are named by
     * appending a hyphen and a random four-character string to the base instance
     * name.
     * 
     */
    @Import(name="baseInstanceName")
      private final @Nullable Output<String> baseInstanceName;

    public Output<String> getBaseInstanceName() {
        return this.baseInstanceName == null ? Output.empty() : this.baseInstanceName;
    }

    /**
     * An optional textual description of the instance
     * group manager.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The fingerprint of the instance group manager.
     * 
     */
    @Import(name="fingerprint")
      private final @Nullable Output<String> fingerprint;

    public Output<String> getFingerprint() {
        return this.fingerprint == null ? Output.empty() : this.fingerprint;
    }

    /**
     * The full URL of the instance group created by the manager.
     * 
     */
    @Import(name="instanceGroup")
      private final @Nullable Output<String> instanceGroup;

    public Output<String> getInstanceGroup() {
        return this.instanceGroup == null ? Output.empty() : this.instanceGroup;
    }

    /**
     * - Version name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The named port configuration. See the section below
     * for details on configuration.
     * 
     */
    @Import(name="namedPorts")
      private final @Nullable Output<List<InstanceGroupManagerNamedPortGetArgs>> namedPorts;

    public Output<List<InstanceGroupManagerNamedPortGetArgs>> getNamedPorts() {
        return this.namedPorts == null ? Output.empty() : this.namedPorts;
    }

    @Import(name="operation")
      private final @Nullable Output<String> operation;

    public Output<String> getOperation() {
        return this.operation == null ? Output.empty() : this.operation;
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The URL of the created resource.
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> getSelfLink() {
        return this.selfLink == null ? Output.empty() : this.selfLink;
    }

    /**
     * ) Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs).
     * 
     */
    @Import(name="statefulDisks")
      private final @Nullable Output<List<InstanceGroupManagerStatefulDiskGetArgs>> statefulDisks;

    public Output<List<InstanceGroupManagerStatefulDiskGetArgs>> getStatefulDisks() {
        return this.statefulDisks == null ? Output.empty() : this.statefulDisks;
    }

    /**
     * The status of this managed instance group.
     * 
     */
    @Import(name="statuses")
      private final @Nullable Output<List<InstanceGroupManagerStatusGetArgs>> statuses;

    public Output<List<InstanceGroupManagerStatusGetArgs>> getStatuses() {
        return this.statuses == null ? Output.empty() : this.statuses;
    }

    /**
     * The full URL of all target pools to which new
     * instances in the group are added. Updating the target pools attribute does
     * not affect existing instances.
     * 
     */
    @Import(name="targetPools")
      private final @Nullable Output<List<String>> targetPools;

    public Output<List<String>> getTargetPools() {
        return this.targetPools == null ? Output.empty() : this.targetPools;
    }

    /**
     * - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
     * 
     */
    @Import(name="targetSize")
      private final @Nullable Output<Integer> targetSize;

    public Output<Integer> getTargetSize() {
        return this.targetSize == null ? Output.empty() : this.targetSize;
    }

    /**
     * The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/v1/instanceGroupManagers/patch)
     * 
     */
    @Import(name="updatePolicy")
      private final @Nullable Output<InstanceGroupManagerUpdatePolicyGetArgs> updatePolicy;

    public Output<InstanceGroupManagerUpdatePolicyGetArgs> getUpdatePolicy() {
        return this.updatePolicy == null ? Output.empty() : this.updatePolicy;
    }

    /**
     * Application versions managed by this instance group. Each
     * version deals with a specific instance template, allowing canary release scenarios.
     * Structure is documented below.
     * 
     */
    @Import(name="versions")
      private final @Nullable Output<List<InstanceGroupManagerVersionGetArgs>> versions;

    public Output<List<InstanceGroupManagerVersionGetArgs>> getVersions() {
        return this.versions == null ? Output.empty() : this.versions;
    }

    /**
     * Whether to wait for all instances to be created/updated before
     * returning. Note that if this is set to true and the operation does not succeed, this provider will
     * continue trying until it times out.
     * 
     */
    @Import(name="waitForInstances")
      private final @Nullable Output<Boolean> waitForInstances;

    public Output<Boolean> getWaitForInstances() {
        return this.waitForInstances == null ? Output.empty() : this.waitForInstances;
    }

    /**
     * When used with `wait_for_instances` it specifies the status to wait for.
     * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
     * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
     * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
     * 
     */
    @Import(name="waitForInstancesStatus")
      private final @Nullable Output<String> waitForInstancesStatus;

    public Output<String> getWaitForInstancesStatus() {
        return this.waitForInstancesStatus == null ? Output.empty() : this.waitForInstancesStatus;
    }

    /**
     * The zone that instances in this group should be created
     * in.
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> getZone() {
        return this.zone == null ? Output.empty() : this.zone;
    }

    public InstanceGroupManagerState(
        @Nullable Output<InstanceGroupManagerAutoHealingPoliciesGetArgs> autoHealingPolicies,
        @Nullable Output<String> baseInstanceName,
        @Nullable Output<String> description,
        @Nullable Output<String> fingerprint,
        @Nullable Output<String> instanceGroup,
        @Nullable Output<String> name,
        @Nullable Output<List<InstanceGroupManagerNamedPortGetArgs>> namedPorts,
        @Nullable Output<String> operation,
        @Nullable Output<String> project,
        @Nullable Output<String> selfLink,
        @Nullable Output<List<InstanceGroupManagerStatefulDiskGetArgs>> statefulDisks,
        @Nullable Output<List<InstanceGroupManagerStatusGetArgs>> statuses,
        @Nullable Output<List<String>> targetPools,
        @Nullable Output<Integer> targetSize,
        @Nullable Output<InstanceGroupManagerUpdatePolicyGetArgs> updatePolicy,
        @Nullable Output<List<InstanceGroupManagerVersionGetArgs>> versions,
        @Nullable Output<Boolean> waitForInstances,
        @Nullable Output<String> waitForInstancesStatus,
        @Nullable Output<String> zone) {
        this.autoHealingPolicies = autoHealingPolicies;
        this.baseInstanceName = baseInstanceName;
        this.description = description;
        this.fingerprint = fingerprint;
        this.instanceGroup = instanceGroup;
        this.name = name;
        this.namedPorts = namedPorts;
        this.operation = operation;
        this.project = project;
        this.selfLink = selfLink;
        this.statefulDisks = statefulDisks;
        this.statuses = statuses;
        this.targetPools = targetPools;
        this.targetSize = targetSize;
        this.updatePolicy = updatePolicy;
        this.versions = versions;
        this.waitForInstances = waitForInstances;
        this.waitForInstancesStatus = waitForInstancesStatus;
        this.zone = zone;
    }

    private InstanceGroupManagerState() {
        this.autoHealingPolicies = Output.empty();
        this.baseInstanceName = Output.empty();
        this.description = Output.empty();
        this.fingerprint = Output.empty();
        this.instanceGroup = Output.empty();
        this.name = Output.empty();
        this.namedPorts = Output.empty();
        this.operation = Output.empty();
        this.project = Output.empty();
        this.selfLink = Output.empty();
        this.statefulDisks = Output.empty();
        this.statuses = Output.empty();
        this.targetPools = Output.empty();
        this.targetSize = Output.empty();
        this.updatePolicy = Output.empty();
        this.versions = Output.empty();
        this.waitForInstances = Output.empty();
        this.waitForInstancesStatus = Output.empty();
        this.zone = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceGroupManagerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<InstanceGroupManagerAutoHealingPoliciesGetArgs> autoHealingPolicies;
        private @Nullable Output<String> baseInstanceName;
        private @Nullable Output<String> description;
        private @Nullable Output<String> fingerprint;
        private @Nullable Output<String> instanceGroup;
        private @Nullable Output<String> name;
        private @Nullable Output<List<InstanceGroupManagerNamedPortGetArgs>> namedPorts;
        private @Nullable Output<String> operation;
        private @Nullable Output<String> project;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<List<InstanceGroupManagerStatefulDiskGetArgs>> statefulDisks;
        private @Nullable Output<List<InstanceGroupManagerStatusGetArgs>> statuses;
        private @Nullable Output<List<String>> targetPools;
        private @Nullable Output<Integer> targetSize;
        private @Nullable Output<InstanceGroupManagerUpdatePolicyGetArgs> updatePolicy;
        private @Nullable Output<List<InstanceGroupManagerVersionGetArgs>> versions;
        private @Nullable Output<Boolean> waitForInstances;
        private @Nullable Output<String> waitForInstancesStatus;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceGroupManagerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoHealingPolicies = defaults.autoHealingPolicies;
    	      this.baseInstanceName = defaults.baseInstanceName;
    	      this.description = defaults.description;
    	      this.fingerprint = defaults.fingerprint;
    	      this.instanceGroup = defaults.instanceGroup;
    	      this.name = defaults.name;
    	      this.namedPorts = defaults.namedPorts;
    	      this.operation = defaults.operation;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.statefulDisks = defaults.statefulDisks;
    	      this.statuses = defaults.statuses;
    	      this.targetPools = defaults.targetPools;
    	      this.targetSize = defaults.targetSize;
    	      this.updatePolicy = defaults.updatePolicy;
    	      this.versions = defaults.versions;
    	      this.waitForInstances = defaults.waitForInstances;
    	      this.waitForInstancesStatus = defaults.waitForInstancesStatus;
    	      this.zone = defaults.zone;
        }

        public Builder autoHealingPolicies(@Nullable Output<InstanceGroupManagerAutoHealingPoliciesGetArgs> autoHealingPolicies) {
            this.autoHealingPolicies = autoHealingPolicies;
            return this;
        }
        public Builder autoHealingPolicies(@Nullable InstanceGroupManagerAutoHealingPoliciesGetArgs autoHealingPolicies) {
            this.autoHealingPolicies = Output.ofNullable(autoHealingPolicies);
            return this;
        }
        public Builder baseInstanceName(@Nullable Output<String> baseInstanceName) {
            this.baseInstanceName = baseInstanceName;
            return this;
        }
        public Builder baseInstanceName(@Nullable String baseInstanceName) {
            this.baseInstanceName = Output.ofNullable(baseInstanceName);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }
        public Builder fingerprint(@Nullable String fingerprint) {
            this.fingerprint = Output.ofNullable(fingerprint);
            return this;
        }
        public Builder instanceGroup(@Nullable Output<String> instanceGroup) {
            this.instanceGroup = instanceGroup;
            return this;
        }
        public Builder instanceGroup(@Nullable String instanceGroup) {
            this.instanceGroup = Output.ofNullable(instanceGroup);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder namedPorts(@Nullable Output<List<InstanceGroupManagerNamedPortGetArgs>> namedPorts) {
            this.namedPorts = namedPorts;
            return this;
        }
        public Builder namedPorts(@Nullable List<InstanceGroupManagerNamedPortGetArgs> namedPorts) {
            this.namedPorts = Output.ofNullable(namedPorts);
            return this;
        }
        public Builder namedPorts(InstanceGroupManagerNamedPortGetArgs... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }
        public Builder operation(@Nullable Output<String> operation) {
            this.operation = operation;
            return this;
        }
        public Builder operation(@Nullable String operation) {
            this.operation = Output.ofNullable(operation);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }
        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Output.ofNullable(selfLink);
            return this;
        }
        public Builder statefulDisks(@Nullable Output<List<InstanceGroupManagerStatefulDiskGetArgs>> statefulDisks) {
            this.statefulDisks = statefulDisks;
            return this;
        }
        public Builder statefulDisks(@Nullable List<InstanceGroupManagerStatefulDiskGetArgs> statefulDisks) {
            this.statefulDisks = Output.ofNullable(statefulDisks);
            return this;
        }
        public Builder statefulDisks(InstanceGroupManagerStatefulDiskGetArgs... statefulDisks) {
            return statefulDisks(List.of(statefulDisks));
        }
        public Builder statuses(@Nullable Output<List<InstanceGroupManagerStatusGetArgs>> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(@Nullable List<InstanceGroupManagerStatusGetArgs> statuses) {
            this.statuses = Output.ofNullable(statuses);
            return this;
        }
        public Builder statuses(InstanceGroupManagerStatusGetArgs... statuses) {
            return statuses(List.of(statuses));
        }
        public Builder targetPools(@Nullable Output<List<String>> targetPools) {
            this.targetPools = targetPools;
            return this;
        }
        public Builder targetPools(@Nullable List<String> targetPools) {
            this.targetPools = Output.ofNullable(targetPools);
            return this;
        }
        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }
        public Builder targetSize(@Nullable Output<Integer> targetSize) {
            this.targetSize = targetSize;
            return this;
        }
        public Builder targetSize(@Nullable Integer targetSize) {
            this.targetSize = Output.ofNullable(targetSize);
            return this;
        }
        public Builder updatePolicy(@Nullable Output<InstanceGroupManagerUpdatePolicyGetArgs> updatePolicy) {
            this.updatePolicy = updatePolicy;
            return this;
        }
        public Builder updatePolicy(@Nullable InstanceGroupManagerUpdatePolicyGetArgs updatePolicy) {
            this.updatePolicy = Output.ofNullable(updatePolicy);
            return this;
        }
        public Builder versions(@Nullable Output<List<InstanceGroupManagerVersionGetArgs>> versions) {
            this.versions = versions;
            return this;
        }
        public Builder versions(@Nullable List<InstanceGroupManagerVersionGetArgs> versions) {
            this.versions = Output.ofNullable(versions);
            return this;
        }
        public Builder versions(InstanceGroupManagerVersionGetArgs... versions) {
            return versions(List.of(versions));
        }
        public Builder waitForInstances(@Nullable Output<Boolean> waitForInstances) {
            this.waitForInstances = waitForInstances;
            return this;
        }
        public Builder waitForInstances(@Nullable Boolean waitForInstances) {
            this.waitForInstances = Output.ofNullable(waitForInstances);
            return this;
        }
        public Builder waitForInstancesStatus(@Nullable Output<String> waitForInstancesStatus) {
            this.waitForInstancesStatus = waitForInstancesStatus;
            return this;
        }
        public Builder waitForInstancesStatus(@Nullable String waitForInstancesStatus) {
            this.waitForInstancesStatus = Output.ofNullable(waitForInstancesStatus);
            return this;
        }
        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = Output.ofNullable(zone);
            return this;
        }        public InstanceGroupManagerState build() {
            return new InstanceGroupManagerState(autoHealingPolicies, baseInstanceName, description, fingerprint, instanceGroup, name, namedPorts, operation, project, selfLink, statefulDisks, statuses, targetPools, targetSize, updatePolicy, versions, waitForInstances, waitForInstancesStatus, zone);
        }
    }
}
