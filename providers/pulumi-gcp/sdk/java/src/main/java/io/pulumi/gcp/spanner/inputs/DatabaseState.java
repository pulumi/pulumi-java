// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.spanner.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.spanner.inputs.DatabaseEncryptionConfigGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseState extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * An optional list of DDL statements to run inside the newly created
     * database. Statements can create tables, indexes, etc. These statements
     * execute atomically with the creation of the database: if there is an
     * error in any statement, the database is not created.
     * 
     */
    @Import(name="ddls")
      private final @Nullable Output<List<String>> ddls;

    public Output<List<String>> getDdls() {
        return this.ddls == null ? Codegen.empty() : this.ddls;
    }

    /**
     * Whether or not to allow the provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` that would delete the instance will fail.
     * 
     */
    @Import(name="deletionProtection")
      private final @Nullable Output<Boolean> deletionProtection;

    public Output<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Codegen.empty() : this.deletionProtection;
    }

    /**
     * Encryption configuration for the database
     * Structure is documented below.
     * 
     */
    @Import(name="encryptionConfig")
      private final @Nullable Output<DatabaseEncryptionConfigGetArgs> encryptionConfig;

    public Output<DatabaseEncryptionConfigGetArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Codegen.empty() : this.encryptionConfig;
    }

    /**
     * The instance to create the database on.
     * 
     */
    @Import(name="instance")
      private final @Nullable Output<String> instance;

    public Output<String> getInstance() {
        return this.instance == null ? Codegen.empty() : this.instance;
    }

    /**
     * A unique identifier for the database, which cannot be changed after
     * the instance is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * An explanation of the status of the database.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    public DatabaseState(
        @Nullable Output<List<String>> ddls,
        @Nullable Output<Boolean> deletionProtection,
        @Nullable Output<DatabaseEncryptionConfigGetArgs> encryptionConfig,
        @Nullable Output<String> instance,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> state) {
        this.ddls = ddls;
        this.deletionProtection = deletionProtection;
        this.encryptionConfig = encryptionConfig;
        this.instance = instance;
        this.name = name;
        this.project = project;
        this.state = state;
    }

    private DatabaseState() {
        this.ddls = Codegen.empty();
        this.deletionProtection = Codegen.empty();
        this.encryptionConfig = Codegen.empty();
        this.instance = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.state = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> ddls;
        private @Nullable Output<Boolean> deletionProtection;
        private @Nullable Output<DatabaseEncryptionConfigGetArgs> encryptionConfig;
        private @Nullable Output<String> instance;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> state;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ddls = defaults.ddls;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.instance = defaults.instance;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
        }

        public Builder ddls(@Nullable Output<List<String>> ddls) {
            this.ddls = ddls;
            return this;
        }
        public Builder ddls(@Nullable List<String> ddls) {
            this.ddls = Codegen.ofNullable(ddls);
            return this;
        }
        public Builder ddls(String... ddls) {
            return ddls(List.of(ddls));
        }
        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }
        public Builder deletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Codegen.ofNullable(deletionProtection);
            return this;
        }
        public Builder encryptionConfig(@Nullable Output<DatabaseEncryptionConfigGetArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }
        public Builder encryptionConfig(@Nullable DatabaseEncryptionConfigGetArgs encryptionConfig) {
            this.encryptionConfig = Codegen.ofNullable(encryptionConfig);
            return this;
        }
        public Builder instance(@Nullable Output<String> instance) {
            this.instance = instance;
            return this;
        }
        public Builder instance(@Nullable String instance) {
            this.instance = Codegen.ofNullable(instance);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }        public DatabaseState build() {
            return new DatabaseState(ddls, deletionProtection, encryptionConfig, instance, name, project, state);
        }
    }
}
