// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.iap;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.iap.AppEngineServiceIamBindingArgs;
import io.pulumi.gcp.iap.inputs.AppEngineServiceIamBindingState;
import io.pulumi.gcp.iap.outputs.AppEngineServiceIamBindingCondition;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Three different resources help you manage your IAM policy for Identity-Aware Proxy AppEngineService. Each of these resources serves a different use case:
 * 
 * * `gcp.iap.AppEngineServiceIamPolicy`: Authoritative. Sets the IAM policy for the appengineservice and replaces any existing policy already attached.
 * * `gcp.iap.AppEngineServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the appengineservice are preserved.
 * * `gcp.iap.AppEngineServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the appengineservice are preserved.
 * 
 * > **Note:** `gcp.iap.AppEngineServiceIamPolicy` **cannot** be used in conjunction with `gcp.iap.AppEngineServiceIamBinding` and `gcp.iap.AppEngineServiceIamMember` or they will fight over what your policy should be.
 * 
 * > **Note:** `gcp.iap.AppEngineServiceIamBinding` resources **can be** used in conjunction with `gcp.iap.AppEngineServiceIamMember` resources **only if** they do not grant privilege to the same role.
 * 
 * ## google\_iap\_app\_engine\_service\_iam\_policy
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/iap.httpsResourceAccessor",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const policy = new gcp.iap.AppEngineServiceIamPolicy("policy", {
 *     project: google_app_engine_standard_app_version.version.project,
 *     appId: google_app_engine_standard_app_version.version.project,
 *     service: google_app_engine_standard_app_version.version.service,
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * admin = gcp.organizations.get_iam_policy(bindings=[gcp.organizations.GetIAMPolicyBindingArgs(
 *     role="roles/iap.httpsResourceAccessor",
 *     members=["user:jane@example.com"],
 * )])
 * policy = gcp.iap.AppEngineServiceIamPolicy("policy",
 *     project=google_app_engine_standard_app_version["version"]["project"],
 *     app_id=google_app_engine_standard_app_version["version"]["project"],
 *     service=google_app_engine_standard_app_version["version"]["service"],
 *     policy_data=admin.policy_data)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
 *         {
 *             Bindings = 
 *             {
 *                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
 *                 {
 *                     Role = "roles/iap.httpsResourceAccessor",
 *                     Members = 
 *                     {
 *                         "user:jane@example.com",
 *                     },
 *                 },
 *             },
 *         }));
 *         var policy = new Gcp.Iap.AppEngineServiceIamPolicy("policy", new Gcp.Iap.AppEngineServiceIamPolicyArgs
 *         {
 *             Project = google_app_engine_standard_app_version.Version.Project,
 *             AppId = google_app_engine_standard_app_version.Version.Project,
 *             Service = google_app_engine_standard_app_version.Version.Service,
 *             PolicyData = admin.Apply(admin => admin.PolicyData),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
 * 			Bindings: []organizations.GetIAMPolicyBinding{
 * 				organizations.GetIAMPolicyBinding{
 * 					Role: "roles/iap.httpsResourceAccessor",
 * 					Members: []string{
 * 						"user:jane@example.com",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iap.NewAppEngineServiceIamPolicy(ctx, "policy", &iap.AppEngineServiceIamPolicyArgs{
 * 			Project:    pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			AppId:      pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Service:    pulumi.Any(google_app_engine_standard_app_version.Version.Service),
 * 			PolicyData: pulumi.String(admin.PolicyData),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/iap.httpsResourceAccessor",
 *         members: ["user:jane@example.com"],
 *         condition: {
 *             title: "expires_after_2019_12_31",
 *             description: "Expiring at midnight of 2019-12-31",
 *             expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         },
 *     }],
 * });
 * const policy = new gcp.iap.AppEngineServiceIamPolicy("policy", {
 *     project: google_app_engine_standard_app_version.version.project,
 *     appId: google_app_engine_standard_app_version.version.project,
 *     service: google_app_engine_standard_app_version.version.service,
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * admin = gcp.organizations.get_iam_policy(bindings=[gcp.organizations.GetIAMPolicyBindingArgs(
 *     role="roles/iap.httpsResourceAccessor",
 *     members=["user:jane@example.com"],
 *     condition=gcp.organizations.GetIAMPolicyBindingConditionArgs(
 *         title="expires_after_2019_12_31",
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     ),
 * )])
 * policy = gcp.iap.AppEngineServiceIamPolicy("policy",
 *     project=google_app_engine_standard_app_version["version"]["project"],
 *     app_id=google_app_engine_standard_app_version["version"]["project"],
 *     service=google_app_engine_standard_app_version["version"]["service"],
 *     policy_data=admin.policy_data)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
 *         {
 *             Bindings = 
 *             {
 *                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
 *                 {
 *                     Role = "roles/iap.httpsResourceAccessor",
 *                     Members = 
 *                     {
 *                         "user:jane@example.com",
 *                     },
 *                     Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionArgs
 *                     {
 *                         Title = "expires_after_2019_12_31",
 *                         Description = "Expiring at midnight of 2019-12-31",
 *                         Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *                     },
 *                 },
 *             },
 *         }));
 *         var policy = new Gcp.Iap.AppEngineServiceIamPolicy("policy", new Gcp.Iap.AppEngineServiceIamPolicyArgs
 *         {
 *             Project = google_app_engine_standard_app_version.Version.Project,
 *             AppId = google_app_engine_standard_app_version.Version.Project,
 *             Service = google_app_engine_standard_app_version.Version.Service,
 *             PolicyData = admin.Apply(admin => admin.PolicyData),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
 * 			Bindings: []organizations.GetIAMPolicyBinding{
 * 				organizations.GetIAMPolicyBinding{
 * 					Role: "roles/iap.httpsResourceAccessor",
 * 					Members: []string{
 * 						"user:jane@example.com",
 * 					},
 * 					Condition: organizations.GetIAMPolicyBindingCondition{
 * 						Title:       "expires_after_2019_12_31",
 * 						Description: "Expiring at midnight of 2019-12-31",
 * 						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iap.NewAppEngineServiceIamPolicy(ctx, "policy", &iap.AppEngineServiceIamPolicyArgs{
 * 			Project:    pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			AppId:      pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Service:    pulumi.Any(google_app_engine_standard_app_version.Version.Service),
 * 			PolicyData: pulumi.String(admin.PolicyData),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * ## google\_iap\_app\_engine\_service\_iam\_binding
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const binding = new gcp.iap.AppEngineServiceIamBinding("binding", {
 *     appId: google_app_engine_standard_app_version_version.project,
 *     members: ["user:jane@example.com"],
 *     project: google_app_engine_standard_app_version_version.project,
 *     role: "roles/iap.httpsResourceAccessor",
 *     service: google_app_engine_standard_app_version_version.service,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * binding = gcp.iap.AppEngineServiceIamBinding("binding",
 *     app_id=google_app_engine_standard_app_version["version"]["project"],
 *     members=["user:jane@example.com"],
 *     project=google_app_engine_standard_app_version["version"]["project"],
 *     role="roles/iap.httpsResourceAccessor",
 *     service=google_app_engine_standard_app_version["version"]["service"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var binding = new Gcp.Iap.AppEngineServiceIamBinding("binding", new Gcp.Iap.AppEngineServiceIamBindingArgs
 *         {
 *             AppId = google_app_engine_standard_app_version.Version.Project,
 *             Members = 
 *             {
 *                 "user:jane@example.com",
 *             },
 *             Project = google_app_engine_standard_app_version.Version.Project,
 *             Role = "roles/iap.httpsResourceAccessor",
 *             Service = google_app_engine_standard_app_version.Version.Service,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iap.NewAppEngineServiceIamBinding(ctx, "binding", &iap.AppEngineServiceIamBindingArgs{
 * 			AppId: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Members: pulumi.StringArray{
 * 				pulumi.String("user:jane@example.com"),
 * 			},
 * 			Project: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Role:    pulumi.String("roles/iap.httpsResourceAccessor"),
 * 			Service: pulumi.Any(google_app_engine_standard_app_version.Version.Service),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const binding = new gcp.iap.AppEngineServiceIamBinding("binding", {
 *     appId: google_app_engine_standard_app_version_version.project,
 *     condition: {
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title: "expires_after_2019_12_31",
 *     },
 *     members: ["user:jane@example.com"],
 *     project: google_app_engine_standard_app_version_version.project,
 *     role: "roles/iap.httpsResourceAccessor",
 *     service: google_app_engine_standard_app_version_version.service,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * binding = gcp.iap.AppEngineServiceIamBinding("binding",
 *     app_id=google_app_engine_standard_app_version["version"]["project"],
 *     condition=gcp.iap.AppEngineServiceIamBindingConditionArgs(
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title="expires_after_2019_12_31",
 *     ),
 *     members=["user:jane@example.com"],
 *     project=google_app_engine_standard_app_version["version"]["project"],
 *     role="roles/iap.httpsResourceAccessor",
 *     service=google_app_engine_standard_app_version["version"]["service"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var binding = new Gcp.Iap.AppEngineServiceIamBinding("binding", new Gcp.Iap.AppEngineServiceIamBindingArgs
 *         {
 *             AppId = google_app_engine_standard_app_version.Version.Project,
 *             Condition = new Gcp.Iap.Inputs.AppEngineServiceIamBindingConditionArgs
 *             {
 *                 Description = "Expiring at midnight of 2019-12-31",
 *                 Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *                 Title = "expires_after_2019_12_31",
 *             },
 *             Members = 
 *             {
 *                 "user:jane@example.com",
 *             },
 *             Project = google_app_engine_standard_app_version.Version.Project,
 *             Role = "roles/iap.httpsResourceAccessor",
 *             Service = google_app_engine_standard_app_version.Version.Service,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iap.NewAppEngineServiceIamBinding(ctx, "binding", &iap.AppEngineServiceIamBindingArgs{
 * 			AppId: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Condition: &iap.AppEngineServiceIamBindingConditionArgs{
 * 				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
 * 				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
 * 				Title:       pulumi.String("expires_after_2019_12_31"),
 * 			},
 * 			Members: pulumi.StringArray{
 * 				pulumi.String("user:jane@example.com"),
 * 			},
 * 			Project: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Role:    pulumi.String("roles/iap.httpsResourceAccessor"),
 * 			Service: pulumi.Any(google_app_engine_standard_app_version.Version.Service),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * ## google\_iap\_app\_engine\_service\_iam\_member
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const member = new gcp.iap.AppEngineServiceIamMember("member", {
 *     appId: google_app_engine_standard_app_version_version.project,
 *     member: "user:jane@example.com",
 *     project: google_app_engine_standard_app_version_version.project,
 *     role: "roles/iap.httpsResourceAccessor",
 *     service: google_app_engine_standard_app_version_version.service,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * member = gcp.iap.AppEngineServiceIamMember("member",
 *     app_id=google_app_engine_standard_app_version["version"]["project"],
 *     member="user:jane@example.com",
 *     project=google_app_engine_standard_app_version["version"]["project"],
 *     role="roles/iap.httpsResourceAccessor",
 *     service=google_app_engine_standard_app_version["version"]["service"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var member = new Gcp.Iap.AppEngineServiceIamMember("member", new Gcp.Iap.AppEngineServiceIamMemberArgs
 *         {
 *             AppId = google_app_engine_standard_app_version.Version.Project,
 *             Member = "user:jane@example.com",
 *             Project = google_app_engine_standard_app_version.Version.Project,
 *             Role = "roles/iap.httpsResourceAccessor",
 *             Service = google_app_engine_standard_app_version.Version.Service,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iap.NewAppEngineServiceIamMember(ctx, "member", &iap.AppEngineServiceIamMemberArgs{
 * 			AppId:   pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Member:  pulumi.String("user:jane@example.com"),
 * 			Project: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Role:    pulumi.String("roles/iap.httpsResourceAccessor"),
 * 			Service: pulumi.Any(google_app_engine_standard_app_version.Version.Service),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const member = new gcp.iap.AppEngineServiceIamMember("member", {
 *     appId: google_app_engine_standard_app_version_version.project,
 *     condition: {
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title: "expires_after_2019_12_31",
 *     },
 *     member: "user:jane@example.com",
 *     project: google_app_engine_standard_app_version_version.project,
 *     role: "roles/iap.httpsResourceAccessor",
 *     service: google_app_engine_standard_app_version_version.service,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * member = gcp.iap.AppEngineServiceIamMember("member",
 *     app_id=google_app_engine_standard_app_version["version"]["project"],
 *     condition=gcp.iap.AppEngineServiceIamMemberConditionArgs(
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title="expires_after_2019_12_31",
 *     ),
 *     member="user:jane@example.com",
 *     project=google_app_engine_standard_app_version["version"]["project"],
 *     role="roles/iap.httpsResourceAccessor",
 *     service=google_app_engine_standard_app_version["version"]["service"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var member = new Gcp.Iap.AppEngineServiceIamMember("member", new Gcp.Iap.AppEngineServiceIamMemberArgs
 *         {
 *             AppId = google_app_engine_standard_app_version.Version.Project,
 *             Condition = new Gcp.Iap.Inputs.AppEngineServiceIamMemberConditionArgs
 *             {
 *                 Description = "Expiring at midnight of 2019-12-31",
 *                 Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *                 Title = "expires_after_2019_12_31",
 *             },
 *             Member = "user:jane@example.com",
 *             Project = google_app_engine_standard_app_version.Version.Project,
 *             Role = "roles/iap.httpsResourceAccessor",
 *             Service = google_app_engine_standard_app_version.Version.Service,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/iap"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iap.NewAppEngineServiceIamMember(ctx, "member", &iap.AppEngineServiceIamMemberArgs{
 * 			AppId: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Condition: &iap.AppEngineServiceIamMemberConditionArgs{
 * 				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
 * 				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
 * 				Title:       pulumi.String("expires_after_2019_12_31"),
 * 			},
 * 			Member:  pulumi.String("user:jane@example.com"),
 * 			Project: pulumi.Any(google_app_engine_standard_app_version.Version.Project),
 * 			Role:    pulumi.String("roles/iap.httpsResourceAccessor"),
 * 			Service: pulumi.Any(google_app_engine_standard_app_version.Version.Service),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}} * {{project}}/{{appId}}/{{service}} * {{appId}}/{{service}} * {{service}} Any variables not passed in the import command will be taken from the provider configuration. Identity-Aware Proxy appengineservice IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding editor "projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}} roles/iap.httpsResourceAccessor user:jane@example.com"
 * ```
 * 
 *  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding editor "projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}} roles/iap.httpsResourceAccessor"
 * ```
 * 
 *  IAM policy imports use the identifier of the resource in question, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding editor projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}}
 * ```
 * 
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 * 
 * full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`. 
 */
@ResourceType(type="gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding")
public class AppEngineServiceIamBinding extends io.pulumi.resources.CustomResource {
    /**
     * Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    /**
     * @return Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> getAppId() {
        return this.appId;
    }
    /**
     * An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    @Export(name="condition", type=AppEngineServiceIamBindingCondition.class, parameters={})
    private Output</* @Nullable */ AppEngineServiceIamBindingCondition> condition;

    /**
     * @return An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ AppEngineServiceIamBindingCondition> getCondition() {
        return this.condition;
    }
    /**
     * (Computed) The etag of the IAM policy.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return (Computed) The etag of the IAM policy.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    @Export(name="members", type=List.class, parameters={String.class})
    private Output<List<String>> members;

    public Output<List<String>> getMembers() {
        return this.members;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The role that should be applied. Only one
     * `gcp.iap.AppEngineServiceIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Export(name="role", type=String.class, parameters={})
    private Output<String> role;

    /**
     * @return The role that should be applied. Only one
     * `gcp.iap.AppEngineServiceIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    public Output<String> getRole() {
        return this.role;
    }
    /**
     * Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Export(name="service", type=String.class, parameters={})
    private Output<String> service;

    /**
     * @return Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> getService() {
        return this.service;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppEngineServiceIamBinding(String name) {
        this(name, AppEngineServiceIamBindingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppEngineServiceIamBinding(String name, AppEngineServiceIamBindingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppEngineServiceIamBinding(String name, AppEngineServiceIamBindingArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding", name, args == null ? AppEngineServiceIamBindingArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private AppEngineServiceIamBinding(String name, Output<String> id, @Nullable AppEngineServiceIamBindingState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:iap/appEngineServiceIamBinding:AppEngineServiceIamBinding", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppEngineServiceIamBinding get(String name, Output<String> id, @Nullable AppEngineServiceIamBindingState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new AppEngineServiceIamBinding(name, id, state, options);
    }
}
