// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.SubnetworkIAMPolicyArgs;
import io.pulumi.gcp.compute.inputs.SubnetworkIAMPolicyState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Three different resources help you manage your IAM policy for Compute Engine Subnetwork. Each of these resources serves a different use case:
 * 
 * * `gcp.compute.SubnetworkIAMPolicy`: Authoritative. Sets the IAM policy for the subnetwork and replaces any existing policy already attached.
 * * `gcp.compute.SubnetworkIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the subnetwork are preserved.
 * * `gcp.compute.SubnetworkIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the subnetwork are preserved.
 * 
 * > **Note:** `gcp.compute.SubnetworkIAMPolicy` **cannot** be used in conjunction with `gcp.compute.SubnetworkIAMBinding` and `gcp.compute.SubnetworkIAMMember` or they will fight over what your policy should be.
 * 
 * > **Note:** `gcp.compute.SubnetworkIAMBinding` resources **can be** used in conjunction with `gcp.compute.SubnetworkIAMMember` resources **only if** they do not grant privilege to the same role.
 * 
 * ## google\_compute\_subnetwork\_iam\_policy
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/compute.networkUser",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const policy = new gcp.compute.SubnetworkIAMPolicy("policy", {
 *     project: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].project,
 *     region: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].region,
 *     subnetwork: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].name,
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * admin = gcp.organizations.get_iam_policy(bindings=[gcp.organizations.GetIAMPolicyBindingArgs(
 *     role="roles/compute.networkUser",
 *     members=["user:jane@example.com"],
 * )])
 * policy = gcp.compute.SubnetworkIAMPolicy("policy",
 *     project=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["project"],
 *     region=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["region"],
 *     subnetwork=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["name"],
 *     policy_data=admin.policy_data)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
 *         {
 *             Bindings = 
 *             {
 *                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
 *                 {
 *                     Role = "roles/compute.networkUser",
 *                     Members = 
 *                     {
 *                         "user:jane@example.com",
 *                     },
 *                 },
 *             },
 *         }));
 *         var policy = new Gcp.Compute.SubnetworkIAMPolicy("policy", new Gcp.Compute.SubnetworkIAMPolicyArgs
 *         {
 *             Project = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Project,
 *             Region = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Region,
 *             Subnetwork = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Name,
 *             PolicyData = admin.Apply(admin => admin.PolicyData),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
 * 			Bindings: []organizations.GetIAMPolicyBinding{
 * 				organizations.GetIAMPolicyBinding{
 * 					Role: "roles/compute.networkUser",
 * 					Members: []string{
 * 						"user:jane@example.com",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetworkIAMPolicy(ctx, "policy", &compute.SubnetworkIAMPolicyArgs{
 * 			Project:    pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Project),
 * 			Region:     pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Region),
 * 			Subnetwork: pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Name),
 * 			PolicyData: pulumi.String(admin.PolicyData),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/compute.networkUser",
 *         members: ["user:jane@example.com"],
 *         condition: {
 *             title: "expires_after_2019_12_31",
 *             description: "Expiring at midnight of 2019-12-31",
 *             expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         },
 *     }],
 * });
 * const policy = new gcp.compute.SubnetworkIAMPolicy("policy", {
 *     project: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].project,
 *     region: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].region,
 *     subnetwork: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].name,
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * admin = gcp.organizations.get_iam_policy(bindings=[gcp.organizations.GetIAMPolicyBindingArgs(
 *     role="roles/compute.networkUser",
 *     members=["user:jane@example.com"],
 *     condition=gcp.organizations.GetIAMPolicyBindingConditionArgs(
 *         title="expires_after_2019_12_31",
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     ),
 * )])
 * policy = gcp.compute.SubnetworkIAMPolicy("policy",
 *     project=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["project"],
 *     region=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["region"],
 *     subnetwork=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["name"],
 *     policy_data=admin.policy_data)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
 *         {
 *             Bindings = 
 *             {
 *                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
 *                 {
 *                     Role = "roles/compute.networkUser",
 *                     Members = 
 *                     {
 *                         "user:jane@example.com",
 *                     },
 *                     Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionArgs
 *                     {
 *                         Title = "expires_after_2019_12_31",
 *                         Description = "Expiring at midnight of 2019-12-31",
 *                         Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *                     },
 *                 },
 *             },
 *         }));
 *         var policy = new Gcp.Compute.SubnetworkIAMPolicy("policy", new Gcp.Compute.SubnetworkIAMPolicyArgs
 *         {
 *             Project = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Project,
 *             Region = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Region,
 *             Subnetwork = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Name,
 *             PolicyData = admin.Apply(admin => admin.PolicyData),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
 * 			Bindings: []organizations.GetIAMPolicyBinding{
 * 				organizations.GetIAMPolicyBinding{
 * 					Role: "roles/compute.networkUser",
 * 					Members: []string{
 * 						"user:jane@example.com",
 * 					},
 * 					Condition: organizations.GetIAMPolicyBindingCondition{
 * 						Title:       "expires_after_2019_12_31",
 * 						Description: "Expiring at midnight of 2019-12-31",
 * 						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetworkIAMPolicy(ctx, "policy", &compute.SubnetworkIAMPolicyArgs{
 * 			Project:    pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Project),
 * 			Region:     pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Region),
 * 			Subnetwork: pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Name),
 * 			PolicyData: pulumi.String(admin.PolicyData),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * ## google\_compute\_subnetwork\_iam\_binding
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const binding = new gcp.compute.SubnetworkIAMBinding("binding", {
 *     project: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].project,
 *     region: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].region,
 *     subnetwork: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].name,
 *     role: "roles/compute.networkUser",
 *     members: ["user:jane@example.com"],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * binding = gcp.compute.SubnetworkIAMBinding("binding",
 *     project=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["project"],
 *     region=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["region"],
 *     subnetwork=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["name"],
 *     role="roles/compute.networkUser",
 *     members=["user:jane@example.com"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var binding = new Gcp.Compute.SubnetworkIAMBinding("binding", new Gcp.Compute.SubnetworkIAMBindingArgs
 *         {
 *             Project = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Project,
 *             Region = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Region,
 *             Subnetwork = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Name,
 *             Role = "roles/compute.networkUser",
 *             Members = 
 *             {
 *                 "user:jane@example.com",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewSubnetworkIAMBinding(ctx, "binding", &compute.SubnetworkIAMBindingArgs{
 * 			Project:    pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Project),
 * 			Region:     pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Region),
 * 			Subnetwork: pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Name),
 * 			Role:       pulumi.String("roles/compute.networkUser"),
 * 			Members: pulumi.StringArray{
 * 				pulumi.String("user:jane@example.com"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const binding = new gcp.compute.SubnetworkIAMBinding("binding", {
 *     project: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].project,
 *     region: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].region,
 *     subnetwork: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].name,
 *     role: "roles/compute.networkUser",
 *     members: ["user:jane@example.com"],
 *     condition: {
 *         title: "expires_after_2019_12_31",
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * binding = gcp.compute.SubnetworkIAMBinding("binding",
 *     project=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["project"],
 *     region=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["region"],
 *     subnetwork=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["name"],
 *     role="roles/compute.networkUser",
 *     members=["user:jane@example.com"],
 *     condition=gcp.compute.SubnetworkIAMBindingConditionArgs(
 *         title="expires_after_2019_12_31",
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var binding = new Gcp.Compute.SubnetworkIAMBinding("binding", new Gcp.Compute.SubnetworkIAMBindingArgs
 *         {
 *             Project = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Project,
 *             Region = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Region,
 *             Subnetwork = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Name,
 *             Role = "roles/compute.networkUser",
 *             Members = 
 *             {
 *                 "user:jane@example.com",
 *             },
 *             Condition = new Gcp.Compute.Inputs.SubnetworkIAMBindingConditionArgs
 *             {
 *                 Title = "expires_after_2019_12_31",
 *                 Description = "Expiring at midnight of 2019-12-31",
 *                 Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewSubnetworkIAMBinding(ctx, "binding", &compute.SubnetworkIAMBindingArgs{
 * 			Project:    pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Project),
 * 			Region:     pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Region),
 * 			Subnetwork: pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Name),
 * 			Role:       pulumi.String("roles/compute.networkUser"),
 * 			Members: pulumi.StringArray{
 * 				pulumi.String("user:jane@example.com"),
 * 			},
 * 			Condition: &compute.SubnetworkIAMBindingConditionArgs{
 * 				Title:       pulumi.String("expires_after_2019_12_31"),
 * 				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
 * 				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * ## google\_compute\_subnetwork\_iam\_member
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const member = new gcp.compute.SubnetworkIAMMember("member", {
 *     project: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].project,
 *     region: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].region,
 *     subnetwork: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].name,
 *     role: "roles/compute.networkUser",
 *     member: "user:jane@example.com",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * member = gcp.compute.SubnetworkIAMMember("member",
 *     project=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["project"],
 *     region=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["region"],
 *     subnetwork=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["name"],
 *     role="roles/compute.networkUser",
 *     member="user:jane@example.com")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var member = new Gcp.Compute.SubnetworkIAMMember("member", new Gcp.Compute.SubnetworkIAMMemberArgs
 *         {
 *             Project = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Project,
 *             Region = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Region,
 *             Subnetwork = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Name,
 *             Role = "roles/compute.networkUser",
 *             Member = "user:jane@example.com",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewSubnetworkIAMMember(ctx, "member", &compute.SubnetworkIAMMemberArgs{
 * 			Project:    pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Project),
 * 			Region:     pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Region),
 * 			Subnetwork: pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Name),
 * 			Role:       pulumi.String("roles/compute.networkUser"),
 * 			Member:     pulumi.String("user:jane@example.com"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const member = new gcp.compute.SubnetworkIAMMember("member", {
 *     project: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].project,
 *     region: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].region,
 *     subnetwork: google_compute_subnetwork["network-with-private-secondary-ip-ranges"].name,
 *     role: "roles/compute.networkUser",
 *     member: "user:jane@example.com",
 *     condition: {
 *         title: "expires_after_2019_12_31",
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * member = gcp.compute.SubnetworkIAMMember("member",
 *     project=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["project"],
 *     region=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["region"],
 *     subnetwork=google_compute_subnetwork["network-with-private-secondary-ip-ranges"]["name"],
 *     role="roles/compute.networkUser",
 *     member="user:jane@example.com",
 *     condition=gcp.compute.SubnetworkIAMMemberConditionArgs(
 *         title="expires_after_2019_12_31",
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var member = new Gcp.Compute.SubnetworkIAMMember("member", new Gcp.Compute.SubnetworkIAMMemberArgs
 *         {
 *             Project = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Project,
 *             Region = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Region,
 *             Subnetwork = google_compute_subnetwork.Network_with_private_secondary_ip_ranges.Name,
 *             Role = "roles/compute.networkUser",
 *             Member = "user:jane@example.com",
 *             Condition = new Gcp.Compute.Inputs.SubnetworkIAMMemberConditionArgs
 *             {
 *                 Title = "expires_after_2019_12_31",
 *                 Description = "Expiring at midnight of 2019-12-31",
 *                 Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewSubnetworkIAMMember(ctx, "member", &compute.SubnetworkIAMMemberArgs{
 * 			Project:    pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Project),
 * 			Region:     pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Region),
 * 			Subnetwork: pulumi.Any(google_compute_subnetwork.Network - with - private - secondary - ip - ranges.Name),
 * 			Role:       pulumi.String("roles/compute.networkUser"),
 * 			Member:     pulumi.String("user:jane@example.com"),
 * 			Condition: &compute.SubnetworkIAMMemberConditionArgs{
 * 				Title:       pulumi.String("expires_after_2019_12_31"),
 * 				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
 * 				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/regions/{{region}}/subnetworks/{{name}} * {{project}}/{{region}}/{{name}} * {{region}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine subnetwork IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy editor "projects/{{project}}/regions/{{region}}/subnetworks/{{subnetwork}} roles/compute.networkUser user:jane@example.com"
 * ```
 * 
 *  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy editor "projects/{{project}}/regions/{{region}}/subnetworks/{{subnetwork}} roles/compute.networkUser"
 * ```
 * 
 *  IAM policy imports use the identifier of the resource in question, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy editor projects/{{project}}/regions/{{region}}/subnetworks/{{subnetwork}}
 * ```
 * 
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 * 
 * full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`. 
 */
@ResourceType(type="gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy")
public class SubnetworkIAMPolicy extends io.pulumi.resources.CustomResource {
    /**
     * (Computed) The etag of the IAM policy.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return (Computed) The etag of the IAM policy.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Export(name="policyData", type=String.class, parameters={})
    private Output<String> policyData;

    /**
     * @return The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    public Output<String> getPolicyData() {
        return this.policyData;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The GCP region for this subnetwork.
     * Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
     * region is specified, it is taken from the provider configuration.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The GCP region for this subnetwork.
     * Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
     * region is specified, it is taken from the provider configuration.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Export(name="subnetwork", type=String.class, parameters={})
    private Output<String> subnetwork;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> getSubnetwork() {
        return this.subnetwork;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SubnetworkIAMPolicy(String name) {
        this(name, SubnetworkIAMPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SubnetworkIAMPolicy(String name, SubnetworkIAMPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SubnetworkIAMPolicy(String name, SubnetworkIAMPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy", name, args == null ? SubnetworkIAMPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private SubnetworkIAMPolicy(String name, Output<String> id, @Nullable SubnetworkIAMPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SubnetworkIAMPolicy get(String name, Output<String> id, @Nullable SubnetworkIAMPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new SubnetworkIAMPolicy(name, id, state, options);
    }
}
