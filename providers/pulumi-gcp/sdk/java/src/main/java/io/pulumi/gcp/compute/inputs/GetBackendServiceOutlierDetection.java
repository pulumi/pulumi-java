// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.compute.inputs.GetBackendServiceOutlierDetectionBaseEjectionTime;
import io.pulumi.gcp.compute.inputs.GetBackendServiceOutlierDetectionInterval;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class GetBackendServiceOutlierDetection extends io.pulumi.resources.InvokeArgs {

    public static final GetBackendServiceOutlierDetection Empty = new GetBackendServiceOutlierDetection();

    @Import(name="baseEjectionTimes", required=true)
      private final List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes;

    public List<GetBackendServiceOutlierDetectionBaseEjectionTime> getBaseEjectionTimes() {
        return this.baseEjectionTimes;
    }

    @Import(name="consecutiveErrors", required=true)
      private final Integer consecutiveErrors;

    public Integer getConsecutiveErrors() {
        return this.consecutiveErrors;
    }

    @Import(name="consecutiveGatewayFailure", required=true)
      private final Integer consecutiveGatewayFailure;

    public Integer getConsecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure;
    }

    @Import(name="enforcingConsecutiveErrors", required=true)
      private final Integer enforcingConsecutiveErrors;

    public Integer getEnforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors;
    }

    @Import(name="enforcingConsecutiveGatewayFailure", required=true)
      private final Integer enforcingConsecutiveGatewayFailure;

    public Integer getEnforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure;
    }

    @Import(name="enforcingSuccessRate", required=true)
      private final Integer enforcingSuccessRate;

    public Integer getEnforcingSuccessRate() {
        return this.enforcingSuccessRate;
    }

    @Import(name="intervals", required=true)
      private final List<GetBackendServiceOutlierDetectionInterval> intervals;

    public List<GetBackendServiceOutlierDetectionInterval> getIntervals() {
        return this.intervals;
    }

    @Import(name="maxEjectionPercent", required=true)
      private final Integer maxEjectionPercent;

    public Integer getMaxEjectionPercent() {
        return this.maxEjectionPercent;
    }

    @Import(name="successRateMinimumHosts", required=true)
      private final Integer successRateMinimumHosts;

    public Integer getSuccessRateMinimumHosts() {
        return this.successRateMinimumHosts;
    }

    @Import(name="successRateRequestVolume", required=true)
      private final Integer successRateRequestVolume;

    public Integer getSuccessRateRequestVolume() {
        return this.successRateRequestVolume;
    }

    @Import(name="successRateStdevFactor", required=true)
      private final Integer successRateStdevFactor;

    public Integer getSuccessRateStdevFactor() {
        return this.successRateStdevFactor;
    }

    public GetBackendServiceOutlierDetection(
        List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes,
        Integer consecutiveErrors,
        Integer consecutiveGatewayFailure,
        Integer enforcingConsecutiveErrors,
        Integer enforcingConsecutiveGatewayFailure,
        Integer enforcingSuccessRate,
        List<GetBackendServiceOutlierDetectionInterval> intervals,
        Integer maxEjectionPercent,
        Integer successRateMinimumHosts,
        Integer successRateRequestVolume,
        Integer successRateStdevFactor) {
        this.baseEjectionTimes = Objects.requireNonNull(baseEjectionTimes, "expected parameter 'baseEjectionTimes' to be non-null");
        this.consecutiveErrors = Objects.requireNonNull(consecutiveErrors, "expected parameter 'consecutiveErrors' to be non-null");
        this.consecutiveGatewayFailure = Objects.requireNonNull(consecutiveGatewayFailure, "expected parameter 'consecutiveGatewayFailure' to be non-null");
        this.enforcingConsecutiveErrors = Objects.requireNonNull(enforcingConsecutiveErrors, "expected parameter 'enforcingConsecutiveErrors' to be non-null");
        this.enforcingConsecutiveGatewayFailure = Objects.requireNonNull(enforcingConsecutiveGatewayFailure, "expected parameter 'enforcingConsecutiveGatewayFailure' to be non-null");
        this.enforcingSuccessRate = Objects.requireNonNull(enforcingSuccessRate, "expected parameter 'enforcingSuccessRate' to be non-null");
        this.intervals = Objects.requireNonNull(intervals, "expected parameter 'intervals' to be non-null");
        this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent, "expected parameter 'maxEjectionPercent' to be non-null");
        this.successRateMinimumHosts = Objects.requireNonNull(successRateMinimumHosts, "expected parameter 'successRateMinimumHosts' to be non-null");
        this.successRateRequestVolume = Objects.requireNonNull(successRateRequestVolume, "expected parameter 'successRateRequestVolume' to be non-null");
        this.successRateStdevFactor = Objects.requireNonNull(successRateStdevFactor, "expected parameter 'successRateStdevFactor' to be non-null");
    }

    private GetBackendServiceOutlierDetection() {
        this.baseEjectionTimes = List.of();
        this.consecutiveErrors = null;
        this.consecutiveGatewayFailure = null;
        this.enforcingConsecutiveErrors = null;
        this.enforcingConsecutiveGatewayFailure = null;
        this.enforcingSuccessRate = null;
        this.intervals = List.of();
        this.maxEjectionPercent = null;
        this.successRateMinimumHosts = null;
        this.successRateRequestVolume = null;
        this.successRateStdevFactor = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceOutlierDetection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes;
        private Integer consecutiveErrors;
        private Integer consecutiveGatewayFailure;
        private Integer enforcingConsecutiveErrors;
        private Integer enforcingConsecutiveGatewayFailure;
        private Integer enforcingSuccessRate;
        private List<GetBackendServiceOutlierDetectionInterval> intervals;
        private Integer maxEjectionPercent;
        private Integer successRateMinimumHosts;
        private Integer successRateRequestVolume;
        private Integer successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendServiceOutlierDetection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTimes = defaults.baseEjectionTimes;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.intervals = defaults.intervals;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder baseEjectionTimes(List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes) {
            this.baseEjectionTimes = Objects.requireNonNull(baseEjectionTimes);
            return this;
        }

        public Builder consecutiveErrors(Integer consecutiveErrors) {
            this.consecutiveErrors = Objects.requireNonNull(consecutiveErrors);
            return this;
        }

        public Builder consecutiveGatewayFailure(Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = Objects.requireNonNull(consecutiveGatewayFailure);
            return this;
        }

        public Builder enforcingConsecutiveErrors(Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = Objects.requireNonNull(enforcingConsecutiveErrors);
            return this;
        }

        public Builder enforcingConsecutiveGatewayFailure(Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = Objects.requireNonNull(enforcingConsecutiveGatewayFailure);
            return this;
        }

        public Builder enforcingSuccessRate(Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = Objects.requireNonNull(enforcingSuccessRate);
            return this;
        }

        public Builder intervals(List<GetBackendServiceOutlierDetectionInterval> intervals) {
            this.intervals = Objects.requireNonNull(intervals);
            return this;
        }

        public Builder maxEjectionPercent(Integer maxEjectionPercent) {
            this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent);
            return this;
        }

        public Builder successRateMinimumHosts(Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = Objects.requireNonNull(successRateMinimumHosts);
            return this;
        }

        public Builder successRateRequestVolume(Integer successRateRequestVolume) {
            this.successRateRequestVolume = Objects.requireNonNull(successRateRequestVolume);
            return this;
        }

        public Builder successRateStdevFactor(Integer successRateStdevFactor) {
            this.successRateStdevFactor = Objects.requireNonNull(successRateStdevFactor);
            return this;
        }
        public GetBackendServiceOutlierDetection build() {
            return new GetBackendServiceOutlierDetection(baseEjectionTimes, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, intervals, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
