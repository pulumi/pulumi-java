// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaxonomyIamPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaxonomyIamPolicyArgs Empty = new TaxonomyIamPolicyArgs();

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @InputImport(name="policyData", required=true)
    private final Input<String> policyData;

    public Input<String> getPolicyData() {
        return this.policyData;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @InputImport(name="taxonomy", required=true)
    private final Input<String> taxonomy;

    public Input<String> getTaxonomy() {
        return this.taxonomy;
    }

    public TaxonomyIamPolicyArgs(
        Input<String> policyData,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        Input<String> taxonomy) {
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
        this.project = project;
        this.region = region;
        this.taxonomy = Objects.requireNonNull(taxonomy, "expected parameter 'taxonomy' to be non-null");
    }

    private TaxonomyIamPolicyArgs() {
        this.policyData = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.taxonomy = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaxonomyIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> policyData;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private Input<String> taxonomy;

        public Builder() {
    	      // Empty
        }

        public Builder(TaxonomyIamPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.taxonomy = defaults.taxonomy;
        }

        public Builder setPolicyData(Input<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }

        public Builder setPolicyData(String policyData) {
            this.policyData = Input.of(Objects.requireNonNull(policyData));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setTaxonomy(Input<String> taxonomy) {
            this.taxonomy = Objects.requireNonNull(taxonomy);
            return this;
        }

        public Builder setTaxonomy(String taxonomy) {
            this.taxonomy = Input.of(Objects.requireNonNull(taxonomy));
            return this;
        }

        public TaxonomyIamPolicyArgs build() {
            return new TaxonomyIamPolicyArgs(policyData, project, region, taxonomy);
        }
    }
}
