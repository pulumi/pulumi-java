// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionAutomaticScalingArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionBasicScalingArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionHandlerArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionLibraryArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionManualScalingArgs;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionVpcAccessConnectorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StandardAppVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final StandardAppVersionArgs Empty = new StandardAppVersionArgs();

    /**
     * Automatic scaling is based on request rate, response latencies, and other application metrics.
     * Structure is documented below.
     * 
     */
    @InputImport(name="automaticScaling")
    private final @Nullable Input<StandardAppVersionAutomaticScalingArgs> automaticScaling;

    public Input<StandardAppVersionAutomaticScalingArgs> getAutomaticScaling() {
        return this.automaticScaling == null ? Input.empty() : this.automaticScaling;
    }

    /**
     * Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
     * Structure is documented below.
     * 
     */
    @InputImport(name="basicScaling")
    private final @Nullable Input<StandardAppVersionBasicScalingArgs> basicScaling;

    public Input<StandardAppVersionBasicScalingArgs> getBasicScaling() {
        return this.basicScaling == null ? Input.empty() : this.basicScaling;
    }

    /**
     * If set to `true`, the service will be deleted if it is the last version.
     * 
     */
    @InputImport(name="deleteServiceOnDestroy")
    private final @Nullable Input<Boolean> deleteServiceOnDestroy;

    public Input<Boolean> getDeleteServiceOnDestroy() {
        return this.deleteServiceOnDestroy == null ? Input.empty() : this.deleteServiceOnDestroy;
    }

    /**
     * Code and application artifacts that make up this version.
     * Structure is documented below.
     * 
     */
    @InputImport(name="deployment", required=true)
    private final Input<StandardAppVersionDeploymentArgs> deployment;

    public Input<StandardAppVersionDeploymentArgs> getDeployment() {
        return this.deployment;
    }

    /**
     * The entrypoint for the application.
     * Structure is documented below.
     * 
     */
    @InputImport(name="entrypoint", required=true)
    private final Input<StandardAppVersionEntrypointArgs> entrypoint;

    public Input<StandardAppVersionEntrypointArgs> getEntrypoint() {
        return this.entrypoint;
    }

    /**
     * Environment variables available to the application.
     * 
     */
    @InputImport(name="envVariables")
    private final @Nullable Input<Map<String,String>> envVariables;

    public Input<Map<String,String>> getEnvVariables() {
        return this.envVariables == null ? Input.empty() : this.envVariables;
    }

    /**
     * An ordered list of URL-matching patterns that should be applied to incoming requests.
     * The first matching URL handles the request and other request handlers are not attempted.
     * Structure is documented below.
     * 
     */
    @InputImport(name="handlers")
    private final @Nullable Input<List<StandardAppVersionHandlerArgs>> handlers;

    public Input<List<StandardAppVersionHandlerArgs>> getHandlers() {
        return this.handlers == null ? Input.empty() : this.handlers;
    }

    /**
     * A list of the types of messages that this application is able to receive.
     * Each value may be one of `INBOUND_SERVICE_MAIL`, `INBOUND_SERVICE_MAIL_BOUNCE`, `INBOUND_SERVICE_XMPP_ERROR`, `INBOUND_SERVICE_XMPP_MESSAGE`, `INBOUND_SERVICE_XMPP_SUBSCRIBE`, `INBOUND_SERVICE_XMPP_PRESENCE`, `INBOUND_SERVICE_CHANNEL_PRESENCE`, and `INBOUND_SERVICE_WARMUP`.
     * 
     */
    @InputImport(name="inboundServices")
    private final @Nullable Input<List<String>> inboundServices;

    public Input<List<String>> getInboundServices() {
        return this.inboundServices == null ? Input.empty() : this.inboundServices;
    }

    /**
     * Instance class that is used to run this version. Valid values are
     * AutomaticScaling: F1, F2, F4, F4_1G
     * BasicScaling or ManualScaling: B1, B2, B4, B4_1G, B8
     * Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If no scaling is specified, AutomaticScaling is chosen.
     * 
     */
    @InputImport(name="instanceClass")
    private final @Nullable Input<String> instanceClass;

    public Input<String> getInstanceClass() {
        return this.instanceClass == null ? Input.empty() : this.instanceClass;
    }

    /**
     * Configuration for third-party Python runtime libraries that are required by the application.
     * Structure is documented below.
     * 
     */
    @InputImport(name="libraries")
    private final @Nullable Input<List<StandardAppVersionLibraryArgs>> libraries;

    public Input<List<StandardAppVersionLibraryArgs>> getLibraries() {
        return this.libraries == null ? Input.empty() : this.libraries;
    }

    /**
     * A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
     * Structure is documented below.
     * 
     */
    @InputImport(name="manualScaling")
    private final @Nullable Input<StandardAppVersionManualScalingArgs> manualScaling;

    public Input<StandardAppVersionManualScalingArgs> getManualScaling() {
        return this.manualScaling == null ? Input.empty() : this.manualScaling;
    }

    /**
     * If set to `true`, the application version will not be deleted.
     * 
     */
    @InputImport(name="noopOnDestroy")
    private final @Nullable Input<Boolean> noopOnDestroy;

    public Input<Boolean> getNoopOnDestroy() {
        return this.noopOnDestroy == null ? Input.empty() : this.noopOnDestroy;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Desired runtime. Example python27.
     * 
     */
    @InputImport(name="runtime", required=true)
    private final Input<String> runtime;

    public Input<String> getRuntime() {
        return this.runtime;
    }

    /**
     * The version of the API in the given runtime environment.
     * Please see the app.yaml reference for valid values at `https://cloud.google.com/appengine/docs/standard/<language>/config/appref`\
     * Substitute `<language>` with `python`, `java`, `php`, `ruby`, `go` or `nodejs`.
     * 
     */
    @InputImport(name="runtimeApiVersion")
    private final @Nullable Input<String> runtimeApiVersion;

    public Input<String> getRuntimeApiVersion() {
        return this.runtimeApiVersion == null ? Input.empty() : this.runtimeApiVersion;
    }

    /**
     * AppEngine service resource
     * 
     */
    @InputImport(name="service", required=true)
    private final Input<String> service;

    public Input<String> getService() {
        return this.service;
    }

    /**
     * Whether multiple requests can be dispatched to this version at once.
     * 
     */
    @InputImport(name="threadsafe")
    private final @Nullable Input<Boolean> threadsafe;

    public Input<Boolean> getThreadsafe() {
        return this.threadsafe == null ? Input.empty() : this.threadsafe;
    }

    /**
     * Relative name of the version within the service. For example, `v1`. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
     * 
     */
    @InputImport(name="versionId")
    private final @Nullable Input<String> versionId;

    public Input<String> getVersionId() {
        return this.versionId == null ? Input.empty() : this.versionId;
    }

    /**
     * Enables VPC connectivity for standard apps.
     * Structure is documented below.
     * 
     */
    @InputImport(name="vpcAccessConnector")
    private final @Nullable Input<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector;

    public Input<StandardAppVersionVpcAccessConnectorArgs> getVpcAccessConnector() {
        return this.vpcAccessConnector == null ? Input.empty() : this.vpcAccessConnector;
    }

    public StandardAppVersionArgs(
        @Nullable Input<StandardAppVersionAutomaticScalingArgs> automaticScaling,
        @Nullable Input<StandardAppVersionBasicScalingArgs> basicScaling,
        @Nullable Input<Boolean> deleteServiceOnDestroy,
        Input<StandardAppVersionDeploymentArgs> deployment,
        Input<StandardAppVersionEntrypointArgs> entrypoint,
        @Nullable Input<Map<String,String>> envVariables,
        @Nullable Input<List<StandardAppVersionHandlerArgs>> handlers,
        @Nullable Input<List<String>> inboundServices,
        @Nullable Input<String> instanceClass,
        @Nullable Input<List<StandardAppVersionLibraryArgs>> libraries,
        @Nullable Input<StandardAppVersionManualScalingArgs> manualScaling,
        @Nullable Input<Boolean> noopOnDestroy,
        @Nullable Input<String> project,
        Input<String> runtime,
        @Nullable Input<String> runtimeApiVersion,
        Input<String> service,
        @Nullable Input<Boolean> threadsafe,
        @Nullable Input<String> versionId,
        @Nullable Input<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector) {
        this.automaticScaling = automaticScaling;
        this.basicScaling = basicScaling;
        this.deleteServiceOnDestroy = deleteServiceOnDestroy;
        this.deployment = Objects.requireNonNull(deployment, "expected parameter 'deployment' to be non-null");
        this.entrypoint = Objects.requireNonNull(entrypoint, "expected parameter 'entrypoint' to be non-null");
        this.envVariables = envVariables;
        this.handlers = handlers;
        this.inboundServices = inboundServices;
        this.instanceClass = instanceClass;
        this.libraries = libraries;
        this.manualScaling = manualScaling;
        this.noopOnDestroy = noopOnDestroy;
        this.project = project;
        this.runtime = Objects.requireNonNull(runtime, "expected parameter 'runtime' to be non-null");
        this.runtimeApiVersion = runtimeApiVersion;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.threadsafe = threadsafe;
        this.versionId = versionId;
        this.vpcAccessConnector = vpcAccessConnector;
    }

    private StandardAppVersionArgs() {
        this.automaticScaling = Input.empty();
        this.basicScaling = Input.empty();
        this.deleteServiceOnDestroy = Input.empty();
        this.deployment = Input.empty();
        this.entrypoint = Input.empty();
        this.envVariables = Input.empty();
        this.handlers = Input.empty();
        this.inboundServices = Input.empty();
        this.instanceClass = Input.empty();
        this.libraries = Input.empty();
        this.manualScaling = Input.empty();
        this.noopOnDestroy = Input.empty();
        this.project = Input.empty();
        this.runtime = Input.empty();
        this.runtimeApiVersion = Input.empty();
        this.service = Input.empty();
        this.threadsafe = Input.empty();
        this.versionId = Input.empty();
        this.vpcAccessConnector = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardAppVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<StandardAppVersionAutomaticScalingArgs> automaticScaling;
        private @Nullable Input<StandardAppVersionBasicScalingArgs> basicScaling;
        private @Nullable Input<Boolean> deleteServiceOnDestroy;
        private Input<StandardAppVersionDeploymentArgs> deployment;
        private Input<StandardAppVersionEntrypointArgs> entrypoint;
        private @Nullable Input<Map<String,String>> envVariables;
        private @Nullable Input<List<StandardAppVersionHandlerArgs>> handlers;
        private @Nullable Input<List<String>> inboundServices;
        private @Nullable Input<String> instanceClass;
        private @Nullable Input<List<StandardAppVersionLibraryArgs>> libraries;
        private @Nullable Input<StandardAppVersionManualScalingArgs> manualScaling;
        private @Nullable Input<Boolean> noopOnDestroy;
        private @Nullable Input<String> project;
        private Input<String> runtime;
        private @Nullable Input<String> runtimeApiVersion;
        private Input<String> service;
        private @Nullable Input<Boolean> threadsafe;
        private @Nullable Input<String> versionId;
        private @Nullable Input<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardAppVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticScaling = defaults.automaticScaling;
    	      this.basicScaling = defaults.basicScaling;
    	      this.deleteServiceOnDestroy = defaults.deleteServiceOnDestroy;
    	      this.deployment = defaults.deployment;
    	      this.entrypoint = defaults.entrypoint;
    	      this.envVariables = defaults.envVariables;
    	      this.handlers = defaults.handlers;
    	      this.inboundServices = defaults.inboundServices;
    	      this.instanceClass = defaults.instanceClass;
    	      this.libraries = defaults.libraries;
    	      this.manualScaling = defaults.manualScaling;
    	      this.noopOnDestroy = defaults.noopOnDestroy;
    	      this.project = defaults.project;
    	      this.runtime = defaults.runtime;
    	      this.runtimeApiVersion = defaults.runtimeApiVersion;
    	      this.service = defaults.service;
    	      this.threadsafe = defaults.threadsafe;
    	      this.versionId = defaults.versionId;
    	      this.vpcAccessConnector = defaults.vpcAccessConnector;
        }

        public Builder setAutomaticScaling(@Nullable Input<StandardAppVersionAutomaticScalingArgs> automaticScaling) {
            this.automaticScaling = automaticScaling;
            return this;
        }

        public Builder setAutomaticScaling(@Nullable StandardAppVersionAutomaticScalingArgs automaticScaling) {
            this.automaticScaling = Input.ofNullable(automaticScaling);
            return this;
        }

        public Builder setBasicScaling(@Nullable Input<StandardAppVersionBasicScalingArgs> basicScaling) {
            this.basicScaling = basicScaling;
            return this;
        }

        public Builder setBasicScaling(@Nullable StandardAppVersionBasicScalingArgs basicScaling) {
            this.basicScaling = Input.ofNullable(basicScaling);
            return this;
        }

        public Builder setDeleteServiceOnDestroy(@Nullable Input<Boolean> deleteServiceOnDestroy) {
            this.deleteServiceOnDestroy = deleteServiceOnDestroy;
            return this;
        }

        public Builder setDeleteServiceOnDestroy(@Nullable Boolean deleteServiceOnDestroy) {
            this.deleteServiceOnDestroy = Input.ofNullable(deleteServiceOnDestroy);
            return this;
        }

        public Builder setDeployment(Input<StandardAppVersionDeploymentArgs> deployment) {
            this.deployment = Objects.requireNonNull(deployment);
            return this;
        }

        public Builder setDeployment(StandardAppVersionDeploymentArgs deployment) {
            this.deployment = Input.of(Objects.requireNonNull(deployment));
            return this;
        }

        public Builder setEntrypoint(Input<StandardAppVersionEntrypointArgs> entrypoint) {
            this.entrypoint = Objects.requireNonNull(entrypoint);
            return this;
        }

        public Builder setEntrypoint(StandardAppVersionEntrypointArgs entrypoint) {
            this.entrypoint = Input.of(Objects.requireNonNull(entrypoint));
            return this;
        }

        public Builder setEnvVariables(@Nullable Input<Map<String,String>> envVariables) {
            this.envVariables = envVariables;
            return this;
        }

        public Builder setEnvVariables(@Nullable Map<String,String> envVariables) {
            this.envVariables = Input.ofNullable(envVariables);
            return this;
        }

        public Builder setHandlers(@Nullable Input<List<StandardAppVersionHandlerArgs>> handlers) {
            this.handlers = handlers;
            return this;
        }

        public Builder setHandlers(@Nullable List<StandardAppVersionHandlerArgs> handlers) {
            this.handlers = Input.ofNullable(handlers);
            return this;
        }

        public Builder setInboundServices(@Nullable Input<List<String>> inboundServices) {
            this.inboundServices = inboundServices;
            return this;
        }

        public Builder setInboundServices(@Nullable List<String> inboundServices) {
            this.inboundServices = Input.ofNullable(inboundServices);
            return this;
        }

        public Builder setInstanceClass(@Nullable Input<String> instanceClass) {
            this.instanceClass = instanceClass;
            return this;
        }

        public Builder setInstanceClass(@Nullable String instanceClass) {
            this.instanceClass = Input.ofNullable(instanceClass);
            return this;
        }

        public Builder setLibraries(@Nullable Input<List<StandardAppVersionLibraryArgs>> libraries) {
            this.libraries = libraries;
            return this;
        }

        public Builder setLibraries(@Nullable List<StandardAppVersionLibraryArgs> libraries) {
            this.libraries = Input.ofNullable(libraries);
            return this;
        }

        public Builder setManualScaling(@Nullable Input<StandardAppVersionManualScalingArgs> manualScaling) {
            this.manualScaling = manualScaling;
            return this;
        }

        public Builder setManualScaling(@Nullable StandardAppVersionManualScalingArgs manualScaling) {
            this.manualScaling = Input.ofNullable(manualScaling);
            return this;
        }

        public Builder setNoopOnDestroy(@Nullable Input<Boolean> noopOnDestroy) {
            this.noopOnDestroy = noopOnDestroy;
            return this;
        }

        public Builder setNoopOnDestroy(@Nullable Boolean noopOnDestroy) {
            this.noopOnDestroy = Input.ofNullable(noopOnDestroy);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRuntime(Input<String> runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }

        public Builder setRuntime(String runtime) {
            this.runtime = Input.of(Objects.requireNonNull(runtime));
            return this;
        }

        public Builder setRuntimeApiVersion(@Nullable Input<String> runtimeApiVersion) {
            this.runtimeApiVersion = runtimeApiVersion;
            return this;
        }

        public Builder setRuntimeApiVersion(@Nullable String runtimeApiVersion) {
            this.runtimeApiVersion = Input.ofNullable(runtimeApiVersion);
            return this;
        }

        public Builder setService(Input<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }

        public Builder setService(String service) {
            this.service = Input.of(Objects.requireNonNull(service));
            return this;
        }

        public Builder setThreadsafe(@Nullable Input<Boolean> threadsafe) {
            this.threadsafe = threadsafe;
            return this;
        }

        public Builder setThreadsafe(@Nullable Boolean threadsafe) {
            this.threadsafe = Input.ofNullable(threadsafe);
            return this;
        }

        public Builder setVersionId(@Nullable Input<String> versionId) {
            this.versionId = versionId;
            return this;
        }

        public Builder setVersionId(@Nullable String versionId) {
            this.versionId = Input.ofNullable(versionId);
            return this;
        }

        public Builder setVpcAccessConnector(@Nullable Input<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector) {
            this.vpcAccessConnector = vpcAccessConnector;
            return this;
        }

        public Builder setVpcAccessConnector(@Nullable StandardAppVersionVpcAccessConnectorArgs vpcAccessConnector) {
            this.vpcAccessConnector = Input.ofNullable(vpcAccessConnector);
            return this;
        }

        public StandardAppVersionArgs build() {
            return new StandardAppVersionArgs(automaticScaling, basicScaling, deleteServiceOnDestroy, deployment, entrypoint, envVariables, handlers, inboundServices, instanceClass, libraries, manualScaling, noopOnDestroy, project, runtime, runtimeApiVersion, service, threadsafe, versionId, vpcAccessConnector);
        }
    }
}
