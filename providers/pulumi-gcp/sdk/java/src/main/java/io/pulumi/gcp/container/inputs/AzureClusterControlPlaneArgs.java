// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneDatabaseEncryptionArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneMainVolumeArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneProxyConfigArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneReplicaPlacementArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneRootVolumeArgs;
import io.pulumi.gcp.container.inputs.AzureClusterControlPlaneSshConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AzureClusterControlPlaneArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureClusterControlPlaneArgs Empty = new AzureClusterControlPlaneArgs();

    @InputImport(name="databaseEncryption")
    private final @Nullable Input<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption;

    public Input<AzureClusterControlPlaneDatabaseEncryptionArgs> getDatabaseEncryption() {
        return this.databaseEncryption == null ? Input.empty() : this.databaseEncryption;
    }

    @InputImport(name="mainVolume")
    private final @Nullable Input<AzureClusterControlPlaneMainVolumeArgs> mainVolume;

    public Input<AzureClusterControlPlaneMainVolumeArgs> getMainVolume() {
        return this.mainVolume == null ? Input.empty() : this.mainVolume;
    }

    @InputImport(name="proxyConfig")
    private final @Nullable Input<AzureClusterControlPlaneProxyConfigArgs> proxyConfig;

    public Input<AzureClusterControlPlaneProxyConfigArgs> getProxyConfig() {
        return this.proxyConfig == null ? Input.empty() : this.proxyConfig;
    }

    @InputImport(name="replicaPlacements")
    private final @Nullable Input<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements;

    public Input<List<AzureClusterControlPlaneReplicaPlacementArgs>> getReplicaPlacements() {
        return this.replicaPlacements == null ? Input.empty() : this.replicaPlacements;
    }

    @InputImport(name="rootVolume")
    private final @Nullable Input<AzureClusterControlPlaneRootVolumeArgs> rootVolume;

    public Input<AzureClusterControlPlaneRootVolumeArgs> getRootVolume() {
        return this.rootVolume == null ? Input.empty() : this.rootVolume;
    }

    @InputImport(name="sshConfig", required=true)
    private final Input<AzureClusterControlPlaneSshConfigArgs> sshConfig;

    public Input<AzureClusterControlPlaneSshConfigArgs> getSshConfig() {
        return this.sshConfig;
    }

    @InputImport(name="subnetId", required=true)
    private final Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId;
    }

    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="version", required=true)
    private final Input<String> version;

    public Input<String> getVersion() {
        return this.version;
    }

    @InputImport(name="vmSize")
    private final @Nullable Input<String> vmSize;

    public Input<String> getVmSize() {
        return this.vmSize == null ? Input.empty() : this.vmSize;
    }

    public AzureClusterControlPlaneArgs(
        @Nullable Input<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption,
        @Nullable Input<AzureClusterControlPlaneMainVolumeArgs> mainVolume,
        @Nullable Input<AzureClusterControlPlaneProxyConfigArgs> proxyConfig,
        @Nullable Input<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements,
        @Nullable Input<AzureClusterControlPlaneRootVolumeArgs> rootVolume,
        Input<AzureClusterControlPlaneSshConfigArgs> sshConfig,
        Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags,
        Input<String> version,
        @Nullable Input<String> vmSize) {
        this.databaseEncryption = databaseEncryption;
        this.mainVolume = mainVolume;
        this.proxyConfig = proxyConfig;
        this.replicaPlacements = replicaPlacements;
        this.rootVolume = rootVolume;
        this.sshConfig = Objects.requireNonNull(sshConfig, "expected parameter 'sshConfig' to be non-null");
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.vmSize = vmSize;
    }

    private AzureClusterControlPlaneArgs() {
        this.databaseEncryption = Input.empty();
        this.mainVolume = Input.empty();
        this.proxyConfig = Input.empty();
        this.replicaPlacements = Input.empty();
        this.rootVolume = Input.empty();
        this.sshConfig = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
        this.version = Input.empty();
        this.vmSize = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureClusterControlPlaneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption;
        private @Nullable Input<AzureClusterControlPlaneMainVolumeArgs> mainVolume;
        private @Nullable Input<AzureClusterControlPlaneProxyConfigArgs> proxyConfig;
        private @Nullable Input<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements;
        private @Nullable Input<AzureClusterControlPlaneRootVolumeArgs> rootVolume;
        private Input<AzureClusterControlPlaneSshConfigArgs> sshConfig;
        private Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> version;
        private @Nullable Input<String> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureClusterControlPlaneArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseEncryption = defaults.databaseEncryption;
    	      this.mainVolume = defaults.mainVolume;
    	      this.proxyConfig = defaults.proxyConfig;
    	      this.replicaPlacements = defaults.replicaPlacements;
    	      this.rootVolume = defaults.rootVolume;
    	      this.sshConfig = defaults.sshConfig;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder setDatabaseEncryption(@Nullable Input<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption) {
            this.databaseEncryption = databaseEncryption;
            return this;
        }

        public Builder setDatabaseEncryption(@Nullable AzureClusterControlPlaneDatabaseEncryptionArgs databaseEncryption) {
            this.databaseEncryption = Input.ofNullable(databaseEncryption);
            return this;
        }

        public Builder setMainVolume(@Nullable Input<AzureClusterControlPlaneMainVolumeArgs> mainVolume) {
            this.mainVolume = mainVolume;
            return this;
        }

        public Builder setMainVolume(@Nullable AzureClusterControlPlaneMainVolumeArgs mainVolume) {
            this.mainVolume = Input.ofNullable(mainVolume);
            return this;
        }

        public Builder setProxyConfig(@Nullable Input<AzureClusterControlPlaneProxyConfigArgs> proxyConfig) {
            this.proxyConfig = proxyConfig;
            return this;
        }

        public Builder setProxyConfig(@Nullable AzureClusterControlPlaneProxyConfigArgs proxyConfig) {
            this.proxyConfig = Input.ofNullable(proxyConfig);
            return this;
        }

        public Builder setReplicaPlacements(@Nullable Input<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements) {
            this.replicaPlacements = replicaPlacements;
            return this;
        }

        public Builder setReplicaPlacements(@Nullable List<AzureClusterControlPlaneReplicaPlacementArgs> replicaPlacements) {
            this.replicaPlacements = Input.ofNullable(replicaPlacements);
            return this;
        }

        public Builder setRootVolume(@Nullable Input<AzureClusterControlPlaneRootVolumeArgs> rootVolume) {
            this.rootVolume = rootVolume;
            return this;
        }

        public Builder setRootVolume(@Nullable AzureClusterControlPlaneRootVolumeArgs rootVolume) {
            this.rootVolume = Input.ofNullable(rootVolume);
            return this;
        }

        public Builder setSshConfig(Input<AzureClusterControlPlaneSshConfigArgs> sshConfig) {
            this.sshConfig = Objects.requireNonNull(sshConfig);
            return this;
        }

        public Builder setSshConfig(AzureClusterControlPlaneSshConfigArgs sshConfig) {
            this.sshConfig = Input.of(Objects.requireNonNull(sshConfig));
            return this;
        }

        public Builder setSubnetId(Input<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder setSubnetId(String subnetId) {
            this.subnetId = Input.of(Objects.requireNonNull(subnetId));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVersion(Input<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Input.of(Objects.requireNonNull(version));
            return this;
        }

        public Builder setVmSize(@Nullable Input<String> vmSize) {
            this.vmSize = vmSize;
            return this;
        }

        public Builder setVmSize(@Nullable String vmSize) {
            this.vmSize = Input.ofNullable(vmSize);
            return this;
        }

        public AzureClusterControlPlaneArgs build() {
            return new AzureClusterControlPlaneArgs(databaseEncryption, mainVolume, proxyConfig, replicaPlacements, rootVolume, sshConfig, subnetId, tags, version, vmSize);
        }
    }
}
