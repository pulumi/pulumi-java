// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.certificateauthority.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.certificateauthority.inputs.AuthorityAccessUrlGetArgs;
import io.pulumi.gcp.certificateauthority.inputs.AuthorityConfigGetArgs;
import io.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AuthorityState extends io.pulumi.resources.ResourceArgs {

    public static final AuthorityState Empty = new AuthorityState();

    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     * 
     */
    @Import(name="accessUrls")
      private final @Nullable Output<List<AuthorityAccessUrlGetArgs>> accessUrls;

    public Output<List<AuthorityAccessUrlGetArgs>> getAccessUrls() {
        return this.accessUrls == null ? Output.empty() : this.accessUrls;
    }

    /**
     * The user provided Resource ID for this Certificate Authority.
     * 
     */
    @Import(name="certificateAuthorityId")
      private final @Nullable Output<String> certificateAuthorityId;

    public Output<String> getCertificateAuthorityId() {
        return this.certificateAuthorityId == null ? Output.empty() : this.certificateAuthorityId;
    }

    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     * 
     */
    @Import(name="config")
      private final @Nullable Output<AuthorityConfigGetArgs> config;

    public Output<AuthorityConfigGetArgs> getConfig() {
        return this.config == null ? Output.empty() : this.config;
    }

    /**
     * The time at which this CertificateAuthority was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
     * resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> getCreateTime() {
        return this.createTime == null ? Output.empty() : this.createTime;
    }

    /**
     * The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
     * such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
     * (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
     * my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
     * created.
     * 
     */
    @Import(name="gcsBucket")
      private final @Nullable Output<String> gcsBucket;

    public Output<String> getGcsBucket() {
        return this.gcsBucket == null ? Output.empty() : this.gcsBucket;
    }

    /**
     * This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
     * Use with care. Defaults to `false`.
     * 
     */
    @Import(name="ignoreActiveCertificatesOnDeletion")
      private final @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion;

    public Output<Boolean> getIgnoreActiveCertificatesOnDeletion() {
        return this.ignoreActiveCertificatesOnDeletion == null ? Output.empty() : this.ignoreActiveCertificatesOnDeletion;
    }

    /**
     * Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
     * is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
     * certificate. Otherwise, it is used to sign a CSR.
     * Structure is documented below.
     * 
     */
    @Import(name="keySpec")
      private final @Nullable Output<AuthorityKeySpecGetArgs> keySpec;

    public Output<AuthorityKeySpecGetArgs> getKeySpec() {
        return this.keySpec == null ? Output.empty() : this.keySpec;
    }

    /**
     * Labels with user-defined metadata.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
     * "1.3kg", "count": "3" }.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @Import(name="lifetime")
      private final @Nullable Output<String> lifetime;

    public Output<String> getLifetime() {
        return this.lifetime == null ? Output.empty() : this.lifetime;
    }

    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The resource name for this CertificateAuthority in the format projects/*{@literal /}locations/*{@literal /}certificateAuthorities/*.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such
     * that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the
     * current CertificateAuthority's certificate.
     * 
     */
    @Import(name="pemCaCertificates")
      private final @Nullable Output<List<String>> pemCaCertificates;

    public Output<List<String>> getPemCaCertificates() {
        return this.pemCaCertificates == null ? Output.empty() : this.pemCaCertificates;
    }

    /**
     * The name of the CaPool this Certificate Authority belongs to.
     * 
     */
    @Import(name="pool")
      private final @Nullable Output<String> pool;

    public Output<String> getPool() {
        return this.pool == null ? Output.empty() : this.pool;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The State for this CertificateAuthority.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    /**
     * The Type of this CertificateAuthority.
     * > **Note:** For `SUBORDINATE` Certificate Authorities, they need to
     * be manually activated (via Cloud Console of `gcloud`) before they can
     * issue certificates.
     * Default value is `SELF_SIGNED`.
     * Possible values are `SELF_SIGNED` and `SUBORDINATE`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    /**
     * The time at which this CertificateAuthority was updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
     * resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Import(name="updateTime")
      private final @Nullable Output<String> updateTime;

    public Output<String> getUpdateTime() {
        return this.updateTime == null ? Output.empty() : this.updateTime;
    }

    public AuthorityState(
        @Nullable Output<List<AuthorityAccessUrlGetArgs>> accessUrls,
        @Nullable Output<String> certificateAuthorityId,
        @Nullable Output<AuthorityConfigGetArgs> config,
        @Nullable Output<String> createTime,
        @Nullable Output<String> gcsBucket,
        @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion,
        @Nullable Output<AuthorityKeySpecGetArgs> keySpec,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> lifetime,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<List<String>> pemCaCertificates,
        @Nullable Output<String> pool,
        @Nullable Output<String> project,
        @Nullable Output<String> state,
        @Nullable Output<String> type,
        @Nullable Output<String> updateTime) {
        this.accessUrls = accessUrls;
        this.certificateAuthorityId = certificateAuthorityId;
        this.config = config;
        this.createTime = createTime;
        this.gcsBucket = gcsBucket;
        this.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
        this.keySpec = keySpec;
        this.labels = labels;
        this.lifetime = lifetime;
        this.location = location;
        this.name = name;
        this.pemCaCertificates = pemCaCertificates;
        this.pool = pool;
        this.project = project;
        this.state = state;
        this.type = type;
        this.updateTime = updateTime;
    }

    private AuthorityState() {
        this.accessUrls = Output.empty();
        this.certificateAuthorityId = Output.empty();
        this.config = Output.empty();
        this.createTime = Output.empty();
        this.gcsBucket = Output.empty();
        this.ignoreActiveCertificatesOnDeletion = Output.empty();
        this.keySpec = Output.empty();
        this.labels = Output.empty();
        this.lifetime = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.pemCaCertificates = Output.empty();
        this.pool = Output.empty();
        this.project = Output.empty();
        this.state = Output.empty();
        this.type = Output.empty();
        this.updateTime = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AuthorityAccessUrlGetArgs>> accessUrls;
        private @Nullable Output<String> certificateAuthorityId;
        private @Nullable Output<AuthorityConfigGetArgs> config;
        private @Nullable Output<String> createTime;
        private @Nullable Output<String> gcsBucket;
        private @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion;
        private @Nullable Output<AuthorityKeySpecGetArgs> keySpec;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> lifetime;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<List<String>> pemCaCertificates;
        private @Nullable Output<String> pool;
        private @Nullable Output<String> project;
        private @Nullable Output<String> state;
        private @Nullable Output<String> type;
        private @Nullable Output<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorityState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUrls = defaults.accessUrls;
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.ignoreActiveCertificatesOnDeletion = defaults.ignoreActiveCertificatesOnDeletion;
    	      this.keySpec = defaults.keySpec;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pemCaCertificates = defaults.pemCaCertificates;
    	      this.pool = defaults.pool;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder accessUrls(@Nullable Output<List<AuthorityAccessUrlGetArgs>> accessUrls) {
            this.accessUrls = accessUrls;
            return this;
        }

        public Builder accessUrls(@Nullable List<AuthorityAccessUrlGetArgs> accessUrls) {
            this.accessUrls = Output.ofNullable(accessUrls);
            return this;
        }

        public Builder certificateAuthorityId(@Nullable Output<String> certificateAuthorityId) {
            this.certificateAuthorityId = certificateAuthorityId;
            return this;
        }

        public Builder certificateAuthorityId(@Nullable String certificateAuthorityId) {
            this.certificateAuthorityId = Output.ofNullable(certificateAuthorityId);
            return this;
        }

        public Builder config(@Nullable Output<AuthorityConfigGetArgs> config) {
            this.config = config;
            return this;
        }

        public Builder config(@Nullable AuthorityConfigGetArgs config) {
            this.config = Output.ofNullable(config);
            return this;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder createTime(@Nullable String createTime) {
            this.createTime = Output.ofNullable(createTime);
            return this;
        }

        public Builder gcsBucket(@Nullable Output<String> gcsBucket) {
            this.gcsBucket = gcsBucket;
            return this;
        }

        public Builder gcsBucket(@Nullable String gcsBucket) {
            this.gcsBucket = Output.ofNullable(gcsBucket);
            return this;
        }

        public Builder ignoreActiveCertificatesOnDeletion(@Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion) {
            this.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
            return this;
        }

        public Builder ignoreActiveCertificatesOnDeletion(@Nullable Boolean ignoreActiveCertificatesOnDeletion) {
            this.ignoreActiveCertificatesOnDeletion = Output.ofNullable(ignoreActiveCertificatesOnDeletion);
            return this;
        }

        public Builder keySpec(@Nullable Output<AuthorityKeySpecGetArgs> keySpec) {
            this.keySpec = keySpec;
            return this;
        }

        public Builder keySpec(@Nullable AuthorityKeySpecGetArgs keySpec) {
            this.keySpec = Output.ofNullable(keySpec);
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder lifetime(@Nullable Output<String> lifetime) {
            this.lifetime = lifetime;
            return this;
        }

        public Builder lifetime(@Nullable String lifetime) {
            this.lifetime = Output.ofNullable(lifetime);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder pemCaCertificates(@Nullable Output<List<String>> pemCaCertificates) {
            this.pemCaCertificates = pemCaCertificates;
            return this;
        }

        public Builder pemCaCertificates(@Nullable List<String> pemCaCertificates) {
            this.pemCaCertificates = Output.ofNullable(pemCaCertificates);
            return this;
        }

        public Builder pool(@Nullable Output<String> pool) {
            this.pool = pool;
            return this;
        }

        public Builder pool(@Nullable String pool) {
            this.pool = Output.ofNullable(pool);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(@Nullable String state) {
            this.state = Output.ofNullable(state);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Output.ofNullable(updateTime);
            return this;
        }
        public AuthorityState build() {
            return new AuthorityState(accessUrls, certificateAuthorityId, config, createTime, gcsBucket, ignoreActiveCertificatesOnDeletion, keySpec, labels, lifetime, location, name, pemCaCertificates, pool, project, state, type, updateTime);
        }
    }
}
