// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.ImageGuestOsFeatureGetArgs;
import io.pulumi.gcp.compute.inputs.ImageRawDiskGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImageState extends io.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
     * 
     */
    @InputImport(name="archiveSizeBytes")
      private final @Nullable Input<Integer> archiveSizeBytes;

    public Input<Integer> getArchiveSizeBytes() {
        return this.archiveSizeBytes == null ? Input.empty() : this.archiveSizeBytes;
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @InputImport(name="creationTimestamp")
      private final @Nullable Input<String> creationTimestamp;

    public Input<String> getCreationTimestamp() {
        return this.creationTimestamp == null ? Input.empty() : this.creationTimestamp;
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Size of the image when restored onto a persistent disk (in GB).
     * 
     */
    @InputImport(name="diskSizeGb")
      private final @Nullable Input<Integer> diskSizeGb;

    public Input<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Input.empty() : this.diskSizeGb;
    }

    /**
     * The name of the image family to which this image belongs. You can
     * create disks by specifying an image family instead of a specific
     * image name. The image family always returns its latest image that is
     * not deprecated. The name of the image family must comply with
     * RFC1035.
     * 
     */
    @InputImport(name="family")
      private final @Nullable Input<String> family;

    public Input<String> getFamily() {
        return this.family == null ? Input.empty() : this.family;
    }

    /**
     * A list of features to enable on the guest operating system.
     * Applicable only for bootable images.
     * Structure is documented below.
     * 
     */
    @InputImport(name="guestOsFeatures")
      private final @Nullable Input<List<ImageGuestOsFeatureGetArgs>> guestOsFeatures;

    public Input<List<ImageGuestOsFeatureGetArgs>> getGuestOsFeatures() {
        return this.guestOsFeatures == null ? Input.empty() : this.guestOsFeatures;
    }

    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     * 
     */
    @InputImport(name="labelFingerprint")
      private final @Nullable Input<String> labelFingerprint;

    public Input<String> getLabelFingerprint() {
        return this.labelFingerprint == null ? Input.empty() : this.labelFingerprint;
    }

    /**
     * Labels to apply to this Image.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * Any applicable license URI.
     * 
     */
    @InputImport(name="licenses")
      private final @Nullable Input<List<String>> licenses;

    public Input<List<String>> getLicenses() {
        return this.licenses == null ? Input.empty() : this.licenses;
    }

    /**
     * Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The parameters of the raw disk image.
     * Structure is documented below.
     * 
     */
    @InputImport(name="rawDisk")
      private final @Nullable Input<ImageRawDiskGetArgs> rawDisk;

    public Input<ImageRawDiskGetArgs> getRawDisk() {
        return this.rawDisk == null ? Input.empty() : this.rawDisk;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @InputImport(name="selfLink")
      private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    /**
     * The source disk to create this image based on.
     * You must provide either this property or the
     * rawDisk.source property but not both to create an image.
     * 
     */
    @InputImport(name="sourceDisk")
      private final @Nullable Input<String> sourceDisk;

    public Input<String> getSourceDisk() {
        return this.sourceDisk == null ? Input.empty() : this.sourceDisk;
    }

    /**
     * URL of the source image used to create this image. In order to create an image, you must provide the full or partial
     * URL of one of the following:
     * * The selfLink URL
     * * This property
     * * The rawDisk.source URL
     * * The sourceDisk URL
     * 
     */
    @InputImport(name="sourceImage")
      private final @Nullable Input<String> sourceImage;

    public Input<String> getSourceImage() {
        return this.sourceImage == null ? Input.empty() : this.sourceImage;
    }

    /**
     * URL of the source snapshot used to create this image.
     * In order to create an image, you must provide the full or partial URL of one of the following:
     * * The selfLink URL
     * * This property
     * * The sourceImage URL
     * * The rawDisk.source URL
     * * The sourceDisk URL
     * 
     */
    @InputImport(name="sourceSnapshot")
      private final @Nullable Input<String> sourceSnapshot;

    public Input<String> getSourceSnapshot() {
        return this.sourceSnapshot == null ? Input.empty() : this.sourceSnapshot;
    }

    public ImageState(
        @Nullable Input<Integer> archiveSizeBytes,
        @Nullable Input<String> creationTimestamp,
        @Nullable Input<String> description,
        @Nullable Input<Integer> diskSizeGb,
        @Nullable Input<String> family,
        @Nullable Input<List<ImageGuestOsFeatureGetArgs>> guestOsFeatures,
        @Nullable Input<String> labelFingerprint,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<List<String>> licenses,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<ImageRawDiskGetArgs> rawDisk,
        @Nullable Input<String> selfLink,
        @Nullable Input<String> sourceDisk,
        @Nullable Input<String> sourceImage,
        @Nullable Input<String> sourceSnapshot) {
        this.archiveSizeBytes = archiveSizeBytes;
        this.creationTimestamp = creationTimestamp;
        this.description = description;
        this.diskSizeGb = diskSizeGb;
        this.family = family;
        this.guestOsFeatures = guestOsFeatures;
        this.labelFingerprint = labelFingerprint;
        this.labels = labels;
        this.licenses = licenses;
        this.name = name;
        this.project = project;
        this.rawDisk = rawDisk;
        this.selfLink = selfLink;
        this.sourceDisk = sourceDisk;
        this.sourceImage = sourceImage;
        this.sourceSnapshot = sourceSnapshot;
    }

    private ImageState() {
        this.archiveSizeBytes = Input.empty();
        this.creationTimestamp = Input.empty();
        this.description = Input.empty();
        this.diskSizeGb = Input.empty();
        this.family = Input.empty();
        this.guestOsFeatures = Input.empty();
        this.labelFingerprint = Input.empty();
        this.labels = Input.empty();
        this.licenses = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.rawDisk = Input.empty();
        this.selfLink = Input.empty();
        this.sourceDisk = Input.empty();
        this.sourceImage = Input.empty();
        this.sourceSnapshot = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> archiveSizeBytes;
        private @Nullable Input<String> creationTimestamp;
        private @Nullable Input<String> description;
        private @Nullable Input<Integer> diskSizeGb;
        private @Nullable Input<String> family;
        private @Nullable Input<List<ImageGuestOsFeatureGetArgs>> guestOsFeatures;
        private @Nullable Input<String> labelFingerprint;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<List<String>> licenses;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<ImageRawDiskGetArgs> rawDisk;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<String> sourceDisk;
        private @Nullable Input<String> sourceImage;
        private @Nullable Input<String> sourceSnapshot;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveSizeBytes = defaults.archiveSizeBytes;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.family = defaults.family;
    	      this.guestOsFeatures = defaults.guestOsFeatures;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rawDisk = defaults.rawDisk;
    	      this.selfLink = defaults.selfLink;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceImage = defaults.sourceImage;
    	      this.sourceSnapshot = defaults.sourceSnapshot;
        }

        public Builder archiveSizeBytes(@Nullable Input<Integer> archiveSizeBytes) {
            this.archiveSizeBytes = archiveSizeBytes;
            return this;
        }

        public Builder archiveSizeBytes(@Nullable Integer archiveSizeBytes) {
            this.archiveSizeBytes = Input.ofNullable(archiveSizeBytes);
            return this;
        }

        public Builder creationTimestamp(@Nullable Input<String> creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder creationTimestamp(@Nullable String creationTimestamp) {
            this.creationTimestamp = Input.ofNullable(creationTimestamp);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder diskSizeGb(@Nullable Input<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Input.ofNullable(diskSizeGb);
            return this;
        }

        public Builder family(@Nullable Input<String> family) {
            this.family = family;
            return this;
        }

        public Builder family(@Nullable String family) {
            this.family = Input.ofNullable(family);
            return this;
        }

        public Builder guestOsFeatures(@Nullable Input<List<ImageGuestOsFeatureGetArgs>> guestOsFeatures) {
            this.guestOsFeatures = guestOsFeatures;
            return this;
        }

        public Builder guestOsFeatures(@Nullable List<ImageGuestOsFeatureGetArgs> guestOsFeatures) {
            this.guestOsFeatures = Input.ofNullable(guestOsFeatures);
            return this;
        }

        public Builder labelFingerprint(@Nullable Input<String> labelFingerprint) {
            this.labelFingerprint = labelFingerprint;
            return this;
        }

        public Builder labelFingerprint(@Nullable String labelFingerprint) {
            this.labelFingerprint = Input.ofNullable(labelFingerprint);
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder licenses(@Nullable Input<List<String>> licenses) {
            this.licenses = licenses;
            return this;
        }

        public Builder licenses(@Nullable List<String> licenses) {
            this.licenses = Input.ofNullable(licenses);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder rawDisk(@Nullable Input<ImageRawDiskGetArgs> rawDisk) {
            this.rawDisk = rawDisk;
            return this;
        }

        public Builder rawDisk(@Nullable ImageRawDiskGetArgs rawDisk) {
            this.rawDisk = Input.ofNullable(rawDisk);
            return this;
        }

        public Builder selfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder sourceDisk(@Nullable Input<String> sourceDisk) {
            this.sourceDisk = sourceDisk;
            return this;
        }

        public Builder sourceDisk(@Nullable String sourceDisk) {
            this.sourceDisk = Input.ofNullable(sourceDisk);
            return this;
        }

        public Builder sourceImage(@Nullable Input<String> sourceImage) {
            this.sourceImage = sourceImage;
            return this;
        }

        public Builder sourceImage(@Nullable String sourceImage) {
            this.sourceImage = Input.ofNullable(sourceImage);
            return this;
        }

        public Builder sourceSnapshot(@Nullable Input<String> sourceSnapshot) {
            this.sourceSnapshot = sourceSnapshot;
            return this;
        }

        public Builder sourceSnapshot(@Nullable String sourceSnapshot) {
            this.sourceSnapshot = Input.ofNullable(sourceSnapshot);
            return this;
        }
        public ImageState build() {
            return new ImageState(archiveSizeBytes, creationTimestamp, description, diskSizeGb, family, guestOsFeatures, labelFingerprint, labels, licenses, name, project, rawDisk, selfLink, sourceDisk, sourceImage, sourceSnapshot);
        }
    }
}
