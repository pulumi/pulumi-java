// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.ConnectionCloudSqlArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * Cloud SQL properties.
     * Structure is documented below.
     * 
     */
    @InputImport(name="cloudSql", required=true)
      private final Output<ConnectionCloudSqlArgs> cloudSql;

    public Output<ConnectionCloudSqlArgs> getCloudSql() {
        return this.cloudSql;
    }

    /**
     * Optional connection id that should be assigned to the created connection.
     * 
     */
    @InputImport(name="connectionId")
      private final @Nullable Output<String> connectionId;

    public Output<String> getConnectionId() {
        return this.connectionId == null ? Output.empty() : this.connectionId;
    }

    /**
     * A descriptive description for the connection
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * A descriptive name for the connection
     * 
     */
    @InputImport(name="friendlyName")
      private final @Nullable Output<String> friendlyName;

    public Output<String> getFriendlyName() {
        return this.friendlyName == null ? Output.empty() : this.friendlyName;
    }

    /**
     * The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1. The default value is US.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    public ConnectionArgs(
        Output<ConnectionCloudSqlArgs> cloudSql,
        @Nullable Output<String> connectionId,
        @Nullable Output<String> description,
        @Nullable Output<String> friendlyName,
        @Nullable Output<String> location,
        @Nullable Output<String> project) {
        this.cloudSql = Objects.requireNonNull(cloudSql, "expected parameter 'cloudSql' to be non-null");
        this.connectionId = connectionId;
        this.description = description;
        this.friendlyName = friendlyName;
        this.location = location;
        this.project = project;
    }

    private ConnectionArgs() {
        this.cloudSql = Output.empty();
        this.connectionId = Output.empty();
        this.description = Output.empty();
        this.friendlyName = Output.empty();
        this.location = Output.empty();
        this.project = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ConnectionCloudSqlArgs> cloudSql;
        private @Nullable Output<String> connectionId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> friendlyName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudSql = defaults.cloudSql;
    	      this.connectionId = defaults.connectionId;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
        }

        public Builder cloudSql(Output<ConnectionCloudSqlArgs> cloudSql) {
            this.cloudSql = Objects.requireNonNull(cloudSql);
            return this;
        }

        public Builder cloudSql(ConnectionCloudSqlArgs cloudSql) {
            this.cloudSql = Output.of(Objects.requireNonNull(cloudSql));
            return this;
        }

        public Builder connectionId(@Nullable Output<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(@Nullable String connectionId) {
            this.connectionId = Output.ofNullable(connectionId);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = Output.ofNullable(friendlyName);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public ConnectionArgs build() {
            return new ConnectionArgs(cloudSql, connectionId, description, friendlyName, location, project);
        }
    }
}
