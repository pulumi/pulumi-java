// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlexibleAppVersionHandlerStaticFilesArgs extends io.pulumi.resources.ResourceArgs {

    public static final FlexibleAppVersionHandlerStaticFilesArgs Empty = new FlexibleAppVersionHandlerStaticFilesArgs();

    @InputImport(name="applicationReadable")
    private final @Nullable Input<Boolean> applicationReadable;

    public Input<Boolean> getApplicationReadable() {
        return this.applicationReadable == null ? Input.empty() : this.applicationReadable;
    }

    @InputImport(name="expiration")
    private final @Nullable Input<String> expiration;

    public Input<String> getExpiration() {
        return this.expiration == null ? Input.empty() : this.expiration;
    }

    @InputImport(name="httpHeaders")
    private final @Nullable Input<Map<String,String>> httpHeaders;

    public Input<Map<String,String>> getHttpHeaders() {
        return this.httpHeaders == null ? Input.empty() : this.httpHeaders;
    }

    @InputImport(name="mimeType")
    private final @Nullable Input<String> mimeType;

    public Input<String> getMimeType() {
        return this.mimeType == null ? Input.empty() : this.mimeType;
    }

    @InputImport(name="path")
    private final @Nullable Input<String> path;

    public Input<String> getPath() {
        return this.path == null ? Input.empty() : this.path;
    }

    @InputImport(name="requireMatchingFile")
    private final @Nullable Input<Boolean> requireMatchingFile;

    public Input<Boolean> getRequireMatchingFile() {
        return this.requireMatchingFile == null ? Input.empty() : this.requireMatchingFile;
    }

    @InputImport(name="uploadPathRegex")
    private final @Nullable Input<String> uploadPathRegex;

    public Input<String> getUploadPathRegex() {
        return this.uploadPathRegex == null ? Input.empty() : this.uploadPathRegex;
    }

    public FlexibleAppVersionHandlerStaticFilesArgs(
        @Nullable Input<Boolean> applicationReadable,
        @Nullable Input<String> expiration,
        @Nullable Input<Map<String,String>> httpHeaders,
        @Nullable Input<String> mimeType,
        @Nullable Input<String> path,
        @Nullable Input<Boolean> requireMatchingFile,
        @Nullable Input<String> uploadPathRegex) {
        this.applicationReadable = applicationReadable;
        this.expiration = expiration;
        this.httpHeaders = httpHeaders;
        this.mimeType = mimeType;
        this.path = path;
        this.requireMatchingFile = requireMatchingFile;
        this.uploadPathRegex = uploadPathRegex;
    }

    private FlexibleAppVersionHandlerStaticFilesArgs() {
        this.applicationReadable = Input.empty();
        this.expiration = Input.empty();
        this.httpHeaders = Input.empty();
        this.mimeType = Input.empty();
        this.path = Input.empty();
        this.requireMatchingFile = Input.empty();
        this.uploadPathRegex = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleAppVersionHandlerStaticFilesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> applicationReadable;
        private @Nullable Input<String> expiration;
        private @Nullable Input<Map<String,String>> httpHeaders;
        private @Nullable Input<String> mimeType;
        private @Nullable Input<String> path;
        private @Nullable Input<Boolean> requireMatchingFile;
        private @Nullable Input<String> uploadPathRegex;

        public Builder() {
    	      // Empty
        }

        public Builder(FlexibleAppVersionHandlerStaticFilesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReadable = defaults.applicationReadable;
    	      this.expiration = defaults.expiration;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.mimeType = defaults.mimeType;
    	      this.path = defaults.path;
    	      this.requireMatchingFile = defaults.requireMatchingFile;
    	      this.uploadPathRegex = defaults.uploadPathRegex;
        }

        public Builder setApplicationReadable(@Nullable Input<Boolean> applicationReadable) {
            this.applicationReadable = applicationReadable;
            return this;
        }

        public Builder setApplicationReadable(@Nullable Boolean applicationReadable) {
            this.applicationReadable = Input.ofNullable(applicationReadable);
            return this;
        }

        public Builder setExpiration(@Nullable Input<String> expiration) {
            this.expiration = expiration;
            return this;
        }

        public Builder setExpiration(@Nullable String expiration) {
            this.expiration = Input.ofNullable(expiration);
            return this;
        }

        public Builder setHttpHeaders(@Nullable Input<Map<String,String>> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }

        public Builder setHttpHeaders(@Nullable Map<String,String> httpHeaders) {
            this.httpHeaders = Input.ofNullable(httpHeaders);
            return this;
        }

        public Builder setMimeType(@Nullable Input<String> mimeType) {
            this.mimeType = mimeType;
            return this;
        }

        public Builder setMimeType(@Nullable String mimeType) {
            this.mimeType = Input.ofNullable(mimeType);
            return this;
        }

        public Builder setPath(@Nullable Input<String> path) {
            this.path = path;
            return this;
        }

        public Builder setPath(@Nullable String path) {
            this.path = Input.ofNullable(path);
            return this;
        }

        public Builder setRequireMatchingFile(@Nullable Input<Boolean> requireMatchingFile) {
            this.requireMatchingFile = requireMatchingFile;
            return this;
        }

        public Builder setRequireMatchingFile(@Nullable Boolean requireMatchingFile) {
            this.requireMatchingFile = Input.ofNullable(requireMatchingFile);
            return this;
        }

        public Builder setUploadPathRegex(@Nullable Input<String> uploadPathRegex) {
            this.uploadPathRegex = uploadPathRegex;
            return this;
        }

        public Builder setUploadPathRegex(@Nullable String uploadPathRegex) {
            this.uploadPathRegex = Input.ofNullable(uploadPathRegex);
            return this;
        }

        public FlexibleAppVersionHandlerStaticFilesArgs build() {
            return new FlexibleAppVersionHandlerStaticFilesArgs(applicationReadable, expiration, httpHeaders, mimeType, path, requireMatchingFile, uploadPathRegex);
        }
    }
}
