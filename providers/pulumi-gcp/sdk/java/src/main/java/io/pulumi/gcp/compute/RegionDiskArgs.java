// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.RegionDiskDiskEncryptionKeyArgs;
import io.pulumi.gcp.compute.inputs.RegionDiskSourceSnapshotEncryptionKeyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegionDiskArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegionDiskArgs Empty = new RegionDiskArgs();

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="diskEncryptionKey")
    private final @Nullable Input<RegionDiskDiskEncryptionKeyArgs> diskEncryptionKey;

    public Input<RegionDiskDiskEncryptionKeyArgs> getDiskEncryptionKey() {
        return this.diskEncryptionKey == null ? Input.empty() : this.diskEncryptionKey;
    }

    @InputImport(name="interface")
    private final @Nullable Input<String> $interface;

    @Deprecated /* This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config. */
    public Input<String> get$interface() {
        return this.$interface == null ? Input.empty() : this.$interface;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="physicalBlockSizeBytes")
    private final @Nullable Input<Integer> physicalBlockSizeBytes;

    public Input<Integer> getPhysicalBlockSizeBytes() {
        return this.physicalBlockSizeBytes == null ? Input.empty() : this.physicalBlockSizeBytes;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    @InputImport(name="replicaZones", required=true)
    private final Input<List<String>> replicaZones;

    public Input<List<String>> getReplicaZones() {
        return this.replicaZones;
    }

    @InputImport(name="size")
    private final @Nullable Input<Integer> size;

    public Input<Integer> getSize() {
        return this.size == null ? Input.empty() : this.size;
    }

    @InputImport(name="snapshot")
    private final @Nullable Input<String> snapshot;

    public Input<String> getSnapshot() {
        return this.snapshot == null ? Input.empty() : this.snapshot;
    }

    @InputImport(name="sourceSnapshotEncryptionKey")
    private final @Nullable Input<RegionDiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey;

    public Input<RegionDiskSourceSnapshotEncryptionKeyArgs> getSourceSnapshotEncryptionKey() {
        return this.sourceSnapshotEncryptionKey == null ? Input.empty() : this.sourceSnapshotEncryptionKey;
    }

    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public RegionDiskArgs(
        @Nullable Input<String> description,
        @Nullable Input<RegionDiskDiskEncryptionKeyArgs> diskEncryptionKey,
        @Nullable Input<String> $interface,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> name,
        @Nullable Input<Integer> physicalBlockSizeBytes,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        Input<List<String>> replicaZones,
        @Nullable Input<Integer> size,
        @Nullable Input<String> snapshot,
        @Nullable Input<RegionDiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey,
        @Nullable Input<String> type) {
        this.description = description;
        this.diskEncryptionKey = diskEncryptionKey;
        this.$interface = $interface;
        this.labels = labels;
        this.name = name;
        this.physicalBlockSizeBytes = physicalBlockSizeBytes;
        this.project = project;
        this.region = region;
        this.replicaZones = Objects.requireNonNull(replicaZones, "expected parameter 'replicaZones' to be non-null");
        this.size = size;
        this.snapshot = snapshot;
        this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
        this.type = type;
    }

    private RegionDiskArgs() {
        this.description = Input.empty();
        this.diskEncryptionKey = Input.empty();
        this.$interface = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.physicalBlockSizeBytes = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.replicaZones = Input.empty();
        this.size = Input.empty();
        this.snapshot = Input.empty();
        this.sourceSnapshotEncryptionKey = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<RegionDiskDiskEncryptionKeyArgs> diskEncryptionKey;
        private @Nullable Input<String> $interface;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> physicalBlockSizeBytes;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private Input<List<String>> replicaZones;
        private @Nullable Input<Integer> size;
        private @Nullable Input<String> snapshot;
        private @Nullable Input<RegionDiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey;
        private @Nullable Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.diskEncryptionKey = defaults.diskEncryptionKey;
    	      this.$interface = defaults.$interface;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.physicalBlockSizeBytes = defaults.physicalBlockSizeBytes;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.replicaZones = defaults.replicaZones;
    	      this.size = defaults.size;
    	      this.snapshot = defaults.snapshot;
    	      this.sourceSnapshotEncryptionKey = defaults.sourceSnapshotEncryptionKey;
    	      this.type = defaults.type;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDiskEncryptionKey(@Nullable Input<RegionDiskDiskEncryptionKeyArgs> diskEncryptionKey) {
            this.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        public Builder setDiskEncryptionKey(@Nullable RegionDiskDiskEncryptionKeyArgs diskEncryptionKey) {
            this.diskEncryptionKey = Input.ofNullable(diskEncryptionKey);
            return this;
        }

        public Builder set$interface(@Nullable Input<String> $interface) {
            this.$interface = $interface;
            return this;
        }

        public Builder set$interface(@Nullable String $interface) {
            this.$interface = Input.ofNullable($interface);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPhysicalBlockSizeBytes(@Nullable Input<Integer> physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }

        public Builder setPhysicalBlockSizeBytes(@Nullable Integer physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = Input.ofNullable(physicalBlockSizeBytes);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setReplicaZones(Input<List<String>> replicaZones) {
            this.replicaZones = Objects.requireNonNull(replicaZones);
            return this;
        }

        public Builder setReplicaZones(List<String> replicaZones) {
            this.replicaZones = Input.of(Objects.requireNonNull(replicaZones));
            return this;
        }

        public Builder setSize(@Nullable Input<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder setSize(@Nullable Integer size) {
            this.size = Input.ofNullable(size);
            return this;
        }

        public Builder setSnapshot(@Nullable Input<String> snapshot) {
            this.snapshot = snapshot;
            return this;
        }

        public Builder setSnapshot(@Nullable String snapshot) {
            this.snapshot = Input.ofNullable(snapshot);
            return this;
        }

        public Builder setSourceSnapshotEncryptionKey(@Nullable Input<RegionDiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        public Builder setSourceSnapshotEncryptionKey(@Nullable RegionDiskSourceSnapshotEncryptionKeyArgs sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = Input.ofNullable(sourceSnapshotEncryptionKey);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public RegionDiskArgs build() {
            return new RegionDiskArgs(description, diskEncryptionKey, $interface, labels, name, physicalBlockSizeBytes, project, region, replicaZones, size, snapshot, sourceSnapshotEncryptionKey, type);
        }
    }
}
