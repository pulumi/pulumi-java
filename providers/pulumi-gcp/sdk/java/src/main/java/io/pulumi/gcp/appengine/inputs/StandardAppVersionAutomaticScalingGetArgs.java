// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.appengine.inputs.StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StandardAppVersionAutomaticScalingGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final StandardAppVersionAutomaticScalingGetArgs Empty = new StandardAppVersionAutomaticScalingGetArgs();

    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    @Import(name="maxConcurrentRequests")
      private final @Nullable Output<Integer> maxConcurrentRequests;

    public Output<Integer> getMaxConcurrentRequests() {
        return this.maxConcurrentRequests == null ? Codegen.empty() : this.maxConcurrentRequests;
    }

    /**
     * Maximum number of idle instances that should be maintained for this version.
     * 
     */
    @Import(name="maxIdleInstances")
      private final @Nullable Output<Integer> maxIdleInstances;

    public Output<Integer> getMaxIdleInstances() {
        return this.maxIdleInstances == null ? Codegen.empty() : this.maxIdleInstances;
    }

    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @Import(name="maxPendingLatency")
      private final @Nullable Output<String> maxPendingLatency;

    public Output<String> getMaxPendingLatency() {
        return this.maxPendingLatency == null ? Codegen.empty() : this.maxPendingLatency;
    }

    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    @Import(name="minIdleInstances")
      private final @Nullable Output<Integer> minIdleInstances;

    public Output<Integer> getMinIdleInstances() {
        return this.minIdleInstances == null ? Codegen.empty() : this.minIdleInstances;
    }

    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * 
     */
    @Import(name="minPendingLatency")
      private final @Nullable Output<String> minPendingLatency;

    public Output<String> getMinPendingLatency() {
        return this.minPendingLatency == null ? Codegen.empty() : this.minPendingLatency;
    }

    /**
     * Scheduler settings for standard environment.
     * Structure is documented below.
     * 
     */
    @Import(name="standardSchedulerSettings")
      private final @Nullable Output<StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs> standardSchedulerSettings;

    public Output<StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs> getStandardSchedulerSettings() {
        return this.standardSchedulerSettings == null ? Codegen.empty() : this.standardSchedulerSettings;
    }

    public StandardAppVersionAutomaticScalingGetArgs(
        @Nullable Output<Integer> maxConcurrentRequests,
        @Nullable Output<Integer> maxIdleInstances,
        @Nullable Output<String> maxPendingLatency,
        @Nullable Output<Integer> minIdleInstances,
        @Nullable Output<String> minPendingLatency,
        @Nullable Output<StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs> standardSchedulerSettings) {
        this.maxConcurrentRequests = maxConcurrentRequests;
        this.maxIdleInstances = maxIdleInstances;
        this.maxPendingLatency = maxPendingLatency;
        this.minIdleInstances = minIdleInstances;
        this.minPendingLatency = minPendingLatency;
        this.standardSchedulerSettings = standardSchedulerSettings;
    }

    private StandardAppVersionAutomaticScalingGetArgs() {
        this.maxConcurrentRequests = Codegen.empty();
        this.maxIdleInstances = Codegen.empty();
        this.maxPendingLatency = Codegen.empty();
        this.minIdleInstances = Codegen.empty();
        this.minPendingLatency = Codegen.empty();
        this.standardSchedulerSettings = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardAppVersionAutomaticScalingGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> maxConcurrentRequests;
        private @Nullable Output<Integer> maxIdleInstances;
        private @Nullable Output<String> maxPendingLatency;
        private @Nullable Output<Integer> minIdleInstances;
        private @Nullable Output<String> minPendingLatency;
        private @Nullable Output<StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs> standardSchedulerSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardAppVersionAutomaticScalingGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxConcurrentRequests = defaults.maxConcurrentRequests;
    	      this.maxIdleInstances = defaults.maxIdleInstances;
    	      this.maxPendingLatency = defaults.maxPendingLatency;
    	      this.minIdleInstances = defaults.minIdleInstances;
    	      this.minPendingLatency = defaults.minPendingLatency;
    	      this.standardSchedulerSettings = defaults.standardSchedulerSettings;
        }

        public Builder maxConcurrentRequests(@Nullable Output<Integer> maxConcurrentRequests) {
            this.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }
        public Builder maxConcurrentRequests(@Nullable Integer maxConcurrentRequests) {
            this.maxConcurrentRequests = Codegen.ofNullable(maxConcurrentRequests);
            return this;
        }
        public Builder maxIdleInstances(@Nullable Output<Integer> maxIdleInstances) {
            this.maxIdleInstances = maxIdleInstances;
            return this;
        }
        public Builder maxIdleInstances(@Nullable Integer maxIdleInstances) {
            this.maxIdleInstances = Codegen.ofNullable(maxIdleInstances);
            return this;
        }
        public Builder maxPendingLatency(@Nullable Output<String> maxPendingLatency) {
            this.maxPendingLatency = maxPendingLatency;
            return this;
        }
        public Builder maxPendingLatency(@Nullable String maxPendingLatency) {
            this.maxPendingLatency = Codegen.ofNullable(maxPendingLatency);
            return this;
        }
        public Builder minIdleInstances(@Nullable Output<Integer> minIdleInstances) {
            this.minIdleInstances = minIdleInstances;
            return this;
        }
        public Builder minIdleInstances(@Nullable Integer minIdleInstances) {
            this.minIdleInstances = Codegen.ofNullable(minIdleInstances);
            return this;
        }
        public Builder minPendingLatency(@Nullable Output<String> minPendingLatency) {
            this.minPendingLatency = minPendingLatency;
            return this;
        }
        public Builder minPendingLatency(@Nullable String minPendingLatency) {
            this.minPendingLatency = Codegen.ofNullable(minPendingLatency);
            return this;
        }
        public Builder standardSchedulerSettings(@Nullable Output<StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs> standardSchedulerSettings) {
            this.standardSchedulerSettings = standardSchedulerSettings;
            return this;
        }
        public Builder standardSchedulerSettings(@Nullable StandardAppVersionAutomaticScalingStandardSchedulerSettingsGetArgs standardSchedulerSettings) {
            this.standardSchedulerSettings = Codegen.ofNullable(standardSchedulerSettings);
            return this;
        }        public StandardAppVersionAutomaticScalingGetArgs build() {
            return new StandardAppVersionAutomaticScalingGetArgs(maxConcurrentRequests, maxIdleInstances, maxPendingLatency, minIdleInstances, minPendingLatency, standardSchedulerSettings);
        }
    }
}
