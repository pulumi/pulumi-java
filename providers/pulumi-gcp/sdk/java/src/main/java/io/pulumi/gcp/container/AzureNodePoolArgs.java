// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.container.inputs.AzureNodePoolAutoscalingArgs;
import io.pulumi.gcp.container.inputs.AzureNodePoolConfigArgs;
import io.pulumi.gcp.container.inputs.AzureNodePoolMaxPodsConstraintArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AzureNodePoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureNodePoolArgs Empty = new AzureNodePoolArgs();

    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="annotations")
      private final @Nullable Output<Map<String,String>> annotations;

    public Output<Map<String,String>> annotations() {
        return this.annotations == null ? Codegen.empty() : this.annotations;
    }

    /**
     * Required. Autoscaler configuration for this node pool.
     * 
     */
    @Import(name="autoscaling", required=true)
      private final Output<AzureNodePoolAutoscalingArgs> autoscaling;

    public Output<AzureNodePoolAutoscalingArgs> autoscaling() {
        return this.autoscaling;
    }

    /**
     * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     * 
     */
    @Import(name="azureAvailabilityZone")
      private final @Nullable Output<String> azureAvailabilityZone;

    public Output<String> azureAvailabilityZone() {
        return this.azureAvailabilityZone == null ? Codegen.empty() : this.azureAvailabilityZone;
    }

    /**
     * The azureCluster for the resource
     * 
     */
    @Import(name="cluster", required=true)
      private final Output<String> cluster;

    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Required. The node configuration of the node pool.
     * 
     */
    @Import(name="config", required=true)
      private final Output<AzureNodePoolConfigArgs> config;

    public Output<AzureNodePoolConfigArgs> config() {
        return this.config;
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint", required=true)
      private final Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint;

    public Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint() {
        return this.maxPodsConstraint;
    }

    /**
     * The name of this resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
     * 
     */
    @Import(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     * 
     */
    @Import(name="version", required=true)
      private final Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    public AzureNodePoolArgs(
        @Nullable Output<Map<String,String>> annotations,
        Output<AzureNodePoolAutoscalingArgs> autoscaling,
        @Nullable Output<String> azureAvailabilityZone,
        Output<String> cluster,
        Output<AzureNodePoolConfigArgs> config,
        Output<String> location,
        Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<String> subnetId,
        Output<String> version) {
        this.annotations = annotations;
        this.autoscaling = Objects.requireNonNull(autoscaling, "expected parameter 'autoscaling' to be non-null");
        this.azureAvailabilityZone = azureAvailabilityZone;
        this.cluster = Objects.requireNonNull(cluster, "expected parameter 'cluster' to be non-null");
        this.config = Objects.requireNonNull(config, "expected parameter 'config' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.maxPodsConstraint = Objects.requireNonNull(maxPodsConstraint, "expected parameter 'maxPodsConstraint' to be non-null");
        this.name = name;
        this.project = project;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private AzureNodePoolArgs() {
        this.annotations = Codegen.empty();
        this.autoscaling = Codegen.empty();
        this.azureAvailabilityZone = Codegen.empty();
        this.cluster = Codegen.empty();
        this.config = Codegen.empty();
        this.location = Codegen.empty();
        this.maxPodsConstraint = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.subnetId = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> annotations;
        private Output<AzureNodePoolAutoscalingArgs> autoscaling;
        private @Nullable Output<String> azureAvailabilityZone;
        private Output<String> cluster;
        private Output<AzureNodePoolConfigArgs> config;
        private Output<String> location;
        private Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<String> subnetId;
        private Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureNodePoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.autoscaling = defaults.autoscaling;
    	      this.azureAvailabilityZone = defaults.azureAvailabilityZone;
    	      this.cluster = defaults.cluster;
    	      this.config = defaults.config;
    	      this.location = defaults.location;
    	      this.maxPodsConstraint = defaults.maxPodsConstraint;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.subnetId = defaults.subnetId;
    	      this.version = defaults.version;
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(@Nullable Map<String,String> annotations) {
            this.annotations = Codegen.ofNullable(annotations);
            return this;
        }
        public Builder autoscaling(Output<AzureNodePoolAutoscalingArgs> autoscaling) {
            this.autoscaling = Objects.requireNonNull(autoscaling);
            return this;
        }
        public Builder autoscaling(AzureNodePoolAutoscalingArgs autoscaling) {
            this.autoscaling = Output.of(Objects.requireNonNull(autoscaling));
            return this;
        }
        public Builder azureAvailabilityZone(@Nullable Output<String> azureAvailabilityZone) {
            this.azureAvailabilityZone = azureAvailabilityZone;
            return this;
        }
        public Builder azureAvailabilityZone(@Nullable String azureAvailabilityZone) {
            this.azureAvailabilityZone = Codegen.ofNullable(azureAvailabilityZone);
            return this;
        }
        public Builder cluster(Output<String> cluster) {
            this.cluster = Objects.requireNonNull(cluster);
            return this;
        }
        public Builder cluster(String cluster) {
            this.cluster = Output.of(Objects.requireNonNull(cluster));
            return this;
        }
        public Builder config(Output<AzureNodePoolConfigArgs> config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        public Builder config(AzureNodePoolConfigArgs config) {
            this.config = Output.of(Objects.requireNonNull(config));
            return this;
        }
        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder maxPodsConstraint(Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint) {
            this.maxPodsConstraint = Objects.requireNonNull(maxPodsConstraint);
            return this;
        }
        public Builder maxPodsConstraint(AzureNodePoolMaxPodsConstraintArgs maxPodsConstraint) {
            this.maxPodsConstraint = Output.of(Objects.requireNonNull(maxPodsConstraint));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }
        public Builder version(Output<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder version(String version) {
            this.version = Output.of(Objects.requireNonNull(version));
            return this;
        }        public AzureNodePoolArgs build() {
            return new AzureNodePoolArgs(annotations, autoscaling, azureAvailabilityZone, cluster, config, location, maxPodsConstraint, name, project, subnetId, version);
        }
    }
}
