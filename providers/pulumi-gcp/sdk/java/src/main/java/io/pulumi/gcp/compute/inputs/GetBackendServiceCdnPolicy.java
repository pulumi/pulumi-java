// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.GetBackendServiceCdnPolicyCacheKeyPolicy;
import io.pulumi.gcp.compute.inputs.GetBackendServiceCdnPolicyNegativeCachingPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetBackendServiceCdnPolicy extends io.pulumi.resources.InvokeArgs {

    public static final GetBackendServiceCdnPolicy Empty = new GetBackendServiceCdnPolicy();

    @InputImport(name="cacheKeyPolicies", required=true)
    private final List<GetBackendServiceCdnPolicyCacheKeyPolicy> cacheKeyPolicies;

    public List<GetBackendServiceCdnPolicyCacheKeyPolicy> getCacheKeyPolicies() {
        return this.cacheKeyPolicies;
    }

    @InputImport(name="cacheMode", required=true)
    private final String cacheMode;

    public String getCacheMode() {
        return this.cacheMode;
    }

    @InputImport(name="clientTtl", required=true)
    private final Integer clientTtl;

    public Integer getClientTtl() {
        return this.clientTtl;
    }

    @InputImport(name="defaultTtl", required=true)
    private final Integer defaultTtl;

    public Integer getDefaultTtl() {
        return this.defaultTtl;
    }

    @InputImport(name="maxTtl", required=true)
    private final Integer maxTtl;

    public Integer getMaxTtl() {
        return this.maxTtl;
    }

    @InputImport(name="negativeCaching", required=true)
    private final Boolean negativeCaching;

    public Boolean getNegativeCaching() {
        return this.negativeCaching;
    }

    @InputImport(name="negativeCachingPolicies", required=true)
    private final List<GetBackendServiceCdnPolicyNegativeCachingPolicy> negativeCachingPolicies;

    public List<GetBackendServiceCdnPolicyNegativeCachingPolicy> getNegativeCachingPolicies() {
        return this.negativeCachingPolicies;
    }

    @InputImport(name="serveWhileStale", required=true)
    private final Integer serveWhileStale;

    public Integer getServeWhileStale() {
        return this.serveWhileStale;
    }

    @InputImport(name="signedUrlCacheMaxAgeSec", required=true)
    private final Integer signedUrlCacheMaxAgeSec;

    public Integer getSignedUrlCacheMaxAgeSec() {
        return this.signedUrlCacheMaxAgeSec;
    }

    public GetBackendServiceCdnPolicy(
        List<GetBackendServiceCdnPolicyCacheKeyPolicy> cacheKeyPolicies,
        String cacheMode,
        Integer clientTtl,
        Integer defaultTtl,
        Integer maxTtl,
        Boolean negativeCaching,
        List<GetBackendServiceCdnPolicyNegativeCachingPolicy> negativeCachingPolicies,
        Integer serveWhileStale,
        Integer signedUrlCacheMaxAgeSec) {
        this.cacheKeyPolicies = Objects.requireNonNull(cacheKeyPolicies, "expected parameter 'cacheKeyPolicies' to be non-null");
        this.cacheMode = Objects.requireNonNull(cacheMode, "expected parameter 'cacheMode' to be non-null");
        this.clientTtl = Objects.requireNonNull(clientTtl, "expected parameter 'clientTtl' to be non-null");
        this.defaultTtl = Objects.requireNonNull(defaultTtl, "expected parameter 'defaultTtl' to be non-null");
        this.maxTtl = Objects.requireNonNull(maxTtl, "expected parameter 'maxTtl' to be non-null");
        this.negativeCaching = Objects.requireNonNull(negativeCaching, "expected parameter 'negativeCaching' to be non-null");
        this.negativeCachingPolicies = Objects.requireNonNull(negativeCachingPolicies, "expected parameter 'negativeCachingPolicies' to be non-null");
        this.serveWhileStale = Objects.requireNonNull(serveWhileStale, "expected parameter 'serveWhileStale' to be non-null");
        this.signedUrlCacheMaxAgeSec = Objects.requireNonNull(signedUrlCacheMaxAgeSec, "expected parameter 'signedUrlCacheMaxAgeSec' to be non-null");
    }

    private GetBackendServiceCdnPolicy() {
        this.cacheKeyPolicies = List.of();
        this.cacheMode = null;
        this.clientTtl = null;
        this.defaultTtl = null;
        this.maxTtl = null;
        this.negativeCaching = null;
        this.negativeCachingPolicies = List.of();
        this.serveWhileStale = null;
        this.signedUrlCacheMaxAgeSec = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceCdnPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetBackendServiceCdnPolicyCacheKeyPolicy> cacheKeyPolicies;
        private String cacheMode;
        private Integer clientTtl;
        private Integer defaultTtl;
        private Integer maxTtl;
        private Boolean negativeCaching;
        private List<GetBackendServiceCdnPolicyNegativeCachingPolicy> negativeCachingPolicies;
        private Integer serveWhileStale;
        private Integer signedUrlCacheMaxAgeSec;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendServiceCdnPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheKeyPolicies = defaults.cacheKeyPolicies;
    	      this.cacheMode = defaults.cacheMode;
    	      this.clientTtl = defaults.clientTtl;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.maxTtl = defaults.maxTtl;
    	      this.negativeCaching = defaults.negativeCaching;
    	      this.negativeCachingPolicies = defaults.negativeCachingPolicies;
    	      this.serveWhileStale = defaults.serveWhileStale;
    	      this.signedUrlCacheMaxAgeSec = defaults.signedUrlCacheMaxAgeSec;
        }

        public Builder setCacheKeyPolicies(List<GetBackendServiceCdnPolicyCacheKeyPolicy> cacheKeyPolicies) {
            this.cacheKeyPolicies = Objects.requireNonNull(cacheKeyPolicies);
            return this;
        }

        public Builder setCacheMode(String cacheMode) {
            this.cacheMode = Objects.requireNonNull(cacheMode);
            return this;
        }

        public Builder setClientTtl(Integer clientTtl) {
            this.clientTtl = Objects.requireNonNull(clientTtl);
            return this;
        }

        public Builder setDefaultTtl(Integer defaultTtl) {
            this.defaultTtl = Objects.requireNonNull(defaultTtl);
            return this;
        }

        public Builder setMaxTtl(Integer maxTtl) {
            this.maxTtl = Objects.requireNonNull(maxTtl);
            return this;
        }

        public Builder setNegativeCaching(Boolean negativeCaching) {
            this.negativeCaching = Objects.requireNonNull(negativeCaching);
            return this;
        }

        public Builder setNegativeCachingPolicies(List<GetBackendServiceCdnPolicyNegativeCachingPolicy> negativeCachingPolicies) {
            this.negativeCachingPolicies = Objects.requireNonNull(negativeCachingPolicies);
            return this;
        }

        public Builder setServeWhileStale(Integer serveWhileStale) {
            this.serveWhileStale = Objects.requireNonNull(serveWhileStale);
            return this;
        }

        public Builder setSignedUrlCacheMaxAgeSec(Integer signedUrlCacheMaxAgeSec) {
            this.signedUrlCacheMaxAgeSec = Objects.requireNonNull(signedUrlCacheMaxAgeSec);
            return this;
        }

        public GetBackendServiceCdnPolicy build() {
            return new GetBackendServiceCdnPolicy(cacheKeyPolicies, cacheMode, clientTtl, defaultTtl, maxTtl, negativeCaching, negativeCachingPolicies, serveWhileStale, signedUrlCacheMaxAgeSec);
        }
    }
}
