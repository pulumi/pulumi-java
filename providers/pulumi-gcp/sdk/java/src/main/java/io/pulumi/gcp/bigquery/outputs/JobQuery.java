// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.bigquery.outputs.JobQueryDefaultDataset;
import io.pulumi.gcp.bigquery.outputs.JobQueryDestinationEncryptionConfiguration;
import io.pulumi.gcp.bigquery.outputs.JobQueryDestinationTable;
import io.pulumi.gcp.bigquery.outputs.JobQueryScriptOptions;
import io.pulumi.gcp.bigquery.outputs.JobQueryUserDefinedFunctionResource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class JobQuery {
    private final @Nullable Boolean allowLargeResults;
    private final @Nullable String createDisposition;
    private final @Nullable JobQueryDefaultDataset defaultDataset;
    private final @Nullable JobQueryDestinationEncryptionConfiguration destinationEncryptionConfiguration;
    private final @Nullable JobQueryDestinationTable destinationTable;
    private final @Nullable Boolean flattenResults;
    private final @Nullable Integer maximumBillingTier;
    private final @Nullable String maximumBytesBilled;
    private final @Nullable String parameterMode;
    private final @Nullable String priority;
    private final String query;
    private final @Nullable List<String> schemaUpdateOptions;
    private final @Nullable JobQueryScriptOptions scriptOptions;
    private final @Nullable Boolean useLegacySql;
    private final @Nullable Boolean useQueryCache;
    private final @Nullable List<JobQueryUserDefinedFunctionResource> userDefinedFunctionResources;
    private final @Nullable String writeDisposition;

    @OutputCustomType.Constructor({"allowLargeResults","createDisposition","defaultDataset","destinationEncryptionConfiguration","destinationTable","flattenResults","maximumBillingTier","maximumBytesBilled","parameterMode","priority","query","schemaUpdateOptions","scriptOptions","useLegacySql","useQueryCache","userDefinedFunctionResources","writeDisposition"})
    private JobQuery(
        @Nullable Boolean allowLargeResults,
        @Nullable String createDisposition,
        @Nullable JobQueryDefaultDataset defaultDataset,
        @Nullable JobQueryDestinationEncryptionConfiguration destinationEncryptionConfiguration,
        @Nullable JobQueryDestinationTable destinationTable,
        @Nullable Boolean flattenResults,
        @Nullable Integer maximumBillingTier,
        @Nullable String maximumBytesBilled,
        @Nullable String parameterMode,
        @Nullable String priority,
        String query,
        @Nullable List<String> schemaUpdateOptions,
        @Nullable JobQueryScriptOptions scriptOptions,
        @Nullable Boolean useLegacySql,
        @Nullable Boolean useQueryCache,
        @Nullable List<JobQueryUserDefinedFunctionResource> userDefinedFunctionResources,
        @Nullable String writeDisposition) {
        this.allowLargeResults = allowLargeResults;
        this.createDisposition = createDisposition;
        this.defaultDataset = defaultDataset;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationTable = destinationTable;
        this.flattenResults = flattenResults;
        this.maximumBillingTier = maximumBillingTier;
        this.maximumBytesBilled = maximumBytesBilled;
        this.parameterMode = parameterMode;
        this.priority = priority;
        this.query = Objects.requireNonNull(query);
        this.schemaUpdateOptions = schemaUpdateOptions;
        this.scriptOptions = scriptOptions;
        this.useLegacySql = useLegacySql;
        this.useQueryCache = useQueryCache;
        this.userDefinedFunctionResources = userDefinedFunctionResources;
        this.writeDisposition = writeDisposition;
    }

    public Optional<Boolean> getAllowLargeResults() {
        return Optional.ofNullable(this.allowLargeResults);
    }
    public Optional<String> getCreateDisposition() {
        return Optional.ofNullable(this.createDisposition);
    }
    public Optional<JobQueryDefaultDataset> getDefaultDataset() {
        return Optional.ofNullable(this.defaultDataset);
    }
    public Optional<JobQueryDestinationEncryptionConfiguration> getDestinationEncryptionConfiguration() {
        return Optional.ofNullable(this.destinationEncryptionConfiguration);
    }
    public Optional<JobQueryDestinationTable> getDestinationTable() {
        return Optional.ofNullable(this.destinationTable);
    }
    public Optional<Boolean> getFlattenResults() {
        return Optional.ofNullable(this.flattenResults);
    }
    public Optional<Integer> getMaximumBillingTier() {
        return Optional.ofNullable(this.maximumBillingTier);
    }
    public Optional<String> getMaximumBytesBilled() {
        return Optional.ofNullable(this.maximumBytesBilled);
    }
    public Optional<String> getParameterMode() {
        return Optional.ofNullable(this.parameterMode);
    }
    public Optional<String> getPriority() {
        return Optional.ofNullable(this.priority);
    }
    public String getQuery() {
        return this.query;
    }
    public List<String> getSchemaUpdateOptions() {
        return this.schemaUpdateOptions == null ? List.of() : this.schemaUpdateOptions;
    }
    public Optional<JobQueryScriptOptions> getScriptOptions() {
        return Optional.ofNullable(this.scriptOptions);
    }
    public Optional<Boolean> getUseLegacySql() {
        return Optional.ofNullable(this.useLegacySql);
    }
    public Optional<Boolean> getUseQueryCache() {
        return Optional.ofNullable(this.useQueryCache);
    }
    public List<JobQueryUserDefinedFunctionResource> getUserDefinedFunctionResources() {
        return this.userDefinedFunctionResources == null ? List.of() : this.userDefinedFunctionResources;
    }
    public Optional<String> getWriteDisposition() {
        return Optional.ofNullable(this.writeDisposition);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobQuery defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowLargeResults;
        private @Nullable String createDisposition;
        private @Nullable JobQueryDefaultDataset defaultDataset;
        private @Nullable JobQueryDestinationEncryptionConfiguration destinationEncryptionConfiguration;
        private @Nullable JobQueryDestinationTable destinationTable;
        private @Nullable Boolean flattenResults;
        private @Nullable Integer maximumBillingTier;
        private @Nullable String maximumBytesBilled;
        private @Nullable String parameterMode;
        private @Nullable String priority;
        private String query;
        private @Nullable List<String> schemaUpdateOptions;
        private @Nullable JobQueryScriptOptions scriptOptions;
        private @Nullable Boolean useLegacySql;
        private @Nullable Boolean useQueryCache;
        private @Nullable List<JobQueryUserDefinedFunctionResource> userDefinedFunctionResources;
        private @Nullable String writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobQuery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLargeResults = defaults.allowLargeResults;
    	      this.createDisposition = defaults.createDisposition;
    	      this.defaultDataset = defaults.defaultDataset;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.flattenResults = defaults.flattenResults;
    	      this.maximumBillingTier = defaults.maximumBillingTier;
    	      this.maximumBytesBilled = defaults.maximumBytesBilled;
    	      this.parameterMode = defaults.parameterMode;
    	      this.priority = defaults.priority;
    	      this.query = defaults.query;
    	      this.schemaUpdateOptions = defaults.schemaUpdateOptions;
    	      this.scriptOptions = defaults.scriptOptions;
    	      this.useLegacySql = defaults.useLegacySql;
    	      this.useQueryCache = defaults.useQueryCache;
    	      this.userDefinedFunctionResources = defaults.userDefinedFunctionResources;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder setAllowLargeResults(@Nullable Boolean allowLargeResults) {
            this.allowLargeResults = allowLargeResults;
            return this;
        }

        public Builder setCreateDisposition(@Nullable String createDisposition) {
            this.createDisposition = createDisposition;
            return this;
        }

        public Builder setDefaultDataset(@Nullable JobQueryDefaultDataset defaultDataset) {
            this.defaultDataset = defaultDataset;
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(@Nullable JobQueryDestinationEncryptionConfiguration destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }

        public Builder setDestinationTable(@Nullable JobQueryDestinationTable destinationTable) {
            this.destinationTable = destinationTable;
            return this;
        }

        public Builder setFlattenResults(@Nullable Boolean flattenResults) {
            this.flattenResults = flattenResults;
            return this;
        }

        public Builder setMaximumBillingTier(@Nullable Integer maximumBillingTier) {
            this.maximumBillingTier = maximumBillingTier;
            return this;
        }

        public Builder setMaximumBytesBilled(@Nullable String maximumBytesBilled) {
            this.maximumBytesBilled = maximumBytesBilled;
            return this;
        }

        public Builder setParameterMode(@Nullable String parameterMode) {
            this.parameterMode = parameterMode;
            return this;
        }

        public Builder setPriority(@Nullable String priority) {
            this.priority = priority;
            return this;
        }

        public Builder setQuery(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }

        public Builder setSchemaUpdateOptions(@Nullable List<String> schemaUpdateOptions) {
            this.schemaUpdateOptions = schemaUpdateOptions;
            return this;
        }

        public Builder setScriptOptions(@Nullable JobQueryScriptOptions scriptOptions) {
            this.scriptOptions = scriptOptions;
            return this;
        }

        public Builder setUseLegacySql(@Nullable Boolean useLegacySql) {
            this.useLegacySql = useLegacySql;
            return this;
        }

        public Builder setUseQueryCache(@Nullable Boolean useQueryCache) {
            this.useQueryCache = useQueryCache;
            return this;
        }

        public Builder setUserDefinedFunctionResources(@Nullable List<JobQueryUserDefinedFunctionResource> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = userDefinedFunctionResources;
            return this;
        }

        public Builder setWriteDisposition(@Nullable String writeDisposition) {
            this.writeDisposition = writeDisposition;
            return this;
        }

        public JobQuery build() {
            return new JobQuery(allowLargeResults, createDisposition, defaultDataset, destinationEncryptionConfiguration, destinationTable, flattenResults, maximumBillingTier, maximumBytesBilled, parameterMode, priority, query, schemaUpdateOptions, scriptOptions, useLegacySql, useQueryCache, userDefinedFunctionResources, writeDisposition);
        }
    }
}
