// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.vertex;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AiFeatureStoreEntityTypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final AiFeatureStoreEntityTypeArgs Empty = new AiFeatureStoreEntityTypeArgs();

    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
     * 
     */
    @InputImport(name="featurestore", required=true)
    private final Input<String> featurestore;

    public Input<String> getFeaturestore() {
        return this.featurestore;
    }

    /**
     * A set of key/value label pairs to assign to this EntityType.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The default monitoring configuration for all Features under this EntityType.
     * If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
     * Structure is documented below.
     * 
     */
    @InputImport(name="monitoringConfig")
    private final @Nullable Input<AiFeatureStoreEntityTypeMonitoringConfigArgs> monitoringConfig;

    public Input<AiFeatureStoreEntityTypeMonitoringConfigArgs> getMonitoringConfig() {
        return this.monitoringConfig == null ? Input.empty() : this.monitoringConfig;
    }

    /**
     * The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    public AiFeatureStoreEntityTypeArgs(
        Input<String> featurestore,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<AiFeatureStoreEntityTypeMonitoringConfigArgs> monitoringConfig,
        @Nullable Input<String> name) {
        this.featurestore = Objects.requireNonNull(featurestore, "expected parameter 'featurestore' to be non-null");
        this.labels = labels;
        this.monitoringConfig = monitoringConfig;
        this.name = name;
    }

    private AiFeatureStoreEntityTypeArgs() {
        this.featurestore = Input.empty();
        this.labels = Input.empty();
        this.monitoringConfig = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiFeatureStoreEntityTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> featurestore;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<AiFeatureStoreEntityTypeMonitoringConfigArgs> monitoringConfig;
        private @Nullable Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(AiFeatureStoreEntityTypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.featurestore = defaults.featurestore;
    	      this.labels = defaults.labels;
    	      this.monitoringConfig = defaults.monitoringConfig;
    	      this.name = defaults.name;
        }

        public Builder setFeaturestore(Input<String> featurestore) {
            this.featurestore = Objects.requireNonNull(featurestore);
            return this;
        }

        public Builder setFeaturestore(String featurestore) {
            this.featurestore = Input.of(Objects.requireNonNull(featurestore));
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMonitoringConfig(@Nullable Input<AiFeatureStoreEntityTypeMonitoringConfigArgs> monitoringConfig) {
            this.monitoringConfig = monitoringConfig;
            return this;
        }

        public Builder setMonitoringConfig(@Nullable AiFeatureStoreEntityTypeMonitoringConfigArgs monitoringConfig) {
            this.monitoringConfig = Input.ofNullable(monitoringConfig);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public AiFeatureStoreEntityTypeArgs build() {
            return new AiFeatureStoreEntityTypeArgs(featurestore, labels, monitoringConfig, name);
        }
    }
}
