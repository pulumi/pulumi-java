// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.diagflow.inputs.CxEnvironmentVersionConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxEnvironmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final CxEnvironmentArgs Empty = new CxEnvironmentArgs();

    /**
     * The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The human-readable name of the environment (unique in an agent). Limit of 64 characters.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * The Agent to create an Environment for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     * 
     */
    @Import(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> getParent() {
        return this.parent == null ? Output.empty() : this.parent;
    }

    /**
     * A list of configurations for flow versions. You should include version configs for all flows that are reachable from [Start Flow][Agent.start_flow] in the agent. Otherwise, an error will be returned.
     * Structure is documented below.
     * 
     */
    @Import(name="versionConfigs", required=true)
      private final Output<List<CxEnvironmentVersionConfigArgs>> versionConfigs;

    public Output<List<CxEnvironmentVersionConfigArgs>> getVersionConfigs() {
        return this.versionConfigs;
    }

    public CxEnvironmentArgs(
        @Nullable Output<String> description,
        Output<String> displayName,
        @Nullable Output<String> parent,
        Output<List<CxEnvironmentVersionConfigArgs>> versionConfigs) {
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.parent = parent;
        this.versionConfigs = Objects.requireNonNull(versionConfigs, "expected parameter 'versionConfigs' to be non-null");
    }

    private CxEnvironmentArgs() {
        this.description = Output.empty();
        this.displayName = Output.empty();
        this.parent = Output.empty();
        this.versionConfigs = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxEnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private @Nullable Output<String> parent;
        private Output<List<CxEnvironmentVersionConfigArgs>> versionConfigs;

        public Builder() {
    	      // Empty
        }

        public Builder(CxEnvironmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.parent = defaults.parent;
    	      this.versionConfigs = defaults.versionConfigs;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder parent(@Nullable String parent) {
            this.parent = Output.ofNullable(parent);
            return this;
        }

        public Builder versionConfigs(Output<List<CxEnvironmentVersionConfigArgs>> versionConfigs) {
            this.versionConfigs = Objects.requireNonNull(versionConfigs);
            return this;
        }

        public Builder versionConfigs(List<CxEnvironmentVersionConfigArgs> versionConfigs) {
            this.versionConfigs = Output.of(Objects.requireNonNull(versionConfigs));
            return this;
        }
        public CxEnvironmentArgs build() {
            return new CxEnvironmentArgs(description, displayName, parent, versionConfigs);
        }
    }
}
