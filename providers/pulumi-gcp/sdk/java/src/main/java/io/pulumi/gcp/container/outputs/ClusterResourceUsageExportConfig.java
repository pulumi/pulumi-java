// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.container.outputs.ClusterResourceUsageExportConfigBigqueryDestination;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ClusterResourceUsageExportConfig {
    /**
     * Parameters for using BigQuery as the destination of resource usage export.
     * 
     */
    private final ClusterResourceUsageExportConfigBigqueryDestination bigqueryDestination;
    /**
     * Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created
     * in the cluster to meter network egress traffic.
     * 
     */
    private final @Nullable Boolean enableNetworkEgressMetering;
    /**
     * Whether to enable resource
     * consumption metering on this cluster. When enabled, a table will be created in
     * the resource export BigQuery dataset to store resource consumption data. The
     * resulting table can be joined with the resource usage table or with BigQuery
     * billing export. Defaults to `true`.
     * 
     */
    private final @Nullable Boolean enableResourceConsumptionMetering;

    @OutputCustomType.Constructor({"bigqueryDestination","enableNetworkEgressMetering","enableResourceConsumptionMetering"})
    private ClusterResourceUsageExportConfig(
        ClusterResourceUsageExportConfigBigqueryDestination bigqueryDestination,
        @Nullable Boolean enableNetworkEgressMetering,
        @Nullable Boolean enableResourceConsumptionMetering) {
        this.bigqueryDestination = Objects.requireNonNull(bigqueryDestination);
        this.enableNetworkEgressMetering = enableNetworkEgressMetering;
        this.enableResourceConsumptionMetering = enableResourceConsumptionMetering;
    }

    /**
     * Parameters for using BigQuery as the destination of resource usage export.
     * 
     */
    public ClusterResourceUsageExportConfigBigqueryDestination getBigqueryDestination() {
        return this.bigqueryDestination;
    }
    /**
     * Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created
     * in the cluster to meter network egress traffic.
     * 
     */
    public Optional<Boolean> getEnableNetworkEgressMetering() {
        return Optional.ofNullable(this.enableNetworkEgressMetering);
    }
    /**
     * Whether to enable resource
     * consumption metering on this cluster. When enabled, a table will be created in
     * the resource export BigQuery dataset to store resource consumption data. The
     * resulting table can be joined with the resource usage table or with BigQuery
     * billing export. Defaults to `true`.
     * 
     */
    public Optional<Boolean> getEnableResourceConsumptionMetering() {
        return Optional.ofNullable(this.enableResourceConsumptionMetering);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterResourceUsageExportConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterResourceUsageExportConfigBigqueryDestination bigqueryDestination;
        private @Nullable Boolean enableNetworkEgressMetering;
        private @Nullable Boolean enableResourceConsumptionMetering;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterResourceUsageExportConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigqueryDestination = defaults.bigqueryDestination;
    	      this.enableNetworkEgressMetering = defaults.enableNetworkEgressMetering;
    	      this.enableResourceConsumptionMetering = defaults.enableResourceConsumptionMetering;
        }

        public Builder setBigqueryDestination(ClusterResourceUsageExportConfigBigqueryDestination bigqueryDestination) {
            this.bigqueryDestination = Objects.requireNonNull(bigqueryDestination);
            return this;
        }

        public Builder setEnableNetworkEgressMetering(@Nullable Boolean enableNetworkEgressMetering) {
            this.enableNetworkEgressMetering = enableNetworkEgressMetering;
            return this;
        }

        public Builder setEnableResourceConsumptionMetering(@Nullable Boolean enableResourceConsumptionMetering) {
            this.enableResourceConsumptionMetering = enableResourceConsumptionMetering;
            return this;
        }

        public ClusterResourceUsageExportConfig build() {
            return new ClusterResourceUsageExportConfig(bigqueryDestination, enableNetworkEgressMetering, enableResourceConsumptionMetering);
        }
    }
}
