// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.diagflow.CxPageArgs;
import io.pulumi.gcp.diagflow.inputs.CxPageState;
import io.pulumi.gcp.diagflow.outputs.CxPageEntryFulfillment;
import io.pulumi.gcp.diagflow.outputs.CxPageEventHandler;
import io.pulumi.gcp.diagflow.outputs.CxPageForm;
import io.pulumi.gcp.diagflow.outputs.CxPageTransitionRoute;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages.
 * 
 * 
 * To get more information about Page, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Dialogflowcx Page Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 *     avatarUri: "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     enableStackdriverLogging: true,
 *     enableSpellCorrection: true,
 *     speechToTextSettings: {
 *         enableSpeechAdaptation: true,
 *     },
 * });
 * const myPage2 = new gcp.diagflow.CxPage("myPage2", {
 *     parent: agent.startFlow,
 *     displayName: "MyPage2",
 * });
 * const basicPage = new gcp.diagflow.CxPage("basicPage", {
 *     parent: agent.startFlow,
 *     displayName: "MyPage",
 *     entryFulfillment: {
 *         messages: [{
 *             text: {
 *                 texts: ["Welcome to page"],
 *             },
 *         }],
 *     },
 *     form: {
 *         parameters: [{
 *             displayName: "param1",
 *             entityType: "projects/-/locations/-/agents/-/entityTypes/sys.date",
 *             fillBehavior: {
 *                 initialPromptFulfillment: {
 *                     messages: [{
 *                         text: {
 *                             texts: ["Please provide param1"],
 *                         },
 *                     }],
 *                 },
 *             },
 *             required: "true",
 *             redact: "true",
 *         }],
 *     },
 *     transitionRoutes: [{
 *         condition: `$page.params.status = 'FINAL'`,
 *         triggerFulfillment: {
 *             messages: [{
 *                 text: {
 *                     texts: ["information completed, navigating to page 2"],
 *                 },
 *             }],
 *         },
 *         targetPage: myPage2.id,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * agent = gcp.diagflow.CxAgent("agent",
 *     display_name="dialogflowcx-agent",
 *     location="global",
 *     default_language_code="en",
 *     supported_language_codes=[
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     time_zone="America/New_York",
 *     description="Example description.",
 *     avatar_uri="https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     enable_stackdriver_logging=True,
 *     enable_spell_correction=True,
 *     speech_to_text_settings=gcp.diagflow.CxAgentSpeechToTextSettingsArgs(
 *         enable_speech_adaptation=True,
 *     ))
 * my_page2 = gcp.diagflow.CxPage("myPage2",
 *     parent=agent.start_flow,
 *     display_name="MyPage2")
 * basic_page = gcp.diagflow.CxPage("basicPage",
 *     parent=agent.start_flow,
 *     display_name="MyPage",
 *     entry_fulfillment=gcp.diagflow.CxPageEntryFulfillmentArgs(
 *         messages=[gcp.diagflow.CxPageEntryFulfillmentMessageArgs(
 *             text=gcp.diagflow.CxPageEntryFulfillmentMessageTextArgs(
 *                 texts=["Welcome to page"],
 *             ),
 *         )],
 *     ),
 *     form=gcp.diagflow.CxPageFormArgs(
 *         parameters=[gcp.diagflow.CxPageFormParameterArgs(
 *             display_name="param1",
 *             entity_type="projects/-/locations/-/agents/-/entityTypes/sys.date",
 *             fill_behavior=gcp.diagflow.CxPageFormParameterFillBehaviorArgs(
 *                 initial_prompt_fulfillment=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs(
 *                     messages=[gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs(
 *                         text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs(
 *                             texts=["Please provide param1"],
 *                         ),
 *                     )],
 *                 ),
 *             ),
 *             required=True,
 *             redact=True,
 *         )],
 *     ),
 *     transition_routes=[gcp.diagflow.CxPageTransitionRouteArgs(
 *         condition="$page.params.status = 'FINAL'",
 *         trigger_fulfillment=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentArgs(
 *             messages=[gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArgs(
 *                 text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs(
 *                     texts=["information completed, navigating to page 2"],
 *                 ),
 *             )],
 *         ),
 *         target_page=my_page2.id,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var agent = new Gcp.Diagflow.CxAgent("agent", new Gcp.Diagflow.CxAgentArgs
 *         {
 *             DisplayName = "dialogflowcx-agent",
 *             Location = "global",
 *             DefaultLanguageCode = "en",
 *             SupportedLanguageCodes = 
 *             {
 *                 "fr",
 *                 "de",
 *                 "es",
 *             },
 *             TimeZone = "America/New_York",
 *             Description = "Example description.",
 *             AvatarUri = "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *             EnableStackdriverLogging = true,
 *             EnableSpellCorrection = true,
 *             SpeechToTextSettings = new Gcp.Diagflow.Inputs.CxAgentSpeechToTextSettingsArgs
 *             {
 *                 EnableSpeechAdaptation = true,
 *             },
 *         });
 *         var myPage2 = new Gcp.Diagflow.CxPage("myPage2", new Gcp.Diagflow.CxPageArgs
 *         {
 *             Parent = agent.StartFlow,
 *             DisplayName = "MyPage2",
 *         });
 *         var basicPage = new Gcp.Diagflow.CxPage("basicPage", new Gcp.Diagflow.CxPageArgs
 *         {
 *             Parent = agent.StartFlow,
 *             DisplayName = "MyPage",
 *             EntryFulfillment = new Gcp.Diagflow.Inputs.CxPageEntryFulfillmentArgs
 *             {
 *                 Messages = 
 *                 {
 *                     new Gcp.Diagflow.Inputs.CxPageEntryFulfillmentMessageArgs
 *                     {
 *                         Text = new Gcp.Diagflow.Inputs.CxPageEntryFulfillmentMessageTextArgs
 *                         {
 *                             Texts = 
 *                             {
 *                                 "Welcome to page",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *             Form = new Gcp.Diagflow.Inputs.CxPageFormArgs
 *             {
 *                 Parameters = 
 *                 {
 *                     new Gcp.Diagflow.Inputs.CxPageFormParameterArgs
 *                     {
 *                         DisplayName = "param1",
 *                         EntityType = "projects/-/locations/-/agents/-/entityTypes/sys.date",
 *                         FillBehavior = new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorArgs
 *                         {
 *                             InitialPromptFulfillment = new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs
 *                             {
 *                                 Messages = 
 *                                 {
 *                                     new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs
 *                                     {
 *                                         Text = new Gcp.Diagflow.Inputs.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs
 *                                         {
 *                                             Texts = 
 *                                             {
 *                                                 "Please provide param1",
 *                                             },
 *                                         },
 *                                     },
 *                                 },
 *                             },
 *                         },
 *                         Required = true,
 *                         Redact = true,
 *                     },
 *                 },
 *             },
 *             TransitionRoutes = 
 *             {
 *                 new Gcp.Diagflow.Inputs.CxPageTransitionRouteArgs
 *                 {
 *                     Condition = "$page.params.status = 'FINAL'",
 *                     TriggerFulfillment = new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentArgs
 *                     {
 *                         Messages = 
 *                         {
 *                             new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentMessageArgs
 *                             {
 *                                 Text = new Gcp.Diagflow.Inputs.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs
 *                                 {
 *                                     Texts = 
 *                                     {
 *                                         "information completed, navigating to page 2",
 *                                     },
 *                                 },
 *                             },
 *                         },
 *                     },
 *                     TargetPage = myPage2.Id,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/diagflow"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		agent, err := diagflow.NewCxAgent(ctx, "agent", &diagflow.CxAgentArgs{
 * 			DisplayName:         pulumi.String("dialogflowcx-agent"),
 * 			Location:            pulumi.String("global"),
 * 			DefaultLanguageCode: pulumi.String("en"),
 * 			SupportedLanguageCodes: pulumi.StringArray{
 * 				pulumi.String("fr"),
 * 				pulumi.String("de"),
 * 				pulumi.String("es"),
 * 			},
 * 			TimeZone:                 pulumi.String("America/New_York"),
 * 			Description:              pulumi.String("Example description."),
 * 			AvatarUri:                pulumi.String("https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png"),
 * 			EnableStackdriverLogging: pulumi.Bool(true),
 * 			EnableSpellCorrection:    pulumi.Bool(true),
 * 			SpeechToTextSettings: &diagflow.CxAgentSpeechToTextSettingsArgs{
 * 				EnableSpeechAdaptation: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		myPage2, err := diagflow.NewCxPage(ctx, "myPage2", &diagflow.CxPageArgs{
 * 			Parent:      agent.StartFlow,
 * 			DisplayName: pulumi.String("MyPage2"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = diagflow.NewCxPage(ctx, "basicPage", &diagflow.CxPageArgs{
 * 			Parent:      agent.StartFlow,
 * 			DisplayName: pulumi.String("MyPage"),
 * 			EntryFulfillment: &diagflow.CxPageEntryFulfillmentArgs{
 * 				Messages: diagflow.CxPageEntryFulfillmentMessageArray{
 * 					&diagflow.CxPageEntryFulfillmentMessageArgs{
 * 						Text: &diagflow.CxPageEntryFulfillmentMessageTextArgs{
 * 							Texts: pulumi.StringArray{
 * 								pulumi.String("Welcome to page"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Form: &diagflow.CxPageFormArgs{
 * 				Parameters: diagflow.CxPageFormParameterArray{
 * 					&diagflow.CxPageFormParameterArgs{
 * 						DisplayName: pulumi.String("param1"),
 * 						EntityType:  pulumi.String("projects/-/locations/-/agents/-/entityTypes/sys.date"),
 * 						FillBehavior: &diagflow.CxPageFormParameterFillBehaviorArgs{
 * 							InitialPromptFulfillment: &diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArgs{
 * 								Messages: diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArray{
 * 									&diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArgs{
 * 										Text: &diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArgs{
 * 											Texts: pulumi.StringArray{
 * 												pulumi.String("Please provide param1"),
 * 											},
 * 										},
 * 									},
 * 								},
 * 							},
 * 						},
 * 						Required: pulumi.Bool(true),
 * 						Redact:   pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			TransitionRoutes: diagflow.CxPageTransitionRouteArray{
 * 				&diagflow.CxPageTransitionRouteArgs{
 * 					Condition: pulumi.String(fmt.Sprintf("%v%v", "$", "page.params.status = 'FINAL'")),
 * 					TriggerFulfillment: &diagflow.CxPageTransitionRouteTriggerFulfillmentArgs{
 * 						Messages: diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArray{
 * 							&diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArgs{
 * 								Text: &diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs{
 * 									Texts: pulumi.StringArray{
 * 										pulumi.String("information completed, navigating to page 2"),
 * 									},
 * 								},
 * 							},
 * 						},
 * 					},
 * 					TargetPage: myPage2.ID(),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Page can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/pages/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:diagflow/cxPage:CxPage")
public class CxPage extends io.pulumi.resources.CustomResource {
    /**
     * The human-readable name of the parameter, unique within the form.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The human-readable name of the parameter, unique within the form.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * The fulfillment to call when the session is entering the page.
     * Structure is documented below.
     * 
     */
    @Export(name="entryFulfillment", type=CxPageEntryFulfillment.class, parameters={})
    private Output</* @Nullable */ CxPageEntryFulfillment> entryFulfillment;

    /**
     * @return The fulfillment to call when the session is entering the page.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ CxPageEntryFulfillment> getEntryFulfillment() {
        return this.entryFulfillment;
    }
    /**
     * Handlers associated with the page to handle events such as webhook errors, no match or no input.
     * Structure is documented below.
     * 
     */
    @Export(name="eventHandlers", type=List.class, parameters={CxPageEventHandler.class})
    private Output</* @Nullable */ List<CxPageEventHandler>> eventHandlers;

    /**
     * @return Handlers associated with the page to handle events such as webhook errors, no match or no input.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<CxPageEventHandler>> getEventHandlers() {
        return this.eventHandlers;
    }
    /**
     * The form associated with the page, used for collecting parameters relevant to the page.
     * Structure is documented below.
     * 
     */
    @Export(name="form", type=CxPageForm.class, parameters={})
    private Output</* @Nullable */ CxPageForm> form;

    /**
     * @return The form associated with the page, used for collecting parameters relevant to the page.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ CxPageForm> getForm() {
        return this.form;
    }
    /**
     * The language of the following fields in page:
     * Page.entry_fulfillment.messages
     * Page.entry_fulfillment.conditional_cases
     * Page.event_handlers.trigger_fulfillment.messages
     * Page.event_handlers.trigger_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
     * Page.transition_routes.trigger_fulfillment.messages
     * Page.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @Export(name="languageCode", type=String.class, parameters={})
    private Output</* @Nullable */ String> languageCode;

    /**
     * @return The language of the following fields in page:
     * Page.entry_fulfillment.messages
     * Page.entry_fulfillment.conditional_cases
     * Page.event_handlers.trigger_fulfillment.messages
     * Page.event_handlers.trigger_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
     * Page.transition_routes.trigger_fulfillment.messages
     * Page.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    public Output</* @Nullable */ String> getLanguageCode() {
        return this.languageCode;
    }
    /**
     * -
     * The unique identifier of this event handler.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return -
     * The unique identifier of this event handler.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The flow to create a page for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
     * 
     */
    @Export(name="parent", type=String.class, parameters={})
    private Output</* @Nullable */ String> parent;

    /**
     * @return The flow to create a page for.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
     * 
     */
    public Output</* @Nullable */ String> getParent() {
        return this.parent;
    }
    /**
     * Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
     * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
     * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     * 
     */
    @Export(name="transitionRouteGroups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> transitionRouteGroups;

    /**
     * @return Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
     * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
     * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
     * Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
     * 
     */
    public Output</* @Nullable */ List<String>> getTransitionRouteGroups() {
        return this.transitionRouteGroups;
    }
    /**
     * A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
     * When we are in a certain page, the TransitionRoutes are evalauted in the following order:
     * TransitionRoutes defined in the page with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in flow with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in the page with only condition specified.
     * TransitionRoutes defined in the transition route groups with only condition specified.
     * Structure is documented below.
     * 
     */
    @Export(name="transitionRoutes", type=List.class, parameters={CxPageTransitionRoute.class})
    private Output</* @Nullable */ List<CxPageTransitionRoute>> transitionRoutes;

    /**
     * @return A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
     * When we are in a certain page, the TransitionRoutes are evalauted in the following order:
     * TransitionRoutes defined in the page with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in flow with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in the page with only condition specified.
     * TransitionRoutes defined in the transition route groups with only condition specified.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<CxPageTransitionRoute>> getTransitionRoutes() {
        return this.transitionRoutes;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CxPage(String name) {
        this(name, CxPageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CxPage(String name, CxPageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CxPage(String name, CxPageArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxPage:CxPage", name, args == null ? CxPageArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private CxPage(String name, Output<String> id, @Nullable CxPageState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxPage:CxPage", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CxPage get(String name, Output<String> id, @Nullable CxPageState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new CxPage(name, id, state, options);
    }
}
