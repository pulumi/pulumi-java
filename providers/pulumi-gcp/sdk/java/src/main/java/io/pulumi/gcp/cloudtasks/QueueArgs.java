// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudtasks;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.cloudtasks.inputs.QueueAppEngineRoutingOverrideArgs;
import io.pulumi.gcp.cloudtasks.inputs.QueueRateLimitsArgs;
import io.pulumi.gcp.cloudtasks.inputs.QueueRetryConfigArgs;
import io.pulumi.gcp.cloudtasks.inputs.QueueStackdriverLoggingConfigArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueueArgs extends io.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * Overrides for task-level appEngineRouting. These settings apply only
     * to App Engine tasks in this queue
     * Structure is documented below.
     * 
     */
    @InputImport(name="appEngineRoutingOverride")
    private final @Nullable Input<QueueAppEngineRoutingOverrideArgs> appEngineRoutingOverride;

    public Input<QueueAppEngineRoutingOverrideArgs> getAppEngineRoutingOverride() {
        return this.appEngineRoutingOverride == null ? Input.empty() : this.appEngineRoutingOverride;
    }

    /**
     * The location of the queue
     * 
     */
    @InputImport(name="location", required=true)
    private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    /**
     * The queue name.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Rate limits for task dispatches.
     * The queue's actual dispatch rate is the result of:
     * * Number of tasks in the queue
     * * User-specified throttling: rateLimits, retryConfig, and the queue's state.
     * * System throttling due to 429 (Too Many Requests) or 503 (Service
     *   Unavailable) responses from the worker, high error rates, or to
     *   smooth sudden large traffic spikes.
     *   Structure is documented below.
     * 
     */
    @InputImport(name="rateLimits")
    private final @Nullable Input<QueueRateLimitsArgs> rateLimits;

    public Input<QueueRateLimitsArgs> getRateLimits() {
        return this.rateLimits == null ? Input.empty() : this.rateLimits;
    }

    /**
     * Settings that determine the retry behavior.
     * Structure is documented below.
     * 
     */
    @InputImport(name="retryConfig")
    private final @Nullable Input<QueueRetryConfigArgs> retryConfig;

    public Input<QueueRetryConfigArgs> getRetryConfig() {
        return this.retryConfig == null ? Input.empty() : this.retryConfig;
    }

    /**
     * Configuration options for writing logs to Stackdriver Logging.
     * Structure is documented below.
     * 
     */
    @InputImport(name="stackdriverLoggingConfig")
    private final @Nullable Input<QueueStackdriverLoggingConfigArgs> stackdriverLoggingConfig;

    public Input<QueueStackdriverLoggingConfigArgs> getStackdriverLoggingConfig() {
        return this.stackdriverLoggingConfig == null ? Input.empty() : this.stackdriverLoggingConfig;
    }

    public QueueArgs(
        @Nullable Input<QueueAppEngineRoutingOverrideArgs> appEngineRoutingOverride,
        Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<QueueRateLimitsArgs> rateLimits,
        @Nullable Input<QueueRetryConfigArgs> retryConfig,
        @Nullable Input<QueueStackdriverLoggingConfigArgs> stackdriverLoggingConfig) {
        this.appEngineRoutingOverride = appEngineRoutingOverride;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.project = project;
        this.rateLimits = rateLimits;
        this.retryConfig = retryConfig;
        this.stackdriverLoggingConfig = stackdriverLoggingConfig;
    }

    private QueueArgs() {
        this.appEngineRoutingOverride = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.rateLimits = Input.empty();
        this.retryConfig = Input.empty();
        this.stackdriverLoggingConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<QueueAppEngineRoutingOverrideArgs> appEngineRoutingOverride;
        private Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<QueueRateLimitsArgs> rateLimits;
        private @Nullable Input<QueueRetryConfigArgs> retryConfig;
        private @Nullable Input<QueueStackdriverLoggingConfigArgs> stackdriverLoggingConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineRoutingOverride = defaults.appEngineRoutingOverride;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rateLimits = defaults.rateLimits;
    	      this.retryConfig = defaults.retryConfig;
    	      this.stackdriverLoggingConfig = defaults.stackdriverLoggingConfig;
        }

        public Builder setAppEngineRoutingOverride(@Nullable Input<QueueAppEngineRoutingOverrideArgs> appEngineRoutingOverride) {
            this.appEngineRoutingOverride = appEngineRoutingOverride;
            return this;
        }

        public Builder setAppEngineRoutingOverride(@Nullable QueueAppEngineRoutingOverrideArgs appEngineRoutingOverride) {
            this.appEngineRoutingOverride = Input.ofNullable(appEngineRoutingOverride);
            return this;
        }

        public Builder setLocation(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRateLimits(@Nullable Input<QueueRateLimitsArgs> rateLimits) {
            this.rateLimits = rateLimits;
            return this;
        }

        public Builder setRateLimits(@Nullable QueueRateLimitsArgs rateLimits) {
            this.rateLimits = Input.ofNullable(rateLimits);
            return this;
        }

        public Builder setRetryConfig(@Nullable Input<QueueRetryConfigArgs> retryConfig) {
            this.retryConfig = retryConfig;
            return this;
        }

        public Builder setRetryConfig(@Nullable QueueRetryConfigArgs retryConfig) {
            this.retryConfig = Input.ofNullable(retryConfig);
            return this;
        }

        public Builder setStackdriverLoggingConfig(@Nullable Input<QueueStackdriverLoggingConfigArgs> stackdriverLoggingConfig) {
            this.stackdriverLoggingConfig = stackdriverLoggingConfig;
            return this;
        }

        public Builder setStackdriverLoggingConfig(@Nullable QueueStackdriverLoggingConfigArgs stackdriverLoggingConfig) {
            this.stackdriverLoggingConfig = Input.ofNullable(stackdriverLoggingConfig);
            return this;
        }

        public QueueArgs build() {
            return new QueueArgs(appEngineRoutingOverride, location, name, project, rateLimits, retryConfig, stackdriverLoggingConfig);
        }
    }
}
