// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkPeeringState extends io.pulumi.resources.ResourceArgs {

    public static final NetworkPeeringState Empty = new NetworkPeeringState();

    /**
     * Whether to export the custom routes to the peer network. Defaults to `false`.
     * 
     */
    @Import(name="exportCustomRoutes")
      private final @Nullable Output<Boolean> exportCustomRoutes;

    public Output<Boolean> getExportCustomRoutes() {
        return this.exportCustomRoutes == null ? Output.empty() : this.exportCustomRoutes;
    }

    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     * 
     */
    @Import(name="exportSubnetRoutesWithPublicIp")
      private final @Nullable Output<Boolean> exportSubnetRoutesWithPublicIp;

    public Output<Boolean> getExportSubnetRoutesWithPublicIp() {
        return this.exportSubnetRoutesWithPublicIp == null ? Output.empty() : this.exportSubnetRoutesWithPublicIp;
    }

    /**
     * Whether to import the custom routes from the peer network. Defaults to `false`.
     * 
     */
    @Import(name="importCustomRoutes")
      private final @Nullable Output<Boolean> importCustomRoutes;

    public Output<Boolean> getImportCustomRoutes() {
        return this.importCustomRoutes == null ? Output.empty() : this.importCustomRoutes;
    }

    /**
     * Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
     * 
     */
    @Import(name="importSubnetRoutesWithPublicIp")
      private final @Nullable Output<Boolean> importSubnetRoutesWithPublicIp;

    public Output<Boolean> getImportSubnetRoutesWithPublicIp() {
        return this.importSubnetRoutesWithPublicIp == null ? Output.empty() : this.importSubnetRoutesWithPublicIp;
    }

    /**
     * Name of the peering.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The primary network of the peering.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Output.empty() : this.network;
    }

    /**
     * The peer network in the peering. The peer network
     * may belong to a different project.
     * 
     */
    @Import(name="peerNetwork")
      private final @Nullable Output<String> peerNetwork;

    public Output<String> getPeerNetwork() {
        return this.peerNetwork == null ? Output.empty() : this.peerNetwork;
    }

    /**
     * State for the peering, either `ACTIVE` or `INACTIVE`. The peering is
     * `ACTIVE` when there's a matching configuration in the peer network.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    /**
     * Details about the current state of the peering.
     * 
     */
    @Import(name="stateDetails")
      private final @Nullable Output<String> stateDetails;

    public Output<String> getStateDetails() {
        return this.stateDetails == null ? Output.empty() : this.stateDetails;
    }

    public NetworkPeeringState(
        @Nullable Output<Boolean> exportCustomRoutes,
        @Nullable Output<Boolean> exportSubnetRoutesWithPublicIp,
        @Nullable Output<Boolean> importCustomRoutes,
        @Nullable Output<Boolean> importSubnetRoutesWithPublicIp,
        @Nullable Output<String> name,
        @Nullable Output<String> network,
        @Nullable Output<String> peerNetwork,
        @Nullable Output<String> state,
        @Nullable Output<String> stateDetails) {
        this.exportCustomRoutes = exportCustomRoutes;
        this.exportSubnetRoutesWithPublicIp = exportSubnetRoutesWithPublicIp;
        this.importCustomRoutes = importCustomRoutes;
        this.importSubnetRoutesWithPublicIp = importSubnetRoutesWithPublicIp;
        this.name = name;
        this.network = network;
        this.peerNetwork = peerNetwork;
        this.state = state;
        this.stateDetails = stateDetails;
    }

    private NetworkPeeringState() {
        this.exportCustomRoutes = Output.empty();
        this.exportSubnetRoutesWithPublicIp = Output.empty();
        this.importCustomRoutes = Output.empty();
        this.importSubnetRoutesWithPublicIp = Output.empty();
        this.name = Output.empty();
        this.network = Output.empty();
        this.peerNetwork = Output.empty();
        this.state = Output.empty();
        this.stateDetails = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkPeeringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> exportCustomRoutes;
        private @Nullable Output<Boolean> exportSubnetRoutesWithPublicIp;
        private @Nullable Output<Boolean> importCustomRoutes;
        private @Nullable Output<Boolean> importSubnetRoutesWithPublicIp;
        private @Nullable Output<String> name;
        private @Nullable Output<String> network;
        private @Nullable Output<String> peerNetwork;
        private @Nullable Output<String> state;
        private @Nullable Output<String> stateDetails;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkPeeringState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exportCustomRoutes = defaults.exportCustomRoutes;
    	      this.exportSubnetRoutesWithPublicIp = defaults.exportSubnetRoutesWithPublicIp;
    	      this.importCustomRoutes = defaults.importCustomRoutes;
    	      this.importSubnetRoutesWithPublicIp = defaults.importSubnetRoutesWithPublicIp;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.peerNetwork = defaults.peerNetwork;
    	      this.state = defaults.state;
    	      this.stateDetails = defaults.stateDetails;
        }

        public Builder exportCustomRoutes(@Nullable Output<Boolean> exportCustomRoutes) {
            this.exportCustomRoutes = exportCustomRoutes;
            return this;
        }

        public Builder exportCustomRoutes(@Nullable Boolean exportCustomRoutes) {
            this.exportCustomRoutes = Output.ofNullable(exportCustomRoutes);
            return this;
        }

        public Builder exportSubnetRoutesWithPublicIp(@Nullable Output<Boolean> exportSubnetRoutesWithPublicIp) {
            this.exportSubnetRoutesWithPublicIp = exportSubnetRoutesWithPublicIp;
            return this;
        }

        public Builder exportSubnetRoutesWithPublicIp(@Nullable Boolean exportSubnetRoutesWithPublicIp) {
            this.exportSubnetRoutesWithPublicIp = Output.ofNullable(exportSubnetRoutesWithPublicIp);
            return this;
        }

        public Builder importCustomRoutes(@Nullable Output<Boolean> importCustomRoutes) {
            this.importCustomRoutes = importCustomRoutes;
            return this;
        }

        public Builder importCustomRoutes(@Nullable Boolean importCustomRoutes) {
            this.importCustomRoutes = Output.ofNullable(importCustomRoutes);
            return this;
        }

        public Builder importSubnetRoutesWithPublicIp(@Nullable Output<Boolean> importSubnetRoutesWithPublicIp) {
            this.importSubnetRoutesWithPublicIp = importSubnetRoutesWithPublicIp;
            return this;
        }

        public Builder importSubnetRoutesWithPublicIp(@Nullable Boolean importSubnetRoutesWithPublicIp) {
            this.importSubnetRoutesWithPublicIp = Output.ofNullable(importSubnetRoutesWithPublicIp);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }

        public Builder network(@Nullable String network) {
            this.network = Output.ofNullable(network);
            return this;
        }

        public Builder peerNetwork(@Nullable Output<String> peerNetwork) {
            this.peerNetwork = peerNetwork;
            return this;
        }

        public Builder peerNetwork(@Nullable String peerNetwork) {
            this.peerNetwork = Output.ofNullable(peerNetwork);
            return this;
        }

        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(@Nullable String state) {
            this.state = Output.ofNullable(state);
            return this;
        }

        public Builder stateDetails(@Nullable Output<String> stateDetails) {
            this.stateDetails = stateDetails;
            return this;
        }

        public Builder stateDetails(@Nullable String stateDetails) {
            this.stateDetails = Output.ofNullable(stateDetails);
            return this;
        }
        public NetworkPeeringState build() {
            return new NetworkPeeringState(exportCustomRoutes, exportSubnetRoutesWithPublicIp, importCustomRoutes, importSubnetRoutesWithPublicIp, name, network, peerNetwork, state, stateDetails);
        }
    }
}
