// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DomainMappingSslSettings {
    private final @Nullable String certificateId;
    private final @Nullable String pendingManagedCertificateId;
    private final String sslManagementType;

    @OutputCustomType.Constructor({"certificateId","pendingManagedCertificateId","sslManagementType"})
    private DomainMappingSslSettings(
        @Nullable String certificateId,
        @Nullable String pendingManagedCertificateId,
        String sslManagementType) {
        this.certificateId = certificateId;
        this.pendingManagedCertificateId = pendingManagedCertificateId;
        this.sslManagementType = Objects.requireNonNull(sslManagementType);
    }

    public Optional<String> getCertificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    public Optional<String> getPendingManagedCertificateId() {
        return Optional.ofNullable(this.pendingManagedCertificateId);
    }
    public String getSslManagementType() {
        return this.sslManagementType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingSslSettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String certificateId;
        private @Nullable String pendingManagedCertificateId;
        private String sslManagementType;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingSslSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.pendingManagedCertificateId = defaults.pendingManagedCertificateId;
    	      this.sslManagementType = defaults.sslManagementType;
        }

        public Builder setCertificateId(@Nullable String certificateId) {
            this.certificateId = certificateId;
            return this;
        }

        public Builder setPendingManagedCertificateId(@Nullable String pendingManagedCertificateId) {
            this.pendingManagedCertificateId = pendingManagedCertificateId;
            return this;
        }

        public Builder setSslManagementType(String sslManagementType) {
            this.sslManagementType = Objects.requireNonNull(sslManagementType);
            return this;
        }

        public DomainMappingSslSettings build() {
            return new DomainMappingSslSettings(certificateId, pendingManagedCertificateId, sslManagementType);
        }
    }
}
