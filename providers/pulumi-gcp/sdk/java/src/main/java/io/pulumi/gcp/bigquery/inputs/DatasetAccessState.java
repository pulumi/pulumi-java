// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.bigquery.inputs.DatasetAccessViewGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatasetAccessState extends io.pulumi.resources.ResourceArgs {

    public static final DatasetAccessState Empty = new DatasetAccessState();

    /**
     * If true, represents that that the iam_member in the config was translated to a different member type by the API, and is
     * stored in state as a different member type
     * 
     */
    @InputImport(name="apiUpdatedMember")
    private final @Nullable Input<Boolean> apiUpdatedMember;

    public Input<Boolean> getApiUpdatedMember() {
        return this.apiUpdatedMember == null ? Input.empty() : this.apiUpdatedMember;
    }

    /**
     * The ID of the dataset containing this table.
     * 
     */
    @InputImport(name="datasetId")
    private final @Nullable Input<String> datasetId;

    public Input<String> getDatasetId() {
        return this.datasetId == null ? Input.empty() : this.datasetId;
    }

    /**
     * A domain to grant access to. Any users signed in with the
     * domain specified will be granted the specified access
     * 
     */
    @InputImport(name="domain")
    private final @Nullable Input<String> domain;

    public Input<String> getDomain() {
        return this.domain == null ? Input.empty() : this.domain;
    }

    /**
     * An email address of a Google Group to grant access to.
     * 
     */
    @InputImport(name="groupByEmail")
    private final @Nullable Input<String> groupByEmail;

    public Input<String> getGroupByEmail() {
        return this.groupByEmail == null ? Input.empty() : this.groupByEmail;
    }

    /**
     * Some other type of member that appears in the IAM Policy but isn't a user,
     * group, domain, or special group. For example: `allUsers`
     * 
     */
    @InputImport(name="iamMember")
    private final @Nullable Input<String> iamMember;

    public Input<String> getIamMember() {
        return this.iamMember == null ? Input.empty() : this.iamMember;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Describes the rights granted to the user specified by the other
     * member of the access object. Basic, predefined, and custom roles are
     * supported. Predefined roles that have equivalent basic roles are
     * swapped by the API to their basic counterparts, and will show a diff
     * post-create. See
     * [official docs](https://cloud.google.com/bigquery/docs/access-control).
     * 
     */
    @InputImport(name="role")
    private final @Nullable Input<String> role;

    public Input<String> getRole() {
        return this.role == null ? Input.empty() : this.role;
    }

    /**
     * A special group to grant access to. Possible values include:
     * 
     */
    @InputImport(name="specialGroup")
    private final @Nullable Input<String> specialGroup;

    public Input<String> getSpecialGroup() {
        return this.specialGroup == null ? Input.empty() : this.specialGroup;
    }

    /**
     * An email address of a user to grant access to. For example:
     * fred@example.com
     * 
     */
    @InputImport(name="userByEmail")
    private final @Nullable Input<String> userByEmail;

    public Input<String> getUserByEmail() {
        return this.userByEmail == null ? Input.empty() : this.userByEmail;
    }

    /**
     * A view from a different dataset to grant access to. Queries
     * executed against that view will have read access to tables in
     * this dataset. The role field is not required when this field is
     * set. If that view is updated by any user, access to the view
     * needs to be granted again via an update operation.
     * Structure is documented below.
     * 
     */
    @InputImport(name="view")
    private final @Nullable Input<DatasetAccessViewGetArgs> view;

    public Input<DatasetAccessViewGetArgs> getView() {
        return this.view == null ? Input.empty() : this.view;
    }

    public DatasetAccessState(
        @Nullable Input<Boolean> apiUpdatedMember,
        @Nullable Input<String> datasetId,
        @Nullable Input<String> domain,
        @Nullable Input<String> groupByEmail,
        @Nullable Input<String> iamMember,
        @Nullable Input<String> project,
        @Nullable Input<String> role,
        @Nullable Input<String> specialGroup,
        @Nullable Input<String> userByEmail,
        @Nullable Input<DatasetAccessViewGetArgs> view) {
        this.apiUpdatedMember = apiUpdatedMember;
        this.datasetId = datasetId;
        this.domain = domain;
        this.groupByEmail = groupByEmail;
        this.iamMember = iamMember;
        this.project = project;
        this.role = role;
        this.specialGroup = specialGroup;
        this.userByEmail = userByEmail;
        this.view = view;
    }

    private DatasetAccessState() {
        this.apiUpdatedMember = Input.empty();
        this.datasetId = Input.empty();
        this.domain = Input.empty();
        this.groupByEmail = Input.empty();
        this.iamMember = Input.empty();
        this.project = Input.empty();
        this.role = Input.empty();
        this.specialGroup = Input.empty();
        this.userByEmail = Input.empty();
        this.view = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetAccessState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> apiUpdatedMember;
        private @Nullable Input<String> datasetId;
        private @Nullable Input<String> domain;
        private @Nullable Input<String> groupByEmail;
        private @Nullable Input<String> iamMember;
        private @Nullable Input<String> project;
        private @Nullable Input<String> role;
        private @Nullable Input<String> specialGroup;
        private @Nullable Input<String> userByEmail;
        private @Nullable Input<DatasetAccessViewGetArgs> view;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetAccessState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiUpdatedMember = defaults.apiUpdatedMember;
    	      this.datasetId = defaults.datasetId;
    	      this.domain = defaults.domain;
    	      this.groupByEmail = defaults.groupByEmail;
    	      this.iamMember = defaults.iamMember;
    	      this.project = defaults.project;
    	      this.role = defaults.role;
    	      this.specialGroup = defaults.specialGroup;
    	      this.userByEmail = defaults.userByEmail;
    	      this.view = defaults.view;
        }

        public Builder setApiUpdatedMember(@Nullable Input<Boolean> apiUpdatedMember) {
            this.apiUpdatedMember = apiUpdatedMember;
            return this;
        }

        public Builder setApiUpdatedMember(@Nullable Boolean apiUpdatedMember) {
            this.apiUpdatedMember = Input.ofNullable(apiUpdatedMember);
            return this;
        }

        public Builder setDatasetId(@Nullable Input<String> datasetId) {
            this.datasetId = datasetId;
            return this;
        }

        public Builder setDatasetId(@Nullable String datasetId) {
            this.datasetId = Input.ofNullable(datasetId);
            return this;
        }

        public Builder setDomain(@Nullable Input<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder setDomain(@Nullable String domain) {
            this.domain = Input.ofNullable(domain);
            return this;
        }

        public Builder setGroupByEmail(@Nullable Input<String> groupByEmail) {
            this.groupByEmail = groupByEmail;
            return this;
        }

        public Builder setGroupByEmail(@Nullable String groupByEmail) {
            this.groupByEmail = Input.ofNullable(groupByEmail);
            return this;
        }

        public Builder setIamMember(@Nullable Input<String> iamMember) {
            this.iamMember = iamMember;
            return this;
        }

        public Builder setIamMember(@Nullable String iamMember) {
            this.iamMember = Input.ofNullable(iamMember);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRole(@Nullable Input<String> role) {
            this.role = role;
            return this;
        }

        public Builder setRole(@Nullable String role) {
            this.role = Input.ofNullable(role);
            return this;
        }

        public Builder setSpecialGroup(@Nullable Input<String> specialGroup) {
            this.specialGroup = specialGroup;
            return this;
        }

        public Builder setSpecialGroup(@Nullable String specialGroup) {
            this.specialGroup = Input.ofNullable(specialGroup);
            return this;
        }

        public Builder setUserByEmail(@Nullable Input<String> userByEmail) {
            this.userByEmail = userByEmail;
            return this;
        }

        public Builder setUserByEmail(@Nullable String userByEmail) {
            this.userByEmail = Input.ofNullable(userByEmail);
            return this;
        }

        public Builder setView(@Nullable Input<DatasetAccessViewGetArgs> view) {
            this.view = view;
            return this;
        }

        public Builder setView(@Nullable DatasetAccessViewGetArgs view) {
            this.view = Input.ofNullable(view);
            return this;
        }

        public DatasetAccessState build() {
            return new DatasetAccessState(apiUpdatedMember, datasetId, domain, groupByEmail, iamMember, project, role, specialGroup, userByEmail, view);
        }
    }
}
