// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataproc.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.dataproc.outputs.MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class MetastoreServiceHiveMetastoreConfigKerberosConfig {
    /**
     * A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
     * Structure is documented below.
     * 
     */
    private final MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab keytab;
    /**
     * A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
     * 
     */
    private final String krb5ConfigGcsUri;
    /**
     * A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form "primary/instance@REALM", but there is no exact format.
     * 
     */
    private final String principal;

    @OutputCustomType.Constructor({"keytab","krb5ConfigGcsUri","principal"})
    private MetastoreServiceHiveMetastoreConfigKerberosConfig(
        MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab keytab,
        String krb5ConfigGcsUri,
        String principal) {
        this.keytab = keytab;
        this.krb5ConfigGcsUri = krb5ConfigGcsUri;
        this.principal = principal;
    }

    /**
     * A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
     * Structure is documented below.
     * 
    */
    public MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab getKeytab() {
        return this.keytab;
    }
    /**
     * A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
     * 
    */
    public String getKrb5ConfigGcsUri() {
        return this.krb5ConfigGcsUri;
    }
    /**
     * A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form "primary/instance@REALM", but there is no exact format.
     * 
    */
    public String getPrincipal() {
        return this.principal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetastoreServiceHiveMetastoreConfigKerberosConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab keytab;
        private String krb5ConfigGcsUri;
        private String principal;

        public Builder() {
    	      // Empty
        }

        public Builder(MetastoreServiceHiveMetastoreConfigKerberosConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keytab = defaults.keytab;
    	      this.krb5ConfigGcsUri = defaults.krb5ConfigGcsUri;
    	      this.principal = defaults.principal;
        }

        public Builder setKeytab(MetastoreServiceHiveMetastoreConfigKerberosConfigKeytab keytab) {
            this.keytab = Objects.requireNonNull(keytab);
            return this;
        }

        public Builder setKrb5ConfigGcsUri(String krb5ConfigGcsUri) {
            this.krb5ConfigGcsUri = Objects.requireNonNull(krb5ConfigGcsUri);
            return this;
        }

        public Builder setPrincipal(String principal) {
            this.principal = Objects.requireNonNull(principal);
            return this;
        }
        public MetastoreServiceHiveMetastoreConfigKerberosConfig build() {
            return new MetastoreServiceHiveMetastoreConfigKerberosConfig(keytab, krb5ConfigGcsUri, principal);
        }
    }
}
