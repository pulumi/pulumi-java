// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.bigquery.inputs.TableRangePartitioningRangeArgs;
import java.lang.String;
import java.util.Objects;


public final class TableRangePartitioningArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableRangePartitioningArgs Empty = new TableRangePartitioningArgs();

    /**
     * The field used to determine how to create a range-based
     * partition.
     * 
     */
    @Import(name="field", required=true)
      private final Output<String> field;

    public Output<String> field() {
        return this.field;
    }

    /**
     * Information required to partition based on ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="range", required=true)
      private final Output<TableRangePartitioningRangeArgs> range;

    public Output<TableRangePartitioningRangeArgs> range() {
        return this.range;
    }

    public TableRangePartitioningArgs(
        Output<String> field,
        Output<TableRangePartitioningRangeArgs> range) {
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.range = Objects.requireNonNull(range, "expected parameter 'range' to be non-null");
    }

    private TableRangePartitioningArgs() {
        this.field = Codegen.empty();
        this.range = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableRangePartitioningArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> field;
        private Output<TableRangePartitioningRangeArgs> range;

        public Builder() {
    	      // Empty
        }

        public Builder(TableRangePartitioningArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.field = defaults.field;
    	      this.range = defaults.range;
        }

        public Builder field(Output<String> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        public Builder field(String field) {
            this.field = Output.of(Objects.requireNonNull(field));
            return this;
        }
        public Builder range(Output<TableRangePartitioningRangeArgs> range) {
            this.range = Objects.requireNonNull(range);
            return this;
        }
        public Builder range(TableRangePartitioningRangeArgs range) {
            this.range = Output.of(Objects.requireNonNull(range));
            return this;
        }        public TableRangePartitioningArgs build() {
            return new TableRangePartitioningArgs(field, range);
        }
    }
}
