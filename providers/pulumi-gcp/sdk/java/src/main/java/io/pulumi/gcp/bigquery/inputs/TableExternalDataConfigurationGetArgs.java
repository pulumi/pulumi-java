// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationCsvOptionsGetArgs;
import io.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationGoogleSheetsOptionsGetArgs;
import io.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationHivePartitioningOptionsGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableExternalDataConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableExternalDataConfigurationGetArgs Empty = new TableExternalDataConfigurationGetArgs();

    /**
     * - Let BigQuery try to autodetect the schema
     *   and format of the table.
     * 
     */
    @Import(name="autodetect", required=true)
      private final Output<Boolean> autodetect;

    public Output<Boolean> getAutodetect() {
        return this.autodetect;
    }

    /**
     * The compression type of the data source.
     * Valid values are "NONE" or "GZIP".
     * 
     */
    @Import(name="compression")
      private final @Nullable Output<String> compression;

    public Output<String> getCompression() {
        return this.compression == null ? Output.empty() : this.compression;
    }

    /**
     * Additional properties to set if
     * `source_format` is set to "CSV". Structure is documented below.
     * 
     */
    @Import(name="csvOptions")
      private final @Nullable Output<TableExternalDataConfigurationCsvOptionsGetArgs> csvOptions;

    public Output<TableExternalDataConfigurationCsvOptionsGetArgs> getCsvOptions() {
        return this.csvOptions == null ? Output.empty() : this.csvOptions;
    }

    /**
     * Additional options if
     * `source_format` is set to "GOOGLE_SHEETS". Structure is
     * documented below.
     * 
     */
    @Import(name="googleSheetsOptions")
      private final @Nullable Output<TableExternalDataConfigurationGoogleSheetsOptionsGetArgs> googleSheetsOptions;

    public Output<TableExternalDataConfigurationGoogleSheetsOptionsGetArgs> getGoogleSheetsOptions() {
        return this.googleSheetsOptions == null ? Output.empty() : this.googleSheetsOptions;
    }

    /**
     * When set, configures hive partitioning
     * support. Not all storage formats support hive partitioning -- requesting hive
     * partitioning on an unsupported format will lead to an error, as will providing
     * an invalid specification. Structure is documented below.
     * 
     */
    @Import(name="hivePartitioningOptions")
      private final @Nullable Output<TableExternalDataConfigurationHivePartitioningOptionsGetArgs> hivePartitioningOptions;

    public Output<TableExternalDataConfigurationHivePartitioningOptionsGetArgs> getHivePartitioningOptions() {
        return this.hivePartitioningOptions == null ? Output.empty() : this.hivePartitioningOptions;
    }

    /**
     * Indicates if BigQuery should
     * allow extra values that are not represented in the table schema.
     * If true, the extra values are ignored. If false, records with
     * extra columns are treated as bad records, and if there are too
     * many bad records, an invalid error is returned in the job result.
     * The default value is false.
     * 
     */
    @Import(name="ignoreUnknownValues")
      private final @Nullable Output<Boolean> ignoreUnknownValues;

    public Output<Boolean> getIgnoreUnknownValues() {
        return this.ignoreUnknownValues == null ? Output.empty() : this.ignoreUnknownValues;
    }

    /**
     * The maximum number of bad records that
     * BigQuery can ignore when reading data.
     * 
     */
    @Import(name="maxBadRecords")
      private final @Nullable Output<Integer> maxBadRecords;

    public Output<Integer> getMaxBadRecords() {
        return this.maxBadRecords == null ? Output.empty() : this.maxBadRecords;
    }

    /**
     * A JSON schema for the external table. Schema is required
     * for CSV and JSON formats if autodetect is not on. Schema is disallowed
     * for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
     * ~>**NOTE:** Because this field expects a JSON string, any changes to the
     * string will create a diff, even if the JSON itself hasn't changed.
     * Furthermore drift for this field cannot not be detected because BigQuery
     * only uses this schema to compute the effective schema for the table, therefore
     * any changes on the configured value will force the table to be recreated.
     * This schema is effectively only applied when creating a table from an external
     * datasource, after creation the computed schema will be stored in
     * `google_bigquery_table.schema`
     * 
     */
    @Import(name="schema")
      private final @Nullable Output<String> schema;

    public Output<String> getSchema() {
        return this.schema == null ? Output.empty() : this.schema;
    }

    /**
     * The data format. Supported values are:
     * "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET", "ORC",
     * "DATSTORE_BACKUP", and "BIGTABLE". To use "GOOGLE_SHEETS"
     * the `scopes` must include
     * "https://www.googleapis.com/auth/drive.readonly".
     * 
     */
    @Import(name="sourceFormat", required=true)
      private final Output<String> sourceFormat;

    public Output<String> getSourceFormat() {
        return this.sourceFormat;
    }

    /**
     * A list of the fully-qualified URIs that point to
     * your data in Google Cloud.
     * 
     */
    @Import(name="sourceUris", required=true)
      private final Output<List<String>> sourceUris;

    public Output<List<String>> getSourceUris() {
        return this.sourceUris;
    }

    public TableExternalDataConfigurationGetArgs(
        Output<Boolean> autodetect,
        @Nullable Output<String> compression,
        @Nullable Output<TableExternalDataConfigurationCsvOptionsGetArgs> csvOptions,
        @Nullable Output<TableExternalDataConfigurationGoogleSheetsOptionsGetArgs> googleSheetsOptions,
        @Nullable Output<TableExternalDataConfigurationHivePartitioningOptionsGetArgs> hivePartitioningOptions,
        @Nullable Output<Boolean> ignoreUnknownValues,
        @Nullable Output<Integer> maxBadRecords,
        @Nullable Output<String> schema,
        Output<String> sourceFormat,
        Output<List<String>> sourceUris) {
        this.autodetect = Objects.requireNonNull(autodetect, "expected parameter 'autodetect' to be non-null");
        this.compression = compression;
        this.csvOptions = csvOptions;
        this.googleSheetsOptions = googleSheetsOptions;
        this.hivePartitioningOptions = hivePartitioningOptions;
        this.ignoreUnknownValues = ignoreUnknownValues;
        this.maxBadRecords = maxBadRecords;
        this.schema = schema;
        this.sourceFormat = Objects.requireNonNull(sourceFormat, "expected parameter 'sourceFormat' to be non-null");
        this.sourceUris = Objects.requireNonNull(sourceUris, "expected parameter 'sourceUris' to be non-null");
    }

    private TableExternalDataConfigurationGetArgs() {
        this.autodetect = Output.empty();
        this.compression = Output.empty();
        this.csvOptions = Output.empty();
        this.googleSheetsOptions = Output.empty();
        this.hivePartitioningOptions = Output.empty();
        this.ignoreUnknownValues = Output.empty();
        this.maxBadRecords = Output.empty();
        this.schema = Output.empty();
        this.sourceFormat = Output.empty();
        this.sourceUris = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableExternalDataConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Boolean> autodetect;
        private @Nullable Output<String> compression;
        private @Nullable Output<TableExternalDataConfigurationCsvOptionsGetArgs> csvOptions;
        private @Nullable Output<TableExternalDataConfigurationGoogleSheetsOptionsGetArgs> googleSheetsOptions;
        private @Nullable Output<TableExternalDataConfigurationHivePartitioningOptionsGetArgs> hivePartitioningOptions;
        private @Nullable Output<Boolean> ignoreUnknownValues;
        private @Nullable Output<Integer> maxBadRecords;
        private @Nullable Output<String> schema;
        private Output<String> sourceFormat;
        private Output<List<String>> sourceUris;

        public Builder() {
    	      // Empty
        }

        public Builder(TableExternalDataConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodetect = defaults.autodetect;
    	      this.compression = defaults.compression;
    	      this.csvOptions = defaults.csvOptions;
    	      this.googleSheetsOptions = defaults.googleSheetsOptions;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.schema = defaults.schema;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
        }

        public Builder autodetect(Output<Boolean> autodetect) {
            this.autodetect = Objects.requireNonNull(autodetect);
            return this;
        }
        public Builder autodetect(Boolean autodetect) {
            this.autodetect = Output.of(Objects.requireNonNull(autodetect));
            return this;
        }
        public Builder compression(@Nullable Output<String> compression) {
            this.compression = compression;
            return this;
        }
        public Builder compression(@Nullable String compression) {
            this.compression = Output.ofNullable(compression);
            return this;
        }
        public Builder csvOptions(@Nullable Output<TableExternalDataConfigurationCsvOptionsGetArgs> csvOptions) {
            this.csvOptions = csvOptions;
            return this;
        }
        public Builder csvOptions(@Nullable TableExternalDataConfigurationCsvOptionsGetArgs csvOptions) {
            this.csvOptions = Output.ofNullable(csvOptions);
            return this;
        }
        public Builder googleSheetsOptions(@Nullable Output<TableExternalDataConfigurationGoogleSheetsOptionsGetArgs> googleSheetsOptions) {
            this.googleSheetsOptions = googleSheetsOptions;
            return this;
        }
        public Builder googleSheetsOptions(@Nullable TableExternalDataConfigurationGoogleSheetsOptionsGetArgs googleSheetsOptions) {
            this.googleSheetsOptions = Output.ofNullable(googleSheetsOptions);
            return this;
        }
        public Builder hivePartitioningOptions(@Nullable Output<TableExternalDataConfigurationHivePartitioningOptionsGetArgs> hivePartitioningOptions) {
            this.hivePartitioningOptions = hivePartitioningOptions;
            return this;
        }
        public Builder hivePartitioningOptions(@Nullable TableExternalDataConfigurationHivePartitioningOptionsGetArgs hivePartitioningOptions) {
            this.hivePartitioningOptions = Output.ofNullable(hivePartitioningOptions);
            return this;
        }
        public Builder ignoreUnknownValues(@Nullable Output<Boolean> ignoreUnknownValues) {
            this.ignoreUnknownValues = ignoreUnknownValues;
            return this;
        }
        public Builder ignoreUnknownValues(@Nullable Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Output.ofNullable(ignoreUnknownValues);
            return this;
        }
        public Builder maxBadRecords(@Nullable Output<Integer> maxBadRecords) {
            this.maxBadRecords = maxBadRecords;
            return this;
        }
        public Builder maxBadRecords(@Nullable Integer maxBadRecords) {
            this.maxBadRecords = Output.ofNullable(maxBadRecords);
            return this;
        }
        public Builder schema(@Nullable Output<String> schema) {
            this.schema = schema;
            return this;
        }
        public Builder schema(@Nullable String schema) {
            this.schema = Output.ofNullable(schema);
            return this;
        }
        public Builder sourceFormat(Output<String> sourceFormat) {
            this.sourceFormat = Objects.requireNonNull(sourceFormat);
            return this;
        }
        public Builder sourceFormat(String sourceFormat) {
            this.sourceFormat = Output.of(Objects.requireNonNull(sourceFormat));
            return this;
        }
        public Builder sourceUris(Output<List<String>> sourceUris) {
            this.sourceUris = Objects.requireNonNull(sourceUris);
            return this;
        }
        public Builder sourceUris(List<String> sourceUris) {
            this.sourceUris = Output.of(Objects.requireNonNull(sourceUris));
            return this;
        }
        public Builder sourceUris(String... sourceUris) {
            return sourceUris(List.of(sourceUris));
        }        public TableExternalDataConfigurationGetArgs build() {
            return new TableExternalDataConfigurationGetArgs(autodetect, compression, csvOptions, googleSheetsOptions, hivePartitioningOptions, ignoreUnknownValues, maxBadRecords, schema, sourceFormat, sourceUris);
        }
    }
}
