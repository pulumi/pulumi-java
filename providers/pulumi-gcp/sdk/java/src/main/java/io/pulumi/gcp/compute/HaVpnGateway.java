// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.HaVpnGatewayArgs;
import io.pulumi.gcp.compute.inputs.HaVpnGatewayState;
import io.pulumi.gcp.compute.outputs.HaVpnGatewayVpnInterface;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Represents a VPN gateway running in GCP. This virtual device is managed
 * by Google, but used only by you. This type of VPN Gateway allows for the creation
 * of VPN solutions with higher availability than classic Target VPN Gateways.
 * 
 * To get more information about HaVpnGateway, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/vpnGateways)
 * * How-to Guides
 *     * [Choosing a VPN](https://cloud.google.com/vpn/docs/how-to/choosing-a-vpn)
 *     * [Cloud VPN Overview](https://cloud.google.com/vpn/docs/concepts/overview)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Ha Vpn Gateway Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network1 = new gcp.compute.Network("network1", {autoCreateSubnetworks: false});
 * const haGateway1 = new gcp.compute.HaVpnGateway("haGateway1", {
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network1 = gcp.compute.Network("network1", auto_create_subnetworks=False)
 * ha_gateway1 = gcp.compute.HaVpnGateway("haGateway1",
 *     region="us-central1",
 *     network=network1.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network1 = new Gcp.Compute.Network("network1", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var haGateway1 = new Gcp.Compute.HaVpnGateway("haGateway1", new Gcp.Compute.HaVpnGatewayArgs
 *         {
 *             Region = "us-central1",
 *             Network = network1.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		network1, err := compute.NewNetwork(ctx, "network1", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewHaVpnGateway(ctx, "haGateway1", &compute.HaVpnGatewayArgs{
 * 			Region:  pulumi.String("us-central1"),
 * 			Network: network1.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Ha Vpn Gateway Gcp To Gcp
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network1 = new gcp.compute.Network("network1", {
 *     routingMode: "GLOBAL",
 *     autoCreateSubnetworks: false,
 * });
 * const haGateway1 = new gcp.compute.HaVpnGateway("haGateway1", {
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const network2 = new gcp.compute.Network("network2", {
 *     routingMode: "GLOBAL",
 *     autoCreateSubnetworks: false,
 * });
 * const haGateway2 = new gcp.compute.HaVpnGateway("haGateway2", {
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const network1Subnet1 = new gcp.compute.Subnetwork("network1Subnet1", {
 *     ipCidrRange: "10.0.1.0/24",
 *     region: "us-central1",
 *     network: network1.id,
 * });
 * const network1Subnet2 = new gcp.compute.Subnetwork("network1Subnet2", {
 *     ipCidrRange: "10.0.2.0/24",
 *     region: "us-west1",
 *     network: network1.id,
 * });
 * const network2Subnet1 = new gcp.compute.Subnetwork("network2Subnet1", {
 *     ipCidrRange: "192.168.1.0/24",
 *     region: "us-central1",
 *     network: network2.id,
 * });
 * const network2Subnet2 = new gcp.compute.Subnetwork("network2Subnet2", {
 *     ipCidrRange: "192.168.2.0/24",
 *     region: "us-east1",
 *     network: network2.id,
 * });
 * const router1 = new gcp.compute.Router("router1", {
 *     network: network1.name,
 *     bgp: {
 *         asn: 64514,
 *     },
 * });
 * const router2 = new gcp.compute.Router("router2", {
 *     network: network2.name,
 *     bgp: {
 *         asn: 64515,
 *     },
 * });
 * const tunnel1 = new gcp.compute.VPNTunnel("tunnel1", {
 *     region: "us-central1",
 *     vpnGateway: haGateway1.id,
 *     peerGcpGateway: haGateway2.id,
 *     sharedSecret: "a secret message",
 *     router: router1.id,
 *     vpnGatewayInterface: 0,
 * });
 * const tunnel2 = new gcp.compute.VPNTunnel("tunnel2", {
 *     region: "us-central1",
 *     vpnGateway: haGateway1.id,
 *     peerGcpGateway: haGateway2.id,
 *     sharedSecret: "a secret message",
 *     router: router1.id,
 *     vpnGatewayInterface: 1,
 * });
 * const tunnel3 = new gcp.compute.VPNTunnel("tunnel3", {
 *     region: "us-central1",
 *     vpnGateway: haGateway2.id,
 *     peerGcpGateway: haGateway1.id,
 *     sharedSecret: "a secret message",
 *     router: router2.id,
 *     vpnGatewayInterface: 0,
 * });
 * const tunnel4 = new gcp.compute.VPNTunnel("tunnel4", {
 *     region: "us-central1",
 *     vpnGateway: haGateway2.id,
 *     peerGcpGateway: haGateway1.id,
 *     sharedSecret: "a secret message",
 *     router: router2.id,
 *     vpnGatewayInterface: 1,
 * });
 * const router1Interface1 = new gcp.compute.RouterInterface("router1Interface1", {
 *     router: router1.name,
 *     region: "us-central1",
 *     ipRange: "169.254.0.1/30",
 *     vpnTunnel: tunnel1.name,
 * });
 * const router1Peer1 = new gcp.compute.RouterPeer("router1Peer1", {
 *     router: router1.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.0.2",
 *     peerAsn: 64515,
 *     advertisedRoutePriority: 100,
 *     "interface": router1Interface1.name,
 * });
 * const router1Interface2 = new gcp.compute.RouterInterface("router1Interface2", {
 *     router: router1.name,
 *     region: "us-central1",
 *     ipRange: "169.254.1.2/30",
 *     vpnTunnel: tunnel2.name,
 * });
 * const router1Peer2 = new gcp.compute.RouterPeer("router1Peer2", {
 *     router: router1.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.1.1",
 *     peerAsn: 64515,
 *     advertisedRoutePriority: 100,
 *     "interface": router1Interface2.name,
 * });
 * const router2Interface1 = new gcp.compute.RouterInterface("router2Interface1", {
 *     router: router2.name,
 *     region: "us-central1",
 *     ipRange: "169.254.0.2/30",
 *     vpnTunnel: tunnel3.name,
 * });
 * const router2Peer1 = new gcp.compute.RouterPeer("router2Peer1", {
 *     router: router2.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.0.1",
 *     peerAsn: 64514,
 *     advertisedRoutePriority: 100,
 *     "interface": router2Interface1.name,
 * });
 * const router2Interface2 = new gcp.compute.RouterInterface("router2Interface2", {
 *     router: router2.name,
 *     region: "us-central1",
 *     ipRange: "169.254.1.1/30",
 *     vpnTunnel: tunnel4.name,
 * });
 * const router2Peer2 = new gcp.compute.RouterPeer("router2Peer2", {
 *     router: router2.name,
 *     region: "us-central1",
 *     peerIpAddress: "169.254.1.2",
 *     peerAsn: 64514,
 *     advertisedRoutePriority: 100,
 *     "interface": router2Interface2.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network1 = gcp.compute.Network("network1",
 *     routing_mode="GLOBAL",
 *     auto_create_subnetworks=False)
 * ha_gateway1 = gcp.compute.HaVpnGateway("haGateway1",
 *     region="us-central1",
 *     network=network1.id)
 * network2 = gcp.compute.Network("network2",
 *     routing_mode="GLOBAL",
 *     auto_create_subnetworks=False)
 * ha_gateway2 = gcp.compute.HaVpnGateway("haGateway2",
 *     region="us-central1",
 *     network=network2.id)
 * network1_subnet1 = gcp.compute.Subnetwork("network1Subnet1",
 *     ip_cidr_range="10.0.1.0/24",
 *     region="us-central1",
 *     network=network1.id)
 * network1_subnet2 = gcp.compute.Subnetwork("network1Subnet2",
 *     ip_cidr_range="10.0.2.0/24",
 *     region="us-west1",
 *     network=network1.id)
 * network2_subnet1 = gcp.compute.Subnetwork("network2Subnet1",
 *     ip_cidr_range="192.168.1.0/24",
 *     region="us-central1",
 *     network=network2.id)
 * network2_subnet2 = gcp.compute.Subnetwork("network2Subnet2",
 *     ip_cidr_range="192.168.2.0/24",
 *     region="us-east1",
 *     network=network2.id)
 * router1 = gcp.compute.Router("router1",
 *     network=network1.name,
 *     bgp=gcp.compute.RouterBgpArgs(
 *         asn=64514,
 *     ))
 * router2 = gcp.compute.Router("router2",
 *     network=network2.name,
 *     bgp=gcp.compute.RouterBgpArgs(
 *         asn=64515,
 *     ))
 * tunnel1 = gcp.compute.VPNTunnel("tunnel1",
 *     region="us-central1",
 *     vpn_gateway=ha_gateway1.id,
 *     peer_gcp_gateway=ha_gateway2.id,
 *     shared_secret="a secret message",
 *     router=router1.id,
 *     vpn_gateway_interface=0)
 * tunnel2 = gcp.compute.VPNTunnel("tunnel2",
 *     region="us-central1",
 *     vpn_gateway=ha_gateway1.id,
 *     peer_gcp_gateway=ha_gateway2.id,
 *     shared_secret="a secret message",
 *     router=router1.id,
 *     vpn_gateway_interface=1)
 * tunnel3 = gcp.compute.VPNTunnel("tunnel3",
 *     region="us-central1",
 *     vpn_gateway=ha_gateway2.id,
 *     peer_gcp_gateway=ha_gateway1.id,
 *     shared_secret="a secret message",
 *     router=router2.id,
 *     vpn_gateway_interface=0)
 * tunnel4 = gcp.compute.VPNTunnel("tunnel4",
 *     region="us-central1",
 *     vpn_gateway=ha_gateway2.id,
 *     peer_gcp_gateway=ha_gateway1.id,
 *     shared_secret="a secret message",
 *     router=router2.id,
 *     vpn_gateway_interface=1)
 * router1_interface1 = gcp.compute.RouterInterface("router1Interface1",
 *     router=router1.name,
 *     region="us-central1",
 *     ip_range="169.254.0.1/30",
 *     vpn_tunnel=tunnel1.name)
 * router1_peer1 = gcp.compute.RouterPeer("router1Peer1",
 *     router=router1.name,
 *     region="us-central1",
 *     peer_ip_address="169.254.0.2",
 *     peer_asn=64515,
 *     advertised_route_priority=100,
 *     interface=router1_interface1.name)
 * router1_interface2 = gcp.compute.RouterInterface("router1Interface2",
 *     router=router1.name,
 *     region="us-central1",
 *     ip_range="169.254.1.2/30",
 *     vpn_tunnel=tunnel2.name)
 * router1_peer2 = gcp.compute.RouterPeer("router1Peer2",
 *     router=router1.name,
 *     region="us-central1",
 *     peer_ip_address="169.254.1.1",
 *     peer_asn=64515,
 *     advertised_route_priority=100,
 *     interface=router1_interface2.name)
 * router2_interface1 = gcp.compute.RouterInterface("router2Interface1",
 *     router=router2.name,
 *     region="us-central1",
 *     ip_range="169.254.0.2/30",
 *     vpn_tunnel=tunnel3.name)
 * router2_peer1 = gcp.compute.RouterPeer("router2Peer1",
 *     router=router2.name,
 *     region="us-central1",
 *     peer_ip_address="169.254.0.1",
 *     peer_asn=64514,
 *     advertised_route_priority=100,
 *     interface=router2_interface1.name)
 * router2_interface2 = gcp.compute.RouterInterface("router2Interface2",
 *     router=router2.name,
 *     region="us-central1",
 *     ip_range="169.254.1.1/30",
 *     vpn_tunnel=tunnel4.name)
 * router2_peer2 = gcp.compute.RouterPeer("router2Peer2",
 *     router=router2.name,
 *     region="us-central1",
 *     peer_ip_address="169.254.1.2",
 *     peer_asn=64514,
 *     advertised_route_priority=100,
 *     interface=router2_interface2.name)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network1 = new Gcp.Compute.Network("network1", new Gcp.Compute.NetworkArgs
 *         {
 *             RoutingMode = "GLOBAL",
 *             AutoCreateSubnetworks = false,
 *         });
 *         var haGateway1 = new Gcp.Compute.HaVpnGateway("haGateway1", new Gcp.Compute.HaVpnGatewayArgs
 *         {
 *             Region = "us-central1",
 *             Network = network1.Id,
 *         });
 *         var network2 = new Gcp.Compute.Network("network2", new Gcp.Compute.NetworkArgs
 *         {
 *             RoutingMode = "GLOBAL",
 *             AutoCreateSubnetworks = false,
 *         });
 *         var haGateway2 = new Gcp.Compute.HaVpnGateway("haGateway2", new Gcp.Compute.HaVpnGatewayArgs
 *         {
 *             Region = "us-central1",
 *             Network = network2.Id,
 *         });
 *         var network1Subnet1 = new Gcp.Compute.Subnetwork("network1Subnet1", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.1.0/24",
 *             Region = "us-central1",
 *             Network = network1.Id,
 *         });
 *         var network1Subnet2 = new Gcp.Compute.Subnetwork("network1Subnet2", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.2.0/24",
 *             Region = "us-west1",
 *             Network = network1.Id,
 *         });
 *         var network2Subnet1 = new Gcp.Compute.Subnetwork("network2Subnet1", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "192.168.1.0/24",
 *             Region = "us-central1",
 *             Network = network2.Id,
 *         });
 *         var network2Subnet2 = new Gcp.Compute.Subnetwork("network2Subnet2", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "192.168.2.0/24",
 *             Region = "us-east1",
 *             Network = network2.Id,
 *         });
 *         var router1 = new Gcp.Compute.Router("router1", new Gcp.Compute.RouterArgs
 *         {
 *             Network = network1.Name,
 *             Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
 *             {
 *                 Asn = 64514,
 *             },
 *         });
 *         var router2 = new Gcp.Compute.Router("router2", new Gcp.Compute.RouterArgs
 *         {
 *             Network = network2.Name,
 *             Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
 *             {
 *                 Asn = 64515,
 *             },
 *         });
 *         var tunnel1 = new Gcp.Compute.VPNTunnel("tunnel1", new Gcp.Compute.VPNTunnelArgs
 *         {
 *             Region = "us-central1",
 *             VpnGateway = haGateway1.Id,
 *             PeerGcpGateway = haGateway2.Id,
 *             SharedSecret = "a secret message",
 *             Router = router1.Id,
 *             VpnGatewayInterface = 0,
 *         });
 *         var tunnel2 = new Gcp.Compute.VPNTunnel("tunnel2", new Gcp.Compute.VPNTunnelArgs
 *         {
 *             Region = "us-central1",
 *             VpnGateway = haGateway1.Id,
 *             PeerGcpGateway = haGateway2.Id,
 *             SharedSecret = "a secret message",
 *             Router = router1.Id,
 *             VpnGatewayInterface = 1,
 *         });
 *         var tunnel3 = new Gcp.Compute.VPNTunnel("tunnel3", new Gcp.Compute.VPNTunnelArgs
 *         {
 *             Region = "us-central1",
 *             VpnGateway = haGateway2.Id,
 *             PeerGcpGateway = haGateway1.Id,
 *             SharedSecret = "a secret message",
 *             Router = router2.Id,
 *             VpnGatewayInterface = 0,
 *         });
 *         var tunnel4 = new Gcp.Compute.VPNTunnel("tunnel4", new Gcp.Compute.VPNTunnelArgs
 *         {
 *             Region = "us-central1",
 *             VpnGateway = haGateway2.Id,
 *             PeerGcpGateway = haGateway1.Id,
 *             SharedSecret = "a secret message",
 *             Router = router2.Id,
 *             VpnGatewayInterface = 1,
 *         });
 *         var router1Interface1 = new Gcp.Compute.RouterInterface("router1Interface1", new Gcp.Compute.RouterInterfaceArgs
 *         {
 *             Router = router1.Name,
 *             Region = "us-central1",
 *             IpRange = "169.254.0.1/30",
 *             VpnTunnel = tunnel1.Name,
 *         });
 *         var router1Peer1 = new Gcp.Compute.RouterPeer("router1Peer1", new Gcp.Compute.RouterPeerArgs
 *         {
 *             Router = router1.Name,
 *             Region = "us-central1",
 *             PeerIpAddress = "169.254.0.2",
 *             PeerAsn = 64515,
 *             AdvertisedRoutePriority = 100,
 *             Interface = router1Interface1.Name,
 *         });
 *         var router1Interface2 = new Gcp.Compute.RouterInterface("router1Interface2", new Gcp.Compute.RouterInterfaceArgs
 *         {
 *             Router = router1.Name,
 *             Region = "us-central1",
 *             IpRange = "169.254.1.2/30",
 *             VpnTunnel = tunnel2.Name,
 *         });
 *         var router1Peer2 = new Gcp.Compute.RouterPeer("router1Peer2", new Gcp.Compute.RouterPeerArgs
 *         {
 *             Router = router1.Name,
 *             Region = "us-central1",
 *             PeerIpAddress = "169.254.1.1",
 *             PeerAsn = 64515,
 *             AdvertisedRoutePriority = 100,
 *             Interface = router1Interface2.Name,
 *         });
 *         var router2Interface1 = new Gcp.Compute.RouterInterface("router2Interface1", new Gcp.Compute.RouterInterfaceArgs
 *         {
 *             Router = router2.Name,
 *             Region = "us-central1",
 *             IpRange = "169.254.0.2/30",
 *             VpnTunnel = tunnel3.Name,
 *         });
 *         var router2Peer1 = new Gcp.Compute.RouterPeer("router2Peer1", new Gcp.Compute.RouterPeerArgs
 *         {
 *             Router = router2.Name,
 *             Region = "us-central1",
 *             PeerIpAddress = "169.254.0.1",
 *             PeerAsn = 64514,
 *             AdvertisedRoutePriority = 100,
 *             Interface = router2Interface1.Name,
 *         });
 *         var router2Interface2 = new Gcp.Compute.RouterInterface("router2Interface2", new Gcp.Compute.RouterInterfaceArgs
 *         {
 *             Router = router2.Name,
 *             Region = "us-central1",
 *             IpRange = "169.254.1.1/30",
 *             VpnTunnel = tunnel4.Name,
 *         });
 *         var router2Peer2 = new Gcp.Compute.RouterPeer("router2Peer2", new Gcp.Compute.RouterPeerArgs
 *         {
 *             Router = router2.Name,
 *             Region = "us-central1",
 *             PeerIpAddress = "169.254.1.2",
 *             PeerAsn = 64514,
 *             AdvertisedRoutePriority = 100,
 *             Interface = router2Interface2.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		network1, err := compute.NewNetwork(ctx, "network1", &compute.NetworkArgs{
 * 			RoutingMode:           pulumi.String("GLOBAL"),
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		haGateway1, err := compute.NewHaVpnGateway(ctx, "haGateway1", &compute.HaVpnGatewayArgs{
 * 			Region:  pulumi.String("us-central1"),
 * 			Network: network1.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		network2, err := compute.NewNetwork(ctx, "network2", &compute.NetworkArgs{
 * 			RoutingMode:           pulumi.String("GLOBAL"),
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		haGateway2, err := compute.NewHaVpnGateway(ctx, "haGateway2", &compute.HaVpnGatewayArgs{
 * 			Region:  pulumi.String("us-central1"),
 * 			Network: network2.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetwork(ctx, "network1Subnet1", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.1.0/24"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     network1.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetwork(ctx, "network1Subnet2", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.2.0/24"),
 * 			Region:      pulumi.String("us-west1"),
 * 			Network:     network1.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetwork(ctx, "network2Subnet1", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("192.168.1.0/24"),
 * 			Region:      pulumi.String("us-central1"),
 * 			Network:     network2.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewSubnetwork(ctx, "network2Subnet2", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("192.168.2.0/24"),
 * 			Region:      pulumi.String("us-east1"),
 * 			Network:     network2.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router1, err := compute.NewRouter(ctx, "router1", &compute.RouterArgs{
 * 			Network: network1.Name,
 * 			Bgp: &compute.RouterBgpArgs{
 * 				Asn: pulumi.Int(64514),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router2, err := compute.NewRouter(ctx, "router2", &compute.RouterArgs{
 * 			Network: network2.Name,
 * 			Bgp: &compute.RouterBgpArgs{
 * 				Asn: pulumi.Int(64515),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tunnel1, err := compute.NewVPNTunnel(ctx, "tunnel1", &compute.VPNTunnelArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			VpnGateway:          haGateway1.ID(),
 * 			PeerGcpGateway:      haGateway2.ID(),
 * 			SharedSecret:        pulumi.String("a secret message"),
 * 			Router:              router1.ID(),
 * 			VpnGatewayInterface: pulumi.Int(0),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tunnel2, err := compute.NewVPNTunnel(ctx, "tunnel2", &compute.VPNTunnelArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			VpnGateway:          haGateway1.ID(),
 * 			PeerGcpGateway:      haGateway2.ID(),
 * 			SharedSecret:        pulumi.String("a secret message"),
 * 			Router:              router1.ID(),
 * 			VpnGatewayInterface: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tunnel3, err := compute.NewVPNTunnel(ctx, "tunnel3", &compute.VPNTunnelArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			VpnGateway:          haGateway2.ID(),
 * 			PeerGcpGateway:      haGateway1.ID(),
 * 			SharedSecret:        pulumi.String("a secret message"),
 * 			Router:              router2.ID(),
 * 			VpnGatewayInterface: pulumi.Int(0),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tunnel4, err := compute.NewVPNTunnel(ctx, "tunnel4", &compute.VPNTunnelArgs{
 * 			Region:              pulumi.String("us-central1"),
 * 			VpnGateway:          haGateway2.ID(),
 * 			PeerGcpGateway:      haGateway1.ID(),
 * 			SharedSecret:        pulumi.String("a secret message"),
 * 			Router:              router2.ID(),
 * 			VpnGatewayInterface: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router1Interface1, err := compute.NewRouterInterface(ctx, "router1Interface1", &compute.RouterInterfaceArgs{
 * 			Router:    router1.Name,
 * 			Region:    pulumi.String("us-central1"),
 * 			IpRange:   pulumi.String("169.254.0.1/30"),
 * 			VpnTunnel: tunnel1.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRouterPeer(ctx, "router1Peer1", &compute.RouterPeerArgs{
 * 			Router:                  router1.Name,
 * 			Region:                  pulumi.String("us-central1"),
 * 			PeerIpAddress:           pulumi.String("169.254.0.2"),
 * 			PeerAsn:                 pulumi.Int(64515),
 * 			AdvertisedRoutePriority: pulumi.Int(100),
 * 			Interface:               router1Interface1.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router1Interface2, err := compute.NewRouterInterface(ctx, "router1Interface2", &compute.RouterInterfaceArgs{
 * 			Router:    router1.Name,
 * 			Region:    pulumi.String("us-central1"),
 * 			IpRange:   pulumi.String("169.254.1.2/30"),
 * 			VpnTunnel: tunnel2.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRouterPeer(ctx, "router1Peer2", &compute.RouterPeerArgs{
 * 			Router:                  router1.Name,
 * 			Region:                  pulumi.String("us-central1"),
 * 			PeerIpAddress:           pulumi.String("169.254.1.1"),
 * 			PeerAsn:                 pulumi.Int(64515),
 * 			AdvertisedRoutePriority: pulumi.Int(100),
 * 			Interface:               router1Interface2.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router2Interface1, err := compute.NewRouterInterface(ctx, "router2Interface1", &compute.RouterInterfaceArgs{
 * 			Router:    router2.Name,
 * 			Region:    pulumi.String("us-central1"),
 * 			IpRange:   pulumi.String("169.254.0.2/30"),
 * 			VpnTunnel: tunnel3.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRouterPeer(ctx, "router2Peer1", &compute.RouterPeerArgs{
 * 			Router:                  router2.Name,
 * 			Region:                  pulumi.String("us-central1"),
 * 			PeerIpAddress:           pulumi.String("169.254.0.1"),
 * 			PeerAsn:                 pulumi.Int(64514),
 * 			AdvertisedRoutePriority: pulumi.Int(100),
 * 			Interface:               router2Interface1.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router2Interface2, err := compute.NewRouterInterface(ctx, "router2Interface2", &compute.RouterInterfaceArgs{
 * 			Router:    router2.Name,
 * 			Region:    pulumi.String("us-central1"),
 * 			IpRange:   pulumi.String("169.254.1.1/30"),
 * 			VpnTunnel: tunnel4.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewRouterPeer(ctx, "router2Peer2", &compute.RouterPeerArgs{
 * 			Router:                  router2.Name,
 * 			Region:                  pulumi.String("us-central1"),
 * 			PeerIpAddress:           pulumi.String("169.254.1.2"),
 * 			PeerAsn:                 pulumi.Int(64514),
 * 			AdvertisedRoutePriority: pulumi.Int(100),
 * 			Interface:               router2Interface2.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Compute Ha Vpn Gateway Encrypted Interconnect
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network = new gcp.compute.Network("network", {autoCreateSubnetworks: false});
 * const address1 = new gcp.compute.Address("address1", {
 *     addressType: "INTERNAL",
 *     purpose: "IPSEC_INTERCONNECT",
 *     address: "192.168.1.0",
 *     prefixLength: 29,
 *     network: network.selfLink,
 * });
 * const router = new gcp.compute.Router("router", {
 *     network: network.name,
 *     encryptedInterconnectRouter: true,
 *     bgp: {
 *         asn: 16550,
 *     },
 * });
 * const attachment1 = new gcp.compute.InterconnectAttachment("attachment1", {
 *     edgeAvailabilityDomain: "AVAILABILITY_DOMAIN_1",
 *     type: "PARTNER",
 *     router: router.id,
 *     encryption: "IPSEC",
 *     ipsecInternalAddresses: [address1.selfLink],
 * });
 * const address2 = new gcp.compute.Address("address2", {
 *     addressType: "INTERNAL",
 *     purpose: "IPSEC_INTERCONNECT",
 *     address: "192.168.2.0",
 *     prefixLength: 29,
 *     network: network.selfLink,
 * });
 * const attachment2 = new gcp.compute.InterconnectAttachment("attachment2", {
 *     edgeAvailabilityDomain: "AVAILABILITY_DOMAIN_2",
 *     type: "PARTNER",
 *     router: router.id,
 *     encryption: "IPSEC",
 *     ipsecInternalAddresses: [address2.selfLink],
 * });
 * const vpn_gateway = new gcp.compute.HaVpnGateway("vpn-gateway", {
 *     network: network.id,
 *     vpnInterfaces: [
 *         {
 *             id: 0,
 *             interconnectAttachment: attachment1.selfLink,
 *         },
 *         {
 *             id: 1,
 *             interconnectAttachment: attachment2.selfLink,
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network = gcp.compute.Network("network", auto_create_subnetworks=False)
 * address1 = gcp.compute.Address("address1",
 *     address_type="INTERNAL",
 *     purpose="IPSEC_INTERCONNECT",
 *     address="192.168.1.0",
 *     prefix_length=29,
 *     network=network.self_link)
 * router = gcp.compute.Router("router",
 *     network=network.name,
 *     encrypted_interconnect_router=True,
 *     bgp=gcp.compute.RouterBgpArgs(
 *         asn=16550,
 *     ))
 * attachment1 = gcp.compute.InterconnectAttachment("attachment1",
 *     edge_availability_domain="AVAILABILITY_DOMAIN_1",
 *     type="PARTNER",
 *     router=router.id,
 *     encryption="IPSEC",
 *     ipsec_internal_addresses=[address1.self_link])
 * address2 = gcp.compute.Address("address2",
 *     address_type="INTERNAL",
 *     purpose="IPSEC_INTERCONNECT",
 *     address="192.168.2.0",
 *     prefix_length=29,
 *     network=network.self_link)
 * attachment2 = gcp.compute.InterconnectAttachment("attachment2",
 *     edge_availability_domain="AVAILABILITY_DOMAIN_2",
 *     type="PARTNER",
 *     router=router.id,
 *     encryption="IPSEC",
 *     ipsec_internal_addresses=[address2.self_link])
 * vpn_gateway = gcp.compute.HaVpnGateway("vpn-gateway",
 *     network=network.id,
 *     vpn_interfaces=[
 *         gcp.compute.HaVpnGatewayVpnInterfaceArgs(
 *             id=0,
 *             interconnect_attachment=attachment1.self_link,
 *         ),
 *         gcp.compute.HaVpnGatewayVpnInterfaceArgs(
 *             id=1,
 *             interconnect_attachment=attachment2.self_link,
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network = new Gcp.Compute.Network("network", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var address1 = new Gcp.Compute.Address("address1", new Gcp.Compute.AddressArgs
 *         {
 *             AddressType = "INTERNAL",
 *             Purpose = "IPSEC_INTERCONNECT",
 *             Address = "192.168.1.0",
 *             PrefixLength = 29,
 *             Network = network.SelfLink,
 *         });
 *         var router = new Gcp.Compute.Router("router", new Gcp.Compute.RouterArgs
 *         {
 *             Network = network.Name,
 *             EncryptedInterconnectRouter = true,
 *             Bgp = new Gcp.Compute.Inputs.RouterBgpArgs
 *             {
 *                 Asn = 16550,
 *             },
 *         });
 *         var attachment1 = new Gcp.Compute.InterconnectAttachment("attachment1", new Gcp.Compute.InterconnectAttachmentArgs
 *         {
 *             EdgeAvailabilityDomain = "AVAILABILITY_DOMAIN_1",
 *             Type = "PARTNER",
 *             Router = router.Id,
 *             Encryption = "IPSEC",
 *             IpsecInternalAddresses = 
 *             {
 *                 address1.SelfLink,
 *             },
 *         });
 *         var address2 = new Gcp.Compute.Address("address2", new Gcp.Compute.AddressArgs
 *         {
 *             AddressType = "INTERNAL",
 *             Purpose = "IPSEC_INTERCONNECT",
 *             Address = "192.168.2.0",
 *             PrefixLength = 29,
 *             Network = network.SelfLink,
 *         });
 *         var attachment2 = new Gcp.Compute.InterconnectAttachment("attachment2", new Gcp.Compute.InterconnectAttachmentArgs
 *         {
 *             EdgeAvailabilityDomain = "AVAILABILITY_DOMAIN_2",
 *             Type = "PARTNER",
 *             Router = router.Id,
 *             Encryption = "IPSEC",
 *             IpsecInternalAddresses = 
 *             {
 *                 address2.SelfLink,
 *             },
 *         });
 *         var vpn_gateway = new Gcp.Compute.HaVpnGateway("vpn-gateway", new Gcp.Compute.HaVpnGatewayArgs
 *         {
 *             Network = network.Id,
 *             VpnInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.HaVpnGatewayVpnInterfaceArgs
 *                 {
 *                     Id = 0,
 *                     InterconnectAttachment = attachment1.SelfLink,
 *                 },
 *                 new Gcp.Compute.Inputs.HaVpnGatewayVpnInterfaceArgs
 *                 {
 *                     Id = 1,
 *                     InterconnectAttachment = attachment2.SelfLink,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		address1, err := compute.NewAddress(ctx, "address1", &compute.AddressArgs{
 * 			AddressType:  pulumi.String("INTERNAL"),
 * 			Purpose:      pulumi.String("IPSEC_INTERCONNECT"),
 * 			Address:      pulumi.String("192.168.1.0"),
 * 			PrefixLength: pulumi.Int(29),
 * 			Network:      network.SelfLink,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
 * 			Network:                     network.Name,
 * 			EncryptedInterconnectRouter: pulumi.Bool(true),
 * 			Bgp: &compute.RouterBgpArgs{
 * 				Asn: pulumi.Int(16550),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		attachment1, err := compute.NewInterconnectAttachment(ctx, "attachment1", &compute.InterconnectAttachmentArgs{
 * 			EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_1"),
 * 			Type:                   pulumi.String("PARTNER"),
 * 			Router:                 router.ID(),
 * 			Encryption:             pulumi.String("IPSEC"),
 * 			IpsecInternalAddresses: pulumi.StringArray{
 * 				address1.SelfLink,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		address2, err := compute.NewAddress(ctx, "address2", &compute.AddressArgs{
 * 			AddressType:  pulumi.String("INTERNAL"),
 * 			Purpose:      pulumi.String("IPSEC_INTERCONNECT"),
 * 			Address:      pulumi.String("192.168.2.0"),
 * 			PrefixLength: pulumi.Int(29),
 * 			Network:      network.SelfLink,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		attachment2, err := compute.NewInterconnectAttachment(ctx, "attachment2", &compute.InterconnectAttachmentArgs{
 * 			EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_2"),
 * 			Type:                   pulumi.String("PARTNER"),
 * 			Router:                 router.ID(),
 * 			Encryption:             pulumi.String("IPSEC"),
 * 			IpsecInternalAddresses: pulumi.StringArray{
 * 				address2.SelfLink,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewHaVpnGateway(ctx, "vpn-gateway", &compute.HaVpnGatewayArgs{
 * 			Network: network.ID(),
 * 			VpnInterfaces: compute.HaVpnGatewayVpnInterfaceArray{
 * 				&compute.HaVpnGatewayVpnInterfaceArgs{
 * 					Id:                     pulumi.Int(0),
 * 					InterconnectAttachment: attachment1.SelfLink,
 * 				},
 * 				&compute.HaVpnGatewayVpnInterfaceArgs{
 * 					Id:                     pulumi.Int(1),
 * 					InterconnectAttachment: attachment2.SelfLink,
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * HaVpnGateway can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/haVpnGateway:HaVpnGateway")
public class HaVpnGateway extends io.pulumi.resources.CustomResource {
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The network this VPN gateway is accepting traffic for.
     * 
     */
    @Export(name="network", type=String.class, parameters={})
    private Output<String> network;

    /**
     * @return The network this VPN gateway is accepting traffic for.
     * 
     */
    public Output<String> getNetwork() {
        return this.network;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The region this gateway should sit in.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region this gateway should sit in.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * A list of interfaces on this VPN gateway.
     * Structure is documented below.
     * 
     */
    @Export(name="vpnInterfaces", type=List.class, parameters={HaVpnGatewayVpnInterface.class})
    private Output<List<HaVpnGatewayVpnInterface>> vpnInterfaces;

    /**
     * @return A list of interfaces on this VPN gateway.
     * Structure is documented below.
     * 
     */
    public Output<List<HaVpnGatewayVpnInterface>> getVpnInterfaces() {
        return this.vpnInterfaces;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HaVpnGateway(String name) {
        this(name, HaVpnGatewayArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HaVpnGateway(String name, HaVpnGatewayArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HaVpnGateway(String name, HaVpnGatewayArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/haVpnGateway:HaVpnGateway", name, args == null ? HaVpnGatewayArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private HaVpnGateway(String name, Output<String> id, @Nullable HaVpnGatewayState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/haVpnGateway:HaVpnGateway", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HaVpnGateway get(String name, Output<String> id, @Nullable HaVpnGatewayState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new HaVpnGateway(name, id, state, options);
    }
}
