// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.kms;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
import io.pulumi.gcp.kms.inputs.CryptoKeyIAMBindingState;
import io.pulumi.gcp.kms.outputs.CryptoKeyIAMBindingCondition;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Three different resources help you manage your IAM policy for KMS crypto key. Each of these resources serves a different use case:
 * 
 * * `gcp.kms.CryptoKeyIAMPolicy`: Authoritative. Sets the IAM policy for the crypto key and replaces any existing policy already attached.
 * * `gcp.kms.CryptoKeyIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the crypto key are preserved.
 * * `gcp.kms.CryptoKeyIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the crypto key are preserved.
 * 
 * > **Note:** `gcp.kms.CryptoKeyIAMPolicy` **cannot** be used in conjunction with `gcp.kms.CryptoKeyIAMBinding` and `gcp.kms.CryptoKeyIAMMember` or they will fight over what your policy should be.
 * 
 * > **Note:** `gcp.kms.CryptoKeyIAMBinding` resources **can be** used in conjunction with `gcp.kms.CryptoKeyIAMMember` resources **only if** they do not grant privilege to the same role.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const keyring = new gcp.kms.KeyRing("keyring", {location: "global"});
 * const key = new gcp.kms.CryptoKey("key", {
 *     keyRing: keyring.id,
 *     rotationPeriod: "100000s",
 * });
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/cloudkms.cryptoKeyEncrypter",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const cryptoKey = new gcp.kms.CryptoKeyIAMPolicy("cryptoKey", {
 *     cryptoKeyId: key.id,
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * keyring = gcp.kms.KeyRing("keyring", location="global")
 * key = gcp.kms.CryptoKey("key",
 *     key_ring=keyring.id,
 *     rotation_period="100000s")
 * admin = gcp.organizations.get_iam_policy(bindings=[gcp.organizations.GetIAMPolicyBindingArgs(
 *     role="roles/cloudkms.cryptoKeyEncrypter",
 *     members=["user:jane@example.com"],
 * )])
 * crypto_key = gcp.kms.CryptoKeyIAMPolicy("cryptoKey",
 *     crypto_key_id=key.id,
 *     policy_data=admin.policy_data)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var keyring = new Gcp.Kms.KeyRing("keyring", new Gcp.Kms.KeyRingArgs
 *         {
 *             Location = "global",
 *         });
 *         var key = new Gcp.Kms.CryptoKey("key", new Gcp.Kms.CryptoKeyArgs
 *         {
 *             KeyRing = keyring.Id,
 *             RotationPeriod = "100000s",
 *         });
 *         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
 *         {
 *             Bindings = 
 *             {
 *                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
 *                 {
 *                     Role = "roles/cloudkms.cryptoKeyEncrypter",
 *                     Members = 
 *                     {
 *                         "user:jane@example.com",
 *                     },
 *                 },
 *             },
 *         }));
 *         var cryptoKey = new Gcp.Kms.CryptoKeyIAMPolicy("cryptoKey", new Gcp.Kms.CryptoKeyIAMPolicyArgs
 *         {
 *             CryptoKeyId = key.Id,
 *             PolicyData = admin.Apply(admin => admin.PolicyData),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
 * 			Location: pulumi.String("global"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		key, err := kms.NewCryptoKey(ctx, "key", &kms.CryptoKeyArgs{
 * 			KeyRing:        keyring.ID(),
 * 			RotationPeriod: pulumi.String("100000s"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
 * 			Bindings: []organizations.GetIAMPolicyBinding{
 * 				organizations.GetIAMPolicyBinding{
 * 					Role: "roles/cloudkms.cryptoKeyEncrypter",
 * 					Members: []string{
 * 						"user:jane@example.com",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = kms.NewCryptoKeyIAMPolicy(ctx, "cryptoKey", &kms.CryptoKeyIAMPolicyArgs{
 * 			CryptoKeyId: key.ID(),
 * 			PolicyData:  pulumi.String(admin.PolicyData),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const admin = pulumi.output(gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         condition: {
 *             description: "Expiring at midnight of 2019-12-31",
 *             expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *             title: "expires_after_2019_12_31",
 *         },
 *         members: ["user:jane@example.com"],
 *         role: "roles/cloudkms.cryptoKeyEncrypter",
 *     }],
 * }));
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * admin = gcp.organizations.get_iam_policy(bindings=[gcp.organizations.GetIAMPolicyBindingArgs(
 *     condition=gcp.organizations.GetIAMPolicyBindingConditionArgs(
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *         title="expires_after_2019_12_31",
 *     ),
 *     members=["user:jane@example.com"],
 *     role="roles/cloudkms.cryptoKeyEncrypter",
 * )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var admin = Output.Create(Gcp.Organizations.GetIAMPolicy.InvokeAsync(new Gcp.Organizations.GetIAMPolicyArgs
 *         {
 *             Bindings = 
 *             {
 *                 new Gcp.Organizations.Inputs.GetIAMPolicyBindingArgs
 *                 {
 *                     Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionArgs
 *                     {
 *                         Description = "Expiring at midnight of 2019-12-31",
 *                         Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *                         Title = "expires_after_2019_12_31",
 *                     },
 *                     Members = 
 *                     {
 *                         "user:jane@example.com",
 *                     },
 *                     Role = "roles/cloudkms.cryptoKeyEncrypter",
 *                 },
 *             },
 *         }));
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
 * 			Bindings: []organizations.GetIAMPolicyBinding{
 * 				organizations.GetIAMPolicyBinding{
 * 					Condition: organizations.GetIAMPolicyBindingCondition{
 * 						Description: "Expiring at midnight of 2019-12-31",
 * 						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 * 						Title:       "expires_after_2019_12_31",
 * 					},
 * 					Members: []string{
 * 						"user:jane@example.com",
 * 					},
 * 					Role: "roles/cloudkms.cryptoKeyEncrypter",
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const cryptoKey = new gcp.kms.CryptoKeyIAMBinding("cryptoKey", {
 *     cryptoKeyId: google_kms_crypto_key.key.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypter",
 *     members: ["user:jane@example.com"],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * crypto_key = gcp.kms.CryptoKeyIAMBinding("cryptoKey",
 *     crypto_key_id=google_kms_crypto_key["key"]["id"],
 *     role="roles/cloudkms.cryptoKeyEncrypter",
 *     members=["user:jane@example.com"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var cryptoKey = new Gcp.Kms.CryptoKeyIAMBinding("cryptoKey", new Gcp.Kms.CryptoKeyIAMBindingArgs
 *         {
 *             CryptoKeyId = google_kms_crypto_key.Key.Id,
 *             Role = "roles/cloudkms.cryptoKeyEncrypter",
 *             Members = 
 *             {
 *                 "user:jane@example.com",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := kms.NewCryptoKeyIAMBinding(ctx, "cryptoKey", &kms.CryptoKeyIAMBindingArgs{
 * 			CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
 * 			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
 * 			Members: pulumi.StringArray{
 * 				pulumi.String("user:jane@example.com"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const cryptoKey = new gcp.kms.CryptoKeyIAMBinding("cryptoKey", {
 *     cryptoKeyId: google_kms_crypto_key.key.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypter",
 *     members: ["user:jane@example.com"],
 *     condition: {
 *         title: "expires_after_2019_12_31",
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * crypto_key = gcp.kms.CryptoKeyIAMBinding("cryptoKey",
 *     crypto_key_id=google_kms_crypto_key["key"]["id"],
 *     role="roles/cloudkms.cryptoKeyEncrypter",
 *     members=["user:jane@example.com"],
 *     condition=gcp.kms.CryptoKeyIAMBindingConditionArgs(
 *         title="expires_after_2019_12_31",
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var cryptoKey = new Gcp.Kms.CryptoKeyIAMBinding("cryptoKey", new Gcp.Kms.CryptoKeyIAMBindingArgs
 *         {
 *             CryptoKeyId = google_kms_crypto_key.Key.Id,
 *             Role = "roles/cloudkms.cryptoKeyEncrypter",
 *             Members = 
 *             {
 *                 "user:jane@example.com",
 *             },
 *             Condition = new Gcp.Kms.Inputs.CryptoKeyIAMBindingConditionArgs
 *             {
 *                 Title = "expires_after_2019_12_31",
 *                 Description = "Expiring at midnight of 2019-12-31",
 *                 Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := kms.NewCryptoKeyIAMBinding(ctx, "cryptoKey", &kms.CryptoKeyIAMBindingArgs{
 * 			CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
 * 			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
 * 			Members: pulumi.StringArray{
 * 				pulumi.String("user:jane@example.com"),
 * 			},
 * 			Condition: &kms.CryptoKeyIAMBindingConditionArgs{
 * 				Title:       pulumi.String("expires_after_2019_12_31"),
 * 				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
 * 				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const cryptoKey = new gcp.kms.CryptoKeyIAMMember("cryptoKey", {
 *     cryptoKeyId: google_kms_crypto_key.key.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypter",
 *     member: "user:jane@example.com",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * crypto_key = gcp.kms.CryptoKeyIAMMember("cryptoKey",
 *     crypto_key_id=google_kms_crypto_key["key"]["id"],
 *     role="roles/cloudkms.cryptoKeyEncrypter",
 *     member="user:jane@example.com")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("cryptoKey", new Gcp.Kms.CryptoKeyIAMMemberArgs
 *         {
 *             CryptoKeyId = google_kms_crypto_key.Key.Id,
 *             Role = "roles/cloudkms.cryptoKeyEncrypter",
 *             Member = "user:jane@example.com",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := kms.NewCryptoKeyIAMMember(ctx, "cryptoKey", &kms.CryptoKeyIAMMemberArgs{
 * 			CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
 * 			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
 * 			Member:      pulumi.String("user:jane@example.com"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * With IAM Conditions:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const cryptoKey = new gcp.kms.CryptoKeyIAMMember("cryptoKey", {
 *     cryptoKeyId: google_kms_crypto_key.key.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypter",
 *     member: "user:jane@example.com",
 *     condition: {
 *         title: "expires_after_2019_12_31",
 *         description: "Expiring at midnight of 2019-12-31",
 *         expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * crypto_key = gcp.kms.CryptoKeyIAMMember("cryptoKey",
 *     crypto_key_id=google_kms_crypto_key["key"]["id"],
 *     role="roles/cloudkms.cryptoKeyEncrypter",
 *     member="user:jane@example.com",
 *     condition=gcp.kms.CryptoKeyIAMMemberConditionArgs(
 *         title="expires_after_2019_12_31",
 *         description="Expiring at midnight of 2019-12-31",
 *         expression="request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("cryptoKey", new Gcp.Kms.CryptoKeyIAMMemberArgs
 *         {
 *             CryptoKeyId = google_kms_crypto_key.Key.Id,
 *             Role = "roles/cloudkms.cryptoKeyEncrypter",
 *             Member = "user:jane@example.com",
 *             Condition = new Gcp.Kms.Inputs.CryptoKeyIAMMemberConditionArgs
 *             {
 *                 Title = "expires_after_2019_12_31",
 *                 Description = "Expiring at midnight of 2019-12-31",
 *                 Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := kms.NewCryptoKeyIAMMember(ctx, "cryptoKey", &kms.CryptoKeyIAMMemberArgs{
 * 			CryptoKeyId: pulumi.Any(google_kms_crypto_key.Key.Id),
 * 			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypter"),
 * 			Member:      pulumi.String("user:jane@example.com"),
 * 			Condition: &kms.CryptoKeyIAMMemberConditionArgs{
 * 				Title:       pulumi.String("expires_after_2019_12_31"),
 * 				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
 * 				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * IAM member imports use space-delimited identifiers; the resource in question, the role, and the account.
 * 
 * This member resource can be imported using the `crypto_key_id`, role, and member identity e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding crypto_key "your-project-id/location-name/key-ring-name/key-name roles/viewer user:foo@example.com"
 * ```
 * 
 *  IAM binding imports use space-delimited identifiers; first the resource in question and then the role.
 * 
 * These bindings can be imported using the `crypto_key_id` and role, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding crypto_key "your-project-id/location-name/key-ring-name/key-name roles/editor"
 * ```
 * 
 *  IAM policy imports use the identifier of the resource in question.
 * 
 * This policy resource can be imported using the `crypto_key_id`, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding crypto_key your-project-id/location-name/key-ring-name/key-name
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding")
public class CryptoKeyIAMBinding extends io.pulumi.resources.CustomResource {
    /**
     * ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    @Export(name="condition", type=CryptoKeyIAMBindingCondition.class, parameters={})
    private Output</* @Nullable */ CryptoKeyIAMBindingCondition> condition;

    /**
     * @return ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ CryptoKeyIAMBindingCondition> getCondition() {
        return this.condition;
    }
    /**
     * The crypto key ID, in the form
     * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
     * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
     * the provider's project setting will be used as a fallback.
     * 
     */
    @Export(name="cryptoKeyId", type=String.class, parameters={})
    private Output<String> cryptoKeyId;

    /**
     * @return The crypto key ID, in the form
     * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
     * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
     * the provider's project setting will be used as a fallback.
     * 
     */
    public Output<String> getCryptoKeyId() {
        return this.cryptoKeyId;
    }
    /**
     * (Computed) The etag of the project's IAM policy.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return (Computed) The etag of the project's IAM policy.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    @Export(name="members", type=List.class, parameters={String.class})
    private Output<List<String>> members;

    public Output<List<String>> getMembers() {
        return this.members;
    }
    /**
     * The role that should be applied. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Export(name="role", type=String.class, parameters={})
    private Output<String> role;

    /**
     * @return The role that should be applied. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    public Output<String> getRole() {
        return this.role;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CryptoKeyIAMBinding(String name) {
        this(name, CryptoKeyIAMBindingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CryptoKeyIAMBinding(String name, CryptoKeyIAMBindingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CryptoKeyIAMBinding(String name, CryptoKeyIAMBindingArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding", name, args == null ? CryptoKeyIAMBindingArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private CryptoKeyIAMBinding(String name, Output<String> id, @Nullable CryptoKeyIAMBindingState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CryptoKeyIAMBinding get(String name, Output<String> id, @Nullable CryptoKeyIAMBindingState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new CryptoKeyIAMBinding(name, id, state, options);
    }
}
