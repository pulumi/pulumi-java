// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudrun.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerArgs;
import io.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecVolumeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceTemplateSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecArgs Empty = new ServiceTemplateSpecArgs();

    /**
     * ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
     * requests per container of the Revision. Values are:
     * 
     */
    @InputImport(name="containerConcurrency")
      private final @Nullable Output<Integer> containerConcurrency;

    public Output<Integer> getContainerConcurrency() {
        return this.containerConcurrency == null ? Output.empty() : this.containerConcurrency;
    }

    /**
     * Container defines the unit of execution for this Revision.
     * In the context of a Revision, we disallow a number of the fields of
     * this Container, including: name, ports, and volumeMounts.
     * The runtime contract is documented here:
     * https://github.com/knative/serving/blob/master/docs/runtime-contract.md
     * Structure is documented below.
     * 
     */
    @InputImport(name="containers")
      private final @Nullable Output<List<ServiceTemplateSpecContainerArgs>> containers;

    public Output<List<ServiceTemplateSpecContainerArgs>> getContainers() {
        return this.containers == null ? Output.empty() : this.containers;
    }

    /**
     * Email address of the IAM service account associated with the revision of the
     * service. The service account represents the identity of the running revision,
     * and determines what permissions the revision has. If not provided, the revision
     * will use the project's default service account.
     * 
     */
    @InputImport(name="serviceAccountName")
      private final @Nullable Output<String> serviceAccountName;

    public Output<String> getServiceAccountName() {
        return this.serviceAccountName == null ? Output.empty() : this.serviceAccountName;
    }

    /**
     * - 
     * ServingState holds a value describing the state the resources
     * are in for this Revision.
     * It is expected
     * that the system will manipulate this based on routability and load.
     * 
     * @Deprecated
     * Not supported by Cloud Run fully managed
     * 
     */
    @Deprecated /* Not supported by Cloud Run fully managed */
    @InputImport(name="servingState")
      private final @Nullable Output<String> servingState;

    @Deprecated /* Not supported by Cloud Run fully managed */
    public Output<String> getServingState() {
        return this.servingState == null ? Output.empty() : this.servingState;
    }

    /**
     * TimeoutSeconds holds the max duration the instance is allowed for responding to a request.
     * 
     */
    @InputImport(name="timeoutSeconds")
      private final @Nullable Output<Integer> timeoutSeconds;

    public Output<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Output.empty() : this.timeoutSeconds;
    }

    /**
     * Volume represents a named volume in a container.
     * Structure is documented below.
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Output<List<ServiceTemplateSpecVolumeArgs>> volumes;

    public Output<List<ServiceTemplateSpecVolumeArgs>> getVolumes() {
        return this.volumes == null ? Output.empty() : this.volumes;
    }

    public ServiceTemplateSpecArgs(
        @Nullable Output<Integer> containerConcurrency,
        @Nullable Output<List<ServiceTemplateSpecContainerArgs>> containers,
        @Nullable Output<String> serviceAccountName,
        @Nullable Output<String> servingState,
        @Nullable Output<Integer> timeoutSeconds,
        @Nullable Output<List<ServiceTemplateSpecVolumeArgs>> volumes) {
        this.containerConcurrency = containerConcurrency;
        this.containers = containers;
        this.serviceAccountName = serviceAccountName;
        this.servingState = servingState;
        this.timeoutSeconds = timeoutSeconds;
        this.volumes = volumes;
    }

    private ServiceTemplateSpecArgs() {
        this.containerConcurrency = Output.empty();
        this.containers = Output.empty();
        this.serviceAccountName = Output.empty();
        this.servingState = Output.empty();
        this.timeoutSeconds = Output.empty();
        this.volumes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTemplateSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> containerConcurrency;
        private @Nullable Output<List<ServiceTemplateSpecContainerArgs>> containers;
        private @Nullable Output<String> serviceAccountName;
        private @Nullable Output<String> servingState;
        private @Nullable Output<Integer> timeoutSeconds;
        private @Nullable Output<List<ServiceTemplateSpecVolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceTemplateSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerConcurrency = defaults.containerConcurrency;
    	      this.containers = defaults.containers;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.servingState = defaults.servingState;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder containerConcurrency(@Nullable Output<Integer> containerConcurrency) {
            this.containerConcurrency = containerConcurrency;
            return this;
        }

        public Builder containerConcurrency(@Nullable Integer containerConcurrency) {
            this.containerConcurrency = Output.ofNullable(containerConcurrency);
            return this;
        }

        public Builder containers(@Nullable Output<List<ServiceTemplateSpecContainerArgs>> containers) {
            this.containers = containers;
            return this;
        }

        public Builder containers(@Nullable List<ServiceTemplateSpecContainerArgs> containers) {
            this.containers = Output.ofNullable(containers);
            return this;
        }

        public Builder serviceAccountName(@Nullable Output<String> serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder serviceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = Output.ofNullable(serviceAccountName);
            return this;
        }

        public Builder servingState(@Nullable Output<String> servingState) {
            this.servingState = servingState;
            return this;
        }

        public Builder servingState(@Nullable String servingState) {
            this.servingState = Output.ofNullable(servingState);
            return this;
        }

        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Output.ofNullable(timeoutSeconds);
            return this;
        }

        public Builder volumes(@Nullable Output<List<ServiceTemplateSpecVolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder volumes(@Nullable List<ServiceTemplateSpecVolumeArgs> volumes) {
            this.volumes = Output.ofNullable(volumes);
            return this;
        }
        public ServiceTemplateSpecArgs build() {
            return new ServiceTemplateSpecArgs(containerConcurrency, containers, serviceAccountName, servingState, timeoutSeconds, volumes);
        }
    }
}
