// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.servicedirectory;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.servicedirectory.EndpointArgs;
import io.pulumi.gcp.servicedirectory.inputs.EndpointState;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * An individual endpoint that provides a service.
 * 
 * To get more information about Endpoint, see:
 * 
 * * [API documentation](https://cloud.google.com/service-directory/docs/reference/rest/v1beta1/projects.locations.namespaces.services.endpoints)
 * * How-to Guides
 *     * [Configuring an endpoint](https://cloud.google.com/service-directory/docs/configuring-service-directory#configuring_an_endpoint)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Service Directory Endpoint Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const exampleNamespace = new gcp.servicedirectory.Namespace("exampleNamespace", {
 *     namespaceId: "example-namespace",
 *     location: "us-central1",
 * }, {
 *     provider: google_beta,
 * });
 * const exampleService = new gcp.servicedirectory.Service("exampleService", {
 *     serviceId: "example-service",
 *     namespace: exampleNamespace.id,
 * }, {
 *     provider: google_beta,
 * });
 * const exampleEndpoint = new gcp.servicedirectory.Endpoint("exampleEndpoint", {
 *     endpointId: "example-endpoint",
 *     service: exampleService.id,
 *     metadata: {
 *         stage: "prod",
 *         region: "us-central1",
 *     },
 *     address: "1.2.3.4",
 *     port: 5353,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * example_namespace = gcp.servicedirectory.Namespace("exampleNamespace",
 *     namespace_id="example-namespace",
 *     location="us-central1",
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * example_service = gcp.servicedirectory.Service("exampleService",
 *     service_id="example-service",
 *     namespace=example_namespace.id,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * example_endpoint = gcp.servicedirectory.Endpoint("exampleEndpoint",
 *     endpoint_id="example-endpoint",
 *     service=example_service.id,
 *     metadata={
 *         "stage": "prod",
 *         "region": "us-central1",
 *     },
 *     address="1.2.3.4",
 *     port=5353,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleNamespace = new Gcp.ServiceDirectory.Namespace("exampleNamespace", new Gcp.ServiceDirectory.NamespaceArgs
 *         {
 *             NamespaceId = "example-namespace",
 *             Location = "us-central1",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var exampleService = new Gcp.ServiceDirectory.Service("exampleService", new Gcp.ServiceDirectory.ServiceArgs
 *         {
 *             ServiceId = "example-service",
 *             Namespace = exampleNamespace.Id,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var exampleEndpoint = new Gcp.ServiceDirectory.Endpoint("exampleEndpoint", new Gcp.ServiceDirectory.EndpointArgs
 *         {
 *             EndpointId = "example-endpoint",
 *             Service = exampleService.Id,
 *             Metadata = 
 *             {
 *                 { "stage", "prod" },
 *                 { "region", "us-central1" },
 *             },
 *             Address = "1.2.3.4",
 *             Port = 5353,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicedirectory"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleNamespace, err := servicedirectory.NewNamespace(ctx, "exampleNamespace", &servicedirectory.NamespaceArgs{
 * 			NamespaceId: pulumi.String("example-namespace"),
 * 			Location:    pulumi.String("us-central1"),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleService, err := servicedirectory.NewService(ctx, "exampleService", &servicedirectory.ServiceArgs{
 * 			ServiceId: pulumi.String("example-service"),
 * 			Namespace: exampleNamespace.ID(),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = servicedirectory.NewEndpoint(ctx, "exampleEndpoint", &servicedirectory.EndpointArgs{
 * 			EndpointId: pulumi.String("example-endpoint"),
 * 			Service:    exampleService.ID(),
 * 			Metadata: pulumi.StringMap{
 * 				"stage":  pulumi.String("prod"),
 * 				"region": pulumi.String("us-central1"),
 * 			},
 * 			Address: pulumi.String("1.2.3.4"),
 * 			Port:    pulumi.Int(5353),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Service Directory Endpoint With Network
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const project = gcp.organizations.getProject({});
 * const exampleNetwork = new gcp.compute.Network("exampleNetwork", {}, {
 *     provider: google_beta,
 * });
 * const exampleNamespace = new gcp.servicedirectory.Namespace("exampleNamespace", {
 *     namespaceId: "example-namespace",
 *     location: "us-central1",
 * }, {
 *     provider: google_beta,
 * });
 * const exampleService = new gcp.servicedirectory.Service("exampleService", {
 *     serviceId: "example-service",
 *     namespace: exampleNamespace.id,
 * }, {
 *     provider: google_beta,
 * });
 * const exampleEndpoint = new gcp.servicedirectory.Endpoint("exampleEndpoint", {
 *     endpointId: "example-endpoint",
 *     service: exampleService.id,
 *     metadata: {
 *         stage: "prod",
 *         region: "us-central1",
 *     },
 *     network: pulumi.all([project, exampleNetwork.name]).apply(([project, name]) => `projects/${project.number}/locations/global/networks/${name}`),
 *     address: "1.2.3.4",
 *     port: 5353,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * project = gcp.organizations.get_project()
 * example_network = gcp.compute.Network("exampleNetwork", opts=pulumi.ResourceOptions(provider=google_beta))
 * example_namespace = gcp.servicedirectory.Namespace("exampleNamespace",
 *     namespace_id="example-namespace",
 *     location="us-central1",
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * example_service = gcp.servicedirectory.Service("exampleService",
 *     service_id="example-service",
 *     namespace=example_namespace.id,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * example_endpoint = gcp.servicedirectory.Endpoint("exampleEndpoint",
 *     endpoint_id="example-endpoint",
 *     service=example_service.id,
 *     metadata={
 *         "stage": "prod",
 *         "region": "us-central1",
 *     },
 *     network=example_network.name.apply(lambda name: f"projects/{project.number}/locations/global/networks/{name}"),
 *     address="1.2.3.4",
 *     port=5353,
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
 *         var exampleNetwork = new Gcp.Compute.Network("exampleNetwork", new Gcp.Compute.NetworkArgs
 *         {
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var exampleNamespace = new Gcp.ServiceDirectory.Namespace("exampleNamespace", new Gcp.ServiceDirectory.NamespaceArgs
 *         {
 *             NamespaceId = "example-namespace",
 *             Location = "us-central1",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var exampleService = new Gcp.ServiceDirectory.Service("exampleService", new Gcp.ServiceDirectory.ServiceArgs
 *         {
 *             ServiceId = "example-service",
 *             Namespace = exampleNamespace.Id,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var exampleEndpoint = new Gcp.ServiceDirectory.Endpoint("exampleEndpoint", new Gcp.ServiceDirectory.EndpointArgs
 *         {
 *             EndpointId = "example-endpoint",
 *             Service = exampleService.Id,
 *             Metadata = 
 *             {
 *                 { "stage", "prod" },
 *                 { "region", "us-central1" },
 *             },
 *             Network = Output.Tuple(project, exampleNetwork.Name).Apply(values =>
 *             {
 *                 var project = values.Item1;
 *                 var name = values.Item2;
 *                 return $"projects/{project.Number}/locations/global/networks/{name}";
 *             }),
 *             Address = "1.2.3.4",
 *             Port = 5353,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicedirectory"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		project, err := organizations.LookupProject(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleNetwork, err := compute.NewNetwork(ctx, "exampleNetwork", nil, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleNamespace, err := servicedirectory.NewNamespace(ctx, "exampleNamespace", &servicedirectory.NamespaceArgs{
 * 			NamespaceId: pulumi.String("example-namespace"),
 * 			Location:    pulumi.String("us-central1"),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleService, err := servicedirectory.NewService(ctx, "exampleService", &servicedirectory.ServiceArgs{
 * 			ServiceId: pulumi.String("example-service"),
 * 			Namespace: exampleNamespace.ID(),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = servicedirectory.NewEndpoint(ctx, "exampleEndpoint", &servicedirectory.EndpointArgs{
 * 			EndpointId: pulumi.String("example-endpoint"),
 * 			Service:    exampleService.ID(),
 * 			Metadata: pulumi.StringMap{
 * 				"stage":  pulumi.String("prod"),
 * 				"region": pulumi.String("us-central1"),
 * 			},
 * 			Network: exampleNetwork.Name.ApplyT(func(name string) (string, error) {
 * 				return fmt.Sprintf("%v%v%v%v", "projects/", project.Number, "/locations/global/networks/", name), nil
 * 			}).(pulumi.StringOutput),
 * 			Address: pulumi.String("1.2.3.4"),
 * 			Port:    pulumi.Int(5353),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Endpoint can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:servicedirectory/endpoint:Endpoint default projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}/endpoints/{{endpoint_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:servicedirectory/endpoint:Endpoint default {{project}}/{{location}}/{{namespace_id}}/{{service_id}}/{{endpoint_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:servicedirectory/endpoint:Endpoint default {{location}}/{{namespace_id}}/{{service_id}}/{{endpoint_id}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:servicedirectory/endpoint:Endpoint")
public class Endpoint extends io.pulumi.resources.CustomResource {
    /**
     * IPv4 or IPv6 address of the endpoint.
     * 
     */
    @Export(name="address", type=String.class, parameters={})
    private Output</* @Nullable */ String> address;

    /**
     * @return IPv4 or IPv6 address of the endpoint.
     * 
     */
    public Output</* @Nullable */ String> getAddress() {
        return this.address;
    }
    /**
     * The Resource ID must be 1-63 characters long, including digits,
     * lowercase letters or the hyphen character.
     * 
     */
    @Export(name="endpointId", type=String.class, parameters={})
    private Output<String> endpointId;

    /**
     * @return The Resource ID must be 1-63 characters long, including digits,
     * lowercase letters or the hyphen character.
     * 
     */
    public Output<String> getEndpointId() {
        return this.endpointId;
    }
    /**
     * Metadata for the endpoint. This data can be consumed
     * by service clients. The entire metadata dictionary may contain
     * up to 512 characters, spread across all key-value pairs.
     * Metadata that goes beyond any these limits will be rejected.
     * 
     */
    @Export(name="metadata", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> metadata;

    /**
     * @return Metadata for the endpoint. This data can be consumed
     * by service clients. The entire metadata dictionary may contain
     * up to 512 characters, spread across all key-value pairs.
     * Metadata that goes beyond any these limits will be rejected.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getMetadata() {
        return this.metadata;
    }
    /**
     * The resource name for the endpoint in the format 'projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*{@literal /}endpoints/*'.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name for the endpoint in the format 'projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*{@literal /}endpoints/*'.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The URL to the network, such as projects/PROJECT_NUMBER/locations/global/networks/NETWORK_NAME.
     * 
     */
    @Export(name="network", type=String.class, parameters={})
    private Output</* @Nullable */ String> network;

    /**
     * @return The URL to the network, such as projects/PROJECT_NUMBER/locations/global/networks/NETWORK_NAME.
     * 
     */
    public Output</* @Nullable */ String> getNetwork() {
        return this.network;
    }
    /**
     * Port that the endpoint is running on, must be in the
     * range of [0, 65535]. If unspecified, the default is 0.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> port;

    /**
     * @return Port that the endpoint is running on, must be in the
     * range of [0, 65535]. If unspecified, the default is 0.
     * 
     */
    public Output</* @Nullable */ Integer> getPort() {
        return this.port;
    }
    /**
     * The resource name of the service that this endpoint provides.
     * 
     */
    @Export(name="service", type=String.class, parameters={})
    private Output<String> service;

    /**
     * @return The resource name of the service that this endpoint provides.
     * 
     */
    public Output<String> getService() {
        return this.service;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Endpoint(String name) {
        this(name, EndpointArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Endpoint(String name, EndpointArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Endpoint(String name, EndpointArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:servicedirectory/endpoint:Endpoint", name, args == null ? EndpointArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Endpoint(String name, Output<String> id, @Nullable EndpointState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:servicedirectory/endpoint:Endpoint", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Endpoint get(String name, Output<String> id, @Nullable EndpointState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Endpoint(name, id, state, options);
    }
}
