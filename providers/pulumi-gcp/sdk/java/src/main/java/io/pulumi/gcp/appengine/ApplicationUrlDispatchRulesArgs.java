// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.appengine.inputs.ApplicationUrlDispatchRulesDispatchRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationUrlDispatchRulesArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationUrlDispatchRulesArgs Empty = new ApplicationUrlDispatchRulesArgs();

    /**
     * Rules to match an HTTP request and dispatch that request to a service.
     * Structure is documented below.
     * 
     */
    @InputImport(name="dispatchRules", required=true)
      private final Input<List<ApplicationUrlDispatchRulesDispatchRuleArgs>> dispatchRules;

    public Input<List<ApplicationUrlDispatchRulesDispatchRuleArgs>> getDispatchRules() {
        return this.dispatchRules;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    public ApplicationUrlDispatchRulesArgs(
        Input<List<ApplicationUrlDispatchRulesDispatchRuleArgs>> dispatchRules,
        @Nullable Input<String> project) {
        this.dispatchRules = Objects.requireNonNull(dispatchRules, "expected parameter 'dispatchRules' to be non-null");
        this.project = project;
    }

    private ApplicationUrlDispatchRulesArgs() {
        this.dispatchRules = Input.empty();
        this.project = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationUrlDispatchRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<ApplicationUrlDispatchRulesDispatchRuleArgs>> dispatchRules;
        private @Nullable Input<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationUrlDispatchRulesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dispatchRules = defaults.dispatchRules;
    	      this.project = defaults.project;
        }

        public Builder dispatchRules(Input<List<ApplicationUrlDispatchRulesDispatchRuleArgs>> dispatchRules) {
            this.dispatchRules = Objects.requireNonNull(dispatchRules);
            return this;
        }

        public Builder dispatchRules(List<ApplicationUrlDispatchRulesDispatchRuleArgs> dispatchRules) {
            this.dispatchRules = Input.of(Objects.requireNonNull(dispatchRules));
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }
        public ApplicationUrlDispatchRulesArgs build() {
            return new ApplicationUrlDispatchRulesArgs(dispatchRules, project);
        }
    }
}
