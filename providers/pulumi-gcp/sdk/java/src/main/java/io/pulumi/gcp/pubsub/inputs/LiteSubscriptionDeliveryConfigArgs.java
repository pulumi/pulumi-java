// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.pubsub.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


public final class LiteSubscriptionDeliveryConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final LiteSubscriptionDeliveryConfigArgs Empty = new LiteSubscriptionDeliveryConfigArgs();

    /**
     * When this subscription should send messages to subscribers relative to messages persistence in storage.
     * Possible values are `DELIVER_IMMEDIATELY`, `DELIVER_AFTER_STORED`, and `DELIVERY_REQUIREMENT_UNSPECIFIED`.
     * 
     */
    @Import(name="deliveryRequirement", required=true)
      private final Output<String> deliveryRequirement;

    public Output<String> getDeliveryRequirement() {
        return this.deliveryRequirement;
    }

    public LiteSubscriptionDeliveryConfigArgs(Output<String> deliveryRequirement) {
        this.deliveryRequirement = Objects.requireNonNull(deliveryRequirement, "expected parameter 'deliveryRequirement' to be non-null");
    }

    private LiteSubscriptionDeliveryConfigArgs() {
        this.deliveryRequirement = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiteSubscriptionDeliveryConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> deliveryRequirement;

        public Builder() {
    	      // Empty
        }

        public Builder(LiteSubscriptionDeliveryConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deliveryRequirement = defaults.deliveryRequirement;
        }

        public Builder deliveryRequirement(Output<String> deliveryRequirement) {
            this.deliveryRequirement = Objects.requireNonNull(deliveryRequirement);
            return this;
        }
        public Builder deliveryRequirement(String deliveryRequirement) {
            this.deliveryRequirement = Output.of(Objects.requireNonNull(deliveryRequirement));
            return this;
        }        public LiteSubscriptionDeliveryConfigArgs build() {
            return new LiteSubscriptionDeliveryConfigArgs(deliveryRequirement);
        }
    }
}
