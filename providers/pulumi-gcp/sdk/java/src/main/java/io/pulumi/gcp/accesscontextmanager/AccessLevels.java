// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.accesscontextmanager.AccessLevelsArgs;
import io.pulumi.gcp.accesscontextmanager.inputs.AccessLevelsState;
import io.pulumi.gcp.accesscontextmanager.outputs.AccessLevelsAccessLevel;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Replace all existing Access Levels in an Access Policy with the Access Levels provided. This is done atomically.
 * This is a bulk edit of all Access Levels and may override existing Access Levels created by `gcp.accesscontextmanager.AccessLevel`,
 * thus causing a permadiff if used alongside `gcp.accesscontextmanager.AccessLevel` on the same parent.
 * 
 * 
 * To get more information about AccessLevels, see:
 * 
 * * [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
 * * How-to Guides
 *     * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Access Context Manager Access Levels Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
 *     parent: "organizations/123456789",
 *     title: "my policy",
 * });
 * const access_levels = new gcp.accesscontextmanager.AccessLevels("access-levels", {
 *     accessLevels: [
 *         {
 *             basic: {
 *                 conditions: [{
 *                     devicePolicy: {
 *                         osConstraints: [{
 *                             osType: "DESKTOP_CHROME_OS",
 *                         }],
 *                         requireScreenLock: true,
 *                     },
 *                     regions: [
 *                         "CH",
 *                         "IT",
 *                         "US",
 *                     ],
 *                 }],
 *             },
 *             name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
 *             title: "chromeos_no_lock",
 *         },
 *         {
 *             basic: {
 *                 conditions: [{
 *                     devicePolicy: {
 *                         osConstraints: [{
 *                             osType: "DESKTOP_MAC",
 *                         }],
 *                         requireScreenLock: true,
 *                     },
 *                     regions: [
 *                         "CH",
 *                         "IT",
 *                         "US",
 *                     ],
 *                 }],
 *             },
 *             name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/mac_no_lock`,
 *             title: "mac_no_lock",
 *         },
 *     ],
 *     parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
 *     parent="organizations/123456789",
 *     title="my policy")
 * access_levels = gcp.accesscontextmanager.AccessLevels("access-levels",
 *     access_levels=[
 *         gcp.accesscontextmanager.AccessLevelsAccessLevelArgs(
 *             basic=gcp.accesscontextmanager.AccessLevelsAccessLevelBasicArgs(
 *                 conditions=[gcp.accesscontextmanager.AccessLevelsAccessLevelBasicConditionArgs(
 *                     device_policy=gcp.accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs(
 *                         os_constraints=[gcp.accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs(
 *                             os_type="DESKTOP_CHROME_OS",
 *                         )],
 *                         require_screen_lock=True,
 *                     ),
 *                     regions=[
 *                         "CH",
 *                         "IT",
 *                         "US",
 *                     ],
 *                 )],
 *             ),
 *             name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
 *             title="chromeos_no_lock",
 *         ),
 *         gcp.accesscontextmanager.AccessLevelsAccessLevelArgs(
 *             basic=gcp.accesscontextmanager.AccessLevelsAccessLevelBasicArgs(
 *                 conditions=[gcp.accesscontextmanager.AccessLevelsAccessLevelBasicConditionArgs(
 *                     device_policy=gcp.accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs(
 *                         os_constraints=[gcp.accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs(
 *                             os_type="DESKTOP_MAC",
 *                         )],
 *                         require_screen_lock=True,
 *                     ),
 *                     regions=[
 *                         "CH",
 *                         "IT",
 *                         "US",
 *                     ],
 *                 )],
 *             ),
 *             name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/mac_no_lock"),
 *             title="mac_no_lock",
 *         ),
 *     ],
 *     parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new Gcp.AccessContextManager.AccessPolicyArgs
 *         {
 *             Parent = "organizations/123456789",
 *             Title = "my policy",
 *         });
 *         var access_levels = new Gcp.AccessContextManager.AccessLevels("access-levels", new Gcp.AccessContextManager.AccessLevelsArgs
 *         {
 *             AccessLevels = 
 *             {
 *                 new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelArgs
 *                 {
 *                     Basic = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicArgs
 *                     {
 *                         Conditions = 
 *                         {
 *                             new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionArgs
 *                             {
 *                                 DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs
 *                                 {
 *                                     OsConstraints = 
 *                                     {
 *                                         new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs
 *                                         {
 *                                             OsType = "DESKTOP_CHROME_OS",
 *                                         },
 *                                     },
 *                                     RequireScreenLock = true,
 *                                 },
 *                                 Regions = 
 *                                 {
 *                                     "CH",
 *                                     "IT",
 *                                     "US",
 *                                 },
 *                             },
 *                         },
 *                     },
 *                     Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
 *                     Title = "chromeos_no_lock",
 *                 },
 *                 new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelArgs
 *                 {
 *                     Basic = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicArgs
 *                     {
 *                         Conditions = 
 *                         {
 *                             new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionArgs
 *                             {
 *                                 DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs
 *                                 {
 *                                     OsConstraints = 
 *                                     {
 *                                         new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs
 *                                         {
 *                                             OsType = "DESKTOP_MAC",
 *                                         },
 *                                     },
 *                                     RequireScreenLock = true,
 *                                 },
 *                                 Regions = 
 *                                 {
 *                                     "CH",
 *                                     "IT",
 *                                     "US",
 *                                 },
 *                             },
 *                         },
 *                     },
 *                     Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/mac_no_lock"),
 *                     Title = "mac_no_lock",
 *                 },
 *             },
 *             Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/accesscontextmanager"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
 * 			Parent: pulumi.String("organizations/123456789"),
 * 			Title:  pulumi.String("my policy"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = accesscontextmanager.NewAccessLevels(ctx, "access-levels", &accesscontextmanager.AccessLevelsArgs{
 * 			AccessLevels: accesscontextmanager.AccessLevelsAccessLevelArray{
 * 				&accesscontextmanager.AccessLevelsAccessLevelArgs{
 * 					Basic: &accesscontextmanager.AccessLevelsAccessLevelBasicArgs{
 * 						Conditions: accesscontextmanager.AccessLevelsAccessLevelBasicConditionArray{
 * 							&accesscontextmanager.AccessLevelsAccessLevelBasicConditionArgs{
 * 								DevicePolicy: &accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs{
 * 									OsConstraints: accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArray{
 * 										&accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs{
 * 											OsType: pulumi.String("DESKTOP_CHROME_OS"),
 * 										},
 * 									},
 * 									RequireScreenLock: pulumi.Bool(true),
 * 								},
 * 								Regions: pulumi.StringArray{
 * 									pulumi.String("CH"),
 * 									pulumi.String("IT"),
 * 									pulumi.String("US"),
 * 								},
 * 							},
 * 						},
 * 					},
 * 					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 						return fmt.Sprintf("%v%v%v", "accessPolicies/", name, "/accessLevels/chromeos_no_lock"), nil
 * 					}).(pulumi.StringOutput),
 * 					Title: pulumi.String("chromeos_no_lock"),
 * 				},
 * 				&accesscontextmanager.AccessLevelsAccessLevelArgs{
 * 					Basic: &accesscontextmanager.AccessLevelsAccessLevelBasicArgs{
 * 						Conditions: accesscontextmanager.AccessLevelsAccessLevelBasicConditionArray{
 * 							&accesscontextmanager.AccessLevelsAccessLevelBasicConditionArgs{
 * 								DevicePolicy: &accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs{
 * 									OsConstraints: accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArray{
 * 										&accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs{
 * 											OsType: pulumi.String("DESKTOP_MAC"),
 * 										},
 * 									},
 * 									RequireScreenLock: pulumi.Bool(true),
 * 								},
 * 								Regions: pulumi.StringArray{
 * 									pulumi.String("CH"),
 * 									pulumi.String("IT"),
 * 									pulumi.String("US"),
 * 								},
 * 							},
 * 						},
 * 					},
 * 					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 						return fmt.Sprintf("%v%v%v", "accessPolicies/", name, "/accessLevels/mac_no_lock"), nil
 * 					}).(pulumi.StringOutput),
 * 					Title: pulumi.String("mac_no_lock"),
 * 				},
 * 			},
 * 			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
 * 				return fmt.Sprintf("%v%v", "accessPolicies/", name), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * AccessLevels can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:accesscontextmanager/accessLevels:AccessLevels default {{parent}}/accessLevels
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:accesscontextmanager/accessLevels:AccessLevels default {{parent}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:accesscontextmanager/accessLevels:AccessLevels")
public class AccessLevels extends io.pulumi.resources.CustomResource {
    /**
     * The desired Access Levels that should replace all existing Access Levels in the Access Policy.
     * Structure is documented below.
     * 
     */
    @Export(name="accessLevels", type=List.class, parameters={AccessLevelsAccessLevel.class})
    private Output</* @Nullable */ List<AccessLevelsAccessLevel>> accessLevels;

    /**
     * @return The desired Access Levels that should replace all existing Access Levels in the Access Policy.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<AccessLevelsAccessLevel>> getAccessLevels() {
        return this.accessLevels;
    }
    /**
     * The AccessPolicy this AccessLevel lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    @Export(name="parent", type=String.class, parameters={})
    private Output<String> parent;

    /**
     * @return The AccessPolicy this AccessLevel lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    public Output<String> getParent() {
        return this.parent;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AccessLevels(String name) {
        this(name, AccessLevelsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AccessLevels(String name, AccessLevelsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AccessLevels(String name, AccessLevelsArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:accesscontextmanager/accessLevels:AccessLevels", name, args == null ? AccessLevelsArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private AccessLevels(String name, Output<String> id, @Nullable AccessLevelsState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:accesscontextmanager/accessLevels:AccessLevels", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AccessLevels get(String name, Output<String> id, @Nullable AccessLevelsState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new AccessLevels(name, id, state, options);
    }
}
