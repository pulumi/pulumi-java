// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.osconfig;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentInstanceFilterArgs;
import io.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentOsPolicyArgs;
import io.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentRolloutArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OsPolicyAssignmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final OsPolicyAssignmentArgs Empty = new OsPolicyAssignmentArgs();

    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Required. Filter to select VMs.
     * 
     */
    @Import(name="instanceFilter", required=true)
      private final Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter;

    public Output<OsPolicyAssignmentInstanceFilterArgs> getInstanceFilter() {
        return this.instanceFilter;
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> getLocation() {
        return this.location;
    }

    /**
     * Required. The name of the repository.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Required. List of OS policies to be applied to the VMs.
     * 
     */
    @Import(name="osPolicies", required=true)
      private final Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies;

    public Output<List<OsPolicyAssignmentOsPolicyArgs>> getOsPolicies() {
        return this.osPolicies;
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     * 
     */
    @Import(name="rollout", required=true)
      private final Output<OsPolicyAssignmentRolloutArgs> rollout;

    public Output<OsPolicyAssignmentRolloutArgs> getRollout() {
        return this.rollout;
    }

    public OsPolicyAssignmentArgs(
        @Nullable Output<String> description,
        Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter,
        Output<String> location,
        @Nullable Output<String> name,
        Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies,
        @Nullable Output<String> project,
        Output<OsPolicyAssignmentRolloutArgs> rollout) {
        this.description = description;
        this.instanceFilter = Objects.requireNonNull(instanceFilter, "expected parameter 'instanceFilter' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.osPolicies = Objects.requireNonNull(osPolicies, "expected parameter 'osPolicies' to be non-null");
        this.project = project;
        this.rollout = Objects.requireNonNull(rollout, "expected parameter 'rollout' to be non-null");
    }

    private OsPolicyAssignmentArgs() {
        this.description = Codegen.empty();
        this.instanceFilter = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.osPolicies = Codegen.empty();
        this.project = Codegen.empty();
        this.rollout = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OsPolicyAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter;
        private Output<String> location;
        private @Nullable Output<String> name;
        private Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies;
        private @Nullable Output<String> project;
        private Output<OsPolicyAssignmentRolloutArgs> rollout;

        public Builder() {
    	      // Empty
        }

        public Builder(OsPolicyAssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.instanceFilter = defaults.instanceFilter;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.osPolicies = defaults.osPolicies;
    	      this.project = defaults.project;
    	      this.rollout = defaults.rollout;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder instanceFilter(Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter) {
            this.instanceFilter = Objects.requireNonNull(instanceFilter);
            return this;
        }
        public Builder instanceFilter(OsPolicyAssignmentInstanceFilterArgs instanceFilter) {
            this.instanceFilter = Output.of(Objects.requireNonNull(instanceFilter));
            return this;
        }
        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder osPolicies(Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies) {
            this.osPolicies = Objects.requireNonNull(osPolicies);
            return this;
        }
        public Builder osPolicies(List<OsPolicyAssignmentOsPolicyArgs> osPolicies) {
            this.osPolicies = Output.of(Objects.requireNonNull(osPolicies));
            return this;
        }
        public Builder osPolicies(OsPolicyAssignmentOsPolicyArgs... osPolicies) {
            return osPolicies(List.of(osPolicies));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder rollout(Output<OsPolicyAssignmentRolloutArgs> rollout) {
            this.rollout = Objects.requireNonNull(rollout);
            return this;
        }
        public Builder rollout(OsPolicyAssignmentRolloutArgs rollout) {
            this.rollout = Output.of(Objects.requireNonNull(rollout));
            return this;
        }        public OsPolicyAssignmentArgs build() {
            return new OsPolicyAssignmentArgs(description, instanceFilter, location, name, osPolicies, project, rollout);
        }
    }
}
