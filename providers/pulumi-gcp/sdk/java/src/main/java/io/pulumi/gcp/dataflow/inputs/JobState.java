// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataflow.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobState extends io.pulumi.resources.ResourceArgs {

    public static final JobState Empty = new JobState();

    /**
     * List of experiments that should be used by the job. An example value is `["enable_stackdriver_agent_metrics"]`.
     * 
     */
    @Import(name="additionalExperiments")
      private final @Nullable Output<List<String>> additionalExperiments;

    public Output<List<String>> getAdditionalExperiments() {
        return this.additionalExperiments == null ? Output.empty() : this.additionalExperiments;
    }

    /**
     * Enable/disable the use of [Streaming Engine](https://cloud.google.com/dataflow/docs/guides/deploying-a-pipeline#streaming-engine) for the job. Note that Streaming Engine is enabled by default for pipelines developed against the Beam SDK for Python v2.21.0 or later when using Python 3.
     * 
     */
    @Import(name="enableStreamingEngine")
      private final @Nullable Output<Boolean> enableStreamingEngine;

    public Output<Boolean> getEnableStreamingEngine() {
        return this.enableStreamingEngine == null ? Output.empty() : this.enableStreamingEngine;
    }

    /**
     * The configuration for VM IPs.  Options are `"WORKER_IP_PUBLIC"` or `"WORKER_IP_PRIVATE"`.
     * 
     */
    @Import(name="ipConfiguration")
      private final @Nullable Output<String> ipConfiguration;

    public Output<String> getIpConfiguration() {
        return this.ipConfiguration == null ? Output.empty() : this.ipConfiguration;
    }

    /**
     * The unique ID of this job.
     * 
     */
    @Import(name="jobId")
      private final @Nullable Output<String> jobId;

    public Output<String> getJobId() {
        return this.jobId == null ? Output.empty() : this.jobId;
    }

    /**
     * The name for the Cloud KMS key for the job. Key format is: `projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY`
     * 
     */
    @Import(name="kmsKeyName")
      private final @Nullable Output<String> kmsKeyName;

    public Output<String> getKmsKeyName() {
        return this.kmsKeyName == null ? Output.empty() : this.kmsKeyName;
    }

    /**
     * User labels to be specified for the job. Keys and values should follow the restrictions
     * specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page.
     * **NOTE**: Google-provided Dataflow templates often provide default labels that begin with `goog-dataflow-provided`.
     * Unless explicitly set in config, these labels will be ignored to prevent diffs on re-apply.
     * <<<<<<< HEAD
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,Object>> labels;

    public Output<Map<String,Object>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The machine type to use for the job.
     * 
     */
    @Import(name="machineType")
      private final @Nullable Output<String> machineType;

    public Output<String> getMachineType() {
        return this.machineType == null ? Output.empty() : this.machineType;
    }

    /**
     * The number of workers permitted to work on the job.  More workers may improve processing speed at additional cost.
     * 
     */
    @Import(name="maxWorkers")
      private final @Nullable Output<Integer> maxWorkers;

    public Output<Integer> getMaxWorkers() {
        return this.maxWorkers == null ? Output.empty() : this.maxWorkers;
    }

    /**
     * A unique name for the resource, required by Dataflow.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The network to which VMs will be assigned. If it is not provided, "default" will be used.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Output.empty() : this.network;
    }

    /**
     * One of "drain" or "cancel".  Specifies behavior of deletion during `pulumi destroy`.  See above note.
     * 
     */
    @Import(name="onDelete")
      private final @Nullable Output<String> onDelete;

    public Output<String> getOnDelete() {
        return this.onDelete == null ? Output.empty() : this.onDelete;
    }

    /**
     * Key/Value pairs to be passed to the Dataflow job (as used in the template).
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,Object>> parameters;

    public Output<Map<String,Object>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The region in which the created job should run.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Output.empty() : this.region;
    }

    /**
     * The Service Account email used to create the job.
     * 
     */
    @Import(name="serviceAccountEmail")
      private final @Nullable Output<String> serviceAccountEmail;

    public Output<String> getServiceAccountEmail() {
        return this.serviceAccountEmail == null ? Output.empty() : this.serviceAccountEmail;
    }

    /**
     * The current state of the resource, selected from the [JobState enum](https://cloud.google.com/dataflow/docs/reference/rest/v1b3/projects.jobs#Job.JobState)
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    /**
     * The subnetwork to which VMs will be assigned. Should be of the form "regions/REGION/subnetworks/SUBNETWORK". If the [subnetwork is located in a Shared VPC network](https://cloud.google.com/dataflow/docs/guides/specifying-networks#shared), you must use the complete URL. For example `"googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET_NAME"`
     * 
     */
    @Import(name="subnetwork")
      private final @Nullable Output<String> subnetwork;

    public Output<String> getSubnetwork() {
        return this.subnetwork == null ? Output.empty() : this.subnetwork;
    }

    /**
     * A writeable location on GCS for the Dataflow job to dump its temporary data.
     * 
     */
    @Import(name="tempGcsLocation")
      private final @Nullable Output<String> tempGcsLocation;

    public Output<String> getTempGcsLocation() {
        return this.tempGcsLocation == null ? Output.empty() : this.tempGcsLocation;
    }

    /**
     * The GCS path to the Dataflow job template.
     * 
     */
    @Import(name="templateGcsPath")
      private final @Nullable Output<String> templateGcsPath;

    public Output<String> getTemplateGcsPath() {
        return this.templateGcsPath == null ? Output.empty() : this.templateGcsPath;
    }

    /**
     * Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced with the corresponding name prefixes of the new job. This field is not used outside of update.
     * > > > > > > > v4.1.0
     * 
     */
    @Import(name="transformNameMapping")
      private final @Nullable Output<Map<String,Object>> transformNameMapping;

    public Output<Map<String,Object>> getTransformNameMapping() {
        return this.transformNameMapping == null ? Output.empty() : this.transformNameMapping;
    }

    /**
     * The type of this job, selected from the [JobType enum](https://cloud.google.com/dataflow/docs/reference/rest/v1b3/projects.jobs#Job.JobType)
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    /**
     * The zone in which the created job should run. If it is not provided, the provider zone is used.
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> getZone() {
        return this.zone == null ? Output.empty() : this.zone;
    }

    public JobState(
        @Nullable Output<List<String>> additionalExperiments,
        @Nullable Output<Boolean> enableStreamingEngine,
        @Nullable Output<String> ipConfiguration,
        @Nullable Output<String> jobId,
        @Nullable Output<String> kmsKeyName,
        @Nullable Output<Map<String,Object>> labels,
        @Nullable Output<String> machineType,
        @Nullable Output<Integer> maxWorkers,
        @Nullable Output<String> name,
        @Nullable Output<String> network,
        @Nullable Output<String> onDelete,
        @Nullable Output<Map<String,Object>> parameters,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<String> serviceAccountEmail,
        @Nullable Output<String> state,
        @Nullable Output<String> subnetwork,
        @Nullable Output<String> tempGcsLocation,
        @Nullable Output<String> templateGcsPath,
        @Nullable Output<Map<String,Object>> transformNameMapping,
        @Nullable Output<String> type,
        @Nullable Output<String> zone) {
        this.additionalExperiments = additionalExperiments;
        this.enableStreamingEngine = enableStreamingEngine;
        this.ipConfiguration = ipConfiguration;
        this.jobId = jobId;
        this.kmsKeyName = kmsKeyName;
        this.labels = labels;
        this.machineType = machineType;
        this.maxWorkers = maxWorkers;
        this.name = name;
        this.network = network;
        this.onDelete = onDelete;
        this.parameters = parameters;
        this.project = project;
        this.region = region;
        this.serviceAccountEmail = serviceAccountEmail;
        this.state = state;
        this.subnetwork = subnetwork;
        this.tempGcsLocation = tempGcsLocation;
        this.templateGcsPath = templateGcsPath;
        this.transformNameMapping = transformNameMapping;
        this.type = type;
        this.zone = zone;
    }

    private JobState() {
        this.additionalExperiments = Output.empty();
        this.enableStreamingEngine = Output.empty();
        this.ipConfiguration = Output.empty();
        this.jobId = Output.empty();
        this.kmsKeyName = Output.empty();
        this.labels = Output.empty();
        this.machineType = Output.empty();
        this.maxWorkers = Output.empty();
        this.name = Output.empty();
        this.network = Output.empty();
        this.onDelete = Output.empty();
        this.parameters = Output.empty();
        this.project = Output.empty();
        this.region = Output.empty();
        this.serviceAccountEmail = Output.empty();
        this.state = Output.empty();
        this.subnetwork = Output.empty();
        this.tempGcsLocation = Output.empty();
        this.templateGcsPath = Output.empty();
        this.transformNameMapping = Output.empty();
        this.type = Output.empty();
        this.zone = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> additionalExperiments;
        private @Nullable Output<Boolean> enableStreamingEngine;
        private @Nullable Output<String> ipConfiguration;
        private @Nullable Output<String> jobId;
        private @Nullable Output<String> kmsKeyName;
        private @Nullable Output<Map<String,Object>> labels;
        private @Nullable Output<String> machineType;
        private @Nullable Output<Integer> maxWorkers;
        private @Nullable Output<String> name;
        private @Nullable Output<String> network;
        private @Nullable Output<String> onDelete;
        private @Nullable Output<Map<String,Object>> parameters;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<String> serviceAccountEmail;
        private @Nullable Output<String> state;
        private @Nullable Output<String> subnetwork;
        private @Nullable Output<String> tempGcsLocation;
        private @Nullable Output<String> templateGcsPath;
        private @Nullable Output<Map<String,Object>> transformNameMapping;
        private @Nullable Output<String> type;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(JobState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalExperiments = defaults.additionalExperiments;
    	      this.enableStreamingEngine = defaults.enableStreamingEngine;
    	      this.ipConfiguration = defaults.ipConfiguration;
    	      this.jobId = defaults.jobId;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.labels = defaults.labels;
    	      this.machineType = defaults.machineType;
    	      this.maxWorkers = defaults.maxWorkers;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.onDelete = defaults.onDelete;
    	      this.parameters = defaults.parameters;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.state = defaults.state;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tempGcsLocation = defaults.tempGcsLocation;
    	      this.templateGcsPath = defaults.templateGcsPath;
    	      this.transformNameMapping = defaults.transformNameMapping;
    	      this.type = defaults.type;
    	      this.zone = defaults.zone;
        }

        public Builder additionalExperiments(@Nullable Output<List<String>> additionalExperiments) {
            this.additionalExperiments = additionalExperiments;
            return this;
        }
        public Builder additionalExperiments(@Nullable List<String> additionalExperiments) {
            this.additionalExperiments = Output.ofNullable(additionalExperiments);
            return this;
        }
        public Builder additionalExperiments(String... additionalExperiments) {
            return additionalExperiments(List.of(additionalExperiments));
        }
        public Builder enableStreamingEngine(@Nullable Output<Boolean> enableStreamingEngine) {
            this.enableStreamingEngine = enableStreamingEngine;
            return this;
        }
        public Builder enableStreamingEngine(@Nullable Boolean enableStreamingEngine) {
            this.enableStreamingEngine = Output.ofNullable(enableStreamingEngine);
            return this;
        }
        public Builder ipConfiguration(@Nullable Output<String> ipConfiguration) {
            this.ipConfiguration = ipConfiguration;
            return this;
        }
        public Builder ipConfiguration(@Nullable String ipConfiguration) {
            this.ipConfiguration = Output.ofNullable(ipConfiguration);
            return this;
        }
        public Builder jobId(@Nullable Output<String> jobId) {
            this.jobId = jobId;
            return this;
        }
        public Builder jobId(@Nullable String jobId) {
            this.jobId = Output.ofNullable(jobId);
            return this;
        }
        public Builder kmsKeyName(@Nullable Output<String> kmsKeyName) {
            this.kmsKeyName = kmsKeyName;
            return this;
        }
        public Builder kmsKeyName(@Nullable String kmsKeyName) {
            this.kmsKeyName = Output.ofNullable(kmsKeyName);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder machineType(@Nullable Output<String> machineType) {
            this.machineType = machineType;
            return this;
        }
        public Builder machineType(@Nullable String machineType) {
            this.machineType = Output.ofNullable(machineType);
            return this;
        }
        public Builder maxWorkers(@Nullable Output<Integer> maxWorkers) {
            this.maxWorkers = maxWorkers;
            return this;
        }
        public Builder maxWorkers(@Nullable Integer maxWorkers) {
            this.maxWorkers = Output.ofNullable(maxWorkers);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Output.ofNullable(network);
            return this;
        }
        public Builder onDelete(@Nullable Output<String> onDelete) {
            this.onDelete = onDelete;
            return this;
        }
        public Builder onDelete(@Nullable String onDelete) {
            this.onDelete = Output.ofNullable(onDelete);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,Object>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,Object> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Output.ofNullable(region);
            return this;
        }
        public Builder serviceAccountEmail(@Nullable Output<String> serviceAccountEmail) {
            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        public Builder serviceAccountEmail(@Nullable String serviceAccountEmail) {
            this.serviceAccountEmail = Output.ofNullable(serviceAccountEmail);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Output.ofNullable(state);
            return this;
        }
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }
        public Builder subnetwork(@Nullable String subnetwork) {
            this.subnetwork = Output.ofNullable(subnetwork);
            return this;
        }
        public Builder tempGcsLocation(@Nullable Output<String> tempGcsLocation) {
            this.tempGcsLocation = tempGcsLocation;
            return this;
        }
        public Builder tempGcsLocation(@Nullable String tempGcsLocation) {
            this.tempGcsLocation = Output.ofNullable(tempGcsLocation);
            return this;
        }
        public Builder templateGcsPath(@Nullable Output<String> templateGcsPath) {
            this.templateGcsPath = templateGcsPath;
            return this;
        }
        public Builder templateGcsPath(@Nullable String templateGcsPath) {
            this.templateGcsPath = Output.ofNullable(templateGcsPath);
            return this;
        }
        public Builder transformNameMapping(@Nullable Output<Map<String,Object>> transformNameMapping) {
            this.transformNameMapping = transformNameMapping;
            return this;
        }
        public Builder transformNameMapping(@Nullable Map<String,Object> transformNameMapping) {
            this.transformNameMapping = Output.ofNullable(transformNameMapping);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = Output.ofNullable(zone);
            return this;
        }        public JobState build() {
            return new JobState(additionalExperiments, enableStreamingEngine, ipConfiguration, jobId, kmsKeyName, labels, machineType, maxWorkers, name, network, onDelete, parameters, project, region, serviceAccountEmail, state, subnetwork, tempGcsLocation, templateGcsPath, transformNameMapping, type, zone);
        }
    }
}
