// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.projects.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.projects.outputs.GetProjectProject;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetProjectResult {
    private final String filter;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * A list of projects matching the provided filter. Structure is defined below.
     * 
     */
    private final List<GetProjectProject> projects;

    @OutputCustomType.Constructor({"filter","id","projects"})
    private GetProjectResult(
        String filter,
        String id,
        List<GetProjectProject> projects) {
        this.filter = Objects.requireNonNull(filter);
        this.id = Objects.requireNonNull(id);
        this.projects = Objects.requireNonNull(projects);
    }

    public String getFilter() {
        return this.filter;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * A list of projects matching the provided filter. Structure is defined below.
     * 
    */
    public List<GetProjectProject> getProjects() {
        return this.projects;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String filter;
        private String id;
        private List<GetProjectProject> projects;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.projects = defaults.projects;
        }

        public Builder setFilter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setProjects(List<GetProjectProject> projects) {
            this.projects = Objects.requireNonNull(projects);
            return this;
        }
        public GetProjectResult build() {
            return new GetProjectResult(filter, id, projects);
        }
    }
}
