// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataloss.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.dataloss.outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex;
import io.pulumi.gcp.dataloss.outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment;
import io.pulumi.gcp.dataloss.outputs.PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity;
import java.util.Objects;

@OutputCustomType
public final class PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule {
    /**
     * Regular expression pattern defining what qualifies as a hotword.
     * Structure is documented below.
     * 
     */
    private final PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex hotwordRegex;
    /**
     * Likelihood adjustment to apply to all matching findings.
     * Structure is documented below.
     * 
     */
    private final PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment likelihoodAdjustment;
    /**
     * Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
     * exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
     * used to match substrings of the finding itself. For example, the certainty of a phone number regex
     * `(\d{3}) \d{3}-\d{4}` could be adjusted upwards if the area code is known to be the local area code of a company
     * office using the hotword regex `(xxx)`, where `xxx` is the area code in question.
     * Structure is documented below.
     * 
     */
    private final PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity proximity;

    @OutputCustomType.Constructor
    private PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule(
        @OutputCustomType.Parameter("hotwordRegex") PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex hotwordRegex,
        @OutputCustomType.Parameter("likelihoodAdjustment") PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment likelihoodAdjustment,
        @OutputCustomType.Parameter("proximity") PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity proximity) {
        this.hotwordRegex = hotwordRegex;
        this.likelihoodAdjustment = likelihoodAdjustment;
        this.proximity = proximity;
    }

    /**
     * Regular expression pattern defining what qualifies as a hotword.
     * Structure is documented below.
     * 
    */
    public PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex getHotwordRegex() {
        return this.hotwordRegex;
    }
    /**
     * Likelihood adjustment to apply to all matching findings.
     * Structure is documented below.
     * 
    */
    public PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment getLikelihoodAdjustment() {
        return this.likelihoodAdjustment;
    }
    /**
     * Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
     * exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
     * used to match substrings of the finding itself. For example, the certainty of a phone number regex
     * `(\d{3}) \d{3}-\d{4}` could be adjusted upwards if the area code is known to be the local area code of a company
     * office using the hotword regex `(xxx)`, where `xxx` is the area code in question.
     * Structure is documented below.
     * 
    */
    public PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity getProximity() {
        return this.proximity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex hotwordRegex;
        private PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment likelihoodAdjustment;
        private PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity proximity;

        public Builder() {
    	      // Empty
        }

        public Builder(PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hotwordRegex = defaults.hotwordRegex;
    	      this.likelihoodAdjustment = defaults.likelihoodAdjustment;
    	      this.proximity = defaults.proximity;
        }

        public Builder setHotwordRegex(PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleHotwordRegex hotwordRegex) {
            this.hotwordRegex = Objects.requireNonNull(hotwordRegex);
            return this;
        }

        public Builder setLikelihoodAdjustment(PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleLikelihoodAdjustment likelihoodAdjustment) {
            this.likelihoodAdjustment = Objects.requireNonNull(likelihoodAdjustment);
            return this;
        }

        public Builder setProximity(PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRuleProximity proximity) {
            this.proximity = Objects.requireNonNull(proximity);
            return this;
        }
        public PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule build() {
            return new PreventionInspectTemplateInspectConfigRuleSetRuleHotwordRule(hotwordRegex, likelihoodAdjustment, proximity);
        }
    }
}
