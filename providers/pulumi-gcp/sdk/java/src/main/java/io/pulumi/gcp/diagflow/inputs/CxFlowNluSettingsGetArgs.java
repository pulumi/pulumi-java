// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxFlowNluSettingsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final CxFlowNluSettingsGetArgs Empty = new CxFlowNluSettingsGetArgs();

    /**
     * To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
     * If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
     * 
     */
    @Import(name="classificationThreshold")
      private final @Nullable Output<Double> classificationThreshold;

    public Output<Double> getClassificationThreshold() {
        return this.classificationThreshold == null ? Output.empty() : this.classificationThreshold;
    }

    /**
     * Indicates NLU model training mode.
     * * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
     * * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train.
     *   Possible values are `MODEL_TRAINING_MODE_AUTOMATIC` and `MODEL_TRAINING_MODE_MANUAL`.
     * 
     */
    @Import(name="modelTrainingMode")
      private final @Nullable Output<String> modelTrainingMode;

    public Output<String> getModelTrainingMode() {
        return this.modelTrainingMode == null ? Output.empty() : this.modelTrainingMode;
    }

    /**
     * Indicates the type of NLU model.
     * * MODEL_TYPE_STANDARD: Use standard NLU model.
     * * MODEL_TYPE_ADVANCED: Use advanced NLU model.
     *   Possible values are `MODEL_TYPE_STANDARD` and `MODEL_TYPE_ADVANCED`.
     * 
     */
    @Import(name="modelType")
      private final @Nullable Output<String> modelType;

    public Output<String> getModelType() {
        return this.modelType == null ? Output.empty() : this.modelType;
    }

    public CxFlowNluSettingsGetArgs(
        @Nullable Output<Double> classificationThreshold,
        @Nullable Output<String> modelTrainingMode,
        @Nullable Output<String> modelType) {
        this.classificationThreshold = classificationThreshold;
        this.modelTrainingMode = modelTrainingMode;
        this.modelType = modelType;
    }

    private CxFlowNluSettingsGetArgs() {
        this.classificationThreshold = Output.empty();
        this.modelTrainingMode = Output.empty();
        this.modelType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxFlowNluSettingsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Double> classificationThreshold;
        private @Nullable Output<String> modelTrainingMode;
        private @Nullable Output<String> modelType;

        public Builder() {
    	      // Empty
        }

        public Builder(CxFlowNluSettingsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.classificationThreshold = defaults.classificationThreshold;
    	      this.modelTrainingMode = defaults.modelTrainingMode;
    	      this.modelType = defaults.modelType;
        }

        public Builder classificationThreshold(@Nullable Output<Double> classificationThreshold) {
            this.classificationThreshold = classificationThreshold;
            return this;
        }

        public Builder classificationThreshold(@Nullable Double classificationThreshold) {
            this.classificationThreshold = Output.ofNullable(classificationThreshold);
            return this;
        }

        public Builder modelTrainingMode(@Nullable Output<String> modelTrainingMode) {
            this.modelTrainingMode = modelTrainingMode;
            return this;
        }

        public Builder modelTrainingMode(@Nullable String modelTrainingMode) {
            this.modelTrainingMode = Output.ofNullable(modelTrainingMode);
            return this;
        }

        public Builder modelType(@Nullable Output<String> modelType) {
            this.modelType = modelType;
            return this;
        }

        public Builder modelType(@Nullable String modelType) {
            this.modelType = Output.ofNullable(modelType);
            return this;
        }
        public CxFlowNluSettingsGetArgs build() {
            return new CxFlowNluSettingsGetArgs(classificationThreshold, modelTrainingMode, modelType);
        }
    }
}
