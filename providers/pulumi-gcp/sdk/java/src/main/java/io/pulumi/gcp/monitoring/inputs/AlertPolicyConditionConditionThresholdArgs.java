// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdAggregationArgs;
import io.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdDenominatorAggregationArgs;
import io.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdTriggerArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionThresholdArgs extends io.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionThresholdArgs Empty = new AlertPolicyConditionConditionThresholdArgs();

    @InputImport(name="aggregations")
    private final @Nullable Input<List<AlertPolicyConditionConditionThresholdAggregationArgs>> aggregations;

    public Input<List<AlertPolicyConditionConditionThresholdAggregationArgs>> getAggregations() {
        return this.aggregations == null ? Input.empty() : this.aggregations;
    }

    @InputImport(name="comparison", required=true)
    private final Input<String> comparison;

    public Input<String> getComparison() {
        return this.comparison;
    }

    @InputImport(name="denominatorAggregations")
    private final @Nullable Input<List<AlertPolicyConditionConditionThresholdDenominatorAggregationArgs>> denominatorAggregations;

    public Input<List<AlertPolicyConditionConditionThresholdDenominatorAggregationArgs>> getDenominatorAggregations() {
        return this.denominatorAggregations == null ? Input.empty() : this.denominatorAggregations;
    }

    @InputImport(name="denominatorFilter")
    private final @Nullable Input<String> denominatorFilter;

    public Input<String> getDenominatorFilter() {
        return this.denominatorFilter == null ? Input.empty() : this.denominatorFilter;
    }

    @InputImport(name="duration", required=true)
    private final Input<String> duration;

    public Input<String> getDuration() {
        return this.duration;
    }

    @InputImport(name="filter")
    private final @Nullable Input<String> filter;

    public Input<String> getFilter() {
        return this.filter == null ? Input.empty() : this.filter;
    }

    @InputImport(name="thresholdValue")
    private final @Nullable Input<Double> thresholdValue;

    public Input<Double> getThresholdValue() {
        return this.thresholdValue == null ? Input.empty() : this.thresholdValue;
    }

    @InputImport(name="trigger")
    private final @Nullable Input<AlertPolicyConditionConditionThresholdTriggerArgs> trigger;

    public Input<AlertPolicyConditionConditionThresholdTriggerArgs> getTrigger() {
        return this.trigger == null ? Input.empty() : this.trigger;
    }

    public AlertPolicyConditionConditionThresholdArgs(
        @Nullable Input<List<AlertPolicyConditionConditionThresholdAggregationArgs>> aggregations,
        Input<String> comparison,
        @Nullable Input<List<AlertPolicyConditionConditionThresholdDenominatorAggregationArgs>> denominatorAggregations,
        @Nullable Input<String> denominatorFilter,
        Input<String> duration,
        @Nullable Input<String> filter,
        @Nullable Input<Double> thresholdValue,
        @Nullable Input<AlertPolicyConditionConditionThresholdTriggerArgs> trigger) {
        this.aggregations = aggregations;
        this.comparison = Objects.requireNonNull(comparison, "expected parameter 'comparison' to be non-null");
        this.denominatorAggregations = denominatorAggregations;
        this.denominatorFilter = denominatorFilter;
        this.duration = Objects.requireNonNull(duration, "expected parameter 'duration' to be non-null");
        this.filter = filter;
        this.thresholdValue = thresholdValue;
        this.trigger = trigger;
    }

    private AlertPolicyConditionConditionThresholdArgs() {
        this.aggregations = Input.empty();
        this.comparison = Input.empty();
        this.denominatorAggregations = Input.empty();
        this.denominatorFilter = Input.empty();
        this.duration = Input.empty();
        this.filter = Input.empty();
        this.thresholdValue = Input.empty();
        this.trigger = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyConditionConditionThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<AlertPolicyConditionConditionThresholdAggregationArgs>> aggregations;
        private Input<String> comparison;
        private @Nullable Input<List<AlertPolicyConditionConditionThresholdDenominatorAggregationArgs>> denominatorAggregations;
        private @Nullable Input<String> denominatorFilter;
        private Input<String> duration;
        private @Nullable Input<String> filter;
        private @Nullable Input<Double> thresholdValue;
        private @Nullable Input<AlertPolicyConditionConditionThresholdTriggerArgs> trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertPolicyConditionConditionThresholdArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregations = defaults.aggregations;
    	      this.comparison = defaults.comparison;
    	      this.denominatorAggregations = defaults.denominatorAggregations;
    	      this.denominatorFilter = defaults.denominatorFilter;
    	      this.duration = defaults.duration;
    	      this.filter = defaults.filter;
    	      this.thresholdValue = defaults.thresholdValue;
    	      this.trigger = defaults.trigger;
        }

        public Builder setAggregations(@Nullable Input<List<AlertPolicyConditionConditionThresholdAggregationArgs>> aggregations) {
            this.aggregations = aggregations;
            return this;
        }

        public Builder setAggregations(@Nullable List<AlertPolicyConditionConditionThresholdAggregationArgs> aggregations) {
            this.aggregations = Input.ofNullable(aggregations);
            return this;
        }

        public Builder setComparison(Input<String> comparison) {
            this.comparison = Objects.requireNonNull(comparison);
            return this;
        }

        public Builder setComparison(String comparison) {
            this.comparison = Input.of(Objects.requireNonNull(comparison));
            return this;
        }

        public Builder setDenominatorAggregations(@Nullable Input<List<AlertPolicyConditionConditionThresholdDenominatorAggregationArgs>> denominatorAggregations) {
            this.denominatorAggregations = denominatorAggregations;
            return this;
        }

        public Builder setDenominatorAggregations(@Nullable List<AlertPolicyConditionConditionThresholdDenominatorAggregationArgs> denominatorAggregations) {
            this.denominatorAggregations = Input.ofNullable(denominatorAggregations);
            return this;
        }

        public Builder setDenominatorFilter(@Nullable Input<String> denominatorFilter) {
            this.denominatorFilter = denominatorFilter;
            return this;
        }

        public Builder setDenominatorFilter(@Nullable String denominatorFilter) {
            this.denominatorFilter = Input.ofNullable(denominatorFilter);
            return this;
        }

        public Builder setDuration(Input<String> duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }

        public Builder setDuration(String duration) {
            this.duration = Input.of(Objects.requireNonNull(duration));
            return this;
        }

        public Builder setFilter(@Nullable Input<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder setFilter(@Nullable String filter) {
            this.filter = Input.ofNullable(filter);
            return this;
        }

        public Builder setThresholdValue(@Nullable Input<Double> thresholdValue) {
            this.thresholdValue = thresholdValue;
            return this;
        }

        public Builder setThresholdValue(@Nullable Double thresholdValue) {
            this.thresholdValue = Input.ofNullable(thresholdValue);
            return this;
        }

        public Builder setTrigger(@Nullable Input<AlertPolicyConditionConditionThresholdTriggerArgs> trigger) {
            this.trigger = trigger;
            return this;
        }

        public Builder setTrigger(@Nullable AlertPolicyConditionConditionThresholdTriggerArgs trigger) {
            this.trigger = Input.ofNullable(trigger);
            return this;
        }

        public AlertPolicyConditionConditionThresholdArgs build() {
            return new AlertPolicyConditionConditionThresholdArgs(aggregations, comparison, denominatorAggregations, denominatorFilter, duration, filter, thresholdValue, trigger);
        }
    }
}
