// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicConditionGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessLevelBasicGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessLevelBasicGetArgs Empty = new AccessLevelBasicGetArgs();

    /**
     * How the conditions list should be combined to determine if a request
     * is granted this AccessLevel. If AND is used, each Condition in
     * conditions must be satisfied for the AccessLevel to be applied. If
     * OR is used, at least one Condition in conditions must be satisfied
     * for the AccessLevel to be applied.
     * Default value is `AND`.
     * Possible values are `AND` and `OR`.
     * 
     */
    @InputImport(name="combiningFunction")
      private final @Nullable Input<String> combiningFunction;

    public Input<String> getCombiningFunction() {
        return this.combiningFunction == null ? Input.empty() : this.combiningFunction;
    }

    /**
     * A set of requirements for the AccessLevel to be granted.
     * Structure is documented below.
     * 
     */
    @InputImport(name="conditions", required=true)
      private final Input<List<AccessLevelBasicConditionGetArgs>> conditions;

    public Input<List<AccessLevelBasicConditionGetArgs>> getConditions() {
        return this.conditions;
    }

    public AccessLevelBasicGetArgs(
        @Nullable Input<String> combiningFunction,
        Input<List<AccessLevelBasicConditionGetArgs>> conditions) {
        this.combiningFunction = combiningFunction;
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
    }

    private AccessLevelBasicGetArgs() {
        this.combiningFunction = Input.empty();
        this.conditions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessLevelBasicGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> combiningFunction;
        private Input<List<AccessLevelBasicConditionGetArgs>> conditions;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessLevelBasicGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.combiningFunction = defaults.combiningFunction;
    	      this.conditions = defaults.conditions;
        }

        public Builder combiningFunction(@Nullable Input<String> combiningFunction) {
            this.combiningFunction = combiningFunction;
            return this;
        }

        public Builder combiningFunction(@Nullable String combiningFunction) {
            this.combiningFunction = Input.ofNullable(combiningFunction);
            return this;
        }

        public Builder conditions(Input<List<AccessLevelBasicConditionGetArgs>> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder conditions(List<AccessLevelBasicConditionGetArgs> conditions) {
            this.conditions = Input.of(Objects.requireNonNull(conditions));
            return this;
        }
        public AccessLevelBasicGetArgs build() {
            return new AccessLevelBasicGetArgs(combiningFunction, conditions);
        }
    }
}
