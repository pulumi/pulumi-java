// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.logging.inputs.FolderSinkBigqueryOptionsArgs;
import io.pulumi.gcp.logging.inputs.FolderSinkExclusionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FolderSinkArgs extends io.pulumi.resources.ResourceArgs {

    public static final FolderSinkArgs Empty = new FolderSinkArgs();

    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    @Import(name="bigqueryOptions")
      private final @Nullable Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions;

    public Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions() {
        return this.bigqueryOptions == null ? Codegen.empty() : this.bigqueryOptions;
    }

    /**
     * A description of this exclusion.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a
     * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket. Examples:
     * 
     * The writer associated with the sink must have access to write to the above resource.
     * 
     */
    @Import(name="destination", required=true)
      private final Output<String> destination;

    public Output<String> destination() {
        return this.destination;
    }

    /**
     * If set to True, then this exclusion is disabled and it does not exclude any log entries.
     * 
     */
    @Import(name="disabled")
      private final @Nullable Output<Boolean> disabled;

    public Output<Boolean> disabled() {
        return this.disabled == null ? Codegen.empty() : this.disabled;
    }

    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    @Import(name="exclusions")
      private final @Nullable Output<List<FolderSinkExclusionArgs>> exclusions;

    public Output<List<FolderSinkExclusionArgs>> exclusions() {
        return this.exclusions == null ? Codegen.empty() : this.exclusions;
    }

    /**
     * An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    @Import(name="filter")
      private final @Nullable Output<String> filter;

    public Output<String> filter() {
        return this.filter == null ? Codegen.empty() : this.filter;
    }

    /**
     * The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
     * accepted.
     * 
     */
    @Import(name="folder", required=true)
      private final Output<String> folder;

    public Output<String> folder() {
        return this.folder;
    }

    /**
     * Whether or not to include children folders in the sink export. If true, logs
     * associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
     * 
     */
    @Import(name="includeChildren")
      private final @Nullable Output<Boolean> includeChildren;

    public Output<Boolean> includeChildren() {
        return this.includeChildren == null ? Codegen.empty() : this.includeChildren;
    }

    /**
     * A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    public FolderSinkArgs(
        @Nullable Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions,
        @Nullable Output<String> description,
        Output<String> destination,
        @Nullable Output<Boolean> disabled,
        @Nullable Output<List<FolderSinkExclusionArgs>> exclusions,
        @Nullable Output<String> filter,
        Output<String> folder,
        @Nullable Output<Boolean> includeChildren,
        @Nullable Output<String> name) {
        this.bigqueryOptions = bigqueryOptions;
        this.description = description;
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.disabled = disabled;
        this.exclusions = exclusions;
        this.filter = filter;
        this.folder = Objects.requireNonNull(folder, "expected parameter 'folder' to be non-null");
        this.includeChildren = includeChildren;
        this.name = name;
    }

    private FolderSinkArgs() {
        this.bigqueryOptions = Codegen.empty();
        this.description = Codegen.empty();
        this.destination = Codegen.empty();
        this.disabled = Codegen.empty();
        this.exclusions = Codegen.empty();
        this.filter = Codegen.empty();
        this.folder = Codegen.empty();
        this.includeChildren = Codegen.empty();
        this.name = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FolderSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions;
        private @Nullable Output<String> description;
        private Output<String> destination;
        private @Nullable Output<Boolean> disabled;
        private @Nullable Output<List<FolderSinkExclusionArgs>> exclusions;
        private @Nullable Output<String> filter;
        private Output<String> folder;
        private @Nullable Output<Boolean> includeChildren;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(FolderSinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigqueryOptions = defaults.bigqueryOptions;
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.disabled = defaults.disabled;
    	      this.exclusions = defaults.exclusions;
    	      this.filter = defaults.filter;
    	      this.folder = defaults.folder;
    	      this.includeChildren = defaults.includeChildren;
    	      this.name = defaults.name;
        }

        public Builder bigqueryOptions(@Nullable Output<FolderSinkBigqueryOptionsArgs> bigqueryOptions) {
            this.bigqueryOptions = bigqueryOptions;
            return this;
        }
        public Builder bigqueryOptions(@Nullable FolderSinkBigqueryOptionsArgs bigqueryOptions) {
            this.bigqueryOptions = Codegen.ofNullable(bigqueryOptions);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder destination(Output<String> destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        public Builder destination(String destination) {
            this.destination = Output.of(Objects.requireNonNull(destination));
            return this;
        }
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = Codegen.ofNullable(disabled);
            return this;
        }
        public Builder exclusions(@Nullable Output<List<FolderSinkExclusionArgs>> exclusions) {
            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(@Nullable List<FolderSinkExclusionArgs> exclusions) {
            this.exclusions = Codegen.ofNullable(exclusions);
            return this;
        }
        public Builder exclusions(FolderSinkExclusionArgs... exclusions) {
            return exclusions(List.of(exclusions));
        }
        public Builder filter(@Nullable Output<String> filter) {
            this.filter = filter;
            return this;
        }
        public Builder filter(@Nullable String filter) {
            this.filter = Codegen.ofNullable(filter);
            return this;
        }
        public Builder folder(Output<String> folder) {
            this.folder = Objects.requireNonNull(folder);
            return this;
        }
        public Builder folder(String folder) {
            this.folder = Output.of(Objects.requireNonNull(folder));
            return this;
        }
        public Builder includeChildren(@Nullable Output<Boolean> includeChildren) {
            this.includeChildren = includeChildren;
            return this;
        }
        public Builder includeChildren(@Nullable Boolean includeChildren) {
            this.includeChildren = Codegen.ofNullable(includeChildren);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }        public FolderSinkArgs build() {
            return new FolderSinkArgs(bigqueryOptions, description, destination, disabled, exclusions, filter, folder, includeChildren, name);
        }
    }
}
