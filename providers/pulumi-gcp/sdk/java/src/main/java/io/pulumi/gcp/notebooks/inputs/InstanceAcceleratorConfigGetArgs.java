// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.notebooks.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class InstanceAcceleratorConfigGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceAcceleratorConfigGetArgs Empty = new InstanceAcceleratorConfigGetArgs();

    @InputImport(name="coreCount", required=true)
    private final Input<Integer> coreCount;

    public Input<Integer> getCoreCount() {
        return this.coreCount;
    }

    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public InstanceAcceleratorConfigGetArgs(
        Input<Integer> coreCount,
        Input<String> type) {
        this.coreCount = Objects.requireNonNull(coreCount, "expected parameter 'coreCount' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private InstanceAcceleratorConfigGetArgs() {
        this.coreCount = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceAcceleratorConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> coreCount;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceAcceleratorConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coreCount = defaults.coreCount;
    	      this.type = defaults.type;
        }

        public Builder setCoreCount(Input<Integer> coreCount) {
            this.coreCount = Objects.requireNonNull(coreCount);
            return this;
        }

        public Builder setCoreCount(Integer coreCount) {
            this.coreCount = Input.of(Objects.requireNonNull(coreCount));
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public InstanceAcceleratorConfigGetArgs build() {
            return new InstanceAcceleratorConfigGetArgs(coreCount, type);
        }
    }
}
