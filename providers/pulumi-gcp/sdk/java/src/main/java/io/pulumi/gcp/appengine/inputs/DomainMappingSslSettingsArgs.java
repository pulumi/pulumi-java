// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainMappingSslSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainMappingSslSettingsArgs Empty = new DomainMappingSslSettingsArgs();

    /**
     * ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
     * remove SSL support.
     * By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
     * or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
     * authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
     * Example: 12345.
     * 
     */
    @Import(name="certificateId")
      private final @Nullable Output<String> certificateId;

    public Output<String> getCertificateId() {
        return this.certificateId == null ? Codegen.empty() : this.certificateId;
    }

    /**
     * - 
     * ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
     * managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
     * provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
     * field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
     * `certificateId` field with an update request.
     * 
     */
    @Import(name="pendingManagedCertificateId")
      private final @Nullable Output<String> pendingManagedCertificateId;

    public Output<String> getPendingManagedCertificateId() {
        return this.pendingManagedCertificateId == null ? Codegen.empty() : this.pendingManagedCertificateId;
    }

    /**
     * SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
     * If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
     * Possible values are `AUTOMATIC` and `MANUAL`.
     * 
     */
    @Import(name="sslManagementType", required=true)
      private final Output<String> sslManagementType;

    public Output<String> getSslManagementType() {
        return this.sslManagementType;
    }

    public DomainMappingSslSettingsArgs(
        @Nullable Output<String> certificateId,
        @Nullable Output<String> pendingManagedCertificateId,
        Output<String> sslManagementType) {
        this.certificateId = certificateId;
        this.pendingManagedCertificateId = pendingManagedCertificateId;
        this.sslManagementType = Objects.requireNonNull(sslManagementType, "expected parameter 'sslManagementType' to be non-null");
    }

    private DomainMappingSslSettingsArgs() {
        this.certificateId = Codegen.empty();
        this.pendingManagedCertificateId = Codegen.empty();
        this.sslManagementType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingSslSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> certificateId;
        private @Nullable Output<String> pendingManagedCertificateId;
        private Output<String> sslManagementType;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingSslSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.pendingManagedCertificateId = defaults.pendingManagedCertificateId;
    	      this.sslManagementType = defaults.sslManagementType;
        }

        public Builder certificateId(@Nullable Output<String> certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = Codegen.ofNullable(certificateId);
            return this;
        }
        public Builder pendingManagedCertificateId(@Nullable Output<String> pendingManagedCertificateId) {
            this.pendingManagedCertificateId = pendingManagedCertificateId;
            return this;
        }
        public Builder pendingManagedCertificateId(@Nullable String pendingManagedCertificateId) {
            this.pendingManagedCertificateId = Codegen.ofNullable(pendingManagedCertificateId);
            return this;
        }
        public Builder sslManagementType(Output<String> sslManagementType) {
            this.sslManagementType = Objects.requireNonNull(sslManagementType);
            return this;
        }
        public Builder sslManagementType(String sslManagementType) {
            this.sslManagementType = Output.of(Objects.requireNonNull(sslManagementType));
            return this;
        }        public DomainMappingSslSettingsArgs build() {
            return new DomainMappingSslSettingsArgs(certificateId, pendingManagedCertificateId, sslManagementType);
        }
    }
}
