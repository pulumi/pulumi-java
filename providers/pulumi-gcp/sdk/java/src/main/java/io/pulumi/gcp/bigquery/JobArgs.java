// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.bigquery.inputs.JobCopyArgs;
import io.pulumi.gcp.bigquery.inputs.JobExtractArgs;
import io.pulumi.gcp.bigquery.inputs.JobLoadArgs;
import io.pulumi.gcp.bigquery.inputs.JobQueryArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * Copies a table.
     * Structure is documented below.
     * 
     */
    @Import(name="copy")
      private final @Nullable Output<JobCopyArgs> copy;

    public Output<JobCopyArgs> getCopy() {
        return this.copy == null ? Codegen.empty() : this.copy;
    }

    /**
     * Configures an extract job.
     * Structure is documented below.
     * 
     */
    @Import(name="extract")
      private final @Nullable Output<JobExtractArgs> extract;

    public Output<JobExtractArgs> getExtract() {
        return this.extract == null ? Codegen.empty() : this.extract;
    }

    /**
     * The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
     * 
     */
    @Import(name="jobId", required=true)
      private final Output<String> jobId;

    public Output<String> getJobId() {
        return this.jobId;
    }

    /**
     * Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
     * 
     */
    @Import(name="jobTimeoutMs")
      private final @Nullable Output<String> jobTimeoutMs;

    public Output<String> getJobTimeoutMs() {
        return this.jobTimeoutMs == null ? Codegen.empty() : this.jobTimeoutMs;
    }

    /**
     * The labels associated with this job. You can use these to organize and group your jobs.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Configures a load job.
     * Structure is documented below.
     * 
     */
    @Import(name="load")
      private final @Nullable Output<JobLoadArgs> load;

    public Output<JobLoadArgs> getLoad() {
        return this.load == null ? Codegen.empty() : this.load;
    }

    /**
     * The geographic location of the job. The default value is US.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Configures a query job.
     * Structure is documented below.
     * 
     */
    @Import(name="query")
      private final @Nullable Output<JobQueryArgs> query;

    public Output<JobQueryArgs> getQuery() {
        return this.query == null ? Codegen.empty() : this.query;
    }

    public JobArgs(
        @Nullable Output<JobCopyArgs> copy,
        @Nullable Output<JobExtractArgs> extract,
        Output<String> jobId,
        @Nullable Output<String> jobTimeoutMs,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<JobLoadArgs> load,
        @Nullable Output<String> location,
        @Nullable Output<String> project,
        @Nullable Output<JobQueryArgs> query) {
        this.copy = copy;
        this.extract = extract;
        this.jobId = Objects.requireNonNull(jobId, "expected parameter 'jobId' to be non-null");
        this.jobTimeoutMs = jobTimeoutMs;
        this.labels = labels;
        this.load = load;
        this.location = location;
        this.project = project;
        this.query = query;
    }

    private JobArgs() {
        this.copy = Codegen.empty();
        this.extract = Codegen.empty();
        this.jobId = Codegen.empty();
        this.jobTimeoutMs = Codegen.empty();
        this.labels = Codegen.empty();
        this.load = Codegen.empty();
        this.location = Codegen.empty();
        this.project = Codegen.empty();
        this.query = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<JobCopyArgs> copy;
        private @Nullable Output<JobExtractArgs> extract;
        private Output<String> jobId;
        private @Nullable Output<String> jobTimeoutMs;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<JobLoadArgs> load;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;
        private @Nullable Output<JobQueryArgs> query;

        public Builder() {
    	      // Empty
        }

        public Builder(JobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copy = defaults.copy;
    	      this.extract = defaults.extract;
    	      this.jobId = defaults.jobId;
    	      this.jobTimeoutMs = defaults.jobTimeoutMs;
    	      this.labels = defaults.labels;
    	      this.load = defaults.load;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.query = defaults.query;
        }

        public Builder copy(@Nullable Output<JobCopyArgs> copy) {
            this.copy = copy;
            return this;
        }
        public Builder copy(@Nullable JobCopyArgs copy) {
            this.copy = Codegen.ofNullable(copy);
            return this;
        }
        public Builder extract(@Nullable Output<JobExtractArgs> extract) {
            this.extract = extract;
            return this;
        }
        public Builder extract(@Nullable JobExtractArgs extract) {
            this.extract = Codegen.ofNullable(extract);
            return this;
        }
        public Builder jobId(Output<String> jobId) {
            this.jobId = Objects.requireNonNull(jobId);
            return this;
        }
        public Builder jobId(String jobId) {
            this.jobId = Output.of(Objects.requireNonNull(jobId));
            return this;
        }
        public Builder jobTimeoutMs(@Nullable Output<String> jobTimeoutMs) {
            this.jobTimeoutMs = jobTimeoutMs;
            return this;
        }
        public Builder jobTimeoutMs(@Nullable String jobTimeoutMs) {
            this.jobTimeoutMs = Codegen.ofNullable(jobTimeoutMs);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder load(@Nullable Output<JobLoadArgs> load) {
            this.load = load;
            return this;
        }
        public Builder load(@Nullable JobLoadArgs load) {
            this.load = Codegen.ofNullable(load);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder query(@Nullable Output<JobQueryArgs> query) {
            this.query = query;
            return this;
        }
        public Builder query(@Nullable JobQueryArgs query) {
            this.query = Codegen.ofNullable(query);
            return this;
        }        public JobArgs build() {
            return new JobArgs(copy, extract, jobId, jobTimeoutMs, labels, load, location, project, query);
        }
    }
}
