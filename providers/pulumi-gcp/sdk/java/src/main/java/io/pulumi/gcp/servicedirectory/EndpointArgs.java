// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.servicedirectory;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * IPv4 or IPv6 address of the endpoint.
     * 
     */
    @Import(name="address")
      private final @Nullable Output<String> address;

    public Output<String> getAddress() {
        return this.address == null ? Output.empty() : this.address;
    }

    /**
     * The Resource ID must be 1-63 characters long, including digits,
     * lowercase letters or the hyphen character.
     * 
     */
    @Import(name="endpointId", required=true)
      private final Output<String> endpointId;

    public Output<String> getEndpointId() {
        return this.endpointId;
    }

    /**
     * Metadata for the endpoint. This data can be consumed
     * by service clients. The entire metadata dictionary may contain
     * up to 512 characters, spread across all key-value pairs.
     * Metadata that goes beyond any these limits will be rejected.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> getMetadata() {
        return this.metadata == null ? Output.empty() : this.metadata;
    }

    /**
     * The URL to the network, such as projects/PROJECT_NUMBER/locations/global/networks/NETWORK_NAME.
     * 
     */
    @Import(name="network")
      private final @Nullable Output<String> network;

    public Output<String> getNetwork() {
        return this.network == null ? Output.empty() : this.network;
    }

    /**
     * Port that the endpoint is running on, must be in the
     * range of [0, 65535]. If unspecified, the default is 0.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * The resource name of the service that this endpoint provides.
     * 
     */
    @Import(name="service", required=true)
      private final Output<String> service;

    public Output<String> getService() {
        return this.service;
    }

    public EndpointArgs(
        @Nullable Output<String> address,
        Output<String> endpointId,
        @Nullable Output<Map<String,String>> metadata,
        @Nullable Output<String> network,
        @Nullable Output<Integer> port,
        Output<String> service) {
        this.address = address;
        this.endpointId = Objects.requireNonNull(endpointId, "expected parameter 'endpointId' to be non-null");
        this.metadata = metadata;
        this.network = network;
        this.port = port;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
    }

    private EndpointArgs() {
        this.address = Output.empty();
        this.endpointId = Output.empty();
        this.metadata = Output.empty();
        this.network = Output.empty();
        this.port = Output.empty();
        this.service = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> address;
        private Output<String> endpointId;
        private @Nullable Output<Map<String,String>> metadata;
        private @Nullable Output<String> network;
        private @Nullable Output<Integer> port;
        private Output<String> service;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.endpointId = defaults.endpointId;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.port = defaults.port;
    	      this.service = defaults.service;
        }

        public Builder address(@Nullable Output<String> address) {
            this.address = address;
            return this;
        }
        public Builder address(@Nullable String address) {
            this.address = Output.ofNullable(address);
            return this;
        }
        public Builder endpointId(Output<String> endpointId) {
            this.endpointId = Objects.requireNonNull(endpointId);
            return this;
        }
        public Builder endpointId(String endpointId) {
            this.endpointId = Output.of(Objects.requireNonNull(endpointId));
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Output.ofNullable(metadata);
            return this;
        }
        public Builder network(@Nullable Output<String> network) {
            this.network = network;
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = Output.ofNullable(network);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }
        public Builder service(Output<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public Builder service(String service) {
            this.service = Output.of(Objects.requireNonNull(service));
            return this;
        }        public EndpointArgs build() {
            return new EndpointArgs(address, endpointId, metadata, network, port, service);
        }
    }
}
