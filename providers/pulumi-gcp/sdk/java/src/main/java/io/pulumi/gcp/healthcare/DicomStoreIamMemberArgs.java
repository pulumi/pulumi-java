// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.healthcare;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.healthcare.inputs.DicomStoreIamMemberConditionArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DicomStoreIamMemberArgs extends io.pulumi.resources.ResourceArgs {

    public static final DicomStoreIamMemberArgs Empty = new DicomStoreIamMemberArgs();

    @Import(name="condition")
      private final @Nullable Output<DicomStoreIamMemberConditionArgs> condition;

    public Output<DicomStoreIamMemberConditionArgs> getCondition() {
        return this.condition == null ? Output.empty() : this.condition;
    }

    /**
     * The DICOM store ID, in the form
     * `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
     * `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider's
     * project setting will be used as a fallback.
     * 
     */
    @Import(name="dicomStoreId", required=true)
      private final Output<String> dicomStoreId;

    public Output<String> getDicomStoreId() {
        return this.dicomStoreId;
    }

    @Import(name="member", required=true)
      private final Output<String> member;

    public Output<String> getMember() {
        return this.member;
    }

    /**
     * The role that should be applied. Only one
     * `gcp.healthcare.DicomStoreIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Import(name="role", required=true)
      private final Output<String> role;

    public Output<String> getRole() {
        return this.role;
    }

    public DicomStoreIamMemberArgs(
        @Nullable Output<DicomStoreIamMemberConditionArgs> condition,
        Output<String> dicomStoreId,
        Output<String> member,
        Output<String> role) {
        this.condition = condition;
        this.dicomStoreId = Objects.requireNonNull(dicomStoreId, "expected parameter 'dicomStoreId' to be non-null");
        this.member = Objects.requireNonNull(member, "expected parameter 'member' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
    }

    private DicomStoreIamMemberArgs() {
        this.condition = Output.empty();
        this.dicomStoreId = Output.empty();
        this.member = Output.empty();
        this.role = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DicomStoreIamMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DicomStoreIamMemberConditionArgs> condition;
        private Output<String> dicomStoreId;
        private Output<String> member;
        private Output<String> role;

        public Builder() {
    	      // Empty
        }

        public Builder(DicomStoreIamMemberArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.dicomStoreId = defaults.dicomStoreId;
    	      this.member = defaults.member;
    	      this.role = defaults.role;
        }

        public Builder condition(@Nullable Output<DicomStoreIamMemberConditionArgs> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable DicomStoreIamMemberConditionArgs condition) {
            this.condition = Output.ofNullable(condition);
            return this;
        }
        public Builder dicomStoreId(Output<String> dicomStoreId) {
            this.dicomStoreId = Objects.requireNonNull(dicomStoreId);
            return this;
        }
        public Builder dicomStoreId(String dicomStoreId) {
            this.dicomStoreId = Output.of(Objects.requireNonNull(dicomStoreId));
            return this;
        }
        public Builder member(Output<String> member) {
            this.member = Objects.requireNonNull(member);
            return this;
        }
        public Builder member(String member) {
            this.member = Output.of(Objects.requireNonNull(member));
            return this;
        }
        public Builder role(Output<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder role(String role) {
            this.role = Output.of(Objects.requireNonNull(role));
            return this;
        }        public DicomStoreIamMemberArgs build() {
            return new DicomStoreIamMemberArgs(condition, dicomStoreId, member, role);
        }
    }
}
