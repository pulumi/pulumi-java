// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.bigquery.inputs.JobCopyDestinationEncryptionConfigurationArgs;
import io.pulumi.gcp.bigquery.inputs.JobCopyDestinationTableArgs;
import io.pulumi.gcp.bigquery.inputs.JobCopySourceTableArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobCopyArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobCopyArgs Empty = new JobCopyArgs();

    /**
     * Specifies whether the job is allowed to create new tables. The following values are supported:
     * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
     * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
     * Creation, truncation and append actions occur as one atomic update upon job completion
     * Default value is `CREATE_IF_NEEDED`.
     * Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
     * 
     */
    @Import(name="createDisposition")
      private final @Nullable Output<String> createDisposition;

    public Output<String> getCreateDisposition() {
        return this.createDisposition == null ? Output.empty() : this.createDisposition;
    }

    /**
     * Custom encryption configuration (e.g., Cloud KMS keys)
     * Structure is documented below.
     * 
     */
    @Import(name="destinationEncryptionConfiguration")
      private final @Nullable Output<JobCopyDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration;

    public Output<JobCopyDestinationEncryptionConfigurationArgs> getDestinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration == null ? Output.empty() : this.destinationEncryptionConfiguration;
    }

    /**
     * The destination table.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationTable")
      private final @Nullable Output<JobCopyDestinationTableArgs> destinationTable;

    public Output<JobCopyDestinationTableArgs> getDestinationTable() {
        return this.destinationTable == null ? Output.empty() : this.destinationTable;
    }

    /**
     * Source tables to copy.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceTables", required=true)
      private final Output<List<JobCopySourceTableArgs>> sourceTables;

    public Output<List<JobCopySourceTableArgs>> getSourceTables() {
        return this.sourceTables;
    }

    /**
     * Specifies the action that occurs if the destination table already exists. The following values are supported:
     * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
     * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
     * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
     * Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
     * Creation, truncation and append actions occur as one atomic update upon job completion.
     * Default value is `WRITE_EMPTY`.
     * Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
     * 
     */
    @Import(name="writeDisposition")
      private final @Nullable Output<String> writeDisposition;

    public Output<String> getWriteDisposition() {
        return this.writeDisposition == null ? Output.empty() : this.writeDisposition;
    }

    public JobCopyArgs(
        @Nullable Output<String> createDisposition,
        @Nullable Output<JobCopyDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration,
        @Nullable Output<JobCopyDestinationTableArgs> destinationTable,
        Output<List<JobCopySourceTableArgs>> sourceTables,
        @Nullable Output<String> writeDisposition) {
        this.createDisposition = createDisposition;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationTable = destinationTable;
        this.sourceTables = Objects.requireNonNull(sourceTables, "expected parameter 'sourceTables' to be non-null");
        this.writeDisposition = writeDisposition;
    }

    private JobCopyArgs() {
        this.createDisposition = Output.empty();
        this.destinationEncryptionConfiguration = Output.empty();
        this.destinationTable = Output.empty();
        this.sourceTables = Output.empty();
        this.writeDisposition = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobCopyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createDisposition;
        private @Nullable Output<JobCopyDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration;
        private @Nullable Output<JobCopyDestinationTableArgs> destinationTable;
        private Output<List<JobCopySourceTableArgs>> sourceTables;
        private @Nullable Output<String> writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobCopyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDisposition = defaults.createDisposition;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.sourceTables = defaults.sourceTables;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder createDisposition(@Nullable Output<String> createDisposition) {
            this.createDisposition = createDisposition;
            return this;
        }

        public Builder createDisposition(@Nullable String createDisposition) {
            this.createDisposition = Output.ofNullable(createDisposition);
            return this;
        }

        public Builder destinationEncryptionConfiguration(@Nullable Output<JobCopyDestinationEncryptionConfigurationArgs> destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }

        public Builder destinationEncryptionConfiguration(@Nullable JobCopyDestinationEncryptionConfigurationArgs destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Output.ofNullable(destinationEncryptionConfiguration);
            return this;
        }

        public Builder destinationTable(@Nullable Output<JobCopyDestinationTableArgs> destinationTable) {
            this.destinationTable = destinationTable;
            return this;
        }

        public Builder destinationTable(@Nullable JobCopyDestinationTableArgs destinationTable) {
            this.destinationTable = Output.ofNullable(destinationTable);
            return this;
        }

        public Builder sourceTables(Output<List<JobCopySourceTableArgs>> sourceTables) {
            this.sourceTables = Objects.requireNonNull(sourceTables);
            return this;
        }

        public Builder sourceTables(List<JobCopySourceTableArgs> sourceTables) {
            this.sourceTables = Output.of(Objects.requireNonNull(sourceTables));
            return this;
        }

        public Builder writeDisposition(@Nullable Output<String> writeDisposition) {
            this.writeDisposition = writeDisposition;
            return this;
        }

        public Builder writeDisposition(@Nullable String writeDisposition) {
            this.writeDisposition = Output.ofNullable(writeDisposition);
            return this;
        }
        public JobCopyArgs build() {
            return new JobCopyArgs(createDisposition, destinationEncryptionConfiguration, destinationTable, sourceTables, writeDisposition);
        }
    }
}
