// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.secretmanager.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class SecretRotation {
    private final @Nullable String nextRotationTime;
    private final @Nullable String rotationPeriod;

    @OutputCustomType.Constructor({"nextRotationTime","rotationPeriod"})
    private SecretRotation(
        @Nullable String nextRotationTime,
        @Nullable String rotationPeriod) {
        this.nextRotationTime = nextRotationTime;
        this.rotationPeriod = rotationPeriod;
    }

    public Optional<String> getNextRotationTime() {
        return Optional.ofNullable(this.nextRotationTime);
    }
    public Optional<String> getRotationPeriod() {
        return Optional.ofNullable(this.rotationPeriod);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretRotation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String nextRotationTime;
        private @Nullable String rotationPeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretRotation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nextRotationTime = defaults.nextRotationTime;
    	      this.rotationPeriod = defaults.rotationPeriod;
        }

        public Builder setNextRotationTime(@Nullable String nextRotationTime) {
            this.nextRotationTime = nextRotationTime;
            return this;
        }

        public Builder setRotationPeriod(@Nullable String rotationPeriod) {
            this.rotationPeriod = rotationPeriod;
            return this;
        }

        public SecretRotation build() {
            return new SecretRotation(nextRotationTime, rotationPeriod);
        }
    }
}
