// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.accesscontextmanager.outputs.AccessLevelBasicConditionDevicePolicy;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class AccessLevelBasicCondition {
    private final @Nullable AccessLevelBasicConditionDevicePolicy devicePolicy;
    private final @Nullable List<String> ipSubnetworks;
    private final @Nullable List<String> members;
    private final @Nullable Boolean negate;
    private final @Nullable List<String> regions;
    private final @Nullable List<String> requiredAccessLevels;

    @OutputCustomType.Constructor({"devicePolicy","ipSubnetworks","members","negate","regions","requiredAccessLevels"})
    private AccessLevelBasicCondition(
        @Nullable AccessLevelBasicConditionDevicePolicy devicePolicy,
        @Nullable List<String> ipSubnetworks,
        @Nullable List<String> members,
        @Nullable Boolean negate,
        @Nullable List<String> regions,
        @Nullable List<String> requiredAccessLevels) {
        this.devicePolicy = devicePolicy;
        this.ipSubnetworks = ipSubnetworks;
        this.members = members;
        this.negate = negate;
        this.regions = regions;
        this.requiredAccessLevels = requiredAccessLevels;
    }

    public Optional<AccessLevelBasicConditionDevicePolicy> getDevicePolicy() {
        return Optional.ofNullable(this.devicePolicy);
    }
    public List<String> getIpSubnetworks() {
        return this.ipSubnetworks == null ? List.of() : this.ipSubnetworks;
    }
    public List<String> getMembers() {
        return this.members == null ? List.of() : this.members;
    }
    public Optional<Boolean> getNegate() {
        return Optional.ofNullable(this.negate);
    }
    public List<String> getRegions() {
        return this.regions == null ? List.of() : this.regions;
    }
    public List<String> getRequiredAccessLevels() {
        return this.requiredAccessLevels == null ? List.of() : this.requiredAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessLevelBasicCondition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AccessLevelBasicConditionDevicePolicy devicePolicy;
        private @Nullable List<String> ipSubnetworks;
        private @Nullable List<String> members;
        private @Nullable Boolean negate;
        private @Nullable List<String> regions;
        private @Nullable List<String> requiredAccessLevels;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessLevelBasicCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.devicePolicy = defaults.devicePolicy;
    	      this.ipSubnetworks = defaults.ipSubnetworks;
    	      this.members = defaults.members;
    	      this.negate = defaults.negate;
    	      this.regions = defaults.regions;
    	      this.requiredAccessLevels = defaults.requiredAccessLevels;
        }

        public Builder setDevicePolicy(@Nullable AccessLevelBasicConditionDevicePolicy devicePolicy) {
            this.devicePolicy = devicePolicy;
            return this;
        }

        public Builder setIpSubnetworks(@Nullable List<String> ipSubnetworks) {
            this.ipSubnetworks = ipSubnetworks;
            return this;
        }

        public Builder setMembers(@Nullable List<String> members) {
            this.members = members;
            return this;
        }

        public Builder setNegate(@Nullable Boolean negate) {
            this.negate = negate;
            return this;
        }

        public Builder setRegions(@Nullable List<String> regions) {
            this.regions = regions;
            return this;
        }

        public Builder setRequiredAccessLevels(@Nullable List<String> requiredAccessLevels) {
            this.requiredAccessLevels = requiredAccessLevels;
            return this;
        }

        public AccessLevelBasicCondition build() {
            return new AccessLevelBasicCondition(devicePolicy, ipSubnetworks, members, negate, regions, requiredAccessLevels);
        }
    }
}
