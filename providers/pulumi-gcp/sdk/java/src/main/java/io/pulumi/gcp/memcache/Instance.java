// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.memcache;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.memcache.InstanceArgs;
import io.pulumi.gcp.memcache.inputs.InstanceState;
import io.pulumi.gcp.memcache.outputs.InstanceMemcacheNode;
import io.pulumi.gcp.memcache.outputs.InstanceMemcacheParameters;
import io.pulumi.gcp.memcache.outputs.InstanceNodeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A Google Cloud Memcache instance.
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/memcache/docs/creating-instances)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Memcache Instance Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const memcacheNetwork = gcp.compute.getNetwork({
 *     name: "test-network",
 * });
 * const serviceRange = new gcp.compute.GlobalAddress("serviceRange", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: memcacheNetwork.then(memcacheNetwork => memcacheNetwork.id),
 * });
 * const privateServiceConnection = new gcp.servicenetworking.Connection("privateServiceConnection", {
 *     network: memcacheNetwork.then(memcacheNetwork => memcacheNetwork.id),
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [serviceRange.name],
 * });
 * const instance = new gcp.memcache.Instance("instance", {
 *     authorizedNetwork: privateServiceConnection.network,
 *     nodeConfig: {
 *         cpuCount: 1,
 *         memorySizeMb: 1024,
 *     },
 *     nodeCount: 1,
 *     memcacheVersion: "MEMCACHE_1_5",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * memcache_network = gcp.compute.get_network(name="test-network")
 * service_range = gcp.compute.GlobalAddress("serviceRange",
 *     purpose="VPC_PEERING",
 *     address_type="INTERNAL",
 *     prefix_length=16,
 *     network=memcache_network.id)
 * private_service_connection = gcp.servicenetworking.Connection("privateServiceConnection",
 *     network=memcache_network.id,
 *     service="servicenetworking.googleapis.com",
 *     reserved_peering_ranges=[service_range.name])
 * instance = gcp.memcache.Instance("instance",
 *     authorized_network=private_service_connection.network,
 *     node_config=gcp.memcache.InstanceNodeConfigArgs(
 *         cpu_count=1,
 *         memory_size_mb=1024,
 *     ),
 *     node_count=1,
 *     memcache_version="MEMCACHE_1_5")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var memcacheNetwork = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs
 *         {
 *             Name = "test-network",
 *         }));
 *         var serviceRange = new Gcp.Compute.GlobalAddress("serviceRange", new Gcp.Compute.GlobalAddressArgs
 *         {
 *             Purpose = "VPC_PEERING",
 *             AddressType = "INTERNAL",
 *             PrefixLength = 16,
 *             Network = memcacheNetwork.Apply(memcacheNetwork => memcacheNetwork.Id),
 *         });
 *         var privateServiceConnection = new Gcp.ServiceNetworking.Connection("privateServiceConnection", new Gcp.ServiceNetworking.ConnectionArgs
 *         {
 *             Network = memcacheNetwork.Apply(memcacheNetwork => memcacheNetwork.Id),
 *             Service = "servicenetworking.googleapis.com",
 *             ReservedPeeringRanges = 
 *             {
 *                 serviceRange.Name,
 *             },
 *         });
 *         var instance = new Gcp.Memcache.Instance("instance", new Gcp.Memcache.InstanceArgs
 *         {
 *             AuthorizedNetwork = privateServiceConnection.Network,
 *             NodeConfig = new Gcp.Memcache.Inputs.InstanceNodeConfigArgs
 *             {
 *                 CpuCount = 1,
 *                 MemorySizeMb = 1024,
 *             },
 *             NodeCount = 1,
 *             MemcacheVersion = "MEMCACHE_1_5",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/memcache"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		memcacheNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
 * 			Name: "test-network",
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		serviceRange, err := compute.NewGlobalAddress(ctx, "serviceRange", &compute.GlobalAddressArgs{
 * 			Purpose:      pulumi.String("VPC_PEERING"),
 * 			AddressType:  pulumi.String("INTERNAL"),
 * 			PrefixLength: pulumi.Int(16),
 * 			Network:      pulumi.String(memcacheNetwork.Id),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		privateServiceConnection, err := servicenetworking.NewConnection(ctx, "privateServiceConnection", &servicenetworking.ConnectionArgs{
 * 			Network: pulumi.String(memcacheNetwork.Id),
 * 			Service: pulumi.String("servicenetworking.googleapis.com"),
 * 			ReservedPeeringRanges: pulumi.StringArray{
 * 				serviceRange.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = memcache.NewInstance(ctx, "instance", &memcache.InstanceArgs{
 * 			AuthorizedNetwork: privateServiceConnection.Network,
 * 			NodeConfig: &memcache.InstanceNodeConfigArgs{
 * 				CpuCount:     pulumi.Int(1),
 * 				MemorySizeMb: pulumi.Int(1024),
 * 			},
 * 			NodeCount:       pulumi.Int(1),
 * 			MemcacheVersion: pulumi.String("MEMCACHE_1_5"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:memcache/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:memcache/instance:Instance default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:memcache/instance:Instance default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:memcache/instance:Instance default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:memcache/instance:Instance")
public class Instance extends io.pulumi.resources.CustomResource {
    /**
     * The full name of the GCE network to connect the instance to.  If not provided,
     * 'default' will be used.
     * 
     */
    @Export(name="authorizedNetwork", type=String.class, parameters={})
    private Output<String> authorizedNetwork;

    /**
     * @return The full name of the GCE network to connect the instance to.  If not provided,
     * 'default' will be used.
     * 
     */
    public Output<String> getAuthorizedNetwork() {
        return this.authorizedNetwork;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * Endpoint for Discovery API
     * 
     */
    @Export(name="discoveryEndpoint", type=String.class, parameters={})
    private Output<String> discoveryEndpoint;

    /**
     * @return Endpoint for Discovery API
     * 
     */
    public Output<String> getDiscoveryEndpoint() {
        return this.discoveryEndpoint;
    }
    /**
     * A user-visible name for the instance.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return A user-visible name for the instance.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * The full version of memcached server running on this instance.
     * 
     */
    @Export(name="memcacheFullVersion", type=String.class, parameters={})
    private Output<String> memcacheFullVersion;

    /**
     * @return The full version of memcached server running on this instance.
     * 
     */
    public Output<String> getMemcacheFullVersion() {
        return this.memcacheFullVersion;
    }
    /**
     * Additional information about the instance state, if available.
     * 
     */
    @Export(name="memcacheNodes", type=List.class, parameters={InstanceMemcacheNode.class})
    private Output<List<InstanceMemcacheNode>> memcacheNodes;

    /**
     * @return Additional information about the instance state, if available.
     * 
     */
    public Output<List<InstanceMemcacheNode>> getMemcacheNodes() {
        return this.memcacheNodes;
    }
    /**
     * User-specified parameters for this memcache instance.
     * Structure is documented below.
     * 
     */
    @Export(name="memcacheParameters", type=InstanceMemcacheParameters.class, parameters={})
    private Output</* @Nullable */ InstanceMemcacheParameters> memcacheParameters;

    /**
     * @return User-specified parameters for this memcache instance.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ InstanceMemcacheParameters> getMemcacheParameters() {
        return this.memcacheParameters;
    }
    /**
     * The major version of Memcached software. If not provided, latest supported version will be used.
     * Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
     * determined by our system based on the latest supported minor version.
     * Default value is `MEMCACHE_1_5`.
     * Possible values are `MEMCACHE_1_5`.
     * 
     */
    @Export(name="memcacheVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> memcacheVersion;

    /**
     * @return The major version of Memcached software. If not provided, latest supported version will be used.
     * Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
     * determined by our system based on the latest supported minor version.
     * Default value is `MEMCACHE_1_5`.
     * Possible values are `MEMCACHE_1_5`.
     * 
     */
    public Output</* @Nullable */ String> getMemcacheVersion() {
        return this.memcacheVersion;
    }
    /**
     * The resource name of the instance.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name of the instance.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Configuration for memcache nodes.
     * Structure is documented below.
     * 
     */
    @Export(name="nodeConfig", type=InstanceNodeConfig.class, parameters={})
    private Output<InstanceNodeConfig> nodeConfig;

    /**
     * @return Configuration for memcache nodes.
     * Structure is documented below.
     * 
     */
    public Output<InstanceNodeConfig> getNodeConfig() {
        return this.nodeConfig;
    }
    /**
     * Number of nodes in the memcache instance.
     * 
     */
    @Export(name="nodeCount", type=Integer.class, parameters={})
    private Output<Integer> nodeCount;

    /**
     * @return Number of nodes in the memcache instance.
     * 
     */
    public Output<Integer> getNodeCount() {
        return this.nodeCount;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The region of the Memcache instance. If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region of the Memcache instance. If it is not provided, the provider region is used.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * Zones where memcache nodes should be provisioned.  If not
     * provided, all zones will be used.
     * 
     */
    @Export(name="zones", type=List.class, parameters={String.class})
    private Output<List<String>> zones;

    /**
     * @return Zones where memcache nodes should be provisioned.  If not
     * provided, all zones will be used.
     * 
     */
    public Output<List<String>> getZones() {
        return this.zones;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:memcache/instance:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:memcache/instance:Instance", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
