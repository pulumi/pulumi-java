// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.monitoring.inputs.AlertPolicyAlertStrategyArgs;
import io.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
import io.pulumi.gcp.monitoring.inputs.AlertPolicyDocumentationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AlertPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final AlertPolicyArgs Empty = new AlertPolicyArgs();

    /**
     * Control over how this alert policy's notification channels are notified.
     * Structure is documented below.
     * 
     */
    @InputImport(name="alertStrategy")
      private final @Nullable Output<AlertPolicyAlertStrategyArgs> alertStrategy;

    public Output<AlertPolicyAlertStrategyArgs> getAlertStrategy() {
        return this.alertStrategy == null ? Output.empty() : this.alertStrategy;
    }

    /**
     * How to combine the results of multiple conditions to
     * determine if an incident should be opened.
     * Possible values are `AND`, `OR`, and `AND_WITH_MATCHING_RESOURCE`.
     * 
     */
    @InputImport(name="combiner", required=true)
      private final Output<String> combiner;

    public Output<String> getCombiner() {
        return this.combiner;
    }

    /**
     * A list of conditions for the policy. The conditions are combined by
     * AND or OR according to the combiner field. If the combined conditions
     * evaluate to true, then an incident is created. A policy can have from
     * one to six conditions.
     * Structure is documented below.
     * 
     */
    @InputImport(name="conditions", required=true)
      private final Output<List<AlertPolicyConditionArgs>> conditions;

    public Output<List<AlertPolicyConditionArgs>> getConditions() {
        return this.conditions;
    }

    /**
     * A short name or phrase used to identify the
     * condition in dashboards, notifications, and
     * incidents. To avoid confusion, don't use the same
     * display name for multiple conditions in the same
     * policy.
     * 
     */
    @InputImport(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * Documentation that is included with notifications and incidents related
     * to this policy. Best practice is for the documentation to include information
     * to help responders understand, mitigate, escalate, and correct the underlying
     * problems detected by the alerting policy. Notification channels that have
     * limited capacity might not show this documentation.
     * Structure is documented below.
     * 
     */
    @InputImport(name="documentation")
      private final @Nullable Output<AlertPolicyDocumentationArgs> documentation;

    public Output<AlertPolicyDocumentationArgs> getDocumentation() {
        return this.documentation == null ? Output.empty() : this.documentation;
    }

    /**
     * Whether or not the policy is enabled. The default is true.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * Identifies the notification channels to which notifications should be
     * sent when incidents are opened or closed or when new violations occur
     * on an already opened incident. Each element of this array corresponds
     * to the name field in each of the NotificationChannel objects that are
     * returned from the notificationChannels.list method. The syntax of the
     * entries in this field is
     * `projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]`
     * 
     */
    @InputImport(name="notificationChannels")
      private final @Nullable Output<List<String>> notificationChannels;

    public Output<List<String>> getNotificationChannels() {
        return this.notificationChannels == null ? Output.empty() : this.notificationChannels;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy
     * objects.The field can contain up to 64 entries. Each key and value is limited
     * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys
     * must begin with a letter.
     * 
     */
    @InputImport(name="userLabels")
      private final @Nullable Output<Map<String,String>> userLabels;

    public Output<Map<String,String>> getUserLabels() {
        return this.userLabels == null ? Output.empty() : this.userLabels;
    }

    public AlertPolicyArgs(
        @Nullable Output<AlertPolicyAlertStrategyArgs> alertStrategy,
        Output<String> combiner,
        Output<List<AlertPolicyConditionArgs>> conditions,
        Output<String> displayName,
        @Nullable Output<AlertPolicyDocumentationArgs> documentation,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<List<String>> notificationChannels,
        @Nullable Output<String> project,
        @Nullable Output<Map<String,String>> userLabels) {
        this.alertStrategy = alertStrategy;
        this.combiner = Objects.requireNonNull(combiner, "expected parameter 'combiner' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.documentation = documentation;
        this.enabled = enabled;
        this.notificationChannels = notificationChannels;
        this.project = project;
        this.userLabels = userLabels;
    }

    private AlertPolicyArgs() {
        this.alertStrategy = Output.empty();
        this.combiner = Output.empty();
        this.conditions = Output.empty();
        this.displayName = Output.empty();
        this.documentation = Output.empty();
        this.enabled = Output.empty();
        this.notificationChannels = Output.empty();
        this.project = Output.empty();
        this.userLabels = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AlertPolicyAlertStrategyArgs> alertStrategy;
        private Output<String> combiner;
        private Output<List<AlertPolicyConditionArgs>> conditions;
        private Output<String> displayName;
        private @Nullable Output<AlertPolicyDocumentationArgs> documentation;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<List<String>> notificationChannels;
        private @Nullable Output<String> project;
        private @Nullable Output<Map<String,String>> userLabels;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertStrategy = defaults.alertStrategy;
    	      this.combiner = defaults.combiner;
    	      this.conditions = defaults.conditions;
    	      this.displayName = defaults.displayName;
    	      this.documentation = defaults.documentation;
    	      this.enabled = defaults.enabled;
    	      this.notificationChannels = defaults.notificationChannels;
    	      this.project = defaults.project;
    	      this.userLabels = defaults.userLabels;
        }

        public Builder alertStrategy(@Nullable Output<AlertPolicyAlertStrategyArgs> alertStrategy) {
            this.alertStrategy = alertStrategy;
            return this;
        }

        public Builder alertStrategy(@Nullable AlertPolicyAlertStrategyArgs alertStrategy) {
            this.alertStrategy = Output.ofNullable(alertStrategy);
            return this;
        }

        public Builder combiner(Output<String> combiner) {
            this.combiner = Objects.requireNonNull(combiner);
            return this;
        }

        public Builder combiner(String combiner) {
            this.combiner = Output.of(Objects.requireNonNull(combiner));
            return this;
        }

        public Builder conditions(Output<List<AlertPolicyConditionArgs>> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder conditions(List<AlertPolicyConditionArgs> conditions) {
            this.conditions = Output.of(Objects.requireNonNull(conditions));
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder documentation(@Nullable Output<AlertPolicyDocumentationArgs> documentation) {
            this.documentation = documentation;
            return this;
        }

        public Builder documentation(@Nullable AlertPolicyDocumentationArgs documentation) {
            this.documentation = Output.ofNullable(documentation);
            return this;
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }

        public Builder notificationChannels(@Nullable Output<List<String>> notificationChannels) {
            this.notificationChannels = notificationChannels;
            return this;
        }

        public Builder notificationChannels(@Nullable List<String> notificationChannels) {
            this.notificationChannels = Output.ofNullable(notificationChannels);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder userLabels(@Nullable Output<Map<String,String>> userLabels) {
            this.userLabels = userLabels;
            return this;
        }

        public Builder userLabels(@Nullable Map<String,String> userLabels) {
            this.userLabels = Output.ofNullable(userLabels);
            return this;
        }
        public AlertPolicyArgs build() {
            return new AlertPolicyArgs(alertStrategy, combiner, conditions, displayName, documentation, enabled, notificationChannels, project, userLabels);
        }
    }
}
