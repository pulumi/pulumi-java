// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.gameservices.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.gameservices.inputs.GameServerDeploymentRolloutGameServerConfigOverrideGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GameServerDeploymentRolloutState extends io.pulumi.resources.ResourceArgs {

    public static final GameServerDeploymentRolloutState Empty = new GameServerDeploymentRolloutState();

    /**
     * This field points to the game server config that is
     * applied by default to all realms and clusters. For example,
     * `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
     * 
     */
    @Import(name="defaultGameServerConfig")
      private final @Nullable Output<String> defaultGameServerConfig;

    public Output<String> getDefaultGameServerConfig() {
        return this.defaultGameServerConfig == null ? Output.empty() : this.defaultGameServerConfig;
    }

    /**
     * The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
     * 
     */
    @Import(name="deploymentId")
      private final @Nullable Output<String> deploymentId;

    public Output<String> getDeploymentId() {
        return this.deploymentId == null ? Output.empty() : this.deploymentId;
    }

    /**
     * The game_server_config_overrides contains the per game server config
     * overrides. The overrides are processed in the order they are listed. As
     * soon as a match is found for a cluster, the rest of the list is not
     * processed.
     * Structure is documented below.
     * 
     */
    @Import(name="gameServerConfigOverrides")
      private final @Nullable Output<List<GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>> gameServerConfigOverrides;

    public Output<List<GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>> getGameServerConfigOverrides() {
        return this.gameServerConfigOverrides == null ? Output.empty() : this.gameServerConfigOverrides;
    }

    /**
     * The resource id of the game server deployment eg:
     * 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    public GameServerDeploymentRolloutState(
        @Nullable Output<String> defaultGameServerConfig,
        @Nullable Output<String> deploymentId,
        @Nullable Output<List<GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>> gameServerConfigOverrides,
        @Nullable Output<String> name,
        @Nullable Output<String> project) {
        this.defaultGameServerConfig = defaultGameServerConfig;
        this.deploymentId = deploymentId;
        this.gameServerConfigOverrides = gameServerConfigOverrides;
        this.name = name;
        this.project = project;
    }

    private GameServerDeploymentRolloutState() {
        this.defaultGameServerConfig = Output.empty();
        this.deploymentId = Output.empty();
        this.gameServerConfigOverrides = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GameServerDeploymentRolloutState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> defaultGameServerConfig;
        private @Nullable Output<String> deploymentId;
        private @Nullable Output<List<GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>> gameServerConfigOverrides;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(GameServerDeploymentRolloutState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultGameServerConfig = defaults.defaultGameServerConfig;
    	      this.deploymentId = defaults.deploymentId;
    	      this.gameServerConfigOverrides = defaults.gameServerConfigOverrides;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
        }

        public Builder defaultGameServerConfig(@Nullable Output<String> defaultGameServerConfig) {
            this.defaultGameServerConfig = defaultGameServerConfig;
            return this;
        }

        public Builder defaultGameServerConfig(@Nullable String defaultGameServerConfig) {
            this.defaultGameServerConfig = Output.ofNullable(defaultGameServerConfig);
            return this;
        }

        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            this.deploymentId = deploymentId;
            return this;
        }

        public Builder deploymentId(@Nullable String deploymentId) {
            this.deploymentId = Output.ofNullable(deploymentId);
            return this;
        }

        public Builder gameServerConfigOverrides(@Nullable Output<List<GameServerDeploymentRolloutGameServerConfigOverrideGetArgs>> gameServerConfigOverrides) {
            this.gameServerConfigOverrides = gameServerConfigOverrides;
            return this;
        }

        public Builder gameServerConfigOverrides(@Nullable List<GameServerDeploymentRolloutGameServerConfigOverrideGetArgs> gameServerConfigOverrides) {
            this.gameServerConfigOverrides = Output.ofNullable(gameServerConfigOverrides);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public GameServerDeploymentRolloutState build() {
            return new GameServerDeploymentRolloutState(defaultGameServerConfig, deploymentId, gameServerConfigOverrides, name, project);
        }
    }
}
