// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudbuild.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.cloudbuild.inputs.TriggerGithubPullRequestArgs;
import io.pulumi.gcp.cloudbuild.inputs.TriggerGithubPushArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerGithubArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerGithubArgs Empty = new TriggerGithubArgs();

    /**
     * Name of the volume to mount.
     * Volume names must be unique per build step and must be valid names for Docker volumes.
     * Each named volume must be used by at least two build steps.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Owner of the repository. For example: The owner for
     * https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
     * 
     */
    @InputImport(name="owner")
      private final @Nullable Input<String> owner;

    public Input<String> getOwner() {
        return this.owner == null ? Input.empty() : this.owner;
    }

    /**
     * filter to match changes in pull requests. Specify only one of `pull_request` or `push`.
     * Structure is documented below.
     * 
     */
    @InputImport(name="pullRequest")
      private final @Nullable Input<TriggerGithubPullRequestArgs> pullRequest;

    public Input<TriggerGithubPullRequestArgs> getPullRequest() {
        return this.pullRequest == null ? Input.empty() : this.pullRequest;
    }

    /**
     * filter to match changes in refs, like branches or tags. Specify only one of `pull_request` or `push`.
     * Structure is documented below.
     * 
     */
    @InputImport(name="push")
      private final @Nullable Input<TriggerGithubPushArgs> push;

    public Input<TriggerGithubPushArgs> getPush() {
        return this.push == null ? Input.empty() : this.push;
    }

    public TriggerGithubArgs(
        @Nullable Input<String> name,
        @Nullable Input<String> owner,
        @Nullable Input<TriggerGithubPullRequestArgs> pullRequest,
        @Nullable Input<TriggerGithubPushArgs> push) {
        this.name = name;
        this.owner = owner;
        this.pullRequest = pullRequest;
        this.push = push;
    }

    private TriggerGithubArgs() {
        this.name = Input.empty();
        this.owner = Input.empty();
        this.pullRequest = Input.empty();
        this.push = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerGithubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> name;
        private @Nullable Input<String> owner;
        private @Nullable Input<TriggerGithubPullRequestArgs> pullRequest;
        private @Nullable Input<TriggerGithubPushArgs> push;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerGithubArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.pullRequest = defaults.pullRequest;
    	      this.push = defaults.push;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder owner(@Nullable Input<String> owner) {
            this.owner = owner;
            return this;
        }

        public Builder owner(@Nullable String owner) {
            this.owner = Input.ofNullable(owner);
            return this;
        }

        public Builder pullRequest(@Nullable Input<TriggerGithubPullRequestArgs> pullRequest) {
            this.pullRequest = pullRequest;
            return this;
        }

        public Builder pullRequest(@Nullable TriggerGithubPullRequestArgs pullRequest) {
            this.pullRequest = Input.ofNullable(pullRequest);
            return this;
        }

        public Builder push(@Nullable Input<TriggerGithubPushArgs> push) {
            this.push = push;
            return this;
        }

        public Builder push(@Nullable TriggerGithubPushArgs push) {
            this.push = Input.ofNullable(push);
            return this;
        }
        public TriggerGithubArgs build() {
            return new TriggerGithubArgs(name, owner, pullRequest, push);
        }
    }
}
