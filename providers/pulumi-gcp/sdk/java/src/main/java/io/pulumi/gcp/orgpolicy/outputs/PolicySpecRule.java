// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.orgpolicy.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.orgpolicy.outputs.PolicySpecRuleCondition;
import io.pulumi.gcp.orgpolicy.outputs.PolicySpecRuleValues;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class PolicySpecRule {
    /**
     * Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
     * 
     */
    private final @Nullable String allowAll;
    /**
     * A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
     * 
     */
    private final @Nullable PolicySpecRuleCondition condition;
    /**
     * Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
     * 
     */
    private final @Nullable String denyAll;
    /**
     * If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
     * 
     */
    private final @Nullable String enforce;
    /**
     * List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
     * 
     */
    private final @Nullable PolicySpecRuleValues values;

    @OutputCustomType.Constructor({"allowAll","condition","denyAll","enforce","values"})
    private PolicySpecRule(
        @Nullable String allowAll,
        @Nullable PolicySpecRuleCondition condition,
        @Nullable String denyAll,
        @Nullable String enforce,
        @Nullable PolicySpecRuleValues values) {
        this.allowAll = allowAll;
        this.condition = condition;
        this.denyAll = denyAll;
        this.enforce = enforce;
        this.values = values;
    }

    /**
     * Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
     * 
     */
    public Optional<String> getAllowAll() {
        return Optional.ofNullable(this.allowAll);
    }
    /**
     * A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag('/tag_key_short_name, 'tag_value_short_name')". or "resource.matchTagId('tagKeys/key_id', 'tagValues/value_id')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag('123456789/environment, 'prod')". or "resource.matchTagId('tagKeys/123', 'tagValues/456')".
     * 
     */
    public Optional<PolicySpecRuleCondition> getCondition() {
        return Optional.ofNullable(this.condition);
    }
    /**
     * Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
     * 
     */
    public Optional<String> getDenyAll() {
        return Optional.ofNullable(this.denyAll);
    }
    /**
     * If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
     * 
     */
    public Optional<String> getEnforce() {
        return Optional.ofNullable(this.enforce);
    }
    /**
     * List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
     * 
     */
    public Optional<PolicySpecRuleValues> getValues() {
        return Optional.ofNullable(this.values);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicySpecRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String allowAll;
        private @Nullable PolicySpecRuleCondition condition;
        private @Nullable String denyAll;
        private @Nullable String enforce;
        private @Nullable PolicySpecRuleValues values;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicySpecRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowAll = defaults.allowAll;
    	      this.condition = defaults.condition;
    	      this.denyAll = defaults.denyAll;
    	      this.enforce = defaults.enforce;
    	      this.values = defaults.values;
        }

        public Builder setAllowAll(@Nullable String allowAll) {
            this.allowAll = allowAll;
            return this;
        }

        public Builder setCondition(@Nullable PolicySpecRuleCondition condition) {
            this.condition = condition;
            return this;
        }

        public Builder setDenyAll(@Nullable String denyAll) {
            this.denyAll = denyAll;
            return this;
        }

        public Builder setEnforce(@Nullable String enforce) {
            this.enforce = enforce;
            return this;
        }

        public Builder setValues(@Nullable PolicySpecRuleValues values) {
            this.values = values;
            return this;
        }
        public PolicySpecRule build() {
            return new PolicySpecRule(allowAll, condition, denyAll, enforce, values);
        }
    }
}
