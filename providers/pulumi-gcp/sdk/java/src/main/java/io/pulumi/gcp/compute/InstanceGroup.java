// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.InstanceGroupArgs;
import io.pulumi.gcp.compute.inputs.InstanceGroupState;
import io.pulumi.gcp.compute.outputs.InstanceGroupNamedPort;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Creates a group of dissimilar Compute Engine virtual machine instances.
 * For more information, see [the official documentation](https://cloud.google.com/compute/docs/instance-groups/#unmanaged_instance_groups)
 * and [API](https://cloud.google.com/compute/docs/reference/latest/instanceGroups)
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Empty Instance Group
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const test = new gcp.compute.InstanceGroup("test", {
 *     description: "Test instance group",
 *     zone: "us-central1-a",
 *     network: google_compute_network["default"].id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * test = gcp.compute.InstanceGroup("test",
 *     description="Test instance group",
 *     zone="us-central1-a",
 *     network=google_compute_network["default"]["id"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Gcp.Compute.InstanceGroup("test", new Gcp.Compute.InstanceGroupArgs
 *         {
 *             Description = "Test instance group",
 *             Zone = "us-central1-a",
 *             Network = google_compute_network.Default.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewInstanceGroup(ctx, "test", &compute.InstanceGroupArgs{
 * 			Description: pulumi.String("Test instance group"),
 * 			Zone:        pulumi.String("us-central1-a"),
 * 			Network:     pulumi.Any(google_compute_network.Default.Id),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example Usage - With instances and named ports
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const webservers = new gcp.compute.InstanceGroup("webservers", {
 *     description: "Test instance group",
 *     instances: [
 *         google_compute_instance.test.id,
 *         google_compute_instance.test2.id,
 *     ],
 *     namedPorts: [
 *         {
 *             name: "http",
 *             port: "8080",
 *         },
 *         {
 *             name: "https",
 *             port: "8443",
 *         },
 *     ],
 *     zone: "us-central1-a",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * webservers = gcp.compute.InstanceGroup("webservers",
 *     description="Test instance group",
 *     instances=[
 *         google_compute_instance["test"]["id"],
 *         google_compute_instance["test2"]["id"],
 *     ],
 *     named_ports=[
 *         gcp.compute.InstanceGroupNamedPortArgs(
 *             name="http",
 *             port=8080,
 *         ),
 *         gcp.compute.InstanceGroupNamedPortArgs(
 *             name="https",
 *             port=8443,
 *         ),
 *     ],
 *     zone="us-central1-a")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var webservers = new Gcp.Compute.InstanceGroup("webservers", new Gcp.Compute.InstanceGroupArgs
 *         {
 *             Description = "Test instance group",
 *             Instances = 
 *             {
 *                 google_compute_instance.Test.Id,
 *                 google_compute_instance.Test2.Id,
 *             },
 *             NamedPorts = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
 *                 {
 *                     Name = "http",
 *                     Port = 8080,
 *                 },
 *                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
 *                 {
 *                     Name = "https",
 *                     Port = 8443,
 *                 },
 *             },
 *             Zone = "us-central1-a",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewInstanceGroup(ctx, "webservers", &compute.InstanceGroupArgs{
 * 			Description: pulumi.String("Test instance group"),
 * 			Instances: pulumi.StringArray{
 * 				pulumi.Any(google_compute_instance.Test.Id),
 * 				pulumi.Any(google_compute_instance.Test2.Id),
 * 			},
 * 			NamedPorts: compute.InstanceGroupNamedPortArray{
 * 				&compute.InstanceGroupNamedPortArgs{
 * 					Name: pulumi.String("http"),
 * 					Port: pulumi.Int(8080),
 * 				},
 * 				&compute.InstanceGroupNamedPortArgs{
 * 					Name: pulumi.String("https"),
 * 					Port: pulumi.Int(8443),
 * 				},
 * 			},
 * 			Zone: pulumi.String("us-central1-a"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example Usage - Recreating an instance group in use
 * Recreating an instance group that's in use by another resource will give a
 * `resourceInUseByAnotherResource` error. Use `lifecycle.create_before_destroy`
 * as shown in this example to avoid this type of error.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const debianImage = gcp.compute.getImage({
 *     family: "debian-9",
 *     project: "debian-cloud",
 * });
 * const stagingVm = new gcp.compute.Instance("stagingVm", {
 *     machineType: "e2-medium",
 *     zone: "us-central1-c",
 *     bootDisk: {
 *         initializeParams: {
 *             image: debianImage.then(debianImage => debianImage.selfLink),
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 * });
 * const stagingGroup = new gcp.compute.InstanceGroup("stagingGroup", {
 *     zone: "us-central1-c",
 *     instances: [stagingVm.id],
 *     namedPorts: [
 *         {
 *             name: "http",
 *             port: "8080",
 *         },
 *         {
 *             name: "https",
 *             port: "8443",
 *         },
 *     ],
 * });
 * const stagingHealth = new gcp.compute.HttpsHealthCheck("stagingHealth", {requestPath: "/health_check"});
 * const stagingService = new gcp.compute.BackendService("stagingService", {
 *     portName: "https",
 *     protocol: "HTTPS",
 *     backends: [{
 *         group: stagingGroup.id,
 *     }],
 *     healthChecks: [stagingHealth.id],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * debian_image = gcp.compute.get_image(family="debian-9",
 *     project="debian-cloud")
 * staging_vm = gcp.compute.Instance("stagingVm",
 *     machine_type="e2-medium",
 *     zone="us-central1-c",
 *     boot_disk=gcp.compute.InstanceBootDiskArgs(
 *         initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
 *             image=debian_image.self_link,
 *         ),
 *     ),
 *     network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
 *         network="default",
 *     )])
 * staging_group = gcp.compute.InstanceGroup("stagingGroup",
 *     zone="us-central1-c",
 *     instances=[staging_vm.id],
 *     named_ports=[
 *         gcp.compute.InstanceGroupNamedPortArgs(
 *             name="http",
 *             port=8080,
 *         ),
 *         gcp.compute.InstanceGroupNamedPortArgs(
 *             name="https",
 *             port=8443,
 *         ),
 *     ])
 * staging_health = gcp.compute.HttpsHealthCheck("stagingHealth", request_path="/health_check")
 * staging_service = gcp.compute.BackendService("stagingService",
 *     port_name="https",
 *     protocol="HTTPS",
 *     backends=[gcp.compute.BackendServiceBackendArgs(
 *         group=staging_group.id,
 *     )],
 *     health_checks=[staging_health.id])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var debianImage = Output.Create(Gcp.Compute.GetImage.InvokeAsync(new Gcp.Compute.GetImageArgs
 *         {
 *             Family = "debian-9",
 *             Project = "debian-cloud",
 *         }));
 *         var stagingVm = new Gcp.Compute.Instance("stagingVm", new Gcp.Compute.InstanceArgs
 *         {
 *             MachineType = "e2-medium",
 *             Zone = "us-central1-c",
 *             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
 *             {
 *                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
 *                 {
 *                     Image = debianImage.Apply(debianImage => debianImage.SelfLink),
 *                 },
 *             },
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
 *                 {
 *                     Network = "default",
 *                 },
 *             },
 *         });
 *         var stagingGroup = new Gcp.Compute.InstanceGroup("stagingGroup", new Gcp.Compute.InstanceGroupArgs
 *         {
 *             Zone = "us-central1-c",
 *             Instances = 
 *             {
 *                 stagingVm.Id,
 *             },
 *             NamedPorts = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
 *                 {
 *                     Name = "http",
 *                     Port = 8080,
 *                 },
 *                 new Gcp.Compute.Inputs.InstanceGroupNamedPortArgs
 *                 {
 *                     Name = "https",
 *                     Port = 8443,
 *                 },
 *             },
 *         });
 *         var stagingHealth = new Gcp.Compute.HttpsHealthCheck("stagingHealth", new Gcp.Compute.HttpsHealthCheckArgs
 *         {
 *             RequestPath = "/health_check",
 *         });
 *         var stagingService = new Gcp.Compute.BackendService("stagingService", new Gcp.Compute.BackendServiceArgs
 *         {
 *             PortName = "https",
 *             Protocol = "HTTPS",
 *             Backends = 
 *             {
 *                 new Gcp.Compute.Inputs.BackendServiceBackendArgs
 *                 {
 *                     Group = stagingGroup.Id,
 *                 },
 *             },
 *             HealthChecks = 
 *             {
 *                 stagingHealth.Id,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "debian-9"
 * 		opt1 := "debian-cloud"
 * 		debianImage, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
 * 			Family:  &opt0,
 * 			Project: &opt1,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		stagingVm, err := compute.NewInstance(ctx, "stagingVm", &compute.InstanceArgs{
 * 			MachineType: pulumi.String("e2-medium"),
 * 			Zone:        pulumi.String("us-central1-c"),
 * 			BootDisk: &compute.InstanceBootDiskArgs{
 * 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
 * 					Image: pulumi.String(debianImage.SelfLink),
 * 				},
 * 			},
 * 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
 * 				&compute.InstanceNetworkInterfaceArgs{
 * 					Network: pulumi.String("default"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		stagingGroup, err := compute.NewInstanceGroup(ctx, "stagingGroup", &compute.InstanceGroupArgs{
 * 			Zone: pulumi.String("us-central1-c"),
 * 			Instances: pulumi.StringArray{
 * 				stagingVm.ID(),
 * 			},
 * 			NamedPorts: compute.InstanceGroupNamedPortArray{
 * 				&compute.InstanceGroupNamedPortArgs{
 * 					Name: pulumi.String("http"),
 * 					Port: pulumi.Int(8080),
 * 				},
 * 				&compute.InstanceGroupNamedPortArgs{
 * 					Name: pulumi.String("https"),
 * 					Port: pulumi.Int(8443),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		stagingHealth, err := compute.NewHttpsHealthCheck(ctx, "stagingHealth", &compute.HttpsHealthCheckArgs{
 * 			RequestPath: pulumi.String("/health_check"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewBackendService(ctx, "stagingService", &compute.BackendServiceArgs{
 * 			PortName: pulumi.String("https"),
 * 			Protocol: pulumi.String("HTTPS"),
 * 			Backends: compute.BackendServiceBackendArray{
 * 				&compute.BackendServiceBackendArgs{
 * 					Group: stagingGroup.ID(),
 * 				},
 * 			},
 * 			HealthChecks: pulumi.String{
 * 				stagingHealth.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Instance group can be imported using the `zone` and `name` with an optional `project`, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:compute/instanceGroup:InstanceGroup webservers us-central1-a/terraform-webservers
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/instanceGroup:InstanceGroup webservers big-project/us-central1-a/terraform-webservers
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/instanceGroup:InstanceGroup webservers projects/big-project/zones/us-central1-a/instanceGroups/terraform-webservers
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/instanceGroup:InstanceGroup")
public class InstanceGroup extends io.pulumi.resources.CustomResource {
    /**
     * An optional textual description of the instance
     * group.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional textual description of the instance
     * group.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * List of instances in the group. They should be given
     * as either self_link or id. When adding instances they must all be in the same
     * network and zone as the instance group.
     * 
     */
    @Export(name="instances", type=List.class, parameters={String.class})
    private Output<List<String>> instances;

    /**
     * @return List of instances in the group. They should be given
     * as either self_link or id. When adding instances they must all be in the same
     * network and zone as the instance group.
     * 
     */
    public Output<List<String>> getInstances() {
        return this.instances;
    }
    /**
     * The name which the port will be mapped to.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name which the port will be mapped to.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The named port configuration. See the section below
     * for details on configuration. Structure is documented below.
     * 
     */
    @Export(name="namedPorts", type=List.class, parameters={InstanceGroupNamedPort.class})
    private Output</* @Nullable */ List<InstanceGroupNamedPort>> namedPorts;

    /**
     * @return The named port configuration. See the section below
     * for details on configuration. Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<InstanceGroupNamedPort>> getNamedPorts() {
        return this.namedPorts;
    }
    /**
     * The URL of the network the instance group is in. If
     * this is different from the network where the instances are in, the creation
     * fails. Defaults to the network where the instances are in (if neither
     * `network` nor `instances` is specified, this field will be blank).
     * 
     */
    @Export(name="network", type=String.class, parameters={})
    private Output<String> network;

    /**
     * @return The URL of the network the instance group is in. If
     * this is different from the network where the instances are in, the creation
     * fails. Defaults to the network where the instances are in (if neither
     * `network` nor `instances` is specified, this field will be blank).
     * 
     */
    public Output<String> getNetwork() {
        return this.network;
    }
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * The number of instances in the group.
     * 
     */
    @Export(name="size", type=Integer.class, parameters={})
    private Output<Integer> size;

    /**
     * @return The number of instances in the group.
     * 
     */
    public Output<Integer> getSize() {
        return this.size;
    }
    /**
     * The zone that this instance group should be created in.
     * 
     */
    @Export(name="zone", type=String.class, parameters={})
    private Output<String> zone;

    /**
     * @return The zone that this instance group should be created in.
     * 
     */
    public Output<String> getZone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InstanceGroup(String name) {
        this(name, InstanceGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InstanceGroup(String name, @Nullable InstanceGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InstanceGroup(String name, @Nullable InstanceGroupArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/instanceGroup:InstanceGroup", name, args == null ? InstanceGroupArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private InstanceGroup(String name, Output<String> id, @Nullable InstanceGroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/instanceGroup:InstanceGroup", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InstanceGroup get(String name, Output<String> id, @Nullable InstanceGroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new InstanceGroup(name, id, state, options);
    }
}
