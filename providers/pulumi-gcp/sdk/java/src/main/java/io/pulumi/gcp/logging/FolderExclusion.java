// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.logging.FolderExclusionArgs;
import io.pulumi.gcp.logging.inputs.FolderExclusionState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a folder-level logging exclusion. For more information see:
 * 
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/folders.exclusions)
 * * How-to Guides
 *     * [Excluding Logs](https://cloud.google.com/logging/docs/exclusions)
 * 
 * > You can specify exclusions for log sinks created by the provider by using the exclusions field of `gcp.logging.FolderSink`
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const my_folder = new gcp.organizations.Folder("my-folder", {
 *     displayName: "My folder",
 *     parent: "organizations/123456",
 * });
 * const my_exclusion = new gcp.logging.FolderExclusion("my-exclusion", {
 *     folder: my_folder.name,
 *     description: "Exclude GCE instance debug logs",
 *     filter: "resource.type = gce_instance AND severity <= DEBUG",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * my_folder = gcp.organizations.Folder("my-folder",
 *     display_name="My folder",
 *     parent="organizations/123456")
 * my_exclusion = gcp.logging.FolderExclusion("my-exclusion",
 *     folder=my_folder.name,
 *     description="Exclude GCE instance debug logs",
 *     filter="resource.type = gce_instance AND severity <= DEBUG")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var my_folder = new Gcp.Organizations.Folder("my-folder", new Gcp.Organizations.FolderArgs
 *         {
 *             DisplayName = "My folder",
 *             Parent = "organizations/123456",
 *         });
 *         var my_exclusion = new Gcp.Logging.FolderExclusion("my-exclusion", new Gcp.Logging.FolderExclusionArgs
 *         {
 *             Folder = my_folder.Name,
 *             Description = "Exclude GCE instance debug logs",
 *             Filter = "resource.type = gce_instance AND severity <= DEBUG",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/logging"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := organizations.NewFolder(ctx, "my-folder", &organizations.FolderArgs{
 * 			DisplayName: pulumi.String("My folder"),
 * 			Parent:      pulumi.String("organizations/123456"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = logging.NewFolderExclusion(ctx, "my-exclusion", &logging.FolderExclusionArgs{
 * 			Folder:      my_folder.Name,
 * 			Description: pulumi.String("Exclude GCE instance debug logs"),
 * 			Filter:      pulumi.String("resource.type = gce_instance AND severity <= DEBUG"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Folder-level logging exclusions can be imported using their URI, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:logging/folderExclusion:FolderExclusion my_exclusion folders/my-folder/exclusions/my-exclusion
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:logging/folderExclusion:FolderExclusion")
public class FolderExclusion extends io.pulumi.resources.CustomResource {
    /**
     * A human-readable description.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A human-readable description.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Whether this exclusion rule should be disabled or not. This defaults to
     * false.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Whether this exclusion rule should be disabled or not. This defaults to
     * false.
     * 
     */
    public Output</* @Nullable */ Boolean> getDisabled() {
        return this.disabled;
    }
    /**
     * The filter to apply when excluding logs. Only log entries that match the filter are excluded.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced-filters) for information on how to
     * write a filter.
     * 
     */
    @Export(name="filter", type=String.class, parameters={})
    private Output<String> filter;

    /**
     * @return The filter to apply when excluding logs. Only log entries that match the filter are excluded.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced-filters) for information on how to
     * write a filter.
     * 
     */
    public Output<String> getFilter() {
        return this.filter;
    }
    /**
     * The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
     * accepted.
     * 
     */
    @Export(name="folder", type=String.class, parameters={})
    private Output<String> folder;

    /**
     * @return The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
     * accepted.
     * 
     */
    public Output<String> getFolder() {
        return this.folder;
    }
    /**
     * The name of the logging exclusion.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the logging exclusion.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FolderExclusion(String name) {
        this(name, FolderExclusionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FolderExclusion(String name, FolderExclusionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FolderExclusion(String name, FolderExclusionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/folderExclusion:FolderExclusion", name, args == null ? FolderExclusionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private FolderExclusion(String name, Output<String> id, @Nullable FolderExclusionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/folderExclusion:FolderExclusion", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FolderExclusion get(String name, Output<String> id, @Nullable FolderExclusionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new FolderExclusion(name, id, state, options);
    }
}
