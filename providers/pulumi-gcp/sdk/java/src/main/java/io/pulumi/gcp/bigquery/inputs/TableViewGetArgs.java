// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableViewGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableViewGetArgs Empty = new TableViewGetArgs();

    /**
     * A query whose result is persisted.
     * 
     */
    @Import(name="query", required=true)
      private final Output<String> query;

    public Output<String> getQuery() {
        return this.query;
    }

    /**
     * Specifies whether to use BigQuery's legacy SQL for this view.
     * The default value is true. If set to false, the view will use BigQuery's standard SQL.
     * 
     */
    @Import(name="useLegacySql")
      private final @Nullable Output<Boolean> useLegacySql;

    public Output<Boolean> getUseLegacySql() {
        return this.useLegacySql == null ? Output.empty() : this.useLegacySql;
    }

    public TableViewGetArgs(
        Output<String> query,
        @Nullable Output<Boolean> useLegacySql) {
        this.query = Objects.requireNonNull(query, "expected parameter 'query' to be non-null");
        this.useLegacySql = useLegacySql;
    }

    private TableViewGetArgs() {
        this.query = Output.empty();
        this.useLegacySql = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableViewGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> query;
        private @Nullable Output<Boolean> useLegacySql;

        public Builder() {
    	      // Empty
        }

        public Builder(TableViewGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.query = defaults.query;
    	      this.useLegacySql = defaults.useLegacySql;
        }

        public Builder query(Output<String> query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }

        public Builder query(String query) {
            this.query = Output.of(Objects.requireNonNull(query));
            return this;
        }

        public Builder useLegacySql(@Nullable Output<Boolean> useLegacySql) {
            this.useLegacySql = useLegacySql;
            return this;
        }

        public Builder useLegacySql(@Nullable Boolean useLegacySql) {
            this.useLegacySql = Output.ofNullable(useLegacySql);
            return this;
        }
        public TableViewGetArgs build() {
            return new TableViewGetArgs(query, useLegacySql);
        }
    }
}
