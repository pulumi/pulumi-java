// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.healthcare.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.healthcare.inputs.DicomStoreNotificationConfigGetArgs;
import io.pulumi.gcp.healthcare.inputs.DicomStoreStreamConfigGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DicomStoreState extends io.pulumi.resources.ResourceArgs {

    public static final DicomStoreState Empty = new DicomStoreState();

    /**
     * Identifies the dataset addressed by this request. Must be in the format
     * 'projects/{project}/locations/{location}/datasets/{dataset}'
     * 
     */
    @Import(name="dataset")
      private final @Nullable Output<String> dataset;

    public Output<String> getDataset() {
        return this.dataset == null ? Output.empty() : this.dataset;
    }

    /**
     * User-supplied key-value pairs used to organize DICOM stores.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
     * conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
     * bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be associated with a given store.
     * An object containing a list of "key": value pairs.
     * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    /**
     * The resource name for the DicomStore.
     * ** Changing this property may recreate the Dicom store (removing all data) **
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Import(name="notificationConfig")
      private final @Nullable Output<DicomStoreNotificationConfigGetArgs> notificationConfig;

    public Output<DicomStoreNotificationConfigGetArgs> getNotificationConfig() {
        return this.notificationConfig == null ? Output.empty() : this.notificationConfig;
    }

    /**
     * The fully qualified name of this dataset
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> getSelfLink() {
        return this.selfLink == null ? Output.empty() : this.selfLink;
    }

    /**
     * To enable streaming to BigQuery, configure the streamConfigs object in your DICOM store.
     * streamConfigs is an array, so you can specify multiple BigQuery destinations. You can stream metadata from a single DICOM store to up to five BigQuery tables in a BigQuery dataset.
     * Structure is documented below.
     * 
     */
    @Import(name="streamConfigs")
      private final @Nullable Output<List<DicomStoreStreamConfigGetArgs>> streamConfigs;

    public Output<List<DicomStoreStreamConfigGetArgs>> getStreamConfigs() {
        return this.streamConfigs == null ? Output.empty() : this.streamConfigs;
    }

    public DicomStoreState(
        @Nullable Output<String> dataset,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> name,
        @Nullable Output<DicomStoreNotificationConfigGetArgs> notificationConfig,
        @Nullable Output<String> selfLink,
        @Nullable Output<List<DicomStoreStreamConfigGetArgs>> streamConfigs) {
        this.dataset = dataset;
        this.labels = labels;
        this.name = name;
        this.notificationConfig = notificationConfig;
        this.selfLink = selfLink;
        this.streamConfigs = streamConfigs;
    }

    private DicomStoreState() {
        this.dataset = Output.empty();
        this.labels = Output.empty();
        this.name = Output.empty();
        this.notificationConfig = Output.empty();
        this.selfLink = Output.empty();
        this.streamConfigs = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DicomStoreState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dataset;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> name;
        private @Nullable Output<DicomStoreNotificationConfigGetArgs> notificationConfig;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<List<DicomStoreStreamConfigGetArgs>> streamConfigs;

        public Builder() {
    	      // Empty
        }

        public Builder(DicomStoreState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.notificationConfig = defaults.notificationConfig;
    	      this.selfLink = defaults.selfLink;
    	      this.streamConfigs = defaults.streamConfigs;
        }

        public Builder dataset(@Nullable Output<String> dataset) {
            this.dataset = dataset;
            return this;
        }

        public Builder dataset(@Nullable String dataset) {
            this.dataset = Output.ofNullable(dataset);
            return this;
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder notificationConfig(@Nullable Output<DicomStoreNotificationConfigGetArgs> notificationConfig) {
            this.notificationConfig = notificationConfig;
            return this;
        }

        public Builder notificationConfig(@Nullable DicomStoreNotificationConfigGetArgs notificationConfig) {
            this.notificationConfig = Output.ofNullable(notificationConfig);
            return this;
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Output.ofNullable(selfLink);
            return this;
        }

        public Builder streamConfigs(@Nullable Output<List<DicomStoreStreamConfigGetArgs>> streamConfigs) {
            this.streamConfigs = streamConfigs;
            return this;
        }

        public Builder streamConfigs(@Nullable List<DicomStoreStreamConfigGetArgs> streamConfigs) {
            this.streamConfigs = Output.ofNullable(streamConfigs);
            return this;
        }
        public DicomStoreState build() {
            return new DicomStoreState(dataset, labels, name, notificationConfig, selfLink, streamConfigs);
        }
    }
}
