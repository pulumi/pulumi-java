// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dns;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.dns.ManagedZoneArgs;
import io.pulumi.gcp.dns.inputs.ManagedZoneState;
import io.pulumi.gcp.dns.outputs.ManagedZoneDnssecConfig;
import io.pulumi.gcp.dns.outputs.ManagedZoneForwardingConfig;
import io.pulumi.gcp.dns.outputs.ManagedZonePeeringConfig;
import io.pulumi.gcp.dns.outputs.ManagedZonePrivateVisibilityConfig;
import io.pulumi.gcp.dns.outputs.ManagedZoneServiceDirectoryConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A zone is a subtree of the DNS namespace under one administrative
 * responsibility. A ManagedZone is a resource that represents a DNS zone
 * hosted by the Cloud DNS service.
 * 
 * 
 * To get more information about ManagedZone, see:
 * 
 * * [API documentation](https://cloud.google.com/dns/api/v1/managedZones)
 * * How-to Guides
 *     * [Managing Zones](https://cloud.google.com/dns/zones/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Dns Managed Zone Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const example_zone = new gcp.dns.ManagedZone("example-zone", {
 *     description: "Example DNS zone",
 *     dnsName: "my-domain.com.",
 *     labels: {
 *         foo: "bar",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * example_zone = gcp.dns.ManagedZone("example-zone",
 *     description="Example DNS zone",
 *     dns_name="my-domain.com.",
 *     labels={
 *         "foo": "bar",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example_zone = new Gcp.Dns.ManagedZone("example-zone", new Gcp.Dns.ManagedZoneArgs
 *         {
 *             Description = "Example DNS zone",
 *             DnsName = "my-domain.com.",
 *             Labels = 
 *             {
 *                 { "foo", "bar" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := dns.NewManagedZone(ctx, "example-zone", &dns.ManagedZoneArgs{
 * 			Description: pulumi.String("Example DNS zone"),
 * 			DnsName:     pulumi.String("my-domain.com."),
 * 			Labels: pulumi.StringMap{
 * 				"foo": pulumi.String("bar"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Dns Managed Zone Private
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network_1 = new gcp.compute.Network("network-1", {autoCreateSubnetworks: false});
 * const network_2 = new gcp.compute.Network("network-2", {autoCreateSubnetworks: false});
 * const private_zone = new gcp.dns.ManagedZone("private-zone", {
 *     dnsName: "private.example.com.",
 *     description: "Example private DNS zone",
 *     labels: {
 *         foo: "bar",
 *     },
 *     visibility: "private",
 *     privateVisibilityConfig: {
 *         networks: [
 *             {
 *                 networkUrl: network_1.id,
 *             },
 *             {
 *                 networkUrl: network_2.id,
 *             },
 *         ],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
 * network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
 * private_zone = gcp.dns.ManagedZone("private-zone",
 *     dns_name="private.example.com.",
 *     description="Example private DNS zone",
 *     labels={
 *         "foo": "bar",
 *     },
 *     visibility="private",
 *     private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
 *         networks=[
 *             gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
 *                 network_url=network_1.id,
 *             ),
 *             gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
 *                 network_url=network_2.id,
 *             ),
 *         ],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network_1 = new Gcp.Compute.Network("network-1", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var network_2 = new Gcp.Compute.Network("network-2", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var private_zone = new Gcp.Dns.ManagedZone("private-zone", new Gcp.Dns.ManagedZoneArgs
 *         {
 *             DnsName = "private.example.com.",
 *             Description = "Example private DNS zone",
 *             Labels = 
 *             {
 *                 { "foo", "bar" },
 *             },
 *             Visibility = "private",
 *             PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
 *             {
 *                 Networks = 
 *                 {
 *                     new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
 *                     {
 *                         NetworkUrl = network_1.Id,
 *                     },
 *                     new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
 *                     {
 *                         NetworkUrl = network_2.Id,
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewNetwork(ctx, "network-1", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetwork(ctx, "network-2", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dns.NewManagedZone(ctx, "private-zone", &dns.ManagedZoneArgs{
 * 			DnsName:     pulumi.String("private.example.com."),
 * 			Description: pulumi.String("Example private DNS zone"),
 * 			Labels: pulumi.StringMap{
 * 				"foo": pulumi.String("bar"),
 * 			},
 * 			Visibility: pulumi.String("private"),
 * 			PrivateVisibilityConfig: &dns.ManagedZonePrivateVisibilityConfigArgs{
 * 				Networks: dns.ManagedZonePrivateVisibilityConfigNetworkArray{
 * 					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
 * 						NetworkUrl: network_1.ID(),
 * 					},
 * 					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
 * 						NetworkUrl: network_2.ID(),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Dns Managed Zone Private Forwarding
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network_1 = new gcp.compute.Network("network-1", {autoCreateSubnetworks: false});
 * const network_2 = new gcp.compute.Network("network-2", {autoCreateSubnetworks: false});
 * const private_zone = new gcp.dns.ManagedZone("private-zone", {
 *     dnsName: "private.example.com.",
 *     description: "Example private DNS zone",
 *     labels: {
 *         foo: "bar",
 *     },
 *     visibility: "private",
 *     privateVisibilityConfig: {
 *         networks: [
 *             {
 *                 networkUrl: network_1.id,
 *             },
 *             {
 *                 networkUrl: network_2.id,
 *             },
 *         ],
 *     },
 *     forwardingConfig: {
 *         targetNameServers: [
 *             {
 *                 ipv4Address: "172.16.1.10",
 *             },
 *             {
 *                 ipv4Address: "172.16.1.20",
 *             },
 *         ],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
 * network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
 * private_zone = gcp.dns.ManagedZone("private-zone",
 *     dns_name="private.example.com.",
 *     description="Example private DNS zone",
 *     labels={
 *         "foo": "bar",
 *     },
 *     visibility="private",
 *     private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
 *         networks=[
 *             gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
 *                 network_url=network_1.id,
 *             ),
 *             gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
 *                 network_url=network_2.id,
 *             ),
 *         ],
 *     ),
 *     forwarding_config=gcp.dns.ManagedZoneForwardingConfigArgs(
 *         target_name_servers=[
 *             gcp.dns.ManagedZoneForwardingConfigTargetNameServerArgs(
 *                 ipv4_address="172.16.1.10",
 *             ),
 *             gcp.dns.ManagedZoneForwardingConfigTargetNameServerArgs(
 *                 ipv4_address="172.16.1.20",
 *             ),
 *         ],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network_1 = new Gcp.Compute.Network("network-1", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var network_2 = new Gcp.Compute.Network("network-2", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var private_zone = new Gcp.Dns.ManagedZone("private-zone", new Gcp.Dns.ManagedZoneArgs
 *         {
 *             DnsName = "private.example.com.",
 *             Description = "Example private DNS zone",
 *             Labels = 
 *             {
 *                 { "foo", "bar" },
 *             },
 *             Visibility = "private",
 *             PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
 *             {
 *                 Networks = 
 *                 {
 *                     new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
 *                     {
 *                         NetworkUrl = network_1.Id,
 *                     },
 *                     new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
 *                     {
 *                         NetworkUrl = network_2.Id,
 *                     },
 *                 },
 *             },
 *             ForwardingConfig = new Gcp.Dns.Inputs.ManagedZoneForwardingConfigArgs
 *             {
 *                 TargetNameServers = 
 *                 {
 *                     new Gcp.Dns.Inputs.ManagedZoneForwardingConfigTargetNameServerArgs
 *                     {
 *                         Ipv4Address = "172.16.1.10",
 *                     },
 *                     new Gcp.Dns.Inputs.ManagedZoneForwardingConfigTargetNameServerArgs
 *                     {
 *                         Ipv4Address = "172.16.1.20",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewNetwork(ctx, "network-1", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetwork(ctx, "network-2", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dns.NewManagedZone(ctx, "private-zone", &dns.ManagedZoneArgs{
 * 			DnsName:     pulumi.String("private.example.com."),
 * 			Description: pulumi.String("Example private DNS zone"),
 * 			Labels: pulumi.StringMap{
 * 				"foo": pulumi.String("bar"),
 * 			},
 * 			Visibility: pulumi.String("private"),
 * 			PrivateVisibilityConfig: &dns.ManagedZonePrivateVisibilityConfigArgs{
 * 				Networks: dns.ManagedZonePrivateVisibilityConfigNetworkArray{
 * 					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
 * 						NetworkUrl: network_1.ID(),
 * 					},
 * 					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
 * 						NetworkUrl: network_2.ID(),
 * 					},
 * 				},
 * 			},
 * 			ForwardingConfig: &dns.ManagedZoneForwardingConfigArgs{
 * 				TargetNameServers: dns.ManagedZoneForwardingConfigTargetNameServerArray{
 * 					&dns.ManagedZoneForwardingConfigTargetNameServerArgs{
 * 						Ipv4Address: pulumi.String("172.16.1.10"),
 * 					},
 * 					&dns.ManagedZoneForwardingConfigTargetNameServerArgs{
 * 						Ipv4Address: pulumi.String("172.16.1.20"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Dns Managed Zone Private Peering
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network_source = new gcp.compute.Network("network-source", {autoCreateSubnetworks: false});
 * const network_target = new gcp.compute.Network("network-target", {autoCreateSubnetworks: false});
 * const peering_zone = new gcp.dns.ManagedZone("peering-zone", {
 *     dnsName: "peering.example.com.",
 *     description: "Example private DNS peering zone",
 *     visibility: "private",
 *     privateVisibilityConfig: {
 *         networks: [{
 *             networkUrl: network_source.id,
 *         }],
 *     },
 *     peeringConfig: {
 *         targetNetwork: {
 *             networkUrl: network_target.id,
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network_source = gcp.compute.Network("network-source", auto_create_subnetworks=False)
 * network_target = gcp.compute.Network("network-target", auto_create_subnetworks=False)
 * peering_zone = gcp.dns.ManagedZone("peering-zone",
 *     dns_name="peering.example.com.",
 *     description="Example private DNS peering zone",
 *     visibility="private",
 *     private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
 *         networks=[gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
 *             network_url=network_source.id,
 *         )],
 *     ),
 *     peering_config=gcp.dns.ManagedZonePeeringConfigArgs(
 *         target_network=gcp.dns.ManagedZonePeeringConfigTargetNetworkArgs(
 *             network_url=network_target.id,
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network_source = new Gcp.Compute.Network("network-source", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var network_target = new Gcp.Compute.Network("network-target", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var peering_zone = new Gcp.Dns.ManagedZone("peering-zone", new Gcp.Dns.ManagedZoneArgs
 *         {
 *             DnsName = "peering.example.com.",
 *             Description = "Example private DNS peering zone",
 *             Visibility = "private",
 *             PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
 *             {
 *                 Networks = 
 *                 {
 *                     new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
 *                     {
 *                         NetworkUrl = network_source.Id,
 *                     },
 *                 },
 *             },
 *             PeeringConfig = new Gcp.Dns.Inputs.ManagedZonePeeringConfigArgs
 *             {
 *                 TargetNetwork = new Gcp.Dns.Inputs.ManagedZonePeeringConfigTargetNetworkArgs
 *                 {
 *                     NetworkUrl = network_target.Id,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewNetwork(ctx, "network-source", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetwork(ctx, "network-target", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dns.NewManagedZone(ctx, "peering-zone", &dns.ManagedZoneArgs{
 * 			DnsName:     pulumi.String("peering.example.com."),
 * 			Description: pulumi.String("Example private DNS peering zone"),
 * 			Visibility:  pulumi.String("private"),
 * 			PrivateVisibilityConfig: &dns.ManagedZonePrivateVisibilityConfigArgs{
 * 				Networks: dns.ManagedZonePrivateVisibilityConfigNetworkArray{
 * 					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
 * 						NetworkUrl: network_source.ID(),
 * 					},
 * 				},
 * 			},
 * 			PeeringConfig: &dns.ManagedZonePeeringConfigArgs{
 * 				TargetNetwork: &dns.ManagedZonePeeringConfigTargetNetworkArgs{
 * 					NetworkUrl: network_target.ID(),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Dns Managed Zone Service Directory
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const example = new gcp.servicedirectory.Namespace("example", {
 *     namespaceId: "example",
 *     location: "us-central1",
 * }, {
 *     provider: google_beta,
 * });
 * const sd_zone = new gcp.dns.ManagedZone("sd-zone", {
 *     dnsName: "services.example.com.",
 *     description: "Example private DNS Service Directory zone",
 *     visibility: "private",
 *     serviceDirectoryConfig: {
 *         namespace: {
 *             namespaceUrl: example.id,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const network = new gcp.compute.Network("network", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * example = gcp.servicedirectory.Namespace("example",
 *     namespace_id="example",
 *     location="us-central1",
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * sd_zone = gcp.dns.ManagedZone("sd-zone",
 *     dns_name="services.example.com.",
 *     description="Example private DNS Service Directory zone",
 *     visibility="private",
 *     service_directory_config=gcp.dns.ManagedZoneServiceDirectoryConfigArgs(
 *         namespace=gcp.dns.ManagedZoneServiceDirectoryConfigNamespaceArgs(
 *             namespace_url=example.id,
 *         ),
 *     ),
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * network = gcp.compute.Network("network", auto_create_subnetworks=False,
 * opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Gcp.ServiceDirectory.Namespace("example", new Gcp.ServiceDirectory.NamespaceArgs
 *         {
 *             NamespaceId = "example",
 *             Location = "us-central1",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var sd_zone = new Gcp.Dns.ManagedZone("sd-zone", new Gcp.Dns.ManagedZoneArgs
 *         {
 *             DnsName = "services.example.com.",
 *             Description = "Example private DNS Service Directory zone",
 *             Visibility = "private",
 *             ServiceDirectoryConfig = new Gcp.Dns.Inputs.ManagedZoneServiceDirectoryConfigArgs
 *             {
 *                 Namespace = new Gcp.Dns.Inputs.ManagedZoneServiceDirectoryConfigNamespaceArgs
 *                 {
 *                     NamespaceUrl = example.Id,
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var network = new Gcp.Compute.Network("network", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicedirectory"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		example, err := servicedirectory.NewNamespace(ctx, "example", &servicedirectory.NamespaceArgs{
 * 			NamespaceId: pulumi.String("example"),
 * 			Location:    pulumi.String("us-central1"),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dns.NewManagedZone(ctx, "sd-zone", &dns.ManagedZoneArgs{
 * 			DnsName:     pulumi.String("services.example.com."),
 * 			Description: pulumi.String("Example private DNS Service Directory zone"),
 * 			Visibility:  pulumi.String("private"),
 * 			ServiceDirectoryConfig: &dns.ManagedZoneServiceDirectoryConfigArgs{
 * 				Namespace: &dns.ManagedZoneServiceDirectoryConfigNamespaceArgs{
 * 					NamespaceUrl: example.ID(),
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ManagedZone can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:dns/managedZone:ManagedZone default projects/{{project}}/managedZones/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:dns/managedZone:ManagedZone default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:dns/managedZone:ManagedZone default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:dns/managedZone:ManagedZone")
public class ManagedZone extends io.pulumi.resources.CustomResource {
    /**
     * A textual description field. Defaults to 'Managed by Pulumi'.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return A textual description field. Defaults to 'Managed by Pulumi'.
     * 
     */
    public Output<String> getDescription() {
        return this.description;
    }
    /**
     * The DNS name of this managed zone, for instance "example.com.".
     * 
     */
    @Export(name="dnsName", type=String.class, parameters={})
    private Output<String> dnsName;

    /**
     * @return The DNS name of this managed zone, for instance "example.com.".
     * 
     */
    public Output<String> getDnsName() {
        return this.dnsName;
    }
    /**
     * DNSSEC configuration
     * Structure is documented below.
     * 
     */
    @Export(name="dnssecConfig", type=ManagedZoneDnssecConfig.class, parameters={})
    private Output</* @Nullable */ ManagedZoneDnssecConfig> dnssecConfig;

    /**
     * @return DNSSEC configuration
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ManagedZoneDnssecConfig> getDnssecConfig() {
        return this.dnssecConfig;
    }
    /**
     * Set this true to delete all records in the zone.
     * 
     */
    @Export(name="forceDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Set this true to delete all records in the zone.
     * 
     */
    public Output</* @Nullable */ Boolean> getForceDestroy() {
        return this.forceDestroy;
    }
    /**
     * The presence for this field indicates that outbound forwarding is enabled
     * for this zone. The value of this field contains the set of destinations
     * to forward to.
     * Structure is documented below.
     * 
     */
    @Export(name="forwardingConfig", type=ManagedZoneForwardingConfig.class, parameters={})
    private Output</* @Nullable */ ManagedZoneForwardingConfig> forwardingConfig;

    /**
     * @return The presence for this field indicates that outbound forwarding is enabled
     * for this zone. The value of this field contains the set of destinations
     * to forward to.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ManagedZoneForwardingConfig> getForwardingConfig() {
        return this.forwardingConfig;
    }
    /**
     * A set of key/value label pairs to assign to this ManagedZone.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return A set of key/value label pairs to assign to this ManagedZone.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * User assigned name for this resource.
     * Must be unique within the project.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return User assigned name for this resource.
     * Must be unique within the project.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Delegate your managed_zone to these virtual name servers; defined by the server
     * 
     */
    @Export(name="nameServers", type=List.class, parameters={String.class})
    private Output<List<String>> nameServers;

    /**
     * @return Delegate your managed_zone to these virtual name servers; defined by the server
     * 
     */
    public Output<List<String>> getNameServers() {
        return this.nameServers;
    }
    /**
     * The presence of this field indicates that DNS Peering is enabled for this
     * zone. The value of this field contains the network to peer with.
     * Structure is documented below.
     * 
     */
    @Export(name="peeringConfig", type=ManagedZonePeeringConfig.class, parameters={})
    private Output</* @Nullable */ ManagedZonePeeringConfig> peeringConfig;

    /**
     * @return The presence of this field indicates that DNS Peering is enabled for this
     * zone. The value of this field contains the network to peer with.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ManagedZonePeeringConfig> getPeeringConfig() {
        return this.peeringConfig;
    }
    /**
     * For privately visible zones, the set of Virtual Private Cloud
     * resources that the zone is visible from.
     * Structure is documented below.
     * 
     */
    @Export(name="privateVisibilityConfig", type=ManagedZonePrivateVisibilityConfig.class, parameters={})
    private Output</* @Nullable */ ManagedZonePrivateVisibilityConfig> privateVisibilityConfig;

    /**
     * @return For privately visible zones, the set of Virtual Private Cloud
     * resources that the zone is visible from.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ManagedZonePrivateVisibilityConfig> getPrivateVisibilityConfig() {
        return this.privateVisibilityConfig;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
     * lookup queries using automatically configured records for VPC resources. This only applies
     * to networks listed under `private_visibility_config`.
     * 
     */
    @Export(name="reverseLookup", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> reverseLookup;

    /**
     * @return Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
     * lookup queries using automatically configured records for VPC resources. This only applies
     * to networks listed under `private_visibility_config`.
     * 
     */
    public Output</* @Nullable */ Boolean> getReverseLookup() {
        return this.reverseLookup;
    }
    /**
     * The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.
     * Structure is documented below.
     * 
     */
    @Export(name="serviceDirectoryConfig", type=ManagedZoneServiceDirectoryConfig.class, parameters={})
    private Output</* @Nullable */ ManagedZoneServiceDirectoryConfig> serviceDirectoryConfig;

    /**
     * @return The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ ManagedZoneServiceDirectoryConfig> getServiceDirectoryConfig() {
        return this.serviceDirectoryConfig;
    }
    /**
     * The zone's visibility: public zones are exposed to the Internet,
     * while private zones are visible only to Virtual Private Cloud resources.
     * Default value is `public`.
     * Possible values are `private` and `public`.
     * 
     */
    @Export(name="visibility", type=String.class, parameters={})
    private Output</* @Nullable */ String> visibility;

    /**
     * @return The zone's visibility: public zones are exposed to the Internet,
     * while private zones are visible only to Virtual Private Cloud resources.
     * Default value is `public`.
     * Possible values are `private` and `public`.
     * 
     */
    public Output</* @Nullable */ String> getVisibility() {
        return this.visibility;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedZone(String name) {
        this(name, ManagedZoneArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedZone(String name, ManagedZoneArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedZone(String name, ManagedZoneArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dns/managedZone:ManagedZone", name, args == null ? ManagedZoneArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ManagedZone(String name, Output<String> id, @Nullable ManagedZoneState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dns/managedZone:ManagedZone", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedZone get(String name, Output<String> id, @Nullable ManagedZoneState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ManagedZone(name, id, state, options);
    }
}
