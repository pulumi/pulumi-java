// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.monitoring.SloArgs;
import io.pulumi.gcp.monitoring.inputs.SloState;
import io.pulumi.gcp.monitoring.outputs.SloBasicSli;
import io.pulumi.gcp.monitoring.outputs.SloRequestBasedSli;
import io.pulumi.gcp.monitoring.outputs.SloWindowsBasedSli;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A Service-Level Objective (SLO) describes the level of desired good
 * service. It consists of a service-level indicator (SLI), a performance
 * goal, and a period over which the objective is to be evaluated against
 * that goal. The SLO can use SLIs defined in a number of different manners.
 * Typical SLOs might include "99% of requests in each rolling week have
 * latency below 200 milliseconds" or "99.5% of requests in each calendar
 * month return successfully."
 * 
 * To get more information about Slo, see:
 * 
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives)
 * * How-to Guides
 *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
 *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Slo can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/slo:Slo default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:monitoring/slo:Slo")
public class Slo extends io.pulumi.resources.CustomResource {
    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service's
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @OutputExport(name="basicSli", type=SloBasicSli.class, parameters={})
    private Output</* @Nullable */ SloBasicSli> basicSli;

    /**
     * @return Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service's
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ SloBasicSli> getBasicSli() {
        return this.basicSli;
    }
    /**
     * A calendar period, semantically "since the start of the current
     * <calendarPeriod>".
     * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
     * 
     */
    @OutputExport(name="calendarPeriod", type=String.class, parameters={})
    private Output</* @Nullable */ String> calendarPeriod;

    /**
     * @return A calendar period, semantically "since the start of the current
     * <calendarPeriod>".
     * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
     * 
     */
    public Output</* @Nullable */ String> getCalendarPeriod() {
        return this.calendarPeriod;
    }
    /**
     * Name used for UI elements listing this SLO.
     * 
     */
    @OutputExport(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Name used for UI elements listing this SLO.
     * 
     */
    public Output</* @Nullable */ String> getDisplayName() {
        return this.displayName;
    }
    /**
     * The fraction of service that must be good in order for this objective
     * to be met. 0 < goal <= 0.999
     * 
     */
    @OutputExport(name="goal", type=Double.class, parameters={})
    private Output<Double> goal;

    /**
     * @return The fraction of service that must be good in order for this objective
     * to be met. 0 < goal <= 0.999
     * 
     */
    public Output<Double> getGoal() {
        return this.goal;
    }
    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @OutputExport(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service's
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @OutputExport(name="requestBasedSli", type=SloRequestBasedSli.class, parameters={})
    private Output</* @Nullable */ SloRequestBasedSli> requestBasedSli;

    /**
     * @return A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service's
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ SloRequestBasedSli> getRequestBasedSli() {
        return this.requestBasedSli;
    }
    /**
     * A rolling time period, semantically "in the past X days".
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    @OutputExport(name="rollingPeriodDays", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> rollingPeriodDays;

    /**
     * @return A rolling time period, semantically "in the past X days".
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    public Output</* @Nullable */ Integer> getRollingPeriodDays() {
        return this.rollingPeriodDays;
    }
    /**
     * ID of the service to which this SLO belongs.
     * 
     */
    @OutputExport(name="service", type=String.class, parameters={})
    private Output<String> service;

    /**
     * @return ID of the service to which this SLO belongs.
     * 
     */
    public Output<String> getService() {
        return this.service;
    }
    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    @OutputExport(name="sloId", type=String.class, parameters={})
    private Output<String> sloId;

    /**
     * @return The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    public Output<String> getSloId() {
        return this.sloId;
    }
    /**
     * A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service's performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @OutputExport(name="windowsBasedSli", type=SloWindowsBasedSli.class, parameters={})
    private Output</* @Nullable */ SloWindowsBasedSli> windowsBasedSli;

    /**
     * @return A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service's performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ SloWindowsBasedSli> getWindowsBasedSli() {
        return this.windowsBasedSli;
    }

    public interface BuilderApplicator {
        public void apply(SloArgs.Builder a);
    }
    private static io.pulumi.gcp.monitoring.SloArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.gcp.monitoring.SloArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Slo(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Slo(String name) {
        this(name, SloArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Slo(String name, SloArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Slo(String name, SloArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/slo:Slo", name, args == null ? SloArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Slo(String name, Output<String> id, @Nullable SloState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/slo:Slo", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Slo get(String name, Output<String> id, @Nullable SloState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Slo(name, id, state, options);
    }
}
