// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.monitoring.GroupArgs;
import io.pulumi.gcp.monitoring.inputs.GroupState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * The description of a dynamic collection of monitored resources. Each group
 * has a filter that is matched against monitored resources and their
 * associated metadata. If a group's filter matches an available monitored
 * resource, then that resource is a member of that group.
 * 
 * 
 * To get more information about Group, see:
 * 
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.groups)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/monitoring/groups/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Monitoring Group Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const basic = new gcp.monitoring.Group("basic", {
 *     displayName: "tf-test MonitoringGroup",
 *     filter: "resource.metadata.region=\"europe-west2\"",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * basic = gcp.monitoring.Group("basic",
 *     display_name="tf-test MonitoringGroup",
 *     filter="resource.metadata.region=\"europe-west2\"")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var basic = new Gcp.Monitoring.Group("basic", new Gcp.Monitoring.GroupArgs
 *         {
 *             DisplayName = "tf-test MonitoringGroup",
 *             Filter = "resource.metadata.region=\"europe-west2\"",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/monitoring"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := monitoring.NewGroup(ctx, "basic", &monitoring.GroupArgs{
 * 			DisplayName: pulumi.String("tf-test MonitoringGroup"),
 * 			Filter:      pulumi.String("resource.metadata.region=\"europe-west2\""),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Monitoring Group Subgroup
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const parent = new gcp.monitoring.Group("parent", {
 *     displayName: "tf-test MonitoringParentGroup",
 *     filter: "resource.metadata.region=\"europe-west2\"",
 * });
 * const subgroup = new gcp.monitoring.Group("subgroup", {
 *     displayName: "tf-test MonitoringSubGroup",
 *     filter: "resource.metadata.region=\"europe-west2\"",
 *     parentName: parent.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * parent = gcp.monitoring.Group("parent",
 *     display_name="tf-test MonitoringParentGroup",
 *     filter="resource.metadata.region=\"europe-west2\"")
 * subgroup = gcp.monitoring.Group("subgroup",
 *     display_name="tf-test MonitoringSubGroup",
 *     filter="resource.metadata.region=\"europe-west2\"",
 *     parent_name=parent.name)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var parent = new Gcp.Monitoring.Group("parent", new Gcp.Monitoring.GroupArgs
 *         {
 *             DisplayName = "tf-test MonitoringParentGroup",
 *             Filter = "resource.metadata.region=\"europe-west2\"",
 *         });
 *         var subgroup = new Gcp.Monitoring.Group("subgroup", new Gcp.Monitoring.GroupArgs
 *         {
 *             DisplayName = "tf-test MonitoringSubGroup",
 *             Filter = "resource.metadata.region=\"europe-west2\"",
 *             ParentName = parent.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/monitoring"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		parent, err := monitoring.NewGroup(ctx, "parent", &monitoring.GroupArgs{
 * 			DisplayName: pulumi.String("tf-test MonitoringParentGroup"),
 * 			Filter:      pulumi.String("resource.metadata.region=\"europe-west2\""),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = monitoring.NewGroup(ctx, "subgroup", &monitoring.GroupArgs{
 * 			DisplayName: pulumi.String("tf-test MonitoringSubGroup"),
 * 			Filter:      pulumi.String("resource.metadata.region=\"europe-west2\""),
 * 			ParentName:  parent.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Group can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/group:Group default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:monitoring/group:Group")
public class Group extends io.pulumi.resources.CustomResource {
    /**
     * A user-assigned name for this group, used only for display
     * purposes.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return A user-assigned name for this group, used only for display
     * purposes.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * The filter used to determine which monitored resources
     * belong to this group.
     * 
     */
    @Export(name="filter", type=String.class, parameters={})
    private Output<String> filter;

    /**
     * @return The filter used to determine which monitored resources
     * belong to this group.
     * 
     */
    public Output<String> getFilter() {
        return this.filter;
    }
    /**
     * If true, the members of this group are considered to be a
     * cluster. The system can perform additional analysis on
     * groups that are clusters.
     * 
     */
    @Export(name="isCluster", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isCluster;

    /**
     * @return If true, the members of this group are considered to be a
     * cluster. The system can perform additional analysis on
     * groups that are clusters.
     * 
     */
    public Output</* @Nullable */ Boolean> getIsCluster() {
        return this.isCluster;
    }
    /**
     * A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The name of the group's parent, if it has one. The format is
     * "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     * 
     */
    @Export(name="parentName", type=String.class, parameters={})
    private Output</* @Nullable */ String> parentName;

    /**
     * @return The name of the group's parent, if it has one. The format is
     * "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     * 
     */
    public Output</* @Nullable */ String> getParentName() {
        return this.parentName;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Group(String name) {
        this(name, GroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Group(String name, GroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Group(String name, GroupArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/group:Group", name, args == null ? GroupArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Group(String name, Output<String> id, @Nullable GroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/group:Group", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Group get(String name, Output<String> id, @Nullable GroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Group(name, id, state, options);
    }
}
