// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.healthcare;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.healthcare.inputs.FhirStoreNotificationConfigArgs;
import io.pulumi.gcp.healthcare.inputs.FhirStoreStreamConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FhirStoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final FhirStoreArgs Empty = new FhirStoreArgs();

    @InputImport(name="dataset", required=true)
    private final Input<String> dataset;

    public Input<String> getDataset() {
        return this.dataset;
    }

    @InputImport(name="disableReferentialIntegrity")
    private final @Nullable Input<Boolean> disableReferentialIntegrity;

    public Input<Boolean> getDisableReferentialIntegrity() {
        return this.disableReferentialIntegrity == null ? Input.empty() : this.disableReferentialIntegrity;
    }

    @InputImport(name="disableResourceVersioning")
    private final @Nullable Input<Boolean> disableResourceVersioning;

    public Input<Boolean> getDisableResourceVersioning() {
        return this.disableResourceVersioning == null ? Input.empty() : this.disableResourceVersioning;
    }

    @InputImport(name="enableHistoryImport")
    private final @Nullable Input<Boolean> enableHistoryImport;

    public Input<Boolean> getEnableHistoryImport() {
        return this.enableHistoryImport == null ? Input.empty() : this.enableHistoryImport;
    }

    @InputImport(name="enableUpdateCreate")
    private final @Nullable Input<Boolean> enableUpdateCreate;

    public Input<Boolean> getEnableUpdateCreate() {
        return this.enableUpdateCreate == null ? Input.empty() : this.enableUpdateCreate;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="notificationConfig")
    private final @Nullable Input<FhirStoreNotificationConfigArgs> notificationConfig;

    public Input<FhirStoreNotificationConfigArgs> getNotificationConfig() {
        return this.notificationConfig == null ? Input.empty() : this.notificationConfig;
    }

    @InputImport(name="streamConfigs")
    private final @Nullable Input<List<FhirStoreStreamConfigArgs>> streamConfigs;

    public Input<List<FhirStoreStreamConfigArgs>> getStreamConfigs() {
        return this.streamConfigs == null ? Input.empty() : this.streamConfigs;
    }

    @InputImport(name="version")
    private final @Nullable Input<String> version;

    public Input<String> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public FhirStoreArgs(
        Input<String> dataset,
        @Nullable Input<Boolean> disableReferentialIntegrity,
        @Nullable Input<Boolean> disableResourceVersioning,
        @Nullable Input<Boolean> enableHistoryImport,
        @Nullable Input<Boolean> enableUpdateCreate,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> name,
        @Nullable Input<FhirStoreNotificationConfigArgs> notificationConfig,
        @Nullable Input<List<FhirStoreStreamConfigArgs>> streamConfigs,
        @Nullable Input<String> version) {
        this.dataset = Objects.requireNonNull(dataset, "expected parameter 'dataset' to be non-null");
        this.disableReferentialIntegrity = disableReferentialIntegrity;
        this.disableResourceVersioning = disableResourceVersioning;
        this.enableHistoryImport = enableHistoryImport;
        this.enableUpdateCreate = enableUpdateCreate;
        this.labels = labels;
        this.name = name;
        this.notificationConfig = notificationConfig;
        this.streamConfigs = streamConfigs;
        this.version = version;
    }

    private FhirStoreArgs() {
        this.dataset = Input.empty();
        this.disableReferentialIntegrity = Input.empty();
        this.disableResourceVersioning = Input.empty();
        this.enableHistoryImport = Input.empty();
        this.enableUpdateCreate = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.notificationConfig = Input.empty();
        this.streamConfigs = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FhirStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> dataset;
        private @Nullable Input<Boolean> disableReferentialIntegrity;
        private @Nullable Input<Boolean> disableResourceVersioning;
        private @Nullable Input<Boolean> enableHistoryImport;
        private @Nullable Input<Boolean> enableUpdateCreate;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> name;
        private @Nullable Input<FhirStoreNotificationConfigArgs> notificationConfig;
        private @Nullable Input<List<FhirStoreStreamConfigArgs>> streamConfigs;
        private @Nullable Input<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(FhirStoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.disableReferentialIntegrity = defaults.disableReferentialIntegrity;
    	      this.disableResourceVersioning = defaults.disableResourceVersioning;
    	      this.enableHistoryImport = defaults.enableHistoryImport;
    	      this.enableUpdateCreate = defaults.enableUpdateCreate;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.notificationConfig = defaults.notificationConfig;
    	      this.streamConfigs = defaults.streamConfigs;
    	      this.version = defaults.version;
        }

        public Builder setDataset(Input<String> dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }

        public Builder setDataset(String dataset) {
            this.dataset = Input.of(Objects.requireNonNull(dataset));
            return this;
        }

        public Builder setDisableReferentialIntegrity(@Nullable Input<Boolean> disableReferentialIntegrity) {
            this.disableReferentialIntegrity = disableReferentialIntegrity;
            return this;
        }

        public Builder setDisableReferentialIntegrity(@Nullable Boolean disableReferentialIntegrity) {
            this.disableReferentialIntegrity = Input.ofNullable(disableReferentialIntegrity);
            return this;
        }

        public Builder setDisableResourceVersioning(@Nullable Input<Boolean> disableResourceVersioning) {
            this.disableResourceVersioning = disableResourceVersioning;
            return this;
        }

        public Builder setDisableResourceVersioning(@Nullable Boolean disableResourceVersioning) {
            this.disableResourceVersioning = Input.ofNullable(disableResourceVersioning);
            return this;
        }

        public Builder setEnableHistoryImport(@Nullable Input<Boolean> enableHistoryImport) {
            this.enableHistoryImport = enableHistoryImport;
            return this;
        }

        public Builder setEnableHistoryImport(@Nullable Boolean enableHistoryImport) {
            this.enableHistoryImport = Input.ofNullable(enableHistoryImport);
            return this;
        }

        public Builder setEnableUpdateCreate(@Nullable Input<Boolean> enableUpdateCreate) {
            this.enableUpdateCreate = enableUpdateCreate;
            return this;
        }

        public Builder setEnableUpdateCreate(@Nullable Boolean enableUpdateCreate) {
            this.enableUpdateCreate = Input.ofNullable(enableUpdateCreate);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNotificationConfig(@Nullable Input<FhirStoreNotificationConfigArgs> notificationConfig) {
            this.notificationConfig = notificationConfig;
            return this;
        }

        public Builder setNotificationConfig(@Nullable FhirStoreNotificationConfigArgs notificationConfig) {
            this.notificationConfig = Input.ofNullable(notificationConfig);
            return this;
        }

        public Builder setStreamConfigs(@Nullable Input<List<FhirStoreStreamConfigArgs>> streamConfigs) {
            this.streamConfigs = streamConfigs;
            return this;
        }

        public Builder setStreamConfigs(@Nullable List<FhirStoreStreamConfigArgs> streamConfigs) {
            this.streamConfigs = Input.ofNullable(streamConfigs);
            return this;
        }

        public Builder setVersion(@Nullable Input<String> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable String version) {
            this.version = Input.ofNullable(version);
            return this;
        }

        public FhirStoreArgs build() {
            return new FhirStoreArgs(dataset, disableReferentialIntegrity, disableResourceVersioning, enableHistoryImport, enableUpdateCreate, labels, name, notificationConfig, streamConfigs, version);
        }
    }
}
