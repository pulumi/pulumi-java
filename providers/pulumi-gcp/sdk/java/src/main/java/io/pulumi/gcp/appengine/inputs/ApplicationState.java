// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.appengine.inputs.ApplicationFeatureSettingsGetArgs;
import io.pulumi.gcp.appengine.inputs.ApplicationIapGetArgs;
import io.pulumi.gcp.appengine.inputs.ApplicationUrlDispatchRuleGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationState extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    /**
     * Identifier of the app, usually `{PROJECT_ID}`
     * 
     */
    @InputImport(name="appId")
    private final @Nullable Input<String> appId;

    public Input<String> getAppId() {
        return this.appId == null ? Input.empty() : this.appId;
    }

    /**
     * The domain to authenticate users with when using App Engine's User API.
     * 
     */
    @InputImport(name="authDomain")
    private final @Nullable Input<String> authDomain;

    public Input<String> getAuthDomain() {
        return this.authDomain == null ? Input.empty() : this.authDomain;
    }

    /**
     * The GCS bucket code is being stored in for this app.
     * 
     */
    @InputImport(name="codeBucket")
    private final @Nullable Input<String> codeBucket;

    public Input<String> getCodeBucket() {
        return this.codeBucket == null ? Input.empty() : this.codeBucket;
    }

    /**
     * The type of the Cloud Firestore or Cloud Datastore database associated with this application.
     * Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
     * instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
     * by the provider, but will be rejected by the API.
     * 
     */
    @InputImport(name="databaseType")
    private final @Nullable Input<String> databaseType;

    public Input<String> getDatabaseType() {
        return this.databaseType == null ? Input.empty() : this.databaseType;
    }

    /**
     * The GCS bucket content is being stored in for this app.
     * 
     */
    @InputImport(name="defaultBucket")
    private final @Nullable Input<String> defaultBucket;

    public Input<String> getDefaultBucket() {
        return this.defaultBucket == null ? Input.empty() : this.defaultBucket;
    }

    /**
     * The default hostname for this app.
     * 
     */
    @InputImport(name="defaultHostname")
    private final @Nullable Input<String> defaultHostname;

    public Input<String> getDefaultHostname() {
        return this.defaultHostname == null ? Input.empty() : this.defaultHostname;
    }

    /**
     * A block of optional settings to configure specific App Engine features:
     * 
     */
    @InputImport(name="featureSettings")
    private final @Nullable Input<ApplicationFeatureSettingsGetArgs> featureSettings;

    public Input<ApplicationFeatureSettingsGetArgs> getFeatureSettings() {
        return this.featureSettings == null ? Input.empty() : this.featureSettings;
    }

    /**
     * The GCR domain used for storing managed Docker images for this app.
     * 
     */
    @InputImport(name="gcrDomain")
    private final @Nullable Input<String> gcrDomain;

    public Input<String> getGcrDomain() {
        return this.gcrDomain == null ? Input.empty() : this.gcrDomain;
    }

    /**
     * Settings for enabling Cloud Identity Aware Proxy
     * 
     */
    @InputImport(name="iap")
    private final @Nullable Input<ApplicationIapGetArgs> iap;

    public Input<ApplicationIapGetArgs> getIap() {
        return this.iap == null ? Input.empty() : this.iap;
    }

    /**
     * The [location](https://cloud.google.com/appengine/docs/locations)
     * to serve the app from.
     * 
     */
    @InputImport(name="locationId")
    private final @Nullable Input<String> locationId;

    public Input<String> getLocationId() {
        return this.locationId == null ? Input.empty() : this.locationId;
    }

    /**
     * Unique name of the app, usually `apps/{PROJECT_ID}`
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The project ID to create the application under.
     * ~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
     * you may get a "Permission denied" error.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The serving status of the app.
     * 
     */
    @InputImport(name="servingStatus")
    private final @Nullable Input<String> servingStatus;

    public Input<String> getServingStatus() {
        return this.servingStatus == null ? Input.empty() : this.servingStatus;
    }

    /**
     * A list of dispatch rule blocks. Each block has a `domain`, `path`, and `service` field.
     * 
     */
    @InputImport(name="urlDispatchRules")
    private final @Nullable Input<List<ApplicationUrlDispatchRuleGetArgs>> urlDispatchRules;

    public Input<List<ApplicationUrlDispatchRuleGetArgs>> getUrlDispatchRules() {
        return this.urlDispatchRules == null ? Input.empty() : this.urlDispatchRules;
    }

    public ApplicationState(
        @Nullable Input<String> appId,
        @Nullable Input<String> authDomain,
        @Nullable Input<String> codeBucket,
        @Nullable Input<String> databaseType,
        @Nullable Input<String> defaultBucket,
        @Nullable Input<String> defaultHostname,
        @Nullable Input<ApplicationFeatureSettingsGetArgs> featureSettings,
        @Nullable Input<String> gcrDomain,
        @Nullable Input<ApplicationIapGetArgs> iap,
        @Nullable Input<String> locationId,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> servingStatus,
        @Nullable Input<List<ApplicationUrlDispatchRuleGetArgs>> urlDispatchRules) {
        this.appId = appId;
        this.authDomain = authDomain;
        this.codeBucket = codeBucket;
        this.databaseType = databaseType;
        this.defaultBucket = defaultBucket;
        this.defaultHostname = defaultHostname;
        this.featureSettings = featureSettings;
        this.gcrDomain = gcrDomain;
        this.iap = iap;
        this.locationId = locationId;
        this.name = name;
        this.project = project;
        this.servingStatus = servingStatus;
        this.urlDispatchRules = urlDispatchRules;
    }

    private ApplicationState() {
        this.appId = Input.empty();
        this.authDomain = Input.empty();
        this.codeBucket = Input.empty();
        this.databaseType = Input.empty();
        this.defaultBucket = Input.empty();
        this.defaultHostname = Input.empty();
        this.featureSettings = Input.empty();
        this.gcrDomain = Input.empty();
        this.iap = Input.empty();
        this.locationId = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.servingStatus = Input.empty();
        this.urlDispatchRules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> appId;
        private @Nullable Input<String> authDomain;
        private @Nullable Input<String> codeBucket;
        private @Nullable Input<String> databaseType;
        private @Nullable Input<String> defaultBucket;
        private @Nullable Input<String> defaultHostname;
        private @Nullable Input<ApplicationFeatureSettingsGetArgs> featureSettings;
        private @Nullable Input<String> gcrDomain;
        private @Nullable Input<ApplicationIapGetArgs> iap;
        private @Nullable Input<String> locationId;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> servingStatus;
        private @Nullable Input<List<ApplicationUrlDispatchRuleGetArgs>> urlDispatchRules;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.authDomain = defaults.authDomain;
    	      this.codeBucket = defaults.codeBucket;
    	      this.databaseType = defaults.databaseType;
    	      this.defaultBucket = defaults.defaultBucket;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.featureSettings = defaults.featureSettings;
    	      this.gcrDomain = defaults.gcrDomain;
    	      this.iap = defaults.iap;
    	      this.locationId = defaults.locationId;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.servingStatus = defaults.servingStatus;
    	      this.urlDispatchRules = defaults.urlDispatchRules;
        }

        public Builder setAppId(@Nullable Input<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder setAppId(@Nullable String appId) {
            this.appId = Input.ofNullable(appId);
            return this;
        }

        public Builder setAuthDomain(@Nullable Input<String> authDomain) {
            this.authDomain = authDomain;
            return this;
        }

        public Builder setAuthDomain(@Nullable String authDomain) {
            this.authDomain = Input.ofNullable(authDomain);
            return this;
        }

        public Builder setCodeBucket(@Nullable Input<String> codeBucket) {
            this.codeBucket = codeBucket;
            return this;
        }

        public Builder setCodeBucket(@Nullable String codeBucket) {
            this.codeBucket = Input.ofNullable(codeBucket);
            return this;
        }

        public Builder setDatabaseType(@Nullable Input<String> databaseType) {
            this.databaseType = databaseType;
            return this;
        }

        public Builder setDatabaseType(@Nullable String databaseType) {
            this.databaseType = Input.ofNullable(databaseType);
            return this;
        }

        public Builder setDefaultBucket(@Nullable Input<String> defaultBucket) {
            this.defaultBucket = defaultBucket;
            return this;
        }

        public Builder setDefaultBucket(@Nullable String defaultBucket) {
            this.defaultBucket = Input.ofNullable(defaultBucket);
            return this;
        }

        public Builder setDefaultHostname(@Nullable Input<String> defaultHostname) {
            this.defaultHostname = defaultHostname;
            return this;
        }

        public Builder setDefaultHostname(@Nullable String defaultHostname) {
            this.defaultHostname = Input.ofNullable(defaultHostname);
            return this;
        }

        public Builder setFeatureSettings(@Nullable Input<ApplicationFeatureSettingsGetArgs> featureSettings) {
            this.featureSettings = featureSettings;
            return this;
        }

        public Builder setFeatureSettings(@Nullable ApplicationFeatureSettingsGetArgs featureSettings) {
            this.featureSettings = Input.ofNullable(featureSettings);
            return this;
        }

        public Builder setGcrDomain(@Nullable Input<String> gcrDomain) {
            this.gcrDomain = gcrDomain;
            return this;
        }

        public Builder setGcrDomain(@Nullable String gcrDomain) {
            this.gcrDomain = Input.ofNullable(gcrDomain);
            return this;
        }

        public Builder setIap(@Nullable Input<ApplicationIapGetArgs> iap) {
            this.iap = iap;
            return this;
        }

        public Builder setIap(@Nullable ApplicationIapGetArgs iap) {
            this.iap = Input.ofNullable(iap);
            return this;
        }

        public Builder setLocationId(@Nullable Input<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder setLocationId(@Nullable String locationId) {
            this.locationId = Input.ofNullable(locationId);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setServingStatus(@Nullable Input<String> servingStatus) {
            this.servingStatus = servingStatus;
            return this;
        }

        public Builder setServingStatus(@Nullable String servingStatus) {
            this.servingStatus = Input.ofNullable(servingStatus);
            return this;
        }

        public Builder setUrlDispatchRules(@Nullable Input<List<ApplicationUrlDispatchRuleGetArgs>> urlDispatchRules) {
            this.urlDispatchRules = urlDispatchRules;
            return this;
        }

        public Builder setUrlDispatchRules(@Nullable List<ApplicationUrlDispatchRuleGetArgs> urlDispatchRules) {
            this.urlDispatchRules = Input.ofNullable(urlDispatchRules);
            return this;
        }

        public ApplicationState build() {
            return new ApplicationState(appId, authDomain, codeBucket, databaseType, defaultBucket, defaultHostname, featureSettings, gcrDomain, iap, locationId, name, project, servingStatus, urlDispatchRules);
        }
    }
}
