// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.osconfig.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class PatchDeploymentPatchConfigYum {
    /**
     * List of KBs to exclude from update.
     * 
     */
    private final @Nullable List<String> excludes;
    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated.
     * If these packages are not installed, they will be ignored. This field cannot be specified with
     * any other patch configuration fields.
     * 
     */
    private final @Nullable List<String> exclusivePackages;
    /**
     * Will cause patch to run yum update-minimal instead.
     * 
     */
    private final @Nullable Boolean minimal;
    /**
     * Adds the --security flag to yum update. Not supported on all platforms.
     * 
     */
    private final @Nullable Boolean security;

    @OutputCustomType.Constructor({"excludes","exclusivePackages","minimal","security"})
    private PatchDeploymentPatchConfigYum(
        @Nullable List<String> excludes,
        @Nullable List<String> exclusivePackages,
        @Nullable Boolean minimal,
        @Nullable Boolean security) {
        this.excludes = excludes;
        this.exclusivePackages = exclusivePackages;
        this.minimal = minimal;
        this.security = security;
    }

    /**
     * List of KBs to exclude from update.
     * 
     */
    public List<String> getExcludes() {
        return this.excludes == null ? List.of() : this.excludes;
    }
    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated.
     * If these packages are not installed, they will be ignored. This field cannot be specified with
     * any other patch configuration fields.
     * 
     */
    public List<String> getExclusivePackages() {
        return this.exclusivePackages == null ? List.of() : this.exclusivePackages;
    }
    /**
     * Will cause patch to run yum update-minimal instead.
     * 
     */
    public Optional<Boolean> getMinimal() {
        return Optional.ofNullable(this.minimal);
    }
    /**
     * Adds the --security flag to yum update. Not supported on all platforms.
     * 
     */
    public Optional<Boolean> getSecurity() {
        return Optional.ofNullable(this.security);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PatchDeploymentPatchConfigYum defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> excludes;
        private @Nullable List<String> exclusivePackages;
        private @Nullable Boolean minimal;
        private @Nullable Boolean security;

        public Builder() {
    	      // Empty
        }

        public Builder(PatchDeploymentPatchConfigYum defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludes = defaults.excludes;
    	      this.exclusivePackages = defaults.exclusivePackages;
    	      this.minimal = defaults.minimal;
    	      this.security = defaults.security;
        }

        public Builder setExcludes(@Nullable List<String> excludes) {
            this.excludes = excludes;
            return this;
        }

        public Builder setExclusivePackages(@Nullable List<String> exclusivePackages) {
            this.exclusivePackages = exclusivePackages;
            return this;
        }

        public Builder setMinimal(@Nullable Boolean minimal) {
            this.minimal = minimal;
            return this;
        }

        public Builder setSecurity(@Nullable Boolean security) {
            this.security = security;
            return this;
        }
        public PatchDeploymentPatchConfigYum build() {
            return new PatchDeploymentPatchConfigYum(excludes, exclusivePackages, minimal, security);
        }
    }
}
