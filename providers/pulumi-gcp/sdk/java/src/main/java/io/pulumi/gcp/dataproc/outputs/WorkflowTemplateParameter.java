// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dataproc.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.gcp.dataproc.outputs.WorkflowTemplateParameterValidation;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class WorkflowTemplateParameter {
    /**
     * Optional. Brief description of the parameter. Must not exceed 1024 characters.
     * 
     */
    private final @Nullable String description;
    /**
     * Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
     * 
     */
    private final List<String> fields;
    /**
     * Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
     * 
     */
    private final String name;
    /**
     * Optional. Validation rules to be applied to this parameter's value.
     * 
     */
    private final @Nullable WorkflowTemplateParameterValidation validation;

    @OutputCustomType.Constructor({"description","fields","name","validation"})
    private WorkflowTemplateParameter(
        @Nullable String description,
        List<String> fields,
        String name,
        @Nullable WorkflowTemplateParameterValidation validation) {
        this.description = description;
        this.fields = fields;
        this.name = name;
        this.validation = validation;
    }

    /**
     * Optional. Brief description of the parameter. Must not exceed 1024 characters.
     * 
    */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
     * 
    */
    public List<String> getFields() {
        return this.fields;
    }
    /**
     * Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Optional. Validation rules to be applied to this parameter's value.
     * 
    */
    public Optional<WorkflowTemplateParameterValidation> getValidation() {
        return Optional.ofNullable(this.validation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowTemplateParameter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private List<String> fields;
        private String name;
        private @Nullable WorkflowTemplateParameterValidation validation;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkflowTemplateParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.validation = defaults.validation;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setFields(List<String> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setValidation(@Nullable WorkflowTemplateParameterValidation validation) {
            this.validation = validation;
            return this;
        }
        public WorkflowTemplateParameter build() {
            return new WorkflowTemplateParameter(description, fields, name, validation);
        }
    }
}
