// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.util.Objects;


public final class InstanceFromMachineImageConfidentialInstanceConfigGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceFromMachineImageConfidentialInstanceConfigGetArgs Empty = new InstanceFromMachineImageConfidentialInstanceConfigGetArgs();

    @InputImport(name="enableConfidentialCompute", required=true)
      private final Input<Boolean> enableConfidentialCompute;

    public Input<Boolean> getEnableConfidentialCompute() {
        return this.enableConfidentialCompute;
    }

    public InstanceFromMachineImageConfidentialInstanceConfigGetArgs(Input<Boolean> enableConfidentialCompute) {
        this.enableConfidentialCompute = Objects.requireNonNull(enableConfidentialCompute, "expected parameter 'enableConfidentialCompute' to be non-null");
    }

    private InstanceFromMachineImageConfidentialInstanceConfigGetArgs() {
        this.enableConfidentialCompute = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFromMachineImageConfidentialInstanceConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Boolean> enableConfidentialCompute;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceFromMachineImageConfidentialInstanceConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableConfidentialCompute = defaults.enableConfidentialCompute;
        }

        public Builder enableConfidentialCompute(Input<Boolean> enableConfidentialCompute) {
            this.enableConfidentialCompute = Objects.requireNonNull(enableConfidentialCompute);
            return this;
        }

        public Builder enableConfidentialCompute(Boolean enableConfidentialCompute) {
            this.enableConfidentialCompute = Input.of(Objects.requireNonNull(enableConfidentialCompute));
            return this;
        }
        public InstanceFromMachineImageConfidentialInstanceConfigGetArgs build() {
            return new InstanceFromMachineImageConfidentialInstanceConfigGetArgs(enableConfidentialCompute);
        }
    }
}
