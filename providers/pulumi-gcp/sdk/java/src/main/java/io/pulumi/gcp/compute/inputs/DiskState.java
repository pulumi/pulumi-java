// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.DiskDiskEncryptionKeyGetArgs;
import io.pulumi.gcp.compute.inputs.DiskSourceImageEncryptionKeyGetArgs;
import io.pulumi.gcp.compute.inputs.DiskSourceSnapshotEncryptionKeyGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiskState extends io.pulumi.resources.ResourceArgs {

    public static final DiskState Empty = new DiskState();

    @InputImport(name="creationTimestamp")
    private final @Nullable Input<String> creationTimestamp;

    public Input<String> getCreationTimestamp() {
        return this.creationTimestamp == null ? Input.empty() : this.creationTimestamp;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="diskEncryptionKey")
    private final @Nullable Input<DiskDiskEncryptionKeyGetArgs> diskEncryptionKey;

    public Input<DiskDiskEncryptionKeyGetArgs> getDiskEncryptionKey() {
        return this.diskEncryptionKey == null ? Input.empty() : this.diskEncryptionKey;
    }

    @InputImport(name="image")
    private final @Nullable Input<String> image;

    public Input<String> getImage() {
        return this.image == null ? Input.empty() : this.image;
    }

    @InputImport(name="interface")
    private final @Nullable Input<String> $interface;

    @Deprecated /* This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config. */
    public Input<String> get$interface() {
        return this.$interface == null ? Input.empty() : this.$interface;
    }

    @InputImport(name="labelFingerprint")
    private final @Nullable Input<String> labelFingerprint;

    public Input<String> getLabelFingerprint() {
        return this.labelFingerprint == null ? Input.empty() : this.labelFingerprint;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="lastAttachTimestamp")
    private final @Nullable Input<String> lastAttachTimestamp;

    public Input<String> getLastAttachTimestamp() {
        return this.lastAttachTimestamp == null ? Input.empty() : this.lastAttachTimestamp;
    }

    @InputImport(name="lastDetachTimestamp")
    private final @Nullable Input<String> lastDetachTimestamp;

    public Input<String> getLastDetachTimestamp() {
        return this.lastDetachTimestamp == null ? Input.empty() : this.lastDetachTimestamp;
    }

    @InputImport(name="multiWriter")
    private final @Nullable Input<Boolean> multiWriter;

    public Input<Boolean> getMultiWriter() {
        return this.multiWriter == null ? Input.empty() : this.multiWriter;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="physicalBlockSizeBytes")
    private final @Nullable Input<Integer> physicalBlockSizeBytes;

    public Input<Integer> getPhysicalBlockSizeBytes() {
        return this.physicalBlockSizeBytes == null ? Input.empty() : this.physicalBlockSizeBytes;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="provisionedIops")
    private final @Nullable Input<Integer> provisionedIops;

    public Input<Integer> getProvisionedIops() {
        return this.provisionedIops == null ? Input.empty() : this.provisionedIops;
    }

    @InputImport(name="resourcePolicies")
    private final @Nullable Input<List<String>> resourcePolicies;

    public Input<List<String>> getResourcePolicies() {
        return this.resourcePolicies == null ? Input.empty() : this.resourcePolicies;
    }

    @InputImport(name="selfLink")
    private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    @InputImport(name="size")
    private final @Nullable Input<Integer> size;

    public Input<Integer> getSize() {
        return this.size == null ? Input.empty() : this.size;
    }

    @InputImport(name="snapshot")
    private final @Nullable Input<String> snapshot;

    public Input<String> getSnapshot() {
        return this.snapshot == null ? Input.empty() : this.snapshot;
    }

    @InputImport(name="sourceImageEncryptionKey")
    private final @Nullable Input<DiskSourceImageEncryptionKeyGetArgs> sourceImageEncryptionKey;

    public Input<DiskSourceImageEncryptionKeyGetArgs> getSourceImageEncryptionKey() {
        return this.sourceImageEncryptionKey == null ? Input.empty() : this.sourceImageEncryptionKey;
    }

    @InputImport(name="sourceImageId")
    private final @Nullable Input<String> sourceImageId;

    public Input<String> getSourceImageId() {
        return this.sourceImageId == null ? Input.empty() : this.sourceImageId;
    }

    @InputImport(name="sourceSnapshotEncryptionKey")
    private final @Nullable Input<DiskSourceSnapshotEncryptionKeyGetArgs> sourceSnapshotEncryptionKey;

    public Input<DiskSourceSnapshotEncryptionKeyGetArgs> getSourceSnapshotEncryptionKey() {
        return this.sourceSnapshotEncryptionKey == null ? Input.empty() : this.sourceSnapshotEncryptionKey;
    }

    @InputImport(name="sourceSnapshotId")
    private final @Nullable Input<String> sourceSnapshotId;

    public Input<String> getSourceSnapshotId() {
        return this.sourceSnapshotId == null ? Input.empty() : this.sourceSnapshotId;
    }

    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    @InputImport(name="users")
    private final @Nullable Input<List<String>> users;

    public Input<List<String>> getUsers() {
        return this.users == null ? Input.empty() : this.users;
    }

    @InputImport(name="zone")
    private final @Nullable Input<String> zone;

    public Input<String> getZone() {
        return this.zone == null ? Input.empty() : this.zone;
    }

    public DiskState(
        @Nullable Input<String> creationTimestamp,
        @Nullable Input<String> description,
        @Nullable Input<DiskDiskEncryptionKeyGetArgs> diskEncryptionKey,
        @Nullable Input<String> image,
        @Nullable Input<String> $interface,
        @Nullable Input<String> labelFingerprint,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> lastAttachTimestamp,
        @Nullable Input<String> lastDetachTimestamp,
        @Nullable Input<Boolean> multiWriter,
        @Nullable Input<String> name,
        @Nullable Input<Integer> physicalBlockSizeBytes,
        @Nullable Input<String> project,
        @Nullable Input<Integer> provisionedIops,
        @Nullable Input<List<String>> resourcePolicies,
        @Nullable Input<String> selfLink,
        @Nullable Input<Integer> size,
        @Nullable Input<String> snapshot,
        @Nullable Input<DiskSourceImageEncryptionKeyGetArgs> sourceImageEncryptionKey,
        @Nullable Input<String> sourceImageId,
        @Nullable Input<DiskSourceSnapshotEncryptionKeyGetArgs> sourceSnapshotEncryptionKey,
        @Nullable Input<String> sourceSnapshotId,
        @Nullable Input<String> type,
        @Nullable Input<List<String>> users,
        @Nullable Input<String> zone) {
        this.creationTimestamp = creationTimestamp;
        this.description = description;
        this.diskEncryptionKey = diskEncryptionKey;
        this.image = image;
        this.$interface = $interface;
        this.labelFingerprint = labelFingerprint;
        this.labels = labels;
        this.lastAttachTimestamp = lastAttachTimestamp;
        this.lastDetachTimestamp = lastDetachTimestamp;
        this.multiWriter = multiWriter;
        this.name = name;
        this.physicalBlockSizeBytes = physicalBlockSizeBytes;
        this.project = project;
        this.provisionedIops = provisionedIops;
        this.resourcePolicies = resourcePolicies;
        this.selfLink = selfLink;
        this.size = size;
        this.snapshot = snapshot;
        this.sourceImageEncryptionKey = sourceImageEncryptionKey;
        this.sourceImageId = sourceImageId;
        this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
        this.sourceSnapshotId = sourceSnapshotId;
        this.type = type;
        this.users = users;
        this.zone = zone;
    }

    private DiskState() {
        this.creationTimestamp = Input.empty();
        this.description = Input.empty();
        this.diskEncryptionKey = Input.empty();
        this.image = Input.empty();
        this.$interface = Input.empty();
        this.labelFingerprint = Input.empty();
        this.labels = Input.empty();
        this.lastAttachTimestamp = Input.empty();
        this.lastDetachTimestamp = Input.empty();
        this.multiWriter = Input.empty();
        this.name = Input.empty();
        this.physicalBlockSizeBytes = Input.empty();
        this.project = Input.empty();
        this.provisionedIops = Input.empty();
        this.resourcePolicies = Input.empty();
        this.selfLink = Input.empty();
        this.size = Input.empty();
        this.snapshot = Input.empty();
        this.sourceImageEncryptionKey = Input.empty();
        this.sourceImageId = Input.empty();
        this.sourceSnapshotEncryptionKey = Input.empty();
        this.sourceSnapshotId = Input.empty();
        this.type = Input.empty();
        this.users = Input.empty();
        this.zone = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> creationTimestamp;
        private @Nullable Input<String> description;
        private @Nullable Input<DiskDiskEncryptionKeyGetArgs> diskEncryptionKey;
        private @Nullable Input<String> image;
        private @Nullable Input<String> $interface;
        private @Nullable Input<String> labelFingerprint;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> lastAttachTimestamp;
        private @Nullable Input<String> lastDetachTimestamp;
        private @Nullable Input<Boolean> multiWriter;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> physicalBlockSizeBytes;
        private @Nullable Input<String> project;
        private @Nullable Input<Integer> provisionedIops;
        private @Nullable Input<List<String>> resourcePolicies;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<Integer> size;
        private @Nullable Input<String> snapshot;
        private @Nullable Input<DiskSourceImageEncryptionKeyGetArgs> sourceImageEncryptionKey;
        private @Nullable Input<String> sourceImageId;
        private @Nullable Input<DiskSourceSnapshotEncryptionKeyGetArgs> sourceSnapshotEncryptionKey;
        private @Nullable Input<String> sourceSnapshotId;
        private @Nullable Input<String> type;
        private @Nullable Input<List<String>> users;
        private @Nullable Input<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskEncryptionKey = defaults.diskEncryptionKey;
    	      this.image = defaults.image;
    	      this.$interface = defaults.$interface;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.lastAttachTimestamp = defaults.lastAttachTimestamp;
    	      this.lastDetachTimestamp = defaults.lastDetachTimestamp;
    	      this.multiWriter = defaults.multiWriter;
    	      this.name = defaults.name;
    	      this.physicalBlockSizeBytes = defaults.physicalBlockSizeBytes;
    	      this.project = defaults.project;
    	      this.provisionedIops = defaults.provisionedIops;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.selfLink = defaults.selfLink;
    	      this.size = defaults.size;
    	      this.snapshot = defaults.snapshot;
    	      this.sourceImageEncryptionKey = defaults.sourceImageEncryptionKey;
    	      this.sourceImageId = defaults.sourceImageId;
    	      this.sourceSnapshotEncryptionKey = defaults.sourceSnapshotEncryptionKey;
    	      this.sourceSnapshotId = defaults.sourceSnapshotId;
    	      this.type = defaults.type;
    	      this.users = defaults.users;
    	      this.zone = defaults.zone;
        }

        public Builder setCreationTimestamp(@Nullable Input<String> creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder setCreationTimestamp(@Nullable String creationTimestamp) {
            this.creationTimestamp = Input.ofNullable(creationTimestamp);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDiskEncryptionKey(@Nullable Input<DiskDiskEncryptionKeyGetArgs> diskEncryptionKey) {
            this.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        public Builder setDiskEncryptionKey(@Nullable DiskDiskEncryptionKeyGetArgs diskEncryptionKey) {
            this.diskEncryptionKey = Input.ofNullable(diskEncryptionKey);
            return this;
        }

        public Builder setImage(@Nullable Input<String> image) {
            this.image = image;
            return this;
        }

        public Builder setImage(@Nullable String image) {
            this.image = Input.ofNullable(image);
            return this;
        }

        public Builder set$interface(@Nullable Input<String> $interface) {
            this.$interface = $interface;
            return this;
        }

        public Builder set$interface(@Nullable String $interface) {
            this.$interface = Input.ofNullable($interface);
            return this;
        }

        public Builder setLabelFingerprint(@Nullable Input<String> labelFingerprint) {
            this.labelFingerprint = labelFingerprint;
            return this;
        }

        public Builder setLabelFingerprint(@Nullable String labelFingerprint) {
            this.labelFingerprint = Input.ofNullable(labelFingerprint);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLastAttachTimestamp(@Nullable Input<String> lastAttachTimestamp) {
            this.lastAttachTimestamp = lastAttachTimestamp;
            return this;
        }

        public Builder setLastAttachTimestamp(@Nullable String lastAttachTimestamp) {
            this.lastAttachTimestamp = Input.ofNullable(lastAttachTimestamp);
            return this;
        }

        public Builder setLastDetachTimestamp(@Nullable Input<String> lastDetachTimestamp) {
            this.lastDetachTimestamp = lastDetachTimestamp;
            return this;
        }

        public Builder setLastDetachTimestamp(@Nullable String lastDetachTimestamp) {
            this.lastDetachTimestamp = Input.ofNullable(lastDetachTimestamp);
            return this;
        }

        public Builder setMultiWriter(@Nullable Input<Boolean> multiWriter) {
            this.multiWriter = multiWriter;
            return this;
        }

        public Builder setMultiWriter(@Nullable Boolean multiWriter) {
            this.multiWriter = Input.ofNullable(multiWriter);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPhysicalBlockSizeBytes(@Nullable Input<Integer> physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }

        public Builder setPhysicalBlockSizeBytes(@Nullable Integer physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = Input.ofNullable(physicalBlockSizeBytes);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setProvisionedIops(@Nullable Input<Integer> provisionedIops) {
            this.provisionedIops = provisionedIops;
            return this;
        }

        public Builder setProvisionedIops(@Nullable Integer provisionedIops) {
            this.provisionedIops = Input.ofNullable(provisionedIops);
            return this;
        }

        public Builder setResourcePolicies(@Nullable Input<List<String>> resourcePolicies) {
            this.resourcePolicies = resourcePolicies;
            return this;
        }

        public Builder setResourcePolicies(@Nullable List<String> resourcePolicies) {
            this.resourcePolicies = Input.ofNullable(resourcePolicies);
            return this;
        }

        public Builder setSelfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder setSelfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder setSize(@Nullable Input<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder setSize(@Nullable Integer size) {
            this.size = Input.ofNullable(size);
            return this;
        }

        public Builder setSnapshot(@Nullable Input<String> snapshot) {
            this.snapshot = snapshot;
            return this;
        }

        public Builder setSnapshot(@Nullable String snapshot) {
            this.snapshot = Input.ofNullable(snapshot);
            return this;
        }

        public Builder setSourceImageEncryptionKey(@Nullable Input<DiskSourceImageEncryptionKeyGetArgs> sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }

        public Builder setSourceImageEncryptionKey(@Nullable DiskSourceImageEncryptionKeyGetArgs sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = Input.ofNullable(sourceImageEncryptionKey);
            return this;
        }

        public Builder setSourceImageId(@Nullable Input<String> sourceImageId) {
            this.sourceImageId = sourceImageId;
            return this;
        }

        public Builder setSourceImageId(@Nullable String sourceImageId) {
            this.sourceImageId = Input.ofNullable(sourceImageId);
            return this;
        }

        public Builder setSourceSnapshotEncryptionKey(@Nullable Input<DiskSourceSnapshotEncryptionKeyGetArgs> sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        public Builder setSourceSnapshotEncryptionKey(@Nullable DiskSourceSnapshotEncryptionKeyGetArgs sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = Input.ofNullable(sourceSnapshotEncryptionKey);
            return this;
        }

        public Builder setSourceSnapshotId(@Nullable Input<String> sourceSnapshotId) {
            this.sourceSnapshotId = sourceSnapshotId;
            return this;
        }

        public Builder setSourceSnapshotId(@Nullable String sourceSnapshotId) {
            this.sourceSnapshotId = Input.ofNullable(sourceSnapshotId);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setUsers(@Nullable Input<List<String>> users) {
            this.users = users;
            return this;
        }

        public Builder setUsers(@Nullable List<String> users) {
            this.users = Input.ofNullable(users);
            return this;
        }

        public Builder setZone(@Nullable Input<String> zone) {
            this.zone = zone;
            return this;
        }

        public Builder setZone(@Nullable String zone) {
            this.zone = Input.ofNullable(zone);
            return this;
        }

        public DiskState build() {
            return new DiskState(creationTimestamp, description, diskEncryptionKey, image, $interface, labelFingerprint, labels, lastAttachTimestamp, lastDetachTimestamp, multiWriter, name, physicalBlockSizeBytes, project, provisionedIops, resourcePolicies, selfLink, size, snapshot, sourceImageEncryptionKey, sourceImageId, sourceSnapshotEncryptionKey, sourceSnapshotId, type, users, zone);
        }
    }
}
