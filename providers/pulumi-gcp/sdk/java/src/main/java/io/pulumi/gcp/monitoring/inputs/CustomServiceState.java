// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.monitoring.inputs.CustomServiceTelemetryGetArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomServiceState extends io.pulumi.resources.ResourceArgs {

    public static final CustomServiceState Empty = new CustomServiceState();

    /**
     * Name used for UI elements listing this Service.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * An optional service ID to use. If not given, the server will generate a
     * service ID.
     * 
     */
    @InputImport(name="serviceId")
      private final @Nullable Output<String> serviceId;

    public Output<String> getServiceId() {
        return this.serviceId == null ? Output.empty() : this.serviceId;
    }

    /**
     * Configuration for how to query telemetry on a Service.
     * Structure is documented below.
     * 
     */
    @InputImport(name="telemetry")
      private final @Nullable Output<CustomServiceTelemetryGetArgs> telemetry;

    public Output<CustomServiceTelemetryGetArgs> getTelemetry() {
        return this.telemetry == null ? Output.empty() : this.telemetry;
    }

    public CustomServiceState(
        @Nullable Output<String> displayName,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> serviceId,
        @Nullable Output<CustomServiceTelemetryGetArgs> telemetry) {
        this.displayName = displayName;
        this.name = name;
        this.project = project;
        this.serviceId = serviceId;
        this.telemetry = telemetry;
    }

    private CustomServiceState() {
        this.displayName = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.serviceId = Output.empty();
        this.telemetry = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> serviceId;
        private @Nullable Output<CustomServiceTelemetryGetArgs> telemetry;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomServiceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.serviceId = defaults.serviceId;
    	      this.telemetry = defaults.telemetry;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder serviceId(@Nullable Output<String> serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        public Builder serviceId(@Nullable String serviceId) {
            this.serviceId = Output.ofNullable(serviceId);
            return this;
        }

        public Builder telemetry(@Nullable Output<CustomServiceTelemetryGetArgs> telemetry) {
            this.telemetry = telemetry;
            return this;
        }

        public Builder telemetry(@Nullable CustomServiceTelemetryGetArgs telemetry) {
            this.telemetry = Output.ofNullable(telemetry);
            return this;
        }
        public CustomServiceState build() {
            return new CustomServiceState(displayName, name, project, serviceId, telemetry);
        }
    }
}
