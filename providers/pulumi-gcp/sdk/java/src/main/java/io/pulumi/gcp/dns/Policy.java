// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dns;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.dns.PolicyArgs;
import io.pulumi.gcp.dns.inputs.PolicyState;
import io.pulumi.gcp.dns.outputs.PolicyAlternativeNameServerConfig;
import io.pulumi.gcp.dns.outputs.PolicyNetwork;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A policy is a collection of DNS rules applied to one or more Virtual
 * Private Cloud resources.
 * 
 * To get more information about Policy, see:
 * 
 * * [API documentation](https://cloud.google.com/dns/docs/reference/v1beta2/policies)
 * * How-to Guides
 *     * [Using DNS server policies](https://cloud.google.com/dns/zones/#using-dns-server-policies)
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Dns Policy Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network_1 = new gcp.compute.Network("network-1", {autoCreateSubnetworks: false});
 * const network_2 = new gcp.compute.Network("network-2", {autoCreateSubnetworks: false});
 * const example_policy = new gcp.dns.Policy("example-policy", {
 *     enableInboundForwarding: true,
 *     enableLogging: true,
 *     alternativeNameServerConfig: {
 *         targetNameServers: [
 *             {
 *                 ipv4Address: "172.16.1.10",
 *                 forwardingPath: "private",
 *             },
 *             {
 *                 ipv4Address: "172.16.1.20",
 *             },
 *         ],
 *     },
 *     networks: [
 *         {
 *             networkUrl: network_1.id,
 *         },
 *         {
 *             networkUrl: network_2.id,
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
 * network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
 * example_policy = gcp.dns.Policy("example-policy",
 *     enable_inbound_forwarding=True,
 *     enable_logging=True,
 *     alternative_name_server_config=gcp.dns.PolicyAlternativeNameServerConfigArgs(
 *         target_name_servers=[
 *             gcp.dns.PolicyAlternativeNameServerConfigTargetNameServerArgs(
 *                 ipv4_address="172.16.1.10",
 *                 forwarding_path="private",
 *             ),
 *             gcp.dns.PolicyAlternativeNameServerConfigTargetNameServerArgs(
 *                 ipv4_address="172.16.1.20",
 *             ),
 *         ],
 *     ),
 *     networks=[
 *         gcp.dns.PolicyNetworkArgs(
 *             network_url=network_1.id,
 *         ),
 *         gcp.dns.PolicyNetworkArgs(
 *             network_url=network_2.id,
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network_1 = new Gcp.Compute.Network("network-1", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var network_2 = new Gcp.Compute.Network("network-2", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var example_policy = new Gcp.Dns.Policy("example-policy", new Gcp.Dns.PolicyArgs
 *         {
 *             EnableInboundForwarding = true,
 *             EnableLogging = true,
 *             AlternativeNameServerConfig = new Gcp.Dns.Inputs.PolicyAlternativeNameServerConfigArgs
 *             {
 *                 TargetNameServers = 
 *                 {
 *                     new Gcp.Dns.Inputs.PolicyAlternativeNameServerConfigTargetNameServerArgs
 *                     {
 *                         Ipv4Address = "172.16.1.10",
 *                         ForwardingPath = "private",
 *                     },
 *                     new Gcp.Dns.Inputs.PolicyAlternativeNameServerConfigTargetNameServerArgs
 *                     {
 *                         Ipv4Address = "172.16.1.20",
 *                     },
 *                 },
 *             },
 *             Networks = 
 *             {
 *                 new Gcp.Dns.Inputs.PolicyNetworkArgs
 *                 {
 *                     NetworkUrl = network_1.Id,
 *                 },
 *                 new Gcp.Dns.Inputs.PolicyNetworkArgs
 *                 {
 *                     NetworkUrl = network_2.Id,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewNetwork(ctx, "network-1", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewNetwork(ctx, "network-2", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dns.NewPolicy(ctx, "example-policy", &dns.PolicyArgs{
 * 			EnableInboundForwarding: pulumi.Bool(true),
 * 			EnableLogging:           pulumi.Bool(true),
 * 			AlternativeNameServerConfig: &dns.PolicyAlternativeNameServerConfigArgs{
 * 				TargetNameServers: dns.PolicyAlternativeNameServerConfigTargetNameServerArray{
 * 					&dns.PolicyAlternativeNameServerConfigTargetNameServerArgs{
 * 						Ipv4Address:    pulumi.String("172.16.1.10"),
 * 						ForwardingPath: pulumi.String("private"),
 * 					},
 * 					&dns.PolicyAlternativeNameServerConfigTargetNameServerArgs{
 * 						Ipv4Address: pulumi.String("172.16.1.20"),
 * 					},
 * 				},
 * 			},
 * 			Networks: dns.PolicyNetworkArray{
 * 				&dns.PolicyNetworkArgs{
 * 					NetworkUrl: network_1.ID(),
 * 				},
 * 				&dns.PolicyNetworkArgs{
 * 					NetworkUrl: network_2.ID(),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Policy can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:dns/policy:Policy default projects/{{project}}/policies/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:dns/policy:Policy default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:dns/policy:Policy default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:dns/policy:Policy")
public class Policy extends io.pulumi.resources.CustomResource {
    /**
     * Sets an alternative name server for the associated networks.
     * When specified, all DNS queries are forwarded to a name server that you choose.
     * Names such as .internal are not available when an alternative name server is specified.
     * Structure is documented below.
     * 
     */
    @Export(name="alternativeNameServerConfig", type=PolicyAlternativeNameServerConfig.class, parameters={})
    private Output</* @Nullable */ PolicyAlternativeNameServerConfig> alternativeNameServerConfig;

    /**
     * @return Sets an alternative name server for the associated networks.
     * When specified, all DNS queries are forwarded to a name server that you choose.
     * Names such as .internal are not available when an alternative name server is specified.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ PolicyAlternativeNameServerConfig> getAlternativeNameServerConfig() {
        return this.alternativeNameServerConfig;
    }
    /**
     * A textual description field. Defaults to 'Managed by Pulumi'.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A textual description field. Defaults to 'Managed by Pulumi'.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Allows networks bound to this policy to receive DNS queries sent
     * by VMs or applications over VPN connections. When enabled, a
     * virtual IP address will be allocated from each of the sub-networks
     * that are bound to this policy.
     * 
     */
    @Export(name="enableInboundForwarding", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableInboundForwarding;

    /**
     * @return Allows networks bound to this policy to receive DNS queries sent
     * by VMs or applications over VPN connections. When enabled, a
     * virtual IP address will be allocated from each of the sub-networks
     * that are bound to this policy.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableInboundForwarding() {
        return this.enableInboundForwarding;
    }
    /**
     * Controls whether logging is enabled for the networks bound to this policy.
     * Defaults to no logging if not set.
     * 
     */
    @Export(name="enableLogging", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableLogging;

    /**
     * @return Controls whether logging is enabled for the networks bound to this policy.
     * Defaults to no logging if not set.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableLogging() {
        return this.enableLogging;
    }
    /**
     * User assigned name for this policy.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return User assigned name for this policy.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * List of network names specifying networks to which this policy is applied.
     * Structure is documented below.
     * 
     */
    @Export(name="networks", type=List.class, parameters={PolicyNetwork.class})
    private Output</* @Nullable */ List<PolicyNetwork>> networks;

    /**
     * @return List of network names specifying networks to which this policy is applied.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<PolicyNetwork>> getNetworks() {
        return this.networks;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Policy(String name) {
        this(name, PolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Policy(String name, @Nullable PolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Policy(String name, @Nullable PolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dns/policy:Policy", name, args == null ? PolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Policy(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dns/policy:Policy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Policy get(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Policy(name, id, state, options);
    }
}
