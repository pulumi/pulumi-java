// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.dns.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.dns.inputs.PolicyAlternativeNameServerConfigTargetNameServerArgs;
import java.util.List;
import java.util.Objects;


public final class PolicyAlternativeNameServerConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyAlternativeNameServerConfigArgs Empty = new PolicyAlternativeNameServerConfigArgs();

    /**
     * Sets an alternative name server for the associated networks. When specified,
     * all DNS queries are forwarded to a name server that you choose. Names such as .internal
     * are not available when an alternative name server is specified.
     * Structure is documented below.
     * 
     */
    @Import(name="targetNameServers", required=true)
      private final Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers;

    public Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers() {
        return this.targetNameServers;
    }

    public PolicyAlternativeNameServerConfigArgs(Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers) {
        this.targetNameServers = Objects.requireNonNull(targetNameServers, "expected parameter 'targetNameServers' to be non-null");
    }

    private PolicyAlternativeNameServerConfigArgs() {
        this.targetNameServers = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyAlternativeNameServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyAlternativeNameServerConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.targetNameServers = defaults.targetNameServers;
        }

        public Builder targetNameServers(Output<List<PolicyAlternativeNameServerConfigTargetNameServerArgs>> targetNameServers) {
            this.targetNameServers = Objects.requireNonNull(targetNameServers);
            return this;
        }
        public Builder targetNameServers(List<PolicyAlternativeNameServerConfigTargetNameServerArgs> targetNameServers) {
            this.targetNameServers = Output.of(Objects.requireNonNull(targetNameServers));
            return this;
        }
        public Builder targetNameServers(PolicyAlternativeNameServerConfigTargetNameServerArgs... targetNameServers) {
            return targetNameServers(List.of(targetNameServers));
        }        public PolicyAlternativeNameServerConfigArgs build() {
            return new PolicyAlternativeNameServerConfigArgs(targetNameServers);
        }
    }
}
