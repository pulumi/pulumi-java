// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.compute.outputs.URLMapPathMatcherDefaultRouteAction;
import io.pulumi.gcp.compute.outputs.URLMapPathMatcherDefaultUrlRedirect;
import io.pulumi.gcp.compute.outputs.URLMapPathMatcherHeaderAction;
import io.pulumi.gcp.compute.outputs.URLMapPathMatcherPathRule;
import io.pulumi.gcp.compute.outputs.URLMapPathMatcherRouteRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class URLMapPathMatcher {
    private final @Nullable URLMapPathMatcherDefaultRouteAction defaultRouteAction;
    private final @Nullable String defaultService;
    private final @Nullable URLMapPathMatcherDefaultUrlRedirect defaultUrlRedirect;
    private final @Nullable String description;
    private final @Nullable URLMapPathMatcherHeaderAction headerAction;
    private final String name;
    private final @Nullable List<URLMapPathMatcherPathRule> pathRules;
    private final @Nullable List<URLMapPathMatcherRouteRule> routeRules;

    @OutputCustomType.Constructor({"defaultRouteAction","defaultService","defaultUrlRedirect","description","headerAction","name","pathRules","routeRules"})
    private URLMapPathMatcher(
        @Nullable URLMapPathMatcherDefaultRouteAction defaultRouteAction,
        @Nullable String defaultService,
        @Nullable URLMapPathMatcherDefaultUrlRedirect defaultUrlRedirect,
        @Nullable String description,
        @Nullable URLMapPathMatcherHeaderAction headerAction,
        String name,
        @Nullable List<URLMapPathMatcherPathRule> pathRules,
        @Nullable List<URLMapPathMatcherRouteRule> routeRules) {
        this.defaultRouteAction = defaultRouteAction;
        this.defaultService = defaultService;
        this.defaultUrlRedirect = defaultUrlRedirect;
        this.description = description;
        this.headerAction = headerAction;
        this.name = Objects.requireNonNull(name);
        this.pathRules = pathRules;
        this.routeRules = routeRules;
    }

    public Optional<URLMapPathMatcherDefaultRouteAction> getDefaultRouteAction() {
        return Optional.ofNullable(this.defaultRouteAction);
    }
    public Optional<String> getDefaultService() {
        return Optional.ofNullable(this.defaultService);
    }
    public Optional<URLMapPathMatcherDefaultUrlRedirect> getDefaultUrlRedirect() {
        return Optional.ofNullable(this.defaultUrlRedirect);
    }
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    public Optional<URLMapPathMatcherHeaderAction> getHeaderAction() {
        return Optional.ofNullable(this.headerAction);
    }
    public String getName() {
        return this.name;
    }
    public List<URLMapPathMatcherPathRule> getPathRules() {
        return this.pathRules == null ? List.of() : this.pathRules;
    }
    public List<URLMapPathMatcherRouteRule> getRouteRules() {
        return this.routeRules == null ? List.of() : this.routeRules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapPathMatcher defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable URLMapPathMatcherDefaultRouteAction defaultRouteAction;
        private @Nullable String defaultService;
        private @Nullable URLMapPathMatcherDefaultUrlRedirect defaultUrlRedirect;
        private @Nullable String description;
        private @Nullable URLMapPathMatcherHeaderAction headerAction;
        private String name;
        private @Nullable List<URLMapPathMatcherPathRule> pathRules;
        private @Nullable List<URLMapPathMatcherRouteRule> routeRules;

        public Builder() {
    	      // Empty
        }

        public Builder(URLMapPathMatcher defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultRouteAction = defaults.defaultRouteAction;
    	      this.defaultService = defaults.defaultService;
    	      this.defaultUrlRedirect = defaults.defaultUrlRedirect;
    	      this.description = defaults.description;
    	      this.headerAction = defaults.headerAction;
    	      this.name = defaults.name;
    	      this.pathRules = defaults.pathRules;
    	      this.routeRules = defaults.routeRules;
        }

        public Builder setDefaultRouteAction(@Nullable URLMapPathMatcherDefaultRouteAction defaultRouteAction) {
            this.defaultRouteAction = defaultRouteAction;
            return this;
        }

        public Builder setDefaultService(@Nullable String defaultService) {
            this.defaultService = defaultService;
            return this;
        }

        public Builder setDefaultUrlRedirect(@Nullable URLMapPathMatcherDefaultUrlRedirect defaultUrlRedirect) {
            this.defaultUrlRedirect = defaultUrlRedirect;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setHeaderAction(@Nullable URLMapPathMatcherHeaderAction headerAction) {
            this.headerAction = headerAction;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPathRules(@Nullable List<URLMapPathMatcherPathRule> pathRules) {
            this.pathRules = pathRules;
            return this;
        }

        public Builder setRouteRules(@Nullable List<URLMapPathMatcherRouteRule> routeRules) {
            this.routeRules = routeRules;
            return this;
        }

        public URLMapPathMatcher build() {
            return new URLMapPathMatcher(defaultRouteAction, defaultService, defaultUrlRedirect, description, headerAction, name, pathRules, routeRules);
        }
    }
}
