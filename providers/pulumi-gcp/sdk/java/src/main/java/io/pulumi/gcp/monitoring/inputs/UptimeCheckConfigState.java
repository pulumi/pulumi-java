// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigContentMatcherGetArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigHttpCheckGetArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigMonitoredResourceGetArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigResourceGroupGetArgs;
import io.pulumi.gcp.monitoring.inputs.UptimeCheckConfigTcpCheckGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UptimeCheckConfigState extends io.pulumi.resources.ResourceArgs {

    public static final UptimeCheckConfigState Empty = new UptimeCheckConfigState();

    /**
     * The expected content on the page the check is run against. Currently, only the first entry in the list is supported, and other entries will be ignored. The server will look for an exact match of the string in the page response's content. This field is optional and should only be specified if a content match is required.
     * Structure is documented below.
     * 
     */
    @InputImport(name="contentMatchers")
    private final @Nullable Input<List<UptimeCheckConfigContentMatcherGetArgs>> contentMatchers;

    public Input<List<UptimeCheckConfigContentMatcherGetArgs>> getContentMatchers() {
        return this.contentMatchers == null ? Input.empty() : this.contentMatchers;
    }

    /**
     * A human-friendly name for the uptime check configuration. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * Contains information needed to make an HTTP or HTTPS check.
     * Structure is documented below.
     * 
     */
    @InputImport(name="httpCheck")
    private final @Nullable Input<UptimeCheckConfigHttpCheckGetArgs> httpCheck;

    public Input<UptimeCheckConfigHttpCheckGetArgs> getHttpCheck() {
        return this.httpCheck == null ? Input.empty() : this.httpCheck;
    }

    /**
     * The monitored resource (https://cloud.google.com/monitoring/api/resources) associated with the configuration. The following monitored resource types are supported for uptime checks:  uptime_url  gce_instance  gae_app  aws_ec2_instance  aws_elb_load_balancer
     * Structure is documented below.
     * 
     */
    @InputImport(name="monitoredResource")
    private final @Nullable Input<UptimeCheckConfigMonitoredResourceGetArgs> monitoredResource;

    public Input<UptimeCheckConfigMonitoredResourceGetArgs> getMonitoredResource() {
        return this.monitoredResource == null ? Input.empty() : this.monitoredResource;
    }

    /**
     * A unique resource name for this UptimeCheckConfig. The format is
     * projects/[PROJECT_ID]/uptimeCheckConfigs/[UPTIME_CHECK_ID].
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * How often, in seconds, the uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 300s.
     * 
     */
    @InputImport(name="period")
    private final @Nullable Input<String> period;

    public Input<String> getPeriod() {
        return this.period == null ? Input.empty() : this.period;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The group resource associated with the configuration.
     * Structure is documented below.
     * 
     */
    @InputImport(name="resourceGroup")
    private final @Nullable Input<UptimeCheckConfigResourceGroupGetArgs> resourceGroup;

    public Input<UptimeCheckConfigResourceGroupGetArgs> getResourceGroup() {
        return this.resourceGroup == null ? Input.empty() : this.resourceGroup;
    }

    /**
     * The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions to include a minimum of 3 locations must be provided, or an error message is returned. Not specifying this field will result in uptime checks running from all regions.
     * 
     */
    @InputImport(name="selectedRegions")
    private final @Nullable Input<List<String>> selectedRegions;

    public Input<List<String>> getSelectedRegions() {
        return this.selectedRegions == null ? Input.empty() : this.selectedRegions;
    }

    /**
     * Contains information needed to make a TCP check.
     * Structure is documented below.
     * 
     */
    @InputImport(name="tcpCheck")
    private final @Nullable Input<UptimeCheckConfigTcpCheckGetArgs> tcpCheck;

    public Input<UptimeCheckConfigTcpCheckGetArgs> getTcpCheck() {
        return this.tcpCheck == null ? Input.empty() : this.tcpCheck;
    }

    /**
     * The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). Accepted formats https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration
     * 
     */
    @InputImport(name="timeout")
    private final @Nullable Input<String> timeout;

    public Input<String> getTimeout() {
        return this.timeout == null ? Input.empty() : this.timeout;
    }

    /**
     * The id of the uptime check
     * 
     */
    @InputImport(name="uptimeCheckId")
    private final @Nullable Input<String> uptimeCheckId;

    public Input<String> getUptimeCheckId() {
        return this.uptimeCheckId == null ? Input.empty() : this.uptimeCheckId;
    }

    public UptimeCheckConfigState(
        @Nullable Input<List<UptimeCheckConfigContentMatcherGetArgs>> contentMatchers,
        @Nullable Input<String> displayName,
        @Nullable Input<UptimeCheckConfigHttpCheckGetArgs> httpCheck,
        @Nullable Input<UptimeCheckConfigMonitoredResourceGetArgs> monitoredResource,
        @Nullable Input<String> name,
        @Nullable Input<String> period,
        @Nullable Input<String> project,
        @Nullable Input<UptimeCheckConfigResourceGroupGetArgs> resourceGroup,
        @Nullable Input<List<String>> selectedRegions,
        @Nullable Input<UptimeCheckConfigTcpCheckGetArgs> tcpCheck,
        @Nullable Input<String> timeout,
        @Nullable Input<String> uptimeCheckId) {
        this.contentMatchers = contentMatchers;
        this.displayName = displayName;
        this.httpCheck = httpCheck;
        this.monitoredResource = monitoredResource;
        this.name = name;
        this.period = period;
        this.project = project;
        this.resourceGroup = resourceGroup;
        this.selectedRegions = selectedRegions;
        this.tcpCheck = tcpCheck;
        this.timeout = timeout;
        this.uptimeCheckId = uptimeCheckId;
    }

    private UptimeCheckConfigState() {
        this.contentMatchers = Input.empty();
        this.displayName = Input.empty();
        this.httpCheck = Input.empty();
        this.monitoredResource = Input.empty();
        this.name = Input.empty();
        this.period = Input.empty();
        this.project = Input.empty();
        this.resourceGroup = Input.empty();
        this.selectedRegions = Input.empty();
        this.tcpCheck = Input.empty();
        this.timeout = Input.empty();
        this.uptimeCheckId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UptimeCheckConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<UptimeCheckConfigContentMatcherGetArgs>> contentMatchers;
        private @Nullable Input<String> displayName;
        private @Nullable Input<UptimeCheckConfigHttpCheckGetArgs> httpCheck;
        private @Nullable Input<UptimeCheckConfigMonitoredResourceGetArgs> monitoredResource;
        private @Nullable Input<String> name;
        private @Nullable Input<String> period;
        private @Nullable Input<String> project;
        private @Nullable Input<UptimeCheckConfigResourceGroupGetArgs> resourceGroup;
        private @Nullable Input<List<String>> selectedRegions;
        private @Nullable Input<UptimeCheckConfigTcpCheckGetArgs> tcpCheck;
        private @Nullable Input<String> timeout;
        private @Nullable Input<String> uptimeCheckId;

        public Builder() {
    	      // Empty
        }

        public Builder(UptimeCheckConfigState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentMatchers = defaults.contentMatchers;
    	      this.displayName = defaults.displayName;
    	      this.httpCheck = defaults.httpCheck;
    	      this.monitoredResource = defaults.monitoredResource;
    	      this.name = defaults.name;
    	      this.period = defaults.period;
    	      this.project = defaults.project;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.selectedRegions = defaults.selectedRegions;
    	      this.tcpCheck = defaults.tcpCheck;
    	      this.timeout = defaults.timeout;
    	      this.uptimeCheckId = defaults.uptimeCheckId;
        }

        public Builder setContentMatchers(@Nullable Input<List<UptimeCheckConfigContentMatcherGetArgs>> contentMatchers) {
            this.contentMatchers = contentMatchers;
            return this;
        }

        public Builder setContentMatchers(@Nullable List<UptimeCheckConfigContentMatcherGetArgs> contentMatchers) {
            this.contentMatchers = Input.ofNullable(contentMatchers);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setHttpCheck(@Nullable Input<UptimeCheckConfigHttpCheckGetArgs> httpCheck) {
            this.httpCheck = httpCheck;
            return this;
        }

        public Builder setHttpCheck(@Nullable UptimeCheckConfigHttpCheckGetArgs httpCheck) {
            this.httpCheck = Input.ofNullable(httpCheck);
            return this;
        }

        public Builder setMonitoredResource(@Nullable Input<UptimeCheckConfigMonitoredResourceGetArgs> monitoredResource) {
            this.monitoredResource = monitoredResource;
            return this;
        }

        public Builder setMonitoredResource(@Nullable UptimeCheckConfigMonitoredResourceGetArgs monitoredResource) {
            this.monitoredResource = Input.ofNullable(monitoredResource);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPeriod(@Nullable Input<String> period) {
            this.period = period;
            return this;
        }

        public Builder setPeriod(@Nullable String period) {
            this.period = Input.ofNullable(period);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setResourceGroup(@Nullable Input<UptimeCheckConfigResourceGroupGetArgs> resourceGroup) {
            this.resourceGroup = resourceGroup;
            return this;
        }

        public Builder setResourceGroup(@Nullable UptimeCheckConfigResourceGroupGetArgs resourceGroup) {
            this.resourceGroup = Input.ofNullable(resourceGroup);
            return this;
        }

        public Builder setSelectedRegions(@Nullable Input<List<String>> selectedRegions) {
            this.selectedRegions = selectedRegions;
            return this;
        }

        public Builder setSelectedRegions(@Nullable List<String> selectedRegions) {
            this.selectedRegions = Input.ofNullable(selectedRegions);
            return this;
        }

        public Builder setTcpCheck(@Nullable Input<UptimeCheckConfigTcpCheckGetArgs> tcpCheck) {
            this.tcpCheck = tcpCheck;
            return this;
        }

        public Builder setTcpCheck(@Nullable UptimeCheckConfigTcpCheckGetArgs tcpCheck) {
            this.tcpCheck = Input.ofNullable(tcpCheck);
            return this;
        }

        public Builder setTimeout(@Nullable Input<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = Input.ofNullable(timeout);
            return this;
        }

        public Builder setUptimeCheckId(@Nullable Input<String> uptimeCheckId) {
            this.uptimeCheckId = uptimeCheckId;
            return this;
        }

        public Builder setUptimeCheckId(@Nullable String uptimeCheckId) {
            this.uptimeCheckId = Input.ofNullable(uptimeCheckId);
            return this;
        }

        public UptimeCheckConfigState build() {
            return new UptimeCheckConfigState(contentMatchers, displayName, httpCheck, monitoredResource, name, period, project, resourceGroup, selectedRegions, tcpCheck, timeout, uptimeCheckId);
        }
    }
}
