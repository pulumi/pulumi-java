// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.firebase.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetWebAppConfigResult {
    private final String apiKey;
    private final String authDomain;
    private final String databaseUrl;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String locationId;
    private final String measurementId;
    private final String messagingSenderId;
    private final @Nullable String project;
    private final String storageBucket;
    private final String webAppId;

    @OutputCustomType.Constructor
    private GetWebAppConfigResult(
        @OutputCustomType.Parameter("apiKey") String apiKey,
        @OutputCustomType.Parameter("authDomain") String authDomain,
        @OutputCustomType.Parameter("databaseUrl") String databaseUrl,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("locationId") String locationId,
        @OutputCustomType.Parameter("measurementId") String measurementId,
        @OutputCustomType.Parameter("messagingSenderId") String messagingSenderId,
        @OutputCustomType.Parameter("project") @Nullable String project,
        @OutputCustomType.Parameter("storageBucket") String storageBucket,
        @OutputCustomType.Parameter("webAppId") String webAppId) {
        this.apiKey = apiKey;
        this.authDomain = authDomain;
        this.databaseUrl = databaseUrl;
        this.id = id;
        this.locationId = locationId;
        this.measurementId = measurementId;
        this.messagingSenderId = messagingSenderId;
        this.project = project;
        this.storageBucket = storageBucket;
        this.webAppId = webAppId;
    }

    public String getApiKey() {
        return this.apiKey;
    }
    public String getAuthDomain() {
        return this.authDomain;
    }
    public String getDatabaseUrl() {
        return this.databaseUrl;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    public String getLocationId() {
        return this.locationId;
    }
    public String getMeasurementId() {
        return this.measurementId;
    }
    public String getMessagingSenderId() {
        return this.messagingSenderId;
    }
    public Optional<String> getProject() {
        return Optional.ofNullable(this.project);
    }
    public String getStorageBucket() {
        return this.storageBucket;
    }
    public String getWebAppId() {
        return this.webAppId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppConfigResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String apiKey;
        private String authDomain;
        private String databaseUrl;
        private String id;
        private String locationId;
        private String measurementId;
        private String messagingSenderId;
        private @Nullable String project;
        private String storageBucket;
        private String webAppId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWebAppConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.authDomain = defaults.authDomain;
    	      this.databaseUrl = defaults.databaseUrl;
    	      this.id = defaults.id;
    	      this.locationId = defaults.locationId;
    	      this.measurementId = defaults.measurementId;
    	      this.messagingSenderId = defaults.messagingSenderId;
    	      this.project = defaults.project;
    	      this.storageBucket = defaults.storageBucket;
    	      this.webAppId = defaults.webAppId;
        }

        public Builder apiKey(String apiKey) {
            this.apiKey = Objects.requireNonNull(apiKey);
            return this;
        }

        public Builder authDomain(String authDomain) {
            this.authDomain = Objects.requireNonNull(authDomain);
            return this;
        }

        public Builder databaseUrl(String databaseUrl) {
            this.databaseUrl = Objects.requireNonNull(databaseUrl);
            return this;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Objects.requireNonNull(locationId);
            return this;
        }

        public Builder measurementId(String measurementId) {
            this.measurementId = Objects.requireNonNull(measurementId);
            return this;
        }

        public Builder messagingSenderId(String messagingSenderId) {
            this.messagingSenderId = Objects.requireNonNull(messagingSenderId);
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }

        public Builder storageBucket(String storageBucket) {
            this.storageBucket = Objects.requireNonNull(storageBucket);
            return this;
        }

        public Builder webAppId(String webAppId) {
            this.webAppId = Objects.requireNonNull(webAppId);
            return this;
        }
        public GetWebAppConfigResult build() {
            return new GetWebAppConfigResult(apiKey, authDomain, databaseUrl, id, locationId, measurementId, messagingSenderId, project, storageBucket, webAppId);
        }
    }
}
