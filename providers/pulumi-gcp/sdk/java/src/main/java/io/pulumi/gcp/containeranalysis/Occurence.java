// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.containeranalysis;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.containeranalysis.OccurenceArgs;
import io.pulumi.gcp.containeranalysis.inputs.OccurenceState;
import io.pulumi.gcp.containeranalysis.outputs.OccurenceAttestation;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * An occurrence is an instance of a Note, or type of analysis that
 * can be done for a resource.
 * 
 * 
 * To get more information about Occurrence, see:
 * 
 * * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/container-analysis/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Container Analysis Occurrence Kms
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const note = new gcp.containeranalysis.Note("note", {attestationAuthority: {
 *     hint: {
 *         humanReadableName: "Attestor Note",
 *     },
 * }});
 * const keyring = gcp.kms.getKMSKeyRing({
 *     name: "my-key-ring",
 *     location: "global",
 * });
 * const crypto-key = keyring.then(keyring => gcp.kms.getKMSCryptoKey({
 *     name: "my-key",
 *     keyRing: keyring.id,
 * }));
 * const version = crypto_key.then(crypto_key => gcp.kms.getKMSCryptoKeyVersion({
 *     cryptoKey: crypto_key.id,
 * }));
 * const attestor = new gcp.binaryauthorization.Attestor("attestor", {attestationAuthorityNote: {
 *     noteReference: note.name,
 *     publicKeys: [{
 *         id: version.then(version => version.id),
 *         pkixPublicKey: {
 *             publicKeyPem: version.then(version => version.publicKeys?[0]?.pem),
 *             signatureAlgorithm: version.then(version => version.publicKeys?[0]?.algorithm),
 *         },
 *     }],
 * }});
 * const occurrence = new gcp.containeranalysis.Occurence("occurrence", {
 *     resourceUri: "gcr.io/my-project/my-image",
 *     noteName: note.id,
 *     attestation: {
 *         serializedPayload: Buffer.from(fs.readFileSync("path/to/my/payload.json"), 'binary').toString('base64'),
 *         signatures: [{
 *             publicKeyId: version.then(version => version.id),
 *             serializedPayload: Buffer.from(fs.readFileSync("path/to/my/payload.json.sig"), 'binary').toString('base64'),
 *         }],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import base64
 * import pulumi_gcp as gcp
 * 
 * note = gcp.containeranalysis.Note("note", attestation_authority=gcp.containeranalysis.NoteAttestationAuthorityArgs(
 *     hint=gcp.containeranalysis.NoteAttestationAuthorityHintArgs(
 *         human_readable_name="Attestor Note",
 *     ),
 * ))
 * keyring = gcp.kms.get_kms_key_ring(name="my-key-ring",
 *     location="global")
 * crypto_key = gcp.kms.get_kms_crypto_key(name="my-key",
 *     key_ring=keyring.id)
 * version = gcp.kms.get_kms_crypto_key_version(crypto_key=crypto_key.id)
 * attestor = gcp.binaryauthorization.Attestor("attestor", attestation_authority_note=gcp.binaryauthorization.AttestorAttestationAuthorityNoteArgs(
 *     note_reference=note.name,
 *     public_keys=[gcp.binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArgs(
 *         id=version.id,
 *         pkix_public_key=gcp.binaryauthorization.AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs(
 *             public_key_pem=version.public_keys[0].pem,
 *             signature_algorithm=version.public_keys[0].algorithm,
 *         ),
 *     )],
 * ))
 * occurrence = gcp.containeranalysis.Occurence("occurrence",
 *     resource_uri="gcr.io/my-project/my-image",
 *     note_name=note.id,
 *     attestation=gcp.containeranalysis.OccurenceAttestationArgs(
 *         serialized_payload=(lambda path: base64.b64encode(open(path).read().encode()).decode())("path/to/my/payload.json"),
 *         signatures=[gcp.containeranalysis.OccurenceAttestationSignatureArgs(
 *             public_key_id=version.id,
 *             serialized_payload=(lambda path: base64.b64encode(open(path).read().encode()).decode())("path/to/my/payload.json.sig"),
 *         )],
 *     ))
 * ```
 * ```csharp
 * using System;
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 * 	private static string ReadFileBase64(string path) {
 * 		return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)))
 * 	}
 * 
 *     public MyStack()
 *     {
 *         var note = new Gcp.ContainerAnalysis.Note("note", new Gcp.ContainerAnalysis.NoteArgs
 *         {
 *             AttestationAuthority = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityArgs
 *             {
 *                 Hint = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityHintArgs
 *                 {
 *                     HumanReadableName = "Attestor Note",
 *                 },
 *             },
 *         });
 *         var keyring = Output.Create(Gcp.Kms.GetKMSKeyRing.InvokeAsync(new Gcp.Kms.GetKMSKeyRingArgs
 *         {
 *             Name = "my-key-ring",
 *             Location = "global",
 *         }));
 *         var crypto_key = keyring.Apply(keyring => Output.Create(Gcp.Kms.GetKMSCryptoKey.InvokeAsync(new Gcp.Kms.GetKMSCryptoKeyArgs
 *         {
 *             Name = "my-key",
 *             KeyRing = keyring.Id,
 *         })));
 *         var version = crypto_key.Apply(crypto_key => Output.Create(Gcp.Kms.GetKMSCryptoKeyVersion.InvokeAsync(new Gcp.Kms.GetKMSCryptoKeyVersionArgs
 *         {
 *             CryptoKey = crypto_key.Id,
 *         })));
 *         var attestor = new Gcp.BinaryAuthorization.Attestor("attestor", new Gcp.BinaryAuthorization.AttestorArgs
 *         {
 *             AttestationAuthorityNote = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNoteArgs
 *             {
 *                 NoteReference = note.Name,
 *                 PublicKeys = 
 *                 {
 *                     new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNotePublicKeyArgs
 *                     {
 *                         Id = version.Apply(version => version.Id),
 *                         PkixPublicKey = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs
 *                         {
 *                             PublicKeyPem = version.Apply(version => version.PublicKeys?[0]?.Pem),
 *                             SignatureAlgorithm = version.Apply(version => version.PublicKeys?[0]?.Algorithm),
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var occurrence = new Gcp.ContainerAnalysis.Occurence("occurrence", new Gcp.ContainerAnalysis.OccurenceArgs
 *         {
 *             ResourceUri = "gcr.io/my-project/my-image",
 *             NoteName = note.Id,
 *             Attestation = new Gcp.ContainerAnalysis.Inputs.OccurenceAttestationArgs
 *             {
 *                 SerializedPayload = ReadFileBase64("path/to/my/payload.json"),
 *                 Signatures = 
 *                 {
 *                     new Gcp.ContainerAnalysis.Inputs.OccurenceAttestationSignatureArgs
 *                     {
 *                         PublicKeyId = version.Apply(version => version.Id),
 *                         SerializedPayload = ReadFileBase64("path/to/my/payload.json.sig"),
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/base64"
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/binaryauthorization"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/containeranalysis"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func filebase64OrPanic(path string) pulumi.StringPtrInput {
 * 	if fileData, err := ioutil.ReadFile(path); err == nil {
 * 		return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
 * 	} else {
 * 		panic(err.Error())
 * 	}
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		note, err := containeranalysis.NewNote(ctx, "note", &containeranalysis.NoteArgs{
 * 			AttestationAuthority: &containeranalysis.NoteAttestationAuthorityArgs{
 * 				Hint: &containeranalysis.NoteAttestationAuthorityHintArgs{
 * 					HumanReadableName: pulumi.String("Attestor Note"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		keyring, err := kms.GetKMSKeyRing(ctx, &kms.GetKMSKeyRingArgs{
 * 			Name:     "my-key-ring",
 * 			Location: "global",
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		crypto_key, err := kms.GetKMSCryptoKey(ctx, &kms.GetKMSCryptoKeyArgs{
 * 			Name:    "my-key",
 * 			KeyRing: keyring.Id,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		version, err := kms.GetKMSCryptoKeyVersion(ctx, &kms.GetKMSCryptoKeyVersionArgs{
 * 			CryptoKey: crypto_key.Id,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = binaryauthorization.NewAttestor(ctx, "attestor", &binaryauthorization.AttestorArgs{
 * 			AttestationAuthorityNote: &binaryauthorization.AttestorAttestationAuthorityNoteArgs{
 * 				NoteReference: note.Name,
 * 				PublicKeys: binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArray{
 * 					&binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArgs{
 * 						Id: pulumi.String(version.Id),
 * 						PkixPublicKey: &binaryauthorization.AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs{
 * 							PublicKeyPem:       pulumi.String(version.PublicKeys[0].Pem),
 * 							SignatureAlgorithm: pulumi.String(version.PublicKeys[0].Algorithm),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = containeranalysis.NewOccurence(ctx, "occurrence", &containeranalysis.OccurenceArgs{
 * 			ResourceUri: pulumi.String("gcr.io/my-project/my-image"),
 * 			NoteName:    note.ID(),
 * 			Attestation: &containeranalysis.OccurenceAttestationArgs{
 * 				SerializedPayload: filebase64OrPanic("path/to/my/payload.json"),
 * 				Signatures: containeranalysis.OccurenceAttestationSignatureArray{
 * 					&containeranalysis.OccurenceAttestationSignatureArgs{
 * 						PublicKeyId:       pulumi.String(version.Id),
 * 						SerializedPayload: filebase64OrPanic("path/to/my/payload.json.sig"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Occurrence can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default projects/{{project}}/occurrences/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:containeranalysis/occurence:Occurence")
public class Occurence extends io.pulumi.resources.CustomResource {
    /**
     * Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    @Export(name="attestation", type=OccurenceAttestation.class, parameters={})
    private Output<OccurenceAttestation> attestation;

    /**
     * @return Occurrence that represents a single "attestation". The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    public Output<OccurenceAttestation> getAttestation() {
        return this.attestation;
    }
    /**
     * The time when the repository was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time when the repository was created.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     * 
     */
    public Output<String> getKind() {
        return this.kind;
    }
    /**
     * The name of the occurrence.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the occurrence.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    @Export(name="noteName", type=String.class, parameters={})
    private Output<String> noteName;

    /**
     * @return The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    public Output<String> getNoteName() {
        return this.noteName;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * A description of actions that can be taken to remedy the note.
     * 
     */
    @Export(name="remediation", type=String.class, parameters={})
    private Output</* @Nullable */ String> remediation;

    /**
     * @return A description of actions that can be taken to remedy the note.
     * 
     */
    public Output</* @Nullable */ String> getRemediation() {
        return this.remediation;
    }
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     * 
     */
    @Export(name="resourceUri", type=String.class, parameters={})
    private Output<String> resourceUri;

    /**
     * @return Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     * 
     */
    public Output<String> getResourceUri() {
        return this.resourceUri;
    }
    /**
     * The time when the repository was last updated.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The time when the repository was last updated.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Occurence(String name) {
        this(name, OccurenceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Occurence(String name, OccurenceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Occurence(String name, OccurenceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:containeranalysis/occurence:Occurence", name, args == null ? OccurenceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Occurence(String name, Output<String> id, @Nullable OccurenceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:containeranalysis/occurence:Occurence", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Occurence get(String name, Output<String> id, @Nullable OccurenceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Occurence(name, id, state, options);
    }
}
