// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs;
import io.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingDiskUtilizationArgs;
import io.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs;
import io.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingRequestUtilizationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlexibleAppVersionAutomaticScalingArgs extends io.pulumi.resources.ResourceArgs {

    public static final FlexibleAppVersionAutomaticScalingArgs Empty = new FlexibleAppVersionAutomaticScalingArgs();

    /**
     * The time period that the Autoscaler should wait before it starts collecting information from a new instance.
     * This prevents the autoscaler from collecting information when the instance is initializing,
     * during which the collected usage would not be reliable. Default: 120s
     * 
     */
    @Import(name="coolDownPeriod")
      private final @Nullable Output<String> coolDownPeriod;

    public Output<String> coolDownPeriod() {
        return this.coolDownPeriod == null ? Codegen.empty() : this.coolDownPeriod;
    }

    /**
     * Target scaling by CPU usage.
     * Structure is documented below.
     * 
     */
    @Import(name="cpuUtilization", required=true)
      private final Output<FlexibleAppVersionAutomaticScalingCpuUtilizationArgs> cpuUtilization;

    public Output<FlexibleAppVersionAutomaticScalingCpuUtilizationArgs> cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Target scaling by disk usage.
     * Structure is documented below.
     * 
     */
    @Import(name="diskUtilization")
      private final @Nullable Output<FlexibleAppVersionAutomaticScalingDiskUtilizationArgs> diskUtilization;

    public Output<FlexibleAppVersionAutomaticScalingDiskUtilizationArgs> diskUtilization() {
        return this.diskUtilization == null ? Codegen.empty() : this.diskUtilization;
    }

    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    @Import(name="maxConcurrentRequests")
      private final @Nullable Output<Integer> maxConcurrentRequests;

    public Output<Integer> maxConcurrentRequests() {
        return this.maxConcurrentRequests == null ? Codegen.empty() : this.maxConcurrentRequests;
    }

    /**
     * Maximum number of idle instances that should be maintained for this version.
     * 
     */
    @Import(name="maxIdleInstances")
      private final @Nullable Output<Integer> maxIdleInstances;

    public Output<Integer> maxIdleInstances() {
        return this.maxIdleInstances == null ? Codegen.empty() : this.maxIdleInstances;
    }

    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="maxPendingLatency")
      private final @Nullable Output<String> maxPendingLatency;

    public Output<String> maxPendingLatency() {
        return this.maxPendingLatency == null ? Codegen.empty() : this.maxPendingLatency;
    }

    /**
     * Maximum number of instances that should be started to handle requests for this version. Default: 20
     * 
     */
    @Import(name="maxTotalInstances")
      private final @Nullable Output<Integer> maxTotalInstances;

    public Output<Integer> maxTotalInstances() {
        return this.maxTotalInstances == null ? Codegen.empty() : this.maxTotalInstances;
    }

    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    @Import(name="minIdleInstances")
      private final @Nullable Output<Integer> minIdleInstances;

    public Output<Integer> minIdleInstances() {
        return this.minIdleInstances == null ? Codegen.empty() : this.minIdleInstances;
    }

    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="minPendingLatency")
      private final @Nullable Output<String> minPendingLatency;

    public Output<String> minPendingLatency() {
        return this.minPendingLatency == null ? Codegen.empty() : this.minPendingLatency;
    }

    /**
     * Minimum number of running instances that should be maintained for this version. Default: 2
     * 
     */
    @Import(name="minTotalInstances")
      private final @Nullable Output<Integer> minTotalInstances;

    public Output<Integer> minTotalInstances() {
        return this.minTotalInstances == null ? Codegen.empty() : this.minTotalInstances;
    }

    /**
     * Target scaling by network usage.
     * Structure is documented below.
     * 
     */
    @Import(name="networkUtilization")
      private final @Nullable Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs> networkUtilization;

    public Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs> networkUtilization() {
        return this.networkUtilization == null ? Codegen.empty() : this.networkUtilization;
    }

    /**
     * Target scaling by request utilization.
     * Structure is documented below.
     * 
     */
    @Import(name="requestUtilization")
      private final @Nullable Output<FlexibleAppVersionAutomaticScalingRequestUtilizationArgs> requestUtilization;

    public Output<FlexibleAppVersionAutomaticScalingRequestUtilizationArgs> requestUtilization() {
        return this.requestUtilization == null ? Codegen.empty() : this.requestUtilization;
    }

    public FlexibleAppVersionAutomaticScalingArgs(
        @Nullable Output<String> coolDownPeriod,
        Output<FlexibleAppVersionAutomaticScalingCpuUtilizationArgs> cpuUtilization,
        @Nullable Output<FlexibleAppVersionAutomaticScalingDiskUtilizationArgs> diskUtilization,
        @Nullable Output<Integer> maxConcurrentRequests,
        @Nullable Output<Integer> maxIdleInstances,
        @Nullable Output<String> maxPendingLatency,
        @Nullable Output<Integer> maxTotalInstances,
        @Nullable Output<Integer> minIdleInstances,
        @Nullable Output<String> minPendingLatency,
        @Nullable Output<Integer> minTotalInstances,
        @Nullable Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs> networkUtilization,
        @Nullable Output<FlexibleAppVersionAutomaticScalingRequestUtilizationArgs> requestUtilization) {
        this.coolDownPeriod = coolDownPeriod;
        this.cpuUtilization = Objects.requireNonNull(cpuUtilization, "expected parameter 'cpuUtilization' to be non-null");
        this.diskUtilization = diskUtilization;
        this.maxConcurrentRequests = maxConcurrentRequests;
        this.maxIdleInstances = maxIdleInstances;
        this.maxPendingLatency = maxPendingLatency;
        this.maxTotalInstances = maxTotalInstances;
        this.minIdleInstances = minIdleInstances;
        this.minPendingLatency = minPendingLatency;
        this.minTotalInstances = minTotalInstances;
        this.networkUtilization = networkUtilization;
        this.requestUtilization = requestUtilization;
    }

    private FlexibleAppVersionAutomaticScalingArgs() {
        this.coolDownPeriod = Codegen.empty();
        this.cpuUtilization = Codegen.empty();
        this.diskUtilization = Codegen.empty();
        this.maxConcurrentRequests = Codegen.empty();
        this.maxIdleInstances = Codegen.empty();
        this.maxPendingLatency = Codegen.empty();
        this.maxTotalInstances = Codegen.empty();
        this.minIdleInstances = Codegen.empty();
        this.minPendingLatency = Codegen.empty();
        this.minTotalInstances = Codegen.empty();
        this.networkUtilization = Codegen.empty();
        this.requestUtilization = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleAppVersionAutomaticScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> coolDownPeriod;
        private Output<FlexibleAppVersionAutomaticScalingCpuUtilizationArgs> cpuUtilization;
        private @Nullable Output<FlexibleAppVersionAutomaticScalingDiskUtilizationArgs> diskUtilization;
        private @Nullable Output<Integer> maxConcurrentRequests;
        private @Nullable Output<Integer> maxIdleInstances;
        private @Nullable Output<String> maxPendingLatency;
        private @Nullable Output<Integer> maxTotalInstances;
        private @Nullable Output<Integer> minIdleInstances;
        private @Nullable Output<String> minPendingLatency;
        private @Nullable Output<Integer> minTotalInstances;
        private @Nullable Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs> networkUtilization;
        private @Nullable Output<FlexibleAppVersionAutomaticScalingRequestUtilizationArgs> requestUtilization;

        public Builder() {
    	      // Empty
        }

        public Builder(FlexibleAppVersionAutomaticScalingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coolDownPeriod = defaults.coolDownPeriod;
    	      this.cpuUtilization = defaults.cpuUtilization;
    	      this.diskUtilization = defaults.diskUtilization;
    	      this.maxConcurrentRequests = defaults.maxConcurrentRequests;
    	      this.maxIdleInstances = defaults.maxIdleInstances;
    	      this.maxPendingLatency = defaults.maxPendingLatency;
    	      this.maxTotalInstances = defaults.maxTotalInstances;
    	      this.minIdleInstances = defaults.minIdleInstances;
    	      this.minPendingLatency = defaults.minPendingLatency;
    	      this.minTotalInstances = defaults.minTotalInstances;
    	      this.networkUtilization = defaults.networkUtilization;
    	      this.requestUtilization = defaults.requestUtilization;
        }

        public Builder coolDownPeriod(@Nullable Output<String> coolDownPeriod) {
            this.coolDownPeriod = coolDownPeriod;
            return this;
        }
        public Builder coolDownPeriod(@Nullable String coolDownPeriod) {
            this.coolDownPeriod = Codegen.ofNullable(coolDownPeriod);
            return this;
        }
        public Builder cpuUtilization(Output<FlexibleAppVersionAutomaticScalingCpuUtilizationArgs> cpuUtilization) {
            this.cpuUtilization = Objects.requireNonNull(cpuUtilization);
            return this;
        }
        public Builder cpuUtilization(FlexibleAppVersionAutomaticScalingCpuUtilizationArgs cpuUtilization) {
            this.cpuUtilization = Output.of(Objects.requireNonNull(cpuUtilization));
            return this;
        }
        public Builder diskUtilization(@Nullable Output<FlexibleAppVersionAutomaticScalingDiskUtilizationArgs> diskUtilization) {
            this.diskUtilization = diskUtilization;
            return this;
        }
        public Builder diskUtilization(@Nullable FlexibleAppVersionAutomaticScalingDiskUtilizationArgs diskUtilization) {
            this.diskUtilization = Codegen.ofNullable(diskUtilization);
            return this;
        }
        public Builder maxConcurrentRequests(@Nullable Output<Integer> maxConcurrentRequests) {
            this.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }
        public Builder maxConcurrentRequests(@Nullable Integer maxConcurrentRequests) {
            this.maxConcurrentRequests = Codegen.ofNullable(maxConcurrentRequests);
            return this;
        }
        public Builder maxIdleInstances(@Nullable Output<Integer> maxIdleInstances) {
            this.maxIdleInstances = maxIdleInstances;
            return this;
        }
        public Builder maxIdleInstances(@Nullable Integer maxIdleInstances) {
            this.maxIdleInstances = Codegen.ofNullable(maxIdleInstances);
            return this;
        }
        public Builder maxPendingLatency(@Nullable Output<String> maxPendingLatency) {
            this.maxPendingLatency = maxPendingLatency;
            return this;
        }
        public Builder maxPendingLatency(@Nullable String maxPendingLatency) {
            this.maxPendingLatency = Codegen.ofNullable(maxPendingLatency);
            return this;
        }
        public Builder maxTotalInstances(@Nullable Output<Integer> maxTotalInstances) {
            this.maxTotalInstances = maxTotalInstances;
            return this;
        }
        public Builder maxTotalInstances(@Nullable Integer maxTotalInstances) {
            this.maxTotalInstances = Codegen.ofNullable(maxTotalInstances);
            return this;
        }
        public Builder minIdleInstances(@Nullable Output<Integer> minIdleInstances) {
            this.minIdleInstances = minIdleInstances;
            return this;
        }
        public Builder minIdleInstances(@Nullable Integer minIdleInstances) {
            this.minIdleInstances = Codegen.ofNullable(minIdleInstances);
            return this;
        }
        public Builder minPendingLatency(@Nullable Output<String> minPendingLatency) {
            this.minPendingLatency = minPendingLatency;
            return this;
        }
        public Builder minPendingLatency(@Nullable String minPendingLatency) {
            this.minPendingLatency = Codegen.ofNullable(minPendingLatency);
            return this;
        }
        public Builder minTotalInstances(@Nullable Output<Integer> minTotalInstances) {
            this.minTotalInstances = minTotalInstances;
            return this;
        }
        public Builder minTotalInstances(@Nullable Integer minTotalInstances) {
            this.minTotalInstances = Codegen.ofNullable(minTotalInstances);
            return this;
        }
        public Builder networkUtilization(@Nullable Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs> networkUtilization) {
            this.networkUtilization = networkUtilization;
            return this;
        }
        public Builder networkUtilization(@Nullable FlexibleAppVersionAutomaticScalingNetworkUtilizationArgs networkUtilization) {
            this.networkUtilization = Codegen.ofNullable(networkUtilization);
            return this;
        }
        public Builder requestUtilization(@Nullable Output<FlexibleAppVersionAutomaticScalingRequestUtilizationArgs> requestUtilization) {
            this.requestUtilization = requestUtilization;
            return this;
        }
        public Builder requestUtilization(@Nullable FlexibleAppVersionAutomaticScalingRequestUtilizationArgs requestUtilization) {
            this.requestUtilization = Codegen.ofNullable(requestUtilization);
            return this;
        }        public FlexibleAppVersionAutomaticScalingArgs build() {
            return new FlexibleAppVersionAutomaticScalingArgs(coolDownPeriod, cpuUtilization, diskUtilization, maxConcurrentRequests, maxIdleInstances, maxPendingLatency, maxTotalInstances, minIdleInstances, minPendingLatency, minTotalInstances, networkUtilization, requestUtilization);
        }
    }
}
