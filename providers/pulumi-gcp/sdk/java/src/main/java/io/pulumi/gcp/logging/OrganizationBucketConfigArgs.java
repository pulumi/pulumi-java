// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.logging;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OrganizationBucketConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final OrganizationBucketConfigArgs Empty = new OrganizationBucketConfigArgs();

    /**
     * The name of the logging bucket. Logging automatically creates two log buckets: `_Required` and `_Default`.
     * 
     */
    @Import(name="bucketId", required=true)
      private final Output<String> bucketId;

    public Output<String> bucketId() {
        return this.bucketId;
    }

    /**
     * Describes this bucket.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The location of the bucket. The supported locations are: "global" "us-central1"
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * The parent resource that contains the logging bucket.
     * 
     */
    @Import(name="organization", required=true)
      private final Output<String> organization;

    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used. Bucket retention can not be increased on buckets outside of projects.
     * 
     */
    @Import(name="retentionDays")
      private final @Nullable Output<Integer> retentionDays;

    public Output<Integer> retentionDays() {
        return this.retentionDays == null ? Codegen.empty() : this.retentionDays;
    }

    public OrganizationBucketConfigArgs(
        Output<String> bucketId,
        @Nullable Output<String> description,
        Output<String> location,
        Output<String> organization,
        @Nullable Output<Integer> retentionDays) {
        this.bucketId = Objects.requireNonNull(bucketId, "expected parameter 'bucketId' to be non-null");
        this.description = description;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.organization = Objects.requireNonNull(organization, "expected parameter 'organization' to be non-null");
        this.retentionDays = retentionDays;
    }

    private OrganizationBucketConfigArgs() {
        this.bucketId = Codegen.empty();
        this.description = Codegen.empty();
        this.location = Codegen.empty();
        this.organization = Codegen.empty();
        this.retentionDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrganizationBucketConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> bucketId;
        private @Nullable Output<String> description;
        private Output<String> location;
        private Output<String> organization;
        private @Nullable Output<Integer> retentionDays;

        public Builder() {
    	      // Empty
        }

        public Builder(OrganizationBucketConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketId = defaults.bucketId;
    	      this.description = defaults.description;
    	      this.location = defaults.location;
    	      this.organization = defaults.organization;
    	      this.retentionDays = defaults.retentionDays;
        }

        public Builder bucketId(Output<String> bucketId) {
            this.bucketId = Objects.requireNonNull(bucketId);
            return this;
        }
        public Builder bucketId(String bucketId) {
            this.bucketId = Output.of(Objects.requireNonNull(bucketId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder organization(Output<String> organization) {
            this.organization = Objects.requireNonNull(organization);
            return this;
        }
        public Builder organization(String organization) {
            this.organization = Output.of(Objects.requireNonNull(organization));
            return this;
        }
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            this.retentionDays = retentionDays;
            return this;
        }
        public Builder retentionDays(@Nullable Integer retentionDays) {
            this.retentionDays = Codegen.ofNullable(retentionDays);
            return this;
        }        public OrganizationBucketConfigArgs build() {
            return new OrganizationBucketConfigArgs(bucketId, description, location, organization, retentionDays);
        }
    }
}
