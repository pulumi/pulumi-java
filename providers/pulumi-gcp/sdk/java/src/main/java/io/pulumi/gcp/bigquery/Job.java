// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.bigquery.JobArgs;
import io.pulumi.gcp.bigquery.inputs.JobState;
import io.pulumi.gcp.bigquery.outputs.JobCopy;
import io.pulumi.gcp.bigquery.outputs.JobExtract;
import io.pulumi.gcp.bigquery.outputs.JobLoad;
import io.pulumi.gcp.bigquery.outputs.JobQuery;
import io.pulumi.gcp.bigquery.outputs.JobStatus;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Jobs are actions that BigQuery runs on your behalf to load data, export data, query data, or copy data.
 * Once a BigQuery job is created, it cannot be changed or deleted.
 * 
 * 
 * To get more information about Job, see:
 * 
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs)
 * * How-to Guides
 *     * [BigQuery Jobs Intro](https://cloud.google.com/bigquery/docs/jobs-overview)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Bigquery Job Query
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const bar = new gcp.bigquery.Dataset("bar", {
 *     datasetId: "job_query_dataset",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "US",
 * });
 * const foo = new gcp.bigquery.Table("foo", {
 *     deletionProtection: false,
 *     datasetId: bar.datasetId,
 *     tableId: "job_query_table",
 * });
 * const job = new gcp.bigquery.Job("job", {
 *     jobId: "job_query",
 *     labels: {
 *         "example-label": "example-value",
 *     },
 *     query: {
 *         query: "SELECT state FROM [lookerdata:cdc.project_tycho_reports]",
 *         destinationTable: {
 *             projectId: foo.project,
 *             datasetId: foo.datasetId,
 *             tableId: foo.tableId,
 *         },
 *         allowLargeResults: true,
 *         flattenResults: true,
 *         scriptOptions: {
 *             keyResultStatement: "LAST",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * bar = gcp.bigquery.Dataset("bar",
 *     dataset_id="job_query_dataset",
 *     friendly_name="test",
 *     description="This is a test description",
 *     location="US")
 * foo = gcp.bigquery.Table("foo",
 *     deletion_protection=False,
 *     dataset_id=bar.dataset_id,
 *     table_id="job_query_table")
 * job = gcp.bigquery.Job("job",
 *     job_id="job_query",
 *     labels={
 *         "example-label": "example-value",
 *     },
 *     query=gcp.bigquery.JobQueryArgs(
 *         query="SELECT state FROM [lookerdata:cdc.project_tycho_reports]",
 *         destination_table=gcp.bigquery.JobQueryDestinationTableArgs(
 *             project_id=foo.project,
 *             dataset_id=foo.dataset_id,
 *             table_id=foo.table_id,
 *         ),
 *         allow_large_results=True,
 *         flatten_results=True,
 *         script_options=gcp.bigquery.JobQueryScriptOptionsArgs(
 *             key_result_statement="LAST",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bar = new Gcp.BigQuery.Dataset("bar", new Gcp.BigQuery.DatasetArgs
 *         {
 *             DatasetId = "job_query_dataset",
 *             FriendlyName = "test",
 *             Description = "This is a test description",
 *             Location = "US",
 *         });
 *         var foo = new Gcp.BigQuery.Table("foo", new Gcp.BigQuery.TableArgs
 *         {
 *             DeletionProtection = false,
 *             DatasetId = bar.DatasetId,
 *             TableId = "job_query_table",
 *         });
 *         var job = new Gcp.BigQuery.Job("job", new Gcp.BigQuery.JobArgs
 *         {
 *             JobId = "job_query",
 *             Labels = 
 *             {
 *                 { "example-label", "example-value" },
 *             },
 *             Query = new Gcp.BigQuery.Inputs.JobQueryArgs
 *             {
 *                 Query = "SELECT state FROM [lookerdata:cdc.project_tycho_reports]",
 *                 DestinationTable = new Gcp.BigQuery.Inputs.JobQueryDestinationTableArgs
 *                 {
 *                     ProjectId = foo.Project,
 *                     DatasetId = foo.DatasetId,
 *                     TableId = foo.TableId,
 *                 },
 *                 AllowLargeResults = true,
 *                 FlattenResults = true,
 *                 ScriptOptions = new Gcp.BigQuery.Inputs.JobQueryScriptOptionsArgs
 *                 {
 *                     KeyResultStatement = "LAST",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
 * 			DatasetId:    pulumi.String("job_query_dataset"),
 * 			FriendlyName: pulumi.String("test"),
 * 			Description:  pulumi.String("This is a test description"),
 * 			Location:     pulumi.String("US"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
 * 			DeletionProtection: pulumi.Bool(false),
 * 			DatasetId:          bar.DatasetId,
 * 			TableId:            pulumi.String("job_query_table"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
 * 			JobId: pulumi.String("job_query"),
 * 			Labels: pulumi.StringMap{
 * 				"example-label": pulumi.String("example-value"),
 * 			},
 * 			Query: &bigquery.JobQueryArgs{
 * 				Query: pulumi.String("SELECT state FROM [lookerdata:cdc.project_tycho_reports]"),
 * 				DestinationTable: &bigquery.JobQueryDestinationTableArgs{
 * 					ProjectId: foo.Project,
 * 					DatasetId: foo.DatasetId,
 * 					TableId:   foo.TableId,
 * 				},
 * 				AllowLargeResults: pulumi.Bool(true),
 * 				FlattenResults:    pulumi.Bool(true),
 * 				ScriptOptions: &bigquery.JobQueryScriptOptionsArgs{
 * 					KeyResultStatement: pulumi.String("LAST"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Bigquery Job Query Table Reference
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const bar = new gcp.bigquery.Dataset("bar", {
 *     datasetId: "job_query_dataset",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "US",
 * });
 * const foo = new gcp.bigquery.Table("foo", {
 *     deletionProtection: false,
 *     datasetId: bar.datasetId,
 *     tableId: "job_query_table",
 * });
 * const job = new gcp.bigquery.Job("job", {
 *     jobId: "job_query",
 *     labels: {
 *         "example-label": "example-value",
 *     },
 *     query: {
 *         query: "SELECT state FROM [lookerdata:cdc.project_tycho_reports]",
 *         destinationTable: {
 *             tableId: foo.id,
 *         },
 *         defaultDataset: {
 *             datasetId: bar.id,
 *         },
 *         allowLargeResults: true,
 *         flattenResults: true,
 *         scriptOptions: {
 *             keyResultStatement: "LAST",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * bar = gcp.bigquery.Dataset("bar",
 *     dataset_id="job_query_dataset",
 *     friendly_name="test",
 *     description="This is a test description",
 *     location="US")
 * foo = gcp.bigquery.Table("foo",
 *     deletion_protection=False,
 *     dataset_id=bar.dataset_id,
 *     table_id="job_query_table")
 * job = gcp.bigquery.Job("job",
 *     job_id="job_query",
 *     labels={
 *         "example-label": "example-value",
 *     },
 *     query=gcp.bigquery.JobQueryArgs(
 *         query="SELECT state FROM [lookerdata:cdc.project_tycho_reports]",
 *         destination_table=gcp.bigquery.JobQueryDestinationTableArgs(
 *             table_id=foo.id,
 *         ),
 *         default_dataset=gcp.bigquery.JobQueryDefaultDatasetArgs(
 *             dataset_id=bar.id,
 *         ),
 *         allow_large_results=True,
 *         flatten_results=True,
 *         script_options=gcp.bigquery.JobQueryScriptOptionsArgs(
 *             key_result_statement="LAST",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bar = new Gcp.BigQuery.Dataset("bar", new Gcp.BigQuery.DatasetArgs
 *         {
 *             DatasetId = "job_query_dataset",
 *             FriendlyName = "test",
 *             Description = "This is a test description",
 *             Location = "US",
 *         });
 *         var foo = new Gcp.BigQuery.Table("foo", new Gcp.BigQuery.TableArgs
 *         {
 *             DeletionProtection = false,
 *             DatasetId = bar.DatasetId,
 *             TableId = "job_query_table",
 *         });
 *         var job = new Gcp.BigQuery.Job("job", new Gcp.BigQuery.JobArgs
 *         {
 *             JobId = "job_query",
 *             Labels = 
 *             {
 *                 { "example-label", "example-value" },
 *             },
 *             Query = new Gcp.BigQuery.Inputs.JobQueryArgs
 *             {
 *                 Query = "SELECT state FROM [lookerdata:cdc.project_tycho_reports]",
 *                 DestinationTable = new Gcp.BigQuery.Inputs.JobQueryDestinationTableArgs
 *                 {
 *                     TableId = foo.Id,
 *                 },
 *                 DefaultDataset = new Gcp.BigQuery.Inputs.JobQueryDefaultDatasetArgs
 *                 {
 *                     DatasetId = bar.Id,
 *                 },
 *                 AllowLargeResults = true,
 *                 FlattenResults = true,
 *                 ScriptOptions = new Gcp.BigQuery.Inputs.JobQueryScriptOptionsArgs
 *                 {
 *                     KeyResultStatement = "LAST",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
 * 			DatasetId:    pulumi.String("job_query_dataset"),
 * 			FriendlyName: pulumi.String("test"),
 * 			Description:  pulumi.String("This is a test description"),
 * 			Location:     pulumi.String("US"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
 * 			DeletionProtection: pulumi.Bool(false),
 * 			DatasetId:          bar.DatasetId,
 * 			TableId:            pulumi.String("job_query_table"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
 * 			JobId: pulumi.String("job_query"),
 * 			Labels: pulumi.StringMap{
 * 				"example-label": pulumi.String("example-value"),
 * 			},
 * 			Query: &bigquery.JobQueryArgs{
 * 				Query: pulumi.String("SELECT state FROM [lookerdata:cdc.project_tycho_reports]"),
 * 				DestinationTable: &bigquery.JobQueryDestinationTableArgs{
 * 					TableId: foo.ID(),
 * 				},
 * 				DefaultDataset: &bigquery.JobQueryDefaultDatasetArgs{
 * 					DatasetId: bar.ID(),
 * 				},
 * 				AllowLargeResults: pulumi.Bool(true),
 * 				FlattenResults:    pulumi.Bool(true),
 * 				ScriptOptions: &bigquery.JobQueryScriptOptionsArgs{
 * 					KeyResultStatement: pulumi.String("LAST"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Bigquery Job Load
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const bar = new gcp.bigquery.Dataset("bar", {
 *     datasetId: "job_load_dataset",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "US",
 * });
 * const foo = new gcp.bigquery.Table("foo", {
 *     deletionProtection: false,
 *     datasetId: bar.datasetId,
 *     tableId: "job_load_table",
 * });
 * const job = new gcp.bigquery.Job("job", {
 *     jobId: "job_load",
 *     labels: {
 *         my_job: "load",
 *     },
 *     load: {
 *         sourceUris: ["gs://cloud-samples-data/bigquery/us-states/us-states-by-date.csv"],
 *         destinationTable: {
 *             projectId: foo.project,
 *             datasetId: foo.datasetId,
 *             tableId: foo.tableId,
 *         },
 *         skipLeadingRows: 1,
 *         schemaUpdateOptions: [
 *             "ALLOW_FIELD_RELAXATION",
 *             "ALLOW_FIELD_ADDITION",
 *         ],
 *         writeDisposition: "WRITE_APPEND",
 *         autodetect: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * bar = gcp.bigquery.Dataset("bar",
 *     dataset_id="job_load_dataset",
 *     friendly_name="test",
 *     description="This is a test description",
 *     location="US")
 * foo = gcp.bigquery.Table("foo",
 *     deletion_protection=False,
 *     dataset_id=bar.dataset_id,
 *     table_id="job_load_table")
 * job = gcp.bigquery.Job("job",
 *     job_id="job_load",
 *     labels={
 *         "my_job": "load",
 *     },
 *     load=gcp.bigquery.JobLoadArgs(
 *         source_uris=["gs://cloud-samples-data/bigquery/us-states/us-states-by-date.csv"],
 *         destination_table=gcp.bigquery.JobLoadDestinationTableArgs(
 *             project_id=foo.project,
 *             dataset_id=foo.dataset_id,
 *             table_id=foo.table_id,
 *         ),
 *         skip_leading_rows=1,
 *         schema_update_options=[
 *             "ALLOW_FIELD_RELAXATION",
 *             "ALLOW_FIELD_ADDITION",
 *         ],
 *         write_disposition="WRITE_APPEND",
 *         autodetect=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bar = new Gcp.BigQuery.Dataset("bar", new Gcp.BigQuery.DatasetArgs
 *         {
 *             DatasetId = "job_load_dataset",
 *             FriendlyName = "test",
 *             Description = "This is a test description",
 *             Location = "US",
 *         });
 *         var foo = new Gcp.BigQuery.Table("foo", new Gcp.BigQuery.TableArgs
 *         {
 *             DeletionProtection = false,
 *             DatasetId = bar.DatasetId,
 *             TableId = "job_load_table",
 *         });
 *         var job = new Gcp.BigQuery.Job("job", new Gcp.BigQuery.JobArgs
 *         {
 *             JobId = "job_load",
 *             Labels = 
 *             {
 *                 { "my_job", "load" },
 *             },
 *             Load = new Gcp.BigQuery.Inputs.JobLoadArgs
 *             {
 *                 SourceUris = 
 *                 {
 *                     "gs://cloud-samples-data/bigquery/us-states/us-states-by-date.csv",
 *                 },
 *                 DestinationTable = new Gcp.BigQuery.Inputs.JobLoadDestinationTableArgs
 *                 {
 *                     ProjectId = foo.Project,
 *                     DatasetId = foo.DatasetId,
 *                     TableId = foo.TableId,
 *                 },
 *                 SkipLeadingRows = 1,
 *                 SchemaUpdateOptions = 
 *                 {
 *                     "ALLOW_FIELD_RELAXATION",
 *                     "ALLOW_FIELD_ADDITION",
 *                 },
 *                 WriteDisposition = "WRITE_APPEND",
 *                 Autodetect = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
 * 			DatasetId:    pulumi.String("job_load_dataset"),
 * 			FriendlyName: pulumi.String("test"),
 * 			Description:  pulumi.String("This is a test description"),
 * 			Location:     pulumi.String("US"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
 * 			DeletionProtection: pulumi.Bool(false),
 * 			DatasetId:          bar.DatasetId,
 * 			TableId:            pulumi.String("job_load_table"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
 * 			JobId: pulumi.String("job_load"),
 * 			Labels: pulumi.StringMap{
 * 				"my_job": pulumi.String("load"),
 * 			},
 * 			Load: &bigquery.JobLoadArgs{
 * 				SourceUris: pulumi.StringArray{
 * 					pulumi.String("gs://cloud-samples-data/bigquery/us-states/us-states-by-date.csv"),
 * 				},
 * 				DestinationTable: &bigquery.JobLoadDestinationTableArgs{
 * 					ProjectId: foo.Project,
 * 					DatasetId: foo.DatasetId,
 * 					TableId:   foo.TableId,
 * 				},
 * 				SkipLeadingRows: pulumi.Int(1),
 * 				SchemaUpdateOptions: pulumi.StringArray{
 * 					pulumi.String("ALLOW_FIELD_RELAXATION"),
 * 					pulumi.String("ALLOW_FIELD_ADDITION"),
 * 				},
 * 				WriteDisposition: pulumi.String("WRITE_APPEND"),
 * 				Autodetect:       pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Bigquery Job Extract
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const source_oneDataset = new gcp.bigquery.Dataset("source-oneDataset", {
 *     datasetId: "job_extract_dataset",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "US",
 * });
 * const source_oneTable = new gcp.bigquery.Table("source-oneTable", {
 *     deletionProtection: false,
 *     datasetId: source_oneDataset.datasetId,
 *     tableId: "job_extract_table",
 *     schema: `[
 *   {
 *     "name": "name",
 *     "type": "STRING",
 *     "mode": "NULLABLE"
 *   },
 *   {
 *     "name": "post_abbr",
 *     "type": "STRING",
 *     "mode": "NULLABLE"
 *   },
 *   {
 *     "name": "date",
 *     "type": "DATE",
 *     "mode": "NULLABLE"
 *   }
 * ]
 * `,
 * });
 * const dest = new gcp.storage.Bucket("dest", {
 *     location: "US",
 *     forceDestroy: true,
 * });
 * const job = new gcp.bigquery.Job("job", {
 *     jobId: "job_extract",
 *     extract: {
 *         destinationUris: [pulumi.interpolate`${dest.url}/extract`],
 *         sourceTable: {
 *             projectId: source_oneTable.project,
 *             datasetId: source_oneTable.datasetId,
 *             tableId: source_oneTable.tableId,
 *         },
 *         destinationFormat: "NEWLINE_DELIMITED_JSON",
 *         compression: "GZIP",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * source_one_dataset = gcp.bigquery.Dataset("source-oneDataset",
 *     dataset_id="job_extract_dataset",
 *     friendly_name="test",
 *     description="This is a test description",
 *     location="US")
 * source_one_table = gcp.bigquery.Table("source-oneTable",
 *     deletion_protection=False,
 *     dataset_id=source_one_dataset.dataset_id,
 *     table_id="job_extract_table",
 *     schema="""[
 *   {
 *     "name": "name",
 *     "type": "STRING",
 *     "mode": "NULLABLE"
 *   },
 *   {
 *     "name": "post_abbr",
 *     "type": "STRING",
 *     "mode": "NULLABLE"
 *   },
 *   {
 *     "name": "date",
 *     "type": "DATE",
 *     "mode": "NULLABLE"
 *   }
 * ]
 * """)
 * dest = gcp.storage.Bucket("dest",
 *     location="US",
 *     force_destroy=True)
 * job = gcp.bigquery.Job("job",
 *     job_id="job_extract",
 *     extract=gcp.bigquery.JobExtractArgs(
 *         destination_uris=[dest.url.apply(lambda url: f"{url}/extract")],
 *         source_table=gcp.bigquery.JobExtractSourceTableArgs(
 *             project_id=source_one_table.project,
 *             dataset_id=source_one_table.dataset_id,
 *             table_id=source_one_table.table_id,
 *         ),
 *         destination_format="NEWLINE_DELIMITED_JSON",
 *         compression="GZIP",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var source_oneDataset = new Gcp.BigQuery.Dataset("source-oneDataset", new Gcp.BigQuery.DatasetArgs
 *         {
 *             DatasetId = "job_extract_dataset",
 *             FriendlyName = "test",
 *             Description = "This is a test description",
 *             Location = "US",
 *         });
 *         var source_oneTable = new Gcp.BigQuery.Table("source-oneTable", new Gcp.BigQuery.TableArgs
 *         {
 *             DeletionProtection = false,
 *             DatasetId = source_oneDataset.DatasetId,
 *             TableId = "job_extract_table",
 *             Schema = @"[
 *   {
 *     ""name"": ""name"",
 *     ""type"": ""STRING"",
 *     ""mode"": ""NULLABLE""
 *   },
 *   {
 *     ""name"": ""post_abbr"",
 *     ""type"": ""STRING"",
 *     ""mode"": ""NULLABLE""
 *   },
 *   {
 *     ""name"": ""date"",
 *     ""type"": ""DATE"",
 *     ""mode"": ""NULLABLE""
 *   }
 * ]
 * ",
 *         });
 *         var dest = new Gcp.Storage.Bucket("dest", new Gcp.Storage.BucketArgs
 *         {
 *             Location = "US",
 *             ForceDestroy = true,
 *         });
 *         var job = new Gcp.BigQuery.Job("job", new Gcp.BigQuery.JobArgs
 *         {
 *             JobId = "job_extract",
 *             Extract = new Gcp.BigQuery.Inputs.JobExtractArgs
 *             {
 *                 DestinationUris = 
 *                 {
 *                     dest.Url.Apply(url => $"{url}/extract"),
 *                 },
 *                 SourceTable = new Gcp.BigQuery.Inputs.JobExtractSourceTableArgs
 *                 {
 *                     ProjectId = source_oneTable.Project,
 *                     DatasetId = source_oneTable.DatasetId,
 *                     TableId = source_oneTable.TableId,
 *                 },
 *                 DestinationFormat = "NEWLINE_DELIMITED_JSON",
 *                 Compression = "GZIP",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := bigquery.NewDataset(ctx, "source-oneDataset", &bigquery.DatasetArgs{
 * 			DatasetId:    pulumi.String("job_extract_dataset"),
 * 			FriendlyName: pulumi.String("test"),
 * 			Description:  pulumi.String("This is a test description"),
 * 			Location:     pulumi.String("US"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewTable(ctx, "source-oneTable", &bigquery.TableArgs{
 * 			DeletionProtection: pulumi.Bool(false),
 * 			DatasetId:          source_oneDataset.DatasetId,
 * 			TableId:            pulumi.String("job_extract_table"),
 * 			Schema:             pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "[\n", "  {\n", "    \"name\": \"name\",\n", "    \"type\": \"STRING\",\n", "    \"mode\": \"NULLABLE\"\n", "  },\n", "  {\n", "    \"name\": \"post_abbr\",\n", "    \"type\": \"STRING\",\n", "    \"mode\": \"NULLABLE\"\n", "  },\n", "  {\n", "    \"name\": \"date\",\n", "    \"type\": \"DATE\",\n", "    \"mode\": \"NULLABLE\"\n", "  }\n", "]\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		dest, err := storage.NewBucket(ctx, "dest", &storage.BucketArgs{
 * 			Location:     pulumi.String("US"),
 * 			ForceDestroy: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
 * 			JobId: pulumi.String("job_extract"),
 * 			Extract: &bigquery.JobExtractArgs{
 * 				DestinationUris: pulumi.StringArray{
 * 					dest.Url.ApplyT(func(url string) (string, error) {
 * 						return fmt.Sprintf("%v%v", url, "/extract"), nil
 * 					}).(pulumi.StringOutput),
 * 				},
 * 				SourceTable: &bigquery.JobExtractSourceTableArgs{
 * 					ProjectId: source_oneTable.Project,
 * 					DatasetId: source_oneTable.DatasetId,
 * 					TableId:   source_oneTable.TableId,
 * 				},
 * 				DestinationFormat: pulumi.String("NEWLINE_DELIMITED_JSON"),
 * 				Compression:       pulumi.String("GZIP"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Job can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/job:Job default projects/{{project}}/jobs/{{job_id}}/location/{{location}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/job:Job default projects/{{project}}/jobs/{{job_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/job:Job default {{project}}/{{job_id}}/{{location}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/job:Job default {{job_id}}/{{location}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/job:Job default {{project}}/{{job_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:bigquery/job:Job default {{job_id}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:bigquery/job:Job")
public class Job extends io.pulumi.resources.CustomResource {
    /**
     * Copies a table.
     * Structure is documented below.
     * 
     */
    @Export(name="copy", type=JobCopy.class, parameters={})
    private Output</* @Nullable */ JobCopy> copy;

    /**
     * @return Copies a table.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobCopy> getCopy() {
        return this.copy;
    }
    /**
     * Configures an extract job.
     * Structure is documented below.
     * 
     */
    @Export(name="extract", type=JobExtract.class, parameters={})
    private Output</* @Nullable */ JobExtract> extract;

    /**
     * @return Configures an extract job.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobExtract> getExtract() {
        return this.extract;
    }
    /**
     * The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
     * 
     */
    @Export(name="jobId", type=String.class, parameters={})
    private Output<String> jobId;

    /**
     * @return The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
     * 
     */
    public Output<String> getJobId() {
        return this.jobId;
    }
    /**
     * Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
     * 
     */
    @Export(name="jobTimeoutMs", type=String.class, parameters={})
    private Output</* @Nullable */ String> jobTimeoutMs;

    /**
     * @return Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
     * 
     */
    public Output</* @Nullable */ String> getJobTimeoutMs() {
        return this.jobTimeoutMs;
    }
    /**
     * The type of the job.
     * 
     */
    @Export(name="jobType", type=String.class, parameters={})
    private Output<String> jobType;

    /**
     * @return The type of the job.
     * 
     */
    public Output<String> getJobType() {
        return this.jobType;
    }
    /**
     * The labels associated with this job. You can use these to organize and group your jobs.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels associated with this job. You can use these to organize and group your jobs.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * Configures a load job.
     * Structure is documented below.
     * 
     */
    @Export(name="load", type=JobLoad.class, parameters={})
    private Output</* @Nullable */ JobLoad> load;

    /**
     * @return Configures a load job.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobLoad> getLoad() {
        return this.load;
    }
    /**
     * The geographic location of the job. The default value is US.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The geographic location of the job. The default value is US.
     * 
     */
    public Output</* @Nullable */ String> getLocation() {
        return this.location;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Configures a query job.
     * Structure is documented below.
     * 
     */
    @Export(name="query", type=JobQuery.class, parameters={})
    private Output</* @Nullable */ JobQuery> query;

    /**
     * @return Configures a query job.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobQuery> getQuery() {
        return this.query;
    }
    /**
     * The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
     * 
     */
    @Export(name="statuses", type=List.class, parameters={JobStatus.class})
    private Output<List<JobStatus>> statuses;

    /**
     * @return The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
     * 
     */
    public Output<List<JobStatus>> getStatuses() {
        return this.statuses;
    }
    /**
     * Email address of the user who ran the job.
     * 
     */
    @Export(name="userEmail", type=String.class, parameters={})
    private Output<String> userEmail;

    /**
     * @return Email address of the user who ran the job.
     * 
     */
    public Output<String> getUserEmail() {
        return this.userEmail;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(String name, JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(String name, JobArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/job:Job", name, args == null ? JobArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Job(String name, Output<String> id, @Nullable JobState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/job:Job", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(String name, Output<String> id, @Nullable JobState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}
