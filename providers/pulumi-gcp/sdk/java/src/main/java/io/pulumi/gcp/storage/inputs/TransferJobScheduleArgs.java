// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.storage.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleEndDateArgs;
import io.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleStartDateArgs;
import io.pulumi.gcp.storage.inputs.TransferJobScheduleStartTimeOfDayArgs;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TransferJobScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final TransferJobScheduleArgs Empty = new TransferJobScheduleArgs();

    /**
     * The last day the recurring transfer will be run. If `schedule_end_date` is the same as `schedule_start_date`, the transfer will be executed only once. Structure documented below.
     * 
     */
    @Import(name="scheduleEndDate")
      private final @Nullable Output<TransferJobScheduleScheduleEndDateArgs> scheduleEndDate;

    public Output<TransferJobScheduleScheduleEndDateArgs> getScheduleEndDate() {
        return this.scheduleEndDate == null ? Output.empty() : this.scheduleEndDate;
    }

    /**
     * The first day the recurring transfer is scheduled to run. If `schedule_start_date` is in the past, the transfer will run for the first time on the following day. Structure documented below.
     * 
     */
    @Import(name="scheduleStartDate", required=true)
      private final Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate;

    public Output<TransferJobScheduleScheduleStartDateArgs> getScheduleStartDate() {
        return this.scheduleStartDate;
    }

    /**
     * The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone. Structure documented below.
     * 
     */
    @Import(name="startTimeOfDay")
      private final @Nullable Output<TransferJobScheduleStartTimeOfDayArgs> startTimeOfDay;

    public Output<TransferJobScheduleStartTimeOfDayArgs> getStartTimeOfDay() {
        return this.startTimeOfDay == null ? Output.empty() : this.startTimeOfDay;
    }

    public TransferJobScheduleArgs(
        @Nullable Output<TransferJobScheduleScheduleEndDateArgs> scheduleEndDate,
        Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate,
        @Nullable Output<TransferJobScheduleStartTimeOfDayArgs> startTimeOfDay) {
        this.scheduleEndDate = scheduleEndDate;
        this.scheduleStartDate = Objects.requireNonNull(scheduleStartDate, "expected parameter 'scheduleStartDate' to be non-null");
        this.startTimeOfDay = startTimeOfDay;
    }

    private TransferJobScheduleArgs() {
        this.scheduleEndDate = Output.empty();
        this.scheduleStartDate = Output.empty();
        this.startTimeOfDay = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferJobScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<TransferJobScheduleScheduleEndDateArgs> scheduleEndDate;
        private Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate;
        private @Nullable Output<TransferJobScheduleStartTimeOfDayArgs> startTimeOfDay;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferJobScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.scheduleEndDate = defaults.scheduleEndDate;
    	      this.scheduleStartDate = defaults.scheduleStartDate;
    	      this.startTimeOfDay = defaults.startTimeOfDay;
        }

        public Builder scheduleEndDate(@Nullable Output<TransferJobScheduleScheduleEndDateArgs> scheduleEndDate) {
            this.scheduleEndDate = scheduleEndDate;
            return this;
        }

        public Builder scheduleEndDate(@Nullable TransferJobScheduleScheduleEndDateArgs scheduleEndDate) {
            this.scheduleEndDate = Output.ofNullable(scheduleEndDate);
            return this;
        }

        public Builder scheduleStartDate(Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate) {
            this.scheduleStartDate = Objects.requireNonNull(scheduleStartDate);
            return this;
        }

        public Builder scheduleStartDate(TransferJobScheduleScheduleStartDateArgs scheduleStartDate) {
            this.scheduleStartDate = Output.of(Objects.requireNonNull(scheduleStartDate));
            return this;
        }

        public Builder startTimeOfDay(@Nullable Output<TransferJobScheduleStartTimeOfDayArgs> startTimeOfDay) {
            this.startTimeOfDay = startTimeOfDay;
            return this;
        }

        public Builder startTimeOfDay(@Nullable TransferJobScheduleStartTimeOfDayArgs startTimeOfDay) {
            this.startTimeOfDay = Output.ofNullable(startTimeOfDay);
            return this;
        }
        public TransferJobScheduleArgs build() {
            return new TransferJobScheduleArgs(scheduleEndDate, scheduleStartDate, startTimeOfDay);
        }
    }
}
