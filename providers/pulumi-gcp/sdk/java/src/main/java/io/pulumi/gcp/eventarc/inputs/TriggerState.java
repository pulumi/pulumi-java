// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.eventarc.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.eventarc.inputs.TriggerDestinationGetArgs;
import io.pulumi.gcp.eventarc.inputs.TriggerMatchingCriteriaGetArgs;
import io.pulumi.gcp.eventarc.inputs.TriggerTransportGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerState extends io.pulumi.resources.ResourceArgs {

    public static final TriggerState Empty = new TriggerState();

    @InputImport(name="createTime")
    private final @Nullable Input<String> createTime;

    public Input<String> getCreateTime() {
        return this.createTime == null ? Input.empty() : this.createTime;
    }

    @InputImport(name="destination")
    private final @Nullable Input<TriggerDestinationGetArgs> destination;

    public Input<TriggerDestinationGetArgs> getDestination() {
        return this.destination == null ? Input.empty() : this.destination;
    }

    @InputImport(name="etag")
    private final @Nullable Input<String> etag;

    public Input<String> getEtag() {
        return this.etag == null ? Input.empty() : this.etag;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="matchingCriterias")
    private final @Nullable Input<List<TriggerMatchingCriteriaGetArgs>> matchingCriterias;

    public Input<List<TriggerMatchingCriteriaGetArgs>> getMatchingCriterias() {
        return this.matchingCriterias == null ? Input.empty() : this.matchingCriterias;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="serviceAccount")
    private final @Nullable Input<String> serviceAccount;

    public Input<String> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    @InputImport(name="transports")
    private final @Nullable Input<List<TriggerTransportGetArgs>> transports;

    public Input<List<TriggerTransportGetArgs>> getTransports() {
        return this.transports == null ? Input.empty() : this.transports;
    }

    @InputImport(name="uid")
    private final @Nullable Input<String> uid;

    public Input<String> getUid() {
        return this.uid == null ? Input.empty() : this.uid;
    }

    @InputImport(name="updateTime")
    private final @Nullable Input<String> updateTime;

    public Input<String> getUpdateTime() {
        return this.updateTime == null ? Input.empty() : this.updateTime;
    }

    public TriggerState(
        @Nullable Input<String> createTime,
        @Nullable Input<TriggerDestinationGetArgs> destination,
        @Nullable Input<String> etag,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<List<TriggerMatchingCriteriaGetArgs>> matchingCriterias,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> serviceAccount,
        @Nullable Input<List<TriggerTransportGetArgs>> transports,
        @Nullable Input<String> uid,
        @Nullable Input<String> updateTime) {
        this.createTime = createTime;
        this.destination = destination;
        this.etag = etag;
        this.labels = labels;
        this.location = location;
        this.matchingCriterias = matchingCriterias;
        this.name = name;
        this.project = project;
        this.serviceAccount = serviceAccount;
        this.transports = transports;
        this.uid = uid;
        this.updateTime = updateTime;
    }

    private TriggerState() {
        this.createTime = Input.empty();
        this.destination = Input.empty();
        this.etag = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.matchingCriterias = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.serviceAccount = Input.empty();
        this.transports = Input.empty();
        this.uid = Input.empty();
        this.updateTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createTime;
        private @Nullable Input<TriggerDestinationGetArgs> destination;
        private @Nullable Input<String> etag;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<List<TriggerMatchingCriteriaGetArgs>> matchingCriterias;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> serviceAccount;
        private @Nullable Input<List<TriggerTransportGetArgs>> transports;
        private @Nullable Input<String> uid;
        private @Nullable Input<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.destination = defaults.destination;
    	      this.etag = defaults.etag;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.matchingCriterias = defaults.matchingCriterias;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.transports = defaults.transports;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder setCreateTime(@Nullable Input<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder setCreateTime(@Nullable String createTime) {
            this.createTime = Input.ofNullable(createTime);
            return this;
        }

        public Builder setDestination(@Nullable Input<TriggerDestinationGetArgs> destination) {
            this.destination = destination;
            return this;
        }

        public Builder setDestination(@Nullable TriggerDestinationGetArgs destination) {
            this.destination = Input.ofNullable(destination);
            return this;
        }

        public Builder setEtag(@Nullable Input<String> etag) {
            this.etag = etag;
            return this;
        }

        public Builder setEtag(@Nullable String etag) {
            this.etag = Input.ofNullable(etag);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMatchingCriterias(@Nullable Input<List<TriggerMatchingCriteriaGetArgs>> matchingCriterias) {
            this.matchingCriterias = matchingCriterias;
            return this;
        }

        public Builder setMatchingCriterias(@Nullable List<TriggerMatchingCriteriaGetArgs> matchingCriterias) {
            this.matchingCriterias = Input.ofNullable(matchingCriterias);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setServiceAccount(@Nullable Input<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder setServiceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder setTransports(@Nullable Input<List<TriggerTransportGetArgs>> transports) {
            this.transports = transports;
            return this;
        }

        public Builder setTransports(@Nullable List<TriggerTransportGetArgs> transports) {
            this.transports = Input.ofNullable(transports);
            return this;
        }

        public Builder setUid(@Nullable Input<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder setUid(@Nullable String uid) {
            this.uid = Input.ofNullable(uid);
            return this;
        }

        public Builder setUpdateTime(@Nullable Input<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        public Builder setUpdateTime(@Nullable String updateTime) {
            this.updateTime = Input.ofNullable(updateTime);
            return this;
        }

        public TriggerState build() {
            return new TriggerState(createTime, destination, etag, labels, location, matchingCriterias, name, project, serviceAccount, transports, uid, updateTime);
        }
    }
}
