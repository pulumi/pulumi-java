// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.networkconnectivity;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.networkconnectivity.SpokeArgs;
import io.pulumi.gcp.networkconnectivity.inputs.SpokeState;
import io.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedInterconnectAttachments;
import io.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedRouterApplianceInstances;
import io.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedVpnTunnels;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * The NetworkConnectivity Spoke resource
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Router_appliance
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const network = new gcp.compute.Network("network", {autoCreateSubnetworks: false});
 * const subnetwork = new gcp.compute.Subnetwork("subnetwork", {
 *     ipCidrRange: "10.0.0.0/28",
 *     region: "us-west1",
 *     network: network.selfLink,
 * });
 * const instance = new gcp.compute.Instance("instance", {
 *     machineType: "e2-medium",
 *     canIpForward: true,
 *     zone: "us-west1-a",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "projects/debian-cloud/global/images/debian-10-buster-v20210817",
 *         },
 *     },
 *     networkInterfaces: [{
 *         subnetwork: subnetwork.name,
 *         networkIp: "10.0.0.2",
 *         accessConfigs: [{
 *             networkTier: "PREMIUM",
 *         }],
 *     }],
 * });
 * const basicHub = new gcp.networkconnectivity.Hub("basicHub", {
 *     description: "A sample hub",
 *     labels: {
 *         "label-two": "value-one",
 *     },
 * });
 * const primary = new gcp.networkconnectivity.Spoke("primary", {
 *     location: "us-west1",
 *     description: "A sample spoke with a linked routher appliance instance",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     hub: basicHub.id,
 *     linkedRouterApplianceInstances: {
 *         instances: [{
 *             virtualMachine: instance.selfLink,
 *             ipAddress: "10.0.0.2",
 *         }],
 *         siteToSiteDataTransfer: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * network = gcp.compute.Network("network", auto_create_subnetworks=False)
 * subnetwork = gcp.compute.Subnetwork("subnetwork",
 *     ip_cidr_range="10.0.0.0/28",
 *     region="us-west1",
 *     network=network.self_link)
 * instance = gcp.compute.Instance("instance",
 *     machine_type="e2-medium",
 *     can_ip_forward=True,
 *     zone="us-west1-a",
 *     boot_disk=gcp.compute.InstanceBootDiskArgs(
 *         initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
 *             image="projects/debian-cloud/global/images/debian-10-buster-v20210817",
 *         ),
 *     ),
 *     network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
 *         subnetwork=subnetwork.name,
 *         network_ip="10.0.0.2",
 *         access_configs=[gcp.compute.InstanceNetworkInterfaceAccessConfigArgs(
 *             network_tier="PREMIUM",
 *         )],
 *     )])
 * basic_hub = gcp.networkconnectivity.Hub("basicHub",
 *     description="A sample hub",
 *     labels={
 *         "label-two": "value-one",
 *     })
 * primary = gcp.networkconnectivity.Spoke("primary",
 *     location="us-west1",
 *     description="A sample spoke with a linked routher appliance instance",
 *     labels={
 *         "label-one": "value-one",
 *     },
 *     hub=basic_hub.id,
 *     linked_router_appliance_instances=gcp.networkconnectivity.SpokeLinkedRouterApplianceInstancesArgs(
 *         instances=[gcp.networkconnectivity.SpokeLinkedRouterApplianceInstancesInstanceArgs(
 *             virtual_machine=instance.self_link,
 *             ip_address="10.0.0.2",
 *         )],
 *         site_to_site_data_transfer=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var network = new Gcp.Compute.Network("network", new Gcp.Compute.NetworkArgs
 *         {
 *             AutoCreateSubnetworks = false,
 *         });
 *         var subnetwork = new Gcp.Compute.Subnetwork("subnetwork", new Gcp.Compute.SubnetworkArgs
 *         {
 *             IpCidrRange = "10.0.0.0/28",
 *             Region = "us-west1",
 *             Network = network.SelfLink,
 *         });
 *         var instance = new Gcp.Compute.Instance("instance", new Gcp.Compute.InstanceArgs
 *         {
 *             MachineType = "e2-medium",
 *             CanIpForward = true,
 *             Zone = "us-west1-a",
 *             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
 *             {
 *                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
 *                 {
 *                     Image = "projects/debian-cloud/global/images/debian-10-buster-v20210817",
 *                 },
 *             },
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
 *                 {
 *                     Subnetwork = subnetwork.Name,
 *                     NetworkIp = "10.0.0.2",
 *                     AccessConfigs = 
 *                     {
 *                         new Gcp.Compute.Inputs.InstanceNetworkInterfaceAccessConfigArgs
 *                         {
 *                             NetworkTier = "PREMIUM",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var basicHub = new Gcp.NetworkConnectivity.Hub("basicHub", new Gcp.NetworkConnectivity.HubArgs
 *         {
 *             Description = "A sample hub",
 *             Labels = 
 *             {
 *                 { "label-two", "value-one" },
 *             },
 *         });
 *         var primary = new Gcp.NetworkConnectivity.Spoke("primary", new Gcp.NetworkConnectivity.SpokeArgs
 *         {
 *             Location = "us-west1",
 *             Description = "A sample spoke with a linked routher appliance instance",
 *             Labels = 
 *             {
 *                 { "label-one", "value-one" },
 *             },
 *             Hub = basicHub.Id,
 *             LinkedRouterApplianceInstances = new Gcp.NetworkConnectivity.Inputs.SpokeLinkedRouterApplianceInstancesArgs
 *             {
 *                 Instances = 
 *                 {
 *                     new Gcp.NetworkConnectivity.Inputs.SpokeLinkedRouterApplianceInstancesInstanceArgs
 *                     {
 *                         VirtualMachine = instance.SelfLink,
 *                         IpAddress = "10.0.0.2",
 *                     },
 *                 },
 *                 SiteToSiteDataTransfer = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networkconnectivity"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
 * 			AutoCreateSubnetworks: pulumi.Bool(false),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		subnetwork, err := compute.NewSubnetwork(ctx, "subnetwork", &compute.SubnetworkArgs{
 * 			IpCidrRange: pulumi.String("10.0.0.0/28"),
 * 			Region:      pulumi.String("us-west1"),
 * 			Network:     network.SelfLink,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		instance, err := compute.NewInstance(ctx, "instance", &compute.InstanceArgs{
 * 			MachineType:  pulumi.String("e2-medium"),
 * 			CanIpForward: pulumi.Bool(true),
 * 			Zone:         pulumi.String("us-west1-a"),
 * 			BootDisk: &compute.InstanceBootDiskArgs{
 * 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
 * 					Image: pulumi.String("projects/debian-cloud/global/images/debian-10-buster-v20210817"),
 * 				},
 * 			},
 * 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
 * 				&compute.InstanceNetworkInterfaceArgs{
 * 					Subnetwork: subnetwork.Name,
 * 					NetworkIp:  pulumi.String("10.0.0.2"),
 * 					AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
 * 						&compute.InstanceNetworkInterfaceAccessConfigArgs{
 * 							NetworkTier: pulumi.String("PREMIUM"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		basicHub, err := networkconnectivity.NewHub(ctx, "basicHub", &networkconnectivity.HubArgs{
 * 			Description: pulumi.String("A sample hub"),
 * 			Labels: pulumi.StringMap{
 * 				"label-two": pulumi.String("value-one"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = networkconnectivity.NewSpoke(ctx, "primary", &networkconnectivity.SpokeArgs{
 * 			Location:    pulumi.String("us-west1"),
 * 			Description: pulumi.String("A sample spoke with a linked routher appliance instance"),
 * 			Labels: pulumi.StringMap{
 * 				"label-one": pulumi.String("value-one"),
 * 			},
 * 			Hub: basicHub.ID(),
 * 			LinkedRouterApplianceInstances: &networkconnectivity.SpokeLinkedRouterApplianceInstancesArgs{
 * 				Instances: networkconnectivity.SpokeLinkedRouterApplianceInstancesInstanceArray{
 * 					&networkconnectivity.SpokeLinkedRouterApplianceInstancesInstanceArgs{
 * 						VirtualMachine: instance.SelfLink,
 * 						IpAddress:      pulumi.String("10.0.0.2"),
 * 					},
 * 				},
 * 				SiteToSiteDataTransfer: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Spoke can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:networkconnectivity/spoke:Spoke default projects/{{project}}/locations/{{location}}/spokes/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{location}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:networkconnectivity/spoke:Spoke")
public class Spoke extends io.pulumi.resources.CustomResource {
    /**
     * Output only. The time the spoke was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Output only. The time the spoke was created.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * An optional description of the spoke.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of the spoke.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Immutable. The URI of the hub that this spoke is attached to.
     * 
     */
    @Export(name="hub", type=String.class, parameters={})
    private Output<String> hub;

    /**
     * @return Immutable. The URI of the hub that this spoke is attached to.
     * 
     */
    public Output<String> getHub() {
        return this.hub;
    }
    /**
     * Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
     * 
     */
    @Export(name="linkedInterconnectAttachments", type=SpokeLinkedInterconnectAttachments.class, parameters={})
    private Output</* @Nullable */ SpokeLinkedInterconnectAttachments> linkedInterconnectAttachments;

    /**
     * @return A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
     * 
     */
    public Output</* @Nullable */ SpokeLinkedInterconnectAttachments> getLinkedInterconnectAttachments() {
        return this.linkedInterconnectAttachments;
    }
    /**
     * The URIs of linked Router appliance resources
     * 
     */
    @Export(name="linkedRouterApplianceInstances", type=SpokeLinkedRouterApplianceInstances.class, parameters={})
    private Output</* @Nullable */ SpokeLinkedRouterApplianceInstances> linkedRouterApplianceInstances;

    /**
     * @return The URIs of linked Router appliance resources
     * 
     */
    public Output</* @Nullable */ SpokeLinkedRouterApplianceInstances> getLinkedRouterApplianceInstances() {
        return this.linkedRouterApplianceInstances;
    }
    /**
     * The URIs of linked VPN tunnel resources
     * 
     */
    @Export(name="linkedVpnTunnels", type=SpokeLinkedVpnTunnels.class, parameters={})
    private Output</* @Nullable */ SpokeLinkedVpnTunnels> linkedVpnTunnels;

    /**
     * @return The URIs of linked VPN tunnel resources
     * 
     */
    public Output</* @Nullable */ SpokeLinkedVpnTunnels> getLinkedVpnTunnels() {
        return this.linkedVpnTunnels;
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * Immutable. The name of the spoke. Spoke names must be unique.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Immutable. The name of the spoke. Spoke names must be unique.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The project for the resource
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Output only. The current lifecycle state of this spoke. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return Output only. The current lifecycle state of this spoke. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is
     * deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    @Export(name="uniqueId", type=String.class, parameters={})
    private Output<String> uniqueId;

    /**
     * @return Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is
     * deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    public Output<String> getUniqueId() {
        return this.uniqueId;
    }
    /**
     * Output only. The time the spoke was last updated.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Output only. The time the spoke was last updated.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Spoke(String name) {
        this(name, SpokeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Spoke(String name, SpokeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Spoke(String name, SpokeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkconnectivity/spoke:Spoke", name, args == null ? SpokeArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Spoke(String name, Output<String> id, @Nullable SpokeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkconnectivity/spoke:Spoke", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Spoke get(String name, Output<String> id, @Nullable SpokeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Spoke(name, id, state, options);
    }
}
