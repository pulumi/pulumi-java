// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.accesscontextmanager.outputs.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class AccessLevelsAccessLevelBasicConditionDevicePolicy {
    /**
     * A list of allowed device management levels.
     * An empty list allows all management levels.
     * Each value may be one of `MANAGEMENT_UNSPECIFIED`, `NONE`, `BASIC`, and `COMPLETE`.
     * 
     */
    private final @Nullable List<String> allowedDeviceManagementLevels;
    /**
     * A list of allowed encryptions statuses.
     * An empty list allows all statuses.
     * Each value may be one of `ENCRYPTION_UNSPECIFIED`, `ENCRYPTION_UNSUPPORTED`, `UNENCRYPTED`, and `ENCRYPTED`.
     * 
     */
    private final @Nullable List<String> allowedEncryptionStatuses;
    /**
     * A list of allowed OS versions.
     * An empty list allows all types and all versions.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint> osConstraints;
    /**
     * Whether the device needs to be approved by the customer admin.
     * 
     */
    private final @Nullable Boolean requireAdminApproval;
    /**
     * Whether the device needs to be corp owned.
     * 
     */
    private final @Nullable Boolean requireCorpOwned;
    /**
     * Whether or not screenlock is required for the DevicePolicy
     * to be true. Defaults to false.
     * 
     */
    private final @Nullable Boolean requireScreenLock;

    @OutputCustomType.Constructor({"allowedDeviceManagementLevels","allowedEncryptionStatuses","osConstraints","requireAdminApproval","requireCorpOwned","requireScreenLock"})
    private AccessLevelsAccessLevelBasicConditionDevicePolicy(
        @Nullable List<String> allowedDeviceManagementLevels,
        @Nullable List<String> allowedEncryptionStatuses,
        @Nullable List<AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint> osConstraints,
        @Nullable Boolean requireAdminApproval,
        @Nullable Boolean requireCorpOwned,
        @Nullable Boolean requireScreenLock) {
        this.allowedDeviceManagementLevels = allowedDeviceManagementLevels;
        this.allowedEncryptionStatuses = allowedEncryptionStatuses;
        this.osConstraints = osConstraints;
        this.requireAdminApproval = requireAdminApproval;
        this.requireCorpOwned = requireCorpOwned;
        this.requireScreenLock = requireScreenLock;
    }

    /**
     * A list of allowed device management levels.
     * An empty list allows all management levels.
     * Each value may be one of `MANAGEMENT_UNSPECIFIED`, `NONE`, `BASIC`, and `COMPLETE`.
     * 
     */
    public List<String> getAllowedDeviceManagementLevels() {
        return this.allowedDeviceManagementLevels == null ? List.of() : this.allowedDeviceManagementLevels;
    }
    /**
     * A list of allowed encryptions statuses.
     * An empty list allows all statuses.
     * Each value may be one of `ENCRYPTION_UNSPECIFIED`, `ENCRYPTION_UNSUPPORTED`, `UNENCRYPTED`, and `ENCRYPTED`.
     * 
     */
    public List<String> getAllowedEncryptionStatuses() {
        return this.allowedEncryptionStatuses == null ? List.of() : this.allowedEncryptionStatuses;
    }
    /**
     * A list of allowed OS versions.
     * An empty list allows all types and all versions.
     * Structure is documented below.
     * 
     */
    public List<AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint> getOsConstraints() {
        return this.osConstraints == null ? List.of() : this.osConstraints;
    }
    /**
     * Whether the device needs to be approved by the customer admin.
     * 
     */
    public Optional<Boolean> getRequireAdminApproval() {
        return Optional.ofNullable(this.requireAdminApproval);
    }
    /**
     * Whether the device needs to be corp owned.
     * 
     */
    public Optional<Boolean> getRequireCorpOwned() {
        return Optional.ofNullable(this.requireCorpOwned);
    }
    /**
     * Whether or not screenlock is required for the DevicePolicy
     * to be true. Defaults to false.
     * 
     */
    public Optional<Boolean> getRequireScreenLock() {
        return Optional.ofNullable(this.requireScreenLock);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessLevelsAccessLevelBasicConditionDevicePolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> allowedDeviceManagementLevels;
        private @Nullable List<String> allowedEncryptionStatuses;
        private @Nullable List<AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint> osConstraints;
        private @Nullable Boolean requireAdminApproval;
        private @Nullable Boolean requireCorpOwned;
        private @Nullable Boolean requireScreenLock;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessLevelsAccessLevelBasicConditionDevicePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedDeviceManagementLevels = defaults.allowedDeviceManagementLevels;
    	      this.allowedEncryptionStatuses = defaults.allowedEncryptionStatuses;
    	      this.osConstraints = defaults.osConstraints;
    	      this.requireAdminApproval = defaults.requireAdminApproval;
    	      this.requireCorpOwned = defaults.requireCorpOwned;
    	      this.requireScreenLock = defaults.requireScreenLock;
        }

        public Builder setAllowedDeviceManagementLevels(@Nullable List<String> allowedDeviceManagementLevels) {
            this.allowedDeviceManagementLevels = allowedDeviceManagementLevels;
            return this;
        }

        public Builder setAllowedEncryptionStatuses(@Nullable List<String> allowedEncryptionStatuses) {
            this.allowedEncryptionStatuses = allowedEncryptionStatuses;
            return this;
        }

        public Builder setOsConstraints(@Nullable List<AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint> osConstraints) {
            this.osConstraints = osConstraints;
            return this;
        }

        public Builder setRequireAdminApproval(@Nullable Boolean requireAdminApproval) {
            this.requireAdminApproval = requireAdminApproval;
            return this;
        }

        public Builder setRequireCorpOwned(@Nullable Boolean requireCorpOwned) {
            this.requireCorpOwned = requireCorpOwned;
            return this;
        }

        public Builder setRequireScreenLock(@Nullable Boolean requireScreenLock) {
            this.requireScreenLock = requireScreenLock;
            return this;
        }

        public AccessLevelsAccessLevelBasicConditionDevicePolicy build() {
            return new AccessLevelsAccessLevelBasicConditionDevicePolicy(allowedDeviceManagementLevels, allowedEncryptionStatuses, osConstraints, requireAdminApproval, requireCorpOwned, requireScreenLock);
        }
    }
}
