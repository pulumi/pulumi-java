// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.gkehub.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FeatureMembershipConfigmanagementPolicyControllerGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FeatureMembershipConfigmanagementPolicyControllerGetArgs Empty = new FeatureMembershipConfigmanagementPolicyControllerGetArgs();

    /**
     * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    @InputImport(name="auditIntervalSeconds")
      private final @Nullable Input<String> auditIntervalSeconds;

    public Input<String> getAuditIntervalSeconds() {
        return this.auditIntervalSeconds == null ? Input.empty() : this.auditIntervalSeconds;
    }

    /**
     * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    @InputImport(name="exemptableNamespaces")
      private final @Nullable Input<List<String>> exemptableNamespaces;

    public Input<List<String>> getExemptableNamespaces() {
        return this.exemptableNamespaces == null ? Input.empty() : this.exemptableNamespaces;
    }

    /**
     * Logs all denies and dry run failures.
     * 
     */
    @InputImport(name="logDeniesEnabled")
      private final @Nullable Input<Boolean> logDeniesEnabled;

    public Input<Boolean> getLogDeniesEnabled() {
        return this.logDeniesEnabled == null ? Input.empty() : this.logDeniesEnabled;
    }

    /**
     * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    @InputImport(name="referentialRulesEnabled")
      private final @Nullable Input<Boolean> referentialRulesEnabled;

    public Input<Boolean> getReferentialRulesEnabled() {
        return this.referentialRulesEnabled == null ? Input.empty() : this.referentialRulesEnabled;
    }

    /**
     * Installs the default template library along with Policy Controller.
     * 
     */
    @InputImport(name="templateLibraryInstalled")
      private final @Nullable Input<Boolean> templateLibraryInstalled;

    public Input<Boolean> getTemplateLibraryInstalled() {
        return this.templateLibraryInstalled == null ? Input.empty() : this.templateLibraryInstalled;
    }

    public FeatureMembershipConfigmanagementPolicyControllerGetArgs(
        @Nullable Input<String> auditIntervalSeconds,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<List<String>> exemptableNamespaces,
        @Nullable Input<Boolean> logDeniesEnabled,
        @Nullable Input<Boolean> referentialRulesEnabled,
        @Nullable Input<Boolean> templateLibraryInstalled) {
        this.auditIntervalSeconds = auditIntervalSeconds;
        this.enabled = enabled;
        this.exemptableNamespaces = exemptableNamespaces;
        this.logDeniesEnabled = logDeniesEnabled;
        this.referentialRulesEnabled = referentialRulesEnabled;
        this.templateLibraryInstalled = templateLibraryInstalled;
    }

    private FeatureMembershipConfigmanagementPolicyControllerGetArgs() {
        this.auditIntervalSeconds = Input.empty();
        this.enabled = Input.empty();
        this.exemptableNamespaces = Input.empty();
        this.logDeniesEnabled = Input.empty();
        this.referentialRulesEnabled = Input.empty();
        this.templateLibraryInstalled = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureMembershipConfigmanagementPolicyControllerGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> auditIntervalSeconds;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<List<String>> exemptableNamespaces;
        private @Nullable Input<Boolean> logDeniesEnabled;
        private @Nullable Input<Boolean> referentialRulesEnabled;
        private @Nullable Input<Boolean> templateLibraryInstalled;

        public Builder() {
    	      // Empty
        }

        public Builder(FeatureMembershipConfigmanagementPolicyControllerGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditIntervalSeconds = defaults.auditIntervalSeconds;
    	      this.enabled = defaults.enabled;
    	      this.exemptableNamespaces = defaults.exemptableNamespaces;
    	      this.logDeniesEnabled = defaults.logDeniesEnabled;
    	      this.referentialRulesEnabled = defaults.referentialRulesEnabled;
    	      this.templateLibraryInstalled = defaults.templateLibraryInstalled;
        }

        public Builder setAuditIntervalSeconds(@Nullable Input<String> auditIntervalSeconds) {
            this.auditIntervalSeconds = auditIntervalSeconds;
            return this;
        }

        public Builder setAuditIntervalSeconds(@Nullable String auditIntervalSeconds) {
            this.auditIntervalSeconds = Input.ofNullable(auditIntervalSeconds);
            return this;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setExemptableNamespaces(@Nullable Input<List<String>> exemptableNamespaces) {
            this.exemptableNamespaces = exemptableNamespaces;
            return this;
        }

        public Builder setExemptableNamespaces(@Nullable List<String> exemptableNamespaces) {
            this.exemptableNamespaces = Input.ofNullable(exemptableNamespaces);
            return this;
        }

        public Builder setLogDeniesEnabled(@Nullable Input<Boolean> logDeniesEnabled) {
            this.logDeniesEnabled = logDeniesEnabled;
            return this;
        }

        public Builder setLogDeniesEnabled(@Nullable Boolean logDeniesEnabled) {
            this.logDeniesEnabled = Input.ofNullable(logDeniesEnabled);
            return this;
        }

        public Builder setReferentialRulesEnabled(@Nullable Input<Boolean> referentialRulesEnabled) {
            this.referentialRulesEnabled = referentialRulesEnabled;
            return this;
        }

        public Builder setReferentialRulesEnabled(@Nullable Boolean referentialRulesEnabled) {
            this.referentialRulesEnabled = Input.ofNullable(referentialRulesEnabled);
            return this;
        }

        public Builder setTemplateLibraryInstalled(@Nullable Input<Boolean> templateLibraryInstalled) {
            this.templateLibraryInstalled = templateLibraryInstalled;
            return this;
        }

        public Builder setTemplateLibraryInstalled(@Nullable Boolean templateLibraryInstalled) {
            this.templateLibraryInstalled = Input.ofNullable(templateLibraryInstalled);
            return this;
        }
        public FeatureMembershipConfigmanagementPolicyControllerGetArgs build() {
            return new FeatureMembershipConfigmanagementPolicyControllerGetArgs(auditIntervalSeconds, enabled, exemptableNamespaces, logDeniesEnabled, referentialRulesEnabled, templateLibraryInstalled);
        }
    }
}
