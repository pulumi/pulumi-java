// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.monitoring.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.monitoring.inputs.SloBasicSliAvailabilityArgs;
import io.pulumi.gcp.monitoring.inputs.SloBasicSliLatencyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SloBasicSliArgs extends io.pulumi.resources.ResourceArgs {

    public static final SloBasicSliArgs Empty = new SloBasicSliArgs();

    /**
     * Availability based SLI, dervied from count of requests made to this service that return successfully.
     * Structure is documented below.
     * 
     */
    @Import(name="availability")
      private final @Nullable Output<SloBasicSliAvailabilityArgs> availability;

    public Output<SloBasicSliAvailabilityArgs> getAvailability() {
        return this.availability == null ? Output.empty() : this.availability;
    }

    /**
     * Parameters for a latency threshold SLI.
     * Structure is documented below.
     * 
     */
    @Import(name="latency")
      private final @Nullable Output<SloBasicSliLatencyArgs> latency;

    public Output<SloBasicSliLatencyArgs> getLatency() {
        return this.latency == null ? Output.empty() : this.latency;
    }

    /**
     * An optional set of locations to which this SLI is relevant.
     * Telemetry from other locations will not be used to calculate
     * performance for this SLI. If omitted, this SLI applies to all
     * locations in which the Service has activity. For service types
     * that don't support breaking down by location, setting this
     * field will result in an error.
     * 
     */
    @Import(name="locations")
      private final @Nullable Output<List<String>> locations;

    public Output<List<String>> getLocations() {
        return this.locations == null ? Output.empty() : this.locations;
    }

    /**
     * An optional set of RPCs to which this SLI is relevant.
     * Telemetry from other methods will not be used to calculate
     * performance for this SLI. If omitted, this SLI applies to all
     * the Service's methods. For service types that don't support
     * breaking down by method, setting this field will result in an
     * error.
     * 
     */
    @Import(name="methods")
      private final @Nullable Output<List<String>> methods;

    public Output<List<String>> getMethods() {
        return this.methods == null ? Output.empty() : this.methods;
    }

    /**
     * The set of API versions to which this SLI is relevant.
     * Telemetry from other API versions will not be used to
     * calculate performance for this SLI. If omitted,
     * this SLI applies to all API versions. For service types
     * that don't support breaking down by version, setting this
     * field will result in an error.
     * 
     */
    @Import(name="versions")
      private final @Nullable Output<List<String>> versions;

    public Output<List<String>> getVersions() {
        return this.versions == null ? Output.empty() : this.versions;
    }

    public SloBasicSliArgs(
        @Nullable Output<SloBasicSliAvailabilityArgs> availability,
        @Nullable Output<SloBasicSliLatencyArgs> latency,
        @Nullable Output<List<String>> locations,
        @Nullable Output<List<String>> methods,
        @Nullable Output<List<String>> versions) {
        this.availability = availability;
        this.latency = latency;
        this.locations = locations;
        this.methods = methods;
        this.versions = versions;
    }

    private SloBasicSliArgs() {
        this.availability = Output.empty();
        this.latency = Output.empty();
        this.locations = Output.empty();
        this.methods = Output.empty();
        this.versions = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloBasicSliArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SloBasicSliAvailabilityArgs> availability;
        private @Nullable Output<SloBasicSliLatencyArgs> latency;
        private @Nullable Output<List<String>> locations;
        private @Nullable Output<List<String>> methods;
        private @Nullable Output<List<String>> versions;

        public Builder() {
    	      // Empty
        }

        public Builder(SloBasicSliArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.latency = defaults.latency;
    	      this.locations = defaults.locations;
    	      this.methods = defaults.methods;
    	      this.versions = defaults.versions;
        }

        public Builder availability(@Nullable Output<SloBasicSliAvailabilityArgs> availability) {
            this.availability = availability;
            return this;
        }

        public Builder availability(@Nullable SloBasicSliAvailabilityArgs availability) {
            this.availability = Output.ofNullable(availability);
            return this;
        }

        public Builder latency(@Nullable Output<SloBasicSliLatencyArgs> latency) {
            this.latency = latency;
            return this;
        }

        public Builder latency(@Nullable SloBasicSliLatencyArgs latency) {
            this.latency = Output.ofNullable(latency);
            return this;
        }

        public Builder locations(@Nullable Output<List<String>> locations) {
            this.locations = locations;
            return this;
        }

        public Builder locations(@Nullable List<String> locations) {
            this.locations = Output.ofNullable(locations);
            return this;
        }

        public Builder methods(@Nullable Output<List<String>> methods) {
            this.methods = methods;
            return this;
        }

        public Builder methods(@Nullable List<String> methods) {
            this.methods = Output.ofNullable(methods);
            return this;
        }

        public Builder versions(@Nullable Output<List<String>> versions) {
            this.versions = versions;
            return this;
        }

        public Builder versions(@Nullable List<String> versions) {
            this.versions = Output.ofNullable(versions);
            return this;
        }
        public SloBasicSliArgs build() {
            return new SloBasicSliArgs(availability, latency, locations, methods, versions);
        }
    }
}
