// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceCloneGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceIpAddressGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceReplicaConfigurationGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceRestoreBackupContextGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceServerCaCertGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseInstanceState extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceState Empty = new DatabaseInstanceState();

    @InputImport(name="clone")
    private final @Nullable Input<DatabaseInstanceCloneGetArgs> clone;

    public Input<DatabaseInstanceCloneGetArgs> getClone() {
        return this.clone == null ? Input.empty() : this.clone;
    }

    @InputImport(name="connectionName")
    private final @Nullable Input<String> connectionName;

    public Input<String> getConnectionName() {
        return this.connectionName == null ? Input.empty() : this.connectionName;
    }

    @InputImport(name="databaseVersion")
    private final @Nullable Input<String> databaseVersion;

    public Input<String> getDatabaseVersion() {
        return this.databaseVersion == null ? Input.empty() : this.databaseVersion;
    }

    @InputImport(name="deletionProtection")
    private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    @InputImport(name="encryptionKeyName")
    private final @Nullable Input<String> encryptionKeyName;

    public Input<String> getEncryptionKeyName() {
        return this.encryptionKeyName == null ? Input.empty() : this.encryptionKeyName;
    }

    @InputImport(name="firstIpAddress")
    private final @Nullable Input<String> firstIpAddress;

    public Input<String> getFirstIpAddress() {
        return this.firstIpAddress == null ? Input.empty() : this.firstIpAddress;
    }

    @InputImport(name="ipAddresses")
    private final @Nullable Input<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses;

    public Input<List<DatabaseInstanceIpAddressGetArgs>> getIpAddresses() {
        return this.ipAddresses == null ? Input.empty() : this.ipAddresses;
    }

    @InputImport(name="masterInstanceName")
    private final @Nullable Input<String> masterInstanceName;

    public Input<String> getMasterInstanceName() {
        return this.masterInstanceName == null ? Input.empty() : this.masterInstanceName;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="privateIpAddress")
    private final @Nullable Input<String> privateIpAddress;

    public Input<String> getPrivateIpAddress() {
        return this.privateIpAddress == null ? Input.empty() : this.privateIpAddress;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="publicIpAddress")
    private final @Nullable Input<String> publicIpAddress;

    public Input<String> getPublicIpAddress() {
        return this.publicIpAddress == null ? Input.empty() : this.publicIpAddress;
    }

    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    @InputImport(name="replicaConfiguration")
    private final @Nullable Input<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration;

    public Input<DatabaseInstanceReplicaConfigurationGetArgs> getReplicaConfiguration() {
        return this.replicaConfiguration == null ? Input.empty() : this.replicaConfiguration;
    }

    @InputImport(name="restoreBackupContext")
    private final @Nullable Input<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext;

    public Input<DatabaseInstanceRestoreBackupContextGetArgs> getRestoreBackupContext() {
        return this.restoreBackupContext == null ? Input.empty() : this.restoreBackupContext;
    }

    @InputImport(name="rootPassword")
    private final @Nullable Input<String> rootPassword;

    public Input<String> getRootPassword() {
        return this.rootPassword == null ? Input.empty() : this.rootPassword;
    }

    @InputImport(name="selfLink")
    private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    @InputImport(name="serverCaCerts")
    private final @Nullable Input<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts;

    public Input<List<DatabaseInstanceServerCaCertGetArgs>> getServerCaCerts() {
        return this.serverCaCerts == null ? Input.empty() : this.serverCaCerts;
    }

    @InputImport(name="serviceAccountEmailAddress")
    private final @Nullable Input<String> serviceAccountEmailAddress;

    public Input<String> getServiceAccountEmailAddress() {
        return this.serviceAccountEmailAddress == null ? Input.empty() : this.serviceAccountEmailAddress;
    }

    @InputImport(name="settings")
    private final @Nullable Input<DatabaseInstanceSettingsGetArgs> settings;

    public Input<DatabaseInstanceSettingsGetArgs> getSettings() {
        return this.settings == null ? Input.empty() : this.settings;
    }

    public DatabaseInstanceState(
        @Nullable Input<DatabaseInstanceCloneGetArgs> clone,
        @Nullable Input<String> connectionName,
        @Nullable Input<String> databaseVersion,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> encryptionKeyName,
        @Nullable Input<String> firstIpAddress,
        @Nullable Input<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses,
        @Nullable Input<String> masterInstanceName,
        @Nullable Input<String> name,
        @Nullable Input<String> privateIpAddress,
        @Nullable Input<String> project,
        @Nullable Input<String> publicIpAddress,
        @Nullable Input<String> region,
        @Nullable Input<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration,
        @Nullable Input<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext,
        @Nullable Input<String> rootPassword,
        @Nullable Input<String> selfLink,
        @Nullable Input<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts,
        @Nullable Input<String> serviceAccountEmailAddress,
        @Nullable Input<DatabaseInstanceSettingsGetArgs> settings) {
        this.clone = clone;
        this.connectionName = connectionName;
        this.databaseVersion = databaseVersion;
        this.deletionProtection = deletionProtection;
        this.encryptionKeyName = encryptionKeyName;
        this.firstIpAddress = firstIpAddress;
        this.ipAddresses = ipAddresses;
        this.masterInstanceName = masterInstanceName;
        this.name = name;
        this.privateIpAddress = privateIpAddress;
        this.project = project;
        this.publicIpAddress = publicIpAddress;
        this.region = region;
        this.replicaConfiguration = replicaConfiguration;
        this.restoreBackupContext = restoreBackupContext;
        this.rootPassword = rootPassword;
        this.selfLink = selfLink;
        this.serverCaCerts = serverCaCerts;
        this.serviceAccountEmailAddress = serviceAccountEmailAddress;
        this.settings = settings;
    }

    private DatabaseInstanceState() {
        this.clone = Input.empty();
        this.connectionName = Input.empty();
        this.databaseVersion = Input.empty();
        this.deletionProtection = Input.empty();
        this.encryptionKeyName = Input.empty();
        this.firstIpAddress = Input.empty();
        this.ipAddresses = Input.empty();
        this.masterInstanceName = Input.empty();
        this.name = Input.empty();
        this.privateIpAddress = Input.empty();
        this.project = Input.empty();
        this.publicIpAddress = Input.empty();
        this.region = Input.empty();
        this.replicaConfiguration = Input.empty();
        this.restoreBackupContext = Input.empty();
        this.rootPassword = Input.empty();
        this.selfLink = Input.empty();
        this.serverCaCerts = Input.empty();
        this.serviceAccountEmailAddress = Input.empty();
        this.settings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DatabaseInstanceCloneGetArgs> clone;
        private @Nullable Input<String> connectionName;
        private @Nullable Input<String> databaseVersion;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> encryptionKeyName;
        private @Nullable Input<String> firstIpAddress;
        private @Nullable Input<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses;
        private @Nullable Input<String> masterInstanceName;
        private @Nullable Input<String> name;
        private @Nullable Input<String> privateIpAddress;
        private @Nullable Input<String> project;
        private @Nullable Input<String> publicIpAddress;
        private @Nullable Input<String> region;
        private @Nullable Input<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration;
        private @Nullable Input<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext;
        private @Nullable Input<String> rootPassword;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts;
        private @Nullable Input<String> serviceAccountEmailAddress;
        private @Nullable Input<DatabaseInstanceSettingsGetArgs> settings;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clone = defaults.clone;
    	      this.connectionName = defaults.connectionName;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.encryptionKeyName = defaults.encryptionKeyName;
    	      this.firstIpAddress = defaults.firstIpAddress;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.masterInstanceName = defaults.masterInstanceName;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.project = defaults.project;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.region = defaults.region;
    	      this.replicaConfiguration = defaults.replicaConfiguration;
    	      this.restoreBackupContext = defaults.restoreBackupContext;
    	      this.rootPassword = defaults.rootPassword;
    	      this.selfLink = defaults.selfLink;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.serviceAccountEmailAddress = defaults.serviceAccountEmailAddress;
    	      this.settings = defaults.settings;
        }

        public Builder setClone(@Nullable Input<DatabaseInstanceCloneGetArgs> clone) {
            this.clone = clone;
            return this;
        }

        public Builder setClone(@Nullable DatabaseInstanceCloneGetArgs clone) {
            this.clone = Input.ofNullable(clone);
            return this;
        }

        public Builder setConnectionName(@Nullable Input<String> connectionName) {
            this.connectionName = connectionName;
            return this;
        }

        public Builder setConnectionName(@Nullable String connectionName) {
            this.connectionName = Input.ofNullable(connectionName);
            return this;
        }

        public Builder setDatabaseVersion(@Nullable Input<String> databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }

        public Builder setDatabaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = Input.ofNullable(databaseVersion);
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setEncryptionKeyName(@Nullable Input<String> encryptionKeyName) {
            this.encryptionKeyName = encryptionKeyName;
            return this;
        }

        public Builder setEncryptionKeyName(@Nullable String encryptionKeyName) {
            this.encryptionKeyName = Input.ofNullable(encryptionKeyName);
            return this;
        }

        public Builder setFirstIpAddress(@Nullable Input<String> firstIpAddress) {
            this.firstIpAddress = firstIpAddress;
            return this;
        }

        public Builder setFirstIpAddress(@Nullable String firstIpAddress) {
            this.firstIpAddress = Input.ofNullable(firstIpAddress);
            return this;
        }

        public Builder setIpAddresses(@Nullable Input<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses) {
            this.ipAddresses = ipAddresses;
            return this;
        }

        public Builder setIpAddresses(@Nullable List<DatabaseInstanceIpAddressGetArgs> ipAddresses) {
            this.ipAddresses = Input.ofNullable(ipAddresses);
            return this;
        }

        public Builder setMasterInstanceName(@Nullable Input<String> masterInstanceName) {
            this.masterInstanceName = masterInstanceName;
            return this;
        }

        public Builder setMasterInstanceName(@Nullable String masterInstanceName) {
            this.masterInstanceName = Input.ofNullable(masterInstanceName);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable Input<String> privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = Input.ofNullable(privateIpAddress);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setPublicIpAddress(@Nullable Input<String> publicIpAddress) {
            this.publicIpAddress = publicIpAddress;
            return this;
        }

        public Builder setPublicIpAddress(@Nullable String publicIpAddress) {
            this.publicIpAddress = Input.ofNullable(publicIpAddress);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setReplicaConfiguration(@Nullable Input<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration) {
            this.replicaConfiguration = replicaConfiguration;
            return this;
        }

        public Builder setReplicaConfiguration(@Nullable DatabaseInstanceReplicaConfigurationGetArgs replicaConfiguration) {
            this.replicaConfiguration = Input.ofNullable(replicaConfiguration);
            return this;
        }

        public Builder setRestoreBackupContext(@Nullable Input<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext) {
            this.restoreBackupContext = restoreBackupContext;
            return this;
        }

        public Builder setRestoreBackupContext(@Nullable DatabaseInstanceRestoreBackupContextGetArgs restoreBackupContext) {
            this.restoreBackupContext = Input.ofNullable(restoreBackupContext);
            return this;
        }

        public Builder setRootPassword(@Nullable Input<String> rootPassword) {
            this.rootPassword = rootPassword;
            return this;
        }

        public Builder setRootPassword(@Nullable String rootPassword) {
            this.rootPassword = Input.ofNullable(rootPassword);
            return this;
        }

        public Builder setSelfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder setSelfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder setServerCaCerts(@Nullable Input<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts) {
            this.serverCaCerts = serverCaCerts;
            return this;
        }

        public Builder setServerCaCerts(@Nullable List<DatabaseInstanceServerCaCertGetArgs> serverCaCerts) {
            this.serverCaCerts = Input.ofNullable(serverCaCerts);
            return this;
        }

        public Builder setServiceAccountEmailAddress(@Nullable Input<String> serviceAccountEmailAddress) {
            this.serviceAccountEmailAddress = serviceAccountEmailAddress;
            return this;
        }

        public Builder setServiceAccountEmailAddress(@Nullable String serviceAccountEmailAddress) {
            this.serviceAccountEmailAddress = Input.ofNullable(serviceAccountEmailAddress);
            return this;
        }

        public Builder setSettings(@Nullable Input<DatabaseInstanceSettingsGetArgs> settings) {
            this.settings = settings;
            return this;
        }

        public Builder setSettings(@Nullable DatabaseInstanceSettingsGetArgs settings) {
            this.settings = Input.ofNullable(settings);
            return this;
        }

        public DatabaseInstanceState build() {
            return new DatabaseInstanceState(clone, connectionName, databaseVersion, deletionProtection, encryptionKeyName, firstIpAddress, ipAddresses, masterInstanceName, name, privateIpAddress, project, publicIpAddress, region, replicaConfiguration, restoreBackupContext, rootPassword, selfLink, serverCaCerts, serviceAccountEmailAddress, settings);
        }
    }
}
