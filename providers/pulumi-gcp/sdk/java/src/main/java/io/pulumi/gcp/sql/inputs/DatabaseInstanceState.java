// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.sql.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceCloneGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceIpAddressGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceReplicaConfigurationGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceRestoreBackupContextGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceServerCaCertGetArgs;
import io.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseInstanceState extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceState Empty = new DatabaseInstanceState();

    /**
     * The context needed to create this instance as a clone of another instance. When this field is set during
     * resource creation, this provider will attempt to clone another instance as indicated in the context. The
     * configuration is detailed below.
     * 
     */
    @InputImport(name="clone")
      private final @Nullable Output<DatabaseInstanceCloneGetArgs> clone;

    public Output<DatabaseInstanceCloneGetArgs> getClone() {
        return this.clone == null ? Output.empty() : this.clone;
    }

    /**
     * The connection name of the instance to be used in
     * connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
     * 
     */
    @InputImport(name="connectionName")
      private final @Nullable Output<String> connectionName;

    public Output<String> getConnectionName() {
        return this.connectionName == null ? Output.empty() : this.connectionName;
    }

    /**
     * The MySQL, PostgreSQL or
     * SQL Server version to use. Supported values include `MYSQL_5_6`,
     * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
     * `POSTGRES_12`, `POSTGRES_13`, `SQLSERVER_2017_STANDARD`,
     * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
     * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
     * `SQLSERVER_2019_WEB`.
     * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
     * includes an up-to-date reference of supported versions.
     * 
     */
    @InputImport(name="databaseVersion")
      private final @Nullable Output<String> databaseVersion;

    public Output<String> getDatabaseVersion() {
        return this.databaseVersion == null ? Output.empty() : this.databaseVersion;
    }

    /**
     * Whether or not to allow he provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` command that deletes the instance will fail.
     * 
     */
    @InputImport(name="deletionProtection")
      private final @Nullable Output<Boolean> deletionProtection;

    public Output<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Output.empty() : this.deletionProtection;
    }

    /**
     * The full path to the encryption key used for the CMEK disk encryption.  Setting
     * up disk encryption currently requires manual steps outside of this provider.
     * The provided key must be in the same region as the SQL instance.  In order
     * to use this feature, a special kind of service account must be created and
     * granted permission on this key.  This step can currently only be done
     * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
     * That service account needs the `Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter` role on your
     * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
     * 
     */
    @InputImport(name="encryptionKeyName")
      private final @Nullable Output<String> encryptionKeyName;

    public Output<String> getEncryptionKeyName() {
        return this.encryptionKeyName == null ? Output.empty() : this.encryptionKeyName;
    }

    /**
     * The first IPv4 address of any type assigned.
     * 
     */
    @InputImport(name="firstIpAddress")
      private final @Nullable Output<String> firstIpAddress;

    public Output<String> getFirstIpAddress() {
        return this.firstIpAddress == null ? Output.empty() : this.firstIpAddress;
    }

    @InputImport(name="ipAddresses")
      private final @Nullable Output<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses;

    public Output<List<DatabaseInstanceIpAddressGetArgs>> getIpAddresses() {
        return this.ipAddresses == null ? Output.empty() : this.ipAddresses;
    }

    /**
     * The name of the existing instance that will
     * act as the master in the replication setup. Note, this requires the master to
     * have `binary_log_enabled` set, as well as existing backups.
     * 
     */
    @InputImport(name="masterInstanceName")
      private final @Nullable Output<String> masterInstanceName;

    public Output<String> getMasterInstanceName() {
        return this.masterInstanceName == null ? Output.empty() : this.masterInstanceName;
    }

    /**
     * A name for this whitelist entry.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The first private (`PRIVATE`) IPv4 address assigned.
     * 
     */
    @InputImport(name="privateIpAddress")
      private final @Nullable Output<String> privateIpAddress;

    public Output<String> getPrivateIpAddress() {
        return this.privateIpAddress == null ? Output.empty() : this.privateIpAddress;
    }

    /**
     * The full project ID of the source instance.`
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * The first public (`PRIMARY`) IPv4 address assigned.
     * 
     */
    @InputImport(name="publicIpAddress")
      private final @Nullable Output<String> publicIpAddress;

    public Output<String> getPublicIpAddress() {
        return this.publicIpAddress == null ? Output.empty() : this.publicIpAddress;
    }

    /**
     * The region the instance will sit in. Note, Cloud SQL is not
     * available in all regions - choose from one of the options listed [here](https://cloud.google.com/sql/docs/mysql/instance-locations).
     * A valid region must be provided to use this resource. If a region is not provided in the resource definition,
     * the provider region will be used instead, but this will be an apply-time error for instances if the provider
     * region is not supported with Cloud SQL. If you choose not to provide the `region` argument for this resource,
     * make sure you understand this.
     * 
     */
    @InputImport(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Output.empty() : this.region;
    }

    /**
     * The configuration for replication. The
     * configuration is detailed below. Valid only for MySQL instances.
     * 
     */
    @InputImport(name="replicaConfiguration")
      private final @Nullable Output<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration;

    public Output<DatabaseInstanceReplicaConfigurationGetArgs> getReplicaConfiguration() {
        return this.replicaConfiguration == null ? Output.empty() : this.replicaConfiguration;
    }

    /**
     * The context needed to restore the database to a backup run. This field will
     * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
     * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
     * block during resource creation/update will trigger the restore action after the resource is created/updated.
     * 
     */
    @InputImport(name="restoreBackupContext")
      private final @Nullable Output<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext;

    public Output<DatabaseInstanceRestoreBackupContextGetArgs> getRestoreBackupContext() {
        return this.restoreBackupContext == null ? Output.empty() : this.restoreBackupContext;
    }

    /**
     * Initial root password. Required for MS SQL Server, ignored by MySQL and PostgreSQL.
     * 
     */
    @InputImport(name="rootPassword")
      private final @Nullable Output<String> rootPassword;

    public Output<String> getRootPassword() {
        return this.rootPassword == null ? Output.empty() : this.rootPassword;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @InputImport(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> getSelfLink() {
        return this.selfLink == null ? Output.empty() : this.selfLink;
    }

    @InputImport(name="serverCaCerts")
      private final @Nullable Output<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts;

    public Output<List<DatabaseInstanceServerCaCertGetArgs>> getServerCaCerts() {
        return this.serverCaCerts == null ? Output.empty() : this.serverCaCerts;
    }

    /**
     * The service account email address assigned to the
     * instance.
     * 
     */
    @InputImport(name="serviceAccountEmailAddress")
      private final @Nullable Output<String> serviceAccountEmailAddress;

    public Output<String> getServiceAccountEmailAddress() {
        return this.serviceAccountEmailAddress == null ? Output.empty() : this.serviceAccountEmailAddress;
    }

    /**
     * The settings to use for the database. The
     * configuration is detailed below. Required if `clone` is not set.
     * 
     */
    @InputImport(name="settings")
      private final @Nullable Output<DatabaseInstanceSettingsGetArgs> settings;

    public Output<DatabaseInstanceSettingsGetArgs> getSettings() {
        return this.settings == null ? Output.empty() : this.settings;
    }

    public DatabaseInstanceState(
        @Nullable Output<DatabaseInstanceCloneGetArgs> clone,
        @Nullable Output<String> connectionName,
        @Nullable Output<String> databaseVersion,
        @Nullable Output<Boolean> deletionProtection,
        @Nullable Output<String> encryptionKeyName,
        @Nullable Output<String> firstIpAddress,
        @Nullable Output<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses,
        @Nullable Output<String> masterInstanceName,
        @Nullable Output<String> name,
        @Nullable Output<String> privateIpAddress,
        @Nullable Output<String> project,
        @Nullable Output<String> publicIpAddress,
        @Nullable Output<String> region,
        @Nullable Output<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration,
        @Nullable Output<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext,
        @Nullable Output<String> rootPassword,
        @Nullable Output<String> selfLink,
        @Nullable Output<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts,
        @Nullable Output<String> serviceAccountEmailAddress,
        @Nullable Output<DatabaseInstanceSettingsGetArgs> settings) {
        this.clone = clone;
        this.connectionName = connectionName;
        this.databaseVersion = databaseVersion;
        this.deletionProtection = deletionProtection;
        this.encryptionKeyName = encryptionKeyName;
        this.firstIpAddress = firstIpAddress;
        this.ipAddresses = ipAddresses;
        this.masterInstanceName = masterInstanceName;
        this.name = name;
        this.privateIpAddress = privateIpAddress;
        this.project = project;
        this.publicIpAddress = publicIpAddress;
        this.region = region;
        this.replicaConfiguration = replicaConfiguration;
        this.restoreBackupContext = restoreBackupContext;
        this.rootPassword = rootPassword;
        this.selfLink = selfLink;
        this.serverCaCerts = serverCaCerts;
        this.serviceAccountEmailAddress = serviceAccountEmailAddress;
        this.settings = settings;
    }

    private DatabaseInstanceState() {
        this.clone = Output.empty();
        this.connectionName = Output.empty();
        this.databaseVersion = Output.empty();
        this.deletionProtection = Output.empty();
        this.encryptionKeyName = Output.empty();
        this.firstIpAddress = Output.empty();
        this.ipAddresses = Output.empty();
        this.masterInstanceName = Output.empty();
        this.name = Output.empty();
        this.privateIpAddress = Output.empty();
        this.project = Output.empty();
        this.publicIpAddress = Output.empty();
        this.region = Output.empty();
        this.replicaConfiguration = Output.empty();
        this.restoreBackupContext = Output.empty();
        this.rootPassword = Output.empty();
        this.selfLink = Output.empty();
        this.serverCaCerts = Output.empty();
        this.serviceAccountEmailAddress = Output.empty();
        this.settings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DatabaseInstanceCloneGetArgs> clone;
        private @Nullable Output<String> connectionName;
        private @Nullable Output<String> databaseVersion;
        private @Nullable Output<Boolean> deletionProtection;
        private @Nullable Output<String> encryptionKeyName;
        private @Nullable Output<String> firstIpAddress;
        private @Nullable Output<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses;
        private @Nullable Output<String> masterInstanceName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> privateIpAddress;
        private @Nullable Output<String> project;
        private @Nullable Output<String> publicIpAddress;
        private @Nullable Output<String> region;
        private @Nullable Output<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration;
        private @Nullable Output<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext;
        private @Nullable Output<String> rootPassword;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts;
        private @Nullable Output<String> serviceAccountEmailAddress;
        private @Nullable Output<DatabaseInstanceSettingsGetArgs> settings;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clone = defaults.clone;
    	      this.connectionName = defaults.connectionName;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.encryptionKeyName = defaults.encryptionKeyName;
    	      this.firstIpAddress = defaults.firstIpAddress;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.masterInstanceName = defaults.masterInstanceName;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.project = defaults.project;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.region = defaults.region;
    	      this.replicaConfiguration = defaults.replicaConfiguration;
    	      this.restoreBackupContext = defaults.restoreBackupContext;
    	      this.rootPassword = defaults.rootPassword;
    	      this.selfLink = defaults.selfLink;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.serviceAccountEmailAddress = defaults.serviceAccountEmailAddress;
    	      this.settings = defaults.settings;
        }

        public Builder clone(@Nullable Output<DatabaseInstanceCloneGetArgs> clone) {
            this.clone = clone;
            return this;
        }

        public Builder clone(@Nullable DatabaseInstanceCloneGetArgs clone) {
            this.clone = Output.ofNullable(clone);
            return this;
        }

        public Builder connectionName(@Nullable Output<String> connectionName) {
            this.connectionName = connectionName;
            return this;
        }

        public Builder connectionName(@Nullable String connectionName) {
            this.connectionName = Output.ofNullable(connectionName);
            return this;
        }

        public Builder databaseVersion(@Nullable Output<String> databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }

        public Builder databaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = Output.ofNullable(databaseVersion);
            return this;
        }

        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Output.ofNullable(deletionProtection);
            return this;
        }

        public Builder encryptionKeyName(@Nullable Output<String> encryptionKeyName) {
            this.encryptionKeyName = encryptionKeyName;
            return this;
        }

        public Builder encryptionKeyName(@Nullable String encryptionKeyName) {
            this.encryptionKeyName = Output.ofNullable(encryptionKeyName);
            return this;
        }

        public Builder firstIpAddress(@Nullable Output<String> firstIpAddress) {
            this.firstIpAddress = firstIpAddress;
            return this;
        }

        public Builder firstIpAddress(@Nullable String firstIpAddress) {
            this.firstIpAddress = Output.ofNullable(firstIpAddress);
            return this;
        }

        public Builder ipAddresses(@Nullable Output<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses) {
            this.ipAddresses = ipAddresses;
            return this;
        }

        public Builder ipAddresses(@Nullable List<DatabaseInstanceIpAddressGetArgs> ipAddresses) {
            this.ipAddresses = Output.ofNullable(ipAddresses);
            return this;
        }

        public Builder masterInstanceName(@Nullable Output<String> masterInstanceName) {
            this.masterInstanceName = masterInstanceName;
            return this;
        }

        public Builder masterInstanceName(@Nullable String masterInstanceName) {
            this.masterInstanceName = Output.ofNullable(masterInstanceName);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = Output.ofNullable(privateIpAddress);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder publicIpAddress(@Nullable Output<String> publicIpAddress) {
            this.publicIpAddress = publicIpAddress;
            return this;
        }

        public Builder publicIpAddress(@Nullable String publicIpAddress) {
            this.publicIpAddress = Output.ofNullable(publicIpAddress);
            return this;
        }

        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Output.ofNullable(region);
            return this;
        }

        public Builder replicaConfiguration(@Nullable Output<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration) {
            this.replicaConfiguration = replicaConfiguration;
            return this;
        }

        public Builder replicaConfiguration(@Nullable DatabaseInstanceReplicaConfigurationGetArgs replicaConfiguration) {
            this.replicaConfiguration = Output.ofNullable(replicaConfiguration);
            return this;
        }

        public Builder restoreBackupContext(@Nullable Output<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext) {
            this.restoreBackupContext = restoreBackupContext;
            return this;
        }

        public Builder restoreBackupContext(@Nullable DatabaseInstanceRestoreBackupContextGetArgs restoreBackupContext) {
            this.restoreBackupContext = Output.ofNullable(restoreBackupContext);
            return this;
        }

        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            this.rootPassword = rootPassword;
            return this;
        }

        public Builder rootPassword(@Nullable String rootPassword) {
            this.rootPassword = Output.ofNullable(rootPassword);
            return this;
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Output.ofNullable(selfLink);
            return this;
        }

        public Builder serverCaCerts(@Nullable Output<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts) {
            this.serverCaCerts = serverCaCerts;
            return this;
        }

        public Builder serverCaCerts(@Nullable List<DatabaseInstanceServerCaCertGetArgs> serverCaCerts) {
            this.serverCaCerts = Output.ofNullable(serverCaCerts);
            return this;
        }

        public Builder serviceAccountEmailAddress(@Nullable Output<String> serviceAccountEmailAddress) {
            this.serviceAccountEmailAddress = serviceAccountEmailAddress;
            return this;
        }

        public Builder serviceAccountEmailAddress(@Nullable String serviceAccountEmailAddress) {
            this.serviceAccountEmailAddress = Output.ofNullable(serviceAccountEmailAddress);
            return this;
        }

        public Builder settings(@Nullable Output<DatabaseInstanceSettingsGetArgs> settings) {
            this.settings = settings;
            return this;
        }

        public Builder settings(@Nullable DatabaseInstanceSettingsGetArgs settings) {
            this.settings = Output.ofNullable(settings);
            return this;
        }
        public DatabaseInstanceState build() {
            return new DatabaseInstanceState(clone, connectionName, databaseVersion, deletionProtection, encryptionKeyName, firstIpAddress, ipAddresses, masterInstanceName, name, privateIpAddress, project, publicIpAddress, region, replicaConfiguration, restoreBackupContext, rootPassword, selfLink, serverCaCerts, serviceAccountEmailAddress, settings);
        }
    }
}
