// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigtable;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.bigtable.inputs.GCPolicyMaxAgeArgs;
import io.pulumi.gcp.bigtable.inputs.GCPolicyMaxVersionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GCPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final GCPolicyArgs Empty = new GCPolicyArgs();

    @InputImport(name="columnFamily", required=true)
    private final Input<String> columnFamily;

    public Input<String> getColumnFamily() {
        return this.columnFamily;
    }

    @InputImport(name="instanceName", required=true)
    private final Input<String> instanceName;

    public Input<String> getInstanceName() {
        return this.instanceName;
    }

    @InputImport(name="maxAge")
    private final @Nullable Input<GCPolicyMaxAgeArgs> maxAge;

    public Input<GCPolicyMaxAgeArgs> getMaxAge() {
        return this.maxAge == null ? Input.empty() : this.maxAge;
    }

    @InputImport(name="maxVersions")
    private final @Nullable Input<List<GCPolicyMaxVersionArgs>> maxVersions;

    public Input<List<GCPolicyMaxVersionArgs>> getMaxVersions() {
        return this.maxVersions == null ? Input.empty() : this.maxVersions;
    }

    @InputImport(name="mode")
    private final @Nullable Input<String> mode;

    public Input<String> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="table", required=true)
    private final Input<String> table;

    public Input<String> getTable() {
        return this.table;
    }

    public GCPolicyArgs(
        Input<String> columnFamily,
        Input<String> instanceName,
        @Nullable Input<GCPolicyMaxAgeArgs> maxAge,
        @Nullable Input<List<GCPolicyMaxVersionArgs>> maxVersions,
        @Nullable Input<String> mode,
        @Nullable Input<String> project,
        Input<String> table) {
        this.columnFamily = Objects.requireNonNull(columnFamily, "expected parameter 'columnFamily' to be non-null");
        this.instanceName = Objects.requireNonNull(instanceName, "expected parameter 'instanceName' to be non-null");
        this.maxAge = maxAge;
        this.maxVersions = maxVersions;
        this.mode = mode;
        this.project = project;
        this.table = Objects.requireNonNull(table, "expected parameter 'table' to be non-null");
    }

    private GCPolicyArgs() {
        this.columnFamily = Input.empty();
        this.instanceName = Input.empty();
        this.maxAge = Input.empty();
        this.maxVersions = Input.empty();
        this.mode = Input.empty();
        this.project = Input.empty();
        this.table = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GCPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> columnFamily;
        private Input<String> instanceName;
        private @Nullable Input<GCPolicyMaxAgeArgs> maxAge;
        private @Nullable Input<List<GCPolicyMaxVersionArgs>> maxVersions;
        private @Nullable Input<String> mode;
        private @Nullable Input<String> project;
        private Input<String> table;

        public Builder() {
    	      // Empty
        }

        public Builder(GCPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnFamily = defaults.columnFamily;
    	      this.instanceName = defaults.instanceName;
    	      this.maxAge = defaults.maxAge;
    	      this.maxVersions = defaults.maxVersions;
    	      this.mode = defaults.mode;
    	      this.project = defaults.project;
    	      this.table = defaults.table;
        }

        public Builder setColumnFamily(Input<String> columnFamily) {
            this.columnFamily = Objects.requireNonNull(columnFamily);
            return this;
        }

        public Builder setColumnFamily(String columnFamily) {
            this.columnFamily = Input.of(Objects.requireNonNull(columnFamily));
            return this;
        }

        public Builder setInstanceName(Input<String> instanceName) {
            this.instanceName = Objects.requireNonNull(instanceName);
            return this;
        }

        public Builder setInstanceName(String instanceName) {
            this.instanceName = Input.of(Objects.requireNonNull(instanceName));
            return this;
        }

        public Builder setMaxAge(@Nullable Input<GCPolicyMaxAgeArgs> maxAge) {
            this.maxAge = maxAge;
            return this;
        }

        public Builder setMaxAge(@Nullable GCPolicyMaxAgeArgs maxAge) {
            this.maxAge = Input.ofNullable(maxAge);
            return this;
        }

        public Builder setMaxVersions(@Nullable Input<List<GCPolicyMaxVersionArgs>> maxVersions) {
            this.maxVersions = maxVersions;
            return this;
        }

        public Builder setMaxVersions(@Nullable List<GCPolicyMaxVersionArgs> maxVersions) {
            this.maxVersions = Input.ofNullable(maxVersions);
            return this;
        }

        public Builder setMode(@Nullable Input<String> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable String mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setTable(Input<String> table) {
            this.table = Objects.requireNonNull(table);
            return this;
        }

        public Builder setTable(String table) {
            this.table = Input.of(Objects.requireNonNull(table));
            return this;
        }

        public GCPolicyArgs build() {
            return new GCPolicyArgs(columnFamily, instanceName, maxAge, maxVersions, mode, project, table);
        }
    }
}
