// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.billing;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.billing.BudgetArgs;
import io.pulumi.gcp.billing.inputs.BudgetState;
import io.pulumi.gcp.billing.outputs.BudgetAllUpdatesRule;
import io.pulumi.gcp.billing.outputs.BudgetAmount;
import io.pulumi.gcp.billing.outputs.BudgetBudgetFilter;
import io.pulumi.gcp.billing.outputs.BudgetThresholdRule;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Budget configuration for a billing account.
 * 
 * To get more information about Budget, see:
 * 
 * * [API documentation](https://cloud.google.com/billing/docs/reference/budget/rest/v1/billingAccounts.budgets)
 * * How-to Guides
 *     * [Creating a budget](https://cloud.google.com/billing/docs/how-to/budgets)
 * 
 * > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
 * you must specify a `billing_project` and set `user_project_override` to true
 * in the provider configuration. Otherwise the Billing Budgets API will return a 403 error.
 * Your account must have the `serviceusage.services.use` permission on the
 * `billing_project` you defined.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Billing Budget Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const account = gcp.organizations.getBillingAccount({
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const budget = new gcp.billing.Budget("budget", {
 *     billingAccount: account.then(account => account.id),
 *     displayName: "Example Billing Budget",
 *     amount: {
 *         specifiedAmount: {
 *             currencyCode: "USD",
 *             units: "100000",
 *         },
 *     },
 *     thresholdRules: [{
 *         thresholdPercent: 0.5,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * account = gcp.organizations.get_billing_account(billing_account="000000-0000000-0000000-000000")
 * budget = gcp.billing.Budget("budget",
 *     billing_account=account.id,
 *     display_name="Example Billing Budget",
 *     amount=gcp.billing.BudgetAmountArgs(
 *         specified_amount=gcp.billing.BudgetAmountSpecifiedAmountArgs(
 *             currency_code="USD",
 *             units="100000",
 *         ),
 *     ),
 *     threshold_rules=[gcp.billing.BudgetThresholdRuleArgs(
 *         threshold_percent=0.5,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
 *         {
 *             BillingAccount = "000000-0000000-0000000-000000",
 *         }));
 *         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
 *         {
 *             BillingAccount = account.Apply(account => account.Id),
 *             DisplayName = "Example Billing Budget",
 *             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
 *             {
 *                 SpecifiedAmount = new Gcp.Billing.Inputs.BudgetAmountSpecifiedAmountArgs
 *                 {
 *                     CurrencyCode = "USD",
 *                     Units = "100000",
 *                 },
 *             },
 *             ThresholdRules = 
 *             {
 *                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
 *                 {
 *                     ThresholdPercent = 0.5,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/billing"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "000000-0000000-0000000-000000"
 * 		account, err := organizations.GetBillingAccount(ctx, &organizations.GetBillingAccountArgs{
 * 			BillingAccount: &opt0,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = billing.NewBudget(ctx, "budget", &billing.BudgetArgs{
 * 			BillingAccount: pulumi.String(account.Id),
 * 			DisplayName:    pulumi.String("Example Billing Budget"),
 * 			Amount: &billing.BudgetAmountArgs{
 * 				SpecifiedAmount: &billing.BudgetAmountSpecifiedAmountArgs{
 * 					CurrencyCode: pulumi.String("USD"),
 * 					Units:        pulumi.String("100000"),
 * 				},
 * 			},
 * 			ThresholdRules: billing.BudgetThresholdRuleArray{
 * 				&billing.BudgetThresholdRuleArgs{
 * 					ThresholdPercent: pulumi.Float64(0.5),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Billing Budget Lastperiod
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const account = gcp.organizations.getBillingAccount({
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const project = gcp.organizations.getProject({});
 * const budget = new gcp.billing.Budget("budget", {
 *     billingAccount: account.then(account => account.id),
 *     displayName: "Example Billing Budget",
 *     budgetFilter: {
 *         projects: [project.then(project => `projects/${project.number}`)],
 *     },
 *     amount: {
 *         lastPeriodAmount: true,
 *     },
 *     thresholdRules: [{
 *         thresholdPercent: 10,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * account = gcp.organizations.get_billing_account(billing_account="000000-0000000-0000000-000000")
 * project = gcp.organizations.get_project()
 * budget = gcp.billing.Budget("budget",
 *     billing_account=account.id,
 *     display_name="Example Billing Budget",
 *     budget_filter=gcp.billing.BudgetBudgetFilterArgs(
 *         projects=[f"projects/{project.number}"],
 *     ),
 *     amount=gcp.billing.BudgetAmountArgs(
 *         last_period_amount=True,
 *     ),
 *     threshold_rules=[gcp.billing.BudgetThresholdRuleArgs(
 *         threshold_percent=10,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
 *         {
 *             BillingAccount = "000000-0000000-0000000-000000",
 *         }));
 *         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
 *         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
 *         {
 *             BillingAccount = account.Apply(account => account.Id),
 *             DisplayName = "Example Billing Budget",
 *             BudgetFilter = new Gcp.Billing.Inputs.BudgetBudgetFilterArgs
 *             {
 *                 Projects = 
 *                 {
 *                     project.Apply(project => $"projects/{project.Number}"),
 *                 },
 *             },
 *             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
 *             {
 *                 LastPeriodAmount = true,
 *             },
 *             ThresholdRules = 
 *             {
 *                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
 *                 {
 *                     ThresholdPercent = 10,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/billing"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "000000-0000000-0000000-000000"
 * 		account, err := organizations.GetBillingAccount(ctx, &organizations.GetBillingAccountArgs{
 * 			BillingAccount: &opt0,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		project, err := organizations.LookupProject(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = billing.NewBudget(ctx, "budget", &billing.BudgetArgs{
 * 			BillingAccount: pulumi.String(account.Id),
 * 			DisplayName:    pulumi.String("Example Billing Budget"),
 * 			BudgetFilter: &billing.BudgetBudgetFilterArgs{
 * 				Projects: pulumi.StringArray{
 * 					pulumi.String(fmt.Sprintf("%v%v", "projects/", project.Number)),
 * 				},
 * 			},
 * 			Amount: &billing.BudgetAmountArgs{
 * 				LastPeriodAmount: pulumi.Bool(true),
 * 			},
 * 			ThresholdRules: billing.BudgetThresholdRuleArray{
 * 				&billing.BudgetThresholdRuleArgs{
 * 					ThresholdPercent: pulumi.Float64(10),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Billing Budget Filter
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const account = gcp.organizations.getBillingAccount({
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const project = gcp.organizations.getProject({});
 * const budget = new gcp.billing.Budget("budget", {
 *     billingAccount: account.then(account => account.id),
 *     displayName: "Example Billing Budget",
 *     budgetFilter: {
 *         projects: [project.then(project => `projects/${project.number}`)],
 *         creditTypesTreatment: "EXCLUDE_ALL_CREDITS",
 *         services: ["services/24E6-581D-38E5"],
 *     },
 *     amount: {
 *         specifiedAmount: {
 *             currencyCode: "USD",
 *             units: "100000",
 *         },
 *     },
 *     thresholdRules: [
 *         {
 *             thresholdPercent: 0.5,
 *         },
 *         {
 *             thresholdPercent: 0.9,
 *             spendBasis: "FORECASTED_SPEND",
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * account = gcp.organizations.get_billing_account(billing_account="000000-0000000-0000000-000000")
 * project = gcp.organizations.get_project()
 * budget = gcp.billing.Budget("budget",
 *     billing_account=account.id,
 *     display_name="Example Billing Budget",
 *     budget_filter=gcp.billing.BudgetBudgetFilterArgs(
 *         projects=[f"projects/{project.number}"],
 *         credit_types_treatment="EXCLUDE_ALL_CREDITS",
 *         services=["services/24E6-581D-38E5"],
 *     ),
 *     amount=gcp.billing.BudgetAmountArgs(
 *         specified_amount=gcp.billing.BudgetAmountSpecifiedAmountArgs(
 *             currency_code="USD",
 *             units="100000",
 *         ),
 *     ),
 *     threshold_rules=[
 *         gcp.billing.BudgetThresholdRuleArgs(
 *             threshold_percent=0.5,
 *         ),
 *         gcp.billing.BudgetThresholdRuleArgs(
 *             threshold_percent=0.9,
 *             spend_basis="FORECASTED_SPEND",
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
 *         {
 *             BillingAccount = "000000-0000000-0000000-000000",
 *         }));
 *         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
 *         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
 *         {
 *             BillingAccount = account.Apply(account => account.Id),
 *             DisplayName = "Example Billing Budget",
 *             BudgetFilter = new Gcp.Billing.Inputs.BudgetBudgetFilterArgs
 *             {
 *                 Projects = 
 *                 {
 *                     project.Apply(project => $"projects/{project.Number}"),
 *                 },
 *                 CreditTypesTreatment = "EXCLUDE_ALL_CREDITS",
 *                 Services = 
 *                 {
 *                     "services/24E6-581D-38E5",
 *                 },
 *             },
 *             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
 *             {
 *                 SpecifiedAmount = new Gcp.Billing.Inputs.BudgetAmountSpecifiedAmountArgs
 *                 {
 *                     CurrencyCode = "USD",
 *                     Units = "100000",
 *                 },
 *             },
 *             ThresholdRules = 
 *             {
 *                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
 *                 {
 *                     ThresholdPercent = 0.5,
 *                 },
 *                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
 *                 {
 *                     ThresholdPercent = 0.9,
 *                     SpendBasis = "FORECASTED_SPEND",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/billing"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "000000-0000000-0000000-000000"
 * 		account, err := organizations.GetBillingAccount(ctx, &organizations.GetBillingAccountArgs{
 * 			BillingAccount: &opt0,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		project, err := organizations.LookupProject(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = billing.NewBudget(ctx, "budget", &billing.BudgetArgs{
 * 			BillingAccount: pulumi.String(account.Id),
 * 			DisplayName:    pulumi.String("Example Billing Budget"),
 * 			BudgetFilter: &billing.BudgetBudgetFilterArgs{
 * 				Projects: pulumi.StringArray{
 * 					pulumi.String(fmt.Sprintf("%v%v", "projects/", project.Number)),
 * 				},
 * 				CreditTypesTreatment: pulumi.String("EXCLUDE_ALL_CREDITS"),
 * 				Services: pulumi.StringArray{
 * 					pulumi.String("services/24E6-581D-38E5"),
 * 				},
 * 			},
 * 			Amount: &billing.BudgetAmountArgs{
 * 				SpecifiedAmount: &billing.BudgetAmountSpecifiedAmountArgs{
 * 					CurrencyCode: pulumi.String("USD"),
 * 					Units:        pulumi.String("100000"),
 * 				},
 * 			},
 * 			ThresholdRules: billing.BudgetThresholdRuleArray{
 * 				&billing.BudgetThresholdRuleArgs{
 * 					ThresholdPercent: pulumi.Float64(0.5),
 * 				},
 * 				&billing.BudgetThresholdRuleArgs{
 * 					ThresholdPercent: pulumi.Float64(0.9),
 * 					SpendBasis:       pulumi.String("FORECASTED_SPEND"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Billing Budget Notify
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const account = gcp.organizations.getBillingAccount({
 *     billingAccount: "000000-0000000-0000000-000000",
 * });
 * const project = gcp.organizations.getProject({});
 * const notificationChannel = new gcp.monitoring.NotificationChannel("notificationChannel", {
 *     displayName: "Example Notification Channel",
 *     type: "email",
 *     labels: {
 *         email_address: "address@example.com",
 *     },
 * });
 * const budget = new gcp.billing.Budget("budget", {
 *     billingAccount: account.then(account => account.id),
 *     displayName: "Example Billing Budget",
 *     budgetFilter: {
 *         projects: [project.then(project => `projects/${project.number}`)],
 *     },
 *     amount: {
 *         specifiedAmount: {
 *             currencyCode: "USD",
 *             units: "100000",
 *         },
 *     },
 *     thresholdRules: [
 *         {
 *             thresholdPercent: 1,
 *         },
 *         {
 *             thresholdPercent: 1,
 *             spendBasis: "FORECASTED_SPEND",
 *         },
 *     ],
 *     allUpdatesRule: {
 *         monitoringNotificationChannels: [notificationChannel.id],
 *         disableDefaultIamRecipients: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * account = gcp.organizations.get_billing_account(billing_account="000000-0000000-0000000-000000")
 * project = gcp.organizations.get_project()
 * notification_channel = gcp.monitoring.NotificationChannel("notificationChannel",
 *     display_name="Example Notification Channel",
 *     type="email",
 *     labels={
 *         "email_address": "address@example.com",
 *     })
 * budget = gcp.billing.Budget("budget",
 *     billing_account=account.id,
 *     display_name="Example Billing Budget",
 *     budget_filter=gcp.billing.BudgetBudgetFilterArgs(
 *         projects=[f"projects/{project.number}"],
 *     ),
 *     amount=gcp.billing.BudgetAmountArgs(
 *         specified_amount=gcp.billing.BudgetAmountSpecifiedAmountArgs(
 *             currency_code="USD",
 *             units="100000",
 *         ),
 *     ),
 *     threshold_rules=[
 *         gcp.billing.BudgetThresholdRuleArgs(
 *             threshold_percent=1,
 *         ),
 *         gcp.billing.BudgetThresholdRuleArgs(
 *             threshold_percent=1,
 *             spend_basis="FORECASTED_SPEND",
 *         ),
 *     ],
 *     all_updates_rule=gcp.billing.BudgetAllUpdatesRuleArgs(
 *         monitoring_notification_channels=[notification_channel.id],
 *         disable_default_iam_recipients=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var account = Output.Create(Gcp.Organizations.GetBillingAccount.InvokeAsync(new Gcp.Organizations.GetBillingAccountArgs
 *         {
 *             BillingAccount = "000000-0000000-0000000-000000",
 *         }));
 *         var project = Output.Create(Gcp.Organizations.GetProject.InvokeAsync());
 *         var notificationChannel = new Gcp.Monitoring.NotificationChannel("notificationChannel", new Gcp.Monitoring.NotificationChannelArgs
 *         {
 *             DisplayName = "Example Notification Channel",
 *             Type = "email",
 *             Labels = 
 *             {
 *                 { "email_address", "address@example.com" },
 *             },
 *         });
 *         var budget = new Gcp.Billing.Budget("budget", new Gcp.Billing.BudgetArgs
 *         {
 *             BillingAccount = account.Apply(account => account.Id),
 *             DisplayName = "Example Billing Budget",
 *             BudgetFilter = new Gcp.Billing.Inputs.BudgetBudgetFilterArgs
 *             {
 *                 Projects = 
 *                 {
 *                     project.Apply(project => $"projects/{project.Number}"),
 *                 },
 *             },
 *             Amount = new Gcp.Billing.Inputs.BudgetAmountArgs
 *             {
 *                 SpecifiedAmount = new Gcp.Billing.Inputs.BudgetAmountSpecifiedAmountArgs
 *                 {
 *                     CurrencyCode = "USD",
 *                     Units = "100000",
 *                 },
 *             },
 *             ThresholdRules = 
 *             {
 *                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
 *                 {
 *                     ThresholdPercent = 1,
 *                 },
 *                 new Gcp.Billing.Inputs.BudgetThresholdRuleArgs
 *                 {
 *                     ThresholdPercent = 1,
 *                     SpendBasis = "FORECASTED_SPEND",
 *                 },
 *             },
 *             AllUpdatesRule = new Gcp.Billing.Inputs.BudgetAllUpdatesRuleArgs
 *             {
 *                 MonitoringNotificationChannels = 
 *                 {
 *                     notificationChannel.Id,
 *                 },
 *                 DisableDefaultIamRecipients = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/billing"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/monitoring"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "000000-0000000-0000000-000000"
 * 		account, err := organizations.GetBillingAccount(ctx, &organizations.GetBillingAccountArgs{
 * 			BillingAccount: &opt0,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		project, err := organizations.LookupProject(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		notificationChannel, err := monitoring.NewNotificationChannel(ctx, "notificationChannel", &monitoring.NotificationChannelArgs{
 * 			DisplayName: pulumi.String("Example Notification Channel"),
 * 			Type:        pulumi.String("email"),
 * 			Labels: pulumi.StringMap{
 * 				"email_address": pulumi.String("address@example.com"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = billing.NewBudget(ctx, "budget", &billing.BudgetArgs{
 * 			BillingAccount: pulumi.String(account.Id),
 * 			DisplayName:    pulumi.String("Example Billing Budget"),
 * 			BudgetFilter: &billing.BudgetBudgetFilterArgs{
 * 				Projects: pulumi.StringArray{
 * 					pulumi.String(fmt.Sprintf("%v%v", "projects/", project.Number)),
 * 				},
 * 			},
 * 			Amount: &billing.BudgetAmountArgs{
 * 				SpecifiedAmount: &billing.BudgetAmountSpecifiedAmountArgs{
 * 					CurrencyCode: pulumi.String("USD"),
 * 					Units:        pulumi.String("100000"),
 * 				},
 * 			},
 * 			ThresholdRules: billing.BudgetThresholdRuleArray{
 * 				&billing.BudgetThresholdRuleArgs{
 * 					ThresholdPercent: pulumi.Float64(1),
 * 				},
 * 				&billing.BudgetThresholdRuleArgs{
 * 					ThresholdPercent: pulumi.Float64(1),
 * 					SpendBasis:       pulumi.String("FORECASTED_SPEND"),
 * 				},
 * 			},
 * 			AllUpdatesRule: &billing.BudgetAllUpdatesRuleArgs{
 * 				MonitoringNotificationChannels: pulumi.StringArray{
 * 					notificationChannel.ID(),
 * 				},
 * 				DisableDefaultIamRecipients: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Budget can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:billing/budget:Budget default billingAccounts/{{billing_account}}/budgets/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:billing/budget:Budget default {{billing_account}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:billing/budget:Budget default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:billing/budget:Budget")
public class Budget extends io.pulumi.resources.CustomResource {
    /**
     * Defines notifications that are sent on every update to the
     * billing account's spend, regardless of the thresholds defined
     * using threshold rules.
     * Structure is documented below.
     * 
     */
    @Export(name="allUpdatesRule", type=BudgetAllUpdatesRule.class, parameters={})
    private Output</* @Nullable */ BudgetAllUpdatesRule> allUpdatesRule;

    /**
     * @return Defines notifications that are sent on every update to the
     * billing account's spend, regardless of the thresholds defined
     * using threshold rules.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ BudgetAllUpdatesRule> getAllUpdatesRule() {
        return this.allUpdatesRule;
    }
    /**
     * The budgeted amount for each usage period.
     * Structure is documented below.
     * 
     */
    @Export(name="amount", type=BudgetAmount.class, parameters={})
    private Output<BudgetAmount> amount;

    /**
     * @return The budgeted amount for each usage period.
     * Structure is documented below.
     * 
     */
    public Output<BudgetAmount> getAmount() {
        return this.amount;
    }
    /**
     * ID of the billing account to set a budget on.
     * 
     */
    @Export(name="billingAccount", type=String.class, parameters={})
    private Output<String> billingAccount;

    /**
     * @return ID of the billing account to set a budget on.
     * 
     */
    public Output<String> getBillingAccount() {
        return this.billingAccount;
    }
    /**
     * Filters that define which resources are used to compute the actual
     * spend against the budget.
     * Structure is documented below.
     * 
     */
    @Export(name="budgetFilter", type=BudgetBudgetFilter.class, parameters={})
    private Output<BudgetBudgetFilter> budgetFilter;

    /**
     * @return Filters that define which resources are used to compute the actual
     * spend against the budget.
     * Structure is documented below.
     * 
     */
    public Output<BudgetBudgetFilter> getBudgetFilter() {
        return this.budgetFilter;
    }
    /**
     * User data for display name in UI. Must be <= 60 chars.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return User data for display name in UI. Must be <= 60 chars.
     * 
     */
    public Output</* @Nullable */ String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Rules that trigger alerts (notifications of thresholds being
     * crossed) when spend exceeds the specified percentages of the
     * budget.
     * Structure is documented below.
     * 
     */
    @Export(name="thresholdRules", type=List.class, parameters={BudgetThresholdRule.class})
    private Output<List<BudgetThresholdRule>> thresholdRules;

    /**
     * @return Rules that trigger alerts (notifications of thresholds being
     * crossed) when spend exceeds the specified percentages of the
     * budget.
     * Structure is documented below.
     * 
     */
    public Output<List<BudgetThresholdRule>> getThresholdRules() {
        return this.thresholdRules;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Budget(String name) {
        this(name, BudgetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Budget(String name, BudgetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Budget(String name, BudgetArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:billing/budget:Budget", name, args == null ? BudgetArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Budget(String name, Output<String> id, @Nullable BudgetState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:billing/budget:Budget", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Budget get(String name, Output<String> id, @Nullable BudgetState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Budget(name, id, state, options);
    }
}
