// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.util.Objects;

@OutputCustomType
public final class TableRangePartitioningRange {
    /**
     * End of the range partitioning, exclusive.
     * 
     */
    private final Integer end;
    /**
     * The width of each range within the partition.
     * 
     */
    private final Integer interval;
    /**
     * Start of the range partitioning, inclusive.
     * 
     */
    private final Integer start;

    @OutputCustomType.Constructor
    private TableRangePartitioningRange(
        @OutputCustomType.Parameter("end") Integer end,
        @OutputCustomType.Parameter("interval") Integer interval,
        @OutputCustomType.Parameter("start") Integer start) {
        this.end = end;
        this.interval = interval;
        this.start = start;
    }

    /**
     * End of the range partitioning, exclusive.
     * 
    */
    public Integer getEnd() {
        return this.end;
    }
    /**
     * The width of each range within the partition.
     * 
    */
    public Integer getInterval() {
        return this.interval;
    }
    /**
     * Start of the range partitioning, inclusive.
     * 
    */
    public Integer getStart() {
        return this.start;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableRangePartitioningRange defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer end;
        private Integer interval;
        private Integer start;

        public Builder() {
    	      // Empty
        }

        public Builder(TableRangePartitioningRange defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.end = defaults.end;
    	      this.interval = defaults.interval;
    	      this.start = defaults.start;
        }

        public Builder end(Integer end) {
            this.end = Objects.requireNonNull(end);
            return this;
        }

        public Builder interval(Integer interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder start(Integer start) {
            this.start = Objects.requireNonNull(start);
            return this;
        }
        public TableRangePartitioningRange build() {
            return new TableRangePartitioningRange(end, interval, start);
        }
    }
}
