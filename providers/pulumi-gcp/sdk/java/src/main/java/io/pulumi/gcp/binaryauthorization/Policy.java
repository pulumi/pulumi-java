// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.binaryauthorization;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.binaryauthorization.PolicyArgs;
import io.pulumi.gcp.binaryauthorization.inputs.PolicyState;
import io.pulumi.gcp.binaryauthorization.outputs.PolicyAdmissionWhitelistPattern;
import io.pulumi.gcp.binaryauthorization.outputs.PolicyClusterAdmissionRule;
import io.pulumi.gcp.binaryauthorization.outputs.PolicyDefaultAdmissionRule;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A policy for container image binary authorization.
 * 
 * 
 * To get more information about Policy, see:
 * 
 * * [API documentation](https://cloud.google.com/binary-authorization/docs/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/binary-authorization/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Binary Authorization Policy Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const note = new gcp.containeranalysis.Note("note", {attestationAuthority: {
 *     hint: {
 *         humanReadableName: "My attestor",
 *     },
 * }});
 * const attestor = new gcp.binaryauthorization.Attestor("attestor", {attestationAuthorityNote: {
 *     noteReference: note.name,
 * }});
 * const policy = new gcp.binaryauthorization.Policy("policy", {
 *     admissionWhitelistPatterns: [{
 *         namePattern: "gcr.io/google_containers/*",
 *     }],
 *     defaultAdmissionRule: {
 *         evaluationMode: "ALWAYS_ALLOW",
 *         enforcementMode: "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *     },
 *     clusterAdmissionRules: [{
 *         cluster: "us-central1-a.prod-cluster",
 *         evaluationMode: "REQUIRE_ATTESTATION",
 *         enforcementMode: "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *         requireAttestationsBies: [attestor.name],
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * note = gcp.containeranalysis.Note("note", attestation_authority=gcp.containeranalysis.NoteAttestationAuthorityArgs(
 *     hint=gcp.containeranalysis.NoteAttestationAuthorityHintArgs(
 *         human_readable_name="My attestor",
 *     ),
 * ))
 * attestor = gcp.binaryauthorization.Attestor("attestor", attestation_authority_note=gcp.binaryauthorization.AttestorAttestationAuthorityNoteArgs(
 *     note_reference=note.name,
 * ))
 * policy = gcp.binaryauthorization.Policy("policy",
 *     admission_whitelist_patterns=[gcp.binaryauthorization.PolicyAdmissionWhitelistPatternArgs(
 *         name_pattern="gcr.io/google_containers/*",
 *     )],
 *     default_admission_rule=gcp.binaryauthorization.PolicyDefaultAdmissionRuleArgs(
 *         evaluation_mode="ALWAYS_ALLOW",
 *         enforcement_mode="ENFORCED_BLOCK_AND_AUDIT_LOG",
 *     ),
 *     cluster_admission_rules=[gcp.binaryauthorization.PolicyClusterAdmissionRuleArgs(
 *         cluster="us-central1-a.prod-cluster",
 *         evaluation_mode="REQUIRE_ATTESTATION",
 *         enforcement_mode="ENFORCED_BLOCK_AND_AUDIT_LOG",
 *         require_attestations_bies=[attestor.name],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var note = new Gcp.ContainerAnalysis.Note("note", new Gcp.ContainerAnalysis.NoteArgs
 *         {
 *             AttestationAuthority = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityArgs
 *             {
 *                 Hint = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityHintArgs
 *                 {
 *                     HumanReadableName = "My attestor",
 *                 },
 *             },
 *         });
 *         var attestor = new Gcp.BinaryAuthorization.Attestor("attestor", new Gcp.BinaryAuthorization.AttestorArgs
 *         {
 *             AttestationAuthorityNote = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNoteArgs
 *             {
 *                 NoteReference = note.Name,
 *             },
 *         });
 *         var policy = new Gcp.BinaryAuthorization.Policy("policy", new Gcp.BinaryAuthorization.PolicyArgs
 *         {
 *             AdmissionWhitelistPatterns = 
 *             {
 *                 new Gcp.BinaryAuthorization.Inputs.PolicyAdmissionWhitelistPatternArgs
 *                 {
 *                     NamePattern = "gcr.io/google_containers/*",
 *                 },
 *             },
 *             DefaultAdmissionRule = new Gcp.BinaryAuthorization.Inputs.PolicyDefaultAdmissionRuleArgs
 *             {
 *                 EvaluationMode = "ALWAYS_ALLOW",
 *                 EnforcementMode = "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *             },
 *             ClusterAdmissionRules = 
 *             {
 *                 new Gcp.BinaryAuthorization.Inputs.PolicyClusterAdmissionRuleArgs
 *                 {
 *                     Cluster = "us-central1-a.prod-cluster",
 *                     EvaluationMode = "REQUIRE_ATTESTATION",
 *                     EnforcementMode = "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *                     RequireAttestationsBies = 
 *                     {
 *                         attestor.Name,
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/binaryauthorization"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/containeranalysis"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		note, err := containeranalysis.NewNote(ctx, "note", &containeranalysis.NoteArgs{
 * 			AttestationAuthority: &containeranalysis.NoteAttestationAuthorityArgs{
 * 				Hint: &containeranalysis.NoteAttestationAuthorityHintArgs{
 * 					HumanReadableName: pulumi.String("My attestor"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		attestor, err := binaryauthorization.NewAttestor(ctx, "attestor", &binaryauthorization.AttestorArgs{
 * 			AttestationAuthorityNote: &binaryauthorization.AttestorAttestationAuthorityNoteArgs{
 * 				NoteReference: note.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = binaryauthorization.NewPolicy(ctx, "policy", &binaryauthorization.PolicyArgs{
 * 			AdmissionWhitelistPatterns: binaryauthorization.PolicyAdmissionWhitelistPatternArray{
 * 				&binaryauthorization.PolicyAdmissionWhitelistPatternArgs{
 * 					NamePattern: pulumi.String("gcr.io/google_containers/*"),
 * 				},
 * 			},
 * 			DefaultAdmissionRule: &binaryauthorization.PolicyDefaultAdmissionRuleArgs{
 * 				EvaluationMode:  pulumi.String("ALWAYS_ALLOW"),
 * 				EnforcementMode: pulumi.String("ENFORCED_BLOCK_AND_AUDIT_LOG"),
 * 			},
 * 			ClusterAdmissionRules: binaryauthorization.PolicyClusterAdmissionRuleArray{
 * 				&binaryauthorization.PolicyClusterAdmissionRuleArgs{
 * 					Cluster:         pulumi.String("us-central1-a.prod-cluster"),
 * 					EvaluationMode:  pulumi.String("REQUIRE_ATTESTATION"),
 * 					EnforcementMode: pulumi.String("ENFORCED_BLOCK_AND_AUDIT_LOG"),
 * 					RequireAttestationsBies: pulumi.StringArray{
 * 						attestor.Name,
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Binary Authorization Policy Global Evaluation
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const note = new gcp.containeranalysis.Note("note", {attestationAuthority: {
 *     hint: {
 *         humanReadableName: "My attestor",
 *     },
 * }});
 * const attestor = new gcp.binaryauthorization.Attestor("attestor", {attestationAuthorityNote: {
 *     noteReference: note.name,
 * }});
 * const policy = new gcp.binaryauthorization.Policy("policy", {
 *     defaultAdmissionRule: {
 *         evaluationMode: "REQUIRE_ATTESTATION",
 *         enforcementMode: "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *         requireAttestationsBies: [attestor.name],
 *     },
 *     globalPolicyEvaluationMode: "ENABLE",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * note = gcp.containeranalysis.Note("note", attestation_authority=gcp.containeranalysis.NoteAttestationAuthorityArgs(
 *     hint=gcp.containeranalysis.NoteAttestationAuthorityHintArgs(
 *         human_readable_name="My attestor",
 *     ),
 * ))
 * attestor = gcp.binaryauthorization.Attestor("attestor", attestation_authority_note=gcp.binaryauthorization.AttestorAttestationAuthorityNoteArgs(
 *     note_reference=note.name,
 * ))
 * policy = gcp.binaryauthorization.Policy("policy",
 *     default_admission_rule=gcp.binaryauthorization.PolicyDefaultAdmissionRuleArgs(
 *         evaluation_mode="REQUIRE_ATTESTATION",
 *         enforcement_mode="ENFORCED_BLOCK_AND_AUDIT_LOG",
 *         require_attestations_bies=[attestor.name],
 *     ),
 *     global_policy_evaluation_mode="ENABLE")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var note = new Gcp.ContainerAnalysis.Note("note", new Gcp.ContainerAnalysis.NoteArgs
 *         {
 *             AttestationAuthority = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityArgs
 *             {
 *                 Hint = new Gcp.ContainerAnalysis.Inputs.NoteAttestationAuthorityHintArgs
 *                 {
 *                     HumanReadableName = "My attestor",
 *                 },
 *             },
 *         });
 *         var attestor = new Gcp.BinaryAuthorization.Attestor("attestor", new Gcp.BinaryAuthorization.AttestorArgs
 *         {
 *             AttestationAuthorityNote = new Gcp.BinaryAuthorization.Inputs.AttestorAttestationAuthorityNoteArgs
 *             {
 *                 NoteReference = note.Name,
 *             },
 *         });
 *         var policy = new Gcp.BinaryAuthorization.Policy("policy", new Gcp.BinaryAuthorization.PolicyArgs
 *         {
 *             DefaultAdmissionRule = new Gcp.BinaryAuthorization.Inputs.PolicyDefaultAdmissionRuleArgs
 *             {
 *                 EvaluationMode = "REQUIRE_ATTESTATION",
 *                 EnforcementMode = "ENFORCED_BLOCK_AND_AUDIT_LOG",
 *                 RequireAttestationsBies = 
 *                 {
 *                     attestor.Name,
 *                 },
 *             },
 *             GlobalPolicyEvaluationMode = "ENABLE",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/binaryauthorization"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/containeranalysis"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		note, err := containeranalysis.NewNote(ctx, "note", &containeranalysis.NoteArgs{
 * 			AttestationAuthority: &containeranalysis.NoteAttestationAuthorityArgs{
 * 				Hint: &containeranalysis.NoteAttestationAuthorityHintArgs{
 * 					HumanReadableName: pulumi.String("My attestor"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		attestor, err := binaryauthorization.NewAttestor(ctx, "attestor", &binaryauthorization.AttestorArgs{
 * 			AttestationAuthorityNote: &binaryauthorization.AttestorAttestationAuthorityNoteArgs{
 * 				NoteReference: note.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = binaryauthorization.NewPolicy(ctx, "policy", &binaryauthorization.PolicyArgs{
 * 			DefaultAdmissionRule: &binaryauthorization.PolicyDefaultAdmissionRuleArgs{
 * 				EvaluationMode:  pulumi.String("REQUIRE_ATTESTATION"),
 * 				EnforcementMode: pulumi.String("ENFORCED_BLOCK_AND_AUDIT_LOG"),
 * 				RequireAttestationsBies: pulumi.StringArray{
 * 					attestor.Name,
 * 				},
 * 			},
 * 			GlobalPolicyEvaluationMode: pulumi.String("ENABLE"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Policy can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:binaryauthorization/policy:Policy default projects/{{project}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:binaryauthorization/policy:Policy default {{project}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:binaryauthorization/policy:Policy")
public class Policy extends io.pulumi.resources.CustomResource {
    /**
     * A whitelist of image patterns to exclude from admission rules. If an
     * image's name matches a whitelist pattern, the image's admission
     * requests will always be permitted regardless of your admission rules.
     * Structure is documented below.
     * 
     */
    @Export(name="admissionWhitelistPatterns", type=List.class, parameters={PolicyAdmissionWhitelistPattern.class})
    private Output</* @Nullable */ List<PolicyAdmissionWhitelistPattern>> admissionWhitelistPatterns;

    /**
     * @return A whitelist of image patterns to exclude from admission rules. If an
     * image's name matches a whitelist pattern, the image's admission
     * requests will always be permitted regardless of your admission rules.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<PolicyAdmissionWhitelistPattern>> getAdmissionWhitelistPatterns() {
        return this.admissionWhitelistPatterns;
    }
    /**
     * Per-cluster admission rules. An admission rule specifies either that
     * all container images used in a pod creation request must be attested
     * to by one or more attestors, that all pod creations will be allowed,
     * or that all pod creations will be denied. There can be at most one
     * admission rule per cluster spec.
     * 
     */
    @Export(name="clusterAdmissionRules", type=List.class, parameters={PolicyClusterAdmissionRule.class})
    private Output</* @Nullable */ List<PolicyClusterAdmissionRule>> clusterAdmissionRules;

    /**
     * @return Per-cluster admission rules. An admission rule specifies either that
     * all container images used in a pod creation request must be attested
     * to by one or more attestors, that all pod creations will be allowed,
     * or that all pod creations will be denied. There can be at most one
     * admission rule per cluster spec.
     * 
     */
    public Output</* @Nullable */ List<PolicyClusterAdmissionRule>> getClusterAdmissionRules() {
        return this.clusterAdmissionRules;
    }
    /**
     * Default admission rule for a cluster without a per-cluster admission
     * rule.
     * Structure is documented below.
     * 
     */
    @Export(name="defaultAdmissionRule", type=PolicyDefaultAdmissionRule.class, parameters={})
    private Output<PolicyDefaultAdmissionRule> defaultAdmissionRule;

    /**
     * @return Default admission rule for a cluster without a per-cluster admission
     * rule.
     * Structure is documented below.
     * 
     */
    public Output<PolicyDefaultAdmissionRule> getDefaultAdmissionRule() {
        return this.defaultAdmissionRule;
    }
    /**
     * A descriptive comment.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A descriptive comment.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Controls the evaluation of a Google-maintained global admission policy
     * for common system-level images. Images not covered by the global
     * policy will be subject to the project admission policy.
     * Possible values are `ENABLE` and `DISABLE`.
     * 
     */
    @Export(name="globalPolicyEvaluationMode", type=String.class, parameters={})
    private Output<String> globalPolicyEvaluationMode;

    /**
     * @return Controls the evaluation of a Google-maintained global admission policy
     * for common system-level images. Images not covered by the global
     * policy will be subject to the project admission policy.
     * Possible values are `ENABLE` and `DISABLE`.
     * 
     */
    public Output<String> getGlobalPolicyEvaluationMode() {
        return this.globalPolicyEvaluationMode;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Policy(String name) {
        this(name, PolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Policy(String name, PolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Policy(String name, PolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:binaryauthorization/policy:Policy", name, args == null ? PolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Policy(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:binaryauthorization/policy:Policy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Policy get(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Policy(name, id, state, options);
    }
}
