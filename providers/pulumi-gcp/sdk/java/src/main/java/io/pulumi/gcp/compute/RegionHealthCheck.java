// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.RegionHealthCheckArgs;
import io.pulumi.gcp.compute.inputs.RegionHealthCheckState;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckGrpcHealthCheck;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckHttp2HealthCheck;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckHttpHealthCheck;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckHttpsHealthCheck;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckLogConfig;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckSslHealthCheck;
import io.pulumi.gcp.compute.outputs.RegionHealthCheckTcpHealthCheck;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Health Checks determine whether instances are responsive and able to do work.
 * They are an important part of a comprehensive load balancing configuration,
 * as they enable monitoring instances behind load balancers.
 * 
 * Health Checks poll instances at a specified interval. Instances that
 * do not respond successfully to some number of probes in a row are marked
 * as unhealthy. No new connections are sent to unhealthy instances,
 * though existing connections will continue. The health check will
 * continue to poll unhealthy instances. If an instance later responds
 * successfully to some number of consecutive probes, it is marked
 * healthy again and can receive new connections.
 * 
 * 
 * To get more information about RegionHealthCheck, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionHealthChecks)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/health-checks)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Region Health Check Tcp
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const tcp_region_health_check = new gcp.compute.RegionHealthCheck("tcp-region-health-check", {
 *     checkIntervalSec: 1,
 *     tcpHealthCheck: {
 *         port: 80,
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * tcp_region_health_check = gcp.compute.RegionHealthCheck("tcp-region-health-check",
 *     check_interval_sec=1,
 *     tcp_health_check=gcp.compute.RegionHealthCheckTcpHealthCheckArgs(
 *         port=80,
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var tcp_region_health_check = new Gcp.Compute.RegionHealthCheck("tcp-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             TcpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckTcpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "tcp-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TcpHealthCheck: &compute.RegionHealthCheckTcpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Tcp Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const tcp_region_health_check = new gcp.compute.RegionHealthCheck("tcp-region-health-check", {
 *     checkIntervalSec: 1,
 *     description: "Health check via tcp",
 *     healthyThreshold: 4,
 *     tcpHealthCheck: {
 *         portName: "health-check-port",
 *         portSpecification: "USE_NAMED_PORT",
 *         proxyHeader: "NONE",
 *         request: "ARE YOU HEALTHY?",
 *         response: "I AM HEALTHY",
 *     },
 *     timeoutSec: 1,
 *     unhealthyThreshold: 5,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * tcp_region_health_check = gcp.compute.RegionHealthCheck("tcp-region-health-check",
 *     check_interval_sec=1,
 *     description="Health check via tcp",
 *     healthy_threshold=4,
 *     tcp_health_check=gcp.compute.RegionHealthCheckTcpHealthCheckArgs(
 *         port_name="health-check-port",
 *         port_specification="USE_NAMED_PORT",
 *         proxy_header="NONE",
 *         request="ARE YOU HEALTHY?",
 *         response="I AM HEALTHY",
 *     ),
 *     timeout_sec=1,
 *     unhealthy_threshold=5)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var tcp_region_health_check = new Gcp.Compute.RegionHealthCheck("tcp-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             Description = "Health check via tcp",
 *             HealthyThreshold = 4,
 *             TcpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckTcpHealthCheckArgs
 *             {
 *                 PortName = "health-check-port",
 *                 PortSpecification = "USE_NAMED_PORT",
 *                 ProxyHeader = "NONE",
 *                 Request = "ARE YOU HEALTHY?",
 *                 Response = "I AM HEALTHY",
 *             },
 *             TimeoutSec = 1,
 *             UnhealthyThreshold = 5,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "tcp-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			Description:      pulumi.String("Health check via tcp"),
 * 			HealthyThreshold: pulumi.Int(4),
 * 			TcpHealthCheck: &compute.RegionHealthCheckTcpHealthCheckArgs{
 * 				PortName:          pulumi.String("health-check-port"),
 * 				PortSpecification: pulumi.String("USE_NAMED_PORT"),
 * 				ProxyHeader:       pulumi.String("NONE"),
 * 				Request:           pulumi.String("ARE YOU HEALTHY?"),
 * 				Response:          pulumi.String("I AM HEALTHY"),
 * 			},
 * 			TimeoutSec:         pulumi.Int(1),
 * 			UnhealthyThreshold: pulumi.Int(5),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Ssl
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const ssl_region_health_check = new gcp.compute.RegionHealthCheck("ssl-region-health-check", {
 *     checkIntervalSec: 1,
 *     sslHealthCheck: {
 *         port: 443,
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * ssl_region_health_check = gcp.compute.RegionHealthCheck("ssl-region-health-check",
 *     check_interval_sec=1,
 *     ssl_health_check=gcp.compute.RegionHealthCheckSslHealthCheckArgs(
 *         port=443,
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ssl_region_health_check = new Gcp.Compute.RegionHealthCheck("ssl-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             SslHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckSslHealthCheckArgs
 *             {
 *                 Port = 443,
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "ssl-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			SslHealthCheck: &compute.RegionHealthCheckSslHealthCheckArgs{
 * 				Port: pulumi.Int(443),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Ssl Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const ssl_region_health_check = new gcp.compute.RegionHealthCheck("ssl-region-health-check", {
 *     checkIntervalSec: 1,
 *     description: "Health check via ssl",
 *     healthyThreshold: 4,
 *     sslHealthCheck: {
 *         portName: "health-check-port",
 *         portSpecification: "USE_NAMED_PORT",
 *         proxyHeader: "NONE",
 *         request: "ARE YOU HEALTHY?",
 *         response: "I AM HEALTHY",
 *     },
 *     timeoutSec: 1,
 *     unhealthyThreshold: 5,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * ssl_region_health_check = gcp.compute.RegionHealthCheck("ssl-region-health-check",
 *     check_interval_sec=1,
 *     description="Health check via ssl",
 *     healthy_threshold=4,
 *     ssl_health_check=gcp.compute.RegionHealthCheckSslHealthCheckArgs(
 *         port_name="health-check-port",
 *         port_specification="USE_NAMED_PORT",
 *         proxy_header="NONE",
 *         request="ARE YOU HEALTHY?",
 *         response="I AM HEALTHY",
 *     ),
 *     timeout_sec=1,
 *     unhealthy_threshold=5)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ssl_region_health_check = new Gcp.Compute.RegionHealthCheck("ssl-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             Description = "Health check via ssl",
 *             HealthyThreshold = 4,
 *             SslHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckSslHealthCheckArgs
 *             {
 *                 PortName = "health-check-port",
 *                 PortSpecification = "USE_NAMED_PORT",
 *                 ProxyHeader = "NONE",
 *                 Request = "ARE YOU HEALTHY?",
 *                 Response = "I AM HEALTHY",
 *             },
 *             TimeoutSec = 1,
 *             UnhealthyThreshold = 5,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "ssl-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			Description:      pulumi.String("Health check via ssl"),
 * 			HealthyThreshold: pulumi.Int(4),
 * 			SslHealthCheck: &compute.RegionHealthCheckSslHealthCheckArgs{
 * 				PortName:          pulumi.String("health-check-port"),
 * 				PortSpecification: pulumi.String("USE_NAMED_PORT"),
 * 				ProxyHeader:       pulumi.String("NONE"),
 * 				Request:           pulumi.String("ARE YOU HEALTHY?"),
 * 				Response:          pulumi.String("I AM HEALTHY"),
 * 			},
 * 			TimeoutSec:         pulumi.Int(1),
 * 			UnhealthyThreshold: pulumi.Int(5),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Http
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const http_region_health_check = new gcp.compute.RegionHealthCheck("http-region-health-check", {
 *     checkIntervalSec: 1,
 *     httpHealthCheck: {
 *         port: 80,
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * http_region_health_check = gcp.compute.RegionHealthCheck("http-region-health-check",
 *     check_interval_sec=1,
 *     http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
 *         port=80,
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var http_region_health_check = new Gcp.Compute.RegionHealthCheck("http-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "http-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Http Logs
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const http_region_health_check = new gcp.compute.RegionHealthCheck("http-region-health-check", {
 *     timeoutSec: 1,
 *     checkIntervalSec: 1,
 *     httpHealthCheck: {
 *         port: "80",
 *     },
 *     logConfig: {
 *         enable: true,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * http_region_health_check = gcp.compute.RegionHealthCheck("http-region-health-check",
 *     timeout_sec=1,
 *     check_interval_sec=1,
 *     http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
 *         port=80,
 *     ),
 *     log_config=gcp.compute.RegionHealthCheckLogConfigArgs(
 *         enable=True,
 *     ),
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var http_region_health_check = new Gcp.Compute.RegionHealthCheck("http-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             TimeoutSec = 1,
 *             CheckIntervalSec = 1,
 *             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
 *             {
 *                 Port = 80,
 *             },
 *             LogConfig = new Gcp.Compute.Inputs.RegionHealthCheckLogConfigArgs
 *             {
 *                 Enable = true,
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "http-region-health-check", &compute.RegionHealthCheckArgs{
 * 			TimeoutSec:       pulumi.Int(1),
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
 * 				Port: pulumi.Int(80),
 * 			},
 * 			LogConfig: &compute.RegionHealthCheckLogConfigArgs{
 * 				Enable: pulumi.Bool(true),
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Http Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const http_region_health_check = new gcp.compute.RegionHealthCheck("http-region-health-check", {
 *     checkIntervalSec: 1,
 *     description: "Health check via http",
 *     healthyThreshold: 4,
 *     httpHealthCheck: {
 *         host: "1.2.3.4",
 *         portName: "health-check-port",
 *         portSpecification: "USE_NAMED_PORT",
 *         proxyHeader: "NONE",
 *         requestPath: "/mypath",
 *         response: "I AM HEALTHY",
 *     },
 *     timeoutSec: 1,
 *     unhealthyThreshold: 5,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * http_region_health_check = gcp.compute.RegionHealthCheck("http-region-health-check",
 *     check_interval_sec=1,
 *     description="Health check via http",
 *     healthy_threshold=4,
 *     http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
 *         host="1.2.3.4",
 *         port_name="health-check-port",
 *         port_specification="USE_NAMED_PORT",
 *         proxy_header="NONE",
 *         request_path="/mypath",
 *         response="I AM HEALTHY",
 *     ),
 *     timeout_sec=1,
 *     unhealthy_threshold=5)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var http_region_health_check = new Gcp.Compute.RegionHealthCheck("http-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             Description = "Health check via http",
 *             HealthyThreshold = 4,
 *             HttpHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpHealthCheckArgs
 *             {
 *                 Host = "1.2.3.4",
 *                 PortName = "health-check-port",
 *                 PortSpecification = "USE_NAMED_PORT",
 *                 ProxyHeader = "NONE",
 *                 RequestPath = "/mypath",
 *                 Response = "I AM HEALTHY",
 *             },
 *             TimeoutSec = 1,
 *             UnhealthyThreshold = 5,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "http-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			Description:      pulumi.String("Health check via http"),
 * 			HealthyThreshold: pulumi.Int(4),
 * 			HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
 * 				Host:              pulumi.String("1.2.3.4"),
 * 				PortName:          pulumi.String("health-check-port"),
 * 				PortSpecification: pulumi.String("USE_NAMED_PORT"),
 * 				ProxyHeader:       pulumi.String("NONE"),
 * 				RequestPath:       pulumi.String("/mypath"),
 * 				Response:          pulumi.String("I AM HEALTHY"),
 * 			},
 * 			TimeoutSec:         pulumi.Int(1),
 * 			UnhealthyThreshold: pulumi.Int(5),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Https
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const https_region_health_check = new gcp.compute.RegionHealthCheck("https-region-health-check", {
 *     checkIntervalSec: 1,
 *     httpsHealthCheck: {
 *         port: 443,
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * https_region_health_check = gcp.compute.RegionHealthCheck("https-region-health-check",
 *     check_interval_sec=1,
 *     https_health_check=gcp.compute.RegionHealthCheckHttpsHealthCheckArgs(
 *         port=443,
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var https_region_health_check = new Gcp.Compute.RegionHealthCheck("https-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             HttpsHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpsHealthCheckArgs
 *             {
 *                 Port = 443,
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "https-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			HttpsHealthCheck: &compute.RegionHealthCheckHttpsHealthCheckArgs{
 * 				Port: pulumi.Int(443),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Https Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const https_region_health_check = new gcp.compute.RegionHealthCheck("https-region-health-check", {
 *     checkIntervalSec: 1,
 *     description: "Health check via https",
 *     healthyThreshold: 4,
 *     httpsHealthCheck: {
 *         host: "1.2.3.4",
 *         portName: "health-check-port",
 *         portSpecification: "USE_NAMED_PORT",
 *         proxyHeader: "NONE",
 *         requestPath: "/mypath",
 *         response: "I AM HEALTHY",
 *     },
 *     timeoutSec: 1,
 *     unhealthyThreshold: 5,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * https_region_health_check = gcp.compute.RegionHealthCheck("https-region-health-check",
 *     check_interval_sec=1,
 *     description="Health check via https",
 *     healthy_threshold=4,
 *     https_health_check=gcp.compute.RegionHealthCheckHttpsHealthCheckArgs(
 *         host="1.2.3.4",
 *         port_name="health-check-port",
 *         port_specification="USE_NAMED_PORT",
 *         proxy_header="NONE",
 *         request_path="/mypath",
 *         response="I AM HEALTHY",
 *     ),
 *     timeout_sec=1,
 *     unhealthy_threshold=5)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var https_region_health_check = new Gcp.Compute.RegionHealthCheck("https-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             Description = "Health check via https",
 *             HealthyThreshold = 4,
 *             HttpsHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttpsHealthCheckArgs
 *             {
 *                 Host = "1.2.3.4",
 *                 PortName = "health-check-port",
 *                 PortSpecification = "USE_NAMED_PORT",
 *                 ProxyHeader = "NONE",
 *                 RequestPath = "/mypath",
 *                 Response = "I AM HEALTHY",
 *             },
 *             TimeoutSec = 1,
 *             UnhealthyThreshold = 5,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "https-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			Description:      pulumi.String("Health check via https"),
 * 			HealthyThreshold: pulumi.Int(4),
 * 			HttpsHealthCheck: &compute.RegionHealthCheckHttpsHealthCheckArgs{
 * 				Host:              pulumi.String("1.2.3.4"),
 * 				PortName:          pulumi.String("health-check-port"),
 * 				PortSpecification: pulumi.String("USE_NAMED_PORT"),
 * 				ProxyHeader:       pulumi.String("NONE"),
 * 				RequestPath:       pulumi.String("/mypath"),
 * 				Response:          pulumi.String("I AM HEALTHY"),
 * 			},
 * 			TimeoutSec:         pulumi.Int(1),
 * 			UnhealthyThreshold: pulumi.Int(5),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Http2
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const http2_region_health_check = new gcp.compute.RegionHealthCheck("http2-region-health-check", {
 *     checkIntervalSec: 1,
 *     http2HealthCheck: {
 *         port: 443,
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * http2_region_health_check = gcp.compute.RegionHealthCheck("http2-region-health-check",
 *     check_interval_sec=1,
 *     http2_health_check=gcp.compute.RegionHealthCheckHttp2HealthCheckArgs(
 *         port=443,
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var http2_region_health_check = new Gcp.Compute.RegionHealthCheck("http2-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             Http2HealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttp2HealthCheckArgs
 *             {
 *                 Port = 443,
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "http2-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			Http2HealthCheck: &compute.RegionHealthCheckHttp2HealthCheckArgs{
 * 				Port: pulumi.Int(443),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Http2 Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const http2_region_health_check = new gcp.compute.RegionHealthCheck("http2-region-health-check", {
 *     checkIntervalSec: 1,
 *     description: "Health check via http2",
 *     healthyThreshold: 4,
 *     http2HealthCheck: {
 *         host: "1.2.3.4",
 *         portName: "health-check-port",
 *         portSpecification: "USE_NAMED_PORT",
 *         proxyHeader: "NONE",
 *         requestPath: "/mypath",
 *         response: "I AM HEALTHY",
 *     },
 *     timeoutSec: 1,
 *     unhealthyThreshold: 5,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * http2_region_health_check = gcp.compute.RegionHealthCheck("http2-region-health-check",
 *     check_interval_sec=1,
 *     description="Health check via http2",
 *     healthy_threshold=4,
 *     http2_health_check=gcp.compute.RegionHealthCheckHttp2HealthCheckArgs(
 *         host="1.2.3.4",
 *         port_name="health-check-port",
 *         port_specification="USE_NAMED_PORT",
 *         proxy_header="NONE",
 *         request_path="/mypath",
 *         response="I AM HEALTHY",
 *     ),
 *     timeout_sec=1,
 *     unhealthy_threshold=5)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var http2_region_health_check = new Gcp.Compute.RegionHealthCheck("http2-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             Description = "Health check via http2",
 *             HealthyThreshold = 4,
 *             Http2HealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckHttp2HealthCheckArgs
 *             {
 *                 Host = "1.2.3.4",
 *                 PortName = "health-check-port",
 *                 PortSpecification = "USE_NAMED_PORT",
 *                 ProxyHeader = "NONE",
 *                 RequestPath = "/mypath",
 *                 Response = "I AM HEALTHY",
 *             },
 *             TimeoutSec = 1,
 *             UnhealthyThreshold = 5,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "http2-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			Description:      pulumi.String("Health check via http2"),
 * 			HealthyThreshold: pulumi.Int(4),
 * 			Http2HealthCheck: &compute.RegionHealthCheckHttp2HealthCheckArgs{
 * 				Host:              pulumi.String("1.2.3.4"),
 * 				PortName:          pulumi.String("health-check-port"),
 * 				PortSpecification: pulumi.String("USE_NAMED_PORT"),
 * 				ProxyHeader:       pulumi.String("NONE"),
 * 				RequestPath:       pulumi.String("/mypath"),
 * 				Response:          pulumi.String("I AM HEALTHY"),
 * 			},
 * 			TimeoutSec:         pulumi.Int(1),
 * 			UnhealthyThreshold: pulumi.Int(5),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Grpc
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const grpc_region_health_check = new gcp.compute.RegionHealthCheck("grpc-region-health-check", {
 *     checkIntervalSec: 1,
 *     grpcHealthCheck: {
 *         port: 443,
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * grpc_region_health_check = gcp.compute.RegionHealthCheck("grpc-region-health-check",
 *     check_interval_sec=1,
 *     grpc_health_check=gcp.compute.RegionHealthCheckGrpcHealthCheckArgs(
 *         port=443,
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var grpc_region_health_check = new Gcp.Compute.RegionHealthCheck("grpc-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             GrpcHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckGrpcHealthCheckArgs
 *             {
 *                 Port = 443,
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "grpc-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			GrpcHealthCheck: &compute.RegionHealthCheckGrpcHealthCheckArgs{
 * 				Port: pulumi.Int(443),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Region Health Check Grpc Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const grpc_region_health_check = new gcp.compute.RegionHealthCheck("grpc-region-health-check", {
 *     checkIntervalSec: 1,
 *     grpcHealthCheck: {
 *         grpcServiceName: "testservice",
 *         portName: "health-check-port",
 *         portSpecification: "USE_NAMED_PORT",
 *     },
 *     timeoutSec: 1,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * grpc_region_health_check = gcp.compute.RegionHealthCheck("grpc-region-health-check",
 *     check_interval_sec=1,
 *     grpc_health_check=gcp.compute.RegionHealthCheckGrpcHealthCheckArgs(
 *         grpc_service_name="testservice",
 *         port_name="health-check-port",
 *         port_specification="USE_NAMED_PORT",
 *     ),
 *     timeout_sec=1)
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var grpc_region_health_check = new Gcp.Compute.RegionHealthCheck("grpc-region-health-check", new Gcp.Compute.RegionHealthCheckArgs
 *         {
 *             CheckIntervalSec = 1,
 *             GrpcHealthCheck = new Gcp.Compute.Inputs.RegionHealthCheckGrpcHealthCheckArgs
 *             {
 *                 GrpcServiceName = "testservice",
 *                 PortName = "health-check-port",
 *                 PortSpecification = "USE_NAMED_PORT",
 *             },
 *             TimeoutSec = 1,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := compute.NewRegionHealthCheck(ctx, "grpc-region-health-check", &compute.RegionHealthCheckArgs{
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			GrpcHealthCheck: &compute.RegionHealthCheckGrpcHealthCheckArgs{
 * 				GrpcServiceName:   pulumi.String("testservice"),
 * 				PortName:          pulumi.String("health-check-port"),
 * 				PortSpecification: pulumi.String("USE_NAMED_PORT"),
 * 			},
 * 			TimeoutSec: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * RegionHealthCheck can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default projects/{{project}}/regions/{{region}}/healthChecks/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/regionHealthCheck:RegionHealthCheck")
public class RegionHealthCheck extends io.pulumi.resources.CustomResource {
    /**
     * How often (in seconds) to send a health check. The default value is 5
     * seconds.
     * 
     */
    @Export(name="checkIntervalSec", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> checkIntervalSec;

    /**
     * @return How often (in seconds) to send a health check. The default value is 5
     * seconds.
     * 
     */
    public Output</* @Nullable */ Integer> getCheckIntervalSec() {
        return this.checkIntervalSec;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> getCreationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="grpcHealthCheck", type=RegionHealthCheckGrpcHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckGrpcHealthCheck> grpcHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionHealthCheckGrpcHealthCheck> getGrpcHealthCheck() {
        return this.grpcHealthCheck;
    }
    /**
     * A so-far unhealthy instance will be marked healthy after this many
     * consecutive successes. The default value is 2.
     * 
     */
    @Export(name="healthyThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> healthyThreshold;

    /**
     * @return A so-far unhealthy instance will be marked healthy after this many
     * consecutive successes. The default value is 2.
     * 
     */
    public Output</* @Nullable */ Integer> getHealthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="http2HealthCheck", type=RegionHealthCheckHttp2HealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckHttp2HealthCheck> http2HealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionHealthCheckHttp2HealthCheck> getHttp2HealthCheck() {
        return this.http2HealthCheck;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="httpHealthCheck", type=RegionHealthCheckHttpHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckHttpHealthCheck> httpHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionHealthCheckHttpHealthCheck> getHttpHealthCheck() {
        return this.httpHealthCheck;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="httpsHealthCheck", type=RegionHealthCheckHttpsHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckHttpsHealthCheck> httpsHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionHealthCheckHttpsHealthCheck> getHttpsHealthCheck() {
        return this.httpsHealthCheck;
    }
    /**
     * Configure logging on this health check.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", type=RegionHealthCheckLogConfig.class, parameters={})
    private Output<RegionHealthCheckLogConfig> logConfig;

    /**
     * @return Configure logging on this health check.
     * Structure is documented below.
     * 
     */
    public Output<RegionHealthCheckLogConfig> getLogConfig() {
        return this.logConfig;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The Region in which the created health check should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The Region in which the created health check should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="sslHealthCheck", type=RegionHealthCheckSslHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckSslHealthCheck> sslHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionHealthCheckSslHealthCheck> getSslHealthCheck() {
        return this.sslHealthCheck;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="tcpHealthCheck", type=RegionHealthCheckTcpHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckTcpHealthCheck> tcpHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ RegionHealthCheckTcpHealthCheck> getTcpHealthCheck() {
        return this.tcpHealthCheck;
    }
    /**
     * How long (in seconds) to wait before claiming failure.
     * The default value is 5 seconds.  It is invalid for timeoutSec to have
     * greater value than checkIntervalSec.
     * 
     */
    @Export(name="timeoutSec", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> timeoutSec;

    /**
     * @return How long (in seconds) to wait before claiming failure.
     * The default value is 5 seconds.  It is invalid for timeoutSec to have
     * greater value than checkIntervalSec.
     * 
     */
    public Output</* @Nullable */ Integer> getTimeoutSec() {
        return this.timeoutSec;
    }
    /**
     * The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * A so-far healthy instance will be marked unhealthy after this many
     * consecutive failures. The default value is 2.
     * 
     */
    @Export(name="unhealthyThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> unhealthyThreshold;

    /**
     * @return A so-far healthy instance will be marked unhealthy after this many
     * consecutive failures. The default value is 2.
     * 
     */
    public Output</* @Nullable */ Integer> getUnhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionHealthCheck(String name) {
        this(name, RegionHealthCheckArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionHealthCheck(String name, @Nullable RegionHealthCheckArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionHealthCheck(String name, @Nullable RegionHealthCheckArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionHealthCheck:RegionHealthCheck", name, args == null ? RegionHealthCheckArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RegionHealthCheck(String name, Output<String> id, @Nullable RegionHealthCheckState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionHealthCheck:RegionHealthCheck", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionHealthCheck get(String name, Output<String> id, @Nullable RegionHealthCheckState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RegionHealthCheck(name, id, state, options);
    }
}
