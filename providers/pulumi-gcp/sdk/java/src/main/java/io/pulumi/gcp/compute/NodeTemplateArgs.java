// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.compute.inputs.NodeTemplateNodeTypeFlexibilityArgs;
import io.pulumi.gcp.compute.inputs.NodeTemplateServerBindingArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NodeTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final NodeTemplateArgs Empty = new NodeTemplateArgs();

    /**
     * CPU overcommit.
     * Default value is `NONE`.
     * Possible values are `ENABLED` and `NONE`.
     * 
     */
    @InputImport(name="cpuOvercommitType")
      private final @Nullable Output<String> cpuOvercommitType;

    public Output<String> getCpuOvercommitType() {
        return this.cpuOvercommitType == null ? Output.empty() : this.cpuOvercommitType;
    }

    /**
     * An optional textual description of the resource.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Name of the resource.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Labels to use for node affinity, which will be used in
     * instance scheduling.
     * 
     */
    @InputImport(name="nodeAffinityLabels")
      private final @Nullable Output<Map<String,String>> nodeAffinityLabels;

    public Output<Map<String,String>> getNodeAffinityLabels() {
        return this.nodeAffinityLabels == null ? Output.empty() : this.nodeAffinityLabels;
    }

    /**
     * Node type to use for nodes group that are created from this template.
     * Only one of nodeTypeFlexibility and nodeType can be specified.
     * 
     */
    @InputImport(name="nodeType")
      private final @Nullable Output<String> nodeType;

    public Output<String> getNodeType() {
        return this.nodeType == null ? Output.empty() : this.nodeType;
    }

    /**
     * Flexible properties for the desired node type. Node groups that
     * use this node template will create nodes of a type that matches
     * these properties. Only one of nodeTypeFlexibility and nodeType can
     * be specified.
     * Structure is documented below.
     * 
     */
    @InputImport(name="nodeTypeFlexibility")
      private final @Nullable Output<NodeTemplateNodeTypeFlexibilityArgs> nodeTypeFlexibility;

    public Output<NodeTemplateNodeTypeFlexibilityArgs> getNodeTypeFlexibility() {
        return this.nodeTypeFlexibility == null ? Output.empty() : this.nodeTypeFlexibility;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Region where nodes using the node template will be created.
     * If it is not provided, the provider region is used.
     * 
     */
    @InputImport(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Output.empty() : this.region;
    }

    /**
     * The server binding policy for nodes using this template. Determines
     * where the nodes should restart following a maintenance event.
     * Structure is documented below.
     * 
     */
    @InputImport(name="serverBinding")
      private final @Nullable Output<NodeTemplateServerBindingArgs> serverBinding;

    public Output<NodeTemplateServerBindingArgs> getServerBinding() {
        return this.serverBinding == null ? Output.empty() : this.serverBinding;
    }

    public NodeTemplateArgs(
        @Nullable Output<String> cpuOvercommitType,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<Map<String,String>> nodeAffinityLabels,
        @Nullable Output<String> nodeType,
        @Nullable Output<NodeTemplateNodeTypeFlexibilityArgs> nodeTypeFlexibility,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<NodeTemplateServerBindingArgs> serverBinding) {
        this.cpuOvercommitType = cpuOvercommitType;
        this.description = description;
        this.name = name;
        this.nodeAffinityLabels = nodeAffinityLabels;
        this.nodeType = nodeType;
        this.nodeTypeFlexibility = nodeTypeFlexibility;
        this.project = project;
        this.region = region;
        this.serverBinding = serverBinding;
    }

    private NodeTemplateArgs() {
        this.cpuOvercommitType = Output.empty();
        this.description = Output.empty();
        this.name = Output.empty();
        this.nodeAffinityLabels = Output.empty();
        this.nodeType = Output.empty();
        this.nodeTypeFlexibility = Output.empty();
        this.project = Output.empty();
        this.region = Output.empty();
        this.serverBinding = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> cpuOvercommitType;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<Map<String,String>> nodeAffinityLabels;
        private @Nullable Output<String> nodeType;
        private @Nullable Output<NodeTemplateNodeTypeFlexibilityArgs> nodeTypeFlexibility;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<NodeTemplateServerBindingArgs> serverBinding;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuOvercommitType = defaults.cpuOvercommitType;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.nodeAffinityLabels = defaults.nodeAffinityLabels;
    	      this.nodeType = defaults.nodeType;
    	      this.nodeTypeFlexibility = defaults.nodeTypeFlexibility;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.serverBinding = defaults.serverBinding;
        }

        public Builder cpuOvercommitType(@Nullable Output<String> cpuOvercommitType) {
            this.cpuOvercommitType = cpuOvercommitType;
            return this;
        }

        public Builder cpuOvercommitType(@Nullable String cpuOvercommitType) {
            this.cpuOvercommitType = Output.ofNullable(cpuOvercommitType);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder nodeAffinityLabels(@Nullable Output<Map<String,String>> nodeAffinityLabels) {
            this.nodeAffinityLabels = nodeAffinityLabels;
            return this;
        }

        public Builder nodeAffinityLabels(@Nullable Map<String,String> nodeAffinityLabels) {
            this.nodeAffinityLabels = Output.ofNullable(nodeAffinityLabels);
            return this;
        }

        public Builder nodeType(@Nullable Output<String> nodeType) {
            this.nodeType = nodeType;
            return this;
        }

        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = Output.ofNullable(nodeType);
            return this;
        }

        public Builder nodeTypeFlexibility(@Nullable Output<NodeTemplateNodeTypeFlexibilityArgs> nodeTypeFlexibility) {
            this.nodeTypeFlexibility = nodeTypeFlexibility;
            return this;
        }

        public Builder nodeTypeFlexibility(@Nullable NodeTemplateNodeTypeFlexibilityArgs nodeTypeFlexibility) {
            this.nodeTypeFlexibility = Output.ofNullable(nodeTypeFlexibility);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Output.ofNullable(region);
            return this;
        }

        public Builder serverBinding(@Nullable Output<NodeTemplateServerBindingArgs> serverBinding) {
            this.serverBinding = serverBinding;
            return this;
        }

        public Builder serverBinding(@Nullable NodeTemplateServerBindingArgs serverBinding) {
            this.serverBinding = Output.ofNullable(serverBinding);
            return this;
        }
        public NodeTemplateArgs build() {
            return new NodeTemplateArgs(cpuOvercommitType, description, name, nodeAffinityLabels, nodeType, nodeTypeFlexibility, project, region, serverBinding);
        }
    }
}
