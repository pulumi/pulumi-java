// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.redis.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.gcp.redis.outputs.GetInstanceMaintenancePolicy;
import io.pulumi.gcp.redis.outputs.GetInstanceMaintenanceSchedule;
import io.pulumi.gcp.redis.outputs.GetInstanceNode;
import io.pulumi.gcp.redis.outputs.GetInstanceServerCaCert;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetInstanceResult {
    private final String alternativeLocationId;
    private final Boolean authEnabled;
    private final String authString;
    private final String authorizedNetwork;
    private final String connectMode;
    private final String createTime;
    private final String currentLocationId;
    private final String displayName;
    private final String host;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final Map<String,String> labels;
    private final String locationId;
    private final List<GetInstanceMaintenancePolicy> maintenancePolicies;
    private final List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
    private final Integer memorySizeGb;
    private final String name;
    private final List<GetInstanceNode> nodes;
    private final String persistenceIamIdentity;
    private final Integer port;
    private final @Nullable String project;
    private final String readEndpoint;
    private final Integer readEndpointPort;
    private final String readReplicasMode;
    private final Map<String,String> redisConfigs;
    private final String redisVersion;
    private final @Nullable String region;
    private final Integer replicaCount;
    private final String reservedIpRange;
    private final List<GetInstanceServerCaCert> serverCaCerts;
    private final String tier;
    private final String transitEncryptionMode;

    @OutputCustomType.Constructor({"alternativeLocationId","authEnabled","authString","authorizedNetwork","connectMode","createTime","currentLocationId","displayName","host","id","labels","locationId","maintenancePolicies","maintenanceSchedules","memorySizeGb","name","nodes","persistenceIamIdentity","port","project","readEndpoint","readEndpointPort","readReplicasMode","redisConfigs","redisVersion","region","replicaCount","reservedIpRange","serverCaCerts","tier","transitEncryptionMode"})
    private GetInstanceResult(
        String alternativeLocationId,
        Boolean authEnabled,
        String authString,
        String authorizedNetwork,
        String connectMode,
        String createTime,
        String currentLocationId,
        String displayName,
        String host,
        String id,
        Map<String,String> labels,
        String locationId,
        List<GetInstanceMaintenancePolicy> maintenancePolicies,
        List<GetInstanceMaintenanceSchedule> maintenanceSchedules,
        Integer memorySizeGb,
        String name,
        List<GetInstanceNode> nodes,
        String persistenceIamIdentity,
        Integer port,
        @Nullable String project,
        String readEndpoint,
        Integer readEndpointPort,
        String readReplicasMode,
        Map<String,String> redisConfigs,
        String redisVersion,
        @Nullable String region,
        Integer replicaCount,
        String reservedIpRange,
        List<GetInstanceServerCaCert> serverCaCerts,
        String tier,
        String transitEncryptionMode) {
        this.alternativeLocationId = Objects.requireNonNull(alternativeLocationId);
        this.authEnabled = Objects.requireNonNull(authEnabled);
        this.authString = Objects.requireNonNull(authString);
        this.authorizedNetwork = Objects.requireNonNull(authorizedNetwork);
        this.connectMode = Objects.requireNonNull(connectMode);
        this.createTime = Objects.requireNonNull(createTime);
        this.currentLocationId = Objects.requireNonNull(currentLocationId);
        this.displayName = Objects.requireNonNull(displayName);
        this.host = Objects.requireNonNull(host);
        this.id = Objects.requireNonNull(id);
        this.labels = Objects.requireNonNull(labels);
        this.locationId = Objects.requireNonNull(locationId);
        this.maintenancePolicies = Objects.requireNonNull(maintenancePolicies);
        this.maintenanceSchedules = Objects.requireNonNull(maintenanceSchedules);
        this.memorySizeGb = Objects.requireNonNull(memorySizeGb);
        this.name = Objects.requireNonNull(name);
        this.nodes = Objects.requireNonNull(nodes);
        this.persistenceIamIdentity = Objects.requireNonNull(persistenceIamIdentity);
        this.port = Objects.requireNonNull(port);
        this.project = project;
        this.readEndpoint = Objects.requireNonNull(readEndpoint);
        this.readEndpointPort = Objects.requireNonNull(readEndpointPort);
        this.readReplicasMode = Objects.requireNonNull(readReplicasMode);
        this.redisConfigs = Objects.requireNonNull(redisConfigs);
        this.redisVersion = Objects.requireNonNull(redisVersion);
        this.region = region;
        this.replicaCount = Objects.requireNonNull(replicaCount);
        this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
        this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
        this.tier = Objects.requireNonNull(tier);
        this.transitEncryptionMode = Objects.requireNonNull(transitEncryptionMode);
    }

    public String getAlternativeLocationId() {
        return this.alternativeLocationId;
    }
    public Boolean getAuthEnabled() {
        return this.authEnabled;
    }
    public String getAuthString() {
        return this.authString;
    }
    public String getAuthorizedNetwork() {
        return this.authorizedNetwork;
    }
    public String getConnectMode() {
        return this.connectMode;
    }
    public String getCreateTime() {
        return this.createTime;
    }
    public String getCurrentLocationId() {
        return this.currentLocationId;
    }
    public String getDisplayName() {
        return this.displayName;
    }
    public String getHost() {
        return this.host;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    public String getId() {
        return this.id;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public String getLocationId() {
        return this.locationId;
    }
    public List<GetInstanceMaintenancePolicy> getMaintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetInstanceMaintenanceSchedule> getMaintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    public Integer getMemorySizeGb() {
        return this.memorySizeGb;
    }
    public String getName() {
        return this.name;
    }
    public List<GetInstanceNode> getNodes() {
        return this.nodes;
    }
    public String getPersistenceIamIdentity() {
        return this.persistenceIamIdentity;
    }
    public Integer getPort() {
        return this.port;
    }
    public Optional<String> getProject() {
        return Optional.ofNullable(this.project);
    }
    public String getReadEndpoint() {
        return this.readEndpoint;
    }
    public Integer getReadEndpointPort() {
        return this.readEndpointPort;
    }
    public String getReadReplicasMode() {
        return this.readReplicasMode;
    }
    public Map<String,String> getRedisConfigs() {
        return this.redisConfigs;
    }
    public String getRedisVersion() {
        return this.redisVersion;
    }
    public Optional<String> getRegion() {
        return Optional.ofNullable(this.region);
    }
    public Integer getReplicaCount() {
        return this.replicaCount;
    }
    public String getReservedIpRange() {
        return this.reservedIpRange;
    }
    public List<GetInstanceServerCaCert> getServerCaCerts() {
        return this.serverCaCerts;
    }
    public String getTier() {
        return this.tier;
    }
    public String getTransitEncryptionMode() {
        return this.transitEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alternativeLocationId;
        private Boolean authEnabled;
        private String authString;
        private String authorizedNetwork;
        private String connectMode;
        private String createTime;
        private String currentLocationId;
        private String displayName;
        private String host;
        private String id;
        private Map<String,String> labels;
        private String locationId;
        private List<GetInstanceMaintenancePolicy> maintenancePolicies;
        private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
        private Integer memorySizeGb;
        private String name;
        private List<GetInstanceNode> nodes;
        private String persistenceIamIdentity;
        private Integer port;
        private @Nullable String project;
        private String readEndpoint;
        private Integer readEndpointPort;
        private String readReplicasMode;
        private Map<String,String> redisConfigs;
        private String redisVersion;
        private @Nullable String region;
        private Integer replicaCount;
        private String reservedIpRange;
        private List<GetInstanceServerCaCert> serverCaCerts;
        private String tier;
        private String transitEncryptionMode;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeLocationId = defaults.alternativeLocationId;
    	      this.authEnabled = defaults.authEnabled;
    	      this.authString = defaults.authString;
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.connectMode = defaults.connectMode;
    	      this.createTime = defaults.createTime;
    	      this.currentLocationId = defaults.currentLocationId;
    	      this.displayName = defaults.displayName;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.locationId = defaults.locationId;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.maintenanceSchedules = defaults.maintenanceSchedules;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.name = defaults.name;
    	      this.nodes = defaults.nodes;
    	      this.persistenceIamIdentity = defaults.persistenceIamIdentity;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.readEndpoint = defaults.readEndpoint;
    	      this.readEndpointPort = defaults.readEndpointPort;
    	      this.readReplicasMode = defaults.readReplicasMode;
    	      this.redisConfigs = defaults.redisConfigs;
    	      this.redisVersion = defaults.redisVersion;
    	      this.region = defaults.region;
    	      this.replicaCount = defaults.replicaCount;
    	      this.reservedIpRange = defaults.reservedIpRange;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.tier = defaults.tier;
    	      this.transitEncryptionMode = defaults.transitEncryptionMode;
        }

        public Builder setAlternativeLocationId(String alternativeLocationId) {
            this.alternativeLocationId = Objects.requireNonNull(alternativeLocationId);
            return this;
        }

        public Builder setAuthEnabled(Boolean authEnabled) {
            this.authEnabled = Objects.requireNonNull(authEnabled);
            return this;
        }

        public Builder setAuthString(String authString) {
            this.authString = Objects.requireNonNull(authString);
            return this;
        }

        public Builder setAuthorizedNetwork(String authorizedNetwork) {
            this.authorizedNetwork = Objects.requireNonNull(authorizedNetwork);
            return this;
        }

        public Builder setConnectMode(String connectMode) {
            this.connectMode = Objects.requireNonNull(connectMode);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCurrentLocationId(String currentLocationId) {
            this.currentLocationId = Objects.requireNonNull(currentLocationId);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setHost(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLocationId(String locationId) {
            this.locationId = Objects.requireNonNull(locationId);
            return this;
        }

        public Builder setMaintenancePolicies(List<GetInstanceMaintenancePolicy> maintenancePolicies) {
            this.maintenancePolicies = Objects.requireNonNull(maintenancePolicies);
            return this;
        }

        public Builder setMaintenanceSchedules(List<GetInstanceMaintenanceSchedule> maintenanceSchedules) {
            this.maintenanceSchedules = Objects.requireNonNull(maintenanceSchedules);
            return this;
        }

        public Builder setMemorySizeGb(Integer memorySizeGb) {
            this.memorySizeGb = Objects.requireNonNull(memorySizeGb);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNodes(List<GetInstanceNode> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }

        public Builder setPersistenceIamIdentity(String persistenceIamIdentity) {
            this.persistenceIamIdentity = Objects.requireNonNull(persistenceIamIdentity);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = project;
            return this;
        }

        public Builder setReadEndpoint(String readEndpoint) {
            this.readEndpoint = Objects.requireNonNull(readEndpoint);
            return this;
        }

        public Builder setReadEndpointPort(Integer readEndpointPort) {
            this.readEndpointPort = Objects.requireNonNull(readEndpointPort);
            return this;
        }

        public Builder setReadReplicasMode(String readReplicasMode) {
            this.readReplicasMode = Objects.requireNonNull(readReplicasMode);
            return this;
        }

        public Builder setRedisConfigs(Map<String,String> redisConfigs) {
            this.redisConfigs = Objects.requireNonNull(redisConfigs);
            return this;
        }

        public Builder setRedisVersion(String redisVersion) {
            this.redisVersion = Objects.requireNonNull(redisVersion);
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = region;
            return this;
        }

        public Builder setReplicaCount(Integer replicaCount) {
            this.replicaCount = Objects.requireNonNull(replicaCount);
            return this;
        }

        public Builder setReservedIpRange(String reservedIpRange) {
            this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
            return this;
        }

        public Builder setServerCaCerts(List<GetInstanceServerCaCert> serverCaCerts) {
            this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
            return this;
        }

        public Builder setTier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }

        public Builder setTransitEncryptionMode(String transitEncryptionMode) {
            this.transitEncryptionMode = Objects.requireNonNull(transitEncryptionMode);
            return this;
        }

        public GetInstanceResult build() {
            return new GetInstanceResult(alternativeLocationId, authEnabled, authString, authorizedNetwork, connectMode, createTime, currentLocationId, displayName, host, id, labels, locationId, maintenancePolicies, maintenanceSchedules, memorySizeGb, name, nodes, persistenceIamIdentity, port, project, readEndpoint, readEndpointPort, readReplicasMode, redisConfigs, redisVersion, region, replicaCount, reservedIpRange, serverCaCerts, tier, transitEncryptionMode);
        }
    }
}
