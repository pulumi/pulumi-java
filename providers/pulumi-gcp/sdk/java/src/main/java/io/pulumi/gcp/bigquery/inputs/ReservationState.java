// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReservationState extends io.pulumi.resources.ResourceArgs {

    public static final ReservationState Empty = new ReservationState();

    /**
     * If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    @InputImport(name="ignoreIdleSlots")
      private final @Nullable Output<Boolean> ignoreIdleSlots;

    public Output<Boolean> getIgnoreIdleSlots() {
        return this.ignoreIdleSlots == null ? Output.empty() : this.ignoreIdleSlots;
    }

    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    @InputImport(name="slotCapacity")
      private final @Nullable Output<Integer> slotCapacity;

    public Output<Integer> getSlotCapacity() {
        return this.slotCapacity == null ? Output.empty() : this.slotCapacity;
    }

    public ReservationState(
        @Nullable Output<Boolean> ignoreIdleSlots,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<Integer> slotCapacity) {
        this.ignoreIdleSlots = ignoreIdleSlots;
        this.location = location;
        this.name = name;
        this.project = project;
        this.slotCapacity = slotCapacity;
    }

    private ReservationState() {
        this.ignoreIdleSlots = Output.empty();
        this.location = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.slotCapacity = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReservationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> ignoreIdleSlots;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<Integer> slotCapacity;

        public Builder() {
    	      // Empty
        }

        public Builder(ReservationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreIdleSlots = defaults.ignoreIdleSlots;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.slotCapacity = defaults.slotCapacity;
        }

        public Builder ignoreIdleSlots(@Nullable Output<Boolean> ignoreIdleSlots) {
            this.ignoreIdleSlots = ignoreIdleSlots;
            return this;
        }

        public Builder ignoreIdleSlots(@Nullable Boolean ignoreIdleSlots) {
            this.ignoreIdleSlots = Output.ofNullable(ignoreIdleSlots);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder slotCapacity(@Nullable Output<Integer> slotCapacity) {
            this.slotCapacity = slotCapacity;
            return this;
        }

        public Builder slotCapacity(@Nullable Integer slotCapacity) {
            this.slotCapacity = Output.ofNullable(slotCapacity);
            return this;
        }
        public ReservationState build() {
            return new ReservationState(ignoreIdleSlots, location, name, project, slotCapacity);
        }
    }
}
