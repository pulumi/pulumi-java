// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@OutputCustomType
public final class FirewallDeny {
    /**
     * An optional list of ports to which this rule applies. This field
     * is only applicable for UDP or TCP protocol. Each entry must be
     * either an integer or a range. If not specified, this rule
     * applies to connections through any port.
     * Example inputs include: ["22"], ["80","443"], and
     * ["12345-12349"].
     * 
     */
    private final @Nullable List<String> ports;
    /**
     * The IP protocol to which this rule applies. The protocol type is
     * required when creating a firewall rule. This value can either be
     * one of the following well known protocol strings (tcp, udp,
     * icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
     * 
     */
    private final String protocol;

    @OutputCustomType.Constructor({"ports","protocol"})
    private FirewallDeny(
        @Nullable List<String> ports,
        String protocol) {
        this.ports = ports;
        this.protocol = protocol;
    }

    /**
     * An optional list of ports to which this rule applies. This field
     * is only applicable for UDP or TCP protocol. Each entry must be
     * either an integer or a range. If not specified, this rule
     * applies to connections through any port.
     * Example inputs include: ["22"], ["80","443"], and
     * ["12345-12349"].
     * 
    */
    public List<String> getPorts() {
        return this.ports == null ? List.of() : this.ports;
    }
    /**
     * The IP protocol to which this rule applies. The protocol type is
     * required when creating a firewall rule. This value can either be
     * one of the following well known protocol strings (tcp, udp,
     * icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
     * 
    */
    public String getProtocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallDeny defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> ports;
        private String protocol;

        public Builder() {
    	      // Empty
        }

        public Builder(FirewallDeny defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ports = defaults.ports;
    	      this.protocol = defaults.protocol;
        }

        public Builder setPorts(@Nullable List<String> ports) {
            this.ports = ports;
            return this;
        }

        public Builder setProtocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public FirewallDeny build() {
            return new FirewallDeny(ports, protocol);
        }
    }
}
