// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudrun;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.cloudrun.inputs.ServiceMetadataArgs;
import io.pulumi.gcp.cloudrun.inputs.ServiceTemplateArgs;
import io.pulumi.gcp.cloudrun.inputs.ServiceTrafficArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     * 
     */
    @InputImport(name="autogenerateRevisionName")
      private final @Nullable Input<Boolean> autogenerateRevisionName;

    public Input<Boolean> getAutogenerateRevisionName() {
        return this.autogenerateRevisionName == null ? Input.empty() : this.autogenerateRevisionName;
    }

    /**
     * The location of the cloud run instance. eg us-central1
     * 
     */
    @InputImport(name="location", required=true)
      private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    /**
     * Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     * 
     */
    @InputImport(name="metadata")
      private final @Nullable Input<ServiceMetadataArgs> metadata;

    public Input<ServiceMetadataArgs> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * Volume's name.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn't otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     * 
     */
    @InputImport(name="template")
      private final @Nullable Input<ServiceTemplateArgs> template;

    public Input<ServiceTemplateArgs> getTemplate() {
        return this.template == null ? Input.empty() : this.template;
    }

    /**
     * Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     * 
     */
    @InputImport(name="traffics")
      private final @Nullable Input<List<ServiceTrafficArgs>> traffics;

    public Input<List<ServiceTrafficArgs>> getTraffics() {
        return this.traffics == null ? Input.empty() : this.traffics;
    }

    public ServiceArgs(
        @Nullable Input<Boolean> autogenerateRevisionName,
        Input<String> location,
        @Nullable Input<ServiceMetadataArgs> metadata,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<ServiceTemplateArgs> template,
        @Nullable Input<List<ServiceTrafficArgs>> traffics) {
        this.autogenerateRevisionName = autogenerateRevisionName;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.metadata = metadata;
        this.name = name;
        this.project = project;
        this.template = template;
        this.traffics = traffics;
    }

    private ServiceArgs() {
        this.autogenerateRevisionName = Input.empty();
        this.location = Input.empty();
        this.metadata = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.template = Input.empty();
        this.traffics = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> autogenerateRevisionName;
        private Input<String> location;
        private @Nullable Input<ServiceMetadataArgs> metadata;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<ServiceTemplateArgs> template;
        private @Nullable Input<List<ServiceTrafficArgs>> traffics;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autogenerateRevisionName = defaults.autogenerateRevisionName;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.template = defaults.template;
    	      this.traffics = defaults.traffics;
        }

        public Builder autogenerateRevisionName(@Nullable Input<Boolean> autogenerateRevisionName) {
            this.autogenerateRevisionName = autogenerateRevisionName;
            return this;
        }

        public Builder autogenerateRevisionName(@Nullable Boolean autogenerateRevisionName) {
            this.autogenerateRevisionName = Input.ofNullable(autogenerateRevisionName);
            return this;
        }

        public Builder location(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder location(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder metadata(@Nullable Input<ServiceMetadataArgs> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(@Nullable ServiceMetadataArgs metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder template(@Nullable Input<ServiceTemplateArgs> template) {
            this.template = template;
            return this;
        }

        public Builder template(@Nullable ServiceTemplateArgs template) {
            this.template = Input.ofNullable(template);
            return this;
        }

        public Builder traffics(@Nullable Input<List<ServiceTrafficArgs>> traffics) {
            this.traffics = traffics;
            return this;
        }

        public Builder traffics(@Nullable List<ServiceTrafficArgs> traffics) {
            this.traffics = Input.ofNullable(traffics);
            return this;
        }
        public ServiceArgs build() {
            return new ServiceArgs(autogenerateRevisionName, location, metadata, name, project, template, traffics);
        }
    }
}
