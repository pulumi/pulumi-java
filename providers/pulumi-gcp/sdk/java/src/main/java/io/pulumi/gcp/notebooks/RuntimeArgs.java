// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.notebooks;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.notebooks.inputs.RuntimeAccessConfigArgs;
import io.pulumi.gcp.notebooks.inputs.RuntimeSoftwareConfigArgs;
import io.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RuntimeArgs extends io.pulumi.resources.ResourceArgs {

    public static final RuntimeArgs Empty = new RuntimeArgs();

    /**
     * The config settings for accessing runtime.
     * Structure is documented below.
     * 
     */
    @InputImport(name="accessConfig")
      private final @Nullable Input<RuntimeAccessConfigArgs> accessConfig;

    public Input<RuntimeAccessConfigArgs> getAccessConfig() {
        return this.accessConfig == null ? Input.empty() : this.accessConfig;
    }

    /**
     * A reference to the zone where the machine resides.
     * 
     */
    @InputImport(name="location", required=true)
      private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    /**
     * The name specified for the Notebook instance.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The config settings for software inside the runtime.
     * Structure is documented below.
     * 
     */
    @InputImport(name="softwareConfig")
      private final @Nullable Input<RuntimeSoftwareConfigArgs> softwareConfig;

    public Input<RuntimeSoftwareConfigArgs> getSoftwareConfig() {
        return this.softwareConfig == null ? Input.empty() : this.softwareConfig;
    }

    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     * Structure is documented below.
     * 
     */
    @InputImport(name="virtualMachine")
      private final @Nullable Input<RuntimeVirtualMachineArgs> virtualMachine;

    public Input<RuntimeVirtualMachineArgs> getVirtualMachine() {
        return this.virtualMachine == null ? Input.empty() : this.virtualMachine;
    }

    public RuntimeArgs(
        @Nullable Input<RuntimeAccessConfigArgs> accessConfig,
        Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<RuntimeSoftwareConfigArgs> softwareConfig,
        @Nullable Input<RuntimeVirtualMachineArgs> virtualMachine) {
        this.accessConfig = accessConfig;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.project = project;
        this.softwareConfig = softwareConfig;
        this.virtualMachine = virtualMachine;
    }

    private RuntimeArgs() {
        this.accessConfig = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.softwareConfig = Input.empty();
        this.virtualMachine = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuntimeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RuntimeAccessConfigArgs> accessConfig;
        private Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<RuntimeSoftwareConfigArgs> softwareConfig;
        private @Nullable Input<RuntimeVirtualMachineArgs> virtualMachine;

        public Builder() {
    	      // Empty
        }

        public Builder(RuntimeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfig = defaults.accessConfig;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.softwareConfig = defaults.softwareConfig;
    	      this.virtualMachine = defaults.virtualMachine;
        }

        public Builder accessConfig(@Nullable Input<RuntimeAccessConfigArgs> accessConfig) {
            this.accessConfig = accessConfig;
            return this;
        }

        public Builder accessConfig(@Nullable RuntimeAccessConfigArgs accessConfig) {
            this.accessConfig = Input.ofNullable(accessConfig);
            return this;
        }

        public Builder location(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder location(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder softwareConfig(@Nullable Input<RuntimeSoftwareConfigArgs> softwareConfig) {
            this.softwareConfig = softwareConfig;
            return this;
        }

        public Builder softwareConfig(@Nullable RuntimeSoftwareConfigArgs softwareConfig) {
            this.softwareConfig = Input.ofNullable(softwareConfig);
            return this;
        }

        public Builder virtualMachine(@Nullable Input<RuntimeVirtualMachineArgs> virtualMachine) {
            this.virtualMachine = virtualMachine;
            return this;
        }

        public Builder virtualMachine(@Nullable RuntimeVirtualMachineArgs virtualMachine) {
            this.virtualMachine = Input.ofNullable(virtualMachine);
            return this;
        }
        public RuntimeArgs build() {
            return new RuntimeArgs(accessConfig, location, name, project, softwareConfig, virtualMachine);
        }
    }
}
