// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.containeranalysis;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.containeranalysis.inputs.NoteAttestationAuthorityArgs;
import io.pulumi.gcp.containeranalysis.inputs.NoteRelatedUrlArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NoteArgs extends io.pulumi.resources.ResourceArgs {

    public static final NoteArgs Empty = new NoteArgs();

    /**
     * Note kind that represents a logical attestation "role" or "authority".
     * For example, an organization might have one AttestationAuthority for
     * "QA" and one for "build". This Note is intended to act strictly as a
     * grouping mechanism for the attached Occurrences (Attestations). This
     * grouping mechanism also provides a security boundary, since IAM ACLs
     * gate the ability for a principle to attach an Occurrence to a given
     * Note. It also provides a single point of lookup to find all attached
     * Attestation Occurrences, even if they don't all live in the same
     * project.
     * Structure is documented below.
     * 
     */
    @InputImport(name="attestationAuthority", required=true)
    private final Input<NoteAttestationAuthorityArgs> attestationAuthority;

    public Input<NoteAttestationAuthorityArgs> getAttestationAuthority() {
        return this.attestationAuthority;
    }

    /**
     * Time of expiration for this note. Leave empty if note does not expire.
     * 
     */
    @InputImport(name="expirationTime")
    private final @Nullable Input<String> expirationTime;

    public Input<String> getExpirationTime() {
        return this.expirationTime == null ? Input.empty() : this.expirationTime;
    }

    /**
     * A detailed description of the note
     * 
     */
    @InputImport(name="longDescription")
    private final @Nullable Input<String> longDescription;

    public Input<String> getLongDescription() {
        return this.longDescription == null ? Input.empty() : this.longDescription;
    }

    /**
     * The name of the note.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Names of other notes related to this note.
     * 
     */
    @InputImport(name="relatedNoteNames")
    private final @Nullable Input<List<String>> relatedNoteNames;

    public Input<List<String>> getRelatedNoteNames() {
        return this.relatedNoteNames == null ? Input.empty() : this.relatedNoteNames;
    }

    /**
     * URLs associated with this note and related metadata.
     * Structure is documented below.
     * 
     */
    @InputImport(name="relatedUrls")
    private final @Nullable Input<List<NoteRelatedUrlArgs>> relatedUrls;

    public Input<List<NoteRelatedUrlArgs>> getRelatedUrls() {
        return this.relatedUrls == null ? Input.empty() : this.relatedUrls;
    }

    /**
     * A one sentence description of the note.
     * 
     */
    @InputImport(name="shortDescription")
    private final @Nullable Input<String> shortDescription;

    public Input<String> getShortDescription() {
        return this.shortDescription == null ? Input.empty() : this.shortDescription;
    }

    public NoteArgs(
        Input<NoteAttestationAuthorityArgs> attestationAuthority,
        @Nullable Input<String> expirationTime,
        @Nullable Input<String> longDescription,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<List<String>> relatedNoteNames,
        @Nullable Input<List<NoteRelatedUrlArgs>> relatedUrls,
        @Nullable Input<String> shortDescription) {
        this.attestationAuthority = Objects.requireNonNull(attestationAuthority, "expected parameter 'attestationAuthority' to be non-null");
        this.expirationTime = expirationTime;
        this.longDescription = longDescription;
        this.name = name;
        this.project = project;
        this.relatedNoteNames = relatedNoteNames;
        this.relatedUrls = relatedUrls;
        this.shortDescription = shortDescription;
    }

    private NoteArgs() {
        this.attestationAuthority = Input.empty();
        this.expirationTime = Input.empty();
        this.longDescription = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.relatedNoteNames = Input.empty();
        this.relatedUrls = Input.empty();
        this.shortDescription = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<NoteAttestationAuthorityArgs> attestationAuthority;
        private @Nullable Input<String> expirationTime;
        private @Nullable Input<String> longDescription;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<List<String>> relatedNoteNames;
        private @Nullable Input<List<NoteRelatedUrlArgs>> relatedUrls;
        private @Nullable Input<String> shortDescription;

        public Builder() {
    	      // Empty
        }

        public Builder(NoteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestationAuthority = defaults.attestationAuthority;
    	      this.expirationTime = defaults.expirationTime;
    	      this.longDescription = defaults.longDescription;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.relatedNoteNames = defaults.relatedNoteNames;
    	      this.relatedUrls = defaults.relatedUrls;
    	      this.shortDescription = defaults.shortDescription;
        }

        public Builder setAttestationAuthority(Input<NoteAttestationAuthorityArgs> attestationAuthority) {
            this.attestationAuthority = Objects.requireNonNull(attestationAuthority);
            return this;
        }

        public Builder setAttestationAuthority(NoteAttestationAuthorityArgs attestationAuthority) {
            this.attestationAuthority = Input.of(Objects.requireNonNull(attestationAuthority));
            return this;
        }

        public Builder setExpirationTime(@Nullable Input<String> expirationTime) {
            this.expirationTime = expirationTime;
            return this;
        }

        public Builder setExpirationTime(@Nullable String expirationTime) {
            this.expirationTime = Input.ofNullable(expirationTime);
            return this;
        }

        public Builder setLongDescription(@Nullable Input<String> longDescription) {
            this.longDescription = longDescription;
            return this;
        }

        public Builder setLongDescription(@Nullable String longDescription) {
            this.longDescription = Input.ofNullable(longDescription);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRelatedNoteNames(@Nullable Input<List<String>> relatedNoteNames) {
            this.relatedNoteNames = relatedNoteNames;
            return this;
        }

        public Builder setRelatedNoteNames(@Nullable List<String> relatedNoteNames) {
            this.relatedNoteNames = Input.ofNullable(relatedNoteNames);
            return this;
        }

        public Builder setRelatedUrls(@Nullable Input<List<NoteRelatedUrlArgs>> relatedUrls) {
            this.relatedUrls = relatedUrls;
            return this;
        }

        public Builder setRelatedUrls(@Nullable List<NoteRelatedUrlArgs> relatedUrls) {
            this.relatedUrls = Input.ofNullable(relatedUrls);
            return this;
        }

        public Builder setShortDescription(@Nullable Input<String> shortDescription) {
            this.shortDescription = shortDescription;
            return this;
        }

        public Builder setShortDescription(@Nullable String shortDescription) {
            this.shortDescription = Input.ofNullable(shortDescription);
            return this;
        }

        public NoteArgs build() {
            return new NoteArgs(attestationAuthority, expirationTime, longDescription, name, project, relatedNoteNames, relatedUrls, shortDescription);
        }
    }
}
