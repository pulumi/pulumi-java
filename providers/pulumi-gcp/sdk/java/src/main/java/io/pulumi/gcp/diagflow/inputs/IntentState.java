// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.diagflow.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.diagflow.inputs.IntentFollowupIntentInfoGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IntentState extends io.pulumi.resources.ResourceArgs {

    public static final IntentState Empty = new IntentState();

    /**
     * The name of the action associated with the intent.
     * Note: The action name must not contain whitespaces.
     * 
     */
    @InputImport(name="action")
    private final @Nullable Input<String> action;

    public Input<String> getAction() {
        return this.action == null ? Input.empty() : this.action;
    }

    /**
     * The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED
     * (i.e. default platform).
     * Each value may be one of `FACEBOOK`, `SLACK`, `TELEGRAM`, `KIK`, `SKYPE`, `LINE`, `VIBER`, `ACTIONS_ON_GOOGLE`, and `GOOGLE_HANGOUTS`.
     * 
     */
    @InputImport(name="defaultResponsePlatforms")
    private final @Nullable Input<List<String>> defaultResponsePlatforms;

    public Input<List<String>> getDefaultResponsePlatforms() {
        return this.defaultResponsePlatforms == null ? Input.empty() : this.defaultResponsePlatforms;
    }

    /**
     * The name of this intent to be displayed on the console.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of
     * the contexts must be present in the active user session for an event to trigger this intent. See the
     * [events reference](https://cloud.google.com/dialogflow/docs/events-overview) for more details.
     * 
     */
    @InputImport(name="events")
    private final @Nullable Input<List<String>> events;

    public Input<List<String>> getEvents() {
        return this.events == null ? Input.empty() : this.events;
    }

    /**
     * Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only
     * in the output.
     * 
     */
    @InputImport(name="followupIntentInfos")
    private final @Nullable Input<List<IntentFollowupIntentInfoGetArgs>> followupIntentInfos;

    public Input<List<IntentFollowupIntentInfoGetArgs>> getFollowupIntentInfos() {
        return this.followupIntentInfos == null ? Input.empty() : this.followupIntentInfos;
    }

    /**
     * The list of context names required for this intent to be triggered.
     * Format: projects/<Project ID>/agent/sessions/-/contexts/<Context ID>.
     * 
     */
    @InputImport(name="inputContextNames")
    private final @Nullable Input<List<String>> inputContextNames;

    public Input<List<String>> getInputContextNames() {
        return this.inputContextNames == null ? Input.empty() : this.inputContextNames;
    }

    /**
     * Indicates whether this is a fallback intent.
     * 
     */
    @InputImport(name="isFallback")
    private final @Nullable Input<Boolean> isFallback;

    public Input<Boolean> getIsFallback() {
        return this.isFallback == null ? Input.empty() : this.isFallback;
    }

    /**
     * Indicates whether Machine Learning is disabled for the intent.
     * Note: If mlDisabled setting is set to true, then this intent is not taken into account during inference in ML
     * ONLY match mode. Also, auto-markup in the UI is turned off.
     * 
     */
    @InputImport(name="mlDisabled")
    private final @Nullable Input<Boolean> mlDisabled;

    public Input<Boolean> getMlDisabled() {
        return this.mlDisabled == null ? Input.empty() : this.mlDisabled;
    }

    /**
     * The unique identifier of this intent. Format: projects/<Project ID>/agent/intents/<Intent ID>.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The unique identifier of the parent intent in the chain of followup intents.
     * Format: projects/<Project ID>/agent/intents/<Intent ID>.
     * 
     */
    @InputImport(name="parentFollowupIntentName")
    private final @Nullable Input<String> parentFollowupIntentName;

    public Input<String> getParentFollowupIntentName() {
        return this.parentFollowupIntentName == null ? Input.empty() : this.parentFollowupIntentName;
    }

    /**
     * The priority of this intent. Higher numbers represent higher priorities.
     * - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds
     *   to the Normal priority in the console.
     * - If the supplied value is negative, the intent is ignored in runtime detect intent requests.
     * 
     */
    @InputImport(name="priority")
    private final @Nullable Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Indicates whether to delete all contexts in the current session when this intent is matched.
     * 
     */
    @InputImport(name="resetContexts")
    private final @Nullable Input<Boolean> resetContexts;

    public Input<Boolean> getResetContexts() {
        return this.resetContexts == null ? Input.empty() : this.resetContexts;
    }

    /**
     * The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents
     * chain for this intent. Format: projects/<Project ID>/agent/intents/<Intent ID>.
     * 
     */
    @InputImport(name="rootFollowupIntentName")
    private final @Nullable Input<String> rootFollowupIntentName;

    public Input<String> getRootFollowupIntentName() {
        return this.rootFollowupIntentName == null ? Input.empty() : this.rootFollowupIntentName;
    }

    /**
     * Indicates whether webhooks are enabled for the intent.
     * * WEBHOOK_STATE_ENABLED: Webhook is enabled in the agent and in the intent.
     * * WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING: Webhook is enabled in the agent and in the intent. Also, each slot
     *   filling prompt is forwarded to the webhook.
     *   Possible values are `WEBHOOK_STATE_ENABLED` and `WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING`.
     * 
     */
    @InputImport(name="webhookState")
    private final @Nullable Input<String> webhookState;

    public Input<String> getWebhookState() {
        return this.webhookState == null ? Input.empty() : this.webhookState;
    }

    public IntentState(
        @Nullable Input<String> action,
        @Nullable Input<List<String>> defaultResponsePlatforms,
        @Nullable Input<String> displayName,
        @Nullable Input<List<String>> events,
        @Nullable Input<List<IntentFollowupIntentInfoGetArgs>> followupIntentInfos,
        @Nullable Input<List<String>> inputContextNames,
        @Nullable Input<Boolean> isFallback,
        @Nullable Input<Boolean> mlDisabled,
        @Nullable Input<String> name,
        @Nullable Input<String> parentFollowupIntentName,
        @Nullable Input<Integer> priority,
        @Nullable Input<String> project,
        @Nullable Input<Boolean> resetContexts,
        @Nullable Input<String> rootFollowupIntentName,
        @Nullable Input<String> webhookState) {
        this.action = action;
        this.defaultResponsePlatforms = defaultResponsePlatforms;
        this.displayName = displayName;
        this.events = events;
        this.followupIntentInfos = followupIntentInfos;
        this.inputContextNames = inputContextNames;
        this.isFallback = isFallback;
        this.mlDisabled = mlDisabled;
        this.name = name;
        this.parentFollowupIntentName = parentFollowupIntentName;
        this.priority = priority;
        this.project = project;
        this.resetContexts = resetContexts;
        this.rootFollowupIntentName = rootFollowupIntentName;
        this.webhookState = webhookState;
    }

    private IntentState() {
        this.action = Input.empty();
        this.defaultResponsePlatforms = Input.empty();
        this.displayName = Input.empty();
        this.events = Input.empty();
        this.followupIntentInfos = Input.empty();
        this.inputContextNames = Input.empty();
        this.isFallback = Input.empty();
        this.mlDisabled = Input.empty();
        this.name = Input.empty();
        this.parentFollowupIntentName = Input.empty();
        this.priority = Input.empty();
        this.project = Input.empty();
        this.resetContexts = Input.empty();
        this.rootFollowupIntentName = Input.empty();
        this.webhookState = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> action;
        private @Nullable Input<List<String>> defaultResponsePlatforms;
        private @Nullable Input<String> displayName;
        private @Nullable Input<List<String>> events;
        private @Nullable Input<List<IntentFollowupIntentInfoGetArgs>> followupIntentInfos;
        private @Nullable Input<List<String>> inputContextNames;
        private @Nullable Input<Boolean> isFallback;
        private @Nullable Input<Boolean> mlDisabled;
        private @Nullable Input<String> name;
        private @Nullable Input<String> parentFollowupIntentName;
        private @Nullable Input<Integer> priority;
        private @Nullable Input<String> project;
        private @Nullable Input<Boolean> resetContexts;
        private @Nullable Input<String> rootFollowupIntentName;
        private @Nullable Input<String> webhookState;

        public Builder() {
    	      // Empty
        }

        public Builder(IntentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.defaultResponsePlatforms = defaults.defaultResponsePlatforms;
    	      this.displayName = defaults.displayName;
    	      this.events = defaults.events;
    	      this.followupIntentInfos = defaults.followupIntentInfos;
    	      this.inputContextNames = defaults.inputContextNames;
    	      this.isFallback = defaults.isFallback;
    	      this.mlDisabled = defaults.mlDisabled;
    	      this.name = defaults.name;
    	      this.parentFollowupIntentName = defaults.parentFollowupIntentName;
    	      this.priority = defaults.priority;
    	      this.project = defaults.project;
    	      this.resetContexts = defaults.resetContexts;
    	      this.rootFollowupIntentName = defaults.rootFollowupIntentName;
    	      this.webhookState = defaults.webhookState;
        }

        public Builder setAction(@Nullable Input<String> action) {
            this.action = action;
            return this;
        }

        public Builder setAction(@Nullable String action) {
            this.action = Input.ofNullable(action);
            return this;
        }

        public Builder setDefaultResponsePlatforms(@Nullable Input<List<String>> defaultResponsePlatforms) {
            this.defaultResponsePlatforms = defaultResponsePlatforms;
            return this;
        }

        public Builder setDefaultResponsePlatforms(@Nullable List<String> defaultResponsePlatforms) {
            this.defaultResponsePlatforms = Input.ofNullable(defaultResponsePlatforms);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setEvents(@Nullable Input<List<String>> events) {
            this.events = events;
            return this;
        }

        public Builder setEvents(@Nullable List<String> events) {
            this.events = Input.ofNullable(events);
            return this;
        }

        public Builder setFollowupIntentInfos(@Nullable Input<List<IntentFollowupIntentInfoGetArgs>> followupIntentInfos) {
            this.followupIntentInfos = followupIntentInfos;
            return this;
        }

        public Builder setFollowupIntentInfos(@Nullable List<IntentFollowupIntentInfoGetArgs> followupIntentInfos) {
            this.followupIntentInfos = Input.ofNullable(followupIntentInfos);
            return this;
        }

        public Builder setInputContextNames(@Nullable Input<List<String>> inputContextNames) {
            this.inputContextNames = inputContextNames;
            return this;
        }

        public Builder setInputContextNames(@Nullable List<String> inputContextNames) {
            this.inputContextNames = Input.ofNullable(inputContextNames);
            return this;
        }

        public Builder setIsFallback(@Nullable Input<Boolean> isFallback) {
            this.isFallback = isFallback;
            return this;
        }

        public Builder setIsFallback(@Nullable Boolean isFallback) {
            this.isFallback = Input.ofNullable(isFallback);
            return this;
        }

        public Builder setMlDisabled(@Nullable Input<Boolean> mlDisabled) {
            this.mlDisabled = mlDisabled;
            return this;
        }

        public Builder setMlDisabled(@Nullable Boolean mlDisabled) {
            this.mlDisabled = Input.ofNullable(mlDisabled);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setParentFollowupIntentName(@Nullable Input<String> parentFollowupIntentName) {
            this.parentFollowupIntentName = parentFollowupIntentName;
            return this;
        }

        public Builder setParentFollowupIntentName(@Nullable String parentFollowupIntentName) {
            this.parentFollowupIntentName = Input.ofNullable(parentFollowupIntentName);
            return this;
        }

        public Builder setPriority(@Nullable Input<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder setPriority(@Nullable Integer priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setResetContexts(@Nullable Input<Boolean> resetContexts) {
            this.resetContexts = resetContexts;
            return this;
        }

        public Builder setResetContexts(@Nullable Boolean resetContexts) {
            this.resetContexts = Input.ofNullable(resetContexts);
            return this;
        }

        public Builder setRootFollowupIntentName(@Nullable Input<String> rootFollowupIntentName) {
            this.rootFollowupIntentName = rootFollowupIntentName;
            return this;
        }

        public Builder setRootFollowupIntentName(@Nullable String rootFollowupIntentName) {
            this.rootFollowupIntentName = Input.ofNullable(rootFollowupIntentName);
            return this;
        }

        public Builder setWebhookState(@Nullable Input<String> webhookState) {
            this.webhookState = webhookState;
            return this;
        }

        public Builder setWebhookState(@Nullable String webhookState) {
            this.webhookState = Input.ofNullable(webhookState);
            return this;
        }

        public IntentState build() {
            return new IntentState(action, defaultResponsePlatforms, displayName, events, followupIntentInfos, inputContextNames, isFallback, mlDisabled, name, parentFollowupIntentName, priority, project, resetContexts, rootFollowupIntentName, webhookState);
        }
    }
}
