// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.osconfig;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.osconfig.GuestPoliciesArgs;
import io.pulumi.gcp.osconfig.inputs.GuestPoliciesState;
import io.pulumi.gcp.osconfig.outputs.GuestPoliciesAssignment;
import io.pulumi.gcp.osconfig.outputs.GuestPoliciesPackage;
import io.pulumi.gcp.osconfig.outputs.GuestPoliciesPackageRepository;
import io.pulumi.gcp.osconfig.outputs.GuestPoliciesRecipe;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * An OS Config resource representing a guest configuration policy. These policies represent
 * the desired state for VM instance guest environments including packages to install or remove,
 * package repository configurations, and software to install.
 * 
 * To get more information about GuestPolicies, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/osconfig/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/os-config-management)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Os Config Guest Policies Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const myImage = gcp.compute.getImage({
 *     family: "debian-9",
 *     project: "debian-cloud",
 * });
 * const foobar = new gcp.compute.Instance("foobar", {
 *     machineType: "e2-medium",
 *     zone: "us-central1-a",
 *     canIpForward: false,
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 *     bootDisk: {
 *         initializeParams: {
 *             image: myImage.then(myImage => myImage.selfLink),
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     metadata: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const guestPolicies = new gcp.osconfig.GuestPolicies("guestPolicies", {
 *     guestPolicyId: "guest-policy",
 *     assignment: {
 *         instances: [foobar.id],
 *     },
 *     packages: [{
 *         name: "my-package",
 *         desiredState: "UPDATED",
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * my_image = gcp.compute.get_image(family="debian-9",
 *     project="debian-cloud")
 * foobar = gcp.compute.Instance("foobar",
 *     machine_type="e2-medium",
 *     zone="us-central1-a",
 *     can_ip_forward=False,
 *     tags=[
 *         "foo",
 *         "bar",
 *     ],
 *     boot_disk=gcp.compute.InstanceBootDiskArgs(
 *         initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
 *             image=my_image.self_link,
 *         ),
 *     ),
 *     network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
 *         network="default",
 *     )],
 *     metadata={
 *         "foo": "bar",
 *     },
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * guest_policies = gcp.osconfig.GuestPolicies("guestPolicies",
 *     guest_policy_id="guest-policy",
 *     assignment=gcp.osconfig.GuestPoliciesAssignmentArgs(
 *         instances=[foobar.id],
 *     ),
 *     packages=[gcp.osconfig.GuestPoliciesPackageArgs(
 *         name="my-package",
 *         desired_state="UPDATED",
 *     )],
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var myImage = Output.Create(Gcp.Compute.GetImage.InvokeAsync(new Gcp.Compute.GetImageArgs
 *         {
 *             Family = "debian-9",
 *             Project = "debian-cloud",
 *         }));
 *         var foobar = new Gcp.Compute.Instance("foobar", new Gcp.Compute.InstanceArgs
 *         {
 *             MachineType = "e2-medium",
 *             Zone = "us-central1-a",
 *             CanIpForward = false,
 *             Tags = 
 *             {
 *                 "foo",
 *                 "bar",
 *             },
 *             BootDisk = new Gcp.Compute.Inputs.InstanceBootDiskArgs
 *             {
 *                 InitializeParams = new Gcp.Compute.Inputs.InstanceBootDiskInitializeParamsArgs
 *                 {
 *                     Image = myImage.Apply(myImage => myImage.SelfLink),
 *                 },
 *             },
 *             NetworkInterfaces = 
 *             {
 *                 new Gcp.Compute.Inputs.InstanceNetworkInterfaceArgs
 *                 {
 *                     Network = "default",
 *                 },
 *             },
 *             Metadata = 
 *             {
 *                 { "foo", "bar" },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *         var guestPolicies = new Gcp.OsConfig.GuestPolicies("guestPolicies", new Gcp.OsConfig.GuestPoliciesArgs
 *         {
 *             GuestPolicyId = "guest-policy",
 *             Assignment = new Gcp.OsConfig.Inputs.GuestPoliciesAssignmentArgs
 *             {
 *                 Instances = 
 *                 {
 *                     foobar.Id,
 *                 },
 *             },
 *             Packages = 
 *             {
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesPackageArgs
 *                 {
 *                     Name = "my-package",
 *                     DesiredState = "UPDATED",
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/osconfig"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		opt0 := "debian-9"
 * 		opt1 := "debian-cloud"
 * 		myImage, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
 * 			Family:  &opt0,
 * 			Project: &opt1,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		foobar, err := compute.NewInstance(ctx, "foobar", &compute.InstanceArgs{
 * 			MachineType:  pulumi.String("e2-medium"),
 * 			Zone:         pulumi.String("us-central1-a"),
 * 			CanIpForward: pulumi.Bool(false),
 * 			Tags: pulumi.StringArray{
 * 				pulumi.String("foo"),
 * 				pulumi.String("bar"),
 * 			},
 * 			BootDisk: &compute.InstanceBootDiskArgs{
 * 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
 * 					Image: pulumi.String(myImage.SelfLink),
 * 				},
 * 			},
 * 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
 * 				&compute.InstanceNetworkInterfaceArgs{
 * 					Network: pulumi.String("default"),
 * 				},
 * 			},
 * 			Metadata: pulumi.StringMap{
 * 				"foo": pulumi.String("bar"),
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = osconfig.NewGuestPolicies(ctx, "guestPolicies", &osconfig.GuestPoliciesArgs{
 * 			GuestPolicyId: pulumi.String("guest-policy"),
 * 			Assignment: &osconfig.GuestPoliciesAssignmentArgs{
 * 				Instances: pulumi.StringArray{
 * 					foobar.ID(),
 * 				},
 * 			},
 * 			Packages: osconfig.GuestPoliciesPackageArray{
 * 				&osconfig.GuestPoliciesPackageArgs{
 * 					Name:         pulumi.String("my-package"),
 * 					DesiredState: pulumi.String("UPDATED"),
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Os Config Guest Policies Packages
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const guestPolicies = new gcp.osconfig.GuestPolicies("guestPolicies", {
 *     guestPolicyId: "guest-policy",
 *     assignment: {
 *         groupLabels: [
 *             {
 *                 labels: {
 *                     color: "red",
 *                     env: "test",
 *                 },
 *             },
 *             {
 *                 labels: {
 *                     color: "blue",
 *                     env: "test",
 *                 },
 *             },
 *         ],
 *     },
 *     packages: [
 *         {
 *             name: "my-package",
 *             desiredState: "INSTALLED",
 *         },
 *         {
 *             name: "bad-package-1",
 *             desiredState: "REMOVED",
 *         },
 *         {
 *             name: "bad-package-2",
 *             desiredState: "REMOVED",
 *             manager: "APT",
 *         },
 *     ],
 *     packageRepositories: [
 *         {
 *             apt: {
 *                 uri: "https://packages.cloud.google.com/apt",
 *                 archiveType: "DEB",
 *                 distribution: "cloud-sdk-stretch",
 *                 components: ["main"],
 *             },
 *         },
 *         {
 *             yum: {
 *                 id: "google-cloud-sdk",
 *                 displayName: "Google Cloud SDK",
 *                 baseUrl: "https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64",
 *                 gpgKeys: [
 *                     "https://packages.cloud.google.com/yum/doc/yum-key.gpg",
 *                     "https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
 *                 ],
 *             },
 *         },
 *     ],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * guest_policies = gcp.osconfig.GuestPolicies("guestPolicies",
 *     guest_policy_id="guest-policy",
 *     assignment=gcp.osconfig.GuestPoliciesAssignmentArgs(
 *         group_labels=[
 *             gcp.osconfig.GuestPoliciesAssignmentGroupLabelArgs(
 *                 labels={
 *                     "color": "red",
 *                     "env": "test",
 *                 },
 *             ),
 *             gcp.osconfig.GuestPoliciesAssignmentGroupLabelArgs(
 *                 labels={
 *                     "color": "blue",
 *                     "env": "test",
 *                 },
 *             ),
 *         ],
 *     ),
 *     packages=[
 *         gcp.osconfig.GuestPoliciesPackageArgs(
 *             name="my-package",
 *             desired_state="INSTALLED",
 *         ),
 *         gcp.osconfig.GuestPoliciesPackageArgs(
 *             name="bad-package-1",
 *             desired_state="REMOVED",
 *         ),
 *         gcp.osconfig.GuestPoliciesPackageArgs(
 *             name="bad-package-2",
 *             desired_state="REMOVED",
 *             manager="APT",
 *         ),
 *     ],
 *     package_repositories=[
 *         gcp.osconfig.GuestPoliciesPackageRepositoryArgs(
 *             apt=gcp.osconfig.GuestPoliciesPackageRepositoryAptArgs(
 *                 uri="https://packages.cloud.google.com/apt",
 *                 archive_type="DEB",
 *                 distribution="cloud-sdk-stretch",
 *                 components=["main"],
 *             ),
 *         ),
 *         gcp.osconfig.GuestPoliciesPackageRepositoryArgs(
 *             yum=gcp.osconfig.GuestPoliciesPackageRepositoryYumArgs(
 *                 id="google-cloud-sdk",
 *                 display_name="Google Cloud SDK",
 *                 base_url="https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64",
 *                 gpg_keys=[
 *                     "https://packages.cloud.google.com/yum/doc/yum-key.gpg",
 *                     "https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
 *                 ],
 *             ),
 *         ),
 *     ],
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var guestPolicies = new Gcp.OsConfig.GuestPolicies("guestPolicies", new Gcp.OsConfig.GuestPoliciesArgs
 *         {
 *             GuestPolicyId = "guest-policy",
 *             Assignment = new Gcp.OsConfig.Inputs.GuestPoliciesAssignmentArgs
 *             {
 *                 GroupLabels = 
 *                 {
 *                     new Gcp.OsConfig.Inputs.GuestPoliciesAssignmentGroupLabelArgs
 *                     {
 *                         Labels = 
 *                         {
 *                             { "color", "red" },
 *                             { "env", "test" },
 *                         },
 *                     },
 *                     new Gcp.OsConfig.Inputs.GuestPoliciesAssignmentGroupLabelArgs
 *                     {
 *                         Labels = 
 *                         {
 *                             { "color", "blue" },
 *                             { "env", "test" },
 *                         },
 *                     },
 *                 },
 *             },
 *             Packages = 
 *             {
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesPackageArgs
 *                 {
 *                     Name = "my-package",
 *                     DesiredState = "INSTALLED",
 *                 },
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesPackageArgs
 *                 {
 *                     Name = "bad-package-1",
 *                     DesiredState = "REMOVED",
 *                 },
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesPackageArgs
 *                 {
 *                     Name = "bad-package-2",
 *                     DesiredState = "REMOVED",
 *                     Manager = "APT",
 *                 },
 *             },
 *             PackageRepositories = 
 *             {
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesPackageRepositoryArgs
 *                 {
 *                     Apt = new Gcp.OsConfig.Inputs.GuestPoliciesPackageRepositoryAptArgs
 *                     {
 *                         Uri = "https://packages.cloud.google.com/apt",
 *                         ArchiveType = "DEB",
 *                         Distribution = "cloud-sdk-stretch",
 *                         Components = 
 *                         {
 *                             "main",
 *                         },
 *                     },
 *                 },
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesPackageRepositoryArgs
 *                 {
 *                     Yum = new Gcp.OsConfig.Inputs.GuestPoliciesPackageRepositoryYumArgs
 *                     {
 *                         Id = "google-cloud-sdk",
 *                         DisplayName = "Google Cloud SDK",
 *                         BaseUrl = "https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64",
 *                         GpgKeys = 
 *                         {
 *                             "https://packages.cloud.google.com/yum/doc/yum-key.gpg",
 *                             "https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
 *                         },
 *                     },
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/osconfig"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := osconfig.NewGuestPolicies(ctx, "guestPolicies", &osconfig.GuestPoliciesArgs{
 * 			GuestPolicyId: pulumi.String("guest-policy"),
 * 			Assignment: &osconfig.GuestPoliciesAssignmentArgs{
 * 				GroupLabels: osconfig.GuestPoliciesAssignmentGroupLabelArray{
 * 					&osconfig.GuestPoliciesAssignmentGroupLabelArgs{
 * 						Labels: pulumi.StringMap{
 * 							"color": pulumi.String("red"),
 * 							"env":   pulumi.String("test"),
 * 						},
 * 					},
 * 					&osconfig.GuestPoliciesAssignmentGroupLabelArgs{
 * 						Labels: pulumi.StringMap{
 * 							"color": pulumi.String("blue"),
 * 							"env":   pulumi.String("test"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Packages: osconfig.GuestPoliciesPackageArray{
 * 				&osconfig.GuestPoliciesPackageArgs{
 * 					Name:         pulumi.String("my-package"),
 * 					DesiredState: pulumi.String("INSTALLED"),
 * 				},
 * 				&osconfig.GuestPoliciesPackageArgs{
 * 					Name:         pulumi.String("bad-package-1"),
 * 					DesiredState: pulumi.String("REMOVED"),
 * 				},
 * 				&osconfig.GuestPoliciesPackageArgs{
 * 					Name:         pulumi.String("bad-package-2"),
 * 					DesiredState: pulumi.String("REMOVED"),
 * 					Manager:      pulumi.String("APT"),
 * 				},
 * 			},
 * 			PackageRepositories: osconfig.GuestPoliciesPackageRepositoryArray{
 * 				&osconfig.GuestPoliciesPackageRepositoryArgs{
 * 					Apt: &osconfig.GuestPoliciesPackageRepositoryAptArgs{
 * 						Uri:          pulumi.String("https://packages.cloud.google.com/apt"),
 * 						ArchiveType:  pulumi.String("DEB"),
 * 						Distribution: pulumi.String("cloud-sdk-stretch"),
 * 						Components: pulumi.StringArray{
 * 							pulumi.String("main"),
 * 						},
 * 					},
 * 				},
 * 				&osconfig.GuestPoliciesPackageRepositoryArgs{
 * 					Yum: &osconfig.GuestPoliciesPackageRepositoryYumArgs{
 * 						Id:          pulumi.String("google-cloud-sdk"),
 * 						DisplayName: pulumi.String("Google Cloud SDK"),
 * 						BaseUrl:     pulumi.String("https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64"),
 * 						GpgKeys: pulumi.StringArray{
 * 							pulumi.String("https://packages.cloud.google.com/yum/doc/yum-key.gpg"),
 * 							pulumi.String("https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Os Config Guest Policies Recipes
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const guestPolicies = new gcp.osconfig.GuestPolicies("guestPolicies", {
 *     guestPolicyId: "guest-policy",
 *     assignment: {
 *         zones: [
 *             "us-east1-b",
 *             "us-east1-d",
 *         ],
 *     },
 *     recipes: [{
 *         name: "guest-policy-recipe",
 *         desiredState: "INSTALLED",
 *         artifacts: [{
 *             id: "guest-policy-artifact-id",
 *             gcs: {
 *                 bucket: "my-bucket",
 *                 object: "executable.msi",
 *                 generation: 1546030865175603,
 *             },
 *         }],
 *         installSteps: [{
 *             msiInstallation: {
 *                 artifactId: "guest-policy-artifact-id",
 *             },
 *         }],
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * guest_policies = gcp.osconfig.GuestPolicies("guestPolicies",
 *     guest_policy_id="guest-policy",
 *     assignment=gcp.osconfig.GuestPoliciesAssignmentArgs(
 *         zones=[
 *             "us-east1-b",
 *             "us-east1-d",
 *         ],
 *     ),
 *     recipes=[gcp.osconfig.GuestPoliciesRecipeArgs(
 *         name="guest-policy-recipe",
 *         desired_state="INSTALLED",
 *         artifacts=[gcp.osconfig.GuestPoliciesRecipeArtifactArgs(
 *             id="guest-policy-artifact-id",
 *             gcs=gcp.osconfig.GuestPoliciesRecipeArtifactGcsArgs(
 *                 bucket="my-bucket",
 *                 object="executable.msi",
 *                 generation=1546030865175603,
 *             ),
 *         )],
 *         install_steps=[gcp.osconfig.GuestPoliciesRecipeInstallStepArgs(
 *             msi_installation=gcp.osconfig.GuestPoliciesRecipeInstallStepMsiInstallationArgs(
 *                 artifact_id="guest-policy-artifact-id",
 *             ),
 *         )],
 *     )],
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var guestPolicies = new Gcp.OsConfig.GuestPolicies("guestPolicies", new Gcp.OsConfig.GuestPoliciesArgs
 *         {
 *             GuestPolicyId = "guest-policy",
 *             Assignment = new Gcp.OsConfig.Inputs.GuestPoliciesAssignmentArgs
 *             {
 *                 Zones = 
 *                 {
 *                     "us-east1-b",
 *                     "us-east1-d",
 *                 },
 *             },
 *             Recipes = 
 *             {
 *                 new Gcp.OsConfig.Inputs.GuestPoliciesRecipeArgs
 *                 {
 *                     Name = "guest-policy-recipe",
 *                     DesiredState = "INSTALLED",
 *                     Artifacts = 
 *                     {
 *                         new Gcp.OsConfig.Inputs.GuestPoliciesRecipeArtifactArgs
 *                         {
 *                             Id = "guest-policy-artifact-id",
 *                             Gcs = new Gcp.OsConfig.Inputs.GuestPoliciesRecipeArtifactGcsArgs
 *                             {
 *                                 Bucket = "my-bucket",
 *                                 Object = "executable.msi",
 *                                 Generation = 1546030865175603,
 *                             },
 *                         },
 *                     },
 *                     InstallSteps = 
 *                     {
 *                         new Gcp.OsConfig.Inputs.GuestPoliciesRecipeInstallStepArgs
 *                         {
 *                             MsiInstallation = new Gcp.OsConfig.Inputs.GuestPoliciesRecipeInstallStepMsiInstallationArgs
 *                             {
 *                                 ArtifactId = "guest-policy-artifact-id",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/osconfig"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := osconfig.NewGuestPolicies(ctx, "guestPolicies", &osconfig.GuestPoliciesArgs{
 * 			GuestPolicyId: pulumi.String("guest-policy"),
 * 			Assignment: &osconfig.GuestPoliciesAssignmentArgs{
 * 				Zones: pulumi.StringArray{
 * 					pulumi.String("us-east1-b"),
 * 					pulumi.String("us-east1-d"),
 * 				},
 * 			},
 * 			Recipes: osconfig.GuestPoliciesRecipeArray{
 * 				&osconfig.GuestPoliciesRecipeArgs{
 * 					Name:         pulumi.String("guest-policy-recipe"),
 * 					DesiredState: pulumi.String("INSTALLED"),
 * 					Artifacts: osconfig.GuestPoliciesRecipeArtifactArray{
 * 						&osconfig.GuestPoliciesRecipeArtifactArgs{
 * 							Id: pulumi.String("guest-policy-artifact-id"),
 * 							Gcs: &osconfig.GuestPoliciesRecipeArtifactGcsArgs{
 * 								Bucket:     pulumi.String("my-bucket"),
 * 								Object:     pulumi.String("executable.msi"),
 * 								Generation: pulumi.Int(1546030865175603),
 * 							},
 * 						},
 * 					},
 * 					InstallSteps: osconfig.GuestPoliciesRecipeInstallStepArray{
 * 						&osconfig.GuestPoliciesRecipeInstallStepArgs{
 * 							MsiInstallation: &osconfig.GuestPoliciesRecipeInstallStepMsiInstallationArgs{
 * 								ArtifactId: pulumi.String("guest-policy-artifact-id"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * GuestPolicies can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:osconfig/guestPolicies:GuestPolicies default projects/{{project}}/guestPolicies/{{guest_policy_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:osconfig/guestPolicies:GuestPolicies default {{project}}/{{guest_policy_id}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:osconfig/guestPolicies:GuestPolicies default {{guest_policy_id}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:osconfig/guestPolicies:GuestPolicies")
public class GuestPolicies extends io.pulumi.resources.CustomResource {
    /**
     * Specifies the VM instances that are assigned to this policy. This allows you to target sets
     * or groups of VM instances by different parameters such as labels, names, OS, or zones.
     * If left empty, all VM instances underneath this policy are targeted.
     * At the same level in the resource hierarchy (that is within a project), the service prevents
     * the creation of multiple policies that conflict with each other.
     * For more information, see how the service
     * [handles assignment conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
     * Structure is documented below.
     * 
     */
    @Export(name="assignment", type=GuestPoliciesAssignment.class, parameters={})
    private Output<GuestPoliciesAssignment> assignment;

    /**
     * @return Specifies the VM instances that are assigned to this policy. This allows you to target sets
     * or groups of VM instances by different parameters such as labels, names, OS, or zones.
     * If left empty, all VM instances underneath this policy are targeted.
     * At the same level in the resource hierarchy (that is within a project), the service prevents
     * the creation of multiple policies that conflict with each other.
     * For more information, see how the service
     * [handles assignment conflicts](https://cloud.google.com/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
     * Structure is documented below.
     * 
     */
    public Output<GuestPoliciesAssignment> getAssignment() {
        return this.assignment;
    }
    /**
     * Time this guest policy was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Time this guest policy was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * Description of the guest policy. Length of the description is limited to 1024 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the guest policy. Length of the description is limited to 1024 characters.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The etag for this guest policy. If this is provided on update, it must match the server's etag.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return The etag for this guest policy. If this is provided on update, it must match the server's etag.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The logical name of the guest policy in the project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     * 
     */
    @Export(name="guestPolicyId", type=String.class, parameters={})
    private Output<String> guestPolicyId;

    /**
     * @return The logical name of the guest policy in the project with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     * 
     */
    public Output<String> getGuestPolicyId() {
        return this.guestPolicyId;
    }
    /**
     * Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
     * Names are also used to identify resources which helps to determine whether guest policies have conflicts.
     * This means that requests to create multiple recipes with the same name and version are rejected since they
     * could potentially have conflicting assignments.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
     * Names are also used to identify resources which helps to determine whether guest policies have conflicts.
     * This means that requests to create multiple recipes with the same name and version are rejected since they
     * could potentially have conflicting assignments.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A list of package repositories to configure on the VM instance.
     * This is done before any other configs are applied so they can use these repos.
     * Package repositories are only configured if the corresponding package manager(s) are available.
     * Structure is documented below.
     * 
     */
    @Export(name="packageRepositories", type=List.class, parameters={GuestPoliciesPackageRepository.class})
    private Output</* @Nullable */ List<GuestPoliciesPackageRepository>> packageRepositories;

    /**
     * @return A list of package repositories to configure on the VM instance.
     * This is done before any other configs are applied so they can use these repos.
     * Package repositories are only configured if the corresponding package manager(s) are available.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<GuestPoliciesPackageRepository>> getPackageRepositories() {
        return this.packageRepositories;
    }
    /**
     * The software packages to be managed by this policy.
     * Structure is documented below.
     * 
     */
    @Export(name="packages", type=List.class, parameters={GuestPoliciesPackage.class})
    private Output</* @Nullable */ List<GuestPoliciesPackage>> packages;

    /**
     * @return The software packages to be managed by this policy.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<GuestPoliciesPackage>> getPackages() {
        return this.packages;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * A list of Recipes to install on the VM instance.
     * Structure is documented below.
     * 
     */
    @Export(name="recipes", type=List.class, parameters={GuestPoliciesRecipe.class})
    private Output</* @Nullable */ List<GuestPoliciesRecipe>> recipes;

    /**
     * @return A list of Recipes to install on the VM instance.
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ List<GuestPoliciesRecipe>> getRecipes() {
        return this.recipes;
    }
    /**
     * Last time this guest policy was updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Last time this guest policy was updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GuestPolicies(String name) {
        this(name, GuestPoliciesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GuestPolicies(String name, GuestPoliciesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GuestPolicies(String name, GuestPoliciesArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/guestPolicies:GuestPolicies", name, args == null ? GuestPoliciesArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private GuestPolicies(String name, Output<String> id, @Nullable GuestPoliciesState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/guestPolicies:GuestPolicies", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GuestPolicies get(String name, Output<String> id, @Nullable GuestPoliciesState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new GuestPolicies(name, id, state, options);
    }
}
