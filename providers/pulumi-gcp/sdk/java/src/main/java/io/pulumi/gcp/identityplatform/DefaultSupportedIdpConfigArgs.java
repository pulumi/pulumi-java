// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.identityplatform;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DefaultSupportedIdpConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final DefaultSupportedIdpConfigArgs Empty = new DefaultSupportedIdpConfigArgs();

    /**
     * OAuth client ID
     * 
     */
    @Import(name="clientId", required=true)
      private final Output<String> clientId;

    public Output<String> getClientId() {
        return this.clientId;
    }

    /**
     * OAuth client secret
     * 
     */
    @Import(name="clientSecret", required=true)
      private final Output<String> clientSecret;

    public Output<String> getClientSecret() {
        return this.clientSecret;
    }

    /**
     * If this IDP allows the user to sign in
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * ID of the IDP. Possible values include:
     * * `apple.com`
     * * `facebook.com`
     * * `gc.apple.com`
     * * `github.com`
     * * `google.com`
     * * `linkedin.com`
     * * `microsoft.com`
     * * `playgames.google.com`
     * * `twitter.com`
     * * `yahoo.com`
     * 
     */
    @Import(name="idpId", required=true)
      private final Output<String> idpId;

    public Output<String> getIdpId() {
        return this.idpId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    public DefaultSupportedIdpConfigArgs(
        Output<String> clientId,
        Output<String> clientSecret,
        @Nullable Output<Boolean> enabled,
        Output<String> idpId,
        @Nullable Output<String> project) {
        this.clientId = Objects.requireNonNull(clientId, "expected parameter 'clientId' to be non-null");
        this.clientSecret = Objects.requireNonNull(clientSecret, "expected parameter 'clientSecret' to be non-null");
        this.enabled = enabled;
        this.idpId = Objects.requireNonNull(idpId, "expected parameter 'idpId' to be non-null");
        this.project = project;
    }

    private DefaultSupportedIdpConfigArgs() {
        this.clientId = Codegen.empty();
        this.clientSecret = Codegen.empty();
        this.enabled = Codegen.empty();
        this.idpId = Codegen.empty();
        this.project = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefaultSupportedIdpConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> clientId;
        private Output<String> clientSecret;
        private @Nullable Output<Boolean> enabled;
        private Output<String> idpId;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(DefaultSupportedIdpConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.enabled = defaults.enabled;
    	      this.idpId = defaults.idpId;
    	      this.project = defaults.project;
        }

        public Builder clientId(Output<String> clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Output.of(Objects.requireNonNull(clientId));
            return this;
        }
        public Builder clientSecret(Output<String> clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Output.of(Objects.requireNonNull(clientSecret));
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder idpId(Output<String> idpId) {
            this.idpId = Objects.requireNonNull(idpId);
            return this;
        }
        public Builder idpId(String idpId) {
            this.idpId = Output.of(Objects.requireNonNull(idpId));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }        public DefaultSupportedIdpConfigArgs build() {
            return new DefaultSupportedIdpConfigArgs(clientId, clientSecret, enabled, idpId, project);
        }
    }
}
