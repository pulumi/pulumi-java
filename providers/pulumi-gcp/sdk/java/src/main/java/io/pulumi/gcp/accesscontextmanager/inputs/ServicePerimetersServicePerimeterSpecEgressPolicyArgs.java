// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.accesscontextmanager.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs;
import io.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePerimetersServicePerimeterSpecEgressPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServicePerimetersServicePerimeterSpecEgressPolicyArgs Empty = new ServicePerimetersServicePerimeterSpecEgressPolicyArgs();

    /**
     * Defines conditions on the source of a request causing this `EgressPolicy` to apply.
     * Structure is documented below.
     * 
     */
    @Import(name="egressFrom")
      private final @Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs> egressFrom;

    public Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs> getEgressFrom() {
        return this.egressFrom == null ? Codegen.empty() : this.egressFrom;
    }

    /**
     * Defines the conditions on the `ApiOperation` and destination resources that
     * cause this `EgressPolicy` to apply.
     * Structure is documented below.
     * 
     */
    @Import(name="egressTo")
      private final @Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs> egressTo;

    public Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs> getEgressTo() {
        return this.egressTo == null ? Codegen.empty() : this.egressTo;
    }

    public ServicePerimetersServicePerimeterSpecEgressPolicyArgs(
        @Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs> egressFrom,
        @Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs> egressTo) {
        this.egressFrom = egressFrom;
        this.egressTo = egressTo;
    }

    private ServicePerimetersServicePerimeterSpecEgressPolicyArgs() {
        this.egressFrom = Codegen.empty();
        this.egressTo = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePerimetersServicePerimeterSpecEgressPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs> egressFrom;
        private @Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs> egressTo;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePerimetersServicePerimeterSpecEgressPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.egressFrom = defaults.egressFrom;
    	      this.egressTo = defaults.egressTo;
        }

        public Builder egressFrom(@Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs> egressFrom) {
            this.egressFrom = egressFrom;
            return this;
        }
        public Builder egressFrom(@Nullable ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromArgs egressFrom) {
            this.egressFrom = Codegen.ofNullable(egressFrom);
            return this;
        }
        public Builder egressTo(@Nullable Output<ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs> egressTo) {
            this.egressTo = egressTo;
            return this;
        }
        public Builder egressTo(@Nullable ServicePerimetersServicePerimeterSpecEgressPolicyEgressToArgs egressTo) {
            this.egressTo = Codegen.ofNullable(egressTo);
            return this;
        }        public ServicePerimetersServicePerimeterSpecEgressPolicyArgs build() {
            return new ServicePerimetersServicePerimeterSpecEgressPolicyArgs(egressFrom, egressTo);
        }
    }
}
