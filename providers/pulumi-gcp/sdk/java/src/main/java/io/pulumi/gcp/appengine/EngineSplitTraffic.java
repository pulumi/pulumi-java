// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.appengine.EngineSplitTrafficArgs;
import io.pulumi.gcp.appengine.inputs.EngineSplitTrafficState;
import io.pulumi.gcp.appengine.outputs.EngineSplitTrafficSplit;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Traffic routing configuration for versions within a single service. Traffic splits define how traffic directed to the service is assigned to versions.
 * 
 * 
 * To get more information about ServiceSplitTraffic, see:
 * 
 * * [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### App Engine Service Split Traffic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const bucket = new gcp.storage.Bucket("bucket", {location: "US"});
 * const object = new gcp.storage.BucketObject("object", {
 *     bucket: bucket.name,
 *     source: new pulumi.asset.FileAsset("./test-fixtures/appengine/hello-world.zip"),
 * });
 * const liveappV1 = new gcp.appengine.StandardAppVersion("liveappV1", {
 *     versionId: "v1",
 *     service: "liveapp",
 *     deleteServiceOnDestroy: true,
 *     runtime: "nodejs10",
 *     entrypoint: {
 *         shell: "node ./app.js",
 *     },
 *     deployment: {
 *         zip: {
 *             sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
 *         },
 *     },
 *     envVariables: {
 *         port: "8080",
 *     },
 * });
 * const liveappV2 = new gcp.appengine.StandardAppVersion("liveappV2", {
 *     versionId: "v2",
 *     service: "liveapp",
 *     noopOnDestroy: true,
 *     runtime: "nodejs10",
 *     entrypoint: {
 *         shell: "node ./app.js",
 *     },
 *     deployment: {
 *         zip: {
 *             sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
 *         },
 *     },
 *     envVariables: {
 *         port: "8080",
 *     },
 * });
 * const liveapp = new gcp.appengine.EngineSplitTraffic("liveapp", {
 *     service: liveappV2.service,
 *     migrateTraffic: false,
 *     split: {
 *         shardBy: "IP",
 *         allocations: pulumi.all([liveappV1.versionId, liveappV2.versionId]).apply(([liveappV1VersionId, liveappV2VersionId]) => {
 *             [liveappV1VersionId]: 0.75,
 *             [liveappV2VersionId]: 0.25,
 *         }),
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * bucket = gcp.storage.Bucket("bucket", location="US")
 * object = gcp.storage.BucketObject("object",
 *     bucket=bucket.name,
 *     source=pulumi.FileAsset("./test-fixtures/appengine/hello-world.zip"))
 * liveapp_v1 = gcp.appengine.StandardAppVersion("liveappV1",
 *     version_id="v1",
 *     service="liveapp",
 *     delete_service_on_destroy=True,
 *     runtime="nodejs10",
 *     entrypoint=gcp.appengine.StandardAppVersionEntrypointArgs(
 *         shell="node ./app.js",
 *     ),
 *     deployment=gcp.appengine.StandardAppVersionDeploymentArgs(
 *         zip=gcp.appengine.StandardAppVersionDeploymentZipArgs(
 *             source_url=pulumi.Output.all(bucket.name, object.name).apply(lambda bucketName, objectName: f"https://storage.googleapis.com/{bucket_name}/{object_name}"),
 *         ),
 *     ),
 *     env_variables={
 *         "port": "8080",
 *     })
 * liveapp_v2 = gcp.appengine.StandardAppVersion("liveappV2",
 *     version_id="v2",
 *     service="liveapp",
 *     noop_on_destroy=True,
 *     runtime="nodejs10",
 *     entrypoint=gcp.appengine.StandardAppVersionEntrypointArgs(
 *         shell="node ./app.js",
 *     ),
 *     deployment=gcp.appengine.StandardAppVersionDeploymentArgs(
 *         zip=gcp.appengine.StandardAppVersionDeploymentZipArgs(
 *             source_url=pulumi.Output.all(bucket.name, object.name).apply(lambda bucketName, objectName: f"https://storage.googleapis.com/{bucket_name}/{object_name}"),
 *         ),
 *     ),
 *     env_variables={
 *         "port": "8080",
 *     })
 * liveapp = gcp.appengine.EngineSplitTraffic("liveapp",
 *     service=liveapp_v2.service,
 *     migrate_traffic=False,
 *     split=gcp.appengine.EngineSplitTrafficSplitArgs(
 *         shard_by="IP",
 *         allocations=pulumi.Output.all(liveapp_v1.version_id, liveapp_v2.version_id).apply(lambda liveappV1Version_id, liveappV2Version_id: {
 *             liveapp_v1_version_id: 0.75,
 *             liveapp_v2_version_id: 0.25,
 *         }),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Gcp.Storage.Bucket("bucket", new Gcp.Storage.BucketArgs
 *         {
 *             Location = "US",
 *         });
 *         var @object = new Gcp.Storage.BucketObject("object", new Gcp.Storage.BucketObjectArgs
 *         {
 *             Bucket = bucket.Name,
 *             Source = new FileAsset("./test-fixtures/appengine/hello-world.zip"),
 *         });
 *         var liveappV1 = new Gcp.AppEngine.StandardAppVersion("liveappV1", new Gcp.AppEngine.StandardAppVersionArgs
 *         {
 *             VersionId = "v1",
 *             Service = "liveapp",
 *             DeleteServiceOnDestroy = true,
 *             Runtime = "nodejs10",
 *             Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
 *             {
 *                 Shell = "node ./app.js",
 *             },
 *             Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
 *             {
 *                 Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
 *                 {
 *                     SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
 *                     {
 *                         var bucketName = values.Item1;
 *                         var objectName = values.Item2;
 *                         return $"https://storage.googleapis.com/{bucketName}/{objectName}";
 *                     }),
 *                 },
 *             },
 *             EnvVariables = 
 *             {
 *                 { "port", "8080" },
 *             },
 *         });
 *         var liveappV2 = new Gcp.AppEngine.StandardAppVersion("liveappV2", new Gcp.AppEngine.StandardAppVersionArgs
 *         {
 *             VersionId = "v2",
 *             Service = "liveapp",
 *             NoopOnDestroy = true,
 *             Runtime = "nodejs10",
 *             Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
 *             {
 *                 Shell = "node ./app.js",
 *             },
 *             Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
 *             {
 *                 Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
 *                 {
 *                     SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
 *                     {
 *                         var bucketName = values.Item1;
 *                         var objectName = values.Item2;
 *                         return $"https://storage.googleapis.com/{bucketName}/{objectName}";
 *                     }),
 *                 },
 *             },
 *             EnvVariables = 
 *             {
 *                 { "port", "8080" },
 *             },
 *         });
 *         var liveapp = new Gcp.AppEngine.EngineSplitTraffic("liveapp", new Gcp.AppEngine.EngineSplitTrafficArgs
 *         {
 *             Service = liveappV2.Service,
 *             MigrateTraffic = false,
 *             Split = new Gcp.AppEngine.Inputs.EngineSplitTrafficSplitArgs
 *             {
 *                 ShardBy = "IP",
 *                 Allocations = Output.Tuple(liveappV1.VersionId, liveappV2.VersionId).Apply(values =>
 *                 {
 *                     var liveappV1VersionId = values.Item1;
 *                     var liveappV2VersionId = values.Item2;
 *                     return 
 *                     {
 *                         { liveappV1VersionId, 0.75 },
 *                         { liveappV2VersionId, 0.25 },
 *                     };
 *                 }),
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ServiceSplitTraffic can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:appengine/engineSplitTraffic:EngineSplitTraffic default apps/{{project}}/services/{{service}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:appengine/engineSplitTraffic:EngineSplitTraffic default {{project}}/{{service}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:appengine/engineSplitTraffic:EngineSplitTraffic default {{service}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:appengine/engineSplitTraffic:EngineSplitTraffic")
public class EngineSplitTraffic extends io.pulumi.resources.CustomResource {
    /**
     * If set to true traffic will be migrated to this version.
     * 
     */
    @Export(name="migrateTraffic", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> migrateTraffic;

    /**
     * @return If set to true traffic will be migrated to this version.
     * 
     */
    public Output</* @Nullable */ Boolean> getMigrateTraffic() {
        return this.migrateTraffic;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The name of the service these settings apply to.
     * 
     */
    @Export(name="service", type=String.class, parameters={})
    private Output<String> service;

    /**
     * @return The name of the service these settings apply to.
     * 
     */
    public Output<String> getService() {
        return this.service;
    }
    /**
     * Mapping that defines fractional HTTP traffic diversion to different versions within the service.
     * Structure is documented below.
     * 
     */
    @Export(name="split", type=EngineSplitTrafficSplit.class, parameters={})
    private Output<EngineSplitTrafficSplit> split;

    /**
     * @return Mapping that defines fractional HTTP traffic diversion to different versions within the service.
     * Structure is documented below.
     * 
     */
    public Output<EngineSplitTrafficSplit> getSplit() {
        return this.split;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EngineSplitTraffic(String name) {
        this(name, EngineSplitTrafficArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EngineSplitTraffic(String name, EngineSplitTrafficArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EngineSplitTraffic(String name, EngineSplitTrafficArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:appengine/engineSplitTraffic:EngineSplitTraffic", name, args == null ? EngineSplitTrafficArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EngineSplitTraffic(String name, Output<String> id, @Nullable EngineSplitTrafficState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:appengine/engineSplitTraffic:EngineSplitTraffic", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EngineSplitTraffic get(String name, Output<String> id, @Nullable EngineSplitTrafficState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EngineSplitTraffic(name, id, state, options);
    }
}
