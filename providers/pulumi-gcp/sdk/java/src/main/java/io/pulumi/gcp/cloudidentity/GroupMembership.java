// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudidentity;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.cloudidentity.GroupMembershipArgs;
import io.pulumi.gcp.cloudidentity.inputs.GroupMembershipState;
import io.pulumi.gcp.cloudidentity.outputs.GroupMembershipMemberKey;
import io.pulumi.gcp.cloudidentity.outputs.GroupMembershipPreferredMemberKey;
import io.pulumi.gcp.cloudidentity.outputs.GroupMembershipRole;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A Membership defines a relationship between a Group and an entity belonging to that Group, referred to as a "member".
 * 
 * 
 * To get more information about GroupMembership, see:
 * 
 * * [API documentation](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/identity/docs/how-to/memberships-google-groups)
 * 
 * > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
 * you must specify a `billing_project` and set `user_project_override` to true
 * in the provider configuration. Otherwise the Cloud Identity API will return a 403 error.
 * Your account must have the `serviceusage.services.use` permission on the
 * `billing_project` you defined.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Cloud Identity Group Membership
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const group = new gcp.cloudidentity.Group("group", {
 *     displayName: "my-identity-group",
 *     parent: "customers/A01b123xz",
 *     groupKey: {
 *         id: "my-identity-group@example.com",
 *     },
 *     labels: {
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     },
 * });
 * const child_group = new gcp.cloudidentity.Group("child-group", {
 *     displayName: "my-identity-group-child",
 *     parent: "customers/A01b123xz",
 *     groupKey: {
 *         id: "my-identity-group-child@example.com",
 *     },
 *     labels: {
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     },
 * });
 * const cloudIdentityGroupMembershipBasic = new gcp.cloudidentity.GroupMembership("cloudIdentityGroupMembershipBasic", {
 *     group: group.id,
 *     preferredMemberKey: {
 *         id: child_group.groupKey.apply(groupKey => groupKey.id),
 *     },
 *     roles: [{
 *         name: "MEMBER",
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * group = gcp.cloudidentity.Group("group",
 *     display_name="my-identity-group",
 *     parent="customers/A01b123xz",
 *     group_key=gcp.cloudidentity.GroupGroupKeyArgs(
 *         id="my-identity-group@example.com",
 *     ),
 *     labels={
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     })
 * child_group = gcp.cloudidentity.Group("child-group",
 *     display_name="my-identity-group-child",
 *     parent="customers/A01b123xz",
 *     group_key=gcp.cloudidentity.GroupGroupKeyArgs(
 *         id="my-identity-group-child@example.com",
 *     ),
 *     labels={
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     })
 * cloud_identity_group_membership_basic = gcp.cloudidentity.GroupMembership("cloudIdentityGroupMembershipBasic",
 *     group=group.id,
 *     preferred_member_key=gcp.cloudidentity.GroupMembershipPreferredMemberKeyArgs(
 *         id=child_group.group_key.id,
 *     ),
 *     roles=[gcp.cloudidentity.GroupMembershipRoleArgs(
 *         name="MEMBER",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var @group = new Gcp.CloudIdentity.Group("group", new Gcp.CloudIdentity.GroupArgs
 *         {
 *             DisplayName = "my-identity-group",
 *             Parent = "customers/A01b123xz",
 *             GroupKey = new Gcp.CloudIdentity.Inputs.GroupGroupKeyArgs
 *             {
 *                 Id = "my-identity-group@example.com",
 *             },
 *             Labels = 
 *             {
 *                 { "cloudidentity.googleapis.com/groups.discussion_forum", "" },
 *             },
 *         });
 *         var child_group = new Gcp.CloudIdentity.Group("child-group", new Gcp.CloudIdentity.GroupArgs
 *         {
 *             DisplayName = "my-identity-group-child",
 *             Parent = "customers/A01b123xz",
 *             GroupKey = new Gcp.CloudIdentity.Inputs.GroupGroupKeyArgs
 *             {
 *                 Id = "my-identity-group-child@example.com",
 *             },
 *             Labels = 
 *             {
 *                 { "cloudidentity.googleapis.com/groups.discussion_forum", "" },
 *             },
 *         });
 *         var cloudIdentityGroupMembershipBasic = new Gcp.CloudIdentity.GroupMembership("cloudIdentityGroupMembershipBasic", new Gcp.CloudIdentity.GroupMembershipArgs
 *         {
 *             Group = @group.Id,
 *             PreferredMemberKey = new Gcp.CloudIdentity.Inputs.GroupMembershipPreferredMemberKeyArgs
 *             {
 *                 Id = child_group.GroupKey.Apply(groupKey => groupKey.Id),
 *             },
 *             Roles = 
 *             {
 *                 new Gcp.CloudIdentity.Inputs.GroupMembershipRoleArgs
 *                 {
 *                     Name = "MEMBER",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudidentity"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		group, err := cloudidentity.NewGroup(ctx, "group", &cloudidentity.GroupArgs{
 * 			DisplayName: pulumi.String("my-identity-group"),
 * 			Parent:      pulumi.String("customers/A01b123xz"),
 * 			GroupKey: &cloudidentity.GroupGroupKeyArgs{
 * 				Id: pulumi.String("my-identity-group@example.com"),
 * 			},
 * 			Labels: pulumi.StringMap{
 * 				"cloudidentity.googleapis.com/groups.discussion_forum": pulumi.String(""),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudidentity.NewGroup(ctx, "child-group", &cloudidentity.GroupArgs{
 * 			DisplayName: pulumi.String("my-identity-group-child"),
 * 			Parent:      pulumi.String("customers/A01b123xz"),
 * 			GroupKey: &cloudidentity.GroupGroupKeyArgs{
 * 				Id: pulumi.String("my-identity-group-child@example.com"),
 * 			},
 * 			Labels: pulumi.StringMap{
 * 				"cloudidentity.googleapis.com/groups.discussion_forum": pulumi.String(""),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudidentity.NewGroupMembership(ctx, "cloudIdentityGroupMembershipBasic", &cloudidentity.GroupMembershipArgs{
 * 			Group: group.ID(),
 * 			PreferredMemberKey: &cloudidentity.GroupMembershipPreferredMemberKeyArgs{
 * 				Id: child_group.GroupKey.ApplyT(func(groupKey cloudidentity.GroupGroupKey) (string, error) {
 * 					return groupKey.Id, nil
 * 				}).(pulumi.StringOutput),
 * 			},
 * 			Roles: cloudidentity.GroupMembershipRoleArray{
 * 				&cloudidentity.GroupMembershipRoleArgs{
 * 					Name: pulumi.String("MEMBER"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Cloud Identity Group Membership User
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const group = new gcp.cloudidentity.Group("group", {
 *     displayName: "my-identity-group",
 *     parent: "customers/A01b123xz",
 *     groupKey: {
 *         id: "my-identity-group@example.com",
 *     },
 *     labels: {
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     },
 * });
 * const cloudIdentityGroupMembershipBasic = new gcp.cloudidentity.GroupMembership("cloudIdentityGroupMembershipBasic", {
 *     group: group.id,
 *     preferredMemberKey: {
 *         id: "cloud_identity_user@example.com",
 *     },
 *     roles: [
 *         {
 *             name: "MEMBER",
 *         },
 *         {
 *             name: "MANAGER",
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * group = gcp.cloudidentity.Group("group",
 *     display_name="my-identity-group",
 *     parent="customers/A01b123xz",
 *     group_key=gcp.cloudidentity.GroupGroupKeyArgs(
 *         id="my-identity-group@example.com",
 *     ),
 *     labels={
 *         "cloudidentity.googleapis.com/groups.discussion_forum": "",
 *     })
 * cloud_identity_group_membership_basic = gcp.cloudidentity.GroupMembership("cloudIdentityGroupMembershipBasic",
 *     group=group.id,
 *     preferred_member_key=gcp.cloudidentity.GroupMembershipPreferredMemberKeyArgs(
 *         id="cloud_identity_user@example.com",
 *     ),
 *     roles=[
 *         gcp.cloudidentity.GroupMembershipRoleArgs(
 *             name="MEMBER",
 *         ),
 *         gcp.cloudidentity.GroupMembershipRoleArgs(
 *             name="MANAGER",
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var @group = new Gcp.CloudIdentity.Group("group", new Gcp.CloudIdentity.GroupArgs
 *         {
 *             DisplayName = "my-identity-group",
 *             Parent = "customers/A01b123xz",
 *             GroupKey = new Gcp.CloudIdentity.Inputs.GroupGroupKeyArgs
 *             {
 *                 Id = "my-identity-group@example.com",
 *             },
 *             Labels = 
 *             {
 *                 { "cloudidentity.googleapis.com/groups.discussion_forum", "" },
 *             },
 *         });
 *         var cloudIdentityGroupMembershipBasic = new Gcp.CloudIdentity.GroupMembership("cloudIdentityGroupMembershipBasic", new Gcp.CloudIdentity.GroupMembershipArgs
 *         {
 *             Group = @group.Id,
 *             PreferredMemberKey = new Gcp.CloudIdentity.Inputs.GroupMembershipPreferredMemberKeyArgs
 *             {
 *                 Id = "cloud_identity_user@example.com",
 *             },
 *             Roles = 
 *             {
 *                 new Gcp.CloudIdentity.Inputs.GroupMembershipRoleArgs
 *                 {
 *                     Name = "MEMBER",
 *                 },
 *                 new Gcp.CloudIdentity.Inputs.GroupMembershipRoleArgs
 *                 {
 *                     Name = "MANAGER",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudidentity"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		group, err := cloudidentity.NewGroup(ctx, "group", &cloudidentity.GroupArgs{
 * 			DisplayName: pulumi.String("my-identity-group"),
 * 			Parent:      pulumi.String("customers/A01b123xz"),
 * 			GroupKey: &cloudidentity.GroupGroupKeyArgs{
 * 				Id: pulumi.String("my-identity-group@example.com"),
 * 			},
 * 			Labels: pulumi.StringMap{
 * 				"cloudidentity.googleapis.com/groups.discussion_forum": pulumi.String(""),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudidentity.NewGroupMembership(ctx, "cloudIdentityGroupMembershipBasic", &cloudidentity.GroupMembershipArgs{
 * 			Group: group.ID(),
 * 			PreferredMemberKey: &cloudidentity.GroupMembershipPreferredMemberKeyArgs{
 * 				Id: pulumi.String("cloud_identity_user@example.com"),
 * 			},
 * 			Roles: cloudidentity.GroupMembershipRoleArray{
 * 				&cloudidentity.GroupMembershipRoleArgs{
 * 					Name: pulumi.String("MEMBER"),
 * 				},
 * 				&cloudidentity.GroupMembershipRoleArgs{
 * 					Name: pulumi.String("MANAGER"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * GroupMembership can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:cloudidentity/groupMembership:GroupMembership default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:cloudidentity/groupMembership:GroupMembership")
public class GroupMembership extends io.pulumi.resources.CustomResource {
    /**
     * The time when the Membership was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time when the Membership was created.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * The name of the Group to create this membership in.
     * 
     */
    @Export(name="group", type=String.class, parameters={})
    private Output<String> group;

    /**
     * @return The name of the Group to create this membership in.
     * 
     */
    public Output<String> getGroup() {
        return this.group;
    }
    /**
     * EntityKey of the member.
     * Structure is documented below.
     * 
     */
    @Export(name="memberKey", type=GroupMembershipMemberKey.class, parameters={})
    private Output<GroupMembershipMemberKey> memberKey;

    /**
     * @return EntityKey of the member.
     * Structure is documented below.
     * 
     */
    public Output<GroupMembershipMemberKey> getMemberKey() {
        return this.memberKey;
    }
    /**
     * The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
     * Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
     * Possible values are `OWNER`, `MANAGER`, and `MEMBER`.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * EntityKey of the member.
     * Structure is documented below.
     * 
     */
    @Export(name="preferredMemberKey", type=GroupMembershipPreferredMemberKey.class, parameters={})
    private Output<GroupMembershipPreferredMemberKey> preferredMemberKey;

    /**
     * @return EntityKey of the member.
     * Structure is documented below.
     * 
     */
    public Output<GroupMembershipPreferredMemberKey> getPreferredMemberKey() {
        return this.preferredMemberKey;
    }
    /**
     * The MembershipRoles that apply to the Membership.
     * Must not contain duplicate MembershipRoles with the same name.
     * Structure is documented below.
     * 
     */
    @Export(name="roles", type=List.class, parameters={GroupMembershipRole.class})
    private Output<List<GroupMembershipRole>> roles;

    /**
     * @return The MembershipRoles that apply to the Membership.
     * Must not contain duplicate MembershipRoles with the same name.
     * Structure is documented below.
     * 
     */
    public Output<List<GroupMembershipRole>> getRoles() {
        return this.roles;
    }
    /**
     * The type of the membership.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the membership.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The time when the Membership was last updated.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The time when the Membership was last updated.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupMembership(String name) {
        this(name, GroupMembershipArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupMembership(String name, GroupMembershipArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupMembership(String name, GroupMembershipArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudidentity/groupMembership:GroupMembership", name, args == null ? GroupMembershipArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private GroupMembership(String name, Output<String> id, @Nullable GroupMembershipState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudidentity/groupMembership:GroupMembership", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupMembership get(String name, Output<String> id, @Nullable GroupMembershipState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new GroupMembership(name, id, state, options);
    }
}
