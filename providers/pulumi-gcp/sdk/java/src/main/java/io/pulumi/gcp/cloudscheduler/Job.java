// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.cloudscheduler;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.cloudscheduler.JobArgs;
import io.pulumi.gcp.cloudscheduler.inputs.JobState;
import io.pulumi.gcp.cloudscheduler.outputs.JobAppEngineHttpTarget;
import io.pulumi.gcp.cloudscheduler.outputs.JobHttpTarget;
import io.pulumi.gcp.cloudscheduler.outputs.JobPubsubTarget;
import io.pulumi.gcp.cloudscheduler.outputs.JobRetryConfig;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A scheduled job that can publish a pubsub message or a http request
 * every X interval of time, using crontab format string.
 * 
 * To use Cloud Scheduler your project must contain an App Engine app
 * that is located in one of the supported regions. If your project
 * does not have an App Engine app, you must create one.
 * 
 * 
 * To get more information about Job, see:
 * 
 * * [API documentation](https://cloud.google.com/scheduler/docs/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/scheduler/)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Scheduler Job App Engine
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const job = new gcp.cloudscheduler.Job("job", {
 *     appEngineHttpTarget: {
 *         appEngineRouting: {
 *             instance: "my-instance-001",
 *             service: "web",
 *             version: "prod",
 *         },
 *         httpMethod: "POST",
 *         relativeUri: "/ping",
 *     },
 *     attemptDeadline: "320s",
 *     description: "test app engine job",
 *     retryConfig: {
 *         maxDoublings: 2,
 *         maxRetryDuration: "10s",
 *         minBackoffDuration: "1s",
 *         retryCount: 3,
 *     },
 *     schedule: "*{@literal /}4 * * * *",
 *     timeZone: "Europe/London",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * job = gcp.cloudscheduler.Job("job",
 *     app_engine_http_target=gcp.cloudscheduler.JobAppEngineHttpTargetArgs(
 *         app_engine_routing=gcp.cloudscheduler.JobAppEngineHttpTargetAppEngineRoutingArgs(
 *             instance="my-instance-001",
 *             service="web",
 *             version="prod",
 *         ),
 *         http_method="POST",
 *         relative_uri="/ping",
 *     ),
 *     attempt_deadline="320s",
 *     description="test app engine job",
 *     retry_config=gcp.cloudscheduler.JobRetryConfigArgs(
 *         max_doublings=2,
 *         max_retry_duration="10s",
 *         min_backoff_duration="1s",
 *         retry_count=3,
 *     ),
 *     schedule="*{@literal /}4 * * * *",
 *     time_zone="Europe/London")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var job = new Gcp.CloudScheduler.Job("job", new Gcp.CloudScheduler.JobArgs
 *         {
 *             AppEngineHttpTarget = new Gcp.CloudScheduler.Inputs.JobAppEngineHttpTargetArgs
 *             {
 *                 AppEngineRouting = new Gcp.CloudScheduler.Inputs.JobAppEngineHttpTargetAppEngineRoutingArgs
 *                 {
 *                     Instance = "my-instance-001",
 *                     Service = "web",
 *                     Version = "prod",
 *                 },
 *                 HttpMethod = "POST",
 *                 RelativeUri = "/ping",
 *             },
 *             AttemptDeadline = "320s",
 *             Description = "test app engine job",
 *             RetryConfig = new Gcp.CloudScheduler.Inputs.JobRetryConfigArgs
 *             {
 *                 MaxDoublings = 2,
 *                 MaxRetryDuration = "10s",
 *                 MinBackoffDuration = "1s",
 *                 RetryCount = 3,
 *             },
 *             Schedule = "*{@literal /}4 * * * *",
 *             TimeZone = "Europe/London",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudscheduler"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudscheduler.NewJob(ctx, "job", &cloudscheduler.JobArgs{
 * 			AppEngineHttpTarget: &cloudscheduler.JobAppEngineHttpTargetArgs{
 * 				AppEngineRouting: &cloudscheduler.JobAppEngineHttpTargetAppEngineRoutingArgs{
 * 					Instance: pulumi.String("my-instance-001"),
 * 					Service:  pulumi.String("web"),
 * 					Version:  pulumi.String("prod"),
 * 				},
 * 				HttpMethod:  pulumi.String("POST"),
 * 				RelativeUri: pulumi.String("/ping"),
 * 			},
 * 			AttemptDeadline: pulumi.String("320s"),
 * 			Description:     pulumi.String("test app engine job"),
 * 			RetryConfig: &cloudscheduler.JobRetryConfigArgs{
 * 				MaxDoublings:       pulumi.Int(2),
 * 				MaxRetryDuration:   pulumi.String("10s"),
 * 				MinBackoffDuration: pulumi.String("1s"),
 * 				RetryCount:         pulumi.Int(3),
 * 			},
 * 			Schedule: pulumi.String("*{@literal /}4 * * * *"),
 * 			TimeZone: pulumi.String("Europe/London"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Scheduler Job Oauth
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const default = gcp.compute.getDefaultServiceAccount({});
 * const job = new gcp.cloudscheduler.Job("job", {
 *     description: "test http job",
 *     schedule: "*{@literal /}8 * * * *",
 *     timeZone: "America/New_York",
 *     attemptDeadline: "320s",
 *     httpTarget: {
 *         httpMethod: "GET",
 *         uri: "https://cloudscheduler.googleapis.com/v1/projects/my-project-name/locations/us-west1/jobs",
 *         oauthToken: {
 *             serviceAccountEmail: _default.then(_default => _default.email),
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default = gcp.compute.get_default_service_account()
 * job = gcp.cloudscheduler.Job("job",
 *     description="test http job",
 *     schedule="*{@literal /}8 * * * *",
 *     time_zone="America/New_York",
 *     attempt_deadline="320s",
 *     http_target=gcp.cloudscheduler.JobHttpTargetArgs(
 *         http_method="GET",
 *         uri="https://cloudscheduler.googleapis.com/v1/projects/my-project-name/locations/us-west1/jobs",
 *         oauth_token=gcp.cloudscheduler.JobHttpTargetOauthTokenArgs(
 *             service_account_email=default.email,
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var @default = Output.Create(Gcp.Compute.GetDefaultServiceAccount.InvokeAsync());
 *         var job = new Gcp.CloudScheduler.Job("job", new Gcp.CloudScheduler.JobArgs
 *         {
 *             Description = "test http job",
 *             Schedule = "*{@literal /}8 * * * *",
 *             TimeZone = "America/New_York",
 *             AttemptDeadline = "320s",
 *             HttpTarget = new Gcp.CloudScheduler.Inputs.JobHttpTargetArgs
 *             {
 *                 HttpMethod = "GET",
 *                 Uri = "https://cloudscheduler.googleapis.com/v1/projects/my-project-name/locations/us-west1/jobs",
 *                 OauthToken = new Gcp.CloudScheduler.Inputs.JobHttpTargetOauthTokenArgs
 *                 {
 *                     ServiceAccountEmail = @default.Apply(@default => @default.Email),
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudscheduler"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_default, err := compute.GetDefaultServiceAccount(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudscheduler.NewJob(ctx, "job", &cloudscheduler.JobArgs{
 * 			Description:     pulumi.String("test http job"),
 * 			Schedule:        pulumi.String("*{@literal /}8 * * * *"),
 * 			TimeZone:        pulumi.String("America/New_York"),
 * 			AttemptDeadline: pulumi.String("320s"),
 * 			HttpTarget: &cloudscheduler.JobHttpTargetArgs{
 * 				HttpMethod: pulumi.String("GET"),
 * 				Uri:        pulumi.String("https://cloudscheduler.googleapis.com/v1/projects/my-project-name/locations/us-west1/jobs"),
 * 				OauthToken: &cloudscheduler.JobHttpTargetOauthTokenArgs{
 * 					ServiceAccountEmail: pulumi.String(_default.Email),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Scheduler Job Oidc
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const default = gcp.compute.getDefaultServiceAccount({});
 * const job = new gcp.cloudscheduler.Job("job", {
 *     description: "test http job",
 *     schedule: "*{@literal /}8 * * * *",
 *     timeZone: "America/New_York",
 *     attemptDeadline: "320s",
 *     httpTarget: {
 *         httpMethod: "GET",
 *         uri: "https://example.com/ping",
 *         oidcToken: {
 *             serviceAccountEmail: _default.then(_default => _default.email),
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default = gcp.compute.get_default_service_account()
 * job = gcp.cloudscheduler.Job("job",
 *     description="test http job",
 *     schedule="*{@literal /}8 * * * *",
 *     time_zone="America/New_York",
 *     attempt_deadline="320s",
 *     http_target=gcp.cloudscheduler.JobHttpTargetArgs(
 *         http_method="GET",
 *         uri="https://example.com/ping",
 *         oidc_token=gcp.cloudscheduler.JobHttpTargetOidcTokenArgs(
 *             service_account_email=default.email,
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var @default = Output.Create(Gcp.Compute.GetDefaultServiceAccount.InvokeAsync());
 *         var job = new Gcp.CloudScheduler.Job("job", new Gcp.CloudScheduler.JobArgs
 *         {
 *             Description = "test http job",
 *             Schedule = "*{@literal /}8 * * * *",
 *             TimeZone = "America/New_York",
 *             AttemptDeadline = "320s",
 *             HttpTarget = new Gcp.CloudScheduler.Inputs.JobHttpTargetArgs
 *             {
 *                 HttpMethod = "GET",
 *                 Uri = "https://example.com/ping",
 *                 OidcToken = new Gcp.CloudScheduler.Inputs.JobHttpTargetOidcTokenArgs
 *                 {
 *                     ServiceAccountEmail = @default.Apply(@default => @default.Email),
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudscheduler"
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_default, err := compute.GetDefaultServiceAccount(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudscheduler.NewJob(ctx, "job", &cloudscheduler.JobArgs{
 * 			Description:     pulumi.String("test http job"),
 * 			Schedule:        pulumi.String("*{@literal /}8 * * * *"),
 * 			TimeZone:        pulumi.String("America/New_York"),
 * 			AttemptDeadline: pulumi.String("320s"),
 * 			HttpTarget: &cloudscheduler.JobHttpTargetArgs{
 * 				HttpMethod: pulumi.String("GET"),
 * 				Uri:        pulumi.String("https://example.com/ping"),
 * 				OidcToken: &cloudscheduler.JobHttpTargetOidcTokenArgs{
 * 					ServiceAccountEmail: pulumi.String(_default.Email),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Job can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default projects/{{project}}/locations/{{region}}/jobs/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default {{region}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:cloudscheduler/job:Job default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:cloudscheduler/job:Job")
public class Job extends io.pulumi.resources.CustomResource {
    /**
     * App Engine HTTP target.
     * If the job providers a App Engine HTTP target the cron will
     * send a request to the service instance
     * Structure is documented below.
     * 
     */
    @Export(name="appEngineHttpTarget", type=JobAppEngineHttpTarget.class, parameters={})
    private Output</* @Nullable */ JobAppEngineHttpTarget> appEngineHttpTarget;

    /**
     * @return App Engine HTTP target.
     * If the job providers a App Engine HTTP target the cron will
     * send a request to the service instance
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobAppEngineHttpTarget> getAppEngineHttpTarget() {
        return this.appEngineHttpTarget;
    }
    /**
     * The deadline for job attempts. If the request handler does not respond by this deadline then the request is
     * cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
     * execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
     * The allowed duration for this deadline is:
     * * For HTTP targets, between 15 seconds and 30 minutes.
     * * For App Engine HTTP targets, between 15 seconds and 24 hours.
     * * **Note**: For PubSub targets, this field is ignored - setting it will introduce an unresolvable diff.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
     * 
     */
    @Export(name="attemptDeadline", type=String.class, parameters={})
    private Output</* @Nullable */ String> attemptDeadline;

    /**
     * @return The deadline for job attempts. If the request handler does not respond by this deadline then the request is
     * cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
     * execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
     * The allowed duration for this deadline is:
     * * For HTTP targets, between 15 seconds and 30 minutes.
     * * For App Engine HTTP targets, between 15 seconds and 24 hours.
     * * **Note**: For PubSub targets, this field is ignored - setting it will introduce an unresolvable diff.
     * A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
     * 
     */
    public Output</* @Nullable */ String> getAttemptDeadline() {
        return this.attemptDeadline;
    }
    /**
     * A human-readable description for the job.
     * This string must not contain more than 500 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A human-readable description for the job.
     * This string must not contain more than 500 characters.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * HTTP target.
     * If the job providers a http_target the cron will
     * send a request to the targeted url
     * Structure is documented below.
     * 
     */
    @Export(name="httpTarget", type=JobHttpTarget.class, parameters={})
    private Output</* @Nullable */ JobHttpTarget> httpTarget;

    /**
     * @return HTTP target.
     * If the job providers a http_target the cron will
     * send a request to the targeted url
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobHttpTarget> getHttpTarget() {
        return this.httpTarget;
    }
    /**
     * The name of the job.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the job.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * Pub/Sub target
     * If the job providers a Pub/Sub target the cron will publish
     * a message to the provided topic
     * Structure is documented below.
     * 
     */
    @Export(name="pubsubTarget", type=JobPubsubTarget.class, parameters={})
    private Output</* @Nullable */ JobPubsubTarget> pubsubTarget;

    /**
     * @return Pub/Sub target
     * If the job providers a Pub/Sub target the cron will publish
     * a message to the provided topic
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobPubsubTarget> getPubsubTarget() {
        return this.pubsubTarget;
    }
    /**
     * Region where the scheduler job resides. If it is not provided, this provider will use the provider default.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return Region where the scheduler job resides. If it is not provided, this provider will use the provider default.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * By default, if a job does not complete successfully,
     * meaning that an acknowledgement is not received from the handler,
     * then it will be retried with exponential backoff according to the settings
     * Structure is documented below.
     * 
     */
    @Export(name="retryConfig", type=JobRetryConfig.class, parameters={})
    private Output</* @Nullable */ JobRetryConfig> retryConfig;

    /**
     * @return By default, if a job does not complete successfully,
     * meaning that an acknowledgement is not received from the handler,
     * then it will be retried with exponential backoff according to the settings
     * Structure is documented below.
     * 
     */
    public Output</* @Nullable */ JobRetryConfig> getRetryConfig() {
        return this.retryConfig;
    }
    /**
     * Describes the schedule on which the job will be executed.
     * 
     */
    @Export(name="schedule", type=String.class, parameters={})
    private Output</* @Nullable */ String> schedule;

    /**
     * @return Describes the schedule on which the job will be executed.
     * 
     */
    public Output</* @Nullable */ String> getSchedule() {
        return this.schedule;
    }
    /**
     * Specifies the time zone to be used in interpreting schedule.
     * The value of this field must be a time zone name from the tz database.
     * 
     */
    @Export(name="timeZone", type=String.class, parameters={})
    private Output</* @Nullable */ String> timeZone;

    /**
     * @return Specifies the time zone to be used in interpreting schedule.
     * The value of this field must be a time zone name from the tz database.
     * 
     */
    public Output</* @Nullable */ String> getTimeZone() {
        return this.timeZone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Job(String name) {
        this(name, JobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Job(String name, @Nullable JobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Job(String name, @Nullable JobArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudscheduler/job:Job", name, args == null ? JobArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Job(String name, Output<String> id, @Nullable JobState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudscheduler/job:Job", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Job get(String name, Output<String> id, @Nullable JobState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Job(name, id, state, options);
    }
}
