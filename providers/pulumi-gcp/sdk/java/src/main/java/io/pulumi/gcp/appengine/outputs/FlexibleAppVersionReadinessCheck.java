// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.appengine.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class FlexibleAppVersionReadinessCheck {
    private final @Nullable String appStartTimeout;
    private final @Nullable String checkInterval;
    private final @Nullable Double failureThreshold;
    private final @Nullable String host;
    private final String path;
    private final @Nullable Double successThreshold;
    private final @Nullable String timeout;

    @OutputCustomType.Constructor({"appStartTimeout","checkInterval","failureThreshold","host","path","successThreshold","timeout"})
    private FlexibleAppVersionReadinessCheck(
        @Nullable String appStartTimeout,
        @Nullable String checkInterval,
        @Nullable Double failureThreshold,
        @Nullable String host,
        String path,
        @Nullable Double successThreshold,
        @Nullable String timeout) {
        this.appStartTimeout = appStartTimeout;
        this.checkInterval = checkInterval;
        this.failureThreshold = failureThreshold;
        this.host = host;
        this.path = Objects.requireNonNull(path);
        this.successThreshold = successThreshold;
        this.timeout = timeout;
    }

    public Optional<String> getAppStartTimeout() {
        return Optional.ofNullable(this.appStartTimeout);
    }
    public Optional<String> getCheckInterval() {
        return Optional.ofNullable(this.checkInterval);
    }
    public Optional<Double> getFailureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    public Optional<String> getHost() {
        return Optional.ofNullable(this.host);
    }
    public String getPath() {
        return this.path;
    }
    public Optional<Double> getSuccessThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    public Optional<String> getTimeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleAppVersionReadinessCheck defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String appStartTimeout;
        private @Nullable String checkInterval;
        private @Nullable Double failureThreshold;
        private @Nullable String host;
        private String path;
        private @Nullable Double successThreshold;
        private @Nullable String timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(FlexibleAppVersionReadinessCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appStartTimeout = defaults.appStartTimeout;
    	      this.checkInterval = defaults.checkInterval;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeout = defaults.timeout;
        }

        public Builder setAppStartTimeout(@Nullable String appStartTimeout) {
            this.appStartTimeout = appStartTimeout;
            return this;
        }

        public Builder setCheckInterval(@Nullable String checkInterval) {
            this.checkInterval = checkInterval;
            return this;
        }

        public Builder setFailureThreshold(@Nullable Double failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }

        public Builder setHost(@Nullable String host) {
            this.host = host;
            return this;
        }

        public Builder setPath(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setSuccessThreshold(@Nullable Double successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = timeout;
            return this;
        }

        public FlexibleAppVersionReadinessCheck build() {
            return new FlexibleAppVersionReadinessCheck(appStartTimeout, checkInterval, failureThreshold, host, path, successThreshold, timeout);
        }
    }
}
