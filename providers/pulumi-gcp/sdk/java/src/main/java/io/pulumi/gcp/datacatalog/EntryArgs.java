// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.gcp.datacatalog.inputs.EntryGcsFilesetSpecArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EntryArgs extends io.pulumi.resources.ResourceArgs {

    public static final EntryArgs Empty = new EntryArgs();

    /**
     * Entry description, which can consist of several sentences or paragraphs that describe entry contents.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Display information such as title and description. A short name to identify the entry,
     * for example, "Analytics Data - Jan 2011".
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * The name of the entry group this entry is in.
     * 
     */
    @InputImport(name="entryGroup", required=true)
    private final Input<String> entryGroup;

    public Input<String> getEntryGroup() {
        return this.entryGroup;
    }

    /**
     * The id of the entry to create.
     * 
     */
    @InputImport(name="entryId", required=true)
    private final Input<String> entryId;

    public Input<String> getEntryId() {
        return this.entryId;
    }

    /**
     * Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
     * Structure is documented below.
     * 
     */
    @InputImport(name="gcsFilesetSpec")
    private final @Nullable Input<EntryGcsFilesetSpecArgs> gcsFilesetSpec;

    public Input<EntryGcsFilesetSpecArgs> getGcsFilesetSpec() {
        return this.gcsFilesetSpec == null ? Input.empty() : this.gcsFilesetSpec;
    }

    /**
     * The resource this metadata entry refers to.
     * For Google Cloud Platform resources, linkedResource is the full name of the resource.
     * For example, the linkedResource for a table resource from BigQuery is:
     * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
     * Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
     * this field is optional and defaults to an empty string.
     * 
     */
    @InputImport(name="linkedResource")
    private final @Nullable Input<String> linkedResource;

    public Input<String> getLinkedResource() {
        return this.linkedResource == null ? Input.empty() : this.linkedResource;
    }

    /**
     * Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
     * attached to it. See
     * https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
     * for what fields this schema can contain.
     * 
     */
    @InputImport(name="schema")
    private final @Nullable Input<String> schema;

    public Input<String> getSchema() {
        return this.schema == null ? Input.empty() : this.schema;
    }

    /**
     * The type of the entry. Only used for Entries with types in the EntryType enum.
     * Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType.
     * Possible values are `FILESET`.
     * 
     */
    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * This field indicates the entry's source system that Data Catalog does not integrate with.
     * userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
     * and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
     * 
     */
    @InputImport(name="userSpecifiedSystem")
    private final @Nullable Input<String> userSpecifiedSystem;

    public Input<String> getUserSpecifiedSystem() {
        return this.userSpecifiedSystem == null ? Input.empty() : this.userSpecifiedSystem;
    }

    /**
     * Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
     * When creating an entry, users should check the enum values first, if nothing matches the entry
     * to be created, then provide a custom value, for example "my_special_type".
     * userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
     * numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
     * 
     */
    @InputImport(name="userSpecifiedType")
    private final @Nullable Input<String> userSpecifiedType;

    public Input<String> getUserSpecifiedType() {
        return this.userSpecifiedType == null ? Input.empty() : this.userSpecifiedType;
    }

    public EntryArgs(
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        Input<String> entryGroup,
        Input<String> entryId,
        @Nullable Input<EntryGcsFilesetSpecArgs> gcsFilesetSpec,
        @Nullable Input<String> linkedResource,
        @Nullable Input<String> schema,
        @Nullable Input<String> type,
        @Nullable Input<String> userSpecifiedSystem,
        @Nullable Input<String> userSpecifiedType) {
        this.description = description;
        this.displayName = displayName;
        this.entryGroup = Objects.requireNonNull(entryGroup, "expected parameter 'entryGroup' to be non-null");
        this.entryId = Objects.requireNonNull(entryId, "expected parameter 'entryId' to be non-null");
        this.gcsFilesetSpec = gcsFilesetSpec;
        this.linkedResource = linkedResource;
        this.schema = schema;
        this.type = type;
        this.userSpecifiedSystem = userSpecifiedSystem;
        this.userSpecifiedType = userSpecifiedType;
    }

    private EntryArgs() {
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.entryGroup = Input.empty();
        this.entryId = Input.empty();
        this.gcsFilesetSpec = Input.empty();
        this.linkedResource = Input.empty();
        this.schema = Input.empty();
        this.type = Input.empty();
        this.userSpecifiedSystem = Input.empty();
        this.userSpecifiedType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private Input<String> entryGroup;
        private Input<String> entryId;
        private @Nullable Input<EntryGcsFilesetSpecArgs> gcsFilesetSpec;
        private @Nullable Input<String> linkedResource;
        private @Nullable Input<String> schema;
        private @Nullable Input<String> type;
        private @Nullable Input<String> userSpecifiedSystem;
        private @Nullable Input<String> userSpecifiedType;

        public Builder() {
    	      // Empty
        }

        public Builder(EntryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.entryGroup = defaults.entryGroup;
    	      this.entryId = defaults.entryId;
    	      this.gcsFilesetSpec = defaults.gcsFilesetSpec;
    	      this.linkedResource = defaults.linkedResource;
    	      this.schema = defaults.schema;
    	      this.type = defaults.type;
    	      this.userSpecifiedSystem = defaults.userSpecifiedSystem;
    	      this.userSpecifiedType = defaults.userSpecifiedType;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setEntryGroup(Input<String> entryGroup) {
            this.entryGroup = Objects.requireNonNull(entryGroup);
            return this;
        }

        public Builder setEntryGroup(String entryGroup) {
            this.entryGroup = Input.of(Objects.requireNonNull(entryGroup));
            return this;
        }

        public Builder setEntryId(Input<String> entryId) {
            this.entryId = Objects.requireNonNull(entryId);
            return this;
        }

        public Builder setEntryId(String entryId) {
            this.entryId = Input.of(Objects.requireNonNull(entryId));
            return this;
        }

        public Builder setGcsFilesetSpec(@Nullable Input<EntryGcsFilesetSpecArgs> gcsFilesetSpec) {
            this.gcsFilesetSpec = gcsFilesetSpec;
            return this;
        }

        public Builder setGcsFilesetSpec(@Nullable EntryGcsFilesetSpecArgs gcsFilesetSpec) {
            this.gcsFilesetSpec = Input.ofNullable(gcsFilesetSpec);
            return this;
        }

        public Builder setLinkedResource(@Nullable Input<String> linkedResource) {
            this.linkedResource = linkedResource;
            return this;
        }

        public Builder setLinkedResource(@Nullable String linkedResource) {
            this.linkedResource = Input.ofNullable(linkedResource);
            return this;
        }

        public Builder setSchema(@Nullable Input<String> schema) {
            this.schema = schema;
            return this;
        }

        public Builder setSchema(@Nullable String schema) {
            this.schema = Input.ofNullable(schema);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setUserSpecifiedSystem(@Nullable Input<String> userSpecifiedSystem) {
            this.userSpecifiedSystem = userSpecifiedSystem;
            return this;
        }

        public Builder setUserSpecifiedSystem(@Nullable String userSpecifiedSystem) {
            this.userSpecifiedSystem = Input.ofNullable(userSpecifiedSystem);
            return this;
        }

        public Builder setUserSpecifiedType(@Nullable Input<String> userSpecifiedType) {
            this.userSpecifiedType = userSpecifiedType;
            return this;
        }

        public Builder setUserSpecifiedType(@Nullable String userSpecifiedType) {
            this.userSpecifiedType = Input.ofNullable(userSpecifiedType);
            return this;
        }

        public EntryArgs build() {
            return new EntryArgs(description, displayName, entryGroup, entryId, gcsFilesetSpec, linkedResource, schema, type, userSpecifiedSystem, userSpecifiedType);
        }
    }
}
