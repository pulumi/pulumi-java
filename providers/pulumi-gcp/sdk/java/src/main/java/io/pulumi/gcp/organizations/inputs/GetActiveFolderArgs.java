// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.organizations.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class GetActiveFolderArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetActiveFolderArgs Empty = new GetActiveFolderArgs();

    /**
     * The folder's display name.
     * 
     */
    @InputImport(name="displayName", required=true)
      private final String displayName;

    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * The resource name of the parent Folder or Organization.
     * 
     */
    @InputImport(name="parent", required=true)
      private final String parent;

    public String getParent() {
        return this.parent;
    }

    public GetActiveFolderArgs(
        String displayName,
        String parent) {
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.parent = Objects.requireNonNull(parent, "expected parameter 'parent' to be non-null");
    }

    private GetActiveFolderArgs() {
        this.displayName = null;
        this.parent = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetActiveFolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String displayName;
        private String parent;

        public Builder() {
    	      // Empty
        }

        public Builder(GetActiveFolderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.parent = defaults.parent;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setParent(String parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }
        public GetActiveFolderArgs build() {
            return new GetActiveFolderArgs(displayName, parent);
        }
    }
}
