// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.gcp.bigquery.inputs.DataTransferConfigEmailPreferencesGetArgs;
import io.pulumi.gcp.bigquery.inputs.DataTransferConfigScheduleOptionsGetArgs;
import io.pulumi.gcp.bigquery.inputs.DataTransferConfigSensitiveParamsGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataTransferConfigState extends io.pulumi.resources.ResourceArgs {

    public static final DataTransferConfigState Empty = new DataTransferConfigState();

    /**
     * The number of days to look back to automatically refresh the data.
     * For example, if dataRefreshWindowDays = 10, then every day BigQuery
     * reingests data for [today-10, today-1], rather than ingesting data for
     * just [today-1]. Only valid if the data source supports the feature.
     * Set the value to 0 to use the default value.
     * 
     */
    @Import(name="dataRefreshWindowDays")
      private final @Nullable Output<Integer> dataRefreshWindowDays;

    public Output<Integer> getDataRefreshWindowDays() {
        return this.dataRefreshWindowDays == null ? Codegen.empty() : this.dataRefreshWindowDays;
    }

    /**
     * The data source id. Cannot be changed once the transfer config is created.
     * 
     */
    @Import(name="dataSourceId")
      private final @Nullable Output<String> dataSourceId;

    public Output<String> getDataSourceId() {
        return this.dataSourceId == null ? Codegen.empty() : this.dataSourceId;
    }

    /**
     * The BigQuery target dataset id.
     * 
     */
    @Import(name="destinationDatasetId")
      private final @Nullable Output<String> destinationDatasetId;

    public Output<String> getDestinationDatasetId() {
        return this.destinationDatasetId == null ? Codegen.empty() : this.destinationDatasetId;
    }

    /**
     * When set to true, no runs are scheduled for a given transfer.
     * 
     */
    @Import(name="disabled")
      private final @Nullable Output<Boolean> disabled;

    public Output<Boolean> getDisabled() {
        return this.disabled == null ? Codegen.empty() : this.disabled;
    }

    /**
     * The user specified display name for the transfer config.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Email notifications will be sent according to these preferences to the
     * email address of the user who owns this transfer config.
     * Structure is documented below.
     * 
     */
    @Import(name="emailPreferences")
      private final @Nullable Output<DataTransferConfigEmailPreferencesGetArgs> emailPreferences;

    public Output<DataTransferConfigEmailPreferencesGetArgs> getEmailPreferences() {
        return this.emailPreferences == null ? Codegen.empty() : this.emailPreferences;
    }

    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The resource name of the transfer config. Transfer config names have the form
     * projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
     * required. The name is ignored when creating a transfer config.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Pub/Sub topic where notifications will be sent after transfer runs
     * associated with this transfer config finish.
     * 
     */
    @Import(name="notificationPubsubTopic")
      private final @Nullable Output<String> notificationPubsubTopic;

    public Output<String> getNotificationPubsubTopic() {
        return this.notificationPubsubTopic == null ? Codegen.empty() : this.notificationPubsubTopic;
    }

    /**
     * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
     * section for each data source. For example the parameters for Cloud Storage transfers are listed here:
     * https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
     * 
     */
    @Import(name="params")
      private final @Nullable Output<Map<String,String>> params;

    public Output<Map<String,String>> getParams() {
        return this.params == null ? Codegen.empty() : this.params;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Data transfer schedule. If the data source does not support a custom
     * schedule, this should be empty. If it is empty, the default value for
     * the data source will be used. The specified times are in UTC. Examples
     * of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
     * jun 13:15, and first sunday of quarter 00:00. See more explanation
     * about the format here:
     * https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
     * NOTE: the granularity should be at least 8 hours, or less frequent.
     * 
     */
    @Import(name="schedule")
      private final @Nullable Output<String> schedule;

    public Output<String> getSchedule() {
        return this.schedule == null ? Codegen.empty() : this.schedule;
    }

    /**
     * Options customizing the data transfer schedule.
     * Structure is documented below.
     * 
     */
    @Import(name="scheduleOptions")
      private final @Nullable Output<DataTransferConfigScheduleOptionsGetArgs> scheduleOptions;

    public Output<DataTransferConfigScheduleOptionsGetArgs> getScheduleOptions() {
        return this.scheduleOptions == null ? Codegen.empty() : this.scheduleOptions;
    }

    /**
     * Different parameters are configured primarily using the the `params` field on this
     * resource. This block contains the parameters which contain secrets or passwords so that they can be marked
     * sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
     * in the `params` map in the api request.
     * Credentials may not be specified in both locations and will cause an error. Changing from one location
     * to a different credential configuration in the config will require an apply to update state.
     * Structure is documented below.
     * 
     */
    @Import(name="sensitiveParams")
      private final @Nullable Output<DataTransferConfigSensitiveParamsGetArgs> sensitiveParams;

    public Output<DataTransferConfigSensitiveParamsGetArgs> getSensitiveParams() {
        return this.sensitiveParams == null ? Codegen.empty() : this.sensitiveParams;
    }

    /**
     * Service account email. If this field is set, transfer config will
     * be created with this service account credentials. It requires that
     * requesting user calling this API has permissions to act as this service account.
     * 
     */
    @Import(name="serviceAccountName")
      private final @Nullable Output<String> serviceAccountName;

    public Output<String> getServiceAccountName() {
        return this.serviceAccountName == null ? Codegen.empty() : this.serviceAccountName;
    }

    public DataTransferConfigState(
        @Nullable Output<Integer> dataRefreshWindowDays,
        @Nullable Output<String> dataSourceId,
        @Nullable Output<String> destinationDatasetId,
        @Nullable Output<Boolean> disabled,
        @Nullable Output<String> displayName,
        @Nullable Output<DataTransferConfigEmailPreferencesGetArgs> emailPreferences,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> notificationPubsubTopic,
        @Nullable Output<Map<String,String>> params,
        @Nullable Output<String> project,
        @Nullable Output<String> schedule,
        @Nullable Output<DataTransferConfigScheduleOptionsGetArgs> scheduleOptions,
        @Nullable Output<DataTransferConfigSensitiveParamsGetArgs> sensitiveParams,
        @Nullable Output<String> serviceAccountName) {
        this.dataRefreshWindowDays = dataRefreshWindowDays;
        this.dataSourceId = dataSourceId;
        this.destinationDatasetId = destinationDatasetId;
        this.disabled = disabled;
        this.displayName = displayName;
        this.emailPreferences = emailPreferences;
        this.location = location;
        this.name = name;
        this.notificationPubsubTopic = notificationPubsubTopic;
        this.params = params;
        this.project = project;
        this.schedule = schedule;
        this.scheduleOptions = scheduleOptions;
        this.sensitiveParams = sensitiveParams;
        this.serviceAccountName = serviceAccountName;
    }

    private DataTransferConfigState() {
        this.dataRefreshWindowDays = Codegen.empty();
        this.dataSourceId = Codegen.empty();
        this.destinationDatasetId = Codegen.empty();
        this.disabled = Codegen.empty();
        this.displayName = Codegen.empty();
        this.emailPreferences = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.notificationPubsubTopic = Codegen.empty();
        this.params = Codegen.empty();
        this.project = Codegen.empty();
        this.schedule = Codegen.empty();
        this.scheduleOptions = Codegen.empty();
        this.sensitiveParams = Codegen.empty();
        this.serviceAccountName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataTransferConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> dataRefreshWindowDays;
        private @Nullable Output<String> dataSourceId;
        private @Nullable Output<String> destinationDatasetId;
        private @Nullable Output<Boolean> disabled;
        private @Nullable Output<String> displayName;
        private @Nullable Output<DataTransferConfigEmailPreferencesGetArgs> emailPreferences;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> notificationPubsubTopic;
        private @Nullable Output<Map<String,String>> params;
        private @Nullable Output<String> project;
        private @Nullable Output<String> schedule;
        private @Nullable Output<DataTransferConfigScheduleOptionsGetArgs> scheduleOptions;
        private @Nullable Output<DataTransferConfigSensitiveParamsGetArgs> sensitiveParams;
        private @Nullable Output<String> serviceAccountName;

        public Builder() {
    	      // Empty
        }

        public Builder(DataTransferConfigState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataRefreshWindowDays = defaults.dataRefreshWindowDays;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.destinationDatasetId = defaults.destinationDatasetId;
    	      this.disabled = defaults.disabled;
    	      this.displayName = defaults.displayName;
    	      this.emailPreferences = defaults.emailPreferences;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notificationPubsubTopic = defaults.notificationPubsubTopic;
    	      this.params = defaults.params;
    	      this.project = defaults.project;
    	      this.schedule = defaults.schedule;
    	      this.scheduleOptions = defaults.scheduleOptions;
    	      this.sensitiveParams = defaults.sensitiveParams;
    	      this.serviceAccountName = defaults.serviceAccountName;
        }

        public Builder dataRefreshWindowDays(@Nullable Output<Integer> dataRefreshWindowDays) {
            this.dataRefreshWindowDays = dataRefreshWindowDays;
            return this;
        }
        public Builder dataRefreshWindowDays(@Nullable Integer dataRefreshWindowDays) {
            this.dataRefreshWindowDays = Codegen.ofNullable(dataRefreshWindowDays);
            return this;
        }
        public Builder dataSourceId(@Nullable Output<String> dataSourceId) {
            this.dataSourceId = dataSourceId;
            return this;
        }
        public Builder dataSourceId(@Nullable String dataSourceId) {
            this.dataSourceId = Codegen.ofNullable(dataSourceId);
            return this;
        }
        public Builder destinationDatasetId(@Nullable Output<String> destinationDatasetId) {
            this.destinationDatasetId = destinationDatasetId;
            return this;
        }
        public Builder destinationDatasetId(@Nullable String destinationDatasetId) {
            this.destinationDatasetId = Codegen.ofNullable(destinationDatasetId);
            return this;
        }
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = Codegen.ofNullable(disabled);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder emailPreferences(@Nullable Output<DataTransferConfigEmailPreferencesGetArgs> emailPreferences) {
            this.emailPreferences = emailPreferences;
            return this;
        }
        public Builder emailPreferences(@Nullable DataTransferConfigEmailPreferencesGetArgs emailPreferences) {
            this.emailPreferences = Codegen.ofNullable(emailPreferences);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder notificationPubsubTopic(@Nullable Output<String> notificationPubsubTopic) {
            this.notificationPubsubTopic = notificationPubsubTopic;
            return this;
        }
        public Builder notificationPubsubTopic(@Nullable String notificationPubsubTopic) {
            this.notificationPubsubTopic = Codegen.ofNullable(notificationPubsubTopic);
            return this;
        }
        public Builder params(@Nullable Output<Map<String,String>> params) {
            this.params = params;
            return this;
        }
        public Builder params(@Nullable Map<String,String> params) {
            this.params = Codegen.ofNullable(params);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder schedule(@Nullable Output<String> schedule) {
            this.schedule = schedule;
            return this;
        }
        public Builder schedule(@Nullable String schedule) {
            this.schedule = Codegen.ofNullable(schedule);
            return this;
        }
        public Builder scheduleOptions(@Nullable Output<DataTransferConfigScheduleOptionsGetArgs> scheduleOptions) {
            this.scheduleOptions = scheduleOptions;
            return this;
        }
        public Builder scheduleOptions(@Nullable DataTransferConfigScheduleOptionsGetArgs scheduleOptions) {
            this.scheduleOptions = Codegen.ofNullable(scheduleOptions);
            return this;
        }
        public Builder sensitiveParams(@Nullable Output<DataTransferConfigSensitiveParamsGetArgs> sensitiveParams) {
            this.sensitiveParams = sensitiveParams;
            return this;
        }
        public Builder sensitiveParams(@Nullable DataTransferConfigSensitiveParamsGetArgs sensitiveParams) {
            this.sensitiveParams = Codegen.ofNullable(sensitiveParams);
            return this;
        }
        public Builder serviceAccountName(@Nullable Output<String> serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }
        public Builder serviceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = Codegen.ofNullable(serviceAccountName);
            return this;
        }        public DataTransferConfigState build() {
            return new DataTransferConfigState(dataRefreshWindowDays, dataSourceId, destinationDatasetId, disabled, displayName, emailPreferences, location, name, notificationPubsubTopic, params, project, schedule, scheduleOptions, sensitiveParams, serviceAccountName);
        }
    }
}
