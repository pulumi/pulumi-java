// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.filestore;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.filestore.InstanceArgs;
import io.pulumi.gcp.filestore.inputs.InstanceState;
import io.pulumi.gcp.filestore.outputs.InstanceFileShares;
import io.pulumi.gcp.filestore.outputs.InstanceNetwork;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * A Google Cloud Filestore instance.
 * 
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/filestore/docs/reference/rest/v1beta1/projects.locations.instances/create)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/filestore/docs/creating-instances)
 *     * [Use with Kubernetes](https://cloud.google.com/filestore/docs/accessing-fileshares)
 *     * [Copying Data In/Out](https://cloud.google.com/filestore/docs/copying-data)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Filestore Instance Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const instance = new gcp.filestore.Instance("instance", {
 *     fileShares: {
 *         capacityGb: 2660,
 *         name: "share1",
 *     },
 *     location: "us-central1-b",
 *     networks: [{
 *         modes: ["MODE_IPV4"],
 *         network: "default",
 *     }],
 *     tier: "PREMIUM",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * instance = gcp.filestore.Instance("instance",
 *     file_shares=gcp.filestore.InstanceFileSharesArgs(
 *         capacity_gb=2660,
 *         name="share1",
 *     ),
 *     location="us-central1-b",
 *     networks=[gcp.filestore.InstanceNetworkArgs(
 *         modes=["MODE_IPV4"],
 *         network="default",
 *     )],
 *     tier="PREMIUM")
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var instance = new Gcp.Filestore.Instance("instance", new Gcp.Filestore.InstanceArgs
 *         {
 *             FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
 *             {
 *                 CapacityGb = 2660,
 *                 Name = "share1",
 *             },
 *             Location = "us-central1-b",
 *             Networks = 
 *             {
 *                 new Gcp.Filestore.Inputs.InstanceNetworkArgs
 *                 {
 *                     Modes = 
 *                     {
 *                         "MODE_IPV4",
 *                     },
 *                     Network = "default",
 *                 },
 *             },
 *             Tier = "PREMIUM",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/filestore"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := filestore.NewInstance(ctx, "instance", &filestore.InstanceArgs{
 * 			FileShares: &filestore.InstanceFileSharesArgs{
 * 				CapacityGb: pulumi.Int(2660),
 * 				Name:       pulumi.String("share1"),
 * 			},
 * 			Location: pulumi.String("us-central1-b"),
 * 			Networks: filestore.InstanceNetworkArray{
 * 				&filestore.InstanceNetworkArgs{
 * 					Modes: pulumi.StringArray{
 * 						pulumi.String("MODE_IPV4"),
 * 					},
 * 					Network: pulumi.String("default"),
 * 				},
 * 			},
 * 			Tier: pulumi.String("PREMIUM"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Filestore Instance Full
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * 
 * const instance = new gcp.filestore.Instance("instance", {
 *     location: "us-central1-b",
 *     tier: "BASIC_SSD",
 *     fileShares: {
 *         capacityGb: 2660,
 *         name: "share1",
 *         nfsExportOptions: [
 *             {
 *                 ipRanges: ["10.0.0.0/24"],
 *                 accessMode: "READ_WRITE",
 *                 squashMode: "NO_ROOT_SQUASH",
 *             },
 *             {
 *                 ipRanges: ["10.10.0.0/24"],
 *                 accessMode: "READ_ONLY",
 *                 squashMode: "ROOT_SQUASH",
 *                 anonUid: 123,
 *                 anonGid: 456,
 *             },
 *         ],
 *     },
 *     networks: [{
 *         network: "default",
 *         modes: ["MODE_IPV4"],
 *         connectMode: "DIRECT_PEERING",
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * instance = gcp.filestore.Instance("instance",
 *     location="us-central1-b",
 *     tier="BASIC_SSD",
 *     file_shares=gcp.filestore.InstanceFileSharesArgs(
 *         capacity_gb=2660,
 *         name="share1",
 *         nfs_export_options=[
 *             gcp.filestore.InstanceFileSharesNfsExportOptionArgs(
 *                 ip_ranges=["10.0.0.0/24"],
 *                 access_mode="READ_WRITE",
 *                 squash_mode="NO_ROOT_SQUASH",
 *             ),
 *             gcp.filestore.InstanceFileSharesNfsExportOptionArgs(
 *                 ip_ranges=["10.10.0.0/24"],
 *                 access_mode="READ_ONLY",
 *                 squash_mode="ROOT_SQUASH",
 *                 anon_uid=123,
 *                 anon_gid=456,
 *             ),
 *         ],
 *     ),
 *     networks=[gcp.filestore.InstanceNetworkArgs(
 *         network="default",
 *         modes=["MODE_IPV4"],
 *         connect_mode="DIRECT_PEERING",
 *     )],
 *     opts=pulumi.ResourceOptions(provider=google_beta))
 * ```
 * ```csharp
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var instance = new Gcp.Filestore.Instance("instance", new Gcp.Filestore.InstanceArgs
 *         {
 *             Location = "us-central1-b",
 *             Tier = "BASIC_SSD",
 *             FileShares = new Gcp.Filestore.Inputs.InstanceFileSharesArgs
 *             {
 *                 CapacityGb = 2660,
 *                 Name = "share1",
 *                 NfsExportOptions = 
 *                 {
 *                     new Gcp.Filestore.Inputs.InstanceFileSharesNfsExportOptionArgs
 *                     {
 *                         IpRanges = 
 *                         {
 *                             "10.0.0.0/24",
 *                         },
 *                         AccessMode = "READ_WRITE",
 *                         SquashMode = "NO_ROOT_SQUASH",
 *                     },
 *                     new Gcp.Filestore.Inputs.InstanceFileSharesNfsExportOptionArgs
 *                     {
 *                         IpRanges = 
 *                         {
 *                             "10.10.0.0/24",
 *                         },
 *                         AccessMode = "READ_ONLY",
 *                         SquashMode = "ROOT_SQUASH",
 *                         AnonUid = 123,
 *                         AnonGid = 456,
 *                     },
 *                 },
 *             },
 *             Networks = 
 *             {
 *                 new Gcp.Filestore.Inputs.InstanceNetworkArgs
 *                 {
 *                     Network = "default",
 *                     Modes = 
 *                     {
 *                         "MODE_IPV4",
 *                     },
 *                     ConnectMode = "DIRECT_PEERING",
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = google_beta,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/filestore"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := filestore.NewInstance(ctx, "instance", &filestore.InstanceArgs{
 * 			Location: pulumi.String("us-central1-b"),
 * 			Tier:     pulumi.String("BASIC_SSD"),
 * 			FileShares: &filestore.InstanceFileSharesArgs{
 * 				CapacityGb: pulumi.Int(2660),
 * 				Name:       pulumi.String("share1"),
 * 				NfsExportOptions: filestore.InstanceFileSharesNfsExportOptionArray{
 * 					&filestore.InstanceFileSharesNfsExportOptionArgs{
 * 						IpRanges: pulumi.StringArray{
 * 							pulumi.String("10.0.0.0/24"),
 * 						},
 * 						AccessMode: pulumi.String("READ_WRITE"),
 * 						SquashMode: pulumi.String("NO_ROOT_SQUASH"),
 * 					},
 * 					&filestore.InstanceFileSharesNfsExportOptionArgs{
 * 						IpRanges: pulumi.StringArray{
 * 							pulumi.String("10.10.0.0/24"),
 * 						},
 * 						AccessMode: pulumi.String("READ_ONLY"),
 * 						SquashMode: pulumi.String("ROOT_SQUASH"),
 * 						AnonUid:    pulumi.Int(123),
 * 						AnonGid:    pulumi.Int(456),
 * 					},
 * 				},
 * 			},
 * 			Networks: filestore.InstanceNetworkArray{
 * 				&filestore.InstanceNetworkArgs{
 * 					Network: pulumi.String("default"),
 * 					Modes: pulumi.StringArray{
 * 						pulumi.String("MODE_IPV4"),
 * 					},
 * 					ConnectMode: pulumi.String("DIRECT_PEERING"),
 * 				},
 * 			},
 * 		}, pulumi.Provider(google_beta))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:filestore/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:filestore/instance:Instance default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:filestore/instance:Instance default {{location}}/{{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:filestore/instance:Instance")
public class Instance extends io.pulumi.resources.CustomResource {
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * A description of the instance.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the instance.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * File system shares on the instance. For this version, only a
     * single file share is supported.
     * Structure is documented below.
     * 
     */
    @Export(name="fileShares", type=InstanceFileShares.class, parameters={})
    private Output<InstanceFileShares> fileShares;

    /**
     * @return File system shares on the instance. For this version, only a
     * single file share is supported.
     * Structure is documented below.
     * 
     */
    public Output<InstanceFileShares> getFileShares() {
        return this.fileShares;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
     * 
     */
    public Output<String> getLocation() {
        return this.location;
    }
    /**
     * The name of the fileshare (16 characters or less)
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the fileshare (16 characters or less)
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * VPC networks to which the instance is connected. For this version,
     * only a single network is supported.
     * Structure is documented below.
     * 
     */
    @Export(name="networks", type=List.class, parameters={InstanceNetwork.class})
    private Output<List<InstanceNetwork>> networks;

    /**
     * @return VPC networks to which the instance is connected. For this version,
     * only a single network is supported.
     * Structure is documented below.
     * 
     */
    public Output<List<InstanceNetwork>> getNetworks() {
        return this.networks;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The service tier of the instance.
     * Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD and ENTERPRISE (beta only)
     * 
     */
    @Export(name="tier", type=String.class, parameters={})
    private Output<String> tier;

    /**
     * @return The service tier of the instance.
     * Possible values include: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD, HIGH_SCALE_SSD and ENTERPRISE (beta only)
     * 
     */
    public Output<String> getTier() {
        return this.tier;
    }
    /**
     * -
     * (Optional, Deprecated)
     * The name of the Filestore zone of the instance.
     * 
     * @Deprecated
     * Deprecated in favor of location.
     */
    @Deprecated /* Deprecated in favor of location. */
    @Export(name="zone", type=String.class, parameters={})
    private Output<String> zone;

    /**
     * @return -
     * (Optional, Deprecated)
     * The name of the Filestore zone of the instance.
     * 
     */
    public Output<String> getZone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:filestore/instance:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:filestore/instance:Instance", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
