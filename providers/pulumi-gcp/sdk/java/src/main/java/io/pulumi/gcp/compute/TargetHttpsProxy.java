// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.compute.TargetHttpsProxyArgs;
import io.pulumi.gcp.compute.inputs.TargetHttpsProxyState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Represents a TargetHttpsProxy resource, which is used by one or more
 * global forwarding rule to route incoming HTTPS requests to a URL map.
 * 
 * 
 * To get more information about TargetHttpsProxy, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/v1/targetHttpsProxies)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/target-proxies)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Target Https Proxy Basic
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * from "fs";
 * 
 * const defaultSSLCertificate = new gcp.compute.SSLCertificate("defaultSSLCertificate", {
 *     privateKey: fs.readFileSync("path/to/private.key"),
 *     certificate: fs.readFileSync("path/to/certificate.crt"),
 * });
 * const defaultHttpHealthCheck = new gcp.compute.HttpHealthCheck("defaultHttpHealthCheck", {
 *     requestPath: "/",
 *     checkIntervalSec: 1,
 *     timeoutSec: 1,
 * });
 * const defaultBackendService = new gcp.compute.BackendService("defaultBackendService", {
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     healthChecks: [defaultHttpHealthCheck.id],
 * });
 * const defaultURLMap = new gcp.compute.URLMap("defaultURLMap", {
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultTargetHttpsProxy = new gcp.compute.TargetHttpsProxy("defaultTargetHttpsProxy", {
 *     urlMap: defaultURLMap.id,
 *     sslCertificates: [defaultSSLCertificate.id],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_gcp as gcp
 * 
 * default_ssl_certificate = gcp.compute.SSLCertificate("defaultSSLCertificate",
 *     private_key=(lambda path: open(path).read())("path/to/private.key"),
 *     certificate=(lambda path: open(path).read())("path/to/certificate.crt"))
 * default_http_health_check = gcp.compute.HttpHealthCheck("defaultHttpHealthCheck",
 *     request_path="/",
 *     check_interval_sec=1,
 *     timeout_sec=1)
 * default_backend_service = gcp.compute.BackendService("defaultBackendService",
 *     port_name="http",
 *     protocol="HTTP",
 *     timeout_sec=10,
 *     health_checks=[default_http_health_check.id])
 * default_url_map = gcp.compute.URLMap("defaultURLMap",
 *     description="a description",
 *     default_service=default_backend_service.id,
 *     host_rules=[gcp.compute.URLMapHostRuleArgs(
 *         hosts=["mysite.com"],
 *         path_matcher="allpaths",
 *     )],
 *     path_matchers=[gcp.compute.URLMapPathMatcherArgs(
 *         name="allpaths",
 *         default_service=default_backend_service.id,
 *         path_rules=[gcp.compute.URLMapPathMatcherPathRuleArgs(
 *             paths=["/*"],
 *             service=default_backend_service.id,
 *         )],
 *     )])
 * default_target_https_proxy = gcp.compute.TargetHttpsProxy("defaultTargetHttpsProxy",
 *     url_map=default_url_map.id,
 *     ssl_certificates=[default_ssl_certificate.id])
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Gcp = Pulumi.Gcp;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var defaultSSLCertificate = new Gcp.Compute.SSLCertificate("defaultSSLCertificate", new Gcp.Compute.SSLCertificateArgs
 *         {
 *             PrivateKey = File.ReadAllText("path/to/private.key"),
 *             Certificate = File.ReadAllText("path/to/certificate.crt"),
 *         });
 *         var defaultHttpHealthCheck = new Gcp.Compute.HttpHealthCheck("defaultHttpHealthCheck", new Gcp.Compute.HttpHealthCheckArgs
 *         {
 *             RequestPath = "/",
 *             CheckIntervalSec = 1,
 *             TimeoutSec = 1,
 *         });
 *         var defaultBackendService = new Gcp.Compute.BackendService("defaultBackendService", new Gcp.Compute.BackendServiceArgs
 *         {
 *             PortName = "http",
 *             Protocol = "HTTP",
 *             TimeoutSec = 10,
 *             HealthChecks = 
 *             {
 *                 defaultHttpHealthCheck.Id,
 *             },
 *         });
 *         var defaultURLMap = new Gcp.Compute.URLMap("defaultURLMap", new Gcp.Compute.URLMapArgs
 *         {
 *             Description = "a description",
 *             DefaultService = defaultBackendService.Id,
 *             HostRules = 
 *             {
 *                 new Gcp.Compute.Inputs.URLMapHostRuleArgs
 *                 {
 *                     Hosts = 
 *                     {
 *                         "mysite.com",
 *                     },
 *                     PathMatcher = "allpaths",
 *                 },
 *             },
 *             PathMatchers = 
 *             {
 *                 new Gcp.Compute.Inputs.URLMapPathMatcherArgs
 *                 {
 *                     Name = "allpaths",
 *                     DefaultService = defaultBackendService.Id,
 *                     PathRules = 
 *                     {
 *                         new Gcp.Compute.Inputs.URLMapPathMatcherPathRuleArgs
 *                         {
 *                             Paths = 
 *                             {
 *                                 "/*",
 *                             },
 *                             Service = defaultBackendService.Id,
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var defaultTargetHttpsProxy = new Gcp.Compute.TargetHttpsProxy("defaultTargetHttpsProxy", new Gcp.Compute.TargetHttpsProxyArgs
 *         {
 *             UrlMap = defaultURLMap.Id,
 *             SslCertificates = 
 *             {
 *                 defaultSSLCertificate.Id,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultSSLCertificate, err := compute.NewSSLCertificate(ctx, "defaultSSLCertificate", &compute.SSLCertificateArgs{
 * 			PrivateKey:  readFileOrPanic("path/to/private.key"),
 * 			Certificate: readFileOrPanic("path/to/certificate.crt"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "defaultHttpHealthCheck", &compute.HttpHealthCheckArgs{
 * 			RequestPath:      pulumi.String("/"),
 * 			CheckIntervalSec: pulumi.Int(1),
 * 			TimeoutSec:       pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultBackendService, err := compute.NewBackendService(ctx, "defaultBackendService", &compute.BackendServiceArgs{
 * 			PortName:   pulumi.String("http"),
 * 			Protocol:   pulumi.String("HTTP"),
 * 			TimeoutSec: pulumi.Int(10),
 * 			HealthChecks: pulumi.String{
 * 				defaultHttpHealthCheck.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultURLMap, err := compute.NewURLMap(ctx, "defaultURLMap", &compute.URLMapArgs{
 * 			Description:    pulumi.String("a description"),
 * 			DefaultService: defaultBackendService.ID(),
 * 			HostRules: compute.URLMapHostRuleArray{
 * 				&compute.URLMapHostRuleArgs{
 * 					Hosts: pulumi.StringArray{
 * 						pulumi.String("mysite.com"),
 * 					},
 * 					PathMatcher: pulumi.String("allpaths"),
 * 				},
 * 			},
 * 			PathMatchers: compute.URLMapPathMatcherArray{
 * 				&compute.URLMapPathMatcherArgs{
 * 					Name:           pulumi.String("allpaths"),
 * 					DefaultService: defaultBackendService.ID(),
 * 					PathRules: compute.URLMapPathMatcherPathRuleArray{
 * 						&compute.URLMapPathMatcherPathRuleArgs{
 * 							Paths: pulumi.StringArray{
 * 								pulumi.String("/*"),
 * 							},
 * 							Service: defaultBackendService.ID(),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = compute.NewTargetHttpsProxy(ctx, "defaultTargetHttpsProxy", &compute.TargetHttpsProxyArgs{
 * 			UrlMap: defaultURLMap.ID(),
 * 			SslCertificates: pulumi.StringArray{
 * 				defaultSSLCertificate.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * TargetHttpsProxy can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default projects/{{project}}/global/targetHttpsProxies/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default {{project}}/{{name}}
 * ```
 * 
 * 
 * 
 * ```sh
 *  $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default {{name}}
 * ```
 * 
 *  
 */
@ResourceType(type="gcp:compute/targetHttpsProxy:TargetHttpsProxy")
public class TargetHttpsProxy extends io.pulumi.resources.CustomResource {
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> getCreationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * This field only applies when the forwarding rule that references
     * this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    @Export(name="proxyBind", type=Boolean.class, parameters={})
    private Output<Boolean> proxyBind;

    /**
     * @return This field only applies when the forwarding rule that references
     * this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * 
     */
    public Output<Boolean> getProxyBind() {
        return this.proxyBind;
    }
    /**
     * The unique identifier for the resource.
     * 
     */
    @Export(name="proxyId", type=Integer.class, parameters={})
    private Output<Integer> proxyId;

    /**
     * @return The unique identifier for the resource.
     * 
     */
    public Output<Integer> getProxyId() {
        return this.proxyId;
    }
    /**
     * Specifies the QUIC override policy for this resource. This determines
     * whether the load balancer will attempt to negotiate QUIC with clients
     * or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
     * specified, uses the QUIC policy with no user overrides, which is
     * equivalent to DISABLE.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ENABLE`, and `DISABLE`.
     * 
     */
    @Export(name="quicOverride", type=String.class, parameters={})
    private Output</* @Nullable */ String> quicOverride;

    /**
     * @return Specifies the QUIC override policy for this resource. This determines
     * whether the load balancer will attempt to negotiate QUIC with clients
     * or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
     * specified, uses the QUIC policy with no user overrides, which is
     * equivalent to DISABLE.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ENABLE`, and `DISABLE`.
     * 
     */
    public Output</* @Nullable */ String> getQuicOverride() {
        return this.quicOverride;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> getSelfLink() {
        return this.selfLink;
    }
    /**
     * A list of SslCertificate resources that are used to authenticate
     * connections between users and the load balancer. At least one SSL
     * certificate must be specified.
     * 
     */
    @Export(name="sslCertificates", type=List.class, parameters={String.class})
    private Output<List<String>> sslCertificates;

    /**
     * @return A list of SslCertificate resources that are used to authenticate
     * connections between users and the load balancer. At least one SSL
     * certificate must be specified.
     * 
     */
    public Output<List<String>> getSslCertificates() {
        return this.sslCertificates;
    }
    /**
     * A reference to the SslPolicy resource that will be associated with
     * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
     * resource will not have any SSL policy configured.
     * 
     */
    @Export(name="sslPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> sslPolicy;

    /**
     * @return A reference to the SslPolicy resource that will be associated with
     * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
     * resource will not have any SSL policy configured.
     * 
     */
    public Output</* @Nullable */ String> getSslPolicy() {
        return this.sslPolicy;
    }
    /**
     * A reference to the UrlMap resource that defines the mapping from URL
     * to the BackendService.
     * 
     */
    @Export(name="urlMap", type=String.class, parameters={})
    private Output<String> urlMap;

    /**
     * @return A reference to the UrlMap resource that defines the mapping from URL
     * to the BackendService.
     * 
     */
    public Output<String> getUrlMap() {
        return this.urlMap;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TargetHttpsProxy(String name) {
        this(name, TargetHttpsProxyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TargetHttpsProxy(String name, TargetHttpsProxyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TargetHttpsProxy(String name, TargetHttpsProxyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/targetHttpsProxy:TargetHttpsProxy", name, args == null ? TargetHttpsProxyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private TargetHttpsProxy(String name, Output<String> id, @Nullable TargetHttpsProxyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/targetHttpsProxy:TargetHttpsProxy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TargetHttpsProxy get(String name, Output<String> id, @Nullable TargetHttpsProxyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new TargetHttpsProxy(name, id, state, options);
    }
}
