// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.bigquery.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RoutineArgumentArgs extends io.pulumi.resources.ResourceArgs {

    public static final RoutineArgumentArgs Empty = new RoutineArgumentArgs();

    /**
     * Defaults to FIXED_TYPE.
     * Default value is `FIXED_TYPE`.
     * Possible values are `FIXED_TYPE` and `ANY_TYPE`.
     * 
     */
    @Import(name="argumentKind")
      private final @Nullable Output<String> argumentKind;

    public Output<String> getArgumentKind() {
        return this.argumentKind == null ? Codegen.empty() : this.argumentKind;
    }

    /**
     * A JSON schema for the data type. Required unless argumentKind = ANY_TYPE.
     * ~>**NOTE**: Because this field expects a JSON string, any changes to the string
     * will create a diff, even if the JSON itself hasn't changed. If the API returns
     * a different value for the same schema, e.g. it switched the order of values
     * or replaced STRUCT field type with RECORD field type, we currently cannot
     * suppress the recurring diff this causes. As a workaround, we recommend using
     * the schema as returned by the API.
     * 
     */
    @Import(name="dataType")
      private final @Nullable Output<String> dataType;

    public Output<String> getDataType() {
        return this.dataType == null ? Codegen.empty() : this.dataType;
    }

    /**
     * Specifies whether the argument is input or output. Can be set for procedures only.
     * Possible values are `IN`, `OUT`, and `INOUT`.
     * 
     */
    @Import(name="mode")
      private final @Nullable Output<String> mode;

    public Output<String> getMode() {
        return this.mode == null ? Codegen.empty() : this.mode;
    }

    /**
     * The name of this argument. Can be absent for function return argument.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    public RoutineArgumentArgs(
        @Nullable Output<String> argumentKind,
        @Nullable Output<String> dataType,
        @Nullable Output<String> mode,
        @Nullable Output<String> name) {
        this.argumentKind = argumentKind;
        this.dataType = dataType;
        this.mode = mode;
        this.name = name;
    }

    private RoutineArgumentArgs() {
        this.argumentKind = Codegen.empty();
        this.dataType = Codegen.empty();
        this.mode = Codegen.empty();
        this.name = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutineArgumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> argumentKind;
        private @Nullable Output<String> dataType;
        private @Nullable Output<String> mode;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(RoutineArgumentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.argumentKind = defaults.argumentKind;
    	      this.dataType = defaults.dataType;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
        }

        public Builder argumentKind(@Nullable Output<String> argumentKind) {
            this.argumentKind = argumentKind;
            return this;
        }
        public Builder argumentKind(@Nullable String argumentKind) {
            this.argumentKind = Codegen.ofNullable(argumentKind);
            return this;
        }
        public Builder dataType(@Nullable Output<String> dataType) {
            this.dataType = dataType;
            return this;
        }
        public Builder dataType(@Nullable String dataType) {
            this.dataType = Codegen.ofNullable(dataType);
            return this;
        }
        public Builder mode(@Nullable Output<String> mode) {
            this.mode = mode;
            return this;
        }
        public Builder mode(@Nullable String mode) {
            this.mode = Codegen.ofNullable(mode);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }        public RoutineArgumentArgs build() {
            return new RoutineArgumentArgs(argumentKind, dataType, mode, name);
        }
    }
}
