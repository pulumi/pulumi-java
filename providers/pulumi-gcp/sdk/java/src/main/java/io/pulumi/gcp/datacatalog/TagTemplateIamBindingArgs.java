// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.datacatalog;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.gcp.datacatalog.inputs.TagTemplateIamBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TagTemplateIamBindingArgs extends io.pulumi.resources.ResourceArgs {

    public static final TagTemplateIamBindingArgs Empty = new TagTemplateIamBindingArgs();

    @Import(name="condition")
      private final @Nullable Output<TagTemplateIamBindingConditionArgs> condition;

    public Output<TagTemplateIamBindingConditionArgs> getCondition() {
        return this.condition == null ? Output.empty() : this.condition;
    }

    @Import(name="members", required=true)
      private final Output<List<String>> members;

    public Output<List<String>> getMembers() {
        return this.members;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Output.empty() : this.region;
    }

    @Import(name="role", required=true)
      private final Output<String> role;

    public Output<String> getRole() {
        return this.role;
    }

    @Import(name="tagTemplate", required=true)
      private final Output<String> tagTemplate;

    public Output<String> getTagTemplate() {
        return this.tagTemplate;
    }

    public TagTemplateIamBindingArgs(
        @Nullable Output<TagTemplateIamBindingConditionArgs> condition,
        Output<List<String>> members,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        Output<String> role,
        Output<String> tagTemplate) {
        this.condition = condition;
        this.members = Objects.requireNonNull(members, "expected parameter 'members' to be non-null");
        this.project = project;
        this.region = region;
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.tagTemplate = Objects.requireNonNull(tagTemplate, "expected parameter 'tagTemplate' to be non-null");
    }

    private TagTemplateIamBindingArgs() {
        this.condition = Output.empty();
        this.members = Output.empty();
        this.project = Output.empty();
        this.region = Output.empty();
        this.role = Output.empty();
        this.tagTemplate = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TagTemplateIamBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<TagTemplateIamBindingConditionArgs> condition;
        private Output<List<String>> members;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private Output<String> role;
        private Output<String> tagTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(TagTemplateIamBindingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.members = defaults.members;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.role = defaults.role;
    	      this.tagTemplate = defaults.tagTemplate;
        }

        public Builder condition(@Nullable Output<TagTemplateIamBindingConditionArgs> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable TagTemplateIamBindingConditionArgs condition) {
            this.condition = Output.ofNullable(condition);
            return this;
        }
        public Builder members(Output<List<String>> members) {
            this.members = Objects.requireNonNull(members);
            return this;
        }
        public Builder members(List<String> members) {
            this.members = Output.of(Objects.requireNonNull(members));
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Output.ofNullable(region);
            return this;
        }
        public Builder role(Output<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder role(String role) {
            this.role = Output.of(Objects.requireNonNull(role));
            return this;
        }
        public Builder tagTemplate(Output<String> tagTemplate) {
            this.tagTemplate = Objects.requireNonNull(tagTemplate);
            return this;
        }
        public Builder tagTemplate(String tagTemplate) {
            this.tagTemplate = Output.of(Objects.requireNonNull(tagTemplate));
            return this;
        }        public TagTemplateIamBindingArgs build() {
            return new TagTemplateIamBindingArgs(condition, members, project, region, role, tagTemplate);
        }
    }
}
