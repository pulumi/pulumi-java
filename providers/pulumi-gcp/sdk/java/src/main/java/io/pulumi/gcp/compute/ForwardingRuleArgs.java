// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.compute;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ForwardingRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleArgs Empty = new ForwardingRuleArgs();

    /**
     * This field can be used with internal load balancer or network load balancer
     * when the forwarding rule references a backend service, or with the target
     * field when it references a TargetInstance. Set this to true to
     * allow packets addressed to any ports to be forwarded to the backends configured
     * with this forwarding rule. This can be used when the protocol is TCP/UDP, and it
     * must be set to true when the protocol is set to L3_DEFAULT.
     * Cannot be set if port or portRange are set.
     * 
     */
    @InputImport(name="allPorts")
    private final @Nullable Input<Boolean> allPorts;

    public Input<Boolean> getAllPorts() {
        return this.allPorts == null ? Input.empty() : this.allPorts;
    }

    /**
     * If true, clients can access ILB from all regions.
     * Otherwise only allows from the local region the ILB is located at.
     * 
     */
    @InputImport(name="allowGlobalAccess")
    private final @Nullable Input<Boolean> allowGlobalAccess;

    public Input<Boolean> getAllowGlobalAccess() {
        return this.allowGlobalAccess == null ? Input.empty() : this.allowGlobalAccess;
    }

    /**
     * A BackendService to receive the matched traffic. This is used only
     * for INTERNAL load balancing.
     * 
     */
    @InputImport(name="backendService")
    private final @Nullable Input<String> backendService;

    public Input<String> getBackendService() {
        return this.backendService == null ? Input.empty() : this.backendService;
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The IP address that this forwarding rule serves. When a client sends
     * traffic to this IP address, the forwarding rule directs the traffic to
     * the target that you specify in the forwarding rule. The
     * loadBalancingScheme and the forwarding rule's target determine the
     * type of IP address that you can use. For detailed information, refer
     * to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * An address can be specified either by a literal IP address or a
     * reference to an existing Address resource. If you don't specify a
     * reserved IP address, an ephemeral IP address is assigned.
     * The value must be set to 0.0.0.0 when the target is a targetGrpcProxy
     * that has validateForProxyless field set to true.
     * For Private Service Connect forwarding rules that forward traffic to
     * Google APIs, IP address must be provided.
     * 
     */
    @InputImport(name="ipAddress")
    private final @Nullable Input<String> ipAddress;

    public Input<String> getIpAddress() {
        return this.ipAddress == null ? Input.empty() : this.ipAddress;
    }

    /**
     * The IP protocol to which this rule applies.
     * When the load balancing scheme is INTERNAL, only TCP and UDP are
     * valid.
     * Possible values are `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, and `L3_DEFAULT`.
     * 
     */
    @InputImport(name="ipProtocol")
    private final @Nullable Input<String> ipProtocol;

    public Input<String> getIpProtocol() {
        return this.ipProtocol == null ? Input.empty() : this.ipProtocol;
    }

    /**
     * Indicates whether or not this load balancer can be used
     * as a collector for packet mirroring. To prevent mirroring loops,
     * instances behind this load balancer will not have their traffic
     * mirrored even if a PacketMirroring rule applies to them. This
     * can only be set to true for load balancers that have their
     * loadBalancingScheme set to INTERNAL.
     * 
     */
    @InputImport(name="isMirroringCollector")
    private final @Nullable Input<Boolean> isMirroringCollector;

    public Input<Boolean> getIsMirroringCollector() {
        return this.isMirroringCollector == null ? Input.empty() : this.isMirroringCollector;
    }

    /**
     * Labels to apply to this forwarding rule.  A list of key->value pairs.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * This signifies what the ForwardingRule will be used for and can be
     * EXTERNAL, EXTERNAL_MANAGED, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic
     * Cloud VPN gateways, protocol forwarding to VMs from an external IP address,
     * and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers.
     * INTERNAL is used for protocol forwarding to VMs from an internal IP address,
     * and internal TCP/UDP load balancers.
     * EXTERNAL_MANAGED is used for regional external HTTP(S) load balancers.
     * INTERNAL_MANAGED is used for internal HTTP(S) load balancers.
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
     * 
     */
    @InputImport(name="loadBalancingScheme")
    private final @Nullable Input<String> loadBalancingScheme;

    public Input<String> getLoadBalancingScheme() {
        return this.loadBalancingScheme == null ? Input.empty() : this.loadBalancingScheme;
    }

    /**
     * Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * For internal load balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule. If
     * this field is not specified, the default network will be used.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    @InputImport(name="network")
    private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    /**
     * The networking tier used for configuring this address. If this field is not
     * specified, it is assumed to be PREMIUM.
     * Possible values are `PREMIUM` and `STANDARD`.
     * 
     */
    @InputImport(name="networkTier")
    private final @Nullable Input<String> networkTier;

    public Input<String> getNetworkTier() {
        return this.networkTier == null ? Input.empty() : this.networkTier;
    }

    /**
     * This field is used along with the target field for TargetHttpProxy,
     * TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway,
     * TargetPool, TargetInstance.
     * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
     * addressed to ports in the specified range will be forwarded to target.
     * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
     * disjoint port ranges.
     * Some types of forwarding target have constraints on the acceptable
     * ports:
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    @InputImport(name="portRange")
    private final @Nullable Input<String> portRange;

    public Input<String> getPortRange() {
        return this.portRange == null ? Input.empty() : this.portRange;
    }

    /**
     * This field is used along with internal load balancing and network
     * load balancer when the forwarding rule references a backend service
     * and when protocol is not L3_DEFAULT.
     * A single port or a comma separated list of ports can be configured.
     * Only packets addressed to these ports will be forwarded to the backends
     * configured with this forwarding rule.
     * You can only use one of ports and portRange, or allPorts.
     * The three are mutually exclusive.
     * You may specify a maximum of up to 5 ports, which can be non-contiguous.
     * 
     */
    @InputImport(name="ports")
    private final @Nullable Input<List<String>> ports;

    public Input<List<String>> getPorts() {
        return this.ports == null ? Input.empty() : this.ports;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * A reference to the region where the regional forwarding rule resides.
     * This field is not applicable to global forwarding rules.
     * 
     */
    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    /**
     * An optional prefix to the service name for this Forwarding Rule.
     * If specified, will be the first label of the fully qualified service
     * name.
     * The label must be 1-63 characters long, and comply with RFC1035.
     * Specifically, the label must be 1-63 characters long and match the
     * regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    @InputImport(name="serviceLabel")
    private final @Nullable Input<String> serviceLabel;

    public Input<String> getServiceLabel() {
        return this.serviceLabel == null ? Input.empty() : this.serviceLabel;
    }

    /**
     * The subnetwork that the load balanced IP should belong to for this
     * Forwarding Rule.  This field is only used for INTERNAL load balancing.
     * If the network specified is in auto subnet mode, this field is
     * optional. However, if the network is in custom subnet mode, a
     * subnetwork must be specified.
     * 
     */
    @InputImport(name="subnetwork")
    private final @Nullable Input<String> subnetwork;

    public Input<String> getSubnetwork() {
        return this.subnetwork == null ? Input.empty() : this.subnetwork;
    }

    /**
     * The URL of the target resource to receive the matched traffic.
     * The target must live in the same region as the forwarding rule.
     * The forwarded traffic must be of a type appropriate to the target
     * object.
     * 
     */
    @InputImport(name="target")
    private final @Nullable Input<String> target;

    public Input<String> getTarget() {
        return this.target == null ? Input.empty() : this.target;
    }

    public ForwardingRuleArgs(
        @Nullable Input<Boolean> allPorts,
        @Nullable Input<Boolean> allowGlobalAccess,
        @Nullable Input<String> backendService,
        @Nullable Input<String> description,
        @Nullable Input<String> ipAddress,
        @Nullable Input<String> ipProtocol,
        @Nullable Input<Boolean> isMirroringCollector,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> loadBalancingScheme,
        @Nullable Input<String> name,
        @Nullable Input<String> network,
        @Nullable Input<String> networkTier,
        @Nullable Input<String> portRange,
        @Nullable Input<List<String>> ports,
        @Nullable Input<String> project,
        @Nullable Input<String> region,
        @Nullable Input<String> serviceLabel,
        @Nullable Input<String> subnetwork,
        @Nullable Input<String> target) {
        this.allPorts = allPorts;
        this.allowGlobalAccess = allowGlobalAccess;
        this.backendService = backendService;
        this.description = description;
        this.ipAddress = ipAddress;
        this.ipProtocol = ipProtocol;
        this.isMirroringCollector = isMirroringCollector;
        this.labels = labels;
        this.loadBalancingScheme = loadBalancingScheme;
        this.name = name;
        this.network = network;
        this.networkTier = networkTier;
        this.portRange = portRange;
        this.ports = ports;
        this.project = project;
        this.region = region;
        this.serviceLabel = serviceLabel;
        this.subnetwork = subnetwork;
        this.target = target;
    }

    private ForwardingRuleArgs() {
        this.allPorts = Input.empty();
        this.allowGlobalAccess = Input.empty();
        this.backendService = Input.empty();
        this.description = Input.empty();
        this.ipAddress = Input.empty();
        this.ipProtocol = Input.empty();
        this.isMirroringCollector = Input.empty();
        this.labels = Input.empty();
        this.loadBalancingScheme = Input.empty();
        this.name = Input.empty();
        this.network = Input.empty();
        this.networkTier = Input.empty();
        this.portRange = Input.empty();
        this.ports = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.serviceLabel = Input.empty();
        this.subnetwork = Input.empty();
        this.target = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allPorts;
        private @Nullable Input<Boolean> allowGlobalAccess;
        private @Nullable Input<String> backendService;
        private @Nullable Input<String> description;
        private @Nullable Input<String> ipAddress;
        private @Nullable Input<String> ipProtocol;
        private @Nullable Input<Boolean> isMirroringCollector;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> loadBalancingScheme;
        private @Nullable Input<String> name;
        private @Nullable Input<String> network;
        private @Nullable Input<String> networkTier;
        private @Nullable Input<String> portRange;
        private @Nullable Input<List<String>> ports;
        private @Nullable Input<String> project;
        private @Nullable Input<String> region;
        private @Nullable Input<String> serviceLabel;
        private @Nullable Input<String> subnetwork;
        private @Nullable Input<String> target;

        public Builder() {
    	      // Empty
        }

        public Builder(ForwardingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allPorts = defaults.allPorts;
    	      this.allowGlobalAccess = defaults.allowGlobalAccess;
    	      this.backendService = defaults.backendService;
    	      this.description = defaults.description;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipProtocol = defaults.ipProtocol;
    	      this.isMirroringCollector = defaults.isMirroringCollector;
    	      this.labels = defaults.labels;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkTier = defaults.networkTier;
    	      this.portRange = defaults.portRange;
    	      this.ports = defaults.ports;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.serviceLabel = defaults.serviceLabel;
    	      this.subnetwork = defaults.subnetwork;
    	      this.target = defaults.target;
        }

        public Builder setAllPorts(@Nullable Input<Boolean> allPorts) {
            this.allPorts = allPorts;
            return this;
        }

        public Builder setAllPorts(@Nullable Boolean allPorts) {
            this.allPorts = Input.ofNullable(allPorts);
            return this;
        }

        public Builder setAllowGlobalAccess(@Nullable Input<Boolean> allowGlobalAccess) {
            this.allowGlobalAccess = allowGlobalAccess;
            return this;
        }

        public Builder setAllowGlobalAccess(@Nullable Boolean allowGlobalAccess) {
            this.allowGlobalAccess = Input.ofNullable(allowGlobalAccess);
            return this;
        }

        public Builder setBackendService(@Nullable Input<String> backendService) {
            this.backendService = backendService;
            return this;
        }

        public Builder setBackendService(@Nullable String backendService) {
            this.backendService = Input.ofNullable(backendService);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setIpAddress(@Nullable Input<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder setIpAddress(@Nullable String ipAddress) {
            this.ipAddress = Input.ofNullable(ipAddress);
            return this;
        }

        public Builder setIpProtocol(@Nullable Input<String> ipProtocol) {
            this.ipProtocol = ipProtocol;
            return this;
        }

        public Builder setIpProtocol(@Nullable String ipProtocol) {
            this.ipProtocol = Input.ofNullable(ipProtocol);
            return this;
        }

        public Builder setIsMirroringCollector(@Nullable Input<Boolean> isMirroringCollector) {
            this.isMirroringCollector = isMirroringCollector;
            return this;
        }

        public Builder setIsMirroringCollector(@Nullable Boolean isMirroringCollector) {
            this.isMirroringCollector = Input.ofNullable(isMirroringCollector);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLoadBalancingScheme(@Nullable Input<String> loadBalancingScheme) {
            this.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        public Builder setLoadBalancingScheme(@Nullable String loadBalancingScheme) {
            this.loadBalancingScheme = Input.ofNullable(loadBalancingScheme);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNetwork(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder setNetworkTier(@Nullable Input<String> networkTier) {
            this.networkTier = networkTier;
            return this;
        }

        public Builder setNetworkTier(@Nullable String networkTier) {
            this.networkTier = Input.ofNullable(networkTier);
            return this;
        }

        public Builder setPortRange(@Nullable Input<String> portRange) {
            this.portRange = portRange;
            return this;
        }

        public Builder setPortRange(@Nullable String portRange) {
            this.portRange = Input.ofNullable(portRange);
            return this;
        }

        public Builder setPorts(@Nullable Input<List<String>> ports) {
            this.ports = ports;
            return this;
        }

        public Builder setPorts(@Nullable List<String> ports) {
            this.ports = Input.ofNullable(ports);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setServiceLabel(@Nullable Input<String> serviceLabel) {
            this.serviceLabel = serviceLabel;
            return this;
        }

        public Builder setServiceLabel(@Nullable String serviceLabel) {
            this.serviceLabel = Input.ofNullable(serviceLabel);
            return this;
        }

        public Builder setSubnetwork(@Nullable Input<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder setSubnetwork(@Nullable String subnetwork) {
            this.subnetwork = Input.ofNullable(subnetwork);
            return this;
        }

        public Builder setTarget(@Nullable Input<String> target) {
            this.target = target;
            return this;
        }

        public Builder setTarget(@Nullable String target) {
            this.target = Input.ofNullable(target);
            return this;
        }

        public ForwardingRuleArgs build() {
            return new ForwardingRuleArgs(allPorts, allowGlobalAccess, backendService, description, ipAddress, ipProtocol, isMirroringCollector, labels, loadBalancingScheme, name, network, networkTier, portRange, ports, project, region, serviceLabel, subnetwork, target);
        }
    }
}
