// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.container;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.gcp.container.inputs.AwsClusterAuthorizationArgs;
import io.pulumi.gcp.container.inputs.AwsClusterControlPlaneArgs;
import io.pulumi.gcp.container.inputs.AwsClusterFleetArgs;
import io.pulumi.gcp.container.inputs.AwsClusterNetworkingArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AwsClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final AwsClusterArgs Empty = new AwsClusterArgs();

    /**
     * Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @InputImport(name="annotations")
        private final @Nullable Input<Map<String,String>> annotations;

    public Input<Map<String,String>> getAnnotations() {
        return this.annotations == null ? Input.empty() : this.annotations;
    }

    /**
     * Required. Configuration related to the cluster RBAC settings.
     * 
     */
    @InputImport(name="authorization", required=true)
        private final Input<AwsClusterAuthorizationArgs> authorization;

    public Input<AwsClusterAuthorizationArgs> getAuthorization() {
        return this.authorization;
    }

    /**
     * Required. The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
     * 
     */
    @InputImport(name="awsRegion", required=true)
        private final Input<String> awsRegion;

    public Input<String> getAwsRegion() {
        return this.awsRegion;
    }

    /**
     * Required. Configuration related to the cluster control plane.
     * 
     */
    @InputImport(name="controlPlane", required=true)
        private final Input<AwsClusterControlPlaneArgs> controlPlane;

    public Input<AwsClusterControlPlaneArgs> getControlPlane() {
        return this.controlPlane;
    }

    /**
     * Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
     * 
     */
    @InputImport(name="description")
        private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Fleet configuration.
     * 
     */
    @InputImport(name="fleet", required=true)
        private final Input<AwsClusterFleetArgs> fleet;

    public Input<AwsClusterFleetArgs> getFleet() {
        return this.fleet;
    }

    /**
     * The location for the resource
     * 
     */
    @InputImport(name="location", required=true)
        private final Input<String> location;

    public Input<String> getLocation() {
        return this.location;
    }

    /**
     * The name of this resource.
     * 
     */
    @InputImport(name="name")
        private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Required. Cluster-wide networking configuration.
     * 
     */
    @InputImport(name="networking", required=true)
        private final Input<AwsClusterNetworkingArgs> networking;

    public Input<AwsClusterNetworkingArgs> getNetworking() {
        return this.networking;
    }

    /**
     * The project for the resource
     * 
     */
    @InputImport(name="project")
        private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    public AwsClusterArgs(
        @Nullable Input<Map<String,String>> annotations,
        Input<AwsClusterAuthorizationArgs> authorization,
        Input<String> awsRegion,
        Input<AwsClusterControlPlaneArgs> controlPlane,
        @Nullable Input<String> description,
        Input<AwsClusterFleetArgs> fleet,
        Input<String> location,
        @Nullable Input<String> name,
        Input<AwsClusterNetworkingArgs> networking,
        @Nullable Input<String> project) {
        this.annotations = annotations;
        this.authorization = Objects.requireNonNull(authorization, "expected parameter 'authorization' to be non-null");
        this.awsRegion = Objects.requireNonNull(awsRegion, "expected parameter 'awsRegion' to be non-null");
        this.controlPlane = Objects.requireNonNull(controlPlane, "expected parameter 'controlPlane' to be non-null");
        this.description = description;
        this.fleet = Objects.requireNonNull(fleet, "expected parameter 'fleet' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.networking = Objects.requireNonNull(networking, "expected parameter 'networking' to be non-null");
        this.project = project;
    }

    private AwsClusterArgs() {
        this.annotations = Input.empty();
        this.authorization = Input.empty();
        this.awsRegion = Input.empty();
        this.controlPlane = Input.empty();
        this.description = Input.empty();
        this.fleet = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.networking = Input.empty();
        this.project = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwsClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,String>> annotations;
        private Input<AwsClusterAuthorizationArgs> authorization;
        private Input<String> awsRegion;
        private Input<AwsClusterControlPlaneArgs> controlPlane;
        private @Nullable Input<String> description;
        private Input<AwsClusterFleetArgs> fleet;
        private Input<String> location;
        private @Nullable Input<String> name;
        private Input<AwsClusterNetworkingArgs> networking;
        private @Nullable Input<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(AwsClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.authorization = defaults.authorization;
    	      this.awsRegion = defaults.awsRegion;
    	      this.controlPlane = defaults.controlPlane;
    	      this.description = defaults.description;
    	      this.fleet = defaults.fleet;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networking = defaults.networking;
    	      this.project = defaults.project;
        }

        public Builder setAnnotations(@Nullable Input<Map<String,String>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder setAnnotations(@Nullable Map<String,String> annotations) {
            this.annotations = Input.ofNullable(annotations);
            return this;
        }

        public Builder setAuthorization(Input<AwsClusterAuthorizationArgs> authorization) {
            this.authorization = Objects.requireNonNull(authorization);
            return this;
        }

        public Builder setAuthorization(AwsClusterAuthorizationArgs authorization) {
            this.authorization = Input.of(Objects.requireNonNull(authorization));
            return this;
        }

        public Builder setAwsRegion(Input<String> awsRegion) {
            this.awsRegion = Objects.requireNonNull(awsRegion);
            return this;
        }

        public Builder setAwsRegion(String awsRegion) {
            this.awsRegion = Input.of(Objects.requireNonNull(awsRegion));
            return this;
        }

        public Builder setControlPlane(Input<AwsClusterControlPlaneArgs> controlPlane) {
            this.controlPlane = Objects.requireNonNull(controlPlane);
            return this;
        }

        public Builder setControlPlane(AwsClusterControlPlaneArgs controlPlane) {
            this.controlPlane = Input.of(Objects.requireNonNull(controlPlane));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setFleet(Input<AwsClusterFleetArgs> fleet) {
            this.fleet = Objects.requireNonNull(fleet);
            return this;
        }

        public Builder setFleet(AwsClusterFleetArgs fleet) {
            this.fleet = Input.of(Objects.requireNonNull(fleet));
            return this;
        }

        public Builder setLocation(Input<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Input.of(Objects.requireNonNull(location));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNetworking(Input<AwsClusterNetworkingArgs> networking) {
            this.networking = Objects.requireNonNull(networking);
            return this;
        }

        public Builder setNetworking(AwsClusterNetworkingArgs networking) {
            this.networking = Input.of(Objects.requireNonNull(networking));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }
        public AwsClusterArgs build() {
            return new AwsClusterArgs(annotations, authorization, awsRegion, controlPlane, description, fleet, location, name, networking, project);
        }
    }
}
