// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.gcp.projects;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.gcp.Utilities;
import io.pulumi.gcp.projects.ServiceArgs;
import io.pulumi.gcp.projects.inputs.ServiceState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Allows management of a single API service for a Google Cloud Platform project.
 * 
 * For a list of services available, visit the [API library page](https://console.cloud.google.com/apis/library)
 * or run `gcloud services list --available`.
 * 
 * This resource requires the [Service Usage API](https://console.cloud.google.com/apis/library/serviceusage.googleapis.com)
 * to use.
 * 
 * To get more information about `gcp.projects.Service`, see:
 * 
 * * [API documentation](https://cloud.google.com/service-usage/docs/reference/rest/v1/services)
 * * How-to Guides
 *     * [Enabling and Disabling Services](https://cloud.google.com/service-usage/docs/enable-disable)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Project services can be imported using the `project_id` and `service`, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:projects/service:Service my_project your-project-id/iam.googleapis.com
 * ```
 * 
 *  Note that unlike other resources that fail if they already exist, `terraform apply` can be successfully used to verify already enabled services. This means that when importing existing resources into Terraform, you can either import the `google_project_service` resources or treat them as new infrastructure and run `terraform apply` to add them to state.
 * 
 */
@ResourceType(type="gcp:projects/service:Service")
public class Service extends io.pulumi.resources.CustomResource {
    /**
     * If `true`, services that are enabled
     * and which depend on this service should also be disabled when this service is
     * destroyed. If `false` or unset, an error will be generated if any enabled
     * services depend on this service when destroying it.
     * 
     */
    @OutputExport(name="disableDependentServices", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disableDependentServices;

    /**
     * @return If `true`, services that are enabled
     * and which depend on this service should also be disabled when this service is
     * destroyed. If `false` or unset, an error will be generated if any enabled
     * services depend on this service when destroying it.
     * 
     */
    public Output</* @Nullable */ Boolean> getDisableDependentServices() {
        return this.disableDependentServices;
    }
    /**
     * If true, disable the service when the resource is destroyed. Defaults to true. May be useful in the event that a project is long-lived but the infrastructure running in that project changes frequently.
     * 
     */
    @OutputExport(name="disableOnDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disableOnDestroy;

    /**
     * @return If true, disable the service when the resource is destroyed. Defaults to true. May be useful in the event that a project is long-lived but the infrastructure running in that project changes frequently.
     * 
     */
    public Output</* @Nullable */ Boolean> getDisableOnDestroy() {
        return this.disableOnDestroy;
    }
    /**
     * The project ID. If not provided, the provider project
     * is used.
     * 
     */
    @OutputExport(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The project ID. If not provided, the provider project
     * is used.
     * 
     */
    public Output<String> getProject() {
        return this.project;
    }
    /**
     * The service to enable.
     * 
     */
    @OutputExport(name="service", type=String.class, parameters={})
    private Output<String> service;

    /**
     * @return The service to enable.
     * 
     */
    public Output<String> getService() {
        return this.service;
    }

    public interface BuilderApplicator {
        public void apply(ServiceArgs.Builder a);
    }
    private static io.pulumi.gcp.projects.ServiceArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.gcp.projects.ServiceArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Service(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:projects/service:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Service(String name, Input<String> id, @Nullable ServiceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("gcp:projects/service:Service", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Input<String> id, @Nullable ServiceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
