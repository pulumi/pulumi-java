// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerEnvArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerEnvFromArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerPortArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerResourcesArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecContainerVolumeMountArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTemplateSpecContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecContainerArgs Empty = new ServiceTemplateSpecContainerArgs();

    /**
     * Arguments to the entrypoint.
     * The docker image&#39;s CMD is used if this is not provided.
     * Variable references $(VAR_NAME) are expanded using the container&#39;s
     * environment. If a variable cannot be resolved, the reference in the input
     * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
     * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
     * regardless of whether the variable exists or not.
     * More info:
     * https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Entrypoint array. Not executed within a shell.
     * The docker image&#39;s ENTRYPOINT is used if this is not provided.
     * Variable references $(VAR_NAME) are expanded using the container&#39;s
     * environment. If a variable cannot be resolved, the reference in the input
     * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
     * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
     * regardless of whether the variable exists or not.
     * More info:
     * https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * - 
     * (Optional, Deprecated)
     * List of sources to populate environment variables in the container.
     * All invalid keys will be reported as an event when the container is starting.
     * When a key exists in multiple sources, the value associated with the last source will
     * take precedence. Values defined by an Env with a duplicate key will take
     * precedence.
     * Structure is documented below.
     * 
     * @deprecated
     * Not supported by Cloud Run fully managed
     * 
     */
    @Deprecated /* Not supported by Cloud Run fully managed */
    @Import(name="envFroms")
    private @Nullable Output<List<ServiceTemplateSpecContainerEnvFromArgs>> envFroms;

    @Deprecated /* Not supported by Cloud Run fully managed */
    public Optional<Output<List<ServiceTemplateSpecContainerEnvFromArgs>>> envFroms() {
        return Optional.ofNullable(this.envFroms);
    }

    /**
     * List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<ServiceTemplateSpecContainerEnvArgs>> envs;

    public Optional<Output<List<ServiceTemplateSpecContainerEnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * Docker image name. This is most often a reference to a container located
     * in the container registry, such as gcr.io/cloudrun/hello
     * More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    public Output<String> image() {
        return this.image;
    }

    /**
     * List of open ports in the container.
     * More Info:
     * https://cloud.google.com/run/docs/reference/rest/v1/RevisionSpec#ContainerPort
     * Structure is documented below.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<ServiceTemplateSpecContainerPortArgs>> ports;

    public Optional<Output<List<ServiceTemplateSpecContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Compute Resources required by this container. Used to set values such as max memory
     * More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits
     * Structure is documented below.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<ServiceTemplateSpecContainerResourcesArgs> resources;

    public Optional<Output<ServiceTemplateSpecContainerResourcesArgs>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * Volume to mount into the container&#39;s filesystem.
     * Only supports SecretVolumeSources.
     * Structure is documented below.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<ServiceTemplateSpecContainerVolumeMountArgs>> volumeMounts;

    public Optional<Output<List<ServiceTemplateSpecContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * - 
     * (Optional, Deprecated)
     * Container&#39;s working directory.
     * If not specified, the container runtime&#39;s default will be used, which
     * might be configured in the container image.
     * 
     * @deprecated
     * Not supported by Cloud Run fully managed
     * 
     */
    @Deprecated /* Not supported by Cloud Run fully managed */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    @Deprecated /* Not supported by Cloud Run fully managed */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private ServiceTemplateSpecContainerArgs() {}

    private ServiceTemplateSpecContainerArgs(ServiceTemplateSpecContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.envFroms = $.envFroms;
        this.envs = $.envs;
        this.image = $.image;
        this.ports = $.ports;
        this.resources = $.resources;
        this.volumeMounts = $.volumeMounts;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateSpecContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateSpecContainerArgs $;

        public Builder() {
            $ = new ServiceTemplateSpecContainerArgs();
        }

        public Builder(ServiceTemplateSpecContainerArgs defaults) {
            $ = new ServiceTemplateSpecContainerArgs(Objects.requireNonNull(defaults));
        }

        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        public Builder args(String... args) {
            return args(List.of(args));
        }

        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public Builder envFroms(@Nullable Output<List<ServiceTemplateSpecContainerEnvFromArgs>> envFroms) {
            $.envFroms = envFroms;
            return this;
        }

        public Builder envFroms(List<ServiceTemplateSpecContainerEnvFromArgs> envFroms) {
            return envFroms(Output.of(envFroms));
        }

        public Builder envFroms(ServiceTemplateSpecContainerEnvFromArgs... envFroms) {
            return envFroms(List.of(envFroms));
        }

        public Builder envs(@Nullable Output<List<ServiceTemplateSpecContainerEnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        public Builder envs(List<ServiceTemplateSpecContainerEnvArgs> envs) {
            return envs(Output.of(envs));
        }

        public Builder envs(ServiceTemplateSpecContainerEnvArgs... envs) {
            return envs(List.of(envs));
        }

        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder ports(@Nullable Output<List<ServiceTemplateSpecContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(List<ServiceTemplateSpecContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        public Builder ports(ServiceTemplateSpecContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        public Builder resources(@Nullable Output<ServiceTemplateSpecContainerResourcesArgs> resources) {
            $.resources = resources;
            return this;
        }

        public Builder resources(ServiceTemplateSpecContainerResourcesArgs resources) {
            return resources(Output.of(resources));
        }

        public Builder volumeMounts(@Nullable Output<List<ServiceTemplateSpecContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        public Builder volumeMounts(List<ServiceTemplateSpecContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        public Builder volumeMounts(ServiceTemplateSpecContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public ServiceTemplateSpecContainerArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            return $;
        }
    }

}
