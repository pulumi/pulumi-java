// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.AwsNodePoolAutoscalingGetArgs;
import com.pulumi.gcp.container.inputs.AwsNodePoolConfigGetArgs;
import com.pulumi.gcp.container.inputs.AwsNodePoolMaxPodsConstraintGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AwsNodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final AwsNodePoolState Empty = new AwsNodePoolState();

    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Required. Autoscaler configuration for this node pool.
     * 
     */
    @Import(name="autoscaling")
    private @Nullable Output<AwsNodePoolAutoscalingGetArgs> autoscaling;

    public Optional<Output<AwsNodePoolAutoscalingGetArgs>> autoscaling() {
        return Optional.ofNullable(this.autoscaling);
    }

    /**
     * The awsCluster for the resource
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * Required. The configuration of the node pool.
     * 
     */
    @Import(name="config")
    private @Nullable Output<AwsNodePoolConfigGetArgs> config;

    public Optional<Output<AwsNodePoolConfigGetArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Output only. The time at which this node pool was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
     * and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint")
    private @Nullable Output<AwsNodePoolMaxPodsConstraintGetArgs> maxPodsConstraint;

    public Optional<Output<AwsNodePoolMaxPodsConstraintGetArgs>> maxPodsConstraint() {
        return Optional.ofNullable(this.maxPodsConstraint);
    }

    /**
     * The name of this resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. If set, there are currently changes in flight to the node pool.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * Output only. The lifecycle state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING,
     * RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Required. The subnet where the node pool node run.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * Output only. A globally unique identifier for the node pool.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. The time at which this node pool was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * Required. The Kubernetes version to run on this node pool (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAwsServerConfig.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private AwsNodePoolState() {}

    private AwsNodePoolState(AwsNodePoolState $) {
        this.annotations = $.annotations;
        this.autoscaling = $.autoscaling;
        this.cluster = $.cluster;
        this.config = $.config;
        this.createTime = $.createTime;
        this.etag = $.etag;
        this.location = $.location;
        this.maxPodsConstraint = $.maxPodsConstraint;
        this.name = $.name;
        this.project = $.project;
        this.reconciling = $.reconciling;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsNodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsNodePoolState $;

        public Builder() {
            $ = new AwsNodePoolState();
        }

        public Builder(AwsNodePoolState defaults) {
            $ = new AwsNodePoolState(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder autoscaling(@Nullable Output<AwsNodePoolAutoscalingGetArgs> autoscaling) {
            $.autoscaling = autoscaling;
            return this;
        }

        public Builder autoscaling(AwsNodePoolAutoscalingGetArgs autoscaling) {
            return autoscaling(Output.of(autoscaling));
        }

        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        public Builder config(@Nullable Output<AwsNodePoolConfigGetArgs> config) {
            $.config = config;
            return this;
        }

        public Builder config(AwsNodePoolConfigGetArgs config) {
            return config(Output.of(config));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder maxPodsConstraint(@Nullable Output<AwsNodePoolMaxPodsConstraintGetArgs> maxPodsConstraint) {
            $.maxPodsConstraint = maxPodsConstraint;
            return this;
        }

        public Builder maxPodsConstraint(AwsNodePoolMaxPodsConstraintGetArgs maxPodsConstraint) {
            return maxPodsConstraint(Output.of(maxPodsConstraint));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public AwsNodePoolState build() {
            return $;
        }
    }

}
