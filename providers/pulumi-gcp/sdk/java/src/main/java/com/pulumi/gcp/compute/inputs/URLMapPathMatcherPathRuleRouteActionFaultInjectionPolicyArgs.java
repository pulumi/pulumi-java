// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs Empty = new URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs();

    /**
     * The specification for how client requests are aborted as part of fault injection.
     * Structure is documented below.
     * 
     */
    @Import(name="abort")
    private @Nullable Output<URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs> abort;

    public Optional<Output<URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs>> abort() {
        return Optional.ofNullable(this.abort);
    }

    /**
     * The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
     * Structure is documented below.
     * 
     */
    @Import(name="delay")
    private @Nullable Output<URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs> delay;

    public Optional<Output<URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs>> delay() {
        return Optional.ofNullable(this.delay);
    }

    private URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs() {}

    private URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs $) {
        this.abort = $.abort;
        this.delay = $.delay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs $;

        public Builder() {
            $ = new URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs();
        }

        public Builder(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs defaults) {
            $ = new URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder abort(@Nullable Output<URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs> abort) {
            $.abort = abort;
            return this;
        }

        public Builder abort(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs abort) {
            return abort(Output.of(abort));
        }

        public Builder delay(@Nullable Output<URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs> delay) {
            $.delay = delay;
            return this;
        }

        public Builder delay(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs delay) {
            return delay(Output.of(delay));
        }

        public URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs build() {
            return $;
        }
    }

}
