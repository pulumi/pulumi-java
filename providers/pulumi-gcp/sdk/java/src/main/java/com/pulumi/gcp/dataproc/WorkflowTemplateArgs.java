// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.dataproc.inputs.WorkflowTemplateJobArgs;
import com.pulumi.gcp.dataproc.inputs.WorkflowTemplateParameterArgs;
import com.pulumi.gcp.dataproc.inputs.WorkflowTemplatePlacementArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkflowTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowTemplateArgs Empty = new WorkflowTemplateArgs();

    /**
     * (Beta only) Optional. Timeout duration for the DAG of jobs. You can use &#34;s&#34;, &#34;m&#34;, &#34;h&#34;, and &#34;d&#34; suffixes for second, minute, hour, and day duration values, respectively. The timeout duration must be from 10 minutes (&#34;10m&#34;) to 24 hours (&#34;24h&#34; or &#34;1d&#34;). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a (/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the cluster is deleted.
     * 
     */
    @Import(name="dagTimeout")
      private final @Nullable Output<String> dagTimeout;

    public Output<String> dagTimeout() {
        return this.dagTimeout == null ? Codegen.empty() : this.dagTimeout;
    }

    /**
     * Required. The Directed Acyclic Graph of Jobs to submit.
     * 
     */
    @Import(name="jobs", required=true)
      private final Output<List<WorkflowTemplateJobArgs>> jobs;

    public Output<List<WorkflowTemplateJobArgs>> jobs() {
        return this.jobs;
    }

    /**
     * Optional. The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<List<WorkflowTemplateParameterArgs>> parameters;

    public Output<List<WorkflowTemplateParameterArgs>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * Required. WorkflowTemplate scheduling information.
     * 
     */
    @Import(name="placement", required=true)
      private final Output<WorkflowTemplatePlacementArgs> placement;

    public Output<WorkflowTemplatePlacementArgs> placement() {
        return this.placement;
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Optional. Used to perform a consistent read-modify-write. This field should be left blank for a `CreateWorkflowTemplate` request. It is required for an `UpdateWorkflowTemplate` request, and must match the current server version. A typical update template flow would fetch the current template with a `GetWorkflowTemplate` request, which will return the current template with the `version` field filled in with the current server version. The user updates other fields in the template, then returns it as part of the `UpdateWorkflowTemplate` request.
     * 
     * @deprecated
     * version is not useful as a configurable field, and will be removed in the future.
     * 
     */
    @Deprecated /* version is not useful as a configurable field, and will be removed in the future. */
    @Import(name="version")
      private final @Nullable Output<Integer> version;

    @Deprecated /* version is not useful as a configurable field, and will be removed in the future. */
    public Output<Integer> version() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public WorkflowTemplateArgs(
        @Nullable Output<String> dagTimeout,
        Output<List<WorkflowTemplateJobArgs>> jobs,
        @Nullable Output<Map<String,String>> labels,
        Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<List<WorkflowTemplateParameterArgs>> parameters,
        Output<WorkflowTemplatePlacementArgs> placement,
        @Nullable Output<String> project,
        @Nullable Output<Integer> version) {
        this.dagTimeout = dagTimeout;
        this.jobs = Objects.requireNonNull(jobs, "expected parameter 'jobs' to be non-null");
        this.labels = labels;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.parameters = parameters;
        this.placement = Objects.requireNonNull(placement, "expected parameter 'placement' to be non-null");
        this.project = project;
        this.version = version;
    }

    private WorkflowTemplateArgs() {
        this.dagTimeout = Codegen.empty();
        this.jobs = Codegen.empty();
        this.labels = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.parameters = Codegen.empty();
        this.placement = Codegen.empty();
        this.project = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dagTimeout;
        private Output<List<WorkflowTemplateJobArgs>> jobs;
        private @Nullable Output<Map<String,String>> labels;
        private Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<List<WorkflowTemplateParameterArgs>> parameters;
        private Output<WorkflowTemplatePlacementArgs> placement;
        private @Nullable Output<String> project;
        private @Nullable Output<Integer> version;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkflowTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dagTimeout = defaults.dagTimeout;
    	      this.jobs = defaults.jobs;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.placement = defaults.placement;
    	      this.project = defaults.project;
    	      this.version = defaults.version;
        }

        public Builder dagTimeout(@Nullable Output<String> dagTimeout) {
            this.dagTimeout = dagTimeout;
            return this;
        }
        public Builder dagTimeout(@Nullable String dagTimeout) {
            this.dagTimeout = Codegen.ofNullable(dagTimeout);
            return this;
        }
        public Builder jobs(Output<List<WorkflowTemplateJobArgs>> jobs) {
            this.jobs = Objects.requireNonNull(jobs);
            return this;
        }
        public Builder jobs(List<WorkflowTemplateJobArgs> jobs) {
            this.jobs = Output.of(Objects.requireNonNull(jobs));
            return this;
        }
        public Builder jobs(WorkflowTemplateJobArgs... jobs) {
            return jobs(List.of(jobs));
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder parameters(@Nullable Output<List<WorkflowTemplateParameterArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable List<WorkflowTemplateParameterArgs> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder parameters(WorkflowTemplateParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder placement(Output<WorkflowTemplatePlacementArgs> placement) {
            this.placement = Objects.requireNonNull(placement);
            return this;
        }
        public Builder placement(WorkflowTemplatePlacementArgs placement) {
            this.placement = Output.of(Objects.requireNonNull(placement));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder version(@Nullable Output<Integer> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable Integer version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }        public WorkflowTemplateArgs build() {
            return new WorkflowTemplateArgs(dagTimeout, jobs, labels, location, name, parameters, placement, project, version);
        }
    }
}
