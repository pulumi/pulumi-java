// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterInterfaceState extends com.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceState Empty = new RouterInterfaceState();

    /**
     * The name or resource link to the
     * VLAN interconnect for this interface. Changing this forces a new interface to
     * be created. Only one of `vpn_tunnel` and `interconnect_attachment` can be
     * specified.
     * 
     */
    @Import(name="interconnectAttachment")
    private @Nullable Output<String> interconnectAttachment;

    public Optional<Output<String>> interconnectAttachment() {
        return Optional.ofNullable(this.interconnectAttachment);
    }

    /**
     * IP address and range of the interface. The IP range must be
     * in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="ipRange")
    private @Nullable Output<String> ipRange;

    public Optional<Output<String>> ipRange() {
        return Optional.ofNullable(this.ipRange);
    }

    /**
     * A unique name for the interface, required by GCE. Changing
     * this forces a new interface to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which this interface&#39;s router belongs. If it
     * is not provided, the provider project is used. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region this interface&#39;s router sits in. If not specified,
     * the project region will be used. Changing this forces a new interface to be
     * created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the router this interface will be attached to.
     * Changing this forces a new interface to be created.
     * 
     */
    @Import(name="router")
    private @Nullable Output<String> router;

    public Optional<Output<String>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * The name or resource link to the VPN tunnel this
     * interface will be linked to. Changing this forces a new interface to be created. Only
     * one of `vpn_tunnel` and `interconnect_attachment` can be specified.
     * 
     */
    @Import(name="vpnTunnel")
    private @Nullable Output<String> vpnTunnel;

    public Optional<Output<String>> vpnTunnel() {
        return Optional.ofNullable(this.vpnTunnel);
    }

    private RouterInterfaceState() {}

    private RouterInterfaceState(RouterInterfaceState $) {
        this.interconnectAttachment = $.interconnectAttachment;
        this.ipRange = $.ipRange;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.router = $.router;
        this.vpnTunnel = $.vpnTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterInterfaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterInterfaceState $;

        public Builder() {
            $ = new RouterInterfaceState();
        }

        public Builder(RouterInterfaceState defaults) {
            $ = new RouterInterfaceState(Objects.requireNonNull(defaults));
        }

        public Builder interconnectAttachment(@Nullable Output<String> interconnectAttachment) {
            $.interconnectAttachment = interconnectAttachment;
            return this;
        }

        public Builder interconnectAttachment(String interconnectAttachment) {
            return interconnectAttachment(Output.of(interconnectAttachment));
        }

        public Builder ipRange(@Nullable Output<String> ipRange) {
            $.ipRange = ipRange;
            return this;
        }

        public Builder ipRange(String ipRange) {
            return ipRange(Output.of(ipRange));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder router(@Nullable Output<String> router) {
            $.router = router;
            return this;
        }

        public Builder router(String router) {
            return router(Output.of(router));
        }

        public Builder vpnTunnel(@Nullable Output<String> vpnTunnel) {
            $.vpnTunnel = vpnTunnel;
            return this;
        }

        public Builder vpnTunnel(String vpnTunnel) {
            return vpnTunnel(Output.of(vpnTunnel));
        }

        public RouterInterfaceState build() {
            return $;
        }
    }

}
