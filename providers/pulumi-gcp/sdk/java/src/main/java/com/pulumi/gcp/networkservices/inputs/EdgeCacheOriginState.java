// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.networkservices.inputs.EdgeCacheOriginTimeoutGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EdgeCacheOriginState extends com.pulumi.resources.ResourceArgs {

    public static final EdgeCacheOriginState Empty = new EdgeCacheOriginState();

    /**
     * A human-readable description of the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The Origin resource to try when the current origin cannot be reached.
     * After maxAttempts is reached, the configured failoverOrigin will be used to fulfil the request.
     * The value of timeout.maxAttemptsTimeout dictates the timeout across all origins.
     * A reference to a Topic resource.
     * 
     */
    @Import(name="failoverOrigin")
      private final @Nullable Output<String> failoverOrigin;

    public Output<String> failoverOrigin() {
        return this.failoverOrigin == null ? Codegen.empty() : this.failoverOrigin;
    }

    /**
     * Set of label tags associated with the EdgeCache resource.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one of the retryConditions.
     * Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is specified. That failoverOrigin may specify its own maxAttempts,
     * retryConditions and failoverOrigin to control its own cache fill failures.
     * The total number of allowed attempts to cache fill across this and failover origins is limited to four.
     * The total time allowed for cache fill attempts across this and failover origins can be controlled with maxAttemptsTimeout.
     * The last valid response from an origin will be returned to the client.
     * If no origin returns a valid response, an HTTP 503 will be returned to the client.
     * Defaults to 1. Must be a value greater than 0 and less than 4.
     * 
     */
    @Import(name="maxAttempts")
      private final @Nullable Output<Integer> maxAttempts;

    public Output<Integer> maxAttempts() {
        return this.maxAttempts == null ? Codegen.empty() : this.maxAttempts;
    }

    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud Storage bucket.
     * This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com IPv4:35.218.1.1 IPv6:[2607:f8b0:4012:809::200e] Cloud Storage: gs://bucketname
     * When providing an FQDN (hostname), it must be publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable.
     * If a Cloud Storage bucket is provided, it must be in the canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
     * 
     */
    @Import(name="originAddress")
      private final @Nullable Output<String> originAddress;

    public Output<String> originAddress() {
        return this.originAddress == null ? Codegen.empty() : this.originAddress;
    }

    /**
     * The port to connect to the origin on.
     * Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users use HTTP2 for both security & performance.
     * When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed, unexpired TLS (SSL) certificate must be presented by the origin server.
     * Possible values are `HTTP2`, `HTTPS`, and `HTTP`.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<String> protocol;

    public Output<String> protocol() {
        return this.protocol == null ? Codegen.empty() : this.protocol;
    }

    /**
     * Specifies one or more retry conditions for the configured origin.
     * If the failure mode during a connection attempt to the origin matches the configured retryCondition(s),
     * the origin request will be retried up to maxAttempts times. The failoverOrigin, if configured, will then be used to satisfy the request.
     * The default retryCondition is "CONNECT_FAILURE".
     * retryConditions apply to this origin, and not subsequent failoverOrigin(s),
     * which may specify their own retryConditions and maxAttempts.
     * Valid values are:
     * - CONNECT_FAILURE: Retry on failures connecting to origins, for example due to connection timeouts.
     * - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
     * - GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504.
     * - RETRIABLE_4XX: Retry for retriable 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests)
     * - NOT_FOUND: Retry if the origin returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
     *   Each value may be one of `CONNECT_FAILURE`, `HTTP_5XX`, `GATEWAY_ERROR`, `RETRIABLE_4XX`, and `NOT_FOUND`.
     * 
     */
    @Import(name="retryConditions")
      private final @Nullable Output<List<String>> retryConditions;

    public Output<List<String>> retryConditions() {
        return this.retryConditions == null ? Codegen.empty() : this.retryConditions;
    }

    /**
     * The connection and HTTP timeout configuration for this origin.
     * Structure is documented below.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<EdgeCacheOriginTimeoutGetArgs> timeout;

    public Output<EdgeCacheOriginTimeoutGetArgs> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    public EdgeCacheOriginState(
        @Nullable Output<String> description,
        @Nullable Output<String> failoverOrigin,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<Integer> maxAttempts,
        @Nullable Output<String> name,
        @Nullable Output<String> originAddress,
        @Nullable Output<Integer> port,
        @Nullable Output<String> project,
        @Nullable Output<String> protocol,
        @Nullable Output<List<String>> retryConditions,
        @Nullable Output<EdgeCacheOriginTimeoutGetArgs> timeout) {
        this.description = description;
        this.failoverOrigin = failoverOrigin;
        this.labels = labels;
        this.maxAttempts = maxAttempts;
        this.name = name;
        this.originAddress = originAddress;
        this.port = port;
        this.project = project;
        this.protocol = protocol;
        this.retryConditions = retryConditions;
        this.timeout = timeout;
    }

    private EdgeCacheOriginState() {
        this.description = Codegen.empty();
        this.failoverOrigin = Codegen.empty();
        this.labels = Codegen.empty();
        this.maxAttempts = Codegen.empty();
        this.name = Codegen.empty();
        this.originAddress = Codegen.empty();
        this.port = Codegen.empty();
        this.project = Codegen.empty();
        this.protocol = Codegen.empty();
        this.retryConditions = Codegen.empty();
        this.timeout = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheOriginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> failoverOrigin;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<Integer> maxAttempts;
        private @Nullable Output<String> name;
        private @Nullable Output<String> originAddress;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> project;
        private @Nullable Output<String> protocol;
        private @Nullable Output<List<String>> retryConditions;
        private @Nullable Output<EdgeCacheOriginTimeoutGetArgs> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(EdgeCacheOriginState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.failoverOrigin = defaults.failoverOrigin;
    	      this.labels = defaults.labels;
    	      this.maxAttempts = defaults.maxAttempts;
    	      this.name = defaults.name;
    	      this.originAddress = defaults.originAddress;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.protocol = defaults.protocol;
    	      this.retryConditions = defaults.retryConditions;
    	      this.timeout = defaults.timeout;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder failoverOrigin(@Nullable Output<String> failoverOrigin) {
            this.failoverOrigin = failoverOrigin;
            return this;
        }
        public Builder failoverOrigin(@Nullable String failoverOrigin) {
            this.failoverOrigin = Codegen.ofNullable(failoverOrigin);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder maxAttempts(@Nullable Output<Integer> maxAttempts) {
            this.maxAttempts = maxAttempts;
            return this;
        }
        public Builder maxAttempts(@Nullable Integer maxAttempts) {
            this.maxAttempts = Codegen.ofNullable(maxAttempts);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder originAddress(@Nullable Output<String> originAddress) {
            this.originAddress = originAddress;
            return this;
        }
        public Builder originAddress(@Nullable String originAddress) {
            this.originAddress = Codegen.ofNullable(originAddress);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder protocol(@Nullable Output<String> protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder protocol(@Nullable String protocol) {
            this.protocol = Codegen.ofNullable(protocol);
            return this;
        }
        public Builder retryConditions(@Nullable Output<List<String>> retryConditions) {
            this.retryConditions = retryConditions;
            return this;
        }
        public Builder retryConditions(@Nullable List<String> retryConditions) {
            this.retryConditions = Codegen.ofNullable(retryConditions);
            return this;
        }
        public Builder retryConditions(String... retryConditions) {
            return retryConditions(List.of(retryConditions));
        }
        public Builder timeout(@Nullable Output<EdgeCacheOriginTimeoutGetArgs> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable EdgeCacheOriginTimeoutGetArgs timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }        public EdgeCacheOriginState build() {
            return new EdgeCacheOriginState(description, failoverOrigin, labels, maxAttempts, name, originAddress, port, project, protocol, retryConditions, timeout);
        }
    }
}
