// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.osconfig.OsPolicyAssignmentArgs;
import com.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentState;
import com.pulumi.gcp.osconfig.outputs.OsPolicyAssignmentInstanceFilter;
import com.pulumi.gcp.osconfig.outputs.OsPolicyAssignmentOsPolicy;
import com.pulumi.gcp.osconfig.outputs.OsPolicyAssignmentRollout;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents an OSPolicyAssignment resource.
 * 
 * ## Example Usage
 * ### Fixed_os_policy_assignment
 * An example of an osconfig os policy assignment with fixed rollout disruption budget
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new OsPolicyAssignment(&#34;primary&#34;, OsPolicyAssignmentArgs.builder()        
 *             .description(&#34;A test os policy assignment&#34;)
 *             .instanceFilter(OsPolicyAssignmentInstanceFilter.builder()
 *                 .all(false)
 *                 .exclusionLabels(OsPolicyAssignmentInstanceFilterExclusionLabel.builder()
 *                     .labels(Map.of(&#34;label-two&#34;, &#34;value-two&#34;))
 *                     .build())
 *                 .inclusionLabels(OsPolicyAssignmentInstanceFilterInclusionLabel.builder()
 *                     .labels(Map.of(&#34;label-one&#34;, &#34;value-one&#34;))
 *                     .build())
 *                 .inventories(OsPolicyAssignmentInstanceFilterInventory.builder()
 *                     .osShortName(&#34;centos&#34;)
 *                     .osVersion(&#34;8.*&#34;)
 *                     .build())
 *                 .build())
 *             .location(&#34;us-west1-a&#34;)
 *             .osPolicies(OsPolicyAssignmentOsPolicy.builder()
 *                 .allowNoResourceGroupMatch(false)
 *                 .description(&#34;A test os policy&#34;)
 *                 .id(&#34;policy&#34;)
 *                 .mode(&#34;VALIDATION&#34;)
 *                 .resourceGroups(                
 *                     OsPolicyAssignmentOsPolicyResourceGroup.builder()
 *                         .inventoryFilters(OsPolicyAssignmentOsPolicyResourceGroupInventoryFilter.builder()
 *                             .osShortName(&#34;centos&#34;)
 *                             .osVersion(&#34;8.*&#34;)
 *                             .build())
 *                         .resources(                        
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;apt&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .apt(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgApt.builder()
 *                                         .name(&#34;bazel&#34;)
 *                                         .build())
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;deb1&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .deb(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDeb.builder()
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSource.builder()
 *                                             .localPath(&#34;$HOME/package.deb&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;deb2&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .deb(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDeb.builder()
 *                                         .pullDeps(true)
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSource.builder()
 *                                             .allowInsecure(true)
 *                                             .remote(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceRemote.builder()
 *                                                 .sha256Checksum(&#34;3bbfd1043cd7afdb78cf9afec36c0c5370d2fea98166537b4e67f3816f256025&#34;)
 *                                                 .uri(&#34;ftp.us.debian.org/debian/package.deb&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .build())
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;deb3&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .deb(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDeb.builder()
 *                                         .pullDeps(true)
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSource.builder()
 *                                             .gcs(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSourceGcs.builder()
 *                                                 .bucket(&#34;test-bucket&#34;)
 *                                                 .generation(1)
 *                                                 .object(&#34;test-object&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .build())
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;yum&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .yum(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgYum.builder()
 *                                         .name(&#34;gstreamer-plugins-base-devel.x86_64&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;zypper&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .zypper(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgZypper.builder()
 *                                         .name(&#34;gcc&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;rpm1&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .rpm(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpm.builder()
 *                                         .pullDeps(true)
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSource.builder()
 *                                             .localPath(&#34;$HOME/package.rpm&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;rpm2&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .rpm(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpm.builder()
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSource.builder()
 *                                             .allowInsecure(true)
 *                                             .remote(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceRemote.builder()
 *                                                 .sha256Checksum(&#34;3bbfd1043cd7afdb78cf9afec36c0c5370d2fea98166537b4e67f3816f256025&#34;)
 *                                                 .uri(&#34;https://mirror.jaleco.com/centos/8.3.2011/BaseOS/x86_64/os/Packages/efi-filesystem-3-2.el8.noarch.rpm&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;rpm3&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .rpm(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpm.builder()
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSource.builder()
 *                                             .gcs(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgRpmSourceGcs.builder()
 *                                                 .bucket(&#34;test-bucket&#34;)
 *                                                 .generation(1)
 *                                                 .object(&#34;test-object&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                         .build(),
 *                     OsPolicyAssignmentOsPolicyResourceGroup.builder()
 *                         .resources(                        
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;apt-to-deb&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .apt(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgApt.builder()
 *                                         .name(&#34;bazel&#34;)
 *                                         .build())
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;deb-local-path-to-gcs&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .deb(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDeb.builder()
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgDebSource.builder()
 *                                             .localPath(&#34;$HOME/package.deb&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;googet&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .googet(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgGooget.builder()
 *                                         .name(&#34;gcc&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;msi1&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .msi(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsi.builder()
 *                                         .properties(&#34;REBOOT=ReallySuppress&#34;)
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSource.builder()
 *                                             .localPath(&#34;$HOME/package.msi&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;msi2&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .msi(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsi.builder()
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSource.builder()
 *                                             .allowInsecure(true)
 *                                             .remote(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceRemote.builder()
 *                                                 .sha256Checksum(&#34;3bbfd1043cd7afdb78cf9afec36c0c5370d2fea98166537b4e67f3816f256025&#34;)
 *                                                 .uri(&#34;https://remote.uri.com/package.msi&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;msi3&#34;)
 *                                 .pkg(OsPolicyAssignmentOsPolicyResourceGroupResourcePkg.builder()
 *                                     .desiredState(&#34;INSTALLED&#34;)
 *                                     .msi(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsi.builder()
 *                                         .source(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSource.builder()
 *                                             .gcs(OsPolicyAssignmentOsPolicyResourceGroupResourcePkgMsiSourceGcs.builder()
 *                                                 .bucket(&#34;test-bucket&#34;)
 *                                                 .generation(1)
 *                                                 .object(&#34;test-object&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                         .build())
 *                 .build())
 *             .project(&#34;my-project-name&#34;)
 *             .rollout(OsPolicyAssignmentRollout.builder()
 *                 .disruptionBudget(OsPolicyAssignmentRolloutDisruptionBudget.builder()
 *                     .fixed(1)
 *                     .build())
 *                 .minWaitDuration(&#34;3.5s&#34;)
 *                 .build())
 *             .build());
 * 
 *         }
 * }
 * ```
 * ### Percent_os_policy_assignment
 * An example of an osconfig os policy assignment with percent rollout disruption budget
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new OsPolicyAssignment(&#34;primary&#34;, OsPolicyAssignmentArgs.builder()        
 *             .description(&#34;A test os policy assignment&#34;)
 *             .instanceFilter(OsPolicyAssignmentInstanceFilter.builder()
 *                 .all(true)
 *                 .build())
 *             .location(&#34;us-west1-a&#34;)
 *             .osPolicies(OsPolicyAssignmentOsPolicy.builder()
 *                 .id(&#34;policy&#34;)
 *                 .mode(&#34;VALIDATION&#34;)
 *                 .resourceGroups(                
 *                     OsPolicyAssignmentOsPolicyResourceGroup.builder()
 *                         .resources(                        
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;apt-to-yum&#34;)
 *                                 .repository(OsPolicyAssignmentOsPolicyResourceGroupResourceRepository.builder()
 *                                     .apt(OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryApt.builder()
 *                                         .archiveType(&#34;DEB&#34;)
 *                                         .components(&#34;doc&#34;)
 *                                         .distribution(&#34;debian&#34;)
 *                                         .gpgKey(&#34;.gnupg/pubring.kbx&#34;)
 *                                         .uri(&#34;https://atl.mirrors.clouvider.net/debian&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;yum&#34;)
 *                                 .repository(OsPolicyAssignmentOsPolicyResourceGroupResourceRepository.builder()
 *                                     .yum(OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryYum.builder()
 *                                         .baseUrl(&#34;http://centos.s.uw.edu/centos/&#34;)
 *                                         .displayName(&#34;yum&#34;)
 *                                         .gpgKeys(&#34;RPM-GPG-KEY-CentOS-7&#34;)
 *                                         .id(&#34;yum&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;zypper&#34;)
 *                                 .repository(OsPolicyAssignmentOsPolicyResourceGroupResourceRepository.builder()
 *                                     .zypper(OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryZypper.builder()
 *                                         .baseUrl(&#34;http://mirror.dal10.us.leaseweb.net/opensuse&#34;)
 *                                         .displayName(&#34;zypper&#34;)
 *                                         .gpgKeys(&#34;sample-key-uri&#34;)
 *                                         .id(&#34;zypper&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .id(&#34;goo&#34;)
 *                                 .repository(OsPolicyAssignmentOsPolicyResourceGroupResourceRepository.builder()
 *                                     .goo(OsPolicyAssignmentOsPolicyResourceGroupResourceRepositoryGoo.builder()
 *                                         .name(&#34;goo&#34;)
 *                                         .url(&#34;https://foo.com/googet/bar&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .exec(OsPolicyAssignmentOsPolicyResourceGroupResourceExec.builder()
 *                                     .enforce(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforce.builder()
 *                                         .args(&#34;arg1&#34;)
 *                                         .file(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFile.builder()
 *                                             .allowInsecure(true)
 *                                             .remote(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileRemote.builder()
 *                                                 .sha256Checksum(&#34;c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063&#34;)
 *                                                 .uri(&#34;https://www.example.com/script.sh&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .build())
 *                                     .validate(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidate.builder()
 *                                         .args(&#34;arg1&#34;)
 *                                         .file(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFile.builder()
 *                                             .localPath(&#34;$HOME/script.sh&#34;)
 *                                             .build())
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .id(&#34;exec1&#34;)
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .exec(OsPolicyAssignmentOsPolicyResourceGroupResourceExec.builder()
 *                                     .enforce(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforce.builder()
 *                                         .args(&#34;arg1&#34;)
 *                                         .file(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFile.builder()
 *                                             .localPath(&#34;$HOME/script.sh&#34;)
 *                                             .build())
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .build())
 *                                     .validate(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidate.builder()
 *                                         .args(&#34;arg1&#34;)
 *                                         .file(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFile.builder()
 *                                             .allowInsecure(true)
 *                                             .remote(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileRemote.builder()
 *                                                 .sha256Checksum(&#34;c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063&#34;)
 *                                                 .uri(&#34;https://www.example.com/script.sh&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .id(&#34;exec2&#34;)
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .exec(OsPolicyAssignmentOsPolicyResourceGroupResourceExec.builder()
 *                                     .enforce(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforce.builder()
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .script(&#34;pwd&#34;)
 *                                         .build())
 *                                     .validate(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidate.builder()
 *                                         .file(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFile.builder()
 *                                             .allowInsecure(true)
 *                                             .gcs(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidateFileGcs.builder()
 *                                                 .bucket(&#34;test-bucket&#34;)
 *                                                 .generation(1)
 *                                                 .object(&#34;test-object&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .id(&#34;exec3&#34;)
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .exec(OsPolicyAssignmentOsPolicyResourceGroupResourceExec.builder()
 *                                     .enforce(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforce.builder()
 *                                         .file(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFile.builder()
 *                                             .allowInsecure(true)
 *                                             .gcs(OsPolicyAssignmentOsPolicyResourceGroupResourceExecEnforceFileGcs.builder()
 *                                                 .bucket(&#34;test-bucket&#34;)
 *                                                 .generation(1)
 *                                                 .object(&#34;test-object&#34;)
 *                                                 .build())
 *                                             .build())
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .build())
 *                                     .validate(OsPolicyAssignmentOsPolicyResourceGroupResourceExecValidate.builder()
 *                                         .interpreter(&#34;SHELL&#34;)
 *                                         .outputFilePath(&#34;$HOME/out&#34;)
 *                                         .script(&#34;pwd&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .id(&#34;exec4&#34;)
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFile.builder()
 *                                     .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFileFile.builder()
 *                                         .localPath(&#34;$HOME/file&#34;)
 *                                         .build())
 *                                     .path(&#34;$HOME/file&#34;)
 *                                     .state(&#34;PRESENT&#34;)
 *                                     .build())
 *                                 .id(&#34;file1&#34;)
 *                                 .build())
 *                         .build(),
 *                     OsPolicyAssignmentOsPolicyResourceGroup.builder()
 *                         .resources(                        
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFile.builder()
 *                                     .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFileFile.builder()
 *                                         .allowInsecure(true)
 *                                         .remote(OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileRemote.builder()
 *                                             .sha256Checksum(&#34;c7938fed83afdccbb0e86a2a2e4cad7d5035012ca3214b4a61268393635c3063&#34;)
 *                                             .uri(&#34;https://www.example.com/file&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .path(&#34;$HOME/file&#34;)
 *                                     .state(&#34;PRESENT&#34;)
 *                                     .build())
 *                                 .id(&#34;file2&#34;)
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFile.builder()
 *                                     .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFileFile.builder()
 *                                         .gcs(OsPolicyAssignmentOsPolicyResourceGroupResourceFileFileGcs.builder()
 *                                             .bucket(&#34;test-bucket&#34;)
 *                                             .generation(1)
 *                                             .object(&#34;test-object&#34;)
 *                                             .build())
 *                                         .build())
 *                                     .path(&#34;$HOME/file&#34;)
 *                                     .state(&#34;PRESENT&#34;)
 *                                     .build())
 *                                 .id(&#34;file3&#34;)
 *                                 .build(),
 *                             OsPolicyAssignmentOsPolicyResourceGroupResource.builder()
 *                                 .file(OsPolicyAssignmentOsPolicyResourceGroupResourceFile.builder()
 *                                     .content(&#34;sample-content&#34;)
 *                                     .path(&#34;$HOME/file&#34;)
 *                                     .state(&#34;PRESENT&#34;)
 *                                     .build())
 *                                 .id(&#34;file4&#34;)
 *                                 .build())
 *                         .build())
 *                 .build())
 *             .project(&#34;my-project-name&#34;)
 *             .rollout(OsPolicyAssignmentRollout.builder()
 *                 .disruptionBudget(OsPolicyAssignmentRolloutDisruptionBudget.builder()
 *                     .percent(1)
 *                     .build())
 *                 .minWaitDuration(&#34;3.5s&#34;)
 *                 .build())
 *             .build());
 * 
 *         }
 * }
 * ```
 * 
 * ## Import
 * 
 * OSPolicyAssignment can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:osconfig/osPolicyAssignment:OsPolicyAssignment")
public class OsPolicyAssignment extends com.pulumi.resources.CustomResource {
    /**
     * Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
     * policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
     * this field.
     * 
     */
    @Export(name="baseline", type=Boolean.class, parameters={})
    private Output<Boolean> baseline;

    /**
     * @return Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS
     * policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for
     * this field.
     * 
     */
    public Output<Boolean> baseline() {
        return this.baseline;
    }
    /**
     * Output only. Indicates that this revision deletes the OS policy assignment.
     * 
     */
    @Export(name="deleted", type=Boolean.class, parameters={})
    private Output<Boolean> deleted;

    /**
     * @return Output only. Indicates that this revision deletes the OS policy assignment.
     * 
     */
    public Output<Boolean> deleted() {
        return this.deleted;
    }
    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return OS policy assignment description. Length of the description is limited to 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The etag for this OS policy assignment. If this is provided on update, it must match the server&#39;s etag.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return The etag for this OS policy assignment. If this is provided on update, it must match the server&#39;s etag.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Required. Filter to select VMs.
     * 
     */
    @Export(name="instanceFilter", type=OsPolicyAssignmentInstanceFilter.class, parameters={})
    private Output<OsPolicyAssignmentInstanceFilter> instanceFilter;

    /**
     * @return Required. Filter to select VMs.
     * 
     */
    public Output<OsPolicyAssignmentInstanceFilter> instanceFilter() {
        return this.instanceFilter;
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Required. The name of the repository.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Required. The name of the repository.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Required. List of OS policies to be applied to the VMs.
     * 
     */
    @Export(name="osPolicies", type=List.class, parameters={OsPolicyAssignmentOsPolicy.class})
    private Output<List<OsPolicyAssignmentOsPolicy>> osPolicies;

    /**
     * @return Required. List of OS policies to be applied to the VMs.
     * 
     */
    public Output<List<OsPolicyAssignmentOsPolicy>> osPolicies() {
        return this.osPolicies;
    }
    /**
     * The project for the resource
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
     * `rollout_state` is one of: * IN_PROGRESS * CANCELLING
     * 
     */
    @Export(name="reconciling", type=Boolean.class, parameters={})
    private Output<Boolean> reconciling;

    /**
     * @return Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the
     * `rollout_state` is one of: * IN_PROGRESS * CANCELLING
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Output only. The timestamp that the revision was created.
     * 
     */
    @Export(name="revisionCreateTime", type=String.class, parameters={})
    private Output<String> revisionCreateTime;

    /**
     * @return Output only. The timestamp that the revision was created.
     * 
     */
    public Output<String> revisionCreateTime() {
        return this.revisionCreateTime;
    }
    /**
     * Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    @Export(name="revisionId", type=String.class, parameters={})
    private Output<String> revisionId;

    /**
     * @return Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    public Output<String> revisionId() {
        return this.revisionId;
    }
    /**
     * Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     * 
     */
    @Export(name="rollout", type=OsPolicyAssignmentRollout.class, parameters={})
    private Output<OsPolicyAssignmentRollout> rollout;

    /**
     * @return Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     * 
     */
    public Output<OsPolicyAssignmentRollout> rollout() {
        return this.rollout;
    }
    /**
     * Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
     * CANCELLED, SUCCEEDED
     * 
     */
    @Export(name="rolloutState", type=String.class, parameters={})
    private Output<String> rolloutState;

    /**
     * @return Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING,
     * CANCELLED, SUCCEEDED
     * 
     */
    public Output<String> rolloutState() {
        return this.rolloutState;
    }
    /**
     * Output only. Server generated unique id for the OS policy assignment resource.
     * 
     */
    @Export(name="uid", type=String.class, parameters={})
    private Output<String> uid;

    /**
     * @return Output only. Server generated unique id for the OS policy assignment resource.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OsPolicyAssignment(String name) {
        this(name, OsPolicyAssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OsPolicyAssignment(String name, OsPolicyAssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OsPolicyAssignment(String name, OsPolicyAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/osPolicyAssignment:OsPolicyAssignment", name, args == null ? OsPolicyAssignmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OsPolicyAssignment(String name, Output<String> id, @Nullable OsPolicyAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/osPolicyAssignment:OsPolicyAssignment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OsPolicyAssignment get(String name, Output<String> id, @Nullable OsPolicyAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OsPolicyAssignment(name, id, state, options);
    }
}
