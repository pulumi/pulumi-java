// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceSettingsBackupConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceSettingsBackupConfigurationArgs Empty = new DatabaseInstanceSettingsBackupConfigurationArgs();

    /**
     * Backup retention settings. The configuration is detailed below.
     * 
     */
    @Import(name="backupRetentionSettings")
    private @Nullable Output<DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsArgs> backupRetentionSettings;

    public Optional<Output<DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsArgs>> backupRetentionSettings() {
        return Optional.ofNullable(this.backupRetentionSettings);
    }

    /**
     * True if binary logging is enabled.
     * Cannot be used with Postgres.
     * 
     */
    @Import(name="binaryLogEnabled")
    private @Nullable Output<Boolean> binaryLogEnabled;

    public Optional<Output<Boolean>> binaryLogEnabled() {
        return Optional.ofNullable(this.binaryLogEnabled);
    }

    /**
     * True if backup configuration is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The region where the backup will be stored
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation. Valid only for PostgreSQL instances.
     * 
     */
    @Import(name="pointInTimeRecoveryEnabled")
    private @Nullable Output<Boolean> pointInTimeRecoveryEnabled;

    public Optional<Output<Boolean>> pointInTimeRecoveryEnabled() {
        return Optional.ofNullable(this.pointInTimeRecoveryEnabled);
    }

    /**
     * `HH:MM` format time indicating when backup
     * configuration starts.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The number of days of transaction logs we retain for point in time restore, from 1-7.
     * 
     */
    @Import(name="transactionLogRetentionDays")
    private @Nullable Output<Integer> transactionLogRetentionDays;

    public Optional<Output<Integer>> transactionLogRetentionDays() {
        return Optional.ofNullable(this.transactionLogRetentionDays);
    }

    private DatabaseInstanceSettingsBackupConfigurationArgs() {}

    private DatabaseInstanceSettingsBackupConfigurationArgs(DatabaseInstanceSettingsBackupConfigurationArgs $) {
        this.backupRetentionSettings = $.backupRetentionSettings;
        this.binaryLogEnabled = $.binaryLogEnabled;
        this.enabled = $.enabled;
        this.location = $.location;
        this.pointInTimeRecoveryEnabled = $.pointInTimeRecoveryEnabled;
        this.startTime = $.startTime;
        this.transactionLogRetentionDays = $.transactionLogRetentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceSettingsBackupConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceSettingsBackupConfigurationArgs $;

        public Builder() {
            $ = new DatabaseInstanceSettingsBackupConfigurationArgs();
        }

        public Builder(DatabaseInstanceSettingsBackupConfigurationArgs defaults) {
            $ = new DatabaseInstanceSettingsBackupConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder backupRetentionSettings(@Nullable Output<DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsArgs> backupRetentionSettings) {
            $.backupRetentionSettings = backupRetentionSettings;
            return this;
        }

        public Builder backupRetentionSettings(DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsArgs backupRetentionSettings) {
            return backupRetentionSettings(Output.of(backupRetentionSettings));
        }

        public Builder binaryLogEnabled(@Nullable Output<Boolean> binaryLogEnabled) {
            $.binaryLogEnabled = binaryLogEnabled;
            return this;
        }

        public Builder binaryLogEnabled(Boolean binaryLogEnabled) {
            return binaryLogEnabled(Output.of(binaryLogEnabled));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder pointInTimeRecoveryEnabled(@Nullable Output<Boolean> pointInTimeRecoveryEnabled) {
            $.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
            return this;
        }

        public Builder pointInTimeRecoveryEnabled(Boolean pointInTimeRecoveryEnabled) {
            return pointInTimeRecoveryEnabled(Output.of(pointInTimeRecoveryEnabled));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder transactionLogRetentionDays(@Nullable Output<Integer> transactionLogRetentionDays) {
            $.transactionLogRetentionDays = transactionLogRetentionDays;
            return this;
        }

        public Builder transactionLogRetentionDays(Integer transactionLogRetentionDays) {
            return transactionLogRetentionDays(Output.of(transactionLogRetentionDays));
        }

        public DatabaseInstanceSettingsBackupConfigurationArgs build() {
            return $;
        }
    }

}
