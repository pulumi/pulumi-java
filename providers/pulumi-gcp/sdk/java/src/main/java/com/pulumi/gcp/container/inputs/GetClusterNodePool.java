// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.GetClusterNodePoolAutoscaling;
import com.pulumi.gcp.container.inputs.GetClusterNodePoolManagement;
import com.pulumi.gcp.container.inputs.GetClusterNodePoolNetworkConfig;
import com.pulumi.gcp.container.inputs.GetClusterNodePoolNodeConfig;
import com.pulumi.gcp.container.inputs.GetClusterNodePoolUpgradeSetting;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetClusterNodePool extends com.pulumi.resources.InvokeArgs {

    public static final GetClusterNodePool Empty = new GetClusterNodePool();

    @Import(name="autoscalings", required=true)
    private List<GetClusterNodePoolAutoscaling> autoscalings;

    public List<GetClusterNodePoolAutoscaling> autoscalings() {
        return this.autoscalings;
    }

    @Import(name="initialNodeCount", required=true)
    private Integer initialNodeCount;

    public Integer initialNodeCount() {
        return this.initialNodeCount;
    }

    @Import(name="instanceGroupUrls", required=true)
    private List<String> instanceGroupUrls;

    public List<String> instanceGroupUrls() {
        return this.instanceGroupUrls;
    }

    @Import(name="managedInstanceGroupUrls", required=true)
    private List<String> managedInstanceGroupUrls;

    public List<String> managedInstanceGroupUrls() {
        return this.managedInstanceGroupUrls;
    }

    @Import(name="managements", required=true)
    private List<GetClusterNodePoolManagement> managements;

    public List<GetClusterNodePoolManagement> managements() {
        return this.managements;
    }

    @Import(name="maxPodsPerNode", required=true)
    private Integer maxPodsPerNode;

    public Integer maxPodsPerNode() {
        return this.maxPodsPerNode;
    }

    /**
     * The name of the cluster.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    @Import(name="namePrefix", required=true)
    private String namePrefix;

    public String namePrefix() {
        return this.namePrefix;
    }

    @Import(name="networkConfigs", required=true)
    private List<GetClusterNodePoolNetworkConfig> networkConfigs;

    public List<GetClusterNodePoolNetworkConfig> networkConfigs() {
        return this.networkConfigs;
    }

    @Import(name="nodeConfigs", required=true)
    private List<GetClusterNodePoolNodeConfig> nodeConfigs;

    public List<GetClusterNodePoolNodeConfig> nodeConfigs() {
        return this.nodeConfigs;
    }

    @Import(name="nodeCount", required=true)
    private Integer nodeCount;

    public Integer nodeCount() {
        return this.nodeCount;
    }

    @Import(name="nodeLocations", required=true)
    private List<String> nodeLocations;

    public List<String> nodeLocations() {
        return this.nodeLocations;
    }

    @Import(name="upgradeSettings", required=true)
    private List<GetClusterNodePoolUpgradeSetting> upgradeSettings;

    public List<GetClusterNodePoolUpgradeSetting> upgradeSettings() {
        return this.upgradeSettings;
    }

    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    private GetClusterNodePool() {}

    private GetClusterNodePool(GetClusterNodePool $) {
        this.autoscalings = $.autoscalings;
        this.initialNodeCount = $.initialNodeCount;
        this.instanceGroupUrls = $.instanceGroupUrls;
        this.managedInstanceGroupUrls = $.managedInstanceGroupUrls;
        this.managements = $.managements;
        this.maxPodsPerNode = $.maxPodsPerNode;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.networkConfigs = $.networkConfigs;
        this.nodeConfigs = $.nodeConfigs;
        this.nodeCount = $.nodeCount;
        this.nodeLocations = $.nodeLocations;
        this.upgradeSettings = $.upgradeSettings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClusterNodePool defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClusterNodePool $;

        public Builder() {
            $ = new GetClusterNodePool();
        }

        public Builder(GetClusterNodePool defaults) {
            $ = new GetClusterNodePool(Objects.requireNonNull(defaults));
        }

        public Builder autoscalings(List<GetClusterNodePoolAutoscaling> autoscalings) {
            $.autoscalings = autoscalings;
            return this;
        }

        public Builder autoscalings(GetClusterNodePoolAutoscaling... autoscalings) {
            return autoscalings(List.of(autoscalings));
        }

        public Builder initialNodeCount(Integer initialNodeCount) {
            $.initialNodeCount = initialNodeCount;
            return this;
        }

        public Builder instanceGroupUrls(List<String> instanceGroupUrls) {
            $.instanceGroupUrls = instanceGroupUrls;
            return this;
        }

        public Builder instanceGroupUrls(String... instanceGroupUrls) {
            return instanceGroupUrls(List.of(instanceGroupUrls));
        }

        public Builder managedInstanceGroupUrls(List<String> managedInstanceGroupUrls) {
            $.managedInstanceGroupUrls = managedInstanceGroupUrls;
            return this;
        }

        public Builder managedInstanceGroupUrls(String... managedInstanceGroupUrls) {
            return managedInstanceGroupUrls(List.of(managedInstanceGroupUrls));
        }

        public Builder managements(List<GetClusterNodePoolManagement> managements) {
            $.managements = managements;
            return this;
        }

        public Builder managements(GetClusterNodePoolManagement... managements) {
            return managements(List.of(managements));
        }

        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            $.maxPodsPerNode = maxPodsPerNode;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder networkConfigs(List<GetClusterNodePoolNetworkConfig> networkConfigs) {
            $.networkConfigs = networkConfigs;
            return this;
        }

        public Builder networkConfigs(GetClusterNodePoolNetworkConfig... networkConfigs) {
            return networkConfigs(List.of(networkConfigs));
        }

        public Builder nodeConfigs(List<GetClusterNodePoolNodeConfig> nodeConfigs) {
            $.nodeConfigs = nodeConfigs;
            return this;
        }

        public Builder nodeConfigs(GetClusterNodePoolNodeConfig... nodeConfigs) {
            return nodeConfigs(List.of(nodeConfigs));
        }

        public Builder nodeCount(Integer nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        public Builder nodeLocations(List<String> nodeLocations) {
            $.nodeLocations = nodeLocations;
            return this;
        }

        public Builder nodeLocations(String... nodeLocations) {
            return nodeLocations(List.of(nodeLocations));
        }

        public Builder upgradeSettings(List<GetClusterNodePoolUpgradeSetting> upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        public Builder upgradeSettings(GetClusterNodePoolUpgradeSetting... upgradeSettings) {
            return upgradeSettings(List.of(upgradeSettings));
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public GetClusterNodePool build() {
            $.autoscalings = Objects.requireNonNull($.autoscalings, "expected parameter 'autoscalings' to be non-null");
            $.initialNodeCount = Objects.requireNonNull($.initialNodeCount, "expected parameter 'initialNodeCount' to be non-null");
            $.instanceGroupUrls = Objects.requireNonNull($.instanceGroupUrls, "expected parameter 'instanceGroupUrls' to be non-null");
            $.managedInstanceGroupUrls = Objects.requireNonNull($.managedInstanceGroupUrls, "expected parameter 'managedInstanceGroupUrls' to be non-null");
            $.managements = Objects.requireNonNull($.managements, "expected parameter 'managements' to be non-null");
            $.maxPodsPerNode = Objects.requireNonNull($.maxPodsPerNode, "expected parameter 'maxPodsPerNode' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.namePrefix = Objects.requireNonNull($.namePrefix, "expected parameter 'namePrefix' to be non-null");
            $.networkConfigs = Objects.requireNonNull($.networkConfigs, "expected parameter 'networkConfigs' to be non-null");
            $.nodeConfigs = Objects.requireNonNull($.nodeConfigs, "expected parameter 'nodeConfigs' to be non-null");
            $.nodeCount = Objects.requireNonNull($.nodeCount, "expected parameter 'nodeCount' to be non-null");
            $.nodeLocations = Objects.requireNonNull($.nodeLocations, "expected parameter 'nodeLocations' to be non-null");
            $.upgradeSettings = Objects.requireNonNull($.upgradeSettings, "expected parameter 'upgradeSettings' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
