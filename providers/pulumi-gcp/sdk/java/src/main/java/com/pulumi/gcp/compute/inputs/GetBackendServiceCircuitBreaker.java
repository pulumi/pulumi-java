// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GetBackendServiceCircuitBreakerConnectTimeout;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class GetBackendServiceCircuitBreaker extends com.pulumi.resources.InvokeArgs {

    public static final GetBackendServiceCircuitBreaker Empty = new GetBackendServiceCircuitBreaker();

    @Import(name="connectTimeouts", required=true)
    private List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts;

    public List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts() {
        return this.connectTimeouts;
    }

    @Import(name="maxConnections", required=true)
    private Integer maxConnections;

    public Integer maxConnections() {
        return this.maxConnections;
    }

    @Import(name="maxPendingRequests", required=true)
    private Integer maxPendingRequests;

    public Integer maxPendingRequests() {
        return this.maxPendingRequests;
    }

    @Import(name="maxRequests", required=true)
    private Integer maxRequests;

    public Integer maxRequests() {
        return this.maxRequests;
    }

    @Import(name="maxRequestsPerConnection", required=true)
    private Integer maxRequestsPerConnection;

    public Integer maxRequestsPerConnection() {
        return this.maxRequestsPerConnection;
    }

    @Import(name="maxRetries", required=true)
    private Integer maxRetries;

    public Integer maxRetries() {
        return this.maxRetries;
    }

    private GetBackendServiceCircuitBreaker() {}

    private GetBackendServiceCircuitBreaker(GetBackendServiceCircuitBreaker $) {
        this.connectTimeouts = $.connectTimeouts;
        this.maxConnections = $.maxConnections;
        this.maxPendingRequests = $.maxPendingRequests;
        this.maxRequests = $.maxRequests;
        this.maxRequestsPerConnection = $.maxRequestsPerConnection;
        this.maxRetries = $.maxRetries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackendServiceCircuitBreaker defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackendServiceCircuitBreaker $;

        public Builder() {
            $ = new GetBackendServiceCircuitBreaker();
        }

        public Builder(GetBackendServiceCircuitBreaker defaults) {
            $ = new GetBackendServiceCircuitBreaker(Objects.requireNonNull(defaults));
        }

        public Builder connectTimeouts(List<GetBackendServiceCircuitBreakerConnectTimeout> connectTimeouts) {
            $.connectTimeouts = connectTimeouts;
            return this;
        }

        public Builder connectTimeouts(GetBackendServiceCircuitBreakerConnectTimeout... connectTimeouts) {
            return connectTimeouts(List.of(connectTimeouts));
        }

        public Builder maxConnections(Integer maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        public Builder maxPendingRequests(Integer maxPendingRequests) {
            $.maxPendingRequests = maxPendingRequests;
            return this;
        }

        public Builder maxRequests(Integer maxRequests) {
            $.maxRequests = maxRequests;
            return this;
        }

        public Builder maxRequestsPerConnection(Integer maxRequestsPerConnection) {
            $.maxRequestsPerConnection = maxRequestsPerConnection;
            return this;
        }

        public Builder maxRetries(Integer maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        public GetBackendServiceCircuitBreaker build() {
            $.connectTimeouts = Objects.requireNonNull($.connectTimeouts, "expected parameter 'connectTimeouts' to be non-null");
            $.maxConnections = Objects.requireNonNull($.maxConnections, "expected parameter 'maxConnections' to be non-null");
            $.maxPendingRequests = Objects.requireNonNull($.maxPendingRequests, "expected parameter 'maxPendingRequests' to be non-null");
            $.maxRequests = Objects.requireNonNull($.maxRequests, "expected parameter 'maxRequests' to be non-null");
            $.maxRequestsPerConnection = Objects.requireNonNull($.maxRequestsPerConnection, "expected parameter 'maxRequestsPerConnection' to be non-null");
            $.maxRetries = Objects.requireNonNull($.maxRetries, "expected parameter 'maxRetries' to be non-null");
            return $;
        }
    }

}
