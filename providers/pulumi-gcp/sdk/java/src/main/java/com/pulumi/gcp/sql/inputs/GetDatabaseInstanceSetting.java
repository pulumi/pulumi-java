// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingBackupConfiguration;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingDatabaseFlag;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingInsightsConfig;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingIpConfiguration;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingLocationPreference;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingMaintenanceWindow;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class GetDatabaseInstanceSetting extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseInstanceSetting Empty = new GetDatabaseInstanceSetting();

    @Import(name="activationPolicy", required=true)
    private String activationPolicy;

    public String activationPolicy() {
        return this.activationPolicy;
    }

    @Import(name="availabilityType", required=true)
    private String availabilityType;

    public String availabilityType() {
        return this.availabilityType;
    }

    @Import(name="backupConfigurations", required=true)
    private List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations;

    public List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations() {
        return this.backupConfigurations;
    }

    @Import(name="collation", required=true)
    private String collation;

    public String collation() {
        return this.collation;
    }

    @Import(name="databaseFlags", required=true)
    private List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags;

    public List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags() {
        return this.databaseFlags;
    }

    @Import(name="diskAutoresize", required=true)
    private Boolean diskAutoresize;

    public Boolean diskAutoresize() {
        return this.diskAutoresize;
    }

    @Import(name="diskAutoresizeLimit", required=true)
    private Integer diskAutoresizeLimit;

    public Integer diskAutoresizeLimit() {
        return this.diskAutoresizeLimit;
    }

    @Import(name="diskSize", required=true)
    private Integer diskSize;

    public Integer diskSize() {
        return this.diskSize;
    }

    @Import(name="diskType", required=true)
    private String diskType;

    public String diskType() {
        return this.diskType;
    }

    @Import(name="insightsConfigs", required=true)
    private List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs;

    public List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs() {
        return this.insightsConfigs;
    }

    @Import(name="ipConfigurations", required=true)
    private List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations;

    public List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations() {
        return this.ipConfigurations;
    }

    @Import(name="locationPreferences", required=true)
    private List<GetDatabaseInstanceSettingLocationPreference> locationPreferences;

    public List<GetDatabaseInstanceSettingLocationPreference> locationPreferences() {
        return this.locationPreferences;
    }

    @Import(name="maintenanceWindows", required=true)
    private List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows;

    public List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }

    @Import(name="pricingPlan", required=true)
    private String pricingPlan;

    public String pricingPlan() {
        return this.pricingPlan;
    }

    @Import(name="tier", required=true)
    private String tier;

    public String tier() {
        return this.tier;
    }

    @Import(name="userLabels", required=true)
    private Map<String,String> userLabels;

    public Map<String,String> userLabels() {
        return this.userLabels;
    }

    @Import(name="version", required=true)
    private Integer version;

    public Integer version() {
        return this.version;
    }

    private GetDatabaseInstanceSetting() {}

    private GetDatabaseInstanceSetting(GetDatabaseInstanceSetting $) {
        this.activationPolicy = $.activationPolicy;
        this.availabilityType = $.availabilityType;
        this.backupConfigurations = $.backupConfigurations;
        this.collation = $.collation;
        this.databaseFlags = $.databaseFlags;
        this.diskAutoresize = $.diskAutoresize;
        this.diskAutoresizeLimit = $.diskAutoresizeLimit;
        this.diskSize = $.diskSize;
        this.diskType = $.diskType;
        this.insightsConfigs = $.insightsConfigs;
        this.ipConfigurations = $.ipConfigurations;
        this.locationPreferences = $.locationPreferences;
        this.maintenanceWindows = $.maintenanceWindows;
        this.pricingPlan = $.pricingPlan;
        this.tier = $.tier;
        this.userLabels = $.userLabels;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseInstanceSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseInstanceSetting $;

        public Builder() {
            $ = new GetDatabaseInstanceSetting();
        }

        public Builder(GetDatabaseInstanceSetting defaults) {
            $ = new GetDatabaseInstanceSetting(Objects.requireNonNull(defaults));
        }

        public Builder activationPolicy(String activationPolicy) {
            $.activationPolicy = activationPolicy;
            return this;
        }

        public Builder availabilityType(String availabilityType) {
            $.availabilityType = availabilityType;
            return this;
        }

        public Builder backupConfigurations(List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations) {
            $.backupConfigurations = backupConfigurations;
            return this;
        }

        public Builder backupConfigurations(GetDatabaseInstanceSettingBackupConfiguration... backupConfigurations) {
            return backupConfigurations(List.of(backupConfigurations));
        }

        public Builder collation(String collation) {
            $.collation = collation;
            return this;
        }

        public Builder databaseFlags(List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags) {
            $.databaseFlags = databaseFlags;
            return this;
        }

        public Builder databaseFlags(GetDatabaseInstanceSettingDatabaseFlag... databaseFlags) {
            return databaseFlags(List.of(databaseFlags));
        }

        public Builder diskAutoresize(Boolean diskAutoresize) {
            $.diskAutoresize = diskAutoresize;
            return this;
        }

        public Builder diskAutoresizeLimit(Integer diskAutoresizeLimit) {
            $.diskAutoresizeLimit = diskAutoresizeLimit;
            return this;
        }

        public Builder diskSize(Integer diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        public Builder insightsConfigs(List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs) {
            $.insightsConfigs = insightsConfigs;
            return this;
        }

        public Builder insightsConfigs(GetDatabaseInstanceSettingInsightsConfig... insightsConfigs) {
            return insightsConfigs(List.of(insightsConfigs));
        }

        public Builder ipConfigurations(List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations) {
            $.ipConfigurations = ipConfigurations;
            return this;
        }

        public Builder ipConfigurations(GetDatabaseInstanceSettingIpConfiguration... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }

        public Builder locationPreferences(List<GetDatabaseInstanceSettingLocationPreference> locationPreferences) {
            $.locationPreferences = locationPreferences;
            return this;
        }

        public Builder locationPreferences(GetDatabaseInstanceSettingLocationPreference... locationPreferences) {
            return locationPreferences(List.of(locationPreferences));
        }

        public Builder maintenanceWindows(List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows) {
            $.maintenanceWindows = maintenanceWindows;
            return this;
        }

        public Builder maintenanceWindows(GetDatabaseInstanceSettingMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }

        public Builder pricingPlan(String pricingPlan) {
            $.pricingPlan = pricingPlan;
            return this;
        }

        public Builder tier(String tier) {
            $.tier = tier;
            return this;
        }

        public Builder userLabels(Map<String,String> userLabels) {
            $.userLabels = userLabels;
            return this;
        }

        public Builder version(Integer version) {
            $.version = version;
            return this;
        }

        public GetDatabaseInstanceSetting build() {
            $.activationPolicy = Objects.requireNonNull($.activationPolicy, "expected parameter 'activationPolicy' to be non-null");
            $.availabilityType = Objects.requireNonNull($.availabilityType, "expected parameter 'availabilityType' to be non-null");
            $.backupConfigurations = Objects.requireNonNull($.backupConfigurations, "expected parameter 'backupConfigurations' to be non-null");
            $.collation = Objects.requireNonNull($.collation, "expected parameter 'collation' to be non-null");
            $.databaseFlags = Objects.requireNonNull($.databaseFlags, "expected parameter 'databaseFlags' to be non-null");
            $.diskAutoresize = Objects.requireNonNull($.diskAutoresize, "expected parameter 'diskAutoresize' to be non-null");
            $.diskAutoresizeLimit = Objects.requireNonNull($.diskAutoresizeLimit, "expected parameter 'diskAutoresizeLimit' to be non-null");
            $.diskSize = Objects.requireNonNull($.diskSize, "expected parameter 'diskSize' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.insightsConfigs = Objects.requireNonNull($.insightsConfigs, "expected parameter 'insightsConfigs' to be non-null");
            $.ipConfigurations = Objects.requireNonNull($.ipConfigurations, "expected parameter 'ipConfigurations' to be non-null");
            $.locationPreferences = Objects.requireNonNull($.locationPreferences, "expected parameter 'locationPreferences' to be non-null");
            $.maintenanceWindows = Objects.requireNonNull($.maintenanceWindows, "expected parameter 'maintenanceWindows' to be non-null");
            $.pricingPlan = Objects.requireNonNull($.pricingPlan, "expected parameter 'pricingPlan' to be non-null");
            $.tier = Objects.requireNonNull($.tier, "expected parameter 'tier' to be non-null");
            $.userLabels = Objects.requireNonNull($.userLabels, "expected parameter 'userLabels' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
