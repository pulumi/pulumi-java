// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PatchDeploymentPatchConfigAptArgs extends com.pulumi.resources.ResourceArgs {

    public static final PatchDeploymentPatchConfigAptArgs Empty = new PatchDeploymentPatchConfigAptArgs();

    /**
     * List of KBs to exclude from update.
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<String>> excludes;

    public Optional<Output<List<String>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated.
     * If these packages are not installed, they will be ignored. This field cannot be specified with
     * any other patch configuration fields.
     * 
     */
    @Import(name="exclusivePackages")
    private @Nullable Output<List<String>> exclusivePackages;

    public Optional<Output<List<String>>> exclusivePackages() {
        return Optional.ofNullable(this.exclusivePackages);
    }

    /**
     * By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
     * Possible values are `DIST` and `UPGRADE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private PatchDeploymentPatchConfigAptArgs() {}

    private PatchDeploymentPatchConfigAptArgs(PatchDeploymentPatchConfigAptArgs $) {
        this.excludes = $.excludes;
        this.exclusivePackages = $.exclusivePackages;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PatchDeploymentPatchConfigAptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PatchDeploymentPatchConfigAptArgs $;

        public Builder() {
            $ = new PatchDeploymentPatchConfigAptArgs();
        }

        public Builder(PatchDeploymentPatchConfigAptArgs defaults) {
            $ = new PatchDeploymentPatchConfigAptArgs(Objects.requireNonNull(defaults));
        }

        public Builder excludes(@Nullable Output<List<String>> excludes) {
            $.excludes = excludes;
            return this;
        }

        public Builder excludes(List<String> excludes) {
            return excludes(Output.of(excludes));
        }

        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }

        public Builder exclusivePackages(@Nullable Output<List<String>> exclusivePackages) {
            $.exclusivePackages = exclusivePackages;
            return this;
        }

        public Builder exclusivePackages(List<String> exclusivePackages) {
            return exclusivePackages(Output.of(exclusivePackages));
        }

        public Builder exclusivePackages(String... exclusivePackages) {
            return exclusivePackages(List.of(exclusivePackages));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PatchDeploymentPatchConfigAptArgs build() {
            return $;
        }
    }

}
