// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleRuleConditionArgs Empty = new BucketLifecycleRuleConditionArgs();

    /**
     * Minimum age of an object in days to satisfy this condition.
     * 
     */
    @Import(name="age")
    private @Nullable Output<Integer> age;

    public Optional<Output<Integer>> age() {
        return Optional.ofNullable(this.age);
    }

    /**
     * A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
     * 
     */
    @Import(name="createdBefore")
    private @Nullable Output<String> createdBefore;

    public Optional<Output<String>> createdBefore() {
        return Optional.ofNullable(this.createdBefore);
    }

    /**
     * A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
     * 
     */
    @Import(name="customTimeBefore")
    private @Nullable Output<String> customTimeBefore;

    public Optional<Output<String>> customTimeBefore() {
        return Optional.ofNullable(this.customTimeBefore);
    }

    /**
     * Days since the date set in the `customTime` metadata for the object. This condition is satisfied when the current date and time is at least the specified number of days after the `customTime`.
     * 
     */
    @Import(name="daysSinceCustomTime")
    private @Nullable Output<Integer> daysSinceCustomTime;

    public Optional<Output<Integer>> daysSinceCustomTime() {
        return Optional.ofNullable(this.daysSinceCustomTime);
    }

    /**
     * Relevant only for versioned objects. Number of days elapsed since the noncurrent timestamp of an object.
     * 
     */
    @Import(name="daysSinceNoncurrentTime")
    private @Nullable Output<Integer> daysSinceNoncurrentTime;

    public Optional<Output<Integer>> daysSinceNoncurrentTime() {
        return Optional.ofNullable(this.daysSinceNoncurrentTime);
    }

    /**
     * [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of objects to satisfy this condition. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`, `DURABLE_REDUCED_AVAILABILITY`.
     * 
     */
    @Import(name="matchesStorageClasses")
    private @Nullable Output<List<String>> matchesStorageClasses;

    public Optional<Output<List<String>>> matchesStorageClasses() {
        return Optional.ofNullable(this.matchesStorageClasses);
    }

    /**
     * Relevant only for versioned objects. The date in RFC 3339 (e.g. `2017-06-13`) when the object became nonconcurrent.
     * 
     */
    @Import(name="noncurrentTimeBefore")
    private @Nullable Output<String> noncurrentTimeBefore;

    public Optional<Output<String>> noncurrentTimeBefore() {
        return Optional.ofNullable(this.noncurrentTimeBefore);
    }

    /**
     * Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition.
     * 
     */
    @Import(name="numNewerVersions")
    private @Nullable Output<Integer> numNewerVersions;

    public Optional<Output<Integer>> numNewerVersions() {
        return Optional.ofNullable(this.numNewerVersions);
    }

    /**
     * Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: `&#34;LIVE&#34;`, `&#34;ARCHIVED&#34;`, `&#34;ANY&#34;`.
     * 
     */
    @Import(name="withState")
    private @Nullable Output<String> withState;

    public Optional<Output<String>> withState() {
        return Optional.ofNullable(this.withState);
    }

    private BucketLifecycleRuleConditionArgs() {}

    private BucketLifecycleRuleConditionArgs(BucketLifecycleRuleConditionArgs $) {
        this.age = $.age;
        this.createdBefore = $.createdBefore;
        this.customTimeBefore = $.customTimeBefore;
        this.daysSinceCustomTime = $.daysSinceCustomTime;
        this.daysSinceNoncurrentTime = $.daysSinceNoncurrentTime;
        this.matchesStorageClasses = $.matchesStorageClasses;
        this.noncurrentTimeBefore = $.noncurrentTimeBefore;
        this.numNewerVersions = $.numNewerVersions;
        this.withState = $.withState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleRuleConditionArgs $;

        public Builder() {
            $ = new BucketLifecycleRuleConditionArgs();
        }

        public Builder(BucketLifecycleRuleConditionArgs defaults) {
            $ = new BucketLifecycleRuleConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder age(@Nullable Output<Integer> age) {
            $.age = age;
            return this;
        }

        public Builder age(Integer age) {
            return age(Output.of(age));
        }

        public Builder createdBefore(@Nullable Output<String> createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        public Builder createdBefore(String createdBefore) {
            return createdBefore(Output.of(createdBefore));
        }

        public Builder customTimeBefore(@Nullable Output<String> customTimeBefore) {
            $.customTimeBefore = customTimeBefore;
            return this;
        }

        public Builder customTimeBefore(String customTimeBefore) {
            return customTimeBefore(Output.of(customTimeBefore));
        }

        public Builder daysSinceCustomTime(@Nullable Output<Integer> daysSinceCustomTime) {
            $.daysSinceCustomTime = daysSinceCustomTime;
            return this;
        }

        public Builder daysSinceCustomTime(Integer daysSinceCustomTime) {
            return daysSinceCustomTime(Output.of(daysSinceCustomTime));
        }

        public Builder daysSinceNoncurrentTime(@Nullable Output<Integer> daysSinceNoncurrentTime) {
            $.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            return this;
        }

        public Builder daysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
            return daysSinceNoncurrentTime(Output.of(daysSinceNoncurrentTime));
        }

        public Builder matchesStorageClasses(@Nullable Output<List<String>> matchesStorageClasses) {
            $.matchesStorageClasses = matchesStorageClasses;
            return this;
        }

        public Builder matchesStorageClasses(List<String> matchesStorageClasses) {
            return matchesStorageClasses(Output.of(matchesStorageClasses));
        }

        public Builder matchesStorageClasses(String... matchesStorageClasses) {
            return matchesStorageClasses(List.of(matchesStorageClasses));
        }

        public Builder noncurrentTimeBefore(@Nullable Output<String> noncurrentTimeBefore) {
            $.noncurrentTimeBefore = noncurrentTimeBefore;
            return this;
        }

        public Builder noncurrentTimeBefore(String noncurrentTimeBefore) {
            return noncurrentTimeBefore(Output.of(noncurrentTimeBefore));
        }

        public Builder numNewerVersions(@Nullable Output<Integer> numNewerVersions) {
            $.numNewerVersions = numNewerVersions;
            return this;
        }

        public Builder numNewerVersions(Integer numNewerVersions) {
            return numNewerVersions(Output.of(numNewerVersions));
        }

        public Builder withState(@Nullable Output<String> withState) {
            $.withState = withState;
            return this;
        }

        public Builder withState(String withState) {
            return withState(Output.of(withState));
        }

        public BucketLifecycleRuleConditionArgs build() {
            return $;
        }
    }

}
