// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxEntityTypeEntityArgs;
import com.pulumi.gcp.diagflow.inputs.CxEntityTypeExcludedPhraseArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxEntityTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxEntityTypeArgs Empty = new CxEntityTypeArgs();

    /**
     * Represents kinds of entities.
     * * AUTO_EXPANSION_MODE_UNSPECIFIED: Auto expansion disabled for the entity.
     * * AUTO_EXPANSION_MODE_DEFAULT: Allows an agent to recognize values that have not been explicitly listed in the entity.
     *   Possible values are `AUTO_EXPANSION_MODE_DEFAULT` and `AUTO_EXPANSION_MODE_UNSPECIFIED`.
     * 
     */
    @Import(name="autoExpansionMode")
    private @Nullable Output<String> autoExpansionMode;

    public Optional<Output<String>> autoExpansionMode() {
        return Optional.ofNullable(this.autoExpansionMode);
    }

    /**
     * The human-readable name of the entity type, unique within the agent.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Enables fuzzy entity extraction during classification.
     * 
     */
    @Import(name="enableFuzzyExtraction")
    private @Nullable Output<Boolean> enableFuzzyExtraction;

    public Optional<Output<Boolean>> enableFuzzyExtraction() {
        return Optional.ofNullable(this.enableFuzzyExtraction);
    }

    /**
     * The collection of entity entries associated with the entity type.
     * Structure is documented below.
     * 
     */
    @Import(name="entities", required=true)
    private Output<List<CxEntityTypeEntityArgs>> entities;

    public Output<List<CxEntityTypeEntityArgs>> entities() {
        return this.entities;
    }

    /**
     * Collection of exceptional words and phrases that shouldn&#39;t be matched. For example, if you have a size entity type with entry giant(an adjective), you might consider adding giants(a noun) as an exclusion.
     * If the kind of entity type is KIND_MAP, then the phrases specified by entities and excluded phrases should be mutually exclusive.
     * Structure is documented below.
     * 
     */
    @Import(name="excludedPhrases")
    private @Nullable Output<List<CxEntityTypeExcludedPhraseArgs>> excludedPhrases;

    public Optional<Output<List<CxEntityTypeExcludedPhraseArgs>>> excludedPhrases() {
        return Optional.ofNullable(this.excludedPhrases);
    }

    /**
     * Indicates whether the entity type can be automatically expanded.
     * * KIND_MAP: Map entity types allow mapping of a group of synonyms to a canonical value.
     * * KIND_LIST: List entity types contain a set of entries that do not map to canonical values. However, list entity types can contain references to other entity types (with or without aliases).
     * * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
     *   Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The language of the following fields in entityType:
     * EntityType.entities.value
     * EntityType.entities.synonyms
     * EntityType.excluded_phrases.value
     * If not specified, the agent&#39;s default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    /**
     * The agent to create a entity type for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.
     * 
     */
    @Import(name="redact")
    private @Nullable Output<Boolean> redact;

    public Optional<Output<Boolean>> redact() {
        return Optional.ofNullable(this.redact);
    }

    private CxEntityTypeArgs() {}

    private CxEntityTypeArgs(CxEntityTypeArgs $) {
        this.autoExpansionMode = $.autoExpansionMode;
        this.displayName = $.displayName;
        this.enableFuzzyExtraction = $.enableFuzzyExtraction;
        this.entities = $.entities;
        this.excludedPhrases = $.excludedPhrases;
        this.kind = $.kind;
        this.languageCode = $.languageCode;
        this.parent = $.parent;
        this.redact = $.redact;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxEntityTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxEntityTypeArgs $;

        public Builder() {
            $ = new CxEntityTypeArgs();
        }

        public Builder(CxEntityTypeArgs defaults) {
            $ = new CxEntityTypeArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoExpansionMode(@Nullable Output<String> autoExpansionMode) {
            $.autoExpansionMode = autoExpansionMode;
            return this;
        }

        public Builder autoExpansionMode(String autoExpansionMode) {
            return autoExpansionMode(Output.of(autoExpansionMode));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder enableFuzzyExtraction(@Nullable Output<Boolean> enableFuzzyExtraction) {
            $.enableFuzzyExtraction = enableFuzzyExtraction;
            return this;
        }

        public Builder enableFuzzyExtraction(Boolean enableFuzzyExtraction) {
            return enableFuzzyExtraction(Output.of(enableFuzzyExtraction));
        }

        public Builder entities(Output<List<CxEntityTypeEntityArgs>> entities) {
            $.entities = entities;
            return this;
        }

        public Builder entities(List<CxEntityTypeEntityArgs> entities) {
            return entities(Output.of(entities));
        }

        public Builder entities(CxEntityTypeEntityArgs... entities) {
            return entities(List.of(entities));
        }

        public Builder excludedPhrases(@Nullable Output<List<CxEntityTypeExcludedPhraseArgs>> excludedPhrases) {
            $.excludedPhrases = excludedPhrases;
            return this;
        }

        public Builder excludedPhrases(List<CxEntityTypeExcludedPhraseArgs> excludedPhrases) {
            return excludedPhrases(Output.of(excludedPhrases));
        }

        public Builder excludedPhrases(CxEntityTypeExcludedPhraseArgs... excludedPhrases) {
            return excludedPhrases(List.of(excludedPhrases));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public Builder redact(@Nullable Output<Boolean> redact) {
            $.redact = redact;
            return this;
        }

        public Builder redact(Boolean redact) {
            return redact(Output.of(redact));
        }

        public CxEntityTypeArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.entities = Objects.requireNonNull($.entities, "expected parameter 'entities' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            return $;
        }
    }

}
