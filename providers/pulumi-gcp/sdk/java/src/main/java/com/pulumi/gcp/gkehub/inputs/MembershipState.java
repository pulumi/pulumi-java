// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.MembershipAuthorityGetArgs;
import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MembershipState extends com.pulumi.resources.ResourceArgs {

    public static final MembershipState Empty = new MembershipState();

    /**
     * Authority encodes how Google will recognize identities from this Membership.
     * See the workload identity documentation for more details:
     * https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
     * Structure is documented below.
     * 
     */
    @Import(name="authority")
    private @Nullable Output<MembershipAuthorityGetArgs> authority;

    public Optional<Output<MembershipAuthorityGetArgs>> authority() {
        return Optional.ofNullable(this.authority);
    }

    /**
     * The name of this entity type to be displayed on the console. This field is unavailable in v1 of the API.
     * 
     * @deprecated
     * This field is unavailable in the GA provider and will be removed from the beta provider in a future release.
     * 
     */
    @Deprecated /* This field is unavailable in the GA provider and will be removed from the beta provider in a future release. */
    @Import(name="description")
    private @Nullable Output<String> description;

    @Deprecated /* This field is unavailable in the GA provider and will be removed from the beta provider in a future release. */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
     * Structure is documented below.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<MembershipEndpointGetArgs> endpoint;

    public Optional<Output<MembershipEndpointGetArgs>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Labels to apply to this membership.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The client-provided identifier of the membership.
     * 
     */
    @Import(name="membershipId")
    private @Nullable Output<String> membershipId;

    public Optional<Output<String>> membershipId() {
        return Optional.ofNullable(this.membershipId);
    }

    /**
     * The unique identifier of the membership.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private MembershipState() {}

    private MembershipState(MembershipState $) {
        this.authority = $.authority;
        this.description = $.description;
        this.endpoint = $.endpoint;
        this.labels = $.labels;
        this.membershipId = $.membershipId;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MembershipState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MembershipState $;

        public Builder() {
            $ = new MembershipState();
        }

        public Builder(MembershipState defaults) {
            $ = new MembershipState(Objects.requireNonNull(defaults));
        }

        public Builder authority(@Nullable Output<MembershipAuthorityGetArgs> authority) {
            $.authority = authority;
            return this;
        }

        public Builder authority(MembershipAuthorityGetArgs authority) {
            return authority(Output.of(authority));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder endpoint(@Nullable Output<MembershipEndpointGetArgs> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(MembershipEndpointGetArgs endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder membershipId(@Nullable Output<String> membershipId) {
            $.membershipId = membershipId;
            return this;
        }

        public Builder membershipId(String membershipId) {
            return membershipId(Output.of(membershipId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public MembershipState build() {
            return $;
        }
    }

}
