// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.MetastoreServiceHiveMetastoreConfigKerberosConfigKeytabGetArgs;
import java.lang.String;
import java.util.Objects;


public final class MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs Empty = new MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs();

    /**
     * A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
     * Structure is documented below.
     * 
     */
    @Import(name="keytab", required=true)
    private Output<MetastoreServiceHiveMetastoreConfigKerberosConfigKeytabGetArgs> keytab;

    public Output<MetastoreServiceHiveMetastoreConfigKerberosConfigKeytabGetArgs> keytab() {
        return this.keytab;
    }

    /**
     * A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
     * 
     */
    @Import(name="krb5ConfigGcsUri", required=true)
    private Output<String> krb5ConfigGcsUri;

    public Output<String> krb5ConfigGcsUri() {
        return this.krb5ConfigGcsUri;
    }

    /**
     * A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form &#34;primary/instance@REALM&#34;, but there is no exact format.
     * 
     */
    @Import(name="principal", required=true)
    private Output<String> principal;

    public Output<String> principal() {
        return this.principal;
    }

    private MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs() {}

    private MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs(MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs $) {
        this.keytab = $.keytab;
        this.krb5ConfigGcsUri = $.krb5ConfigGcsUri;
        this.principal = $.principal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs $;

        public Builder() {
            $ = new MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs();
        }

        public Builder(MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs defaults) {
            $ = new MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder keytab(Output<MetastoreServiceHiveMetastoreConfigKerberosConfigKeytabGetArgs> keytab) {
            $.keytab = keytab;
            return this;
        }

        public Builder keytab(MetastoreServiceHiveMetastoreConfigKerberosConfigKeytabGetArgs keytab) {
            return keytab(Output.of(keytab));
        }

        public Builder krb5ConfigGcsUri(Output<String> krb5ConfigGcsUri) {
            $.krb5ConfigGcsUri = krb5ConfigGcsUri;
            return this;
        }

        public Builder krb5ConfigGcsUri(String krb5ConfigGcsUri) {
            return krb5ConfigGcsUri(Output.of(krb5ConfigGcsUri));
        }

        public Builder principal(Output<String> principal) {
            $.principal = principal;
            return this;
        }

        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        public MetastoreServiceHiveMetastoreConfigKerberosConfigGetArgs build() {
            $.keytab = Objects.requireNonNull($.keytab, "expected parameter 'keytab' to be non-null");
            $.krb5ConfigGcsUri = Objects.requireNonNull($.krb5ConfigGcsUri, "expected parameter 'krb5ConfigGcsUri' to be non-null");
            $.principal = Objects.requireNonNull($.principal, "expected parameter 'principal' to be non-null");
            return $;
        }
    }

}
