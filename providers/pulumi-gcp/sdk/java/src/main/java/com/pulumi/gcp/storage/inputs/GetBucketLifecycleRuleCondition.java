// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetBucketLifecycleRuleCondition extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketLifecycleRuleCondition Empty = new GetBucketLifecycleRuleCondition();

    @Import(name="age", required=true)
    private Integer age;

    public Integer age() {
        return this.age;
    }

    @Import(name="createdBefore", required=true)
    private String createdBefore;

    public String createdBefore() {
        return this.createdBefore;
    }

    @Import(name="customTimeBefore", required=true)
    private String customTimeBefore;

    public String customTimeBefore() {
        return this.customTimeBefore;
    }

    @Import(name="daysSinceCustomTime", required=true)
    private Integer daysSinceCustomTime;

    public Integer daysSinceCustomTime() {
        return this.daysSinceCustomTime;
    }

    @Import(name="daysSinceNoncurrentTime", required=true)
    private Integer daysSinceNoncurrentTime;

    public Integer daysSinceNoncurrentTime() {
        return this.daysSinceNoncurrentTime;
    }

    @Import(name="matchesStorageClasses", required=true)
    private List<String> matchesStorageClasses;

    public List<String> matchesStorageClasses() {
        return this.matchesStorageClasses;
    }

    @Import(name="noncurrentTimeBefore", required=true)
    private String noncurrentTimeBefore;

    public String noncurrentTimeBefore() {
        return this.noncurrentTimeBefore;
    }

    @Import(name="numNewerVersions", required=true)
    private Integer numNewerVersions;

    public Integer numNewerVersions() {
        return this.numNewerVersions;
    }

    @Import(name="withState", required=true)
    private String withState;

    public String withState() {
        return this.withState;
    }

    private GetBucketLifecycleRuleCondition() {}

    private GetBucketLifecycleRuleCondition(GetBucketLifecycleRuleCondition $) {
        this.age = $.age;
        this.createdBefore = $.createdBefore;
        this.customTimeBefore = $.customTimeBefore;
        this.daysSinceCustomTime = $.daysSinceCustomTime;
        this.daysSinceNoncurrentTime = $.daysSinceNoncurrentTime;
        this.matchesStorageClasses = $.matchesStorageClasses;
        this.noncurrentTimeBefore = $.noncurrentTimeBefore;
        this.numNewerVersions = $.numNewerVersions;
        this.withState = $.withState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBucketLifecycleRuleCondition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBucketLifecycleRuleCondition $;

        public Builder() {
            $ = new GetBucketLifecycleRuleCondition();
        }

        public Builder(GetBucketLifecycleRuleCondition defaults) {
            $ = new GetBucketLifecycleRuleCondition(Objects.requireNonNull(defaults));
        }

        public Builder age(Integer age) {
            $.age = age;
            return this;
        }

        public Builder createdBefore(String createdBefore) {
            $.createdBefore = createdBefore;
            return this;
        }

        public Builder customTimeBefore(String customTimeBefore) {
            $.customTimeBefore = customTimeBefore;
            return this;
        }

        public Builder daysSinceCustomTime(Integer daysSinceCustomTime) {
            $.daysSinceCustomTime = daysSinceCustomTime;
            return this;
        }

        public Builder daysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
            $.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            return this;
        }

        public Builder matchesStorageClasses(List<String> matchesStorageClasses) {
            $.matchesStorageClasses = matchesStorageClasses;
            return this;
        }

        public Builder matchesStorageClasses(String... matchesStorageClasses) {
            return matchesStorageClasses(List.of(matchesStorageClasses));
        }

        public Builder noncurrentTimeBefore(String noncurrentTimeBefore) {
            $.noncurrentTimeBefore = noncurrentTimeBefore;
            return this;
        }

        public Builder numNewerVersions(Integer numNewerVersions) {
            $.numNewerVersions = numNewerVersions;
            return this;
        }

        public Builder withState(String withState) {
            $.withState = withState;
            return this;
        }

        public GetBucketLifecycleRuleCondition build() {
            $.age = Objects.requireNonNull($.age, "expected parameter 'age' to be non-null");
            $.createdBefore = Objects.requireNonNull($.createdBefore, "expected parameter 'createdBefore' to be non-null");
            $.customTimeBefore = Objects.requireNonNull($.customTimeBefore, "expected parameter 'customTimeBefore' to be non-null");
            $.daysSinceCustomTime = Objects.requireNonNull($.daysSinceCustomTime, "expected parameter 'daysSinceCustomTime' to be non-null");
            $.daysSinceNoncurrentTime = Objects.requireNonNull($.daysSinceNoncurrentTime, "expected parameter 'daysSinceNoncurrentTime' to be non-null");
            $.matchesStorageClasses = Objects.requireNonNull($.matchesStorageClasses, "expected parameter 'matchesStorageClasses' to be non-null");
            $.noncurrentTimeBefore = Objects.requireNonNull($.noncurrentTimeBefore, "expected parameter 'noncurrentTimeBefore' to be non-null");
            $.numNewerVersions = Objects.requireNonNull($.numNewerVersions, "expected parameter 'numNewerVersions' to be non-null");
            $.withState = Objects.requireNonNull($.withState, "expected parameter 'withState' to be non-null");
            return $;
        }
    }

}
