// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FolderState extends com.pulumi.resources.ResourceArgs {

    public static final FolderState Empty = new FolderState();

    /**
     * Timestamp when the Folder was created. Assigned by the server.
     * A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> createTime() {
        return this.createTime == null ? Codegen.empty() : this.createTime;
    }

    /**
     * The folder’s display name.
     * A folder’s display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * The folder id from the name "folders/{folder_id}"
     * 
     */
    @Import(name="folderId")
      private final @Nullable Output<String> folderId;

    public Output<String> folderId() {
        return this.folderId == null ? Codegen.empty() : this.folderId;
    }

    /**
     * The lifecycle state of the folder such as `ACTIVE` or `DELETE_REQUESTED`.
     * 
     */
    @Import(name="lifecycleState")
      private final @Nullable Output<String> lifecycleState;

    public Output<String> lifecycleState() {
        return this.lifecycleState == null ? Codegen.empty() : this.lifecycleState;
    }

    /**
     * The resource name of the Folder. Its format is folders/{folder_id}.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The resource name of the parent Folder or Organization.
     * Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
     * 
     */
    @Import(name="parent")
      private final @Nullable Output<String> parent;

    public Output<String> parent() {
        return this.parent == null ? Codegen.empty() : this.parent;
    }

    public FolderState(
        @Nullable Output<String> createTime,
        @Nullable Output<String> displayName,
        @Nullable Output<String> folderId,
        @Nullable Output<String> lifecycleState,
        @Nullable Output<String> name,
        @Nullable Output<String> parent) {
        this.createTime = createTime;
        this.displayName = displayName;
        this.folderId = folderId;
        this.lifecycleState = lifecycleState;
        this.name = name;
        this.parent = parent;
    }

    private FolderState() {
        this.createTime = Codegen.empty();
        this.displayName = Codegen.empty();
        this.folderId = Codegen.empty();
        this.lifecycleState = Codegen.empty();
        this.name = Codegen.empty();
        this.parent = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FolderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createTime;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> folderId;
        private @Nullable Output<String> lifecycleState;
        private @Nullable Output<String> name;
        private @Nullable Output<String> parent;

        public Builder() {
    	      // Empty
        }

        public Builder(FolderState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.displayName = defaults.displayName;
    	      this.folderId = defaults.folderId;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }
        public Builder createTime(@Nullable String createTime) {
            this.createTime = Codegen.ofNullable(createTime);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder folderId(@Nullable Output<String> folderId) {
            this.folderId = folderId;
            return this;
        }
        public Builder folderId(@Nullable String folderId) {
            this.folderId = Codegen.ofNullable(folderId);
            return this;
        }
        public Builder lifecycleState(@Nullable Output<String> lifecycleState) {
            this.lifecycleState = lifecycleState;
            return this;
        }
        public Builder lifecycleState(@Nullable String lifecycleState) {
            this.lifecycleState = Codegen.ofNullable(lifecycleState);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder parent(@Nullable Output<String> parent) {
            this.parent = parent;
            return this;
        }
        public Builder parent(@Nullable String parent) {
            this.parent = Codegen.ofNullable(parent);
            return this;
        }        public FolderState build() {
            return new FolderState(createTime, displayName, folderId, lifecycleState, name, parent);
        }
    }
}
