// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.CustomServiceTelemetryGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomServiceState extends com.pulumi.resources.ResourceArgs {

    public static final CustomServiceState Empty = new CustomServiceState();

    /**
     * Name used for UI elements listing this Service.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * An optional service ID to use. If not given, the server will generate a
     * service ID.
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * Configuration for how to query telemetry on a Service.
     * Structure is documented below.
     * 
     */
    @Import(name="telemetry")
    private @Nullable Output<CustomServiceTelemetryGetArgs> telemetry;

    public Optional<Output<CustomServiceTelemetryGetArgs>> telemetry() {
        return Optional.ofNullable(this.telemetry);
    }

    private CustomServiceState() {}

    private CustomServiceState(CustomServiceState $) {
        this.displayName = $.displayName;
        this.name = $.name;
        this.project = $.project;
        this.serviceId = $.serviceId;
        this.telemetry = $.telemetry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomServiceState $;

        public Builder() {
            $ = new CustomServiceState();
        }

        public Builder(CustomServiceState defaults) {
            $ = new CustomServiceState(Objects.requireNonNull(defaults));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public Builder telemetry(@Nullable Output<CustomServiceTelemetryGetArgs> telemetry) {
            $.telemetry = telemetry;
            return this;
        }

        public Builder telemetry(CustomServiceTelemetryGetArgs telemetry) {
            return telemetry(Output.of(telemetry));
        }

        public CustomServiceState build() {
            return $;
        }
    }

}
