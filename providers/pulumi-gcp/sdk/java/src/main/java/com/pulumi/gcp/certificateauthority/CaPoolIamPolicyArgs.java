// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaPoolIamPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaPoolIamPolicyArgs Empty = new CaPoolIamPolicyArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="caPool", required=true)
    private Output<String> caPool;

    public Output<String> caPool() {
        return this.caPool;
    }

    /**
     * Location of the CaPool. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Import(name="policyData", required=true)
    private Output<String> policyData;

    public Output<String> policyData() {
        return this.policyData;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private CaPoolIamPolicyArgs() {}

    private CaPoolIamPolicyArgs(CaPoolIamPolicyArgs $) {
        this.caPool = $.caPool;
        this.location = $.location;
        this.policyData = $.policyData;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaPoolIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaPoolIamPolicyArgs $;

        public Builder() {
            $ = new CaPoolIamPolicyArgs();
        }

        public Builder(CaPoolIamPolicyArgs defaults) {
            $ = new CaPoolIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder caPool(Output<String> caPool) {
            $.caPool = caPool;
            return this;
        }

        public Builder caPool(String caPool) {
            return caPool(Output.of(caPool));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder policyData(Output<String> policyData) {
            $.policyData = policyData;
            return this;
        }

        public Builder policyData(String policyData) {
            return policyData(Output.of(policyData));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public CaPoolIamPolicyArgs build() {
            $.caPool = Objects.requireNonNull($.caPool, "expected parameter 'caPool' to be non-null");
            $.policyData = Objects.requireNonNull($.policyData, "expected parameter 'policyData' to be non-null");
            return $;
        }
    }

}
