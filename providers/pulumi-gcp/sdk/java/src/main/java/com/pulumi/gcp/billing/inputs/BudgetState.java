// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.billing.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.billing.inputs.BudgetAllUpdatesRuleGetArgs;
import com.pulumi.gcp.billing.inputs.BudgetAmountGetArgs;
import com.pulumi.gcp.billing.inputs.BudgetBudgetFilterGetArgs;
import com.pulumi.gcp.billing.inputs.BudgetThresholdRuleGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BudgetState extends com.pulumi.resources.ResourceArgs {

    public static final BudgetState Empty = new BudgetState();

    /**
     * Defines notifications that are sent on every update to the
     * billing account&#39;s spend, regardless of the thresholds defined
     * using threshold rules.
     * Structure is documented below.
     * 
     */
    @Import(name="allUpdatesRule")
      private final @Nullable Output<BudgetAllUpdatesRuleGetArgs> allUpdatesRule;

    public Output<BudgetAllUpdatesRuleGetArgs> allUpdatesRule() {
        return this.allUpdatesRule == null ? Codegen.empty() : this.allUpdatesRule;
    }

    /**
     * The budgeted amount for each usage period.
     * Structure is documented below.
     * 
     */
    @Import(name="amount")
      private final @Nullable Output<BudgetAmountGetArgs> amount;

    public Output<BudgetAmountGetArgs> amount() {
        return this.amount == null ? Codegen.empty() : this.amount;
    }

    /**
     * ID of the billing account to set a budget on.
     * 
     */
    @Import(name="billingAccount")
      private final @Nullable Output<String> billingAccount;

    public Output<String> billingAccount() {
        return this.billingAccount == null ? Codegen.empty() : this.billingAccount;
    }

    /**
     * Filters that define which resources are used to compute the actual
     * spend against the budget.
     * Structure is documented below.
     * 
     */
    @Import(name="budgetFilter")
      private final @Nullable Output<BudgetBudgetFilterGetArgs> budgetFilter;

    public Output<BudgetBudgetFilterGetArgs> budgetFilter() {
        return this.budgetFilter == null ? Codegen.empty() : this.budgetFilter;
    }

    /**
     * User data for display name in UI. Must be &lt;= 60 chars.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Rules that trigger alerts (notifications of thresholds being
     * crossed) when spend exceeds the specified percentages of the
     * budget.
     * Structure is documented below.
     * 
     */
    @Import(name="thresholdRules")
      private final @Nullable Output<List<BudgetThresholdRuleGetArgs>> thresholdRules;

    public Output<List<BudgetThresholdRuleGetArgs>> thresholdRules() {
        return this.thresholdRules == null ? Codegen.empty() : this.thresholdRules;
    }

    public BudgetState(
        @Nullable Output<BudgetAllUpdatesRuleGetArgs> allUpdatesRule,
        @Nullable Output<BudgetAmountGetArgs> amount,
        @Nullable Output<String> billingAccount,
        @Nullable Output<BudgetBudgetFilterGetArgs> budgetFilter,
        @Nullable Output<String> displayName,
        @Nullable Output<String> name,
        @Nullable Output<List<BudgetThresholdRuleGetArgs>> thresholdRules) {
        this.allUpdatesRule = allUpdatesRule;
        this.amount = amount;
        this.billingAccount = billingAccount;
        this.budgetFilter = budgetFilter;
        this.displayName = displayName;
        this.name = name;
        this.thresholdRules = thresholdRules;
    }

    private BudgetState() {
        this.allUpdatesRule = Codegen.empty();
        this.amount = Codegen.empty();
        this.billingAccount = Codegen.empty();
        this.budgetFilter = Codegen.empty();
        this.displayName = Codegen.empty();
        this.name = Codegen.empty();
        this.thresholdRules = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BudgetAllUpdatesRuleGetArgs> allUpdatesRule;
        private @Nullable Output<BudgetAmountGetArgs> amount;
        private @Nullable Output<String> billingAccount;
        private @Nullable Output<BudgetBudgetFilterGetArgs> budgetFilter;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> name;
        private @Nullable Output<List<BudgetThresholdRuleGetArgs>> thresholdRules;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allUpdatesRule = defaults.allUpdatesRule;
    	      this.amount = defaults.amount;
    	      this.billingAccount = defaults.billingAccount;
    	      this.budgetFilter = defaults.budgetFilter;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.thresholdRules = defaults.thresholdRules;
        }

        public Builder allUpdatesRule(@Nullable Output<BudgetAllUpdatesRuleGetArgs> allUpdatesRule) {
            this.allUpdatesRule = allUpdatesRule;
            return this;
        }
        public Builder allUpdatesRule(@Nullable BudgetAllUpdatesRuleGetArgs allUpdatesRule) {
            this.allUpdatesRule = Codegen.ofNullable(allUpdatesRule);
            return this;
        }
        public Builder amount(@Nullable Output<BudgetAmountGetArgs> amount) {
            this.amount = amount;
            return this;
        }
        public Builder amount(@Nullable BudgetAmountGetArgs amount) {
            this.amount = Codegen.ofNullable(amount);
            return this;
        }
        public Builder billingAccount(@Nullable Output<String> billingAccount) {
            this.billingAccount = billingAccount;
            return this;
        }
        public Builder billingAccount(@Nullable String billingAccount) {
            this.billingAccount = Codegen.ofNullable(billingAccount);
            return this;
        }
        public Builder budgetFilter(@Nullable Output<BudgetBudgetFilterGetArgs> budgetFilter) {
            this.budgetFilter = budgetFilter;
            return this;
        }
        public Builder budgetFilter(@Nullable BudgetBudgetFilterGetArgs budgetFilter) {
            this.budgetFilter = Codegen.ofNullable(budgetFilter);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder thresholdRules(@Nullable Output<List<BudgetThresholdRuleGetArgs>> thresholdRules) {
            this.thresholdRules = thresholdRules;
            return this;
        }
        public Builder thresholdRules(@Nullable List<BudgetThresholdRuleGetArgs> thresholdRules) {
            this.thresholdRules = Codegen.ofNullable(thresholdRules);
            return this;
        }
        public Builder thresholdRules(BudgetThresholdRuleGetArgs... thresholdRules) {
            return thresholdRules(List.of(thresholdRules));
        }        public BudgetState build() {
            return new BudgetState(allUpdatesRule, amount, billingAccount, budgetFilter, displayName, name, thresholdRules);
        }
    }
}
