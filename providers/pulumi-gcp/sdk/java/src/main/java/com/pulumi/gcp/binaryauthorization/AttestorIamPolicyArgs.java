// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.binaryauthorization;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AttestorIamPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttestorIamPolicyArgs Empty = new AttestorIamPolicyArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="attestor", required=true)
      private final Output<String> attestor;

    public Output<String> attestor() {
        return this.attestor;
    }

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Import(name="policyData", required=true)
      private final Output<String> policyData;

    public Output<String> policyData() {
        return this.policyData;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    public AttestorIamPolicyArgs(
        Output<String> attestor,
        Output<String> policyData,
        @Nullable Output<String> project) {
        this.attestor = Objects.requireNonNull(attestor, "expected parameter 'attestor' to be non-null");
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
        this.project = project;
    }

    private AttestorIamPolicyArgs() {
        this.attestor = Codegen.empty();
        this.policyData = Codegen.empty();
        this.project = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AttestorIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> attestor;
        private Output<String> policyData;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(AttestorIamPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestor = defaults.attestor;
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
        }

        public Builder attestor(Output<String> attestor) {
            this.attestor = Objects.requireNonNull(attestor);
            return this;
        }
        public Builder attestor(String attestor) {
            this.attestor = Output.of(Objects.requireNonNull(attestor));
            return this;
        }
        public Builder policyData(Output<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }
        public Builder policyData(String policyData) {
            this.policyData = Output.of(Objects.requireNonNull(policyData));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }        public AttestorIamPolicyArgs build() {
            return new AttestorIamPolicyArgs(attestor, policyData, project);
        }
    }
}
