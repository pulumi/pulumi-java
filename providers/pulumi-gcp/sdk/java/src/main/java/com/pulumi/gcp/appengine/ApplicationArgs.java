// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.appengine.inputs.ApplicationFeatureSettingsArgs;
import com.pulumi.gcp.appengine.inputs.ApplicationIapArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The domain to authenticate users with when using App Engine&#39;s User API.
     * 
     */
    @Import(name="authDomain")
    private @Nullable Output<String> authDomain;

    public Optional<Output<String>> authDomain() {
        return Optional.ofNullable(this.authDomain);
    }

    /**
     * The type of the Cloud Firestore or Cloud Datastore database associated with this application.
     * Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
     * instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted
     * by the provider, but will be rejected by the API.
     * 
     */
    @Import(name="databaseType")
    private @Nullable Output<String> databaseType;

    public Optional<Output<String>> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * A block of optional settings to configure specific App Engine features:
     * 
     */
    @Import(name="featureSettings")
    private @Nullable Output<ApplicationFeatureSettingsArgs> featureSettings;

    public Optional<Output<ApplicationFeatureSettingsArgs>> featureSettings() {
        return Optional.ofNullable(this.featureSettings);
    }

    /**
     * Settings for enabling Cloud Identity Aware Proxy
     * 
     */
    @Import(name="iap")
    private @Nullable Output<ApplicationIapArgs> iap;

    public Optional<Output<ApplicationIapArgs>> iap() {
        return Optional.ofNullable(this.iap);
    }

    /**
     * The [location](https://cloud.google.com/appengine/docs/locations)
     * to serve the app from.
     * 
     */
    @Import(name="locationId", required=true)
    private Output<String> locationId;

    public Output<String> locationId() {
        return this.locationId;
    }

    /**
     * The project ID to create the application under.
     * ~&gt;**NOTE:** GCP only accepts project ID, not project number. If you are using number,
     * you may get a &#34;Permission denied&#34; error.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The serving status of the app.
     * 
     */
    @Import(name="servingStatus")
    private @Nullable Output<String> servingStatus;

    public Optional<Output<String>> servingStatus() {
        return Optional.ofNullable(this.servingStatus);
    }

    private ApplicationArgs() {}

    private ApplicationArgs(ApplicationArgs $) {
        this.authDomain = $.authDomain;
        this.databaseType = $.databaseType;
        this.featureSettings = $.featureSettings;
        this.iap = $.iap;
        this.locationId = $.locationId;
        this.project = $.project;
        this.servingStatus = $.servingStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationArgs $;

        public Builder() {
            $ = new ApplicationArgs();
        }

        public Builder(ApplicationArgs defaults) {
            $ = new ApplicationArgs(Objects.requireNonNull(defaults));
        }

        public Builder authDomain(@Nullable Output<String> authDomain) {
            $.authDomain = authDomain;
            return this;
        }

        public Builder authDomain(String authDomain) {
            return authDomain(Output.of(authDomain));
        }

        public Builder databaseType(@Nullable Output<String> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        public Builder databaseType(String databaseType) {
            return databaseType(Output.of(databaseType));
        }

        public Builder featureSettings(@Nullable Output<ApplicationFeatureSettingsArgs> featureSettings) {
            $.featureSettings = featureSettings;
            return this;
        }

        public Builder featureSettings(ApplicationFeatureSettingsArgs featureSettings) {
            return featureSettings(Output.of(featureSettings));
        }

        public Builder iap(@Nullable Output<ApplicationIapArgs> iap) {
            $.iap = iap;
            return this;
        }

        public Builder iap(ApplicationIapArgs iap) {
            return iap(Output.of(iap));
        }

        public Builder locationId(Output<String> locationId) {
            $.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            return locationId(Output.of(locationId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder servingStatus(@Nullable Output<String> servingStatus) {
            $.servingStatus = servingStatus;
            return this;
        }

        public Builder servingStatus(String servingStatus) {
            return servingStatus(Output.of(servingStatus));
        }

        public ApplicationArgs build() {
            $.locationId = Objects.requireNonNull($.locationId, "expected parameter 'locationId' to be non-null");
            return $;
        }
    }

}
