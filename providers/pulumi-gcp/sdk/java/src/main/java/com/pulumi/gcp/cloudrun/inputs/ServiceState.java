// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrun.inputs.ServiceMetadataGetArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceStatusGetArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateGetArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTrafficGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     * 
     */
    @Import(name="autogenerateRevisionName")
    private @Nullable Output<Boolean> autogenerateRevisionName;

    public Optional<Output<Boolean>> autogenerateRevisionName() {
        return Optional.ofNullable(this.autogenerateRevisionName);
    }

    /**
     * The location of the cloud run instance. eg us-central1
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<ServiceMetadataGetArgs> metadata;

    public Optional<Output<ServiceMetadataGetArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Volume&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The current status of the Service.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<ServiceStatusGetArgs>> statuses;

    public Optional<Output<List<ServiceStatusGetArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn&#39;t otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     * 
     */
    @Import(name="template")
    private @Nullable Output<ServiceTemplateGetArgs> template;

    public Optional<Output<ServiceTemplateGetArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     * 
     */
    @Import(name="traffics")
    private @Nullable Output<List<ServiceTrafficGetArgs>> traffics;

    public Optional<Output<List<ServiceTrafficGetArgs>>> traffics() {
        return Optional.ofNullable(this.traffics);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.autogenerateRevisionName = $.autogenerateRevisionName;
        this.location = $.location;
        this.metadata = $.metadata;
        this.name = $.name;
        this.project = $.project;
        this.statuses = $.statuses;
        this.template = $.template;
        this.traffics = $.traffics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        public Builder autogenerateRevisionName(@Nullable Output<Boolean> autogenerateRevisionName) {
            $.autogenerateRevisionName = autogenerateRevisionName;
            return this;
        }

        public Builder autogenerateRevisionName(Boolean autogenerateRevisionName) {
            return autogenerateRevisionName(Output.of(autogenerateRevisionName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder metadata(@Nullable Output<ServiceMetadataGetArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(ServiceMetadataGetArgs metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder statuses(@Nullable Output<List<ServiceStatusGetArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        public Builder statuses(List<ServiceStatusGetArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        public Builder statuses(ServiceStatusGetArgs... statuses) {
            return statuses(List.of(statuses));
        }

        public Builder template(@Nullable Output<ServiceTemplateGetArgs> template) {
            $.template = template;
            return this;
        }

        public Builder template(ServiceTemplateGetArgs template) {
            return template(Output.of(template));
        }

        public Builder traffics(@Nullable Output<List<ServiceTrafficGetArgs>> traffics) {
            $.traffics = traffics;
            return this;
        }

        public Builder traffics(List<ServiceTrafficGetArgs> traffics) {
            return traffics(Output.of(traffics));
        }

        public Builder traffics(ServiceTrafficGetArgs... traffics) {
            return traffics(List.of(traffics));
        }

        public ServiceState build() {
            return $;
        }
    }

}
