// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class GetInstanceBootDiskInitializeParam extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceBootDiskInitializeParam Empty = new GetInstanceBootDiskInitializeParam();

    /**
     * The image from which this disk was initialised.
     * 
     */
    @Import(name="image", required=true)
    private String image;

    /**
     * @return The image from which this disk was initialised.
     * 
     */
    public String image() {
        return this.image;
    }

    /**
     * A set of key/value label pairs assigned to the instance.
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,Object> labels;

    /**
     * @return A set of key/value label pairs assigned to the instance.
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }

    /**
     * The size of the image in gigabytes.
     * 
     */
    @Import(name="size", required=true)
    private Integer size;

    /**
     * @return The size of the image in gigabytes.
     * 
     */
    public Integer size() {
        return this.size;
    }

    /**
     * The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetInstanceBootDiskInitializeParam() {}

    private GetInstanceBootDiskInitializeParam(GetInstanceBootDiskInitializeParam $) {
        this.image = $.image;
        this.labels = $.labels;
        this.size = $.size;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceBootDiskInitializeParam defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceBootDiskInitializeParam $;

        public Builder() {
            $ = new GetInstanceBootDiskInitializeParam();
        }

        public Builder(GetInstanceBootDiskInitializeParam defaults) {
            $ = new GetInstanceBootDiskInitializeParam(Objects.requireNonNull(defaults));
        }

        /**
         * @param image The image from which this disk was initialised.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            $.image = image;
            return this;
        }

        /**
         * @param labels A set of key/value label pairs assigned to the instance.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param size The size of the image in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            $.size = size;
            return this;
        }

        /**
         * @param type The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetInstanceBootDiskInitializeParam build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
