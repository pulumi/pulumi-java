// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.accesscontextmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


public final class GcpUserAccessBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final GcpUserAccessBindingArgs Empty = new GcpUserAccessBindingArgs();

    /**
     * Required. Access level that a user must have to be granted access. Only one access level is supported, not multiple. This repeated field must have exactly one element. Example: "accessPolicies/9522/accessLevels/device_trusted"
     * 
     */
    @Import(name="accessLevels", required=true)
      private final Output<String> accessLevels;

    public Output<String> accessLevels() {
        return this.accessLevels;
    }

    /**
     * Required. Immutable. Google Group id whose members are subject to this binding's restrictions. See "id" in the G Suite Directory API's Groups resource. If a group's email address/alias is changed, this resource will continue to point at the changed group. This field does not accept group email addresses or aliases. Example: "01d520gv4vjcrht"
     * 
     */
    @Import(name="groupKey", required=true)
      private final Output<String> groupKey;

    public Output<String> groupKey() {
        return this.groupKey;
    }

    /**
     * Required. ID of the parent organization.
     * 
     */
    @Import(name="organizationId", required=true)
      private final Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    public GcpUserAccessBindingArgs(
        Output<String> accessLevels,
        Output<String> groupKey,
        Output<String> organizationId) {
        this.accessLevels = Objects.requireNonNull(accessLevels, "expected parameter 'accessLevels' to be non-null");
        this.groupKey = Objects.requireNonNull(groupKey, "expected parameter 'groupKey' to be non-null");
        this.organizationId = Objects.requireNonNull(organizationId, "expected parameter 'organizationId' to be non-null");
    }

    private GcpUserAccessBindingArgs() {
        this.accessLevels = Codegen.empty();
        this.groupKey = Codegen.empty();
        this.organizationId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GcpUserAccessBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accessLevels;
        private Output<String> groupKey;
        private Output<String> organizationId;

        public Builder() {
    	      // Empty
        }

        public Builder(GcpUserAccessBindingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevels = defaults.accessLevels;
    	      this.groupKey = defaults.groupKey;
    	      this.organizationId = defaults.organizationId;
        }

        public Builder accessLevels(Output<String> accessLevels) {
            this.accessLevels = Objects.requireNonNull(accessLevels);
            return this;
        }
        public Builder accessLevels(String accessLevels) {
            this.accessLevels = Output.of(Objects.requireNonNull(accessLevels));
            return this;
        }
        public Builder groupKey(Output<String> groupKey) {
            this.groupKey = Objects.requireNonNull(groupKey);
            return this;
        }
        public Builder groupKey(String groupKey) {
            this.groupKey = Output.of(Objects.requireNonNull(groupKey));
            return this;
        }
        public Builder organizationId(Output<String> organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        public Builder organizationId(String organizationId) {
            this.organizationId = Output.of(Objects.requireNonNull(organizationId));
            return this;
        }        public GcpUserAccessBindingArgs build() {
            return new GcpUserAccessBindingArgs(accessLevels, groupKey, organizationId);
        }
    }
}
