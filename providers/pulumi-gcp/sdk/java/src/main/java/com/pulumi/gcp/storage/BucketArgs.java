// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.storage.inputs.BucketCorArgs;
import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleArgs;
import com.pulumi.gcp.storage.inputs.BucketLoggingArgs;
import com.pulumi.gcp.storage.inputs.BucketRetentionPolicyArgs;
import com.pulumi.gcp.storage.inputs.BucketVersioningArgs;
import com.pulumi.gcp.storage.inputs.BucketWebsiteArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketArgs Empty = new BucketArgs();

    /**
     * The bucket&#39;s [Cross-Origin Resource Sharing (CORS)](https://www.w3.org/TR/cors/) configuration. Multiple blocks of this type are permitted. Structure is documented below.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<List<BucketCorArgs>> cors;

    public Optional<Output<List<BucketCorArgs>>> cors() {
        return Optional.ofNullable(this.cors);
    }

    @Import(name="defaultEventBasedHold")
    private @Nullable Output<Boolean> defaultEventBasedHold;

    public Optional<Output<Boolean>> defaultEventBasedHold() {
        return Optional.ofNullable(this.defaultEventBasedHold);
    }

    /**
     * The bucket&#39;s encryption configuration. Structure is documented below.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<BucketEncryptionArgs> encryption;

    public Optional<Output<BucketEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * When deleting a bucket, this
     * boolean option will delete all contained objects. If you try to delete a
     * bucket that contains objects, the provider will fail that run.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * A map of key/value label pairs to assign to the bucket.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The bucket&#39;s [Lifecycle Rules](https://cloud.google.com/storage/docs/lifecycle#configuration) configuration. Multiple blocks of this type are permitted. Structure is documented below.
     * 
     */
    @Import(name="lifecycleRules")
    private @Nullable Output<List<BucketLifecycleRuleArgs>> lifecycleRules;

    public Optional<Output<List<BucketLifecycleRuleArgs>>> lifecycleRules() {
        return Optional.ofNullable(this.lifecycleRules);
    }

    /**
     * The [GCS location](https://cloud.google.com/storage/docs/bucket-locations)
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * The bucket&#39;s [Access &amp; Storage Logs](https://cloud.google.com/storage/docs/access-logs) configuration. Structure is documented below.
     * 
     */
    @Import(name="logging")
    private @Nullable Output<BucketLoggingArgs> logging;

    public Optional<Output<BucketLoggingArgs>> logging() {
        return Optional.ofNullable(this.logging);
    }

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Prevents public access to a bucket.
     * 
     */
    @Import(name="publicAccessPrevention")
    private @Nullable Output<String> publicAccessPrevention;

    public Optional<Output<String>> publicAccessPrevention() {
        return Optional.ofNullable(this.publicAccessPrevention);
    }

    /**
     * Enables [Requester Pays](https://cloud.google.com/storage/docs/requester-pays) on a storage bucket.
     * 
     */
    @Import(name="requesterPays")
    private @Nullable Output<Boolean> requesterPays;

    public Optional<Output<Boolean>> requesterPays() {
        return Optional.ofNullable(this.requesterPays);
    }

    /**
     * Configuration of the bucket&#39;s data retention policy for how long objects in the bucket should be retained. Structure is documented below.
     * 
     */
    @Import(name="retentionPolicy")
    private @Nullable Output<BucketRetentionPolicyArgs> retentionPolicy;

    public Optional<Output<BucketRetentionPolicyArgs>> retentionPolicy() {
        return Optional.ofNullable(this.retentionPolicy);
    }

    /**
     * The target [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of objects affected by this Lifecycle Rule. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`.
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    /**
     * Enables [Uniform bucket-level access](https://cloud.google.com/storage/docs/uniform-bucket-level-access) access to a bucket.
     * 
     */
    @Import(name="uniformBucketLevelAccess")
    private @Nullable Output<Boolean> uniformBucketLevelAccess;

    public Optional<Output<Boolean>> uniformBucketLevelAccess() {
        return Optional.ofNullable(this.uniformBucketLevelAccess);
    }

    /**
     * The bucket&#39;s [Versioning](https://cloud.google.com/storage/docs/object-versioning) configuration.  Structure is documented below.
     * 
     */
    @Import(name="versioning")
    private @Nullable Output<BucketVersioningArgs> versioning;

    public Optional<Output<BucketVersioningArgs>> versioning() {
        return Optional.ofNullable(this.versioning);
    }

    /**
     * Configuration if the bucket acts as a website. Structure is documented below.
     * 
     */
    @Import(name="website")
    private @Nullable Output<BucketWebsiteArgs> website;

    public Optional<Output<BucketWebsiteArgs>> website() {
        return Optional.ofNullable(this.website);
    }

    private BucketArgs() {}

    private BucketArgs(BucketArgs $) {
        this.cors = $.cors;
        this.defaultEventBasedHold = $.defaultEventBasedHold;
        this.encryption = $.encryption;
        this.forceDestroy = $.forceDestroy;
        this.labels = $.labels;
        this.lifecycleRules = $.lifecycleRules;
        this.location = $.location;
        this.logging = $.logging;
        this.name = $.name;
        this.project = $.project;
        this.publicAccessPrevention = $.publicAccessPrevention;
        this.requesterPays = $.requesterPays;
        this.retentionPolicy = $.retentionPolicy;
        this.storageClass = $.storageClass;
        this.uniformBucketLevelAccess = $.uniformBucketLevelAccess;
        this.versioning = $.versioning;
        this.website = $.website;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketArgs $;

        public Builder() {
            $ = new BucketArgs();
        }

        public Builder(BucketArgs defaults) {
            $ = new BucketArgs(Objects.requireNonNull(defaults));
        }

        public Builder cors(@Nullable Output<List<BucketCorArgs>> cors) {
            $.cors = cors;
            return this;
        }

        public Builder cors(List<BucketCorArgs> cors) {
            return cors(Output.of(cors));
        }

        public Builder cors(BucketCorArgs... cors) {
            return cors(List.of(cors));
        }

        public Builder defaultEventBasedHold(@Nullable Output<Boolean> defaultEventBasedHold) {
            $.defaultEventBasedHold = defaultEventBasedHold;
            return this;
        }

        public Builder defaultEventBasedHold(Boolean defaultEventBasedHold) {
            return defaultEventBasedHold(Output.of(defaultEventBasedHold));
        }

        public Builder encryption(@Nullable Output<BucketEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(BucketEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder lifecycleRules(@Nullable Output<List<BucketLifecycleRuleArgs>> lifecycleRules) {
            $.lifecycleRules = lifecycleRules;
            return this;
        }

        public Builder lifecycleRules(List<BucketLifecycleRuleArgs> lifecycleRules) {
            return lifecycleRules(Output.of(lifecycleRules));
        }

        public Builder lifecycleRules(BucketLifecycleRuleArgs... lifecycleRules) {
            return lifecycleRules(List.of(lifecycleRules));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder logging(@Nullable Output<BucketLoggingArgs> logging) {
            $.logging = logging;
            return this;
        }

        public Builder logging(BucketLoggingArgs logging) {
            return logging(Output.of(logging));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder publicAccessPrevention(@Nullable Output<String> publicAccessPrevention) {
            $.publicAccessPrevention = publicAccessPrevention;
            return this;
        }

        public Builder publicAccessPrevention(String publicAccessPrevention) {
            return publicAccessPrevention(Output.of(publicAccessPrevention));
        }

        public Builder requesterPays(@Nullable Output<Boolean> requesterPays) {
            $.requesterPays = requesterPays;
            return this;
        }

        public Builder requesterPays(Boolean requesterPays) {
            return requesterPays(Output.of(requesterPays));
        }

        public Builder retentionPolicy(@Nullable Output<BucketRetentionPolicyArgs> retentionPolicy) {
            $.retentionPolicy = retentionPolicy;
            return this;
        }

        public Builder retentionPolicy(BucketRetentionPolicyArgs retentionPolicy) {
            return retentionPolicy(Output.of(retentionPolicy));
        }

        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public Builder uniformBucketLevelAccess(@Nullable Output<Boolean> uniformBucketLevelAccess) {
            $.uniformBucketLevelAccess = uniformBucketLevelAccess;
            return this;
        }

        public Builder uniformBucketLevelAccess(Boolean uniformBucketLevelAccess) {
            return uniformBucketLevelAccess(Output.of(uniformBucketLevelAccess));
        }

        public Builder versioning(@Nullable Output<BucketVersioningArgs> versioning) {
            $.versioning = versioning;
            return this;
        }

        public Builder versioning(BucketVersioningArgs versioning) {
            return versioning(Output.of(versioning));
        }

        public Builder website(@Nullable Output<BucketWebsiteArgs> website) {
            $.website = website;
            return this;
        }

        public Builder website(BucketWebsiteArgs website) {
            return website(Output.of(website));
        }

        public BucketArgs build() {
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
