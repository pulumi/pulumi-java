// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gameservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gameservices.inputs.GameServerClusterConnectionInfoArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GameServerClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GameServerClusterArgs Empty = new GameServerClusterArgs();

    /**
     * Required. The resource name of the game server cluster
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Game server cluster connection information. This information is used to
     * manage game server clusters.
     * Structure is documented below.
     * 
     */
    @Import(name="connectionInfo", required=true)
    private Output<GameServerClusterConnectionInfoArgs> connectionInfo;

    public Output<GameServerClusterConnectionInfoArgs> connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * Human readable description of the cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The labels associated with this game server cluster. Each label is a
     * key-value pair.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location of the Cluster.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The realm id of the game server realm.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    public Output<String> realmId() {
        return this.realmId;
    }

    private GameServerClusterArgs() {}

    private GameServerClusterArgs(GameServerClusterArgs $) {
        this.clusterId = $.clusterId;
        this.connectionInfo = $.connectionInfo;
        this.description = $.description;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GameServerClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GameServerClusterArgs $;

        public Builder() {
            $ = new GameServerClusterArgs();
        }

        public Builder(GameServerClusterArgs defaults) {
            $ = new GameServerClusterArgs(Objects.requireNonNull(defaults));
        }

        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        public Builder connectionInfo(Output<GameServerClusterConnectionInfoArgs> connectionInfo) {
            $.connectionInfo = connectionInfo;
            return this;
        }

        public Builder connectionInfo(GameServerClusterConnectionInfoArgs connectionInfo) {
            return connectionInfo(Output.of(connectionInfo));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public GameServerClusterArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.connectionInfo = Objects.requireNonNull($.connectionInfo, "expected parameter 'connectionInfo' to be non-null");
            $.realmId = Objects.requireNonNull($.realmId, "expected parameter 'realmId' to be non-null");
            return $;
        }
    }

}
