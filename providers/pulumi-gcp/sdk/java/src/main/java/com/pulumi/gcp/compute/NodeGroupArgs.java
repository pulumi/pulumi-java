// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.NodeGroupAutoscalingPolicyArgs;
import com.pulumi.gcp.compute.inputs.NodeGroupMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeGroupArgs Empty = new NodeGroupArgs();

    /**
     * If you use sole-tenant nodes for your workloads, you can use the node
     * group autoscaler to automatically manage the sizes of your node groups.
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingPolicy")
    private @Nullable Output<NodeGroupAutoscalingPolicyArgs> autoscalingPolicy;

    public Optional<Output<NodeGroupAutoscalingPolicyArgs>> autoscalingPolicy() {
        return Optional.ofNullable(this.autoscalingPolicy);
    }

    /**
     * An optional textual description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The initial number of nodes in the node group. One of `initial_size` or `size` must be specified.
     * 
     */
    @Import(name="initialSize")
    private @Nullable Output<Integer> initialSize;

    public Optional<Output<Integer>> initialSize() {
        return Optional.ofNullable(this.initialSize);
    }

    /**
     * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     * 
     */
    @Import(name="maintenancePolicy")
    private @Nullable Output<String> maintenancePolicy;

    public Optional<Output<String>> maintenancePolicy() {
        return Optional.ofNullable(this.maintenancePolicy);
    }

    /**
     * contains properties for the timeframe of maintenance
     * Structure is documented below.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<NodeGroupMaintenanceWindowArgs> maintenanceWindow;

    public Optional<Output<NodeGroupMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The URL of the node template to which this node group belongs.
     * 
     */
    @Import(name="nodeTemplate", required=true)
    private Output<String> nodeTemplate;

    public Output<String> nodeTemplate() {
        return this.nodeTemplate;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The total number of nodes in the node group. One of `initial_size` or `size` must be specified.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Zone where this node group is located
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private NodeGroupArgs() {}

    private NodeGroupArgs(NodeGroupArgs $) {
        this.autoscalingPolicy = $.autoscalingPolicy;
        this.description = $.description;
        this.initialSize = $.initialSize;
        this.maintenancePolicy = $.maintenancePolicy;
        this.maintenanceWindow = $.maintenanceWindow;
        this.name = $.name;
        this.nodeTemplate = $.nodeTemplate;
        this.project = $.project;
        this.size = $.size;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeGroupArgs $;

        public Builder() {
            $ = new NodeGroupArgs();
        }

        public Builder(NodeGroupArgs defaults) {
            $ = new NodeGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoscalingPolicy(@Nullable Output<NodeGroupAutoscalingPolicyArgs> autoscalingPolicy) {
            $.autoscalingPolicy = autoscalingPolicy;
            return this;
        }

        public Builder autoscalingPolicy(NodeGroupAutoscalingPolicyArgs autoscalingPolicy) {
            return autoscalingPolicy(Output.of(autoscalingPolicy));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder initialSize(@Nullable Output<Integer> initialSize) {
            $.initialSize = initialSize;
            return this;
        }

        public Builder initialSize(Integer initialSize) {
            return initialSize(Output.of(initialSize));
        }

        public Builder maintenancePolicy(@Nullable Output<String> maintenancePolicy) {
            $.maintenancePolicy = maintenancePolicy;
            return this;
        }

        public Builder maintenancePolicy(String maintenancePolicy) {
            return maintenancePolicy(Output.of(maintenancePolicy));
        }

        public Builder maintenanceWindow(@Nullable Output<NodeGroupMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder maintenanceWindow(NodeGroupMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nodeTemplate(Output<String> nodeTemplate) {
            $.nodeTemplate = nodeTemplate;
            return this;
        }

        public Builder nodeTemplate(String nodeTemplate) {
            return nodeTemplate(Output.of(nodeTemplate));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public NodeGroupArgs build() {
            $.nodeTemplate = Objects.requireNonNull($.nodeTemplate, "expected parameter 'nodeTemplate' to be non-null");
            return $;
        }
    }

}
