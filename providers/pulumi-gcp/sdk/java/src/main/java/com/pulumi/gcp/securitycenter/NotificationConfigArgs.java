// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securitycenter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.securitycenter.inputs.NotificationConfigStreamingConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationConfigArgs Empty = new NotificationConfigArgs();

    /**
     * This must be unique within the organization.
     * 
     */
    @Import(name="configId", required=true)
    private Output<String> configId;

    public Output<String> configId() {
        return this.configId;
    }

    /**
     * The description of the notification config (max of 1024 characters).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    public Output<String> organization() {
        return this.organization;
    }

    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * &#34;projects/[project_id]/topics/[topic]&#34;.
     * 
     */
    @Import(name="pubsubTopic", required=true)
    private Output<String> pubsubTopic;

    public Output<String> pubsubTopic() {
        return this.pubsubTopic;
    }

    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     * 
     */
    @Import(name="streamingConfig", required=true)
    private Output<NotificationConfigStreamingConfigArgs> streamingConfig;

    public Output<NotificationConfigStreamingConfigArgs> streamingConfig() {
        return this.streamingConfig;
    }

    private NotificationConfigArgs() {}

    private NotificationConfigArgs(NotificationConfigArgs $) {
        this.configId = $.configId;
        this.description = $.description;
        this.organization = $.organization;
        this.pubsubTopic = $.pubsubTopic;
        this.streamingConfig = $.streamingConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationConfigArgs $;

        public Builder() {
            $ = new NotificationConfigArgs();
        }

        public Builder(NotificationConfigArgs defaults) {
            $ = new NotificationConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder configId(Output<String> configId) {
            $.configId = configId;
            return this;
        }

        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        public Builder pubsubTopic(Output<String> pubsubTopic) {
            $.pubsubTopic = pubsubTopic;
            return this;
        }

        public Builder pubsubTopic(String pubsubTopic) {
            return pubsubTopic(Output.of(pubsubTopic));
        }

        public Builder streamingConfig(Output<NotificationConfigStreamingConfigArgs> streamingConfig) {
            $.streamingConfig = streamingConfig;
            return this;
        }

        public Builder streamingConfig(NotificationConfigStreamingConfigArgs streamingConfig) {
            return streamingConfig(Output.of(streamingConfig));
        }

        public NotificationConfigArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            $.organization = Objects.requireNonNull($.organization, "expected parameter 'organization' to be non-null");
            $.pubsubTopic = Objects.requireNonNull($.pubsubTopic, "expected parameter 'pubsubTopic' to be non-null");
            $.streamingConfig = Objects.requireNonNull($.streamingConfig, "expected parameter 'streamingConfig' to be non-null");
            return $;
        }
    }

}
