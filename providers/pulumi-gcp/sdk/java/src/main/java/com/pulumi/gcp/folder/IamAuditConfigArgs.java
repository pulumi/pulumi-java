// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.folder;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.folder.inputs.IamAuditConfigAuditLogConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class IamAuditConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamAuditConfigArgs Empty = new IamAuditConfigArgs();

    /**
     * The configuration for logging of each type of permission. This can be specified multiple times.
     * 
     */
    @Import(name="auditLogConfigs", required=true)
    private Output<List<IamAuditConfigAuditLogConfigArgs>> auditLogConfigs;

    public Output<List<IamAuditConfigAuditLogConfigArgs>> auditLogConfigs() {
        return this.auditLogConfigs;
    }

    @Import(name="folder", required=true)
    private Output<String> folder;

    public Output<String> folder() {
        return this.folder;
    }

    /**
     * Service which will be enabled for audit logging. The special value allServices covers all services.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    private IamAuditConfigArgs() {}

    private IamAuditConfigArgs(IamAuditConfigArgs $) {
        this.auditLogConfigs = $.auditLogConfigs;
        this.folder = $.folder;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamAuditConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamAuditConfigArgs $;

        public Builder() {
            $ = new IamAuditConfigArgs();
        }

        public Builder(IamAuditConfigArgs defaults) {
            $ = new IamAuditConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder auditLogConfigs(Output<List<IamAuditConfigAuditLogConfigArgs>> auditLogConfigs) {
            $.auditLogConfigs = auditLogConfigs;
            return this;
        }

        public Builder auditLogConfigs(List<IamAuditConfigAuditLogConfigArgs> auditLogConfigs) {
            return auditLogConfigs(Output.of(auditLogConfigs));
        }

        public Builder auditLogConfigs(IamAuditConfigAuditLogConfigArgs... auditLogConfigs) {
            return auditLogConfigs(List.of(auditLogConfigs));
        }

        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        public Builder service(String service) {
            return service(Output.of(service));
        }

        public IamAuditConfigArgs build() {
            $.auditLogConfigs = Objects.requireNonNull($.auditLogConfigs, "expected parameter 'auditLogConfigs' to be non-null");
            $.folder = Objects.requireNonNull($.folder, "expected parameter 'folder' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
