// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.diagflow.inputs.CxPageEventHandlerTriggerFulfillmentGetArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CxPageEventHandlerGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxPageEventHandlerGetArgs Empty = new CxPageEventHandlerGetArgs();

    /**
     * The name of the event to handle.
     * 
     */
    @Import(name="event")
      private final @Nullable Output<String> event;

    public Output<String> event() {
        return this.event == null ? Codegen.empty() : this.event;
    }

    /**
     * - 
     * The unique identifier of this event handler.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The target flow to transition to.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
     * 
     */
    @Import(name="targetFlow")
      private final @Nullable Output<String> targetFlow;

    public Output<String> targetFlow() {
        return this.targetFlow == null ? Codegen.empty() : this.targetFlow;
    }

    /**
     * The target page to transition to.
     * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
     * 
     */
    @Import(name="targetPage")
      private final @Nullable Output<String> targetPage;

    public Output<String> targetPage() {
        return this.targetPage == null ? Codegen.empty() : this.targetPage;
    }

    /**
     * The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
     * Structure is documented below.
     * 
     */
    @Import(name="triggerFulfillment")
      private final @Nullable Output<CxPageEventHandlerTriggerFulfillmentGetArgs> triggerFulfillment;

    public Output<CxPageEventHandlerTriggerFulfillmentGetArgs> triggerFulfillment() {
        return this.triggerFulfillment == null ? Codegen.empty() : this.triggerFulfillment;
    }

    public CxPageEventHandlerGetArgs(
        @Nullable Output<String> event,
        @Nullable Output<String> name,
        @Nullable Output<String> targetFlow,
        @Nullable Output<String> targetPage,
        @Nullable Output<CxPageEventHandlerTriggerFulfillmentGetArgs> triggerFulfillment) {
        this.event = event;
        this.name = name;
        this.targetFlow = targetFlow;
        this.targetPage = targetPage;
        this.triggerFulfillment = triggerFulfillment;
    }

    private CxPageEventHandlerGetArgs() {
        this.event = Codegen.empty();
        this.name = Codegen.empty();
        this.targetFlow = Codegen.empty();
        this.targetPage = Codegen.empty();
        this.triggerFulfillment = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxPageEventHandlerGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> event;
        private @Nullable Output<String> name;
        private @Nullable Output<String> targetFlow;
        private @Nullable Output<String> targetPage;
        private @Nullable Output<CxPageEventHandlerTriggerFulfillmentGetArgs> triggerFulfillment;

        public Builder() {
    	      // Empty
        }

        public Builder(CxPageEventHandlerGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.event = defaults.event;
    	      this.name = defaults.name;
    	      this.targetFlow = defaults.targetFlow;
    	      this.targetPage = defaults.targetPage;
    	      this.triggerFulfillment = defaults.triggerFulfillment;
        }

        public Builder event(@Nullable Output<String> event) {
            this.event = event;
            return this;
        }
        public Builder event(@Nullable String event) {
            this.event = Codegen.ofNullable(event);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder targetFlow(@Nullable Output<String> targetFlow) {
            this.targetFlow = targetFlow;
            return this;
        }
        public Builder targetFlow(@Nullable String targetFlow) {
            this.targetFlow = Codegen.ofNullable(targetFlow);
            return this;
        }
        public Builder targetPage(@Nullable Output<String> targetPage) {
            this.targetPage = targetPage;
            return this;
        }
        public Builder targetPage(@Nullable String targetPage) {
            this.targetPage = Codegen.ofNullable(targetPage);
            return this;
        }
        public Builder triggerFulfillment(@Nullable Output<CxPageEventHandlerTriggerFulfillmentGetArgs> triggerFulfillment) {
            this.triggerFulfillment = triggerFulfillment;
            return this;
        }
        public Builder triggerFulfillment(@Nullable CxPageEventHandlerTriggerFulfillmentGetArgs triggerFulfillment) {
            this.triggerFulfillment = Codegen.ofNullable(triggerFulfillment);
            return this;
        }        public CxPageEventHandlerGetArgs build() {
            return new CxPageEventHandlerGetArgs(event, name, targetFlow, targetPage, triggerFulfillment);
        }
    }
}
