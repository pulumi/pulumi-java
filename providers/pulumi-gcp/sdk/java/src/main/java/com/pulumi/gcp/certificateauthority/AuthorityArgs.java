// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorityArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorityArgs Empty = new AuthorityArgs();

    /**
     * The user provided Resource ID for this Certificate Authority.
     * 
     */
    @Import(name="certificateAuthorityId", required=true)
    private Output<String> certificateAuthorityId;

    public Output<String> certificateAuthorityId() {
        return this.certificateAuthorityId;
    }

    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     * 
     */
    @Import(name="config", required=true)
    private Output<AuthorityConfigArgs> config;

    public Output<AuthorityConfigArgs> config() {
        return this.config;
    }

    /**
     * The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
     * such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
     * (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
     * my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
     * created.
     * 
     */
    @Import(name="gcsBucket")
    private @Nullable Output<String> gcsBucket;

    public Optional<Output<String>> gcsBucket() {
        return Optional.ofNullable(this.gcsBucket);
    }

    /**
     * This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
     * Use with care. Defaults to `false`.
     * 
     */
    @Import(name="ignoreActiveCertificatesOnDeletion")
    private @Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion;

    public Optional<Output<Boolean>> ignoreActiveCertificatesOnDeletion() {
        return Optional.ofNullable(this.ignoreActiveCertificatesOnDeletion);
    }

    /**
     * Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
     * is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
     * certificate. Otherwise, it is used to sign a CSR.
     * Structure is documented below.
     * 
     */
    @Import(name="keySpec", required=true)
    private Output<AuthorityKeySpecArgs> keySpec;

    public Output<AuthorityKeySpecArgs> keySpec() {
        return this.keySpec;
    }

    /**
     * Labels with user-defined metadata.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;:
     * &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The desired lifetime of the CA certificate. Used to create the &#34;notBeforeTime&#34; and
     * &#34;notAfterTime&#34; fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="lifetime")
    private @Nullable Output<String> lifetime;

    public Optional<Output<String>> lifetime() {
        return Optional.ofNullable(this.lifetime);
    }

    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the CaPool this Certificate Authority belongs to.
     * 
     */
    @Import(name="pool", required=true)
    private Output<String> pool;

    public Output<String> pool() {
        return this.pool;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Type of this CertificateAuthority.
     * &gt; **Note:** For `SUBORDINATE` Certificate Authorities, they need to
     * be manually activated (via Cloud Console of `gcloud`) before they can
     * issue certificates.
     * Default value is `SELF_SIGNED`.
     * Possible values are `SELF_SIGNED` and `SUBORDINATE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AuthorityArgs() {}

    private AuthorityArgs(AuthorityArgs $) {
        this.certificateAuthorityId = $.certificateAuthorityId;
        this.config = $.config;
        this.gcsBucket = $.gcsBucket;
        this.ignoreActiveCertificatesOnDeletion = $.ignoreActiveCertificatesOnDeletion;
        this.keySpec = $.keySpec;
        this.labels = $.labels;
        this.lifetime = $.lifetime;
        this.location = $.location;
        this.pool = $.pool;
        this.project = $.project;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorityArgs $;

        public Builder() {
            $ = new AuthorityArgs();
        }

        public Builder(AuthorityArgs defaults) {
            $ = new AuthorityArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificateAuthorityId(Output<String> certificateAuthorityId) {
            $.certificateAuthorityId = certificateAuthorityId;
            return this;
        }

        public Builder certificateAuthorityId(String certificateAuthorityId) {
            return certificateAuthorityId(Output.of(certificateAuthorityId));
        }

        public Builder config(Output<AuthorityConfigArgs> config) {
            $.config = config;
            return this;
        }

        public Builder config(AuthorityConfigArgs config) {
            return config(Output.of(config));
        }

        public Builder gcsBucket(@Nullable Output<String> gcsBucket) {
            $.gcsBucket = gcsBucket;
            return this;
        }

        public Builder gcsBucket(String gcsBucket) {
            return gcsBucket(Output.of(gcsBucket));
        }

        public Builder ignoreActiveCertificatesOnDeletion(@Nullable Output<Boolean> ignoreActiveCertificatesOnDeletion) {
            $.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
            return this;
        }

        public Builder ignoreActiveCertificatesOnDeletion(Boolean ignoreActiveCertificatesOnDeletion) {
            return ignoreActiveCertificatesOnDeletion(Output.of(ignoreActiveCertificatesOnDeletion));
        }

        public Builder keySpec(Output<AuthorityKeySpecArgs> keySpec) {
            $.keySpec = keySpec;
            return this;
        }

        public Builder keySpec(AuthorityKeySpecArgs keySpec) {
            return keySpec(Output.of(keySpec));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder lifetime(@Nullable Output<String> lifetime) {
            $.lifetime = lifetime;
            return this;
        }

        public Builder lifetime(String lifetime) {
            return lifetime(Output.of(lifetime));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder pool(Output<String> pool) {
            $.pool = pool;
            return this;
        }

        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AuthorityArgs build() {
            $.certificateAuthorityId = Objects.requireNonNull($.certificateAuthorityId, "expected parameter 'certificateAuthorityId' to be non-null");
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.keySpec = Objects.requireNonNull($.keySpec, "expected parameter 'keySpec' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.pool = Objects.requireNonNull($.pool, "expected parameter 'pool' to be non-null");
            return $;
        }
    }

}
