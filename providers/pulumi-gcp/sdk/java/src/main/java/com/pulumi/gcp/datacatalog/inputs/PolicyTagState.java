// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyTagState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyTagState Empty = new PolicyTagState();

    /**
     * Resource names of child policy tags of this policy tag.
     * 
     */
    @Import(name="childPolicyTags")
    private @Nullable Output<List<String>> childPolicyTags;

    public Optional<Output<List<String>>> childPolicyTags() {
        return Optional.ofNullable(this.childPolicyTags);
    }

    /**
     * Description of this policy tag. It must: contain only unicode characters, tabs,
     * newlines, carriage returns and page breaks; and be at most 2000 bytes long when
     * encoded in UTF-8. If not set, defaults to an empty description.
     * If not set, defaults to an empty description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User defined name of this policy tag. It must: be unique within the parent
     * taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces;
     * not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Resource name of this policy tag, whose format is:
     * &#34;projects/{project}/locations/{region}/taxonomies/{taxonomy}/policyTags/{policytag}&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Resource name of this policy tag&#39;s parent policy tag.
     * If empty, it means this policy tag is a top level policy tag.
     * If not set, defaults to an empty string.
     * 
     */
    @Import(name="parentPolicyTag")
    private @Nullable Output<String> parentPolicyTag;

    public Optional<Output<String>> parentPolicyTag() {
        return Optional.ofNullable(this.parentPolicyTag);
    }

    /**
     * Taxonomy the policy tag is associated with
     * 
     */
    @Import(name="taxonomy")
    private @Nullable Output<String> taxonomy;

    public Optional<Output<String>> taxonomy() {
        return Optional.ofNullable(this.taxonomy);
    }

    private PolicyTagState() {}

    private PolicyTagState(PolicyTagState $) {
        this.childPolicyTags = $.childPolicyTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.name = $.name;
        this.parentPolicyTag = $.parentPolicyTag;
        this.taxonomy = $.taxonomy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyTagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyTagState $;

        public Builder() {
            $ = new PolicyTagState();
        }

        public Builder(PolicyTagState defaults) {
            $ = new PolicyTagState(Objects.requireNonNull(defaults));
        }

        public Builder childPolicyTags(@Nullable Output<List<String>> childPolicyTags) {
            $.childPolicyTags = childPolicyTags;
            return this;
        }

        public Builder childPolicyTags(List<String> childPolicyTags) {
            return childPolicyTags(Output.of(childPolicyTags));
        }

        public Builder childPolicyTags(String... childPolicyTags) {
            return childPolicyTags(List.of(childPolicyTags));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parentPolicyTag(@Nullable Output<String> parentPolicyTag) {
            $.parentPolicyTag = parentPolicyTag;
            return this;
        }

        public Builder parentPolicyTag(String parentPolicyTag) {
            return parentPolicyTag(Output.of(parentPolicyTag));
        }

        public Builder taxonomy(@Nullable Output<String> taxonomy) {
            $.taxonomy = taxonomy;
            return this;
        }

        public Builder taxonomy(String taxonomy) {
            return taxonomy(Output.of(taxonomy));
        }

        public PolicyTagState build() {
            return $;
        }
    }

}
