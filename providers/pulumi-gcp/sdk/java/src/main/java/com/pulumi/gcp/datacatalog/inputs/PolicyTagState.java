// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyTagState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyTagState Empty = new PolicyTagState();

    /**
     * Resource names of child policy tags of this policy tag.
     * 
     */
    @Import(name="childPolicyTags")
      private final @Nullable Output<List<String>> childPolicyTags;

    public Output<List<String>> childPolicyTags() {
        return this.childPolicyTags == null ? Codegen.empty() : this.childPolicyTags;
    }

    /**
     * Description of this policy tag. It must: contain only unicode characters, tabs,
     * newlines, carriage returns and page breaks; and be at most 2000 bytes long when
     * encoded in UTF-8. If not set, defaults to an empty description.
     * If not set, defaults to an empty description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * User defined name of this policy tag. It must: be unique within the parent
     * taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces;
     * not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Resource name of this policy tag, whose format is:
     * &#34;projects/{project}/locations/{region}/taxonomies/{taxonomy}/policyTags/{policytag}&#34;
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Resource name of this policy tag&#39;s parent policy tag.
     * If empty, it means this policy tag is a top level policy tag.
     * If not set, defaults to an empty string.
     * 
     */
    @Import(name="parentPolicyTag")
      private final @Nullable Output<String> parentPolicyTag;

    public Output<String> parentPolicyTag() {
        return this.parentPolicyTag == null ? Codegen.empty() : this.parentPolicyTag;
    }

    /**
     * Taxonomy the policy tag is associated with
     * 
     */
    @Import(name="taxonomy")
      private final @Nullable Output<String> taxonomy;

    public Output<String> taxonomy() {
        return this.taxonomy == null ? Codegen.empty() : this.taxonomy;
    }

    public PolicyTagState(
        @Nullable Output<List<String>> childPolicyTags,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<String> name,
        @Nullable Output<String> parentPolicyTag,
        @Nullable Output<String> taxonomy) {
        this.childPolicyTags = childPolicyTags;
        this.description = description;
        this.displayName = displayName;
        this.name = name;
        this.parentPolicyTag = parentPolicyTag;
        this.taxonomy = taxonomy;
    }

    private PolicyTagState() {
        this.childPolicyTags = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.name = Codegen.empty();
        this.parentPolicyTag = Codegen.empty();
        this.taxonomy = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyTagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> childPolicyTags;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> parentPolicyTag;
        private @Nullable Output<String> taxonomy;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyTagState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childPolicyTags = defaults.childPolicyTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.parentPolicyTag = defaults.parentPolicyTag;
    	      this.taxonomy = defaults.taxonomy;
        }

        public Builder childPolicyTags(@Nullable Output<List<String>> childPolicyTags) {
            this.childPolicyTags = childPolicyTags;
            return this;
        }
        public Builder childPolicyTags(@Nullable List<String> childPolicyTags) {
            this.childPolicyTags = Codegen.ofNullable(childPolicyTags);
            return this;
        }
        public Builder childPolicyTags(String... childPolicyTags) {
            return childPolicyTags(List.of(childPolicyTags));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder parentPolicyTag(@Nullable Output<String> parentPolicyTag) {
            this.parentPolicyTag = parentPolicyTag;
            return this;
        }
        public Builder parentPolicyTag(@Nullable String parentPolicyTag) {
            this.parentPolicyTag = Codegen.ofNullable(parentPolicyTag);
            return this;
        }
        public Builder taxonomy(@Nullable Output<String> taxonomy) {
            this.taxonomy = taxonomy;
            return this;
        }
        public Builder taxonomy(@Nullable String taxonomy) {
            this.taxonomy = Codegen.ofNullable(taxonomy);
            return this;
        }        public PolicyTagState build() {
            return new PolicyTagState(childPolicyTags, description, displayName, name, parentPolicyTag, taxonomy);
        }
    }
}
