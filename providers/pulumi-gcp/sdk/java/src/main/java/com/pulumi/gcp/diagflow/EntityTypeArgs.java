// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.EntityTypeEntityArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntityTypeArgs Empty = new EntityTypeArgs();

    /**
     * The name of this entity type to be displayed on the console.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Enables fuzzy entity extraction during classification.
     * 
     */
    @Import(name="enableFuzzyExtraction")
    private @Nullable Output<Boolean> enableFuzzyExtraction;

    public Optional<Output<Boolean>> enableFuzzyExtraction() {
        return Optional.ofNullable(this.enableFuzzyExtraction);
    }

    /**
     * The collection of entity entries associated with the entity type.
     * Structure is documented below.
     * 
     */
    @Import(name="entities")
    private @Nullable Output<List<EntityTypeEntityArgs>> entities;

    public Optional<Output<List<EntityTypeEntityArgs>>> entities() {
        return Optional.ofNullable(this.entities);
    }

    /**
     * Indicates the kind of entity type.
     * * KIND_MAP: Map entity types allow mapping of a group of synonyms to a reference value.
     * * KIND_LIST: List entity types contain a set of entries that do not map to reference values. However, list entity
     *   types can contain references to other entity types (with or without aliases).
     * * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values.
     *   Possible values are `KIND_MAP`, `KIND_LIST`, and `KIND_REGEXP`.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private EntityTypeArgs() {}

    private EntityTypeArgs(EntityTypeArgs $) {
        this.displayName = $.displayName;
        this.enableFuzzyExtraction = $.enableFuzzyExtraction;
        this.entities = $.entities;
        this.kind = $.kind;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityTypeArgs $;

        public Builder() {
            $ = new EntityTypeArgs();
        }

        public Builder(EntityTypeArgs defaults) {
            $ = new EntityTypeArgs(Objects.requireNonNull(defaults));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder enableFuzzyExtraction(@Nullable Output<Boolean> enableFuzzyExtraction) {
            $.enableFuzzyExtraction = enableFuzzyExtraction;
            return this;
        }

        public Builder enableFuzzyExtraction(Boolean enableFuzzyExtraction) {
            return enableFuzzyExtraction(Output.of(enableFuzzyExtraction));
        }

        public Builder entities(@Nullable Output<List<EntityTypeEntityArgs>> entities) {
            $.entities = entities;
            return this;
        }

        public Builder entities(List<EntityTypeEntityArgs> entities) {
            return entities(Output.of(entities));
        }

        public Builder entities(EntityTypeEntityArgs... entities) {
            return entities(List.of(entities));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public EntityTypeArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            return $;
        }
    }

}
