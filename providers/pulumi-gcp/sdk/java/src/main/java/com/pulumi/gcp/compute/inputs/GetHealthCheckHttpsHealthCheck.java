// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetHealthCheckHttpsHealthCheck extends com.pulumi.resources.InvokeArgs {

    public static final GetHealthCheckHttpsHealthCheck Empty = new GetHealthCheckHttpsHealthCheck();

    @Import(name="host", required=true)
    private String host;

    public String host() {
        return this.host;
    }

    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    @Import(name="portName", required=true)
    private String portName;

    public String portName() {
        return this.portName;
    }

    @Import(name="portSpecification", required=true)
    private String portSpecification;

    public String portSpecification() {
        return this.portSpecification;
    }

    @Import(name="proxyHeader", required=true)
    private String proxyHeader;

    public String proxyHeader() {
        return this.proxyHeader;
    }

    @Import(name="requestPath", required=true)
    private String requestPath;

    public String requestPath() {
        return this.requestPath;
    }

    @Import(name="response", required=true)
    private String response;

    public String response() {
        return this.response;
    }

    private GetHealthCheckHttpsHealthCheck() {}

    private GetHealthCheckHttpsHealthCheck(GetHealthCheckHttpsHealthCheck $) {
        this.host = $.host;
        this.port = $.port;
        this.portName = $.portName;
        this.portSpecification = $.portSpecification;
        this.proxyHeader = $.proxyHeader;
        this.requestPath = $.requestPath;
        this.response = $.response;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHealthCheckHttpsHealthCheck defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHealthCheckHttpsHealthCheck $;

        public Builder() {
            $ = new GetHealthCheckHttpsHealthCheck();
        }

        public Builder(GetHealthCheckHttpsHealthCheck defaults) {
            $ = new GetHealthCheckHttpsHealthCheck(Objects.requireNonNull(defaults));
        }

        public Builder host(String host) {
            $.host = host;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder portName(String portName) {
            $.portName = portName;
            return this;
        }

        public Builder portSpecification(String portSpecification) {
            $.portSpecification = portSpecification;
            return this;
        }

        public Builder proxyHeader(String proxyHeader) {
            $.proxyHeader = proxyHeader;
            return this;
        }

        public Builder requestPath(String requestPath) {
            $.requestPath = requestPath;
            return this;
        }

        public Builder response(String response) {
            $.response = response;
            return this;
        }

        public GetHealthCheckHttpsHealthCheck build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.portName = Objects.requireNonNull($.portName, "expected parameter 'portName' to be non-null");
            $.portSpecification = Objects.requireNonNull($.portSpecification, "expected parameter 'portSpecification' to be non-null");
            $.proxyHeader = Objects.requireNonNull($.proxyHeader, "expected parameter 'proxyHeader' to be non-null");
            $.requestPath = Objects.requireNonNull($.requestPath, "expected parameter 'requestPath' to be non-null");
            $.response = Objects.requireNonNull($.response, "expected parameter 'response' to be non-null");
            return $;
        }
    }

}
