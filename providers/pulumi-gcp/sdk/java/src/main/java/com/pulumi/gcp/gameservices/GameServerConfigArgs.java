// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gameservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gameservices.inputs.GameServerConfigFleetConfigArgs;
import com.pulumi.gcp.gameservices.inputs.GameServerConfigScalingConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GameServerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GameServerConfigArgs Empty = new GameServerConfigArgs();

    /**
     * A unique id for the deployment config.
     * 
     */
    @Import(name="configId", required=true)
    private Output<String> configId;

    public Output<String> configId() {
        return this.configId;
    }

    /**
     * A unique id for the deployment.
     * 
     */
    @Import(name="deploymentId", required=true)
    private Output<String> deploymentId;

    public Output<String> deploymentId() {
        return this.deploymentId;
    }

    /**
     * The description of the game server config.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The fleet config contains list of fleet specs. In the Single Cloud, there
     * will be only one.
     * Structure is documented below.
     * 
     */
    @Import(name="fleetConfigs", required=true)
    private Output<List<GameServerConfigFleetConfigArgs>> fleetConfigs;

    public Output<List<GameServerConfigFleetConfigArgs>> fleetConfigs() {
        return this.fleetConfigs;
    }

    /**
     * Set of labels to group by.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location of the Deployment.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Optional. This contains the autoscaling settings.
     * Structure is documented below.
     * 
     */
    @Import(name="scalingConfigs")
    private @Nullable Output<List<GameServerConfigScalingConfigArgs>> scalingConfigs;

    public Optional<Output<List<GameServerConfigScalingConfigArgs>>> scalingConfigs() {
        return Optional.ofNullable(this.scalingConfigs);
    }

    private GameServerConfigArgs() {}

    private GameServerConfigArgs(GameServerConfigArgs $) {
        this.configId = $.configId;
        this.deploymentId = $.deploymentId;
        this.description = $.description;
        this.fleetConfigs = $.fleetConfigs;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.scalingConfigs = $.scalingConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GameServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GameServerConfigArgs $;

        public Builder() {
            $ = new GameServerConfigArgs();
        }

        public Builder(GameServerConfigArgs defaults) {
            $ = new GameServerConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder configId(Output<String> configId) {
            $.configId = configId;
            return this;
        }

        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        public Builder deploymentId(Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fleetConfigs(Output<List<GameServerConfigFleetConfigArgs>> fleetConfigs) {
            $.fleetConfigs = fleetConfigs;
            return this;
        }

        public Builder fleetConfigs(List<GameServerConfigFleetConfigArgs> fleetConfigs) {
            return fleetConfigs(Output.of(fleetConfigs));
        }

        public Builder fleetConfigs(GameServerConfigFleetConfigArgs... fleetConfigs) {
            return fleetConfigs(List.of(fleetConfigs));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder scalingConfigs(@Nullable Output<List<GameServerConfigScalingConfigArgs>> scalingConfigs) {
            $.scalingConfigs = scalingConfigs;
            return this;
        }

        public Builder scalingConfigs(List<GameServerConfigScalingConfigArgs> scalingConfigs) {
            return scalingConfigs(Output.of(scalingConfigs));
        }

        public Builder scalingConfigs(GameServerConfigScalingConfigArgs... scalingConfigs) {
            return scalingConfigs(List.of(scalingConfigs));
        }

        public GameServerConfigArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            $.deploymentId = Objects.requireNonNull($.deploymentId, "expected parameter 'deploymentId' to be non-null");
            $.fleetConfigs = Objects.requireNonNull($.fleetConfigs, "expected parameter 'fleetConfigs' to be non-null");
            return $;
        }
    }

}
