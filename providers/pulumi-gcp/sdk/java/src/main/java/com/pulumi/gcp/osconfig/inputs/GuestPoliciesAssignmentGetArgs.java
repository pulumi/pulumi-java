// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.GuestPoliciesAssignmentGroupLabelGetArgs;
import com.pulumi.gcp.osconfig.inputs.GuestPoliciesAssignmentOsTypeGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GuestPoliciesAssignmentGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GuestPoliciesAssignmentGetArgs Empty = new GuestPoliciesAssignmentGetArgs();

    /**
     * Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
     * for example &#34;env=prod or env=staging&#34;.
     * Structure is documented below.
     * 
     */
    @Import(name="groupLabels")
    private @Nullable Output<List<GuestPoliciesAssignmentGroupLabelGetArgs>> groupLabels;

    public Optional<Output<List<GuestPoliciesAssignmentGroupLabelGetArgs>>> groupLabels() {
        return Optional.ofNullable(this.groupLabels);
    }

    /**
     * Targets VM instances whose name starts with one of these prefixes.
     * Like labels, this is another way to group VM instances when targeting configs,
     * for example prefix=&#34;prod-&#34;.
     * Only supported for project-level policies.
     * 
     */
    @Import(name="instanceNamePrefixes")
    private @Nullable Output<List<String>> instanceNamePrefixes;

    public Optional<Output<List<String>>> instanceNamePrefixes() {
        return Optional.ofNullable(this.instanceNamePrefixes);
    }

    /**
     * Targets any of the instances specified. Instances are specified by their URI in the form
     * zones/[ZONE]/instances/[INSTANCE_NAME].
     * Instance targeting is uncommon and is supported to facilitate the management of changes
     * by the instance or to target specific VM instances for development and testing.
     * Only supported for project-level policies and must reference instances within this project.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<String>> instances;

    public Optional<Output<List<String>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * Targets VM instances matching at least one of the following OS types.
     * VM instances must match all supplied criteria for a given OsType to be included.
     * Structure is documented below.
     * 
     */
    @Import(name="osTypes")
    private @Nullable Output<List<GuestPoliciesAssignmentOsTypeGetArgs>> osTypes;

    public Optional<Output<List<GuestPoliciesAssignmentOsTypeGetArgs>>> osTypes() {
        return Optional.ofNullable(this.osTypes);
    }

    /**
     * Targets instances in any of these zones. Leave empty to target instances in any zone.
     * Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     * 
     */
    @Import(name="zones")
    private @Nullable Output<List<String>> zones;

    public Optional<Output<List<String>>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private GuestPoliciesAssignmentGetArgs() {}

    private GuestPoliciesAssignmentGetArgs(GuestPoliciesAssignmentGetArgs $) {
        this.groupLabels = $.groupLabels;
        this.instanceNamePrefixes = $.instanceNamePrefixes;
        this.instances = $.instances;
        this.osTypes = $.osTypes;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GuestPoliciesAssignmentGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GuestPoliciesAssignmentGetArgs $;

        public Builder() {
            $ = new GuestPoliciesAssignmentGetArgs();
        }

        public Builder(GuestPoliciesAssignmentGetArgs defaults) {
            $ = new GuestPoliciesAssignmentGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder groupLabels(@Nullable Output<List<GuestPoliciesAssignmentGroupLabelGetArgs>> groupLabels) {
            $.groupLabels = groupLabels;
            return this;
        }

        public Builder groupLabels(List<GuestPoliciesAssignmentGroupLabelGetArgs> groupLabels) {
            return groupLabels(Output.of(groupLabels));
        }

        public Builder groupLabels(GuestPoliciesAssignmentGroupLabelGetArgs... groupLabels) {
            return groupLabels(List.of(groupLabels));
        }

        public Builder instanceNamePrefixes(@Nullable Output<List<String>> instanceNamePrefixes) {
            $.instanceNamePrefixes = instanceNamePrefixes;
            return this;
        }

        public Builder instanceNamePrefixes(List<String> instanceNamePrefixes) {
            return instanceNamePrefixes(Output.of(instanceNamePrefixes));
        }

        public Builder instanceNamePrefixes(String... instanceNamePrefixes) {
            return instanceNamePrefixes(List.of(instanceNamePrefixes));
        }

        public Builder instances(@Nullable Output<List<String>> instances) {
            $.instances = instances;
            return this;
        }

        public Builder instances(List<String> instances) {
            return instances(Output.of(instances));
        }

        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }

        public Builder osTypes(@Nullable Output<List<GuestPoliciesAssignmentOsTypeGetArgs>> osTypes) {
            $.osTypes = osTypes;
            return this;
        }

        public Builder osTypes(List<GuestPoliciesAssignmentOsTypeGetArgs> osTypes) {
            return osTypes(Output.of(osTypes));
        }

        public Builder osTypes(GuestPoliciesAssignmentOsTypeGetArgs... osTypes) {
            return osTypes(List.of(osTypes));
        }

        public Builder zones(@Nullable Output<List<String>> zones) {
            $.zones = zones;
            return this;
        }

        public Builder zones(List<String> zones) {
            return zones(Output.of(zones));
        }

        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public GuestPoliciesAssignmentGetArgs build() {
            return $;
        }
    }

}
