// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs;
import java.lang.Double;
import java.util.Objects;


public final class RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs Empty = new RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs();

    /**
     * Specifies the value of the fixed delay interval.
     * Structure is documented below.
     * 
     */
    @Import(name="fixedDelay", required=true)
    private Output<RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs> fixedDelay;

    public Output<RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs> fixedDelay() {
        return this.fixedDelay;
    }

    /**
     * The percentage of traffic (connections/operations/requests) on which delay will
     * be introduced as part of fault injection. The value must be between 0.0 and
     * 100.0 inclusive.
     * 
     */
    @Import(name="percentage", required=true)
    private Output<Double> percentage;

    public Output<Double> percentage() {
        return this.percentage;
    }

    private RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs() {}

    private RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs $) {
        this.fixedDelay = $.fixedDelay;
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs $;

        public Builder() {
            $ = new RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs();
        }

        public Builder(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs defaults) {
            $ = new RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder fixedDelay(Output<RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs> fixedDelay) {
            $.fixedDelay = fixedDelay;
            return this;
        }

        public Builder fixedDelay(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayGetArgs fixedDelay) {
            return fixedDelay(Output.of(fixedDelay));
        }

        public Builder percentage(Output<Double> percentage) {
            $.percentage = percentage;
            return this;
        }

        public Builder percentage(Double percentage) {
            return percentage(Output.of(percentage));
        }

        public RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayGetArgs build() {
            $.fixedDelay = Objects.requireNonNull($.fixedDelay, "expected parameter 'fixedDelay' to be non-null");
            $.percentage = Objects.requireNonNull($.percentage, "expected parameter 'percentage' to be non-null");
            return $;
        }
    }

}
