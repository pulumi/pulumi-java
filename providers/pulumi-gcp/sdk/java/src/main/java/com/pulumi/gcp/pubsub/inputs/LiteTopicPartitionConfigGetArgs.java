// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.pubsub.inputs.LiteTopicPartitionConfigCapacityGetArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LiteTopicPartitionConfigGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiteTopicPartitionConfigGetArgs Empty = new LiteTopicPartitionConfigGetArgs();

    /**
     * The capacity configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="capacity")
      private final @Nullable Output<LiteTopicPartitionConfigCapacityGetArgs> capacity;

    public Output<LiteTopicPartitionConfigCapacityGetArgs> capacity() {
        return this.capacity == null ? Codegen.empty() : this.capacity;
    }

    /**
     * The number of partitions in the topic. Must be at least 1.
     * 
     */
    @Import(name="count", required=true)
      private final Output<Integer> count;

    public Output<Integer> count() {
        return this.count;
    }

    public LiteTopicPartitionConfigGetArgs(
        @Nullable Output<LiteTopicPartitionConfigCapacityGetArgs> capacity,
        Output<Integer> count) {
        this.capacity = capacity;
        this.count = Objects.requireNonNull(count, "expected parameter 'count' to be non-null");
    }

    private LiteTopicPartitionConfigGetArgs() {
        this.capacity = Codegen.empty();
        this.count = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiteTopicPartitionConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<LiteTopicPartitionConfigCapacityGetArgs> capacity;
        private Output<Integer> count;

        public Builder() {
    	      // Empty
        }

        public Builder(LiteTopicPartitionConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.count = defaults.count;
        }

        public Builder capacity(@Nullable Output<LiteTopicPartitionConfigCapacityGetArgs> capacity) {
            this.capacity = capacity;
            return this;
        }
        public Builder capacity(@Nullable LiteTopicPartitionConfigCapacityGetArgs capacity) {
            this.capacity = Codegen.ofNullable(capacity);
            return this;
        }
        public Builder count(Output<Integer> count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }
        public Builder count(Integer count) {
            this.count = Output.of(Objects.requireNonNull(count));
            return this;
        }        public LiteTopicPartitionConfigGetArgs build() {
            return new LiteTopicPartitionConfigGetArgs(capacity, count);
        }
    }
}
