// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.AwsClusterAuthorizationAdminUserGetArgs;
import java.util.List;
import java.util.Objects;


public final class AwsClusterAuthorizationGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AwsClusterAuthorizationGetArgs Empty = new AwsClusterAuthorizationGetArgs();

    /**
     * Required. Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. At most one user can be specified. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
     * 
     */
    @Import(name="adminUsers", required=true)
    private Output<List<AwsClusterAuthorizationAdminUserGetArgs>> adminUsers;

    /**
     * @return Required. Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. At most one user can be specified. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
     * 
     */
    public Output<List<AwsClusterAuthorizationAdminUserGetArgs>> adminUsers() {
        return this.adminUsers;
    }

    private AwsClusterAuthorizationGetArgs() {}

    private AwsClusterAuthorizationGetArgs(AwsClusterAuthorizationGetArgs $) {
        this.adminUsers = $.adminUsers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsClusterAuthorizationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsClusterAuthorizationGetArgs $;

        public Builder() {
            $ = new AwsClusterAuthorizationGetArgs();
        }

        public Builder(AwsClusterAuthorizationGetArgs defaults) {
            $ = new AwsClusterAuthorizationGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUsers Required. Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. At most one user can be specified. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
         * 
         * @return builder
         * 
         */
        public Builder adminUsers(Output<List<AwsClusterAuthorizationAdminUserGetArgs>> adminUsers) {
            $.adminUsers = adminUsers;
            return this;
        }

        /**
         * @param adminUsers Required. Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. At most one user can be specified. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
         * 
         * @return builder
         * 
         */
        public Builder adminUsers(List<AwsClusterAuthorizationAdminUserGetArgs> adminUsers) {
            return adminUsers(Output.of(adminUsers));
        }

        /**
         * @param adminUsers Required. Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. At most one user can be specified. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
         * 
         * @return builder
         * 
         */
        public Builder adminUsers(AwsClusterAuthorizationAdminUserGetArgs... adminUsers) {
            return adminUsers(List.of(adminUsers));
        }

        public AwsClusterAuthorizationGetArgs build() {
            $.adminUsers = Objects.requireNonNull($.adminUsers, "expected parameter 'adminUsers' to be non-null");
            return $;
        }
    }

}
