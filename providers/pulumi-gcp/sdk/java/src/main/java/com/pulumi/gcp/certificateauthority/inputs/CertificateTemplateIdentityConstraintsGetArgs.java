// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.certificateauthority.inputs.CertificateTemplateIdentityConstraintsCelExpressionGetArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateTemplateIdentityConstraintsGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateTemplateIdentityConstraintsGetArgs Empty = new CertificateTemplateIdentityConstraintsGetArgs();

    /**
     * Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
     * 
     */
    @Import(name="allowSubjectAltNamesPassthrough", required=true)
    private Output<Boolean> allowSubjectAltNamesPassthrough;

    /**
     * @return Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
     * 
     */
    public Output<Boolean> allowSubjectAltNamesPassthrough() {
        return this.allowSubjectAltNamesPassthrough;
    }

    /**
     * Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
     * 
     */
    @Import(name="allowSubjectPassthrough", required=true)
    private Output<Boolean> allowSubjectPassthrough;

    /**
     * @return Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
     * 
     */
    public Output<Boolean> allowSubjectPassthrough() {
        return this.allowSubjectPassthrough;
    }

    /**
     * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
     * 
     */
    @Import(name="celExpression")
    private @Nullable Output<CertificateTemplateIdentityConstraintsCelExpressionGetArgs> celExpression;

    /**
     * @return Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
     * 
     */
    public Optional<Output<CertificateTemplateIdentityConstraintsCelExpressionGetArgs>> celExpression() {
        return Optional.ofNullable(this.celExpression);
    }

    private CertificateTemplateIdentityConstraintsGetArgs() {}

    private CertificateTemplateIdentityConstraintsGetArgs(CertificateTemplateIdentityConstraintsGetArgs $) {
        this.allowSubjectAltNamesPassthrough = $.allowSubjectAltNamesPassthrough;
        this.allowSubjectPassthrough = $.allowSubjectPassthrough;
        this.celExpression = $.celExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateTemplateIdentityConstraintsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateTemplateIdentityConstraintsGetArgs $;

        public Builder() {
            $ = new CertificateTemplateIdentityConstraintsGetArgs();
        }

        public Builder(CertificateTemplateIdentityConstraintsGetArgs defaults) {
            $ = new CertificateTemplateIdentityConstraintsGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowSubjectAltNamesPassthrough Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
         * 
         * @return builder
         * 
         */
        public Builder allowSubjectAltNamesPassthrough(Output<Boolean> allowSubjectAltNamesPassthrough) {
            $.allowSubjectAltNamesPassthrough = allowSubjectAltNamesPassthrough;
            return this;
        }

        /**
         * @param allowSubjectAltNamesPassthrough Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
         * 
         * @return builder
         * 
         */
        public Builder allowSubjectAltNamesPassthrough(Boolean allowSubjectAltNamesPassthrough) {
            return allowSubjectAltNamesPassthrough(Output.of(allowSubjectAltNamesPassthrough));
        }

        /**
         * @param allowSubjectPassthrough Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
         * 
         * @return builder
         * 
         */
        public Builder allowSubjectPassthrough(Output<Boolean> allowSubjectPassthrough) {
            $.allowSubjectPassthrough = allowSubjectPassthrough;
            return this;
        }

        /**
         * @param allowSubjectPassthrough Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
         * 
         * @return builder
         * 
         */
        public Builder allowSubjectPassthrough(Boolean allowSubjectPassthrough) {
            return allowSubjectPassthrough(Output.of(allowSubjectPassthrough));
        }

        /**
         * @param celExpression Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
         * 
         * @return builder
         * 
         */
        public Builder celExpression(@Nullable Output<CertificateTemplateIdentityConstraintsCelExpressionGetArgs> celExpression) {
            $.celExpression = celExpression;
            return this;
        }

        /**
         * @param celExpression Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
         * 
         * @return builder
         * 
         */
        public Builder celExpression(CertificateTemplateIdentityConstraintsCelExpressionGetArgs celExpression) {
            return celExpression(Output.of(celExpression));
        }

        public CertificateTemplateIdentityConstraintsGetArgs build() {
            $.allowSubjectAltNamesPassthrough = Objects.requireNonNull($.allowSubjectAltNamesPassthrough, "expected parameter 'allowSubjectAltNamesPassthrough' to be non-null");
            $.allowSubjectPassthrough = Objects.requireNonNull($.allowSubjectPassthrough, "expected parameter 'allowSubjectPassthrough' to be non-null");
            return $;
        }
    }

}
