// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobArgs Empty = new TransferJobArgs();

    /**
     * Unique description to identify the Transfer Job.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    public Output<String> description() {
        return this.description;
    }

    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<TransferJobScheduleArgs> schedule;

    public Optional<Output<TransferJobScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Transfer specification. Structure documented below.
     * 
     */
    @Import(name="transferSpec", required=true)
    private Output<TransferJobTransferSpecArgs> transferSpec;

    public Output<TransferJobTransferSpecArgs> transferSpec() {
        return this.transferSpec;
    }

    private TransferJobArgs() {}

    private TransferJobArgs(TransferJobArgs $) {
        this.description = $.description;
        this.project = $.project;
        this.schedule = $.schedule;
        this.status = $.status;
        this.transferSpec = $.transferSpec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobArgs $;

        public Builder() {
            $ = new TransferJobArgs();
        }

        public Builder(TransferJobArgs defaults) {
            $ = new TransferJobArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder schedule(@Nullable Output<TransferJobScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(TransferJobScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder transferSpec(Output<TransferJobTransferSpecArgs> transferSpec) {
            $.transferSpec = transferSpec;
            return this;
        }

        public Builder transferSpec(TransferJobTransferSpecArgs transferSpec) {
            return transferSpec(Output.of(transferSpec));
        }

        public TransferJobArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.transferSpec = Objects.requireNonNull($.transferSpec, "expected parameter 'transferSpec' to be non-null");
            return $;
        }
    }

}
