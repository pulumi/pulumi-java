// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxPageEntryFulfillmentGetArgs;
import com.pulumi.gcp.diagflow.inputs.CxPageEventHandlerGetArgs;
import com.pulumi.gcp.diagflow.inputs.CxPageFormGetArgs;
import com.pulumi.gcp.diagflow.inputs.CxPageTransitionRouteGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxPageState extends com.pulumi.resources.ResourceArgs {

    public static final CxPageState Empty = new CxPageState();

    /**
     * The human-readable name of the parameter, unique within the form.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The fulfillment to call when the session is entering the page.
     * Structure is documented below.
     * 
     */
    @Import(name="entryFulfillment")
    private @Nullable Output<CxPageEntryFulfillmentGetArgs> entryFulfillment;

    public Optional<Output<CxPageEntryFulfillmentGetArgs>> entryFulfillment() {
        return Optional.ofNullable(this.entryFulfillment);
    }

    /**
     * Handlers associated with the page to handle events such as webhook errors, no match or no input.
     * Structure is documented below.
     * 
     */
    @Import(name="eventHandlers")
    private @Nullable Output<List<CxPageEventHandlerGetArgs>> eventHandlers;

    public Optional<Output<List<CxPageEventHandlerGetArgs>>> eventHandlers() {
        return Optional.ofNullable(this.eventHandlers);
    }

    /**
     * The form associated with the page, used for collecting parameters relevant to the page.
     * Structure is documented below.
     * 
     */
    @Import(name="form")
    private @Nullable Output<CxPageFormGetArgs> form;

    public Optional<Output<CxPageFormGetArgs>> form() {
        return Optional.ofNullable(this.form);
    }

    /**
     * The language of the following fields in page:
     * Page.entry_fulfillment.messages
     * Page.entry_fulfillment.conditional_cases
     * Page.event_handlers.trigger_fulfillment.messages
     * Page.event_handlers.trigger_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
     * Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
     * Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
     * Page.transition_routes.trigger_fulfillment.messages
     * Page.transition_routes.trigger_fulfillment.conditional_cases
     * If not specified, the agent&#39;s default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
     * 
     */
    @Import(name="languageCode")
    private @Nullable Output<String> languageCode;

    public Optional<Output<String>> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }

    /**
     * - 
     * The unique identifier of this event handler.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The flow to create a page for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
     * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page&#39;s transition route &gt; page&#39;s transition route group &gt; flow&#39;s transition routes.
     * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
     * Format:projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;/transitionRouteGroups/&lt;TransitionRouteGroup ID&gt;.
     * 
     */
    @Import(name="transitionRouteGroups")
    private @Nullable Output<List<String>> transitionRouteGroups;

    public Optional<Output<List<String>>> transitionRouteGroups() {
        return Optional.ofNullable(this.transitionRouteGroups);
    }

    /**
     * A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
     * When we are in a certain page, the TransitionRoutes are evalauted in the following order:
     * TransitionRoutes defined in the page with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in flow with intent specified.
     * TransitionRoutes defined in the transition route groups with intent specified.
     * TransitionRoutes defined in the page with only condition specified.
     * TransitionRoutes defined in the transition route groups with only condition specified.
     * Structure is documented below.
     * 
     */
    @Import(name="transitionRoutes")
    private @Nullable Output<List<CxPageTransitionRouteGetArgs>> transitionRoutes;

    public Optional<Output<List<CxPageTransitionRouteGetArgs>>> transitionRoutes() {
        return Optional.ofNullable(this.transitionRoutes);
    }

    private CxPageState() {}

    private CxPageState(CxPageState $) {
        this.displayName = $.displayName;
        this.entryFulfillment = $.entryFulfillment;
        this.eventHandlers = $.eventHandlers;
        this.form = $.form;
        this.languageCode = $.languageCode;
        this.name = $.name;
        this.parent = $.parent;
        this.transitionRouteGroups = $.transitionRouteGroups;
        this.transitionRoutes = $.transitionRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxPageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxPageState $;

        public Builder() {
            $ = new CxPageState();
        }

        public Builder(CxPageState defaults) {
            $ = new CxPageState(Objects.requireNonNull(defaults));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder entryFulfillment(@Nullable Output<CxPageEntryFulfillmentGetArgs> entryFulfillment) {
            $.entryFulfillment = entryFulfillment;
            return this;
        }

        public Builder entryFulfillment(CxPageEntryFulfillmentGetArgs entryFulfillment) {
            return entryFulfillment(Output.of(entryFulfillment));
        }

        public Builder eventHandlers(@Nullable Output<List<CxPageEventHandlerGetArgs>> eventHandlers) {
            $.eventHandlers = eventHandlers;
            return this;
        }

        public Builder eventHandlers(List<CxPageEventHandlerGetArgs> eventHandlers) {
            return eventHandlers(Output.of(eventHandlers));
        }

        public Builder eventHandlers(CxPageEventHandlerGetArgs... eventHandlers) {
            return eventHandlers(List.of(eventHandlers));
        }

        public Builder form(@Nullable Output<CxPageFormGetArgs> form) {
            $.form = form;
            return this;
        }

        public Builder form(CxPageFormGetArgs form) {
            return form(Output.of(form));
        }

        public Builder languageCode(@Nullable Output<String> languageCode) {
            $.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            return languageCode(Output.of(languageCode));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public Builder transitionRouteGroups(@Nullable Output<List<String>> transitionRouteGroups) {
            $.transitionRouteGroups = transitionRouteGroups;
            return this;
        }

        public Builder transitionRouteGroups(List<String> transitionRouteGroups) {
            return transitionRouteGroups(Output.of(transitionRouteGroups));
        }

        public Builder transitionRouteGroups(String... transitionRouteGroups) {
            return transitionRouteGroups(List.of(transitionRouteGroups));
        }

        public Builder transitionRoutes(@Nullable Output<List<CxPageTransitionRouteGetArgs>> transitionRoutes) {
            $.transitionRoutes = transitionRoutes;
            return this;
        }

        public Builder transitionRoutes(List<CxPageTransitionRouteGetArgs> transitionRoutes) {
            return transitionRoutes(Output.of(transitionRoutes));
        }

        public Builder transitionRoutes(CxPageTransitionRouteGetArgs... transitionRoutes) {
            return transitionRoutes(List.of(transitionRoutes));
        }

        public CxPageState build() {
            return $;
        }
    }

}
