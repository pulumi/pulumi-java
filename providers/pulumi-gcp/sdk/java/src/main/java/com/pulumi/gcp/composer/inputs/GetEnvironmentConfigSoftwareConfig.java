// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class GetEnvironmentConfigSoftwareConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetEnvironmentConfigSoftwareConfig Empty = new GetEnvironmentConfigSoftwareConfig();

    @Import(name="airflowConfigOverrides", required=true)
      private final Map<String,String> airflowConfigOverrides;

    public Map<String,String> airflowConfigOverrides() {
        return this.airflowConfigOverrides;
    }

    @Import(name="envVariables", required=true)
      private final Map<String,String> envVariables;

    public Map<String,String> envVariables() {
        return this.envVariables;
    }

    @Import(name="imageVersion", required=true)
      private final String imageVersion;

    public String imageVersion() {
        return this.imageVersion;
    }

    @Import(name="pypiPackages", required=true)
      private final Map<String,String> pypiPackages;

    public Map<String,String> pypiPackages() {
        return this.pypiPackages;
    }

    @Import(name="pythonVersion", required=true)
      private final String pythonVersion;

    public String pythonVersion() {
        return this.pythonVersion;
    }

    @Import(name="schedulerCount", required=true)
      private final Integer schedulerCount;

    public Integer schedulerCount() {
        return this.schedulerCount;
    }

    public GetEnvironmentConfigSoftwareConfig(
        Map<String,String> airflowConfigOverrides,
        Map<String,String> envVariables,
        String imageVersion,
        Map<String,String> pypiPackages,
        String pythonVersion,
        Integer schedulerCount) {
        this.airflowConfigOverrides = Objects.requireNonNull(airflowConfigOverrides, "expected parameter 'airflowConfigOverrides' to be non-null");
        this.envVariables = Objects.requireNonNull(envVariables, "expected parameter 'envVariables' to be non-null");
        this.imageVersion = Objects.requireNonNull(imageVersion, "expected parameter 'imageVersion' to be non-null");
        this.pypiPackages = Objects.requireNonNull(pypiPackages, "expected parameter 'pypiPackages' to be non-null");
        this.pythonVersion = Objects.requireNonNull(pythonVersion, "expected parameter 'pythonVersion' to be non-null");
        this.schedulerCount = Objects.requireNonNull(schedulerCount, "expected parameter 'schedulerCount' to be non-null");
    }

    private GetEnvironmentConfigSoftwareConfig() {
        this.airflowConfigOverrides = Map.of();
        this.envVariables = Map.of();
        this.imageVersion = null;
        this.pypiPackages = Map.of();
        this.pythonVersion = null;
        this.schedulerCount = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfigSoftwareConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> airflowConfigOverrides;
        private Map<String,String> envVariables;
        private String imageVersion;
        private Map<String,String> pypiPackages;
        private String pythonVersion;
        private Integer schedulerCount;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEnvironmentConfigSoftwareConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.airflowConfigOverrides = defaults.airflowConfigOverrides;
    	      this.envVariables = defaults.envVariables;
    	      this.imageVersion = defaults.imageVersion;
    	      this.pypiPackages = defaults.pypiPackages;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.schedulerCount = defaults.schedulerCount;
        }

        public Builder airflowConfigOverrides(Map<String,String> airflowConfigOverrides) {
            this.airflowConfigOverrides = Objects.requireNonNull(airflowConfigOverrides);
            return this;
        }
        public Builder envVariables(Map<String,String> envVariables) {
            this.envVariables = Objects.requireNonNull(envVariables);
            return this;
        }
        public Builder imageVersion(String imageVersion) {
            this.imageVersion = Objects.requireNonNull(imageVersion);
            return this;
        }
        public Builder pypiPackages(Map<String,String> pypiPackages) {
            this.pypiPackages = Objects.requireNonNull(pypiPackages);
            return this;
        }
        public Builder pythonVersion(String pythonVersion) {
            this.pythonVersion = Objects.requireNonNull(pythonVersion);
            return this;
        }
        public Builder schedulerCount(Integer schedulerCount) {
            this.schedulerCount = Objects.requireNonNull(schedulerCount);
            return this;
        }        public GetEnvironmentConfigSoftwareConfig build() {
            return new GetEnvironmentConfigSoftwareConfig(airflowConfigOverrides, envVariables, imageVersion, pypiPackages, pythonVersion, schedulerCount);
        }
    }
}
