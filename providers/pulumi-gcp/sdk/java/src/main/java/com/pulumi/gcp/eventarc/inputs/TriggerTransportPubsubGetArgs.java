// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.eventarc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerTransportPubsubGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerTransportPubsubGetArgs Empty = new TriggerTransportPubsubGetArgs();

    /**
     * - 
     * Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
     * 
     */
    @Import(name="subscription")
    private @Nullable Output<String> subscription;

    public Optional<Output<String>> subscription() {
        return Optional.ofNullable(this.subscription);
    }

    /**
     * Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
     * 
     */
    @Import(name="topic")
    private @Nullable Output<String> topic;

    public Optional<Output<String>> topic() {
        return Optional.ofNullable(this.topic);
    }

    private TriggerTransportPubsubGetArgs() {}

    private TriggerTransportPubsubGetArgs(TriggerTransportPubsubGetArgs $) {
        this.subscription = $.subscription;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerTransportPubsubGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerTransportPubsubGetArgs $;

        public Builder() {
            $ = new TriggerTransportPubsubGetArgs();
        }

        public Builder(TriggerTransportPubsubGetArgs defaults) {
            $ = new TriggerTransportPubsubGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder subscription(@Nullable Output<String> subscription) {
            $.subscription = subscription;
            return this;
        }

        public Builder subscription(String subscription) {
            return subscription(Output.of(subscription));
        }

        public Builder topic(@Nullable Output<String> topic) {
            $.topic = topic;
            return this;
        }

        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public TriggerTransportPubsubGetArgs build() {
            return $;
        }
    }

}
