// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionAutomaticScalingArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionBasicScalingArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionHandlerArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionLibraryArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionManualScalingArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionVpcAccessConnectorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StandardAppVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final StandardAppVersionArgs Empty = new StandardAppVersionArgs();

    /**
     * Automatic scaling is based on request rate, response latencies, and other application metrics.
     * Structure is documented below.
     * 
     */
    @Import(name="automaticScaling")
      private final @Nullable Output<StandardAppVersionAutomaticScalingArgs> automaticScaling;

    public Output<StandardAppVersionAutomaticScalingArgs> automaticScaling() {
        return this.automaticScaling == null ? Codegen.empty() : this.automaticScaling;
    }

    /**
     * Basic scaling creates instances when your application receives requests. Each instance will be shut down when the application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
     * Structure is documented below.
     * 
     */
    @Import(name="basicScaling")
      private final @Nullable Output<StandardAppVersionBasicScalingArgs> basicScaling;

    public Output<StandardAppVersionBasicScalingArgs> basicScaling() {
        return this.basicScaling == null ? Codegen.empty() : this.basicScaling;
    }

    /**
     * If set to `true`, the service will be deleted if it is the last version.
     * 
     */
    @Import(name="deleteServiceOnDestroy")
      private final @Nullable Output<Boolean> deleteServiceOnDestroy;

    public Output<Boolean> deleteServiceOnDestroy() {
        return this.deleteServiceOnDestroy == null ? Codegen.empty() : this.deleteServiceOnDestroy;
    }

    /**
     * Code and application artifacts that make up this version.
     * Structure is documented below.
     * 
     */
    @Import(name="deployment", required=true)
      private final Output<StandardAppVersionDeploymentArgs> deployment;

    public Output<StandardAppVersionDeploymentArgs> deployment() {
        return this.deployment;
    }

    /**
     * The entrypoint for the application.
     * Structure is documented below.
     * 
     */
    @Import(name="entrypoint", required=true)
      private final Output<StandardAppVersionEntrypointArgs> entrypoint;

    public Output<StandardAppVersionEntrypointArgs> entrypoint() {
        return this.entrypoint;
    }

    /**
     * Environment variables available to the application.
     * 
     */
    @Import(name="envVariables")
      private final @Nullable Output<Map<String,String>> envVariables;

    public Output<Map<String,String>> envVariables() {
        return this.envVariables == null ? Codegen.empty() : this.envVariables;
    }

    /**
     * An ordered list of URL-matching patterns that should be applied to incoming requests.
     * The first matching URL handles the request and other request handlers are not attempted.
     * Structure is documented below.
     * 
     */
    @Import(name="handlers")
      private final @Nullable Output<List<StandardAppVersionHandlerArgs>> handlers;

    public Output<List<StandardAppVersionHandlerArgs>> handlers() {
        return this.handlers == null ? Codegen.empty() : this.handlers;
    }

    /**
     * A list of the types of messages that this application is able to receive.
     * Each value may be one of `INBOUND_SERVICE_MAIL`, `INBOUND_SERVICE_MAIL_BOUNCE`, `INBOUND_SERVICE_XMPP_ERROR`, `INBOUND_SERVICE_XMPP_MESSAGE`, `INBOUND_SERVICE_XMPP_SUBSCRIBE`, `INBOUND_SERVICE_XMPP_PRESENCE`, `INBOUND_SERVICE_CHANNEL_PRESENCE`, and `INBOUND_SERVICE_WARMUP`.
     * 
     */
    @Import(name="inboundServices")
      private final @Nullable Output<List<String>> inboundServices;

    public Output<List<String>> inboundServices() {
        return this.inboundServices == null ? Codegen.empty() : this.inboundServices;
    }

    /**
     * Instance class that is used to run this version. Valid values are
     * AutomaticScaling: F1, F2, F4, F4_1G
     * BasicScaling or ManualScaling: B1, B2, B4, B4_1G, B8
     * Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If no scaling is specified, AutomaticScaling is chosen.
     * 
     */
    @Import(name="instanceClass")
      private final @Nullable Output<String> instanceClass;

    public Output<String> instanceClass() {
        return this.instanceClass == null ? Codegen.empty() : this.instanceClass;
    }

    /**
     * Configuration for third-party Python runtime libraries that are required by the application.
     * Structure is documented below.
     * 
     */
    @Import(name="libraries")
      private final @Nullable Output<List<StandardAppVersionLibraryArgs>> libraries;

    public Output<List<StandardAppVersionLibraryArgs>> libraries() {
        return this.libraries == null ? Codegen.empty() : this.libraries;
    }

    /**
     * A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
     * Structure is documented below.
     * 
     */
    @Import(name="manualScaling")
      private final @Nullable Output<StandardAppVersionManualScalingArgs> manualScaling;

    public Output<StandardAppVersionManualScalingArgs> manualScaling() {
        return this.manualScaling == null ? Codegen.empty() : this.manualScaling;
    }

    /**
     * If set to `true`, the application version will not be deleted.
     * 
     */
    @Import(name="noopOnDestroy")
      private final @Nullable Output<Boolean> noopOnDestroy;

    public Output<Boolean> noopOnDestroy() {
        return this.noopOnDestroy == null ? Codegen.empty() : this.noopOnDestroy;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Desired runtime. Example python27.
     * 
     */
    @Import(name="runtime", required=true)
      private final Output<String> runtime;

    public Output<String> runtime() {
        return this.runtime;
    }

    /**
     * The version of the API in the given runtime environment.
     * Please see the app.yaml reference for valid values at `https://cloud.google.com/appengine/docs/standard/<language>/config/appref`\
     * Substitute `<language>` with `python`, `java`, `php`, `ruby`, `go` or `nodejs`.
     * 
     */
    @Import(name="runtimeApiVersion")
      private final @Nullable Output<String> runtimeApiVersion;

    public Output<String> runtimeApiVersion() {
        return this.runtimeApiVersion == null ? Codegen.empty() : this.runtimeApiVersion;
    }

    /**
     * AppEngine service resource
     * 
     */
    @Import(name="service", required=true)
      private final Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    /**
     * Whether multiple requests can be dispatched to this version at once.
     * 
     */
    @Import(name="threadsafe")
      private final @Nullable Output<Boolean> threadsafe;

    public Output<Boolean> threadsafe() {
        return this.threadsafe == null ? Codegen.empty() : this.threadsafe;
    }

    /**
     * Relative name of the version within the service. For example, `v1`. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
     * 
     */
    @Import(name="versionId")
      private final @Nullable Output<String> versionId;

    public Output<String> versionId() {
        return this.versionId == null ? Codegen.empty() : this.versionId;
    }

    /**
     * Enables VPC connectivity for standard apps.
     * Structure is documented below.
     * 
     */
    @Import(name="vpcAccessConnector")
      private final @Nullable Output<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector;

    public Output<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector() {
        return this.vpcAccessConnector == null ? Codegen.empty() : this.vpcAccessConnector;
    }

    public StandardAppVersionArgs(
        @Nullable Output<StandardAppVersionAutomaticScalingArgs> automaticScaling,
        @Nullable Output<StandardAppVersionBasicScalingArgs> basicScaling,
        @Nullable Output<Boolean> deleteServiceOnDestroy,
        Output<StandardAppVersionDeploymentArgs> deployment,
        Output<StandardAppVersionEntrypointArgs> entrypoint,
        @Nullable Output<Map<String,String>> envVariables,
        @Nullable Output<List<StandardAppVersionHandlerArgs>> handlers,
        @Nullable Output<List<String>> inboundServices,
        @Nullable Output<String> instanceClass,
        @Nullable Output<List<StandardAppVersionLibraryArgs>> libraries,
        @Nullable Output<StandardAppVersionManualScalingArgs> manualScaling,
        @Nullable Output<Boolean> noopOnDestroy,
        @Nullable Output<String> project,
        Output<String> runtime,
        @Nullable Output<String> runtimeApiVersion,
        Output<String> service,
        @Nullable Output<Boolean> threadsafe,
        @Nullable Output<String> versionId,
        @Nullable Output<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector) {
        this.automaticScaling = automaticScaling;
        this.basicScaling = basicScaling;
        this.deleteServiceOnDestroy = deleteServiceOnDestroy;
        this.deployment = Objects.requireNonNull(deployment, "expected parameter 'deployment' to be non-null");
        this.entrypoint = Objects.requireNonNull(entrypoint, "expected parameter 'entrypoint' to be non-null");
        this.envVariables = envVariables;
        this.handlers = handlers;
        this.inboundServices = inboundServices;
        this.instanceClass = instanceClass;
        this.libraries = libraries;
        this.manualScaling = manualScaling;
        this.noopOnDestroy = noopOnDestroy;
        this.project = project;
        this.runtime = Objects.requireNonNull(runtime, "expected parameter 'runtime' to be non-null");
        this.runtimeApiVersion = runtimeApiVersion;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.threadsafe = threadsafe;
        this.versionId = versionId;
        this.vpcAccessConnector = vpcAccessConnector;
    }

    private StandardAppVersionArgs() {
        this.automaticScaling = Codegen.empty();
        this.basicScaling = Codegen.empty();
        this.deleteServiceOnDestroy = Codegen.empty();
        this.deployment = Codegen.empty();
        this.entrypoint = Codegen.empty();
        this.envVariables = Codegen.empty();
        this.handlers = Codegen.empty();
        this.inboundServices = Codegen.empty();
        this.instanceClass = Codegen.empty();
        this.libraries = Codegen.empty();
        this.manualScaling = Codegen.empty();
        this.noopOnDestroy = Codegen.empty();
        this.project = Codegen.empty();
        this.runtime = Codegen.empty();
        this.runtimeApiVersion = Codegen.empty();
        this.service = Codegen.empty();
        this.threadsafe = Codegen.empty();
        this.versionId = Codegen.empty();
        this.vpcAccessConnector = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardAppVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<StandardAppVersionAutomaticScalingArgs> automaticScaling;
        private @Nullable Output<StandardAppVersionBasicScalingArgs> basicScaling;
        private @Nullable Output<Boolean> deleteServiceOnDestroy;
        private Output<StandardAppVersionDeploymentArgs> deployment;
        private Output<StandardAppVersionEntrypointArgs> entrypoint;
        private @Nullable Output<Map<String,String>> envVariables;
        private @Nullable Output<List<StandardAppVersionHandlerArgs>> handlers;
        private @Nullable Output<List<String>> inboundServices;
        private @Nullable Output<String> instanceClass;
        private @Nullable Output<List<StandardAppVersionLibraryArgs>> libraries;
        private @Nullable Output<StandardAppVersionManualScalingArgs> manualScaling;
        private @Nullable Output<Boolean> noopOnDestroy;
        private @Nullable Output<String> project;
        private Output<String> runtime;
        private @Nullable Output<String> runtimeApiVersion;
        private Output<String> service;
        private @Nullable Output<Boolean> threadsafe;
        private @Nullable Output<String> versionId;
        private @Nullable Output<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardAppVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticScaling = defaults.automaticScaling;
    	      this.basicScaling = defaults.basicScaling;
    	      this.deleteServiceOnDestroy = defaults.deleteServiceOnDestroy;
    	      this.deployment = defaults.deployment;
    	      this.entrypoint = defaults.entrypoint;
    	      this.envVariables = defaults.envVariables;
    	      this.handlers = defaults.handlers;
    	      this.inboundServices = defaults.inboundServices;
    	      this.instanceClass = defaults.instanceClass;
    	      this.libraries = defaults.libraries;
    	      this.manualScaling = defaults.manualScaling;
    	      this.noopOnDestroy = defaults.noopOnDestroy;
    	      this.project = defaults.project;
    	      this.runtime = defaults.runtime;
    	      this.runtimeApiVersion = defaults.runtimeApiVersion;
    	      this.service = defaults.service;
    	      this.threadsafe = defaults.threadsafe;
    	      this.versionId = defaults.versionId;
    	      this.vpcAccessConnector = defaults.vpcAccessConnector;
        }

        public Builder automaticScaling(@Nullable Output<StandardAppVersionAutomaticScalingArgs> automaticScaling) {
            this.automaticScaling = automaticScaling;
            return this;
        }
        public Builder automaticScaling(@Nullable StandardAppVersionAutomaticScalingArgs automaticScaling) {
            this.automaticScaling = Codegen.ofNullable(automaticScaling);
            return this;
        }
        public Builder basicScaling(@Nullable Output<StandardAppVersionBasicScalingArgs> basicScaling) {
            this.basicScaling = basicScaling;
            return this;
        }
        public Builder basicScaling(@Nullable StandardAppVersionBasicScalingArgs basicScaling) {
            this.basicScaling = Codegen.ofNullable(basicScaling);
            return this;
        }
        public Builder deleteServiceOnDestroy(@Nullable Output<Boolean> deleteServiceOnDestroy) {
            this.deleteServiceOnDestroy = deleteServiceOnDestroy;
            return this;
        }
        public Builder deleteServiceOnDestroy(@Nullable Boolean deleteServiceOnDestroy) {
            this.deleteServiceOnDestroy = Codegen.ofNullable(deleteServiceOnDestroy);
            return this;
        }
        public Builder deployment(Output<StandardAppVersionDeploymentArgs> deployment) {
            this.deployment = Objects.requireNonNull(deployment);
            return this;
        }
        public Builder deployment(StandardAppVersionDeploymentArgs deployment) {
            this.deployment = Output.of(Objects.requireNonNull(deployment));
            return this;
        }
        public Builder entrypoint(Output<StandardAppVersionEntrypointArgs> entrypoint) {
            this.entrypoint = Objects.requireNonNull(entrypoint);
            return this;
        }
        public Builder entrypoint(StandardAppVersionEntrypointArgs entrypoint) {
            this.entrypoint = Output.of(Objects.requireNonNull(entrypoint));
            return this;
        }
        public Builder envVariables(@Nullable Output<Map<String,String>> envVariables) {
            this.envVariables = envVariables;
            return this;
        }
        public Builder envVariables(@Nullable Map<String,String> envVariables) {
            this.envVariables = Codegen.ofNullable(envVariables);
            return this;
        }
        public Builder handlers(@Nullable Output<List<StandardAppVersionHandlerArgs>> handlers) {
            this.handlers = handlers;
            return this;
        }
        public Builder handlers(@Nullable List<StandardAppVersionHandlerArgs> handlers) {
            this.handlers = Codegen.ofNullable(handlers);
            return this;
        }
        public Builder handlers(StandardAppVersionHandlerArgs... handlers) {
            return handlers(List.of(handlers));
        }
        public Builder inboundServices(@Nullable Output<List<String>> inboundServices) {
            this.inboundServices = inboundServices;
            return this;
        }
        public Builder inboundServices(@Nullable List<String> inboundServices) {
            this.inboundServices = Codegen.ofNullable(inboundServices);
            return this;
        }
        public Builder inboundServices(String... inboundServices) {
            return inboundServices(List.of(inboundServices));
        }
        public Builder instanceClass(@Nullable Output<String> instanceClass) {
            this.instanceClass = instanceClass;
            return this;
        }
        public Builder instanceClass(@Nullable String instanceClass) {
            this.instanceClass = Codegen.ofNullable(instanceClass);
            return this;
        }
        public Builder libraries(@Nullable Output<List<StandardAppVersionLibraryArgs>> libraries) {
            this.libraries = libraries;
            return this;
        }
        public Builder libraries(@Nullable List<StandardAppVersionLibraryArgs> libraries) {
            this.libraries = Codegen.ofNullable(libraries);
            return this;
        }
        public Builder libraries(StandardAppVersionLibraryArgs... libraries) {
            return libraries(List.of(libraries));
        }
        public Builder manualScaling(@Nullable Output<StandardAppVersionManualScalingArgs> manualScaling) {
            this.manualScaling = manualScaling;
            return this;
        }
        public Builder manualScaling(@Nullable StandardAppVersionManualScalingArgs manualScaling) {
            this.manualScaling = Codegen.ofNullable(manualScaling);
            return this;
        }
        public Builder noopOnDestroy(@Nullable Output<Boolean> noopOnDestroy) {
            this.noopOnDestroy = noopOnDestroy;
            return this;
        }
        public Builder noopOnDestroy(@Nullable Boolean noopOnDestroy) {
            this.noopOnDestroy = Codegen.ofNullable(noopOnDestroy);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder runtime(Output<String> runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }
        public Builder runtime(String runtime) {
            this.runtime = Output.of(Objects.requireNonNull(runtime));
            return this;
        }
        public Builder runtimeApiVersion(@Nullable Output<String> runtimeApiVersion) {
            this.runtimeApiVersion = runtimeApiVersion;
            return this;
        }
        public Builder runtimeApiVersion(@Nullable String runtimeApiVersion) {
            this.runtimeApiVersion = Codegen.ofNullable(runtimeApiVersion);
            return this;
        }
        public Builder service(Output<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public Builder service(String service) {
            this.service = Output.of(Objects.requireNonNull(service));
            return this;
        }
        public Builder threadsafe(@Nullable Output<Boolean> threadsafe) {
            this.threadsafe = threadsafe;
            return this;
        }
        public Builder threadsafe(@Nullable Boolean threadsafe) {
            this.threadsafe = Codegen.ofNullable(threadsafe);
            return this;
        }
        public Builder versionId(@Nullable Output<String> versionId) {
            this.versionId = versionId;
            return this;
        }
        public Builder versionId(@Nullable String versionId) {
            this.versionId = Codegen.ofNullable(versionId);
            return this;
        }
        public Builder vpcAccessConnector(@Nullable Output<StandardAppVersionVpcAccessConnectorArgs> vpcAccessConnector) {
            this.vpcAccessConnector = vpcAccessConnector;
            return this;
        }
        public Builder vpcAccessConnector(@Nullable StandardAppVersionVpcAccessConnectorArgs vpcAccessConnector) {
            this.vpcAccessConnector = Codegen.ofNullable(vpcAccessConnector);
            return this;
        }        public StandardAppVersionArgs build() {
            return new StandardAppVersionArgs(automaticScaling, basicScaling, deleteServiceOnDestroy, deployment, entrypoint, envVariables, handlers, inboundServices, instanceClass, libraries, manualScaling, noopOnDestroy, project, runtime, runtimeApiVersion, service, threadsafe, versionId, vpcAccessConnector);
        }
    }
}
