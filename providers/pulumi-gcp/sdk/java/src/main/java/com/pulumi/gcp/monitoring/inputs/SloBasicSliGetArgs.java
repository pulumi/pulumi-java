// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.monitoring.inputs.SloBasicSliAvailabilityGetArgs;
import com.pulumi.gcp.monitoring.inputs.SloBasicSliLatencyGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SloBasicSliGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloBasicSliGetArgs Empty = new SloBasicSliGetArgs();

    /**
     * Availability based SLI, dervied from count of requests made to this service that return successfully.
     * Structure is documented below.
     * 
     */
    @Import(name="availability")
      private final @Nullable Output<SloBasicSliAvailabilityGetArgs> availability;

    public Output<SloBasicSliAvailabilityGetArgs> availability() {
        return this.availability == null ? Codegen.empty() : this.availability;
    }

    /**
     * Parameters for a latency threshold SLI.
     * Structure is documented below.
     * 
     */
    @Import(name="latency")
      private final @Nullable Output<SloBasicSliLatencyGetArgs> latency;

    public Output<SloBasicSliLatencyGetArgs> latency() {
        return this.latency == null ? Codegen.empty() : this.latency;
    }

    /**
     * An optional set of locations to which this SLI is relevant.
     * Telemetry from other locations will not be used to calculate
     * performance for this SLI. If omitted, this SLI applies to all
     * locations in which the Service has activity. For service types
     * that don&#39;t support breaking down by location, setting this
     * field will result in an error.
     * 
     */
    @Import(name="locations")
      private final @Nullable Output<List<String>> locations;

    public Output<List<String>> locations() {
        return this.locations == null ? Codegen.empty() : this.locations;
    }

    /**
     * An optional set of RPCs to which this SLI is relevant.
     * Telemetry from other methods will not be used to calculate
     * performance for this SLI. If omitted, this SLI applies to all
     * the Service&#39;s methods. For service types that don&#39;t support
     * breaking down by method, setting this field will result in an
     * error.
     * 
     */
    @Import(name="methods")
      private final @Nullable Output<List<String>> methods;

    public Output<List<String>> methods() {
        return this.methods == null ? Codegen.empty() : this.methods;
    }

    /**
     * The set of API versions to which this SLI is relevant.
     * Telemetry from other API versions will not be used to
     * calculate performance for this SLI. If omitted,
     * this SLI applies to all API versions. For service types
     * that don&#39;t support breaking down by version, setting this
     * field will result in an error.
     * 
     */
    @Import(name="versions")
      private final @Nullable Output<List<String>> versions;

    public Output<List<String>> versions() {
        return this.versions == null ? Codegen.empty() : this.versions;
    }

    public SloBasicSliGetArgs(
        @Nullable Output<SloBasicSliAvailabilityGetArgs> availability,
        @Nullable Output<SloBasicSliLatencyGetArgs> latency,
        @Nullable Output<List<String>> locations,
        @Nullable Output<List<String>> methods,
        @Nullable Output<List<String>> versions) {
        this.availability = availability;
        this.latency = latency;
        this.locations = locations;
        this.methods = methods;
        this.versions = versions;
    }

    private SloBasicSliGetArgs() {
        this.availability = Codegen.empty();
        this.latency = Codegen.empty();
        this.locations = Codegen.empty();
        this.methods = Codegen.empty();
        this.versions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloBasicSliGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SloBasicSliAvailabilityGetArgs> availability;
        private @Nullable Output<SloBasicSliLatencyGetArgs> latency;
        private @Nullable Output<List<String>> locations;
        private @Nullable Output<List<String>> methods;
        private @Nullable Output<List<String>> versions;

        public Builder() {
    	      // Empty
        }

        public Builder(SloBasicSliGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.latency = defaults.latency;
    	      this.locations = defaults.locations;
    	      this.methods = defaults.methods;
    	      this.versions = defaults.versions;
        }

        public Builder availability(@Nullable Output<SloBasicSliAvailabilityGetArgs> availability) {
            this.availability = availability;
            return this;
        }
        public Builder availability(@Nullable SloBasicSliAvailabilityGetArgs availability) {
            this.availability = Codegen.ofNullable(availability);
            return this;
        }
        public Builder latency(@Nullable Output<SloBasicSliLatencyGetArgs> latency) {
            this.latency = latency;
            return this;
        }
        public Builder latency(@Nullable SloBasicSliLatencyGetArgs latency) {
            this.latency = Codegen.ofNullable(latency);
            return this;
        }
        public Builder locations(@Nullable Output<List<String>> locations) {
            this.locations = locations;
            return this;
        }
        public Builder locations(@Nullable List<String> locations) {
            this.locations = Codegen.ofNullable(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder methods(@Nullable Output<List<String>> methods) {
            this.methods = methods;
            return this;
        }
        public Builder methods(@Nullable List<String> methods) {
            this.methods = Codegen.ofNullable(methods);
            return this;
        }
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }
        public Builder versions(@Nullable Output<List<String>> versions) {
            this.versions = versions;
            return this;
        }
        public Builder versions(@Nullable List<String> versions) {
            this.versions = Codegen.ofNullable(versions);
            return this;
        }
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }        public SloBasicSliGetArgs build() {
            return new SloBasicSliGetArgs(availability, latency, locations, methods, versions);
        }
    }
}
