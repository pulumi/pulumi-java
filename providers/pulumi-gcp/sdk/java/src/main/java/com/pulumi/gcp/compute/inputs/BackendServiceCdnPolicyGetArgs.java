// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyCacheKeyPolicyGetArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyNegativeCachingPolicyGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackendServiceCdnPolicyGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendServiceCdnPolicyGetArgs Empty = new BackendServiceCdnPolicyGetArgs();

    /**
     * The CacheKeyPolicy for this CdnPolicy.
     * Structure is documented below.
     * 
     */
    @Import(name="cacheKeyPolicy")
      private final @Nullable Output<BackendServiceCdnPolicyCacheKeyPolicyGetArgs> cacheKeyPolicy;

    public Output<BackendServiceCdnPolicyCacheKeyPolicyGetArgs> cacheKeyPolicy() {
        return this.cacheKeyPolicy == null ? Codegen.empty() : this.cacheKeyPolicy;
    }

    /**
     * Specifies the cache setting for all responses from this backend.
     * The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
     * Possible values are `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, and `CACHE_ALL_STATIC`.
     * 
     */
    @Import(name="cacheMode")
      private final @Nullable Output<String> cacheMode;

    public Output<String> cacheMode() {
        return this.cacheMode == null ? Codegen.empty() : this.cacheMode;
    }

    /**
     * Specifies the maximum allowed TTL for cached content served by this origin.
     * 
     */
    @Import(name="clientTtl")
      private final @Nullable Output<Integer> clientTtl;

    public Output<Integer> clientTtl() {
        return this.clientTtl == null ? Codegen.empty() : this.clientTtl;
    }

    /**
     * Specifies the default TTL for cached content served by this origin for responses
     * that do not have an existing valid TTL (max-age or s-max-age).
     * 
     */
    @Import(name="defaultTtl")
      private final @Nullable Output<Integer> defaultTtl;

    public Output<Integer> defaultTtl() {
        return this.defaultTtl == null ? Codegen.empty() : this.defaultTtl;
    }

    /**
     * Specifies the maximum allowed TTL for cached content served by this origin.
     * 
     */
    @Import(name="maxTtl")
      private final @Nullable Output<Integer> maxTtl;

    public Output<Integer> maxTtl() {
        return this.maxTtl == null ? Codegen.empty() : this.maxTtl;
    }

    /**
     * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
     * 
     */
    @Import(name="negativeCaching")
      private final @Nullable Output<Boolean> negativeCaching;

    public Output<Boolean> negativeCaching() {
        return this.negativeCaching == null ? Codegen.empty() : this.negativeCaching;
    }

    /**
     * Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
     * Omitting the policy and leaving negativeCaching enabled will use Cloud CDN&#39;s default cache TTLs.
     * Structure is documented below.
     * 
     */
    @Import(name="negativeCachingPolicies")
      private final @Nullable Output<List<BackendServiceCdnPolicyNegativeCachingPolicyGetArgs>> negativeCachingPolicies;

    public Output<List<BackendServiceCdnPolicyNegativeCachingPolicyGetArgs>> negativeCachingPolicies() {
        return this.negativeCachingPolicies == null ? Codegen.empty() : this.negativeCachingPolicies;
    }

    /**
     * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
     * 
     */
    @Import(name="serveWhileStale")
      private final @Nullable Output<Integer> serveWhileStale;

    public Output<Integer> serveWhileStale() {
        return this.serveWhileStale == null ? Codegen.empty() : this.serveWhileStale;
    }

    /**
     * Maximum number of seconds the response to a signed URL request
     * will be considered fresh, defaults to 1hr (3600s). After this
     * time period, the response will be revalidated before
     * being served.
     * When serving responses to signed URL requests, Cloud CDN will
     * internally behave as though all responses from this backend had a
     * &#34;Cache-Control: public, max-age=[TTL]&#34; header, regardless of any
     * existing Cache-Control header. The actual headers served in
     * responses will not be altered.
     * 
     */
    @Import(name="signedUrlCacheMaxAgeSec")
      private final @Nullable Output<Integer> signedUrlCacheMaxAgeSec;

    public Output<Integer> signedUrlCacheMaxAgeSec() {
        return this.signedUrlCacheMaxAgeSec == null ? Codegen.empty() : this.signedUrlCacheMaxAgeSec;
    }

    public BackendServiceCdnPolicyGetArgs(
        @Nullable Output<BackendServiceCdnPolicyCacheKeyPolicyGetArgs> cacheKeyPolicy,
        @Nullable Output<String> cacheMode,
        @Nullable Output<Integer> clientTtl,
        @Nullable Output<Integer> defaultTtl,
        @Nullable Output<Integer> maxTtl,
        @Nullable Output<Boolean> negativeCaching,
        @Nullable Output<List<BackendServiceCdnPolicyNegativeCachingPolicyGetArgs>> negativeCachingPolicies,
        @Nullable Output<Integer> serveWhileStale,
        @Nullable Output<Integer> signedUrlCacheMaxAgeSec) {
        this.cacheKeyPolicy = cacheKeyPolicy;
        this.cacheMode = cacheMode;
        this.clientTtl = clientTtl;
        this.defaultTtl = defaultTtl;
        this.maxTtl = maxTtl;
        this.negativeCaching = negativeCaching;
        this.negativeCachingPolicies = negativeCachingPolicies;
        this.serveWhileStale = serveWhileStale;
        this.signedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
    }

    private BackendServiceCdnPolicyGetArgs() {
        this.cacheKeyPolicy = Codegen.empty();
        this.cacheMode = Codegen.empty();
        this.clientTtl = Codegen.empty();
        this.defaultTtl = Codegen.empty();
        this.maxTtl = Codegen.empty();
        this.negativeCaching = Codegen.empty();
        this.negativeCachingPolicies = Codegen.empty();
        this.serveWhileStale = Codegen.empty();
        this.signedUrlCacheMaxAgeSec = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceCdnPolicyGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BackendServiceCdnPolicyCacheKeyPolicyGetArgs> cacheKeyPolicy;
        private @Nullable Output<String> cacheMode;
        private @Nullable Output<Integer> clientTtl;
        private @Nullable Output<Integer> defaultTtl;
        private @Nullable Output<Integer> maxTtl;
        private @Nullable Output<Boolean> negativeCaching;
        private @Nullable Output<List<BackendServiceCdnPolicyNegativeCachingPolicyGetArgs>> negativeCachingPolicies;
        private @Nullable Output<Integer> serveWhileStale;
        private @Nullable Output<Integer> signedUrlCacheMaxAgeSec;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceCdnPolicyGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheKeyPolicy = defaults.cacheKeyPolicy;
    	      this.cacheMode = defaults.cacheMode;
    	      this.clientTtl = defaults.clientTtl;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.maxTtl = defaults.maxTtl;
    	      this.negativeCaching = defaults.negativeCaching;
    	      this.negativeCachingPolicies = defaults.negativeCachingPolicies;
    	      this.serveWhileStale = defaults.serveWhileStale;
    	      this.signedUrlCacheMaxAgeSec = defaults.signedUrlCacheMaxAgeSec;
        }

        public Builder cacheKeyPolicy(@Nullable Output<BackendServiceCdnPolicyCacheKeyPolicyGetArgs> cacheKeyPolicy) {
            this.cacheKeyPolicy = cacheKeyPolicy;
            return this;
        }
        public Builder cacheKeyPolicy(@Nullable BackendServiceCdnPolicyCacheKeyPolicyGetArgs cacheKeyPolicy) {
            this.cacheKeyPolicy = Codegen.ofNullable(cacheKeyPolicy);
            return this;
        }
        public Builder cacheMode(@Nullable Output<String> cacheMode) {
            this.cacheMode = cacheMode;
            return this;
        }
        public Builder cacheMode(@Nullable String cacheMode) {
            this.cacheMode = Codegen.ofNullable(cacheMode);
            return this;
        }
        public Builder clientTtl(@Nullable Output<Integer> clientTtl) {
            this.clientTtl = clientTtl;
            return this;
        }
        public Builder clientTtl(@Nullable Integer clientTtl) {
            this.clientTtl = Codegen.ofNullable(clientTtl);
            return this;
        }
        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            this.defaultTtl = defaultTtl;
            return this;
        }
        public Builder defaultTtl(@Nullable Integer defaultTtl) {
            this.defaultTtl = Codegen.ofNullable(defaultTtl);
            return this;
        }
        public Builder maxTtl(@Nullable Output<Integer> maxTtl) {
            this.maxTtl = maxTtl;
            return this;
        }
        public Builder maxTtl(@Nullable Integer maxTtl) {
            this.maxTtl = Codegen.ofNullable(maxTtl);
            return this;
        }
        public Builder negativeCaching(@Nullable Output<Boolean> negativeCaching) {
            this.negativeCaching = negativeCaching;
            return this;
        }
        public Builder negativeCaching(@Nullable Boolean negativeCaching) {
            this.negativeCaching = Codegen.ofNullable(negativeCaching);
            return this;
        }
        public Builder negativeCachingPolicies(@Nullable Output<List<BackendServiceCdnPolicyNegativeCachingPolicyGetArgs>> negativeCachingPolicies) {
            this.negativeCachingPolicies = negativeCachingPolicies;
            return this;
        }
        public Builder negativeCachingPolicies(@Nullable List<BackendServiceCdnPolicyNegativeCachingPolicyGetArgs> negativeCachingPolicies) {
            this.negativeCachingPolicies = Codegen.ofNullable(negativeCachingPolicies);
            return this;
        }
        public Builder negativeCachingPolicies(BackendServiceCdnPolicyNegativeCachingPolicyGetArgs... negativeCachingPolicies) {
            return negativeCachingPolicies(List.of(negativeCachingPolicies));
        }
        public Builder serveWhileStale(@Nullable Output<Integer> serveWhileStale) {
            this.serveWhileStale = serveWhileStale;
            return this;
        }
        public Builder serveWhileStale(@Nullable Integer serveWhileStale) {
            this.serveWhileStale = Codegen.ofNullable(serveWhileStale);
            return this;
        }
        public Builder signedUrlCacheMaxAgeSec(@Nullable Output<Integer> signedUrlCacheMaxAgeSec) {
            this.signedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
            return this;
        }
        public Builder signedUrlCacheMaxAgeSec(@Nullable Integer signedUrlCacheMaxAgeSec) {
            this.signedUrlCacheMaxAgeSec = Codegen.ofNullable(signedUrlCacheMaxAgeSec);
            return this;
        }        public BackendServiceCdnPolicyGetArgs build() {
            return new BackendServiceCdnPolicyGetArgs(cacheKeyPolicy, cacheMode, clientTtl, defaultTtl, maxTtl, negativeCaching, negativeCachingPolicies, serveWhileStale, signedUrlCacheMaxAgeSec);
        }
    }
}
