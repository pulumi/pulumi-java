// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.AzureNodePoolAutoscalingArgs;
import com.pulumi.gcp.container.inputs.AzureNodePoolConfigArgs;
import com.pulumi.gcp.container.inputs.AzureNodePoolMaxPodsConstraintArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureNodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureNodePoolArgs Empty = new AzureNodePoolArgs();

    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Required. Autoscaler configuration for this node pool.
     * 
     */
    @Import(name="autoscaling", required=true)
    private Output<AzureNodePoolAutoscalingArgs> autoscaling;

    public Output<AzureNodePoolAutoscalingArgs> autoscaling() {
        return this.autoscaling;
    }

    /**
     * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     * 
     */
    @Import(name="azureAvailabilityZone")
    private @Nullable Output<String> azureAvailabilityZone;

    public Optional<Output<String>> azureAvailabilityZone() {
        return Optional.ofNullable(this.azureAvailabilityZone);
    }

    /**
     * The azureCluster for the resource
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Required. The node configuration of the node pool.
     * 
     */
    @Import(name="config", required=true)
    private Output<AzureNodePoolConfigArgs> config;

    public Output<AzureNodePoolConfigArgs> config() {
        return this.config;
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint", required=true)
    private Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint;

    public Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint() {
        return this.maxPodsConstraint;
    }

    /**
     * The name of this resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. The ARM ID of the subnet where the node pool VMs run. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    private AzureNodePoolArgs() {}

    private AzureNodePoolArgs(AzureNodePoolArgs $) {
        this.annotations = $.annotations;
        this.autoscaling = $.autoscaling;
        this.azureAvailabilityZone = $.azureAvailabilityZone;
        this.cluster = $.cluster;
        this.config = $.config;
        this.location = $.location;
        this.maxPodsConstraint = $.maxPodsConstraint;
        this.name = $.name;
        this.project = $.project;
        this.subnetId = $.subnetId;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureNodePoolArgs $;

        public Builder() {
            $ = new AzureNodePoolArgs();
        }

        public Builder(AzureNodePoolArgs defaults) {
            $ = new AzureNodePoolArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder autoscaling(Output<AzureNodePoolAutoscalingArgs> autoscaling) {
            $.autoscaling = autoscaling;
            return this;
        }

        public Builder autoscaling(AzureNodePoolAutoscalingArgs autoscaling) {
            return autoscaling(Output.of(autoscaling));
        }

        public Builder azureAvailabilityZone(@Nullable Output<String> azureAvailabilityZone) {
            $.azureAvailabilityZone = azureAvailabilityZone;
            return this;
        }

        public Builder azureAvailabilityZone(String azureAvailabilityZone) {
            return azureAvailabilityZone(Output.of(azureAvailabilityZone));
        }

        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        public Builder config(Output<AzureNodePoolConfigArgs> config) {
            $.config = config;
            return this;
        }

        public Builder config(AzureNodePoolConfigArgs config) {
            return config(Output.of(config));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder maxPodsConstraint(Output<AzureNodePoolMaxPodsConstraintArgs> maxPodsConstraint) {
            $.maxPodsConstraint = maxPodsConstraint;
            return this;
        }

        public Builder maxPodsConstraint(AzureNodePoolMaxPodsConstraintArgs maxPodsConstraint) {
            return maxPodsConstraint(Output.of(maxPodsConstraint));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public AzureNodePoolArgs build() {
            $.autoscaling = Objects.requireNonNull($.autoscaling, "expected parameter 'autoscaling' to be non-null");
            $.cluster = Objects.requireNonNull($.cluster, "expected parameter 'cluster' to be non-null");
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.maxPodsConstraint = Objects.requireNonNull($.maxPodsConstraint, "expected parameter 'maxPodsConstraint' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
