// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GetInstanceTemplateDiskDiskEncryptionKey;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class GetInstanceTemplateDisk extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceTemplateDisk Empty = new GetInstanceTemplateDisk();

    /**
     * Whether or not the disk should be auto-deleted.
     * This defaults to true.
     * 
     */
    @Import(name="autoDelete", required=true)
    private Boolean autoDelete;

    /**
     * @return Whether or not the disk should be auto-deleted.
     * This defaults to true.
     * 
     */
    public Boolean autoDelete() {
        return this.autoDelete;
    }

    /**
     * Indicates that this is a boot disk.
     * 
     */
    @Import(name="boot", required=true)
    private Boolean boot;

    /**
     * @return Indicates that this is a boot disk.
     * 
     */
    public Boolean boot() {
        return this.boot;
    }

    /**
     * A unique device name that is reflected into the
     * /dev/  tree of a Linux operating system running within the instance. If not
     * specified, the server chooses a default device name to apply to this disk.
     * 
     */
    @Import(name="deviceName", required=true)
    private String deviceName;

    /**
     * @return A unique device name that is reflected into the
     * /dev/  tree of a Linux operating system running within the instance. If not
     * specified, the server chooses a default device name to apply to this disk.
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Encrypts or decrypts a disk using a customer-supplied encryption key.
     * 
     */
    @Import(name="diskEncryptionKeys", required=true)
    private List<GetInstanceTemplateDiskDiskEncryptionKey> diskEncryptionKeys;

    /**
     * @return Encrypts or decrypts a disk using a customer-supplied encryption key.
     * 
     */
    public List<GetInstanceTemplateDiskDiskEncryptionKey> diskEncryptionKeys() {
        return this.diskEncryptionKeys;
    }

    /**
     * Name of the disk. When not provided, this defaults
     * to the name of the instance.
     * 
     */
    @Import(name="diskName", required=true)
    private String diskName;

    /**
     * @return Name of the disk. When not provided, this defaults
     * to the name of the instance.
     * 
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * The size of the image in gigabytes. If not
     * specified, it will inherit the size of its base image. For SCRATCH disks,
     * the size must be exactly 375GB.
     * 
     */
    @Import(name="diskSizeGb", required=true)
    private Integer diskSizeGb;

    /**
     * @return The size of the image in gigabytes. If not
     * specified, it will inherit the size of its base image. For SCRATCH disks,
     * the size must be exactly 375GB.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }

    /**
     * The GCE disk type. Can be either `&#34;pd-ssd&#34;`,
     * `&#34;local-ssd&#34;`, `&#34;pd-balanced&#34;` or `&#34;pd-standard&#34;`.
     * 
     */
    @Import(name="diskType", required=true)
    private String diskType;

    /**
     * @return The GCE disk type. Can be either `&#34;pd-ssd&#34;`,
     * `&#34;local-ssd&#34;`, `&#34;pd-balanced&#34;` or `&#34;pd-standard&#34;`.
     * 
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * Specifies the disk interface to use for attaching this disk,
     * which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI
     * and the request will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI.
     * 
     */
    @Import(name="interface", required=true)
    private String interface_;

    /**
     * @return Specifies the disk interface to use for attaching this disk,
     * which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI
     * and the request will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI.
     * 
     */
    public String interface_() {
        return this.interface_;
    }

    /**
     * (Optional) A set of ket/value label pairs to assign to disk created from
     * this template
     * 
     */
    @Import(name="labels", required=true)
    private Map<String,String> labels;

    /**
     * @return (Optional) A set of ket/value label pairs to assign to disk created from
     * this template
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }

    /**
     * The mode in which to attach this disk, either READ_WRITE
     * or READ_ONLY. If you are attaching or creating a boot disk, this must
     * read-write mode.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    /**
     * @return The mode in which to attach this disk, either READ_WRITE
     * or READ_ONLY. If you are attaching or creating a boot disk, this must
     * read-write mode.
     * 
     */
    public String mode() {
        return this.mode;
    }

    @Import(name="resourcePolicies", required=true)
    private List<String> resourcePolicies;

    public List<String> resourcePolicies() {
        return this.resourcePolicies;
    }

    /**
     * The name (**not self_link**)
     * of the disk (such as those managed by `gcp.compute.Disk`) to attach.
     * &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
     * 
     */
    @Import(name="source", required=true)
    private String source;

    /**
     * @return The name (**not self_link**)
     * of the disk (such as those managed by `gcp.compute.Disk`) to attach.
     * &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
     * 
     */
    public String source() {
        return this.source;
    }

    /**
     * The image from which to
     * initialize this disk. This can be one of: the image&#39;s `self_link`,
     * `projects/{project}/global/images/{image}`,
     * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
     * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
     * `{project}/{image}`, `{family}`, or `{image}`.
     * &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
     * 
     */
    @Import(name="sourceImage", required=true)
    private String sourceImage;

    /**
     * @return The image from which to
     * initialize this disk. This can be one of: the image&#39;s `self_link`,
     * `projects/{project}/global/images/{image}`,
     * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
     * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
     * `{project}/{image}`, `{family}`, or `{image}`.
     * &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
     * 
     */
    public String sourceImage() {
        return this.sourceImage;
    }

    /**
     * The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetInstanceTemplateDisk() {}

    private GetInstanceTemplateDisk(GetInstanceTemplateDisk $) {
        this.autoDelete = $.autoDelete;
        this.boot = $.boot;
        this.deviceName = $.deviceName;
        this.diskEncryptionKeys = $.diskEncryptionKeys;
        this.diskName = $.diskName;
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
        this.interface_ = $.interface_;
        this.labels = $.labels;
        this.mode = $.mode;
        this.resourcePolicies = $.resourcePolicies;
        this.source = $.source;
        this.sourceImage = $.sourceImage;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceTemplateDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceTemplateDisk $;

        public Builder() {
            $ = new GetInstanceTemplateDisk();
        }

        public Builder(GetInstanceTemplateDisk defaults) {
            $ = new GetInstanceTemplateDisk(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoDelete Whether or not the disk should be auto-deleted.
         * This defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(Boolean autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        /**
         * @param boot Indicates that this is a boot disk.
         * 
         * @return builder
         * 
         */
        public Builder boot(Boolean boot) {
            $.boot = boot;
            return this;
        }

        /**
         * @param deviceName A unique device name that is reflected into the
         * /dev/  tree of a Linux operating system running within the instance. If not
         * specified, the server chooses a default device name to apply to this disk.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param diskEncryptionKeys Encrypts or decrypts a disk using a customer-supplied encryption key.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeys(List<GetInstanceTemplateDiskDiskEncryptionKey> diskEncryptionKeys) {
            $.diskEncryptionKeys = diskEncryptionKeys;
            return this;
        }

        /**
         * @param diskEncryptionKeys Encrypts or decrypts a disk using a customer-supplied encryption key.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeys(GetInstanceTemplateDiskDiskEncryptionKey... diskEncryptionKeys) {
            return diskEncryptionKeys(List.of(diskEncryptionKeys));
        }

        /**
         * @param diskName Name of the disk. When not provided, this defaults
         * to the name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder diskName(String diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskSizeGb The size of the image in gigabytes. If not
         * specified, it will inherit the size of its base image. For SCRATCH disks,
         * the size must be exactly 375GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskType The GCE disk type. Can be either `&#34;pd-ssd&#34;`,
         * `&#34;local-ssd&#34;`, `&#34;pd-balanced&#34;` or `&#34;pd-standard&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param interface_ Specifies the disk interface to use for attaching this disk,
         * which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI
         * and the request will fail if you attempt to attach a persistent disk in any other format
         * than SCSI. Local SSDs can use either NVME or SCSI.
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param labels (Optional) A set of ket/value label pairs to assign to disk created from
         * this template
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param mode The mode in which to attach this disk, either READ_WRITE
         * or READ_ONLY. If you are attaching or creating a boot disk, this must
         * read-write mode.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        public Builder resourcePolicies(List<String> resourcePolicies) {
            $.resourcePolicies = resourcePolicies;
            return this;
        }

        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }

        /**
         * @param source The name (**not self_link**)
         * of the disk (such as those managed by `gcp.compute.Disk`) to attach.
         * &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            $.source = source;
            return this;
        }

        /**
         * @param sourceImage The image from which to
         * initialize this disk. This can be one of: the image&#39;s `self_link`,
         * `projects/{project}/global/images/{image}`,
         * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
         * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
         * `{project}/{image}`, `{family}`, or `{image}`.
         * &gt; **Note:** Either `source` or `source_image` is **required** in a disk block unless the disk type is `local-ssd`. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
         * 
         * @return builder
         * 
         */
        public Builder sourceImage(String sourceImage) {
            $.sourceImage = sourceImage;
            return this;
        }

        /**
         * @param type The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetInstanceTemplateDisk build() {
            $.autoDelete = Objects.requireNonNull($.autoDelete, "expected parameter 'autoDelete' to be non-null");
            $.boot = Objects.requireNonNull($.boot, "expected parameter 'boot' to be non-null");
            $.deviceName = Objects.requireNonNull($.deviceName, "expected parameter 'deviceName' to be non-null");
            $.diskEncryptionKeys = Objects.requireNonNull($.diskEncryptionKeys, "expected parameter 'diskEncryptionKeys' to be non-null");
            $.diskName = Objects.requireNonNull($.diskName, "expected parameter 'diskName' to be non-null");
            $.diskSizeGb = Objects.requireNonNull($.diskSizeGb, "expected parameter 'diskSizeGb' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.interface_ = Objects.requireNonNull($.interface_, "expected parameter 'interface' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.resourcePolicies = Objects.requireNonNull($.resourcePolicies, "expected parameter 'resourcePolicies' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.sourceImage = Objects.requireNonNull($.sourceImage, "expected parameter 'sourceImage' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
