// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.DiskDiskEncryptionKeyArgs;
import com.pulumi.gcp.compute.inputs.DiskSourceImageEncryptionKeyArgs;
import com.pulumi.gcp.compute.inputs.DiskSourceSnapshotEncryptionKeyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Encrypts the disk using a customer-supplied encryption key.
     * After you encrypt a disk with a customer-supplied key, you must
     * provide the same key if you use the disk later (e.g. to create a disk
     * snapshot or an image, or to attach the disk to a virtual machine).
     * Customer-supplied encryption keys do not protect access to metadata of
     * the disk.
     * If you do not provide an encryption key when creating the disk, then
     * the disk will be encrypted using an automatically generated key and
     * you do not need to provide a key to use the disk later.
     * Structure is documented below.
     * 
     */
    @Import(name="diskEncryptionKey")
      private final @Nullable Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey;

    public Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey() {
        return this.diskEncryptionKey == null ? Codegen.empty() : this.diskEncryptionKey;
    }

    /**
     * The image from which to initialize this disk. This can be
     * one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
     * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
     * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
     * `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
     * images names must include the family name. If they don't, use the
     * [gcp.compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
     * For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
     * These images can be referred by family name here.
     * 
     */
    @Import(name="image")
      private final @Nullable Output<String> image;

    public Output<String> image() {
        return this.image == null ? Codegen.empty() : this.image;
    }

    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     * 
     * @Deprecated
     * This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config.
     * 
     */
    @Deprecated /* This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config. */
    @Import(name="interface")
      private final @Nullable Output<String> interface_;

    @Deprecated /* This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config. */
    public Output<String> interface_() {
        return this.interface_ == null ? Codegen.empty() : this.interface_;
    }

    /**
     * Labels to apply to this disk.  A list of key->value pairs.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    @Import(name="multiWriter")
      private final @Nullable Output<Boolean> multiWriter;

    public Output<Boolean> multiWriter() {
        return this.multiWriter == null ? Codegen.empty() : this.multiWriter;
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Physical block size of the persistent disk, in bytes. If not present
     * in a request, a default value is used. Currently supported sizes
     * are 4096 and 16384, other sizes may be added in the future.
     * If an unsupported value is requested, the error message will list
     * the supported values for the caller's project.
     * 
     */
    @Import(name="physicalBlockSizeBytes")
      private final @Nullable Output<Integer> physicalBlockSizeBytes;

    public Output<Integer> physicalBlockSizeBytes() {
        return this.physicalBlockSizeBytes == null ? Codegen.empty() : this.physicalBlockSizeBytes;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Indicates how many IOPS must be provisioned for the disk.
     * 
     */
    @Import(name="provisionedIops")
      private final @Nullable Output<Integer> provisionedIops;

    public Output<Integer> provisionedIops() {
        return this.provisionedIops == null ? Codegen.empty() : this.provisionedIops;
    }

    /**
     * Resource policies applied to this disk for automatic snapshot creations.
     * ~>**NOTE** This value does not support updating the
     * resource policy, as resource policies can not be updated more than
     * one at a time. Use
     * `gcp.compute.DiskResourcePolicyAttachment`
     * to allow for updating the resource policy attached to the disk.
     * 
     */
    @Import(name="resourcePolicies")
      private final @Nullable Output<List<String>> resourcePolicies;

    public Output<List<String>> resourcePolicies() {
        return this.resourcePolicies == null ? Codegen.empty() : this.resourcePolicies;
    }

    /**
     * Size of the persistent disk, specified in GB. You can specify this
     * field when creating a persistent disk using the `image` or
     * `snapshot` parameter, or specify it alone to create an empty
     * persistent disk.
     * If you specify this field along with `image` or `snapshot`,
     * the value must not be less than the size of the image
     * or the size of the snapshot.
     * ~>**NOTE** If you change the size, the provider updates the disk size
     * if upsizing is detected but recreates the disk if downsizing is requested.
     * You can add `lifecycle.prevent_destroy` in the config to prevent destroying
     * and recreating.
     * 
     */
    @Import(name="size")
      private final @Nullable Output<Integer> size;

    public Output<Integer> size() {
        return this.size == null ? Codegen.empty() : this.size;
    }

    /**
     * The source snapshot used to create this disk. You can provide this as
     * a partial or full URL to the resource. If the snapshot is in another
     * project than this disk, you must supply a full URL. For example, the
     * following are valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
     * * `projects/project/global/snapshots/snapshot`
     * * `global/snapshots/snapshot`
     * * `snapshot`
     * 
     */
    @Import(name="snapshot")
      private final @Nullable Output<String> snapshot;

    public Output<String> snapshot() {
        return this.snapshot == null ? Codegen.empty() : this.snapshot;
    }

    /**
     * The customer-supplied encryption key of the source image. Required if
     * the source image is protected by a customer-supplied encryption key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceImageEncryptionKey")
      private final @Nullable Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey;

    public Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey() {
        return this.sourceImageEncryptionKey == null ? Codegen.empty() : this.sourceImageEncryptionKey;
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey")
      private final @Nullable Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey;

    public Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey() {
        return this.sourceSnapshotEncryptionKey == null ? Codegen.empty() : this.sourceSnapshotEncryptionKey;
    }

    /**
     * URL of the disk type resource describing which disk type to use to
     * create the disk. Provide this when creating the disk.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * A reference to the zone where the disk resides.
     * 
     */
    @Import(name="zone")
      private final @Nullable Output<String> zone;

    public Output<String> zone() {
        return this.zone == null ? Codegen.empty() : this.zone;
    }

    public DiskArgs(
        @Nullable Output<String> description,
        @Nullable Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey,
        @Nullable Output<String> image,
        @Nullable Output<String> interface_,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<Boolean> multiWriter,
        @Nullable Output<String> name,
        @Nullable Output<Integer> physicalBlockSizeBytes,
        @Nullable Output<String> project,
        @Nullable Output<Integer> provisionedIops,
        @Nullable Output<List<String>> resourcePolicies,
        @Nullable Output<Integer> size,
        @Nullable Output<String> snapshot,
        @Nullable Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey,
        @Nullable Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey,
        @Nullable Output<String> type,
        @Nullable Output<String> zone) {
        this.description = description;
        this.diskEncryptionKey = diskEncryptionKey;
        this.image = image;
        this.interface_ = interface_;
        this.labels = labels;
        this.multiWriter = multiWriter;
        this.name = name;
        this.physicalBlockSizeBytes = physicalBlockSizeBytes;
        this.project = project;
        this.provisionedIops = provisionedIops;
        this.resourcePolicies = resourcePolicies;
        this.size = size;
        this.snapshot = snapshot;
        this.sourceImageEncryptionKey = sourceImageEncryptionKey;
        this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
        this.type = type;
        this.zone = zone;
    }

    private DiskArgs() {
        this.description = Codegen.empty();
        this.diskEncryptionKey = Codegen.empty();
        this.image = Codegen.empty();
        this.interface_ = Codegen.empty();
        this.labels = Codegen.empty();
        this.multiWriter = Codegen.empty();
        this.name = Codegen.empty();
        this.physicalBlockSizeBytes = Codegen.empty();
        this.project = Codegen.empty();
        this.provisionedIops = Codegen.empty();
        this.resourcePolicies = Codegen.empty();
        this.size = Codegen.empty();
        this.snapshot = Codegen.empty();
        this.sourceImageEncryptionKey = Codegen.empty();
        this.sourceSnapshotEncryptionKey = Codegen.empty();
        this.type = Codegen.empty();
        this.zone = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey;
        private @Nullable Output<String> image;
        private @Nullable Output<String> interface_;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<Boolean> multiWriter;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> physicalBlockSizeBytes;
        private @Nullable Output<String> project;
        private @Nullable Output<Integer> provisionedIops;
        private @Nullable Output<List<String>> resourcePolicies;
        private @Nullable Output<Integer> size;
        private @Nullable Output<String> snapshot;
        private @Nullable Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey;
        private @Nullable Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey;
        private @Nullable Output<String> type;
        private @Nullable Output<String> zone;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.diskEncryptionKey = defaults.diskEncryptionKey;
    	      this.image = defaults.image;
    	      this.interface_ = defaults.interface_;
    	      this.labels = defaults.labels;
    	      this.multiWriter = defaults.multiWriter;
    	      this.name = defaults.name;
    	      this.physicalBlockSizeBytes = defaults.physicalBlockSizeBytes;
    	      this.project = defaults.project;
    	      this.provisionedIops = defaults.provisionedIops;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.size = defaults.size;
    	      this.snapshot = defaults.snapshot;
    	      this.sourceImageEncryptionKey = defaults.sourceImageEncryptionKey;
    	      this.sourceSnapshotEncryptionKey = defaults.sourceSnapshotEncryptionKey;
    	      this.type = defaults.type;
    	      this.zone = defaults.zone;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder diskEncryptionKey(@Nullable Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey) {
            this.diskEncryptionKey = diskEncryptionKey;
            return this;
        }
        public Builder diskEncryptionKey(@Nullable DiskDiskEncryptionKeyArgs diskEncryptionKey) {
            this.diskEncryptionKey = Codegen.ofNullable(diskEncryptionKey);
            return this;
        }
        public Builder image(@Nullable Output<String> image) {
            this.image = image;
            return this;
        }
        public Builder image(@Nullable String image) {
            this.image = Codegen.ofNullable(image);
            return this;
        }
        public Builder interface_(@Nullable Output<String> interface_) {
            this.interface_ = interface_;
            return this;
        }
        public Builder interface_(@Nullable String interface_) {
            this.interface_ = Codegen.ofNullable(interface_);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder multiWriter(@Nullable Output<Boolean> multiWriter) {
            this.multiWriter = multiWriter;
            return this;
        }
        public Builder multiWriter(@Nullable Boolean multiWriter) {
            this.multiWriter = Codegen.ofNullable(multiWriter);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder physicalBlockSizeBytes(@Nullable Output<Integer> physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }
        public Builder physicalBlockSizeBytes(@Nullable Integer physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = Codegen.ofNullable(physicalBlockSizeBytes);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            this.provisionedIops = provisionedIops;
            return this;
        }
        public Builder provisionedIops(@Nullable Integer provisionedIops) {
            this.provisionedIops = Codegen.ofNullable(provisionedIops);
            return this;
        }
        public Builder resourcePolicies(@Nullable Output<List<String>> resourcePolicies) {
            this.resourcePolicies = resourcePolicies;
            return this;
        }
        public Builder resourcePolicies(@Nullable List<String> resourcePolicies) {
            this.resourcePolicies = Codegen.ofNullable(resourcePolicies);
            return this;
        }
        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }
        public Builder size(@Nullable Output<Integer> size) {
            this.size = size;
            return this;
        }
        public Builder size(@Nullable Integer size) {
            this.size = Codegen.ofNullable(size);
            return this;
        }
        public Builder snapshot(@Nullable Output<String> snapshot) {
            this.snapshot = snapshot;
            return this;
        }
        public Builder snapshot(@Nullable String snapshot) {
            this.snapshot = Codegen.ofNullable(snapshot);
            return this;
        }
        public Builder sourceImageEncryptionKey(@Nullable Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }
        public Builder sourceImageEncryptionKey(@Nullable DiskSourceImageEncryptionKeyArgs sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = Codegen.ofNullable(sourceImageEncryptionKey);
            return this;
        }
        public Builder sourceSnapshotEncryptionKey(@Nullable Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }
        public Builder sourceSnapshotEncryptionKey(@Nullable DiskSourceSnapshotEncryptionKeyArgs sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = Codegen.ofNullable(sourceSnapshotEncryptionKey);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder zone(@Nullable Output<String> zone) {
            this.zone = zone;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = Codegen.ofNullable(zone);
            return this;
        }        public DiskArgs build() {
            return new DiskArgs(description, diskEncryptionKey, image, interface_, labels, multiWriter, name, physicalBlockSizeBytes, project, provisionedIops, resourcePolicies, size, snapshot, sourceImageEncryptionKey, sourceSnapshotEncryptionKey, type, zone);
        }
    }
}
