// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetBucketObjectCustomerEncryption extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectCustomerEncryption Empty = new GetBucketObjectCustomerEncryption();

    @Import(name="encryptionAlgorithm", required=true)
    private String encryptionAlgorithm;

    public String encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    @Import(name="encryptionKey", required=true)
    private String encryptionKey;

    public String encryptionKey() {
        return this.encryptionKey;
    }

    private GetBucketObjectCustomerEncryption() {}

    private GetBucketObjectCustomerEncryption(GetBucketObjectCustomerEncryption $) {
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.encryptionKey = $.encryptionKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBucketObjectCustomerEncryption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBucketObjectCustomerEncryption $;

        public Builder() {
            $ = new GetBucketObjectCustomerEncryption();
        }

        public Builder(GetBucketObjectCustomerEncryption defaults) {
            $ = new GetBucketObjectCustomerEncryption(Objects.requireNonNull(defaults));
        }

        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        public Builder encryptionKey(String encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public GetBucketObjectCustomerEncryption build() {
            $.encryptionAlgorithm = Objects.requireNonNull($.encryptionAlgorithm, "expected parameter 'encryptionAlgorithm' to be non-null");
            $.encryptionKey = Objects.requireNonNull($.encryptionKey, "expected parameter 'encryptionKey' to be non-null");
            return $;
        }
    }

}
