// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.WorkflowTemplateParameterValidationGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowTemplateParameterGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowTemplateParameterGetArgs Empty = new WorkflowTemplateParameterGetArgs();

    /**
     * Optional. Brief description of the parameter. Must not exceed 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter&#39;s list of field paths. A field path is similar in syntax to a .sparkJob.args
     * 
     */
    @Import(name="fields", required=true)
    private Output<List<String>> fields;

    public Output<List<String>> fields() {
        return this.fields;
    }

    /**
     * Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Optional. Validation rules to be applied to this parameter&#39;s value.
     * 
     */
    @Import(name="validation")
    private @Nullable Output<WorkflowTemplateParameterValidationGetArgs> validation;

    public Optional<Output<WorkflowTemplateParameterValidationGetArgs>> validation() {
        return Optional.ofNullable(this.validation);
    }

    private WorkflowTemplateParameterGetArgs() {}

    private WorkflowTemplateParameterGetArgs(WorkflowTemplateParameterGetArgs $) {
        this.description = $.description;
        this.fields = $.fields;
        this.name = $.name;
        this.validation = $.validation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowTemplateParameterGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowTemplateParameterGetArgs $;

        public Builder() {
            $ = new WorkflowTemplateParameterGetArgs();
        }

        public Builder(WorkflowTemplateParameterGetArgs defaults) {
            $ = new WorkflowTemplateParameterGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fields(Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder validation(@Nullable Output<WorkflowTemplateParameterValidationGetArgs> validation) {
            $.validation = validation;
            return this;
        }

        public Builder validation(WorkflowTemplateParameterValidationGetArgs validation) {
            return validation(Output.of(validation));
        }

        public WorkflowTemplateParameterGetArgs build() {
            $.fields = Objects.requireNonNull($.fields, "expected parameter 'fields' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
