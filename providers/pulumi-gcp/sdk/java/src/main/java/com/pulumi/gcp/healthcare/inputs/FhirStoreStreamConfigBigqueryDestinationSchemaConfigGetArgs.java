// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs Empty = new FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs();

    /**
     * The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
     * resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
     * concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
     * value 2. The maximum depth allowed is 5.
     * 
     */
    @Import(name="recursiveStructureDepth", required=true)
    private Output<Integer> recursiveStructureDepth;

    /**
     * @return The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
     * resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
     * concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
     * value 2. The maximum depth allowed is 5.
     * 
     */
    public Output<Integer> recursiveStructureDepth() {
        return this.recursiveStructureDepth;
    }

    /**
     * Specifies the output schema type. Only ANALYTICS is supported at this time.
     * * ANALYTICS: Analytics schema defined by the FHIR community.
     *   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
     *   Default value is `ANALYTICS`.
     *   Possible values are `ANALYTICS`.
     * 
     */
    @Import(name="schemaType")
    private @Nullable Output<String> schemaType;

    /**
     * @return Specifies the output schema type. Only ANALYTICS is supported at this time.
     * * ANALYTICS: Analytics schema defined by the FHIR community.
     *   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
     *   Default value is `ANALYTICS`.
     *   Possible values are `ANALYTICS`.
     * 
     */
    public Optional<Output<String>> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    private FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs() {}

    private FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs(FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs $) {
        this.recursiveStructureDepth = $.recursiveStructureDepth;
        this.schemaType = $.schemaType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs $;

        public Builder() {
            $ = new FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs();
        }

        public Builder(FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs defaults) {
            $ = new FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recursiveStructureDepth The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
         * resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
         * concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
         * value 2. The maximum depth allowed is 5.
         * 
         * @return builder
         * 
         */
        public Builder recursiveStructureDepth(Output<Integer> recursiveStructureDepth) {
            $.recursiveStructureDepth = recursiveStructureDepth;
            return this;
        }

        /**
         * @param recursiveStructureDepth The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
         * resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
         * concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
         * value 2. The maximum depth allowed is 5.
         * 
         * @return builder
         * 
         */
        public Builder recursiveStructureDepth(Integer recursiveStructureDepth) {
            return recursiveStructureDepth(Output.of(recursiveStructureDepth));
        }

        /**
         * @param schemaType Specifies the output schema type. Only ANALYTICS is supported at this time.
         * * ANALYTICS: Analytics schema defined by the FHIR community.
         *   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
         *   Default value is `ANALYTICS`.
         *   Possible values are `ANALYTICS`.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(@Nullable Output<String> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        /**
         * @param schemaType Specifies the output schema type. Only ANALYTICS is supported at this time.
         * * ANALYTICS: Analytics schema defined by the FHIR community.
         *   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
         *   Default value is `ANALYTICS`.
         *   Possible values are `ANALYTICS`.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(String schemaType) {
            return schemaType(Output.of(schemaType));
        }

        public FhirStoreStreamConfigBigqueryDestinationSchemaConfigGetArgs build() {
            $.recursiveStructureDepth = Objects.requireNonNull($.recursiveStructureDepth, "expected parameter 'recursiveStructureDepth' to be non-null");
            return $;
        }
    }

}
