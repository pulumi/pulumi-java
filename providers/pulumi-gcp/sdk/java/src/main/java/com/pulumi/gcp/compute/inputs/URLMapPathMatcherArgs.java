// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherDefaultRouteActionArgs;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherDefaultUrlRedirectArgs;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherHeaderActionArgs;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherPathRuleArgs;
import com.pulumi.gcp.compute.inputs.URLMapPathMatcherRouteRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class URLMapPathMatcherArgs extends com.pulumi.resources.ResourceArgs {

    public static final URLMapPathMatcherArgs Empty = new URLMapPathMatcherArgs();

    /**
     * defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
     * advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
     * to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
     * Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultRouteAction")
    private @Nullable Output<URLMapPathMatcherDefaultRouteActionArgs> defaultRouteAction;

    public Optional<Output<URLMapPathMatcherDefaultRouteActionArgs>> defaultRouteAction() {
        return Optional.ofNullable(this.defaultRouteAction);
    }

    /**
     * The backend service or backend bucket to use when none of the given paths match.
     * 
     */
    @Import(name="defaultService")
    private @Nullable Output<String> defaultService;

    public Optional<Output<String>> defaultService() {
        return Optional.ofNullable(this.defaultService);
    }

    /**
     * When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultUrlRedirect")
    private @Nullable Output<URLMapPathMatcherDefaultUrlRedirectArgs> defaultUrlRedirect;

    public Optional<Output<URLMapPathMatcherDefaultUrlRedirectArgs>> defaultUrlRedirect() {
        return Optional.ofNullable(this.defaultUrlRedirect);
    }

    /**
     * Description of this test case.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies changes to request and response headers that need to take effect for
     * the selected backendService.
     * headerAction specified here take effect before headerAction in the enclosing
     * HttpRouteRule, PathMatcher and UrlMap.
     * Structure is documented below.
     * 
     */
    @Import(name="headerAction")
    private @Nullable Output<URLMapPathMatcherHeaderActionArgs> headerAction;

    public Optional<Output<URLMapPathMatcherHeaderActionArgs>> headerAction() {
        return Optional.ofNullable(this.headerAction);
    }

    /**
     * The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The list of path rules. Use this list instead of routeRules when routing based
     * on simple path matching is all that&#39;s required. The order by which path rules
     * are specified does not matter. Matches are always done on the longest-path-first
     * basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
     * irrespective of the order in which those paths appear in this list. Within a
     * given pathMatcher, only one of pathRules or routeRules must be set.
     * Structure is documented below.
     * 
     */
    @Import(name="pathRules")
    private @Nullable Output<List<URLMapPathMatcherPathRuleArgs>> pathRules;

    public Optional<Output<List<URLMapPathMatcherPathRuleArgs>>> pathRules() {
        return Optional.ofNullable(this.pathRules);
    }

    /**
     * The list of ordered HTTP route rules. Use this list instead of pathRules when
     * advanced route matching and routing actions are desired. The order of specifying
     * routeRules matters: the first rule that matches will cause its specified routing
     * action to take effect. Within a given pathMatcher, only one of pathRules or
     * routeRules must be set. routeRules are not supported in UrlMaps intended for
     * External load balancers.
     * Structure is documented below.
     * 
     */
    @Import(name="routeRules")
    private @Nullable Output<List<URLMapPathMatcherRouteRuleArgs>> routeRules;

    public Optional<Output<List<URLMapPathMatcherRouteRuleArgs>>> routeRules() {
        return Optional.ofNullable(this.routeRules);
    }

    private URLMapPathMatcherArgs() {}

    private URLMapPathMatcherArgs(URLMapPathMatcherArgs $) {
        this.defaultRouteAction = $.defaultRouteAction;
        this.defaultService = $.defaultService;
        this.defaultUrlRedirect = $.defaultUrlRedirect;
        this.description = $.description;
        this.headerAction = $.headerAction;
        this.name = $.name;
        this.pathRules = $.pathRules;
        this.routeRules = $.routeRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(URLMapPathMatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private URLMapPathMatcherArgs $;

        public Builder() {
            $ = new URLMapPathMatcherArgs();
        }

        public Builder(URLMapPathMatcherArgs defaults) {
            $ = new URLMapPathMatcherArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultRouteAction(@Nullable Output<URLMapPathMatcherDefaultRouteActionArgs> defaultRouteAction) {
            $.defaultRouteAction = defaultRouteAction;
            return this;
        }

        public Builder defaultRouteAction(URLMapPathMatcherDefaultRouteActionArgs defaultRouteAction) {
            return defaultRouteAction(Output.of(defaultRouteAction));
        }

        public Builder defaultService(@Nullable Output<String> defaultService) {
            $.defaultService = defaultService;
            return this;
        }

        public Builder defaultService(String defaultService) {
            return defaultService(Output.of(defaultService));
        }

        public Builder defaultUrlRedirect(@Nullable Output<URLMapPathMatcherDefaultUrlRedirectArgs> defaultUrlRedirect) {
            $.defaultUrlRedirect = defaultUrlRedirect;
            return this;
        }

        public Builder defaultUrlRedirect(URLMapPathMatcherDefaultUrlRedirectArgs defaultUrlRedirect) {
            return defaultUrlRedirect(Output.of(defaultUrlRedirect));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder headerAction(@Nullable Output<URLMapPathMatcherHeaderActionArgs> headerAction) {
            $.headerAction = headerAction;
            return this;
        }

        public Builder headerAction(URLMapPathMatcherHeaderActionArgs headerAction) {
            return headerAction(Output.of(headerAction));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pathRules(@Nullable Output<List<URLMapPathMatcherPathRuleArgs>> pathRules) {
            $.pathRules = pathRules;
            return this;
        }

        public Builder pathRules(List<URLMapPathMatcherPathRuleArgs> pathRules) {
            return pathRules(Output.of(pathRules));
        }

        public Builder pathRules(URLMapPathMatcherPathRuleArgs... pathRules) {
            return pathRules(List.of(pathRules));
        }

        public Builder routeRules(@Nullable Output<List<URLMapPathMatcherRouteRuleArgs>> routeRules) {
            $.routeRules = routeRules;
            return this;
        }

        public Builder routeRules(List<URLMapPathMatcherRouteRuleArgs> routeRules) {
            return routeRules(Output.of(routeRules));
        }

        public Builder routeRules(URLMapPathMatcherRouteRuleArgs... routeRules) {
            return routeRules(List.of(routeRules));
        }

        public URLMapPathMatcherArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
