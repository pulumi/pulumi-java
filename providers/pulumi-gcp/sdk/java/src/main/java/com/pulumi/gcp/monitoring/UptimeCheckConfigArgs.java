// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.UptimeCheckConfigContentMatcherArgs;
import com.pulumi.gcp.monitoring.inputs.UptimeCheckConfigHttpCheckArgs;
import com.pulumi.gcp.monitoring.inputs.UptimeCheckConfigMonitoredResourceArgs;
import com.pulumi.gcp.monitoring.inputs.UptimeCheckConfigResourceGroupArgs;
import com.pulumi.gcp.monitoring.inputs.UptimeCheckConfigTcpCheckArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UptimeCheckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final UptimeCheckConfigArgs Empty = new UptimeCheckConfigArgs();

    /**
     * The expected content on the page the check is run against. Currently, only the first entry in the list is supported, and other entries will be ignored. The server will look for an exact match of the string in the page response&#39;s content. This field is optional and should only be specified if a content match is required.
     * Structure is documented below.
     * 
     */
    @Import(name="contentMatchers")
    private @Nullable Output<List<UptimeCheckConfigContentMatcherArgs>> contentMatchers;

    public Optional<Output<List<UptimeCheckConfigContentMatcherArgs>>> contentMatchers() {
        return Optional.ofNullable(this.contentMatchers);
    }

    /**
     * A human-friendly name for the uptime check configuration. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Contains information needed to make an HTTP or HTTPS check.
     * Structure is documented below.
     * 
     */
    @Import(name="httpCheck")
    private @Nullable Output<UptimeCheckConfigHttpCheckArgs> httpCheck;

    public Optional<Output<UptimeCheckConfigHttpCheckArgs>> httpCheck() {
        return Optional.ofNullable(this.httpCheck);
    }

    /**
     * The monitored resource (https://cloud.google.com/monitoring/api/resources) associated with the configuration. The following monitored resource types are supported for uptime checks:  uptime_url  gce_instance  gae_app  aws_ec2_instance  aws_elb_load_balancer
     * Structure is documented below.
     * 
     */
    @Import(name="monitoredResource")
    private @Nullable Output<UptimeCheckConfigMonitoredResourceArgs> monitoredResource;

    public Optional<Output<UptimeCheckConfigMonitoredResourceArgs>> monitoredResource() {
        return Optional.ofNullable(this.monitoredResource);
    }

    /**
     * How often, in seconds, the uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 300s.
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The group resource associated with the configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable Output<UptimeCheckConfigResourceGroupArgs> resourceGroup;

    public Optional<Output<UptimeCheckConfigResourceGroupArgs>> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    /**
     * The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions to include a minimum of 3 locations must be provided, or an error message is returned. Not specifying this field will result in uptime checks running from all regions.
     * 
     */
    @Import(name="selectedRegions")
    private @Nullable Output<List<String>> selectedRegions;

    public Optional<Output<List<String>>> selectedRegions() {
        return Optional.ofNullable(this.selectedRegions);
    }

    /**
     * Contains information needed to make a TCP check.
     * Structure is documented below.
     * 
     */
    @Import(name="tcpCheck")
    private @Nullable Output<UptimeCheckConfigTcpCheckArgs> tcpCheck;

    public Optional<Output<UptimeCheckConfigTcpCheckArgs>> tcpCheck() {
        return Optional.ofNullable(this.tcpCheck);
    }

    /**
     * The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). Accepted formats https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration
     * 
     */
    @Import(name="timeout", required=true)
    private Output<String> timeout;

    public Output<String> timeout() {
        return this.timeout;
    }

    private UptimeCheckConfigArgs() {}

    private UptimeCheckConfigArgs(UptimeCheckConfigArgs $) {
        this.contentMatchers = $.contentMatchers;
        this.displayName = $.displayName;
        this.httpCheck = $.httpCheck;
        this.monitoredResource = $.monitoredResource;
        this.period = $.period;
        this.project = $.project;
        this.resourceGroup = $.resourceGroup;
        this.selectedRegions = $.selectedRegions;
        this.tcpCheck = $.tcpCheck;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UptimeCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UptimeCheckConfigArgs $;

        public Builder() {
            $ = new UptimeCheckConfigArgs();
        }

        public Builder(UptimeCheckConfigArgs defaults) {
            $ = new UptimeCheckConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentMatchers(@Nullable Output<List<UptimeCheckConfigContentMatcherArgs>> contentMatchers) {
            $.contentMatchers = contentMatchers;
            return this;
        }

        public Builder contentMatchers(List<UptimeCheckConfigContentMatcherArgs> contentMatchers) {
            return contentMatchers(Output.of(contentMatchers));
        }

        public Builder contentMatchers(UptimeCheckConfigContentMatcherArgs... contentMatchers) {
            return contentMatchers(List.of(contentMatchers));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder httpCheck(@Nullable Output<UptimeCheckConfigHttpCheckArgs> httpCheck) {
            $.httpCheck = httpCheck;
            return this;
        }

        public Builder httpCheck(UptimeCheckConfigHttpCheckArgs httpCheck) {
            return httpCheck(Output.of(httpCheck));
        }

        public Builder monitoredResource(@Nullable Output<UptimeCheckConfigMonitoredResourceArgs> monitoredResource) {
            $.monitoredResource = monitoredResource;
            return this;
        }

        public Builder monitoredResource(UptimeCheckConfigMonitoredResourceArgs monitoredResource) {
            return monitoredResource(Output.of(monitoredResource));
        }

        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        public Builder period(String period) {
            return period(Output.of(period));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder resourceGroup(@Nullable Output<UptimeCheckConfigResourceGroupArgs> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        public Builder resourceGroup(UptimeCheckConfigResourceGroupArgs resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        public Builder selectedRegions(@Nullable Output<List<String>> selectedRegions) {
            $.selectedRegions = selectedRegions;
            return this;
        }

        public Builder selectedRegions(List<String> selectedRegions) {
            return selectedRegions(Output.of(selectedRegions));
        }

        public Builder selectedRegions(String... selectedRegions) {
            return selectedRegions(List.of(selectedRegions));
        }

        public Builder tcpCheck(@Nullable Output<UptimeCheckConfigTcpCheckArgs> tcpCheck) {
            $.tcpCheck = tcpCheck;
            return this;
        }

        public Builder tcpCheck(UptimeCheckConfigTcpCheckArgs tcpCheck) {
            return tcpCheck(Output.of(tcpCheck));
        }

        public Builder timeout(Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public UptimeCheckConfigArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            return $;
        }
    }

}
