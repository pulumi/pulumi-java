// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.redis.inputs.InstanceMaintenancePolicyGetArgs;
import com.pulumi.gcp.redis.inputs.InstanceMaintenanceScheduleGetArgs;
import com.pulumi.gcp.redis.inputs.InstanceNodeGetArgs;
import com.pulumi.gcp.redis.inputs.InstanceServerCaCertGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Only applicable to STANDARD_HA tier which protects the instance
     * against zonal failures by provisioning it across two zones.
     * If provided, it must be a different zone from the one provided in
     * [locationId].
     * 
     */
    @Import(name="alternativeLocationId")
    private @Nullable Output<String> alternativeLocationId;

    public Optional<Output<String>> alternativeLocationId() {
        return Optional.ofNullable(this.alternativeLocationId);
    }

    /**
     * Optional. Indicates whether OSS Redis AUTH is enabled for the
     * instance. If set to &#34;true&#34; AUTH is enabled on the instance.
     * Default value is &#34;false&#34; meaning AUTH is disabled.
     * 
     */
    @Import(name="authEnabled")
    private @Nullable Output<Boolean> authEnabled;

    public Optional<Output<Boolean>> authEnabled() {
        return Optional.ofNullable(this.authEnabled);
    }

    /**
     * AUTH String set on the instance. This field will only be populated if auth_enabled is true.
     * 
     */
    @Import(name="authString")
    private @Nullable Output<String> authString;

    public Optional<Output<String>> authString() {
        return Optional.ofNullable(this.authString);
    }

    /**
     * The full name of the Google Compute Engine network to which the
     * instance is connected. If left unspecified, the default network
     * will be used.
     * 
     */
    @Import(name="authorizedNetwork")
    private @Nullable Output<String> authorizedNetwork;

    public Optional<Output<String>> authorizedNetwork() {
        return Optional.ofNullable(this.authorizedNetwork);
    }

    /**
     * The connection mode of the Redis instance.
     * Default value is `DIRECT_PEERING`.
     * Possible values are `DIRECT_PEERING` and `PRIVATE_SERVICE_ACCESS`.
     * 
     */
    @Import(name="connectMode")
    private @Nullable Output<String> connectMode;

    public Optional<Output<String>> connectMode() {
        return Optional.ofNullable(this.connectMode);
    }

    /**
     * - 
     * Output only. The time when the policy was created.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
     * [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
     * [alternativeLocationId] and can change after a failover event.
     * 
     */
    @Import(name="currentLocationId")
    private @Nullable Output<String> currentLocationId;

    public Optional<Output<String>> currentLocationId() {
        return Optional.ofNullable(this.currentLocationId);
    }

    /**
     * An arbitrary and optional user-provided name for the instance.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The zone where the instance will be provisioned. If not provided,
     * the service will choose a zone for the instance. For STANDARD_HA tier,
     * instances will be created across two zones for protection against
     * zonal failures. If [alternativeLocationId] is also provided, it must
     * be different from [locationId].
     * 
     */
    @Import(name="locationId")
    private @Nullable Output<String> locationId;

    public Optional<Output<String>> locationId() {
        return Optional.ofNullable(this.locationId);
    }

    /**
     * Maintenance policy for an instance.
     * Structure is documented below.
     * 
     */
    @Import(name="maintenancePolicy")
    private @Nullable Output<InstanceMaintenancePolicyGetArgs> maintenancePolicy;

    public Optional<Output<InstanceMaintenancePolicyGetArgs>> maintenancePolicy() {
        return Optional.ofNullable(this.maintenancePolicy);
    }

    /**
     * Upcoming maintenance schedule.
     * Structure is documented below.
     * 
     */
    @Import(name="maintenanceSchedule")
    private @Nullable Output<InstanceMaintenanceScheduleGetArgs> maintenanceSchedule;

    public Optional<Output<InstanceMaintenanceScheduleGetArgs>> maintenanceSchedule() {
        return Optional.ofNullable(this.maintenanceSchedule);
    }

    /**
     * Redis memory size in GiB.
     * 
     */
    @Import(name="memorySizeGb")
    private @Nullable Output<Integer> memorySizeGb;

    public Optional<Output<Integer>> memorySizeGb() {
        return Optional.ofNullable(this.memorySizeGb);
    }

    /**
     * The ID of the instance or a fully qualified identifier for the instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Output only. Info per node.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<InstanceNodeGetArgs>> nodes;

    public Optional<Output<List<InstanceNodeGetArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is
     * &#34;serviceAccount:&#34;. The value may change over time for a given instance so should be checked before each import/export
     * operation.
     * 
     */
    @Import(name="persistenceIamIdentity")
    private @Nullable Output<String> persistenceIamIdentity;

    public Optional<Output<String>> persistenceIamIdentity() {
        return Optional.ofNullable(this.persistenceIamIdentity);
    }

    /**
     * The port number of the exposed Redis endpoint.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy
     * replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write
     * requests must target &#39;host&#39;.
     * 
     */
    @Import(name="readEndpoint")
    private @Nullable Output<String> readEndpoint;

    public Optional<Output<String>> readEndpoint() {
        return Optional.ofNullable(this.readEndpoint);
    }

    /**
     * Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target
     * &#39;port&#39;.
     * 
     */
    @Import(name="readEndpointPort")
    private @Nullable Output<Integer> readEndpointPort;

    public Optional<Output<Integer>> readEndpointPort() {
        return Optional.ofNullable(this.readEndpointPort);
    }

    /**
     * Optional. Read replica mode. Can only be specified when trying to create the instance. If not set, Memorystore Redis
     * backend will default to READ_REPLICAS_DISABLED. - READ_REPLICAS_DISABLED: If disabled, read endpoint will not be
     * provided and the instance cannot scale up or down the number of replicas. - READ_REPLICAS_ENABLED: If enabled, read
     * endpoint will be provided and the instance can scale up and down the number of replicas. Default value:
     * &#34;READ_REPLICAS_DISABLED&#34; Possible values: [&#34;READ_REPLICAS_DISABLED&#34;, &#34;READ_REPLICAS_ENABLED&#34;]
     * 
     */
    @Import(name="readReplicasMode")
    private @Nullable Output<String> readReplicasMode;

    public Optional<Output<String>> readReplicasMode() {
        return Optional.ofNullable(this.readReplicasMode);
    }

    /**
     * Redis configuration parameters, according to http://redis.io/topics/config.
     * Please check Memorystore documentation for the list of supported parameters:
     * https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
     * 
     */
    @Import(name="redisConfigs")
    private @Nullable Output<Map<String,String>> redisConfigs;

    public Optional<Output<Map<String,String>>> redisConfigs() {
        return Optional.ofNullable(this.redisConfigs);
    }

    /**
     * The version of Redis software. If not provided, latest supported
     * version will be used. Please check the API documentation linked
     * at the top for the latest valid values.
     * 
     */
    @Import(name="redisVersion")
    private @Nullable Output<String> redisVersion;

    public Optional<Output<String>> redisVersion() {
        return Optional.ofNullable(this.redisVersion);
    }

    /**
     * The name of the Redis region of the instance.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and
     * defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default
     * is 1. The valid value for basic tier is 0 and the default is also 0.
     * 
     */
    @Import(name="replicaCount")
    private @Nullable Output<Integer> replicaCount;

    public Optional<Output<Integer>> replicaCount() {
        return Optional.ofNullable(this.replicaCount);
    }

    /**
     * The CIDR range of internal addresses that are reserved for this
     * instance. If not provided, the service will choose an unused /29
     * block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
     * unique and non-overlapping with existing subnets in an authorized
     * network.
     * 
     */
    @Import(name="reservedIpRange")
    private @Nullable Output<String> reservedIpRange;

    public Optional<Output<String>> reservedIpRange() {
        return Optional.ofNullable(this.reservedIpRange);
    }

    /**
     * List of server CA certificates for the instance.
     * 
     */
    @Import(name="serverCaCerts")
    private @Nullable Output<List<InstanceServerCaCertGetArgs>> serverCaCerts;

    public Optional<Output<List<InstanceServerCaCertGetArgs>>> serverCaCerts() {
        return Optional.ofNullable(this.serverCaCerts);
    }

    /**
     * The service tier of the instance. Must be one of these values:
     * - BASIC: standalone instance
     * - STANDARD_HA: highly available primary/replica instances
     *   Default value is `BASIC`.
     *   Possible values are `BASIC` and `STANDARD_HA`.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
     * - SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
     *   Default value is `DISABLED`.
     *   Possible values are `SERVER_AUTHENTICATION` and `DISABLED`.
     * 
     */
    @Import(name="transitEncryptionMode")
    private @Nullable Output<String> transitEncryptionMode;

    public Optional<Output<String>> transitEncryptionMode() {
        return Optional.ofNullable(this.transitEncryptionMode);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.alternativeLocationId = $.alternativeLocationId;
        this.authEnabled = $.authEnabled;
        this.authString = $.authString;
        this.authorizedNetwork = $.authorizedNetwork;
        this.connectMode = $.connectMode;
        this.createTime = $.createTime;
        this.currentLocationId = $.currentLocationId;
        this.displayName = $.displayName;
        this.host = $.host;
        this.labels = $.labels;
        this.locationId = $.locationId;
        this.maintenancePolicy = $.maintenancePolicy;
        this.maintenanceSchedule = $.maintenanceSchedule;
        this.memorySizeGb = $.memorySizeGb;
        this.name = $.name;
        this.nodes = $.nodes;
        this.persistenceIamIdentity = $.persistenceIamIdentity;
        this.port = $.port;
        this.project = $.project;
        this.readEndpoint = $.readEndpoint;
        this.readEndpointPort = $.readEndpointPort;
        this.readReplicasMode = $.readReplicasMode;
        this.redisConfigs = $.redisConfigs;
        this.redisVersion = $.redisVersion;
        this.region = $.region;
        this.replicaCount = $.replicaCount;
        this.reservedIpRange = $.reservedIpRange;
        this.serverCaCerts = $.serverCaCerts;
        this.tier = $.tier;
        this.transitEncryptionMode = $.transitEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        public Builder alternativeLocationId(@Nullable Output<String> alternativeLocationId) {
            $.alternativeLocationId = alternativeLocationId;
            return this;
        }

        public Builder alternativeLocationId(String alternativeLocationId) {
            return alternativeLocationId(Output.of(alternativeLocationId));
        }

        public Builder authEnabled(@Nullable Output<Boolean> authEnabled) {
            $.authEnabled = authEnabled;
            return this;
        }

        public Builder authEnabled(Boolean authEnabled) {
            return authEnabled(Output.of(authEnabled));
        }

        public Builder authString(@Nullable Output<String> authString) {
            $.authString = authString;
            return this;
        }

        public Builder authString(String authString) {
            return authString(Output.of(authString));
        }

        public Builder authorizedNetwork(@Nullable Output<String> authorizedNetwork) {
            $.authorizedNetwork = authorizedNetwork;
            return this;
        }

        public Builder authorizedNetwork(String authorizedNetwork) {
            return authorizedNetwork(Output.of(authorizedNetwork));
        }

        public Builder connectMode(@Nullable Output<String> connectMode) {
            $.connectMode = connectMode;
            return this;
        }

        public Builder connectMode(String connectMode) {
            return connectMode(Output.of(connectMode));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder currentLocationId(@Nullable Output<String> currentLocationId) {
            $.currentLocationId = currentLocationId;
            return this;
        }

        public Builder currentLocationId(String currentLocationId) {
            return currentLocationId(Output.of(currentLocationId));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder locationId(@Nullable Output<String> locationId) {
            $.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            return locationId(Output.of(locationId));
        }

        public Builder maintenancePolicy(@Nullable Output<InstanceMaintenancePolicyGetArgs> maintenancePolicy) {
            $.maintenancePolicy = maintenancePolicy;
            return this;
        }

        public Builder maintenancePolicy(InstanceMaintenancePolicyGetArgs maintenancePolicy) {
            return maintenancePolicy(Output.of(maintenancePolicy));
        }

        public Builder maintenanceSchedule(@Nullable Output<InstanceMaintenanceScheduleGetArgs> maintenanceSchedule) {
            $.maintenanceSchedule = maintenanceSchedule;
            return this;
        }

        public Builder maintenanceSchedule(InstanceMaintenanceScheduleGetArgs maintenanceSchedule) {
            return maintenanceSchedule(Output.of(maintenanceSchedule));
        }

        public Builder memorySizeGb(@Nullable Output<Integer> memorySizeGb) {
            $.memorySizeGb = memorySizeGb;
            return this;
        }

        public Builder memorySizeGb(Integer memorySizeGb) {
            return memorySizeGb(Output.of(memorySizeGb));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nodes(@Nullable Output<List<InstanceNodeGetArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        public Builder nodes(List<InstanceNodeGetArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        public Builder nodes(InstanceNodeGetArgs... nodes) {
            return nodes(List.of(nodes));
        }

        public Builder persistenceIamIdentity(@Nullable Output<String> persistenceIamIdentity) {
            $.persistenceIamIdentity = persistenceIamIdentity;
            return this;
        }

        public Builder persistenceIamIdentity(String persistenceIamIdentity) {
            return persistenceIamIdentity(Output.of(persistenceIamIdentity));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder readEndpoint(@Nullable Output<String> readEndpoint) {
            $.readEndpoint = readEndpoint;
            return this;
        }

        public Builder readEndpoint(String readEndpoint) {
            return readEndpoint(Output.of(readEndpoint));
        }

        public Builder readEndpointPort(@Nullable Output<Integer> readEndpointPort) {
            $.readEndpointPort = readEndpointPort;
            return this;
        }

        public Builder readEndpointPort(Integer readEndpointPort) {
            return readEndpointPort(Output.of(readEndpointPort));
        }

        public Builder readReplicasMode(@Nullable Output<String> readReplicasMode) {
            $.readReplicasMode = readReplicasMode;
            return this;
        }

        public Builder readReplicasMode(String readReplicasMode) {
            return readReplicasMode(Output.of(readReplicasMode));
        }

        public Builder redisConfigs(@Nullable Output<Map<String,String>> redisConfigs) {
            $.redisConfigs = redisConfigs;
            return this;
        }

        public Builder redisConfigs(Map<String,String> redisConfigs) {
            return redisConfigs(Output.of(redisConfigs));
        }

        public Builder redisVersion(@Nullable Output<String> redisVersion) {
            $.redisVersion = redisVersion;
            return this;
        }

        public Builder redisVersion(String redisVersion) {
            return redisVersion(Output.of(redisVersion));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder replicaCount(@Nullable Output<Integer> replicaCount) {
            $.replicaCount = replicaCount;
            return this;
        }

        public Builder replicaCount(Integer replicaCount) {
            return replicaCount(Output.of(replicaCount));
        }

        public Builder reservedIpRange(@Nullable Output<String> reservedIpRange) {
            $.reservedIpRange = reservedIpRange;
            return this;
        }

        public Builder reservedIpRange(String reservedIpRange) {
            return reservedIpRange(Output.of(reservedIpRange));
        }

        public Builder serverCaCerts(@Nullable Output<List<InstanceServerCaCertGetArgs>> serverCaCerts) {
            $.serverCaCerts = serverCaCerts;
            return this;
        }

        public Builder serverCaCerts(List<InstanceServerCaCertGetArgs> serverCaCerts) {
            return serverCaCerts(Output.of(serverCaCerts));
        }

        public Builder serverCaCerts(InstanceServerCaCertGetArgs... serverCaCerts) {
            return serverCaCerts(List.of(serverCaCerts));
        }

        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        public Builder transitEncryptionMode(@Nullable Output<String> transitEncryptionMode) {
            $.transitEncryptionMode = transitEncryptionMode;
            return this;
        }

        public Builder transitEncryptionMode(String transitEncryptionMode) {
            return transitEncryptionMode(Output.of(transitEncryptionMode));
        }

        public InstanceState build() {
            return $;
        }
    }

}
