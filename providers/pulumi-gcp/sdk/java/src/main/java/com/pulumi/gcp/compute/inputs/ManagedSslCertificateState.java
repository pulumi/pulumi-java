// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.ManagedSslCertificateManagedGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedSslCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedSslCertificateState Empty = new ManagedSslCertificateState();

    /**
     * The unique identifier for the resource.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<Integer> certificateId;

    public Optional<Output<Integer>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Expire time of the certificate.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * Properties relevant to a managed certificate.  These will be used if the
     * certificate is managed (as indicated by a value of `MANAGED` in `type`).
     * Structure is documented below.
     * 
     */
    @Import(name="managed")
    private @Nullable Output<ManagedSslCertificateManagedGetArgs> managed;

    public Optional<Output<ManagedSslCertificateManagedGetArgs>> managed() {
        return Optional.ofNullable(this.managed);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Domains associated with the certificate via Subject Alternative Name.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    /**
     * Enum field whose value is always `MANAGED` - used to signal to the API
     * which type this is.
     * Default value is `MANAGED`.
     * Possible values are `MANAGED`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ManagedSslCertificateState() {}

    private ManagedSslCertificateState(ManagedSslCertificateState $) {
        this.certificateId = $.certificateId;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.expireTime = $.expireTime;
        this.managed = $.managed;
        this.name = $.name;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedSslCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedSslCertificateState $;

        public Builder() {
            $ = new ManagedSslCertificateState();
        }

        public Builder(ManagedSslCertificateState defaults) {
            $ = new ManagedSslCertificateState(Objects.requireNonNull(defaults));
        }

        public Builder certificateId(@Nullable Output<Integer> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        public Builder certificateId(Integer certificateId) {
            return certificateId(Output.of(certificateId));
        }

        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        public Builder managed(@Nullable Output<ManagedSslCertificateManagedGetArgs> managed) {
            $.managed = managed;
            return this;
        }

        public Builder managed(ManagedSslCertificateManagedGetArgs managed) {
            return managed(Output.of(managed));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ManagedSslCertificateState build() {
            return $;
        }
    }

}
