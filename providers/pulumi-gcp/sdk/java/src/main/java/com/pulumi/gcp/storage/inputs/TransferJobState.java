// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleGetArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobState extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobState Empty = new TransferJobState();

    /**
     * When the Transfer Job was created.
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * When the Transfer Job was deleted.
     * 
     */
    @Import(name="deletionTime")
    private @Nullable Output<String> deletionTime;

    public Optional<Output<String>> deletionTime() {
        return Optional.ofNullable(this.deletionTime);
    }

    /**
     * Unique description to identify the Transfer Job.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * When the Transfer Job was last modified.
     * 
     */
    @Import(name="lastModificationTime")
    private @Nullable Output<String> lastModificationTime;

    public Optional<Output<String>> lastModificationTime() {
        return Optional.ofNullable(this.lastModificationTime);
    }

    /**
     * The name of the Transfer Job.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<TransferJobScheduleGetArgs> schedule;

    public Optional<Output<TransferJobScheduleGetArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Transfer specification. Structure documented below.
     * 
     */
    @Import(name="transferSpec")
    private @Nullable Output<TransferJobTransferSpecGetArgs> transferSpec;

    public Optional<Output<TransferJobTransferSpecGetArgs>> transferSpec() {
        return Optional.ofNullable(this.transferSpec);
    }

    private TransferJobState() {}

    private TransferJobState(TransferJobState $) {
        this.creationTime = $.creationTime;
        this.deletionTime = $.deletionTime;
        this.description = $.description;
        this.lastModificationTime = $.lastModificationTime;
        this.name = $.name;
        this.project = $.project;
        this.schedule = $.schedule;
        this.status = $.status;
        this.transferSpec = $.transferSpec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobState $;

        public Builder() {
            $ = new TransferJobState();
        }

        public Builder(TransferJobState defaults) {
            $ = new TransferJobState(Objects.requireNonNull(defaults));
        }

        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        public Builder deletionTime(@Nullable Output<String> deletionTime) {
            $.deletionTime = deletionTime;
            return this;
        }

        public Builder deletionTime(String deletionTime) {
            return deletionTime(Output.of(deletionTime));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder lastModificationTime(@Nullable Output<String> lastModificationTime) {
            $.lastModificationTime = lastModificationTime;
            return this;
        }

        public Builder lastModificationTime(String lastModificationTime) {
            return lastModificationTime(Output.of(lastModificationTime));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder schedule(@Nullable Output<TransferJobScheduleGetArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(TransferJobScheduleGetArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder transferSpec(@Nullable Output<TransferJobTransferSpecGetArgs> transferSpec) {
            $.transferSpec = transferSpec;
            return this;
        }

        public Builder transferSpec(TransferJobTransferSpecGetArgs transferSpec) {
            return transferSpec(Output.of(transferSpec));
        }

        public TransferJobState build() {
            return $;
        }
    }

}
