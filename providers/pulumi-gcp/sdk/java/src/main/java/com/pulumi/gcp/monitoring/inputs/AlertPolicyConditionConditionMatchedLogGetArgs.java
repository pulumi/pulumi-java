// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionMatchedLogGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionMatchedLogGetArgs Empty = new AlertPolicyConditionConditionMatchedLogGetArgs();

    /**
     * A logs-based filter.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    public Output<String> filter() {
        return this.filter;
    }

    /**
     * A map from a label key to an extractor expression, which is used to
     * extract the value for this label key. Each entry in this map is
     * a specification for how data should be extracted from log entries that
     * match filter. Each combination of extracted values is treated as
     * a separate rule for the purposes of triggering notifications.
     * Label keys and corresponding values can be used in notifications
     * generated by this condition.
     * 
     */
    @Import(name="labelExtractors")
    private @Nullable Output<Map<String,String>> labelExtractors;

    public Optional<Output<Map<String,String>>> labelExtractors() {
        return Optional.ofNullable(this.labelExtractors);
    }

    private AlertPolicyConditionConditionMatchedLogGetArgs() {}

    private AlertPolicyConditionConditionMatchedLogGetArgs(AlertPolicyConditionConditionMatchedLogGetArgs $) {
        this.filter = $.filter;
        this.labelExtractors = $.labelExtractors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionConditionMatchedLogGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionConditionMatchedLogGetArgs $;

        public Builder() {
            $ = new AlertPolicyConditionConditionMatchedLogGetArgs();
        }

        public Builder(AlertPolicyConditionConditionMatchedLogGetArgs defaults) {
            $ = new AlertPolicyConditionConditionMatchedLogGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder labelExtractors(@Nullable Output<Map<String,String>> labelExtractors) {
            $.labelExtractors = labelExtractors;
            return this;
        }

        public Builder labelExtractors(Map<String,String> labelExtractors) {
            return labelExtractors(Output.of(labelExtractors));
        }

        public AlertPolicyConditionConditionMatchedLogGetArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
