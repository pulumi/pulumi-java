// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.util.Objects;


public final class InstanceFromTemplateConfidentialInstanceConfigGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFromTemplateConfidentialInstanceConfigGetArgs Empty = new InstanceFromTemplateConfidentialInstanceConfigGetArgs();

    @Import(name="enableConfidentialCompute", required=true)
      private final Output<Boolean> enableConfidentialCompute;

    public Output<Boolean> enableConfidentialCompute() {
        return this.enableConfidentialCompute;
    }

    public InstanceFromTemplateConfidentialInstanceConfigGetArgs(Output<Boolean> enableConfidentialCompute) {
        this.enableConfidentialCompute = Objects.requireNonNull(enableConfidentialCompute, "expected parameter 'enableConfidentialCompute' to be non-null");
    }

    private InstanceFromTemplateConfidentialInstanceConfigGetArgs() {
        this.enableConfidentialCompute = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFromTemplateConfidentialInstanceConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Boolean> enableConfidentialCompute;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceFromTemplateConfidentialInstanceConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableConfidentialCompute = defaults.enableConfidentialCompute;
        }

        public Builder enableConfidentialCompute(Output<Boolean> enableConfidentialCompute) {
            this.enableConfidentialCompute = Objects.requireNonNull(enableConfidentialCompute);
            return this;
        }
        public Builder enableConfidentialCompute(Boolean enableConfidentialCompute) {
            this.enableConfidentialCompute = Output.of(Objects.requireNonNull(enableConfidentialCompute));
            return this;
        }        public InstanceFromTemplateConfidentialInstanceConfigGetArgs build() {
            return new InstanceFromTemplateConfidentialInstanceConfigGetArgs(enableConfidentialCompute);
        }
    }
}
