// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.logging.inputs.MetricMetricDescriptorLabelGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricMetricDescriptorGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricMetricDescriptorGetArgs Empty = new MetricMetricDescriptorGetArgs();

    /**
     * A concise name for the metric, which can be displayed in user interfaces. Use sentence case
     * without an ending period, for example &#34;Request count&#34;. This field is optional but it is
     * recommended to be set for any metrics associated with user-visible concepts, such as Quota.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * The set of labels that can be used to describe a specific instance of this metric type. For
     * example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
     * for the HTTP response code, response_code, so you can look at latencies for successful responses
     * or just for responses that failed.
     * Structure is documented below.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<List<MetricMetricDescriptorLabelGetArgs>> labels;

    public Output<List<MetricMetricDescriptorLabelGetArgs>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Whether the metric records instantaneous values, changes to a value, etc.
     * Some combinations of metricKind and valueType might not be supported.
     * For counter metrics, set this to DELTA.
     * Possible values are `DELTA`, `GAUGE`, and `CUMULATIVE`.
     * 
     */
    @Import(name="metricKind", required=true)
      private final Output<String> metricKind;

    public Output<String> metricKind() {
        return this.metricKind;
    }

    /**
     * The unit in which the metric value is reported. It is only applicable if the valueType is
     * `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of
     * [The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
     * 
     */
    @Import(name="unit")
      private final @Nullable Output<String> unit;

    public Output<String> unit() {
        return this.unit == null ? Codegen.empty() : this.unit;
    }

    /**
     * The type of data that can be assigned to the label.
     * Default value is `STRING`.
     * Possible values are `BOOL`, `INT64`, and `STRING`.
     * 
     */
    @Import(name="valueType", required=true)
      private final Output<String> valueType;

    public Output<String> valueType() {
        return this.valueType;
    }

    public MetricMetricDescriptorGetArgs(
        @Nullable Output<String> displayName,
        @Nullable Output<List<MetricMetricDescriptorLabelGetArgs>> labels,
        Output<String> metricKind,
        @Nullable Output<String> unit,
        Output<String> valueType) {
        this.displayName = displayName;
        this.labels = labels;
        this.metricKind = Objects.requireNonNull(metricKind, "expected parameter 'metricKind' to be non-null");
        this.unit = unit;
        this.valueType = Objects.requireNonNull(valueType, "expected parameter 'valueType' to be non-null");
    }

    private MetricMetricDescriptorGetArgs() {
        this.displayName = Codegen.empty();
        this.labels = Codegen.empty();
        this.metricKind = Codegen.empty();
        this.unit = Codegen.empty();
        this.valueType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricMetricDescriptorGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private @Nullable Output<List<MetricMetricDescriptorLabelGetArgs>> labels;
        private Output<String> metricKind;
        private @Nullable Output<String> unit;
        private Output<String> valueType;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricMetricDescriptorGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.labels = defaults.labels;
    	      this.metricKind = defaults.metricKind;
    	      this.unit = defaults.unit;
    	      this.valueType = defaults.valueType;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder labels(@Nullable Output<List<MetricMetricDescriptorLabelGetArgs>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable List<MetricMetricDescriptorLabelGetArgs> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder labels(MetricMetricDescriptorLabelGetArgs... labels) {
            return labels(List.of(labels));
        }
        public Builder metricKind(Output<String> metricKind) {
            this.metricKind = Objects.requireNonNull(metricKind);
            return this;
        }
        public Builder metricKind(String metricKind) {
            this.metricKind = Output.of(Objects.requireNonNull(metricKind));
            return this;
        }
        public Builder unit(@Nullable Output<String> unit) {
            this.unit = unit;
            return this;
        }
        public Builder unit(@Nullable String unit) {
            this.unit = Codegen.ofNullable(unit);
            return this;
        }
        public Builder valueType(Output<String> valueType) {
            this.valueType = Objects.requireNonNull(valueType);
            return this;
        }
        public Builder valueType(String valueType) {
            this.valueType = Output.of(Objects.requireNonNull(valueType));
            return this;
        }        public MetricMetricDescriptorGetArgs build() {
            return new MetricMetricDescriptorGetArgs(displayName, labels, metricKind, unit, valueType);
        }
    }
}
