// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigtable.inputs.GCPolicyMaxAgeArgs;
import com.pulumi.gcp.bigtable.inputs.GCPolicyMaxVersionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GCPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GCPolicyArgs Empty = new GCPolicyArgs();

    /**
     * The name of the column family.
     * 
     */
    @Import(name="columnFamily", required=true)
    private Output<String> columnFamily;

    public Output<String> columnFamily() {
        return this.columnFamily;
    }

    /**
     * The name of the Bigtable instance.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * GC policy that applies to all cells older than the given age.
     * 
     */
    @Import(name="maxAge")
    private @Nullable Output<GCPolicyMaxAgeArgs> maxAge;

    public Optional<Output<GCPolicyMaxAgeArgs>> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     * 
     */
    @Import(name="maxVersions")
    private @Nullable Output<List<GCPolicyMaxVersionArgs>> maxVersions;

    public Optional<Output<List<GCPolicyMaxVersionArgs>>> maxVersions() {
        return Optional.ofNullable(this.maxVersions);
    }

    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The name of the table.
     * 
     */
    @Import(name="table", required=true)
    private Output<String> table;

    public Output<String> table() {
        return this.table;
    }

    private GCPolicyArgs() {}

    private GCPolicyArgs(GCPolicyArgs $) {
        this.columnFamily = $.columnFamily;
        this.instanceName = $.instanceName;
        this.maxAge = $.maxAge;
        this.maxVersions = $.maxVersions;
        this.mode = $.mode;
        this.project = $.project;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GCPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GCPolicyArgs $;

        public Builder() {
            $ = new GCPolicyArgs();
        }

        public Builder(GCPolicyArgs defaults) {
            $ = new GCPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder columnFamily(Output<String> columnFamily) {
            $.columnFamily = columnFamily;
            return this;
        }

        public Builder columnFamily(String columnFamily) {
            return columnFamily(Output.of(columnFamily));
        }

        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        public Builder maxAge(@Nullable Output<GCPolicyMaxAgeArgs> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        public Builder maxAge(GCPolicyMaxAgeArgs maxAge) {
            return maxAge(Output.of(maxAge));
        }

        public Builder maxVersions(@Nullable Output<List<GCPolicyMaxVersionArgs>> maxVersions) {
            $.maxVersions = maxVersions;
            return this;
        }

        public Builder maxVersions(List<GCPolicyMaxVersionArgs> maxVersions) {
            return maxVersions(Output.of(maxVersions));
        }

        public Builder maxVersions(GCPolicyMaxVersionArgs... maxVersions) {
            return maxVersions(List.of(maxVersions));
        }

        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        public Builder table(String table) {
            return table(Output.of(table));
        }

        public GCPolicyArgs build() {
            $.columnFamily = Objects.requireNonNull($.columnFamily, "expected parameter 'columnFamily' to be non-null");
            $.instanceName = Objects.requireNonNull($.instanceName, "expected parameter 'instanceName' to be non-null");
            $.table = Objects.requireNonNull($.table, "expected parameter 'table' to be non-null");
            return $;
        }
    }

}
