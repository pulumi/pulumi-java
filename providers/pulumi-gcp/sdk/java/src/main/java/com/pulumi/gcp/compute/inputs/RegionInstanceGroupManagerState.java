// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerAutoHealingPoliciesGetArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerNamedPortGetArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerStatefulDiskGetArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerStatusGetArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerUpdatePolicyGetArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerVersionGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionInstanceGroupManagerState extends com.pulumi.resources.ResourceArgs {

    public static final RegionInstanceGroupManagerState Empty = new RegionInstanceGroupManagerState();

    /**
     * The autohealing policies for this managed instance
     * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
     * 
     */
    @Import(name="autoHealingPolicies")
    private @Nullable Output<RegionInstanceGroupManagerAutoHealingPoliciesGetArgs> autoHealingPolicies;

    public Optional<Output<RegionInstanceGroupManagerAutoHealingPoliciesGetArgs>> autoHealingPolicies() {
        return Optional.ofNullable(this.autoHealingPolicies);
    }

    /**
     * The base instance name to use for
     * instances in this group. The value must be a valid
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
     * are lowercase letters, numbers, and hyphens (-). Instances are named by
     * appending a hyphen and a random four-character string to the base instance
     * name.
     * 
     */
    @Import(name="baseInstanceName")
    private @Nullable Output<String> baseInstanceName;

    public Optional<Output<String>> baseInstanceName() {
        return Optional.ofNullable(this.baseInstanceName);
    }

    /**
     * An optional textual description of the instance
     * group manager.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
     * 
     */
    @Import(name="distributionPolicyTargetShape")
    private @Nullable Output<String> distributionPolicyTargetShape;

    public Optional<Output<String>> distributionPolicyTargetShape() {
        return Optional.ofNullable(this.distributionPolicyTargetShape);
    }

    /**
     * The distribution policy for this managed instance
     * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
     * 
     */
    @Import(name="distributionPolicyZones")
    private @Nullable Output<List<String>> distributionPolicyZones;

    public Optional<Output<List<String>>> distributionPolicyZones() {
        return Optional.ofNullable(this.distributionPolicyZones);
    }

    /**
     * The fingerprint of the instance group manager.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The full URL of the instance group created by the manager.
     * 
     */
    @Import(name="instanceGroup")
    private @Nullable Output<String> instanceGroup;

    public Optional<Output<String>> instanceGroup() {
        return Optional.ofNullable(this.instanceGroup);
    }

    /**
     * - Version name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The named port configuration. See the section below
     * for details on configuration.
     * 
     */
    @Import(name="namedPorts")
    private @Nullable Output<List<RegionInstanceGroupManagerNamedPortGetArgs>> namedPorts;

    public Optional<Output<List<RegionInstanceGroupManagerNamedPortGetArgs>>> namedPorts() {
        return Optional.ofNullable(this.namedPorts);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region where the managed instance group resides. If not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URL of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
     * 
     */
    @Import(name="statefulDisks")
    private @Nullable Output<List<RegionInstanceGroupManagerStatefulDiskGetArgs>> statefulDisks;

    public Optional<Output<List<RegionInstanceGroupManagerStatefulDiskGetArgs>>> statefulDisks() {
        return Optional.ofNullable(this.statefulDisks);
    }

    /**
     * The status of this managed instance group.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<RegionInstanceGroupManagerStatusGetArgs>> statuses;

    public Optional<Output<List<RegionInstanceGroupManagerStatusGetArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * The full URL of all target pools to which new
     * instances in the group are added. Updating the target pools attribute does
     * not affect existing instances.
     * 
     */
    @Import(name="targetPools")
    private @Nullable Output<List<String>> targetPools;

    public Optional<Output<List<String>>> targetPools() {
        return Optional.ofNullable(this.targetPools);
    }

    /**
     * - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
     * 
     */
    @Import(name="targetSize")
    private @Nullable Output<Integer> targetSize;

    public Optional<Output<Integer>> targetSize() {
        return Optional.ofNullable(this.targetSize);
    }

    /**
     * The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
     * 
     */
    @Import(name="updatePolicy")
    private @Nullable Output<RegionInstanceGroupManagerUpdatePolicyGetArgs> updatePolicy;

    public Optional<Output<RegionInstanceGroupManagerUpdatePolicyGetArgs>> updatePolicy() {
        return Optional.ofNullable(this.updatePolicy);
    }

    /**
     * Application versions managed by this instance group. Each
     * version deals with a specific instance template, allowing canary release scenarios.
     * Structure is documented below.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<RegionInstanceGroupManagerVersionGetArgs>> versions;

    public Optional<Output<List<RegionInstanceGroupManagerVersionGetArgs>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    /**
     * Whether to wait for all instances to be created/updated before
     * returning. Note that if this is set to true and the operation does not succeed, the provider will
     * continue trying until it times out.
     * 
     */
    @Import(name="waitForInstances")
    private @Nullable Output<Boolean> waitForInstances;

    public Optional<Output<Boolean>> waitForInstances() {
        return Optional.ofNullable(this.waitForInstances);
    }

    /**
     * When used with `wait_for_instances` it specifies the status to wait for.
     * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
     * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
     * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
     * 
     */
    @Import(name="waitForInstancesStatus")
    private @Nullable Output<String> waitForInstancesStatus;

    public Optional<Output<String>> waitForInstancesStatus() {
        return Optional.ofNullable(this.waitForInstancesStatus);
    }

    private RegionInstanceGroupManagerState() {}

    private RegionInstanceGroupManagerState(RegionInstanceGroupManagerState $) {
        this.autoHealingPolicies = $.autoHealingPolicies;
        this.baseInstanceName = $.baseInstanceName;
        this.description = $.description;
        this.distributionPolicyTargetShape = $.distributionPolicyTargetShape;
        this.distributionPolicyZones = $.distributionPolicyZones;
        this.fingerprint = $.fingerprint;
        this.instanceGroup = $.instanceGroup;
        this.name = $.name;
        this.namedPorts = $.namedPorts;
        this.project = $.project;
        this.region = $.region;
        this.selfLink = $.selfLink;
        this.statefulDisks = $.statefulDisks;
        this.statuses = $.statuses;
        this.targetPools = $.targetPools;
        this.targetSize = $.targetSize;
        this.updatePolicy = $.updatePolicy;
        this.versions = $.versions;
        this.waitForInstances = $.waitForInstances;
        this.waitForInstancesStatus = $.waitForInstancesStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionInstanceGroupManagerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionInstanceGroupManagerState $;

        public Builder() {
            $ = new RegionInstanceGroupManagerState();
        }

        public Builder(RegionInstanceGroupManagerState defaults) {
            $ = new RegionInstanceGroupManagerState(Objects.requireNonNull(defaults));
        }

        public Builder autoHealingPolicies(@Nullable Output<RegionInstanceGroupManagerAutoHealingPoliciesGetArgs> autoHealingPolicies) {
            $.autoHealingPolicies = autoHealingPolicies;
            return this;
        }

        public Builder autoHealingPolicies(RegionInstanceGroupManagerAutoHealingPoliciesGetArgs autoHealingPolicies) {
            return autoHealingPolicies(Output.of(autoHealingPolicies));
        }

        public Builder baseInstanceName(@Nullable Output<String> baseInstanceName) {
            $.baseInstanceName = baseInstanceName;
            return this;
        }

        public Builder baseInstanceName(String baseInstanceName) {
            return baseInstanceName(Output.of(baseInstanceName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder distributionPolicyTargetShape(@Nullable Output<String> distributionPolicyTargetShape) {
            $.distributionPolicyTargetShape = distributionPolicyTargetShape;
            return this;
        }

        public Builder distributionPolicyTargetShape(String distributionPolicyTargetShape) {
            return distributionPolicyTargetShape(Output.of(distributionPolicyTargetShape));
        }

        public Builder distributionPolicyZones(@Nullable Output<List<String>> distributionPolicyZones) {
            $.distributionPolicyZones = distributionPolicyZones;
            return this;
        }

        public Builder distributionPolicyZones(List<String> distributionPolicyZones) {
            return distributionPolicyZones(Output.of(distributionPolicyZones));
        }

        public Builder distributionPolicyZones(String... distributionPolicyZones) {
            return distributionPolicyZones(List.of(distributionPolicyZones));
        }

        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        public Builder instanceGroup(@Nullable Output<String> instanceGroup) {
            $.instanceGroup = instanceGroup;
            return this;
        }

        public Builder instanceGroup(String instanceGroup) {
            return instanceGroup(Output.of(instanceGroup));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namedPorts(@Nullable Output<List<RegionInstanceGroupManagerNamedPortGetArgs>> namedPorts) {
            $.namedPorts = namedPorts;
            return this;
        }

        public Builder namedPorts(List<RegionInstanceGroupManagerNamedPortGetArgs> namedPorts) {
            return namedPorts(Output.of(namedPorts));
        }

        public Builder namedPorts(RegionInstanceGroupManagerNamedPortGetArgs... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder statefulDisks(@Nullable Output<List<RegionInstanceGroupManagerStatefulDiskGetArgs>> statefulDisks) {
            $.statefulDisks = statefulDisks;
            return this;
        }

        public Builder statefulDisks(List<RegionInstanceGroupManagerStatefulDiskGetArgs> statefulDisks) {
            return statefulDisks(Output.of(statefulDisks));
        }

        public Builder statefulDisks(RegionInstanceGroupManagerStatefulDiskGetArgs... statefulDisks) {
            return statefulDisks(List.of(statefulDisks));
        }

        public Builder statuses(@Nullable Output<List<RegionInstanceGroupManagerStatusGetArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        public Builder statuses(List<RegionInstanceGroupManagerStatusGetArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        public Builder statuses(RegionInstanceGroupManagerStatusGetArgs... statuses) {
            return statuses(List.of(statuses));
        }

        public Builder targetPools(@Nullable Output<List<String>> targetPools) {
            $.targetPools = targetPools;
            return this;
        }

        public Builder targetPools(List<String> targetPools) {
            return targetPools(Output.of(targetPools));
        }

        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }

        public Builder targetSize(@Nullable Output<Integer> targetSize) {
            $.targetSize = targetSize;
            return this;
        }

        public Builder targetSize(Integer targetSize) {
            return targetSize(Output.of(targetSize));
        }

        public Builder updatePolicy(@Nullable Output<RegionInstanceGroupManagerUpdatePolicyGetArgs> updatePolicy) {
            $.updatePolicy = updatePolicy;
            return this;
        }

        public Builder updatePolicy(RegionInstanceGroupManagerUpdatePolicyGetArgs updatePolicy) {
            return updatePolicy(Output.of(updatePolicy));
        }

        public Builder versions(@Nullable Output<List<RegionInstanceGroupManagerVersionGetArgs>> versions) {
            $.versions = versions;
            return this;
        }

        public Builder versions(List<RegionInstanceGroupManagerVersionGetArgs> versions) {
            return versions(Output.of(versions));
        }

        public Builder versions(RegionInstanceGroupManagerVersionGetArgs... versions) {
            return versions(List.of(versions));
        }

        public Builder waitForInstances(@Nullable Output<Boolean> waitForInstances) {
            $.waitForInstances = waitForInstances;
            return this;
        }

        public Builder waitForInstances(Boolean waitForInstances) {
            return waitForInstances(Output.of(waitForInstances));
        }

        public Builder waitForInstancesStatus(@Nullable Output<String> waitForInstancesStatus) {
            $.waitForInstancesStatus = waitForInstancesStatus;
            return this;
        }

        public Builder waitForInstancesStatus(String waitForInstancesStatus) {
            return waitForInstancesStatus(Output.of(waitForInstancesStatus));
        }

        public RegionInstanceGroupManagerState build() {
            return $;
        }
    }

}
