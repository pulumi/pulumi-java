// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SslCertState extends com.pulumi.resources.ResourceArgs {

    public static final SslCertState Empty = new SslCertState();

    /**
     * The actual certificate data for this client certificate.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * The serial number extracted from the certificate data.
     * 
     */
    @Import(name="certSerialNumber")
    private @Nullable Output<String> certSerialNumber;

    public Optional<Output<String>> certSerialNumber() {
        return Optional.ofNullable(this.certSerialNumber);
    }

    /**
     * The common name to be used in the certificate to identify the
     * client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * The time when the certificate was created in RFC 3339 format,
     * for example 2012-11-15T16:19:00.094Z.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The time when the certificate expires in RFC 3339 format,
     * for example 2012-11-15T16:19:00.094Z.
     * 
     */
    @Import(name="expirationTime")
    private @Nullable Output<String> expirationTime;

    public Optional<Output<String>> expirationTime() {
        return Optional.ofNullable(this.expirationTime);
    }

    /**
     * The name of the Cloud SQL instance. Changing this
     * forces a new resource to be created.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The private key associated with the client certificate.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The CA cert of the server this client cert was generated from.
     * 
     */
    @Import(name="serverCaCert")
    private @Nullable Output<String> serverCaCert;

    public Optional<Output<String>> serverCaCert() {
        return Optional.ofNullable(this.serverCaCert);
    }

    /**
     * The SHA1 Fingerprint of the certificate.
     * 
     */
    @Import(name="sha1Fingerprint")
    private @Nullable Output<String> sha1Fingerprint;

    public Optional<Output<String>> sha1Fingerprint() {
        return Optional.ofNullable(this.sha1Fingerprint);
    }

    private SslCertState() {}

    private SslCertState(SslCertState $) {
        this.cert = $.cert;
        this.certSerialNumber = $.certSerialNumber;
        this.commonName = $.commonName;
        this.createTime = $.createTime;
        this.expirationTime = $.expirationTime;
        this.instance = $.instance;
        this.privateKey = $.privateKey;
        this.project = $.project;
        this.serverCaCert = $.serverCaCert;
        this.sha1Fingerprint = $.sha1Fingerprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslCertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslCertState $;

        public Builder() {
            $ = new SslCertState();
        }

        public Builder(SslCertState defaults) {
            $ = new SslCertState(Objects.requireNonNull(defaults));
        }

        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        public Builder certSerialNumber(@Nullable Output<String> certSerialNumber) {
            $.certSerialNumber = certSerialNumber;
            return this;
        }

        public Builder certSerialNumber(String certSerialNumber) {
            return certSerialNumber(Output.of(certSerialNumber));
        }

        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder expirationTime(@Nullable Output<String> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        public Builder expirationTime(String expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder serverCaCert(@Nullable Output<String> serverCaCert) {
            $.serverCaCert = serverCaCert;
            return this;
        }

        public Builder serverCaCert(String serverCaCert) {
            return serverCaCert(Output.of(serverCaCert));
        }

        public Builder sha1Fingerprint(@Nullable Output<String> sha1Fingerprint) {
            $.sha1Fingerprint = sha1Fingerprint;
            return this;
        }

        public Builder sha1Fingerprint(String sha1Fingerprint) {
            return sha1Fingerprint(Output.of(sha1Fingerprint));
        }

        public SslCertState build() {
            return $;
        }
    }

}
