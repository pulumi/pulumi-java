// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RouterStatusBestRoutesForRouter extends com.pulumi.resources.InvokeArgs {

    public static final RouterStatusBestRoutesForRouter Empty = new RouterStatusBestRoutesForRouter();

    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    @Import(name="destRange", required=true)
    private String destRange;

    public String destRange() {
        return this.destRange;
    }

    /**
     * The name of the router.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    @Import(name="nextHopGateway", required=true)
    private String nextHopGateway;

    public String nextHopGateway() {
        return this.nextHopGateway;
    }

    @Import(name="nextHopIlb", required=true)
    private String nextHopIlb;

    public String nextHopIlb() {
        return this.nextHopIlb;
    }

    @Import(name="nextHopInstance", required=true)
    private String nextHopInstance;

    public String nextHopInstance() {
        return this.nextHopInstance;
    }

    @Import(name="nextHopInstanceZone", required=true)
    private String nextHopInstanceZone;

    public String nextHopInstanceZone() {
        return this.nextHopInstanceZone;
    }

    @Import(name="nextHopIp", required=true)
    private String nextHopIp;

    public String nextHopIp() {
        return this.nextHopIp;
    }

    @Import(name="nextHopNetwork", required=true)
    private String nextHopNetwork;

    public String nextHopNetwork() {
        return this.nextHopNetwork;
    }

    @Import(name="nextHopVpnTunnel", required=true)
    private String nextHopVpnTunnel;

    public String nextHopVpnTunnel() {
        return this.nextHopVpnTunnel;
    }

    @Import(name="priority", required=true)
    private Integer priority;

    public Integer priority() {
        return this.priority;
    }

    /**
     * The ID of the project in which the resource
     * belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project", required=true)
    private String project;

    public String project() {
        return this.project;
    }

    @Import(name="selfLink", required=true)
    private String selfLink;

    public String selfLink() {
        return this.selfLink;
    }

    @Import(name="tags", required=true)
    private List<String> tags;

    public List<String> tags() {
        return this.tags;
    }

    private RouterStatusBestRoutesForRouter() {}

    private RouterStatusBestRoutesForRouter(RouterStatusBestRoutesForRouter $) {
        this.description = $.description;
        this.destRange = $.destRange;
        this.name = $.name;
        this.network = $.network;
        this.nextHopGateway = $.nextHopGateway;
        this.nextHopIlb = $.nextHopIlb;
        this.nextHopInstance = $.nextHopInstance;
        this.nextHopInstanceZone = $.nextHopInstanceZone;
        this.nextHopIp = $.nextHopIp;
        this.nextHopNetwork = $.nextHopNetwork;
        this.nextHopVpnTunnel = $.nextHopVpnTunnel;
        this.priority = $.priority;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterStatusBestRoutesForRouter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterStatusBestRoutesForRouter $;

        public Builder() {
            $ = new RouterStatusBestRoutesForRouter();
        }

        public Builder(RouterStatusBestRoutesForRouter defaults) {
            $ = new RouterStatusBestRoutesForRouter(Objects.requireNonNull(defaults));
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder destRange(String destRange) {
            $.destRange = destRange;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder nextHopGateway(String nextHopGateway) {
            $.nextHopGateway = nextHopGateway;
            return this;
        }

        public Builder nextHopIlb(String nextHopIlb) {
            $.nextHopIlb = nextHopIlb;
            return this;
        }

        public Builder nextHopInstance(String nextHopInstance) {
            $.nextHopInstance = nextHopInstance;
            return this;
        }

        public Builder nextHopInstanceZone(String nextHopInstanceZone) {
            $.nextHopInstanceZone = nextHopInstanceZone;
            return this;
        }

        public Builder nextHopIp(String nextHopIp) {
            $.nextHopIp = nextHopIp;
            return this;
        }

        public Builder nextHopNetwork(String nextHopNetwork) {
            $.nextHopNetwork = nextHopNetwork;
            return this;
        }

        public Builder nextHopVpnTunnel(String nextHopVpnTunnel) {
            $.nextHopVpnTunnel = nextHopVpnTunnel;
            return this;
        }

        public Builder priority(Integer priority) {
            $.priority = priority;
            return this;
        }

        public Builder project(String project) {
            $.project = project;
            return this;
        }

        public Builder selfLink(String selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder tags(List<String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public RouterStatusBestRoutesForRouter build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.destRange = Objects.requireNonNull($.destRange, "expected parameter 'destRange' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.nextHopGateway = Objects.requireNonNull($.nextHopGateway, "expected parameter 'nextHopGateway' to be non-null");
            $.nextHopIlb = Objects.requireNonNull($.nextHopIlb, "expected parameter 'nextHopIlb' to be non-null");
            $.nextHopInstance = Objects.requireNonNull($.nextHopInstance, "expected parameter 'nextHopInstance' to be non-null");
            $.nextHopInstanceZone = Objects.requireNonNull($.nextHopInstanceZone, "expected parameter 'nextHopInstanceZone' to be non-null");
            $.nextHopIp = Objects.requireNonNull($.nextHopIp, "expected parameter 'nextHopIp' to be non-null");
            $.nextHopNetwork = Objects.requireNonNull($.nextHopNetwork, "expected parameter 'nextHopNetwork' to be non-null");
            $.nextHopVpnTunnel = Objects.requireNonNull($.nextHopVpnTunnel, "expected parameter 'nextHopVpnTunnel' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.selfLink = Objects.requireNonNull($.selfLink, "expected parameter 'selfLink' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            return $;
        }
    }

}
