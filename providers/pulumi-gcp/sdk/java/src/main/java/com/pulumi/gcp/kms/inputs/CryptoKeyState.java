// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CryptoKeyState extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyState Empty = new CryptoKeyState();

    /**
     * The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
     * If not specified at creation time, the default duration is 24 hours.
     * 
     */
    @Import(name="destroyScheduledDuration")
      private final @Nullable Output<String> destroyScheduledDuration;

    public Output<String> destroyScheduledDuration() {
        return this.destroyScheduledDuration == null ? Codegen.empty() : this.destroyScheduledDuration;
    }

    /**
     * Whether this key may contain imported versions only.
     * 
     */
    @Import(name="importOnly")
      private final @Nullable Output<Boolean> importOnly;

    public Output<Boolean> importOnly() {
        return this.importOnly == null ? Codegen.empty() : this.importOnly;
    }

    /**
     * The KeyRing that this key belongs to.
     * Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
     * 
     */
    @Import(name="keyRing")
      private final @Nullable Output<String> keyRing;

    public Output<String> keyRing() {
        return this.keyRing == null ? Codegen.empty() : this.keyRing;
    }

    /**
     * Labels with user-defined metadata to apply to this resource.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The resource name for the CryptoKey.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The immutable purpose of this CryptoKey. See the
     * [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
     * for possible inputs.
     * Default value is `ENCRYPT_DECRYPT`.
     * Possible values are `ENCRYPT_DECRYPT`, `ASYMMETRIC_SIGN`, and `ASYMMETRIC_DECRYPT`.
     * 
     */
    @Import(name="purpose")
      private final @Nullable Output<String> purpose;

    public Output<String> purpose() {
        return this.purpose == null ? Codegen.empty() : this.purpose;
    }

    /**
     * Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
     * The first rotation will take place after the specified period. The rotation period has
     * the format of a decimal number with up to 9 fractional digits, followed by the
     * letter `s` (seconds). It must be greater than a day (ie, 86400).
     * 
     */
    @Import(name="rotationPeriod")
      private final @Nullable Output<String> rotationPeriod;

    public Output<String> rotationPeriod() {
        return this.rotationPeriod == null ? Codegen.empty() : this.rotationPeriod;
    }

    /**
     * If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
     * You must use the `gcp.kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
     * 
     */
    @Import(name="skipInitialVersionCreation")
      private final @Nullable Output<Boolean> skipInitialVersionCreation;

    public Output<Boolean> skipInitialVersionCreation() {
        return this.skipInitialVersionCreation == null ? Codegen.empty() : this.skipInitialVersionCreation;
    }

    /**
     * A template describing settings for new crypto key versions.
     * Structure is documented below.
     * 
     */
    @Import(name="versionTemplate")
      private final @Nullable Output<CryptoKeyVersionTemplateGetArgs> versionTemplate;

    public Output<CryptoKeyVersionTemplateGetArgs> versionTemplate() {
        return this.versionTemplate == null ? Codegen.empty() : this.versionTemplate;
    }

    public CryptoKeyState(
        @Nullable Output<String> destroyScheduledDuration,
        @Nullable Output<Boolean> importOnly,
        @Nullable Output<String> keyRing,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> name,
        @Nullable Output<String> purpose,
        @Nullable Output<String> rotationPeriod,
        @Nullable Output<Boolean> skipInitialVersionCreation,
        @Nullable Output<CryptoKeyVersionTemplateGetArgs> versionTemplate) {
        this.destroyScheduledDuration = destroyScheduledDuration;
        this.importOnly = importOnly;
        this.keyRing = keyRing;
        this.labels = labels;
        this.name = name;
        this.purpose = purpose;
        this.rotationPeriod = rotationPeriod;
        this.skipInitialVersionCreation = skipInitialVersionCreation;
        this.versionTemplate = versionTemplate;
    }

    private CryptoKeyState() {
        this.destroyScheduledDuration = Codegen.empty();
        this.importOnly = Codegen.empty();
        this.keyRing = Codegen.empty();
        this.labels = Codegen.empty();
        this.name = Codegen.empty();
        this.purpose = Codegen.empty();
        this.rotationPeriod = Codegen.empty();
        this.skipInitialVersionCreation = Codegen.empty();
        this.versionTemplate = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> destroyScheduledDuration;
        private @Nullable Output<Boolean> importOnly;
        private @Nullable Output<String> keyRing;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> name;
        private @Nullable Output<String> purpose;
        private @Nullable Output<String> rotationPeriod;
        private @Nullable Output<Boolean> skipInitialVersionCreation;
        private @Nullable Output<CryptoKeyVersionTemplateGetArgs> versionTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.importOnly = defaults.importOnly;
    	      this.keyRing = defaults.keyRing;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.skipInitialVersionCreation = defaults.skipInitialVersionCreation;
    	      this.versionTemplate = defaults.versionTemplate;
        }

        public Builder destroyScheduledDuration(@Nullable Output<String> destroyScheduledDuration) {
            this.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }
        public Builder destroyScheduledDuration(@Nullable String destroyScheduledDuration) {
            this.destroyScheduledDuration = Codegen.ofNullable(destroyScheduledDuration);
            return this;
        }
        public Builder importOnly(@Nullable Output<Boolean> importOnly) {
            this.importOnly = importOnly;
            return this;
        }
        public Builder importOnly(@Nullable Boolean importOnly) {
            this.importOnly = Codegen.ofNullable(importOnly);
            return this;
        }
        public Builder keyRing(@Nullable Output<String> keyRing) {
            this.keyRing = keyRing;
            return this;
        }
        public Builder keyRing(@Nullable String keyRing) {
            this.keyRing = Codegen.ofNullable(keyRing);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder purpose(@Nullable Output<String> purpose) {
            this.purpose = purpose;
            return this;
        }
        public Builder purpose(@Nullable String purpose) {
            this.purpose = Codegen.ofNullable(purpose);
            return this;
        }
        public Builder rotationPeriod(@Nullable Output<String> rotationPeriod) {
            this.rotationPeriod = rotationPeriod;
            return this;
        }
        public Builder rotationPeriod(@Nullable String rotationPeriod) {
            this.rotationPeriod = Codegen.ofNullable(rotationPeriod);
            return this;
        }
        public Builder skipInitialVersionCreation(@Nullable Output<Boolean> skipInitialVersionCreation) {
            this.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }
        public Builder skipInitialVersionCreation(@Nullable Boolean skipInitialVersionCreation) {
            this.skipInitialVersionCreation = Codegen.ofNullable(skipInitialVersionCreation);
            return this;
        }
        public Builder versionTemplate(@Nullable Output<CryptoKeyVersionTemplateGetArgs> versionTemplate) {
            this.versionTemplate = versionTemplate;
            return this;
        }
        public Builder versionTemplate(@Nullable CryptoKeyVersionTemplateGetArgs versionTemplate) {
            this.versionTemplate = Codegen.ofNullable(versionTemplate);
            return this;
        }        public CryptoKeyState build() {
            return new CryptoKeyState(destroyScheduledDuration, importOnly, keyRing, labels, name, purpose, rotationPeriod, skipInitialVersionCreation, versionTemplate);
        }
    }
}
