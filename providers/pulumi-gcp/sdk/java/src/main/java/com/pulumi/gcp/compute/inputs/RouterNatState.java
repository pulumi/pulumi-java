// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.RouterNatLogConfigGetArgs;
import com.pulumi.gcp.compute.inputs.RouterNatSubnetworkGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterNatState extends com.pulumi.resources.ResourceArgs {

    public static final RouterNatState Empty = new RouterNatState();

    /**
     * A list of URLs of the IP resources to be drained. These IPs must be
     * valid static external IPs that have been assigned to the NAT.
     * 
     */
    @Import(name="drainNatIps")
      private final @Nullable Output<List<String>> drainNatIps;

    public Output<List<String>> drainNatIps() {
        return this.drainNatIps == null ? Codegen.empty() : this.drainNatIps;
    }

    /**
     * Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
     * see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
     * 
     */
    @Import(name="enableEndpointIndependentMapping")
      private final @Nullable Output<Boolean> enableEndpointIndependentMapping;

    public Output<Boolean> enableEndpointIndependentMapping() {
        return this.enableEndpointIndependentMapping == null ? Codegen.empty() : this.enableEndpointIndependentMapping;
    }

    /**
     * Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
     * 
     */
    @Import(name="icmpIdleTimeoutSec")
      private final @Nullable Output<Integer> icmpIdleTimeoutSec;

    public Output<Integer> icmpIdleTimeoutSec() {
        return this.icmpIdleTimeoutSec == null ? Codegen.empty() : this.icmpIdleTimeoutSec;
    }

    /**
     * Configuration for logging on NAT
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
      private final @Nullable Output<RouterNatLogConfigGetArgs> logConfig;

    public Output<RouterNatLogConfigGetArgs> logConfig() {
        return this.logConfig == null ? Codegen.empty() : this.logConfig;
    }

    /**
     * Minimum number of ports allocated to a VM from this NAT.
     * 
     */
    @Import(name="minPortsPerVm")
      private final @Nullable Output<Integer> minPortsPerVm;

    public Output<Integer> minPortsPerVm() {
        return this.minPortsPerVm == null ? Codegen.empty() : this.minPortsPerVm;
    }

    /**
     * Self-link of subnetwork to NAT
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * How external IPs should be allocated for this NAT. Valid values are
     * `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
     * Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
     * Possible values are `MANUAL_ONLY` and `AUTO_ONLY`.
     * 
     */
    @Import(name="natIpAllocateOption")
      private final @Nullable Output<String> natIpAllocateOption;

    public Output<String> natIpAllocateOption() {
        return this.natIpAllocateOption == null ? Codegen.empty() : this.natIpAllocateOption;
    }

    /**
     * Self-links of NAT IPs. Only valid if natIpAllocateOption
     * is set to MANUAL_ONLY.
     * 
     */
    @Import(name="natIps")
      private final @Nullable Output<List<String>> natIps;

    public Output<List<String>> natIps() {
        return this.natIps == null ? Codegen.empty() : this.natIps;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Region where the router and NAT reside.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The name of the Cloud Router in which this NAT will be configured.
     * 
     */
    @Import(name="router")
      private final @Nullable Output<String> router;

    public Output<String> router() {
        return this.router == null ? Codegen.empty() : this.router;
    }

    /**
     * How NAT should be configured per Subnetwork.
     * If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
     * IP ranges in every Subnetwork are allowed to Nat.
     * If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
     * ranges in every Subnetwork are allowed to Nat.
     * `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
     * (specified in the field subnetwork below). Note that if this field
     * contains ALL_SUBNETWORKS_ALL_IP_RANGES or
     * ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
     * other RouterNat section in any Router for this network in this region.
     * Possible values are `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, and `LIST_OF_SUBNETWORKS`.
     * 
     */
    @Import(name="sourceSubnetworkIpRangesToNat")
      private final @Nullable Output<String> sourceSubnetworkIpRangesToNat;

    public Output<String> sourceSubnetworkIpRangesToNat() {
        return this.sourceSubnetworkIpRangesToNat == null ? Codegen.empty() : this.sourceSubnetworkIpRangesToNat;
    }

    /**
     * One or more subnetwork NAT configurations. Only used if
     * `source_subnetwork_ip_ranges_to_nat` is set to `LIST_OF_SUBNETWORKS`
     * Structure is documented below.
     * 
     */
    @Import(name="subnetworks")
      private final @Nullable Output<List<RouterNatSubnetworkGetArgs>> subnetworks;

    public Output<List<RouterNatSubnetworkGetArgs>> subnetworks() {
        return this.subnetworks == null ? Codegen.empty() : this.subnetworks;
    }

    /**
     * Timeout (in seconds) for TCP established connections.
     * Defaults to 1200s if not set.
     * 
     */
    @Import(name="tcpEstablishedIdleTimeoutSec")
      private final @Nullable Output<Integer> tcpEstablishedIdleTimeoutSec;

    public Output<Integer> tcpEstablishedIdleTimeoutSec() {
        return this.tcpEstablishedIdleTimeoutSec == null ? Codegen.empty() : this.tcpEstablishedIdleTimeoutSec;
    }

    /**
     * Timeout (in seconds) for TCP transitory connections.
     * Defaults to 30s if not set.
     * 
     */
    @Import(name="tcpTransitoryIdleTimeoutSec")
      private final @Nullable Output<Integer> tcpTransitoryIdleTimeoutSec;

    public Output<Integer> tcpTransitoryIdleTimeoutSec() {
        return this.tcpTransitoryIdleTimeoutSec == null ? Codegen.empty() : this.tcpTransitoryIdleTimeoutSec;
    }

    /**
     * Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
     * 
     */
    @Import(name="udpIdleTimeoutSec")
      private final @Nullable Output<Integer> udpIdleTimeoutSec;

    public Output<Integer> udpIdleTimeoutSec() {
        return this.udpIdleTimeoutSec == null ? Codegen.empty() : this.udpIdleTimeoutSec;
    }

    public RouterNatState(
        @Nullable Output<List<String>> drainNatIps,
        @Nullable Output<Boolean> enableEndpointIndependentMapping,
        @Nullable Output<Integer> icmpIdleTimeoutSec,
        @Nullable Output<RouterNatLogConfigGetArgs> logConfig,
        @Nullable Output<Integer> minPortsPerVm,
        @Nullable Output<String> name,
        @Nullable Output<String> natIpAllocateOption,
        @Nullable Output<List<String>> natIps,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<String> router,
        @Nullable Output<String> sourceSubnetworkIpRangesToNat,
        @Nullable Output<List<RouterNatSubnetworkGetArgs>> subnetworks,
        @Nullable Output<Integer> tcpEstablishedIdleTimeoutSec,
        @Nullable Output<Integer> tcpTransitoryIdleTimeoutSec,
        @Nullable Output<Integer> udpIdleTimeoutSec) {
        this.drainNatIps = drainNatIps;
        this.enableEndpointIndependentMapping = enableEndpointIndependentMapping;
        this.icmpIdleTimeoutSec = icmpIdleTimeoutSec;
        this.logConfig = logConfig;
        this.minPortsPerVm = minPortsPerVm;
        this.name = name;
        this.natIpAllocateOption = natIpAllocateOption;
        this.natIps = natIps;
        this.project = project;
        this.region = region;
        this.router = router;
        this.sourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
        this.subnetworks = subnetworks;
        this.tcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
        this.tcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
        this.udpIdleTimeoutSec = udpIdleTimeoutSec;
    }

    private RouterNatState() {
        this.drainNatIps = Codegen.empty();
        this.enableEndpointIndependentMapping = Codegen.empty();
        this.icmpIdleTimeoutSec = Codegen.empty();
        this.logConfig = Codegen.empty();
        this.minPortsPerVm = Codegen.empty();
        this.name = Codegen.empty();
        this.natIpAllocateOption = Codegen.empty();
        this.natIps = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.router = Codegen.empty();
        this.sourceSubnetworkIpRangesToNat = Codegen.empty();
        this.subnetworks = Codegen.empty();
        this.tcpEstablishedIdleTimeoutSec = Codegen.empty();
        this.tcpTransitoryIdleTimeoutSec = Codegen.empty();
        this.udpIdleTimeoutSec = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterNatState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> drainNatIps;
        private @Nullable Output<Boolean> enableEndpointIndependentMapping;
        private @Nullable Output<Integer> icmpIdleTimeoutSec;
        private @Nullable Output<RouterNatLogConfigGetArgs> logConfig;
        private @Nullable Output<Integer> minPortsPerVm;
        private @Nullable Output<String> name;
        private @Nullable Output<String> natIpAllocateOption;
        private @Nullable Output<List<String>> natIps;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<String> router;
        private @Nullable Output<String> sourceSubnetworkIpRangesToNat;
        private @Nullable Output<List<RouterNatSubnetworkGetArgs>> subnetworks;
        private @Nullable Output<Integer> tcpEstablishedIdleTimeoutSec;
        private @Nullable Output<Integer> tcpTransitoryIdleTimeoutSec;
        private @Nullable Output<Integer> udpIdleTimeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterNatState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.drainNatIps = defaults.drainNatIps;
    	      this.enableEndpointIndependentMapping = defaults.enableEndpointIndependentMapping;
    	      this.icmpIdleTimeoutSec = defaults.icmpIdleTimeoutSec;
    	      this.logConfig = defaults.logConfig;
    	      this.minPortsPerVm = defaults.minPortsPerVm;
    	      this.name = defaults.name;
    	      this.natIpAllocateOption = defaults.natIpAllocateOption;
    	      this.natIps = defaults.natIps;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
    	      this.sourceSubnetworkIpRangesToNat = defaults.sourceSubnetworkIpRangesToNat;
    	      this.subnetworks = defaults.subnetworks;
    	      this.tcpEstablishedIdleTimeoutSec = defaults.tcpEstablishedIdleTimeoutSec;
    	      this.tcpTransitoryIdleTimeoutSec = defaults.tcpTransitoryIdleTimeoutSec;
    	      this.udpIdleTimeoutSec = defaults.udpIdleTimeoutSec;
        }

        public Builder drainNatIps(@Nullable Output<List<String>> drainNatIps) {
            this.drainNatIps = drainNatIps;
            return this;
        }
        public Builder drainNatIps(@Nullable List<String> drainNatIps) {
            this.drainNatIps = Codegen.ofNullable(drainNatIps);
            return this;
        }
        public Builder drainNatIps(String... drainNatIps) {
            return drainNatIps(List.of(drainNatIps));
        }
        public Builder enableEndpointIndependentMapping(@Nullable Output<Boolean> enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = enableEndpointIndependentMapping;
            return this;
        }
        public Builder enableEndpointIndependentMapping(@Nullable Boolean enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = Codegen.ofNullable(enableEndpointIndependentMapping);
            return this;
        }
        public Builder icmpIdleTimeoutSec(@Nullable Output<Integer> icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = icmpIdleTimeoutSec;
            return this;
        }
        public Builder icmpIdleTimeoutSec(@Nullable Integer icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = Codegen.ofNullable(icmpIdleTimeoutSec);
            return this;
        }
        public Builder logConfig(@Nullable Output<RouterNatLogConfigGetArgs> logConfig) {
            this.logConfig = logConfig;
            return this;
        }
        public Builder logConfig(@Nullable RouterNatLogConfigGetArgs logConfig) {
            this.logConfig = Codegen.ofNullable(logConfig);
            return this;
        }
        public Builder minPortsPerVm(@Nullable Output<Integer> minPortsPerVm) {
            this.minPortsPerVm = minPortsPerVm;
            return this;
        }
        public Builder minPortsPerVm(@Nullable Integer minPortsPerVm) {
            this.minPortsPerVm = Codegen.ofNullable(minPortsPerVm);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder natIpAllocateOption(@Nullable Output<String> natIpAllocateOption) {
            this.natIpAllocateOption = natIpAllocateOption;
            return this;
        }
        public Builder natIpAllocateOption(@Nullable String natIpAllocateOption) {
            this.natIpAllocateOption = Codegen.ofNullable(natIpAllocateOption);
            return this;
        }
        public Builder natIps(@Nullable Output<List<String>> natIps) {
            this.natIps = natIps;
            return this;
        }
        public Builder natIps(@Nullable List<String> natIps) {
            this.natIps = Codegen.ofNullable(natIps);
            return this;
        }
        public Builder natIps(String... natIps) {
            return natIps(List.of(natIps));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder router(@Nullable Output<String> router) {
            this.router = router;
            return this;
        }
        public Builder router(@Nullable String router) {
            this.router = Codegen.ofNullable(router);
            return this;
        }
        public Builder sourceSubnetworkIpRangesToNat(@Nullable Output<String> sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
            return this;
        }
        public Builder sourceSubnetworkIpRangesToNat(@Nullable String sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = Codegen.ofNullable(sourceSubnetworkIpRangesToNat);
            return this;
        }
        public Builder subnetworks(@Nullable Output<List<RouterNatSubnetworkGetArgs>> subnetworks) {
            this.subnetworks = subnetworks;
            return this;
        }
        public Builder subnetworks(@Nullable List<RouterNatSubnetworkGetArgs> subnetworks) {
            this.subnetworks = Codegen.ofNullable(subnetworks);
            return this;
        }
        public Builder subnetworks(RouterNatSubnetworkGetArgs... subnetworks) {
            return subnetworks(List.of(subnetworks));
        }
        public Builder tcpEstablishedIdleTimeoutSec(@Nullable Output<Integer> tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
            return this;
        }
        public Builder tcpEstablishedIdleTimeoutSec(@Nullable Integer tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = Codegen.ofNullable(tcpEstablishedIdleTimeoutSec);
            return this;
        }
        public Builder tcpTransitoryIdleTimeoutSec(@Nullable Output<Integer> tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
            return this;
        }
        public Builder tcpTransitoryIdleTimeoutSec(@Nullable Integer tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = Codegen.ofNullable(tcpTransitoryIdleTimeoutSec);
            return this;
        }
        public Builder udpIdleTimeoutSec(@Nullable Output<Integer> udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = udpIdleTimeoutSec;
            return this;
        }
        public Builder udpIdleTimeoutSec(@Nullable Integer udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = Codegen.ofNullable(udpIdleTimeoutSec);
            return this;
        }        public RouterNatState build() {
            return new RouterNatState(drainNatIps, enableEndpointIndependentMapping, icmpIdleTimeoutSec, logConfig, minPortsPerVm, name, natIpAllocateOption, natIps, project, region, router, sourceSubnetworkIpRangesToNat, subnetworks, tcpEstablishedIdleTimeoutSec, tcpTransitoryIdleTimeoutSec, udpIdleTimeoutSec);
        }
    }
}
