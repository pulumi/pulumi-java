// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.JobCopyGetArgs;
import com.pulumi.gcp.bigquery.inputs.JobExtractGetArgs;
import com.pulumi.gcp.bigquery.inputs.JobLoadGetArgs;
import com.pulumi.gcp.bigquery.inputs.JobQueryGetArgs;
import com.pulumi.gcp.bigquery.inputs.JobStatusGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobState extends com.pulumi.resources.ResourceArgs {

    public static final JobState Empty = new JobState();

    /**
     * Copies a table.
     * Structure is documented below.
     * 
     */
    @Import(name="copy")
    private @Nullable Output<JobCopyGetArgs> copy;

    public Optional<Output<JobCopyGetArgs>> copy() {
        return Optional.ofNullable(this.copy);
    }

    /**
     * Configures an extract job.
     * Structure is documented below.
     * 
     */
    @Import(name="extract")
    private @Nullable Output<JobExtractGetArgs> extract;

    public Optional<Output<JobExtractGetArgs>> extract() {
        return Optional.ofNullable(this.extract);
    }

    /**
     * The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
     * 
     */
    @Import(name="jobId")
    private @Nullable Output<String> jobId;

    public Optional<Output<String>> jobId() {
        return Optional.ofNullable(this.jobId);
    }

    /**
     * Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
     * 
     */
    @Import(name="jobTimeoutMs")
    private @Nullable Output<String> jobTimeoutMs;

    public Optional<Output<String>> jobTimeoutMs() {
        return Optional.ofNullable(this.jobTimeoutMs);
    }

    /**
     * The type of the job.
     * 
     */
    @Import(name="jobType")
    private @Nullable Output<String> jobType;

    public Optional<Output<String>> jobType() {
        return Optional.ofNullable(this.jobType);
    }

    /**
     * The labels associated with this job. You can use these to organize and group your jobs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Configures a load job.
     * Structure is documented below.
     * 
     */
    @Import(name="load")
    private @Nullable Output<JobLoadGetArgs> load;

    public Optional<Output<JobLoadGetArgs>> load() {
        return Optional.ofNullable(this.load);
    }

    /**
     * The geographic location of the job. The default value is US.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Configures a query job.
     * Structure is documented below.
     * 
     */
    @Import(name="query")
    private @Nullable Output<JobQueryGetArgs> query;

    public Optional<Output<JobQueryGetArgs>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<JobStatusGetArgs>> statuses;

    public Optional<Output<List<JobStatusGetArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * Email address of the user who ran the job.
     * 
     */
    @Import(name="userEmail")
    private @Nullable Output<String> userEmail;

    public Optional<Output<String>> userEmail() {
        return Optional.ofNullable(this.userEmail);
    }

    private JobState() {}

    private JobState(JobState $) {
        this.copy = $.copy;
        this.extract = $.extract;
        this.jobId = $.jobId;
        this.jobTimeoutMs = $.jobTimeoutMs;
        this.jobType = $.jobType;
        this.labels = $.labels;
        this.load = $.load;
        this.location = $.location;
        this.project = $.project;
        this.query = $.query;
        this.statuses = $.statuses;
        this.userEmail = $.userEmail;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobState $;

        public Builder() {
            $ = new JobState();
        }

        public Builder(JobState defaults) {
            $ = new JobState(Objects.requireNonNull(defaults));
        }

        public Builder copy(@Nullable Output<JobCopyGetArgs> copy) {
            $.copy = copy;
            return this;
        }

        public Builder copy(JobCopyGetArgs copy) {
            return copy(Output.of(copy));
        }

        public Builder extract(@Nullable Output<JobExtractGetArgs> extract) {
            $.extract = extract;
            return this;
        }

        public Builder extract(JobExtractGetArgs extract) {
            return extract(Output.of(extract));
        }

        public Builder jobId(@Nullable Output<String> jobId) {
            $.jobId = jobId;
            return this;
        }

        public Builder jobId(String jobId) {
            return jobId(Output.of(jobId));
        }

        public Builder jobTimeoutMs(@Nullable Output<String> jobTimeoutMs) {
            $.jobTimeoutMs = jobTimeoutMs;
            return this;
        }

        public Builder jobTimeoutMs(String jobTimeoutMs) {
            return jobTimeoutMs(Output.of(jobTimeoutMs));
        }

        public Builder jobType(@Nullable Output<String> jobType) {
            $.jobType = jobType;
            return this;
        }

        public Builder jobType(String jobType) {
            return jobType(Output.of(jobType));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder load(@Nullable Output<JobLoadGetArgs> load) {
            $.load = load;
            return this;
        }

        public Builder load(JobLoadGetArgs load) {
            return load(Output.of(load));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder query(@Nullable Output<JobQueryGetArgs> query) {
            $.query = query;
            return this;
        }

        public Builder query(JobQueryGetArgs query) {
            return query(Output.of(query));
        }

        public Builder statuses(@Nullable Output<List<JobStatusGetArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        public Builder statuses(List<JobStatusGetArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        public Builder statuses(JobStatusGetArgs... statuses) {
            return statuses(List.of(statuses));
        }

        public Builder userEmail(@Nullable Output<String> userEmail) {
            $.userEmail = userEmail;
            return this;
        }

        public Builder userEmail(String userEmail) {
            return userEmail(Output.of(userEmail));
        }

        public JobState build() {
            return $;
        }
    }

}
