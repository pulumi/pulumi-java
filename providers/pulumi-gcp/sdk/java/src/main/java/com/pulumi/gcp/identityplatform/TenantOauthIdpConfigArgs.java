// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TenantOauthIdpConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final TenantOauthIdpConfigArgs Empty = new TenantOauthIdpConfigArgs();

    /**
     * The client id of an OAuth client.
     * 
     */
    @Import(name="clientId", required=true)
      private final Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The client secret of the OAuth client, to enable OIDC code flow.
     * 
     */
    @Import(name="clientSecret")
      private final @Nullable Output<String> clientSecret;

    public Output<String> clientSecret() {
        return this.clientSecret == null ? Codegen.empty() : this.clientSecret;
    }

    /**
     * Human friendly display name.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * If this config allows users to sign in with the provider.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * For OIDC Idps, the issuer identifier.
     * 
     */
    @Import(name="issuer", required=true)
      private final Output<String> issuer;

    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * The name of the OauthIdpConfig. Must start with `oidc.`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The name of the tenant where this OIDC IDP configuration resource exists
     * 
     */
    @Import(name="tenant", required=true)
      private final Output<String> tenant;

    public Output<String> tenant() {
        return this.tenant;
    }

    public TenantOauthIdpConfigArgs(
        Output<String> clientId,
        @Nullable Output<String> clientSecret,
        Output<String> displayName,
        @Nullable Output<Boolean> enabled,
        Output<String> issuer,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<String> tenant) {
        this.clientId = Objects.requireNonNull(clientId, "expected parameter 'clientId' to be non-null");
        this.clientSecret = clientSecret;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.enabled = enabled;
        this.issuer = Objects.requireNonNull(issuer, "expected parameter 'issuer' to be non-null");
        this.name = name;
        this.project = project;
        this.tenant = Objects.requireNonNull(tenant, "expected parameter 'tenant' to be non-null");
    }

    private TenantOauthIdpConfigArgs() {
        this.clientId = Codegen.empty();
        this.clientSecret = Codegen.empty();
        this.displayName = Codegen.empty();
        this.enabled = Codegen.empty();
        this.issuer = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.tenant = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TenantOauthIdpConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> clientId;
        private @Nullable Output<String> clientSecret;
        private Output<String> displayName;
        private @Nullable Output<Boolean> enabled;
        private Output<String> issuer;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<String> tenant;

        public Builder() {
    	      // Empty
        }

        public Builder(TenantOauthIdpConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.issuer = defaults.issuer;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.tenant = defaults.tenant;
        }

        public Builder clientId(Output<String> clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Output.of(Objects.requireNonNull(clientId));
            return this;
        }
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = Codegen.ofNullable(clientSecret);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder issuer(Output<String> issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        public Builder issuer(String issuer) {
            this.issuer = Output.of(Objects.requireNonNull(issuer));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder tenant(Output<String> tenant) {
            this.tenant = Objects.requireNonNull(tenant);
            return this;
        }
        public Builder tenant(String tenant) {
            this.tenant = Output.of(Objects.requireNonNull(tenant));
            return this;
        }        public TenantOauthIdpConfigArgs build() {
            return new TenantOauthIdpConfigArgs(clientId, clientSecret, displayName, enabled, issuer, name, project, tenant);
        }
    }
}
