// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datacatalog.inputs.TagTemplateFieldGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final TagTemplateState Empty = new TagTemplateState();

    /**
     * The display name for this template.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<TagTemplateFieldGetArgs>> fields;

    public Optional<Output<List<TagTemplateFieldGetArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * - 
     * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Template location region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The id of the tag template to create.
     * 
     */
    @Import(name="tagTemplateId")
    private @Nullable Output<String> tagTemplateId;

    public Optional<Output<String>> tagTemplateId() {
        return Optional.ofNullable(this.tagTemplateId);
    }

    private TagTemplateState() {}

    private TagTemplateState(TagTemplateState $) {
        this.displayName = $.displayName;
        this.fields = $.fields;
        this.forceDelete = $.forceDelete;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.tagTemplateId = $.tagTemplateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagTemplateState $;

        public Builder() {
            $ = new TagTemplateState();
        }

        public Builder(TagTemplateState defaults) {
            $ = new TagTemplateState(Objects.requireNonNull(defaults));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder fields(@Nullable Output<List<TagTemplateFieldGetArgs>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<TagTemplateFieldGetArgs> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(TagTemplateFieldGetArgs... fields) {
            return fields(List.of(fields));
        }

        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder tagTemplateId(@Nullable Output<String> tagTemplateId) {
            $.tagTemplateId = tagTemplateId;
            return this;
        }

        public Builder tagTemplateId(String tagTemplateId) {
            return tagTemplateId(Output.of(tagTemplateId));
        }

        public TagTemplateState build() {
            return $;
        }
    }

}
