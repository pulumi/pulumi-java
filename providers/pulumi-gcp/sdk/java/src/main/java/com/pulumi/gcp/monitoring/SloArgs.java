// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.monitoring.inputs.SloBasicSliArgs;
import com.pulumi.gcp.monitoring.inputs.SloRequestBasedSliArgs;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SloArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloArgs Empty = new SloArgs();

    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Import(name="basicSli")
      private final @Nullable Output<SloBasicSliArgs> basicSli;

    public Output<SloBasicSliArgs> basicSli() {
        return this.basicSli == null ? Codegen.empty() : this.basicSli;
    }

    /**
     * A calendar period, semantically &#34;since the start of the current
     * &lt;calendarPeriod&gt;&#34;.
     * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
     * 
     */
    @Import(name="calendarPeriod")
      private final @Nullable Output<String> calendarPeriod;

    public Output<String> calendarPeriod() {
        return this.calendarPeriod == null ? Codegen.empty() : this.calendarPeriod;
    }

    /**
     * Name used for UI elements listing this SLO.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * The fraction of service that must be good in order for this objective
     * to be met. 0 &lt; goal &lt;= 0.999
     * 
     */
    @Import(name="goal", required=true)
      private final Output<Double> goal;

    public Output<Double> goal() {
        return this.goal;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Import(name="requestBasedSli")
      private final @Nullable Output<SloRequestBasedSliArgs> requestBasedSli;

    public Output<SloRequestBasedSliArgs> requestBasedSli() {
        return this.requestBasedSli == null ? Codegen.empty() : this.requestBasedSli;
    }

    /**
     * A rolling time period, semantically &#34;in the past X days&#34;.
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    @Import(name="rollingPeriodDays")
      private final @Nullable Output<Integer> rollingPeriodDays;

    public Output<Integer> rollingPeriodDays() {
        return this.rollingPeriodDays == null ? Codegen.empty() : this.rollingPeriodDays;
    }

    /**
     * ID of the service to which this SLO belongs.
     * 
     */
    @Import(name="service", required=true)
      private final Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    @Import(name="sloId")
      private final @Nullable Output<String> sloId;

    public Output<String> sloId() {
        return this.sloId == null ? Codegen.empty() : this.sloId;
    }

    /**
     * A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service&#39;s performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Import(name="windowsBasedSli")
      private final @Nullable Output<SloWindowsBasedSliArgs> windowsBasedSli;

    public Output<SloWindowsBasedSliArgs> windowsBasedSli() {
        return this.windowsBasedSli == null ? Codegen.empty() : this.windowsBasedSli;
    }

    public SloArgs(
        @Nullable Output<SloBasicSliArgs> basicSli,
        @Nullable Output<String> calendarPeriod,
        @Nullable Output<String> displayName,
        Output<Double> goal,
        @Nullable Output<String> project,
        @Nullable Output<SloRequestBasedSliArgs> requestBasedSli,
        @Nullable Output<Integer> rollingPeriodDays,
        Output<String> service,
        @Nullable Output<String> sloId,
        @Nullable Output<SloWindowsBasedSliArgs> windowsBasedSli) {
        this.basicSli = basicSli;
        this.calendarPeriod = calendarPeriod;
        this.displayName = displayName;
        this.goal = Objects.requireNonNull(goal, "expected parameter 'goal' to be non-null");
        this.project = project;
        this.requestBasedSli = requestBasedSli;
        this.rollingPeriodDays = rollingPeriodDays;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.sloId = sloId;
        this.windowsBasedSli = windowsBasedSli;
    }

    private SloArgs() {
        this.basicSli = Codegen.empty();
        this.calendarPeriod = Codegen.empty();
        this.displayName = Codegen.empty();
        this.goal = Codegen.empty();
        this.project = Codegen.empty();
        this.requestBasedSli = Codegen.empty();
        this.rollingPeriodDays = Codegen.empty();
        this.service = Codegen.empty();
        this.sloId = Codegen.empty();
        this.windowsBasedSli = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SloBasicSliArgs> basicSli;
        private @Nullable Output<String> calendarPeriod;
        private @Nullable Output<String> displayName;
        private Output<Double> goal;
        private @Nullable Output<String> project;
        private @Nullable Output<SloRequestBasedSliArgs> requestBasedSli;
        private @Nullable Output<Integer> rollingPeriodDays;
        private Output<String> service;
        private @Nullable Output<String> sloId;
        private @Nullable Output<SloWindowsBasedSliArgs> windowsBasedSli;

        public Builder() {
    	      // Empty
        }

        public Builder(SloArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basicSli = defaults.basicSli;
    	      this.calendarPeriod = defaults.calendarPeriod;
    	      this.displayName = defaults.displayName;
    	      this.goal = defaults.goal;
    	      this.project = defaults.project;
    	      this.requestBasedSli = defaults.requestBasedSli;
    	      this.rollingPeriodDays = defaults.rollingPeriodDays;
    	      this.service = defaults.service;
    	      this.sloId = defaults.sloId;
    	      this.windowsBasedSli = defaults.windowsBasedSli;
        }

        public Builder basicSli(@Nullable Output<SloBasicSliArgs> basicSli) {
            this.basicSli = basicSli;
            return this;
        }
        public Builder basicSli(@Nullable SloBasicSliArgs basicSli) {
            this.basicSli = Codegen.ofNullable(basicSli);
            return this;
        }
        public Builder calendarPeriod(@Nullable Output<String> calendarPeriod) {
            this.calendarPeriod = calendarPeriod;
            return this;
        }
        public Builder calendarPeriod(@Nullable String calendarPeriod) {
            this.calendarPeriod = Codegen.ofNullable(calendarPeriod);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder goal(Output<Double> goal) {
            this.goal = Objects.requireNonNull(goal);
            return this;
        }
        public Builder goal(Double goal) {
            this.goal = Output.of(Objects.requireNonNull(goal));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder requestBasedSli(@Nullable Output<SloRequestBasedSliArgs> requestBasedSli) {
            this.requestBasedSli = requestBasedSli;
            return this;
        }
        public Builder requestBasedSli(@Nullable SloRequestBasedSliArgs requestBasedSli) {
            this.requestBasedSli = Codegen.ofNullable(requestBasedSli);
            return this;
        }
        public Builder rollingPeriodDays(@Nullable Output<Integer> rollingPeriodDays) {
            this.rollingPeriodDays = rollingPeriodDays;
            return this;
        }
        public Builder rollingPeriodDays(@Nullable Integer rollingPeriodDays) {
            this.rollingPeriodDays = Codegen.ofNullable(rollingPeriodDays);
            return this;
        }
        public Builder service(Output<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public Builder service(String service) {
            this.service = Output.of(Objects.requireNonNull(service));
            return this;
        }
        public Builder sloId(@Nullable Output<String> sloId) {
            this.sloId = sloId;
            return this;
        }
        public Builder sloId(@Nullable String sloId) {
            this.sloId = Codegen.ofNullable(sloId);
            return this;
        }
        public Builder windowsBasedSli(@Nullable Output<SloWindowsBasedSliArgs> windowsBasedSli) {
            this.windowsBasedSli = windowsBasedSli;
            return this;
        }
        public Builder windowsBasedSli(@Nullable SloWindowsBasedSliArgs windowsBasedSli) {
            this.windowsBasedSli = Codegen.ofNullable(windowsBasedSli);
            return this;
        }        public SloArgs build() {
            return new SloArgs(basicSli, calendarPeriod, displayName, goal, project, requestBasedSli, rollingPeriodDays, service, sloId, windowsBasedSli);
        }
    }
}
