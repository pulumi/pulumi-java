// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.eventarc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerTransportPubsubArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerTransportPubsubArgs Empty = new TriggerTransportPubsubArgs();

    /**
     * - 
     * Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
     * 
     */
    @Import(name="subscription")
      private final @Nullable Output<String> subscription;

    public Output<String> subscription() {
        return this.subscription == null ? Codegen.empty() : this.subscription;
    }

    /**
     * Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
     * 
     */
    @Import(name="topic")
      private final @Nullable Output<String> topic;

    public Output<String> topic() {
        return this.topic == null ? Codegen.empty() : this.topic;
    }

    public TriggerTransportPubsubArgs(
        @Nullable Output<String> subscription,
        @Nullable Output<String> topic) {
        this.subscription = subscription;
        this.topic = topic;
    }

    private TriggerTransportPubsubArgs() {
        this.subscription = Codegen.empty();
        this.topic = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerTransportPubsubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> subscription;
        private @Nullable Output<String> topic;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerTransportPubsubArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.subscription = defaults.subscription;
    	      this.topic = defaults.topic;
        }

        public Builder subscription(@Nullable Output<String> subscription) {
            this.subscription = subscription;
            return this;
        }
        public Builder subscription(@Nullable String subscription) {
            this.subscription = Codegen.ofNullable(subscription);
            return this;
        }
        public Builder topic(@Nullable Output<String> topic) {
            this.topic = topic;
            return this;
        }
        public Builder topic(@Nullable String topic) {
            this.topic = Codegen.ofNullable(topic);
            return this;
        }        public TriggerTransportPubsubArgs build() {
            return new TriggerTransportPubsubArgs(subscription, topic);
        }
    }
}
