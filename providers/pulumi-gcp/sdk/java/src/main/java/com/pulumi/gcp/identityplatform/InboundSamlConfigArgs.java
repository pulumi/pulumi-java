// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.identityplatform.inputs.InboundSamlConfigIdpConfigArgs;
import com.pulumi.gcp.identityplatform.inputs.InboundSamlConfigSpConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InboundSamlConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InboundSamlConfigArgs Empty = new InboundSamlConfigArgs();

    /**
     * Human friendly display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * If this config allows users to sign in with the provider.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * SAML IdP configuration when the project acts as the relying party
     * Structure is documented below.
     * 
     */
    @Import(name="idpConfig", required=true)
    private Output<InboundSamlConfigIdpConfigArgs> idpConfig;

    public Output<InboundSamlConfigIdpConfigArgs> idpConfig() {
        return this.idpConfig;
    }

    /**
     * The name of the InboundSamlConfig resource. Must start with &#39;saml.&#39; and can only have alphanumeric characters,
     * hyphens, underscores or periods. The part after &#39;saml.&#39; must also start with a lowercase letter, end with an
     * alphanumeric character, and have at least 2 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * SAML SP (Service Provider) configuration when the project acts as the relying party to receive
     * and accept an authentication assertion issued by a SAML identity provider.
     * Structure is documented below.
     * 
     */
    @Import(name="spConfig", required=true)
    private Output<InboundSamlConfigSpConfigArgs> spConfig;

    public Output<InboundSamlConfigSpConfigArgs> spConfig() {
        return this.spConfig;
    }

    private InboundSamlConfigArgs() {}

    private InboundSamlConfigArgs(InboundSamlConfigArgs $) {
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.idpConfig = $.idpConfig;
        this.name = $.name;
        this.project = $.project;
        this.spConfig = $.spConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InboundSamlConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InboundSamlConfigArgs $;

        public Builder() {
            $ = new InboundSamlConfigArgs();
        }

        public Builder(InboundSamlConfigArgs defaults) {
            $ = new InboundSamlConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder idpConfig(Output<InboundSamlConfigIdpConfigArgs> idpConfig) {
            $.idpConfig = idpConfig;
            return this;
        }

        public Builder idpConfig(InboundSamlConfigIdpConfigArgs idpConfig) {
            return idpConfig(Output.of(idpConfig));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder spConfig(Output<InboundSamlConfigSpConfigArgs> spConfig) {
            $.spConfig = spConfig;
            return this;
        }

        public Builder spConfig(InboundSamlConfigSpConfigArgs spConfig) {
            return spConfig(Output.of(spConfig));
        }

        public InboundSamlConfigArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.idpConfig = Objects.requireNonNull($.idpConfig, "expected parameter 'idpConfig' to be non-null");
            $.spConfig = Objects.requireNonNull($.spConfig, "expected parameter 'spConfig' to be non-null");
            return $;
        }
    }

}
