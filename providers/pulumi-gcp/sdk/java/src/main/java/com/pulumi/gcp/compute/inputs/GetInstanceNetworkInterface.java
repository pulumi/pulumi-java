// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GetInstanceNetworkInterfaceAccessConfig;
import com.pulumi.gcp.compute.inputs.GetInstanceNetworkInterfaceAliasIpRange;
import com.pulumi.gcp.compute.inputs.GetInstanceNetworkInterfaceIpv6AccessConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInstanceNetworkInterface extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceNetworkInterface Empty = new GetInstanceNetworkInterface();

    /**
     * Access configurations, i.e. IPs via which this
     * instance can be accessed via the Internet. Structure documented below.
     * 
     */
    @Import(name="accessConfigs", required=true)
      private final List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs;

    public List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs() {
        return this.accessConfigs;
    }

    /**
     * An array of alias IP ranges for this network interface. Structure documented below.
     * 
     */
    @Import(name="aliasIpRanges", required=true)
      private final List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges;

    public List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges() {
        return this.aliasIpRanges;
    }

    @Import(name="ipv6AccessConfigs", required=true)
      private final List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;

    public List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }

    @Import(name="ipv6AccessType", required=true)
      private final String ipv6AccessType;

    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }

    /**
     * The name of the instance. One of `name` or `self_link` must be provided.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The name or self_link of the network attached to this interface.
     * 
     */
    @Import(name="network", required=true)
      private final String network;

    public String network() {
        return this.network;
    }

    /**
     * The private IP address assigned to the instance.
     * 
     */
    @Import(name="networkIp", required=true)
      private final String networkIp;

    public String networkIp() {
        return this.networkIp;
    }

    @Import(name="nicType", required=true)
      private final String nicType;

    public String nicType() {
        return this.nicType;
    }

    @Import(name="queueCount", required=true)
      private final Integer queueCount;

    public Integer queueCount() {
        return this.queueCount;
    }

    @Import(name="stackType", required=true)
      private final String stackType;

    public String stackType() {
        return this.stackType;
    }

    /**
     * The name or self_link of the subnetwork attached to this interface.
     * 
     */
    @Import(name="subnetwork", required=true)
      private final String subnetwork;

    public String subnetwork() {
        return this.subnetwork;
    }

    /**
     * The project in which the subnetwork belongs.
     * 
     */
    @Import(name="subnetworkProject", required=true)
      private final String subnetworkProject;

    public String subnetworkProject() {
        return this.subnetworkProject;
    }

    public GetInstanceNetworkInterface(
        List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs,
        List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges,
        List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs,
        String ipv6AccessType,
        String name,
        String network,
        String networkIp,
        String nicType,
        Integer queueCount,
        String stackType,
        String subnetwork,
        String subnetworkProject) {
        this.accessConfigs = Objects.requireNonNull(accessConfigs, "expected parameter 'accessConfigs' to be non-null");
        this.aliasIpRanges = Objects.requireNonNull(aliasIpRanges, "expected parameter 'aliasIpRanges' to be non-null");
        this.ipv6AccessConfigs = Objects.requireNonNull(ipv6AccessConfigs, "expected parameter 'ipv6AccessConfigs' to be non-null");
        this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType, "expected parameter 'ipv6AccessType' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.networkIp = Objects.requireNonNull(networkIp, "expected parameter 'networkIp' to be non-null");
        this.nicType = Objects.requireNonNull(nicType, "expected parameter 'nicType' to be non-null");
        this.queueCount = Objects.requireNonNull(queueCount, "expected parameter 'queueCount' to be non-null");
        this.stackType = Objects.requireNonNull(stackType, "expected parameter 'stackType' to be non-null");
        this.subnetwork = Objects.requireNonNull(subnetwork, "expected parameter 'subnetwork' to be non-null");
        this.subnetworkProject = Objects.requireNonNull(subnetworkProject, "expected parameter 'subnetworkProject' to be non-null");
    }

    private GetInstanceNetworkInterface() {
        this.accessConfigs = List.of();
        this.aliasIpRanges = List.of();
        this.ipv6AccessConfigs = List.of();
        this.ipv6AccessType = null;
        this.name = null;
        this.network = null;
        this.networkIp = null;
        this.nicType = null;
        this.queueCount = null;
        this.stackType = null;
        this.subnetwork = null;
        this.subnetworkProject = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceNetworkInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs;
        private List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges;
        private List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
        private String ipv6AccessType;
        private String name;
        private String network;
        private String networkIp;
        private String nicType;
        private Integer queueCount;
        private String stackType;
        private String subnetwork;
        private String subnetworkProject;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkIp = defaults.networkIp;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
    	      this.subnetworkProject = defaults.subnetworkProject;
        }

        public Builder accessConfigs(List<GetInstanceNetworkInterfaceAccessConfig> accessConfigs) {
            this.accessConfigs = Objects.requireNonNull(accessConfigs);
            return this;
        }
        public Builder accessConfigs(GetInstanceNetworkInterfaceAccessConfig... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }
        public Builder aliasIpRanges(List<GetInstanceNetworkInterfaceAliasIpRange> aliasIpRanges) {
            this.aliasIpRanges = Objects.requireNonNull(aliasIpRanges);
            return this;
        }
        public Builder aliasIpRanges(GetInstanceNetworkInterfaceAliasIpRange... aliasIpRanges) {
            return aliasIpRanges(List.of(aliasIpRanges));
        }
        public Builder ipv6AccessConfigs(List<GetInstanceNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs) {
            this.ipv6AccessConfigs = Objects.requireNonNull(ipv6AccessConfigs);
            return this;
        }
        public Builder ipv6AccessConfigs(GetInstanceNetworkInterfaceIpv6AccessConfig... ipv6AccessConfigs) {
            return ipv6AccessConfigs(List.of(ipv6AccessConfigs));
        }
        public Builder ipv6AccessType(String ipv6AccessType) {
            this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder networkIp(String networkIp) {
            this.networkIp = Objects.requireNonNull(networkIp);
            return this;
        }
        public Builder nicType(String nicType) {
            this.nicType = Objects.requireNonNull(nicType);
            return this;
        }
        public Builder queueCount(Integer queueCount) {
            this.queueCount = Objects.requireNonNull(queueCount);
            return this;
        }
        public Builder stackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }
        public Builder subnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }
        public Builder subnetworkProject(String subnetworkProject) {
            this.subnetworkProject = Objects.requireNonNull(subnetworkProject);
            return this;
        }        public GetInstanceNetworkInterface build() {
            return new GetInstanceNetworkInterface(accessConfigs, aliasIpRanges, ipv6AccessConfigs, ipv6AccessType, name, network, networkIp, nicType, queueCount, stackType, subnetwork, subnetworkProject);
        }
    }
}
