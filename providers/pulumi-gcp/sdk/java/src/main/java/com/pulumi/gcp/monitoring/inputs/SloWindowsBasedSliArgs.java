// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdArgs;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricMeanInRangeArgs;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricSumInRangeArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SloWindowsBasedSliArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloWindowsBasedSliArgs Empty = new SloWindowsBasedSliArgs();

    /**
     * A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
     * with ValueType = BOOL. The window is good if any true values
     * appear in the window. One of `good_bad_metric_filter`,
     * `good_total_ratio_threshold`, `metric_mean_in_range`,
     * `metric_sum_in_range` must be set for `windows_based_sli`.
     * 
     */
    @Import(name="goodBadMetricFilter")
      private final @Nullable Output<String> goodBadMetricFilter;

    public Output<String> goodBadMetricFilter() {
        return this.goodBadMetricFilter == null ? Codegen.empty() : this.goodBadMetricFilter;
    }

    /**
     * Criterion that describes a window as good if its performance is
     * high enough. One of `good_bad_metric_filter`,
     * `good_total_ratio_threshold`, `metric_mean_in_range`,
     * `metric_sum_in_range` must be set for `windows_based_sli`.
     * Structure is documented below.
     * 
     */
    @Import(name="goodTotalRatioThreshold")
      private final @Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdArgs> goodTotalRatioThreshold;

    public Output<SloWindowsBasedSliGoodTotalRatioThresholdArgs> goodTotalRatioThreshold() {
        return this.goodTotalRatioThreshold == null ? Codegen.empty() : this.goodTotalRatioThreshold;
    }

    /**
     * Criterion that describes a window as good if the metric&#39;s value
     * is in a good range, *averaged* across returned streams.
     * One of `good_bad_metric_filter`,
     * `good_total_ratio_threshold`, `metric_mean_in_range`,
     * `metric_sum_in_range` must be set for `windows_based_sli`.
     * Average value X of `time_series` should satisfy
     * `range.min &lt;= X &lt;= range.max` for a good window.
     * Structure is documented below.
     * 
     */
    @Import(name="metricMeanInRange")
      private final @Nullable Output<SloWindowsBasedSliMetricMeanInRangeArgs> metricMeanInRange;

    public Output<SloWindowsBasedSliMetricMeanInRangeArgs> metricMeanInRange() {
        return this.metricMeanInRange == null ? Codegen.empty() : this.metricMeanInRange;
    }

    /**
     * Criterion that describes a window as good if the metric&#39;s value
     * is in a good range, *summed* across returned streams.
     * Summed value `X` of `time_series` should satisfy
     * `range.min &lt;= X &lt;= range.max` for a good window.
     * One of `good_bad_metric_filter`,
     * `good_total_ratio_threshold`, `metric_mean_in_range`,
     * `metric_sum_in_range` must be set for `windows_based_sli`.
     * Structure is documented below.
     * 
     */
    @Import(name="metricSumInRange")
      private final @Nullable Output<SloWindowsBasedSliMetricSumInRangeArgs> metricSumInRange;

    public Output<SloWindowsBasedSliMetricSumInRangeArgs> metricSumInRange() {
        return this.metricSumInRange == null ? Codegen.empty() : this.metricSumInRange;
    }

    /**
     * Duration over which window quality is evaluated, given as a
     * duration string &#34;{X}s&#34; representing X seconds. Must be an
     * integer fraction of a day and at least 60s.
     * 
     */
    @Import(name="windowPeriod")
      private final @Nullable Output<String> windowPeriod;

    public Output<String> windowPeriod() {
        return this.windowPeriod == null ? Codegen.empty() : this.windowPeriod;
    }

    public SloWindowsBasedSliArgs(
        @Nullable Output<String> goodBadMetricFilter,
        @Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdArgs> goodTotalRatioThreshold,
        @Nullable Output<SloWindowsBasedSliMetricMeanInRangeArgs> metricMeanInRange,
        @Nullable Output<SloWindowsBasedSliMetricSumInRangeArgs> metricSumInRange,
        @Nullable Output<String> windowPeriod) {
        this.goodBadMetricFilter = goodBadMetricFilter;
        this.goodTotalRatioThreshold = goodTotalRatioThreshold;
        this.metricMeanInRange = metricMeanInRange;
        this.metricSumInRange = metricSumInRange;
        this.windowPeriod = windowPeriod;
    }

    private SloWindowsBasedSliArgs() {
        this.goodBadMetricFilter = Codegen.empty();
        this.goodTotalRatioThreshold = Codegen.empty();
        this.metricMeanInRange = Codegen.empty();
        this.metricSumInRange = Codegen.empty();
        this.windowPeriod = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloWindowsBasedSliArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> goodBadMetricFilter;
        private @Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdArgs> goodTotalRatioThreshold;
        private @Nullable Output<SloWindowsBasedSliMetricMeanInRangeArgs> metricMeanInRange;
        private @Nullable Output<SloWindowsBasedSliMetricSumInRangeArgs> metricSumInRange;
        private @Nullable Output<String> windowPeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(SloWindowsBasedSliArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.goodBadMetricFilter = defaults.goodBadMetricFilter;
    	      this.goodTotalRatioThreshold = defaults.goodTotalRatioThreshold;
    	      this.metricMeanInRange = defaults.metricMeanInRange;
    	      this.metricSumInRange = defaults.metricSumInRange;
    	      this.windowPeriod = defaults.windowPeriod;
        }

        public Builder goodBadMetricFilter(@Nullable Output<String> goodBadMetricFilter) {
            this.goodBadMetricFilter = goodBadMetricFilter;
            return this;
        }
        public Builder goodBadMetricFilter(@Nullable String goodBadMetricFilter) {
            this.goodBadMetricFilter = Codegen.ofNullable(goodBadMetricFilter);
            return this;
        }
        public Builder goodTotalRatioThreshold(@Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdArgs> goodTotalRatioThreshold) {
            this.goodTotalRatioThreshold = goodTotalRatioThreshold;
            return this;
        }
        public Builder goodTotalRatioThreshold(@Nullable SloWindowsBasedSliGoodTotalRatioThresholdArgs goodTotalRatioThreshold) {
            this.goodTotalRatioThreshold = Codegen.ofNullable(goodTotalRatioThreshold);
            return this;
        }
        public Builder metricMeanInRange(@Nullable Output<SloWindowsBasedSliMetricMeanInRangeArgs> metricMeanInRange) {
            this.metricMeanInRange = metricMeanInRange;
            return this;
        }
        public Builder metricMeanInRange(@Nullable SloWindowsBasedSliMetricMeanInRangeArgs metricMeanInRange) {
            this.metricMeanInRange = Codegen.ofNullable(metricMeanInRange);
            return this;
        }
        public Builder metricSumInRange(@Nullable Output<SloWindowsBasedSliMetricSumInRangeArgs> metricSumInRange) {
            this.metricSumInRange = metricSumInRange;
            return this;
        }
        public Builder metricSumInRange(@Nullable SloWindowsBasedSliMetricSumInRangeArgs metricSumInRange) {
            this.metricSumInRange = Codegen.ofNullable(metricSumInRange);
            return this;
        }
        public Builder windowPeriod(@Nullable Output<String> windowPeriod) {
            this.windowPeriod = windowPeriod;
            return this;
        }
        public Builder windowPeriod(@Nullable String windowPeriod) {
            this.windowPeriod = Codegen.ofNullable(windowPeriod);
            return this;
        }        public SloWindowsBasedSliArgs build() {
            return new SloWindowsBasedSliArgs(goodBadMetricFilter, goodTotalRatioThreshold, metricMeanInRange, metricSumInRange, windowPeriod);
        }
    }
}
