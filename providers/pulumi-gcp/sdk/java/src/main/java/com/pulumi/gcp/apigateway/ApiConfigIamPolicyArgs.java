// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApiConfigIamPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiConfigIamPolicyArgs Empty = new ApiConfigIamPolicyArgs();

    /**
     * The API to attach the config to.
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="api", required=true)
      private final Output<String> api;

    public Output<String> api() {
        return this.api;
    }

    @Import(name="apiConfig", required=true)
      private final Output<String> apiConfig;

    public Output<String> apiConfig() {
        return this.apiConfig;
    }

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Import(name="policyData", required=true)
      private final Output<String> policyData;

    public Output<String> policyData() {
        return this.policyData;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    public ApiConfigIamPolicyArgs(
        Output<String> api,
        Output<String> apiConfig,
        Output<String> policyData,
        @Nullable Output<String> project) {
        this.api = Objects.requireNonNull(api, "expected parameter 'api' to be non-null");
        this.apiConfig = Objects.requireNonNull(apiConfig, "expected parameter 'apiConfig' to be non-null");
        this.policyData = Objects.requireNonNull(policyData, "expected parameter 'policyData' to be non-null");
        this.project = project;
    }

    private ApiConfigIamPolicyArgs() {
        this.api = Codegen.empty();
        this.apiConfig = Codegen.empty();
        this.policyData = Codegen.empty();
        this.project = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiConfigIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> api;
        private Output<String> apiConfig;
        private Output<String> policyData;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(ApiConfigIamPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.api = defaults.api;
    	      this.apiConfig = defaults.apiConfig;
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
        }

        public Builder api(Output<String> api) {
            this.api = Objects.requireNonNull(api);
            return this;
        }
        public Builder api(String api) {
            this.api = Output.of(Objects.requireNonNull(api));
            return this;
        }
        public Builder apiConfig(Output<String> apiConfig) {
            this.apiConfig = Objects.requireNonNull(apiConfig);
            return this;
        }
        public Builder apiConfig(String apiConfig) {
            this.apiConfig = Output.of(Objects.requireNonNull(apiConfig));
            return this;
        }
        public Builder policyData(Output<String> policyData) {
            this.policyData = Objects.requireNonNull(policyData);
            return this;
        }
        public Builder policyData(String policyData) {
            this.policyData = Output.of(Objects.requireNonNull(policyData));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }        public ApiConfigIamPolicyArgs build() {
            return new ApiConfigIamPolicyArgs(api, apiConfig, policyData, project);
        }
    }
}
