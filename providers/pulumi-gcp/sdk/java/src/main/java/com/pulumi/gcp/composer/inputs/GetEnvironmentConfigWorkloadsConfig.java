// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.composer.inputs.GetEnvironmentConfigWorkloadsConfigScheduler;
import com.pulumi.gcp.composer.inputs.GetEnvironmentConfigWorkloadsConfigWebServer;
import com.pulumi.gcp.composer.inputs.GetEnvironmentConfigWorkloadsConfigWorker;
import java.util.List;
import java.util.Objects;


public final class GetEnvironmentConfigWorkloadsConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetEnvironmentConfigWorkloadsConfig Empty = new GetEnvironmentConfigWorkloadsConfig();

    @Import(name="schedulers", required=true)
      private final List<GetEnvironmentConfigWorkloadsConfigScheduler> schedulers;

    public List<GetEnvironmentConfigWorkloadsConfigScheduler> schedulers() {
        return this.schedulers;
    }

    @Import(name="webServers", required=true)
      private final List<GetEnvironmentConfigWorkloadsConfigWebServer> webServers;

    public List<GetEnvironmentConfigWorkloadsConfigWebServer> webServers() {
        return this.webServers;
    }

    @Import(name="workers", required=true)
      private final List<GetEnvironmentConfigWorkloadsConfigWorker> workers;

    public List<GetEnvironmentConfigWorkloadsConfigWorker> workers() {
        return this.workers;
    }

    public GetEnvironmentConfigWorkloadsConfig(
        List<GetEnvironmentConfigWorkloadsConfigScheduler> schedulers,
        List<GetEnvironmentConfigWorkloadsConfigWebServer> webServers,
        List<GetEnvironmentConfigWorkloadsConfigWorker> workers) {
        this.schedulers = Objects.requireNonNull(schedulers, "expected parameter 'schedulers' to be non-null");
        this.webServers = Objects.requireNonNull(webServers, "expected parameter 'webServers' to be non-null");
        this.workers = Objects.requireNonNull(workers, "expected parameter 'workers' to be non-null");
    }

    private GetEnvironmentConfigWorkloadsConfig() {
        this.schedulers = List.of();
        this.webServers = List.of();
        this.workers = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfigWorkloadsConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetEnvironmentConfigWorkloadsConfigScheduler> schedulers;
        private List<GetEnvironmentConfigWorkloadsConfigWebServer> webServers;
        private List<GetEnvironmentConfigWorkloadsConfigWorker> workers;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEnvironmentConfigWorkloadsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.schedulers = defaults.schedulers;
    	      this.webServers = defaults.webServers;
    	      this.workers = defaults.workers;
        }

        public Builder schedulers(List<GetEnvironmentConfigWorkloadsConfigScheduler> schedulers) {
            this.schedulers = Objects.requireNonNull(schedulers);
            return this;
        }
        public Builder schedulers(GetEnvironmentConfigWorkloadsConfigScheduler... schedulers) {
            return schedulers(List.of(schedulers));
        }
        public Builder webServers(List<GetEnvironmentConfigWorkloadsConfigWebServer> webServers) {
            this.webServers = Objects.requireNonNull(webServers);
            return this;
        }
        public Builder webServers(GetEnvironmentConfigWorkloadsConfigWebServer... webServers) {
            return webServers(List.of(webServers));
        }
        public Builder workers(List<GetEnvironmentConfigWorkloadsConfigWorker> workers) {
            this.workers = Objects.requireNonNull(workers);
            return this;
        }
        public Builder workers(GetEnvironmentConfigWorkloadsConfigWorker... workers) {
            return workers(List.of(workers));
        }        public GetEnvironmentConfigWorkloadsConfig build() {
            return new GetEnvironmentConfigWorkloadsConfig(schedulers, webServers, workers);
        }
    }
}
