// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.deploymentmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.deploymentmanager.inputs.DeploymentTargetConfigGetArgs;
import com.pulumi.gcp.deploymentmanager.inputs.DeploymentTargetImportGetArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentTargetGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentTargetGetArgs Empty = new DeploymentTargetGetArgs();

    /**
     * The root configuration file to use for this deployment.
     * Structure is documented below.
     * 
     */
    @Import(name="config", required=true)
    private Output<DeploymentTargetConfigGetArgs> config;

    public Output<DeploymentTargetConfigGetArgs> config() {
        return this.config;
    }

    /**
     * Specifies import files for this configuration. This can be
     * used to import templates or other files. For example, you might
     * import a text file in order to use the file in a template.
     * Structure is documented below.
     * 
     */
    @Import(name="imports")
    private @Nullable Output<List<DeploymentTargetImportGetArgs>> imports;

    public Optional<Output<List<DeploymentTargetImportGetArgs>>> imports() {
        return Optional.ofNullable(this.imports);
    }

    private DeploymentTargetGetArgs() {}

    private DeploymentTargetGetArgs(DeploymentTargetGetArgs $) {
        this.config = $.config;
        this.imports = $.imports;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentTargetGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentTargetGetArgs $;

        public Builder() {
            $ = new DeploymentTargetGetArgs();
        }

        public Builder(DeploymentTargetGetArgs defaults) {
            $ = new DeploymentTargetGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder config(Output<DeploymentTargetConfigGetArgs> config) {
            $.config = config;
            return this;
        }

        public Builder config(DeploymentTargetConfigGetArgs config) {
            return config(Output.of(config));
        }

        public Builder imports(@Nullable Output<List<DeploymentTargetImportGetArgs>> imports) {
            $.imports = imports;
            return this;
        }

        public Builder imports(List<DeploymentTargetImportGetArgs> imports) {
            return imports(Output.of(imports));
        }

        public Builder imports(DeploymentTargetImportGetArgs... imports) {
            return imports(List.of(imports));
        }

        public DeploymentTargetGetArgs build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            return $;
        }
    }

}
