// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecContainer;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecVolume;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetServiceTemplateSpec extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceTemplateSpec Empty = new GetServiceTemplateSpec();

    @Import(name="containerConcurrency", required=true)
    private Integer containerConcurrency;

    public Integer containerConcurrency() {
        return this.containerConcurrency;
    }

    @Import(name="containers", required=true)
    private List<GetServiceTemplateSpecContainer> containers;

    public List<GetServiceTemplateSpecContainer> containers() {
        return this.containers;
    }

    @Import(name="serviceAccountName", required=true)
    private String serviceAccountName;

    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    @Import(name="servingState", required=true)
    private String servingState;

    public String servingState() {
        return this.servingState;
    }

    @Import(name="timeoutSeconds", required=true)
    private Integer timeoutSeconds;

    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }

    @Import(name="volumes", required=true)
    private List<GetServiceTemplateSpecVolume> volumes;

    public List<GetServiceTemplateSpecVolume> volumes() {
        return this.volumes;
    }

    private GetServiceTemplateSpec() {}

    private GetServiceTemplateSpec(GetServiceTemplateSpec $) {
        this.containerConcurrency = $.containerConcurrency;
        this.containers = $.containers;
        this.serviceAccountName = $.serviceAccountName;
        this.servingState = $.servingState;
        this.timeoutSeconds = $.timeoutSeconds;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceTemplateSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceTemplateSpec $;

        public Builder() {
            $ = new GetServiceTemplateSpec();
        }

        public Builder(GetServiceTemplateSpec defaults) {
            $ = new GetServiceTemplateSpec(Objects.requireNonNull(defaults));
        }

        public Builder containerConcurrency(Integer containerConcurrency) {
            $.containerConcurrency = containerConcurrency;
            return this;
        }

        public Builder containers(List<GetServiceTemplateSpecContainer> containers) {
            $.containers = containers;
            return this;
        }

        public Builder containers(GetServiceTemplateSpecContainer... containers) {
            return containers(List.of(containers));
        }

        public Builder serviceAccountName(String serviceAccountName) {
            $.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder servingState(String servingState) {
            $.servingState = servingState;
            return this;
        }

        public Builder timeoutSeconds(Integer timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder volumes(List<GetServiceTemplateSpecVolume> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(GetServiceTemplateSpecVolume... volumes) {
            return volumes(List.of(volumes));
        }

        public GetServiceTemplateSpec build() {
            $.containerConcurrency = Objects.requireNonNull($.containerConcurrency, "expected parameter 'containerConcurrency' to be non-null");
            $.containers = Objects.requireNonNull($.containers, "expected parameter 'containers' to be non-null");
            $.serviceAccountName = Objects.requireNonNull($.serviceAccountName, "expected parameter 'serviceAccountName' to be non-null");
            $.servingState = Objects.requireNonNull($.servingState, "expected parameter 'servingState' to be non-null");
            $.timeoutSeconds = Objects.requireNonNull($.timeoutSeconds, "expected parameter 'timeoutSeconds' to be non-null");
            $.volumes = Objects.requireNonNull($.volumes, "expected parameter 'volumes' to be non-null");
            return $;
        }
    }

}
