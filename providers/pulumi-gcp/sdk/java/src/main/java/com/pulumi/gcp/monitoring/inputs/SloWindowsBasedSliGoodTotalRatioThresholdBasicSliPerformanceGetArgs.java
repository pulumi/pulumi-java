// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityGetArgs;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs Empty = new SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs();

    /**
     * Availability based SLI, dervied from count of requests made to this service that return successfully.
     * Structure is documented below.
     * 
     */
    @Import(name="availability")
    private @Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityGetArgs> availability;

    public Optional<Output<SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityGetArgs>> availability() {
        return Optional.ofNullable(this.availability);
    }

    /**
     * Parameters for a latency threshold SLI.
     * Structure is documented below.
     * 
     */
    @Import(name="latency")
    private @Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyGetArgs> latency;

    public Optional<Output<SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyGetArgs>> latency() {
        return Optional.ofNullable(this.latency);
    }

    /**
     * An optional set of locations to which this SLI is relevant.
     * Telemetry from other locations will not be used to calculate
     * performance for this SLI. If omitted, this SLI applies to all
     * locations in which the Service has activity. For service types
     * that don&#39;t support breaking down by location, setting this
     * field will result in an error.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<String>> locations;

    public Optional<Output<List<String>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * An optional set of RPCs to which this SLI is relevant.
     * Telemetry from other methods will not be used to calculate
     * performance for this SLI. If omitted, this SLI applies to all
     * the Service&#39;s methods. For service types that don&#39;t support
     * breaking down by method, setting this field will result in an
     * error.
     * 
     */
    @Import(name="methods")
    private @Nullable Output<List<String>> methods;

    public Optional<Output<List<String>>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * The set of API versions to which this SLI is relevant.
     * Telemetry from other API versions will not be used to
     * calculate performance for this SLI. If omitted,
     * this SLI applies to all API versions. For service types
     * that don&#39;t support breaking down by version, setting this
     * field will result in an error.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<String>> versions;

    public Optional<Output<List<String>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs() {}

    private SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs(SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs $) {
        this.availability = $.availability;
        this.latency = $.latency;
        this.locations = $.locations;
        this.methods = $.methods;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs $;

        public Builder() {
            $ = new SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs();
        }

        public Builder(SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs defaults) {
            $ = new SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder availability(@Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityGetArgs> availability) {
            $.availability = availability;
            return this;
        }

        public Builder availability(SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityGetArgs availability) {
            return availability(Output.of(availability));
        }

        public Builder latency(@Nullable Output<SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyGetArgs> latency) {
            $.latency = latency;
            return this;
        }

        public Builder latency(SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyGetArgs latency) {
            return latency(Output.of(latency));
        }

        public Builder locations(@Nullable Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        public Builder methods(@Nullable Output<List<String>> methods) {
            $.methods = methods;
            return this;
        }

        public Builder methods(List<String> methods) {
            return methods(Output.of(methods));
        }

        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        public Builder versions(@Nullable Output<List<String>> versions) {
            $.versions = versions;
            return this;
        }

        public Builder versions(List<String> versions) {
            return versions(Output.of(versions));
        }

        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public SloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceGetArgs build() {
            return $;
        }
    }

}
