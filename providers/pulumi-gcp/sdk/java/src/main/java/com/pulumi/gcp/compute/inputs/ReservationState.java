// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.ReservationShareSettingsGetArgs;
import com.pulumi.gcp.compute.inputs.ReservationSpecificReservationGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservationState extends com.pulumi.resources.ResourceArgs {

    public static final ReservationState Empty = new ReservationState();

    /**
     * Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
     * 
     */
    @Import(name="commitment")
    private @Nullable Output<String> commitment;

    public Optional<Output<String>> commitment() {
        return Optional.ofNullable(this.commitment);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * The share setting for reservations.
     * Structure is documented below.
     * 
     */
    @Import(name="shareSettings")
    private @Nullable Output<ReservationShareSettingsGetArgs> shareSettings;

    public Optional<Output<ReservationShareSettingsGetArgs>> shareSettings() {
        return Optional.ofNullable(this.shareSettings);
    }

    /**
     * Reservation for instances with specific machine shapes.
     * Structure is documented below.
     * 
     */
    @Import(name="specificReservation")
    private @Nullable Output<ReservationSpecificReservationGetArgs> specificReservation;

    public Optional<Output<ReservationSpecificReservationGetArgs>> specificReservation() {
        return Optional.ofNullable(this.specificReservation);
    }

    /**
     * When set to true, only VMs that target this reservation by name can
     * consume this reservation. Otherwise, it can be consumed by VMs with
     * affinity for any reservation. Defaults to false.
     * 
     */
    @Import(name="specificReservationRequired")
    private @Nullable Output<Boolean> specificReservationRequired;

    public Optional<Output<Boolean>> specificReservationRequired() {
        return Optional.ofNullable(this.specificReservationRequired);
    }

    /**
     * The status of the reservation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The zone where the reservation is made.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private ReservationState() {}

    private ReservationState(ReservationState $) {
        this.commitment = $.commitment;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.name = $.name;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.shareSettings = $.shareSettings;
        this.specificReservation = $.specificReservation;
        this.specificReservationRequired = $.specificReservationRequired;
        this.status = $.status;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservationState $;

        public Builder() {
            $ = new ReservationState();
        }

        public Builder(ReservationState defaults) {
            $ = new ReservationState(Objects.requireNonNull(defaults));
        }

        public Builder commitment(@Nullable Output<String> commitment) {
            $.commitment = commitment;
            return this;
        }

        public Builder commitment(String commitment) {
            return commitment(Output.of(commitment));
        }

        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder shareSettings(@Nullable Output<ReservationShareSettingsGetArgs> shareSettings) {
            $.shareSettings = shareSettings;
            return this;
        }

        public Builder shareSettings(ReservationShareSettingsGetArgs shareSettings) {
            return shareSettings(Output.of(shareSettings));
        }

        public Builder specificReservation(@Nullable Output<ReservationSpecificReservationGetArgs> specificReservation) {
            $.specificReservation = specificReservation;
            return this;
        }

        public Builder specificReservation(ReservationSpecificReservationGetArgs specificReservation) {
            return specificReservation(Output.of(specificReservation));
        }

        public Builder specificReservationRequired(@Nullable Output<Boolean> specificReservationRequired) {
            $.specificReservationRequired = specificReservationRequired;
            return this;
        }

        public Builder specificReservationRequired(Boolean specificReservationRequired) {
            return specificReservationRequired(Output.of(specificReservationRequired));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ReservationState build() {
            return $;
        }
    }

}
