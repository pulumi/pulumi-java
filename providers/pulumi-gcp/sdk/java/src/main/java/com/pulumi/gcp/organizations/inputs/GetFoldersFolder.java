// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetFoldersFolder extends com.pulumi.resources.InvokeArgs {

    public static final GetFoldersFolder Empty = new GetFoldersFolder();

    /**
     * The timestamp of when the folder was created
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return The timestamp of when the folder was created
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * The timestamp of when the folder was requested to be deleted (if applicable)
     * 
     */
    @Import(name="deleteTime", required=true)
    private String deleteTime;

    /**
     * @return The timestamp of when the folder was requested to be deleted (if applicable)
     * 
     */
    public String deleteTime() {
        return this.deleteTime;
    }

    /**
     * The display name of the folder
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return The display name of the folder
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Entity tag identifier of the folder
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return Entity tag identifier of the folder
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * The id of the folder
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The id of the folder
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The parent id of the folder
     * 
     */
    @Import(name="parent", required=true)
    private String parent;

    /**
     * @return The parent id of the folder
     * 
     */
    public String parent() {
        return this.parent;
    }

    /**
     * The lifecycle state of the folder
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return The lifecycle state of the folder
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * The timestamp of when the folder was last modified
     * 
     */
    @Import(name="updateTime", required=true)
    private String updateTime;

    /**
     * @return The timestamp of when the folder was last modified
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    private GetFoldersFolder() {}

    private GetFoldersFolder(GetFoldersFolder $) {
        this.createTime = $.createTime;
        this.deleteTime = $.deleteTime;
        this.displayName = $.displayName;
        this.etag = $.etag;
        this.name = $.name;
        this.parent = $.parent;
        this.state = $.state;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFoldersFolder defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFoldersFolder $;

        public Builder() {
            $ = new GetFoldersFolder();
        }

        public Builder(GetFoldersFolder defaults) {
            $ = new GetFoldersFolder(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The timestamp of when the folder was created
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param deleteTime The timestamp of when the folder was requested to be deleted (if applicable)
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(String deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        /**
         * @param displayName The display name of the folder
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param etag Entity tag identifier of the folder
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param name The id of the folder
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param parent The parent id of the folder
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param state The lifecycle state of the folder
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param updateTime The timestamp of when the folder was last modified
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public GetFoldersFolder build() {
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.deleteTime = Objects.requireNonNull($.deleteTime, "expected parameter 'deleteTime' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.parent = Objects.requireNonNull($.parent, "expected parameter 'parent' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
