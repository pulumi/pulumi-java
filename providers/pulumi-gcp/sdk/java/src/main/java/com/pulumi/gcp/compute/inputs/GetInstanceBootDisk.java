// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GetInstanceBootDiskInitializeParam;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInstanceBootDisk extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceBootDisk Empty = new GetInstanceBootDisk();

    /**
     * Whether the disk will be auto-deleted when the instance is deleted.
     * 
     */
    @Import(name="autoDelete", required=true)
    private Boolean autoDelete;

    /**
     * @return Whether the disk will be auto-deleted when the instance is deleted.
     * 
     */
    public Boolean autoDelete() {
        return this.autoDelete;
    }

    /**
     * Name with which the attached disk is accessible
     * under `/dev/disk/by-id/`
     * 
     */
    @Import(name="deviceName", required=true)
    private String deviceName;

    /**
     * @return Name with which the attached disk is accessible
     * under `/dev/disk/by-id/`
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }

    @Import(name="diskEncryptionKeyRaw", required=true)
    private String diskEncryptionKeyRaw;

    public String diskEncryptionKeyRaw() {
        return this.diskEncryptionKeyRaw;
    }

    @Import(name="diskEncryptionKeySha256", required=true)
    private String diskEncryptionKeySha256;

    public String diskEncryptionKeySha256() {
        return this.diskEncryptionKeySha256;
    }

    /**
     * Parameters with which a disk was created alongside the instance.
     * Structure is documented below.
     * 
     */
    @Import(name="initializeParams", required=true)
    private List<GetInstanceBootDiskInitializeParam> initializeParams;

    /**
     * @return Parameters with which a disk was created alongside the instance.
     * Structure is documented below.
     * 
     */
    public List<GetInstanceBootDiskInitializeParam> initializeParams() {
        return this.initializeParams;
    }

    @Import(name="kmsKeySelfLink", required=true)
    private String kmsKeySelfLink;

    public String kmsKeySelfLink() {
        return this.kmsKeySelfLink;
    }

    /**
     * Read/write mode for the disk. One of `&#34;READ_ONLY&#34;` or `&#34;READ_WRITE&#34;`.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    /**
     * @return Read/write mode for the disk. One of `&#34;READ_ONLY&#34;` or `&#34;READ_WRITE&#34;`.
     * 
     */
    public String mode() {
        return this.mode;
    }

    /**
     * The name or self_link of the disk attached to this instance.
     * 
     */
    @Import(name="source", required=true)
    private String source;

    /**
     * @return The name or self_link of the disk attached to this instance.
     * 
     */
    public String source() {
        return this.source;
    }

    private GetInstanceBootDisk() {}

    private GetInstanceBootDisk(GetInstanceBootDisk $) {
        this.autoDelete = $.autoDelete;
        this.deviceName = $.deviceName;
        this.diskEncryptionKeyRaw = $.diskEncryptionKeyRaw;
        this.diskEncryptionKeySha256 = $.diskEncryptionKeySha256;
        this.initializeParams = $.initializeParams;
        this.kmsKeySelfLink = $.kmsKeySelfLink;
        this.mode = $.mode;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceBootDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceBootDisk $;

        public Builder() {
            $ = new GetInstanceBootDisk();
        }

        public Builder(GetInstanceBootDisk defaults) {
            $ = new GetInstanceBootDisk(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoDelete Whether the disk will be auto-deleted when the instance is deleted.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(Boolean autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        /**
         * @param deviceName Name with which the attached disk is accessible
         * under `/dev/disk/by-id/`
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        public Builder diskEncryptionKeyRaw(String diskEncryptionKeyRaw) {
            $.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            return this;
        }

        public Builder diskEncryptionKeySha256(String diskEncryptionKeySha256) {
            $.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            return this;
        }

        /**
         * @param initializeParams Parameters with which a disk was created alongside the instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder initializeParams(List<GetInstanceBootDiskInitializeParam> initializeParams) {
            $.initializeParams = initializeParams;
            return this;
        }

        /**
         * @param initializeParams Parameters with which a disk was created alongside the instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder initializeParams(GetInstanceBootDiskInitializeParam... initializeParams) {
            return initializeParams(List.of(initializeParams));
        }

        public Builder kmsKeySelfLink(String kmsKeySelfLink) {
            $.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }

        /**
         * @param mode Read/write mode for the disk. One of `&#34;READ_ONLY&#34;` or `&#34;READ_WRITE&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param source The name or self_link of the disk attached to this instance.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public GetInstanceBootDisk build() {
            $.autoDelete = Objects.requireNonNull($.autoDelete, "expected parameter 'autoDelete' to be non-null");
            $.deviceName = Objects.requireNonNull($.deviceName, "expected parameter 'deviceName' to be non-null");
            $.diskEncryptionKeyRaw = Objects.requireNonNull($.diskEncryptionKeyRaw, "expected parameter 'diskEncryptionKeyRaw' to be non-null");
            $.diskEncryptionKeySha256 = Objects.requireNonNull($.diskEncryptionKeySha256, "expected parameter 'diskEncryptionKeySha256' to be non-null");
            $.initializeParams = Objects.requireNonNull($.initializeParams, "expected parameter 'initializeParams' to be non-null");
            $.kmsKeySelfLink = Objects.requireNonNull($.kmsKeySelfLink, "expected parameter 'kmsKeySelfLink' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
