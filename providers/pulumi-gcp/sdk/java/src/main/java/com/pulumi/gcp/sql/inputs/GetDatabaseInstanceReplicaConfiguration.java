// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetDatabaseInstanceReplicaConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseInstanceReplicaConfiguration Empty = new GetDatabaseInstanceReplicaConfiguration();

    @Import(name="caCertificate", required=true)
    private String caCertificate;

    public String caCertificate() {
        return this.caCertificate;
    }

    @Import(name="clientCertificate", required=true)
    private String clientCertificate;

    public String clientCertificate() {
        return this.clientCertificate;
    }

    @Import(name="clientKey", required=true)
    private String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    @Import(name="connectRetryInterval", required=true)
    private Integer connectRetryInterval;

    public Integer connectRetryInterval() {
        return this.connectRetryInterval;
    }

    @Import(name="dumpFilePath", required=true)
    private String dumpFilePath;

    public String dumpFilePath() {
        return this.dumpFilePath;
    }

    @Import(name="failoverTarget", required=true)
    private Boolean failoverTarget;

    public Boolean failoverTarget() {
        return this.failoverTarget;
    }

    @Import(name="masterHeartbeatPeriod", required=true)
    private Integer masterHeartbeatPeriod;

    public Integer masterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }

    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    @Import(name="sslCipher", required=true)
    private String sslCipher;

    public String sslCipher() {
        return this.sslCipher;
    }

    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    @Import(name="verifyServerCertificate", required=true)
    private Boolean verifyServerCertificate;

    public Boolean verifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    private GetDatabaseInstanceReplicaConfiguration() {}

    private GetDatabaseInstanceReplicaConfiguration(GetDatabaseInstanceReplicaConfiguration $) {
        this.caCertificate = $.caCertificate;
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.connectRetryInterval = $.connectRetryInterval;
        this.dumpFilePath = $.dumpFilePath;
        this.failoverTarget = $.failoverTarget;
        this.masterHeartbeatPeriod = $.masterHeartbeatPeriod;
        this.password = $.password;
        this.sslCipher = $.sslCipher;
        this.username = $.username;
        this.verifyServerCertificate = $.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseInstanceReplicaConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseInstanceReplicaConfiguration $;

        public Builder() {
            $ = new GetDatabaseInstanceReplicaConfiguration();
        }

        public Builder(GetDatabaseInstanceReplicaConfiguration defaults) {
            $ = new GetDatabaseInstanceReplicaConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder caCertificate(String caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        public Builder clientCertificate(String clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder connectRetryInterval(Integer connectRetryInterval) {
            $.connectRetryInterval = connectRetryInterval;
            return this;
        }

        public Builder dumpFilePath(String dumpFilePath) {
            $.dumpFilePath = dumpFilePath;
            return this;
        }

        public Builder failoverTarget(Boolean failoverTarget) {
            $.failoverTarget = failoverTarget;
            return this;
        }

        public Builder masterHeartbeatPeriod(Integer masterHeartbeatPeriod) {
            $.masterHeartbeatPeriod = masterHeartbeatPeriod;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder sslCipher(String sslCipher) {
            $.sslCipher = sslCipher;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            $.verifyServerCertificate = verifyServerCertificate;
            return this;
        }

        public GetDatabaseInstanceReplicaConfiguration build() {
            $.caCertificate = Objects.requireNonNull($.caCertificate, "expected parameter 'caCertificate' to be non-null");
            $.clientCertificate = Objects.requireNonNull($.clientCertificate, "expected parameter 'clientCertificate' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.connectRetryInterval = Objects.requireNonNull($.connectRetryInterval, "expected parameter 'connectRetryInterval' to be non-null");
            $.dumpFilePath = Objects.requireNonNull($.dumpFilePath, "expected parameter 'dumpFilePath' to be non-null");
            $.failoverTarget = Objects.requireNonNull($.failoverTarget, "expected parameter 'failoverTarget' to be non-null");
            $.masterHeartbeatPeriod = Objects.requireNonNull($.masterHeartbeatPeriod, "expected parameter 'masterHeartbeatPeriod' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.sslCipher = Objects.requireNonNull($.sslCipher, "expected parameter 'sslCipher' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            $.verifyServerCertificate = Objects.requireNonNull($.verifyServerCertificate, "expected parameter 'verifyServerCertificate' to be non-null");
            return $;
        }
    }

}
