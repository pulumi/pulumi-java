// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricMeanInRangeRangeGetArgs;
import java.lang.String;
import java.util.Objects;


public final class SloWindowsBasedSliMetricMeanInRangeGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloWindowsBasedSliMetricMeanInRangeGetArgs Empty = new SloWindowsBasedSliMetricMeanInRangeGetArgs();

    /**
     * Range of numerical values. The computed good_service
     * will be the count of values x in the Distribution such
     * that range.min &lt;= x &lt;= range.max. inclusive of min and
     * max. Open ranges can be defined by setting
     * just one of min or max. Summed value `X` should satisfy
     * `range.min &lt;= X &lt;= range.max` for a good window.
     * Structure is documented below.
     * 
     */
    @Import(name="range", required=true)
    private Output<SloWindowsBasedSliMetricMeanInRangeRangeGetArgs> range;

    public Output<SloWindowsBasedSliMetricMeanInRangeRangeGetArgs> range() {
        return this.range;
    }

    /**
     * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
     * specifying the TimeSeries to use for evaluating window
     * quality. The provided TimeSeries must have
     * ValueType = INT64 or ValueType = DOUBLE and
     * MetricKind = GAUGE.
     * Summed value `X` should satisfy
     * `range.min &lt;= X &lt;= range.max` for a good window.
     * 
     */
    @Import(name="timeSeries", required=true)
    private Output<String> timeSeries;

    public Output<String> timeSeries() {
        return this.timeSeries;
    }

    private SloWindowsBasedSliMetricMeanInRangeGetArgs() {}

    private SloWindowsBasedSliMetricMeanInRangeGetArgs(SloWindowsBasedSliMetricMeanInRangeGetArgs $) {
        this.range = $.range;
        this.timeSeries = $.timeSeries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloWindowsBasedSliMetricMeanInRangeGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloWindowsBasedSliMetricMeanInRangeGetArgs $;

        public Builder() {
            $ = new SloWindowsBasedSliMetricMeanInRangeGetArgs();
        }

        public Builder(SloWindowsBasedSliMetricMeanInRangeGetArgs defaults) {
            $ = new SloWindowsBasedSliMetricMeanInRangeGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder range(Output<SloWindowsBasedSliMetricMeanInRangeRangeGetArgs> range) {
            $.range = range;
            return this;
        }

        public Builder range(SloWindowsBasedSliMetricMeanInRangeRangeGetArgs range) {
            return range(Output.of(range));
        }

        public Builder timeSeries(Output<String> timeSeries) {
            $.timeSeries = timeSeries;
            return this;
        }

        public Builder timeSeries(String timeSeries) {
            return timeSeries(Output.of(timeSeries));
        }

        public SloWindowsBasedSliMetricMeanInRangeGetArgs build() {
            $.range = Objects.requireNonNull($.range, "expected parameter 'range' to be non-null");
            $.timeSeries = Objects.requireNonNull($.timeSeries, "expected parameter 'timeSeries' to be non-null");
            return $;
        }
    }

}
