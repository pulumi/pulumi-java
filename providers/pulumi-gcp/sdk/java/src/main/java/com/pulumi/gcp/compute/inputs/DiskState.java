// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.DiskDiskEncryptionKeyGetArgs;
import com.pulumi.gcp.compute.inputs.DiskSourceImageEncryptionKeyGetArgs;
import com.pulumi.gcp.compute.inputs.DiskSourceSnapshotEncryptionKeyGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskState extends com.pulumi.resources.ResourceArgs {

    public static final DiskState Empty = new DiskState();

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Encrypts the disk using a customer-supplied encryption key.
     * After you encrypt a disk with a customer-supplied key, you must
     * provide the same key if you use the disk later (e.g. to create a disk
     * snapshot or an image, or to attach the disk to a virtual machine).
     * Customer-supplied encryption keys do not protect access to metadata of
     * the disk.
     * If you do not provide an encryption key when creating the disk, then
     * the disk will be encrypted using an automatically generated key and
     * you do not need to provide a key to use the disk later.
     * Structure is documented below.
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable Output<DiskDiskEncryptionKeyGetArgs> diskEncryptionKey;

    public Optional<Output<DiskDiskEncryptionKeyGetArgs>> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * The image from which to initialize this disk. This can be
     * one of: the image&#39;s `self_link`, `projects/{project}/global/images/{image}`,
     * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
     * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
     * `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
     * images names must include the family name. If they don&#39;t, use the
     * [gcp.compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
     * For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
     * These images can be referred by family name here.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     * 
     * @deprecated
     * This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config.
     * 
     */
    @Deprecated /* This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config. */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    @Deprecated /* This field is no longer in use, disk interfaces will be automatically determined on attachment. To resolve this issue, remove this field from your config. */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     * 
     */
    @Import(name="labelFingerprint")
    private @Nullable Output<String> labelFingerprint;

    public Optional<Output<String>> labelFingerprint() {
        return Optional.ofNullable(this.labelFingerprint);
    }

    /**
     * Labels to apply to this disk.  A list of key-&gt;value pairs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Last attach timestamp in RFC3339 text format.
     * 
     */
    @Import(name="lastAttachTimestamp")
    private @Nullable Output<String> lastAttachTimestamp;

    public Optional<Output<String>> lastAttachTimestamp() {
        return Optional.ofNullable(this.lastAttachTimestamp);
    }

    /**
     * Last detach timestamp in RFC3339 text format.
     * 
     */
    @Import(name="lastDetachTimestamp")
    private @Nullable Output<String> lastDetachTimestamp;

    public Optional<Output<String>> lastDetachTimestamp() {
        return Optional.ofNullable(this.lastDetachTimestamp);
    }

    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    @Import(name="multiWriter")
    private @Nullable Output<Boolean> multiWriter;

    public Optional<Output<Boolean>> multiWriter() {
        return Optional.ofNullable(this.multiWriter);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Physical block size of the persistent disk, in bytes. If not present
     * in a request, a default value is used. Currently supported sizes
     * are 4096 and 16384, other sizes may be added in the future.
     * If an unsupported value is requested, the error message will list
     * the supported values for the caller&#39;s project.
     * 
     */
    @Import(name="physicalBlockSizeBytes")
    private @Nullable Output<Integer> physicalBlockSizeBytes;

    public Optional<Output<Integer>> physicalBlockSizeBytes() {
        return Optional.ofNullable(this.physicalBlockSizeBytes);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Indicates how many IOPS must be provisioned for the disk.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * Resource policies applied to this disk for automatic snapshot creations.
     * ~&gt;**NOTE** This value does not support updating the
     * resource policy, as resource policies can not be updated more than
     * one at a time. Use
     * `gcp.compute.DiskResourcePolicyAttachment`
     * to allow for updating the resource policy attached to the disk.
     * 
     */
    @Import(name="resourcePolicies")
    private @Nullable Output<List<String>> resourcePolicies;

    public Optional<Output<List<String>>> resourcePolicies() {
        return Optional.ofNullable(this.resourcePolicies);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Size of the persistent disk, specified in GB. You can specify this
     * field when creating a persistent disk using the `image` or
     * `snapshot` parameter, or specify it alone to create an empty
     * persistent disk.
     * If you specify this field along with `image` or `snapshot`,
     * the value must not be less than the size of the image
     * or the size of the snapshot.
     * ~&gt;**NOTE** If you change the size, the provider updates the disk size
     * if upsizing is detected but recreates the disk if downsizing is requested.
     * You can add `lifecycle.prevent_destroy` in the config to prevent destroying
     * and recreating.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The source snapshot used to create this disk. You can provide this as
     * a partial or full URL to the resource. If the snapshot is in another
     * project than this disk, you must supply a full URL. For example, the
     * following are valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
     * * `projects/project/global/snapshots/snapshot`
     * * `global/snapshots/snapshot`
     * * `snapshot`
     * 
     */
    @Import(name="snapshot")
    private @Nullable Output<String> snapshot;

    public Optional<Output<String>> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }

    /**
     * The customer-supplied encryption key of the source image. Required if
     * the source image is protected by a customer-supplied encryption key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceImageEncryptionKey")
    private @Nullable Output<DiskSourceImageEncryptionKeyGetArgs> sourceImageEncryptionKey;

    public Optional<Output<DiskSourceImageEncryptionKeyGetArgs>> sourceImageEncryptionKey() {
        return Optional.ofNullable(this.sourceImageEncryptionKey);
    }

    /**
     * The ID value of the image used to create this disk. This value identifies the exact image that was used to create this
     * persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated
     * under the same name, the source image ID would identify the exact version of the image that was used.
     * 
     */
    @Import(name="sourceImageId")
    private @Nullable Output<String> sourceImageId;

    public Optional<Output<String>> sourceImageId() {
        return Optional.ofNullable(this.sourceImageId);
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey")
    private @Nullable Output<DiskSourceSnapshotEncryptionKeyGetArgs> sourceSnapshotEncryptionKey;

    public Optional<Output<DiskSourceSnapshotEncryptionKeyGetArgs>> sourceSnapshotEncryptionKey() {
        return Optional.ofNullable(this.sourceSnapshotEncryptionKey);
    }

    /**
     * The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create
     * this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and
     * recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.
     * 
     */
    @Import(name="sourceSnapshotId")
    private @Nullable Output<String> sourceSnapshotId;

    public Optional<Output<String>> sourceSnapshotId() {
        return Optional.ofNullable(this.sourceSnapshotId);
    }

    /**
     * URL of the disk type resource describing which disk type to use to
     * create the disk. Provide this when creating the disk.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<String>> users;

    public Optional<Output<List<String>>> users() {
        return Optional.ofNullable(this.users);
    }

    /**
     * A reference to the zone where the disk resides.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private DiskState() {}

    private DiskState(DiskState $) {
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.image = $.image;
        this.interface_ = $.interface_;
        this.labelFingerprint = $.labelFingerprint;
        this.labels = $.labels;
        this.lastAttachTimestamp = $.lastAttachTimestamp;
        this.lastDetachTimestamp = $.lastDetachTimestamp;
        this.multiWriter = $.multiWriter;
        this.name = $.name;
        this.physicalBlockSizeBytes = $.physicalBlockSizeBytes;
        this.project = $.project;
        this.provisionedIops = $.provisionedIops;
        this.resourcePolicies = $.resourcePolicies;
        this.selfLink = $.selfLink;
        this.size = $.size;
        this.snapshot = $.snapshot;
        this.sourceImageEncryptionKey = $.sourceImageEncryptionKey;
        this.sourceImageId = $.sourceImageId;
        this.sourceSnapshotEncryptionKey = $.sourceSnapshotEncryptionKey;
        this.sourceSnapshotId = $.sourceSnapshotId;
        this.type = $.type;
        this.users = $.users;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskState $;

        public Builder() {
            $ = new DiskState();
        }

        public Builder(DiskState defaults) {
            $ = new DiskState(Objects.requireNonNull(defaults));
        }

        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder diskEncryptionKey(@Nullable Output<DiskDiskEncryptionKeyGetArgs> diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        public Builder diskEncryptionKey(DiskDiskEncryptionKeyGetArgs diskEncryptionKey) {
            return diskEncryptionKey(Output.of(diskEncryptionKey));
        }

        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        public Builder labelFingerprint(@Nullable Output<String> labelFingerprint) {
            $.labelFingerprint = labelFingerprint;
            return this;
        }

        public Builder labelFingerprint(String labelFingerprint) {
            return labelFingerprint(Output.of(labelFingerprint));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder lastAttachTimestamp(@Nullable Output<String> lastAttachTimestamp) {
            $.lastAttachTimestamp = lastAttachTimestamp;
            return this;
        }

        public Builder lastAttachTimestamp(String lastAttachTimestamp) {
            return lastAttachTimestamp(Output.of(lastAttachTimestamp));
        }

        public Builder lastDetachTimestamp(@Nullable Output<String> lastDetachTimestamp) {
            $.lastDetachTimestamp = lastDetachTimestamp;
            return this;
        }

        public Builder lastDetachTimestamp(String lastDetachTimestamp) {
            return lastDetachTimestamp(Output.of(lastDetachTimestamp));
        }

        public Builder multiWriter(@Nullable Output<Boolean> multiWriter) {
            $.multiWriter = multiWriter;
            return this;
        }

        public Builder multiWriter(Boolean multiWriter) {
            return multiWriter(Output.of(multiWriter));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder physicalBlockSizeBytes(@Nullable Output<Integer> physicalBlockSizeBytes) {
            $.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }

        public Builder physicalBlockSizeBytes(Integer physicalBlockSizeBytes) {
            return physicalBlockSizeBytes(Output.of(physicalBlockSizeBytes));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        public Builder resourcePolicies(@Nullable Output<List<String>> resourcePolicies) {
            $.resourcePolicies = resourcePolicies;
            return this;
        }

        public Builder resourcePolicies(List<String> resourcePolicies) {
            return resourcePolicies(Output.of(resourcePolicies));
        }

        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public Builder snapshot(@Nullable Output<String> snapshot) {
            $.snapshot = snapshot;
            return this;
        }

        public Builder snapshot(String snapshot) {
            return snapshot(Output.of(snapshot));
        }

        public Builder sourceImageEncryptionKey(@Nullable Output<DiskSourceImageEncryptionKeyGetArgs> sourceImageEncryptionKey) {
            $.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }

        public Builder sourceImageEncryptionKey(DiskSourceImageEncryptionKeyGetArgs sourceImageEncryptionKey) {
            return sourceImageEncryptionKey(Output.of(sourceImageEncryptionKey));
        }

        public Builder sourceImageId(@Nullable Output<String> sourceImageId) {
            $.sourceImageId = sourceImageId;
            return this;
        }

        public Builder sourceImageId(String sourceImageId) {
            return sourceImageId(Output.of(sourceImageId));
        }

        public Builder sourceSnapshotEncryptionKey(@Nullable Output<DiskSourceSnapshotEncryptionKeyGetArgs> sourceSnapshotEncryptionKey) {
            $.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        public Builder sourceSnapshotEncryptionKey(DiskSourceSnapshotEncryptionKeyGetArgs sourceSnapshotEncryptionKey) {
            return sourceSnapshotEncryptionKey(Output.of(sourceSnapshotEncryptionKey));
        }

        public Builder sourceSnapshotId(@Nullable Output<String> sourceSnapshotId) {
            $.sourceSnapshotId = sourceSnapshotId;
            return this;
        }

        public Builder sourceSnapshotId(String sourceSnapshotId) {
            return sourceSnapshotId(Output.of(sourceSnapshotId));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder users(@Nullable Output<List<String>> users) {
            $.users = users;
            return this;
        }

        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        public Builder users(String... users) {
            return users(List.of(users));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public DiskState build() {
            return $;
        }
    }

}
