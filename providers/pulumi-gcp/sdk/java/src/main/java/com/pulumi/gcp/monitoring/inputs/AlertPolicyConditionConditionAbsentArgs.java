// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionAbsentAggregationArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionAbsentTriggerArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionAbsentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionAbsentArgs Empty = new AlertPolicyConditionConditionAbsentArgs();

    /**
     * Specifies the alignment of data points in
     * individual time series as well as how to
     * combine the retrieved time series together
     * (such as when aggregating multiple streams
     * on each resource to a single stream for each
     * resource or when aggregating streams across
     * all members of a group of resources).
     * Multiple aggregations are applied in the
     * order specified.This field is similar to the
     * one in the MetricService.ListTimeSeries
     * request. It is advisable to use the
     * ListTimeSeries method when debugging this
     * field.
     * Structure is documented below.
     * 
     */
    @Import(name="aggregations")
      private final @Nullable Output<List<AlertPolicyConditionConditionAbsentAggregationArgs>> aggregations;

    public Output<List<AlertPolicyConditionConditionAbsentAggregationArgs>> aggregations() {
        return this.aggregations == null ? Codegen.empty() : this.aggregations;
    }

    /**
     * The amount of time that a time series must
     * violate the threshold to be considered
     * failing. Currently, only values that are a
     * multiple of a minute--e.g., 0, 60, 120, or
     * 300 seconds--are supported. If an invalid
     * value is given, an error will be returned.
     * When choosing a duration, it is useful to
     * keep in mind the frequency of the underlying
     * time series data (which may also be affected
     * by any alignments specified in the
     * aggregations field); a good duration is long
     * enough so that a single outlier does not
     * generate spurious alerts, but short enough
     * that unhealthy states are detected and
     * alerted on quickly.
     * 
     */
    @Import(name="duration", required=true)
      private final Output<String> duration;

    public Output<String> duration() {
        return this.duration;
    }

    /**
     * A logs-based filter.
     * 
     */
    @Import(name="filter")
      private final @Nullable Output<String> filter;

    public Output<String> filter() {
        return this.filter == null ? Codegen.empty() : this.filter;
    }

    /**
     * The number/percent of time series for which
     * the comparison must hold in order for the
     * condition to trigger. If unspecified, then
     * the condition will trigger if the comparison
     * is true for any of the time series that have
     * been identified by filter and aggregations,
     * or by the ratio, if denominator_filter and
     * denominator_aggregations are specified.
     * Structure is documented below.
     * 
     */
    @Import(name="trigger")
      private final @Nullable Output<AlertPolicyConditionConditionAbsentTriggerArgs> trigger;

    public Output<AlertPolicyConditionConditionAbsentTriggerArgs> trigger() {
        return this.trigger == null ? Codegen.empty() : this.trigger;
    }

    public AlertPolicyConditionConditionAbsentArgs(
        @Nullable Output<List<AlertPolicyConditionConditionAbsentAggregationArgs>> aggregations,
        Output<String> duration,
        @Nullable Output<String> filter,
        @Nullable Output<AlertPolicyConditionConditionAbsentTriggerArgs> trigger) {
        this.aggregations = aggregations;
        this.duration = Objects.requireNonNull(duration, "expected parameter 'duration' to be non-null");
        this.filter = filter;
        this.trigger = trigger;
    }

    private AlertPolicyConditionConditionAbsentArgs() {
        this.aggregations = Codegen.empty();
        this.duration = Codegen.empty();
        this.filter = Codegen.empty();
        this.trigger = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyConditionConditionAbsentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<AlertPolicyConditionConditionAbsentAggregationArgs>> aggregations;
        private Output<String> duration;
        private @Nullable Output<String> filter;
        private @Nullable Output<AlertPolicyConditionConditionAbsentTriggerArgs> trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertPolicyConditionConditionAbsentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregations = defaults.aggregations;
    	      this.duration = defaults.duration;
    	      this.filter = defaults.filter;
    	      this.trigger = defaults.trigger;
        }

        public Builder aggregations(@Nullable Output<List<AlertPolicyConditionConditionAbsentAggregationArgs>> aggregations) {
            this.aggregations = aggregations;
            return this;
        }
        public Builder aggregations(@Nullable List<AlertPolicyConditionConditionAbsentAggregationArgs> aggregations) {
            this.aggregations = Codegen.ofNullable(aggregations);
            return this;
        }
        public Builder aggregations(AlertPolicyConditionConditionAbsentAggregationArgs... aggregations) {
            return aggregations(List.of(aggregations));
        }
        public Builder duration(Output<String> duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        public Builder duration(String duration) {
            this.duration = Output.of(Objects.requireNonNull(duration));
            return this;
        }
        public Builder filter(@Nullable Output<String> filter) {
            this.filter = filter;
            return this;
        }
        public Builder filter(@Nullable String filter) {
            this.filter = Codegen.ofNullable(filter);
            return this;
        }
        public Builder trigger(@Nullable Output<AlertPolicyConditionConditionAbsentTriggerArgs> trigger) {
            this.trigger = trigger;
            return this;
        }
        public Builder trigger(@Nullable AlertPolicyConditionConditionAbsentTriggerArgs trigger) {
            this.trigger = Codegen.ofNullable(trigger);
            return this;
        }        public AlertPolicyConditionConditionAbsentArgs build() {
            return new AlertPolicyConditionConditionAbsentArgs(aggregations, duration, filter, trigger);
        }
    }
}
