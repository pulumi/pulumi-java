// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Description of the instance.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
     * Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     * 
     */
    @Import(name="diskEncryptionKeyName")
      private final @Nullable Output<String> diskEncryptionKeyName;

    public Output<String> diskEncryptionKeyName() {
        return this.diskEncryptionKeyName == null ? Codegen.empty() : this.diskEncryptionKeyName;
    }

    /**
     * Display name of the instance.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Output only. Hostname or IP address of the exposed Apigee endpoint used by clients to connect to the service.
     * 
     */
    @Import(name="host")
      private final @Nullable Output<String> host;

    public Output<String> host() {
        return this.host == null ? Codegen.empty() : this.host;
    }

    /**
     * IP range represents the customer-provided CIDR block of length 22 that will be used for
     * the Apigee instance creation. This optional range, if provided, should be freely
     * available as part of larger named range the customer has allocated to the Service
     * Networking peering. If this is not provided, Apigee will automatically request for any
     * available /22 CIDR block from Service Networking. The customer should use this CIDR block
     * for configuring their firewall needs to allow traffic from Apigee.
     * Input format: &#34;a.b.c.d/22&#34;
     * 
     */
    @Import(name="ipRange")
      private final @Nullable Output<String> ipRange;

    public Output<String> ipRange() {
        return this.ipRange == null ? Codegen.empty() : this.ipRange;
    }

    /**
     * Compute Engine location where the instance resides. For trial organization
     * subscriptions, the location must be a Compute Engine zone. For paid organization
     * subscriptions, it should correspond to a Compute Engine region.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Resource ID of the instance.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Import(name="orgId")
      private final @Nullable Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId == null ? Codegen.empty() : this.orgId;
    }

    /**
     * The size of the CIDR block range that will be reserved by the instance. For valid values,
     * see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
     * 
     */
    @Import(name="peeringCidrRange")
      private final @Nullable Output<String> peeringCidrRange;

    public Output<String> peeringCidrRange() {
        return this.peeringCidrRange == null ? Codegen.empty() : this.peeringCidrRange;
    }

    /**
     * Output only. Port number of the exposed Apigee endpoint.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<String> port;

    public Output<String> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    public InstanceState(
        @Nullable Output<String> description,
        @Nullable Output<String> diskEncryptionKeyName,
        @Nullable Output<String> displayName,
        @Nullable Output<String> host,
        @Nullable Output<String> ipRange,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> orgId,
        @Nullable Output<String> peeringCidrRange,
        @Nullable Output<String> port) {
        this.description = description;
        this.diskEncryptionKeyName = diskEncryptionKeyName;
        this.displayName = displayName;
        this.host = host;
        this.ipRange = ipRange;
        this.location = location;
        this.name = name;
        this.orgId = orgId;
        this.peeringCidrRange = peeringCidrRange;
        this.port = port;
    }

    private InstanceState() {
        this.description = Codegen.empty();
        this.diskEncryptionKeyName = Codegen.empty();
        this.displayName = Codegen.empty();
        this.host = Codegen.empty();
        this.ipRange = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.orgId = Codegen.empty();
        this.peeringCidrRange = Codegen.empty();
        this.port = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> diskEncryptionKeyName;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> host;
        private @Nullable Output<String> ipRange;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> orgId;
        private @Nullable Output<String> peeringCidrRange;
        private @Nullable Output<String> port;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.diskEncryptionKeyName = defaults.diskEncryptionKeyName;
    	      this.displayName = defaults.displayName;
    	      this.host = defaults.host;
    	      this.ipRange = defaults.ipRange;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.peeringCidrRange = defaults.peeringCidrRange;
    	      this.port = defaults.port;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder diskEncryptionKeyName(@Nullable Output<String> diskEncryptionKeyName) {
            this.diskEncryptionKeyName = diskEncryptionKeyName;
            return this;
        }
        public Builder diskEncryptionKeyName(@Nullable String diskEncryptionKeyName) {
            this.diskEncryptionKeyName = Codegen.ofNullable(diskEncryptionKeyName);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = Codegen.ofNullable(host);
            return this;
        }
        public Builder ipRange(@Nullable Output<String> ipRange) {
            this.ipRange = ipRange;
            return this;
        }
        public Builder ipRange(@Nullable String ipRange) {
            this.ipRange = Codegen.ofNullable(ipRange);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder orgId(@Nullable Output<String> orgId) {
            this.orgId = orgId;
            return this;
        }
        public Builder orgId(@Nullable String orgId) {
            this.orgId = Codegen.ofNullable(orgId);
            return this;
        }
        public Builder peeringCidrRange(@Nullable Output<String> peeringCidrRange) {
            this.peeringCidrRange = peeringCidrRange;
            return this;
        }
        public Builder peeringCidrRange(@Nullable String peeringCidrRange) {
            this.peeringCidrRange = Codegen.ofNullable(peeringCidrRange);
            return this;
        }
        public Builder port(@Nullable Output<String> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable String port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }        public InstanceState build() {
            return new InstanceState(description, diskEncryptionKeyName, displayName, host, ipRange, location, name, orgId, peeringCidrRange, port);
        }
    }
}
