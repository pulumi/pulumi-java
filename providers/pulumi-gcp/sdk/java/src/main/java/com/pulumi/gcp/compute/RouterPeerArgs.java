// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.RouterPeerAdvertisedIpRangeArgs;
import com.pulumi.gcp.compute.inputs.RouterPeerBfdArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterPeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterPeerArgs Empty = new RouterPeerArgs();

    /**
     * User-specified flag to indicate which mode to use for advertisement.
     * Valid values of this enum field are: `DEFAULT`, `CUSTOM`
     * Default value is `DEFAULT`.
     * Possible values are `DEFAULT` and `CUSTOM`.
     * 
     */
    @Import(name="advertiseMode")
      private final @Nullable Output<String> advertiseMode;

    public Output<String> advertiseMode() {
        return this.advertiseMode == null ? Codegen.empty() : this.advertiseMode;
    }

    /**
     * User-specified list of prefix groups to advertise in custom
     * mode, which can take one of the following options:
     * * `ALL_SUBNETS`: Advertises all available subnets, including peer VPC subnets.
     * * `ALL_VPC_SUBNETS`: Advertises the router's own VPC subnets.
     * * `ALL_PEER_VPC_SUBNETS`: Advertises peer subnets of the router's VPC network.
     * 
     */
    @Import(name="advertisedGroups")
      private final @Nullable Output<List<String>> advertisedGroups;

    public Output<List<String>> advertisedGroups() {
        return this.advertisedGroups == null ? Codegen.empty() : this.advertisedGroups;
    }

    /**
     * User-specified list of individual IP ranges to advertise in
     * custom mode. This field can only be populated if advertiseMode
     * is `CUSTOM` and is advertised to all peers of the router. These IP
     * ranges will be advertised in addition to any specified groups.
     * Leave this field blank to advertise no custom IP ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="advertisedIpRanges")
      private final @Nullable Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges;

    public Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges() {
        return this.advertisedIpRanges == null ? Codegen.empty() : this.advertisedIpRanges;
    }

    /**
     * The priority of routes advertised to this BGP peer.
     * Where there is more than one matching route of maximum
     * length, the routes with the lowest priority value win.
     * 
     */
    @Import(name="advertisedRoutePriority")
      private final @Nullable Output<Integer> advertisedRoutePriority;

    public Output<Integer> advertisedRoutePriority() {
        return this.advertisedRoutePriority == null ? Codegen.empty() : this.advertisedRoutePriority;
    }

    /**
     * BFD configuration for the BGP peering.
     * Structure is documented below.
     * 
     */
    @Import(name="bfd")
      private final @Nullable Output<RouterPeerBfdArgs> bfd;

    public Output<RouterPeerBfdArgs> bfd() {
        return this.bfd == null ? Codegen.empty() : this.bfd;
    }

    /**
     * The status of the BGP peer connection. If set to false, any active session
     * with the peer is terminated and all associated routing information is removed.
     * If set to true, the peer connection can be established with routing information.
     * The default is true.
     * 
     */
    @Import(name="enable")
      private final @Nullable Output<Boolean> enable;

    public Output<Boolean> enable() {
        return this.enable == null ? Codegen.empty() : this.enable;
    }

    /**
     * Name of the interface the BGP peer is associated with.
     * 
     */
    @Import(name="interface", required=true)
      private final Output<String> interface_;

    public Output<String> interface_() {
        return this.interface_;
    }

    /**
     * IP address of the interface inside Google Cloud Platform.
     * Only IPv4 is supported.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable Output<String> ipAddress;

    public Output<String> ipAddress() {
        return this.ipAddress == null ? Codegen.empty() : this.ipAddress;
    }

    /**
     * Name of this BGP peer. The name must be 1-63 characters long,
     * and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which
     * means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Peer BGP Autonomous System Number (ASN).
     * Each BGP interface may use a different value.
     * 
     */
    @Import(name="peerAsn", required=true)
      private final Output<Integer> peerAsn;

    public Output<Integer> peerAsn() {
        return this.peerAsn;
    }

    /**
     * IP address of the BGP interface outside Google Cloud Platform.
     * Only IPv4 is supported.
     * 
     */
    @Import(name="peerIpAddress", required=true)
      private final Output<String> peerIpAddress;

    public Output<String> peerIpAddress() {
        return this.peerIpAddress;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Region where the router and BgpPeer reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The name of the Cloud Router in which this BgpPeer will be configured.
     * 
     */
    @Import(name="router", required=true)
      private final Output<String> router;

    public Output<String> router() {
        return this.router;
    }

    public RouterPeerArgs(
        @Nullable Output<String> advertiseMode,
        @Nullable Output<List<String>> advertisedGroups,
        @Nullable Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges,
        @Nullable Output<Integer> advertisedRoutePriority,
        @Nullable Output<RouterPeerBfdArgs> bfd,
        @Nullable Output<Boolean> enable,
        Output<String> interface_,
        @Nullable Output<String> ipAddress,
        @Nullable Output<String> name,
        Output<Integer> peerAsn,
        Output<String> peerIpAddress,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        Output<String> router) {
        this.advertiseMode = advertiseMode;
        this.advertisedGroups = advertisedGroups;
        this.advertisedIpRanges = advertisedIpRanges;
        this.advertisedRoutePriority = advertisedRoutePriority;
        this.bfd = bfd;
        this.enable = enable;
        this.interface_ = Objects.requireNonNull(interface_, "expected parameter 'interface' to be non-null");
        this.ipAddress = ipAddress;
        this.name = name;
        this.peerAsn = Objects.requireNonNull(peerAsn, "expected parameter 'peerAsn' to be non-null");
        this.peerIpAddress = Objects.requireNonNull(peerIpAddress, "expected parameter 'peerIpAddress' to be non-null");
        this.project = project;
        this.region = region;
        this.router = Objects.requireNonNull(router, "expected parameter 'router' to be non-null");
    }

    private RouterPeerArgs() {
        this.advertiseMode = Codegen.empty();
        this.advertisedGroups = Codegen.empty();
        this.advertisedIpRanges = Codegen.empty();
        this.advertisedRoutePriority = Codegen.empty();
        this.bfd = Codegen.empty();
        this.enable = Codegen.empty();
        this.interface_ = Codegen.empty();
        this.ipAddress = Codegen.empty();
        this.name = Codegen.empty();
        this.peerAsn = Codegen.empty();
        this.peerIpAddress = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.router = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterPeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> advertiseMode;
        private @Nullable Output<List<String>> advertisedGroups;
        private @Nullable Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges;
        private @Nullable Output<Integer> advertisedRoutePriority;
        private @Nullable Output<RouterPeerBfdArgs> bfd;
        private @Nullable Output<Boolean> enable;
        private Output<String> interface_;
        private @Nullable Output<String> ipAddress;
        private @Nullable Output<String> name;
        private Output<Integer> peerAsn;
        private Output<String> peerIpAddress;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private Output<String> router;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterPeerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertiseMode = defaults.advertiseMode;
    	      this.advertisedGroups = defaults.advertisedGroups;
    	      this.advertisedIpRanges = defaults.advertisedIpRanges;
    	      this.advertisedRoutePriority = defaults.advertisedRoutePriority;
    	      this.bfd = defaults.bfd;
    	      this.enable = defaults.enable;
    	      this.interface_ = defaults.interface_;
    	      this.ipAddress = defaults.ipAddress;
    	      this.name = defaults.name;
    	      this.peerAsn = defaults.peerAsn;
    	      this.peerIpAddress = defaults.peerIpAddress;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.router = defaults.router;
        }

        public Builder advertiseMode(@Nullable Output<String> advertiseMode) {
            this.advertiseMode = advertiseMode;
            return this;
        }
        public Builder advertiseMode(@Nullable String advertiseMode) {
            this.advertiseMode = Codegen.ofNullable(advertiseMode);
            return this;
        }
        public Builder advertisedGroups(@Nullable Output<List<String>> advertisedGroups) {
            this.advertisedGroups = advertisedGroups;
            return this;
        }
        public Builder advertisedGroups(@Nullable List<String> advertisedGroups) {
            this.advertisedGroups = Codegen.ofNullable(advertisedGroups);
            return this;
        }
        public Builder advertisedGroups(String... advertisedGroups) {
            return advertisedGroups(List.of(advertisedGroups));
        }
        public Builder advertisedIpRanges(@Nullable Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges) {
            this.advertisedIpRanges = advertisedIpRanges;
            return this;
        }
        public Builder advertisedIpRanges(@Nullable List<RouterPeerAdvertisedIpRangeArgs> advertisedIpRanges) {
            this.advertisedIpRanges = Codegen.ofNullable(advertisedIpRanges);
            return this;
        }
        public Builder advertisedIpRanges(RouterPeerAdvertisedIpRangeArgs... advertisedIpRanges) {
            return advertisedIpRanges(List.of(advertisedIpRanges));
        }
        public Builder advertisedRoutePriority(@Nullable Output<Integer> advertisedRoutePriority) {
            this.advertisedRoutePriority = advertisedRoutePriority;
            return this;
        }
        public Builder advertisedRoutePriority(@Nullable Integer advertisedRoutePriority) {
            this.advertisedRoutePriority = Codegen.ofNullable(advertisedRoutePriority);
            return this;
        }
        public Builder bfd(@Nullable Output<RouterPeerBfdArgs> bfd) {
            this.bfd = bfd;
            return this;
        }
        public Builder bfd(@Nullable RouterPeerBfdArgs bfd) {
            this.bfd = Codegen.ofNullable(bfd);
            return this;
        }
        public Builder enable(@Nullable Output<Boolean> enable) {
            this.enable = enable;
            return this;
        }
        public Builder enable(@Nullable Boolean enable) {
            this.enable = Codegen.ofNullable(enable);
            return this;
        }
        public Builder interface_(Output<String> interface_) {
            this.interface_ = Objects.requireNonNull(interface_);
            return this;
        }
        public Builder interface_(String interface_) {
            this.interface_ = Output.of(Objects.requireNonNull(interface_));
            return this;
        }
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = Codegen.ofNullable(ipAddress);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder peerAsn(Output<Integer> peerAsn) {
            this.peerAsn = Objects.requireNonNull(peerAsn);
            return this;
        }
        public Builder peerAsn(Integer peerAsn) {
            this.peerAsn = Output.of(Objects.requireNonNull(peerAsn));
            return this;
        }
        public Builder peerIpAddress(Output<String> peerIpAddress) {
            this.peerIpAddress = Objects.requireNonNull(peerIpAddress);
            return this;
        }
        public Builder peerIpAddress(String peerIpAddress) {
            this.peerIpAddress = Output.of(Objects.requireNonNull(peerIpAddress));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder router(Output<String> router) {
            this.router = Objects.requireNonNull(router);
            return this;
        }
        public Builder router(String router) {
            this.router = Output.of(Objects.requireNonNull(router));
            return this;
        }        public RouterPeerArgs build() {
            return new RouterPeerArgs(advertiseMode, advertisedGroups, advertisedIpRanges, advertisedRoutePriority, bfd, enable, interface_, ipAddress, name, peerAsn, peerIpAddress, project, region, router);
        }
    }
}
