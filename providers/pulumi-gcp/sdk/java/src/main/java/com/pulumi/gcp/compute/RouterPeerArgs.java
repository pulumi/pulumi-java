// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RouterPeerAdvertisedIpRangeArgs;
import com.pulumi.gcp.compute.inputs.RouterPeerBfdArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterPeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterPeerArgs Empty = new RouterPeerArgs();

    /**
     * User-specified flag to indicate which mode to use for advertisement.
     * Valid values of this enum field are: `DEFAULT`, `CUSTOM`
     * Default value is `DEFAULT`.
     * Possible values are `DEFAULT` and `CUSTOM`.
     * 
     */
    @Import(name="advertiseMode")
    private @Nullable Output<String> advertiseMode;

    public Optional<Output<String>> advertiseMode() {
        return Optional.ofNullable(this.advertiseMode);
    }

    /**
     * User-specified list of prefix groups to advertise in custom
     * mode, which can take one of the following options:
     * * `ALL_SUBNETS`: Advertises all available subnets, including peer VPC subnets.
     * * `ALL_VPC_SUBNETS`: Advertises the router&#39;s own VPC subnets.
     * * `ALL_PEER_VPC_SUBNETS`: Advertises peer subnets of the router&#39;s VPC network.
     * 
     */
    @Import(name="advertisedGroups")
    private @Nullable Output<List<String>> advertisedGroups;

    public Optional<Output<List<String>>> advertisedGroups() {
        return Optional.ofNullable(this.advertisedGroups);
    }

    /**
     * User-specified list of individual IP ranges to advertise in
     * custom mode. This field can only be populated if advertiseMode
     * is `CUSTOM` and is advertised to all peers of the router. These IP
     * ranges will be advertised in addition to any specified groups.
     * Leave this field blank to advertise no custom IP ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="advertisedIpRanges")
    private @Nullable Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges;

    public Optional<Output<List<RouterPeerAdvertisedIpRangeArgs>>> advertisedIpRanges() {
        return Optional.ofNullable(this.advertisedIpRanges);
    }

    /**
     * The priority of routes advertised to this BGP peer.
     * Where there is more than one matching route of maximum
     * length, the routes with the lowest priority value win.
     * 
     */
    @Import(name="advertisedRoutePriority")
    private @Nullable Output<Integer> advertisedRoutePriority;

    public Optional<Output<Integer>> advertisedRoutePriority() {
        return Optional.ofNullable(this.advertisedRoutePriority);
    }

    /**
     * BFD configuration for the BGP peering.
     * Structure is documented below.
     * 
     */
    @Import(name="bfd")
    private @Nullable Output<RouterPeerBfdArgs> bfd;

    public Optional<Output<RouterPeerBfdArgs>> bfd() {
        return Optional.ofNullable(this.bfd);
    }

    /**
     * The status of the BGP peer connection. If set to false, any active session
     * with the peer is terminated and all associated routing information is removed.
     * If set to true, the peer connection can be established with routing information.
     * The default is true.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Name of the interface the BGP peer is associated with.
     * 
     */
    @Import(name="interface", required=true)
    private Output<String> interface_;

    public Output<String> interface_() {
        return this.interface_;
    }

    /**
     * IP address of the interface inside Google Cloud Platform.
     * Only IPv4 is supported.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Name of this BGP peer. The name must be 1-63 characters long,
     * and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which
     * means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Peer BGP Autonomous System Number (ASN).
     * Each BGP interface may use a different value.
     * 
     */
    @Import(name="peerAsn", required=true)
    private Output<Integer> peerAsn;

    public Output<Integer> peerAsn() {
        return this.peerAsn;
    }

    /**
     * IP address of the BGP interface outside Google Cloud Platform.
     * Only IPv4 is supported.
     * 
     */
    @Import(name="peerIpAddress", required=true)
    private Output<String> peerIpAddress;

    public Output<String> peerIpAddress() {
        return this.peerIpAddress;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Region where the router and BgpPeer reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the Cloud Router in which this BgpPeer will be configured.
     * 
     */
    @Import(name="router", required=true)
    private Output<String> router;

    public Output<String> router() {
        return this.router;
    }

    private RouterPeerArgs() {}

    private RouterPeerArgs(RouterPeerArgs $) {
        this.advertiseMode = $.advertiseMode;
        this.advertisedGroups = $.advertisedGroups;
        this.advertisedIpRanges = $.advertisedIpRanges;
        this.advertisedRoutePriority = $.advertisedRoutePriority;
        this.bfd = $.bfd;
        this.enable = $.enable;
        this.interface_ = $.interface_;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.peerAsn = $.peerAsn;
        this.peerIpAddress = $.peerIpAddress;
        this.project = $.project;
        this.region = $.region;
        this.router = $.router;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterPeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterPeerArgs $;

        public Builder() {
            $ = new RouterPeerArgs();
        }

        public Builder(RouterPeerArgs defaults) {
            $ = new RouterPeerArgs(Objects.requireNonNull(defaults));
        }

        public Builder advertiseMode(@Nullable Output<String> advertiseMode) {
            $.advertiseMode = advertiseMode;
            return this;
        }

        public Builder advertiseMode(String advertiseMode) {
            return advertiseMode(Output.of(advertiseMode));
        }

        public Builder advertisedGroups(@Nullable Output<List<String>> advertisedGroups) {
            $.advertisedGroups = advertisedGroups;
            return this;
        }

        public Builder advertisedGroups(List<String> advertisedGroups) {
            return advertisedGroups(Output.of(advertisedGroups));
        }

        public Builder advertisedGroups(String... advertisedGroups) {
            return advertisedGroups(List.of(advertisedGroups));
        }

        public Builder advertisedIpRanges(@Nullable Output<List<RouterPeerAdvertisedIpRangeArgs>> advertisedIpRanges) {
            $.advertisedIpRanges = advertisedIpRanges;
            return this;
        }

        public Builder advertisedIpRanges(List<RouterPeerAdvertisedIpRangeArgs> advertisedIpRanges) {
            return advertisedIpRanges(Output.of(advertisedIpRanges));
        }

        public Builder advertisedIpRanges(RouterPeerAdvertisedIpRangeArgs... advertisedIpRanges) {
            return advertisedIpRanges(List.of(advertisedIpRanges));
        }

        public Builder advertisedRoutePriority(@Nullable Output<Integer> advertisedRoutePriority) {
            $.advertisedRoutePriority = advertisedRoutePriority;
            return this;
        }

        public Builder advertisedRoutePriority(Integer advertisedRoutePriority) {
            return advertisedRoutePriority(Output.of(advertisedRoutePriority));
        }

        public Builder bfd(@Nullable Output<RouterPeerBfdArgs> bfd) {
            $.bfd = bfd;
            return this;
        }

        public Builder bfd(RouterPeerBfdArgs bfd) {
            return bfd(Output.of(bfd));
        }

        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        public Builder interface_(Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder peerAsn(Output<Integer> peerAsn) {
            $.peerAsn = peerAsn;
            return this;
        }

        public Builder peerAsn(Integer peerAsn) {
            return peerAsn(Output.of(peerAsn));
        }

        public Builder peerIpAddress(Output<String> peerIpAddress) {
            $.peerIpAddress = peerIpAddress;
            return this;
        }

        public Builder peerIpAddress(String peerIpAddress) {
            return peerIpAddress(Output.of(peerIpAddress));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder router(Output<String> router) {
            $.router = router;
            return this;
        }

        public Builder router(String router) {
            return router(Output.of(router));
        }

        public RouterPeerArgs build() {
            $.interface_ = Objects.requireNonNull($.interface_, "expected parameter 'interface' to be non-null");
            $.peerAsn = Objects.requireNonNull($.peerAsn, "expected parameter 'peerAsn' to be non-null");
            $.peerIpAddress = Objects.requireNonNull($.peerIpAddress, "expected parameter 'peerIpAddress' to be non-null");
            $.router = Objects.requireNonNull($.router, "expected parameter 'router' to be non-null");
            return $;
        }
    }

}
