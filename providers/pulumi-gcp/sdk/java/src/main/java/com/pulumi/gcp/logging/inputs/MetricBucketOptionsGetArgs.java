// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsExplicitBucketsGetArgs;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsExponentialBucketsGetArgs;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsLinearBucketsGetArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricBucketOptionsGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricBucketOptionsGetArgs Empty = new MetricBucketOptionsGetArgs();

    /**
     * Specifies a set of buckets with arbitrary widths.
     * Structure is documented below.
     * 
     */
    @Import(name="explicitBuckets")
    private @Nullable Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets;

    public Optional<Output<MetricBucketOptionsExplicitBucketsGetArgs>> explicitBuckets() {
        return Optional.ofNullable(this.explicitBuckets);
    }

    /**
     * Specifies an exponential sequence of buckets that have a width that is proportional to the value of
     * the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @Import(name="exponentialBuckets")
    private @Nullable Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets;

    public Optional<Output<MetricBucketOptionsExponentialBucketsGetArgs>> exponentialBuckets() {
        return Optional.ofNullable(this.exponentialBuckets);
    }

    /**
     * Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
     * Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @Import(name="linearBuckets")
    private @Nullable Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets;

    public Optional<Output<MetricBucketOptionsLinearBucketsGetArgs>> linearBuckets() {
        return Optional.ofNullable(this.linearBuckets);
    }

    private MetricBucketOptionsGetArgs() {}

    private MetricBucketOptionsGetArgs(MetricBucketOptionsGetArgs $) {
        this.explicitBuckets = $.explicitBuckets;
        this.exponentialBuckets = $.exponentialBuckets;
        this.linearBuckets = $.linearBuckets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricBucketOptionsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricBucketOptionsGetArgs $;

        public Builder() {
            $ = new MetricBucketOptionsGetArgs();
        }

        public Builder(MetricBucketOptionsGetArgs defaults) {
            $ = new MetricBucketOptionsGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder explicitBuckets(@Nullable Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets) {
            $.explicitBuckets = explicitBuckets;
            return this;
        }

        public Builder explicitBuckets(MetricBucketOptionsExplicitBucketsGetArgs explicitBuckets) {
            return explicitBuckets(Output.of(explicitBuckets));
        }

        public Builder exponentialBuckets(@Nullable Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets) {
            $.exponentialBuckets = exponentialBuckets;
            return this;
        }

        public Builder exponentialBuckets(MetricBucketOptionsExponentialBucketsGetArgs exponentialBuckets) {
            return exponentialBuckets(Output.of(exponentialBuckets));
        }

        public Builder linearBuckets(@Nullable Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets) {
            $.linearBuckets = linearBuckets;
            return this;
        }

        public Builder linearBuckets(MetricBucketOptionsLinearBucketsGetArgs linearBuckets) {
            return linearBuckets(Output.of(linearBuckets));
        }

        public MetricBucketOptionsGetArgs build() {
            return $;
        }
    }

}
