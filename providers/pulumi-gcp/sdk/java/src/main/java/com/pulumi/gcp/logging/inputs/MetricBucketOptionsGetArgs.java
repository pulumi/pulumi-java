// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsExplicitBucketsGetArgs;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsExponentialBucketsGetArgs;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsLinearBucketsGetArgs;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricBucketOptionsGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricBucketOptionsGetArgs Empty = new MetricBucketOptionsGetArgs();

    /**
     * Specifies a set of buckets with arbitrary widths.
     * Structure is documented below.
     * 
     */
    @Import(name="explicitBuckets")
      private final @Nullable Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets;

    public Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets() {
        return this.explicitBuckets == null ? Codegen.empty() : this.explicitBuckets;
    }

    /**
     * Specifies an exponential sequence of buckets that have a width that is proportional to the value of
     * the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @Import(name="exponentialBuckets")
      private final @Nullable Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets;

    public Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets() {
        return this.exponentialBuckets == null ? Codegen.empty() : this.exponentialBuckets;
    }

    /**
     * Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
     * Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @Import(name="linearBuckets")
      private final @Nullable Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets;

    public Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets() {
        return this.linearBuckets == null ? Codegen.empty() : this.linearBuckets;
    }

    public MetricBucketOptionsGetArgs(
        @Nullable Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets,
        @Nullable Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets,
        @Nullable Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets) {
        this.explicitBuckets = explicitBuckets;
        this.exponentialBuckets = exponentialBuckets;
        this.linearBuckets = linearBuckets;
    }

    private MetricBucketOptionsGetArgs() {
        this.explicitBuckets = Codegen.empty();
        this.exponentialBuckets = Codegen.empty();
        this.linearBuckets = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricBucketOptionsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets;
        private @Nullable Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets;
        private @Nullable Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricBucketOptionsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.explicitBuckets = defaults.explicitBuckets;
    	      this.exponentialBuckets = defaults.exponentialBuckets;
    	      this.linearBuckets = defaults.linearBuckets;
        }

        public Builder explicitBuckets(@Nullable Output<MetricBucketOptionsExplicitBucketsGetArgs> explicitBuckets) {
            this.explicitBuckets = explicitBuckets;
            return this;
        }
        public Builder explicitBuckets(@Nullable MetricBucketOptionsExplicitBucketsGetArgs explicitBuckets) {
            this.explicitBuckets = Codegen.ofNullable(explicitBuckets);
            return this;
        }
        public Builder exponentialBuckets(@Nullable Output<MetricBucketOptionsExponentialBucketsGetArgs> exponentialBuckets) {
            this.exponentialBuckets = exponentialBuckets;
            return this;
        }
        public Builder exponentialBuckets(@Nullable MetricBucketOptionsExponentialBucketsGetArgs exponentialBuckets) {
            this.exponentialBuckets = Codegen.ofNullable(exponentialBuckets);
            return this;
        }
        public Builder linearBuckets(@Nullable Output<MetricBucketOptionsLinearBucketsGetArgs> linearBuckets) {
            this.linearBuckets = linearBuckets;
            return this;
        }
        public Builder linearBuckets(@Nullable MetricBucketOptionsLinearBucketsGetArgs linearBuckets) {
            this.linearBuckets = Codegen.ofNullable(linearBuckets);
            return this;
        }        public MetricBucketOptionsGetArgs build() {
            return new MetricBucketOptionsGetArgs(explicitBuckets, exponentialBuckets, linearBuckets);
        }
    }
}
