// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.DatasetAccessViewGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetAccessGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetAccessGetArgs Empty = new DatasetAccessGetArgs();

    /**
     * A domain to grant access to. Any users signed in with the
     * domain specified will be granted the specified access
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * An email address of a Google Group to grant access to.
     * 
     */
    @Import(name="groupByEmail")
    private @Nullable Output<String> groupByEmail;

    public Optional<Output<String>> groupByEmail() {
        return Optional.ofNullable(this.groupByEmail);
    }

    /**
     * Describes the rights granted to the user specified by the other
     * member of the access object. Basic, predefined, and custom roles
     * are supported. Predefined roles that have equivalent basic roles
     * are swapped by the API to their basic counterparts. See
     * [official docs](https://cloud.google.com/bigquery/docs/access-control).
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * A special group to grant access to. Possible values include:
     * 
     */
    @Import(name="specialGroup")
    private @Nullable Output<String> specialGroup;

    public Optional<Output<String>> specialGroup() {
        return Optional.ofNullable(this.specialGroup);
    }

    /**
     * An email address of a user to grant access to. For example:
     * fred@example.com
     * 
     */
    @Import(name="userByEmail")
    private @Nullable Output<String> userByEmail;

    public Optional<Output<String>> userByEmail() {
        return Optional.ofNullable(this.userByEmail);
    }

    /**
     * A view from a different dataset to grant access to. Queries
     * executed against that view will have read access to tables in
     * this dataset. The role field is not required when this field is
     * set. If that view is updated by any user, access to the view
     * needs to be granted again via an update operation.
     * Structure is documented below.
     * 
     */
    @Import(name="view")
    private @Nullable Output<DatasetAccessViewGetArgs> view;

    public Optional<Output<DatasetAccessViewGetArgs>> view() {
        return Optional.ofNullable(this.view);
    }

    private DatasetAccessGetArgs() {}

    private DatasetAccessGetArgs(DatasetAccessGetArgs $) {
        this.domain = $.domain;
        this.groupByEmail = $.groupByEmail;
        this.role = $.role;
        this.specialGroup = $.specialGroup;
        this.userByEmail = $.userByEmail;
        this.view = $.view;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetAccessGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetAccessGetArgs $;

        public Builder() {
            $ = new DatasetAccessGetArgs();
        }

        public Builder(DatasetAccessGetArgs defaults) {
            $ = new DatasetAccessGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder groupByEmail(@Nullable Output<String> groupByEmail) {
            $.groupByEmail = groupByEmail;
            return this;
        }

        public Builder groupByEmail(String groupByEmail) {
            return groupByEmail(Output.of(groupByEmail));
        }

        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder specialGroup(@Nullable Output<String> specialGroup) {
            $.specialGroup = specialGroup;
            return this;
        }

        public Builder specialGroup(String specialGroup) {
            return specialGroup(Output.of(specialGroup));
        }

        public Builder userByEmail(@Nullable Output<String> userByEmail) {
            $.userByEmail = userByEmail;
            return this;
        }

        public Builder userByEmail(String userByEmail) {
            return userByEmail(Output.of(userByEmail));
        }

        public Builder view(@Nullable Output<DatasetAccessViewGetArgs> view) {
            $.view = view;
            return this;
        }

        public Builder view(DatasetAccessViewGetArgs view) {
            return view(Output.of(view));
        }

        public DatasetAccessGetArgs build() {
            return $;
        }
    }

}
