// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.config.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Batching extends com.pulumi.resources.InvokeArgs {

    public static final Batching Empty = new Batching();

    @Import(name="enableBatching")
      private final @Nullable Boolean enableBatching;

    public Optional<Boolean> enableBatching() {
        return this.enableBatching == null ? Optional.empty() : Optional.ofNullable(this.enableBatching);
    }

    @Import(name="sendAfter")
      private final @Nullable String sendAfter;

    public Optional<String> sendAfter() {
        return this.sendAfter == null ? Optional.empty() : Optional.ofNullable(this.sendAfter);
    }

    public Batching(
        @Nullable Boolean enableBatching,
        @Nullable String sendAfter) {
        this.enableBatching = enableBatching;
        this.sendAfter = sendAfter;
    }

    private Batching() {
        this.enableBatching = null;
        this.sendAfter = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Batching defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enableBatching;
        private @Nullable String sendAfter;

        public Builder() {
    	      // Empty
        }

        public Builder(Batching defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableBatching = defaults.enableBatching;
    	      this.sendAfter = defaults.sendAfter;
        }

        public Builder enableBatching(@Nullable Boolean enableBatching) {
            this.enableBatching = enableBatching;
            return this;
        }
        public Builder sendAfter(@Nullable String sendAfter) {
            this.sendAfter = sendAfter;
            return this;
        }        public Batching build() {
            return new Batching(enableBatching, sendAfter);
        }
    }
}
