// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureMembershipState extends com.pulumi.resources.ResourceArgs {

    public static final FeatureMembershipState Empty = new FeatureMembershipState();

    /**
     * Config Management-specific spec. Structure is documented below.
     * 
     */
    @Import(name="configmanagement")
    private @Nullable Output<FeatureMembershipConfigmanagementGetArgs> configmanagement;

    public Optional<Output<FeatureMembershipConfigmanagementGetArgs>> configmanagement() {
        return Optional.ofNullable(this.configmanagement);
    }

    /**
     * The name of the feature
     * 
     */
    @Import(name="feature")
    private @Nullable Output<String> feature;

    public Optional<Output<String>> feature() {
        return Optional.ofNullable(this.feature);
    }

    /**
     * The location of the feature
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the membership
     * 
     */
    @Import(name="membership")
    private @Nullable Output<String> membership;

    public Optional<Output<String>> membership() {
        return Optional.ofNullable(this.membership);
    }

    /**
     * The project of the feature
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private FeatureMembershipState() {}

    private FeatureMembershipState(FeatureMembershipState $) {
        this.configmanagement = $.configmanagement;
        this.feature = $.feature;
        this.location = $.location;
        this.membership = $.membership;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureMembershipState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureMembershipState $;

        public Builder() {
            $ = new FeatureMembershipState();
        }

        public Builder(FeatureMembershipState defaults) {
            $ = new FeatureMembershipState(Objects.requireNonNull(defaults));
        }

        public Builder configmanagement(@Nullable Output<FeatureMembershipConfigmanagementGetArgs> configmanagement) {
            $.configmanagement = configmanagement;
            return this;
        }

        public Builder configmanagement(FeatureMembershipConfigmanagementGetArgs configmanagement) {
            return configmanagement(Output.of(configmanagement));
        }

        public Builder feature(@Nullable Output<String> feature) {
            $.feature = feature;
            return this;
        }

        public Builder feature(String feature) {
            return feature(Output.of(feature));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder membership(@Nullable Output<String> membership) {
            $.membership = membership;
            return this;
        }

        public Builder membership(String membership) {
            return membership(Output.of(membership));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public FeatureMembershipState build() {
            return $;
        }
    }

}
