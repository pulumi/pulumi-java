// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneDatabaseEncryptionGetArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneMainVolumeGetArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneProxyConfigGetArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneReplicaPlacementGetArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneRootVolumeGetArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneSshConfigGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureClusterControlPlaneGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureClusterControlPlaneGetArgs Empty = new AzureClusterControlPlaneGetArgs();

    /**
     * Optional. Configuration related to application-layer secrets encryption.
     * 
     */
    @Import(name="databaseEncryption")
    private @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> databaseEncryption;

    public Optional<Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs>> databaseEncryption() {
        return Optional.ofNullable(this.databaseEncryption);
    }

    /**
     * Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster&#39;s etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
     * 
     */
    @Import(name="mainVolume")
    private @Nullable Output<AzureClusterControlPlaneMainVolumeGetArgs> mainVolume;

    public Optional<Output<AzureClusterControlPlaneMainVolumeGetArgs>> mainVolume() {
        return Optional.ofNullable(this.mainVolume);
    }

    /**
     * Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    @Import(name="proxyConfig")
    private @Nullable Output<AzureClusterControlPlaneProxyConfigGetArgs> proxyConfig;

    public Optional<Output<AzureClusterControlPlaneProxyConfigGetArgs>> proxyConfig() {
        return Optional.ofNullable(this.proxyConfig);
    }

    /**
     * Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
     * 
     */
    @Import(name="replicaPlacements")
    private @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> replicaPlacements;

    public Optional<Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>>> replicaPlacements() {
        return Optional.ofNullable(this.replicaPlacements);
    }

    /**
     * Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
     * 
     */
    @Import(name="rootVolume")
    private @Nullable Output<AzureClusterControlPlaneRootVolumeGetArgs> rootVolume;

    public Optional<Output<AzureClusterControlPlaneRootVolumeGetArgs>> rootVolume() {
        return Optional.ofNullable(this.rootVolume);
    }

    /**
     * Required. SSH configuration for how to access the underlying control plane machines.
     * 
     */
    @Import(name="sshConfig", required=true)
    private Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig;

    public Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig() {
        return this.sshConfig;
    }

    /**
     * For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Optional. A set of tags to apply to all underlying control plane Azure resources.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Required. The Kubernetes version to run on control plane replicas (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    /**
     * Optional. The Azure VM size name. Example: `Standard_DS2_v2`. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to `Standard_DS2_v2`.
     * 
     */
    @Import(name="vmSize")
    private @Nullable Output<String> vmSize;

    public Optional<Output<String>> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    private AzureClusterControlPlaneGetArgs() {}

    private AzureClusterControlPlaneGetArgs(AzureClusterControlPlaneGetArgs $) {
        this.databaseEncryption = $.databaseEncryption;
        this.mainVolume = $.mainVolume;
        this.proxyConfig = $.proxyConfig;
        this.replicaPlacements = $.replicaPlacements;
        this.rootVolume = $.rootVolume;
        this.sshConfig = $.sshConfig;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.version = $.version;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureClusterControlPlaneGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureClusterControlPlaneGetArgs $;

        public Builder() {
            $ = new AzureClusterControlPlaneGetArgs();
        }

        public Builder(AzureClusterControlPlaneGetArgs defaults) {
            $ = new AzureClusterControlPlaneGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseEncryption(@Nullable Output<AzureClusterControlPlaneDatabaseEncryptionGetArgs> databaseEncryption) {
            $.databaseEncryption = databaseEncryption;
            return this;
        }

        public Builder databaseEncryption(AzureClusterControlPlaneDatabaseEncryptionGetArgs databaseEncryption) {
            return databaseEncryption(Output.of(databaseEncryption));
        }

        public Builder mainVolume(@Nullable Output<AzureClusterControlPlaneMainVolumeGetArgs> mainVolume) {
            $.mainVolume = mainVolume;
            return this;
        }

        public Builder mainVolume(AzureClusterControlPlaneMainVolumeGetArgs mainVolume) {
            return mainVolume(Output.of(mainVolume));
        }

        public Builder proxyConfig(@Nullable Output<AzureClusterControlPlaneProxyConfigGetArgs> proxyConfig) {
            $.proxyConfig = proxyConfig;
            return this;
        }

        public Builder proxyConfig(AzureClusterControlPlaneProxyConfigGetArgs proxyConfig) {
            return proxyConfig(Output.of(proxyConfig));
        }

        public Builder replicaPlacements(@Nullable Output<List<AzureClusterControlPlaneReplicaPlacementGetArgs>> replicaPlacements) {
            $.replicaPlacements = replicaPlacements;
            return this;
        }

        public Builder replicaPlacements(List<AzureClusterControlPlaneReplicaPlacementGetArgs> replicaPlacements) {
            return replicaPlacements(Output.of(replicaPlacements));
        }

        public Builder replicaPlacements(AzureClusterControlPlaneReplicaPlacementGetArgs... replicaPlacements) {
            return replicaPlacements(List.of(replicaPlacements));
        }

        public Builder rootVolume(@Nullable Output<AzureClusterControlPlaneRootVolumeGetArgs> rootVolume) {
            $.rootVolume = rootVolume;
            return this;
        }

        public Builder rootVolume(AzureClusterControlPlaneRootVolumeGetArgs rootVolume) {
            return rootVolume(Output.of(rootVolume));
        }

        public Builder sshConfig(Output<AzureClusterControlPlaneSshConfigGetArgs> sshConfig) {
            $.sshConfig = sshConfig;
            return this;
        }

        public Builder sshConfig(AzureClusterControlPlaneSshConfigGetArgs sshConfig) {
            return sshConfig(Output.of(sshConfig));
        }

        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public Builder vmSize(@Nullable Output<String> vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        public Builder vmSize(String vmSize) {
            return vmSize(Output.of(vmSize));
        }

        public AzureClusterControlPlaneGetArgs build() {
            $.sshConfig = Objects.requireNonNull($.sshConfig, "expected parameter 'sshConfig' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
