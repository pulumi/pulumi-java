// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedZoneForwardingConfigTargetNameServerGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedZoneForwardingConfigTargetNameServerGetArgs Empty = new ManagedZoneForwardingConfigTargetNameServerGetArgs();

    /**
     * Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are `default` and `private`.
     * 
     */
    @Import(name="forwardingPath")
    private @Nullable Output<String> forwardingPath;

    public Optional<Output<String>> forwardingPath() {
        return Optional.ofNullable(this.forwardingPath);
    }

    /**
     * IPv4 address of a target name server.
     * 
     */
    @Import(name="ipv4Address", required=true)
    private Output<String> ipv4Address;

    public Output<String> ipv4Address() {
        return this.ipv4Address;
    }

    private ManagedZoneForwardingConfigTargetNameServerGetArgs() {}

    private ManagedZoneForwardingConfigTargetNameServerGetArgs(ManagedZoneForwardingConfigTargetNameServerGetArgs $) {
        this.forwardingPath = $.forwardingPath;
        this.ipv4Address = $.ipv4Address;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZoneForwardingConfigTargetNameServerGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZoneForwardingConfigTargetNameServerGetArgs $;

        public Builder() {
            $ = new ManagedZoneForwardingConfigTargetNameServerGetArgs();
        }

        public Builder(ManagedZoneForwardingConfigTargetNameServerGetArgs defaults) {
            $ = new ManagedZoneForwardingConfigTargetNameServerGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder forwardingPath(@Nullable Output<String> forwardingPath) {
            $.forwardingPath = forwardingPath;
            return this;
        }

        public Builder forwardingPath(String forwardingPath) {
            return forwardingPath(Output.of(forwardingPath));
        }

        public Builder ipv4Address(Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        public ManagedZoneForwardingConfigTargetNameServerGetArgs build() {
            $.ipv4Address = Objects.requireNonNull($.ipv4Address, "expected parameter 'ipv4Address' to be non-null");
            return $;
        }
    }

}
