// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkPeeringState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkPeeringState Empty = new NetworkPeeringState();

    /**
     * Whether to export the custom routes to the peer network. Defaults to `false`.
     * 
     */
    @Import(name="exportCustomRoutes")
    private @Nullable Output<Boolean> exportCustomRoutes;

    public Optional<Output<Boolean>> exportCustomRoutes() {
        return Optional.ofNullable(this.exportCustomRoutes);
    }

    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     * 
     */
    @Import(name="exportSubnetRoutesWithPublicIp")
    private @Nullable Output<Boolean> exportSubnetRoutesWithPublicIp;

    public Optional<Output<Boolean>> exportSubnetRoutesWithPublicIp() {
        return Optional.ofNullable(this.exportSubnetRoutesWithPublicIp);
    }

    /**
     * Whether to import the custom routes from the peer network. Defaults to `false`.
     * 
     */
    @Import(name="importCustomRoutes")
    private @Nullable Output<Boolean> importCustomRoutes;

    public Optional<Output<Boolean>> importCustomRoutes() {
        return Optional.ofNullable(this.importCustomRoutes);
    }

    /**
     * Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
     * 
     */
    @Import(name="importSubnetRoutesWithPublicIp")
    private @Nullable Output<Boolean> importSubnetRoutesWithPublicIp;

    public Optional<Output<Boolean>> importSubnetRoutesWithPublicIp() {
        return Optional.ofNullable(this.importSubnetRoutesWithPublicIp);
    }

    /**
     * Name of the peering.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The primary network of the peering.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The peer network in the peering. The peer network
     * may belong to a different project.
     * 
     */
    @Import(name="peerNetwork")
    private @Nullable Output<String> peerNetwork;

    public Optional<Output<String>> peerNetwork() {
        return Optional.ofNullable(this.peerNetwork);
    }

    /**
     * State for the peering, either `ACTIVE` or `INACTIVE`. The peering is
     * `ACTIVE` when there&#39;s a matching configuration in the peer network.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Details about the current state of the peering.
     * 
     */
    @Import(name="stateDetails")
    private @Nullable Output<String> stateDetails;

    public Optional<Output<String>> stateDetails() {
        return Optional.ofNullable(this.stateDetails);
    }

    private NetworkPeeringState() {}

    private NetworkPeeringState(NetworkPeeringState $) {
        this.exportCustomRoutes = $.exportCustomRoutes;
        this.exportSubnetRoutesWithPublicIp = $.exportSubnetRoutesWithPublicIp;
        this.importCustomRoutes = $.importCustomRoutes;
        this.importSubnetRoutesWithPublicIp = $.importSubnetRoutesWithPublicIp;
        this.name = $.name;
        this.network = $.network;
        this.peerNetwork = $.peerNetwork;
        this.state = $.state;
        this.stateDetails = $.stateDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkPeeringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkPeeringState $;

        public Builder() {
            $ = new NetworkPeeringState();
        }

        public Builder(NetworkPeeringState defaults) {
            $ = new NetworkPeeringState(Objects.requireNonNull(defaults));
        }

        public Builder exportCustomRoutes(@Nullable Output<Boolean> exportCustomRoutes) {
            $.exportCustomRoutes = exportCustomRoutes;
            return this;
        }

        public Builder exportCustomRoutes(Boolean exportCustomRoutes) {
            return exportCustomRoutes(Output.of(exportCustomRoutes));
        }

        public Builder exportSubnetRoutesWithPublicIp(@Nullable Output<Boolean> exportSubnetRoutesWithPublicIp) {
            $.exportSubnetRoutesWithPublicIp = exportSubnetRoutesWithPublicIp;
            return this;
        }

        public Builder exportSubnetRoutesWithPublicIp(Boolean exportSubnetRoutesWithPublicIp) {
            return exportSubnetRoutesWithPublicIp(Output.of(exportSubnetRoutesWithPublicIp));
        }

        public Builder importCustomRoutes(@Nullable Output<Boolean> importCustomRoutes) {
            $.importCustomRoutes = importCustomRoutes;
            return this;
        }

        public Builder importCustomRoutes(Boolean importCustomRoutes) {
            return importCustomRoutes(Output.of(importCustomRoutes));
        }

        public Builder importSubnetRoutesWithPublicIp(@Nullable Output<Boolean> importSubnetRoutesWithPublicIp) {
            $.importSubnetRoutesWithPublicIp = importSubnetRoutesWithPublicIp;
            return this;
        }

        public Builder importSubnetRoutesWithPublicIp(Boolean importSubnetRoutesWithPublicIp) {
            return importSubnetRoutesWithPublicIp(Output.of(importSubnetRoutesWithPublicIp));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        public Builder network(String network) {
            return network(Output.of(network));
        }

        public Builder peerNetwork(@Nullable Output<String> peerNetwork) {
            $.peerNetwork = peerNetwork;
            return this;
        }

        public Builder peerNetwork(String peerNetwork) {
            return peerNetwork(Output.of(peerNetwork));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder stateDetails(@Nullable Output<String> stateDetails) {
            $.stateDetails = stateDetails;
            return this;
        }

        public Builder stateDetails(String stateDetails) {
            return stateDetails(Output.of(stateDetails));
        }

        public NetworkPeeringState build() {
            return $;
        }
    }

}
