// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleMatchGetArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPolicyRuleGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyRuleGetArgs Empty = new SecurityPolicyRuleGetArgs();

    /**
     * Action to take when `match` matches the request. Valid values:
     * * &#34;allow&#34; : allow access to target
     * * &#34;deny(status)&#34; : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
     * * &#34;rate_based_ban&#34; : limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * &#34;threshold&#34; : limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to take when `match` matches the request. Valid values:
     * * &#34;allow&#34; : allow access to target
     * * &#34;deny(status)&#34; : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
     * * &#34;rate_based_ban&#34; : limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * &#34;threshold&#34; : limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * An optional description of this rule. Max size is 64.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this rule. Max size is 64.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
     * 
     */
    @Import(name="match", required=true)
    private Output<SecurityPolicyRuleMatchGetArgs> match;

    /**
     * @return A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
     * 
     */
    public Output<SecurityPolicyRuleMatchGetArgs> match() {
        return this.match;
    }

    /**
     * When set to true, the `action` specified above is not enforced.
     * Stackdriver logs for requests that trigger a preview action are annotated as such.
     * 
     */
    @Import(name="preview")
    private @Nullable Output<Boolean> preview;

    /**
     * @return When set to true, the `action` specified above is not enforced.
     * Stackdriver logs for requests that trigger a preview action are annotated as such.
     * 
     */
    public Optional<Output<Boolean>> preview() {
        return Optional.ofNullable(this.preview);
    }

    /**
     * An unique positive integer indicating the priority of evaluation for a rule.
     * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return An unique positive integer indicating the priority of evaluation for a rule.
     * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * )
     * Must be specified if the `action` is &#34;rate_based_bad&#34; or &#34;throttle&#34;. Cannot be specified for other actions. Structure is documented below.
     * 
     */
    @Import(name="rateLimitOptions")
    private @Nullable Output<SecurityPolicyRuleRateLimitOptionsGetArgs> rateLimitOptions;

    /**
     * @return )
     * Must be specified if the `action` is &#34;rate_based_bad&#34; or &#34;throttle&#34;. Cannot be specified for other actions. Structure is documented below.
     * 
     */
    public Optional<Output<SecurityPolicyRuleRateLimitOptionsGetArgs>> rateLimitOptions() {
        return Optional.ofNullable(this.rateLimitOptions);
    }

    private SecurityPolicyRuleGetArgs() {}

    private SecurityPolicyRuleGetArgs(SecurityPolicyRuleGetArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.match = $.match;
        this.preview = $.preview;
        this.priority = $.priority;
        this.rateLimitOptions = $.rateLimitOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyRuleGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyRuleGetArgs $;

        public Builder() {
            $ = new SecurityPolicyRuleGetArgs();
        }

        public Builder(SecurityPolicyRuleGetArgs defaults) {
            $ = new SecurityPolicyRuleGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to take when `match` matches the request. Valid values:
         * * &#34;allow&#34; : allow access to target
         * * &#34;deny(status)&#34; : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
         * * &#34;rate_based_ban&#34; : limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
         * * &#34;threshold&#34; : limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to take when `match` matches the request. Valid values:
         * * &#34;allow&#34; : allow access to target
         * * &#34;deny(status)&#34; : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
         * * &#34;rate_based_ban&#34; : limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
         * * &#34;threshold&#34; : limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description An optional description of this rule. Max size is 64.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this rule. Max size is 64.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param match A match condition that incoming traffic is evaluated against.
         * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder match(Output<SecurityPolicyRuleMatchGetArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match A match condition that incoming traffic is evaluated against.
         * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder match(SecurityPolicyRuleMatchGetArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param preview When set to true, the `action` specified above is not enforced.
         * Stackdriver logs for requests that trigger a preview action are annotated as such.
         * 
         * @return builder
         * 
         */
        public Builder preview(@Nullable Output<Boolean> preview) {
            $.preview = preview;
            return this;
        }

        /**
         * @param preview When set to true, the `action` specified above is not enforced.
         * Stackdriver logs for requests that trigger a preview action are annotated as such.
         * 
         * @return builder
         * 
         */
        public Builder preview(Boolean preview) {
            return preview(Output.of(preview));
        }

        /**
         * @param priority An unique positive integer indicating the priority of evaluation for a rule.
         * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority An unique positive integer indicating the priority of evaluation for a rule.
         * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param rateLimitOptions )
         * Must be specified if the `action` is &#34;rate_based_bad&#34; or &#34;throttle&#34;. Cannot be specified for other actions. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitOptions(@Nullable Output<SecurityPolicyRuleRateLimitOptionsGetArgs> rateLimitOptions) {
            $.rateLimitOptions = rateLimitOptions;
            return this;
        }

        /**
         * @param rateLimitOptions )
         * Must be specified if the `action` is &#34;rate_based_bad&#34; or &#34;throttle&#34;. Cannot be specified for other actions. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitOptions(SecurityPolicyRuleRateLimitOptionsGetArgs rateLimitOptions) {
            return rateLimitOptions(Output.of(rateLimitOptions));
        }

        public SecurityPolicyRuleGetArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.match = Objects.requireNonNull($.match, "expected parameter 'match' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            return $;
        }
    }

}
