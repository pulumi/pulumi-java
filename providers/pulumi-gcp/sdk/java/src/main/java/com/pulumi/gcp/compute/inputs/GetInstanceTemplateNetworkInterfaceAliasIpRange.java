// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetInstanceTemplateNetworkInterfaceAliasIpRange extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceTemplateNetworkInterfaceAliasIpRange Empty = new GetInstanceTemplateNetworkInterfaceAliasIpRange();

    /**
     * The IP CIDR range represented by this alias IP range. This IP CIDR range
     * must belong to the specified subnetwork and cannot contain IP addresses reserved by
     * system or used by other network interfaces. At the time of writing only a
     * netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
     * error.
     * 
     */
    @Import(name="ipCidrRange", required=true)
    private String ipCidrRange;

    /**
     * @return The IP CIDR range represented by this alias IP range. This IP CIDR range
     * must belong to the specified subnetwork and cannot contain IP addresses reserved by
     * system or used by other network interfaces. At the time of writing only a
     * netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
     * error.
     * 
     */
    public String ipCidrRange() {
        return this.ipCidrRange;
    }

    /**
     * The subnetwork secondary range name specifying
     * the secondary range from which to allocate the IP CIDR range for this alias IP
     * range. If left unspecified, the primary range of the subnetwork will be used.
     * 
     */
    @Import(name="subnetworkRangeName", required=true)
    private String subnetworkRangeName;

    /**
     * @return The subnetwork secondary range name specifying
     * the secondary range from which to allocate the IP CIDR range for this alias IP
     * range. If left unspecified, the primary range of the subnetwork will be used.
     * 
     */
    public String subnetworkRangeName() {
        return this.subnetworkRangeName;
    }

    private GetInstanceTemplateNetworkInterfaceAliasIpRange() {}

    private GetInstanceTemplateNetworkInterfaceAliasIpRange(GetInstanceTemplateNetworkInterfaceAliasIpRange $) {
        this.ipCidrRange = $.ipCidrRange;
        this.subnetworkRangeName = $.subnetworkRangeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceTemplateNetworkInterfaceAliasIpRange defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceTemplateNetworkInterfaceAliasIpRange $;

        public Builder() {
            $ = new GetInstanceTemplateNetworkInterfaceAliasIpRange();
        }

        public Builder(GetInstanceTemplateNetworkInterfaceAliasIpRange defaults) {
            $ = new GetInstanceTemplateNetworkInterfaceAliasIpRange(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipCidrRange The IP CIDR range represented by this alias IP range. This IP CIDR range
         * must belong to the specified subnetwork and cannot contain IP addresses reserved by
         * system or used by other network interfaces. At the time of writing only a
         * netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
         * error.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(String ipCidrRange) {
            $.ipCidrRange = ipCidrRange;
            return this;
        }

        /**
         * @param subnetworkRangeName The subnetwork secondary range name specifying
         * the secondary range from which to allocate the IP CIDR range for this alias IP
         * range. If left unspecified, the primary range of the subnetwork will be used.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkRangeName(String subnetworkRangeName) {
            $.subnetworkRangeName = subnetworkRangeName;
            return this;
        }

        public GetInstanceTemplateNetworkInterfaceAliasIpRange build() {
            $.ipCidrRange = Objects.requireNonNull($.ipCidrRange, "expected parameter 'ipCidrRange' to be non-null");
            $.subnetworkRangeName = Objects.requireNonNull($.subnetworkRangeName, "expected parameter 'subnetworkRangeName' to be non-null");
            return $;
        }
    }

}
