// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendServiceCdnPolicyCacheKeyPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendServiceCdnPolicyCacheKeyPolicyArgs Empty = new BackendServiceCdnPolicyCacheKeyPolicyArgs();

    /**
     * If true requests to different hosts will be cached separately.
     * 
     */
    @Import(name="includeHost")
    private @Nullable Output<Boolean> includeHost;

    public Optional<Output<Boolean>> includeHost() {
        return Optional.ofNullable(this.includeHost);
    }

    /**
     * If true, http and https requests will be cached separately.
     * 
     */
    @Import(name="includeProtocol")
    private @Nullable Output<Boolean> includeProtocol;

    public Optional<Output<Boolean>> includeProtocol() {
        return Optional.ofNullable(this.includeProtocol);
    }

    /**
     * If true, include query string parameters in the cache key
     * according to query_string_whitelist and
     * query_string_blacklist. If neither is set, the entire query
     * string will be included.
     * If false, the query string will be excluded from the cache
     * key entirely.
     * 
     */
    @Import(name="includeQueryString")
    private @Nullable Output<Boolean> includeQueryString;

    public Optional<Output<Boolean>> includeQueryString() {
        return Optional.ofNullable(this.includeQueryString);
    }

    /**
     * Names of query string parameters to exclude in cache keys.
     * All other parameters will be included. Either specify
     * query_string_whitelist or query_string_blacklist, not both.
     * &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as
     * delimiters.
     * 
     */
    @Import(name="queryStringBlacklists")
    private @Nullable Output<List<String>> queryStringBlacklists;

    public Optional<Output<List<String>>> queryStringBlacklists() {
        return Optional.ofNullable(this.queryStringBlacklists);
    }

    /**
     * Names of query string parameters to include in cache keys.
     * All other parameters will be excluded. Either specify
     * query_string_whitelist or query_string_blacklist, not both.
     * &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as
     * delimiters.
     * 
     */
    @Import(name="queryStringWhitelists")
    private @Nullable Output<List<String>> queryStringWhitelists;

    public Optional<Output<List<String>>> queryStringWhitelists() {
        return Optional.ofNullable(this.queryStringWhitelists);
    }

    private BackendServiceCdnPolicyCacheKeyPolicyArgs() {}

    private BackendServiceCdnPolicyCacheKeyPolicyArgs(BackendServiceCdnPolicyCacheKeyPolicyArgs $) {
        this.includeHost = $.includeHost;
        this.includeProtocol = $.includeProtocol;
        this.includeQueryString = $.includeQueryString;
        this.queryStringBlacklists = $.queryStringBlacklists;
        this.queryStringWhitelists = $.queryStringWhitelists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendServiceCdnPolicyCacheKeyPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendServiceCdnPolicyCacheKeyPolicyArgs $;

        public Builder() {
            $ = new BackendServiceCdnPolicyCacheKeyPolicyArgs();
        }

        public Builder(BackendServiceCdnPolicyCacheKeyPolicyArgs defaults) {
            $ = new BackendServiceCdnPolicyCacheKeyPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder includeHost(@Nullable Output<Boolean> includeHost) {
            $.includeHost = includeHost;
            return this;
        }

        public Builder includeHost(Boolean includeHost) {
            return includeHost(Output.of(includeHost));
        }

        public Builder includeProtocol(@Nullable Output<Boolean> includeProtocol) {
            $.includeProtocol = includeProtocol;
            return this;
        }

        public Builder includeProtocol(Boolean includeProtocol) {
            return includeProtocol(Output.of(includeProtocol));
        }

        public Builder includeQueryString(@Nullable Output<Boolean> includeQueryString) {
            $.includeQueryString = includeQueryString;
            return this;
        }

        public Builder includeQueryString(Boolean includeQueryString) {
            return includeQueryString(Output.of(includeQueryString));
        }

        public Builder queryStringBlacklists(@Nullable Output<List<String>> queryStringBlacklists) {
            $.queryStringBlacklists = queryStringBlacklists;
            return this;
        }

        public Builder queryStringBlacklists(List<String> queryStringBlacklists) {
            return queryStringBlacklists(Output.of(queryStringBlacklists));
        }

        public Builder queryStringBlacklists(String... queryStringBlacklists) {
            return queryStringBlacklists(List.of(queryStringBlacklists));
        }

        public Builder queryStringWhitelists(@Nullable Output<List<String>> queryStringWhitelists) {
            $.queryStringWhitelists = queryStringWhitelists;
            return this;
        }

        public Builder queryStringWhitelists(List<String> queryStringWhitelists) {
            return queryStringWhitelists(Output.of(queryStringWhitelists));
        }

        public Builder queryStringWhitelists(String... queryStringWhitelists) {
            return queryStringWhitelists(List.of(queryStringWhitelists));
        }

        public BackendServiceCdnPolicyCacheKeyPolicyArgs build() {
            return $;
        }
    }

}
