// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.GetClusterMasterAuthorizedNetworksConfigCidrBlock;
import java.util.List;
import java.util.Objects;


public final class GetClusterMasterAuthorizedNetworksConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetClusterMasterAuthorizedNetworksConfig Empty = new GetClusterMasterAuthorizedNetworksConfig();

    @Import(name="cidrBlocks", required=true)
    private List<GetClusterMasterAuthorizedNetworksConfigCidrBlock> cidrBlocks;

    public List<GetClusterMasterAuthorizedNetworksConfigCidrBlock> cidrBlocks() {
        return this.cidrBlocks;
    }

    private GetClusterMasterAuthorizedNetworksConfig() {}

    private GetClusterMasterAuthorizedNetworksConfig(GetClusterMasterAuthorizedNetworksConfig $) {
        this.cidrBlocks = $.cidrBlocks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClusterMasterAuthorizedNetworksConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClusterMasterAuthorizedNetworksConfig $;

        public Builder() {
            $ = new GetClusterMasterAuthorizedNetworksConfig();
        }

        public Builder(GetClusterMasterAuthorizedNetworksConfig defaults) {
            $ = new GetClusterMasterAuthorizedNetworksConfig(Objects.requireNonNull(defaults));
        }

        public Builder cidrBlocks(List<GetClusterMasterAuthorizedNetworksConfigCidrBlock> cidrBlocks) {
            $.cidrBlocks = cidrBlocks;
            return this;
        }

        public Builder cidrBlocks(GetClusterMasterAuthorizedNetworksConfigCidrBlock... cidrBlocks) {
            return cidrBlocks(List.of(cidrBlocks));
        }

        public GetClusterMasterAuthorizedNetworksConfig build() {
            $.cidrBlocks = Objects.requireNonNull($.cidrBlocks, "expected parameter 'cidrBlocks' to be non-null");
            return $;
        }
    }

}
