// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleMatchArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecurityPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyRuleArgs Empty = new SecurityPolicyRuleArgs();

    /**
     * Action to take when `match` matches the request. Valid values:
     * * "allow" : allow access to target
     * * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
     * * "rate_based_ban" : limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * "threshold" : limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    @Import(name="action", required=true)
      private final Output<String> action;

    public Output<String> action() {
        return this.action;
    }

    /**
     * An optional description of this rule. Max size is 64.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
     * 
     */
    @Import(name="match", required=true)
      private final Output<SecurityPolicyRuleMatchArgs> match;

    public Output<SecurityPolicyRuleMatchArgs> match() {
        return this.match;
    }

    /**
     * When set to true, the `action` specified above is not enforced.
     * Stackdriver logs for requests that trigger a preview action are annotated as such.
     * 
     */
    @Import(name="preview")
      private final @Nullable Output<Boolean> preview;

    public Output<Boolean> preview() {
        return this.preview == null ? Codegen.empty() : this.preview;
    }

    /**
     * An unique positive integer indicating the priority of evaluation for a rule.
     * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
     * 
     */
    @Import(name="priority", required=true)
      private final Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * )
     * Must be specified if the `action` is "rate_based_bad" or "throttle". Cannot be specified for other actions. Structure is documented below.
     * 
     */
    @Import(name="rateLimitOptions")
      private final @Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions;

    public Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions() {
        return this.rateLimitOptions == null ? Codegen.empty() : this.rateLimitOptions;
    }

    public SecurityPolicyRuleArgs(
        Output<String> action,
        @Nullable Output<String> description,
        Output<SecurityPolicyRuleMatchArgs> match,
        @Nullable Output<Boolean> preview,
        Output<Integer> priority,
        @Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.description = description;
        this.match = Objects.requireNonNull(match, "expected parameter 'match' to be non-null");
        this.preview = preview;
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.rateLimitOptions = rateLimitOptions;
    }

    private SecurityPolicyRuleArgs() {
        this.action = Codegen.empty();
        this.description = Codegen.empty();
        this.match = Codegen.empty();
        this.preview = Codegen.empty();
        this.priority = Codegen.empty();
        this.rateLimitOptions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> action;
        private @Nullable Output<String> description;
        private Output<SecurityPolicyRuleMatchArgs> match;
        private @Nullable Output<Boolean> preview;
        private Output<Integer> priority;
        private @Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityPolicyRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.match = defaults.match;
    	      this.preview = defaults.preview;
    	      this.priority = defaults.priority;
    	      this.rateLimitOptions = defaults.rateLimitOptions;
        }

        public Builder action(Output<String> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder action(String action) {
            this.action = Output.of(Objects.requireNonNull(action));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder match(Output<SecurityPolicyRuleMatchArgs> match) {
            this.match = Objects.requireNonNull(match);
            return this;
        }
        public Builder match(SecurityPolicyRuleMatchArgs match) {
            this.match = Output.of(Objects.requireNonNull(match));
            return this;
        }
        public Builder preview(@Nullable Output<Boolean> preview) {
            this.preview = preview;
            return this;
        }
        public Builder preview(@Nullable Boolean preview) {
            this.preview = Codegen.ofNullable(preview);
            return this;
        }
        public Builder priority(Output<Integer> priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder priority(Integer priority) {
            this.priority = Output.of(Objects.requireNonNull(priority));
            return this;
        }
        public Builder rateLimitOptions(@Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions) {
            this.rateLimitOptions = rateLimitOptions;
            return this;
        }
        public Builder rateLimitOptions(@Nullable SecurityPolicyRuleRateLimitOptionsArgs rateLimitOptions) {
            this.rateLimitOptions = Codegen.ofNullable(rateLimitOptions);
            return this;
        }        public SecurityPolicyRuleArgs build() {
            return new SecurityPolicyRuleArgs(action, description, match, preview, priority, rateLimitOptions);
        }
    }
}
