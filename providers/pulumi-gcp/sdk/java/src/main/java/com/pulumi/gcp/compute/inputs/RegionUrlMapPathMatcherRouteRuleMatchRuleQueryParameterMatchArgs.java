// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs Empty = new RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs();

    /**
     * The queryParameterMatch matches if the value of the parameter exactly matches
     * the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
     * must be set.
     * 
     */
    @Import(name="exactMatch")
      private final @Nullable Output<String> exactMatch;

    public Output<String> exactMatch() {
        return this.exactMatch == null ? Codegen.empty() : this.exactMatch;
    }

    /**
     * The name of the query parameter to match. The query parameter must exist in the
     * request, in the absence of which the request match fails.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies that the queryParameterMatch matches if the request contains the query
     * parameter, irrespective of whether the parameter has a value or not. Only one of
     * presentMatch, exactMatch and regexMatch must be set.
     * 
     */
    @Import(name="presentMatch")
      private final @Nullable Output<Boolean> presentMatch;

    public Output<Boolean> presentMatch() {
        return this.presentMatch == null ? Codegen.empty() : this.presentMatch;
    }

    /**
     * The queryParameterMatch matches if the value of the parameter matches the
     * regular expression specified by regexMatch. For the regular expression grammar,
     * please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
     * exactMatch and regexMatch must be set.
     * 
     */
    @Import(name="regexMatch")
      private final @Nullable Output<String> regexMatch;

    public Output<String> regexMatch() {
        return this.regexMatch == null ? Codegen.empty() : this.regexMatch;
    }

    public RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs(
        @Nullable Output<String> exactMatch,
        Output<String> name,
        @Nullable Output<Boolean> presentMatch,
        @Nullable Output<String> regexMatch) {
        this.exactMatch = exactMatch;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.presentMatch = presentMatch;
        this.regexMatch = regexMatch;
    }

    private RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs() {
        this.exactMatch = Codegen.empty();
        this.name = Codegen.empty();
        this.presentMatch = Codegen.empty();
        this.regexMatch = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> exactMatch;
        private Output<String> name;
        private @Nullable Output<Boolean> presentMatch;
        private @Nullable Output<String> regexMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exactMatch = defaults.exactMatch;
    	      this.name = defaults.name;
    	      this.presentMatch = defaults.presentMatch;
    	      this.regexMatch = defaults.regexMatch;
        }

        public Builder exactMatch(@Nullable Output<String> exactMatch) {
            this.exactMatch = exactMatch;
            return this;
        }
        public Builder exactMatch(@Nullable String exactMatch) {
            this.exactMatch = Codegen.ofNullable(exactMatch);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder presentMatch(@Nullable Output<Boolean> presentMatch) {
            this.presentMatch = presentMatch;
            return this;
        }
        public Builder presentMatch(@Nullable Boolean presentMatch) {
            this.presentMatch = Codegen.ofNullable(presentMatch);
            return this;
        }
        public Builder regexMatch(@Nullable Output<String> regexMatch) {
            this.regexMatch = regexMatch;
            return this;
        }
        public Builder regexMatch(@Nullable String regexMatch) {
            this.regexMatch = Codegen.ofNullable(regexMatch);
            return this;
        }        public RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs build() {
            return new RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs(exactMatch, name, presentMatch, regexMatch);
        }
    }
}
