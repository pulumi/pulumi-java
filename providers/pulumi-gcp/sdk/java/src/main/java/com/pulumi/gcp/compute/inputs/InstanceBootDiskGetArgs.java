// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceBootDiskGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceBootDiskGetArgs Empty = new InstanceBootDiskGetArgs();

    /**
     * Whether the disk will be auto-deleted when the instance
     * is deleted. Defaults to true.
     * 
     */
    @Import(name="autoDelete")
    private @Nullable Output<Boolean> autoDelete;

    public Optional<Output<Boolean>> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }

    /**
     * Name with which the attached disk will be accessible
     * under `/dev/disk/by-id/google-*`
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * A 256-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
     * encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * to encrypt this disk. Only one of `kms_key_self_link` and `disk_encryption_key_raw` may be set.
     * 
     */
    @Import(name="diskEncryptionKeyRaw")
    private @Nullable Output<String> diskEncryptionKeyRaw;

    public Optional<Output<String>> diskEncryptionKeyRaw() {
        return Optional.ofNullable(this.diskEncryptionKeyRaw);
    }

    @Import(name="diskEncryptionKeySha256")
    private @Nullable Output<String> diskEncryptionKeySha256;

    public Optional<Output<String>> diskEncryptionKeySha256() {
        return Optional.ofNullable(this.diskEncryptionKeySha256);
    }

    /**
     * Parameters for a new disk that will be created
     * alongside the new instance. Either `initialize_params` or `source` must be set.
     * Structure is documented below.
     * 
     */
    @Import(name="initializeParams")
    private @Nullable Output<InstanceBootDiskInitializeParamsGetArgs> initializeParams;

    public Optional<Output<InstanceBootDiskInitializeParamsGetArgs>> initializeParams() {
        return Optional.ofNullable(this.initializeParams);
    }

    /**
     * The self_link of the encryption key that is
     * stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`
     * and `disk_encryption_key_raw` may be set.
     * 
     */
    @Import(name="kmsKeySelfLink")
    private @Nullable Output<String> kmsKeySelfLink;

    public Optional<Output<String>> kmsKeySelfLink() {
        return Optional.ofNullable(this.kmsKeySelfLink);
    }

    /**
     * Either &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;, defaults to &#34;READ_WRITE&#34;
     * If you have a persistent disk with data that you want to share
     * between multiple instances, detach it from any read-write instances and
     * attach it to one or more instances in read-only mode.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name or self_link of the disk to attach to this instance.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private InstanceBootDiskGetArgs() {}

    private InstanceBootDiskGetArgs(InstanceBootDiskGetArgs $) {
        this.autoDelete = $.autoDelete;
        this.deviceName = $.deviceName;
        this.diskEncryptionKeyRaw = $.diskEncryptionKeyRaw;
        this.diskEncryptionKeySha256 = $.diskEncryptionKeySha256;
        this.initializeParams = $.initializeParams;
        this.kmsKeySelfLink = $.kmsKeySelfLink;
        this.mode = $.mode;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceBootDiskGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceBootDiskGetArgs $;

        public Builder() {
            $ = new InstanceBootDiskGetArgs();
        }

        public Builder(InstanceBootDiskGetArgs defaults) {
            $ = new InstanceBootDiskGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoDelete(@Nullable Output<Boolean> autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        public Builder autoDelete(Boolean autoDelete) {
            return autoDelete(Output.of(autoDelete));
        }

        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        public Builder diskEncryptionKeyRaw(@Nullable Output<String> diskEncryptionKeyRaw) {
            $.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            return this;
        }

        public Builder diskEncryptionKeyRaw(String diskEncryptionKeyRaw) {
            return diskEncryptionKeyRaw(Output.of(diskEncryptionKeyRaw));
        }

        public Builder diskEncryptionKeySha256(@Nullable Output<String> diskEncryptionKeySha256) {
            $.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            return this;
        }

        public Builder diskEncryptionKeySha256(String diskEncryptionKeySha256) {
            return diskEncryptionKeySha256(Output.of(diskEncryptionKeySha256));
        }

        public Builder initializeParams(@Nullable Output<InstanceBootDiskInitializeParamsGetArgs> initializeParams) {
            $.initializeParams = initializeParams;
            return this;
        }

        public Builder initializeParams(InstanceBootDiskInitializeParamsGetArgs initializeParams) {
            return initializeParams(Output.of(initializeParams));
        }

        public Builder kmsKeySelfLink(@Nullable Output<String> kmsKeySelfLink) {
            $.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }

        public Builder kmsKeySelfLink(String kmsKeySelfLink) {
            return kmsKeySelfLink(Output.of(kmsKeySelfLink));
        }

        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public InstanceBootDiskGetArgs build() {
            return $;
        }
    }

}
