// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigGetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AiFeatureStoreEntityTypeState extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureStoreEntityTypeState Empty = new AiFeatureStoreEntityTypeState();

    /**
     * The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     * 
     */
    @Import(name="createTime")
      private final @Nullable Output<String> createTime;

    public Output<String> createTime() {
        return this.createTime == null ? Codegen.empty() : this.createTime;
    }

    /**
     * Used to perform consistent read-modify-write updates.
     * 
     */
    @Import(name="etag")
      private final @Nullable Output<String> etag;

    public Output<String> etag() {
        return this.etag == null ? Codegen.empty() : this.etag;
    }

    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
     * 
     */
    @Import(name="featurestore")
      private final @Nullable Output<String> featurestore;

    public Output<String> featurestore() {
        return this.featurestore == null ? Codegen.empty() : this.featurestore;
    }

    /**
     * A set of key/value label pairs to assign to this EntityType.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The default monitoring configuration for all Features under this EntityType.
     * If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
     * Structure is documented below.
     * 
     */
    @Import(name="monitoringConfig")
      private final @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigGetArgs> monitoringConfig;

    public Output<AiFeatureStoreEntityTypeMonitoringConfigGetArgs> monitoringConfig() {
        return this.monitoringConfig == null ? Codegen.empty() : this.monitoringConfig;
    }

    /**
     * The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     * 
     */
    @Import(name="updateTime")
      private final @Nullable Output<String> updateTime;

    public Output<String> updateTime() {
        return this.updateTime == null ? Codegen.empty() : this.updateTime;
    }

    public AiFeatureStoreEntityTypeState(
        @Nullable Output<String> createTime,
        @Nullable Output<String> etag,
        @Nullable Output<String> featurestore,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigGetArgs> monitoringConfig,
        @Nullable Output<String> name,
        @Nullable Output<String> updateTime) {
        this.createTime = createTime;
        this.etag = etag;
        this.featurestore = featurestore;
        this.labels = labels;
        this.monitoringConfig = monitoringConfig;
        this.name = name;
        this.updateTime = updateTime;
    }

    private AiFeatureStoreEntityTypeState() {
        this.createTime = Codegen.empty();
        this.etag = Codegen.empty();
        this.featurestore = Codegen.empty();
        this.labels = Codegen.empty();
        this.monitoringConfig = Codegen.empty();
        this.name = Codegen.empty();
        this.updateTime = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiFeatureStoreEntityTypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createTime;
        private @Nullable Output<String> etag;
        private @Nullable Output<String> featurestore;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigGetArgs> monitoringConfig;
        private @Nullable Output<String> name;
        private @Nullable Output<String> updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(AiFeatureStoreEntityTypeState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.etag = defaults.etag;
    	      this.featurestore = defaults.featurestore;
    	      this.labels = defaults.labels;
    	      this.monitoringConfig = defaults.monitoringConfig;
    	      this.name = defaults.name;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            this.createTime = createTime;
            return this;
        }
        public Builder createTime(@Nullable String createTime) {
            this.createTime = Codegen.ofNullable(createTime);
            return this;
        }
        public Builder etag(@Nullable Output<String> etag) {
            this.etag = etag;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = Codegen.ofNullable(etag);
            return this;
        }
        public Builder featurestore(@Nullable Output<String> featurestore) {
            this.featurestore = featurestore;
            return this;
        }
        public Builder featurestore(@Nullable String featurestore) {
            this.featurestore = Codegen.ofNullable(featurestore);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder monitoringConfig(@Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigGetArgs> monitoringConfig) {
            this.monitoringConfig = monitoringConfig;
            return this;
        }
        public Builder monitoringConfig(@Nullable AiFeatureStoreEntityTypeMonitoringConfigGetArgs monitoringConfig) {
            this.monitoringConfig = Codegen.ofNullable(monitoringConfig);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder updateTime(@Nullable Output<String> updateTime) {
            this.updateTime = updateTime;
            return this;
        }
        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = Codegen.ofNullable(updateTime);
            return this;
        }        public AiFeatureStoreEntityTypeState build() {
            return new AiFeatureStoreEntityTypeState(createTime, etag, featurestore, labels, monitoringConfig, name, updateTime);
        }
    }
}
