// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.MachineImageMachineImageEncryptionKeyGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MachineImageState extends com.pulumi.resources.ResourceArgs {

    public static final MachineImageState Empty = new MachineImageState();

    /**
     * A text description of the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Specify this to create an application consistent machine image by informing the OS to prepare for the snapshot process.
     * Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     * 
     */
    @Import(name="guestFlush")
      private final @Nullable Output<Boolean> guestFlush;

    public Output<Boolean> guestFlush() {
        return this.guestFlush == null ? Codegen.empty() : this.guestFlush;
    }

    /**
     * Encrypts the machine image using a customer-supplied encryption key.
     * After you encrypt a machine image with a customer-supplied key, you must
     * provide the same key if you use the machine image later (e.g. to create a
     * instance from the image)
     * Structure is documented below.
     * 
     */
    @Import(name="machineImageEncryptionKey")
      private final @Nullable Output<MachineImageMachineImageEncryptionKeyGetArgs> machineImageEncryptionKey;

    public Output<MachineImageMachineImageEncryptionKeyGetArgs> machineImageEncryptionKey() {
        return this.machineImageEncryptionKey == null ? Codegen.empty() : this.machineImageEncryptionKey;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
      private final @Nullable Output<String> selfLink;

    public Output<String> selfLink() {
        return this.selfLink == null ? Codegen.empty() : this.selfLink;
    }

    /**
     * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource.
     * 
     */
    @Import(name="sourceInstance")
      private final @Nullable Output<String> sourceInstance;

    public Output<String> sourceInstance() {
        return this.sourceInstance == null ? Codegen.empty() : this.sourceInstance;
    }

    /**
     * The regional or multi-regional Cloud Storage bucket location where the machine image is stored.
     * 
     */
    @Import(name="storageLocations")
      private final @Nullable Output<List<String>> storageLocations;

    public Output<List<String>> storageLocations() {
        return this.storageLocations == null ? Codegen.empty() : this.storageLocations;
    }

    public MachineImageState(
        @Nullable Output<String> description,
        @Nullable Output<Boolean> guestFlush,
        @Nullable Output<MachineImageMachineImageEncryptionKeyGetArgs> machineImageEncryptionKey,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> selfLink,
        @Nullable Output<String> sourceInstance,
        @Nullable Output<List<String>> storageLocations) {
        this.description = description;
        this.guestFlush = guestFlush;
        this.machineImageEncryptionKey = machineImageEncryptionKey;
        this.name = name;
        this.project = project;
        this.selfLink = selfLink;
        this.sourceInstance = sourceInstance;
        this.storageLocations = storageLocations;
    }

    private MachineImageState() {
        this.description = Codegen.empty();
        this.guestFlush = Codegen.empty();
        this.machineImageEncryptionKey = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.selfLink = Codegen.empty();
        this.sourceInstance = Codegen.empty();
        this.storageLocations = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> guestFlush;
        private @Nullable Output<MachineImageMachineImageEncryptionKeyGetArgs> machineImageEncryptionKey;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> selfLink;
        private @Nullable Output<String> sourceInstance;
        private @Nullable Output<List<String>> storageLocations;

        public Builder() {
    	      // Empty
        }

        public Builder(MachineImageState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.guestFlush = defaults.guestFlush;
    	      this.machineImageEncryptionKey = defaults.machineImageEncryptionKey;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.sourceInstance = defaults.sourceInstance;
    	      this.storageLocations = defaults.storageLocations;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder guestFlush(@Nullable Output<Boolean> guestFlush) {
            this.guestFlush = guestFlush;
            return this;
        }
        public Builder guestFlush(@Nullable Boolean guestFlush) {
            this.guestFlush = Codegen.ofNullable(guestFlush);
            return this;
        }
        public Builder machineImageEncryptionKey(@Nullable Output<MachineImageMachineImageEncryptionKeyGetArgs> machineImageEncryptionKey) {
            this.machineImageEncryptionKey = machineImageEncryptionKey;
            return this;
        }
        public Builder machineImageEncryptionKey(@Nullable MachineImageMachineImageEncryptionKeyGetArgs machineImageEncryptionKey) {
            this.machineImageEncryptionKey = Codegen.ofNullable(machineImageEncryptionKey);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder selfLink(@Nullable Output<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }
        public Builder selfLink(@Nullable String selfLink) {
            this.selfLink = Codegen.ofNullable(selfLink);
            return this;
        }
        public Builder sourceInstance(@Nullable Output<String> sourceInstance) {
            this.sourceInstance = sourceInstance;
            return this;
        }
        public Builder sourceInstance(@Nullable String sourceInstance) {
            this.sourceInstance = Codegen.ofNullable(sourceInstance);
            return this;
        }
        public Builder storageLocations(@Nullable Output<List<String>> storageLocations) {
            this.storageLocations = storageLocations;
            return this;
        }
        public Builder storageLocations(@Nullable List<String> storageLocations) {
            this.storageLocations = Codegen.ofNullable(storageLocations);
            return this;
        }
        public Builder storageLocations(String... storageLocations) {
            return storageLocations(List.of(storageLocations));
        }        public MachineImageState build() {
            return new MachineImageState(description, guestFlush, machineImageEncryptionKey, name, project, selfLink, sourceInstance, storageLocations);
        }
    }
}
