// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GetBackendServiceOutlierDetectionBaseEjectionTime;
import com.pulumi.gcp.compute.inputs.GetBackendServiceOutlierDetectionInterval;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class GetBackendServiceOutlierDetection extends com.pulumi.resources.InvokeArgs {

    public static final GetBackendServiceOutlierDetection Empty = new GetBackendServiceOutlierDetection();

    @Import(name="baseEjectionTimes", required=true)
    private List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes;

    public List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes() {
        return this.baseEjectionTimes;
    }

    @Import(name="consecutiveErrors", required=true)
    private Integer consecutiveErrors;

    public Integer consecutiveErrors() {
        return this.consecutiveErrors;
    }

    @Import(name="consecutiveGatewayFailure", required=true)
    private Integer consecutiveGatewayFailure;

    public Integer consecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure;
    }

    @Import(name="enforcingConsecutiveErrors", required=true)
    private Integer enforcingConsecutiveErrors;

    public Integer enforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors;
    }

    @Import(name="enforcingConsecutiveGatewayFailure", required=true)
    private Integer enforcingConsecutiveGatewayFailure;

    public Integer enforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure;
    }

    @Import(name="enforcingSuccessRate", required=true)
    private Integer enforcingSuccessRate;

    public Integer enforcingSuccessRate() {
        return this.enforcingSuccessRate;
    }

    @Import(name="intervals", required=true)
    private List<GetBackendServiceOutlierDetectionInterval> intervals;

    public List<GetBackendServiceOutlierDetectionInterval> intervals() {
        return this.intervals;
    }

    @Import(name="maxEjectionPercent", required=true)
    private Integer maxEjectionPercent;

    public Integer maxEjectionPercent() {
        return this.maxEjectionPercent;
    }

    @Import(name="successRateMinimumHosts", required=true)
    private Integer successRateMinimumHosts;

    public Integer successRateMinimumHosts() {
        return this.successRateMinimumHosts;
    }

    @Import(name="successRateRequestVolume", required=true)
    private Integer successRateRequestVolume;

    public Integer successRateRequestVolume() {
        return this.successRateRequestVolume;
    }

    @Import(name="successRateStdevFactor", required=true)
    private Integer successRateStdevFactor;

    public Integer successRateStdevFactor() {
        return this.successRateStdevFactor;
    }

    private GetBackendServiceOutlierDetection() {}

    private GetBackendServiceOutlierDetection(GetBackendServiceOutlierDetection $) {
        this.baseEjectionTimes = $.baseEjectionTimes;
        this.consecutiveErrors = $.consecutiveErrors;
        this.consecutiveGatewayFailure = $.consecutiveGatewayFailure;
        this.enforcingConsecutiveErrors = $.enforcingConsecutiveErrors;
        this.enforcingConsecutiveGatewayFailure = $.enforcingConsecutiveGatewayFailure;
        this.enforcingSuccessRate = $.enforcingSuccessRate;
        this.intervals = $.intervals;
        this.maxEjectionPercent = $.maxEjectionPercent;
        this.successRateMinimumHosts = $.successRateMinimumHosts;
        this.successRateRequestVolume = $.successRateRequestVolume;
        this.successRateStdevFactor = $.successRateStdevFactor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackendServiceOutlierDetection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackendServiceOutlierDetection $;

        public Builder() {
            $ = new GetBackendServiceOutlierDetection();
        }

        public Builder(GetBackendServiceOutlierDetection defaults) {
            $ = new GetBackendServiceOutlierDetection(Objects.requireNonNull(defaults));
        }

        public Builder baseEjectionTimes(List<GetBackendServiceOutlierDetectionBaseEjectionTime> baseEjectionTimes) {
            $.baseEjectionTimes = baseEjectionTimes;
            return this;
        }

        public Builder baseEjectionTimes(GetBackendServiceOutlierDetectionBaseEjectionTime... baseEjectionTimes) {
            return baseEjectionTimes(List.of(baseEjectionTimes));
        }

        public Builder consecutiveErrors(Integer consecutiveErrors) {
            $.consecutiveErrors = consecutiveErrors;
            return this;
        }

        public Builder consecutiveGatewayFailure(Integer consecutiveGatewayFailure) {
            $.consecutiveGatewayFailure = consecutiveGatewayFailure;
            return this;
        }

        public Builder enforcingConsecutiveErrors(Integer enforcingConsecutiveErrors) {
            $.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
            return this;
        }

        public Builder enforcingConsecutiveGatewayFailure(Integer enforcingConsecutiveGatewayFailure) {
            $.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
            return this;
        }

        public Builder enforcingSuccessRate(Integer enforcingSuccessRate) {
            $.enforcingSuccessRate = enforcingSuccessRate;
            return this;
        }

        public Builder intervals(List<GetBackendServiceOutlierDetectionInterval> intervals) {
            $.intervals = intervals;
            return this;
        }

        public Builder intervals(GetBackendServiceOutlierDetectionInterval... intervals) {
            return intervals(List.of(intervals));
        }

        public Builder maxEjectionPercent(Integer maxEjectionPercent) {
            $.maxEjectionPercent = maxEjectionPercent;
            return this;
        }

        public Builder successRateMinimumHosts(Integer successRateMinimumHosts) {
            $.successRateMinimumHosts = successRateMinimumHosts;
            return this;
        }

        public Builder successRateRequestVolume(Integer successRateRequestVolume) {
            $.successRateRequestVolume = successRateRequestVolume;
            return this;
        }

        public Builder successRateStdevFactor(Integer successRateStdevFactor) {
            $.successRateStdevFactor = successRateStdevFactor;
            return this;
        }

        public GetBackendServiceOutlierDetection build() {
            $.baseEjectionTimes = Objects.requireNonNull($.baseEjectionTimes, "expected parameter 'baseEjectionTimes' to be non-null");
            $.consecutiveErrors = Objects.requireNonNull($.consecutiveErrors, "expected parameter 'consecutiveErrors' to be non-null");
            $.consecutiveGatewayFailure = Objects.requireNonNull($.consecutiveGatewayFailure, "expected parameter 'consecutiveGatewayFailure' to be non-null");
            $.enforcingConsecutiveErrors = Objects.requireNonNull($.enforcingConsecutiveErrors, "expected parameter 'enforcingConsecutiveErrors' to be non-null");
            $.enforcingConsecutiveGatewayFailure = Objects.requireNonNull($.enforcingConsecutiveGatewayFailure, "expected parameter 'enforcingConsecutiveGatewayFailure' to be non-null");
            $.enforcingSuccessRate = Objects.requireNonNull($.enforcingSuccessRate, "expected parameter 'enforcingSuccessRate' to be non-null");
            $.intervals = Objects.requireNonNull($.intervals, "expected parameter 'intervals' to be non-null");
            $.maxEjectionPercent = Objects.requireNonNull($.maxEjectionPercent, "expected parameter 'maxEjectionPercent' to be non-null");
            $.successRateMinimumHosts = Objects.requireNonNull($.successRateMinimumHosts, "expected parameter 'successRateMinimumHosts' to be non-null");
            $.successRateRequestVolume = Objects.requireNonNull($.successRateRequestVolume, "expected parameter 'successRateRequestVolume' to be non-null");
            $.successRateStdevFactor = Objects.requireNonNull($.successRateStdevFactor, "expected parameter 'successRateStdevFactor' to be non-null");
            return $;
        }
    }

}
