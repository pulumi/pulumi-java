// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.certificateauthority.inputs.CertificateTemplateIdentityConstraintsGetArgs;
import com.pulumi.gcp.certificateauthority.inputs.CertificateTemplatePassthroughExtensionsGetArgs;
import com.pulumi.gcp.certificateauthority.inputs.CertificateTemplatePredefinedValuesGetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateTemplateState Empty = new CertificateTemplateState();

    /**
     * Output only. The time at which this CertificateTemplate was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
     * 
     */
    @Import(name="identityConstraints")
    private @Nullable Output<CertificateTemplateIdentityConstraintsGetArgs> identityConstraints;

    public Optional<Output<CertificateTemplateIdentityConstraintsGetArgs>> identityConstraints() {
        return Optional.ofNullable(this.identityConstraints);
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name for this CertificateTemplate in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
     * 
     */
    @Import(name="passthroughExtensions")
    private @Nullable Output<CertificateTemplatePassthroughExtensionsGetArgs> passthroughExtensions;

    public Optional<Output<CertificateTemplatePassthroughExtensionsGetArgs>> passthroughExtensions() {
        return Optional.ofNullable(this.passthroughExtensions);
    }

    /**
     * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @Import(name="predefinedValues")
    private @Nullable Output<CertificateTemplatePredefinedValuesGetArgs> predefinedValues;

    public Optional<Output<CertificateTemplatePredefinedValuesGetArgs>> predefinedValues() {
        return Optional.ofNullable(this.predefinedValues);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. The time at which this CertificateTemplate was updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private CertificateTemplateState() {}

    private CertificateTemplateState(CertificateTemplateState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.identityConstraints = $.identityConstraints;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.passthroughExtensions = $.passthroughExtensions;
        this.predefinedValues = $.predefinedValues;
        this.project = $.project;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateTemplateState $;

        public Builder() {
            $ = new CertificateTemplateState();
        }

        public Builder(CertificateTemplateState defaults) {
            $ = new CertificateTemplateState(Objects.requireNonNull(defaults));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder identityConstraints(@Nullable Output<CertificateTemplateIdentityConstraintsGetArgs> identityConstraints) {
            $.identityConstraints = identityConstraints;
            return this;
        }

        public Builder identityConstraints(CertificateTemplateIdentityConstraintsGetArgs identityConstraints) {
            return identityConstraints(Output.of(identityConstraints));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder passthroughExtensions(@Nullable Output<CertificateTemplatePassthroughExtensionsGetArgs> passthroughExtensions) {
            $.passthroughExtensions = passthroughExtensions;
            return this;
        }

        public Builder passthroughExtensions(CertificateTemplatePassthroughExtensionsGetArgs passthroughExtensions) {
            return passthroughExtensions(Output.of(passthroughExtensions));
        }

        public Builder predefinedValues(@Nullable Output<CertificateTemplatePredefinedValuesGetArgs> predefinedValues) {
            $.predefinedValues = predefinedValues;
            return this;
        }

        public Builder predefinedValues(CertificateTemplatePredefinedValuesGetArgs predefinedValues) {
            return predefinedValues(Output.of(predefinedValues));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public CertificateTemplateState build() {
            return $;
        }
    }

}
