// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CryptoKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyArgs Empty = new CryptoKeyArgs();

    /**
     * The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
     * If not specified at creation time, the default duration is 24 hours.
     * 
     */
    @Import(name="destroyScheduledDuration")
    private @Nullable Output<String> destroyScheduledDuration;

    public Optional<Output<String>> destroyScheduledDuration() {
        return Optional.ofNullable(this.destroyScheduledDuration);
    }

    /**
     * Whether this key may contain imported versions only.
     * 
     */
    @Import(name="importOnly")
    private @Nullable Output<Boolean> importOnly;

    public Optional<Output<Boolean>> importOnly() {
        return Optional.ofNullable(this.importOnly);
    }

    /**
     * The KeyRing that this key belongs to.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}&#39;`.
     * 
     */
    @Import(name="keyRing", required=true)
    private Output<String> keyRing;

    public Output<String> keyRing() {
        return this.keyRing;
    }

    /**
     * Labels with user-defined metadata to apply to this resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The resource name for the CryptoKey.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The immutable purpose of this CryptoKey. See the
     * [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
     * for possible inputs.
     * Default value is `ENCRYPT_DECRYPT`.
     * Possible values are `ENCRYPT_DECRYPT`, `ASYMMETRIC_SIGN`, and `ASYMMETRIC_DECRYPT`.
     * 
     */
    @Import(name="purpose")
    private @Nullable Output<String> purpose;

    public Optional<Output<String>> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
     * The first rotation will take place after the specified period. The rotation period has
     * the format of a decimal number with up to 9 fractional digits, followed by the
     * letter `s` (seconds). It must be greater than a day (ie, 86400).
     * 
     */
    @Import(name="rotationPeriod")
    private @Nullable Output<String> rotationPeriod;

    public Optional<Output<String>> rotationPeriod() {
        return Optional.ofNullable(this.rotationPeriod);
    }

    /**
     * If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
     * You must use the `gcp.kms.KeyRingImportJob` resource to import the CryptoKeyVersion.
     * 
     */
    @Import(name="skipInitialVersionCreation")
    private @Nullable Output<Boolean> skipInitialVersionCreation;

    public Optional<Output<Boolean>> skipInitialVersionCreation() {
        return Optional.ofNullable(this.skipInitialVersionCreation);
    }

    /**
     * A template describing settings for new crypto key versions.
     * Structure is documented below.
     * 
     */
    @Import(name="versionTemplate")
    private @Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate;

    public Optional<Output<CryptoKeyVersionTemplateArgs>> versionTemplate() {
        return Optional.ofNullable(this.versionTemplate);
    }

    private CryptoKeyArgs() {}

    private CryptoKeyArgs(CryptoKeyArgs $) {
        this.destroyScheduledDuration = $.destroyScheduledDuration;
        this.importOnly = $.importOnly;
        this.keyRing = $.keyRing;
        this.labels = $.labels;
        this.name = $.name;
        this.purpose = $.purpose;
        this.rotationPeriod = $.rotationPeriod;
        this.skipInitialVersionCreation = $.skipInitialVersionCreation;
        this.versionTemplate = $.versionTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoKeyArgs $;

        public Builder() {
            $ = new CryptoKeyArgs();
        }

        public Builder(CryptoKeyArgs defaults) {
            $ = new CryptoKeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder destroyScheduledDuration(@Nullable Output<String> destroyScheduledDuration) {
            $.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }

        public Builder destroyScheduledDuration(String destroyScheduledDuration) {
            return destroyScheduledDuration(Output.of(destroyScheduledDuration));
        }

        public Builder importOnly(@Nullable Output<Boolean> importOnly) {
            $.importOnly = importOnly;
            return this;
        }

        public Builder importOnly(Boolean importOnly) {
            return importOnly(Output.of(importOnly));
        }

        public Builder keyRing(Output<String> keyRing) {
            $.keyRing = keyRing;
            return this;
        }

        public Builder keyRing(String keyRing) {
            return keyRing(Output.of(keyRing));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder purpose(@Nullable Output<String> purpose) {
            $.purpose = purpose;
            return this;
        }

        public Builder purpose(String purpose) {
            return purpose(Output.of(purpose));
        }

        public Builder rotationPeriod(@Nullable Output<String> rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        public Builder rotationPeriod(String rotationPeriod) {
            return rotationPeriod(Output.of(rotationPeriod));
        }

        public Builder skipInitialVersionCreation(@Nullable Output<Boolean> skipInitialVersionCreation) {
            $.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }

        public Builder skipInitialVersionCreation(Boolean skipInitialVersionCreation) {
            return skipInitialVersionCreation(Output.of(skipInitialVersionCreation));
        }

        public Builder versionTemplate(@Nullable Output<CryptoKeyVersionTemplateArgs> versionTemplate) {
            $.versionTemplate = versionTemplate;
            return this;
        }

        public Builder versionTemplate(CryptoKeyVersionTemplateArgs versionTemplate) {
            return versionTemplate(Output.of(versionTemplate));
        }

        public CryptoKeyArgs build() {
            $.keyRing = Objects.requireNonNull($.keyRing, "expected parameter 'keyRing' to be non-null");
            return $;
        }
    }

}
