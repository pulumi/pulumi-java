// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureMembershipConfigmanagementPolicyControllerArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureMembershipConfigmanagementPolicyControllerArgs Empty = new FeatureMembershipConfigmanagementPolicyControllerArgs();

    /**
     * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    @Import(name="auditIntervalSeconds")
    private @Nullable Output<String> auditIntervalSeconds;

    public Optional<Output<String>> auditIntervalSeconds() {
        return Optional.ofNullable(this.auditIntervalSeconds);
    }

    /**
     * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    @Import(name="exemptableNamespaces")
    private @Nullable Output<List<String>> exemptableNamespaces;

    public Optional<Output<List<String>>> exemptableNamespaces() {
        return Optional.ofNullable(this.exemptableNamespaces);
    }

    /**
     * Logs all denies and dry run failures.
     * 
     */
    @Import(name="logDeniesEnabled")
    private @Nullable Output<Boolean> logDeniesEnabled;

    public Optional<Output<Boolean>> logDeniesEnabled() {
        return Optional.ofNullable(this.logDeniesEnabled);
    }

    /**
     * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    @Import(name="referentialRulesEnabled")
    private @Nullable Output<Boolean> referentialRulesEnabled;

    public Optional<Output<Boolean>> referentialRulesEnabled() {
        return Optional.ofNullable(this.referentialRulesEnabled);
    }

    /**
     * Installs the default template library along with Policy Controller.
     * 
     */
    @Import(name="templateLibraryInstalled")
    private @Nullable Output<Boolean> templateLibraryInstalled;

    public Optional<Output<Boolean>> templateLibraryInstalled() {
        return Optional.ofNullable(this.templateLibraryInstalled);
    }

    private FeatureMembershipConfigmanagementPolicyControllerArgs() {}

    private FeatureMembershipConfigmanagementPolicyControllerArgs(FeatureMembershipConfigmanagementPolicyControllerArgs $) {
        this.auditIntervalSeconds = $.auditIntervalSeconds;
        this.enabled = $.enabled;
        this.exemptableNamespaces = $.exemptableNamespaces;
        this.logDeniesEnabled = $.logDeniesEnabled;
        this.referentialRulesEnabled = $.referentialRulesEnabled;
        this.templateLibraryInstalled = $.templateLibraryInstalled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureMembershipConfigmanagementPolicyControllerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureMembershipConfigmanagementPolicyControllerArgs $;

        public Builder() {
            $ = new FeatureMembershipConfigmanagementPolicyControllerArgs();
        }

        public Builder(FeatureMembershipConfigmanagementPolicyControllerArgs defaults) {
            $ = new FeatureMembershipConfigmanagementPolicyControllerArgs(Objects.requireNonNull(defaults));
        }

        public Builder auditIntervalSeconds(@Nullable Output<String> auditIntervalSeconds) {
            $.auditIntervalSeconds = auditIntervalSeconds;
            return this;
        }

        public Builder auditIntervalSeconds(String auditIntervalSeconds) {
            return auditIntervalSeconds(Output.of(auditIntervalSeconds));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder exemptableNamespaces(@Nullable Output<List<String>> exemptableNamespaces) {
            $.exemptableNamespaces = exemptableNamespaces;
            return this;
        }

        public Builder exemptableNamespaces(List<String> exemptableNamespaces) {
            return exemptableNamespaces(Output.of(exemptableNamespaces));
        }

        public Builder exemptableNamespaces(String... exemptableNamespaces) {
            return exemptableNamespaces(List.of(exemptableNamespaces));
        }

        public Builder logDeniesEnabled(@Nullable Output<Boolean> logDeniesEnabled) {
            $.logDeniesEnabled = logDeniesEnabled;
            return this;
        }

        public Builder logDeniesEnabled(Boolean logDeniesEnabled) {
            return logDeniesEnabled(Output.of(logDeniesEnabled));
        }

        public Builder referentialRulesEnabled(@Nullable Output<Boolean> referentialRulesEnabled) {
            $.referentialRulesEnabled = referentialRulesEnabled;
            return this;
        }

        public Builder referentialRulesEnabled(Boolean referentialRulesEnabled) {
            return referentialRulesEnabled(Output.of(referentialRulesEnabled));
        }

        public Builder templateLibraryInstalled(@Nullable Output<Boolean> templateLibraryInstalled) {
            $.templateLibraryInstalled = templateLibraryInstalled;
            return this;
        }

        public Builder templateLibraryInstalled(Boolean templateLibraryInstalled) {
            return templateLibraryInstalled(Output.of(templateLibraryInstalled));
        }

        public FeatureMembershipConfigmanagementPolicyControllerArgs build() {
            return $;
        }
    }

}
