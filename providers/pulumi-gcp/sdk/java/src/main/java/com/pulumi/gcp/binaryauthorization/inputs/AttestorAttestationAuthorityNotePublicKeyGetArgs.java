// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.binaryauthorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.binaryauthorization.inputs.AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttestorAttestationAuthorityNotePublicKeyGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttestorAttestationAuthorityNotePublicKeyGetArgs Empty = new AttestorAttestationAuthorityNotePublicKeyGetArgs();

    /**
     * ASCII-armored representation of a PGP public key, as the
     * entire output by the command
     * `gpg --export --armor foo@example.com` (either LF or CRLF
     * line endings). When using this field, id should be left
     * blank. The BinAuthz API handlers will calculate the ID
     * and fill it in automatically. BinAuthz computes this ID
     * as the OpenPGP RFC4880 V4 fingerprint, represented as
     * upper-case hex. If id is provided by the caller, it will
     * be overwritten by the API-calculated ID.
     * 
     */
    @Import(name="asciiArmoredPgpPublicKey")
    private @Nullable Output<String> asciiArmoredPgpPublicKey;

    /**
     * @return ASCII-armored representation of a PGP public key, as the
     * entire output by the command
     * `gpg --export --armor foo@example.com` (either LF or CRLF
     * line endings). When using this field, id should be left
     * blank. The BinAuthz API handlers will calculate the ID
     * and fill it in automatically. BinAuthz computes this ID
     * as the OpenPGP RFC4880 V4 fingerprint, represented as
     * upper-case hex. If id is provided by the caller, it will
     * be overwritten by the API-calculated ID.
     * 
     */
    public Optional<Output<String>> asciiArmoredPgpPublicKey() {
        return Optional.ofNullable(this.asciiArmoredPgpPublicKey);
    }

    /**
     * A descriptive comment. This field may be updated.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return A descriptive comment. This field may be updated.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The ID of this public key. Signatures verified by BinAuthz
     * must include the ID of the public key that can be used to
     * verify them, and that ID must match the contents of this
     * field exactly. Additional restrictions on this field can
     * be imposed based on which public key type is encapsulated.
     * See the documentation on publicKey cases below for details.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of this public key. Signatures verified by BinAuthz
     * must include the ID of the public key that can be used to
     * verify them, and that ID must match the contents of this
     * field exactly. Additional restrictions on this field can
     * be imposed based on which public key type is encapsulated.
     * See the documentation on publicKey cases below for details.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A raw PKIX SubjectPublicKeyInfo format public key.
     * NOTE: id may be explicitly provided by the caller when using this
     * type of public key, but it MUST be a valid RFC3986 URI. If id is left
     * blank, a default one will be computed based on the digest of the DER
     * encoding of the public key.
     * Structure is documented below.
     * 
     */
    @Import(name="pkixPublicKey")
    private @Nullable Output<AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyGetArgs> pkixPublicKey;

    /**
     * @return A raw PKIX SubjectPublicKeyInfo format public key.
     * NOTE: id may be explicitly provided by the caller when using this
     * type of public key, but it MUST be a valid RFC3986 URI. If id is left
     * blank, a default one will be computed based on the digest of the DER
     * encoding of the public key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyGetArgs>> pkixPublicKey() {
        return Optional.ofNullable(this.pkixPublicKey);
    }

    private AttestorAttestationAuthorityNotePublicKeyGetArgs() {}

    private AttestorAttestationAuthorityNotePublicKeyGetArgs(AttestorAttestationAuthorityNotePublicKeyGetArgs $) {
        this.asciiArmoredPgpPublicKey = $.asciiArmoredPgpPublicKey;
        this.comment = $.comment;
        this.id = $.id;
        this.pkixPublicKey = $.pkixPublicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttestorAttestationAuthorityNotePublicKeyGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttestorAttestationAuthorityNotePublicKeyGetArgs $;

        public Builder() {
            $ = new AttestorAttestationAuthorityNotePublicKeyGetArgs();
        }

        public Builder(AttestorAttestationAuthorityNotePublicKeyGetArgs defaults) {
            $ = new AttestorAttestationAuthorityNotePublicKeyGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asciiArmoredPgpPublicKey ASCII-armored representation of a PGP public key, as the
         * entire output by the command
         * `gpg --export --armor foo@example.com` (either LF or CRLF
         * line endings). When using this field, id should be left
         * blank. The BinAuthz API handlers will calculate the ID
         * and fill it in automatically. BinAuthz computes this ID
         * as the OpenPGP RFC4880 V4 fingerprint, represented as
         * upper-case hex. If id is provided by the caller, it will
         * be overwritten by the API-calculated ID.
         * 
         * @return builder
         * 
         */
        public Builder asciiArmoredPgpPublicKey(@Nullable Output<String> asciiArmoredPgpPublicKey) {
            $.asciiArmoredPgpPublicKey = asciiArmoredPgpPublicKey;
            return this;
        }

        /**
         * @param asciiArmoredPgpPublicKey ASCII-armored representation of a PGP public key, as the
         * entire output by the command
         * `gpg --export --armor foo@example.com` (either LF or CRLF
         * line endings). When using this field, id should be left
         * blank. The BinAuthz API handlers will calculate the ID
         * and fill it in automatically. BinAuthz computes this ID
         * as the OpenPGP RFC4880 V4 fingerprint, represented as
         * upper-case hex. If id is provided by the caller, it will
         * be overwritten by the API-calculated ID.
         * 
         * @return builder
         * 
         */
        public Builder asciiArmoredPgpPublicKey(String asciiArmoredPgpPublicKey) {
            return asciiArmoredPgpPublicKey(Output.of(asciiArmoredPgpPublicKey));
        }

        /**
         * @param comment A descriptive comment. This field may be updated.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment A descriptive comment. This field may be updated.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param id The ID of this public key. Signatures verified by BinAuthz
         * must include the ID of the public key that can be used to
         * verify them, and that ID must match the contents of this
         * field exactly. Additional restrictions on this field can
         * be imposed based on which public key type is encapsulated.
         * See the documentation on publicKey cases below for details.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this public key. Signatures verified by BinAuthz
         * must include the ID of the public key that can be used to
         * verify them, and that ID must match the contents of this
         * field exactly. Additional restrictions on this field can
         * be imposed based on which public key type is encapsulated.
         * See the documentation on publicKey cases below for details.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param pkixPublicKey A raw PKIX SubjectPublicKeyInfo format public key.
         * NOTE: id may be explicitly provided by the caller when using this
         * type of public key, but it MUST be a valid RFC3986 URI. If id is left
         * blank, a default one will be computed based on the digest of the DER
         * encoding of the public key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pkixPublicKey(@Nullable Output<AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyGetArgs> pkixPublicKey) {
            $.pkixPublicKey = pkixPublicKey;
            return this;
        }

        /**
         * @param pkixPublicKey A raw PKIX SubjectPublicKeyInfo format public key.
         * NOTE: id may be explicitly provided by the caller when using this
         * type of public key, but it MUST be a valid RFC3986 URI. If id is left
         * blank, a default one will be computed based on the digest of the DER
         * encoding of the public key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pkixPublicKey(AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyGetArgs pkixPublicKey) {
            return pkixPublicKey(Output.of(pkixPublicKey));
        }

        public AttestorAttestationAuthorityNotePublicKeyGetArgs build() {
            return $;
        }
    }

}
