// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memcache;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.memcache.inputs.InstanceMemcacheParametersArgs;
import com.pulumi.gcp.memcache.inputs.InstanceNodeConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The full name of the GCE network to connect the instance to.  If not provided,
     * &#39;default&#39; will be used.
     * 
     */
    @Import(name="authorizedNetwork")
      private final @Nullable Output<String> authorizedNetwork;

    public Output<String> authorizedNetwork() {
        return this.authorizedNetwork == null ? Codegen.empty() : this.authorizedNetwork;
    }

    /**
     * A user-visible name for the instance.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * User-specified parameters for this memcache instance.
     * Structure is documented below.
     * 
     */
    @Import(name="memcacheParameters")
      private final @Nullable Output<InstanceMemcacheParametersArgs> memcacheParameters;

    public Output<InstanceMemcacheParametersArgs> memcacheParameters() {
        return this.memcacheParameters == null ? Codegen.empty() : this.memcacheParameters;
    }

    /**
     * The major version of Memcached software. If not provided, latest supported version will be used.
     * Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
     * determined by our system based on the latest supported minor version.
     * Default value is `MEMCACHE_1_5`.
     * Possible values are `MEMCACHE_1_5`.
     * 
     */
    @Import(name="memcacheVersion")
      private final @Nullable Output<String> memcacheVersion;

    public Output<String> memcacheVersion() {
        return this.memcacheVersion == null ? Codegen.empty() : this.memcacheVersion;
    }

    /**
     * The resource name of the instance.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Configuration for memcache nodes.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeConfig", required=true)
      private final Output<InstanceNodeConfigArgs> nodeConfig;

    public Output<InstanceNodeConfigArgs> nodeConfig() {
        return this.nodeConfig;
    }

    /**
     * Number of nodes in the memcache instance.
     * 
     */
    @Import(name="nodeCount", required=true)
      private final Output<Integer> nodeCount;

    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The region of the Memcache instance. If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * Zones where memcache nodes should be provisioned.  If not
     * provided, all zones will be used.
     * 
     */
    @Import(name="zones")
      private final @Nullable Output<List<String>> zones;

    public Output<List<String>> zones() {
        return this.zones == null ? Codegen.empty() : this.zones;
    }

    public InstanceArgs(
        @Nullable Output<String> authorizedNetwork,
        @Nullable Output<String> displayName,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<InstanceMemcacheParametersArgs> memcacheParameters,
        @Nullable Output<String> memcacheVersion,
        @Nullable Output<String> name,
        Output<InstanceNodeConfigArgs> nodeConfig,
        Output<Integer> nodeCount,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        @Nullable Output<List<String>> zones) {
        this.authorizedNetwork = authorizedNetwork;
        this.displayName = displayName;
        this.labels = labels;
        this.memcacheParameters = memcacheParameters;
        this.memcacheVersion = memcacheVersion;
        this.name = name;
        this.nodeConfig = Objects.requireNonNull(nodeConfig, "expected parameter 'nodeConfig' to be non-null");
        this.nodeCount = Objects.requireNonNull(nodeCount, "expected parameter 'nodeCount' to be non-null");
        this.project = project;
        this.region = region;
        this.zones = zones;
    }

    private InstanceArgs() {
        this.authorizedNetwork = Codegen.empty();
        this.displayName = Codegen.empty();
        this.labels = Codegen.empty();
        this.memcacheParameters = Codegen.empty();
        this.memcacheVersion = Codegen.empty();
        this.name = Codegen.empty();
        this.nodeConfig = Codegen.empty();
        this.nodeCount = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.zones = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> authorizedNetwork;
        private @Nullable Output<String> displayName;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<InstanceMemcacheParametersArgs> memcacheParameters;
        private @Nullable Output<String> memcacheVersion;
        private @Nullable Output<String> name;
        private Output<InstanceNodeConfigArgs> nodeConfig;
        private Output<Integer> nodeCount;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private @Nullable Output<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.displayName = defaults.displayName;
    	      this.labels = defaults.labels;
    	      this.memcacheParameters = defaults.memcacheParameters;
    	      this.memcacheVersion = defaults.memcacheVersion;
    	      this.name = defaults.name;
    	      this.nodeConfig = defaults.nodeConfig;
    	      this.nodeCount = defaults.nodeCount;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.zones = defaults.zones;
        }

        public Builder authorizedNetwork(@Nullable Output<String> authorizedNetwork) {
            this.authorizedNetwork = authorizedNetwork;
            return this;
        }
        public Builder authorizedNetwork(@Nullable String authorizedNetwork) {
            this.authorizedNetwork = Codegen.ofNullable(authorizedNetwork);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder memcacheParameters(@Nullable Output<InstanceMemcacheParametersArgs> memcacheParameters) {
            this.memcacheParameters = memcacheParameters;
            return this;
        }
        public Builder memcacheParameters(@Nullable InstanceMemcacheParametersArgs memcacheParameters) {
            this.memcacheParameters = Codegen.ofNullable(memcacheParameters);
            return this;
        }
        public Builder memcacheVersion(@Nullable Output<String> memcacheVersion) {
            this.memcacheVersion = memcacheVersion;
            return this;
        }
        public Builder memcacheVersion(@Nullable String memcacheVersion) {
            this.memcacheVersion = Codegen.ofNullable(memcacheVersion);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder nodeConfig(Output<InstanceNodeConfigArgs> nodeConfig) {
            this.nodeConfig = Objects.requireNonNull(nodeConfig);
            return this;
        }
        public Builder nodeConfig(InstanceNodeConfigArgs nodeConfig) {
            this.nodeConfig = Output.of(Objects.requireNonNull(nodeConfig));
            return this;
        }
        public Builder nodeCount(Output<Integer> nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Output.of(Objects.requireNonNull(nodeCount));
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder zones(@Nullable Output<List<String>> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = Codegen.ofNullable(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public InstanceArgs build() {
            return new InstanceArgs(authorizedNetwork, displayName, labels, memcacheParameters, memcacheVersion, name, nodeConfig, nodeCount, project, region, zones);
        }
    }
}
