// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobTransferSpecTransferOptionsGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobTransferSpecTransferOptionsGetArgs Empty = new TransferJobTransferSpecTransferOptionsGetArgs();

    /**
     * Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `delete_objects_unique_in_sink` are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsFromSourceAfterTransfer")
    private @Nullable Output<Boolean> deleteObjectsFromSourceAfterTransfer;

    public Optional<Output<Boolean>> deleteObjectsFromSourceAfterTransfer() {
        return Optional.ofNullable(this.deleteObjectsFromSourceAfterTransfer);
    }

    /**
     * Whether objects that exist only in the sink should be deleted. Note that this option and
     * `delete_objects_from_source_after_transfer` are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsUniqueInSink")
    private @Nullable Output<Boolean> deleteObjectsUniqueInSink;

    public Optional<Output<Boolean>> deleteObjectsUniqueInSink() {
        return Optional.ofNullable(this.deleteObjectsUniqueInSink);
    }

    /**
     * Whether overwriting objects that already exist in the sink is allowed.
     * 
     */
    @Import(name="overwriteObjectsAlreadyExistingInSink")
    private @Nullable Output<Boolean> overwriteObjectsAlreadyExistingInSink;

    public Optional<Output<Boolean>> overwriteObjectsAlreadyExistingInSink() {
        return Optional.ofNullable(this.overwriteObjectsAlreadyExistingInSink);
    }

    private TransferJobTransferSpecTransferOptionsGetArgs() {}

    private TransferJobTransferSpecTransferOptionsGetArgs(TransferJobTransferSpecTransferOptionsGetArgs $) {
        this.deleteObjectsFromSourceAfterTransfer = $.deleteObjectsFromSourceAfterTransfer;
        this.deleteObjectsUniqueInSink = $.deleteObjectsUniqueInSink;
        this.overwriteObjectsAlreadyExistingInSink = $.overwriteObjectsAlreadyExistingInSink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobTransferSpecTransferOptionsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobTransferSpecTransferOptionsGetArgs $;

        public Builder() {
            $ = new TransferJobTransferSpecTransferOptionsGetArgs();
        }

        public Builder(TransferJobTransferSpecTransferOptionsGetArgs defaults) {
            $ = new TransferJobTransferSpecTransferOptionsGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder deleteObjectsFromSourceAfterTransfer(@Nullable Output<Boolean> deleteObjectsFromSourceAfterTransfer) {
            $.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            return this;
        }

        public Builder deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
            return deleteObjectsFromSourceAfterTransfer(Output.of(deleteObjectsFromSourceAfterTransfer));
        }

        public Builder deleteObjectsUniqueInSink(@Nullable Output<Boolean> deleteObjectsUniqueInSink) {
            $.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            return this;
        }

        public Builder deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
            return deleteObjectsUniqueInSink(Output.of(deleteObjectsUniqueInSink));
        }

        public Builder overwriteObjectsAlreadyExistingInSink(@Nullable Output<Boolean> overwriteObjectsAlreadyExistingInSink) {
            $.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            return this;
        }

        public Builder overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
            return overwriteObjectsAlreadyExistingInSink(Output.of(overwriteObjectsAlreadyExistingInSink));
        }

        public TransferJobTransferSpecTransferOptionsGetArgs build() {
            return $;
        }
    }

}
