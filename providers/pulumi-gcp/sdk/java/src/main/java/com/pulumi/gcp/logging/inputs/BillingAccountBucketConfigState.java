// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BillingAccountBucketConfigState extends com.pulumi.resources.ResourceArgs {

    public static final BillingAccountBucketConfigState Empty = new BillingAccountBucketConfigState();

    /**
     * The parent resource that contains the logging bucket.
     * 
     */
    @Import(name="billingAccount")
      private final @Nullable Output<String> billingAccount;

    public Output<String> billingAccount() {
        return this.billingAccount == null ? Codegen.empty() : this.billingAccount;
    }

    /**
     * The name of the logging bucket. Logging automatically creates two log buckets: `_Required` and `_Default`.
     * 
     */
    @Import(name="bucketId")
      private final @Nullable Output<String> bucketId;

    public Output<String> bucketId() {
        return this.bucketId == null ? Codegen.empty() : this.bucketId;
    }

    /**
     * Describes this bucket.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The bucket&#39;s lifecycle such as active or deleted. See [LifecycleState](https://cloud.google.com/logging/docs/reference/v2/rest/v2/billingAccounts.buckets#LogBucket.LifecycleState).
     * 
     */
    @Import(name="lifecycleState")
      private final @Nullable Output<String> lifecycleState;

    public Output<String> lifecycleState() {
        return this.lifecycleState == null ? Codegen.empty() : this.lifecycleState;
    }

    /**
     * The location of the bucket.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The resource name of the bucket. For example: &#34;projects/my-project-id/locations/my-location/buckets/my-bucket-id&#34;
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used. Bucket retention can not be increased on buckets outside of projects.
     * 
     */
    @Import(name="retentionDays")
      private final @Nullable Output<Integer> retentionDays;

    public Output<Integer> retentionDays() {
        return this.retentionDays == null ? Codegen.empty() : this.retentionDays;
    }

    public BillingAccountBucketConfigState(
        @Nullable Output<String> billingAccount,
        @Nullable Output<String> bucketId,
        @Nullable Output<String> description,
        @Nullable Output<String> lifecycleState,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<Integer> retentionDays) {
        this.billingAccount = billingAccount;
        this.bucketId = bucketId;
        this.description = description;
        this.lifecycleState = lifecycleState;
        this.location = location;
        this.name = name;
        this.retentionDays = retentionDays;
    }

    private BillingAccountBucketConfigState() {
        this.billingAccount = Codegen.empty();
        this.bucketId = Codegen.empty();
        this.description = Codegen.empty();
        this.lifecycleState = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.retentionDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BillingAccountBucketConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> billingAccount;
        private @Nullable Output<String> bucketId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> lifecycleState;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> retentionDays;

        public Builder() {
    	      // Empty
        }

        public Builder(BillingAccountBucketConfigState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingAccount = defaults.billingAccount;
    	      this.bucketId = defaults.bucketId;
    	      this.description = defaults.description;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.retentionDays = defaults.retentionDays;
        }

        public Builder billingAccount(@Nullable Output<String> billingAccount) {
            this.billingAccount = billingAccount;
            return this;
        }
        public Builder billingAccount(@Nullable String billingAccount) {
            this.billingAccount = Codegen.ofNullable(billingAccount);
            return this;
        }
        public Builder bucketId(@Nullable Output<String> bucketId) {
            this.bucketId = bucketId;
            return this;
        }
        public Builder bucketId(@Nullable String bucketId) {
            this.bucketId = Codegen.ofNullable(bucketId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder lifecycleState(@Nullable Output<String> lifecycleState) {
            this.lifecycleState = lifecycleState;
            return this;
        }
        public Builder lifecycleState(@Nullable String lifecycleState) {
            this.lifecycleState = Codegen.ofNullable(lifecycleState);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder retentionDays(@Nullable Output<Integer> retentionDays) {
            this.retentionDays = retentionDays;
            return this;
        }
        public Builder retentionDays(@Nullable Integer retentionDays) {
            this.retentionDays = Codegen.ofNullable(retentionDays);
            return this;
        }        public BillingAccountBucketConfigState build() {
            return new BillingAccountBucketConfigState(billingAccount, bucketId, description, lifecycleState, location, name, retentionDays);
        }
    }
}
