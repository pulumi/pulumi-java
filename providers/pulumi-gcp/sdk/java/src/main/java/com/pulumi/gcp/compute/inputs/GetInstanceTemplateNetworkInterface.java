// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.GetInstanceTemplateNetworkInterfaceAccessConfig;
import com.pulumi.gcp.compute.inputs.GetInstanceTemplateNetworkInterfaceAliasIpRange;
import com.pulumi.gcp.compute.inputs.GetInstanceTemplateNetworkInterfaceIpv6AccessConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInstanceTemplateNetworkInterface extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceTemplateNetworkInterface Empty = new GetInstanceTemplateNetworkInterface();

    /**
     * Access configurations, i.e. IPs via which this
     * instance can be accessed via the Internet. Omit to ensure that the instance
     * is not accessible from the Internet (this means that ssh provisioners will
     * not work unless you are running the prvovider can send traffic to the instance&#39;s
     * network (e.g. via tunnel or because it is running on another cloud instance
     * on that network). This block can be repeated multiple times. Structure documented below.
     * 
     */
    @Import(name="accessConfigs", required=true)
    private List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs;

    public List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs() {
        return this.accessConfigs;
    }

    /**
     * An
     * array of alias IP ranges for this network interface. Can only be specified for network
     * interfaces on subnet-mode networks. Structure documented below.
     * 
     */
    @Import(name="aliasIpRanges", required=true)
    private List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges;

    public List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges() {
        return this.aliasIpRanges;
    }

    @Import(name="ipv6AccessConfigs", required=true)
    private List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;

    public List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }

    @Import(name="ipv6AccessType", required=true)
    private String ipv6AccessType;

    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }

    /**
     * The name of the instance template. One of `name` or `filter` must be provided.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The name or self_link of the network to attach this interface to.
     * Use `network` attribute for Legacy or Auto subnetted networks and
     * `subnetwork` for custom subnetted networks.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * The private IP address to assign to the instance. If
     * empty, the address will be automatically assigned.
     * 
     */
    @Import(name="networkIp", required=true)
    private String networkIp;

    public String networkIp() {
        return this.networkIp;
    }

    @Import(name="nicType", required=true)
    private String nicType;

    public String nicType() {
        return this.nicType;
    }

    @Import(name="queueCount", required=true)
    private Integer queueCount;

    public Integer queueCount() {
        return this.queueCount;
    }

    @Import(name="stackType", required=true)
    private String stackType;

    public String stackType() {
        return this.stackType;
    }

    /**
     * the name of the subnetwork to attach this interface
     * to. The subnetwork must exist in the same `region` this instance will be
     * created in. Either `network` or `subnetwork` must be provided.
     * 
     */
    @Import(name="subnetwork", required=true)
    private String subnetwork;

    public String subnetwork() {
        return this.subnetwork;
    }

    /**
     * The ID of the project in which the subnetwork belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="subnetworkProject", required=true)
    private String subnetworkProject;

    public String subnetworkProject() {
        return this.subnetworkProject;
    }

    private GetInstanceTemplateNetworkInterface() {}

    private GetInstanceTemplateNetworkInterface(GetInstanceTemplateNetworkInterface $) {
        this.accessConfigs = $.accessConfigs;
        this.aliasIpRanges = $.aliasIpRanges;
        this.ipv6AccessConfigs = $.ipv6AccessConfigs;
        this.ipv6AccessType = $.ipv6AccessType;
        this.name = $.name;
        this.network = $.network;
        this.networkIp = $.networkIp;
        this.nicType = $.nicType;
        this.queueCount = $.queueCount;
        this.stackType = $.stackType;
        this.subnetwork = $.subnetwork;
        this.subnetworkProject = $.subnetworkProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceTemplateNetworkInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceTemplateNetworkInterface $;

        public Builder() {
            $ = new GetInstanceTemplateNetworkInterface();
        }

        public Builder(GetInstanceTemplateNetworkInterface defaults) {
            $ = new GetInstanceTemplateNetworkInterface(Objects.requireNonNull(defaults));
        }

        public Builder accessConfigs(List<GetInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs) {
            $.accessConfigs = accessConfigs;
            return this;
        }

        public Builder accessConfigs(GetInstanceTemplateNetworkInterfaceAccessConfig... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }

        public Builder aliasIpRanges(List<GetInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges) {
            $.aliasIpRanges = aliasIpRanges;
            return this;
        }

        public Builder aliasIpRanges(GetInstanceTemplateNetworkInterfaceAliasIpRange... aliasIpRanges) {
            return aliasIpRanges(List.of(aliasIpRanges));
        }

        public Builder ipv6AccessConfigs(List<GetInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs) {
            $.ipv6AccessConfigs = ipv6AccessConfigs;
            return this;
        }

        public Builder ipv6AccessConfigs(GetInstanceTemplateNetworkInterfaceIpv6AccessConfig... ipv6AccessConfigs) {
            return ipv6AccessConfigs(List.of(ipv6AccessConfigs));
        }

        public Builder ipv6AccessType(String ipv6AccessType) {
            $.ipv6AccessType = ipv6AccessType;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder networkIp(String networkIp) {
            $.networkIp = networkIp;
            return this;
        }

        public Builder nicType(String nicType) {
            $.nicType = nicType;
            return this;
        }

        public Builder queueCount(Integer queueCount) {
            $.queueCount = queueCount;
            return this;
        }

        public Builder stackType(String stackType) {
            $.stackType = stackType;
            return this;
        }

        public Builder subnetwork(String subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        public Builder subnetworkProject(String subnetworkProject) {
            $.subnetworkProject = subnetworkProject;
            return this;
        }

        public GetInstanceTemplateNetworkInterface build() {
            $.accessConfigs = Objects.requireNonNull($.accessConfigs, "expected parameter 'accessConfigs' to be non-null");
            $.aliasIpRanges = Objects.requireNonNull($.aliasIpRanges, "expected parameter 'aliasIpRanges' to be non-null");
            $.ipv6AccessConfigs = Objects.requireNonNull($.ipv6AccessConfigs, "expected parameter 'ipv6AccessConfigs' to be non-null");
            $.ipv6AccessType = Objects.requireNonNull($.ipv6AccessType, "expected parameter 'ipv6AccessType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.networkIp = Objects.requireNonNull($.networkIp, "expected parameter 'networkIp' to be non-null");
            $.nicType = Objects.requireNonNull($.nicType, "expected parameter 'nicType' to be non-null");
            $.queueCount = Objects.requireNonNull($.queueCount, "expected parameter 'queueCount' to be non-null");
            $.stackType = Objects.requireNonNull($.stackType, "expected parameter 'stackType' to be non-null");
            $.subnetwork = Objects.requireNonNull($.subnetwork, "expected parameter 'subnetwork' to be non-null");
            $.subnetworkProject = Objects.requireNonNull($.subnetworkProject, "expected parameter 'subnetworkProject' to be non-null");
            return $;
        }
    }

}
