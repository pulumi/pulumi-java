// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tags;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.tags.inputs.TagKeyIamBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagKeyIamBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagKeyIamBindingArgs Empty = new TagKeyIamBindingArgs();

    @Import(name="condition")
    private @Nullable Output<TagKeyIamBindingConditionArgs> condition;

    public Optional<Output<TagKeyIamBindingConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="members", required=true)
    private Output<List<String>> members;

    public Output<List<String>> members() {
        return this.members;
    }

    /**
     * The role that should be applied. Only one
     * `gcp.tags.TagKeyIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="tagKey", required=true)
    private Output<String> tagKey;

    public Output<String> tagKey() {
        return this.tagKey;
    }

    private TagKeyIamBindingArgs() {}

    private TagKeyIamBindingArgs(TagKeyIamBindingArgs $) {
        this.condition = $.condition;
        this.members = $.members;
        this.role = $.role;
        this.tagKey = $.tagKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagKeyIamBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagKeyIamBindingArgs $;

        public Builder() {
            $ = new TagKeyIamBindingArgs();
        }

        public Builder(TagKeyIamBindingArgs defaults) {
            $ = new TagKeyIamBindingArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<TagKeyIamBindingConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(TagKeyIamBindingConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder members(Output<List<String>> members) {
            $.members = members;
            return this;
        }

        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        public Builder members(String... members) {
            return members(List.of(members));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder tagKey(Output<String> tagKey) {
            $.tagKey = tagKey;
            return this;
        }

        public Builder tagKey(String tagKey) {
            return tagKey(Output.of(tagKey));
        }

        public TagKeyIamBindingArgs build() {
            $.members = Objects.requireNonNull($.members, "expected parameter 'members' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.tagKey = Objects.requireNonNull($.tagKey, "expected parameter 'tagKey' to be non-null");
            return $;
        }
    }

}
