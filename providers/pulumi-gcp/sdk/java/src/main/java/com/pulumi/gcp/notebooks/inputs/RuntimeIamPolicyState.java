// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.notebooks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuntimeIamPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final RuntimeIamPolicyState Empty = new RuntimeIamPolicyState();

    /**
     * (Computed) The etag of the IAM policy.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * A reference to the zone where the machine resides. Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Import(name="policyData")
    private @Nullable Output<String> policyData;

    public Optional<Output<String>> policyData() {
        return Optional.ofNullable(this.policyData);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="runtimeName")
    private @Nullable Output<String> runtimeName;

    public Optional<Output<String>> runtimeName() {
        return Optional.ofNullable(this.runtimeName);
    }

    private RuntimeIamPolicyState() {}

    private RuntimeIamPolicyState(RuntimeIamPolicyState $) {
        this.etag = $.etag;
        this.location = $.location;
        this.policyData = $.policyData;
        this.project = $.project;
        this.runtimeName = $.runtimeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuntimeIamPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuntimeIamPolicyState $;

        public Builder() {
            $ = new RuntimeIamPolicyState();
        }

        public Builder(RuntimeIamPolicyState defaults) {
            $ = new RuntimeIamPolicyState(Objects.requireNonNull(defaults));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder policyData(@Nullable Output<String> policyData) {
            $.policyData = policyData;
            return this;
        }

        public Builder policyData(String policyData) {
            return policyData(Output.of(policyData));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder runtimeName(@Nullable Output<String> runtimeName) {
            $.runtimeName = runtimeName;
            return this;
        }

        public Builder runtimeName(String runtimeName) {
            return runtimeName(Output.of(runtimeName));
        }

        public RuntimeIamPolicyState build() {
            return $;
        }
    }

}
