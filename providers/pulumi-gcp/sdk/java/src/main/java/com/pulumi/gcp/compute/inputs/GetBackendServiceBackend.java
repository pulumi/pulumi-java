// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetBackendServiceBackend extends com.pulumi.resources.InvokeArgs {

    public static final GetBackendServiceBackend Empty = new GetBackendServiceBackend();

    @Import(name="balancingMode", required=true)
    private String balancingMode;

    public String balancingMode() {
        return this.balancingMode;
    }

    @Import(name="capacityScaler", required=true)
    private Double capacityScaler;

    public Double capacityScaler() {
        return this.capacityScaler;
    }

    /**
     * Textual description for the Backend Service.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Textual description for the Backend Service.
     * 
     */
    public String description() {
        return this.description;
    }

    @Import(name="group", required=true)
    private String group;

    public String group() {
        return this.group;
    }

    @Import(name="maxConnections", required=true)
    private Integer maxConnections;

    public Integer maxConnections() {
        return this.maxConnections;
    }

    @Import(name="maxConnectionsPerEndpoint", required=true)
    private Integer maxConnectionsPerEndpoint;

    public Integer maxConnectionsPerEndpoint() {
        return this.maxConnectionsPerEndpoint;
    }

    @Import(name="maxConnectionsPerInstance", required=true)
    private Integer maxConnectionsPerInstance;

    public Integer maxConnectionsPerInstance() {
        return this.maxConnectionsPerInstance;
    }

    @Import(name="maxRate", required=true)
    private Integer maxRate;

    public Integer maxRate() {
        return this.maxRate;
    }

    @Import(name="maxRatePerEndpoint", required=true)
    private Double maxRatePerEndpoint;

    public Double maxRatePerEndpoint() {
        return this.maxRatePerEndpoint;
    }

    @Import(name="maxRatePerInstance", required=true)
    private Double maxRatePerInstance;

    public Double maxRatePerInstance() {
        return this.maxRatePerInstance;
    }

    @Import(name="maxUtilization", required=true)
    private Double maxUtilization;

    public Double maxUtilization() {
        return this.maxUtilization;
    }

    private GetBackendServiceBackend() {}

    private GetBackendServiceBackend(GetBackendServiceBackend $) {
        this.balancingMode = $.balancingMode;
        this.capacityScaler = $.capacityScaler;
        this.description = $.description;
        this.group = $.group;
        this.maxConnections = $.maxConnections;
        this.maxConnectionsPerEndpoint = $.maxConnectionsPerEndpoint;
        this.maxConnectionsPerInstance = $.maxConnectionsPerInstance;
        this.maxRate = $.maxRate;
        this.maxRatePerEndpoint = $.maxRatePerEndpoint;
        this.maxRatePerInstance = $.maxRatePerInstance;
        this.maxUtilization = $.maxUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackendServiceBackend defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackendServiceBackend $;

        public Builder() {
            $ = new GetBackendServiceBackend();
        }

        public Builder(GetBackendServiceBackend defaults) {
            $ = new GetBackendServiceBackend(Objects.requireNonNull(defaults));
        }

        public Builder balancingMode(String balancingMode) {
            $.balancingMode = balancingMode;
            return this;
        }

        public Builder capacityScaler(Double capacityScaler) {
            $.capacityScaler = capacityScaler;
            return this;
        }

        /**
         * @param description Textual description for the Backend Service.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder group(String group) {
            $.group = group;
            return this;
        }

        public Builder maxConnections(Integer maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        public Builder maxConnectionsPerEndpoint(Integer maxConnectionsPerEndpoint) {
            $.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            return this;
        }

        public Builder maxConnectionsPerInstance(Integer maxConnectionsPerInstance) {
            $.maxConnectionsPerInstance = maxConnectionsPerInstance;
            return this;
        }

        public Builder maxRate(Integer maxRate) {
            $.maxRate = maxRate;
            return this;
        }

        public Builder maxRatePerEndpoint(Double maxRatePerEndpoint) {
            $.maxRatePerEndpoint = maxRatePerEndpoint;
            return this;
        }

        public Builder maxRatePerInstance(Double maxRatePerInstance) {
            $.maxRatePerInstance = maxRatePerInstance;
            return this;
        }

        public Builder maxUtilization(Double maxUtilization) {
            $.maxUtilization = maxUtilization;
            return this;
        }

        public GetBackendServiceBackend build() {
            $.balancingMode = Objects.requireNonNull($.balancingMode, "expected parameter 'balancingMode' to be non-null");
            $.capacityScaler = Objects.requireNonNull($.capacityScaler, "expected parameter 'capacityScaler' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.group = Objects.requireNonNull($.group, "expected parameter 'group' to be non-null");
            $.maxConnections = Objects.requireNonNull($.maxConnections, "expected parameter 'maxConnections' to be non-null");
            $.maxConnectionsPerEndpoint = Objects.requireNonNull($.maxConnectionsPerEndpoint, "expected parameter 'maxConnectionsPerEndpoint' to be non-null");
            $.maxConnectionsPerInstance = Objects.requireNonNull($.maxConnectionsPerInstance, "expected parameter 'maxConnectionsPerInstance' to be non-null");
            $.maxRate = Objects.requireNonNull($.maxRate, "expected parameter 'maxRate' to be non-null");
            $.maxRatePerEndpoint = Objects.requireNonNull($.maxRatePerEndpoint, "expected parameter 'maxRatePerEndpoint' to be non-null");
            $.maxRatePerInstance = Objects.requireNonNull($.maxRatePerInstance, "expected parameter 'maxRatePerInstance' to be non-null");
            $.maxUtilization = Objects.requireNonNull($.maxUtilization, "expected parameter 'maxUtilization' to be non-null");
            return $;
        }
    }

}
