// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudbuild.inputs.TriggerBuildGetArgs;
import com.pulumi.gcp.cloudbuild.inputs.TriggerGithubGetArgs;
import com.pulumi.gcp.cloudbuild.inputs.TriggerPubsubConfigGetArgs;
import com.pulumi.gcp.cloudbuild.inputs.TriggerTriggerTemplateGetArgs;
import com.pulumi.gcp.cloudbuild.inputs.TriggerWebhookConfigGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerState extends com.pulumi.resources.ResourceArgs {

    public static final TriggerState Empty = new TriggerState();

    /**
     * Contents of the build template. Either a filename or build template must be provided.
     * Structure is documented below.
     * 
     */
    @Import(name="build")
    private @Nullable Output<TriggerBuildGetArgs> build;

    public Optional<Output<TriggerBuildGetArgs>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * Time when the trigger was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Human-readable description of the trigger.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the trigger is disabled or not. If true, the trigger will never result in a build.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must be provided.
     * 
     */
    @Import(name="filename")
    private @Nullable Output<String> filename;

    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
     * One of `trigger_template`, `github`, `pubsub_config` or `webhook_config` must be provided.
     * Structure is documented below.
     * 
     */
    @Import(name="github")
    private @Nullable Output<TriggerGithubGetArgs> github;

    public Optional<Output<TriggerGithubGetArgs>> github() {
        return Optional.ofNullable(this.github);
    }

    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
     * extended with support for `**`.
     * If ignoredFiles and changed files are both empty, then they are not
     * used to determine whether or not to trigger a build.
     * If ignoredFiles is not empty, then we ignore any files that match any
     * of the ignored_file globs. If the change has no files that are outside
     * of the ignoredFiles globs, then we do not trigger a build.
     * 
     */
    @Import(name="ignoredFiles")
    private @Nullable Output<List<String>> ignoredFiles;

    public Optional<Output<List<String>>> ignoredFiles() {
        return Optional.ofNullable(this.ignoredFiles);
    }

    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
     * extended with support for `**`.
     * If any of the files altered in the commit pass the ignoredFiles filter
     * and includedFiles is empty, then as far as this filter is concerned, we
     * should trigger the build.
     * If any of the files altered in the commit pass the ignoredFiles filter
     * and includedFiles is not empty, then we make sure that at least one of
     * those files matches a includedFiles glob. If not, then we do not trigger
     * a build.
     * 
     */
    @Import(name="includedFiles")
    private @Nullable Output<List<String>> includedFiles;

    public Optional<Output<List<String>>> includedFiles() {
        return Optional.ofNullable(this.includedFiles);
    }

    /**
     * Name of the volume to mount.
     * Volume names must be unique per build step and must be valid names for Docker volumes.
     * Each named volume must be used by at least two build steps.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * PubsubConfig describes the configuration of a trigger that creates
     * a build whenever a Pub/Sub message is published.
     * One of `trigger_template`, `github`, `pubsub_config` or `webhook_config` must be provided.
     * Structure is documented below.
     * 
     */
    @Import(name="pubsubConfig")
    private @Nullable Output<TriggerPubsubConfigGetArgs> pubsubConfig;

    public Optional<Output<TriggerPubsubConfigGetArgs>> pubsubConfig() {
        return Optional.ofNullable(this.pubsubConfig);
    }

    /**
     * The service account used for all user-controlled operations including
     * triggers.patch, triggers.run, builds.create, and builds.cancel.
     * If no service account is set, then the standard Cloud Build service account
     * ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
     * Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Substitutions to use in a triggered build. Should only be used with triggers.run
     * 
     */
    @Import(name="substitutions")
    private @Nullable Output<Map<String,String>> substitutions;

    public Optional<Output<Map<String,String>>> substitutions() {
        return Optional.ofNullable(this.substitutions);
    }

    /**
     * Tags for annotation of a Build. These are not docker tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The unique identifier for the trigger.
     * 
     */
    @Import(name="triggerId")
    private @Nullable Output<String> triggerId;

    public Optional<Output<String>> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }

    /**
     * Template describing the types of source changes to trigger a build.
     * Branch and tag names in trigger templates are interpreted as regular
     * expressions. Any branch or tag change that matches that regular
     * expression will trigger a build.
     * One of `trigger_template`, `github`, `pubsub_config` or `webhook_config` must be provided.
     * Structure is documented below.
     * 
     */
    @Import(name="triggerTemplate")
    private @Nullable Output<TriggerTriggerTemplateGetArgs> triggerTemplate;

    public Optional<Output<TriggerTriggerTemplateGetArgs>> triggerTemplate() {
        return Optional.ofNullable(this.triggerTemplate);
    }

    /**
     * WebhookConfig describes the configuration of a trigger that creates
     * a build whenever a webhook is sent to a trigger&#39;s webhook URL.
     * One of `trigger_template`, `github`, `pubsub_config` or `webhook_config` must be provided.
     * Structure is documented below.
     * 
     */
    @Import(name="webhookConfig")
    private @Nullable Output<TriggerWebhookConfigGetArgs> webhookConfig;

    public Optional<Output<TriggerWebhookConfigGetArgs>> webhookConfig() {
        return Optional.ofNullable(this.webhookConfig);
    }

    private TriggerState() {}

    private TriggerState(TriggerState $) {
        this.build = $.build;
        this.createTime = $.createTime;
        this.description = $.description;
        this.disabled = $.disabled;
        this.filename = $.filename;
        this.github = $.github;
        this.ignoredFiles = $.ignoredFiles;
        this.includedFiles = $.includedFiles;
        this.name = $.name;
        this.project = $.project;
        this.pubsubConfig = $.pubsubConfig;
        this.serviceAccount = $.serviceAccount;
        this.substitutions = $.substitutions;
        this.tags = $.tags;
        this.triggerId = $.triggerId;
        this.triggerTemplate = $.triggerTemplate;
        this.webhookConfig = $.webhookConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerState $;

        public Builder() {
            $ = new TriggerState();
        }

        public Builder(TriggerState defaults) {
            $ = new TriggerState(Objects.requireNonNull(defaults));
        }

        public Builder build(@Nullable Output<TriggerBuildGetArgs> build) {
            $.build = build;
            return this;
        }

        public Builder build(TriggerBuildGetArgs build) {
            return build(Output.of(build));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        public Builder github(@Nullable Output<TriggerGithubGetArgs> github) {
            $.github = github;
            return this;
        }

        public Builder github(TriggerGithubGetArgs github) {
            return github(Output.of(github));
        }

        public Builder ignoredFiles(@Nullable Output<List<String>> ignoredFiles) {
            $.ignoredFiles = ignoredFiles;
            return this;
        }

        public Builder ignoredFiles(List<String> ignoredFiles) {
            return ignoredFiles(Output.of(ignoredFiles));
        }

        public Builder ignoredFiles(String... ignoredFiles) {
            return ignoredFiles(List.of(ignoredFiles));
        }

        public Builder includedFiles(@Nullable Output<List<String>> includedFiles) {
            $.includedFiles = includedFiles;
            return this;
        }

        public Builder includedFiles(List<String> includedFiles) {
            return includedFiles(Output.of(includedFiles));
        }

        public Builder includedFiles(String... includedFiles) {
            return includedFiles(List.of(includedFiles));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder pubsubConfig(@Nullable Output<TriggerPubsubConfigGetArgs> pubsubConfig) {
            $.pubsubConfig = pubsubConfig;
            return this;
        }

        public Builder pubsubConfig(TriggerPubsubConfigGetArgs pubsubConfig) {
            return pubsubConfig(Output.of(pubsubConfig));
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public Builder substitutions(@Nullable Output<Map<String,String>> substitutions) {
            $.substitutions = substitutions;
            return this;
        }

        public Builder substitutions(Map<String,String> substitutions) {
            return substitutions(Output.of(substitutions));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder triggerId(@Nullable Output<String> triggerId) {
            $.triggerId = triggerId;
            return this;
        }

        public Builder triggerId(String triggerId) {
            return triggerId(Output.of(triggerId));
        }

        public Builder triggerTemplate(@Nullable Output<TriggerTriggerTemplateGetArgs> triggerTemplate) {
            $.triggerTemplate = triggerTemplate;
            return this;
        }

        public Builder triggerTemplate(TriggerTriggerTemplateGetArgs triggerTemplate) {
            return triggerTemplate(Output.of(triggerTemplate));
        }

        public Builder webhookConfig(@Nullable Output<TriggerWebhookConfigGetArgs> webhookConfig) {
            $.webhookConfig = webhookConfig;
            return this;
        }

        public Builder webhookConfig(TriggerWebhookConfigGetArgs webhookConfig) {
            return webhookConfig(Output.of(webhookConfig));
        }

        public TriggerState build() {
            return $;
        }
    }

}
