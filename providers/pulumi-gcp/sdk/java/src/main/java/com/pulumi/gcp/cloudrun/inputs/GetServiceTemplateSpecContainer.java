// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecContainerEnv;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecContainerEnvFrom;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecContainerPort;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecContainerResource;
import com.pulumi.gcp.cloudrun.inputs.GetServiceTemplateSpecContainerVolumeMount;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetServiceTemplateSpecContainer extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceTemplateSpecContainer Empty = new GetServiceTemplateSpecContainer();

    @Import(name="args", required=true)
    private List<String> args;

    public List<String> args() {
        return this.args;
    }

    @Import(name="commands", required=true)
    private List<String> commands;

    public List<String> commands() {
        return this.commands;
    }

    @Import(name="envFroms", required=true)
    private List<GetServiceTemplateSpecContainerEnvFrom> envFroms;

    public List<GetServiceTemplateSpecContainerEnvFrom> envFroms() {
        return this.envFroms;
    }

    @Import(name="envs", required=true)
    private List<GetServiceTemplateSpecContainerEnv> envs;

    public List<GetServiceTemplateSpecContainerEnv> envs() {
        return this.envs;
    }

    @Import(name="image", required=true)
    private String image;

    public String image() {
        return this.image;
    }

    @Import(name="ports", required=true)
    private List<GetServiceTemplateSpecContainerPort> ports;

    public List<GetServiceTemplateSpecContainerPort> ports() {
        return this.ports;
    }

    @Import(name="resources", required=true)
    private List<GetServiceTemplateSpecContainerResource> resources;

    public List<GetServiceTemplateSpecContainerResource> resources() {
        return this.resources;
    }

    @Import(name="volumeMounts", required=true)
    private List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts;

    public List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts() {
        return this.volumeMounts;
    }

    @Import(name="workingDir", required=true)
    private String workingDir;

    public String workingDir() {
        return this.workingDir;
    }

    private GetServiceTemplateSpecContainer() {}

    private GetServiceTemplateSpecContainer(GetServiceTemplateSpecContainer $) {
        this.args = $.args;
        this.commands = $.commands;
        this.envFroms = $.envFroms;
        this.envs = $.envs;
        this.image = $.image;
        this.ports = $.ports;
        this.resources = $.resources;
        this.volumeMounts = $.volumeMounts;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceTemplateSpecContainer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceTemplateSpecContainer $;

        public Builder() {
            $ = new GetServiceTemplateSpecContainer();
        }

        public Builder(GetServiceTemplateSpecContainer defaults) {
            $ = new GetServiceTemplateSpecContainer(Objects.requireNonNull(defaults));
        }

        public Builder args(List<String> args) {
            $.args = args;
            return this;
        }

        public Builder args(String... args) {
            return args(List.of(args));
        }

        public Builder commands(List<String> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public Builder envFroms(List<GetServiceTemplateSpecContainerEnvFrom> envFroms) {
            $.envFroms = envFroms;
            return this;
        }

        public Builder envFroms(GetServiceTemplateSpecContainerEnvFrom... envFroms) {
            return envFroms(List.of(envFroms));
        }

        public Builder envs(List<GetServiceTemplateSpecContainerEnv> envs) {
            $.envs = envs;
            return this;
        }

        public Builder envs(GetServiceTemplateSpecContainerEnv... envs) {
            return envs(List.of(envs));
        }

        public Builder image(String image) {
            $.image = image;
            return this;
        }

        public Builder ports(List<GetServiceTemplateSpecContainerPort> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(GetServiceTemplateSpecContainerPort... ports) {
            return ports(List.of(ports));
        }

        public Builder resources(List<GetServiceTemplateSpecContainerResource> resources) {
            $.resources = resources;
            return this;
        }

        public Builder resources(GetServiceTemplateSpecContainerResource... resources) {
            return resources(List.of(resources));
        }

        public Builder volumeMounts(List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        public Builder volumeMounts(GetServiceTemplateSpecContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public Builder workingDir(String workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        public GetServiceTemplateSpecContainer build() {
            $.args = Objects.requireNonNull($.args, "expected parameter 'args' to be non-null");
            $.commands = Objects.requireNonNull($.commands, "expected parameter 'commands' to be non-null");
            $.envFroms = Objects.requireNonNull($.envFroms, "expected parameter 'envFroms' to be non-null");
            $.envs = Objects.requireNonNull($.envs, "expected parameter 'envs' to be non-null");
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            $.ports = Objects.requireNonNull($.ports, "expected parameter 'ports' to be non-null");
            $.resources = Objects.requireNonNull($.resources, "expected parameter 'resources' to be non-null");
            $.volumeMounts = Objects.requireNonNull($.volumeMounts, "expected parameter 'volumeMounts' to be non-null");
            $.workingDir = Objects.requireNonNull($.workingDir, "expected parameter 'workingDir' to be non-null");
            return $;
        }
    }

}
