// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.containeranalysis.inputs.OccurenceAttestationGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OccurenceState extends com.pulumi.resources.ResourceArgs {

    public static final OccurenceState Empty = new OccurenceState();

    /**
     * Occurrence that represents a single &#34;attestation&#34;. The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    @Import(name="attestation")
    private @Nullable Output<OccurenceAttestationGetArgs> attestation;

    public Optional<Output<OccurenceAttestationGetArgs>> attestation() {
        return Optional.ofNullable(this.attestation);
    }

    /**
     * The time when the repository was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The name of the occurrence.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    @Import(name="noteName")
    private @Nullable Output<String> noteName;

    public Optional<Output<String>> noteName() {
        return Optional.ofNullable(this.noteName);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A description of actions that can be taken to remedy the note.
     * 
     */
    @Import(name="remediation")
    private @Nullable Output<String> remediation;

    public Optional<Output<String>> remediation() {
        return Optional.ofNullable(this.remediation);
    }

    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     * 
     */
    @Import(name="resourceUri")
    private @Nullable Output<String> resourceUri;

    public Optional<Output<String>> resourceUri() {
        return Optional.ofNullable(this.resourceUri);
    }

    /**
     * The time when the repository was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private OccurenceState() {}

    private OccurenceState(OccurenceState $) {
        this.attestation = $.attestation;
        this.createTime = $.createTime;
        this.kind = $.kind;
        this.name = $.name;
        this.noteName = $.noteName;
        this.project = $.project;
        this.remediation = $.remediation;
        this.resourceUri = $.resourceUri;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OccurenceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OccurenceState $;

        public Builder() {
            $ = new OccurenceState();
        }

        public Builder(OccurenceState defaults) {
            $ = new OccurenceState(Objects.requireNonNull(defaults));
        }

        public Builder attestation(@Nullable Output<OccurenceAttestationGetArgs> attestation) {
            $.attestation = attestation;
            return this;
        }

        public Builder attestation(OccurenceAttestationGetArgs attestation) {
            return attestation(Output.of(attestation));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder noteName(@Nullable Output<String> noteName) {
            $.noteName = noteName;
            return this;
        }

        public Builder noteName(String noteName) {
            return noteName(Output.of(noteName));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder remediation(@Nullable Output<String> remediation) {
            $.remediation = remediation;
            return this;
        }

        public Builder remediation(String remediation) {
            return remediation(Output.of(remediation));
        }

        public Builder resourceUri(@Nullable Output<String> resourceUri) {
            $.resourceUri = resourceUri;
            return this;
        }

        public Builder resourceUri(String resourceUri) {
            return resourceUri(Output.of(resourceUri));
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public OccurenceState build() {
            return $;
        }
    }

}
