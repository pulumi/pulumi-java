// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudscheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.cloudscheduler.inputs.JobHttpTargetOauthTokenArgs;
import com.pulumi.gcp.cloudscheduler.inputs.JobHttpTargetOidcTokenArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobHttpTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobHttpTargetArgs Empty = new JobHttpTargetArgs();

    /**
     * HTTP request body.
     * A request body is allowed only if the HTTP method is POST, PUT, or PATCH.
     * It is an error to set body on a job with an incompatible HttpMethod.
     * A base64-encoded string.
     * 
     */
    @Import(name="body")
      private final @Nullable Output<String> body;

    public Output<String> body() {
        return this.body == null ? Codegen.empty() : this.body;
    }

    /**
     * This map contains the header field names and values.
     * Repeated headers are not supported, but a header value can contain commas.
     * 
     */
    @Import(name="headers")
      private final @Nullable Output<Map<String,String>> headers;

    public Output<Map<String,String>> headers() {
        return this.headers == null ? Codegen.empty() : this.headers;
    }

    /**
     * Which HTTP method to use for the request.
     * 
     */
    @Import(name="httpMethod")
      private final @Nullable Output<String> httpMethod;

    public Output<String> httpMethod() {
        return this.httpMethod == null ? Codegen.empty() : this.httpMethod;
    }

    /**
     * Contains information needed for generating an OAuth token.
     * This type of authorization should be used when sending requests to a GCP endpoint.
     * Structure is documented below.
     * 
     */
    @Import(name="oauthToken")
      private final @Nullable Output<JobHttpTargetOauthTokenArgs> oauthToken;

    public Output<JobHttpTargetOauthTokenArgs> oauthToken() {
        return this.oauthToken == null ? Codegen.empty() : this.oauthToken;
    }

    /**
     * Contains information needed for generating an OpenID Connect token.
     * This type of authorization should be used when sending requests to third party endpoints or Cloud Run.
     * Structure is documented below.
     * 
     */
    @Import(name="oidcToken")
      private final @Nullable Output<JobHttpTargetOidcTokenArgs> oidcToken;

    public Output<JobHttpTargetOidcTokenArgs> oidcToken() {
        return this.oidcToken == null ? Codegen.empty() : this.oidcToken;
    }

    /**
     * The full URI path that the request will be sent to.
     * 
     */
    @Import(name="uri", required=true)
      private final Output<String> uri;

    public Output<String> uri() {
        return this.uri;
    }

    public JobHttpTargetArgs(
        @Nullable Output<String> body,
        @Nullable Output<Map<String,String>> headers,
        @Nullable Output<String> httpMethod,
        @Nullable Output<JobHttpTargetOauthTokenArgs> oauthToken,
        @Nullable Output<JobHttpTargetOidcTokenArgs> oidcToken,
        Output<String> uri) {
        this.body = body;
        this.headers = headers;
        this.httpMethod = httpMethod;
        this.oauthToken = oauthToken;
        this.oidcToken = oidcToken;
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
    }

    private JobHttpTargetArgs() {
        this.body = Codegen.empty();
        this.headers = Codegen.empty();
        this.httpMethod = Codegen.empty();
        this.oauthToken = Codegen.empty();
        this.oidcToken = Codegen.empty();
        this.uri = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobHttpTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> body;
        private @Nullable Output<Map<String,String>> headers;
        private @Nullable Output<String> httpMethod;
        private @Nullable Output<JobHttpTargetOauthTokenArgs> oauthToken;
        private @Nullable Output<JobHttpTargetOidcTokenArgs> oidcToken;
        private Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(JobHttpTargetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.headers = defaults.headers;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oidcToken = defaults.oidcToken;
    	      this.uri = defaults.uri;
        }

        public Builder body(@Nullable Output<String> body) {
            this.body = body;
            return this;
        }
        public Builder body(@Nullable String body) {
            this.body = Codegen.ofNullable(body);
            return this;
        }
        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            this.headers = headers;
            return this;
        }
        public Builder headers(@Nullable Map<String,String> headers) {
            this.headers = Codegen.ofNullable(headers);
            return this;
        }
        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            this.httpMethod = httpMethod;
            return this;
        }
        public Builder httpMethod(@Nullable String httpMethod) {
            this.httpMethod = Codegen.ofNullable(httpMethod);
            return this;
        }
        public Builder oauthToken(@Nullable Output<JobHttpTargetOauthTokenArgs> oauthToken) {
            this.oauthToken = oauthToken;
            return this;
        }
        public Builder oauthToken(@Nullable JobHttpTargetOauthTokenArgs oauthToken) {
            this.oauthToken = Codegen.ofNullable(oauthToken);
            return this;
        }
        public Builder oidcToken(@Nullable Output<JobHttpTargetOidcTokenArgs> oidcToken) {
            this.oidcToken = oidcToken;
            return this;
        }
        public Builder oidcToken(@Nullable JobHttpTargetOidcTokenArgs oidcToken) {
            this.oidcToken = Codegen.ofNullable(oidcToken);
            return this;
        }
        public Builder uri(Output<String> uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public Builder uri(String uri) {
            this.uri = Output.of(Objects.requireNonNull(uri));
            return this;
        }        public JobHttpTargetArgs build() {
            return new JobHttpTargetArgs(body, headers, httpMethod, oauthToken, oidcToken, uri);
        }
    }
}
