// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.appengine.inputs.DomainMappingResourceRecordGetArgs;
import com.pulumi.gcp.appengine.inputs.DomainMappingSslSettingsGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainMappingState extends com.pulumi.resources.ResourceArgs {

    public static final DomainMappingState Empty = new DomainMappingState();

    /**
     * Relative name of the domain serving the application. Example: example.com.
     * 
     */
    @Import(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName == null ? Codegen.empty() : this.domainName;
    }

    /**
     * Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Whether the domain creation should override any existing mappings for this domain.
     * By default, overrides are rejected.
     * Default value is `STRICT`.
     * Possible values are `STRICT` and `OVERRIDE`.
     * 
     */
    @Import(name="overrideStrategy")
      private final @Nullable Output<String> overrideStrategy;

    public Output<String> overrideStrategy() {
        return this.overrideStrategy == null ? Codegen.empty() : this.overrideStrategy;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS
     * configuration in order to serve the application via this domain mapping.
     * 
     */
    @Import(name="resourceRecords")
      private final @Nullable Output<List<DomainMappingResourceRecordGetArgs>> resourceRecords;

    public Output<List<DomainMappingResourceRecordGetArgs>> resourceRecords() {
        return this.resourceRecords == null ? Codegen.empty() : this.resourceRecords;
    }

    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     * Structure is documented below.
     * 
     */
    @Import(name="sslSettings")
      private final @Nullable Output<DomainMappingSslSettingsGetArgs> sslSettings;

    public Output<DomainMappingSslSettingsGetArgs> sslSettings() {
        return this.sslSettings == null ? Codegen.empty() : this.sslSettings;
    }

    public DomainMappingState(
        @Nullable Output<String> domainName,
        @Nullable Output<String> name,
        @Nullable Output<String> overrideStrategy,
        @Nullable Output<String> project,
        @Nullable Output<List<DomainMappingResourceRecordGetArgs>> resourceRecords,
        @Nullable Output<DomainMappingSslSettingsGetArgs> sslSettings) {
        this.domainName = domainName;
        this.name = name;
        this.overrideStrategy = overrideStrategy;
        this.project = project;
        this.resourceRecords = resourceRecords;
        this.sslSettings = sslSettings;
    }

    private DomainMappingState() {
        this.domainName = Codegen.empty();
        this.name = Codegen.empty();
        this.overrideStrategy = Codegen.empty();
        this.project = Codegen.empty();
        this.resourceRecords = Codegen.empty();
        this.sslSettings = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> domainName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> overrideStrategy;
        private @Nullable Output<String> project;
        private @Nullable Output<List<DomainMappingResourceRecordGetArgs>> resourceRecords;
        private @Nullable Output<DomainMappingSslSettingsGetArgs> sslSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.name = defaults.name;
    	      this.overrideStrategy = defaults.overrideStrategy;
    	      this.project = defaults.project;
    	      this.resourceRecords = defaults.resourceRecords;
    	      this.sslSettings = defaults.sslSettings;
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }
        public Builder domainName(@Nullable String domainName) {
            this.domainName = Codegen.ofNullable(domainName);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder overrideStrategy(@Nullable Output<String> overrideStrategy) {
            this.overrideStrategy = overrideStrategy;
            return this;
        }
        public Builder overrideStrategy(@Nullable String overrideStrategy) {
            this.overrideStrategy = Codegen.ofNullable(overrideStrategy);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder resourceRecords(@Nullable Output<List<DomainMappingResourceRecordGetArgs>> resourceRecords) {
            this.resourceRecords = resourceRecords;
            return this;
        }
        public Builder resourceRecords(@Nullable List<DomainMappingResourceRecordGetArgs> resourceRecords) {
            this.resourceRecords = Codegen.ofNullable(resourceRecords);
            return this;
        }
        public Builder resourceRecords(DomainMappingResourceRecordGetArgs... resourceRecords) {
            return resourceRecords(List.of(resourceRecords));
        }
        public Builder sslSettings(@Nullable Output<DomainMappingSslSettingsGetArgs> sslSettings) {
            this.sslSettings = sslSettings;
            return this;
        }
        public Builder sslSettings(@Nullable DomainMappingSslSettingsGetArgs sslSettings) {
            this.sslSettings = Codegen.ofNullable(sslSettings);
            return this;
        }        public DomainMappingState build() {
            return new DomainMappingState(domainName, name, overrideStrategy, project, resourceRecords, sslSettings);
        }
    }
}
