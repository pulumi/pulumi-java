// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iot.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iot.inputs.RegistryCredentialGetArgs;
import com.pulumi.gcp.iot.inputs.RegistryEventNotificationConfigItemGetArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryState extends com.pulumi.resources.ResourceArgs {

    public static final RegistryState Empty = new RegistryState();

    /**
     * List of public key certificates to authenticate devices.
     * The structure is documented below.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<List<RegistryCredentialGetArgs>> credentials;

    public Optional<Output<List<RegistryCredentialGetArgs>>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * List of configurations for event notifications, such as PubSub topics
     * to publish device events to.
     * Structure is documented below.
     * 
     */
    @Import(name="eventNotificationConfigs")
    private @Nullable Output<List<RegistryEventNotificationConfigItemGetArgs>> eventNotificationConfigs;

    public Optional<Output<List<RegistryEventNotificationConfigItemGetArgs>>> eventNotificationConfigs() {
        return Optional.ofNullable(this.eventNotificationConfigs);
    }

    /**
     * Activate or deactivate HTTP.
     * The structure is documented below.
     * 
     */
    @Import(name="httpConfig")
    private @Nullable Output<Map<String,Object>> httpConfig;

    public Optional<Output<Map<String,Object>>> httpConfig() {
        return Optional.ofNullable(this.httpConfig);
    }

    /**
     * The default logging verbosity for activity from devices in this
     * registry. Specifies which events should be written to logs. For
     * example, if the LogLevel is ERROR, only events that terminate in
     * errors will be logged. LogLevel is inclusive; enabling INFO logging
     * will also enable ERROR logging.
     * Default value is `NONE`.
     * Possible values are `NONE`, `ERROR`, `INFO`, and `DEBUG`.
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * Activate or deactivate MQTT.
     * The structure is documented below.
     * 
     */
    @Import(name="mqttConfig")
    private @Nullable Output<Map<String,Object>> mqttConfig;

    public Optional<Output<Map<String,Object>>> mqttConfig() {
        return Optional.ofNullable(this.mqttConfig);
    }

    /**
     * A unique name for the resource, required by device registry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region in which the created registry should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A PubSub topic to publish device state updates.
     * The structure is documented below.
     * 
     */
    @Import(name="stateNotificationConfig")
    private @Nullable Output<Map<String,Object>> stateNotificationConfig;

    public Optional<Output<Map<String,Object>>> stateNotificationConfig() {
        return Optional.ofNullable(this.stateNotificationConfig);
    }

    private RegistryState() {}

    private RegistryState(RegistryState $) {
        this.credentials = $.credentials;
        this.eventNotificationConfigs = $.eventNotificationConfigs;
        this.httpConfig = $.httpConfig;
        this.logLevel = $.logLevel;
        this.mqttConfig = $.mqttConfig;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.stateNotificationConfig = $.stateNotificationConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryState $;

        public Builder() {
            $ = new RegistryState();
        }

        public Builder(RegistryState defaults) {
            $ = new RegistryState(Objects.requireNonNull(defaults));
        }

        public Builder credentials(@Nullable Output<List<RegistryCredentialGetArgs>> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(List<RegistryCredentialGetArgs> credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder credentials(RegistryCredentialGetArgs... credentials) {
            return credentials(List.of(credentials));
        }

        public Builder eventNotificationConfigs(@Nullable Output<List<RegistryEventNotificationConfigItemGetArgs>> eventNotificationConfigs) {
            $.eventNotificationConfigs = eventNotificationConfigs;
            return this;
        }

        public Builder eventNotificationConfigs(List<RegistryEventNotificationConfigItemGetArgs> eventNotificationConfigs) {
            return eventNotificationConfigs(Output.of(eventNotificationConfigs));
        }

        public Builder eventNotificationConfigs(RegistryEventNotificationConfigItemGetArgs... eventNotificationConfigs) {
            return eventNotificationConfigs(List.of(eventNotificationConfigs));
        }

        public Builder httpConfig(@Nullable Output<Map<String,Object>> httpConfig) {
            $.httpConfig = httpConfig;
            return this;
        }

        public Builder httpConfig(Map<String,Object> httpConfig) {
            return httpConfig(Output.of(httpConfig));
        }

        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        public Builder mqttConfig(@Nullable Output<Map<String,Object>> mqttConfig) {
            $.mqttConfig = mqttConfig;
            return this;
        }

        public Builder mqttConfig(Map<String,Object> mqttConfig) {
            return mqttConfig(Output.of(mqttConfig));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder stateNotificationConfig(@Nullable Output<Map<String,Object>> stateNotificationConfig) {
            $.stateNotificationConfig = stateNotificationConfig;
            return this;
        }

        public Builder stateNotificationConfig(Map<String,Object> stateNotificationConfig) {
            return stateNotificationConfig(Output.of(stateNotificationConfig));
        }

        public RegistryState build() {
            return $;
        }
    }

}
