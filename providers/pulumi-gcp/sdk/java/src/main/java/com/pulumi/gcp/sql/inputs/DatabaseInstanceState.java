// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceCloneGetArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceIpAddressGetArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceReplicaConfigurationGetArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceRestoreBackupContextGetArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceServerCaCertGetArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceState Empty = new DatabaseInstanceState();

    /**
     * The context needed to create this instance as a clone of another instance. When this field is set during
     * resource creation, this provider will attempt to clone another instance as indicated in the context. The
     * configuration is detailed below.
     * 
     */
    @Import(name="clone")
    private @Nullable Output<DatabaseInstanceCloneGetArgs> clone;

    public Optional<Output<DatabaseInstanceCloneGetArgs>> clone_() {
        return Optional.ofNullable(this.clone);
    }

    /**
     * The connection name of the instance to be used in
     * connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    /**
     * The MySQL, PostgreSQL or
     * SQL Server version to use. Supported values include `MYSQL_5_6`,
     * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
     * `POSTGRES_12`, `POSTGRES_13`, `SQLSERVER_2017_STANDARD`,
     * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
     * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
     * `SQLSERVER_2019_WEB`.
     * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
     * includes an up-to-date reference of supported versions.
     * 
     */
    @Import(name="databaseVersion")
    private @Nullable Output<String> databaseVersion;

    public Optional<Output<String>> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }

    /**
     * Whether or not to allow he provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` command that deletes the instance will fail.
     * 
     */
    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * The full path to the encryption key used for the CMEK disk encryption.  Setting
     * up disk encryption currently requires manual steps outside of this provider.
     * The provided key must be in the same region as the SQL instance.  In order
     * to use this feature, a special kind of service account must be created and
     * granted permission on this key.  This step can currently only be done
     * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
     * That service account needs the `Cloud KMS &gt; Cloud KMS CryptoKey Encrypter/Decrypter` role on your
     * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
     * 
     */
    @Import(name="encryptionKeyName")
    private @Nullable Output<String> encryptionKeyName;

    public Optional<Output<String>> encryptionKeyName() {
        return Optional.ofNullable(this.encryptionKeyName);
    }

    /**
     * The first IPv4 address of any type assigned.
     * 
     */
    @Import(name="firstIpAddress")
    private @Nullable Output<String> firstIpAddress;

    public Optional<Output<String>> firstIpAddress() {
        return Optional.ofNullable(this.firstIpAddress);
    }

    @Import(name="ipAddresses")
    private @Nullable Output<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses;

    public Optional<Output<List<DatabaseInstanceIpAddressGetArgs>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * The name of the existing instance that will
     * act as the master in the replication setup. Note, this requires the master to
     * have `binary_log_enabled` set, as well as existing backups.
     * 
     */
    @Import(name="masterInstanceName")
    private @Nullable Output<String> masterInstanceName;

    public Optional<Output<String>> masterInstanceName() {
        return Optional.ofNullable(this.masterInstanceName);
    }

    /**
     * A name for this whitelist entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The first private (`PRIVATE`) IPv4 address assigned.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The full project ID of the source instance.`
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The first public (`PRIMARY`) IPv4 address assigned.
     * 
     */
    @Import(name="publicIpAddress")
    private @Nullable Output<String> publicIpAddress;

    public Optional<Output<String>> publicIpAddress() {
        return Optional.ofNullable(this.publicIpAddress);
    }

    /**
     * The region the instance will sit in. Note, Cloud SQL is not
     * available in all regions - choose from one of the options listed [here](https://cloud.google.com/sql/docs/mysql/instance-locations).
     * A valid region must be provided to use this resource. If a region is not provided in the resource definition,
     * the provider region will be used instead, but this will be an apply-time error for instances if the provider
     * region is not supported with Cloud SQL. If you choose not to provide the `region` argument for this resource,
     * make sure you understand this.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The configuration for replication. The
     * configuration is detailed below. Valid only for MySQL instances.
     * 
     */
    @Import(name="replicaConfiguration")
    private @Nullable Output<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration;

    public Optional<Output<DatabaseInstanceReplicaConfigurationGetArgs>> replicaConfiguration() {
        return Optional.ofNullable(this.replicaConfiguration);
    }

    /**
     * The context needed to restore the database to a backup run. This field will
     * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
     * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
     * block during resource creation/update will trigger the restore action after the resource is created/updated.
     * 
     */
    @Import(name="restoreBackupContext")
    private @Nullable Output<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext;

    public Optional<Output<DatabaseInstanceRestoreBackupContextGetArgs>> restoreBackupContext() {
        return Optional.ofNullable(this.restoreBackupContext);
    }

    /**
     * Initial root password. Required for MS SQL Server, ignored by MySQL and PostgreSQL.
     * 
     */
    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    @Import(name="serverCaCerts")
    private @Nullable Output<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts;

    public Optional<Output<List<DatabaseInstanceServerCaCertGetArgs>>> serverCaCerts() {
        return Optional.ofNullable(this.serverCaCerts);
    }

    /**
     * The service account email address assigned to the
     * instance.
     * 
     */
    @Import(name="serviceAccountEmailAddress")
    private @Nullable Output<String> serviceAccountEmailAddress;

    public Optional<Output<String>> serviceAccountEmailAddress() {
        return Optional.ofNullable(this.serviceAccountEmailAddress);
    }

    /**
     * The settings to use for the database. The
     * configuration is detailed below. Required if `clone` is not set.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<DatabaseInstanceSettingsGetArgs> settings;

    public Optional<Output<DatabaseInstanceSettingsGetArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    private DatabaseInstanceState() {}

    private DatabaseInstanceState(DatabaseInstanceState $) {
        this.clone = $.clone;
        this.connectionName = $.connectionName;
        this.databaseVersion = $.databaseVersion;
        this.deletionProtection = $.deletionProtection;
        this.encryptionKeyName = $.encryptionKeyName;
        this.firstIpAddress = $.firstIpAddress;
        this.ipAddresses = $.ipAddresses;
        this.masterInstanceName = $.masterInstanceName;
        this.name = $.name;
        this.privateIpAddress = $.privateIpAddress;
        this.project = $.project;
        this.publicIpAddress = $.publicIpAddress;
        this.region = $.region;
        this.replicaConfiguration = $.replicaConfiguration;
        this.restoreBackupContext = $.restoreBackupContext;
        this.rootPassword = $.rootPassword;
        this.selfLink = $.selfLink;
        this.serverCaCerts = $.serverCaCerts;
        this.serviceAccountEmailAddress = $.serviceAccountEmailAddress;
        this.settings = $.settings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceState $;

        public Builder() {
            $ = new DatabaseInstanceState();
        }

        public Builder(DatabaseInstanceState defaults) {
            $ = new DatabaseInstanceState(Objects.requireNonNull(defaults));
        }

        public Builder clone_(@Nullable Output<DatabaseInstanceCloneGetArgs> clone) {
            $.clone = clone;
            return this;
        }

        public Builder clone_(DatabaseInstanceCloneGetArgs clone) {
            return clone_(Output.of(clone));
        }

        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        public Builder databaseVersion(@Nullable Output<String> databaseVersion) {
            $.databaseVersion = databaseVersion;
            return this;
        }

        public Builder databaseVersion(String databaseVersion) {
            return databaseVersion(Output.of(databaseVersion));
        }

        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        public Builder encryptionKeyName(@Nullable Output<String> encryptionKeyName) {
            $.encryptionKeyName = encryptionKeyName;
            return this;
        }

        public Builder encryptionKeyName(String encryptionKeyName) {
            return encryptionKeyName(Output.of(encryptionKeyName));
        }

        public Builder firstIpAddress(@Nullable Output<String> firstIpAddress) {
            $.firstIpAddress = firstIpAddress;
            return this;
        }

        public Builder firstIpAddress(String firstIpAddress) {
            return firstIpAddress(Output.of(firstIpAddress));
        }

        public Builder ipAddresses(@Nullable Output<List<DatabaseInstanceIpAddressGetArgs>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        public Builder ipAddresses(List<DatabaseInstanceIpAddressGetArgs> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        public Builder ipAddresses(DatabaseInstanceIpAddressGetArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        public Builder masterInstanceName(@Nullable Output<String> masterInstanceName) {
            $.masterInstanceName = masterInstanceName;
            return this;
        }

        public Builder masterInstanceName(String masterInstanceName) {
            return masterInstanceName(Output.of(masterInstanceName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder publicIpAddress(@Nullable Output<String> publicIpAddress) {
            $.publicIpAddress = publicIpAddress;
            return this;
        }

        public Builder publicIpAddress(String publicIpAddress) {
            return publicIpAddress(Output.of(publicIpAddress));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder replicaConfiguration(@Nullable Output<DatabaseInstanceReplicaConfigurationGetArgs> replicaConfiguration) {
            $.replicaConfiguration = replicaConfiguration;
            return this;
        }

        public Builder replicaConfiguration(DatabaseInstanceReplicaConfigurationGetArgs replicaConfiguration) {
            return replicaConfiguration(Output.of(replicaConfiguration));
        }

        public Builder restoreBackupContext(@Nullable Output<DatabaseInstanceRestoreBackupContextGetArgs> restoreBackupContext) {
            $.restoreBackupContext = restoreBackupContext;
            return this;
        }

        public Builder restoreBackupContext(DatabaseInstanceRestoreBackupContextGetArgs restoreBackupContext) {
            return restoreBackupContext(Output.of(restoreBackupContext));
        }

        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder serverCaCerts(@Nullable Output<List<DatabaseInstanceServerCaCertGetArgs>> serverCaCerts) {
            $.serverCaCerts = serverCaCerts;
            return this;
        }

        public Builder serverCaCerts(List<DatabaseInstanceServerCaCertGetArgs> serverCaCerts) {
            return serverCaCerts(Output.of(serverCaCerts));
        }

        public Builder serverCaCerts(DatabaseInstanceServerCaCertGetArgs... serverCaCerts) {
            return serverCaCerts(List.of(serverCaCerts));
        }

        public Builder serviceAccountEmailAddress(@Nullable Output<String> serviceAccountEmailAddress) {
            $.serviceAccountEmailAddress = serviceAccountEmailAddress;
            return this;
        }

        public Builder serviceAccountEmailAddress(String serviceAccountEmailAddress) {
            return serviceAccountEmailAddress(Output.of(serviceAccountEmailAddress));
        }

        public Builder settings(@Nullable Output<DatabaseInstanceSettingsGetArgs> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(DatabaseInstanceSettingsGetArgs settings) {
            return settings(Output.of(settings));
        }

        public DatabaseInstanceState build() {
            return $;
        }
    }

}
