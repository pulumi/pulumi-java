// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkEndpointArgs Empty = new NetworkEndpointArgs();

    /**
     * The name for a specific VM instance that the IP address belongs to.
     * This is required for network endpoints of type GCE_VM_IP_PORT.
     * The instance must be in the same zone of network endpoint group.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    public Output<String> instance() {
        return this.instance;
    }

    /**
     * IPv4 address of network endpoint. The IP address must belong
     * to a VM in GCE (either the primary IP or as part of an aliased IP
     * range).
     * 
     */
    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    /**
     * The network endpoint group this endpoint is part of.
     * 
     */
    @Import(name="networkEndpointGroup", required=true)
    private Output<String> networkEndpointGroup;

    public Output<String> networkEndpointGroup() {
        return this.networkEndpointGroup;
    }

    /**
     * Port number of network endpoint.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Zone where the containing network endpoint group is located.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private NetworkEndpointArgs() {}

    private NetworkEndpointArgs(NetworkEndpointArgs $) {
        this.instance = $.instance;
        this.ipAddress = $.ipAddress;
        this.networkEndpointGroup = $.networkEndpointGroup;
        this.port = $.port;
        this.project = $.project;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkEndpointArgs $;

        public Builder() {
            $ = new NetworkEndpointArgs();
        }

        public Builder(NetworkEndpointArgs defaults) {
            $ = new NetworkEndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public Builder networkEndpointGroup(Output<String> networkEndpointGroup) {
            $.networkEndpointGroup = networkEndpointGroup;
            return this;
        }

        public Builder networkEndpointGroup(String networkEndpointGroup) {
            return networkEndpointGroup(Output.of(networkEndpointGroup));
        }

        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public NetworkEndpointArgs build() {
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.networkEndpointGroup = Objects.requireNonNull($.networkEndpointGroup, "expected parameter 'networkEndpointGroup' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            return $;
        }
    }

}
