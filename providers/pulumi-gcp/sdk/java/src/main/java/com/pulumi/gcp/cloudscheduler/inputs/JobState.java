// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudscheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudscheduler.inputs.JobAppEngineHttpTargetGetArgs;
import com.pulumi.gcp.cloudscheduler.inputs.JobHttpTargetGetArgs;
import com.pulumi.gcp.cloudscheduler.inputs.JobPubsubTargetGetArgs;
import com.pulumi.gcp.cloudscheduler.inputs.JobRetryConfigGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobState extends com.pulumi.resources.ResourceArgs {

    public static final JobState Empty = new JobState();

    /**
     * App Engine HTTP target.
     * If the job providers a App Engine HTTP target the cron will
     * send a request to the service instance
     * Structure is documented below.
     * 
     */
    @Import(name="appEngineHttpTarget")
    private @Nullable Output<JobAppEngineHttpTargetGetArgs> appEngineHttpTarget;

    public Optional<Output<JobAppEngineHttpTargetGetArgs>> appEngineHttpTarget() {
        return Optional.ofNullable(this.appEngineHttpTarget);
    }

    /**
     * The deadline for job attempts. If the request handler does not respond by this deadline then the request is
     * cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
     * execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
     * The allowed duration for this deadline is:
     * * For HTTP targets, between 15 seconds and 30 minutes.
     * * For App Engine HTTP targets, between 15 seconds and 24 hours.
     * * **Note**: For PubSub targets, this field is ignored - setting it will introduce an unresolvable diff.
     *   A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
     * 
     */
    @Import(name="attemptDeadline")
    private @Nullable Output<String> attemptDeadline;

    public Optional<Output<String>> attemptDeadline() {
        return Optional.ofNullable(this.attemptDeadline);
    }

    /**
     * A human-readable description for the job.
     * This string must not contain more than 500 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * HTTP target.
     * If the job providers a http_target the cron will
     * send a request to the targeted url
     * Structure is documented below.
     * 
     */
    @Import(name="httpTarget")
    private @Nullable Output<JobHttpTargetGetArgs> httpTarget;

    public Optional<Output<JobHttpTargetGetArgs>> httpTarget() {
        return Optional.ofNullable(this.httpTarget);
    }

    /**
     * The name of the job.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Pub/Sub target
     * If the job providers a Pub/Sub target the cron will publish
     * a message to the provided topic
     * Structure is documented below.
     * 
     */
    @Import(name="pubsubTarget")
    private @Nullable Output<JobPubsubTargetGetArgs> pubsubTarget;

    public Optional<Output<JobPubsubTargetGetArgs>> pubsubTarget() {
        return Optional.ofNullable(this.pubsubTarget);
    }

    /**
     * Region where the scheduler job resides. If it is not provided, this provider will use the provider default.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * By default, if a job does not complete successfully,
     * meaning that an acknowledgement is not received from the handler,
     * then it will be retried with exponential backoff according to the settings
     * Structure is documented below.
     * 
     */
    @Import(name="retryConfig")
    private @Nullable Output<JobRetryConfigGetArgs> retryConfig;

    public Optional<Output<JobRetryConfigGetArgs>> retryConfig() {
        return Optional.ofNullable(this.retryConfig);
    }

    /**
     * Describes the schedule on which the job will be executed.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Specifies the time zone to be used in interpreting schedule.
     * The value of this field must be a time zone name from the tz database.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private JobState() {}

    private JobState(JobState $) {
        this.appEngineHttpTarget = $.appEngineHttpTarget;
        this.attemptDeadline = $.attemptDeadline;
        this.description = $.description;
        this.httpTarget = $.httpTarget;
        this.name = $.name;
        this.project = $.project;
        this.pubsubTarget = $.pubsubTarget;
        this.region = $.region;
        this.retryConfig = $.retryConfig;
        this.schedule = $.schedule;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobState $;

        public Builder() {
            $ = new JobState();
        }

        public Builder(JobState defaults) {
            $ = new JobState(Objects.requireNonNull(defaults));
        }

        public Builder appEngineHttpTarget(@Nullable Output<JobAppEngineHttpTargetGetArgs> appEngineHttpTarget) {
            $.appEngineHttpTarget = appEngineHttpTarget;
            return this;
        }

        public Builder appEngineHttpTarget(JobAppEngineHttpTargetGetArgs appEngineHttpTarget) {
            return appEngineHttpTarget(Output.of(appEngineHttpTarget));
        }

        public Builder attemptDeadline(@Nullable Output<String> attemptDeadline) {
            $.attemptDeadline = attemptDeadline;
            return this;
        }

        public Builder attemptDeadline(String attemptDeadline) {
            return attemptDeadline(Output.of(attemptDeadline));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder httpTarget(@Nullable Output<JobHttpTargetGetArgs> httpTarget) {
            $.httpTarget = httpTarget;
            return this;
        }

        public Builder httpTarget(JobHttpTargetGetArgs httpTarget) {
            return httpTarget(Output.of(httpTarget));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder pubsubTarget(@Nullable Output<JobPubsubTargetGetArgs> pubsubTarget) {
            $.pubsubTarget = pubsubTarget;
            return this;
        }

        public Builder pubsubTarget(JobPubsubTargetGetArgs pubsubTarget) {
            return pubsubTarget(Output.of(pubsubTarget));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder retryConfig(@Nullable Output<JobRetryConfigGetArgs> retryConfig) {
            $.retryConfig = retryConfig;
            return this;
        }

        public Builder retryConfig(JobRetryConfigGetArgs retryConfig) {
            return retryConfig(Output.of(retryConfig));
        }

        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public JobState build() {
            return $;
        }
    }

}
