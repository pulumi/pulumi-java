// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.notebooks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.notebooks.inputs.RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs Empty = new RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs();

    /**
     * - 
     * Optional. Specifies whether the disk will be auto-deleted
     * when the instance is deleted (but not when the disk is
     * detached from the instance).
     * 
     */
    @Import(name="autoDelete")
    private @Nullable Output<Boolean> autoDelete;

    public Optional<Output<Boolean>> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }

    /**
     * - 
     * Optional. Indicates that this is a boot disk. The virtual
     * machine will use the first partition of the disk for its
     * root filesystem.
     * 
     */
    @Import(name="boot")
    private @Nullable Output<Boolean> boot;

    public Optional<Output<Boolean>> boot() {
        return Optional.ofNullable(this.boot);
    }

    /**
     * - 
     * Optional. Specifies a unique device name of your choice
     * that is reflected into the /dev/disk/by-id/google-* tree
     * of a Linux operating system running within the instance.
     * This name can be used to reference the device for mounting,
     * resizing, and so on, from within the instance.
     * If not specified, the server chooses a default device name
     * to apply to this disk, in the form persistent-disk-x, where
     * x is a number assigned by Google Compute Engine. This field
     * is only applicable for persistent disks.
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * - 
     * Indicates a list of features to enable on the guest operating
     * system. Applicable only for bootable images. To see a list of
     * available features, read `https://cloud.google.com/compute/docs/
     * images/create-delete-deprecate-private-images#guest-os-features`
     * options. ``
     * 
     */
    @Import(name="guestOsFeatures")
    private @Nullable Output<List<String>> guestOsFeatures;

    public Optional<Output<List<String>>> guestOsFeatures() {
        return Optional.ofNullable(this.guestOsFeatures);
    }

    /**
     * - 
     * Output only. A zero-based index to this disk, where 0 is
     * reserved for the boot disk. If you have many disks attached
     * to an instance, each disk would have a unique index number.
     * 
     */
    @Import(name="index")
    private @Nullable Output<Integer> index;

    public Optional<Output<Integer>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * Input only. Specifies the parameters for a new disk that will
     * be created alongside the new instance. Use initialization
     * parameters to create boot disks or local SSDs attached to the
     * new instance. This property is mutually exclusive with the
     * source property; you can only define one or the other, but not
     * both.
     * Structure is documented below.
     * 
     */
    @Import(name="initializeParams")
    private @Nullable Output<RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsGetArgs> initializeParams;

    public Optional<Output<RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsGetArgs>> initializeParams() {
        return Optional.ofNullable(this.initializeParams);
    }

    /**
     * &#34;Specifies the disk interface to use for attaching this disk,
     * which is either SCSI or NVME. The default is SCSI. Persistent
     * disks must always use SCSI and the request will fail if you attempt
     * to attach a persistent disk in any other format than SCSI. Local SSDs
     * can use either NVME or SCSI. For performance characteristics of SCSI
     * over NVMe, see Local SSD performance. Valid values: * NVME * SCSI&#34;.
     * 
     */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * - 
     * Type of the resource. Always compute#attachedDisk for attached
     * disks.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * - 
     * Output only. Any valid publicly visible licenses.
     * 
     */
    @Import(name="licenses")
    private @Nullable Output<List<String>> licenses;

    public Optional<Output<List<String>>> licenses() {
        return Optional.ofNullable(this.licenses);
    }

    /**
     * The mode in which to attach this disk, either READ_WRITE
     * or READ_ONLY. If not specified, the default is to attach
     * the disk in READ_WRITE mode.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies a valid partial or full URL to an existing
     * Persistent Disk resource.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Accelerator model. For valid values, see
     * `https://cloud.google.com/vertex-ai/docs/workbench/reference/
     * rest/v1/projects.locations.runtimes#AcceleratorType`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs() {}

    private RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs(RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs $) {
        this.autoDelete = $.autoDelete;
        this.boot = $.boot;
        this.deviceName = $.deviceName;
        this.guestOsFeatures = $.guestOsFeatures;
        this.index = $.index;
        this.initializeParams = $.initializeParams;
        this.interface_ = $.interface_;
        this.kind = $.kind;
        this.licenses = $.licenses;
        this.mode = $.mode;
        this.source = $.source;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs $;

        public Builder() {
            $ = new RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs();
        }

        public Builder(RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs defaults) {
            $ = new RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoDelete(@Nullable Output<Boolean> autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        public Builder autoDelete(Boolean autoDelete) {
            return autoDelete(Output.of(autoDelete));
        }

        public Builder boot(@Nullable Output<Boolean> boot) {
            $.boot = boot;
            return this;
        }

        public Builder boot(Boolean boot) {
            return boot(Output.of(boot));
        }

        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        public Builder guestOsFeatures(@Nullable Output<List<String>> guestOsFeatures) {
            $.guestOsFeatures = guestOsFeatures;
            return this;
        }

        public Builder guestOsFeatures(List<String> guestOsFeatures) {
            return guestOsFeatures(Output.of(guestOsFeatures));
        }

        public Builder guestOsFeatures(String... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }

        public Builder index(@Nullable Output<Integer> index) {
            $.index = index;
            return this;
        }

        public Builder index(Integer index) {
            return index(Output.of(index));
        }

        public Builder initializeParams(@Nullable Output<RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsGetArgs> initializeParams) {
            $.initializeParams = initializeParams;
            return this;
        }

        public Builder initializeParams(RuntimeVirtualMachineVirtualMachineConfigDataDiskInitializeParamsGetArgs initializeParams) {
            return initializeParams(Output.of(initializeParams));
        }

        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder licenses(@Nullable Output<List<String>> licenses) {
            $.licenses = licenses;
            return this;
        }

        public Builder licenses(List<String> licenses) {
            return licenses(Output.of(licenses));
        }

        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }

        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RuntimeVirtualMachineVirtualMachineConfigDataDiskGetArgs build() {
            return $;
        }
    }

}
