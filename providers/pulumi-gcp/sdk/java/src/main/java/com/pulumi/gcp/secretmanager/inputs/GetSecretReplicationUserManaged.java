// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.secretmanager.inputs.GetSecretReplicationUserManagedReplica;
import java.util.List;
import java.util.Objects;


public final class GetSecretReplicationUserManaged extends com.pulumi.resources.InvokeArgs {

    public static final GetSecretReplicationUserManaged Empty = new GetSecretReplicationUserManaged();

    @Import(name="replicas", required=true)
      private final List<GetSecretReplicationUserManagedReplica> replicas;

    public List<GetSecretReplicationUserManagedReplica> replicas() {
        return this.replicas;
    }

    public GetSecretReplicationUserManaged(List<GetSecretReplicationUserManagedReplica> replicas) {
        this.replicas = Objects.requireNonNull(replicas, "expected parameter 'replicas' to be non-null");
    }

    private GetSecretReplicationUserManaged() {
        this.replicas = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretReplicationUserManaged defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetSecretReplicationUserManagedReplica> replicas;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSecretReplicationUserManaged defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.replicas = defaults.replicas;
        }

        public Builder replicas(List<GetSecretReplicationUserManagedReplica> replicas) {
            this.replicas = Objects.requireNonNull(replicas);
            return this;
        }
        public Builder replicas(GetSecretReplicationUserManagedReplica... replicas) {
            return replicas(List.of(replicas));
        }        public GetSecretReplicationUserManaged build() {
            return new GetSecretReplicationUserManaged(replicas);
        }
    }
}
