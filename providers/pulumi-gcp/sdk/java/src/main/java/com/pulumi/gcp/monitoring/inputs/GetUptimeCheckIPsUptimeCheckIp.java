// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetUptimeCheckIPsUptimeCheckIp extends com.pulumi.resources.InvokeArgs {

    public static final GetUptimeCheckIPsUptimeCheckIp Empty = new GetUptimeCheckIPsUptimeCheckIp();

    /**
     * The IP address from which the Uptime check originates. This is a fully specified IP address
     * (not an IP address range). Most IP addresses, as of this publication, are in IPv4 format; however, one should not
     * rely on the IP addresses being in IPv4 format indefinitely, and should support interpreting this field in either
     * IPv4 or IPv6 format.
     * 
     */
    @Import(name="ipAddress", required=true)
    private String ipAddress;

    /**
     * @return The IP address from which the Uptime check originates. This is a fully specified IP address
     * (not an IP address range). Most IP addresses, as of this publication, are in IPv4 format; however, one should not
     * rely on the IP addresses being in IPv4 format indefinitely, and should support interpreting this field in either
     * IPv4 or IPv6 format.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * A more specific location within the region that typically encodes a particular city/town/metro
     * (and its containing state/province or country) within the broader umbrella region category.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return A more specific location within the region that typically encodes a particular city/town/metro
     * (and its containing state/province or country) within the broader umbrella region category.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * A broad region category in which the IP address is located.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return A broad region category in which the IP address is located.
     * 
     */
    public String region() {
        return this.region;
    }

    private GetUptimeCheckIPsUptimeCheckIp() {}

    private GetUptimeCheckIPsUptimeCheckIp(GetUptimeCheckIPsUptimeCheckIp $) {
        this.ipAddress = $.ipAddress;
        this.location = $.location;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUptimeCheckIPsUptimeCheckIp defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUptimeCheckIPsUptimeCheckIp $;

        public Builder() {
            $ = new GetUptimeCheckIPsUptimeCheckIp();
        }

        public Builder(GetUptimeCheckIPsUptimeCheckIp defaults) {
            $ = new GetUptimeCheckIPsUptimeCheckIp(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress The IP address from which the Uptime check originates. This is a fully specified IP address
         * (not an IP address range). Most IP addresses, as of this publication, are in IPv4 format; however, one should not
         * rely on the IP addresses being in IPv4 format indefinitely, and should support interpreting this field in either
         * IPv4 or IPv6 format.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param location A more specific location within the region that typically encodes a particular city/town/metro
         * (and its containing state/province or country) within the broader umbrella region category.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param region A broad region category in which the IP address is located.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        public GetUptimeCheckIPsUptimeCheckIp build() {
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
