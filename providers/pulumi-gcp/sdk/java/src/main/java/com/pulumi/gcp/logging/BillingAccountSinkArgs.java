// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.logging.inputs.BillingAccountSinkBigqueryOptionsArgs;
import com.pulumi.gcp.logging.inputs.BillingAccountSinkExclusionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BillingAccountSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final BillingAccountSinkArgs Empty = new BillingAccountSinkArgs();

    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    @Import(name="bigqueryOptions")
    private @Nullable Output<BillingAccountSinkBigqueryOptionsArgs> bigqueryOptions;

    public Optional<Output<BillingAccountSinkBigqueryOptionsArgs>> bigqueryOptions() {
        return Optional.ofNullable(this.bigqueryOptions);
    }

    /**
     * The billing account exported to the sink.
     * 
     */
    @Import(name="billingAccount", required=true)
    private Output<String> billingAccount;

    public Output<String> billingAccount() {
        return this.billingAccount;
    }

    /**
     * A description of this exclusion.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a
     * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket. Examples:
     * 
     * The writer associated with the sink must have access to write to the above resource.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    public Output<String> destination() {
        return this.destination;
    }

    /**
     * If set to True, then this exclusion is disabled and it does not exclude any log entries.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<BillingAccountSinkExclusionArgs>> exclusions;

    public Optional<Output<List<BillingAccountSinkExclusionArgs>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private BillingAccountSinkArgs() {}

    private BillingAccountSinkArgs(BillingAccountSinkArgs $) {
        this.bigqueryOptions = $.bigqueryOptions;
        this.billingAccount = $.billingAccount;
        this.description = $.description;
        this.destination = $.destination;
        this.disabled = $.disabled;
        this.exclusions = $.exclusions;
        this.filter = $.filter;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BillingAccountSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BillingAccountSinkArgs $;

        public Builder() {
            $ = new BillingAccountSinkArgs();
        }

        public Builder(BillingAccountSinkArgs defaults) {
            $ = new BillingAccountSinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder bigqueryOptions(@Nullable Output<BillingAccountSinkBigqueryOptionsArgs> bigqueryOptions) {
            $.bigqueryOptions = bigqueryOptions;
            return this;
        }

        public Builder bigqueryOptions(BillingAccountSinkBigqueryOptionsArgs bigqueryOptions) {
            return bigqueryOptions(Output.of(bigqueryOptions));
        }

        public Builder billingAccount(Output<String> billingAccount) {
            $.billingAccount = billingAccount;
            return this;
        }

        public Builder billingAccount(String billingAccount) {
            return billingAccount(Output.of(billingAccount));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder exclusions(@Nullable Output<List<BillingAccountSinkExclusionArgs>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        public Builder exclusions(List<BillingAccountSinkExclusionArgs> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        public Builder exclusions(BillingAccountSinkExclusionArgs... exclusions) {
            return exclusions(List.of(exclusions));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public BillingAccountSinkArgs build() {
            $.billingAccount = Objects.requireNonNull($.billingAccount, "expected parameter 'billingAccount' to be non-null");
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            return $;
        }
    }

}
