// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceCdnPolicyCacheKeyPolicyArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceCdnPolicyNegativeCachingPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionBackendServiceCdnPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceCdnPolicyArgs Empty = new RegionBackendServiceCdnPolicyArgs();

    /**
     * The CacheKeyPolicy for this CdnPolicy.
     * Structure is documented below.
     * 
     */
    @Import(name="cacheKeyPolicy")
    private @Nullable Output<RegionBackendServiceCdnPolicyCacheKeyPolicyArgs> cacheKeyPolicy;

    public Optional<Output<RegionBackendServiceCdnPolicyCacheKeyPolicyArgs>> cacheKeyPolicy() {
        return Optional.ofNullable(this.cacheKeyPolicy);
    }

    /**
     * Specifies the cache setting for all responses from this backend.
     * The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
     * Possible values are `USE_ORIGIN_HEADERS`, `FORCE_CACHE_ALL`, and `CACHE_ALL_STATIC`.
     * 
     */
    @Import(name="cacheMode")
    private @Nullable Output<String> cacheMode;

    public Optional<Output<String>> cacheMode() {
        return Optional.ofNullable(this.cacheMode);
    }

    /**
     * Specifies the maximum allowed TTL for cached content served by this origin.
     * 
     */
    @Import(name="clientTtl")
    private @Nullable Output<Integer> clientTtl;

    public Optional<Output<Integer>> clientTtl() {
        return Optional.ofNullable(this.clientTtl);
    }

    /**
     * Specifies the default TTL for cached content served by this origin for responses
     * that do not have an existing valid TTL (max-age or s-max-age).
     * 
     */
    @Import(name="defaultTtl")
    private @Nullable Output<Integer> defaultTtl;

    public Optional<Output<Integer>> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }

    /**
     * Specifies the maximum allowed TTL for cached content served by this origin.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<Integer> maxTtl;

    public Optional<Output<Integer>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
     * 
     */
    @Import(name="negativeCaching")
    private @Nullable Output<Boolean> negativeCaching;

    public Optional<Output<Boolean>> negativeCaching() {
        return Optional.ofNullable(this.negativeCaching);
    }

    /**
     * Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
     * Omitting the policy and leaving negativeCaching enabled will use Cloud CDN&#39;s default cache TTLs.
     * Structure is documented below.
     * 
     */
    @Import(name="negativeCachingPolicies")
    private @Nullable Output<List<RegionBackendServiceCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicies;

    public Optional<Output<List<RegionBackendServiceCdnPolicyNegativeCachingPolicyArgs>>> negativeCachingPolicies() {
        return Optional.ofNullable(this.negativeCachingPolicies);
    }

    /**
     * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
     * 
     */
    @Import(name="serveWhileStale")
    private @Nullable Output<Integer> serveWhileStale;

    public Optional<Output<Integer>> serveWhileStale() {
        return Optional.ofNullable(this.serveWhileStale);
    }

    /**
     * Maximum number of seconds the response to a signed URL request
     * will be considered fresh, defaults to 1hr (3600s). After this
     * time period, the response will be revalidated before
     * being served.
     * When serving responses to signed URL requests, Cloud CDN will
     * internally behave as though all responses from this backend had a
     * &#34;Cache-Control: public, max-age=[TTL]&#34; header, regardless of any
     * existing Cache-Control header. The actual headers served in
     * responses will not be altered.
     * 
     */
    @Import(name="signedUrlCacheMaxAgeSec")
    private @Nullable Output<Integer> signedUrlCacheMaxAgeSec;

    public Optional<Output<Integer>> signedUrlCacheMaxAgeSec() {
        return Optional.ofNullable(this.signedUrlCacheMaxAgeSec);
    }

    private RegionBackendServiceCdnPolicyArgs() {}

    private RegionBackendServiceCdnPolicyArgs(RegionBackendServiceCdnPolicyArgs $) {
        this.cacheKeyPolicy = $.cacheKeyPolicy;
        this.cacheMode = $.cacheMode;
        this.clientTtl = $.clientTtl;
        this.defaultTtl = $.defaultTtl;
        this.maxTtl = $.maxTtl;
        this.negativeCaching = $.negativeCaching;
        this.negativeCachingPolicies = $.negativeCachingPolicies;
        this.serveWhileStale = $.serveWhileStale;
        this.signedUrlCacheMaxAgeSec = $.signedUrlCacheMaxAgeSec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionBackendServiceCdnPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionBackendServiceCdnPolicyArgs $;

        public Builder() {
            $ = new RegionBackendServiceCdnPolicyArgs();
        }

        public Builder(RegionBackendServiceCdnPolicyArgs defaults) {
            $ = new RegionBackendServiceCdnPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder cacheKeyPolicy(@Nullable Output<RegionBackendServiceCdnPolicyCacheKeyPolicyArgs> cacheKeyPolicy) {
            $.cacheKeyPolicy = cacheKeyPolicy;
            return this;
        }

        public Builder cacheKeyPolicy(RegionBackendServiceCdnPolicyCacheKeyPolicyArgs cacheKeyPolicy) {
            return cacheKeyPolicy(Output.of(cacheKeyPolicy));
        }

        public Builder cacheMode(@Nullable Output<String> cacheMode) {
            $.cacheMode = cacheMode;
            return this;
        }

        public Builder cacheMode(String cacheMode) {
            return cacheMode(Output.of(cacheMode));
        }

        public Builder clientTtl(@Nullable Output<Integer> clientTtl) {
            $.clientTtl = clientTtl;
            return this;
        }

        public Builder clientTtl(Integer clientTtl) {
            return clientTtl(Output.of(clientTtl));
        }

        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            $.defaultTtl = defaultTtl;
            return this;
        }

        public Builder defaultTtl(Integer defaultTtl) {
            return defaultTtl(Output.of(defaultTtl));
        }

        public Builder maxTtl(@Nullable Output<Integer> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        public Builder maxTtl(Integer maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        public Builder negativeCaching(@Nullable Output<Boolean> negativeCaching) {
            $.negativeCaching = negativeCaching;
            return this;
        }

        public Builder negativeCaching(Boolean negativeCaching) {
            return negativeCaching(Output.of(negativeCaching));
        }

        public Builder negativeCachingPolicies(@Nullable Output<List<RegionBackendServiceCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicies) {
            $.negativeCachingPolicies = negativeCachingPolicies;
            return this;
        }

        public Builder negativeCachingPolicies(List<RegionBackendServiceCdnPolicyNegativeCachingPolicyArgs> negativeCachingPolicies) {
            return negativeCachingPolicies(Output.of(negativeCachingPolicies));
        }

        public Builder negativeCachingPolicies(RegionBackendServiceCdnPolicyNegativeCachingPolicyArgs... negativeCachingPolicies) {
            return negativeCachingPolicies(List.of(negativeCachingPolicies));
        }

        public Builder serveWhileStale(@Nullable Output<Integer> serveWhileStale) {
            $.serveWhileStale = serveWhileStale;
            return this;
        }

        public Builder serveWhileStale(Integer serveWhileStale) {
            return serveWhileStale(Output.of(serveWhileStale));
        }

        public Builder signedUrlCacheMaxAgeSec(@Nullable Output<Integer> signedUrlCacheMaxAgeSec) {
            $.signedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
            return this;
        }

        public Builder signedUrlCacheMaxAgeSec(Integer signedUrlCacheMaxAgeSec) {
            return signedUrlCacheMaxAgeSec(Output.of(signedUrlCacheMaxAgeSec));
        }

        public RegionBackendServiceCdnPolicyArgs build() {
            return $;
        }
    }

}
