// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs Empty = new RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs();

    /**
     * The default RegionBackendService resource. Before
     * forwarding the request to backendService, the loadbalancer applies any relevant
     * headerActions specified as part of this backendServiceWeight.
     * 
     */
    @Import(name="backendService", required=true)
    private Output<String> backendService;

    public Output<String> backendService() {
        return this.backendService;
    }

    /**
     * Specifies changes to request and response headers that need to take effect for
     * the selected backendService. headerAction specified here take effect before
     * headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
     * Structure is documented below.
     * 
     */
    @Import(name="headerAction")
    private @Nullable Output<RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionGetArgs> headerAction;

    public Optional<Output<RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionGetArgs>> headerAction() {
        return Optional.ofNullable(this.headerAction);
    }

    /**
     * Specifies the fraction of traffic sent to backendService, computed as weight /
     * (sum of all weightedBackendService weights in routeAction) . The selection of a
     * backend service is determined only for new traffic. Once a user&#39;s request has
     * been directed to a backendService, subsequent requests will be sent to the same
     * backendService as determined by the BackendService&#39;s session affinity policy.
     * The value must be between 0 and 1000
     * 
     */
    @Import(name="weight", required=true)
    private Output<Integer> weight;

    public Output<Integer> weight() {
        return this.weight;
    }

    private RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs() {}

    private RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs $) {
        this.backendService = $.backendService;
        this.headerAction = $.headerAction;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs $;

        public Builder() {
            $ = new RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs();
        }

        public Builder(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs defaults) {
            $ = new RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder backendService(Output<String> backendService) {
            $.backendService = backendService;
            return this;
        }

        public Builder backendService(String backendService) {
            return backendService(Output.of(backendService));
        }

        public Builder headerAction(@Nullable Output<RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionGetArgs> headerAction) {
            $.headerAction = headerAction;
            return this;
        }

        public Builder headerAction(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionGetArgs headerAction) {
            return headerAction(Output.of(headerAction));
        }

        public Builder weight(Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceGetArgs build() {
            $.backendService = Objects.requireNonNull($.backendService, "expected parameter 'backendService' to be non-null");
            $.weight = Objects.requireNonNull($.weight, "expected parameter 'weight' to be non-null");
            return $;
        }
    }

}
