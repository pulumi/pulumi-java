// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneDatabaseEncryptionArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneMainVolumeArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneProxyConfigArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneReplicaPlacementArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneRootVolumeArgs;
import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneSshConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AzureClusterControlPlaneArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureClusterControlPlaneArgs Empty = new AzureClusterControlPlaneArgs();

    /**
     * Optional. Configuration related to application-layer secrets encryption.
     * 
     */
    @Import(name="databaseEncryption")
      private final @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption;

    public Output<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption() {
        return this.databaseEncryption == null ? Codegen.empty() : this.databaseEncryption;
    }

    /**
     * Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster&#39;s etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
     * 
     */
    @Import(name="mainVolume")
      private final @Nullable Output<AzureClusterControlPlaneMainVolumeArgs> mainVolume;

    public Output<AzureClusterControlPlaneMainVolumeArgs> mainVolume() {
        return this.mainVolume == null ? Codegen.empty() : this.mainVolume;
    }

    /**
     * Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    @Import(name="proxyConfig")
      private final @Nullable Output<AzureClusterControlPlaneProxyConfigArgs> proxyConfig;

    public Output<AzureClusterControlPlaneProxyConfigArgs> proxyConfig() {
        return this.proxyConfig == null ? Codegen.empty() : this.proxyConfig;
    }

    /**
     * Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
     * 
     */
    @Import(name="replicaPlacements")
      private final @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements;

    public Output<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements() {
        return this.replicaPlacements == null ? Codegen.empty() : this.replicaPlacements;
    }

    /**
     * Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
     * 
     */
    @Import(name="rootVolume")
      private final @Nullable Output<AzureClusterControlPlaneRootVolumeArgs> rootVolume;

    public Output<AzureClusterControlPlaneRootVolumeArgs> rootVolume() {
        return this.rootVolume == null ? Codegen.empty() : this.rootVolume;
    }

    /**
     * Required. SSH configuration for how to access the underlying control plane machines.
     * 
     */
    @Import(name="sshConfig", required=true)
      private final Output<AzureClusterControlPlaneSshConfigArgs> sshConfig;

    public Output<AzureClusterControlPlaneSshConfigArgs> sshConfig() {
        return this.sshConfig;
    }

    /**
     * For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    @Import(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Optional. A set of tags to apply to all underlying control plane Azure resources.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Required. The Kubernetes version to run on control plane replicas (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
     * 
     */
    @Import(name="version", required=true)
      private final Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    /**
     * Optional. The Azure VM size name. Example: `Standard_DS2_v2`. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to `Standard_DS2_v2`.
     * 
     */
    @Import(name="vmSize")
      private final @Nullable Output<String> vmSize;

    public Output<String> vmSize() {
        return this.vmSize == null ? Codegen.empty() : this.vmSize;
    }

    public AzureClusterControlPlaneArgs(
        @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption,
        @Nullable Output<AzureClusterControlPlaneMainVolumeArgs> mainVolume,
        @Nullable Output<AzureClusterControlPlaneProxyConfigArgs> proxyConfig,
        @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements,
        @Nullable Output<AzureClusterControlPlaneRootVolumeArgs> rootVolume,
        Output<AzureClusterControlPlaneSshConfigArgs> sshConfig,
        Output<String> subnetId,
        @Nullable Output<Map<String,String>> tags,
        Output<String> version,
        @Nullable Output<String> vmSize) {
        this.databaseEncryption = databaseEncryption;
        this.mainVolume = mainVolume;
        this.proxyConfig = proxyConfig;
        this.replicaPlacements = replicaPlacements;
        this.rootVolume = rootVolume;
        this.sshConfig = Objects.requireNonNull(sshConfig, "expected parameter 'sshConfig' to be non-null");
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.vmSize = vmSize;
    }

    private AzureClusterControlPlaneArgs() {
        this.databaseEncryption = Codegen.empty();
        this.mainVolume = Codegen.empty();
        this.proxyConfig = Codegen.empty();
        this.replicaPlacements = Codegen.empty();
        this.rootVolume = Codegen.empty();
        this.sshConfig = Codegen.empty();
        this.subnetId = Codegen.empty();
        this.tags = Codegen.empty();
        this.version = Codegen.empty();
        this.vmSize = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureClusterControlPlaneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption;
        private @Nullable Output<AzureClusterControlPlaneMainVolumeArgs> mainVolume;
        private @Nullable Output<AzureClusterControlPlaneProxyConfigArgs> proxyConfig;
        private @Nullable Output<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements;
        private @Nullable Output<AzureClusterControlPlaneRootVolumeArgs> rootVolume;
        private Output<AzureClusterControlPlaneSshConfigArgs> sshConfig;
        private Output<String> subnetId;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> version;
        private @Nullable Output<String> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureClusterControlPlaneArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseEncryption = defaults.databaseEncryption;
    	      this.mainVolume = defaults.mainVolume;
    	      this.proxyConfig = defaults.proxyConfig;
    	      this.replicaPlacements = defaults.replicaPlacements;
    	      this.rootVolume = defaults.rootVolume;
    	      this.sshConfig = defaults.sshConfig;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder databaseEncryption(@Nullable Output<AzureClusterControlPlaneDatabaseEncryptionArgs> databaseEncryption) {
            this.databaseEncryption = databaseEncryption;
            return this;
        }
        public Builder databaseEncryption(@Nullable AzureClusterControlPlaneDatabaseEncryptionArgs databaseEncryption) {
            this.databaseEncryption = Codegen.ofNullable(databaseEncryption);
            return this;
        }
        public Builder mainVolume(@Nullable Output<AzureClusterControlPlaneMainVolumeArgs> mainVolume) {
            this.mainVolume = mainVolume;
            return this;
        }
        public Builder mainVolume(@Nullable AzureClusterControlPlaneMainVolumeArgs mainVolume) {
            this.mainVolume = Codegen.ofNullable(mainVolume);
            return this;
        }
        public Builder proxyConfig(@Nullable Output<AzureClusterControlPlaneProxyConfigArgs> proxyConfig) {
            this.proxyConfig = proxyConfig;
            return this;
        }
        public Builder proxyConfig(@Nullable AzureClusterControlPlaneProxyConfigArgs proxyConfig) {
            this.proxyConfig = Codegen.ofNullable(proxyConfig);
            return this;
        }
        public Builder replicaPlacements(@Nullable Output<List<AzureClusterControlPlaneReplicaPlacementArgs>> replicaPlacements) {
            this.replicaPlacements = replicaPlacements;
            return this;
        }
        public Builder replicaPlacements(@Nullable List<AzureClusterControlPlaneReplicaPlacementArgs> replicaPlacements) {
            this.replicaPlacements = Codegen.ofNullable(replicaPlacements);
            return this;
        }
        public Builder replicaPlacements(AzureClusterControlPlaneReplicaPlacementArgs... replicaPlacements) {
            return replicaPlacements(List.of(replicaPlacements));
        }
        public Builder rootVolume(@Nullable Output<AzureClusterControlPlaneRootVolumeArgs> rootVolume) {
            this.rootVolume = rootVolume;
            return this;
        }
        public Builder rootVolume(@Nullable AzureClusterControlPlaneRootVolumeArgs rootVolume) {
            this.rootVolume = Codegen.ofNullable(rootVolume);
            return this;
        }
        public Builder sshConfig(Output<AzureClusterControlPlaneSshConfigArgs> sshConfig) {
            this.sshConfig = Objects.requireNonNull(sshConfig);
            return this;
        }
        public Builder sshConfig(AzureClusterControlPlaneSshConfigArgs sshConfig) {
            this.sshConfig = Output.of(Objects.requireNonNull(sshConfig));
            return this;
        }
        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder version(Output<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder version(String version) {
            this.version = Output.of(Objects.requireNonNull(version));
            return this;
        }
        public Builder vmSize(@Nullable Output<String> vmSize) {
            this.vmSize = vmSize;
            return this;
        }
        public Builder vmSize(@Nullable String vmSize) {
            this.vmSize = Codegen.ofNullable(vmSize);
            return this;
        }        public AzureClusterControlPlaneArgs build() {
            return new AzureClusterControlPlaneArgs(databaseEncryption, mainVolume, proxyConfig, replicaPlacements, rootVolume, sshConfig, subnetId, tags, version, vmSize);
        }
    }
}
