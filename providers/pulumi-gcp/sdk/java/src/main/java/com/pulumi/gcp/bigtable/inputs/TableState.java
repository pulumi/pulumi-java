// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.bigtable.inputs.TableColumnFamilyGetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableState extends com.pulumi.resources.ResourceArgs {

    public static final TableState Empty = new TableState();

    /**
     * A group of columns within a table which share a common configuration. This can be specified multiple times. Structure is documented below.
     * 
     */
    @Import(name="columnFamilies")
      private final @Nullable Output<List<TableColumnFamilyGetArgs>> columnFamilies;

    public Output<List<TableColumnFamilyGetArgs>> columnFamilies() {
        return this.columnFamilies == null ? Codegen.empty() : this.columnFamilies;
    }

    /**
     * The name of the Bigtable instance.
     * 
     */
    @Import(name="instanceName")
      private final @Nullable Output<String> instanceName;

    public Output<String> instanceName() {
        return this.instanceName == null ? Codegen.empty() : this.instanceName;
    }

    /**
     * The name of the table.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * A list of predefined keys to split the table on.
     * !> **Warning:** Modifying the `split_keys` of an existing table will cause the provider
     * to delete/recreate the entire `gcp.bigtable.Table` resource.
     * 
     */
    @Import(name="splitKeys")
      private final @Nullable Output<List<String>> splitKeys;

    public Output<List<String>> splitKeys() {
        return this.splitKeys == null ? Codegen.empty() : this.splitKeys;
    }

    public TableState(
        @Nullable Output<List<TableColumnFamilyGetArgs>> columnFamilies,
        @Nullable Output<String> instanceName,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<List<String>> splitKeys) {
        this.columnFamilies = columnFamilies;
        this.instanceName = instanceName;
        this.name = name;
        this.project = project;
        this.splitKeys = splitKeys;
    }

    private TableState() {
        this.columnFamilies = Codegen.empty();
        this.instanceName = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.splitKeys = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<TableColumnFamilyGetArgs>> columnFamilies;
        private @Nullable Output<String> instanceName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<List<String>> splitKeys;

        public Builder() {
    	      // Empty
        }

        public Builder(TableState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnFamilies = defaults.columnFamilies;
    	      this.instanceName = defaults.instanceName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.splitKeys = defaults.splitKeys;
        }

        public Builder columnFamilies(@Nullable Output<List<TableColumnFamilyGetArgs>> columnFamilies) {
            this.columnFamilies = columnFamilies;
            return this;
        }
        public Builder columnFamilies(@Nullable List<TableColumnFamilyGetArgs> columnFamilies) {
            this.columnFamilies = Codegen.ofNullable(columnFamilies);
            return this;
        }
        public Builder columnFamilies(TableColumnFamilyGetArgs... columnFamilies) {
            return columnFamilies(List.of(columnFamilies));
        }
        public Builder instanceName(@Nullable Output<String> instanceName) {
            this.instanceName = instanceName;
            return this;
        }
        public Builder instanceName(@Nullable String instanceName) {
            this.instanceName = Codegen.ofNullable(instanceName);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder splitKeys(@Nullable Output<List<String>> splitKeys) {
            this.splitKeys = splitKeys;
            return this;
        }
        public Builder splitKeys(@Nullable List<String> splitKeys) {
            this.splitKeys = Codegen.ofNullable(splitKeys);
            return this;
        }
        public Builder splitKeys(String... splitKeys) {
            return splitKeys(List.of(splitKeys));
        }        public TableState build() {
            return new TableState(columnFamilies, instanceName, name, project, splitKeys);
        }
    }
}
