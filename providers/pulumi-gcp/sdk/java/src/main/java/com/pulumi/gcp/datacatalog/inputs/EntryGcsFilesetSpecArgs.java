// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.datacatalog.inputs.EntryGcsFilesetSpecSampleGcsFileSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EntryGcsFilesetSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntryGcsFilesetSpecArgs Empty = new EntryGcsFilesetSpecArgs();

    /**
     * Patterns to identify a set of files in Google Cloud Storage.
     * See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames)
     * for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
     * * gs://bucket_name/dir/*: matches all files within bucket_name/dir directory.
     * * gs://bucket_name/dir/**: matches all files in bucket_name/dir spanning all subdirectories.
     * * gs://bucket_name/file*: matches files prefixed by file in bucket_name
     * * gs://bucket_name/??.txt: matches files with two characters followed by .txt in bucket_name
     * * gs://bucket_name/[aeiou].txt: matches files that contain a single vowel character followed by .txt in bucket_name
     * * gs://bucket_name/[a-m].txt: matches files that contain a, b, ... or m followed by .txt in bucket_name
     * * gs://bucket_name/a/*{@literal /}b: matches all files in bucket_name that match a/*{@literal /}b pattern, such as a/c/b, a/d/b
     * * gs://another_bucket/a.txt: matches gs://another_bucket/a.txt
     * 
     */
    @Import(name="filePatterns", required=true)
      private final Output<List<String>> filePatterns;

    public Output<List<String>> filePatterns() {
        return this.filePatterns;
    }

    /**
     * - 
     * Sample files contained in this fileset, not all files contained in this fileset are represented here.
     * Structure is documented below.
     * 
     */
    @Import(name="sampleGcsFileSpecs")
      private final @Nullable Output<List<EntryGcsFilesetSpecSampleGcsFileSpecArgs>> sampleGcsFileSpecs;

    public Output<List<EntryGcsFilesetSpecSampleGcsFileSpecArgs>> sampleGcsFileSpecs() {
        return this.sampleGcsFileSpecs == null ? Codegen.empty() : this.sampleGcsFileSpecs;
    }

    public EntryGcsFilesetSpecArgs(
        Output<List<String>> filePatterns,
        @Nullable Output<List<EntryGcsFilesetSpecSampleGcsFileSpecArgs>> sampleGcsFileSpecs) {
        this.filePatterns = Objects.requireNonNull(filePatterns, "expected parameter 'filePatterns' to be non-null");
        this.sampleGcsFileSpecs = sampleGcsFileSpecs;
    }

    private EntryGcsFilesetSpecArgs() {
        this.filePatterns = Codegen.empty();
        this.sampleGcsFileSpecs = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EntryGcsFilesetSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> filePatterns;
        private @Nullable Output<List<EntryGcsFilesetSpecSampleGcsFileSpecArgs>> sampleGcsFileSpecs;

        public Builder() {
    	      // Empty
        }

        public Builder(EntryGcsFilesetSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filePatterns = defaults.filePatterns;
    	      this.sampleGcsFileSpecs = defaults.sampleGcsFileSpecs;
        }

        public Builder filePatterns(Output<List<String>> filePatterns) {
            this.filePatterns = Objects.requireNonNull(filePatterns);
            return this;
        }
        public Builder filePatterns(List<String> filePatterns) {
            this.filePatterns = Output.of(Objects.requireNonNull(filePatterns));
            return this;
        }
        public Builder filePatterns(String... filePatterns) {
            return filePatterns(List.of(filePatterns));
        }
        public Builder sampleGcsFileSpecs(@Nullable Output<List<EntryGcsFilesetSpecSampleGcsFileSpecArgs>> sampleGcsFileSpecs) {
            this.sampleGcsFileSpecs = sampleGcsFileSpecs;
            return this;
        }
        public Builder sampleGcsFileSpecs(@Nullable List<EntryGcsFilesetSpecSampleGcsFileSpecArgs> sampleGcsFileSpecs) {
            this.sampleGcsFileSpecs = Codegen.ofNullable(sampleGcsFileSpecs);
            return this;
        }
        public Builder sampleGcsFileSpecs(EntryGcsFilesetSpecSampleGcsFileSpecArgs... sampleGcsFileSpecs) {
            return sampleGcsFileSpecs(List.of(sampleGcsFileSpecs));
        }        public EntryGcsFilesetSpecArgs build() {
            return new EntryGcsFilesetSpecArgs(filePatterns, sampleGcsFileSpecs);
        }
    }
}
