// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsExplicitBucketsArgs;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsExponentialBucketsArgs;
import com.pulumi.gcp.logging.inputs.MetricBucketOptionsLinearBucketsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricBucketOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricBucketOptionsArgs Empty = new MetricBucketOptionsArgs();

    /**
     * Specifies a set of buckets with arbitrary widths.
     * Structure is documented below.
     * 
     */
    @Import(name="explicitBuckets")
    private @Nullable Output<MetricBucketOptionsExplicitBucketsArgs> explicitBuckets;

    public Optional<Output<MetricBucketOptionsExplicitBucketsArgs>> explicitBuckets() {
        return Optional.ofNullable(this.explicitBuckets);
    }

    /**
     * Specifies an exponential sequence of buckets that have a width that is proportional to the value of
     * the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @Import(name="exponentialBuckets")
    private @Nullable Output<MetricBucketOptionsExponentialBucketsArgs> exponentialBuckets;

    public Optional<Output<MetricBucketOptionsExponentialBucketsArgs>> exponentialBuckets() {
        return Optional.ofNullable(this.exponentialBuckets);
    }

    /**
     * Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
     * Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
     * Structure is documented below.
     * 
     */
    @Import(name="linearBuckets")
    private @Nullable Output<MetricBucketOptionsLinearBucketsArgs> linearBuckets;

    public Optional<Output<MetricBucketOptionsLinearBucketsArgs>> linearBuckets() {
        return Optional.ofNullable(this.linearBuckets);
    }

    private MetricBucketOptionsArgs() {}

    private MetricBucketOptionsArgs(MetricBucketOptionsArgs $) {
        this.explicitBuckets = $.explicitBuckets;
        this.exponentialBuckets = $.exponentialBuckets;
        this.linearBuckets = $.linearBuckets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricBucketOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricBucketOptionsArgs $;

        public Builder() {
            $ = new MetricBucketOptionsArgs();
        }

        public Builder(MetricBucketOptionsArgs defaults) {
            $ = new MetricBucketOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder explicitBuckets(@Nullable Output<MetricBucketOptionsExplicitBucketsArgs> explicitBuckets) {
            $.explicitBuckets = explicitBuckets;
            return this;
        }

        public Builder explicitBuckets(MetricBucketOptionsExplicitBucketsArgs explicitBuckets) {
            return explicitBuckets(Output.of(explicitBuckets));
        }

        public Builder exponentialBuckets(@Nullable Output<MetricBucketOptionsExponentialBucketsArgs> exponentialBuckets) {
            $.exponentialBuckets = exponentialBuckets;
            return this;
        }

        public Builder exponentialBuckets(MetricBucketOptionsExponentialBucketsArgs exponentialBuckets) {
            return exponentialBuckets(Output.of(exponentialBuckets));
        }

        public Builder linearBuckets(@Nullable Output<MetricBucketOptionsLinearBucketsArgs> linearBuckets) {
            $.linearBuckets = linearBuckets;
            return this;
        }

        public Builder linearBuckets(MetricBucketOptionsLinearBucketsArgs linearBuckets) {
            return linearBuckets(Output.of(linearBuckets));
        }

        public MetricBucketOptionsArgs build() {
            return $;
        }
    }

}
