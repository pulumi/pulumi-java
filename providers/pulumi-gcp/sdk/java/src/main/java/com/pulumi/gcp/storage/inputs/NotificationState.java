// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationState extends com.pulumi.resources.ResourceArgs {

    public static final NotificationState Empty = new NotificationState();

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * A set of key/value attribute pairs to attach to each Cloud PubSub message published for this notification subscription
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<Map<String,String>> customAttributes;

    public Optional<Output<Map<String,String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: `&#34;OBJECT_FINALIZE&#34;`, `&#34;OBJECT_METADATA_UPDATE&#34;`, `&#34;OBJECT_DELETE&#34;`, `&#34;OBJECT_ARCHIVE&#34;`
     * 
     */
    @Import(name="eventTypes")
    private @Nullable Output<List<String>> eventTypes;

    public Optional<Output<List<String>>> eventTypes() {
        return Optional.ofNullable(this.eventTypes);
    }

    /**
     * The ID of the created notification.
     * 
     */
    @Import(name="notificationId")
    private @Nullable Output<String> notificationId;

    public Optional<Output<String>> notificationId() {
        return Optional.ofNullable(this.notificationId);
    }

    /**
     * Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
     * 
     */
    @Import(name="objectNamePrefix")
    private @Nullable Output<String> objectNamePrefix;

    public Optional<Output<String>> objectNamePrefix() {
        return Optional.ofNullable(this.objectNamePrefix);
    }

    /**
     * The desired content of the Payload. One of `&#34;JSON_API_V1&#34;` or `&#34;NONE&#34;`.
     * 
     */
    @Import(name="payloadFormat")
    private @Nullable Output<String> payloadFormat;

    public Optional<Output<String>> payloadFormat() {
        return Optional.ofNullable(this.payloadFormat);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * The Cloud PubSub topic to which this subscription publishes. Expects either the
     * topic name, assumed to belong to the default GCP provider project, or the project-level name,
     * i.e. `projects/my-gcp-project/topics/my-topic` or `my-topic`. If the project is not set in the provider,
     * you will need to use the project-level name.
     * 
     */
    @Import(name="topic")
    private @Nullable Output<String> topic;

    public Optional<Output<String>> topic() {
        return Optional.ofNullable(this.topic);
    }

    private NotificationState() {}

    private NotificationState(NotificationState $) {
        this.bucket = $.bucket;
        this.customAttributes = $.customAttributes;
        this.eventTypes = $.eventTypes;
        this.notificationId = $.notificationId;
        this.objectNamePrefix = $.objectNamePrefix;
        this.payloadFormat = $.payloadFormat;
        this.selfLink = $.selfLink;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationState $;

        public Builder() {
            $ = new NotificationState();
        }

        public Builder(NotificationState defaults) {
            $ = new NotificationState(Objects.requireNonNull(defaults));
        }

        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder customAttributes(@Nullable Output<Map<String,String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        public Builder customAttributes(Map<String,String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        public Builder eventTypes(@Nullable Output<List<String>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        public Builder eventTypes(List<String> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        public Builder notificationId(@Nullable Output<String> notificationId) {
            $.notificationId = notificationId;
            return this;
        }

        public Builder notificationId(String notificationId) {
            return notificationId(Output.of(notificationId));
        }

        public Builder objectNamePrefix(@Nullable Output<String> objectNamePrefix) {
            $.objectNamePrefix = objectNamePrefix;
            return this;
        }

        public Builder objectNamePrefix(String objectNamePrefix) {
            return objectNamePrefix(Output.of(objectNamePrefix));
        }

        public Builder payloadFormat(@Nullable Output<String> payloadFormat) {
            $.payloadFormat = payloadFormat;
            return this;
        }

        public Builder payloadFormat(String payloadFormat) {
            return payloadFormat(Output.of(payloadFormat));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder topic(@Nullable Output<String> topic) {
            $.topic = topic;
            return this;
        }

        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public NotificationState build() {
            return $;
        }
    }

}
