// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs Empty = new RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs();

    /**
     * For satisfying the matchRule condition, the path of the request must exactly
     * match the value specified in fullPathMatch after removing any query parameters
     * and anchor that may be part of the original URL. FullPathMatch must be between 1
     * and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
     * be specified.
     * 
     */
    @Import(name="fullPathMatch")
      private final @Nullable Output<String> fullPathMatch;

    public Output<String> fullPathMatch() {
        return this.fullPathMatch == null ? Codegen.empty() : this.fullPathMatch;
    }

    /**
     * Specifies a list of header match criteria, all of which must match corresponding
     * headers in the request.
     * Structure is documented below.
     * 
     */
    @Import(name="headerMatches")
      private final @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs>> headerMatches;

    public Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs>> headerMatches() {
        return this.headerMatches == null ? Codegen.empty() : this.headerMatches;
    }

    /**
     * Specifies that prefixMatch and fullPathMatch matches are case sensitive.
     * Defaults to false.
     * 
     */
    @Import(name="ignoreCase")
      private final @Nullable Output<Boolean> ignoreCase;

    public Output<Boolean> ignoreCase() {
        return this.ignoreCase == null ? Codegen.empty() : this.ignoreCase;
    }

    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing configuration to
     * a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
     * clients present node metadata. If a match takes place, the relevant routing
     * configuration is made available to those proxies. For each metadataFilter in
     * this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
     * filterLabels must match the corresponding label provided in the metadata. If its
     * filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
     * with corresponding labels in the provided metadata. metadataFilters specified
     * here can be overrides those specified in ForwardingRule that refers to this
     * UrlMap. metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Import(name="metadataFilters")
      private final @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs>> metadataFilters;

    public Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs>> metadataFilters() {
        return this.metadataFilters == null ? Codegen.empty() : this.metadataFilters;
    }

    /**
     * The value of the header must start with the contents of prefixMatch. Only one of
     * exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
     * must be set.
     * 
     */
    @Import(name="prefixMatch")
      private final @Nullable Output<String> prefixMatch;

    public Output<String> prefixMatch() {
        return this.prefixMatch == null ? Codegen.empty() : this.prefixMatch;
    }

    /**
     * Specifies a list of query parameter match criteria, all of which must match
     * corresponding query parameters in the request.
     * Structure is documented below.
     * 
     */
    @Import(name="queryParameterMatches")
      private final @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs>> queryParameterMatches;

    public Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs>> queryParameterMatches() {
        return this.queryParameterMatches == null ? Codegen.empty() : this.queryParameterMatches;
    }

    /**
     * The queryParameterMatch matches if the value of the parameter matches the
     * regular expression specified by regexMatch. For the regular expression grammar,
     * please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
     * exactMatch and regexMatch must be set.
     * 
     */
    @Import(name="regexMatch")
      private final @Nullable Output<String> regexMatch;

    public Output<String> regexMatch() {
        return this.regexMatch == null ? Codegen.empty() : this.regexMatch;
    }

    public RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs(
        @Nullable Output<String> fullPathMatch,
        @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs>> headerMatches,
        @Nullable Output<Boolean> ignoreCase,
        @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs>> metadataFilters,
        @Nullable Output<String> prefixMatch,
        @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs>> queryParameterMatches,
        @Nullable Output<String> regexMatch) {
        this.fullPathMatch = fullPathMatch;
        this.headerMatches = headerMatches;
        this.ignoreCase = ignoreCase;
        this.metadataFilters = metadataFilters;
        this.prefixMatch = prefixMatch;
        this.queryParameterMatches = queryParameterMatches;
        this.regexMatch = regexMatch;
    }

    private RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs() {
        this.fullPathMatch = Codegen.empty();
        this.headerMatches = Codegen.empty();
        this.ignoreCase = Codegen.empty();
        this.metadataFilters = Codegen.empty();
        this.prefixMatch = Codegen.empty();
        this.queryParameterMatches = Codegen.empty();
        this.regexMatch = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> fullPathMatch;
        private @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs>> headerMatches;
        private @Nullable Output<Boolean> ignoreCase;
        private @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs>> metadataFilters;
        private @Nullable Output<String> prefixMatch;
        private @Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs>> queryParameterMatches;
        private @Nullable Output<String> regexMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fullPathMatch = defaults.fullPathMatch;
    	      this.headerMatches = defaults.headerMatches;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.metadataFilters = defaults.metadataFilters;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.queryParameterMatches = defaults.queryParameterMatches;
    	      this.regexMatch = defaults.regexMatch;
        }

        public Builder fullPathMatch(@Nullable Output<String> fullPathMatch) {
            this.fullPathMatch = fullPathMatch;
            return this;
        }
        public Builder fullPathMatch(@Nullable String fullPathMatch) {
            this.fullPathMatch = Codegen.ofNullable(fullPathMatch);
            return this;
        }
        public Builder headerMatches(@Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs>> headerMatches) {
            this.headerMatches = headerMatches;
            return this;
        }
        public Builder headerMatches(@Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs> headerMatches) {
            this.headerMatches = Codegen.ofNullable(headerMatches);
            return this;
        }
        public Builder headerMatches(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchGetArgs... headerMatches) {
            return headerMatches(List.of(headerMatches));
        }
        public Builder ignoreCase(@Nullable Output<Boolean> ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = Codegen.ofNullable(ignoreCase);
            return this;
        }
        public Builder metadataFilters(@Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs>> metadataFilters) {
            this.metadataFilters = metadataFilters;
            return this;
        }
        public Builder metadataFilters(@Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs> metadataFilters) {
            this.metadataFilters = Codegen.ofNullable(metadataFilters);
            return this;
        }
        public Builder metadataFilters(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterGetArgs... metadataFilters) {
            return metadataFilters(List.of(metadataFilters));
        }
        public Builder prefixMatch(@Nullable Output<String> prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }
        public Builder prefixMatch(@Nullable String prefixMatch) {
            this.prefixMatch = Codegen.ofNullable(prefixMatch);
            return this;
        }
        public Builder queryParameterMatches(@Nullable Output<List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs>> queryParameterMatches) {
            this.queryParameterMatches = queryParameterMatches;
            return this;
        }
        public Builder queryParameterMatches(@Nullable List<RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs> queryParameterMatches) {
            this.queryParameterMatches = Codegen.ofNullable(queryParameterMatches);
            return this;
        }
        public Builder queryParameterMatches(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchGetArgs... queryParameterMatches) {
            return queryParameterMatches(List.of(queryParameterMatches));
        }
        public Builder regexMatch(@Nullable Output<String> regexMatch) {
            this.regexMatch = regexMatch;
            return this;
        }
        public Builder regexMatch(@Nullable String regexMatch) {
            this.regexMatch = Codegen.ofNullable(regexMatch);
            return this;
        }        public RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs build() {
            return new RegionUrlMapPathMatcherRouteRuleMatchRuleGetArgs(fullPathMatch, headerMatches, ignoreCase, metadataFilters, prefixMatch, queryParameterMatches, regexMatch);
        }
    }
}
