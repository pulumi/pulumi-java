// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentRolloutDisruptionBudgetGetArgs;
import java.lang.String;
import java.util.Objects;


public final class OsPolicyAssignmentRolloutGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final OsPolicyAssignmentRolloutGetArgs Empty = new OsPolicyAssignmentRolloutGetArgs();

    /**
     * Required. The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
     * 
     */
    @Import(name="disruptionBudget", required=true)
      private final Output<OsPolicyAssignmentRolloutDisruptionBudgetGetArgs> disruptionBudget;

    public Output<OsPolicyAssignmentRolloutDisruptionBudgetGetArgs> disruptionBudget() {
        return this.disruptionBudget;
    }

    /**
     * Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
     * 
     */
    @Import(name="minWaitDuration", required=true)
      private final Output<String> minWaitDuration;

    public Output<String> minWaitDuration() {
        return this.minWaitDuration;
    }

    public OsPolicyAssignmentRolloutGetArgs(
        Output<OsPolicyAssignmentRolloutDisruptionBudgetGetArgs> disruptionBudget,
        Output<String> minWaitDuration) {
        this.disruptionBudget = Objects.requireNonNull(disruptionBudget, "expected parameter 'disruptionBudget' to be non-null");
        this.minWaitDuration = Objects.requireNonNull(minWaitDuration, "expected parameter 'minWaitDuration' to be non-null");
    }

    private OsPolicyAssignmentRolloutGetArgs() {
        this.disruptionBudget = Codegen.empty();
        this.minWaitDuration = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OsPolicyAssignmentRolloutGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<OsPolicyAssignmentRolloutDisruptionBudgetGetArgs> disruptionBudget;
        private Output<String> minWaitDuration;

        public Builder() {
    	      // Empty
        }

        public Builder(OsPolicyAssignmentRolloutGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disruptionBudget = defaults.disruptionBudget;
    	      this.minWaitDuration = defaults.minWaitDuration;
        }

        public Builder disruptionBudget(Output<OsPolicyAssignmentRolloutDisruptionBudgetGetArgs> disruptionBudget) {
            this.disruptionBudget = Objects.requireNonNull(disruptionBudget);
            return this;
        }
        public Builder disruptionBudget(OsPolicyAssignmentRolloutDisruptionBudgetGetArgs disruptionBudget) {
            this.disruptionBudget = Output.of(Objects.requireNonNull(disruptionBudget));
            return this;
        }
        public Builder minWaitDuration(Output<String> minWaitDuration) {
            this.minWaitDuration = Objects.requireNonNull(minWaitDuration);
            return this;
        }
        public Builder minWaitDuration(String minWaitDuration) {
            this.minWaitDuration = Output.of(Objects.requireNonNull(minWaitDuration));
            return this;
        }        public OsPolicyAssignmentRolloutGetArgs build() {
            return new OsPolicyAssignmentRolloutGetArgs(disruptionBudget, minWaitDuration);
        }
    }
}
