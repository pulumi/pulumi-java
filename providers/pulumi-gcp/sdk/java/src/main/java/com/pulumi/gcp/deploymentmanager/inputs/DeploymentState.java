// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.deploymentmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.deploymentmanager.inputs.DeploymentLabelGetArgs;
import com.pulumi.gcp.deploymentmanager.inputs.DeploymentTargetGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentState Empty = new DeploymentState();

    /**
     * Set the policy to use for creating new resources. Only used on
     * create and update. Valid values are `CREATE_OR_ACQUIRE` (default) or
     * `ACQUIRE`. If set to `ACQUIRE` and resources do not already exist,
     * the deployment will fail. Note that updating this field does not
     * actually affect the deployment, just how it is updated.
     * Default value is `CREATE_OR_ACQUIRE`.
     * Possible values are `ACQUIRE` and `CREATE_OR_ACQUIRE`.
     * 
     */
    @Import(name="createPolicy")
    private @Nullable Output<String> createPolicy;

    public Optional<Output<String>> createPolicy() {
        return Optional.ofNullable(this.createPolicy);
    }

    /**
     * Set the policy to use for deleting new resources on update/delete.
     * Valid values are `DELETE` (default) or `ABANDON`. If `DELETE`,
     * resource is deleted after removal from Deployment Manager. If
     * `ABANDON`, the resource is only removed from Deployment Manager
     * and is not actually deleted. Note that updating this field does not
     * actually change the deployment, just how it is updated.
     * Default value is `DELETE`.
     * Possible values are `ABANDON` and `DELETE`.
     * 
     */
    @Import(name="deletePolicy")
    private @Nullable Output<String> deletePolicy;

    public Optional<Output<String>> deletePolicy() {
        return Optional.ofNullable(this.deletePolicy);
    }

    /**
     * Unique identifier for deployment. Output only.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * Optional user-provided description of deployment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Key-value pairs to apply to this labels.
     * Structure is documented below.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<DeploymentLabelGetArgs>> labels;

    public Optional<Output<List<DeploymentLabelGetArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Output only. URL of the manifest representing the last manifest that was successfully deployed.
     * 
     */
    @Import(name="manifest")
    private @Nullable Output<String> manifest;

    public Optional<Output<String>> manifest() {
        return Optional.ofNullable(this.manifest);
    }

    /**
     * The name of the template to import, as declared in the YAML
     * configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If set to true, a deployment is created with &#34;shell&#34; resources
     * that are not actually instantiated. This allows you to preview a
     * deployment. It can be updated to false to actually deploy
     * with real resources.
     * ~&gt;**NOTE:** Deployment Manager does not allow update
     * of a deployment in preview (unless updating to preview=false). Thus,
     * the provider will force-recreate deployments if either preview is updated
     * to true or if other fields are updated while preview is true.
     * 
     */
    @Import(name="preview")
    private @Nullable Output<Boolean> preview;

    public Optional<Output<Boolean>> preview() {
        return Optional.ofNullable(this.preview);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. Server defined URL for the resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Parameters that define your deployment, including the deployment
     * configuration and relevant templates.
     * Structure is documented below.
     * 
     */
    @Import(name="target")
    private @Nullable Output<DeploymentTargetGetArgs> target;

    public Optional<Output<DeploymentTargetGetArgs>> target() {
        return Optional.ofNullable(this.target);
    }

    private DeploymentState() {}

    private DeploymentState(DeploymentState $) {
        this.createPolicy = $.createPolicy;
        this.deletePolicy = $.deletePolicy;
        this.deploymentId = $.deploymentId;
        this.description = $.description;
        this.labels = $.labels;
        this.manifest = $.manifest;
        this.name = $.name;
        this.preview = $.preview;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentState $;

        public Builder() {
            $ = new DeploymentState();
        }

        public Builder(DeploymentState defaults) {
            $ = new DeploymentState(Objects.requireNonNull(defaults));
        }

        public Builder createPolicy(@Nullable Output<String> createPolicy) {
            $.createPolicy = createPolicy;
            return this;
        }

        public Builder createPolicy(String createPolicy) {
            return createPolicy(Output.of(createPolicy));
        }

        public Builder deletePolicy(@Nullable Output<String> deletePolicy) {
            $.deletePolicy = deletePolicy;
            return this;
        }

        public Builder deletePolicy(String deletePolicy) {
            return deletePolicy(Output.of(deletePolicy));
        }

        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder labels(@Nullable Output<List<DeploymentLabelGetArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<DeploymentLabelGetArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(DeploymentLabelGetArgs... labels) {
            return labels(List.of(labels));
        }

        public Builder manifest(@Nullable Output<String> manifest) {
            $.manifest = manifest;
            return this;
        }

        public Builder manifest(String manifest) {
            return manifest(Output.of(manifest));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder preview(@Nullable Output<Boolean> preview) {
            $.preview = preview;
            return this;
        }

        public Builder preview(Boolean preview) {
            return preview(Output.of(preview));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        public Builder target(@Nullable Output<DeploymentTargetGetArgs> target) {
            $.target = target;
            return this;
        }

        public Builder target(DeploymentTargetGetArgs target) {
            return target(Output.of(target));
        }

        public DeploymentState build() {
            return $;
        }
    }

}
