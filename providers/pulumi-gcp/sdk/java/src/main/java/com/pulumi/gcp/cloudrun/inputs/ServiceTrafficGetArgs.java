// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTrafficGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTrafficGetArgs Empty = new ServiceTrafficGetArgs();

    /**
     * LatestRevision may be optionally provided to indicate that the latest ready
     * Revision of the Configuration should be used for this traffic target. When
     * provided LatestRevision must be true if RevisionName is empty; it must be
     * false when RevisionName is non-empty.
     * 
     */
    @Import(name="latestRevision")
    private @Nullable Output<Boolean> latestRevision;

    /**
     * @return LatestRevision may be optionally provided to indicate that the latest ready
     * Revision of the Configuration should be used for this traffic target. When
     * provided LatestRevision must be true if RevisionName is empty; it must be
     * false when RevisionName is non-empty.
     * 
     */
    public Optional<Output<Boolean>> latestRevision() {
        return Optional.ofNullable(this.latestRevision);
    }

    /**
     * Percent specifies percent of the traffic to this Revision or Configuration.
     * 
     */
    @Import(name="percent", required=true)
    private Output<Integer> percent;

    /**
     * @return Percent specifies percent of the traffic to this Revision or Configuration.
     * 
     */
    public Output<Integer> percent() {
        return this.percent;
    }

    /**
     * RevisionName of a specific revision to which to send this portion of traffic.
     * 
     */
    @Import(name="revisionName")
    private @Nullable Output<String> revisionName;

    /**
     * @return RevisionName of a specific revision to which to send this portion of traffic.
     * 
     */
    public Optional<Output<String>> revisionName() {
        return Optional.ofNullable(this.revisionName);
    }

    private ServiceTrafficGetArgs() {}

    private ServiceTrafficGetArgs(ServiceTrafficGetArgs $) {
        this.latestRevision = $.latestRevision;
        this.percent = $.percent;
        this.revisionName = $.revisionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTrafficGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTrafficGetArgs $;

        public Builder() {
            $ = new ServiceTrafficGetArgs();
        }

        public Builder(ServiceTrafficGetArgs defaults) {
            $ = new ServiceTrafficGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param latestRevision LatestRevision may be optionally provided to indicate that the latest ready
         * Revision of the Configuration should be used for this traffic target. When
         * provided LatestRevision must be true if RevisionName is empty; it must be
         * false when RevisionName is non-empty.
         * 
         * @return builder
         * 
         */
        public Builder latestRevision(@Nullable Output<Boolean> latestRevision) {
            $.latestRevision = latestRevision;
            return this;
        }

        /**
         * @param latestRevision LatestRevision may be optionally provided to indicate that the latest ready
         * Revision of the Configuration should be used for this traffic target. When
         * provided LatestRevision must be true if RevisionName is empty; it must be
         * false when RevisionName is non-empty.
         * 
         * @return builder
         * 
         */
        public Builder latestRevision(Boolean latestRevision) {
            return latestRevision(Output.of(latestRevision));
        }

        /**
         * @param percent Percent specifies percent of the traffic to this Revision or Configuration.
         * 
         * @return builder
         * 
         */
        public Builder percent(Output<Integer> percent) {
            $.percent = percent;
            return this;
        }

        /**
         * @param percent Percent specifies percent of the traffic to this Revision or Configuration.
         * 
         * @return builder
         * 
         */
        public Builder percent(Integer percent) {
            return percent(Output.of(percent));
        }

        /**
         * @param revisionName RevisionName of a specific revision to which to send this portion of traffic.
         * 
         * @return builder
         * 
         */
        public Builder revisionName(@Nullable Output<String> revisionName) {
            $.revisionName = revisionName;
            return this;
        }

        /**
         * @param revisionName RevisionName of a specific revision to which to send this portion of traffic.
         * 
         * @return builder
         * 
         */
        public Builder revisionName(String revisionName) {
            return revisionName(Output.of(revisionName));
        }

        public ServiceTrafficGetArgs build() {
            $.percent = Objects.requireNonNull($.percent, "expected parameter 'percent' to be non-null");
            return $;
        }
    }

}
