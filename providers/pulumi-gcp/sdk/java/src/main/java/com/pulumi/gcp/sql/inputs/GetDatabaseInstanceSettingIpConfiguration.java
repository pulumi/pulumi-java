// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetDatabaseInstanceSettingIpConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseInstanceSettingIpConfiguration Empty = new GetDatabaseInstanceSettingIpConfiguration();

    @Import(name="allocatedIpRange", required=true)
    private String allocatedIpRange;

    public String allocatedIpRange() {
        return this.allocatedIpRange;
    }

    @Import(name="authorizedNetworks", required=true)
    private List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks;

    public List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks() {
        return this.authorizedNetworks;
    }

    @Import(name="ipv4Enabled", required=true)
    private Boolean ipv4Enabled;

    public Boolean ipv4Enabled() {
        return this.ipv4Enabled;
    }

    @Import(name="privateNetwork", required=true)
    private String privateNetwork;

    public String privateNetwork() {
        return this.privateNetwork;
    }

    @Import(name="requireSsl", required=true)
    private Boolean requireSsl;

    public Boolean requireSsl() {
        return this.requireSsl;
    }

    private GetDatabaseInstanceSettingIpConfiguration() {}

    private GetDatabaseInstanceSettingIpConfiguration(GetDatabaseInstanceSettingIpConfiguration $) {
        this.allocatedIpRange = $.allocatedIpRange;
        this.authorizedNetworks = $.authorizedNetworks;
        this.ipv4Enabled = $.ipv4Enabled;
        this.privateNetwork = $.privateNetwork;
        this.requireSsl = $.requireSsl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseInstanceSettingIpConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseInstanceSettingIpConfiguration $;

        public Builder() {
            $ = new GetDatabaseInstanceSettingIpConfiguration();
        }

        public Builder(GetDatabaseInstanceSettingIpConfiguration defaults) {
            $ = new GetDatabaseInstanceSettingIpConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder allocatedIpRange(String allocatedIpRange) {
            $.allocatedIpRange = allocatedIpRange;
            return this;
        }

        public Builder authorizedNetworks(List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks) {
            $.authorizedNetworks = authorizedNetworks;
            return this;
        }

        public Builder authorizedNetworks(GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork... authorizedNetworks) {
            return authorizedNetworks(List.of(authorizedNetworks));
        }

        public Builder ipv4Enabled(Boolean ipv4Enabled) {
            $.ipv4Enabled = ipv4Enabled;
            return this;
        }

        public Builder privateNetwork(String privateNetwork) {
            $.privateNetwork = privateNetwork;
            return this;
        }

        public Builder requireSsl(Boolean requireSsl) {
            $.requireSsl = requireSsl;
            return this;
        }

        public GetDatabaseInstanceSettingIpConfiguration build() {
            $.allocatedIpRange = Objects.requireNonNull($.allocatedIpRange, "expected parameter 'allocatedIpRange' to be non-null");
            $.authorizedNetworks = Objects.requireNonNull($.authorizedNetworks, "expected parameter 'authorizedNetworks' to be non-null");
            $.ipv4Enabled = Objects.requireNonNull($.ipv4Enabled, "expected parameter 'ipv4Enabled' to be non-null");
            $.privateNetwork = Objects.requireNonNull($.privateNetwork, "expected parameter 'privateNetwork' to be non-null");
            $.requireSsl = Objects.requireNonNull($.requireSsl, "expected parameter 'requireSsl' to be non-null");
            return $;
        }
    }

}
