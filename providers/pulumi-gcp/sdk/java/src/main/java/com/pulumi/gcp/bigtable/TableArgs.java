// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigtable.inputs.TableColumnFamilyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    /**
     * A group of columns within a table which share a common configuration. This can be specified multiple times. Structure is documented below.
     * 
     */
    @Import(name="columnFamilies")
    private @Nullable Output<List<TableColumnFamilyArgs>> columnFamilies;

    public Optional<Output<List<TableColumnFamilyArgs>>> columnFamilies() {
        return Optional.ofNullable(this.columnFamilies);
    }

    /**
     * The name of the Bigtable instance.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * The name of the table.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A list of predefined keys to split the table on.
     * !&gt; **Warning:** Modifying the `split_keys` of an existing table will cause the provider
     * to delete/recreate the entire `gcp.bigtable.Table` resource.
     * 
     */
    @Import(name="splitKeys")
    private @Nullable Output<List<String>> splitKeys;

    public Optional<Output<List<String>>> splitKeys() {
        return Optional.ofNullable(this.splitKeys);
    }

    private TableArgs() {}

    private TableArgs(TableArgs $) {
        this.columnFamilies = $.columnFamilies;
        this.instanceName = $.instanceName;
        this.name = $.name;
        this.project = $.project;
        this.splitKeys = $.splitKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableArgs $;

        public Builder() {
            $ = new TableArgs();
        }

        public Builder(TableArgs defaults) {
            $ = new TableArgs(Objects.requireNonNull(defaults));
        }

        public Builder columnFamilies(@Nullable Output<List<TableColumnFamilyArgs>> columnFamilies) {
            $.columnFamilies = columnFamilies;
            return this;
        }

        public Builder columnFamilies(List<TableColumnFamilyArgs> columnFamilies) {
            return columnFamilies(Output.of(columnFamilies));
        }

        public Builder columnFamilies(TableColumnFamilyArgs... columnFamilies) {
            return columnFamilies(List.of(columnFamilies));
        }

        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder splitKeys(@Nullable Output<List<String>> splitKeys) {
            $.splitKeys = splitKeys;
            return this;
        }

        public Builder splitKeys(List<String> splitKeys) {
            return splitKeys(Output.of(splitKeys));
        }

        public Builder splitKeys(String... splitKeys) {
            return splitKeys(List.of(splitKeys));
        }

        public TableArgs build() {
            $.instanceName = Objects.requireNonNull($.instanceName, "expected parameter 'instanceName' to be non-null");
            return $;
        }
    }

}
