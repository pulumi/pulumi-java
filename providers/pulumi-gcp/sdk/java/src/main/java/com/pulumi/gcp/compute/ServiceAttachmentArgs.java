// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.compute.inputs.ServiceAttachmentConsumerAcceptListArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAttachmentArgs Empty = new ServiceAttachmentArgs();

    /**
     * The connection preference to use for this service attachment. Valid
     * values include &#34;ACCEPT_AUTOMATIC&#34;, &#34;ACCEPT_MANUAL&#34;.
     * 
     */
    @Import(name="connectionPreference", required=true)
      private final Output<String> connectionPreference;

    public Output<String> connectionPreference() {
        return this.connectionPreference;
    }

    /**
     * An array of projects that are allowed to connect to this service
     * attachment.
     * Structure is documented below.
     * 
     */
    @Import(name="consumerAcceptLists")
      private final @Nullable Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists;

    public Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists() {
        return this.consumerAcceptLists == null ? Codegen.empty() : this.consumerAcceptLists;
    }

    /**
     * An array of projects that are not allowed to connect to this service
     * attachment.
     * 
     */
    @Import(name="consumerRejectLists")
      private final @Nullable Output<List<String>> consumerRejectLists;

    public Output<List<String>> consumerRejectLists() {
        return this.consumerRejectLists == null ? Codegen.empty() : this.consumerRejectLists;
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * If true, enable the proxy protocol which is for supplying client TCP/IP
     * address data in TCP connections that traverse proxies on their way to
     * destination servers.
     * 
     */
    @Import(name="enableProxyProtocol", required=true)
      private final Output<Boolean> enableProxyProtocol;

    public Output<Boolean> enableProxyProtocol() {
        return this.enableProxyProtocol;
    }

    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * An array of subnets that is provided for NAT in this service attachment.
     * 
     */
    @Import(name="natSubnets", required=true)
      private final Output<List<String>> natSubnets;

    public Output<List<String>> natSubnets() {
        return this.natSubnets;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * URL of the region where the resource resides.
     * 
     */
    @Import(name="region")
      private final @Nullable Output<String> region;

    public Output<String> region() {
        return this.region == null ? Codegen.empty() : this.region;
    }

    /**
     * The URL of a forwarding rule that represents the service identified by
     * this service attachment.
     * 
     */
    @Import(name="targetService", required=true)
      private final Output<String> targetService;

    public Output<String> targetService() {
        return this.targetService;
    }

    public ServiceAttachmentArgs(
        Output<String> connectionPreference,
        @Nullable Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists,
        @Nullable Output<List<String>> consumerRejectLists,
        @Nullable Output<String> description,
        Output<Boolean> enableProxyProtocol,
        @Nullable Output<String> name,
        Output<List<String>> natSubnets,
        @Nullable Output<String> project,
        @Nullable Output<String> region,
        Output<String> targetService) {
        this.connectionPreference = Objects.requireNonNull(connectionPreference, "expected parameter 'connectionPreference' to be non-null");
        this.consumerAcceptLists = consumerAcceptLists;
        this.consumerRejectLists = consumerRejectLists;
        this.description = description;
        this.enableProxyProtocol = Objects.requireNonNull(enableProxyProtocol, "expected parameter 'enableProxyProtocol' to be non-null");
        this.name = name;
        this.natSubnets = Objects.requireNonNull(natSubnets, "expected parameter 'natSubnets' to be non-null");
        this.project = project;
        this.region = region;
        this.targetService = Objects.requireNonNull(targetService, "expected parameter 'targetService' to be non-null");
    }

    private ServiceAttachmentArgs() {
        this.connectionPreference = Codegen.empty();
        this.consumerAcceptLists = Codegen.empty();
        this.consumerRejectLists = Codegen.empty();
        this.description = Codegen.empty();
        this.enableProxyProtocol = Codegen.empty();
        this.name = Codegen.empty();
        this.natSubnets = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.targetService = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> connectionPreference;
        private @Nullable Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists;
        private @Nullable Output<List<String>> consumerRejectLists;
        private @Nullable Output<String> description;
        private Output<Boolean> enableProxyProtocol;
        private @Nullable Output<String> name;
        private Output<List<String>> natSubnets;
        private @Nullable Output<String> project;
        private @Nullable Output<String> region;
        private Output<String> targetService;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceAttachmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPreference = defaults.connectionPreference;
    	      this.consumerAcceptLists = defaults.consumerAcceptLists;
    	      this.consumerRejectLists = defaults.consumerRejectLists;
    	      this.description = defaults.description;
    	      this.enableProxyProtocol = defaults.enableProxyProtocol;
    	      this.name = defaults.name;
    	      this.natSubnets = defaults.natSubnets;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.targetService = defaults.targetService;
        }

        public Builder connectionPreference(Output<String> connectionPreference) {
            this.connectionPreference = Objects.requireNonNull(connectionPreference);
            return this;
        }
        public Builder connectionPreference(String connectionPreference) {
            this.connectionPreference = Output.of(Objects.requireNonNull(connectionPreference));
            return this;
        }
        public Builder consumerAcceptLists(@Nullable Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists) {
            this.consumerAcceptLists = consumerAcceptLists;
            return this;
        }
        public Builder consumerAcceptLists(@Nullable List<ServiceAttachmentConsumerAcceptListArgs> consumerAcceptLists) {
            this.consumerAcceptLists = Codegen.ofNullable(consumerAcceptLists);
            return this;
        }
        public Builder consumerAcceptLists(ServiceAttachmentConsumerAcceptListArgs... consumerAcceptLists) {
            return consumerAcceptLists(List.of(consumerAcceptLists));
        }
        public Builder consumerRejectLists(@Nullable Output<List<String>> consumerRejectLists) {
            this.consumerRejectLists = consumerRejectLists;
            return this;
        }
        public Builder consumerRejectLists(@Nullable List<String> consumerRejectLists) {
            this.consumerRejectLists = Codegen.ofNullable(consumerRejectLists);
            return this;
        }
        public Builder consumerRejectLists(String... consumerRejectLists) {
            return consumerRejectLists(List.of(consumerRejectLists));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder enableProxyProtocol(Output<Boolean> enableProxyProtocol) {
            this.enableProxyProtocol = Objects.requireNonNull(enableProxyProtocol);
            return this;
        }
        public Builder enableProxyProtocol(Boolean enableProxyProtocol) {
            this.enableProxyProtocol = Output.of(Objects.requireNonNull(enableProxyProtocol));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder natSubnets(Output<List<String>> natSubnets) {
            this.natSubnets = Objects.requireNonNull(natSubnets);
            return this;
        }
        public Builder natSubnets(List<String> natSubnets) {
            this.natSubnets = Output.of(Objects.requireNonNull(natSubnets));
            return this;
        }
        public Builder natSubnets(String... natSubnets) {
            return natSubnets(List.of(natSubnets));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = Codegen.ofNullable(region);
            return this;
        }
        public Builder targetService(Output<String> targetService) {
            this.targetService = Objects.requireNonNull(targetService);
            return this;
        }
        public Builder targetService(String targetService) {
            this.targetService = Output.of(Objects.requireNonNull(targetService));
            return this;
        }        public ServiceAttachmentArgs build() {
            return new ServiceAttachmentArgs(connectionPreference, consumerAcceptLists, consumerRejectLists, description, enableProxyProtocol, name, natSubnets, project, region, targetService);
        }
    }
}
