// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.ServiceAttachmentConsumerAcceptListArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAttachmentArgs Empty = new ServiceAttachmentArgs();

    /**
     * The connection preference to use for this service attachment. Valid
     * values include &#34;ACCEPT_AUTOMATIC&#34;, &#34;ACCEPT_MANUAL&#34;.
     * 
     */
    @Import(name="connectionPreference", required=true)
    private Output<String> connectionPreference;

    public Output<String> connectionPreference() {
        return this.connectionPreference;
    }

    /**
     * An array of projects that are allowed to connect to this service
     * attachment.
     * Structure is documented below.
     * 
     */
    @Import(name="consumerAcceptLists")
    private @Nullable Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists;

    public Optional<Output<List<ServiceAttachmentConsumerAcceptListArgs>>> consumerAcceptLists() {
        return Optional.ofNullable(this.consumerAcceptLists);
    }

    /**
     * An array of projects that are not allowed to connect to this service
     * attachment.
     * 
     */
    @Import(name="consumerRejectLists")
    private @Nullable Output<List<String>> consumerRejectLists;

    public Optional<Output<List<String>>> consumerRejectLists() {
        return Optional.ofNullable(this.consumerRejectLists);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If true, enable the proxy protocol which is for supplying client TCP/IP
     * address data in TCP connections that traverse proxies on their way to
     * destination servers.
     * 
     */
    @Import(name="enableProxyProtocol", required=true)
    private Output<Boolean> enableProxyProtocol;

    public Output<Boolean> enableProxyProtocol() {
        return this.enableProxyProtocol;
    }

    /**
     * Name of the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?`
     * which means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An array of subnets that is provided for NAT in this service attachment.
     * 
     */
    @Import(name="natSubnets", required=true)
    private Output<List<String>> natSubnets;

    public Output<List<String>> natSubnets() {
        return this.natSubnets;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * URL of the region where the resource resides.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URL of a forwarding rule that represents the service identified by
     * this service attachment.
     * 
     */
    @Import(name="targetService", required=true)
    private Output<String> targetService;

    public Output<String> targetService() {
        return this.targetService;
    }

    private ServiceAttachmentArgs() {}

    private ServiceAttachmentArgs(ServiceAttachmentArgs $) {
        this.connectionPreference = $.connectionPreference;
        this.consumerAcceptLists = $.consumerAcceptLists;
        this.consumerRejectLists = $.consumerRejectLists;
        this.description = $.description;
        this.enableProxyProtocol = $.enableProxyProtocol;
        this.name = $.name;
        this.natSubnets = $.natSubnets;
        this.project = $.project;
        this.region = $.region;
        this.targetService = $.targetService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAttachmentArgs $;

        public Builder() {
            $ = new ServiceAttachmentArgs();
        }

        public Builder(ServiceAttachmentArgs defaults) {
            $ = new ServiceAttachmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectionPreference(Output<String> connectionPreference) {
            $.connectionPreference = connectionPreference;
            return this;
        }

        public Builder connectionPreference(String connectionPreference) {
            return connectionPreference(Output.of(connectionPreference));
        }

        public Builder consumerAcceptLists(@Nullable Output<List<ServiceAttachmentConsumerAcceptListArgs>> consumerAcceptLists) {
            $.consumerAcceptLists = consumerAcceptLists;
            return this;
        }

        public Builder consumerAcceptLists(List<ServiceAttachmentConsumerAcceptListArgs> consumerAcceptLists) {
            return consumerAcceptLists(Output.of(consumerAcceptLists));
        }

        public Builder consumerAcceptLists(ServiceAttachmentConsumerAcceptListArgs... consumerAcceptLists) {
            return consumerAcceptLists(List.of(consumerAcceptLists));
        }

        public Builder consumerRejectLists(@Nullable Output<List<String>> consumerRejectLists) {
            $.consumerRejectLists = consumerRejectLists;
            return this;
        }

        public Builder consumerRejectLists(List<String> consumerRejectLists) {
            return consumerRejectLists(Output.of(consumerRejectLists));
        }

        public Builder consumerRejectLists(String... consumerRejectLists) {
            return consumerRejectLists(List.of(consumerRejectLists));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enableProxyProtocol(Output<Boolean> enableProxyProtocol) {
            $.enableProxyProtocol = enableProxyProtocol;
            return this;
        }

        public Builder enableProxyProtocol(Boolean enableProxyProtocol) {
            return enableProxyProtocol(Output.of(enableProxyProtocol));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder natSubnets(Output<List<String>> natSubnets) {
            $.natSubnets = natSubnets;
            return this;
        }

        public Builder natSubnets(List<String> natSubnets) {
            return natSubnets(Output.of(natSubnets));
        }

        public Builder natSubnets(String... natSubnets) {
            return natSubnets(List.of(natSubnets));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder targetService(Output<String> targetService) {
            $.targetService = targetService;
            return this;
        }

        public Builder targetService(String targetService) {
            return targetService(Output.of(targetService));
        }

        public ServiceAttachmentArgs build() {
            $.connectionPreference = Objects.requireNonNull($.connectionPreference, "expected parameter 'connectionPreference' to be non-null");
            $.enableProxyProtocol = Objects.requireNonNull($.enableProxyProtocol, "expected parameter 'enableProxyProtocol' to be non-null");
            $.natSubnets = Objects.requireNonNull($.natSubnets, "expected parameter 'natSubnets' to be non-null");
            $.targetService = Objects.requireNonNull($.targetService, "expected parameter 'targetService' to be non-null");
            return $;
        }
    }

}
