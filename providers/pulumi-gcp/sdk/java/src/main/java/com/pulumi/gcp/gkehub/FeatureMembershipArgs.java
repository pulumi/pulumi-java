// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureMembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureMembershipArgs Empty = new FeatureMembershipArgs();

    /**
     * Config Management-specific spec. Structure is documented below.
     * 
     */
    @Import(name="configmanagement", required=true)
    private Output<FeatureMembershipConfigmanagementArgs> configmanagement;

    public Output<FeatureMembershipConfigmanagementArgs> configmanagement() {
        return this.configmanagement;
    }

    /**
     * The name of the feature
     * 
     */
    @Import(name="feature", required=true)
    private Output<String> feature;

    public Output<String> feature() {
        return this.feature;
    }

    /**
     * The location of the feature
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the membership
     * 
     */
    @Import(name="membership", required=true)
    private Output<String> membership;

    public Output<String> membership() {
        return this.membership;
    }

    /**
     * The project of the feature
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private FeatureMembershipArgs() {}

    private FeatureMembershipArgs(FeatureMembershipArgs $) {
        this.configmanagement = $.configmanagement;
        this.feature = $.feature;
        this.location = $.location;
        this.membership = $.membership;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureMembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureMembershipArgs $;

        public Builder() {
            $ = new FeatureMembershipArgs();
        }

        public Builder(FeatureMembershipArgs defaults) {
            $ = new FeatureMembershipArgs(Objects.requireNonNull(defaults));
        }

        public Builder configmanagement(Output<FeatureMembershipConfigmanagementArgs> configmanagement) {
            $.configmanagement = configmanagement;
            return this;
        }

        public Builder configmanagement(FeatureMembershipConfigmanagementArgs configmanagement) {
            return configmanagement(Output.of(configmanagement));
        }

        public Builder feature(Output<String> feature) {
            $.feature = feature;
            return this;
        }

        public Builder feature(String feature) {
            return feature(Output.of(feature));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder membership(Output<String> membership) {
            $.membership = membership;
            return this;
        }

        public Builder membership(String membership) {
            return membership(Output.of(membership));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public FeatureMembershipArgs build() {
            $.configmanagement = Objects.requireNonNull($.configmanagement, "expected parameter 'configmanagement' to be non-null");
            $.feature = Objects.requireNonNull($.feature, "expected parameter 'feature' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.membership = Objects.requireNonNull($.membership, "expected parameter 'membership' to be non-null");
            return $;
        }
    }

}
