// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerTriggerTemplateGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerTriggerTemplateGetArgs Empty = new TriggerTriggerTemplateGetArgs();

    /**
     * Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
     * The syntax of the regular expressions accepted is the syntax accepted by RE2 and
     * described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
     * 
     */
    @Import(name="commitSha")
    private @Nullable Output<String> commitSha;

    public Optional<Output<String>> commitSha() {
        return Optional.ofNullable(this.commitSha);
    }

    /**
     * Working directory to use when running this step&#39;s container.
     * If this value is a relative path, it is relative to the build&#39;s working
     * directory. If this value is absolute, it may be outside the build&#39;s working
     * directory, in which case the contents of the path may not be persisted
     * across build step executions, unless a `volume` for that path is specified.
     * If the build specifies a `RepoSource` with `dir` and a step with a
     * `dir`,
     * which specifies an absolute path, the `RepoSource` `dir` is ignored
     * for the step&#39;s execution.
     * 
     */
    @Import(name="dir")
    private @Nullable Output<String> dir;

    public Optional<Output<String>> dir() {
        return Optional.ofNullable(this.dir);
    }

    /**
     * Only trigger a build if the revision regex does NOT match the revision regex.
     * 
     */
    @Import(name="invertRegex")
    private @Nullable Output<Boolean> invertRegex;

    public Optional<Output<Boolean>> invertRegex() {
        return Optional.ofNullable(this.invertRegex);
    }

    /**
     * ID of the project that owns the Cloud Source Repository.
     * If omitted, the project ID requesting the build is assumed.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Name of the Cloud Source Repository.
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    /**
     * Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
     * The syntax of the regular expressions accepted is the syntax accepted by RE2 and
     * described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="tagName")
    private @Nullable Output<String> tagName;

    public Optional<Output<String>> tagName() {
        return Optional.ofNullable(this.tagName);
    }

    private TriggerTriggerTemplateGetArgs() {}

    private TriggerTriggerTemplateGetArgs(TriggerTriggerTemplateGetArgs $) {
        this.branchName = $.branchName;
        this.commitSha = $.commitSha;
        this.dir = $.dir;
        this.invertRegex = $.invertRegex;
        this.projectId = $.projectId;
        this.repoName = $.repoName;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerTriggerTemplateGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerTriggerTemplateGetArgs $;

        public Builder() {
            $ = new TriggerTriggerTemplateGetArgs();
        }

        public Builder(TriggerTriggerTemplateGetArgs defaults) {
            $ = new TriggerTriggerTemplateGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        public Builder commitSha(@Nullable Output<String> commitSha) {
            $.commitSha = commitSha;
            return this;
        }

        public Builder commitSha(String commitSha) {
            return commitSha(Output.of(commitSha));
        }

        public Builder dir(@Nullable Output<String> dir) {
            $.dir = dir;
            return this;
        }

        public Builder dir(String dir) {
            return dir(Output.of(dir));
        }

        public Builder invertRegex(@Nullable Output<Boolean> invertRegex) {
            $.invertRegex = invertRegex;
            return this;
        }

        public Builder invertRegex(Boolean invertRegex) {
            return invertRegex(Output.of(invertRegex));
        }

        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        public Builder tagName(@Nullable Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        public TriggerTriggerTemplateGetArgs build() {
            return $;
        }
    }

}
