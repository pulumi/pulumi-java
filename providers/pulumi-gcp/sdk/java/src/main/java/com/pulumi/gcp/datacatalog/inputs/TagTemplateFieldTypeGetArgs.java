// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datacatalog.inputs.TagTemplateFieldTypeEnumTypeGetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagTemplateFieldTypeGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagTemplateFieldTypeGetArgs Empty = new TagTemplateFieldTypeGetArgs();

    /**
     * Represents an enum type.
     * Exactly one of `primitive_type` or `enum_type` must be set
     * Structure is documented below.
     * 
     */
    @Import(name="enumType")
    private @Nullable Output<TagTemplateFieldTypeEnumTypeGetArgs> enumType;

    /**
     * @return Represents an enum type.
     * Exactly one of `primitive_type` or `enum_type` must be set
     * Structure is documented below.
     * 
     */
    public Optional<Output<TagTemplateFieldTypeEnumTypeGetArgs>> enumType() {
        return Optional.ofNullable(this.enumType);
    }

    /**
     * Represents primitive types - string, bool etc.
     * Exactly one of `primitive_type` or `enum_type` must be set
     * Possible values are `DOUBLE`, `STRING`, `BOOL`, and `TIMESTAMP`.
     * 
     */
    @Import(name="primitiveType")
    private @Nullable Output<String> primitiveType;

    /**
     * @return Represents primitive types - string, bool etc.
     * Exactly one of `primitive_type` or `enum_type` must be set
     * Possible values are `DOUBLE`, `STRING`, `BOOL`, and `TIMESTAMP`.
     * 
     */
    public Optional<Output<String>> primitiveType() {
        return Optional.ofNullable(this.primitiveType);
    }

    private TagTemplateFieldTypeGetArgs() {}

    private TagTemplateFieldTypeGetArgs(TagTemplateFieldTypeGetArgs $) {
        this.enumType = $.enumType;
        this.primitiveType = $.primitiveType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagTemplateFieldTypeGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagTemplateFieldTypeGetArgs $;

        public Builder() {
            $ = new TagTemplateFieldTypeGetArgs();
        }

        public Builder(TagTemplateFieldTypeGetArgs defaults) {
            $ = new TagTemplateFieldTypeGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enumType Represents an enum type.
         * Exactly one of `primitive_type` or `enum_type` must be set
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enumType(@Nullable Output<TagTemplateFieldTypeEnumTypeGetArgs> enumType) {
            $.enumType = enumType;
            return this;
        }

        /**
         * @param enumType Represents an enum type.
         * Exactly one of `primitive_type` or `enum_type` must be set
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enumType(TagTemplateFieldTypeEnumTypeGetArgs enumType) {
            return enumType(Output.of(enumType));
        }

        /**
         * @param primitiveType Represents primitive types - string, bool etc.
         * Exactly one of `primitive_type` or `enum_type` must be set
         * Possible values are `DOUBLE`, `STRING`, `BOOL`, and `TIMESTAMP`.
         * 
         * @return builder
         * 
         */
        public Builder primitiveType(@Nullable Output<String> primitiveType) {
            $.primitiveType = primitiveType;
            return this;
        }

        /**
         * @param primitiveType Represents primitive types - string, bool etc.
         * Exactly one of `primitive_type` or `enum_type` must be set
         * Possible values are `DOUBLE`, `STRING`, `BOOL`, and `TIMESTAMP`.
         * 
         * @return builder
         * 
         */
        public Builder primitiveType(String primitiveType) {
            return primitiveType(Output.of(primitiveType));
        }

        public TagTemplateFieldTypeGetArgs build() {
            return $;
        }
    }

}
