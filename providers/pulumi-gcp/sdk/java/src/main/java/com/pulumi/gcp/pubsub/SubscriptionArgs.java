// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.pubsub.inputs.SubscriptionDeadLetterPolicyArgs;
import com.pulumi.gcp.pubsub.inputs.SubscriptionExpirationPolicyArgs;
import com.pulumi.gcp.pubsub.inputs.SubscriptionPushConfigArgs;
import com.pulumi.gcp.pubsub.inputs.SubscriptionRetryPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * This value is the maximum time after a subscriber receives a message
     * before the subscriber should acknowledge the message. After message
     * delivery but before the ack deadline expires and before the message is
     * acknowledged, it is an outstanding message and will not be delivered
     * again during that time (on a best-effort basis).
     * For pull subscriptions, this value is used as the initial value for
     * the ack deadline. To override this value for a given message, call
     * subscriptions.modifyAckDeadline with the corresponding ackId if using
     * pull. The minimum custom deadline you can specify is 10 seconds. The
     * maximum custom deadline you can specify is 600 seconds (10 minutes).
     * If this parameter is 0, a default value of 10 seconds is used.
     * For push delivery, this value is also used to set the request timeout
     * for the call to the push endpoint.
     * If the subscriber never acknowledges the message, the Pub/Sub system
     * will eventually redeliver the message.
     * 
     */
    @Import(name="ackDeadlineSeconds")
    private @Nullable Output<Integer> ackDeadlineSeconds;

    public Optional<Output<Integer>> ackDeadlineSeconds() {
        return Optional.ofNullable(this.ackDeadlineSeconds);
    }

    /**
     * A policy that specifies the conditions for dead lettering messages in
     * this subscription. If dead_letter_policy is not set, dead lettering
     * is disabled.
     * The Cloud Pub/Sub service account associated with this subscription&#39;s
     * parent project (i.e.,
     * service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Acknowledge() messages on this subscription.
     * Structure is documented below.
     * 
     */
    @Import(name="deadLetterPolicy")
    private @Nullable Output<SubscriptionDeadLetterPolicyArgs> deadLetterPolicy;

    public Optional<Output<SubscriptionDeadLetterPolicyArgs>> deadLetterPolicy() {
        return Optional.ofNullable(this.deadLetterPolicy);
    }

    /**
     * If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
     * the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
     * may be delivered in any order.
     * 
     */
    @Import(name="enableMessageOrdering")
    private @Nullable Output<Boolean> enableMessageOrdering;

    public Optional<Output<Boolean>> enableMessageOrdering() {
        return Optional.ofNullable(this.enableMessageOrdering);
    }

    /**
     * A policy that specifies the conditions for this subscription&#39;s expiration.
     * A subscription is considered active as long as any connected subscriber
     * is successfully consuming messages from the subscription or is issuing
     * operations on the subscription. If expirationPolicy is not set, a default
     * policy with ttl of 31 days will be used.  If it is set but ttl is &#34;&#34;, the
     * resource never expires.  The minimum allowed value for expirationPolicy.ttl
     * is 1 day.
     * Structure is documented below.
     * 
     */
    @Import(name="expirationPolicy")
    private @Nullable Output<SubscriptionExpirationPolicyArgs> expirationPolicy;

    public Optional<Output<SubscriptionExpirationPolicyArgs>> expirationPolicy() {
        return Optional.ofNullable(this.expirationPolicy);
    }

    /**
     * The subscription only delivers the messages that match the filter.
     * Pub/Sub automatically acknowledges the messages that don&#39;t match the filter. You can filter messages
     * by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
     * you can&#39;t modify the filter.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * A set of key/value label pairs to assign to this Subscription.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * How long to retain unacknowledged messages in the subscription&#39;s
     * backlog, from the moment a message is published. If
     * retainAckedMessages is true, then this also configures the retention
     * of acknowledged messages, and thus configures how far back in time a
     * subscriptions.seek can be done. Defaults to 7 days. Cannot be more
     * than 7 days (`&#34;604800s&#34;`) or less than 10 minutes (`&#34;600s&#34;`).
     * A duration in seconds with up to nine fractional digits, terminated
     * by &#39;s&#39;. Example: `&#34;600.5s&#34;`.
     * 
     */
    @Import(name="messageRetentionDuration")
    private @Nullable Output<String> messageRetentionDuration;

    public Optional<Output<String>> messageRetentionDuration() {
        return Optional.ofNullable(this.messageRetentionDuration);
    }

    /**
     * Name of the subscription.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * If push delivery is used with this subscription, this field is used to
     * configure it. An empty pushConfig signifies that the subscriber will
     * pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    @Import(name="pushConfig")
    private @Nullable Output<SubscriptionPushConfigArgs> pushConfig;

    public Optional<Output<SubscriptionPushConfigArgs>> pushConfig() {
        return Optional.ofNullable(this.pushConfig);
    }

    /**
     * Indicates whether to retain acknowledged messages. If `true`, then
     * messages are not expunged from the subscription&#39;s backlog, even if
     * they are acknowledged, until they fall out of the
     * messageRetentionDuration window.
     * 
     */
    @Import(name="retainAckedMessages")
    private @Nullable Output<Boolean> retainAckedMessages;

    public Optional<Output<Boolean>> retainAckedMessages() {
        return Optional.ofNullable(this.retainAckedMessages);
    }

    /**
     * A policy that specifies how Pub/Sub retries message delivery for this subscription.
     * If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
     * RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
     * Structure is documented below.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<SubscriptionRetryPolicyArgs> retryPolicy;

    public Optional<Output<SubscriptionRetryPolicyArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * A reference to a Topic resource.
     * 
     */
    @Import(name="topic", required=true)
    private Output<String> topic;

    public Output<String> topic() {
        return this.topic;
    }

    private SubscriptionArgs() {}

    private SubscriptionArgs(SubscriptionArgs $) {
        this.ackDeadlineSeconds = $.ackDeadlineSeconds;
        this.deadLetterPolicy = $.deadLetterPolicy;
        this.enableMessageOrdering = $.enableMessageOrdering;
        this.expirationPolicy = $.expirationPolicy;
        this.filter = $.filter;
        this.labels = $.labels;
        this.messageRetentionDuration = $.messageRetentionDuration;
        this.name = $.name;
        this.project = $.project;
        this.pushConfig = $.pushConfig;
        this.retainAckedMessages = $.retainAckedMessages;
        this.retryPolicy = $.retryPolicy;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionArgs $;

        public Builder() {
            $ = new SubscriptionArgs();
        }

        public Builder(SubscriptionArgs defaults) {
            $ = new SubscriptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder ackDeadlineSeconds(@Nullable Output<Integer> ackDeadlineSeconds) {
            $.ackDeadlineSeconds = ackDeadlineSeconds;
            return this;
        }

        public Builder ackDeadlineSeconds(Integer ackDeadlineSeconds) {
            return ackDeadlineSeconds(Output.of(ackDeadlineSeconds));
        }

        public Builder deadLetterPolicy(@Nullable Output<SubscriptionDeadLetterPolicyArgs> deadLetterPolicy) {
            $.deadLetterPolicy = deadLetterPolicy;
            return this;
        }

        public Builder deadLetterPolicy(SubscriptionDeadLetterPolicyArgs deadLetterPolicy) {
            return deadLetterPolicy(Output.of(deadLetterPolicy));
        }

        public Builder enableMessageOrdering(@Nullable Output<Boolean> enableMessageOrdering) {
            $.enableMessageOrdering = enableMessageOrdering;
            return this;
        }

        public Builder enableMessageOrdering(Boolean enableMessageOrdering) {
            return enableMessageOrdering(Output.of(enableMessageOrdering));
        }

        public Builder expirationPolicy(@Nullable Output<SubscriptionExpirationPolicyArgs> expirationPolicy) {
            $.expirationPolicy = expirationPolicy;
            return this;
        }

        public Builder expirationPolicy(SubscriptionExpirationPolicyArgs expirationPolicy) {
            return expirationPolicy(Output.of(expirationPolicy));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        public Builder messageRetentionDuration(@Nullable Output<String> messageRetentionDuration) {
            $.messageRetentionDuration = messageRetentionDuration;
            return this;
        }

        public Builder messageRetentionDuration(String messageRetentionDuration) {
            return messageRetentionDuration(Output.of(messageRetentionDuration));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder pushConfig(@Nullable Output<SubscriptionPushConfigArgs> pushConfig) {
            $.pushConfig = pushConfig;
            return this;
        }

        public Builder pushConfig(SubscriptionPushConfigArgs pushConfig) {
            return pushConfig(Output.of(pushConfig));
        }

        public Builder retainAckedMessages(@Nullable Output<Boolean> retainAckedMessages) {
            $.retainAckedMessages = retainAckedMessages;
            return this;
        }

        public Builder retainAckedMessages(Boolean retainAckedMessages) {
            return retainAckedMessages(Output.of(retainAckedMessages));
        }

        public Builder retryPolicy(@Nullable Output<SubscriptionRetryPolicyArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        public Builder retryPolicy(SubscriptionRetryPolicyArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        public Builder topic(Output<String> topic) {
            $.topic = topic;
            return this;
        }

        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public SubscriptionArgs build() {
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
