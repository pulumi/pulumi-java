// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.cloudrun.inputs.DomainMappingMetadataArgs;
import com.pulumi.gcp.cloudrun.inputs.DomainMappingSpecArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainMappingArgs Empty = new DomainMappingArgs();

    /**
     * The location of the cloud run instance. eg us-central1
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * Metadata associated with this DomainMapping.
     * Structure is documented below.
     * 
     */
    @Import(name="metadata", required=true)
      private final Output<DomainMappingMetadataArgs> metadata;

    public Output<DomainMappingMetadataArgs> metadata() {
        return this.metadata;
    }

    /**
     * Name should be a [verified](https://support.google.com/webmasters/answer/9008080) domain
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The spec for this DomainMapping.
     * Structure is documented below.
     * 
     */
    @Import(name="spec", required=true)
      private final Output<DomainMappingSpecArgs> spec;

    public Output<DomainMappingSpecArgs> spec() {
        return this.spec;
    }

    public DomainMappingArgs(
        Output<String> location,
        Output<DomainMappingMetadataArgs> metadata,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<DomainMappingSpecArgs> spec) {
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.metadata = Objects.requireNonNull(metadata, "expected parameter 'metadata' to be non-null");
        this.name = name;
        this.project = project;
        this.spec = Objects.requireNonNull(spec, "expected parameter 'spec' to be non-null");
    }

    private DomainMappingArgs() {
        this.location = Codegen.empty();
        this.metadata = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.spec = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> location;
        private Output<DomainMappingMetadataArgs> metadata;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<DomainMappingSpecArgs> spec;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.spec = defaults.spec;
        }

        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder metadata(Output<DomainMappingMetadataArgs> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder metadata(DomainMappingMetadataArgs metadata) {
            this.metadata = Output.of(Objects.requireNonNull(metadata));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder spec(Output<DomainMappingSpecArgs> spec) {
            this.spec = Objects.requireNonNull(spec);
            return this;
        }
        public Builder spec(DomainMappingSpecArgs spec) {
            this.spec = Output.of(Objects.requireNonNull(spec));
            return this;
        }        public DomainMappingArgs build() {
            return new DomainMappingArgs(location, metadata, name, project, spec);
        }
    }
}
