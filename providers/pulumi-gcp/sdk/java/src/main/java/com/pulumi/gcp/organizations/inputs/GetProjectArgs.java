// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetProjectArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectArgs Empty = new GetProjectArgs();

    /**
     * The project ID. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="projectId")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return The project ID. If it is not provided, the provider project is used.
     * 
     */
    public Output</* @Nullable */ String> projectId() {
        return this.projectId;
    }

    private GetProjectArgs() {}

    private GetProjectArgs(GetProjectArgs $) {
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectArgs $;

        public Builder() {
            $ = new GetProjectArgs();
        }

        public Builder(GetProjectArgs defaults) {
            $ = new GetProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectId The project ID. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output</* @Nullable */ String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetProjectArgs build() {
            return $;
        }
    }

}
