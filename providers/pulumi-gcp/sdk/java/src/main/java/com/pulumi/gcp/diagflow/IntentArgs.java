// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntentArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntentArgs Empty = new IntentArgs();

    /**
     * The name of the action associated with the intent.
     * Note: The action name must not contain whitespaces.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED
     * (i.e. default platform).
     * Each value may be one of `FACEBOOK`, `SLACK`, `TELEGRAM`, `KIK`, `SKYPE`, `LINE`, `VIBER`, `ACTIONS_ON_GOOGLE`, and `GOOGLE_HANGOUTS`.
     * 
     */
    @Import(name="defaultResponsePlatforms")
    private @Nullable Output<List<String>> defaultResponsePlatforms;

    public Optional<Output<List<String>>> defaultResponsePlatforms() {
        return Optional.ofNullable(this.defaultResponsePlatforms);
    }

    /**
     * The name of this intent to be displayed on the console.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of
     * the contexts must be present in the active user session for an event to trigger this intent. See the
     * [events reference](https://cloud.google.com/dialogflow/docs/events-overview) for more details.
     * 
     */
    @Import(name="events")
    private @Nullable Output<List<String>> events;

    public Optional<Output<List<String>>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * The list of context names required for this intent to be triggered.
     * Format: projects/&lt;Project ID&gt;/agent/sessions/-/contexts/&lt;Context ID&gt;.
     * 
     */
    @Import(name="inputContextNames")
    private @Nullable Output<List<String>> inputContextNames;

    public Optional<Output<List<String>>> inputContextNames() {
        return Optional.ofNullable(this.inputContextNames);
    }

    /**
     * Indicates whether this is a fallback intent.
     * 
     */
    @Import(name="isFallback")
    private @Nullable Output<Boolean> isFallback;

    public Optional<Output<Boolean>> isFallback() {
        return Optional.ofNullable(this.isFallback);
    }

    /**
     * Indicates whether Machine Learning is disabled for the intent.
     * Note: If mlDisabled setting is set to true, then this intent is not taken into account during inference in ML
     * ONLY match mode. Also, auto-markup in the UI is turned off.
     * 
     */
    @Import(name="mlDisabled")
    private @Nullable Output<Boolean> mlDisabled;

    public Optional<Output<Boolean>> mlDisabled() {
        return Optional.ofNullable(this.mlDisabled);
    }

    /**
     * The unique identifier of the parent intent in the chain of followup intents.
     * Format: projects/&lt;Project ID&gt;/agent/intents/&lt;Intent ID&gt;.
     * 
     */
    @Import(name="parentFollowupIntentName")
    private @Nullable Output<String> parentFollowupIntentName;

    public Optional<Output<String>> parentFollowupIntentName() {
        return Optional.ofNullable(this.parentFollowupIntentName);
    }

    /**
     * The priority of this intent. Higher numbers represent higher priorities.
     * - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds
     *   to the Normal priority in the console.
     * - If the supplied value is negative, the intent is ignored in runtime detect intent requests.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Indicates whether to delete all contexts in the current session when this intent is matched.
     * 
     */
    @Import(name="resetContexts")
    private @Nullable Output<Boolean> resetContexts;

    public Optional<Output<Boolean>> resetContexts() {
        return Optional.ofNullable(this.resetContexts);
    }

    /**
     * Indicates whether webhooks are enabled for the intent.
     * * WEBHOOK_STATE_ENABLED: Webhook is enabled in the agent and in the intent.
     * * WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING: Webhook is enabled in the agent and in the intent. Also, each slot
     *   filling prompt is forwarded to the webhook.
     *   Possible values are `WEBHOOK_STATE_ENABLED` and `WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING`.
     * 
     */
    @Import(name="webhookState")
    private @Nullable Output<String> webhookState;

    public Optional<Output<String>> webhookState() {
        return Optional.ofNullable(this.webhookState);
    }

    private IntentArgs() {}

    private IntentArgs(IntentArgs $) {
        this.action = $.action;
        this.defaultResponsePlatforms = $.defaultResponsePlatforms;
        this.displayName = $.displayName;
        this.events = $.events;
        this.inputContextNames = $.inputContextNames;
        this.isFallback = $.isFallback;
        this.mlDisabled = $.mlDisabled;
        this.parentFollowupIntentName = $.parentFollowupIntentName;
        this.priority = $.priority;
        this.project = $.project;
        this.resetContexts = $.resetContexts;
        this.webhookState = $.webhookState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntentArgs $;

        public Builder() {
            $ = new IntentArgs();
        }

        public Builder(IntentArgs defaults) {
            $ = new IntentArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder defaultResponsePlatforms(@Nullable Output<List<String>> defaultResponsePlatforms) {
            $.defaultResponsePlatforms = defaultResponsePlatforms;
            return this;
        }

        public Builder defaultResponsePlatforms(List<String> defaultResponsePlatforms) {
            return defaultResponsePlatforms(Output.of(defaultResponsePlatforms));
        }

        public Builder defaultResponsePlatforms(String... defaultResponsePlatforms) {
            return defaultResponsePlatforms(List.of(defaultResponsePlatforms));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder events(@Nullable Output<List<String>> events) {
            $.events = events;
            return this;
        }

        public Builder events(List<String> events) {
            return events(Output.of(events));
        }

        public Builder events(String... events) {
            return events(List.of(events));
        }

        public Builder inputContextNames(@Nullable Output<List<String>> inputContextNames) {
            $.inputContextNames = inputContextNames;
            return this;
        }

        public Builder inputContextNames(List<String> inputContextNames) {
            return inputContextNames(Output.of(inputContextNames));
        }

        public Builder inputContextNames(String... inputContextNames) {
            return inputContextNames(List.of(inputContextNames));
        }

        public Builder isFallback(@Nullable Output<Boolean> isFallback) {
            $.isFallback = isFallback;
            return this;
        }

        public Builder isFallback(Boolean isFallback) {
            return isFallback(Output.of(isFallback));
        }

        public Builder mlDisabled(@Nullable Output<Boolean> mlDisabled) {
            $.mlDisabled = mlDisabled;
            return this;
        }

        public Builder mlDisabled(Boolean mlDisabled) {
            return mlDisabled(Output.of(mlDisabled));
        }

        public Builder parentFollowupIntentName(@Nullable Output<String> parentFollowupIntentName) {
            $.parentFollowupIntentName = parentFollowupIntentName;
            return this;
        }

        public Builder parentFollowupIntentName(String parentFollowupIntentName) {
            return parentFollowupIntentName(Output.of(parentFollowupIntentName));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder resetContexts(@Nullable Output<Boolean> resetContexts) {
            $.resetContexts = resetContexts;
            return this;
        }

        public Builder resetContexts(Boolean resetContexts) {
            return resetContexts(Output.of(resetContexts));
        }

        public Builder webhookState(@Nullable Output<String> webhookState) {
            $.webhookState = webhookState;
            return this;
        }

        public Builder webhookState(String webhookState) {
            return webhookState(Output.of(webhookState));
        }

        public IntentArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
