// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingCpuUtilizationGetArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingDiskUtilizationGetArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingNetworkUtilizationGetArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingRequestUtilizationGetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlexibleAppVersionAutomaticScalingGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlexibleAppVersionAutomaticScalingGetArgs Empty = new FlexibleAppVersionAutomaticScalingGetArgs();

    /**
     * The time period that the Autoscaler should wait before it starts collecting information from a new instance.
     * This prevents the autoscaler from collecting information when the instance is initializing,
     * during which the collected usage would not be reliable. Default: 120s
     * 
     */
    @Import(name="coolDownPeriod")
    private @Nullable Output<String> coolDownPeriod;

    public Optional<Output<String>> coolDownPeriod() {
        return Optional.ofNullable(this.coolDownPeriod);
    }

    /**
     * Target scaling by CPU usage.
     * Structure is documented below.
     * 
     */
    @Import(name="cpuUtilization", required=true)
    private Output<FlexibleAppVersionAutomaticScalingCpuUtilizationGetArgs> cpuUtilization;

    public Output<FlexibleAppVersionAutomaticScalingCpuUtilizationGetArgs> cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Target scaling by disk usage.
     * Structure is documented below.
     * 
     */
    @Import(name="diskUtilization")
    private @Nullable Output<FlexibleAppVersionAutomaticScalingDiskUtilizationGetArgs> diskUtilization;

    public Optional<Output<FlexibleAppVersionAutomaticScalingDiskUtilizationGetArgs>> diskUtilization() {
        return Optional.ofNullable(this.diskUtilization);
    }

    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    @Import(name="maxConcurrentRequests")
    private @Nullable Output<Integer> maxConcurrentRequests;

    public Optional<Output<Integer>> maxConcurrentRequests() {
        return Optional.ofNullable(this.maxConcurrentRequests);
    }

    /**
     * Maximum number of idle instances that should be maintained for this version.
     * 
     */
    @Import(name="maxIdleInstances")
    private @Nullable Output<Integer> maxIdleInstances;

    public Optional<Output<Integer>> maxIdleInstances() {
        return Optional.ofNullable(this.maxIdleInstances);
    }

    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="maxPendingLatency")
    private @Nullable Output<String> maxPendingLatency;

    public Optional<Output<String>> maxPendingLatency() {
        return Optional.ofNullable(this.maxPendingLatency);
    }

    /**
     * Maximum number of instances that should be started to handle requests for this version. Default: 20
     * 
     */
    @Import(name="maxTotalInstances")
    private @Nullable Output<Integer> maxTotalInstances;

    public Optional<Output<Integer>> maxTotalInstances() {
        return Optional.ofNullable(this.maxTotalInstances);
    }

    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    @Import(name="minIdleInstances")
    private @Nullable Output<Integer> minIdleInstances;

    public Optional<Output<Integer>> minIdleInstances() {
        return Optional.ofNullable(this.minIdleInstances);
    }

    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="minPendingLatency")
    private @Nullable Output<String> minPendingLatency;

    public Optional<Output<String>> minPendingLatency() {
        return Optional.ofNullable(this.minPendingLatency);
    }

    /**
     * Minimum number of running instances that should be maintained for this version. Default: 2
     * 
     */
    @Import(name="minTotalInstances")
    private @Nullable Output<Integer> minTotalInstances;

    public Optional<Output<Integer>> minTotalInstances() {
        return Optional.ofNullable(this.minTotalInstances);
    }

    /**
     * Target scaling by network usage.
     * Structure is documented below.
     * 
     */
    @Import(name="networkUtilization")
    private @Nullable Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationGetArgs> networkUtilization;

    public Optional<Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationGetArgs>> networkUtilization() {
        return Optional.ofNullable(this.networkUtilization);
    }

    /**
     * Target scaling by request utilization.
     * Structure is documented below.
     * 
     */
    @Import(name="requestUtilization")
    private @Nullable Output<FlexibleAppVersionAutomaticScalingRequestUtilizationGetArgs> requestUtilization;

    public Optional<Output<FlexibleAppVersionAutomaticScalingRequestUtilizationGetArgs>> requestUtilization() {
        return Optional.ofNullable(this.requestUtilization);
    }

    private FlexibleAppVersionAutomaticScalingGetArgs() {}

    private FlexibleAppVersionAutomaticScalingGetArgs(FlexibleAppVersionAutomaticScalingGetArgs $) {
        this.coolDownPeriod = $.coolDownPeriod;
        this.cpuUtilization = $.cpuUtilization;
        this.diskUtilization = $.diskUtilization;
        this.maxConcurrentRequests = $.maxConcurrentRequests;
        this.maxIdleInstances = $.maxIdleInstances;
        this.maxPendingLatency = $.maxPendingLatency;
        this.maxTotalInstances = $.maxTotalInstances;
        this.minIdleInstances = $.minIdleInstances;
        this.minPendingLatency = $.minPendingLatency;
        this.minTotalInstances = $.minTotalInstances;
        this.networkUtilization = $.networkUtilization;
        this.requestUtilization = $.requestUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexibleAppVersionAutomaticScalingGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexibleAppVersionAutomaticScalingGetArgs $;

        public Builder() {
            $ = new FlexibleAppVersionAutomaticScalingGetArgs();
        }

        public Builder(FlexibleAppVersionAutomaticScalingGetArgs defaults) {
            $ = new FlexibleAppVersionAutomaticScalingGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder coolDownPeriod(@Nullable Output<String> coolDownPeriod) {
            $.coolDownPeriod = coolDownPeriod;
            return this;
        }

        public Builder coolDownPeriod(String coolDownPeriod) {
            return coolDownPeriod(Output.of(coolDownPeriod));
        }

        public Builder cpuUtilization(Output<FlexibleAppVersionAutomaticScalingCpuUtilizationGetArgs> cpuUtilization) {
            $.cpuUtilization = cpuUtilization;
            return this;
        }

        public Builder cpuUtilization(FlexibleAppVersionAutomaticScalingCpuUtilizationGetArgs cpuUtilization) {
            return cpuUtilization(Output.of(cpuUtilization));
        }

        public Builder diskUtilization(@Nullable Output<FlexibleAppVersionAutomaticScalingDiskUtilizationGetArgs> diskUtilization) {
            $.diskUtilization = diskUtilization;
            return this;
        }

        public Builder diskUtilization(FlexibleAppVersionAutomaticScalingDiskUtilizationGetArgs diskUtilization) {
            return diskUtilization(Output.of(diskUtilization));
        }

        public Builder maxConcurrentRequests(@Nullable Output<Integer> maxConcurrentRequests) {
            $.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }

        public Builder maxConcurrentRequests(Integer maxConcurrentRequests) {
            return maxConcurrentRequests(Output.of(maxConcurrentRequests));
        }

        public Builder maxIdleInstances(@Nullable Output<Integer> maxIdleInstances) {
            $.maxIdleInstances = maxIdleInstances;
            return this;
        }

        public Builder maxIdleInstances(Integer maxIdleInstances) {
            return maxIdleInstances(Output.of(maxIdleInstances));
        }

        public Builder maxPendingLatency(@Nullable Output<String> maxPendingLatency) {
            $.maxPendingLatency = maxPendingLatency;
            return this;
        }

        public Builder maxPendingLatency(String maxPendingLatency) {
            return maxPendingLatency(Output.of(maxPendingLatency));
        }

        public Builder maxTotalInstances(@Nullable Output<Integer> maxTotalInstances) {
            $.maxTotalInstances = maxTotalInstances;
            return this;
        }

        public Builder maxTotalInstances(Integer maxTotalInstances) {
            return maxTotalInstances(Output.of(maxTotalInstances));
        }

        public Builder minIdleInstances(@Nullable Output<Integer> minIdleInstances) {
            $.minIdleInstances = minIdleInstances;
            return this;
        }

        public Builder minIdleInstances(Integer minIdleInstances) {
            return minIdleInstances(Output.of(minIdleInstances));
        }

        public Builder minPendingLatency(@Nullable Output<String> minPendingLatency) {
            $.minPendingLatency = minPendingLatency;
            return this;
        }

        public Builder minPendingLatency(String minPendingLatency) {
            return minPendingLatency(Output.of(minPendingLatency));
        }

        public Builder minTotalInstances(@Nullable Output<Integer> minTotalInstances) {
            $.minTotalInstances = minTotalInstances;
            return this;
        }

        public Builder minTotalInstances(Integer minTotalInstances) {
            return minTotalInstances(Output.of(minTotalInstances));
        }

        public Builder networkUtilization(@Nullable Output<FlexibleAppVersionAutomaticScalingNetworkUtilizationGetArgs> networkUtilization) {
            $.networkUtilization = networkUtilization;
            return this;
        }

        public Builder networkUtilization(FlexibleAppVersionAutomaticScalingNetworkUtilizationGetArgs networkUtilization) {
            return networkUtilization(Output.of(networkUtilization));
        }

        public Builder requestUtilization(@Nullable Output<FlexibleAppVersionAutomaticScalingRequestUtilizationGetArgs> requestUtilization) {
            $.requestUtilization = requestUtilization;
            return this;
        }

        public Builder requestUtilization(FlexibleAppVersionAutomaticScalingRequestUtilizationGetArgs requestUtilization) {
            return requestUtilization(Output.of(requestUtilization));
        }

        public FlexibleAppVersionAutomaticScalingGetArgs build() {
            $.cpuUtilization = Objects.requireNonNull($.cpuUtilization, "expected parameter 'cpuUtilization' to be non-null");
            return $;
        }
    }

}
