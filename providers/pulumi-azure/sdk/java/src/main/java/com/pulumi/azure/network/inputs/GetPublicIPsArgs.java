// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetPublicIPsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPublicIPsArgs Empty = new GetPublicIPsArgs();

    /**
     * The Allocation Type for the Public IP Address. Possible values include `Static` or `Dynamic`.
     * 
     */
    @Import(name="allocationType")
    private Output</* @Nullable */ String> allocationType;

    /**
     * @return The Allocation Type for the Public IP Address. Possible values include `Static` or `Dynamic`.
     * 
     */
    public Output</* @Nullable */ String> allocationType() {
        return this.allocationType;
    }

    /**
     * Filter to include IP Addresses which are attached to a device, such as a VM/LB (`Attached`) or unattached (`Unattached`). To allow for both, use `All`.
     * 
     */
    @Import(name="attachmentStatus")
    private Output</* @Nullable */ String> attachmentStatus;

    /**
     * @return Filter to include IP Addresses which are attached to a device, such as a VM/LB (`Attached`) or unattached (`Unattached`). To allow for both, use `All`.
     * 
     */
    public Output</* @Nullable */ String> attachmentStatus() {
        return this.attachmentStatus;
    }

    /**
     * A prefix match used for the IP Addresses `name` field, case sensitive.
     * 
     */
    @Import(name="namePrefix")
    private Output</* @Nullable */ String> namePrefix;

    /**
     * @return A prefix match used for the IP Addresses `name` field, case sensitive.
     * 
     */
    public Output</* @Nullable */ String> namePrefix() {
        return this.namePrefix;
    }

    /**
     * Specifies the name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private GetPublicIPsArgs() {}

    private GetPublicIPsArgs(GetPublicIPsArgs $) {
        this.allocationType = $.allocationType;
        this.attachmentStatus = $.attachmentStatus;
        this.namePrefix = $.namePrefix;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPublicIPsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPublicIPsArgs $;

        public Builder() {
            $ = new GetPublicIPsArgs();
        }

        public Builder(GetPublicIPsArgs defaults) {
            $ = new GetPublicIPsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationType The Allocation Type for the Public IP Address. Possible values include `Static` or `Dynamic`.
         * 
         * @return builder
         * 
         */
        public Builder allocationType(Output</* @Nullable */ String> allocationType) {
            $.allocationType = allocationType;
            return this;
        }

        /**
         * @param allocationType The Allocation Type for the Public IP Address. Possible values include `Static` or `Dynamic`.
         * 
         * @return builder
         * 
         */
        public Builder allocationType(@Nullable String allocationType) {
            return allocationType(Output.of(allocationType));
        }

        /**
         * @param attachmentStatus Filter to include IP Addresses which are attached to a device, such as a VM/LB (`Attached`) or unattached (`Unattached`). To allow for both, use `All`.
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(Output</* @Nullable */ String> attachmentStatus) {
            $.attachmentStatus = attachmentStatus;
            return this;
        }

        /**
         * @param attachmentStatus Filter to include IP Addresses which are attached to a device, such as a VM/LB (`Attached`) or unattached (`Unattached`). To allow for both, use `All`.
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(@Nullable String attachmentStatus) {
            return attachmentStatus(Output.of(attachmentStatus));
        }

        /**
         * @param namePrefix A prefix match used for the IP Addresses `name` field, case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(Output</* @Nullable */ String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix A prefix match used for the IP Addresses `name` field, case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param resourceGroupName Specifies the name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Specifies the name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public GetPublicIPsArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
