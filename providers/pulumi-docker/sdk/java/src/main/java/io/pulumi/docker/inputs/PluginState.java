// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.docker.inputs.PluginGrantPermissionGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PluginState extends io.pulumi.resources.ResourceArgs {

    public static final PluginState Empty = new PluginState();

    /**
     * Docker Plugin alias
     * 
     */
    @Import(name="alias")
      private final @Nullable Output<String> alias;

    public Output<String> alias() {
        return this.alias == null ? Codegen.empty() : this.alias;
    }

    /**
     * HTTP client timeout to enable the plugin
     * 
     */
    @Import(name="enableTimeout")
      private final @Nullable Output<Integer> enableTimeout;

    public Output<Integer> enableTimeout() {
        return this.enableTimeout == null ? Codegen.empty() : this.enableTimeout;
    }

    /**
     * If `true` the plugin is enabled. Defaults to `true`
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     * 
     */
    @Import(name="envs")
      private final @Nullable Output<List<String>> envs;

    public Output<List<String>> envs() {
        return this.envs == null ? Codegen.empty() : this.envs;
    }

    /**
     * If true, then the plugin is destroyed forcibly
     * 
     */
    @Import(name="forceDestroy")
      private final @Nullable Output<Boolean> forceDestroy;

    public Output<Boolean> forceDestroy() {
        return this.forceDestroy == null ? Codegen.empty() : this.forceDestroy;
    }

    /**
     * If true, then the plugin is disabled forcibly
     * 
     */
    @Import(name="forceDisable")
      private final @Nullable Output<Boolean> forceDisable;

    public Output<Boolean> forceDisable() {
        return this.forceDisable == null ? Codegen.empty() : this.forceDisable;
    }

    /**
     * If true, grant all permissions necessary to run the plugin
     * 
     */
    @Import(name="grantAllPermissions")
      private final @Nullable Output<Boolean> grantAllPermissions;

    public Output<Boolean> grantAllPermissions() {
        return this.grantAllPermissions == null ? Codegen.empty() : this.grantAllPermissions;
    }

    /**
     * Grant specific permissions only
     * 
     */
    @Import(name="grantPermissions")
      private final @Nullable Output<List<PluginGrantPermissionGetArgs>> grantPermissions;

    public Output<List<PluginGrantPermissionGetArgs>> grantPermissions() {
        return this.grantPermissions == null ? Codegen.empty() : this.grantPermissions;
    }

    /**
     * Docker Plugin name
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Docker Plugin Reference
     * 
     */
    @Import(name="pluginReference")
      private final @Nullable Output<String> pluginReference;

    public Output<String> pluginReference() {
        return this.pluginReference == null ? Codegen.empty() : this.pluginReference;
    }

    public PluginState(
        @Nullable Output<String> alias,
        @Nullable Output<Integer> enableTimeout,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<List<String>> envs,
        @Nullable Output<Boolean> forceDestroy,
        @Nullable Output<Boolean> forceDisable,
        @Nullable Output<Boolean> grantAllPermissions,
        @Nullable Output<List<PluginGrantPermissionGetArgs>> grantPermissions,
        @Nullable Output<String> name,
        @Nullable Output<String> pluginReference) {
        this.alias = alias;
        this.enableTimeout = enableTimeout;
        this.enabled = enabled;
        this.envs = envs;
        this.forceDestroy = forceDestroy;
        this.forceDisable = forceDisable;
        this.grantAllPermissions = grantAllPermissions;
        this.grantPermissions = grantPermissions;
        this.name = name;
        this.pluginReference = pluginReference;
    }

    private PluginState() {
        this.alias = Codegen.empty();
        this.enableTimeout = Codegen.empty();
        this.enabled = Codegen.empty();
        this.envs = Codegen.empty();
        this.forceDestroy = Codegen.empty();
        this.forceDisable = Codegen.empty();
        this.grantAllPermissions = Codegen.empty();
        this.grantPermissions = Codegen.empty();
        this.name = Codegen.empty();
        this.pluginReference = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PluginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> alias;
        private @Nullable Output<Integer> enableTimeout;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<List<String>> envs;
        private @Nullable Output<Boolean> forceDestroy;
        private @Nullable Output<Boolean> forceDisable;
        private @Nullable Output<Boolean> grantAllPermissions;
        private @Nullable Output<List<PluginGrantPermissionGetArgs>> grantPermissions;
        private @Nullable Output<String> name;
        private @Nullable Output<String> pluginReference;

        public Builder() {
    	      // Empty
        }

        public Builder(PluginState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.enableTimeout = defaults.enableTimeout;
    	      this.enabled = defaults.enabled;
    	      this.envs = defaults.envs;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.forceDisable = defaults.forceDisable;
    	      this.grantAllPermissions = defaults.grantAllPermissions;
    	      this.grantPermissions = defaults.grantPermissions;
    	      this.name = defaults.name;
    	      this.pluginReference = defaults.pluginReference;
        }

        public Builder alias(@Nullable Output<String> alias) {
            this.alias = alias;
            return this;
        }
        public Builder alias(@Nullable String alias) {
            this.alias = Codegen.ofNullable(alias);
            return this;
        }
        public Builder enableTimeout(@Nullable Output<Integer> enableTimeout) {
            this.enableTimeout = enableTimeout;
            return this;
        }
        public Builder enableTimeout(@Nullable Integer enableTimeout) {
            this.enableTimeout = Codegen.ofNullable(enableTimeout);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder envs(@Nullable Output<List<String>> envs) {
            this.envs = envs;
            return this;
        }
        public Builder envs(@Nullable List<String> envs) {
            this.envs = Codegen.ofNullable(envs);
            return this;
        }
        public Builder envs(String... envs) {
            return envs(List.of(envs));
        }
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }
        public Builder forceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Codegen.ofNullable(forceDestroy);
            return this;
        }
        public Builder forceDisable(@Nullable Output<Boolean> forceDisable) {
            this.forceDisable = forceDisable;
            return this;
        }
        public Builder forceDisable(@Nullable Boolean forceDisable) {
            this.forceDisable = Codegen.ofNullable(forceDisable);
            return this;
        }
        public Builder grantAllPermissions(@Nullable Output<Boolean> grantAllPermissions) {
            this.grantAllPermissions = grantAllPermissions;
            return this;
        }
        public Builder grantAllPermissions(@Nullable Boolean grantAllPermissions) {
            this.grantAllPermissions = Codegen.ofNullable(grantAllPermissions);
            return this;
        }
        public Builder grantPermissions(@Nullable Output<List<PluginGrantPermissionGetArgs>> grantPermissions) {
            this.grantPermissions = grantPermissions;
            return this;
        }
        public Builder grantPermissions(@Nullable List<PluginGrantPermissionGetArgs> grantPermissions) {
            this.grantPermissions = Codegen.ofNullable(grantPermissions);
            return this;
        }
        public Builder grantPermissions(PluginGrantPermissionGetArgs... grantPermissions) {
            return grantPermissions(List.of(grantPermissions));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder pluginReference(@Nullable Output<String> pluginReference) {
            this.pluginReference = pluginReference;
            return this;
        }
        public Builder pluginReference(@Nullable String pluginReference) {
            this.pluginReference = Codegen.ofNullable(pluginReference);
            return this;
        }        public PluginState build() {
            return new PluginState(alias, enableTimeout, enabled, envs, forceDestroy, forceDisable, grantAllPermissions, grantPermissions, name, pluginReference);
        }
    }
}
