// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.docker.inputs.RemoteImageBuildArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RemoteImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final RemoteImageArgs Empty = new RemoteImageArgs();

    /**
     * Configuration to build an image. Please see [docker build command
     * reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    @Import(name="build")
      private final @Nullable Output<RemoteImageBuildArgs> build;

    public Output<RemoteImageBuildArgs> getBuild() {
        return this.build == null ? Output.empty() : this.build;
    }

    /**
     * If true, then the image is removed forcibly when the resource is destroyed.
     * 
     */
    @Import(name="forceRemove")
      private final @Nullable Output<Boolean> forceRemove;

    public Output<Boolean> getForceRemove() {
        return this.forceRemove == null ? Output.empty() : this.forceRemove;
    }

    /**
     * If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
     * the docker local storage on destroy operation.
     * 
     */
    @Import(name="keepLocally")
      private final @Nullable Output<Boolean> keepLocally;

    public Output<Boolean> getKeepLocally() {
        return this.keepLocally == null ? Output.empty() : this.keepLocally;
    }

    /**
     * The name of the Docker image, including any tags or SHA256 repo digests.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * A value which cause an image pull when changed
     * 
     * @Deprecated
     * Use field pull_triggers instead
     * 
     */
    @Deprecated /* Use field pull_triggers instead */
    @Import(name="pullTrigger")
      private final @Nullable Output<String> pullTrigger;

    @Deprecated /* Use field pull_triggers instead */
    public Output<String> getPullTrigger() {
        return this.pullTrigger == null ? Output.empty() : this.pullTrigger;
    }

    /**
     * List of values which cause an image pull when changed. This is used to store the image digest from the registry when
     * using the [docker_registry_image](../data-sources/registry_image.md).
     * 
     */
    @Import(name="pullTriggers")
      private final @Nullable Output<List<String>> pullTriggers;

    public Output<List<String>> getPullTriggers() {
        return this.pullTriggers == null ? Output.empty() : this.pullTriggers;
    }

    public RemoteImageArgs(
        @Nullable Output<RemoteImageBuildArgs> build,
        @Nullable Output<Boolean> forceRemove,
        @Nullable Output<Boolean> keepLocally,
        Output<String> name,
        @Nullable Output<String> pullTrigger,
        @Nullable Output<List<String>> pullTriggers) {
        this.build = build;
        this.forceRemove = forceRemove;
        this.keepLocally = keepLocally;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.pullTrigger = pullTrigger;
        this.pullTriggers = pullTriggers;
    }

    private RemoteImageArgs() {
        this.build = Output.empty();
        this.forceRemove = Output.empty();
        this.keepLocally = Output.empty();
        this.name = Output.empty();
        this.pullTrigger = Output.empty();
        this.pullTriggers = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RemoteImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RemoteImageBuildArgs> build;
        private @Nullable Output<Boolean> forceRemove;
        private @Nullable Output<Boolean> keepLocally;
        private Output<String> name;
        private @Nullable Output<String> pullTrigger;
        private @Nullable Output<List<String>> pullTriggers;

        public Builder() {
    	      // Empty
        }

        public Builder(RemoteImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.build = defaults.build;
    	      this.forceRemove = defaults.forceRemove;
    	      this.keepLocally = defaults.keepLocally;
    	      this.name = defaults.name;
    	      this.pullTrigger = defaults.pullTrigger;
    	      this.pullTriggers = defaults.pullTriggers;
        }

        public Builder build(@Nullable Output<RemoteImageBuildArgs> build) {
            this.build = build;
            return this;
        }

        public Builder build(@Nullable RemoteImageBuildArgs build) {
            this.build = Output.ofNullable(build);
            return this;
        }

        public Builder forceRemove(@Nullable Output<Boolean> forceRemove) {
            this.forceRemove = forceRemove;
            return this;
        }

        public Builder forceRemove(@Nullable Boolean forceRemove) {
            this.forceRemove = Output.ofNullable(forceRemove);
            return this;
        }

        public Builder keepLocally(@Nullable Output<Boolean> keepLocally) {
            this.keepLocally = keepLocally;
            return this;
        }

        public Builder keepLocally(@Nullable Boolean keepLocally) {
            this.keepLocally = Output.ofNullable(keepLocally);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder pullTrigger(@Nullable Output<String> pullTrigger) {
            this.pullTrigger = pullTrigger;
            return this;
        }

        public Builder pullTrigger(@Nullable String pullTrigger) {
            this.pullTrigger = Output.ofNullable(pullTrigger);
            return this;
        }

        public Builder pullTriggers(@Nullable Output<List<String>> pullTriggers) {
            this.pullTriggers = pullTriggers;
            return this;
        }

        public Builder pullTriggers(@Nullable List<String> pullTriggers) {
            this.pullTriggers = Output.ofNullable(pullTriggers);
            return this;
        }
        public RemoteImageArgs build() {
            return new RemoteImageArgs(build, forceRemove, keepLocally, name, pullTrigger, pullTriggers);
        }
    }
}
