// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ContainerUploadGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerUploadGetArgs Empty = new ContainerUploadGetArgs();

    @Import(name="content")
      private final @Nullable Output<String> content;

    public Output<String> getContent() {
        return this.content == null ? Output.empty() : this.content;
    }

    @Import(name="contentBase64")
      private final @Nullable Output<String> contentBase64;

    public Output<String> getContentBase64() {
        return this.contentBase64 == null ? Output.empty() : this.contentBase64;
    }

    @Import(name="executable")
      private final @Nullable Output<Boolean> executable;

    public Output<Boolean> getExecutable() {
        return this.executable == null ? Output.empty() : this.executable;
    }

    @Import(name="file", required=true)
      private final Output<String> file;

    public Output<String> getFile() {
        return this.file;
    }

    @Import(name="source")
      private final @Nullable Output<String> source;

    public Output<String> getSource() {
        return this.source == null ? Output.empty() : this.source;
    }

    @Import(name="sourceHash")
      private final @Nullable Output<String> sourceHash;

    public Output<String> getSourceHash() {
        return this.sourceHash == null ? Output.empty() : this.sourceHash;
    }

    public ContainerUploadGetArgs(
        @Nullable Output<String> content,
        @Nullable Output<String> contentBase64,
        @Nullable Output<Boolean> executable,
        Output<String> file,
        @Nullable Output<String> source,
        @Nullable Output<String> sourceHash) {
        this.content = content;
        this.contentBase64 = contentBase64;
        this.executable = executable;
        this.file = Objects.requireNonNull(file, "expected parameter 'file' to be non-null");
        this.source = source;
        this.sourceHash = sourceHash;
    }

    private ContainerUploadGetArgs() {
        this.content = Output.empty();
        this.contentBase64 = Output.empty();
        this.executable = Output.empty();
        this.file = Output.empty();
        this.source = Output.empty();
        this.sourceHash = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerUploadGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> content;
        private @Nullable Output<String> contentBase64;
        private @Nullable Output<Boolean> executable;
        private Output<String> file;
        private @Nullable Output<String> source;
        private @Nullable Output<String> sourceHash;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerUploadGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.contentBase64 = defaults.contentBase64;
    	      this.executable = defaults.executable;
    	      this.file = defaults.file;
    	      this.source = defaults.source;
    	      this.sourceHash = defaults.sourceHash;
        }

        public Builder content(@Nullable Output<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(@Nullable String content) {
            this.content = Output.ofNullable(content);
            return this;
        }

        public Builder contentBase64(@Nullable Output<String> contentBase64) {
            this.contentBase64 = contentBase64;
            return this;
        }

        public Builder contentBase64(@Nullable String contentBase64) {
            this.contentBase64 = Output.ofNullable(contentBase64);
            return this;
        }

        public Builder executable(@Nullable Output<Boolean> executable) {
            this.executable = executable;
            return this;
        }

        public Builder executable(@Nullable Boolean executable) {
            this.executable = Output.ofNullable(executable);
            return this;
        }

        public Builder file(Output<String> file) {
            this.file = Objects.requireNonNull(file);
            return this;
        }

        public Builder file(String file) {
            this.file = Output.of(Objects.requireNonNull(file));
            return this;
        }

        public Builder source(@Nullable Output<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(@Nullable String source) {
            this.source = Output.ofNullable(source);
            return this;
        }

        public Builder sourceHash(@Nullable Output<String> sourceHash) {
            this.sourceHash = sourceHash;
            return this;
        }

        public Builder sourceHash(@Nullable String sourceHash) {
            this.sourceHash = Output.ofNullable(sourceHash);
            return this;
        }
        public ContainerUploadGetArgs build() {
            return new ContainerUploadGetArgs(content, contentBase64, executable, file, source, sourceHash);
        }
    }
}
