// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.docker.inputs.RegistryImageBuildAuthConfigArgs;
import io.pulumi.docker.inputs.RegistryImageBuildUlimitArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegistryImageBuildArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegistryImageBuildArgs Empty = new RegistryImageBuildArgs();

    @Import(name="authConfigs")
      private final @Nullable Output<List<RegistryImageBuildAuthConfigArgs>> authConfigs;

    public Output<List<RegistryImageBuildAuthConfigArgs>> getAuthConfigs() {
        return this.authConfigs == null ? Codegen.empty() : this.authConfigs;
    }

    @Import(name="buildArgs")
      private final @Nullable Output<Map<String,String>> buildArgs;

    public Output<Map<String,String>> getBuildArgs() {
        return this.buildArgs == null ? Codegen.empty() : this.buildArgs;
    }

    @Import(name="buildId")
      private final @Nullable Output<String> buildId;

    public Output<String> getBuildId() {
        return this.buildId == null ? Codegen.empty() : this.buildId;
    }

    @Import(name="cacheFroms")
      private final @Nullable Output<List<String>> cacheFroms;

    public Output<List<String>> getCacheFroms() {
        return this.cacheFroms == null ? Codegen.empty() : this.cacheFroms;
    }

    @Import(name="cgroupParent")
      private final @Nullable Output<String> cgroupParent;

    public Output<String> getCgroupParent() {
        return this.cgroupParent == null ? Codegen.empty() : this.cgroupParent;
    }

    @Import(name="context", required=true)
      private final Output<String> context;

    public Output<String> getContext() {
        return this.context;
    }

    @Import(name="cpuPeriod")
      private final @Nullable Output<Integer> cpuPeriod;

    public Output<Integer> getCpuPeriod() {
        return this.cpuPeriod == null ? Codegen.empty() : this.cpuPeriod;
    }

    @Import(name="cpuQuota")
      private final @Nullable Output<Integer> cpuQuota;

    public Output<Integer> getCpuQuota() {
        return this.cpuQuota == null ? Codegen.empty() : this.cpuQuota;
    }

    @Import(name="cpuSetCpus")
      private final @Nullable Output<String> cpuSetCpus;

    public Output<String> getCpuSetCpus() {
        return this.cpuSetCpus == null ? Codegen.empty() : this.cpuSetCpus;
    }

    @Import(name="cpuSetMems")
      private final @Nullable Output<String> cpuSetMems;

    public Output<String> getCpuSetMems() {
        return this.cpuSetMems == null ? Codegen.empty() : this.cpuSetMems;
    }

    @Import(name="cpuShares")
      private final @Nullable Output<Integer> cpuShares;

    public Output<Integer> getCpuShares() {
        return this.cpuShares == null ? Codegen.empty() : this.cpuShares;
    }

    @Import(name="dockerfile")
      private final @Nullable Output<String> dockerfile;

    public Output<String> getDockerfile() {
        return this.dockerfile == null ? Codegen.empty() : this.dockerfile;
    }

    @Import(name="extraHosts")
      private final @Nullable Output<List<String>> extraHosts;

    public Output<List<String>> getExtraHosts() {
        return this.extraHosts == null ? Codegen.empty() : this.extraHosts;
    }

    @Import(name="forceRemove")
      private final @Nullable Output<Boolean> forceRemove;

    public Output<Boolean> getForceRemove() {
        return this.forceRemove == null ? Codegen.empty() : this.forceRemove;
    }

    @Import(name="isolation")
      private final @Nullable Output<String> isolation;

    public Output<String> getIsolation() {
        return this.isolation == null ? Codegen.empty() : this.isolation;
    }

    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    @Import(name="memory")
      private final @Nullable Output<Integer> memory;

    public Output<Integer> getMemory() {
        return this.memory == null ? Codegen.empty() : this.memory;
    }

    @Import(name="memorySwap")
      private final @Nullable Output<Integer> memorySwap;

    public Output<Integer> getMemorySwap() {
        return this.memorySwap == null ? Codegen.empty() : this.memorySwap;
    }

    @Import(name="networkMode")
      private final @Nullable Output<String> networkMode;

    public Output<String> getNetworkMode() {
        return this.networkMode == null ? Codegen.empty() : this.networkMode;
    }

    @Import(name="noCache")
      private final @Nullable Output<Boolean> noCache;

    public Output<Boolean> getNoCache() {
        return this.noCache == null ? Codegen.empty() : this.noCache;
    }

    @Import(name="platform")
      private final @Nullable Output<String> platform;

    public Output<String> getPlatform() {
        return this.platform == null ? Codegen.empty() : this.platform;
    }

    @Import(name="pullParent")
      private final @Nullable Output<Boolean> pullParent;

    public Output<Boolean> getPullParent() {
        return this.pullParent == null ? Codegen.empty() : this.pullParent;
    }

    @Import(name="remoteContext")
      private final @Nullable Output<String> remoteContext;

    public Output<String> getRemoteContext() {
        return this.remoteContext == null ? Codegen.empty() : this.remoteContext;
    }

    @Import(name="remove")
      private final @Nullable Output<Boolean> remove;

    public Output<Boolean> getRemove() {
        return this.remove == null ? Codegen.empty() : this.remove;
    }

    @Import(name="securityOpts")
      private final @Nullable Output<List<String>> securityOpts;

    public Output<List<String>> getSecurityOpts() {
        return this.securityOpts == null ? Codegen.empty() : this.securityOpts;
    }

    @Import(name="sessionId")
      private final @Nullable Output<String> sessionId;

    public Output<String> getSessionId() {
        return this.sessionId == null ? Codegen.empty() : this.sessionId;
    }

    @Import(name="shmSize")
      private final @Nullable Output<Integer> shmSize;

    public Output<Integer> getShmSize() {
        return this.shmSize == null ? Codegen.empty() : this.shmSize;
    }

    @Import(name="squash")
      private final @Nullable Output<Boolean> squash;

    public Output<Boolean> getSquash() {
        return this.squash == null ? Codegen.empty() : this.squash;
    }

    @Import(name="suppressOutput")
      private final @Nullable Output<Boolean> suppressOutput;

    public Output<Boolean> getSuppressOutput() {
        return this.suppressOutput == null ? Codegen.empty() : this.suppressOutput;
    }

    @Import(name="target")
      private final @Nullable Output<String> target;

    public Output<String> getTarget() {
        return this.target == null ? Codegen.empty() : this.target;
    }

    @Import(name="ulimits")
      private final @Nullable Output<List<RegistryImageBuildUlimitArgs>> ulimits;

    public Output<List<RegistryImageBuildUlimitArgs>> getUlimits() {
        return this.ulimits == null ? Codegen.empty() : this.ulimits;
    }

    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public RegistryImageBuildArgs(
        @Nullable Output<List<RegistryImageBuildAuthConfigArgs>> authConfigs,
        @Nullable Output<Map<String,String>> buildArgs,
        @Nullable Output<String> buildId,
        @Nullable Output<List<String>> cacheFroms,
        @Nullable Output<String> cgroupParent,
        Output<String> context,
        @Nullable Output<Integer> cpuPeriod,
        @Nullable Output<Integer> cpuQuota,
        @Nullable Output<String> cpuSetCpus,
        @Nullable Output<String> cpuSetMems,
        @Nullable Output<Integer> cpuShares,
        @Nullable Output<String> dockerfile,
        @Nullable Output<List<String>> extraHosts,
        @Nullable Output<Boolean> forceRemove,
        @Nullable Output<String> isolation,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<Integer> memory,
        @Nullable Output<Integer> memorySwap,
        @Nullable Output<String> networkMode,
        @Nullable Output<Boolean> noCache,
        @Nullable Output<String> platform,
        @Nullable Output<Boolean> pullParent,
        @Nullable Output<String> remoteContext,
        @Nullable Output<Boolean> remove,
        @Nullable Output<List<String>> securityOpts,
        @Nullable Output<String> sessionId,
        @Nullable Output<Integer> shmSize,
        @Nullable Output<Boolean> squash,
        @Nullable Output<Boolean> suppressOutput,
        @Nullable Output<String> target,
        @Nullable Output<List<RegistryImageBuildUlimitArgs>> ulimits,
        @Nullable Output<String> version) {
        this.authConfigs = authConfigs;
        this.buildArgs = buildArgs;
        this.buildId = buildId;
        this.cacheFroms = cacheFroms;
        this.cgroupParent = cgroupParent;
        this.context = Objects.requireNonNull(context, "expected parameter 'context' to be non-null");
        this.cpuPeriod = cpuPeriod;
        this.cpuQuota = cpuQuota;
        this.cpuSetCpus = cpuSetCpus;
        this.cpuSetMems = cpuSetMems;
        this.cpuShares = cpuShares;
        this.dockerfile = dockerfile;
        this.extraHosts = extraHosts;
        this.forceRemove = forceRemove;
        this.isolation = isolation;
        this.labels = labels;
        this.memory = memory;
        this.memorySwap = memorySwap;
        this.networkMode = networkMode;
        this.noCache = noCache;
        this.platform = platform;
        this.pullParent = pullParent;
        this.remoteContext = remoteContext;
        this.remove = remove;
        this.securityOpts = securityOpts;
        this.sessionId = sessionId;
        this.shmSize = shmSize;
        this.squash = squash;
        this.suppressOutput = suppressOutput;
        this.target = target;
        this.ulimits = ulimits;
        this.version = version;
    }

    private RegistryImageBuildArgs() {
        this.authConfigs = Codegen.empty();
        this.buildArgs = Codegen.empty();
        this.buildId = Codegen.empty();
        this.cacheFroms = Codegen.empty();
        this.cgroupParent = Codegen.empty();
        this.context = Codegen.empty();
        this.cpuPeriod = Codegen.empty();
        this.cpuQuota = Codegen.empty();
        this.cpuSetCpus = Codegen.empty();
        this.cpuSetMems = Codegen.empty();
        this.cpuShares = Codegen.empty();
        this.dockerfile = Codegen.empty();
        this.extraHosts = Codegen.empty();
        this.forceRemove = Codegen.empty();
        this.isolation = Codegen.empty();
        this.labels = Codegen.empty();
        this.memory = Codegen.empty();
        this.memorySwap = Codegen.empty();
        this.networkMode = Codegen.empty();
        this.noCache = Codegen.empty();
        this.platform = Codegen.empty();
        this.pullParent = Codegen.empty();
        this.remoteContext = Codegen.empty();
        this.remove = Codegen.empty();
        this.securityOpts = Codegen.empty();
        this.sessionId = Codegen.empty();
        this.shmSize = Codegen.empty();
        this.squash = Codegen.empty();
        this.suppressOutput = Codegen.empty();
        this.target = Codegen.empty();
        this.ulimits = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryImageBuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<RegistryImageBuildAuthConfigArgs>> authConfigs;
        private @Nullable Output<Map<String,String>> buildArgs;
        private @Nullable Output<String> buildId;
        private @Nullable Output<List<String>> cacheFroms;
        private @Nullable Output<String> cgroupParent;
        private Output<String> context;
        private @Nullable Output<Integer> cpuPeriod;
        private @Nullable Output<Integer> cpuQuota;
        private @Nullable Output<String> cpuSetCpus;
        private @Nullable Output<String> cpuSetMems;
        private @Nullable Output<Integer> cpuShares;
        private @Nullable Output<String> dockerfile;
        private @Nullable Output<List<String>> extraHosts;
        private @Nullable Output<Boolean> forceRemove;
        private @Nullable Output<String> isolation;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<Integer> memory;
        private @Nullable Output<Integer> memorySwap;
        private @Nullable Output<String> networkMode;
        private @Nullable Output<Boolean> noCache;
        private @Nullable Output<String> platform;
        private @Nullable Output<Boolean> pullParent;
        private @Nullable Output<String> remoteContext;
        private @Nullable Output<Boolean> remove;
        private @Nullable Output<List<String>> securityOpts;
        private @Nullable Output<String> sessionId;
        private @Nullable Output<Integer> shmSize;
        private @Nullable Output<Boolean> squash;
        private @Nullable Output<Boolean> suppressOutput;
        private @Nullable Output<String> target;
        private @Nullable Output<List<RegistryImageBuildUlimitArgs>> ulimits;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryImageBuildArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authConfigs = defaults.authConfigs;
    	      this.buildArgs = defaults.buildArgs;
    	      this.buildId = defaults.buildId;
    	      this.cacheFroms = defaults.cacheFroms;
    	      this.cgroupParent = defaults.cgroupParent;
    	      this.context = defaults.context;
    	      this.cpuPeriod = defaults.cpuPeriod;
    	      this.cpuQuota = defaults.cpuQuota;
    	      this.cpuSetCpus = defaults.cpuSetCpus;
    	      this.cpuSetMems = defaults.cpuSetMems;
    	      this.cpuShares = defaults.cpuShares;
    	      this.dockerfile = defaults.dockerfile;
    	      this.extraHosts = defaults.extraHosts;
    	      this.forceRemove = defaults.forceRemove;
    	      this.isolation = defaults.isolation;
    	      this.labels = defaults.labels;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.networkMode = defaults.networkMode;
    	      this.noCache = defaults.noCache;
    	      this.platform = defaults.platform;
    	      this.pullParent = defaults.pullParent;
    	      this.remoteContext = defaults.remoteContext;
    	      this.remove = defaults.remove;
    	      this.securityOpts = defaults.securityOpts;
    	      this.sessionId = defaults.sessionId;
    	      this.shmSize = defaults.shmSize;
    	      this.squash = defaults.squash;
    	      this.suppressOutput = defaults.suppressOutput;
    	      this.target = defaults.target;
    	      this.ulimits = defaults.ulimits;
    	      this.version = defaults.version;
        }

        public Builder authConfigs(@Nullable Output<List<RegistryImageBuildAuthConfigArgs>> authConfigs) {
            this.authConfigs = authConfigs;
            return this;
        }
        public Builder authConfigs(@Nullable List<RegistryImageBuildAuthConfigArgs> authConfigs) {
            this.authConfigs = Codegen.ofNullable(authConfigs);
            return this;
        }
        public Builder authConfigs(RegistryImageBuildAuthConfigArgs... authConfigs) {
            return authConfigs(List.of(authConfigs));
        }
        public Builder buildArgs(@Nullable Output<Map<String,String>> buildArgs) {
            this.buildArgs = buildArgs;
            return this;
        }
        public Builder buildArgs(@Nullable Map<String,String> buildArgs) {
            this.buildArgs = Codegen.ofNullable(buildArgs);
            return this;
        }
        public Builder buildId(@Nullable Output<String> buildId) {
            this.buildId = buildId;
            return this;
        }
        public Builder buildId(@Nullable String buildId) {
            this.buildId = Codegen.ofNullable(buildId);
            return this;
        }
        public Builder cacheFroms(@Nullable Output<List<String>> cacheFroms) {
            this.cacheFroms = cacheFroms;
            return this;
        }
        public Builder cacheFroms(@Nullable List<String> cacheFroms) {
            this.cacheFroms = Codegen.ofNullable(cacheFroms);
            return this;
        }
        public Builder cacheFroms(String... cacheFroms) {
            return cacheFroms(List.of(cacheFroms));
        }
        public Builder cgroupParent(@Nullable Output<String> cgroupParent) {
            this.cgroupParent = cgroupParent;
            return this;
        }
        public Builder cgroupParent(@Nullable String cgroupParent) {
            this.cgroupParent = Codegen.ofNullable(cgroupParent);
            return this;
        }
        public Builder context(Output<String> context) {
            this.context = Objects.requireNonNull(context);
            return this;
        }
        public Builder context(String context) {
            this.context = Output.of(Objects.requireNonNull(context));
            return this;
        }
        public Builder cpuPeriod(@Nullable Output<Integer> cpuPeriod) {
            this.cpuPeriod = cpuPeriod;
            return this;
        }
        public Builder cpuPeriod(@Nullable Integer cpuPeriod) {
            this.cpuPeriod = Codegen.ofNullable(cpuPeriod);
            return this;
        }
        public Builder cpuQuota(@Nullable Output<Integer> cpuQuota) {
            this.cpuQuota = cpuQuota;
            return this;
        }
        public Builder cpuQuota(@Nullable Integer cpuQuota) {
            this.cpuQuota = Codegen.ofNullable(cpuQuota);
            return this;
        }
        public Builder cpuSetCpus(@Nullable Output<String> cpuSetCpus) {
            this.cpuSetCpus = cpuSetCpus;
            return this;
        }
        public Builder cpuSetCpus(@Nullable String cpuSetCpus) {
            this.cpuSetCpus = Codegen.ofNullable(cpuSetCpus);
            return this;
        }
        public Builder cpuSetMems(@Nullable Output<String> cpuSetMems) {
            this.cpuSetMems = cpuSetMems;
            return this;
        }
        public Builder cpuSetMems(@Nullable String cpuSetMems) {
            this.cpuSetMems = Codegen.ofNullable(cpuSetMems);
            return this;
        }
        public Builder cpuShares(@Nullable Output<Integer> cpuShares) {
            this.cpuShares = cpuShares;
            return this;
        }
        public Builder cpuShares(@Nullable Integer cpuShares) {
            this.cpuShares = Codegen.ofNullable(cpuShares);
            return this;
        }
        public Builder dockerfile(@Nullable Output<String> dockerfile) {
            this.dockerfile = dockerfile;
            return this;
        }
        public Builder dockerfile(@Nullable String dockerfile) {
            this.dockerfile = Codegen.ofNullable(dockerfile);
            return this;
        }
        public Builder extraHosts(@Nullable Output<List<String>> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }
        public Builder extraHosts(@Nullable List<String> extraHosts) {
            this.extraHosts = Codegen.ofNullable(extraHosts);
            return this;
        }
        public Builder extraHosts(String... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }
        public Builder forceRemove(@Nullable Output<Boolean> forceRemove) {
            this.forceRemove = forceRemove;
            return this;
        }
        public Builder forceRemove(@Nullable Boolean forceRemove) {
            this.forceRemove = Codegen.ofNullable(forceRemove);
            return this;
        }
        public Builder isolation(@Nullable Output<String> isolation) {
            this.isolation = isolation;
            return this;
        }
        public Builder isolation(@Nullable String isolation) {
            this.isolation = Codegen.ofNullable(isolation);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder memory(@Nullable Output<Integer> memory) {
            this.memory = memory;
            return this;
        }
        public Builder memory(@Nullable Integer memory) {
            this.memory = Codegen.ofNullable(memory);
            return this;
        }
        public Builder memorySwap(@Nullable Output<Integer> memorySwap) {
            this.memorySwap = memorySwap;
            return this;
        }
        public Builder memorySwap(@Nullable Integer memorySwap) {
            this.memorySwap = Codegen.ofNullable(memorySwap);
            return this;
        }
        public Builder networkMode(@Nullable Output<String> networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = Codegen.ofNullable(networkMode);
            return this;
        }
        public Builder noCache(@Nullable Output<Boolean> noCache) {
            this.noCache = noCache;
            return this;
        }
        public Builder noCache(@Nullable Boolean noCache) {
            this.noCache = Codegen.ofNullable(noCache);
            return this;
        }
        public Builder platform(@Nullable Output<String> platform) {
            this.platform = platform;
            return this;
        }
        public Builder platform(@Nullable String platform) {
            this.platform = Codegen.ofNullable(platform);
            return this;
        }
        public Builder pullParent(@Nullable Output<Boolean> pullParent) {
            this.pullParent = pullParent;
            return this;
        }
        public Builder pullParent(@Nullable Boolean pullParent) {
            this.pullParent = Codegen.ofNullable(pullParent);
            return this;
        }
        public Builder remoteContext(@Nullable Output<String> remoteContext) {
            this.remoteContext = remoteContext;
            return this;
        }
        public Builder remoteContext(@Nullable String remoteContext) {
            this.remoteContext = Codegen.ofNullable(remoteContext);
            return this;
        }
        public Builder remove(@Nullable Output<Boolean> remove) {
            this.remove = remove;
            return this;
        }
        public Builder remove(@Nullable Boolean remove) {
            this.remove = Codegen.ofNullable(remove);
            return this;
        }
        public Builder securityOpts(@Nullable Output<List<String>> securityOpts) {
            this.securityOpts = securityOpts;
            return this;
        }
        public Builder securityOpts(@Nullable List<String> securityOpts) {
            this.securityOpts = Codegen.ofNullable(securityOpts);
            return this;
        }
        public Builder securityOpts(String... securityOpts) {
            return securityOpts(List.of(securityOpts));
        }
        public Builder sessionId(@Nullable Output<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }
        public Builder sessionId(@Nullable String sessionId) {
            this.sessionId = Codegen.ofNullable(sessionId);
            return this;
        }
        public Builder shmSize(@Nullable Output<Integer> shmSize) {
            this.shmSize = shmSize;
            return this;
        }
        public Builder shmSize(@Nullable Integer shmSize) {
            this.shmSize = Codegen.ofNullable(shmSize);
            return this;
        }
        public Builder squash(@Nullable Output<Boolean> squash) {
            this.squash = squash;
            return this;
        }
        public Builder squash(@Nullable Boolean squash) {
            this.squash = Codegen.ofNullable(squash);
            return this;
        }
        public Builder suppressOutput(@Nullable Output<Boolean> suppressOutput) {
            this.suppressOutput = suppressOutput;
            return this;
        }
        public Builder suppressOutput(@Nullable Boolean suppressOutput) {
            this.suppressOutput = Codegen.ofNullable(suppressOutput);
            return this;
        }
        public Builder target(@Nullable Output<String> target) {
            this.target = target;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = Codegen.ofNullable(target);
            return this;
        }
        public Builder ulimits(@Nullable Output<List<RegistryImageBuildUlimitArgs>> ulimits) {
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(@Nullable List<RegistryImageBuildUlimitArgs> ulimits) {
            this.ulimits = Codegen.ofNullable(ulimits);
            return this;
        }
        public Builder ulimits(RegistryImageBuildUlimitArgs... ulimits) {
            return ulimits(List.of(ulimits));
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }        public RegistryImageBuildArgs build() {
            return new RegistryImageBuildArgs(authConfigs, buildArgs, buildId, cacheFroms, cgroupParent, context, cpuPeriod, cpuQuota, cpuSetCpus, cpuSetMems, cpuShares, dockerfile, extraHosts, forceRemove, isolation, labels, memory, memorySwap, networkMode, noCache, platform, pullParent, remoteContext, remove, securityOpts, sessionId, shmSize, squash, suppressOutput, target, ulimits, version);
        }
    }
}
