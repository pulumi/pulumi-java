// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.docker.RemoteImageArgs;
import io.pulumi.docker.Utilities;
import io.pulumi.docker.inputs.RemoteImageState;
import io.pulumi.docker.outputs.RemoteImageBuild;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * <!-- Bug: Type and Name are switched -->
 * Pulls a Docker image to a given Docker host from a Docker Registry.
 *  This resource will *not* pull new layers of the image automatically unless used in conjunction with docker.RegistryImage data source to update the `pull_triggers` field.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic
 * 
 * Finds and downloads the latest `ubuntu:precise` image but does not check
 * for further updates of the image
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 * 
 * const ubuntu = new docker.RemoteImage("ubuntu", {
 *     name: "ubuntu:precise",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_docker as docker
 * 
 * ubuntu = docker.RemoteImage("ubuntu", name="ubuntu:precise")
 * ```
 * ```csharp
 * using Pulumi;
 * using Docker = Pulumi.Docker;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ubuntu = new Docker.RemoteImage("ubuntu", new Docker.RemoteImageArgs
 *         {
 *             Name = "ubuntu:precise",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-docker/sdk/v3/go/docker"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := docker.NewRemoteImage(ctx, "ubuntu", &docker.RemoteImageArgs{
 * 			Name: pulumi.String("ubuntu:precise"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Dynamic updates
 * 
 * To be able to update an image dynamically when the `sha256` sum changes,
 * you need to use it in combination with `docker.RegistryImage` as follows:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 * 
 * const ubuntuRegistryImage = docker.getRegistryImage({
 *     name: "ubuntu:precise",
 * });
 * const ubuntuRemoteImage = new docker.RemoteImage("ubuntuRemoteImage", {
 *     name: ubuntuRegistryImage.then(ubuntuRegistryImage => ubuntuRegistryImage.name),
 *     pullTriggers: [ubuntuRegistryImage.then(ubuntuRegistryImage => ubuntuRegistryImage.sha256Digest)],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_docker as docker
 * 
 * ubuntu_registry_image = docker.get_registry_image(name="ubuntu:precise")
 * ubuntu_remote_image = docker.RemoteImage("ubuntuRemoteImage",
 *     name=ubuntu_registry_image.name,
 *     pull_triggers=[ubuntu_registry_image.sha256_digest])
 * ```
 * ```csharp
 * using Pulumi;
 * using Docker = Pulumi.Docker;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ubuntuRegistryImage = Output.Create(Docker.GetRegistryImage.InvokeAsync(new Docker.GetRegistryImageArgs
 *         {
 *             Name = "ubuntu:precise",
 *         }));
 *         var ubuntuRemoteImage = new Docker.RemoteImage("ubuntuRemoteImage", new Docker.RemoteImageArgs
 *         {
 *             Name = ubuntuRegistryImage.Apply(ubuntuRegistryImage => ubuntuRegistryImage.Name),
 *             PullTriggers = 
 *             {
 *                 ubuntuRegistryImage.Apply(ubuntuRegistryImage => ubuntuRegistryImage.Sha256Digest),
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-docker/sdk/v3/go/docker"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		ubuntuRegistryImage, err := docker.LookupRegistryImage(ctx, &docker.LookupRegistryImageArgs{
 * 			Name: "ubuntu:precise",
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = docker.NewRemoteImage(ctx, "ubuntuRemoteImage", &docker.RemoteImageArgs{
 * 			Name: pulumi.String(ubuntuRegistryImage.Name),
 * 			PullTriggers: pulumi.StringArray{
 * 				pulumi.String(ubuntuRegistryImage.Sha256Digest),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Build
 * 
 * You can also use the resource to build an image.
 * In this case the image "zoo" and "zoo:develop" are built.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 * 
 * const zoo = new docker.RemoteImage("zoo", {
 *     name: "zoo",
 *     build: {
 *         path: ".",
 *         tags: ["zoo:develop"],
 *         buildArg: {
 *             foo: "zoo",
 *         },
 *         label: {
 *             author: "zoo",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_docker as docker
 * 
 * zoo = docker.RemoteImage("zoo",
 *     name="zoo",
 *     build=docker.RemoteImageBuildArgs(
 *         path=".",
 *         tags=["zoo:develop"],
 *         build_arg={
 *             "foo": "zoo",
 *         },
 *         label={
 *             "author": "zoo",
 *         },
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Docker = Pulumi.Docker;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var zoo = new Docker.RemoteImage("zoo", new Docker.RemoteImageArgs
 *         {
 *             Name = "zoo",
 *             Build = new Docker.Inputs.RemoteImageBuildArgs
 *             {
 *                 Path = ".",
 *                 Tags = 
 *                 {
 *                     "zoo:develop",
 *                 },
 *                 BuildArg = 
 *                 {
 *                     { "foo", "zoo" },
 *                 },
 *                 Label = 
 *                 {
 *                     { "author", "zoo" },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-docker/sdk/v3/go/docker"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := docker.NewRemoteImage(ctx, "zoo", &docker.RemoteImageArgs{
 * 			Name: pulumi.String("zoo"),
 * 			Build: &docker.RemoteImageBuildArgs{
 * 				Path: pulumi.String("."),
 * 				Tags: pulumi.StringArray{
 * 					pulumi.String("zoo:develop"),
 * 				},
 * 				BuildArg: pulumi.StringMap{
 * 					"foo": pulumi.String("zoo"),
 * 				},
 * 				Label: pulumi.StringMap{
 * 					"author": pulumi.String("zoo"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * <!-- schema generated by tfplugindocs -->
 * {{% /example %}}
 * {{% /examples %}}
 * ## Schema
 * 
 * ### Required
 * 
 * - **name** (String) The name of the Docker image, including any tags or SHA256 repo digests.
 * 
 * ### Optional
 * 
 * - **build** (Block Set, Max: 1) Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too. (see below for nested schema)
 * - **force_remove** (Boolean) If true, then the image is removed forcibly when the resource is destroyed.
 * - **id** (String) The ID of this resource.
 * - **keep_locally** (Boolean) If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
 * - **pull_trigger** (String, Deprecated) A value which cause an image pull when changed
 * - **pull_triggers** (Set of String) List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker_registry_image.
 * 
 * ### Read-Only
 * 
 * - **latest** (String, Deprecated) The ID of the image in the form of `sha256:<hash>` image digest. Do not confuse it with the default `latest` tag.
 * - **output** (String, Deprecated)
 * - **repo_digest** (String) The image sha256 digest in the form of `repo[:tag]@sha256:<hash>`.
 * 
 * <a id="nestedblock--build"></a>
 * ### Nested Schema for `build`
 * 
 * Required:
 * 
 * - **path** (String) Context path
 * 
 * Optional:
 * 
 * - **build_arg** (Map of String) Set build-time variables
 * - **dockerfile** (String) Name of the Dockerfile. Defaults to `Dockerfile`.
 * - **force_remove** (Boolean) Always remove intermediate containers
 * - **label** (Map of String) Set metadata for an image
 * - **no_cache** (Boolean) Do not use cache when building the image
 * - **remove** (Boolean) Remove intermediate containers after a successful build. Defaults to  `true`.
 * - **tag** (List of String) Name and optionally a tag in the 'name:tag' format
 * - **target** (String) Set the target build stage to build
 * 
 */
@ResourceType(type="docker:index/remoteImage:RemoteImage")
public class RemoteImage extends io.pulumi.resources.CustomResource {
    /**
     * Configuration to build an image. Please see [docker build command
     * reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    @Export(name="build", type=RemoteImageBuild.class, parameters={})
    private Output</* @Nullable */ RemoteImageBuild> build;

    /**
     * @return Configuration to build an image. Please see [docker build command
     * reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    public Output</* @Nullable */ RemoteImageBuild> getBuild() {
        return this.build;
    }
    /**
     * If true, then the image is removed forcibly when the resource is destroyed.
     * 
     */
    @Export(name="forceRemove", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceRemove;

    /**
     * @return If true, then the image is removed forcibly when the resource is destroyed.
     * 
     */
    public Output</* @Nullable */ Boolean> getForceRemove() {
        return this.forceRemove;
    }
    /**
     * If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
     * the docker local storage on destroy operation.
     * 
     */
    @Export(name="keepLocally", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> keepLocally;

    /**
     * @return If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
     * the docker local storage on destroy operation.
     * 
     */
    public Output</* @Nullable */ Boolean> getKeepLocally() {
        return this.keepLocally;
    }
    /**
     * The ID of the image in the form of `sha256:<hash>` image digest. Do not confuse it with the default `latest` tag.
     * 
     * @Deprecated
     * Use repo_digest instead
     */
    @Deprecated /* Use repo_digest instead */
    @Export(name="latest", type=String.class, parameters={})
    private Output<String> latest;

    /**
     * @return The ID of the image in the form of `sha256:<hash>` image digest. Do not confuse it with the default `latest` tag.
     * 
     */
    public Output<String> getLatest() {
        return this.latest;
    }
    /**
     * The name of the Docker image, including any tags or SHA256 repo digests.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Docker image, including any tags or SHA256 repo digests.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * @Deprecated
     * Is unused and will be removed.
     */
    @Deprecated /* Is unused and will be removed. */
    @Export(name="output", type=String.class, parameters={})
    private Output<String> output;

    public Output<String> getOutput() {
        return this.output;
    }
    /**
     * A value which cause an image pull when changed
     * 
     * @Deprecated
     * Use field pull_triggers instead
     */
    @Deprecated /* Use field pull_triggers instead */
    @Export(name="pullTrigger", type=String.class, parameters={})
    private Output</* @Nullable */ String> pullTrigger;

    /**
     * @return A value which cause an image pull when changed
     * 
     */
    public Output</* @Nullable */ String> getPullTrigger() {
        return this.pullTrigger;
    }
    /**
     * List of values which cause an image pull when changed. This is used to store the image digest from the registry when
     * using the [docker_registry_image](../data-sources/registry_image.md).
     * 
     */
    @Export(name="pullTriggers", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> pullTriggers;

    /**
     * @return List of values which cause an image pull when changed. This is used to store the image digest from the registry when
     * using the [docker_registry_image](../data-sources/registry_image.md).
     * 
     */
    public Output</* @Nullable */ List<String>> getPullTriggers() {
        return this.pullTriggers;
    }
    /**
     * The image sha256 digest in the form of `repo[:tag]@sha256:<hash>`.
     * 
     */
    @Export(name="repoDigest", type=String.class, parameters={})
    private Output<String> repoDigest;

    /**
     * @return The image sha256 digest in the form of `repo[:tag]@sha256:<hash>`.
     * 
     */
    public Output<String> getRepoDigest() {
        return this.repoDigest;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RemoteImage(String name) {
        this(name, RemoteImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RemoteImage(String name, RemoteImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RemoteImage(String name, RemoteImageArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("docker:index/remoteImage:RemoteImage", name, args == null ? RemoteImageArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RemoteImage(String name, Output<String> id, @Nullable RemoteImageState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("docker:index/remoteImage:RemoteImage", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RemoteImage get(String name, Output<String> id, @Nullable RemoteImageState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RemoteImage(name, id, state, options);
    }
}
