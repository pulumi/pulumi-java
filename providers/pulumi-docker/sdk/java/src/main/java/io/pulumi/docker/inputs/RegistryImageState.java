// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.docker.inputs.RegistryImageBuildGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegistryImageState extends io.pulumi.resources.ResourceArgs {

    public static final RegistryImageState Empty = new RegistryImageState();

    /**
     * Definition for building the image
     * 
     */
    @InputImport(name="build")
      private final @Nullable Input<RegistryImageBuildGetArgs> build;

    public Input<RegistryImageBuildGetArgs> getBuild() {
        return this.build == null ? Input.empty() : this.build;
    }

    /**
     * If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
     * 
     */
    @InputImport(name="insecureSkipVerify")
      private final @Nullable Input<Boolean> insecureSkipVerify;

    public Input<Boolean> getInsecureSkipVerify() {
        return this.insecureSkipVerify == null ? Input.empty() : this.insecureSkipVerify;
    }

    /**
     * If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from
     * the docker registry on destroy operation. Defaults to `false`
     * 
     */
    @InputImport(name="keepRemotely")
      private final @Nullable Input<Boolean> keepRemotely;

    public Input<Boolean> getKeepRemotely() {
        return this.keepRemotely == null ? Input.empty() : this.keepRemotely;
    }

    /**
     * The name of the Docker image.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The sha256 digest of the image.
     * 
     */
    @InputImport(name="sha256Digest")
      private final @Nullable Input<String> sha256Digest;

    public Input<String> getSha256Digest() {
        return this.sha256Digest == null ? Input.empty() : this.sha256Digest;
    }

    public RegistryImageState(
        @Nullable Input<RegistryImageBuildGetArgs> build,
        @Nullable Input<Boolean> insecureSkipVerify,
        @Nullable Input<Boolean> keepRemotely,
        @Nullable Input<String> name,
        @Nullable Input<String> sha256Digest) {
        this.build = build;
        this.insecureSkipVerify = insecureSkipVerify;
        this.keepRemotely = keepRemotely;
        this.name = name;
        this.sha256Digest = sha256Digest;
    }

    private RegistryImageState() {
        this.build = Input.empty();
        this.insecureSkipVerify = Input.empty();
        this.keepRemotely = Input.empty();
        this.name = Input.empty();
        this.sha256Digest = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RegistryImageBuildGetArgs> build;
        private @Nullable Input<Boolean> insecureSkipVerify;
        private @Nullable Input<Boolean> keepRemotely;
        private @Nullable Input<String> name;
        private @Nullable Input<String> sha256Digest;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryImageState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.build = defaults.build;
    	      this.insecureSkipVerify = defaults.insecureSkipVerify;
    	      this.keepRemotely = defaults.keepRemotely;
    	      this.name = defaults.name;
    	      this.sha256Digest = defaults.sha256Digest;
        }

        public Builder setBuild(@Nullable Input<RegistryImageBuildGetArgs> build) {
            this.build = build;
            return this;
        }

        public Builder setBuild(@Nullable RegistryImageBuildGetArgs build) {
            this.build = Input.ofNullable(build);
            return this;
        }

        public Builder setInsecureSkipVerify(@Nullable Input<Boolean> insecureSkipVerify) {
            this.insecureSkipVerify = insecureSkipVerify;
            return this;
        }

        public Builder setInsecureSkipVerify(@Nullable Boolean insecureSkipVerify) {
            this.insecureSkipVerify = Input.ofNullable(insecureSkipVerify);
            return this;
        }

        public Builder setKeepRemotely(@Nullable Input<Boolean> keepRemotely) {
            this.keepRemotely = keepRemotely;
            return this;
        }

        public Builder setKeepRemotely(@Nullable Boolean keepRemotely) {
            this.keepRemotely = Input.ofNullable(keepRemotely);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setSha256Digest(@Nullable Input<String> sha256Digest) {
            this.sha256Digest = sha256Digest;
            return this;
        }

        public Builder setSha256Digest(@Nullable String sha256Digest) {
            this.sha256Digest = Input.ofNullable(sha256Digest);
            return this;
        }
        public RegistryImageState build() {
            return new RegistryImageState(build, insecureSkipVerify, keepRemotely, name, sha256Digest);
        }
    }
}
