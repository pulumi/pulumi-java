// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.docker.inputs.ContainerCapabilitiesGetArgs;
import io.pulumi.docker.inputs.ContainerDeviceGetArgs;
import io.pulumi.docker.inputs.ContainerHealthcheckGetArgs;
import io.pulumi.docker.inputs.ContainerHostGetArgs;
import io.pulumi.docker.inputs.ContainerLabelGetArgs;
import io.pulumi.docker.inputs.ContainerMountGetArgs;
import io.pulumi.docker.inputs.ContainerNetworkDataGetArgs;
import io.pulumi.docker.inputs.ContainerNetworksAdvancedGetArgs;
import io.pulumi.docker.inputs.ContainerPortGetArgs;
import io.pulumi.docker.inputs.ContainerUlimitGetArgs;
import io.pulumi.docker.inputs.ContainerUploadGetArgs;
import io.pulumi.docker.inputs.ContainerVolumeGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ContainerState extends io.pulumi.resources.ResourceArgs {

    public static final ContainerState Empty = new ContainerState();

    /**
     * If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
     * 
     */
    @InputImport(name="attach")
      private final @Nullable Input<Boolean> attach;

    public Input<Boolean> getAttach() {
        return this.attach == null ? Input.empty() : this.attach;
    }

    /**
     * The network bridge of the container as read from its NetworkSettings.
     * 
     */
    @InputImport(name="bridge")
      private final @Nullable Input<String> bridge;

    public Input<String> getBridge() {
        return this.bridge == null ? Input.empty() : this.bridge;
    }

    /**
     * Add or drop certrain linux capabilities.
     * 
     */
    @InputImport(name="capabilities")
      private final @Nullable Input<ContainerCapabilitiesGetArgs> capabilities;

    public Input<ContainerCapabilitiesGetArgs> getCapabilities() {
        return this.capabilities == null ? Input.empty() : this.capabilities;
    }

    /**
     * The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be
     * `["/usr/bin/myprogram","-","baz.con"]`.
     * 
     */
    @InputImport(name="command")
      private final @Nullable Input<List<String>> command;

    public Input<List<String>> getCommand() {
        return this.command == null ? Input.empty() : this.command;
    }

    /**
     * The logs of the container if its execution is done (`attach` must be disabled).
     * 
     */
    @InputImport(name="containerLogs")
      private final @Nullable Input<String> containerLogs;

    public Input<String> getContainerLogs() {
        return this.containerLogs == null ? Input.empty() : this.containerLogs;
    }

    /**
     * A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
     * 
     */
    @InputImport(name="cpuSet")
      private final @Nullable Input<String> cpuSet;

    public Input<String> getCpuSet() {
        return this.cpuSet == null ? Input.empty() : this.cpuSet;
    }

    /**
     * CPU shares (relative weight) for the container.
     * 
     */
    @InputImport(name="cpuShares")
      private final @Nullable Input<Integer> cpuShares;

    public Input<Integer> getCpuShares() {
        return this.cpuShares == null ? Input.empty() : this.cpuShares;
    }

    /**
     * If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on
     * successful stop.
     * 
     */
    @InputImport(name="destroyGraceSeconds")
      private final @Nullable Input<Integer> destroyGraceSeconds;

    public Input<Integer> getDestroyGraceSeconds() {
        return this.destroyGraceSeconds == null ? Input.empty() : this.destroyGraceSeconds;
    }

    /**
     * Bind devices to the container.
     * 
     */
    @InputImport(name="devices")
      private final @Nullable Input<List<ContainerDeviceGetArgs>> devices;

    public Input<List<ContainerDeviceGetArgs>> getDevices() {
        return this.devices == null ? Input.empty() : this.devices;
    }

    /**
     * DNS servers to use.
     * 
     */
    @InputImport(name="dns")
      private final @Nullable Input<List<String>> dns;

    public Input<List<String>> getDns() {
        return this.dns == null ? Input.empty() : this.dns;
    }

    /**
     * DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
     * 
     */
    @InputImport(name="dnsOpts")
      private final @Nullable Input<List<String>> dnsOpts;

    public Input<List<String>> getDnsOpts() {
        return this.dnsOpts == null ? Input.empty() : this.dnsOpts;
    }

    /**
     * DNS search domains that are used when bare unqualified hostnames are used inside of the container.
     * 
     */
    @InputImport(name="dnsSearches")
      private final @Nullable Input<List<String>> dnsSearches;

    public Input<List<String>> getDnsSearches() {
        return this.dnsSearches == null ? Input.empty() : this.dnsSearches;
    }

    /**
     * Domain name of the container.
     * 
     */
    @InputImport(name="domainname")
      private final @Nullable Input<String> domainname;

    public Input<String> getDomainname() {
        return this.domainname == null ? Input.empty() : this.domainname;
    }

    /**
     * The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an
     * executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be
     * `"/usr/bin/myprogra"]`.
     * 
     */
    @InputImport(name="entrypoints")
      private final @Nullable Input<List<String>> entrypoints;

    public Input<List<String>> getEntrypoints() {
        return this.entrypoints == null ? Input.empty() : this.entrypoints;
    }

    /**
     * Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     * 
     */
    @InputImport(name="envs")
      private final @Nullable Input<List<String>> envs;

    public Input<List<String>> getEnvs() {
        return this.envs == null ? Input.empty() : this.envs;
    }

    /**
     * The exit code of the container if its execution is done (`must_run` must be disabled).
     * 
     */
    @InputImport(name="exitCode")
      private final @Nullable Input<Integer> exitCode;

    public Input<Integer> getExitCode() {
        return this.exitCode == null ? Input.empty() : this.exitCode;
    }

    /**
     * The network gateway of the container.
     * 
     * @deprecated
     * Use `network_data` instead. The network gateway of the container as read from its NetworkSettings.
     * 
     */
    @Deprecated /* Use `network_data` instead. The network gateway of the container as read from its NetworkSettings. */
    @InputImport(name="gateway")
      private final @Nullable Input<String> gateway;

    @Deprecated /* Use `network_data` instead. The network gateway of the container as read from its NetworkSettings. */
    public Input<String> getGateway() {
        return this.gateway == null ? Input.empty() : this.gateway;
    }

    /**
     * Additional groups for the container user
     * 
     */
    @InputImport(name="groupAdds")
      private final @Nullable Input<List<String>> groupAdds;

    public Input<List<String>> getGroupAdds() {
        return this.groupAdds == null ? Input.empty() : this.groupAdds;
    }

    /**
     * A test to perform to check that the container is healthy
     * 
     */
    @InputImport(name="healthcheck")
      private final @Nullable Input<ContainerHealthcheckGetArgs> healthcheck;

    public Input<ContainerHealthcheckGetArgs> getHealthcheck() {
        return this.healthcheck == null ? Input.empty() : this.healthcheck;
    }

    /**
     * Hostname of the container.
     * 
     */
    @InputImport(name="hostname")
      private final @Nullable Input<String> hostname;

    public Input<String> getHostname() {
        return this.hostname == null ? Input.empty() : this.hostname;
    }

    /**
     * Additional hosts to add to the container.
     * 
     */
    @InputImport(name="hosts")
      private final @Nullable Input<List<ContainerHostGetArgs>> hosts;

    public Input<List<ContainerHostGetArgs>> getHosts() {
        return this.hosts == null ? Input.empty() : this.hosts;
    }

    /**
     * The ID of the image to back this container. The easiest way to get this value is to use the `docker_image` resource as
     * is shown in the example.
     * 
     */
    @InputImport(name="image")
      private final @Nullable Input<String> image;

    public Input<String> getImage() {
        return this.image == null ? Input.empty() : this.image;
    }

    /**
     * Configured whether an init process should be injected for this container. If unset this will default to the `dockerd`
     * defaults.
     * 
     */
    @InputImport(name="init")
      private final @Nullable Input<Boolean> init;

    public Input<Boolean> getInit() {
        return this.init == null ? Input.empty() : this.init;
    }

    /**
     * The IP address of the container.
     * 
     * @deprecated
     * Use `network_data` instead. The IP address of the container's first network it.
     * 
     */
    @Deprecated /* Use `network_data` instead. The IP address of the container's first network it. */
    @InputImport(name="ipAddress")
      private final @Nullable Input<String> ipAddress;

    @Deprecated /* Use `network_data` instead. The IP address of the container's first network it. */
    public Input<String> getIpAddress() {
        return this.ipAddress == null ? Input.empty() : this.ipAddress;
    }

    /**
     * The IP prefix length of the container.
     * 
     * @deprecated
     * Use `network_data` instead. The IP prefix length of the container as read from its NetworkSettings.
     * 
     */
    @Deprecated /* Use `network_data` instead. The IP prefix length of the container as read from its NetworkSettings. */
    @InputImport(name="ipPrefixLength")
      private final @Nullable Input<Integer> ipPrefixLength;

    @Deprecated /* Use `network_data` instead. The IP prefix length of the container as read from its NetworkSettings. */
    public Input<Integer> getIpPrefixLength() {
        return this.ipPrefixLength == null ? Input.empty() : this.ipPrefixLength;
    }

    /**
     * IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or
     * `host`.
     * 
     */
    @InputImport(name="ipcMode")
      private final @Nullable Input<String> ipcMode;

    public Input<String> getIpcMode() {
        return this.ipcMode == null ? Input.empty() : this.ipcMode;
    }

    /**
     * User-defined key/value metadata
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<List<ContainerLabelGetArgs>> labels;

    public Input<List<ContainerLabelGetArgs>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * Set of links for link based connectivity between containers that are running on the same host.
     * 
     * @deprecated
     * The --link flag is a legacy feature of Docker. It may eventually be removed.
     * 
     */
    @Deprecated /* The --link flag is a legacy feature of Docker. It may eventually be removed. */
    @InputImport(name="links")
      private final @Nullable Input<List<String>> links;

    @Deprecated /* The --link flag is a legacy feature of Docker. It may eventually be removed. */
    public Input<List<String>> getLinks() {
        return this.links == null ? Input.empty() : this.links;
    }

    /**
     * The logging driver to use for the container. Defaults to `json-file`.
     * 
     */
    @InputImport(name="logDriver")
      private final @Nullable Input<String> logDriver;

    public Input<String> getLogDriver() {
        return this.logDriver == null ? Input.empty() : this.logDriver;
    }

    /**
     * Key/value pairs to use as options for the logging driver.
     * 
     */
    @InputImport(name="logOpts")
      private final @Nullable Input<Map<String,Object>> logOpts;

    public Input<Map<String,Object>> getLogOpts() {
        return this.logOpts == null ? Input.empty() : this.logOpts;
    }

    /**
     * Save the container logs (`attach` must be enabled). Defaults to `false`.
     * 
     */
    @InputImport(name="logs")
      private final @Nullable Input<Boolean> logs;

    public Input<Boolean> getLogs() {
        return this.logs == null ? Input.empty() : this.logs;
    }

    /**
     * The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
     * 
     */
    @InputImport(name="maxRetryCount")
      private final @Nullable Input<Integer> maxRetryCount;

    public Input<Integer> getMaxRetryCount() {
        return this.maxRetryCount == null ? Input.empty() : this.maxRetryCount;
    }

    /**
     * The memory limit for the container in MBs.
     * 
     */
    @InputImport(name="memory")
      private final @Nullable Input<Integer> memory;

    public Input<Integer> getMemory() {
        return this.memory == null ? Input.empty() : this.memory;
    }

    /**
     * The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `terraform
     * apply` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
     * 
     */
    @InputImport(name="memorySwap")
      private final @Nullable Input<Integer> memorySwap;

    public Input<Integer> getMemorySwap() {
        return this.memorySwap == null ? Input.empty() : this.memorySwap;
    }

    /**
     * Specification for mounts to be added to containers created as part of the service.
     * 
     */
    @InputImport(name="mounts")
      private final @Nullable Input<List<ContainerMountGetArgs>> mounts;

    public Input<List<ContainerMountGetArgs>> getMounts() {
        return this.mounts == null ? Input.empty() : this.mounts;
    }

    /**
     * If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
     * assumes it is successful. Defaults to `true`.
     * 
     */
    @InputImport(name="mustRun")
      private final @Nullable Input<Boolean> mustRun;

    public Input<Boolean> getMustRun() {
        return this.mustRun == null ? Input.empty() : this.mustRun;
    }

    /**
     * The name of the container.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Set an alias for the container in all specified networks
     * 
     * @deprecated
     * Use networks_advanced instead. Will be removed in v3.0.0
     * 
     */
    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    @InputImport(name="networkAliases")
      private final @Nullable Input<List<String>> networkAliases;

    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    public Input<List<String>> getNetworkAliases() {
        return this.networkAliases == null ? Input.empty() : this.networkAliases;
    }

    /**
     * The data of the networks the container is connected to.
     * 
     */
    @InputImport(name="networkDatas")
      private final @Nullable Input<List<ContainerNetworkDataGetArgs>> networkDatas;

    public Input<List<ContainerNetworkDataGetArgs>> getNetworkDatas() {
        return this.networkDatas == null ? Input.empty() : this.networkDatas;
    }

    /**
     * Network mode of the container.
     * 
     */
    @InputImport(name="networkMode")
      private final @Nullable Input<String> networkMode;

    public Input<String> getNetworkMode() {
        return this.networkMode == null ? Input.empty() : this.networkMode;
    }

    /**
     * ID of the networks in which the container is.
     * 
     * @deprecated
     * Use networks_advanced instead. Will be removed in v3.0.0
     * 
     */
    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    @InputImport(name="networks")
      private final @Nullable Input<List<String>> networks;

    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    public Input<List<String>> getNetworks() {
        return this.networks == null ? Input.empty() : this.networks;
    }

    /**
     * The networks the container is attached to
     * 
     */
    @InputImport(name="networksAdvanced")
      private final @Nullable Input<List<ContainerNetworksAdvancedGetArgs>> networksAdvanced;

    public Input<List<ContainerNetworksAdvancedGetArgs>> getNetworksAdvanced() {
        return this.networksAdvanced == null ? Input.empty() : this.networksAdvanced;
    }

    /**
     * he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
     * 
     */
    @InputImport(name="pidMode")
      private final @Nullable Input<String> pidMode;

    public Input<String> getPidMode() {
        return this.pidMode == null ? Input.empty() : this.pidMode;
    }

    /**
     * Publish a container's port(s) to the host.
     * 
     */
    @InputImport(name="ports")
      private final @Nullable Input<List<ContainerPortGetArgs>> ports;

    public Input<List<ContainerPortGetArgs>> getPorts() {
        return this.ports == null ? Input.empty() : this.ports;
    }

    /**
     * If `true`, the container runs in privileged mode.
     * 
     */
    @InputImport(name="privileged")
      private final @Nullable Input<Boolean> privileged;

    public Input<Boolean> getPrivileged() {
        return this.privileged == null ? Input.empty() : this.privileged;
    }

    /**
     * Publish all ports of the container.
     * 
     */
    @InputImport(name="publishAllPorts")
      private final @Nullable Input<Boolean> publishAllPorts;

    public Input<Boolean> getPublishAllPorts() {
        return this.publishAllPorts == null ? Input.empty() : this.publishAllPorts;
    }

    /**
     * If `true`, the container will be started as readonly. Defaults to `false`.
     * 
     */
    @InputImport(name="readOnly")
      private final @Nullable Input<Boolean> readOnly;

    public Input<Boolean> getReadOnly() {
        return this.readOnly == null ? Input.empty() : this.readOnly;
    }

    /**
     * If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
     * 
     */
    @InputImport(name="removeVolumes")
      private final @Nullable Input<Boolean> removeVolumes;

    public Input<Boolean> getRemoveVolumes() {
        return this.removeVolumes == null ? Input.empty() : this.removeVolumes;
    }

    /**
     * The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
     * 
     */
    @InputImport(name="restart")
      private final @Nullable Input<String> restart;

    public Input<String> getRestart() {
        return this.restart == null ? Input.empty() : this.restart;
    }

    /**
     * If `true`, then the container will be automatically removed after his execution. Terraform won't check this container
     * after creation. Defaults to `false`.
     * 
     */
    @InputImport(name="rm")
      private final @Nullable Input<Boolean> rm;

    public Input<Boolean> getRm() {
        return this.rm == null ? Input.empty() : this.rm;
    }

    /**
     * List of string values to customize labels for MLS systems, such as SELinux. See
     * https://docs.docker.com/engine/reference/run/#security-configuration.
     * 
     */
    @InputImport(name="securityOpts")
      private final @Nullable Input<List<String>> securityOpts;

    public Input<List<String>> getSecurityOpts() {
        return this.securityOpts == null ? Input.empty() : this.securityOpts;
    }

    /**
     * Size of `/dev/shm` in MBs.
     * 
     */
    @InputImport(name="shmSize")
      private final @Nullable Input<Integer> shmSize;

    public Input<Integer> getShmSize() {
        return this.shmSize == null ? Input.empty() : this.shmSize;
    }

    /**
     * If `true`, then the Docker container will be started after creation. If `false`, then the container is only created.
     * Defaults to `true`.
     * 
     */
    @InputImport(name="start")
      private final @Nullable Input<Boolean> start;

    public Input<Boolean> getStart() {
        return this.start == null ? Input.empty() : this.start;
    }

    /**
     * If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
     * 
     */
    @InputImport(name="stdinOpen")
      private final @Nullable Input<Boolean> stdinOpen;

    public Input<Boolean> getStdinOpen() {
        return this.stdinOpen == null ? Input.empty() : this.stdinOpen;
    }

    /**
     * Key/value pairs for the storage driver options, e.g. `size`: `120G`
     * 
     */
    @InputImport(name="storageOpts")
      private final @Nullable Input<Map<String,Object>> storageOpts;

    public Input<Map<String,Object>> getStorageOpts() {
        return this.storageOpts == null ? Input.empty() : this.storageOpts;
    }

    /**
     * A map of kernel parameters (sysctls) to set in the container.
     * 
     */
    @InputImport(name="sysctls")
      private final @Nullable Input<Map<String,Object>> sysctls;

    public Input<Map<String,Object>> getSysctls() {
        return this.sysctls == null ? Input.empty() : this.sysctls;
    }

    /**
     * A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
     * 
     */
    @InputImport(name="tmpfs")
      private final @Nullable Input<Map<String,Object>> tmpfs;

    public Input<Map<String,Object>> getTmpfs() {
        return this.tmpfs == null ? Input.empty() : this.tmpfs;
    }

    /**
     * If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
     * 
     */
    @InputImport(name="tty")
      private final @Nullable Input<Boolean> tty;

    public Input<Boolean> getTty() {
        return this.tty == null ? Input.empty() : this.tty;
    }

    /**
     * Ulimit options to add.
     * 
     */
    @InputImport(name="ulimits")
      private final @Nullable Input<List<ContainerUlimitGetArgs>> ulimits;

    public Input<List<ContainerUlimitGetArgs>> getUlimits() {
        return this.ulimits == null ? Input.empty() : this.ulimits;
    }

    /**
     * Specifies files to upload to the container before starting it. Only one of `content` or `content_base64` can be set and
     * at least one of them has to be set.
     * 
     */
    @InputImport(name="uploads")
      private final @Nullable Input<List<ContainerUploadGetArgs>> uploads;

    public Input<List<ContainerUploadGetArgs>> getUploads() {
        return this.uploads == null ? Input.empty() : this.uploads;
    }

    /**
     * User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by
     * name.
     * 
     */
    @InputImport(name="user")
      private final @Nullable Input<String> user;

    public Input<String> getUser() {
        return this.user == null ? Input.empty() : this.user;
    }

    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     * 
     */
    @InputImport(name="usernsMode")
      private final @Nullable Input<String> usernsMode;

    public Input<String> getUsernsMode() {
        return this.usernsMode == null ? Input.empty() : this.usernsMode;
    }

    /**
     * Spec for mounting volumes in the container.
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Input<List<ContainerVolumeGetArgs>> volumes;

    public Input<List<ContainerVolumeGetArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    /**
     * The working directory for commands to run in.
     * 
     */
    @InputImport(name="workingDir")
      private final @Nullable Input<String> workingDir;

    public Input<String> getWorkingDir() {
        return this.workingDir == null ? Input.empty() : this.workingDir;
    }

    public ContainerState(
        @Nullable Input<Boolean> attach,
        @Nullable Input<String> bridge,
        @Nullable Input<ContainerCapabilitiesGetArgs> capabilities,
        @Nullable Input<List<String>> command,
        @Nullable Input<String> containerLogs,
        @Nullable Input<String> cpuSet,
        @Nullable Input<Integer> cpuShares,
        @Nullable Input<Integer> destroyGraceSeconds,
        @Nullable Input<List<ContainerDeviceGetArgs>> devices,
        @Nullable Input<List<String>> dns,
        @Nullable Input<List<String>> dnsOpts,
        @Nullable Input<List<String>> dnsSearches,
        @Nullable Input<String> domainname,
        @Nullable Input<List<String>> entrypoints,
        @Nullable Input<List<String>> envs,
        @Nullable Input<Integer> exitCode,
        @Nullable Input<String> gateway,
        @Nullable Input<List<String>> groupAdds,
        @Nullable Input<ContainerHealthcheckGetArgs> healthcheck,
        @Nullable Input<String> hostname,
        @Nullable Input<List<ContainerHostGetArgs>> hosts,
        @Nullable Input<String> image,
        @Nullable Input<Boolean> init,
        @Nullable Input<String> ipAddress,
        @Nullable Input<Integer> ipPrefixLength,
        @Nullable Input<String> ipcMode,
        @Nullable Input<List<ContainerLabelGetArgs>> labels,
        @Nullable Input<List<String>> links,
        @Nullable Input<String> logDriver,
        @Nullable Input<Map<String,Object>> logOpts,
        @Nullable Input<Boolean> logs,
        @Nullable Input<Integer> maxRetryCount,
        @Nullable Input<Integer> memory,
        @Nullable Input<Integer> memorySwap,
        @Nullable Input<List<ContainerMountGetArgs>> mounts,
        @Nullable Input<Boolean> mustRun,
        @Nullable Input<String> name,
        @Nullable Input<List<String>> networkAliases,
        @Nullable Input<List<ContainerNetworkDataGetArgs>> networkDatas,
        @Nullable Input<String> networkMode,
        @Nullable Input<List<String>> networks,
        @Nullable Input<List<ContainerNetworksAdvancedGetArgs>> networksAdvanced,
        @Nullable Input<String> pidMode,
        @Nullable Input<List<ContainerPortGetArgs>> ports,
        @Nullable Input<Boolean> privileged,
        @Nullable Input<Boolean> publishAllPorts,
        @Nullable Input<Boolean> readOnly,
        @Nullable Input<Boolean> removeVolumes,
        @Nullable Input<String> restart,
        @Nullable Input<Boolean> rm,
        @Nullable Input<List<String>> securityOpts,
        @Nullable Input<Integer> shmSize,
        @Nullable Input<Boolean> start,
        @Nullable Input<Boolean> stdinOpen,
        @Nullable Input<Map<String,Object>> storageOpts,
        @Nullable Input<Map<String,Object>> sysctls,
        @Nullable Input<Map<String,Object>> tmpfs,
        @Nullable Input<Boolean> tty,
        @Nullable Input<List<ContainerUlimitGetArgs>> ulimits,
        @Nullable Input<List<ContainerUploadGetArgs>> uploads,
        @Nullable Input<String> user,
        @Nullable Input<String> usernsMode,
        @Nullable Input<List<ContainerVolumeGetArgs>> volumes,
        @Nullable Input<String> workingDir) {
        this.attach = attach;
        this.bridge = bridge;
        this.capabilities = capabilities;
        this.command = command;
        this.containerLogs = containerLogs;
        this.cpuSet = cpuSet;
        this.cpuShares = cpuShares;
        this.destroyGraceSeconds = destroyGraceSeconds;
        this.devices = devices;
        this.dns = dns;
        this.dnsOpts = dnsOpts;
        this.dnsSearches = dnsSearches;
        this.domainname = domainname;
        this.entrypoints = entrypoints;
        this.envs = envs;
        this.exitCode = exitCode;
        this.gateway = gateway;
        this.groupAdds = groupAdds;
        this.healthcheck = healthcheck;
        this.hostname = hostname;
        this.hosts = hosts;
        this.image = image;
        this.init = init;
        this.ipAddress = ipAddress;
        this.ipPrefixLength = ipPrefixLength;
        this.ipcMode = ipcMode;
        this.labels = labels;
        this.links = links;
        this.logDriver = logDriver;
        this.logOpts = logOpts;
        this.logs = logs;
        this.maxRetryCount = maxRetryCount;
        this.memory = memory;
        this.memorySwap = memorySwap;
        this.mounts = mounts;
        this.mustRun = mustRun;
        this.name = name;
        this.networkAliases = networkAliases;
        this.networkDatas = networkDatas;
        this.networkMode = networkMode;
        this.networks = networks;
        this.networksAdvanced = networksAdvanced;
        this.pidMode = pidMode;
        this.ports = ports;
        this.privileged = privileged;
        this.publishAllPorts = publishAllPorts;
        this.readOnly = readOnly;
        this.removeVolumes = removeVolumes;
        this.restart = restart;
        this.rm = rm;
        this.securityOpts = securityOpts;
        this.shmSize = shmSize;
        this.start = start;
        this.stdinOpen = stdinOpen;
        this.storageOpts = storageOpts;
        this.sysctls = sysctls;
        this.tmpfs = tmpfs;
        this.tty = tty;
        this.ulimits = ulimits;
        this.uploads = uploads;
        this.user = user;
        this.usernsMode = usernsMode;
        this.volumes = volumes;
        this.workingDir = workingDir;
    }

    private ContainerState() {
        this.attach = Input.empty();
        this.bridge = Input.empty();
        this.capabilities = Input.empty();
        this.command = Input.empty();
        this.containerLogs = Input.empty();
        this.cpuSet = Input.empty();
        this.cpuShares = Input.empty();
        this.destroyGraceSeconds = Input.empty();
        this.devices = Input.empty();
        this.dns = Input.empty();
        this.dnsOpts = Input.empty();
        this.dnsSearches = Input.empty();
        this.domainname = Input.empty();
        this.entrypoints = Input.empty();
        this.envs = Input.empty();
        this.exitCode = Input.empty();
        this.gateway = Input.empty();
        this.groupAdds = Input.empty();
        this.healthcheck = Input.empty();
        this.hostname = Input.empty();
        this.hosts = Input.empty();
        this.image = Input.empty();
        this.init = Input.empty();
        this.ipAddress = Input.empty();
        this.ipPrefixLength = Input.empty();
        this.ipcMode = Input.empty();
        this.labels = Input.empty();
        this.links = Input.empty();
        this.logDriver = Input.empty();
        this.logOpts = Input.empty();
        this.logs = Input.empty();
        this.maxRetryCount = Input.empty();
        this.memory = Input.empty();
        this.memorySwap = Input.empty();
        this.mounts = Input.empty();
        this.mustRun = Input.empty();
        this.name = Input.empty();
        this.networkAliases = Input.empty();
        this.networkDatas = Input.empty();
        this.networkMode = Input.empty();
        this.networks = Input.empty();
        this.networksAdvanced = Input.empty();
        this.pidMode = Input.empty();
        this.ports = Input.empty();
        this.privileged = Input.empty();
        this.publishAllPorts = Input.empty();
        this.readOnly = Input.empty();
        this.removeVolumes = Input.empty();
        this.restart = Input.empty();
        this.rm = Input.empty();
        this.securityOpts = Input.empty();
        this.shmSize = Input.empty();
        this.start = Input.empty();
        this.stdinOpen = Input.empty();
        this.storageOpts = Input.empty();
        this.sysctls = Input.empty();
        this.tmpfs = Input.empty();
        this.tty = Input.empty();
        this.ulimits = Input.empty();
        this.uploads = Input.empty();
        this.user = Input.empty();
        this.usernsMode = Input.empty();
        this.volumes = Input.empty();
        this.workingDir = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> attach;
        private @Nullable Input<String> bridge;
        private @Nullable Input<ContainerCapabilitiesGetArgs> capabilities;
        private @Nullable Input<List<String>> command;
        private @Nullable Input<String> containerLogs;
        private @Nullable Input<String> cpuSet;
        private @Nullable Input<Integer> cpuShares;
        private @Nullable Input<Integer> destroyGraceSeconds;
        private @Nullable Input<List<ContainerDeviceGetArgs>> devices;
        private @Nullable Input<List<String>> dns;
        private @Nullable Input<List<String>> dnsOpts;
        private @Nullable Input<List<String>> dnsSearches;
        private @Nullable Input<String> domainname;
        private @Nullable Input<List<String>> entrypoints;
        private @Nullable Input<List<String>> envs;
        private @Nullable Input<Integer> exitCode;
        private @Nullable Input<String> gateway;
        private @Nullable Input<List<String>> groupAdds;
        private @Nullable Input<ContainerHealthcheckGetArgs> healthcheck;
        private @Nullable Input<String> hostname;
        private @Nullable Input<List<ContainerHostGetArgs>> hosts;
        private @Nullable Input<String> image;
        private @Nullable Input<Boolean> init;
        private @Nullable Input<String> ipAddress;
        private @Nullable Input<Integer> ipPrefixLength;
        private @Nullable Input<String> ipcMode;
        private @Nullable Input<List<ContainerLabelGetArgs>> labels;
        private @Nullable Input<List<String>> links;
        private @Nullable Input<String> logDriver;
        private @Nullable Input<Map<String,Object>> logOpts;
        private @Nullable Input<Boolean> logs;
        private @Nullable Input<Integer> maxRetryCount;
        private @Nullable Input<Integer> memory;
        private @Nullable Input<Integer> memorySwap;
        private @Nullable Input<List<ContainerMountGetArgs>> mounts;
        private @Nullable Input<Boolean> mustRun;
        private @Nullable Input<String> name;
        private @Nullable Input<List<String>> networkAliases;
        private @Nullable Input<List<ContainerNetworkDataGetArgs>> networkDatas;
        private @Nullable Input<String> networkMode;
        private @Nullable Input<List<String>> networks;
        private @Nullable Input<List<ContainerNetworksAdvancedGetArgs>> networksAdvanced;
        private @Nullable Input<String> pidMode;
        private @Nullable Input<List<ContainerPortGetArgs>> ports;
        private @Nullable Input<Boolean> privileged;
        private @Nullable Input<Boolean> publishAllPorts;
        private @Nullable Input<Boolean> readOnly;
        private @Nullable Input<Boolean> removeVolumes;
        private @Nullable Input<String> restart;
        private @Nullable Input<Boolean> rm;
        private @Nullable Input<List<String>> securityOpts;
        private @Nullable Input<Integer> shmSize;
        private @Nullable Input<Boolean> start;
        private @Nullable Input<Boolean> stdinOpen;
        private @Nullable Input<Map<String,Object>> storageOpts;
        private @Nullable Input<Map<String,Object>> sysctls;
        private @Nullable Input<Map<String,Object>> tmpfs;
        private @Nullable Input<Boolean> tty;
        private @Nullable Input<List<ContainerUlimitGetArgs>> ulimits;
        private @Nullable Input<List<ContainerUploadGetArgs>> uploads;
        private @Nullable Input<String> user;
        private @Nullable Input<String> usernsMode;
        private @Nullable Input<List<ContainerVolumeGetArgs>> volumes;
        private @Nullable Input<String> workingDir;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attach = defaults.attach;
    	      this.bridge = defaults.bridge;
    	      this.capabilities = defaults.capabilities;
    	      this.command = defaults.command;
    	      this.containerLogs = defaults.containerLogs;
    	      this.cpuSet = defaults.cpuSet;
    	      this.cpuShares = defaults.cpuShares;
    	      this.destroyGraceSeconds = defaults.destroyGraceSeconds;
    	      this.devices = defaults.devices;
    	      this.dns = defaults.dns;
    	      this.dnsOpts = defaults.dnsOpts;
    	      this.dnsSearches = defaults.dnsSearches;
    	      this.domainname = defaults.domainname;
    	      this.entrypoints = defaults.entrypoints;
    	      this.envs = defaults.envs;
    	      this.exitCode = defaults.exitCode;
    	      this.gateway = defaults.gateway;
    	      this.groupAdds = defaults.groupAdds;
    	      this.healthcheck = defaults.healthcheck;
    	      this.hostname = defaults.hostname;
    	      this.hosts = defaults.hosts;
    	      this.image = defaults.image;
    	      this.init = defaults.init;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipPrefixLength = defaults.ipPrefixLength;
    	      this.ipcMode = defaults.ipcMode;
    	      this.labels = defaults.labels;
    	      this.links = defaults.links;
    	      this.logDriver = defaults.logDriver;
    	      this.logOpts = defaults.logOpts;
    	      this.logs = defaults.logs;
    	      this.maxRetryCount = defaults.maxRetryCount;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.mounts = defaults.mounts;
    	      this.mustRun = defaults.mustRun;
    	      this.name = defaults.name;
    	      this.networkAliases = defaults.networkAliases;
    	      this.networkDatas = defaults.networkDatas;
    	      this.networkMode = defaults.networkMode;
    	      this.networks = defaults.networks;
    	      this.networksAdvanced = defaults.networksAdvanced;
    	      this.pidMode = defaults.pidMode;
    	      this.ports = defaults.ports;
    	      this.privileged = defaults.privileged;
    	      this.publishAllPorts = defaults.publishAllPorts;
    	      this.readOnly = defaults.readOnly;
    	      this.removeVolumes = defaults.removeVolumes;
    	      this.restart = defaults.restart;
    	      this.rm = defaults.rm;
    	      this.securityOpts = defaults.securityOpts;
    	      this.shmSize = defaults.shmSize;
    	      this.start = defaults.start;
    	      this.stdinOpen = defaults.stdinOpen;
    	      this.storageOpts = defaults.storageOpts;
    	      this.sysctls = defaults.sysctls;
    	      this.tmpfs = defaults.tmpfs;
    	      this.tty = defaults.tty;
    	      this.ulimits = defaults.ulimits;
    	      this.uploads = defaults.uploads;
    	      this.user = defaults.user;
    	      this.usernsMode = defaults.usernsMode;
    	      this.volumes = defaults.volumes;
    	      this.workingDir = defaults.workingDir;
        }

        public Builder setAttach(@Nullable Input<Boolean> attach) {
            this.attach = attach;
            return this;
        }

        public Builder setAttach(@Nullable Boolean attach) {
            this.attach = Input.ofNullable(attach);
            return this;
        }

        public Builder setBridge(@Nullable Input<String> bridge) {
            this.bridge = bridge;
            return this;
        }

        public Builder setBridge(@Nullable String bridge) {
            this.bridge = Input.ofNullable(bridge);
            return this;
        }

        public Builder setCapabilities(@Nullable Input<ContainerCapabilitiesGetArgs> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder setCapabilities(@Nullable ContainerCapabilitiesGetArgs capabilities) {
            this.capabilities = Input.ofNullable(capabilities);
            return this;
        }

        public Builder setCommand(@Nullable Input<List<String>> command) {
            this.command = command;
            return this;
        }

        public Builder setCommand(@Nullable List<String> command) {
            this.command = Input.ofNullable(command);
            return this;
        }

        public Builder setContainerLogs(@Nullable Input<String> containerLogs) {
            this.containerLogs = containerLogs;
            return this;
        }

        public Builder setContainerLogs(@Nullable String containerLogs) {
            this.containerLogs = Input.ofNullable(containerLogs);
            return this;
        }

        public Builder setCpuSet(@Nullable Input<String> cpuSet) {
            this.cpuSet = cpuSet;
            return this;
        }

        public Builder setCpuSet(@Nullable String cpuSet) {
            this.cpuSet = Input.ofNullable(cpuSet);
            return this;
        }

        public Builder setCpuShares(@Nullable Input<Integer> cpuShares) {
            this.cpuShares = cpuShares;
            return this;
        }

        public Builder setCpuShares(@Nullable Integer cpuShares) {
            this.cpuShares = Input.ofNullable(cpuShares);
            return this;
        }

        public Builder setDestroyGraceSeconds(@Nullable Input<Integer> destroyGraceSeconds) {
            this.destroyGraceSeconds = destroyGraceSeconds;
            return this;
        }

        public Builder setDestroyGraceSeconds(@Nullable Integer destroyGraceSeconds) {
            this.destroyGraceSeconds = Input.ofNullable(destroyGraceSeconds);
            return this;
        }

        public Builder setDevices(@Nullable Input<List<ContainerDeviceGetArgs>> devices) {
            this.devices = devices;
            return this;
        }

        public Builder setDevices(@Nullable List<ContainerDeviceGetArgs> devices) {
            this.devices = Input.ofNullable(devices);
            return this;
        }

        public Builder setDns(@Nullable Input<List<String>> dns) {
            this.dns = dns;
            return this;
        }

        public Builder setDns(@Nullable List<String> dns) {
            this.dns = Input.ofNullable(dns);
            return this;
        }

        public Builder setDnsOpts(@Nullable Input<List<String>> dnsOpts) {
            this.dnsOpts = dnsOpts;
            return this;
        }

        public Builder setDnsOpts(@Nullable List<String> dnsOpts) {
            this.dnsOpts = Input.ofNullable(dnsOpts);
            return this;
        }

        public Builder setDnsSearches(@Nullable Input<List<String>> dnsSearches) {
            this.dnsSearches = dnsSearches;
            return this;
        }

        public Builder setDnsSearches(@Nullable List<String> dnsSearches) {
            this.dnsSearches = Input.ofNullable(dnsSearches);
            return this;
        }

        public Builder setDomainname(@Nullable Input<String> domainname) {
            this.domainname = domainname;
            return this;
        }

        public Builder setDomainname(@Nullable String domainname) {
            this.domainname = Input.ofNullable(domainname);
            return this;
        }

        public Builder setEntrypoints(@Nullable Input<List<String>> entrypoints) {
            this.entrypoints = entrypoints;
            return this;
        }

        public Builder setEntrypoints(@Nullable List<String> entrypoints) {
            this.entrypoints = Input.ofNullable(entrypoints);
            return this;
        }

        public Builder setEnvs(@Nullable Input<List<String>> envs) {
            this.envs = envs;
            return this;
        }

        public Builder setEnvs(@Nullable List<String> envs) {
            this.envs = Input.ofNullable(envs);
            return this;
        }

        public Builder setExitCode(@Nullable Input<Integer> exitCode) {
            this.exitCode = exitCode;
            return this;
        }

        public Builder setExitCode(@Nullable Integer exitCode) {
            this.exitCode = Input.ofNullable(exitCode);
            return this;
        }

        public Builder setGateway(@Nullable Input<String> gateway) {
            this.gateway = gateway;
            return this;
        }

        public Builder setGateway(@Nullable String gateway) {
            this.gateway = Input.ofNullable(gateway);
            return this;
        }

        public Builder setGroupAdds(@Nullable Input<List<String>> groupAdds) {
            this.groupAdds = groupAdds;
            return this;
        }

        public Builder setGroupAdds(@Nullable List<String> groupAdds) {
            this.groupAdds = Input.ofNullable(groupAdds);
            return this;
        }

        public Builder setHealthcheck(@Nullable Input<ContainerHealthcheckGetArgs> healthcheck) {
            this.healthcheck = healthcheck;
            return this;
        }

        public Builder setHealthcheck(@Nullable ContainerHealthcheckGetArgs healthcheck) {
            this.healthcheck = Input.ofNullable(healthcheck);
            return this;
        }

        public Builder setHostname(@Nullable Input<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder setHostname(@Nullable String hostname) {
            this.hostname = Input.ofNullable(hostname);
            return this;
        }

        public Builder setHosts(@Nullable Input<List<ContainerHostGetArgs>> hosts) {
            this.hosts = hosts;
            return this;
        }

        public Builder setHosts(@Nullable List<ContainerHostGetArgs> hosts) {
            this.hosts = Input.ofNullable(hosts);
            return this;
        }

        public Builder setImage(@Nullable Input<String> image) {
            this.image = image;
            return this;
        }

        public Builder setImage(@Nullable String image) {
            this.image = Input.ofNullable(image);
            return this;
        }

        public Builder setInit(@Nullable Input<Boolean> init) {
            this.init = init;
            return this;
        }

        public Builder setInit(@Nullable Boolean init) {
            this.init = Input.ofNullable(init);
            return this;
        }

        public Builder setIpAddress(@Nullable Input<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder setIpAddress(@Nullable String ipAddress) {
            this.ipAddress = Input.ofNullable(ipAddress);
            return this;
        }

        public Builder setIpPrefixLength(@Nullable Input<Integer> ipPrefixLength) {
            this.ipPrefixLength = ipPrefixLength;
            return this;
        }

        public Builder setIpPrefixLength(@Nullable Integer ipPrefixLength) {
            this.ipPrefixLength = Input.ofNullable(ipPrefixLength);
            return this;
        }

        public Builder setIpcMode(@Nullable Input<String> ipcMode) {
            this.ipcMode = ipcMode;
            return this;
        }

        public Builder setIpcMode(@Nullable String ipcMode) {
            this.ipcMode = Input.ofNullable(ipcMode);
            return this;
        }

        public Builder setLabels(@Nullable Input<List<ContainerLabelGetArgs>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable List<ContainerLabelGetArgs> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLinks(@Nullable Input<List<String>> links) {
            this.links = links;
            return this;
        }

        public Builder setLinks(@Nullable List<String> links) {
            this.links = Input.ofNullable(links);
            return this;
        }

        public Builder setLogDriver(@Nullable Input<String> logDriver) {
            this.logDriver = logDriver;
            return this;
        }

        public Builder setLogDriver(@Nullable String logDriver) {
            this.logDriver = Input.ofNullable(logDriver);
            return this;
        }

        public Builder setLogOpts(@Nullable Input<Map<String,Object>> logOpts) {
            this.logOpts = logOpts;
            return this;
        }

        public Builder setLogOpts(@Nullable Map<String,Object> logOpts) {
            this.logOpts = Input.ofNullable(logOpts);
            return this;
        }

        public Builder setLogs(@Nullable Input<Boolean> logs) {
            this.logs = logs;
            return this;
        }

        public Builder setLogs(@Nullable Boolean logs) {
            this.logs = Input.ofNullable(logs);
            return this;
        }

        public Builder setMaxRetryCount(@Nullable Input<Integer> maxRetryCount) {
            this.maxRetryCount = maxRetryCount;
            return this;
        }

        public Builder setMaxRetryCount(@Nullable Integer maxRetryCount) {
            this.maxRetryCount = Input.ofNullable(maxRetryCount);
            return this;
        }

        public Builder setMemory(@Nullable Input<Integer> memory) {
            this.memory = memory;
            return this;
        }

        public Builder setMemory(@Nullable Integer memory) {
            this.memory = Input.ofNullable(memory);
            return this;
        }

        public Builder setMemorySwap(@Nullable Input<Integer> memorySwap) {
            this.memorySwap = memorySwap;
            return this;
        }

        public Builder setMemorySwap(@Nullable Integer memorySwap) {
            this.memorySwap = Input.ofNullable(memorySwap);
            return this;
        }

        public Builder setMounts(@Nullable Input<List<ContainerMountGetArgs>> mounts) {
            this.mounts = mounts;
            return this;
        }

        public Builder setMounts(@Nullable List<ContainerMountGetArgs> mounts) {
            this.mounts = Input.ofNullable(mounts);
            return this;
        }

        public Builder setMustRun(@Nullable Input<Boolean> mustRun) {
            this.mustRun = mustRun;
            return this;
        }

        public Builder setMustRun(@Nullable Boolean mustRun) {
            this.mustRun = Input.ofNullable(mustRun);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNetworkAliases(@Nullable Input<List<String>> networkAliases) {
            this.networkAliases = networkAliases;
            return this;
        }

        public Builder setNetworkAliases(@Nullable List<String> networkAliases) {
            this.networkAliases = Input.ofNullable(networkAliases);
            return this;
        }

        public Builder setNetworkDatas(@Nullable Input<List<ContainerNetworkDataGetArgs>> networkDatas) {
            this.networkDatas = networkDatas;
            return this;
        }

        public Builder setNetworkDatas(@Nullable List<ContainerNetworkDataGetArgs> networkDatas) {
            this.networkDatas = Input.ofNullable(networkDatas);
            return this;
        }

        public Builder setNetworkMode(@Nullable Input<String> networkMode) {
            this.networkMode = networkMode;
            return this;
        }

        public Builder setNetworkMode(@Nullable String networkMode) {
            this.networkMode = Input.ofNullable(networkMode);
            return this;
        }

        public Builder setNetworks(@Nullable Input<List<String>> networks) {
            this.networks = networks;
            return this;
        }

        public Builder setNetworks(@Nullable List<String> networks) {
            this.networks = Input.ofNullable(networks);
            return this;
        }

        public Builder setNetworksAdvanced(@Nullable Input<List<ContainerNetworksAdvancedGetArgs>> networksAdvanced) {
            this.networksAdvanced = networksAdvanced;
            return this;
        }

        public Builder setNetworksAdvanced(@Nullable List<ContainerNetworksAdvancedGetArgs> networksAdvanced) {
            this.networksAdvanced = Input.ofNullable(networksAdvanced);
            return this;
        }

        public Builder setPidMode(@Nullable Input<String> pidMode) {
            this.pidMode = pidMode;
            return this;
        }

        public Builder setPidMode(@Nullable String pidMode) {
            this.pidMode = Input.ofNullable(pidMode);
            return this;
        }

        public Builder setPorts(@Nullable Input<List<ContainerPortGetArgs>> ports) {
            this.ports = ports;
            return this;
        }

        public Builder setPorts(@Nullable List<ContainerPortGetArgs> ports) {
            this.ports = Input.ofNullable(ports);
            return this;
        }

        public Builder setPrivileged(@Nullable Input<Boolean> privileged) {
            this.privileged = privileged;
            return this;
        }

        public Builder setPrivileged(@Nullable Boolean privileged) {
            this.privileged = Input.ofNullable(privileged);
            return this;
        }

        public Builder setPublishAllPorts(@Nullable Input<Boolean> publishAllPorts) {
            this.publishAllPorts = publishAllPorts;
            return this;
        }

        public Builder setPublishAllPorts(@Nullable Boolean publishAllPorts) {
            this.publishAllPorts = Input.ofNullable(publishAllPorts);
            return this;
        }

        public Builder setReadOnly(@Nullable Input<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder setReadOnly(@Nullable Boolean readOnly) {
            this.readOnly = Input.ofNullable(readOnly);
            return this;
        }

        public Builder setRemoveVolumes(@Nullable Input<Boolean> removeVolumes) {
            this.removeVolumes = removeVolumes;
            return this;
        }

        public Builder setRemoveVolumes(@Nullable Boolean removeVolumes) {
            this.removeVolumes = Input.ofNullable(removeVolumes);
            return this;
        }

        public Builder setRestart(@Nullable Input<String> restart) {
            this.restart = restart;
            return this;
        }

        public Builder setRestart(@Nullable String restart) {
            this.restart = Input.ofNullable(restart);
            return this;
        }

        public Builder setRm(@Nullable Input<Boolean> rm) {
            this.rm = rm;
            return this;
        }

        public Builder setRm(@Nullable Boolean rm) {
            this.rm = Input.ofNullable(rm);
            return this;
        }

        public Builder setSecurityOpts(@Nullable Input<List<String>> securityOpts) {
            this.securityOpts = securityOpts;
            return this;
        }

        public Builder setSecurityOpts(@Nullable List<String> securityOpts) {
            this.securityOpts = Input.ofNullable(securityOpts);
            return this;
        }

        public Builder setShmSize(@Nullable Input<Integer> shmSize) {
            this.shmSize = shmSize;
            return this;
        }

        public Builder setShmSize(@Nullable Integer shmSize) {
            this.shmSize = Input.ofNullable(shmSize);
            return this;
        }

        public Builder setStart(@Nullable Input<Boolean> start) {
            this.start = start;
            return this;
        }

        public Builder setStart(@Nullable Boolean start) {
            this.start = Input.ofNullable(start);
            return this;
        }

        public Builder setStdinOpen(@Nullable Input<Boolean> stdinOpen) {
            this.stdinOpen = stdinOpen;
            return this;
        }

        public Builder setStdinOpen(@Nullable Boolean stdinOpen) {
            this.stdinOpen = Input.ofNullable(stdinOpen);
            return this;
        }

        public Builder setStorageOpts(@Nullable Input<Map<String,Object>> storageOpts) {
            this.storageOpts = storageOpts;
            return this;
        }

        public Builder setStorageOpts(@Nullable Map<String,Object> storageOpts) {
            this.storageOpts = Input.ofNullable(storageOpts);
            return this;
        }

        public Builder setSysctls(@Nullable Input<Map<String,Object>> sysctls) {
            this.sysctls = sysctls;
            return this;
        }

        public Builder setSysctls(@Nullable Map<String,Object> sysctls) {
            this.sysctls = Input.ofNullable(sysctls);
            return this;
        }

        public Builder setTmpfs(@Nullable Input<Map<String,Object>> tmpfs) {
            this.tmpfs = tmpfs;
            return this;
        }

        public Builder setTmpfs(@Nullable Map<String,Object> tmpfs) {
            this.tmpfs = Input.ofNullable(tmpfs);
            return this;
        }

        public Builder setTty(@Nullable Input<Boolean> tty) {
            this.tty = tty;
            return this;
        }

        public Builder setTty(@Nullable Boolean tty) {
            this.tty = Input.ofNullable(tty);
            return this;
        }

        public Builder setUlimits(@Nullable Input<List<ContainerUlimitGetArgs>> ulimits) {
            this.ulimits = ulimits;
            return this;
        }

        public Builder setUlimits(@Nullable List<ContainerUlimitGetArgs> ulimits) {
            this.ulimits = Input.ofNullable(ulimits);
            return this;
        }

        public Builder setUploads(@Nullable Input<List<ContainerUploadGetArgs>> uploads) {
            this.uploads = uploads;
            return this;
        }

        public Builder setUploads(@Nullable List<ContainerUploadGetArgs> uploads) {
            this.uploads = Input.ofNullable(uploads);
            return this;
        }

        public Builder setUser(@Nullable Input<String> user) {
            this.user = user;
            return this;
        }

        public Builder setUser(@Nullable String user) {
            this.user = Input.ofNullable(user);
            return this;
        }

        public Builder setUsernsMode(@Nullable Input<String> usernsMode) {
            this.usernsMode = usernsMode;
            return this;
        }

        public Builder setUsernsMode(@Nullable String usernsMode) {
            this.usernsMode = Input.ofNullable(usernsMode);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<ContainerVolumeGetArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<ContainerVolumeGetArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }

        public Builder setWorkingDir(@Nullable Input<String> workingDir) {
            this.workingDir = workingDir;
            return this;
        }

        public Builder setWorkingDir(@Nullable String workingDir) {
            this.workingDir = Input.ofNullable(workingDir);
            return this;
        }
        public ContainerState build() {
            return new ContainerState(attach, bridge, capabilities, command, containerLogs, cpuSet, cpuShares, destroyGraceSeconds, devices, dns, dnsOpts, dnsSearches, domainname, entrypoints, envs, exitCode, gateway, groupAdds, healthcheck, hostname, hosts, image, init, ipAddress, ipPrefixLength, ipcMode, labels, links, logDriver, logOpts, logs, maxRetryCount, memory, memorySwap, mounts, mustRun, name, networkAliases, networkDatas, networkMode, networks, networksAdvanced, pidMode, ports, privileged, publishAllPorts, readOnly, removeVolumes, restart, rm, securityOpts, shmSize, start, stdinOpen, storageOpts, sysctls, tmpfs, tty, ulimits, uploads, user, usernsMode, volumes, workingDir);
        }
    }
}
