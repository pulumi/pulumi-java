// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountBindOptionsArgs;
import io.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs;
import io.pulumi.docker.inputs.ServiceTaskSpecContainerSpecMountVolumeOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceTaskSpecContainerSpecMountArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecContainerSpecMountArgs Empty = new ServiceTaskSpecContainerSpecMountArgs();

    @InputImport(name="bindOptions")
      private final @Nullable Input<ServiceTaskSpecContainerSpecMountBindOptionsArgs> bindOptions;

    public Input<ServiceTaskSpecContainerSpecMountBindOptionsArgs> getBindOptions() {
        return this.bindOptions == null ? Input.empty() : this.bindOptions;
    }

    @InputImport(name="readOnly")
      private final @Nullable Input<Boolean> readOnly;

    public Input<Boolean> getReadOnly() {
        return this.readOnly == null ? Input.empty() : this.readOnly;
    }

    @InputImport(name="source")
      private final @Nullable Input<String> source;

    public Input<String> getSource() {
        return this.source == null ? Input.empty() : this.source;
    }

    @InputImport(name="target", required=true)
      private final Input<String> target;

    public Input<String> getTarget() {
        return this.target;
    }

    @InputImport(name="tmpfsOptions")
      private final @Nullable Input<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> tmpfsOptions;

    public Input<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> getTmpfsOptions() {
        return this.tmpfsOptions == null ? Input.empty() : this.tmpfsOptions;
    }

    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    @InputImport(name="volumeOptions")
      private final @Nullable Input<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> volumeOptions;

    public Input<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> getVolumeOptions() {
        return this.volumeOptions == null ? Input.empty() : this.volumeOptions;
    }

    public ServiceTaskSpecContainerSpecMountArgs(
        @Nullable Input<ServiceTaskSpecContainerSpecMountBindOptionsArgs> bindOptions,
        @Nullable Input<Boolean> readOnly,
        @Nullable Input<String> source,
        Input<String> target,
        @Nullable Input<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> tmpfsOptions,
        Input<String> type,
        @Nullable Input<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> volumeOptions) {
        this.bindOptions = bindOptions;
        this.readOnly = readOnly;
        this.source = source;
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
        this.tmpfsOptions = tmpfsOptions;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.volumeOptions = volumeOptions;
    }

    private ServiceTaskSpecContainerSpecMountArgs() {
        this.bindOptions = Input.empty();
        this.readOnly = Input.empty();
        this.source = Input.empty();
        this.target = Input.empty();
        this.tmpfsOptions = Input.empty();
        this.type = Input.empty();
        this.volumeOptions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTaskSpecContainerSpecMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ServiceTaskSpecContainerSpecMountBindOptionsArgs> bindOptions;
        private @Nullable Input<Boolean> readOnly;
        private @Nullable Input<String> source;
        private Input<String> target;
        private @Nullable Input<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> tmpfsOptions;
        private Input<String> type;
        private @Nullable Input<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> volumeOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceTaskSpecContainerSpecMountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bindOptions = defaults.bindOptions;
    	      this.readOnly = defaults.readOnly;
    	      this.source = defaults.source;
    	      this.target = defaults.target;
    	      this.tmpfsOptions = defaults.tmpfsOptions;
    	      this.type = defaults.type;
    	      this.volumeOptions = defaults.volumeOptions;
        }

        public Builder setBindOptions(@Nullable Input<ServiceTaskSpecContainerSpecMountBindOptionsArgs> bindOptions) {
            this.bindOptions = bindOptions;
            return this;
        }

        public Builder setBindOptions(@Nullable ServiceTaskSpecContainerSpecMountBindOptionsArgs bindOptions) {
            this.bindOptions = Input.ofNullable(bindOptions);
            return this;
        }

        public Builder setReadOnly(@Nullable Input<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder setReadOnly(@Nullable Boolean readOnly) {
            this.readOnly = Input.ofNullable(readOnly);
            return this;
        }

        public Builder setSource(@Nullable Input<String> source) {
            this.source = source;
            return this;
        }

        public Builder setSource(@Nullable String source) {
            this.source = Input.ofNullable(source);
            return this;
        }

        public Builder setTarget(Input<String> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder setTarget(String target) {
            this.target = Input.of(Objects.requireNonNull(target));
            return this;
        }

        public Builder setTmpfsOptions(@Nullable Input<ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs> tmpfsOptions) {
            this.tmpfsOptions = tmpfsOptions;
            return this;
        }

        public Builder setTmpfsOptions(@Nullable ServiceTaskSpecContainerSpecMountTmpfsOptionsArgs tmpfsOptions) {
            this.tmpfsOptions = Input.ofNullable(tmpfsOptions);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder setVolumeOptions(@Nullable Input<ServiceTaskSpecContainerSpecMountVolumeOptionsArgs> volumeOptions) {
            this.volumeOptions = volumeOptions;
            return this;
        }

        public Builder setVolumeOptions(@Nullable ServiceTaskSpecContainerSpecMountVolumeOptionsArgs volumeOptions) {
            this.volumeOptions = Input.ofNullable(volumeOptions);
            return this;
        }
        public ServiceTaskSpecContainerSpecMountArgs build() {
            return new ServiceTaskSpecContainerSpecMountArgs(bindOptions, readOnly, source, target, tmpfsOptions, type, volumeOptions);
        }
    }
}
