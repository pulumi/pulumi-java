// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.docker.inputs.RegistryImageBuildAuthConfigGetArgs;
import io.pulumi.docker.inputs.RegistryImageBuildUlimitGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegistryImageBuildGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegistryImageBuildGetArgs Empty = new RegistryImageBuildGetArgs();

    @InputImport(name="authConfigs")
      private final @Nullable Input<List<RegistryImageBuildAuthConfigGetArgs>> authConfigs;

    public Input<List<RegistryImageBuildAuthConfigGetArgs>> getAuthConfigs() {
        return this.authConfigs == null ? Input.empty() : this.authConfigs;
    }

    @InputImport(name="buildArgs")
      private final @Nullable Input<Map<String,String>> buildArgs;

    public Input<Map<String,String>> getBuildArgs() {
        return this.buildArgs == null ? Input.empty() : this.buildArgs;
    }

    @InputImport(name="buildId")
      private final @Nullable Input<String> buildId;

    public Input<String> getBuildId() {
        return this.buildId == null ? Input.empty() : this.buildId;
    }

    @InputImport(name="cacheFroms")
      private final @Nullable Input<List<String>> cacheFroms;

    public Input<List<String>> getCacheFroms() {
        return this.cacheFroms == null ? Input.empty() : this.cacheFroms;
    }

    @InputImport(name="cgroupParent")
      private final @Nullable Input<String> cgroupParent;

    public Input<String> getCgroupParent() {
        return this.cgroupParent == null ? Input.empty() : this.cgroupParent;
    }

    @InputImport(name="context", required=true)
      private final Input<String> context;

    public Input<String> getContext() {
        return this.context;
    }

    @InputImport(name="cpuPeriod")
      private final @Nullable Input<Integer> cpuPeriod;

    public Input<Integer> getCpuPeriod() {
        return this.cpuPeriod == null ? Input.empty() : this.cpuPeriod;
    }

    @InputImport(name="cpuQuota")
      private final @Nullable Input<Integer> cpuQuota;

    public Input<Integer> getCpuQuota() {
        return this.cpuQuota == null ? Input.empty() : this.cpuQuota;
    }

    @InputImport(name="cpuSetCpus")
      private final @Nullable Input<String> cpuSetCpus;

    public Input<String> getCpuSetCpus() {
        return this.cpuSetCpus == null ? Input.empty() : this.cpuSetCpus;
    }

    @InputImport(name="cpuSetMems")
      private final @Nullable Input<String> cpuSetMems;

    public Input<String> getCpuSetMems() {
        return this.cpuSetMems == null ? Input.empty() : this.cpuSetMems;
    }

    @InputImport(name="cpuShares")
      private final @Nullable Input<Integer> cpuShares;

    public Input<Integer> getCpuShares() {
        return this.cpuShares == null ? Input.empty() : this.cpuShares;
    }

    @InputImport(name="dockerfile")
      private final @Nullable Input<String> dockerfile;

    public Input<String> getDockerfile() {
        return this.dockerfile == null ? Input.empty() : this.dockerfile;
    }

    @InputImport(name="extraHosts")
      private final @Nullable Input<List<String>> extraHosts;

    public Input<List<String>> getExtraHosts() {
        return this.extraHosts == null ? Input.empty() : this.extraHosts;
    }

    @InputImport(name="forceRemove")
      private final @Nullable Input<Boolean> forceRemove;

    public Input<Boolean> getForceRemove() {
        return this.forceRemove == null ? Input.empty() : this.forceRemove;
    }

    @InputImport(name="isolation")
      private final @Nullable Input<String> isolation;

    public Input<String> getIsolation() {
        return this.isolation == null ? Input.empty() : this.isolation;
    }

    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="memory")
      private final @Nullable Input<Integer> memory;

    public Input<Integer> getMemory() {
        return this.memory == null ? Input.empty() : this.memory;
    }

    @InputImport(name="memorySwap")
      private final @Nullable Input<Integer> memorySwap;

    public Input<Integer> getMemorySwap() {
        return this.memorySwap == null ? Input.empty() : this.memorySwap;
    }

    @InputImport(name="networkMode")
      private final @Nullable Input<String> networkMode;

    public Input<String> getNetworkMode() {
        return this.networkMode == null ? Input.empty() : this.networkMode;
    }

    @InputImport(name="noCache")
      private final @Nullable Input<Boolean> noCache;

    public Input<Boolean> getNoCache() {
        return this.noCache == null ? Input.empty() : this.noCache;
    }

    @InputImport(name="platform")
      private final @Nullable Input<String> platform;

    public Input<String> getPlatform() {
        return this.platform == null ? Input.empty() : this.platform;
    }

    @InputImport(name="pullParent")
      private final @Nullable Input<Boolean> pullParent;

    public Input<Boolean> getPullParent() {
        return this.pullParent == null ? Input.empty() : this.pullParent;
    }

    @InputImport(name="remoteContext")
      private final @Nullable Input<String> remoteContext;

    public Input<String> getRemoteContext() {
        return this.remoteContext == null ? Input.empty() : this.remoteContext;
    }

    @InputImport(name="remove")
      private final @Nullable Input<Boolean> remove;

    public Input<Boolean> getRemove() {
        return this.remove == null ? Input.empty() : this.remove;
    }

    @InputImport(name="securityOpts")
      private final @Nullable Input<List<String>> securityOpts;

    public Input<List<String>> getSecurityOpts() {
        return this.securityOpts == null ? Input.empty() : this.securityOpts;
    }

    @InputImport(name="sessionId")
      private final @Nullable Input<String> sessionId;

    public Input<String> getSessionId() {
        return this.sessionId == null ? Input.empty() : this.sessionId;
    }

    @InputImport(name="shmSize")
      private final @Nullable Input<Integer> shmSize;

    public Input<Integer> getShmSize() {
        return this.shmSize == null ? Input.empty() : this.shmSize;
    }

    @InputImport(name="squash")
      private final @Nullable Input<Boolean> squash;

    public Input<Boolean> getSquash() {
        return this.squash == null ? Input.empty() : this.squash;
    }

    @InputImport(name="suppressOutput")
      private final @Nullable Input<Boolean> suppressOutput;

    public Input<Boolean> getSuppressOutput() {
        return this.suppressOutput == null ? Input.empty() : this.suppressOutput;
    }

    @InputImport(name="target")
      private final @Nullable Input<String> target;

    public Input<String> getTarget() {
        return this.target == null ? Input.empty() : this.target;
    }

    @InputImport(name="ulimits")
      private final @Nullable Input<List<RegistryImageBuildUlimitGetArgs>> ulimits;

    public Input<List<RegistryImageBuildUlimitGetArgs>> getUlimits() {
        return this.ulimits == null ? Input.empty() : this.ulimits;
    }

    @InputImport(name="version")
      private final @Nullable Input<String> version;

    public Input<String> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public RegistryImageBuildGetArgs(
        @Nullable Input<List<RegistryImageBuildAuthConfigGetArgs>> authConfigs,
        @Nullable Input<Map<String,String>> buildArgs,
        @Nullable Input<String> buildId,
        @Nullable Input<List<String>> cacheFroms,
        @Nullable Input<String> cgroupParent,
        Input<String> context,
        @Nullable Input<Integer> cpuPeriod,
        @Nullable Input<Integer> cpuQuota,
        @Nullable Input<String> cpuSetCpus,
        @Nullable Input<String> cpuSetMems,
        @Nullable Input<Integer> cpuShares,
        @Nullable Input<String> dockerfile,
        @Nullable Input<List<String>> extraHosts,
        @Nullable Input<Boolean> forceRemove,
        @Nullable Input<String> isolation,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<Integer> memory,
        @Nullable Input<Integer> memorySwap,
        @Nullable Input<String> networkMode,
        @Nullable Input<Boolean> noCache,
        @Nullable Input<String> platform,
        @Nullable Input<Boolean> pullParent,
        @Nullable Input<String> remoteContext,
        @Nullable Input<Boolean> remove,
        @Nullable Input<List<String>> securityOpts,
        @Nullable Input<String> sessionId,
        @Nullable Input<Integer> shmSize,
        @Nullable Input<Boolean> squash,
        @Nullable Input<Boolean> suppressOutput,
        @Nullable Input<String> target,
        @Nullable Input<List<RegistryImageBuildUlimitGetArgs>> ulimits,
        @Nullable Input<String> version) {
        this.authConfigs = authConfigs;
        this.buildArgs = buildArgs;
        this.buildId = buildId;
        this.cacheFroms = cacheFroms;
        this.cgroupParent = cgroupParent;
        this.context = Objects.requireNonNull(context, "expected parameter 'context' to be non-null");
        this.cpuPeriod = cpuPeriod;
        this.cpuQuota = cpuQuota;
        this.cpuSetCpus = cpuSetCpus;
        this.cpuSetMems = cpuSetMems;
        this.cpuShares = cpuShares;
        this.dockerfile = dockerfile;
        this.extraHosts = extraHosts;
        this.forceRemove = forceRemove;
        this.isolation = isolation;
        this.labels = labels;
        this.memory = memory;
        this.memorySwap = memorySwap;
        this.networkMode = networkMode;
        this.noCache = noCache;
        this.platform = platform;
        this.pullParent = pullParent;
        this.remoteContext = remoteContext;
        this.remove = remove;
        this.securityOpts = securityOpts;
        this.sessionId = sessionId;
        this.shmSize = shmSize;
        this.squash = squash;
        this.suppressOutput = suppressOutput;
        this.target = target;
        this.ulimits = ulimits;
        this.version = version;
    }

    private RegistryImageBuildGetArgs() {
        this.authConfigs = Input.empty();
        this.buildArgs = Input.empty();
        this.buildId = Input.empty();
        this.cacheFroms = Input.empty();
        this.cgroupParent = Input.empty();
        this.context = Input.empty();
        this.cpuPeriod = Input.empty();
        this.cpuQuota = Input.empty();
        this.cpuSetCpus = Input.empty();
        this.cpuSetMems = Input.empty();
        this.cpuShares = Input.empty();
        this.dockerfile = Input.empty();
        this.extraHosts = Input.empty();
        this.forceRemove = Input.empty();
        this.isolation = Input.empty();
        this.labels = Input.empty();
        this.memory = Input.empty();
        this.memorySwap = Input.empty();
        this.networkMode = Input.empty();
        this.noCache = Input.empty();
        this.platform = Input.empty();
        this.pullParent = Input.empty();
        this.remoteContext = Input.empty();
        this.remove = Input.empty();
        this.securityOpts = Input.empty();
        this.sessionId = Input.empty();
        this.shmSize = Input.empty();
        this.squash = Input.empty();
        this.suppressOutput = Input.empty();
        this.target = Input.empty();
        this.ulimits = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryImageBuildGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<RegistryImageBuildAuthConfigGetArgs>> authConfigs;
        private @Nullable Input<Map<String,String>> buildArgs;
        private @Nullable Input<String> buildId;
        private @Nullable Input<List<String>> cacheFroms;
        private @Nullable Input<String> cgroupParent;
        private Input<String> context;
        private @Nullable Input<Integer> cpuPeriod;
        private @Nullable Input<Integer> cpuQuota;
        private @Nullable Input<String> cpuSetCpus;
        private @Nullable Input<String> cpuSetMems;
        private @Nullable Input<Integer> cpuShares;
        private @Nullable Input<String> dockerfile;
        private @Nullable Input<List<String>> extraHosts;
        private @Nullable Input<Boolean> forceRemove;
        private @Nullable Input<String> isolation;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<Integer> memory;
        private @Nullable Input<Integer> memorySwap;
        private @Nullable Input<String> networkMode;
        private @Nullable Input<Boolean> noCache;
        private @Nullable Input<String> platform;
        private @Nullable Input<Boolean> pullParent;
        private @Nullable Input<String> remoteContext;
        private @Nullable Input<Boolean> remove;
        private @Nullable Input<List<String>> securityOpts;
        private @Nullable Input<String> sessionId;
        private @Nullable Input<Integer> shmSize;
        private @Nullable Input<Boolean> squash;
        private @Nullable Input<Boolean> suppressOutput;
        private @Nullable Input<String> target;
        private @Nullable Input<List<RegistryImageBuildUlimitGetArgs>> ulimits;
        private @Nullable Input<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryImageBuildGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authConfigs = defaults.authConfigs;
    	      this.buildArgs = defaults.buildArgs;
    	      this.buildId = defaults.buildId;
    	      this.cacheFroms = defaults.cacheFroms;
    	      this.cgroupParent = defaults.cgroupParent;
    	      this.context = defaults.context;
    	      this.cpuPeriod = defaults.cpuPeriod;
    	      this.cpuQuota = defaults.cpuQuota;
    	      this.cpuSetCpus = defaults.cpuSetCpus;
    	      this.cpuSetMems = defaults.cpuSetMems;
    	      this.cpuShares = defaults.cpuShares;
    	      this.dockerfile = defaults.dockerfile;
    	      this.extraHosts = defaults.extraHosts;
    	      this.forceRemove = defaults.forceRemove;
    	      this.isolation = defaults.isolation;
    	      this.labels = defaults.labels;
    	      this.memory = defaults.memory;
    	      this.memorySwap = defaults.memorySwap;
    	      this.networkMode = defaults.networkMode;
    	      this.noCache = defaults.noCache;
    	      this.platform = defaults.platform;
    	      this.pullParent = defaults.pullParent;
    	      this.remoteContext = defaults.remoteContext;
    	      this.remove = defaults.remove;
    	      this.securityOpts = defaults.securityOpts;
    	      this.sessionId = defaults.sessionId;
    	      this.shmSize = defaults.shmSize;
    	      this.squash = defaults.squash;
    	      this.suppressOutput = defaults.suppressOutput;
    	      this.target = defaults.target;
    	      this.ulimits = defaults.ulimits;
    	      this.version = defaults.version;
        }

        public Builder authConfigs(@Nullable Input<List<RegistryImageBuildAuthConfigGetArgs>> authConfigs) {
            this.authConfigs = authConfigs;
            return this;
        }

        public Builder authConfigs(@Nullable List<RegistryImageBuildAuthConfigGetArgs> authConfigs) {
            this.authConfigs = Input.ofNullable(authConfigs);
            return this;
        }

        public Builder buildArgs(@Nullable Input<Map<String,String>> buildArgs) {
            this.buildArgs = buildArgs;
            return this;
        }

        public Builder buildArgs(@Nullable Map<String,String> buildArgs) {
            this.buildArgs = Input.ofNullable(buildArgs);
            return this;
        }

        public Builder buildId(@Nullable Input<String> buildId) {
            this.buildId = buildId;
            return this;
        }

        public Builder buildId(@Nullable String buildId) {
            this.buildId = Input.ofNullable(buildId);
            return this;
        }

        public Builder cacheFroms(@Nullable Input<List<String>> cacheFroms) {
            this.cacheFroms = cacheFroms;
            return this;
        }

        public Builder cacheFroms(@Nullable List<String> cacheFroms) {
            this.cacheFroms = Input.ofNullable(cacheFroms);
            return this;
        }

        public Builder cgroupParent(@Nullable Input<String> cgroupParent) {
            this.cgroupParent = cgroupParent;
            return this;
        }

        public Builder cgroupParent(@Nullable String cgroupParent) {
            this.cgroupParent = Input.ofNullable(cgroupParent);
            return this;
        }

        public Builder context(Input<String> context) {
            this.context = Objects.requireNonNull(context);
            return this;
        }

        public Builder context(String context) {
            this.context = Input.of(Objects.requireNonNull(context));
            return this;
        }

        public Builder cpuPeriod(@Nullable Input<Integer> cpuPeriod) {
            this.cpuPeriod = cpuPeriod;
            return this;
        }

        public Builder cpuPeriod(@Nullable Integer cpuPeriod) {
            this.cpuPeriod = Input.ofNullable(cpuPeriod);
            return this;
        }

        public Builder cpuQuota(@Nullable Input<Integer> cpuQuota) {
            this.cpuQuota = cpuQuota;
            return this;
        }

        public Builder cpuQuota(@Nullable Integer cpuQuota) {
            this.cpuQuota = Input.ofNullable(cpuQuota);
            return this;
        }

        public Builder cpuSetCpus(@Nullable Input<String> cpuSetCpus) {
            this.cpuSetCpus = cpuSetCpus;
            return this;
        }

        public Builder cpuSetCpus(@Nullable String cpuSetCpus) {
            this.cpuSetCpus = Input.ofNullable(cpuSetCpus);
            return this;
        }

        public Builder cpuSetMems(@Nullable Input<String> cpuSetMems) {
            this.cpuSetMems = cpuSetMems;
            return this;
        }

        public Builder cpuSetMems(@Nullable String cpuSetMems) {
            this.cpuSetMems = Input.ofNullable(cpuSetMems);
            return this;
        }

        public Builder cpuShares(@Nullable Input<Integer> cpuShares) {
            this.cpuShares = cpuShares;
            return this;
        }

        public Builder cpuShares(@Nullable Integer cpuShares) {
            this.cpuShares = Input.ofNullable(cpuShares);
            return this;
        }

        public Builder dockerfile(@Nullable Input<String> dockerfile) {
            this.dockerfile = dockerfile;
            return this;
        }

        public Builder dockerfile(@Nullable String dockerfile) {
            this.dockerfile = Input.ofNullable(dockerfile);
            return this;
        }

        public Builder extraHosts(@Nullable Input<List<String>> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }

        public Builder extraHosts(@Nullable List<String> extraHosts) {
            this.extraHosts = Input.ofNullable(extraHosts);
            return this;
        }

        public Builder forceRemove(@Nullable Input<Boolean> forceRemove) {
            this.forceRemove = forceRemove;
            return this;
        }

        public Builder forceRemove(@Nullable Boolean forceRemove) {
            this.forceRemove = Input.ofNullable(forceRemove);
            return this;
        }

        public Builder isolation(@Nullable Input<String> isolation) {
            this.isolation = isolation;
            return this;
        }

        public Builder isolation(@Nullable String isolation) {
            this.isolation = Input.ofNullable(isolation);
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder memory(@Nullable Input<Integer> memory) {
            this.memory = memory;
            return this;
        }

        public Builder memory(@Nullable Integer memory) {
            this.memory = Input.ofNullable(memory);
            return this;
        }

        public Builder memorySwap(@Nullable Input<Integer> memorySwap) {
            this.memorySwap = memorySwap;
            return this;
        }

        public Builder memorySwap(@Nullable Integer memorySwap) {
            this.memorySwap = Input.ofNullable(memorySwap);
            return this;
        }

        public Builder networkMode(@Nullable Input<String> networkMode) {
            this.networkMode = networkMode;
            return this;
        }

        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = Input.ofNullable(networkMode);
            return this;
        }

        public Builder noCache(@Nullable Input<Boolean> noCache) {
            this.noCache = noCache;
            return this;
        }

        public Builder noCache(@Nullable Boolean noCache) {
            this.noCache = Input.ofNullable(noCache);
            return this;
        }

        public Builder platform(@Nullable Input<String> platform) {
            this.platform = platform;
            return this;
        }

        public Builder platform(@Nullable String platform) {
            this.platform = Input.ofNullable(platform);
            return this;
        }

        public Builder pullParent(@Nullable Input<Boolean> pullParent) {
            this.pullParent = pullParent;
            return this;
        }

        public Builder pullParent(@Nullable Boolean pullParent) {
            this.pullParent = Input.ofNullable(pullParent);
            return this;
        }

        public Builder remoteContext(@Nullable Input<String> remoteContext) {
            this.remoteContext = remoteContext;
            return this;
        }

        public Builder remoteContext(@Nullable String remoteContext) {
            this.remoteContext = Input.ofNullable(remoteContext);
            return this;
        }

        public Builder remove(@Nullable Input<Boolean> remove) {
            this.remove = remove;
            return this;
        }

        public Builder remove(@Nullable Boolean remove) {
            this.remove = Input.ofNullable(remove);
            return this;
        }

        public Builder securityOpts(@Nullable Input<List<String>> securityOpts) {
            this.securityOpts = securityOpts;
            return this;
        }

        public Builder securityOpts(@Nullable List<String> securityOpts) {
            this.securityOpts = Input.ofNullable(securityOpts);
            return this;
        }

        public Builder sessionId(@Nullable Input<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public Builder sessionId(@Nullable String sessionId) {
            this.sessionId = Input.ofNullable(sessionId);
            return this;
        }

        public Builder shmSize(@Nullable Input<Integer> shmSize) {
            this.shmSize = shmSize;
            return this;
        }

        public Builder shmSize(@Nullable Integer shmSize) {
            this.shmSize = Input.ofNullable(shmSize);
            return this;
        }

        public Builder squash(@Nullable Input<Boolean> squash) {
            this.squash = squash;
            return this;
        }

        public Builder squash(@Nullable Boolean squash) {
            this.squash = Input.ofNullable(squash);
            return this;
        }

        public Builder suppressOutput(@Nullable Input<Boolean> suppressOutput) {
            this.suppressOutput = suppressOutput;
            return this;
        }

        public Builder suppressOutput(@Nullable Boolean suppressOutput) {
            this.suppressOutput = Input.ofNullable(suppressOutput);
            return this;
        }

        public Builder target(@Nullable Input<String> target) {
            this.target = target;
            return this;
        }

        public Builder target(@Nullable String target) {
            this.target = Input.ofNullable(target);
            return this;
        }

        public Builder ulimits(@Nullable Input<List<RegistryImageBuildUlimitGetArgs>> ulimits) {
            this.ulimits = ulimits;
            return this;
        }

        public Builder ulimits(@Nullable List<RegistryImageBuildUlimitGetArgs> ulimits) {
            this.ulimits = Input.ofNullable(ulimits);
            return this;
        }

        public Builder version(@Nullable Input<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Input.ofNullable(version);
            return this;
        }
        public RegistryImageBuildGetArgs build() {
            return new RegistryImageBuildGetArgs(authConfigs, buildArgs, buildId, cacheFroms, cgroupParent, context, cpuPeriod, cpuQuota, cpuSetCpus, cpuSetMems, cpuShares, dockerfile, extraHosts, forceRemove, isolation, labels, memory, memorySwap, networkMode, noCache, platform, pullParent, remoteContext, remove, securityOpts, sessionId, shmSize, squash, suppressOutput, target, ulimits, version);
        }
    }
}
