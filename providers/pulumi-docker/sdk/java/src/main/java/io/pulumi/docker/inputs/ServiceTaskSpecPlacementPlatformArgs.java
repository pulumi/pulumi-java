// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class ServiceTaskSpecPlacementPlatformArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecPlacementPlatformArgs Empty = new ServiceTaskSpecPlacementPlatformArgs();

    @InputImport(name="architecture", required=true)
      private final Input<String> architecture;

    public Input<String> getArchitecture() {
        return this.architecture;
    }

    @InputImport(name="os", required=true)
      private final Input<String> os;

    public Input<String> getOs() {
        return this.os;
    }

    public ServiceTaskSpecPlacementPlatformArgs(
        Input<String> architecture,
        Input<String> os) {
        this.architecture = Objects.requireNonNull(architecture, "expected parameter 'architecture' to be non-null");
        this.os = Objects.requireNonNull(os, "expected parameter 'os' to be non-null");
    }

    private ServiceTaskSpecPlacementPlatformArgs() {
        this.architecture = Input.empty();
        this.os = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTaskSpecPlacementPlatformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> architecture;
        private Input<String> os;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceTaskSpecPlacementPlatformArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.os = defaults.os;
        }

        public Builder architecture(Input<String> architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }

        public Builder architecture(String architecture) {
            this.architecture = Input.of(Objects.requireNonNull(architecture));
            return this;
        }

        public Builder os(Input<String> os) {
            this.os = Objects.requireNonNull(os);
            return this;
        }

        public Builder os(String os) {
            this.os = Input.of(Objects.requireNonNull(os));
            return this;
        }
        public ServiceTaskSpecPlacementPlatformArgs build() {
            return new ServiceTaskSpecPlacementPlatformArgs(architecture, os);
        }
    }
}
