// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.docker.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.docker.inputs.ServiceTaskSpecContainerSpecArgs;
import io.pulumi.docker.inputs.ServiceTaskSpecLogDriverArgs;
import io.pulumi.docker.inputs.ServiceTaskSpecPlacementArgs;
import io.pulumi.docker.inputs.ServiceTaskSpecResourcesArgs;
import io.pulumi.docker.inputs.ServiceTaskSpecRestartPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceTaskSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceTaskSpecArgs Empty = new ServiceTaskSpecArgs();

    @InputImport(name="containerSpec", required=true)
      private final Input<ServiceTaskSpecContainerSpecArgs> containerSpec;

    public Input<ServiceTaskSpecContainerSpecArgs> getContainerSpec() {
        return this.containerSpec;
    }

    @InputImport(name="forceUpdate")
      private final @Nullable Input<Integer> forceUpdate;

    public Input<Integer> getForceUpdate() {
        return this.forceUpdate == null ? Input.empty() : this.forceUpdate;
    }

    @InputImport(name="logDriver")
      private final @Nullable Input<ServiceTaskSpecLogDriverArgs> logDriver;

    public Input<ServiceTaskSpecLogDriverArgs> getLogDriver() {
        return this.logDriver == null ? Input.empty() : this.logDriver;
    }

    @InputImport(name="networks")
      private final @Nullable Input<List<String>> networks;

    public Input<List<String>> getNetworks() {
        return this.networks == null ? Input.empty() : this.networks;
    }

    @InputImport(name="placement")
      private final @Nullable Input<ServiceTaskSpecPlacementArgs> placement;

    public Input<ServiceTaskSpecPlacementArgs> getPlacement() {
        return this.placement == null ? Input.empty() : this.placement;
    }

    @InputImport(name="resources")
      private final @Nullable Input<ServiceTaskSpecResourcesArgs> resources;

    public Input<ServiceTaskSpecResourcesArgs> getResources() {
        return this.resources == null ? Input.empty() : this.resources;
    }

    @InputImport(name="restartPolicy")
      private final @Nullable Input<ServiceTaskSpecRestartPolicyArgs> restartPolicy;

    public Input<ServiceTaskSpecRestartPolicyArgs> getRestartPolicy() {
        return this.restartPolicy == null ? Input.empty() : this.restartPolicy;
    }

    @InputImport(name="runtime")
      private final @Nullable Input<String> runtime;

    public Input<String> getRuntime() {
        return this.runtime == null ? Input.empty() : this.runtime;
    }

    public ServiceTaskSpecArgs(
        Input<ServiceTaskSpecContainerSpecArgs> containerSpec,
        @Nullable Input<Integer> forceUpdate,
        @Nullable Input<ServiceTaskSpecLogDriverArgs> logDriver,
        @Nullable Input<List<String>> networks,
        @Nullable Input<ServiceTaskSpecPlacementArgs> placement,
        @Nullable Input<ServiceTaskSpecResourcesArgs> resources,
        @Nullable Input<ServiceTaskSpecRestartPolicyArgs> restartPolicy,
        @Nullable Input<String> runtime) {
        this.containerSpec = Objects.requireNonNull(containerSpec, "expected parameter 'containerSpec' to be non-null");
        this.forceUpdate = forceUpdate;
        this.logDriver = logDriver;
        this.networks = networks;
        this.placement = placement;
        this.resources = resources;
        this.restartPolicy = restartPolicy;
        this.runtime = runtime;
    }

    private ServiceTaskSpecArgs() {
        this.containerSpec = Input.empty();
        this.forceUpdate = Input.empty();
        this.logDriver = Input.empty();
        this.networks = Input.empty();
        this.placement = Input.empty();
        this.resources = Input.empty();
        this.restartPolicy = Input.empty();
        this.runtime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTaskSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<ServiceTaskSpecContainerSpecArgs> containerSpec;
        private @Nullable Input<Integer> forceUpdate;
        private @Nullable Input<ServiceTaskSpecLogDriverArgs> logDriver;
        private @Nullable Input<List<String>> networks;
        private @Nullable Input<ServiceTaskSpecPlacementArgs> placement;
        private @Nullable Input<ServiceTaskSpecResourcesArgs> resources;
        private @Nullable Input<ServiceTaskSpecRestartPolicyArgs> restartPolicy;
        private @Nullable Input<String> runtime;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceTaskSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerSpec = defaults.containerSpec;
    	      this.forceUpdate = defaults.forceUpdate;
    	      this.logDriver = defaults.logDriver;
    	      this.networks = defaults.networks;
    	      this.placement = defaults.placement;
    	      this.resources = defaults.resources;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.runtime = defaults.runtime;
        }

        public Builder setContainerSpec(Input<ServiceTaskSpecContainerSpecArgs> containerSpec) {
            this.containerSpec = Objects.requireNonNull(containerSpec);
            return this;
        }

        public Builder setContainerSpec(ServiceTaskSpecContainerSpecArgs containerSpec) {
            this.containerSpec = Input.of(Objects.requireNonNull(containerSpec));
            return this;
        }

        public Builder setForceUpdate(@Nullable Input<Integer> forceUpdate) {
            this.forceUpdate = forceUpdate;
            return this;
        }

        public Builder setForceUpdate(@Nullable Integer forceUpdate) {
            this.forceUpdate = Input.ofNullable(forceUpdate);
            return this;
        }

        public Builder setLogDriver(@Nullable Input<ServiceTaskSpecLogDriverArgs> logDriver) {
            this.logDriver = logDriver;
            return this;
        }

        public Builder setLogDriver(@Nullable ServiceTaskSpecLogDriverArgs logDriver) {
            this.logDriver = Input.ofNullable(logDriver);
            return this;
        }

        public Builder setNetworks(@Nullable Input<List<String>> networks) {
            this.networks = networks;
            return this;
        }

        public Builder setNetworks(@Nullable List<String> networks) {
            this.networks = Input.ofNullable(networks);
            return this;
        }

        public Builder setPlacement(@Nullable Input<ServiceTaskSpecPlacementArgs> placement) {
            this.placement = placement;
            return this;
        }

        public Builder setPlacement(@Nullable ServiceTaskSpecPlacementArgs placement) {
            this.placement = Input.ofNullable(placement);
            return this;
        }

        public Builder setResources(@Nullable Input<ServiceTaskSpecResourcesArgs> resources) {
            this.resources = resources;
            return this;
        }

        public Builder setResources(@Nullable ServiceTaskSpecResourcesArgs resources) {
            this.resources = Input.ofNullable(resources);
            return this;
        }

        public Builder setRestartPolicy(@Nullable Input<ServiceTaskSpecRestartPolicyArgs> restartPolicy) {
            this.restartPolicy = restartPolicy;
            return this;
        }

        public Builder setRestartPolicy(@Nullable ServiceTaskSpecRestartPolicyArgs restartPolicy) {
            this.restartPolicy = Input.ofNullable(restartPolicy);
            return this;
        }

        public Builder setRuntime(@Nullable Input<String> runtime) {
            this.runtime = runtime;
            return this;
        }

        public Builder setRuntime(@Nullable String runtime) {
            this.runtime = Input.ofNullable(runtime);
            return this;
        }
        public ServiceTaskSpecArgs build() {
            return new ServiceTaskSpecArgs(containerSpec, forceUpdate, logDriver, networks, placement, resources, restartPolicy, runtime);
        }
    }
}
