// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.ContainerCapabilitiesArgs;
import com.pulumi.docker.inputs.ContainerDeviceArgs;
import com.pulumi.docker.inputs.ContainerHealthcheckArgs;
import com.pulumi.docker.inputs.ContainerHostArgs;
import com.pulumi.docker.inputs.ContainerLabelArgs;
import com.pulumi.docker.inputs.ContainerMountArgs;
import com.pulumi.docker.inputs.ContainerNetworksAdvancedArgs;
import com.pulumi.docker.inputs.ContainerPortArgs;
import com.pulumi.docker.inputs.ContainerUlimitArgs;
import com.pulumi.docker.inputs.ContainerUploadArgs;
import com.pulumi.docker.inputs.ContainerVolumeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerArgs Empty = new ContainerArgs();

    /**
     * If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
     * 
     */
    @Import(name="attach")
    private @Nullable Output<Boolean> attach;

    public Optional<Output<Boolean>> attach() {
        return Optional.ofNullable(this.attach);
    }

    /**
     * Add or drop certrain linux capabilities.
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<ContainerCapabilitiesArgs> capabilities;

    public Optional<Output<ContainerCapabilitiesArgs>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * The command to use to start the container. For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be
     * `[&#34;/usr/bin/myprogram&#34;,&#34;-&#34;,&#34;baz.con&#34;]`.
     * 
     */
    @Import(name="command")
    private @Nullable Output<List<String>> command;

    public Optional<Output<List<String>>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
     * 
     */
    @Import(name="cpuSet")
    private @Nullable Output<String> cpuSet;

    public Optional<Output<String>> cpuSet() {
        return Optional.ofNullable(this.cpuSet);
    }

    /**
     * CPU shares (relative weight) for the container.
     * 
     */
    @Import(name="cpuShares")
    private @Nullable Output<Integer> cpuShares;

    public Optional<Output<Integer>> cpuShares() {
        return Optional.ofNullable(this.cpuShares);
    }

    /**
     * If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on
     * successful stop.
     * 
     */
    @Import(name="destroyGraceSeconds")
    private @Nullable Output<Integer> destroyGraceSeconds;

    public Optional<Output<Integer>> destroyGraceSeconds() {
        return Optional.ofNullable(this.destroyGraceSeconds);
    }

    /**
     * Bind devices to the container.
     * 
     */
    @Import(name="devices")
    private @Nullable Output<List<ContainerDeviceArgs>> devices;

    public Optional<Output<List<ContainerDeviceArgs>>> devices() {
        return Optional.ofNullable(this.devices);
    }

    /**
     * DNS servers to use.
     * 
     */
    @Import(name="dns")
    private @Nullable Output<List<String>> dns;

    public Optional<Output<List<String>>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
     * 
     */
    @Import(name="dnsOpts")
    private @Nullable Output<List<String>> dnsOpts;

    public Optional<Output<List<String>>> dnsOpts() {
        return Optional.ofNullable(this.dnsOpts);
    }

    /**
     * DNS search domains that are used when bare unqualified hostnames are used inside of the container.
     * 
     */
    @Import(name="dnsSearches")
    private @Nullable Output<List<String>> dnsSearches;

    public Optional<Output<List<String>>> dnsSearches() {
        return Optional.ofNullable(this.dnsSearches);
    }

    /**
     * Domain name of the container.
     * 
     */
    @Import(name="domainname")
    private @Nullable Output<String> domainname;

    public Optional<Output<String>> domainname() {
        return Optional.ofNullable(this.domainname);
    }

    /**
     * The command to use as the Entrypoint for the container. The Entrypoint allows you to configure a container to run as an
     * executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be
     * `&#34;/usr/bin/myprogra&#34;]`.
     * 
     */
    @Import(name="entrypoints")
    private @Nullable Output<List<String>> entrypoints;

    public Optional<Output<List<String>>> entrypoints() {
        return Optional.ofNullable(this.entrypoints);
    }

    /**
     * Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<String>> envs;

    public Optional<Output<List<String>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * Additional groups for the container user
     * 
     */
    @Import(name="groupAdds")
    private @Nullable Output<List<String>> groupAdds;

    public Optional<Output<List<String>>> groupAdds() {
        return Optional.ofNullable(this.groupAdds);
    }

    /**
     * A test to perform to check that the container is healthy
     * 
     */
    @Import(name="healthcheck")
    private @Nullable Output<ContainerHealthcheckArgs> healthcheck;

    public Optional<Output<ContainerHealthcheckArgs>> healthcheck() {
        return Optional.ofNullable(this.healthcheck);
    }

    /**
     * Hostname of the container.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Additional hosts to add to the container.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<ContainerHostArgs>> hosts;

    public Optional<Output<List<ContainerHostArgs>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * The ID of the image to back this container. The easiest way to get this value is to use the `docker_image` resource as
     * is shown in the example.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    public Output<String> image() {
        return this.image;
    }

    /**
     * Configured whether an init process should be injected for this container. If unset this will default to the `dockerd`
     * defaults.
     * 
     */
    @Import(name="init")
    private @Nullable Output<Boolean> init;

    public Optional<Output<Boolean>> init() {
        return Optional.ofNullable(this.init);
    }

    /**
     * IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:&lt;name|id&gt;` or
     * `host`.
     * 
     */
    @Import(name="ipcMode")
    private @Nullable Output<String> ipcMode;

    public Optional<Output<String>> ipcMode() {
        return Optional.ofNullable(this.ipcMode);
    }

    /**
     * User-defined key/value metadata
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<ContainerLabelArgs>> labels;

    public Optional<Output<List<ContainerLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Set of links for link based connectivity between containers that are running on the same host.
     * 
     * @deprecated
     * The --link flag is a legacy feature of Docker. It may eventually be removed.
     * 
     */
    @Deprecated /* The --link flag is a legacy feature of Docker. It may eventually be removed. */
    @Import(name="links")
    private @Nullable Output<List<String>> links;

    @Deprecated /* The --link flag is a legacy feature of Docker. It may eventually be removed. */
    public Optional<Output<List<String>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The logging driver to use for the container. Defaults to `json-file`.
     * 
     */
    @Import(name="logDriver")
    private @Nullable Output<String> logDriver;

    public Optional<Output<String>> logDriver() {
        return Optional.ofNullable(this.logDriver);
    }

    /**
     * Key/value pairs to use as options for the logging driver.
     * 
     */
    @Import(name="logOpts")
    private @Nullable Output<Map<String,Object>> logOpts;

    public Optional<Output<Map<String,Object>>> logOpts() {
        return Optional.ofNullable(this.logOpts);
    }

    /**
     * Save the container logs (`attach` must be enabled). Defaults to `false`.
     * 
     */
    @Import(name="logs")
    private @Nullable Output<Boolean> logs;

    public Optional<Output<Boolean>> logs() {
        return Optional.ofNullable(this.logs);
    }

    /**
     * The maximum amount of times to an attempt a restart when `restart` is set to &#39;on-failure&#39;.
     * 
     */
    @Import(name="maxRetryCount")
    private @Nullable Output<Integer> maxRetryCount;

    public Optional<Output<Integer>> maxRetryCount() {
        return Optional.ofNullable(this.maxRetryCount);
    }

    /**
     * The memory limit for the container in MBs.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The total memory limit (memory + swap) for the container in MBs. This setting may compute to `-1` after `terraform
     * apply` if the target host doesn&#39;t support memory swap, when that is the case docker will use a soft limitation.
     * 
     */
    @Import(name="memorySwap")
    private @Nullable Output<Integer> memorySwap;

    public Optional<Output<Integer>> memorySwap() {
        return Optional.ofNullable(this.memorySwap);
    }

    /**
     * Specification for mounts to be added to containers created as part of the service.
     * 
     */
    @Import(name="mounts")
    private @Nullable Output<List<ContainerMountArgs>> mounts;

    public Optional<Output<List<ContainerMountArgs>>> mounts() {
        return Optional.ofNullable(this.mounts);
    }

    /**
     * If `true`, then the Docker container will be kept running. If `false`, then as long as the container exists, Terraform
     * assumes it is successful. Defaults to `true`.
     * 
     */
    @Import(name="mustRun")
    private @Nullable Output<Boolean> mustRun;

    public Optional<Output<Boolean>> mustRun() {
        return Optional.ofNullable(this.mustRun);
    }

    /**
     * The name of the container.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set an alias for the container in all specified networks
     * 
     * @deprecated
     * Use networks_advanced instead. Will be removed in v3.0.0
     * 
     */
    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    @Import(name="networkAliases")
    private @Nullable Output<List<String>> networkAliases;

    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    public Optional<Output<List<String>>> networkAliases() {
        return Optional.ofNullable(this.networkAliases);
    }

    /**
     * Network mode of the container.
     * 
     */
    @Import(name="networkMode")
    private @Nullable Output<String> networkMode;

    public Optional<Output<String>> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }

    /**
     * ID of the networks in which the container is.
     * 
     * @deprecated
     * Use networks_advanced instead. Will be removed in v3.0.0
     * 
     */
    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    @Deprecated /* Use networks_advanced instead. Will be removed in v3.0.0 */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * The networks the container is attached to
     * 
     */
    @Import(name="networksAdvanced")
    private @Nullable Output<List<ContainerNetworksAdvancedArgs>> networksAdvanced;

    public Optional<Output<List<ContainerNetworksAdvancedArgs>>> networksAdvanced() {
        return Optional.ofNullable(this.networksAdvanced);
    }

    /**
     * he PID (Process) Namespace mode for the container. Either `container:&lt;name|id&gt;` or `host`.
     * 
     */
    @Import(name="pidMode")
    private @Nullable Output<String> pidMode;

    public Optional<Output<String>> pidMode() {
        return Optional.ofNullable(this.pidMode);
    }

    /**
     * Publish a container&#39;s port(s) to the host.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<ContainerPortArgs>> ports;

    public Optional<Output<List<ContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * If `true`, the container runs in privileged mode.
     * 
     */
    @Import(name="privileged")
    private @Nullable Output<Boolean> privileged;

    public Optional<Output<Boolean>> privileged() {
        return Optional.ofNullable(this.privileged);
    }

    /**
     * Publish all ports of the container.
     * 
     */
    @Import(name="publishAllPorts")
    private @Nullable Output<Boolean> publishAllPorts;

    public Optional<Output<Boolean>> publishAllPorts() {
        return Optional.ofNullable(this.publishAllPorts);
    }

    /**
     * If `true`, the container will be started as readonly. Defaults to `false`.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
     * 
     */
    @Import(name="removeVolumes")
    private @Nullable Output<Boolean> removeVolumes;

    public Optional<Output<Boolean>> removeVolumes() {
        return Optional.ofNullable(this.removeVolumes);
    }

    /**
     * The restart policy for the container. Must be one of &#39;no&#39;, &#39;on-failure&#39;, &#39;always&#39;, &#39;unless-stopped&#39;. Defaults to `no`.
     * 
     */
    @Import(name="restart")
    private @Nullable Output<String> restart;

    public Optional<Output<String>> restart() {
        return Optional.ofNullable(this.restart);
    }

    /**
     * If `true`, then the container will be automatically removed after his execution. Terraform won&#39;t check this container
     * after creation. Defaults to `false`.
     * 
     */
    @Import(name="rm")
    private @Nullable Output<Boolean> rm;

    public Optional<Output<Boolean>> rm() {
        return Optional.ofNullable(this.rm);
    }

    /**
     * List of string values to customize labels for MLS systems, such as SELinux. See
     * https://docs.docker.com/engine/reference/run/#security-configuration.
     * 
     */
    @Import(name="securityOpts")
    private @Nullable Output<List<String>> securityOpts;

    public Optional<Output<List<String>>> securityOpts() {
        return Optional.ofNullable(this.securityOpts);
    }

    /**
     * Size of `/dev/shm` in MBs.
     * 
     */
    @Import(name="shmSize")
    private @Nullable Output<Integer> shmSize;

    public Optional<Output<Integer>> shmSize() {
        return Optional.ofNullable(this.shmSize);
    }

    /**
     * If `true`, then the Docker container will be started after creation. If `false`, then the container is only created.
     * Defaults to `true`.
     * 
     */
    @Import(name="start")
    private @Nullable Output<Boolean> start;

    public Optional<Output<Boolean>> start() {
        return Optional.ofNullable(this.start);
    }

    /**
     * If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
     * 
     */
    @Import(name="stdinOpen")
    private @Nullable Output<Boolean> stdinOpen;

    public Optional<Output<Boolean>> stdinOpen() {
        return Optional.ofNullable(this.stdinOpen);
    }

    /**
     * Key/value pairs for the storage driver options, e.g. `size`: `120G`
     * 
     */
    @Import(name="storageOpts")
    private @Nullable Output<Map<String,Object>> storageOpts;

    public Optional<Output<Map<String,Object>>> storageOpts() {
        return Optional.ofNullable(this.storageOpts);
    }

    /**
     * A map of kernel parameters (sysctls) to set in the container.
     * 
     */
    @Import(name="sysctls")
    private @Nullable Output<Map<String,Object>> sysctls;

    public Optional<Output<Map<String,Object>>> sysctls() {
        return Optional.ofNullable(this.sysctls);
    }

    /**
     * A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
     * 
     */
    @Import(name="tmpfs")
    private @Nullable Output<Map<String,Object>> tmpfs;

    public Optional<Output<Map<String,Object>>> tmpfs() {
        return Optional.ofNullable(this.tmpfs);
    }

    /**
     * If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
     * 
     */
    @Import(name="tty")
    private @Nullable Output<Boolean> tty;

    public Optional<Output<Boolean>> tty() {
        return Optional.ofNullable(this.tty);
    }

    /**
     * Ulimit options to add.
     * 
     */
    @Import(name="ulimits")
    private @Nullable Output<List<ContainerUlimitArgs>> ulimits;

    public Optional<Output<List<ContainerUlimitArgs>>> ulimits() {
        return Optional.ofNullable(this.ulimits);
    }

    /**
     * Specifies files to upload to the container before starting it. Only one of `content` or `content_base64` can be set and
     * at least one of them has to be set.
     * 
     */
    @Import(name="uploads")
    private @Nullable Output<List<ContainerUploadArgs>> uploads;

    public Optional<Output<List<ContainerUploadArgs>>> uploads() {
        return Optional.ofNullable(this.uploads);
    }

    /**
     * User used for run the first process. Format is `user` or `user:group` which user and group can be passed literraly or by
     * name.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     * 
     */
    @Import(name="usernsMode")
    private @Nullable Output<String> usernsMode;

    public Optional<Output<String>> usernsMode() {
        return Optional.ofNullable(this.usernsMode);
    }

    /**
     * Spec for mounting volumes in the container.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<ContainerVolumeArgs>> volumes;

    public Optional<Output<List<ContainerVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    /**
     * The working directory for commands to run in.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private ContainerArgs() {}

    private ContainerArgs(ContainerArgs $) {
        this.attach = $.attach;
        this.capabilities = $.capabilities;
        this.command = $.command;
        this.cpuSet = $.cpuSet;
        this.cpuShares = $.cpuShares;
        this.destroyGraceSeconds = $.destroyGraceSeconds;
        this.devices = $.devices;
        this.dns = $.dns;
        this.dnsOpts = $.dnsOpts;
        this.dnsSearches = $.dnsSearches;
        this.domainname = $.domainname;
        this.entrypoints = $.entrypoints;
        this.envs = $.envs;
        this.groupAdds = $.groupAdds;
        this.healthcheck = $.healthcheck;
        this.hostname = $.hostname;
        this.hosts = $.hosts;
        this.image = $.image;
        this.init = $.init;
        this.ipcMode = $.ipcMode;
        this.labels = $.labels;
        this.links = $.links;
        this.logDriver = $.logDriver;
        this.logOpts = $.logOpts;
        this.logs = $.logs;
        this.maxRetryCount = $.maxRetryCount;
        this.memory = $.memory;
        this.memorySwap = $.memorySwap;
        this.mounts = $.mounts;
        this.mustRun = $.mustRun;
        this.name = $.name;
        this.networkAliases = $.networkAliases;
        this.networkMode = $.networkMode;
        this.networks = $.networks;
        this.networksAdvanced = $.networksAdvanced;
        this.pidMode = $.pidMode;
        this.ports = $.ports;
        this.privileged = $.privileged;
        this.publishAllPorts = $.publishAllPorts;
        this.readOnly = $.readOnly;
        this.removeVolumes = $.removeVolumes;
        this.restart = $.restart;
        this.rm = $.rm;
        this.securityOpts = $.securityOpts;
        this.shmSize = $.shmSize;
        this.start = $.start;
        this.stdinOpen = $.stdinOpen;
        this.storageOpts = $.storageOpts;
        this.sysctls = $.sysctls;
        this.tmpfs = $.tmpfs;
        this.tty = $.tty;
        this.ulimits = $.ulimits;
        this.uploads = $.uploads;
        this.user = $.user;
        this.usernsMode = $.usernsMode;
        this.volumes = $.volumes;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerArgs $;

        public Builder() {
            $ = new ContainerArgs();
        }

        public Builder(ContainerArgs defaults) {
            $ = new ContainerArgs(Objects.requireNonNull(defaults));
        }

        public Builder attach(@Nullable Output<Boolean> attach) {
            $.attach = attach;
            return this;
        }

        public Builder attach(Boolean attach) {
            return attach(Output.of(attach));
        }

        public Builder capabilities(@Nullable Output<ContainerCapabilitiesArgs> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(ContainerCapabilitiesArgs capabilities) {
            return capabilities(Output.of(capabilities));
        }

        public Builder command(@Nullable Output<List<String>> command) {
            $.command = command;
            return this;
        }

        public Builder command(List<String> command) {
            return command(Output.of(command));
        }

        public Builder command(String... command) {
            return command(List.of(command));
        }

        public Builder cpuSet(@Nullable Output<String> cpuSet) {
            $.cpuSet = cpuSet;
            return this;
        }

        public Builder cpuSet(String cpuSet) {
            return cpuSet(Output.of(cpuSet));
        }

        public Builder cpuShares(@Nullable Output<Integer> cpuShares) {
            $.cpuShares = cpuShares;
            return this;
        }

        public Builder cpuShares(Integer cpuShares) {
            return cpuShares(Output.of(cpuShares));
        }

        public Builder destroyGraceSeconds(@Nullable Output<Integer> destroyGraceSeconds) {
            $.destroyGraceSeconds = destroyGraceSeconds;
            return this;
        }

        public Builder destroyGraceSeconds(Integer destroyGraceSeconds) {
            return destroyGraceSeconds(Output.of(destroyGraceSeconds));
        }

        public Builder devices(@Nullable Output<List<ContainerDeviceArgs>> devices) {
            $.devices = devices;
            return this;
        }

        public Builder devices(List<ContainerDeviceArgs> devices) {
            return devices(Output.of(devices));
        }

        public Builder devices(ContainerDeviceArgs... devices) {
            return devices(List.of(devices));
        }

        public Builder dns(@Nullable Output<List<String>> dns) {
            $.dns = dns;
            return this;
        }

        public Builder dns(List<String> dns) {
            return dns(Output.of(dns));
        }

        public Builder dns(String... dns) {
            return dns(List.of(dns));
        }

        public Builder dnsOpts(@Nullable Output<List<String>> dnsOpts) {
            $.dnsOpts = dnsOpts;
            return this;
        }

        public Builder dnsOpts(List<String> dnsOpts) {
            return dnsOpts(Output.of(dnsOpts));
        }

        public Builder dnsOpts(String... dnsOpts) {
            return dnsOpts(List.of(dnsOpts));
        }

        public Builder dnsSearches(@Nullable Output<List<String>> dnsSearches) {
            $.dnsSearches = dnsSearches;
            return this;
        }

        public Builder dnsSearches(List<String> dnsSearches) {
            return dnsSearches(Output.of(dnsSearches));
        }

        public Builder dnsSearches(String... dnsSearches) {
            return dnsSearches(List.of(dnsSearches));
        }

        public Builder domainname(@Nullable Output<String> domainname) {
            $.domainname = domainname;
            return this;
        }

        public Builder domainname(String domainname) {
            return domainname(Output.of(domainname));
        }

        public Builder entrypoints(@Nullable Output<List<String>> entrypoints) {
            $.entrypoints = entrypoints;
            return this;
        }

        public Builder entrypoints(List<String> entrypoints) {
            return entrypoints(Output.of(entrypoints));
        }

        public Builder entrypoints(String... entrypoints) {
            return entrypoints(List.of(entrypoints));
        }

        public Builder envs(@Nullable Output<List<String>> envs) {
            $.envs = envs;
            return this;
        }

        public Builder envs(List<String> envs) {
            return envs(Output.of(envs));
        }

        public Builder envs(String... envs) {
            return envs(List.of(envs));
        }

        public Builder groupAdds(@Nullable Output<List<String>> groupAdds) {
            $.groupAdds = groupAdds;
            return this;
        }

        public Builder groupAdds(List<String> groupAdds) {
            return groupAdds(Output.of(groupAdds));
        }

        public Builder groupAdds(String... groupAdds) {
            return groupAdds(List.of(groupAdds));
        }

        public Builder healthcheck(@Nullable Output<ContainerHealthcheckArgs> healthcheck) {
            $.healthcheck = healthcheck;
            return this;
        }

        public Builder healthcheck(ContainerHealthcheckArgs healthcheck) {
            return healthcheck(Output.of(healthcheck));
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder hosts(@Nullable Output<List<ContainerHostArgs>> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(List<ContainerHostArgs> hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder hosts(ContainerHostArgs... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder init(@Nullable Output<Boolean> init) {
            $.init = init;
            return this;
        }

        public Builder init(Boolean init) {
            return init(Output.of(init));
        }

        public Builder ipcMode(@Nullable Output<String> ipcMode) {
            $.ipcMode = ipcMode;
            return this;
        }

        public Builder ipcMode(String ipcMode) {
            return ipcMode(Output.of(ipcMode));
        }

        public Builder labels(@Nullable Output<List<ContainerLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<ContainerLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(ContainerLabelArgs... labels) {
            return labels(List.of(labels));
        }

        public Builder links(@Nullable Output<List<String>> links) {
            $.links = links;
            return this;
        }

        public Builder links(List<String> links) {
            return links(Output.of(links));
        }

        public Builder links(String... links) {
            return links(List.of(links));
        }

        public Builder logDriver(@Nullable Output<String> logDriver) {
            $.logDriver = logDriver;
            return this;
        }

        public Builder logDriver(String logDriver) {
            return logDriver(Output.of(logDriver));
        }

        public Builder logOpts(@Nullable Output<Map<String,Object>> logOpts) {
            $.logOpts = logOpts;
            return this;
        }

        public Builder logOpts(Map<String,Object> logOpts) {
            return logOpts(Output.of(logOpts));
        }

        public Builder logs(@Nullable Output<Boolean> logs) {
            $.logs = logs;
            return this;
        }

        public Builder logs(Boolean logs) {
            return logs(Output.of(logs));
        }

        public Builder maxRetryCount(@Nullable Output<Integer> maxRetryCount) {
            $.maxRetryCount = maxRetryCount;
            return this;
        }

        public Builder maxRetryCount(Integer maxRetryCount) {
            return maxRetryCount(Output.of(maxRetryCount));
        }

        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        public Builder memorySwap(@Nullable Output<Integer> memorySwap) {
            $.memorySwap = memorySwap;
            return this;
        }

        public Builder memorySwap(Integer memorySwap) {
            return memorySwap(Output.of(memorySwap));
        }

        public Builder mounts(@Nullable Output<List<ContainerMountArgs>> mounts) {
            $.mounts = mounts;
            return this;
        }

        public Builder mounts(List<ContainerMountArgs> mounts) {
            return mounts(Output.of(mounts));
        }

        public Builder mounts(ContainerMountArgs... mounts) {
            return mounts(List.of(mounts));
        }

        public Builder mustRun(@Nullable Output<Boolean> mustRun) {
            $.mustRun = mustRun;
            return this;
        }

        public Builder mustRun(Boolean mustRun) {
            return mustRun(Output.of(mustRun));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkAliases(@Nullable Output<List<String>> networkAliases) {
            $.networkAliases = networkAliases;
            return this;
        }

        public Builder networkAliases(List<String> networkAliases) {
            return networkAliases(Output.of(networkAliases));
        }

        public Builder networkAliases(String... networkAliases) {
            return networkAliases(List.of(networkAliases));
        }

        public Builder networkMode(@Nullable Output<String> networkMode) {
            $.networkMode = networkMode;
            return this;
        }

        public Builder networkMode(String networkMode) {
            return networkMode(Output.of(networkMode));
        }

        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        public Builder networksAdvanced(@Nullable Output<List<ContainerNetworksAdvancedArgs>> networksAdvanced) {
            $.networksAdvanced = networksAdvanced;
            return this;
        }

        public Builder networksAdvanced(List<ContainerNetworksAdvancedArgs> networksAdvanced) {
            return networksAdvanced(Output.of(networksAdvanced));
        }

        public Builder networksAdvanced(ContainerNetworksAdvancedArgs... networksAdvanced) {
            return networksAdvanced(List.of(networksAdvanced));
        }

        public Builder pidMode(@Nullable Output<String> pidMode) {
            $.pidMode = pidMode;
            return this;
        }

        public Builder pidMode(String pidMode) {
            return pidMode(Output.of(pidMode));
        }

        public Builder ports(@Nullable Output<List<ContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(List<ContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        public Builder ports(ContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        public Builder privileged(@Nullable Output<Boolean> privileged) {
            $.privileged = privileged;
            return this;
        }

        public Builder privileged(Boolean privileged) {
            return privileged(Output.of(privileged));
        }

        public Builder publishAllPorts(@Nullable Output<Boolean> publishAllPorts) {
            $.publishAllPorts = publishAllPorts;
            return this;
        }

        public Builder publishAllPorts(Boolean publishAllPorts) {
            return publishAllPorts(Output.of(publishAllPorts));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder removeVolumes(@Nullable Output<Boolean> removeVolumes) {
            $.removeVolumes = removeVolumes;
            return this;
        }

        public Builder removeVolumes(Boolean removeVolumes) {
            return removeVolumes(Output.of(removeVolumes));
        }

        public Builder restart(@Nullable Output<String> restart) {
            $.restart = restart;
            return this;
        }

        public Builder restart(String restart) {
            return restart(Output.of(restart));
        }

        public Builder rm(@Nullable Output<Boolean> rm) {
            $.rm = rm;
            return this;
        }

        public Builder rm(Boolean rm) {
            return rm(Output.of(rm));
        }

        public Builder securityOpts(@Nullable Output<List<String>> securityOpts) {
            $.securityOpts = securityOpts;
            return this;
        }

        public Builder securityOpts(List<String> securityOpts) {
            return securityOpts(Output.of(securityOpts));
        }

        public Builder securityOpts(String... securityOpts) {
            return securityOpts(List.of(securityOpts));
        }

        public Builder shmSize(@Nullable Output<Integer> shmSize) {
            $.shmSize = shmSize;
            return this;
        }

        public Builder shmSize(Integer shmSize) {
            return shmSize(Output.of(shmSize));
        }

        public Builder start(@Nullable Output<Boolean> start) {
            $.start = start;
            return this;
        }

        public Builder start(Boolean start) {
            return start(Output.of(start));
        }

        public Builder stdinOpen(@Nullable Output<Boolean> stdinOpen) {
            $.stdinOpen = stdinOpen;
            return this;
        }

        public Builder stdinOpen(Boolean stdinOpen) {
            return stdinOpen(Output.of(stdinOpen));
        }

        public Builder storageOpts(@Nullable Output<Map<String,Object>> storageOpts) {
            $.storageOpts = storageOpts;
            return this;
        }

        public Builder storageOpts(Map<String,Object> storageOpts) {
            return storageOpts(Output.of(storageOpts));
        }

        public Builder sysctls(@Nullable Output<Map<String,Object>> sysctls) {
            $.sysctls = sysctls;
            return this;
        }

        public Builder sysctls(Map<String,Object> sysctls) {
            return sysctls(Output.of(sysctls));
        }

        public Builder tmpfs(@Nullable Output<Map<String,Object>> tmpfs) {
            $.tmpfs = tmpfs;
            return this;
        }

        public Builder tmpfs(Map<String,Object> tmpfs) {
            return tmpfs(Output.of(tmpfs));
        }

        public Builder tty(@Nullable Output<Boolean> tty) {
            $.tty = tty;
            return this;
        }

        public Builder tty(Boolean tty) {
            return tty(Output.of(tty));
        }

        public Builder ulimits(@Nullable Output<List<ContainerUlimitArgs>> ulimits) {
            $.ulimits = ulimits;
            return this;
        }

        public Builder ulimits(List<ContainerUlimitArgs> ulimits) {
            return ulimits(Output.of(ulimits));
        }

        public Builder ulimits(ContainerUlimitArgs... ulimits) {
            return ulimits(List.of(ulimits));
        }

        public Builder uploads(@Nullable Output<List<ContainerUploadArgs>> uploads) {
            $.uploads = uploads;
            return this;
        }

        public Builder uploads(List<ContainerUploadArgs> uploads) {
            return uploads(Output.of(uploads));
        }

        public Builder uploads(ContainerUploadArgs... uploads) {
            return uploads(List.of(uploads));
        }

        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public Builder usernsMode(@Nullable Output<String> usernsMode) {
            $.usernsMode = usernsMode;
            return this;
        }

        public Builder usernsMode(String usernsMode) {
            return usernsMode(Output.of(usernsMode));
        }

        public Builder volumes(@Nullable Output<List<ContainerVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(List<ContainerVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        public Builder volumes(ContainerVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public ContainerArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            return $;
        }
    }

}
