// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.config.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryAuth extends com.pulumi.resources.InvokeArgs {

    public static final RegistryAuth Empty = new RegistryAuth();

    @Import(name="address", required=true)
    private String address;

    public String address() {
        return this.address;
    }

    @Import(name="configFile")
    private @Nullable String configFile;

    public Optional<String> configFile() {
        return Optional.ofNullable(this.configFile);
    }

    @Import(name="configFileContent")
    private @Nullable String configFileContent;

    public Optional<String> configFileContent() {
        return Optional.ofNullable(this.configFileContent);
    }

    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="username")
    private @Nullable String username;

    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    private RegistryAuth() {}

    private RegistryAuth(RegistryAuth $) {
        this.address = $.address;
        this.configFile = $.configFile;
        this.configFileContent = $.configFileContent;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryAuth defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryAuth $;

        public Builder() {
            $ = new RegistryAuth();
        }

        public Builder(RegistryAuth defaults) {
            $ = new RegistryAuth(Objects.requireNonNull(defaults));
        }

        public Builder address(String address) {
            $.address = address;
            return this;
        }

        public Builder configFile(@Nullable String configFile) {
            $.configFile = configFile;
            return this;
        }

        public Builder configFileContent(@Nullable String configFileContent) {
            $.configFileContent = configFileContent;
            return this;
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        public RegistryAuth build() {
            $.address = Objects.requireNonNull($.address, "expected parameter 'address' to be non-null");
            return $;
        }
    }

}
