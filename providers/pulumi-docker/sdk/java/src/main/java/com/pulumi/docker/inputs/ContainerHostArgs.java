// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


public final class ContainerHostArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerHostArgs Empty = new ContainerHostArgs();

    @Import(name="host", required=true)
      private final Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    @Import(name="ip", required=true)
      private final Output<String> ip;

    public Output<String> ip() {
        return this.ip;
    }

    public ContainerHostArgs(
        Output<String> host,
        Output<String> ip) {
        this.host = Objects.requireNonNull(host, "expected parameter 'host' to be non-null");
        this.ip = Objects.requireNonNull(ip, "expected parameter 'ip' to be non-null");
    }

    private ContainerHostArgs() {
        this.host = Codegen.empty();
        this.ip = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerHostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> host;
        private Output<String> ip;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerHostArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.ip = defaults.ip;
        }

        public Builder host(Output<String> host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        public Builder host(String host) {
            this.host = Output.of(Objects.requireNonNull(host));
            return this;
        }
        public Builder ip(Output<String> ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        public Builder ip(String ip) {
            this.ip = Output.of(Objects.requireNonNull(ip));
            return this;
        }        public ContainerHostArgs build() {
            return new ContainerHostArgs(host, ip);
        }
    }
}
