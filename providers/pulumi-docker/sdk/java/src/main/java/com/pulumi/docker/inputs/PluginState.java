// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.PluginGrantPermissionGetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluginState extends com.pulumi.resources.ResourceArgs {

    public static final PluginState Empty = new PluginState();

    /**
     * Docker Plugin alias
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * HTTP client timeout to enable the plugin
     * 
     */
    @Import(name="enableTimeout")
    private @Nullable Output<Integer> enableTimeout;

    public Optional<Output<Integer>> enableTimeout() {
        return Optional.ofNullable(this.enableTimeout);
    }

    /**
     * If `true` the plugin is enabled. Defaults to `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<String>> envs;

    public Optional<Output<List<String>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * If true, then the plugin is destroyed forcibly
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * If true, then the plugin is disabled forcibly
     * 
     */
    @Import(name="forceDisable")
    private @Nullable Output<Boolean> forceDisable;

    public Optional<Output<Boolean>> forceDisable() {
        return Optional.ofNullable(this.forceDisable);
    }

    /**
     * If true, grant all permissions necessary to run the plugin
     * 
     */
    @Import(name="grantAllPermissions")
    private @Nullable Output<Boolean> grantAllPermissions;

    public Optional<Output<Boolean>> grantAllPermissions() {
        return Optional.ofNullable(this.grantAllPermissions);
    }

    /**
     * Grant specific permissions only
     * 
     */
    @Import(name="grantPermissions")
    private @Nullable Output<List<PluginGrantPermissionGetArgs>> grantPermissions;

    public Optional<Output<List<PluginGrantPermissionGetArgs>>> grantPermissions() {
        return Optional.ofNullable(this.grantPermissions);
    }

    /**
     * Docker Plugin name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Docker Plugin Reference
     * 
     */
    @Import(name="pluginReference")
    private @Nullable Output<String> pluginReference;

    public Optional<Output<String>> pluginReference() {
        return Optional.ofNullable(this.pluginReference);
    }

    private PluginState() {}

    private PluginState(PluginState $) {
        this.alias = $.alias;
        this.enableTimeout = $.enableTimeout;
        this.enabled = $.enabled;
        this.envs = $.envs;
        this.forceDestroy = $.forceDestroy;
        this.forceDisable = $.forceDisable;
        this.grantAllPermissions = $.grantAllPermissions;
        this.grantPermissions = $.grantPermissions;
        this.name = $.name;
        this.pluginReference = $.pluginReference;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginState $;

        public Builder() {
            $ = new PluginState();
        }

        public Builder(PluginState defaults) {
            $ = new PluginState(Objects.requireNonNull(defaults));
        }

        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        public Builder enableTimeout(@Nullable Output<Integer> enableTimeout) {
            $.enableTimeout = enableTimeout;
            return this;
        }

        public Builder enableTimeout(Integer enableTimeout) {
            return enableTimeout(Output.of(enableTimeout));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder envs(@Nullable Output<List<String>> envs) {
            $.envs = envs;
            return this;
        }

        public Builder envs(List<String> envs) {
            return envs(Output.of(envs));
        }

        public Builder envs(String... envs) {
            return envs(List.of(envs));
        }

        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        public Builder forceDisable(@Nullable Output<Boolean> forceDisable) {
            $.forceDisable = forceDisable;
            return this;
        }

        public Builder forceDisable(Boolean forceDisable) {
            return forceDisable(Output.of(forceDisable));
        }

        public Builder grantAllPermissions(@Nullable Output<Boolean> grantAllPermissions) {
            $.grantAllPermissions = grantAllPermissions;
            return this;
        }

        public Builder grantAllPermissions(Boolean grantAllPermissions) {
            return grantAllPermissions(Output.of(grantAllPermissions));
        }

        public Builder grantPermissions(@Nullable Output<List<PluginGrantPermissionGetArgs>> grantPermissions) {
            $.grantPermissions = grantPermissions;
            return this;
        }

        public Builder grantPermissions(List<PluginGrantPermissionGetArgs> grantPermissions) {
            return grantPermissions(Output.of(grantPermissions));
        }

        public Builder grantPermissions(PluginGrantPermissionGetArgs... grantPermissions) {
            return grantPermissions(List.of(grantPermissions));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pluginReference(@Nullable Output<String> pluginReference) {
            $.pluginReference = pluginReference;
            return this;
        }

        public Builder pluginReference(String pluginReference) {
            return pluginReference(Output.of(pluginReference));
        }

        public PluginState build() {
            return $;
        }
    }

}
