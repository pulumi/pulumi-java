// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.docker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.docker.inputs.RemoteImageBuildGetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemoteImageState extends com.pulumi.resources.ResourceArgs {

    public static final RemoteImageState Empty = new RemoteImageState();

    /**
     * Configuration to build an image. Please see [docker build command
     * reference](https://docs.docker.com/engine/reference/commandline/build/#options) too.
     * 
     */
    @Import(name="build")
    private @Nullable Output<RemoteImageBuildGetArgs> build;

    public Optional<Output<RemoteImageBuildGetArgs>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * If true, then the image is removed forcibly when the resource is destroyed.
     * 
     */
    @Import(name="forceRemove")
    private @Nullable Output<Boolean> forceRemove;

    public Optional<Output<Boolean>> forceRemove() {
        return Optional.ofNullable(this.forceRemove);
    }

    /**
     * If true, then the Docker image won&#39;t be deleted on destroy operation. If this is false, it will delete the image from
     * the docker local storage on destroy operation.
     * 
     */
    @Import(name="keepLocally")
    private @Nullable Output<Boolean> keepLocally;

    public Optional<Output<Boolean>> keepLocally() {
        return Optional.ofNullable(this.keepLocally);
    }

    /**
     * The ID of the image in the form of `sha256:&lt;hash&gt;` image digest. Do not confuse it with the default `latest` tag.
     * 
     * @deprecated
     * Use repo_digest instead
     * 
     */
    @Deprecated /* Use repo_digest instead */
    @Import(name="latest")
    private @Nullable Output<String> latest;

    @Deprecated /* Use repo_digest instead */
    public Optional<Output<String>> latest() {
        return Optional.ofNullable(this.latest);
    }

    /**
     * The name of the Docker image, including any tags or SHA256 repo digests.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * @deprecated
     * Is unused and will be removed.
     * 
     */
    @Deprecated /* Is unused and will be removed. */
    @Import(name="output")
    private @Nullable Output<String> output;

    @Deprecated /* Is unused and will be removed. */
    public Optional<Output<String>> output() {
        return Optional.ofNullable(this.output);
    }

    /**
     * A value which cause an image pull when changed
     * 
     * @deprecated
     * Use field pull_triggers instead
     * 
     */
    @Deprecated /* Use field pull_triggers instead */
    @Import(name="pullTrigger")
    private @Nullable Output<String> pullTrigger;

    @Deprecated /* Use field pull_triggers instead */
    public Optional<Output<String>> pullTrigger() {
        return Optional.ofNullable(this.pullTrigger);
    }

    /**
     * List of values which cause an image pull when changed. This is used to store the image digest from the registry when
     * using the [docker_registry_image](../data-sources/registry_image.md).
     * 
     */
    @Import(name="pullTriggers")
    private @Nullable Output<List<String>> pullTriggers;

    public Optional<Output<List<String>>> pullTriggers() {
        return Optional.ofNullable(this.pullTriggers);
    }

    /**
     * The image sha256 digest in the form of `repo[:tag]@sha256:&lt;hash&gt;`.
     * 
     */
    @Import(name="repoDigest")
    private @Nullable Output<String> repoDigest;

    public Optional<Output<String>> repoDigest() {
        return Optional.ofNullable(this.repoDigest);
    }

    private RemoteImageState() {}

    private RemoteImageState(RemoteImageState $) {
        this.build = $.build;
        this.forceRemove = $.forceRemove;
        this.keepLocally = $.keepLocally;
        this.latest = $.latest;
        this.name = $.name;
        this.output = $.output;
        this.pullTrigger = $.pullTrigger;
        this.pullTriggers = $.pullTriggers;
        this.repoDigest = $.repoDigest;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteImageState $;

        public Builder() {
            $ = new RemoteImageState();
        }

        public Builder(RemoteImageState defaults) {
            $ = new RemoteImageState(Objects.requireNonNull(defaults));
        }

        public Builder build(@Nullable Output<RemoteImageBuildGetArgs> build) {
            $.build = build;
            return this;
        }

        public Builder build(RemoteImageBuildGetArgs build) {
            return build(Output.of(build));
        }

        public Builder forceRemove(@Nullable Output<Boolean> forceRemove) {
            $.forceRemove = forceRemove;
            return this;
        }

        public Builder forceRemove(Boolean forceRemove) {
            return forceRemove(Output.of(forceRemove));
        }

        public Builder keepLocally(@Nullable Output<Boolean> keepLocally) {
            $.keepLocally = keepLocally;
            return this;
        }

        public Builder keepLocally(Boolean keepLocally) {
            return keepLocally(Output.of(keepLocally));
        }

        public Builder latest(@Nullable Output<String> latest) {
            $.latest = latest;
            return this;
        }

        public Builder latest(String latest) {
            return latest(Output.of(latest));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder output(@Nullable Output<String> output) {
            $.output = output;
            return this;
        }

        public Builder output(String output) {
            return output(Output.of(output));
        }

        public Builder pullTrigger(@Nullable Output<String> pullTrigger) {
            $.pullTrigger = pullTrigger;
            return this;
        }

        public Builder pullTrigger(String pullTrigger) {
            return pullTrigger(Output.of(pullTrigger));
        }

        public Builder pullTriggers(@Nullable Output<List<String>> pullTriggers) {
            $.pullTriggers = pullTriggers;
            return this;
        }

        public Builder pullTriggers(List<String> pullTriggers) {
            return pullTriggers(Output.of(pullTriggers));
        }

        public Builder pullTriggers(String... pullTriggers) {
            return pullTriggers(List.of(pullTriggers));
        }

        public Builder repoDigest(@Nullable Output<String> repoDigest) {
            $.repoDigest = repoDigest;
            return this;
        }

        public Builder repoDigest(String repoDigest) {
            return repoDigest(Output.of(repoDigest));
        }

        public RemoteImageState build() {
            return $;
        }
    }

}
