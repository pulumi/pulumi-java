// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.awsnative.iotevents.inputs.DetectorModelAction;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.
 * 
 */
public final class DetectorModelEvent extends com.pulumi.resources.InvokeArgs {

    public static final DetectorModelEvent Empty = new DetectorModelEvent();

    /**
     * The actions to be performed.
     * 
     */
    @Import(name="actions")
    private @Nullable List<DetectorModelAction> actions;

    /**
     * @return The actions to be performed.
     * 
     */
    public Optional<List<DetectorModelAction>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
     * 
     */
    @Import(name="condition")
    private @Nullable String condition;

    /**
     * @return The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
     * 
     */
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The name of the event.
     * 
     */
    @Import(name="eventName", required=true)
    private String eventName;

    /**
     * @return The name of the event.
     * 
     */
    public String eventName() {
        return this.eventName;
    }

    private DetectorModelEvent() {}

    private DetectorModelEvent(DetectorModelEvent $) {
        this.actions = $.actions;
        this.condition = $.condition;
        this.eventName = $.eventName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorModelEvent defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorModelEvent $;

        public Builder() {
            $ = new DetectorModelEvent();
        }

        public Builder(DetectorModelEvent defaults) {
            $ = new DetectorModelEvent(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions The actions to be performed.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable List<DetectorModelAction> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions The actions to be performed.
         * 
         * @return builder
         * 
         */
        public Builder actions(DetectorModelAction... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param condition The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable String condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param eventName The name of the event.
         * 
         * @return builder
         * 
         */
        public Builder eventName(String eventName) {
            $.eventName = eventName;
            return this;
        }

        public DetectorModelEvent build() {
            $.eventName = Objects.requireNonNull($.eventName, "expected parameter 'eventName' to be non-null");
            return $;
        }
    }

}
