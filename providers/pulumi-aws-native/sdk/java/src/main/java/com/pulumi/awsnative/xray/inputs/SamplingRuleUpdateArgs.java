// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.xray.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamplingRuleUpdateArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamplingRuleUpdateArgs Empty = new SamplingRuleUpdateArgs();

    /**
     * Matches attributes derived from the request.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Object> attributes;

    public Optional<Output<Object>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @Import(name="fixedRate")
    private @Nullable Output<Double> fixedRate;

    public Optional<Output<Double>> fixedRate() {
        return Optional.ofNullable(this.fixedRate);
    }

    /**
     * Matches the HTTP method from a request URL.
     * 
     */
    @Import(name="hTTPMethod")
    private @Nullable Output<String> hTTPMethod;

    public Optional<Output<String>> hTTPMethod() {
        return Optional.ofNullable(this.hTTPMethod);
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @Import(name="reservoirSize")
    private @Nullable Output<Integer> reservoirSize;

    public Optional<Output<Integer>> reservoirSize() {
        return Optional.ofNullable(this.reservoirSize);
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @Import(name="resourceARN")
    private @Nullable Output<String> resourceARN;

    public Optional<Output<String>> resourceARN() {
        return Optional.ofNullable(this.resourceARN);
    }

    @Import(name="ruleARN")
    private @Nullable Output<String> ruleARN;

    public Optional<Output<String>> ruleARN() {
        return Optional.ofNullable(this.ruleARN);
    }

    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Matches the name that the service uses to identify itself in segments.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Matches the origin that the service uses to identify its type in segments.
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @Import(name="uRLPath")
    private @Nullable Output<String> uRLPath;

    public Optional<Output<String>> uRLPath() {
        return Optional.ofNullable(this.uRLPath);
    }

    private SamplingRuleUpdateArgs() {}

    private SamplingRuleUpdateArgs(SamplingRuleUpdateArgs $) {
        this.attributes = $.attributes;
        this.fixedRate = $.fixedRate;
        this.hTTPMethod = $.hTTPMethod;
        this.host = $.host;
        this.priority = $.priority;
        this.reservoirSize = $.reservoirSize;
        this.resourceARN = $.resourceARN;
        this.ruleARN = $.ruleARN;
        this.ruleName = $.ruleName;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
        this.uRLPath = $.uRLPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamplingRuleUpdateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamplingRuleUpdateArgs $;

        public Builder() {
            $ = new SamplingRuleUpdateArgs();
        }

        public Builder(SamplingRuleUpdateArgs defaults) {
            $ = new SamplingRuleUpdateArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<Object> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Object attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder fixedRate(@Nullable Output<Double> fixedRate) {
            $.fixedRate = fixedRate;
            return this;
        }

        public Builder fixedRate(Double fixedRate) {
            return fixedRate(Output.of(fixedRate));
        }

        public Builder hTTPMethod(@Nullable Output<String> hTTPMethod) {
            $.hTTPMethod = hTTPMethod;
            return this;
        }

        public Builder hTTPMethod(String hTTPMethod) {
            return hTTPMethod(Output.of(hTTPMethod));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder reservoirSize(@Nullable Output<Integer> reservoirSize) {
            $.reservoirSize = reservoirSize;
            return this;
        }

        public Builder reservoirSize(Integer reservoirSize) {
            return reservoirSize(Output.of(reservoirSize));
        }

        public Builder resourceARN(@Nullable Output<String> resourceARN) {
            $.resourceARN = resourceARN;
            return this;
        }

        public Builder resourceARN(String resourceARN) {
            return resourceARN(Output.of(resourceARN));
        }

        public Builder ruleARN(@Nullable Output<String> ruleARN) {
            $.ruleARN = ruleARN;
            return this;
        }

        public Builder ruleARN(String ruleARN) {
            return ruleARN(Output.of(ruleARN));
        }

        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        public Builder uRLPath(@Nullable Output<String> uRLPath) {
            $.uRLPath = uRLPath;
            return this;
        }

        public Builder uRLPath(String uRLPath) {
            return uRLPath(Output.of(uRLPath));
        }

        public SamplingRuleUpdateArgs build() {
            return $;
        }
    }

}
