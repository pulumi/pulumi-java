// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.datasync.inputs;

import com.pulumi.awsnative.datasync.enums.TaskOptionsAtime;
import com.pulumi.awsnative.datasync.enums.TaskOptionsGid;
import com.pulumi.awsnative.datasync.enums.TaskOptionsLogLevel;
import com.pulumi.awsnative.datasync.enums.TaskOptionsMtime;
import com.pulumi.awsnative.datasync.enums.TaskOptionsOverwriteMode;
import com.pulumi.awsnative.datasync.enums.TaskOptionsPosixPermissions;
import com.pulumi.awsnative.datasync.enums.TaskOptionsPreserveDeletedFiles;
import com.pulumi.awsnative.datasync.enums.TaskOptionsPreserveDevices;
import com.pulumi.awsnative.datasync.enums.TaskOptionsSecurityDescriptorCopyFlags;
import com.pulumi.awsnative.datasync.enums.TaskOptionsTaskQueueing;
import com.pulumi.awsnative.datasync.enums.TaskOptionsTransferMode;
import com.pulumi.awsnative.datasync.enums.TaskOptionsUid;
import com.pulumi.awsnative.datasync.enums.TaskOptionsVerifyMode;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents the options that are available to control the behavior of a StartTaskExecution operation.
 * 
 */
public final class TaskOptions extends com.pulumi.resources.InvokeArgs {

    public static final TaskOptions Empty = new TaskOptions();

    /**
     * A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
     * 
     */
    @Import(name="atime")
    private @Nullable TaskOptionsAtime atime;

    /**
     * @return A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
     * 
     */
    public Optional<TaskOptionsAtime> atime() {
        return Optional.ofNullable(this.atime);
    }

    /**
     * A value that limits the bandwidth used by AWS DataSync.
     * 
     */
    @Import(name="bytesPerSecond")
    private @Nullable Integer bytesPerSecond;

    /**
     * @return A value that limits the bandwidth used by AWS DataSync.
     * 
     */
    public Optional<Integer> bytesPerSecond() {
        return Optional.ofNullable(this.bytesPerSecond);
    }

    /**
     * The group ID (GID) of the file&#39;s owners.
     * 
     */
    @Import(name="gid")
    private @Nullable TaskOptionsGid gid;

    /**
     * @return The group ID (GID) of the file&#39;s owners.
     * 
     */
    public Optional<TaskOptionsGid> gid() {
        return Optional.ofNullable(this.gid);
    }

    /**
     * A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
     * 
     */
    @Import(name="logLevel")
    private @Nullable TaskOptionsLogLevel logLevel;

    /**
     * @return A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
     * 
     */
    public Optional<TaskOptionsLogLevel> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
     * 
     */
    @Import(name="mtime")
    private @Nullable TaskOptionsMtime mtime;

    /**
     * @return A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
     * 
     */
    public Optional<TaskOptionsMtime> mtime() {
        return Optional.ofNullable(this.mtime);
    }

    /**
     * A value that determines whether files at the destination should be overwritten or preserved when copying files.
     * 
     */
    @Import(name="overwriteMode")
    private @Nullable TaskOptionsOverwriteMode overwriteMode;

    /**
     * @return A value that determines whether files at the destination should be overwritten or preserved when copying files.
     * 
     */
    public Optional<TaskOptionsOverwriteMode> overwriteMode() {
        return Optional.ofNullable(this.overwriteMode);
    }

    /**
     * A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
     * 
     */
    @Import(name="posixPermissions")
    private @Nullable TaskOptionsPosixPermissions posixPermissions;

    /**
     * @return A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
     * 
     */
    public Optional<TaskOptionsPosixPermissions> posixPermissions() {
        return Optional.ofNullable(this.posixPermissions);
    }

    /**
     * A value that specifies whether files in the destination that don&#39;t exist in the source file system should be preserved.
     * 
     */
    @Import(name="preserveDeletedFiles")
    private @Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles;

    /**
     * @return A value that specifies whether files in the destination that don&#39;t exist in the source file system should be preserved.
     * 
     */
    public Optional<TaskOptionsPreserveDeletedFiles> preserveDeletedFiles() {
        return Optional.ofNullable(this.preserveDeletedFiles);
    }

    /**
     * A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
     * 
     */
    @Import(name="preserveDevices")
    private @Nullable TaskOptionsPreserveDevices preserveDevices;

    /**
     * @return A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
     * 
     */
    public Optional<TaskOptionsPreserveDevices> preserveDevices() {
        return Optional.ofNullable(this.preserveDevices);
    }

    /**
     * A value that determines which components of the SMB security descriptor are copied during transfer.
     * 
     */
    @Import(name="securityDescriptorCopyFlags")
    private @Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags;

    /**
     * @return A value that determines which components of the SMB security descriptor are copied during transfer.
     * 
     */
    public Optional<TaskOptionsSecurityDescriptorCopyFlags> securityDescriptorCopyFlags() {
        return Optional.ofNullable(this.securityDescriptorCopyFlags);
    }

    /**
     * A value that determines whether tasks should be queued before executing the tasks.
     * 
     */
    @Import(name="taskQueueing")
    private @Nullable TaskOptionsTaskQueueing taskQueueing;

    /**
     * @return A value that determines whether tasks should be queued before executing the tasks.
     * 
     */
    public Optional<TaskOptionsTaskQueueing> taskQueueing() {
        return Optional.ofNullable(this.taskQueueing);
    }

    /**
     * A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
     * 
     */
    @Import(name="transferMode")
    private @Nullable TaskOptionsTransferMode transferMode;

    /**
     * @return A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
     * 
     */
    public Optional<TaskOptionsTransferMode> transferMode() {
        return Optional.ofNullable(this.transferMode);
    }

    /**
     * The user ID (UID) of the file&#39;s owner.
     * 
     */
    @Import(name="uid")
    private @Nullable TaskOptionsUid uid;

    /**
     * @return The user ID (UID) of the file&#39;s owner.
     * 
     */
    public Optional<TaskOptionsUid> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
     * 
     */
    @Import(name="verifyMode")
    private @Nullable TaskOptionsVerifyMode verifyMode;

    /**
     * @return A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
     * 
     */
    public Optional<TaskOptionsVerifyMode> verifyMode() {
        return Optional.ofNullable(this.verifyMode);
    }

    private TaskOptions() {}

    private TaskOptions(TaskOptions $) {
        this.atime = $.atime;
        this.bytesPerSecond = $.bytesPerSecond;
        this.gid = $.gid;
        this.logLevel = $.logLevel;
        this.mtime = $.mtime;
        this.overwriteMode = $.overwriteMode;
        this.posixPermissions = $.posixPermissions;
        this.preserveDeletedFiles = $.preserveDeletedFiles;
        this.preserveDevices = $.preserveDevices;
        this.securityDescriptorCopyFlags = $.securityDescriptorCopyFlags;
        this.taskQueueing = $.taskQueueing;
        this.transferMode = $.transferMode;
        this.uid = $.uid;
        this.verifyMode = $.verifyMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskOptions $;

        public Builder() {
            $ = new TaskOptions();
        }

        public Builder(TaskOptions defaults) {
            $ = new TaskOptions(Objects.requireNonNull(defaults));
        }

        /**
         * @param atime A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
         * 
         * @return builder
         * 
         */
        public Builder atime(@Nullable TaskOptionsAtime atime) {
            $.atime = atime;
            return this;
        }

        /**
         * @param bytesPerSecond A value that limits the bandwidth used by AWS DataSync.
         * 
         * @return builder
         * 
         */
        public Builder bytesPerSecond(@Nullable Integer bytesPerSecond) {
            $.bytesPerSecond = bytesPerSecond;
            return this;
        }

        /**
         * @param gid The group ID (GID) of the file&#39;s owners.
         * 
         * @return builder
         * 
         */
        public Builder gid(@Nullable TaskOptionsGid gid) {
            $.gid = gid;
            return this;
        }

        /**
         * @param logLevel A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable TaskOptionsLogLevel logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param mtime A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
         * 
         * @return builder
         * 
         */
        public Builder mtime(@Nullable TaskOptionsMtime mtime) {
            $.mtime = mtime;
            return this;
        }

        /**
         * @param overwriteMode A value that determines whether files at the destination should be overwritten or preserved when copying files.
         * 
         * @return builder
         * 
         */
        public Builder overwriteMode(@Nullable TaskOptionsOverwriteMode overwriteMode) {
            $.overwriteMode = overwriteMode;
            return this;
        }

        /**
         * @param posixPermissions A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
         * 
         * @return builder
         * 
         */
        public Builder posixPermissions(@Nullable TaskOptionsPosixPermissions posixPermissions) {
            $.posixPermissions = posixPermissions;
            return this;
        }

        /**
         * @param preserveDeletedFiles A value that specifies whether files in the destination that don&#39;t exist in the source file system should be preserved.
         * 
         * @return builder
         * 
         */
        public Builder preserveDeletedFiles(@Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles) {
            $.preserveDeletedFiles = preserveDeletedFiles;
            return this;
        }

        /**
         * @param preserveDevices A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
         * 
         * @return builder
         * 
         */
        public Builder preserveDevices(@Nullable TaskOptionsPreserveDevices preserveDevices) {
            $.preserveDevices = preserveDevices;
            return this;
        }

        /**
         * @param securityDescriptorCopyFlags A value that determines which components of the SMB security descriptor are copied during transfer.
         * 
         * @return builder
         * 
         */
        public Builder securityDescriptorCopyFlags(@Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags) {
            $.securityDescriptorCopyFlags = securityDescriptorCopyFlags;
            return this;
        }

        /**
         * @param taskQueueing A value that determines whether tasks should be queued before executing the tasks.
         * 
         * @return builder
         * 
         */
        public Builder taskQueueing(@Nullable TaskOptionsTaskQueueing taskQueueing) {
            $.taskQueueing = taskQueueing;
            return this;
        }

        /**
         * @param transferMode A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
         * 
         * @return builder
         * 
         */
        public Builder transferMode(@Nullable TaskOptionsTransferMode transferMode) {
            $.transferMode = transferMode;
            return this;
        }

        /**
         * @param uid The user ID (UID) of the file&#39;s owner.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable TaskOptionsUid uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param verifyMode A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
         * 
         * @return builder
         * 
         */
        public Builder verifyMode(@Nullable TaskOptionsVerifyMode verifyMode) {
            $.verifyMode = verifyMode;
            return this;
        }

        public TaskOptions build() {
            return $;
        }
    }

}
