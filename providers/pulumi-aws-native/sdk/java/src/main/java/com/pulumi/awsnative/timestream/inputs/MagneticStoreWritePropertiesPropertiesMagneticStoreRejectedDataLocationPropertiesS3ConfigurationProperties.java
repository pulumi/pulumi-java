// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.timestream.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * S3 configuration for location to store rejections from magnetic store writes
 * 
 */
public final class MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties extends com.pulumi.resources.InvokeArgs {

    public static final MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties Empty = new MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties();

    /**
     * The bucket name used to store the data.
     * 
     */
    @Import(name="bucketName", required=true)
    private String bucketName;

    public String bucketName() {
        return this.bucketName;
    }

    /**
     * Either SSE_KMS or SSE_S3.
     * 
     */
    @Import(name="encryptionOption", required=true)
    private String encryptionOption;

    public String encryptionOption() {
        return this.encryptionOption;
    }

    /**
     * Must be provided if SSE_KMS is specified as the encryption option
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable String kmsKeyId;

    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * String used to prefix all data in the bucket.
     * 
     */
    @Import(name="objectKeyPrefix")
    private @Nullable String objectKeyPrefix;

    public Optional<String> objectKeyPrefix() {
        return Optional.ofNullable(this.objectKeyPrefix);
    }

    private MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties() {}

    private MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties(MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties $) {
        this.bucketName = $.bucketName;
        this.encryptionOption = $.encryptionOption;
        this.kmsKeyId = $.kmsKeyId;
        this.objectKeyPrefix = $.objectKeyPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties $;

        public Builder() {
            $ = new MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties();
        }

        public Builder(MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties defaults) {
            $ = new MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties(Objects.requireNonNull(defaults));
        }

        public Builder bucketName(String bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder encryptionOption(String encryptionOption) {
            $.encryptionOption = encryptionOption;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder objectKeyPrefix(@Nullable String objectKeyPrefix) {
            $.objectKeyPrefix = objectKeyPrefix;
            return this;
        }

        public MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties build() {
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.encryptionOption = Objects.requireNonNull($.encryptionOption, "expected parameter 'encryptionOption' to be non-null");
            return $;
        }
    }

}
