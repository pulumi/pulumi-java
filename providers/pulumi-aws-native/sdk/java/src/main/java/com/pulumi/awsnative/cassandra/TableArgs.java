// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cassandra;

import com.pulumi.awsnative.cassandra.inputs.TableBillingModeArgs;
import com.pulumi.awsnative.cassandra.inputs.TableClusteringKeyColumnArgs;
import com.pulumi.awsnative.cassandra.inputs.TableColumnArgs;
import com.pulumi.awsnative.cassandra.inputs.TableEncryptionSpecificationArgs;
import com.pulumi.awsnative.cassandra.inputs.TableTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    @Import(name="billingMode")
    private @Nullable Output<TableBillingModeArgs> billingMode;

    public Optional<Output<TableBillingModeArgs>> billingMode() {
        return Optional.ofNullable(this.billingMode);
    }

    /**
     * Clustering key columns of the table
     * 
     */
    @Import(name="clusteringKeyColumns")
    private @Nullable Output<List<TableClusteringKeyColumnArgs>> clusteringKeyColumns;

    public Optional<Output<List<TableClusteringKeyColumnArgs>>> clusteringKeyColumns() {
        return Optional.ofNullable(this.clusteringKeyColumns);
    }

    /**
     * Default TTL (Time To Live) in seconds, where zero is disabled. If the value is greater than zero, TTL is enabled for the entire table and an expiration timestamp is added to each column.
     * 
     */
    @Import(name="defaultTimeToLive")
    private @Nullable Output<Integer> defaultTimeToLive;

    public Optional<Output<Integer>> defaultTimeToLive() {
        return Optional.ofNullable(this.defaultTimeToLive);
    }

    @Import(name="encryptionSpecification")
    private @Nullable Output<TableEncryptionSpecificationArgs> encryptionSpecification;

    public Optional<Output<TableEncryptionSpecificationArgs>> encryptionSpecification() {
        return Optional.ofNullable(this.encryptionSpecification);
    }

    /**
     * Name for Cassandra keyspace
     * 
     */
    @Import(name="keyspaceName", required=true)
    private Output<String> keyspaceName;

    public Output<String> keyspaceName() {
        return this.keyspaceName;
    }

    /**
     * Partition key columns of the table
     * 
     */
    @Import(name="partitionKeyColumns", required=true)
    private Output<List<TableColumnArgs>> partitionKeyColumns;

    public Output<List<TableColumnArgs>> partitionKeyColumns() {
        return this.partitionKeyColumns;
    }

    /**
     * Indicates whether point in time recovery is enabled (true) or disabled (false) on the table
     * 
     */
    @Import(name="pointInTimeRecoveryEnabled")
    private @Nullable Output<Boolean> pointInTimeRecoveryEnabled;

    public Optional<Output<Boolean>> pointInTimeRecoveryEnabled() {
        return Optional.ofNullable(this.pointInTimeRecoveryEnabled);
    }

    /**
     * Non-key columns of the table
     * 
     */
    @Import(name="regularColumns")
    private @Nullable Output<List<TableColumnArgs>> regularColumns;

    public Optional<Output<List<TableColumnArgs>>> regularColumns() {
        return Optional.ofNullable(this.regularColumns);
    }

    /**
     * Name for Cassandra table
     * 
     */
    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    /**
     * An array of key-value pairs to apply to this resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<TableTagArgs>> tags;

    public Optional<Output<List<TableTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private TableArgs() {}

    private TableArgs(TableArgs $) {
        this.billingMode = $.billingMode;
        this.clusteringKeyColumns = $.clusteringKeyColumns;
        this.defaultTimeToLive = $.defaultTimeToLive;
        this.encryptionSpecification = $.encryptionSpecification;
        this.keyspaceName = $.keyspaceName;
        this.partitionKeyColumns = $.partitionKeyColumns;
        this.pointInTimeRecoveryEnabled = $.pointInTimeRecoveryEnabled;
        this.regularColumns = $.regularColumns;
        this.tableName = $.tableName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableArgs $;

        public Builder() {
            $ = new TableArgs();
        }

        public Builder(TableArgs defaults) {
            $ = new TableArgs(Objects.requireNonNull(defaults));
        }

        public Builder billingMode(@Nullable Output<TableBillingModeArgs> billingMode) {
            $.billingMode = billingMode;
            return this;
        }

        public Builder billingMode(TableBillingModeArgs billingMode) {
            return billingMode(Output.of(billingMode));
        }

        public Builder clusteringKeyColumns(@Nullable Output<List<TableClusteringKeyColumnArgs>> clusteringKeyColumns) {
            $.clusteringKeyColumns = clusteringKeyColumns;
            return this;
        }

        public Builder clusteringKeyColumns(List<TableClusteringKeyColumnArgs> clusteringKeyColumns) {
            return clusteringKeyColumns(Output.of(clusteringKeyColumns));
        }

        public Builder clusteringKeyColumns(TableClusteringKeyColumnArgs... clusteringKeyColumns) {
            return clusteringKeyColumns(List.of(clusteringKeyColumns));
        }

        public Builder defaultTimeToLive(@Nullable Output<Integer> defaultTimeToLive) {
            $.defaultTimeToLive = defaultTimeToLive;
            return this;
        }

        public Builder defaultTimeToLive(Integer defaultTimeToLive) {
            return defaultTimeToLive(Output.of(defaultTimeToLive));
        }

        public Builder encryptionSpecification(@Nullable Output<TableEncryptionSpecificationArgs> encryptionSpecification) {
            $.encryptionSpecification = encryptionSpecification;
            return this;
        }

        public Builder encryptionSpecification(TableEncryptionSpecificationArgs encryptionSpecification) {
            return encryptionSpecification(Output.of(encryptionSpecification));
        }

        public Builder keyspaceName(Output<String> keyspaceName) {
            $.keyspaceName = keyspaceName;
            return this;
        }

        public Builder keyspaceName(String keyspaceName) {
            return keyspaceName(Output.of(keyspaceName));
        }

        public Builder partitionKeyColumns(Output<List<TableColumnArgs>> partitionKeyColumns) {
            $.partitionKeyColumns = partitionKeyColumns;
            return this;
        }

        public Builder partitionKeyColumns(List<TableColumnArgs> partitionKeyColumns) {
            return partitionKeyColumns(Output.of(partitionKeyColumns));
        }

        public Builder partitionKeyColumns(TableColumnArgs... partitionKeyColumns) {
            return partitionKeyColumns(List.of(partitionKeyColumns));
        }

        public Builder pointInTimeRecoveryEnabled(@Nullable Output<Boolean> pointInTimeRecoveryEnabled) {
            $.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
            return this;
        }

        public Builder pointInTimeRecoveryEnabled(Boolean pointInTimeRecoveryEnabled) {
            return pointInTimeRecoveryEnabled(Output.of(pointInTimeRecoveryEnabled));
        }

        public Builder regularColumns(@Nullable Output<List<TableColumnArgs>> regularColumns) {
            $.regularColumns = regularColumns;
            return this;
        }

        public Builder regularColumns(List<TableColumnArgs> regularColumns) {
            return regularColumns(Output.of(regularColumns));
        }

        public Builder regularColumns(TableColumnArgs... regularColumns) {
            return regularColumns(List.of(regularColumns));
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder tags(@Nullable Output<List<TableTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<TableTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(TableTagArgs... tags) {
            return tags(List.of(tags));
        }

        public TableArgs build() {
            $.keyspaceName = Objects.requireNonNull($.keyspaceName, "expected parameter 'keyspaceName' to be non-null");
            $.partitionKeyColumns = Objects.requireNonNull($.partitionKeyColumns, "expected parameter 'partitionKeyColumns' to be non-null");
            return $;
        }
    }

}
