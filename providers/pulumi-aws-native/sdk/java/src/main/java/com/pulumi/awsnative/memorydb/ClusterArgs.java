// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.memorydb;

import com.pulumi.awsnative.memorydb.inputs.ClusterEndpointArgs;
import com.pulumi.awsnative.memorydb.inputs.ClusterTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The name of the Access Control List to associate with the cluster.
     * 
     */
    @Import(name="aCLName", required=true)
    private Output<String> aCLName;

    public Output<String> aCLName() {
        return this.aCLName;
    }

    /**
     * A flag that enables automatic minor version upgrade when set to true.
     * 
     * You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
     * 
     */
    @Import(name="autoMinorVersionUpgrade")
    private @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Optional<Output<Boolean>> autoMinorVersionUpgrade() {
        return Optional.ofNullable(this.autoMinorVersionUpgrade);
    }

    /**
     * The cluster endpoint.
     * 
     */
    @Import(name="clusterEndpoint")
    private @Nullable Output<ClusterEndpointArgs> clusterEndpoint;

    public Optional<Output<ClusterEndpointArgs>> clusterEndpoint() {
        return Optional.ofNullable(this.clusterEndpoint);
    }

    /**
     * The name of the cluster. This value must be unique as it also serves as the cluster identifier.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * An optional description of the cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Redis engine version used by the cluster.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
     * 
     */
    @Import(name="finalSnapshotName")
    private @Nullable Output<String> finalSnapshotName;

    public Optional<Output<String>> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }

    /**
     * The ID of the KMS key used to encrypt the cluster.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<String> maintenanceWindow;

    public Optional<Output<String>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * The compute and memory capacity of the nodes in the cluster.
     * 
     */
    @Import(name="nodeType", required=true)
    private Output<String> nodeType;

    public Output<String> nodeType() {
        return this.nodeType;
    }

    /**
     * The number of replicas to apply to each shard. The limit is 5.
     * 
     */
    @Import(name="numReplicasPerShard")
    private @Nullable Output<Integer> numReplicasPerShard;

    public Optional<Output<Integer>> numReplicasPerShard() {
        return Optional.ofNullable(this.numReplicasPerShard);
    }

    /**
     * The number of shards the cluster will contain.
     * 
     */
    @Import(name="numShards")
    private @Nullable Output<Integer> numShards;

    public Optional<Output<Integer>> numShards() {
        return Optional.ofNullable(this.numShards);
    }

    /**
     * The name of the parameter group associated with the cluster.
     * 
     */
    @Import(name="parameterGroupName")
    private @Nullable Output<String> parameterGroupName;

    public Optional<Output<String>> parameterGroupName() {
        return Optional.ofNullable(this.parameterGroupName);
    }

    /**
     * The port number on which each member of the cluster accepts connections.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * One or more Amazon VPC security groups associated with this cluster.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
     * 
     */
    @Import(name="snapshotArns")
    private @Nullable Output<List<String>> snapshotArns;

    public Optional<Output<List<String>>> snapshotArns() {
        return Optional.ofNullable(this.snapshotArns);
    }

    /**
     * The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
     * 
     */
    @Import(name="snapshotName")
    private @Nullable Output<String> snapshotName;

    public Optional<Output<String>> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     * 
     */
    @Import(name="snapshotRetentionLimit")
    private @Nullable Output<Integer> snapshotRetentionLimit;

    public Optional<Output<Integer>> snapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }

    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     * 
     */
    @Import(name="snapshotWindow")
    private @Nullable Output<String> snapshotWindow;

    public Optional<Output<String>> snapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     * 
     */
    @Import(name="snsTopicArn")
    private @Nullable Output<String> snsTopicArn;

    public Optional<Output<String>> snsTopicArn() {
        return Optional.ofNullable(this.snsTopicArn);
    }

    /**
     * The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     * 
     */
    @Import(name="snsTopicStatus")
    private @Nullable Output<String> snsTopicStatus;

    public Optional<Output<String>> snsTopicStatus() {
        return Optional.ofNullable(this.snsTopicStatus);
    }

    /**
     * The name of the subnet group to be used for the cluster.
     * 
     */
    @Import(name="subnetGroupName")
    private @Nullable Output<String> subnetGroupName;

    public Optional<Output<String>> subnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }

    /**
     * A flag that enables in-transit encryption when set to true.
     * 
     * You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
     * 
     */
    @Import(name="tLSEnabled")
    private @Nullable Output<Boolean> tLSEnabled;

    public Optional<Output<Boolean>> tLSEnabled() {
        return Optional.ofNullable(this.tLSEnabled);
    }

    /**
     * An array of key-value pairs to apply to this cluster.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ClusterTagArgs>> tags;

    public Optional<Output<List<ClusterTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.aCLName = $.aCLName;
        this.autoMinorVersionUpgrade = $.autoMinorVersionUpgrade;
        this.clusterEndpoint = $.clusterEndpoint;
        this.clusterName = $.clusterName;
        this.description = $.description;
        this.engineVersion = $.engineVersion;
        this.finalSnapshotName = $.finalSnapshotName;
        this.kmsKeyId = $.kmsKeyId;
        this.maintenanceWindow = $.maintenanceWindow;
        this.nodeType = $.nodeType;
        this.numReplicasPerShard = $.numReplicasPerShard;
        this.numShards = $.numShards;
        this.parameterGroupName = $.parameterGroupName;
        this.port = $.port;
        this.securityGroupIds = $.securityGroupIds;
        this.snapshotArns = $.snapshotArns;
        this.snapshotName = $.snapshotName;
        this.snapshotRetentionLimit = $.snapshotRetentionLimit;
        this.snapshotWindow = $.snapshotWindow;
        this.snsTopicArn = $.snsTopicArn;
        this.snsTopicStatus = $.snsTopicStatus;
        this.subnetGroupName = $.subnetGroupName;
        this.tLSEnabled = $.tLSEnabled;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        public Builder aCLName(Output<String> aCLName) {
            $.aCLName = aCLName;
            return this;
        }

        public Builder aCLName(String aCLName) {
            return aCLName(Output.of(aCLName));
        }

        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            $.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            return autoMinorVersionUpgrade(Output.of(autoMinorVersionUpgrade));
        }

        public Builder clusterEndpoint(@Nullable Output<ClusterEndpointArgs> clusterEndpoint) {
            $.clusterEndpoint = clusterEndpoint;
            return this;
        }

        public Builder clusterEndpoint(ClusterEndpointArgs clusterEndpoint) {
            return clusterEndpoint(Output.of(clusterEndpoint));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            $.finalSnapshotName = finalSnapshotName;
            return this;
        }

        public Builder finalSnapshotName(String finalSnapshotName) {
            return finalSnapshotName(Output.of(finalSnapshotName));
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        public Builder maintenanceWindow(@Nullable Output<String> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder maintenanceWindow(String maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        public Builder nodeType(Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        public Builder numReplicasPerShard(@Nullable Output<Integer> numReplicasPerShard) {
            $.numReplicasPerShard = numReplicasPerShard;
            return this;
        }

        public Builder numReplicasPerShard(Integer numReplicasPerShard) {
            return numReplicasPerShard(Output.of(numReplicasPerShard));
        }

        public Builder numShards(@Nullable Output<Integer> numShards) {
            $.numShards = numShards;
            return this;
        }

        public Builder numShards(Integer numShards) {
            return numShards(Output.of(numShards));
        }

        public Builder parameterGroupName(@Nullable Output<String> parameterGroupName) {
            $.parameterGroupName = parameterGroupName;
            return this;
        }

        public Builder parameterGroupName(String parameterGroupName) {
            return parameterGroupName(Output.of(parameterGroupName));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        public Builder snapshotArns(@Nullable Output<List<String>> snapshotArns) {
            $.snapshotArns = snapshotArns;
            return this;
        }

        public Builder snapshotArns(List<String> snapshotArns) {
            return snapshotArns(Output.of(snapshotArns));
        }

        public Builder snapshotArns(String... snapshotArns) {
            return snapshotArns(List.of(snapshotArns));
        }

        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        public Builder snapshotRetentionLimit(@Nullable Output<Integer> snapshotRetentionLimit) {
            $.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }

        public Builder snapshotRetentionLimit(Integer snapshotRetentionLimit) {
            return snapshotRetentionLimit(Output.of(snapshotRetentionLimit));
        }

        public Builder snapshotWindow(@Nullable Output<String> snapshotWindow) {
            $.snapshotWindow = snapshotWindow;
            return this;
        }

        public Builder snapshotWindow(String snapshotWindow) {
            return snapshotWindow(Output.of(snapshotWindow));
        }

        public Builder snsTopicArn(@Nullable Output<String> snsTopicArn) {
            $.snsTopicArn = snsTopicArn;
            return this;
        }

        public Builder snsTopicArn(String snsTopicArn) {
            return snsTopicArn(Output.of(snsTopicArn));
        }

        public Builder snsTopicStatus(@Nullable Output<String> snsTopicStatus) {
            $.snsTopicStatus = snsTopicStatus;
            return this;
        }

        public Builder snsTopicStatus(String snsTopicStatus) {
            return snsTopicStatus(Output.of(snsTopicStatus));
        }

        public Builder subnetGroupName(@Nullable Output<String> subnetGroupName) {
            $.subnetGroupName = subnetGroupName;
            return this;
        }

        public Builder subnetGroupName(String subnetGroupName) {
            return subnetGroupName(Output.of(subnetGroupName));
        }

        public Builder tLSEnabled(@Nullable Output<Boolean> tLSEnabled) {
            $.tLSEnabled = tLSEnabled;
            return this;
        }

        public Builder tLSEnabled(Boolean tLSEnabled) {
            return tLSEnabled(Output.of(tLSEnabled));
        }

        public Builder tags(@Nullable Output<List<ClusterTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ClusterTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ClusterTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ClusterArgs build() {
            $.aCLName = Objects.requireNonNull($.aCLName, "expected parameter 'aCLName' to be non-null");
            $.nodeType = Objects.requireNonNull($.nodeType, "expected parameter 'nodeType' to be non-null");
            return $;
        }
    }

}
