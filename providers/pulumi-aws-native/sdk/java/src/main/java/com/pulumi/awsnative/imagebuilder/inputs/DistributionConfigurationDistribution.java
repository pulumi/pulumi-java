// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.imagebuilder.inputs;

import com.pulumi.awsnative.imagebuilder.inputs.DistributionConfigurationDistributionAmiDistributionConfigurationProperties;
import com.pulumi.awsnative.imagebuilder.inputs.DistributionConfigurationDistributionContainerDistributionConfigurationProperties;
import com.pulumi.awsnative.imagebuilder.inputs.DistributionConfigurationLaunchTemplateConfiguration;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The distributions of the distribution configuration.
 * 
 */
public final class DistributionConfigurationDistribution extends com.pulumi.resources.InvokeArgs {

    public static final DistributionConfigurationDistribution Empty = new DistributionConfigurationDistribution();

    /**
     * The specific AMI settings (for example, launch permissions, AMI tags).
     * 
     */
    @Import(name="amiDistributionConfiguration")
    private @Nullable DistributionConfigurationDistributionAmiDistributionConfigurationProperties amiDistributionConfiguration;

    /**
     * @return The specific AMI settings (for example, launch permissions, AMI tags).
     * 
     */
    public Optional<DistributionConfigurationDistributionAmiDistributionConfigurationProperties> amiDistributionConfiguration() {
        return Optional.ofNullable(this.amiDistributionConfiguration);
    }

    /**
     * Container distribution settings for encryption, licensing, and sharing in a specific Region.
     * 
     */
    @Import(name="containerDistributionConfiguration")
    private @Nullable DistributionConfigurationDistributionContainerDistributionConfigurationProperties containerDistributionConfiguration;

    /**
     * @return Container distribution settings for encryption, licensing, and sharing in a specific Region.
     * 
     */
    public Optional<DistributionConfigurationDistributionContainerDistributionConfigurationProperties> containerDistributionConfiguration() {
        return Optional.ofNullable(this.containerDistributionConfiguration);
    }

    /**
     * A group of launchTemplateConfiguration settings that apply to image distribution.
     * 
     */
    @Import(name="launchTemplateConfigurations")
    private @Nullable List<DistributionConfigurationLaunchTemplateConfiguration> launchTemplateConfigurations;

    /**
     * @return A group of launchTemplateConfiguration settings that apply to image distribution.
     * 
     */
    public Optional<List<DistributionConfigurationLaunchTemplateConfiguration>> launchTemplateConfigurations() {
        return Optional.ofNullable(this.launchTemplateConfigurations);
    }

    /**
     * The License Manager Configuration to associate with the AMI in the specified Region.
     * 
     */
    @Import(name="licenseConfigurationArns")
    private @Nullable List<String> licenseConfigurationArns;

    /**
     * @return The License Manager Configuration to associate with the AMI in the specified Region.
     * 
     */
    public Optional<List<String>> licenseConfigurationArns() {
        return Optional.ofNullable(this.licenseConfigurationArns);
    }

    /**
     * region
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return region
     * 
     */
    public String region() {
        return this.region;
    }

    private DistributionConfigurationDistribution() {}

    private DistributionConfigurationDistribution(DistributionConfigurationDistribution $) {
        this.amiDistributionConfiguration = $.amiDistributionConfiguration;
        this.containerDistributionConfiguration = $.containerDistributionConfiguration;
        this.launchTemplateConfigurations = $.launchTemplateConfigurations;
        this.licenseConfigurationArns = $.licenseConfigurationArns;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionConfigurationDistribution defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionConfigurationDistribution $;

        public Builder() {
            $ = new DistributionConfigurationDistribution();
        }

        public Builder(DistributionConfigurationDistribution defaults) {
            $ = new DistributionConfigurationDistribution(Objects.requireNonNull(defaults));
        }

        /**
         * @param amiDistributionConfiguration The specific AMI settings (for example, launch permissions, AMI tags).
         * 
         * @return builder
         * 
         */
        public Builder amiDistributionConfiguration(@Nullable DistributionConfigurationDistributionAmiDistributionConfigurationProperties amiDistributionConfiguration) {
            $.amiDistributionConfiguration = amiDistributionConfiguration;
            return this;
        }

        /**
         * @param containerDistributionConfiguration Container distribution settings for encryption, licensing, and sharing in a specific Region.
         * 
         * @return builder
         * 
         */
        public Builder containerDistributionConfiguration(@Nullable DistributionConfigurationDistributionContainerDistributionConfigurationProperties containerDistributionConfiguration) {
            $.containerDistributionConfiguration = containerDistributionConfiguration;
            return this;
        }

        /**
         * @param launchTemplateConfigurations A group of launchTemplateConfiguration settings that apply to image distribution.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateConfigurations(@Nullable List<DistributionConfigurationLaunchTemplateConfiguration> launchTemplateConfigurations) {
            $.launchTemplateConfigurations = launchTemplateConfigurations;
            return this;
        }

        /**
         * @param launchTemplateConfigurations A group of launchTemplateConfiguration settings that apply to image distribution.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplateConfigurations(DistributionConfigurationLaunchTemplateConfiguration... launchTemplateConfigurations) {
            return launchTemplateConfigurations(List.of(launchTemplateConfigurations));
        }

        /**
         * @param licenseConfigurationArns The License Manager Configuration to associate with the AMI in the specified Region.
         * 
         * @return builder
         * 
         */
        public Builder licenseConfigurationArns(@Nullable List<String> licenseConfigurationArns) {
            $.licenseConfigurationArns = licenseConfigurationArns;
            return this;
        }

        /**
         * @param licenseConfigurationArns The License Manager Configuration to associate with the AMI in the specified Region.
         * 
         * @return builder
         * 
         */
        public Builder licenseConfigurationArns(String... licenseConfigurationArns) {
            return licenseConfigurationArns(List.of(licenseConfigurationArns));
        }

        /**
         * @param region region
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        public DistributionConfigurationDistribution build() {
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
