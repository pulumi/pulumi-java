// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerTlsCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerTlsCertificateArgs Empty = new LoadBalancerTlsCertificateArgs();

    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     * 
     */
    @Import(name="certificateAlternativeNames")
    private @Nullable Output<List<String>> certificateAlternativeNames;

    public Optional<Output<List<String>>> certificateAlternativeNames() {
        return Optional.ofNullable(this.certificateAlternativeNames);
    }

    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     * 
     */
    @Import(name="certificateDomainName", required=true)
    private Output<String> certificateDomainName;

    public Output<String> certificateDomainName() {
        return this.certificateDomainName;
    }

    /**
     * The SSL/TLS certificate name.
     * 
     */
    @Import(name="certificateName", required=true)
    private Output<String> certificateName;

    public Output<String> certificateName() {
        return this.certificateName;
    }

    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     * 
     */
    @Import(name="isAttached")
    private @Nullable Output<Boolean> isAttached;

    public Optional<Output<Boolean>> isAttached() {
        return Optional.ofNullable(this.isAttached);
    }

    /**
     * The name of your load balancer.
     * 
     */
    @Import(name="loadBalancerName", required=true)
    private Output<String> loadBalancerName;

    public Output<String> loadBalancerName() {
        return this.loadBalancerName;
    }

    private LoadBalancerTlsCertificateArgs() {}

    private LoadBalancerTlsCertificateArgs(LoadBalancerTlsCertificateArgs $) {
        this.certificateAlternativeNames = $.certificateAlternativeNames;
        this.certificateDomainName = $.certificateDomainName;
        this.certificateName = $.certificateName;
        this.isAttached = $.isAttached;
        this.loadBalancerName = $.loadBalancerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerTlsCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerTlsCertificateArgs $;

        public Builder() {
            $ = new LoadBalancerTlsCertificateArgs();
        }

        public Builder(LoadBalancerTlsCertificateArgs defaults) {
            $ = new LoadBalancerTlsCertificateArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificateAlternativeNames(@Nullable Output<List<String>> certificateAlternativeNames) {
            $.certificateAlternativeNames = certificateAlternativeNames;
            return this;
        }

        public Builder certificateAlternativeNames(List<String> certificateAlternativeNames) {
            return certificateAlternativeNames(Output.of(certificateAlternativeNames));
        }

        public Builder certificateAlternativeNames(String... certificateAlternativeNames) {
            return certificateAlternativeNames(List.of(certificateAlternativeNames));
        }

        public Builder certificateDomainName(Output<String> certificateDomainName) {
            $.certificateDomainName = certificateDomainName;
            return this;
        }

        public Builder certificateDomainName(String certificateDomainName) {
            return certificateDomainName(Output.of(certificateDomainName));
        }

        public Builder certificateName(Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        public Builder isAttached(@Nullable Output<Boolean> isAttached) {
            $.isAttached = isAttached;
            return this;
        }

        public Builder isAttached(Boolean isAttached) {
            return isAttached(Output.of(isAttached));
        }

        public Builder loadBalancerName(Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        public LoadBalancerTlsCertificateArgs build() {
            $.certificateDomainName = Objects.requireNonNull($.certificateDomainName, "expected parameter 'certificateDomainName' to be non-null");
            $.certificateName = Objects.requireNonNull($.certificateName, "expected parameter 'certificateName' to be non-null");
            $.loadBalancerName = Objects.requireNonNull($.loadBalancerName, "expected parameter 'loadBalancerName' to be non-null");
            return $;
        }
    }

}
