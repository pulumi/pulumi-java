// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2;

import com.pulumi.awsnative.ec2.inputs.NetworkInterfaceInstanceIpv6AddressArgs;
import com.pulumi.awsnative.ec2.inputs.NetworkInterfacePrivateIpAddressSpecificationArgs;
import com.pulumi.awsnative.ec2.inputs.NetworkInterfaceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceArgs Empty = new NetworkInterfaceArgs();

    /**
     * A description for the network interface.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A list of security group IDs associated with this network interface.
     * 
     */
    @Import(name="groupSet")
      private final @Nullable Output<List<String>> groupSet;

    public Output<List<String>> groupSet() {
        return this.groupSet == null ? Codegen.empty() : this.groupSet;
    }

    /**
     * Indicates the type of network interface.
     * 
     */
    @Import(name="interfaceType")
      private final @Nullable Output<String> interfaceType;

    public Output<String> interfaceType() {
        return this.interfaceType == null ? Codegen.empty() : this.interfaceType;
    }

    /**
     * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don&#39;t specify this property.
     * 
     */
    @Import(name="ipv6AddressCount")
      private final @Nullable Output<Integer> ipv6AddressCount;

    public Output<Integer> ipv6AddressCount() {
        return this.ipv6AddressCount == null ? Codegen.empty() : this.ipv6AddressCount;
    }

    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you&#39;re specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don&#39;t specify this property.
     * 
     */
    @Import(name="ipv6Addresses")
      private final @Nullable Output<List<NetworkInterfaceInstanceIpv6AddressArgs>> ipv6Addresses;

    public Output<List<NetworkInterfaceInstanceIpv6AddressArgs>> ipv6Addresses() {
        return this.ipv6Addresses == null ? Codegen.empty() : this.ipv6Addresses;
    }

    /**
     * Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property.
     * 
     */
    @Import(name="privateIpAddress")
      private final @Nullable Output<String> privateIpAddress;

    public Output<String> privateIpAddress() {
        return this.privateIpAddress == null ? Codegen.empty() : this.privateIpAddress;
    }

    /**
     * Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
     * 
     */
    @Import(name="privateIpAddresses")
      private final @Nullable Output<List<NetworkInterfacePrivateIpAddressSpecificationArgs>> privateIpAddresses;

    public Output<List<NetworkInterfacePrivateIpAddressSpecificationArgs>> privateIpAddresses() {
        return this.privateIpAddresses == null ? Codegen.empty() : this.privateIpAddresses;
    }

    /**
     * The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet&#39;s IPv4 CIDR range. You can&#39;t specify this option and specify more than one private IP address using privateIpAddresses
     * 
     */
    @Import(name="secondaryPrivateIpAddressCount")
      private final @Nullable Output<Integer> secondaryPrivateIpAddressCount;

    public Output<Integer> secondaryPrivateIpAddressCount() {
        return this.secondaryPrivateIpAddressCount == null ? Codegen.empty() : this.secondaryPrivateIpAddressCount;
    }

    /**
     * Indicates whether traffic to or from the instance is validated.
     * 
     */
    @Import(name="sourceDestCheck")
      private final @Nullable Output<Boolean> sourceDestCheck;

    public Output<Boolean> sourceDestCheck() {
        return this.sourceDestCheck == null ? Codegen.empty() : this.sourceDestCheck;
    }

    /**
     * The ID of the subnet to associate with the network interface.
     * 
     */
    @Import(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this network interface.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<NetworkInterfaceTagArgs>> tags;

    public Output<List<NetworkInterfaceTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public NetworkInterfaceArgs(
        @Nullable Output<String> description,
        @Nullable Output<List<String>> groupSet,
        @Nullable Output<String> interfaceType,
        @Nullable Output<Integer> ipv6AddressCount,
        @Nullable Output<List<NetworkInterfaceInstanceIpv6AddressArgs>> ipv6Addresses,
        @Nullable Output<String> privateIpAddress,
        @Nullable Output<List<NetworkInterfacePrivateIpAddressSpecificationArgs>> privateIpAddresses,
        @Nullable Output<Integer> secondaryPrivateIpAddressCount,
        @Nullable Output<Boolean> sourceDestCheck,
        Output<String> subnetId,
        @Nullable Output<List<NetworkInterfaceTagArgs>> tags) {
        this.description = description;
        this.groupSet = groupSet;
        this.interfaceType = interfaceType;
        this.ipv6AddressCount = ipv6AddressCount;
        this.ipv6Addresses = ipv6Addresses;
        this.privateIpAddress = privateIpAddress;
        this.privateIpAddresses = privateIpAddresses;
        this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
        this.sourceDestCheck = sourceDestCheck;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
    }

    private NetworkInterfaceArgs() {
        this.description = Codegen.empty();
        this.groupSet = Codegen.empty();
        this.interfaceType = Codegen.empty();
        this.ipv6AddressCount = Codegen.empty();
        this.ipv6Addresses = Codegen.empty();
        this.privateIpAddress = Codegen.empty();
        this.privateIpAddresses = Codegen.empty();
        this.secondaryPrivateIpAddressCount = Codegen.empty();
        this.sourceDestCheck = Codegen.empty();
        this.subnetId = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<List<String>> groupSet;
        private @Nullable Output<String> interfaceType;
        private @Nullable Output<Integer> ipv6AddressCount;
        private @Nullable Output<List<NetworkInterfaceInstanceIpv6AddressArgs>> ipv6Addresses;
        private @Nullable Output<String> privateIpAddress;
        private @Nullable Output<List<NetworkInterfacePrivateIpAddressSpecificationArgs>> privateIpAddresses;
        private @Nullable Output<Integer> secondaryPrivateIpAddressCount;
        private @Nullable Output<Boolean> sourceDestCheck;
        private Output<String> subnetId;
        private @Nullable Output<List<NetworkInterfaceTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.groupSet = defaults.groupSet;
    	      this.interfaceType = defaults.interfaceType;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddresses = defaults.privateIpAddresses;
    	      this.secondaryPrivateIpAddressCount = defaults.secondaryPrivateIpAddressCount;
    	      this.sourceDestCheck = defaults.sourceDestCheck;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder groupSet(@Nullable Output<List<String>> groupSet) {
            this.groupSet = groupSet;
            return this;
        }
        public Builder groupSet(@Nullable List<String> groupSet) {
            this.groupSet = Codegen.ofNullable(groupSet);
            return this;
        }
        public Builder groupSet(String... groupSet) {
            return groupSet(List.of(groupSet));
        }
        public Builder interfaceType(@Nullable Output<String> interfaceType) {
            this.interfaceType = interfaceType;
            return this;
        }
        public Builder interfaceType(@Nullable String interfaceType) {
            this.interfaceType = Codegen.ofNullable(interfaceType);
            return this;
        }
        public Builder ipv6AddressCount(@Nullable Output<Integer> ipv6AddressCount) {
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }
        public Builder ipv6AddressCount(@Nullable Integer ipv6AddressCount) {
            this.ipv6AddressCount = Codegen.ofNullable(ipv6AddressCount);
            return this;
        }
        public Builder ipv6Addresses(@Nullable Output<List<NetworkInterfaceInstanceIpv6AddressArgs>> ipv6Addresses) {
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }
        public Builder ipv6Addresses(@Nullable List<NetworkInterfaceInstanceIpv6AddressArgs> ipv6Addresses) {
            this.ipv6Addresses = Codegen.ofNullable(ipv6Addresses);
            return this;
        }
        public Builder ipv6Addresses(NetworkInterfaceInstanceIpv6AddressArgs... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = Codegen.ofNullable(privateIpAddress);
            return this;
        }
        public Builder privateIpAddresses(@Nullable Output<List<NetworkInterfacePrivateIpAddressSpecificationArgs>> privateIpAddresses) {
            this.privateIpAddresses = privateIpAddresses;
            return this;
        }
        public Builder privateIpAddresses(@Nullable List<NetworkInterfacePrivateIpAddressSpecificationArgs> privateIpAddresses) {
            this.privateIpAddresses = Codegen.ofNullable(privateIpAddresses);
            return this;
        }
        public Builder privateIpAddresses(NetworkInterfacePrivateIpAddressSpecificationArgs... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }
        public Builder secondaryPrivateIpAddressCount(@Nullable Output<Integer> secondaryPrivateIpAddressCount) {
            this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            return this;
        }
        public Builder secondaryPrivateIpAddressCount(@Nullable Integer secondaryPrivateIpAddressCount) {
            this.secondaryPrivateIpAddressCount = Codegen.ofNullable(secondaryPrivateIpAddressCount);
            return this;
        }
        public Builder sourceDestCheck(@Nullable Output<Boolean> sourceDestCheck) {
            this.sourceDestCheck = sourceDestCheck;
            return this;
        }
        public Builder sourceDestCheck(@Nullable Boolean sourceDestCheck) {
            this.sourceDestCheck = Codegen.ofNullable(sourceDestCheck);
            return this;
        }
        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }
        public Builder tags(@Nullable Output<List<NetworkInterfaceTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<NetworkInterfaceTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(NetworkInterfaceTagArgs... tags) {
            return tags(List.of(tags));
        }        public NetworkInterfaceArgs build() {
            return new NetworkInterfaceArgs(description, groupSet, interfaceType, ipv6AddressCount, ipv6Addresses, privateIpAddress, privateIpAddresses, secondaryPrivateIpAddressCount, sourceDestCheck, subnetId, tags);
        }
    }
}
