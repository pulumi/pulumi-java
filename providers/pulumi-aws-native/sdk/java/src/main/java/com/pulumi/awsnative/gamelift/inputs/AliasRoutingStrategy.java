// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.gamelift.inputs;

import com.pulumi.awsnative.gamelift.enums.AliasRoutingStrategyType;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AliasRoutingStrategy extends com.pulumi.resources.InvokeArgs {

    public static final AliasRoutingStrategy Empty = new AliasRoutingStrategy();

    /**
     * A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
     * 
     */
    @Import(name="fleetId")
    private @Nullable String fleetId;

    /**
     * @return A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
     * 
     */
    public Optional<String> fleetId() {
        return Optional.ofNullable(this.fleetId);
    }

    /**
     * The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
     * 
     */
    @Import(name="message")
    private @Nullable String message;

    /**
     * @return The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
     * 
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
     * 
     */
    @Import(name="type", required=true)
    private AliasRoutingStrategyType type;

    /**
     * @return Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
     * 
     */
    public AliasRoutingStrategyType type() {
        return this.type;
    }

    private AliasRoutingStrategy() {}

    private AliasRoutingStrategy(AliasRoutingStrategy $) {
        this.fleetId = $.fleetId;
        this.message = $.message;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AliasRoutingStrategy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AliasRoutingStrategy $;

        public Builder() {
            $ = new AliasRoutingStrategy();
        }

        public Builder(AliasRoutingStrategy defaults) {
            $ = new AliasRoutingStrategy(Objects.requireNonNull(defaults));
        }

        /**
         * @param fleetId A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
         * 
         * @return builder
         * 
         */
        public Builder fleetId(@Nullable String fleetId) {
            $.fleetId = fleetId;
            return this;
        }

        /**
         * @param message The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable String message) {
            $.message = message;
            return this;
        }

        /**
         * @param type Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
         * 
         * @return builder
         * 
         */
        public Builder type(AliasRoutingStrategyType type) {
            $.type = type;
            return this;
        }

        public AliasRoutingStrategy build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
