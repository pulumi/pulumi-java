// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.inputs.RulesetColumnSelector;
import com.pulumi.awsnative.databrew.inputs.RulesetSubstitutionValue;
import com.pulumi.awsnative.databrew.inputs.RulesetThreshold;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Data quality rule for a target resource (dataset)
 * 
 */
public final class RulesetRule extends com.pulumi.resources.InvokeArgs {

    public static final RulesetRule Empty = new RulesetRule();

    @Import(name="checkExpression", required=true)
    private String checkExpression;

    public String checkExpression() {
        return this.checkExpression;
    }

    @Import(name="columnSelectors")
    private @Nullable List<RulesetColumnSelector> columnSelectors;

    public Optional<List<RulesetColumnSelector>> columnSelectors() {
        return Optional.ofNullable(this.columnSelectors);
    }

    @Import(name="disabled")
    private @Nullable Boolean disabled;

    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Name of the rule
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the rule
     * 
     */
    public String name() {
        return this.name;
    }

    @Import(name="substitutionMap")
    private @Nullable List<RulesetSubstitutionValue> substitutionMap;

    public Optional<List<RulesetSubstitutionValue>> substitutionMap() {
        return Optional.ofNullable(this.substitutionMap);
    }

    @Import(name="threshold")
    private @Nullable RulesetThreshold threshold;

    public Optional<RulesetThreshold> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private RulesetRule() {}

    private RulesetRule(RulesetRule $) {
        this.checkExpression = $.checkExpression;
        this.columnSelectors = $.columnSelectors;
        this.disabled = $.disabled;
        this.name = $.name;
        this.substitutionMap = $.substitutionMap;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRule $;

        public Builder() {
            $ = new RulesetRule();
        }

        public Builder(RulesetRule defaults) {
            $ = new RulesetRule(Objects.requireNonNull(defaults));
        }

        public Builder checkExpression(String checkExpression) {
            $.checkExpression = checkExpression;
            return this;
        }

        public Builder columnSelectors(@Nullable List<RulesetColumnSelector> columnSelectors) {
            $.columnSelectors = columnSelectors;
            return this;
        }

        public Builder columnSelectors(RulesetColumnSelector... columnSelectors) {
            return columnSelectors(List.of(columnSelectors));
        }

        public Builder disabled(@Nullable Boolean disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param name Name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder substitutionMap(@Nullable List<RulesetSubstitutionValue> substitutionMap) {
            $.substitutionMap = substitutionMap;
            return this;
        }

        public Builder substitutionMap(RulesetSubstitutionValue... substitutionMap) {
            return substitutionMap(List.of(substitutionMap));
        }

        public Builder threshold(@Nullable RulesetThreshold threshold) {
            $.threshold = threshold;
            return this;
        }

        public RulesetRule build() {
            $.checkExpression = Objects.requireNonNull($.checkExpression, "expected parameter 'checkExpression' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
