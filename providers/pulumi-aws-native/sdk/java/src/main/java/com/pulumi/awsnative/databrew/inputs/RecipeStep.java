// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.inputs.RecipeAction;
import com.pulumi.awsnative.databrew.inputs.RecipeConditionExpression;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecipeStep extends com.pulumi.resources.InvokeArgs {

    public static final RecipeStep Empty = new RecipeStep();

    @Import(name="action", required=true)
    private RecipeAction action;

    public RecipeAction action() {
        return this.action;
    }

    /**
     * Condition expressions applied to the step action
     * 
     */
    @Import(name="conditionExpressions")
    private @Nullable List<RecipeConditionExpression> conditionExpressions;

    /**
     * @return Condition expressions applied to the step action
     * 
     */
    public Optional<List<RecipeConditionExpression>> conditionExpressions() {
        return Optional.ofNullable(this.conditionExpressions);
    }

    private RecipeStep() {}

    private RecipeStep(RecipeStep $) {
        this.action = $.action;
        this.conditionExpressions = $.conditionExpressions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecipeStep defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecipeStep $;

        public Builder() {
            $ = new RecipeStep();
        }

        public Builder(RecipeStep defaults) {
            $ = new RecipeStep(Objects.requireNonNull(defaults));
        }

        public Builder action(RecipeAction action) {
            $.action = action;
            return this;
        }

        /**
         * @param conditionExpressions Condition expressions applied to the step action
         * 
         * @return builder
         * 
         */
        public Builder conditionExpressions(@Nullable List<RecipeConditionExpression> conditionExpressions) {
            $.conditionExpressions = conditionExpressions;
            return this;
        }

        /**
         * @param conditionExpressions Condition expressions applied to the step action
         * 
         * @return builder
         * 
         */
        public Builder conditionExpressions(RecipeConditionExpression... conditionExpressions) {
            return conditionExpressions(List.of(conditionExpressions));
        }

        public RecipeStep build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            return $;
        }
    }

}
