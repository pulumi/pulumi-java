// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.awsnative.iotevents.inputs.DetectorModelEvent;
import com.pulumi.awsnative.iotevents.inputs.DetectorModelTransitionEvent;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * When an input is received and the `condition` is `TRUE`, perform the specified `actions`.
 * 
 */
public final class DetectorModelOnInput extends com.pulumi.resources.InvokeArgs {

    public static final DetectorModelOnInput Empty = new DetectorModelOnInput();

    /**
     * Specifies the `actions` performed when the `condition` evaluates to `TRUE`.
     * 
     */
    @Import(name="events")
    private @Nullable List<DetectorModelEvent> events;

    public Optional<List<DetectorModelEvent>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.
     * 
     */
    @Import(name="transitionEvents")
    private @Nullable List<DetectorModelTransitionEvent> transitionEvents;

    public Optional<List<DetectorModelTransitionEvent>> transitionEvents() {
        return Optional.ofNullable(this.transitionEvents);
    }

    private DetectorModelOnInput() {}

    private DetectorModelOnInput(DetectorModelOnInput $) {
        this.events = $.events;
        this.transitionEvents = $.transitionEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorModelOnInput defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorModelOnInput $;

        public Builder() {
            $ = new DetectorModelOnInput();
        }

        public Builder(DetectorModelOnInput defaults) {
            $ = new DetectorModelOnInput(Objects.requireNonNull(defaults));
        }

        public Builder events(@Nullable List<DetectorModelEvent> events) {
            $.events = events;
            return this;
        }

        public Builder events(DetectorModelEvent... events) {
            return events(List.of(events));
        }

        public Builder transitionEvents(@Nullable List<DetectorModelTransitionEvent> transitionEvents) {
            $.transitionEvents = transitionEvents;
            return this;
        }

        public Builder transitionEvents(DetectorModelTransitionEvent... transitionEvents) {
            return transitionEvents(List.of(transitionEvents));
        }

        public DetectorModelOnInput build() {
            return $;
        }
    }

}
