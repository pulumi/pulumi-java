// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotsitewise.inputs;

import com.pulumi.awsnative.iotsitewise.inputs.AssetModelExpressionVariable;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AssetModelTransform extends com.pulumi.resources.InvokeArgs {

    public static final AssetModelTransform Empty = new AssetModelTransform();

    /**
     * The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
     * 
     */
    @Import(name="expression", required=true)
    private String expression;

    /**
     * @return The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
     * 
     */
    public String expression() {
        return this.expression;
    }

    /**
     * The list of variables used in the expression.
     * 
     */
    @Import(name="variables", required=true)
    private List<AssetModelExpressionVariable> variables;

    /**
     * @return The list of variables used in the expression.
     * 
     */
    public List<AssetModelExpressionVariable> variables() {
        return this.variables;
    }

    private AssetModelTransform() {}

    private AssetModelTransform(AssetModelTransform $) {
        this.expression = $.expression;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetModelTransform defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetModelTransform $;

        public Builder() {
            $ = new AssetModelTransform();
        }

        public Builder(AssetModelTransform defaults) {
            $ = new AssetModelTransform(Objects.requireNonNull(defaults));
        }

        /**
         * @param expression The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param variables The list of variables used in the expression.
         * 
         * @return builder
         * 
         */
        public Builder variables(List<AssetModelExpressionVariable> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables The list of variables used in the expression.
         * 
         * @return builder
         * 
         */
        public Builder variables(AssetModelExpressionVariable... variables) {
            return variables(List.of(variables));
        }

        public AssetModelTransform build() {
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.variables = Objects.requireNonNull($.variables, "expected parameter 'variables' to be non-null");
            return $;
        }
    }

}
