// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudformation;

import com.pulumi.awsnative.cloudformation.enums.PublicTypeVersionType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PublicTypeVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublicTypeVersionArgs Empty = new PublicTypeVersionArgs();

    /**
     * The Amazon Resource Number (ARN) of the extension.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * A url to the S3 bucket where logs for the testType run will be available
     * 
     */
    @Import(name="logDeliveryBucket")
    private @Nullable Output<String> logDeliveryBucket;

    public Optional<Output<String>> logDeliveryBucket() {
        return Optional.ofNullable(this.logDeliveryBucket);
    }

    /**
     * The version number of a public third-party extension
     * 
     */
    @Import(name="publicVersionNumber")
    private @Nullable Output<String> publicVersionNumber;

    public Optional<Output<String>> publicVersionNumber() {
        return Optional.ofNullable(this.publicVersionNumber);
    }

    /**
     * The kind of extension
     * 
     */
    @Import(name="type")
    private @Nullable Output<PublicTypeVersionType> type;

    public Optional<Output<PublicTypeVersionType>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The name of the type being registered.
     * 
     * We recommend that type names adhere to the following pattern: company_or_organization::service::type.
     * 
     */
    @Import(name="typeName")
    private @Nullable Output<String> typeName;

    public Optional<Output<String>> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    private PublicTypeVersionArgs() {}

    private PublicTypeVersionArgs(PublicTypeVersionArgs $) {
        this.arn = $.arn;
        this.logDeliveryBucket = $.logDeliveryBucket;
        this.publicVersionNumber = $.publicVersionNumber;
        this.type = $.type;
        this.typeName = $.typeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicTypeVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicTypeVersionArgs $;

        public Builder() {
            $ = new PublicTypeVersionArgs();
        }

        public Builder(PublicTypeVersionArgs defaults) {
            $ = new PublicTypeVersionArgs(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder logDeliveryBucket(@Nullable Output<String> logDeliveryBucket) {
            $.logDeliveryBucket = logDeliveryBucket;
            return this;
        }

        public Builder logDeliveryBucket(String logDeliveryBucket) {
            return logDeliveryBucket(Output.of(logDeliveryBucket));
        }

        public Builder publicVersionNumber(@Nullable Output<String> publicVersionNumber) {
            $.publicVersionNumber = publicVersionNumber;
            return this;
        }

        public Builder publicVersionNumber(String publicVersionNumber) {
            return publicVersionNumber(Output.of(publicVersionNumber));
        }

        public Builder type(@Nullable Output<PublicTypeVersionType> type) {
            $.type = type;
            return this;
        }

        public Builder type(PublicTypeVersionType type) {
            return type(Output.of(type));
        }

        public Builder typeName(@Nullable Output<String> typeName) {
            $.typeName = typeName;
            return this;
        }

        public Builder typeName(String typeName) {
            return typeName(Output.of(typeName));
        }

        public PublicTypeVersionArgs build() {
            return $;
        }
    }

}
