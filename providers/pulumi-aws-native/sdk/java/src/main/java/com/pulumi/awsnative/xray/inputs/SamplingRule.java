// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.xray.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamplingRule extends com.pulumi.resources.InvokeArgs {

    public static final SamplingRule Empty = new SamplingRule();

    /**
     * Matches attributes derived from the request.
     * 
     */
    @Import(name="attributes")
    private @Nullable Object attributes;

    /**
     * @return Matches attributes derived from the request.
     * 
     */
    public Optional<Object> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @Import(name="fixedRate")
    private @Nullable Double fixedRate;

    /**
     * @return The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    public Optional<Double> fixedRate() {
        return Optional.ofNullable(this.fixedRate);
    }

    /**
     * Matches the HTTP method from a request URL.
     * 
     */
    @Import(name="hTTPMethod")
    private @Nullable String hTTPMethod;

    /**
     * @return Matches the HTTP method from a request URL.
     * 
     */
    public Optional<String> hTTPMethod() {
        return Optional.ofNullable(this.hTTPMethod);
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @Import(name="host")
    private @Nullable String host;

    /**
     * @return Matches the hostname from a request URL.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    /**
     * @return The priority of the sampling rule.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @Import(name="reservoirSize")
    private @Nullable Integer reservoirSize;

    /**
     * @return A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    public Optional<Integer> reservoirSize() {
        return Optional.ofNullable(this.reservoirSize);
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @Import(name="resourceARN")
    private @Nullable String resourceARN;

    /**
     * @return Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    public Optional<String> resourceARN() {
        return Optional.ofNullable(this.resourceARN);
    }

    @Import(name="ruleARN")
    private @Nullable String ruleARN;

    public Optional<String> ruleARN() {
        return Optional.ofNullable(this.ruleARN);
    }

    @Import(name="ruleName")
    private @Nullable String ruleName;

    public Optional<String> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Matches the name that the service uses to identify itself in segments.
     * 
     */
    @Import(name="serviceName")
    private @Nullable String serviceName;

    /**
     * @return Matches the name that the service uses to identify itself in segments.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Matches the origin that the service uses to identify its type in segments.
     * 
     */
    @Import(name="serviceType")
    private @Nullable String serviceType;

    /**
     * @return Matches the origin that the service uses to identify its type in segments.
     * 
     */
    public Optional<String> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @Import(name="uRLPath")
    private @Nullable String uRLPath;

    /**
     * @return Matches the path from a request URL.
     * 
     */
    public Optional<String> uRLPath() {
        return Optional.ofNullable(this.uRLPath);
    }

    /**
     * The version of the sampling rule format (1)
     * 
     */
    @Import(name="version")
    private @Nullable Integer version;

    /**
     * @return The version of the sampling rule format (1)
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    private SamplingRule() {}

    private SamplingRule(SamplingRule $) {
        this.attributes = $.attributes;
        this.fixedRate = $.fixedRate;
        this.hTTPMethod = $.hTTPMethod;
        this.host = $.host;
        this.priority = $.priority;
        this.reservoirSize = $.reservoirSize;
        this.resourceARN = $.resourceARN;
        this.ruleARN = $.ruleARN;
        this.ruleName = $.ruleName;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
        this.uRLPath = $.uRLPath;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamplingRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamplingRule $;

        public Builder() {
            $ = new SamplingRule();
        }

        public Builder(SamplingRule defaults) {
            $ = new SamplingRule(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Matches attributes derived from the request.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Object attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param fixedRate The percentage of matching requests to instrument, after the reservoir is exhausted.
         * 
         * @return builder
         * 
         */
        public Builder fixedRate(@Nullable Double fixedRate) {
            $.fixedRate = fixedRate;
            return this;
        }

        /**
         * @param hTTPMethod Matches the HTTP method from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder hTTPMethod(@Nullable String hTTPMethod) {
            $.hTTPMethod = hTTPMethod;
            return this;
        }

        /**
         * @param host Matches the hostname from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable String host) {
            $.host = host;
            return this;
        }

        /**
         * @param priority The priority of the sampling rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param reservoirSize A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         * 
         * @return builder
         * 
         */
        public Builder reservoirSize(@Nullable Integer reservoirSize) {
            $.reservoirSize = reservoirSize;
            return this;
        }

        /**
         * @param resourceARN Matches the ARN of the AWS resource on which the service runs.
         * 
         * @return builder
         * 
         */
        public Builder resourceARN(@Nullable String resourceARN) {
            $.resourceARN = resourceARN;
            return this;
        }

        public Builder ruleARN(@Nullable String ruleARN) {
            $.ruleARN = ruleARN;
            return this;
        }

        public Builder ruleName(@Nullable String ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param serviceName Matches the name that the service uses to identify itself in segments.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable String serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceType Matches the origin that the service uses to identify its type in segments.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable String serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param uRLPath Matches the path from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder uRLPath(@Nullable String uRLPath) {
            $.uRLPath = uRLPath;
            return this;
        }

        /**
         * @param version The version of the sampling rule format (1)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Integer version) {
            $.version = version;
            return this;
        }

        public SamplingRule build() {
            return $;
        }
    }

}
