// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.elasticache;

import com.pulumi.awsnative.elasticache.enums.UserEngine;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Access permissions string used for this user account.
     * 
     */
    @Import(name="accessString")
      private final @Nullable Output<String> accessString;

    public Output<String> accessString() {
        return this.accessString == null ? Codegen.empty() : this.accessString;
    }

    /**
     * Must be redis.
     * 
     */
    @Import(name="engine", required=true)
      private final Output<UserEngine> engine;

    public Output<UserEngine> engine() {
        return this.engine;
    }

    /**
     * Indicates a password is not required for this user account.
     * 
     */
    @Import(name="noPasswordRequired")
      private final @Nullable Output<Boolean> noPasswordRequired;

    public Output<Boolean> noPasswordRequired() {
        return this.noPasswordRequired == null ? Codegen.empty() : this.noPasswordRequired;
    }

    /**
     * Passwords used for this user account. You can create up to two passwords for each user.
     * 
     */
    @Import(name="passwords")
      private final @Nullable Output<List<String>> passwords;

    public Output<List<String>> passwords() {
        return this.passwords == null ? Codegen.empty() : this.passwords;
    }

    /**
     * The ID of the user.
     * 
     */
    @Import(name="userId", required=true)
      private final Output<String> userId;

    public Output<String> userId() {
        return this.userId;
    }

    /**
     * The username of the user.
     * 
     */
    @Import(name="userName")
      private final @Nullable Output<String> userName;

    public Output<String> userName() {
        return this.userName == null ? Codegen.empty() : this.userName;
    }

    public UserArgs(
        @Nullable Output<String> accessString,
        Output<UserEngine> engine,
        @Nullable Output<Boolean> noPasswordRequired,
        @Nullable Output<List<String>> passwords,
        Output<String> userId,
        @Nullable Output<String> userName) {
        this.accessString = accessString;
        this.engine = Objects.requireNonNull(engine, "expected parameter 'engine' to be non-null");
        this.noPasswordRequired = noPasswordRequired;
        this.passwords = passwords;
        this.userId = Objects.requireNonNull(userId, "expected parameter 'userId' to be non-null");
        this.userName = userName;
    }

    private UserArgs() {
        this.accessString = Codegen.empty();
        this.engine = Codegen.empty();
        this.noPasswordRequired = Codegen.empty();
        this.passwords = Codegen.empty();
        this.userId = Codegen.empty();
        this.userName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accessString;
        private Output<UserEngine> engine;
        private @Nullable Output<Boolean> noPasswordRequired;
        private @Nullable Output<List<String>> passwords;
        private Output<String> userId;
        private @Nullable Output<String> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(UserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessString = defaults.accessString;
    	      this.engine = defaults.engine;
    	      this.noPasswordRequired = defaults.noPasswordRequired;
    	      this.passwords = defaults.passwords;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        public Builder accessString(@Nullable Output<String> accessString) {
            this.accessString = accessString;
            return this;
        }
        public Builder accessString(@Nullable String accessString) {
            this.accessString = Codegen.ofNullable(accessString);
            return this;
        }
        public Builder engine(Output<UserEngine> engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder engine(UserEngine engine) {
            this.engine = Output.of(Objects.requireNonNull(engine));
            return this;
        }
        public Builder noPasswordRequired(@Nullable Output<Boolean> noPasswordRequired) {
            this.noPasswordRequired = noPasswordRequired;
            return this;
        }
        public Builder noPasswordRequired(@Nullable Boolean noPasswordRequired) {
            this.noPasswordRequired = Codegen.ofNullable(noPasswordRequired);
            return this;
        }
        public Builder passwords(@Nullable Output<List<String>> passwords) {
            this.passwords = passwords;
            return this;
        }
        public Builder passwords(@Nullable List<String> passwords) {
            this.passwords = Codegen.ofNullable(passwords);
            return this;
        }
        public Builder passwords(String... passwords) {
            return passwords(List.of(passwords));
        }
        public Builder userId(Output<String> userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Output.of(Objects.requireNonNull(userId));
            return this;
        }
        public Builder userName(@Nullable Output<String> userName) {
            this.userName = userName;
            return this;
        }
        public Builder userName(@Nullable String userName) {
            this.userName = Codegen.ofNullable(userName);
            return this;
        }        public UserArgs build() {
            return new UserArgs(accessString, engine, noPasswordRequired, passwords, userId, userName);
        }
    }
}
