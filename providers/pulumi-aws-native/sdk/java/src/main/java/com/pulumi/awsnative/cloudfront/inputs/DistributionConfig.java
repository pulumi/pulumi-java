// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudfront.inputs;

import com.pulumi.awsnative.cloudfront.inputs.DistributionCacheBehavior;
import com.pulumi.awsnative.cloudfront.inputs.DistributionCustomErrorResponse;
import com.pulumi.awsnative.cloudfront.inputs.DistributionDefaultCacheBehavior;
import com.pulumi.awsnative.cloudfront.inputs.DistributionLegacyCustomOrigin;
import com.pulumi.awsnative.cloudfront.inputs.DistributionLegacyS3Origin;
import com.pulumi.awsnative.cloudfront.inputs.DistributionLogging;
import com.pulumi.awsnative.cloudfront.inputs.DistributionOrigin;
import com.pulumi.awsnative.cloudfront.inputs.DistributionOriginGroups;
import com.pulumi.awsnative.cloudfront.inputs.DistributionRestrictions;
import com.pulumi.awsnative.cloudfront.inputs.DistributionViewerCertificate;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DistributionConfig extends com.pulumi.resources.InvokeArgs {

    public static final DistributionConfig Empty = new DistributionConfig();

    @Import(name="aliases")
    private @Nullable List<String> aliases;

    public Optional<List<String>> aliases() {
        return Optional.ofNullable(this.aliases);
    }

    @Import(name="cNAMEs")
    private @Nullable List<String> cNAMEs;

    public Optional<List<String>> cNAMEs() {
        return Optional.ofNullable(this.cNAMEs);
    }

    @Import(name="cacheBehaviors")
    private @Nullable List<DistributionCacheBehavior> cacheBehaviors;

    public Optional<List<DistributionCacheBehavior>> cacheBehaviors() {
        return Optional.ofNullable(this.cacheBehaviors);
    }

    @Import(name="comment")
    private @Nullable String comment;

    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="customErrorResponses")
    private @Nullable List<DistributionCustomErrorResponse> customErrorResponses;

    public Optional<List<DistributionCustomErrorResponse>> customErrorResponses() {
        return Optional.ofNullable(this.customErrorResponses);
    }

    @Import(name="customOrigin")
    private @Nullable DistributionLegacyCustomOrigin customOrigin;

    public Optional<DistributionLegacyCustomOrigin> customOrigin() {
        return Optional.ofNullable(this.customOrigin);
    }

    @Import(name="defaultCacheBehavior")
    private @Nullable DistributionDefaultCacheBehavior defaultCacheBehavior;

    public Optional<DistributionDefaultCacheBehavior> defaultCacheBehavior() {
        return Optional.ofNullable(this.defaultCacheBehavior);
    }

    @Import(name="defaultRootObject")
    private @Nullable String defaultRootObject;

    public Optional<String> defaultRootObject() {
        return Optional.ofNullable(this.defaultRootObject);
    }

    @Import(name="enabled", required=true)
    private Boolean enabled;

    public Boolean enabled() {
        return this.enabled;
    }

    @Import(name="httpVersion")
    private @Nullable String httpVersion;

    public Optional<String> httpVersion() {
        return Optional.ofNullable(this.httpVersion);
    }

    @Import(name="iPV6Enabled")
    private @Nullable Boolean iPV6Enabled;

    public Optional<Boolean> iPV6Enabled() {
        return Optional.ofNullable(this.iPV6Enabled);
    }

    @Import(name="logging")
    private @Nullable DistributionLogging logging;

    public Optional<DistributionLogging> logging() {
        return Optional.ofNullable(this.logging);
    }

    @Import(name="originGroups")
    private @Nullable DistributionOriginGroups originGroups;

    public Optional<DistributionOriginGroups> originGroups() {
        return Optional.ofNullable(this.originGroups);
    }

    @Import(name="origins")
    private @Nullable List<DistributionOrigin> origins;

    public Optional<List<DistributionOrigin>> origins() {
        return Optional.ofNullable(this.origins);
    }

    @Import(name="priceClass")
    private @Nullable String priceClass;

    public Optional<String> priceClass() {
        return Optional.ofNullable(this.priceClass);
    }

    @Import(name="restrictions")
    private @Nullable DistributionRestrictions restrictions;

    public Optional<DistributionRestrictions> restrictions() {
        return Optional.ofNullable(this.restrictions);
    }

    @Import(name="s3Origin")
    private @Nullable DistributionLegacyS3Origin s3Origin;

    public Optional<DistributionLegacyS3Origin> s3Origin() {
        return Optional.ofNullable(this.s3Origin);
    }

    @Import(name="viewerCertificate")
    private @Nullable DistributionViewerCertificate viewerCertificate;

    public Optional<DistributionViewerCertificate> viewerCertificate() {
        return Optional.ofNullable(this.viewerCertificate);
    }

    @Import(name="webACLId")
    private @Nullable String webACLId;

    public Optional<String> webACLId() {
        return Optional.ofNullable(this.webACLId);
    }

    private DistributionConfig() {}

    private DistributionConfig(DistributionConfig $) {
        this.aliases = $.aliases;
        this.cNAMEs = $.cNAMEs;
        this.cacheBehaviors = $.cacheBehaviors;
        this.comment = $.comment;
        this.customErrorResponses = $.customErrorResponses;
        this.customOrigin = $.customOrigin;
        this.defaultCacheBehavior = $.defaultCacheBehavior;
        this.defaultRootObject = $.defaultRootObject;
        this.enabled = $.enabled;
        this.httpVersion = $.httpVersion;
        this.iPV6Enabled = $.iPV6Enabled;
        this.logging = $.logging;
        this.originGroups = $.originGroups;
        this.origins = $.origins;
        this.priceClass = $.priceClass;
        this.restrictions = $.restrictions;
        this.s3Origin = $.s3Origin;
        this.viewerCertificate = $.viewerCertificate;
        this.webACLId = $.webACLId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionConfig $;

        public Builder() {
            $ = new DistributionConfig();
        }

        public Builder(DistributionConfig defaults) {
            $ = new DistributionConfig(Objects.requireNonNull(defaults));
        }

        public Builder aliases(@Nullable List<String> aliases) {
            $.aliases = aliases;
            return this;
        }

        public Builder aliases(String... aliases) {
            return aliases(List.of(aliases));
        }

        public Builder cNAMEs(@Nullable List<String> cNAMEs) {
            $.cNAMEs = cNAMEs;
            return this;
        }

        public Builder cNAMEs(String... cNAMEs) {
            return cNAMEs(List.of(cNAMEs));
        }

        public Builder cacheBehaviors(@Nullable List<DistributionCacheBehavior> cacheBehaviors) {
            $.cacheBehaviors = cacheBehaviors;
            return this;
        }

        public Builder cacheBehaviors(DistributionCacheBehavior... cacheBehaviors) {
            return cacheBehaviors(List.of(cacheBehaviors));
        }

        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        public Builder customErrorResponses(@Nullable List<DistributionCustomErrorResponse> customErrorResponses) {
            $.customErrorResponses = customErrorResponses;
            return this;
        }

        public Builder customErrorResponses(DistributionCustomErrorResponse... customErrorResponses) {
            return customErrorResponses(List.of(customErrorResponses));
        }

        public Builder customOrigin(@Nullable DistributionLegacyCustomOrigin customOrigin) {
            $.customOrigin = customOrigin;
            return this;
        }

        public Builder defaultCacheBehavior(@Nullable DistributionDefaultCacheBehavior defaultCacheBehavior) {
            $.defaultCacheBehavior = defaultCacheBehavior;
            return this;
        }

        public Builder defaultRootObject(@Nullable String defaultRootObject) {
            $.defaultRootObject = defaultRootObject;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder httpVersion(@Nullable String httpVersion) {
            $.httpVersion = httpVersion;
            return this;
        }

        public Builder iPV6Enabled(@Nullable Boolean iPV6Enabled) {
            $.iPV6Enabled = iPV6Enabled;
            return this;
        }

        public Builder logging(@Nullable DistributionLogging logging) {
            $.logging = logging;
            return this;
        }

        public Builder originGroups(@Nullable DistributionOriginGroups originGroups) {
            $.originGroups = originGroups;
            return this;
        }

        public Builder origins(@Nullable List<DistributionOrigin> origins) {
            $.origins = origins;
            return this;
        }

        public Builder origins(DistributionOrigin... origins) {
            return origins(List.of(origins));
        }

        public Builder priceClass(@Nullable String priceClass) {
            $.priceClass = priceClass;
            return this;
        }

        public Builder restrictions(@Nullable DistributionRestrictions restrictions) {
            $.restrictions = restrictions;
            return this;
        }

        public Builder s3Origin(@Nullable DistributionLegacyS3Origin s3Origin) {
            $.s3Origin = s3Origin;
            return this;
        }

        public Builder viewerCertificate(@Nullable DistributionViewerCertificate viewerCertificate) {
            $.viewerCertificate = viewerCertificate;
            return this;
        }

        public Builder webACLId(@Nullable String webACLId) {
            $.webACLId = webACLId;
            return this;
        }

        public DistributionConfig build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
