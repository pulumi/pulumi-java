// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.awsnative.s3.enums.BucketRuleStatus;
import com.pulumi.awsnative.s3.inputs.BucketAbortIncompleteMultipartUpload;
import com.pulumi.awsnative.s3.inputs.BucketNoncurrentVersionExpiration;
import com.pulumi.awsnative.s3.inputs.BucketNoncurrentVersionTransition;
import com.pulumi.awsnative.s3.inputs.BucketTagFilter;
import com.pulumi.awsnative.s3.inputs.BucketTransition;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * You must specify at least one of the following properties: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays, NoncurrentVersionExpirationInDays, NoncurrentVersionTransition, NoncurrentVersionTransitions, Transition, or Transitions.
 * 
 */
public final class BucketRule extends com.pulumi.resources.InvokeArgs {

    public static final BucketRule Empty = new BucketRule();

    @Import(name="abortIncompleteMultipartUpload")
    private @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;

    public Optional<BucketAbortIncompleteMultipartUpload> abortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }

    @Import(name="expirationDate")
    private @Nullable String expirationDate;

    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    @Import(name="expirationInDays")
    private @Nullable Integer expirationInDays;

    public Optional<Integer> expirationInDays() {
        return Optional.ofNullable(this.expirationInDays);
    }

    @Import(name="expiredObjectDeleteMarker")
    private @Nullable Boolean expiredObjectDeleteMarker;

    public Optional<Boolean> expiredObjectDeleteMarker() {
        return Optional.ofNullable(this.expiredObjectDeleteMarker);
    }

    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="noncurrentVersionExpiration")
    private @Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration;

    public Optional<BucketNoncurrentVersionExpiration> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }

    @Import(name="noncurrentVersionExpirationInDays")
    private @Nullable Integer noncurrentVersionExpirationInDays;

    public Optional<Integer> noncurrentVersionExpirationInDays() {
        return Optional.ofNullable(this.noncurrentVersionExpirationInDays);
    }

    @Import(name="noncurrentVersionTransition")
    private @Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition;

    public Optional<BucketNoncurrentVersionTransition> noncurrentVersionTransition() {
        return Optional.ofNullable(this.noncurrentVersionTransition);
    }

    @Import(name="noncurrentVersionTransitions")
    private @Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions;

    public Optional<List<BucketNoncurrentVersionTransition>> noncurrentVersionTransitions() {
        return Optional.ofNullable(this.noncurrentVersionTransitions);
    }

    @Import(name="objectSizeGreaterThan")
    private @Nullable String objectSizeGreaterThan;

    public Optional<String> objectSizeGreaterThan() {
        return Optional.ofNullable(this.objectSizeGreaterThan);
    }

    @Import(name="objectSizeLessThan")
    private @Nullable String objectSizeLessThan;

    public Optional<String> objectSizeLessThan() {
        return Optional.ofNullable(this.objectSizeLessThan);
    }

    @Import(name="prefix")
    private @Nullable String prefix;

    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="status", required=true)
    private BucketRuleStatus status;

    public BucketRuleStatus status() {
        return this.status;
    }

    @Import(name="tagFilters")
    private @Nullable List<BucketTagFilter> tagFilters;

    public Optional<List<BucketTagFilter>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    @Import(name="transition")
    private @Nullable BucketTransition transition;

    public Optional<BucketTransition> transition() {
        return Optional.ofNullable(this.transition);
    }

    @Import(name="transitions")
    private @Nullable List<BucketTransition> transitions;

    public Optional<List<BucketTransition>> transitions() {
        return Optional.ofNullable(this.transitions);
    }

    private BucketRule() {}

    private BucketRule(BucketRule $) {
        this.abortIncompleteMultipartUpload = $.abortIncompleteMultipartUpload;
        this.expirationDate = $.expirationDate;
        this.expirationInDays = $.expirationInDays;
        this.expiredObjectDeleteMarker = $.expiredObjectDeleteMarker;
        this.id = $.id;
        this.noncurrentVersionExpiration = $.noncurrentVersionExpiration;
        this.noncurrentVersionExpirationInDays = $.noncurrentVersionExpirationInDays;
        this.noncurrentVersionTransition = $.noncurrentVersionTransition;
        this.noncurrentVersionTransitions = $.noncurrentVersionTransitions;
        this.objectSizeGreaterThan = $.objectSizeGreaterThan;
        this.objectSizeLessThan = $.objectSizeLessThan;
        this.prefix = $.prefix;
        this.status = $.status;
        this.tagFilters = $.tagFilters;
        this.transition = $.transition;
        this.transitions = $.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRule $;

        public Builder() {
            $ = new BucketRule();
        }

        public Builder(BucketRule defaults) {
            $ = new BucketRule(Objects.requireNonNull(defaults));
        }

        public Builder abortIncompleteMultipartUpload(@Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
            $.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }

        public Builder expirationDate(@Nullable String expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationInDays(@Nullable Integer expirationInDays) {
            $.expirationInDays = expirationInDays;
            return this;
        }

        public Builder expiredObjectDeleteMarker(@Nullable Boolean expiredObjectDeleteMarker) {
            $.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder noncurrentVersionExpiration(@Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration) {
            $.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }

        public Builder noncurrentVersionExpirationInDays(@Nullable Integer noncurrentVersionExpirationInDays) {
            $.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
            return this;
        }

        public Builder noncurrentVersionTransition(@Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition) {
            $.noncurrentVersionTransition = noncurrentVersionTransition;
            return this;
        }

        public Builder noncurrentVersionTransitions(@Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions) {
            $.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }

        public Builder noncurrentVersionTransitions(BucketNoncurrentVersionTransition... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }

        public Builder objectSizeGreaterThan(@Nullable String objectSizeGreaterThan) {
            $.objectSizeGreaterThan = objectSizeGreaterThan;
            return this;
        }

        public Builder objectSizeLessThan(@Nullable String objectSizeLessThan) {
            $.objectSizeLessThan = objectSizeLessThan;
            return this;
        }

        public Builder prefix(@Nullable String prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder status(BucketRuleStatus status) {
            $.status = status;
            return this;
        }

        public Builder tagFilters(@Nullable List<BucketTagFilter> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        public Builder tagFilters(BucketTagFilter... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        public Builder transition(@Nullable BucketTransition transition) {
            $.transition = transition;
            return this;
        }

        public Builder transitions(@Nullable List<BucketTransition> transitions) {
            $.transitions = transitions;
            return this;
        }

        public Builder transitions(BucketTransition... transitions) {
            return transitions(List.of(transitions));
        }

        public BucketRule build() {
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
