// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.timestream.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The retention duration of the memory store and the magnetic store.
 * 
 */
public final class RetentionPropertiesProperties extends com.pulumi.resources.InvokeArgs {

    public static final RetentionPropertiesProperties Empty = new RetentionPropertiesProperties();

    /**
     * The duration for which data must be stored in the magnetic store.
     * 
     */
    @Import(name="magneticStoreRetentionPeriodInDays")
    private @Nullable String magneticStoreRetentionPeriodInDays;

    /**
     * @return The duration for which data must be stored in the magnetic store.
     * 
     */
    public Optional<String> magneticStoreRetentionPeriodInDays() {
        return Optional.ofNullable(this.magneticStoreRetentionPeriodInDays);
    }

    /**
     * The duration for which data must be stored in the memory store.
     * 
     */
    @Import(name="memoryStoreRetentionPeriodInHours")
    private @Nullable String memoryStoreRetentionPeriodInHours;

    /**
     * @return The duration for which data must be stored in the memory store.
     * 
     */
    public Optional<String> memoryStoreRetentionPeriodInHours() {
        return Optional.ofNullable(this.memoryStoreRetentionPeriodInHours);
    }

    private RetentionPropertiesProperties() {}

    private RetentionPropertiesProperties(RetentionPropertiesProperties $) {
        this.magneticStoreRetentionPeriodInDays = $.magneticStoreRetentionPeriodInDays;
        this.memoryStoreRetentionPeriodInHours = $.memoryStoreRetentionPeriodInHours;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetentionPropertiesProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetentionPropertiesProperties $;

        public Builder() {
            $ = new RetentionPropertiesProperties();
        }

        public Builder(RetentionPropertiesProperties defaults) {
            $ = new RetentionPropertiesProperties(Objects.requireNonNull(defaults));
        }

        /**
         * @param magneticStoreRetentionPeriodInDays The duration for which data must be stored in the magnetic store.
         * 
         * @return builder
         * 
         */
        public Builder magneticStoreRetentionPeriodInDays(@Nullable String magneticStoreRetentionPeriodInDays) {
            $.magneticStoreRetentionPeriodInDays = magneticStoreRetentionPeriodInDays;
            return this;
        }

        /**
         * @param memoryStoreRetentionPeriodInHours The duration for which data must be stored in the memory store.
         * 
         * @return builder
         * 
         */
        public Builder memoryStoreRetentionPeriodInHours(@Nullable String memoryStoreRetentionPeriodInHours) {
            $.memoryStoreRetentionPeriodInHours = memoryStoreRetentionPeriodInHours;
            return this;
        }

        public RetentionPropertiesProperties build() {
            return $;
        }
    }

}
