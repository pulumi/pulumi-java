// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the health check configuration of an Amazon Lightsail container service.
 * 
 */
public final class ContainerHealthCheckConfig extends com.pulumi.resources.InvokeArgs {

    public static final ContainerHealthCheckConfig Empty = new ContainerHealthCheckConfig();

    /**
     * The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Integer healthyThreshold;

    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
     * 
     */
    @Import(name="intervalSeconds")
    private @Nullable Integer intervalSeconds;

    public Optional<Integer> intervalSeconds() {
        return Optional.ofNullable(this.intervalSeconds);
    }

    /**
     * The path on the container on which to perform the health check. The default value is /.
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
     * 
     */
    @Import(name="successCodes")
    private @Nullable String successCodes;

    public Optional<String> successCodes() {
        return Optional.ofNullable(this.successCodes);
    }

    /**
     * The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Integer timeoutSeconds;

    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    /**
     * The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Integer unhealthyThreshold;

    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private ContainerHealthCheckConfig() {}

    private ContainerHealthCheckConfig(ContainerHealthCheckConfig $) {
        this.healthyThreshold = $.healthyThreshold;
        this.intervalSeconds = $.intervalSeconds;
        this.path = $.path;
        this.successCodes = $.successCodes;
        this.timeoutSeconds = $.timeoutSeconds;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerHealthCheckConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerHealthCheckConfig $;

        public Builder() {
            $ = new ContainerHealthCheckConfig();
        }

        public Builder(ContainerHealthCheckConfig defaults) {
            $ = new ContainerHealthCheckConfig(Objects.requireNonNull(defaults));
        }

        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        public Builder intervalSeconds(@Nullable Integer intervalSeconds) {
            $.intervalSeconds = intervalSeconds;
            return this;
        }

        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        public Builder successCodes(@Nullable String successCodes) {
            $.successCodes = successCodes;
            return this;
        }

        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        public ContainerHealthCheckConfig build() {
            return $;
        }
    }

}
