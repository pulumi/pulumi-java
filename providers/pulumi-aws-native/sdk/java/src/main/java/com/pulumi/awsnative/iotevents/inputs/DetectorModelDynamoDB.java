// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.awsnative.iotevents.inputs.DetectorModelPayload;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
 * 
 */
public final class DetectorModelDynamoDB extends com.pulumi.resources.InvokeArgs {

    public static final DetectorModelDynamoDB Empty = new DetectorModelDynamoDB();

    /**
     * The name of the hash key (also called the partition key).
     * 
     */
    @Import(name="hashKeyField", required=true)
    private String hashKeyField;

    public String hashKeyField() {
        return this.hashKeyField;
    }

    /**
     * The data type for the hash key (also called the partition key). You can specify the following values:
     * 
     * * `STRING` - The hash key is a string.
     * 
     * * `NUMBER` - The hash key is a number.
     * 
     * If you don&#39;t specify `hashKeyType`, the default value is `STRING`.
     * 
     */
    @Import(name="hashKeyType")
    private @Nullable String hashKeyType;

    public Optional<String> hashKeyType() {
        return Optional.ofNullable(this.hashKeyType);
    }

    /**
     * The value of the hash key (also called the partition key).
     * 
     */
    @Import(name="hashKeyValue", required=true)
    private String hashKeyValue;

    public String hashKeyValue() {
        return this.hashKeyValue;
    }

    /**
     * The type of operation to perform. You can specify the following values:
     * 
     * * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
     * 
     * * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item&#39;s partition key must match the specified hash key. If you specified a range key, the range key must match the item&#39;s sort key.
     * 
     * * `DELETE` - Delete an existing item of the DynamoDB table. This item&#39;s partition key must match the specified hash key. If you specified a range key, the range key must match the item&#39;s sort key.
     * 
     * If you don&#39;t specify this parameter, AWS IoT Events triggers the `INSERT` operation.
     * 
     */
    @Import(name="operation")
    private @Nullable String operation;

    public Optional<String> operation() {
        return Optional.ofNullable(this.operation);
    }

    @Import(name="payload")
    private @Nullable DetectorModelPayload payload;

    public Optional<DetectorModelPayload> payload() {
        return Optional.ofNullable(this.payload);
    }

    /**
     * The name of the DynamoDB column that receives the action payload.
     * 
     * If you don&#39;t specify this parameter, the name of the DynamoDB column is `payload`.
     * 
     */
    @Import(name="payloadField")
    private @Nullable String payloadField;

    public Optional<String> payloadField() {
        return Optional.ofNullable(this.payloadField);
    }

    /**
     * The name of the range key (also called the sort key).
     * 
     */
    @Import(name="rangeKeyField")
    private @Nullable String rangeKeyField;

    public Optional<String> rangeKeyField() {
        return Optional.ofNullable(this.rangeKeyField);
    }

    /**
     * The data type for the range key (also called the sort key), You can specify the following values:
     * 
     * * `STRING` - The range key is a string.
     * 
     * * `NUMBER` - The range key is number.
     * 
     * If you don&#39;t specify `rangeKeyField`, the default value is `STRING`.
     * 
     */
    @Import(name="rangeKeyType")
    private @Nullable String rangeKeyType;

    public Optional<String> rangeKeyType() {
        return Optional.ofNullable(this.rangeKeyType);
    }

    /**
     * The value of the range key (also called the sort key).
     * 
     */
    @Import(name="rangeKeyValue")
    private @Nullable String rangeKeyValue;

    public Optional<String> rangeKeyValue() {
        return Optional.ofNullable(this.rangeKeyValue);
    }

    /**
     * The name of the DynamoDB table.
     * 
     */
    @Import(name="tableName", required=true)
    private String tableName;

    public String tableName() {
        return this.tableName;
    }

    private DetectorModelDynamoDB() {}

    private DetectorModelDynamoDB(DetectorModelDynamoDB $) {
        this.hashKeyField = $.hashKeyField;
        this.hashKeyType = $.hashKeyType;
        this.hashKeyValue = $.hashKeyValue;
        this.operation = $.operation;
        this.payload = $.payload;
        this.payloadField = $.payloadField;
        this.rangeKeyField = $.rangeKeyField;
        this.rangeKeyType = $.rangeKeyType;
        this.rangeKeyValue = $.rangeKeyValue;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorModelDynamoDB defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorModelDynamoDB $;

        public Builder() {
            $ = new DetectorModelDynamoDB();
        }

        public Builder(DetectorModelDynamoDB defaults) {
            $ = new DetectorModelDynamoDB(Objects.requireNonNull(defaults));
        }

        public Builder hashKeyField(String hashKeyField) {
            $.hashKeyField = hashKeyField;
            return this;
        }

        public Builder hashKeyType(@Nullable String hashKeyType) {
            $.hashKeyType = hashKeyType;
            return this;
        }

        public Builder hashKeyValue(String hashKeyValue) {
            $.hashKeyValue = hashKeyValue;
            return this;
        }

        public Builder operation(@Nullable String operation) {
            $.operation = operation;
            return this;
        }

        public Builder payload(@Nullable DetectorModelPayload payload) {
            $.payload = payload;
            return this;
        }

        public Builder payloadField(@Nullable String payloadField) {
            $.payloadField = payloadField;
            return this;
        }

        public Builder rangeKeyField(@Nullable String rangeKeyField) {
            $.rangeKeyField = rangeKeyField;
            return this;
        }

        public Builder rangeKeyType(@Nullable String rangeKeyType) {
            $.rangeKeyType = rangeKeyType;
            return this;
        }

        public Builder rangeKeyValue(@Nullable String rangeKeyValue) {
            $.rangeKeyValue = rangeKeyValue;
            return this;
        }

        public Builder tableName(String tableName) {
            $.tableName = tableName;
            return this;
        }

        public DetectorModelDynamoDB build() {
            $.hashKeyField = Objects.requireNonNull($.hashKeyField, "expected parameter 'hashKeyField' to be non-null");
            $.hashKeyValue = Objects.requireNonNull($.hashKeyValue, "expected parameter 'hashKeyValue' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
