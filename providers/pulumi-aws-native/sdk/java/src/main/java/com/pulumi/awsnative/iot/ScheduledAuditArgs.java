// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot;

import com.pulumi.awsnative.iot.enums.ScheduledAuditDayOfWeek;
import com.pulumi.awsnative.iot.enums.ScheduledAuditFrequency;
import com.pulumi.awsnative.iot.inputs.ScheduledAuditTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledAuditArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledAuditArgs Empty = new ScheduledAuditArgs();

    /**
     * The day of the month on which the scheduled audit takes place. Can be 1 through 31 or LAST. This field is required if the frequency parameter is set to MONTHLY.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<String> dayOfMonth;

    public Optional<Output<String>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<ScheduledAuditDayOfWeek> dayOfWeek;

    public Optional<Output<ScheduledAuditDayOfWeek>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    /**
     * How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<ScheduledAuditFrequency> frequency;

    public Output<ScheduledAuditFrequency> frequency() {
        return this.frequency;
    }

    /**
     * The name you want to give to the scheduled audit.
     * 
     */
    @Import(name="scheduledAuditName")
    private @Nullable Output<String> scheduledAuditName;

    public Optional<Output<String>> scheduledAuditName() {
        return Optional.ofNullable(this.scheduledAuditName);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ScheduledAuditTagArgs>> tags;

    public Optional<Output<List<ScheduledAuditTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Which checks are performed during the scheduled audit. Checks must be enabled for your account.
     * 
     */
    @Import(name="targetCheckNames", required=true)
    private Output<List<String>> targetCheckNames;

    public Output<List<String>> targetCheckNames() {
        return this.targetCheckNames;
    }

    private ScheduledAuditArgs() {}

    private ScheduledAuditArgs(ScheduledAuditArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.dayOfWeek = $.dayOfWeek;
        this.frequency = $.frequency;
        this.scheduledAuditName = $.scheduledAuditName;
        this.tags = $.tags;
        this.targetCheckNames = $.targetCheckNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledAuditArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledAuditArgs $;

        public Builder() {
            $ = new ScheduledAuditArgs();
        }

        public Builder(ScheduledAuditArgs defaults) {
            $ = new ScheduledAuditArgs(Objects.requireNonNull(defaults));
        }

        public Builder dayOfMonth(@Nullable Output<String> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        public Builder dayOfMonth(String dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        public Builder dayOfWeek(@Nullable Output<ScheduledAuditDayOfWeek> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        public Builder dayOfWeek(ScheduledAuditDayOfWeek dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        public Builder frequency(Output<ScheduledAuditFrequency> frequency) {
            $.frequency = frequency;
            return this;
        }

        public Builder frequency(ScheduledAuditFrequency frequency) {
            return frequency(Output.of(frequency));
        }

        public Builder scheduledAuditName(@Nullable Output<String> scheduledAuditName) {
            $.scheduledAuditName = scheduledAuditName;
            return this;
        }

        public Builder scheduledAuditName(String scheduledAuditName) {
            return scheduledAuditName(Output.of(scheduledAuditName));
        }

        public Builder tags(@Nullable Output<List<ScheduledAuditTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ScheduledAuditTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ScheduledAuditTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder targetCheckNames(Output<List<String>> targetCheckNames) {
            $.targetCheckNames = targetCheckNames;
            return this;
        }

        public Builder targetCheckNames(List<String> targetCheckNames) {
            return targetCheckNames(Output.of(targetCheckNames));
        }

        public Builder targetCheckNames(String... targetCheckNames) {
            return targetCheckNames(List.of(targetCheckNames));
        }

        public ScheduledAuditArgs build() {
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.targetCheckNames = Objects.requireNonNull($.targetCheckNames, "expected parameter 'targetCheckNames' to be non-null");
            return $;
        }
    }

}
