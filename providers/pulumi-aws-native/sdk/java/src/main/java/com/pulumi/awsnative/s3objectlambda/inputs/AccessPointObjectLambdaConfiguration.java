// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3objectlambda.inputs;

import com.pulumi.awsnative.s3objectlambda.inputs.AccessPointTransformationConfiguration;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
 * 
 */
public final class AccessPointObjectLambdaConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final AccessPointObjectLambdaConfiguration Empty = new AccessPointObjectLambdaConfiguration();

    @Import(name="allowedFeatures")
    private @Nullable List<String> allowedFeatures;

    public Optional<List<String>> allowedFeatures() {
        return Optional.ofNullable(this.allowedFeatures);
    }

    @Import(name="cloudWatchMetricsEnabled")
    private @Nullable Boolean cloudWatchMetricsEnabled;

    public Optional<Boolean> cloudWatchMetricsEnabled() {
        return Optional.ofNullable(this.cloudWatchMetricsEnabled);
    }

    @Import(name="supportingAccessPoint", required=true)
    private String supportingAccessPoint;

    public String supportingAccessPoint() {
        return this.supportingAccessPoint;
    }

    @Import(name="transformationConfigurations", required=true)
    private List<AccessPointTransformationConfiguration> transformationConfigurations;

    public List<AccessPointTransformationConfiguration> transformationConfigurations() {
        return this.transformationConfigurations;
    }

    private AccessPointObjectLambdaConfiguration() {}

    private AccessPointObjectLambdaConfiguration(AccessPointObjectLambdaConfiguration $) {
        this.allowedFeatures = $.allowedFeatures;
        this.cloudWatchMetricsEnabled = $.cloudWatchMetricsEnabled;
        this.supportingAccessPoint = $.supportingAccessPoint;
        this.transformationConfigurations = $.transformationConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPointObjectLambdaConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPointObjectLambdaConfiguration $;

        public Builder() {
            $ = new AccessPointObjectLambdaConfiguration();
        }

        public Builder(AccessPointObjectLambdaConfiguration defaults) {
            $ = new AccessPointObjectLambdaConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder allowedFeatures(@Nullable List<String> allowedFeatures) {
            $.allowedFeatures = allowedFeatures;
            return this;
        }

        public Builder allowedFeatures(String... allowedFeatures) {
            return allowedFeatures(List.of(allowedFeatures));
        }

        public Builder cloudWatchMetricsEnabled(@Nullable Boolean cloudWatchMetricsEnabled) {
            $.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
            return this;
        }

        public Builder supportingAccessPoint(String supportingAccessPoint) {
            $.supportingAccessPoint = supportingAccessPoint;
            return this;
        }

        public Builder transformationConfigurations(List<AccessPointTransformationConfiguration> transformationConfigurations) {
            $.transformationConfigurations = transformationConfigurations;
            return this;
        }

        public Builder transformationConfigurations(AccessPointTransformationConfiguration... transformationConfigurations) {
            return transformationConfigurations(List.of(transformationConfigurations));
        }

        public AccessPointObjectLambdaConfiguration build() {
            $.supportingAccessPoint = Objects.requireNonNull($.supportingAccessPoint, "expected parameter 'supportingAccessPoint' to be non-null");
            $.transformationConfigurations = Objects.requireNonNull($.transformationConfigurations, "expected parameter 'transformationConfigurations' to be non-null");
            return $;
        }
    }

}
