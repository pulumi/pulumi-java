// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.globalaccelerator;

import com.pulumi.awsnative.globalaccelerator.enums.EndpointGroupHealthCheckProtocol;
import com.pulumi.awsnative.globalaccelerator.inputs.EndpointGroupEndpointConfigurationArgs;
import com.pulumi.awsnative.globalaccelerator.inputs.EndpointGroupPortOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointGroupArgs Empty = new EndpointGroupArgs();

    /**
     * The list of endpoint objects.
     * 
     */
    @Import(name="endpointConfigurations")
      private final @Nullable Output<List<EndpointGroupEndpointConfigurationArgs>> endpointConfigurations;

    public Output<List<EndpointGroupEndpointConfigurationArgs>> endpointConfigurations() {
        return this.endpointConfigurations == null ? Codegen.empty() : this.endpointConfigurations;
    }

    /**
     * The name of the AWS Region where the endpoint group is located
     * 
     */
    @Import(name="endpointGroupRegion", required=true)
      private final Output<String> endpointGroupRegion;

    public Output<String> endpointGroupRegion() {
        return this.endpointGroupRegion;
    }

    /**
     * The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     * 
     */
    @Import(name="healthCheckIntervalSeconds")
      private final @Nullable Output<Integer> healthCheckIntervalSeconds;

    public Output<Integer> healthCheckIntervalSeconds() {
        return this.healthCheckIntervalSeconds == null ? Codegen.empty() : this.healthCheckIntervalSeconds;
    }

    @Import(name="healthCheckPath")
      private final @Nullable Output<String> healthCheckPath;

    public Output<String> healthCheckPath() {
        return this.healthCheckPath == null ? Codegen.empty() : this.healthCheckPath;
    }

    /**
     * The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     * 
     */
    @Import(name="healthCheckPort")
      private final @Nullable Output<Integer> healthCheckPort;

    public Output<Integer> healthCheckPort() {
        return this.healthCheckPort == null ? Codegen.empty() : this.healthCheckPort;
    }

    /**
     * The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     * 
     */
    @Import(name="healthCheckProtocol")
      private final @Nullable Output<EndpointGroupHealthCheckProtocol> healthCheckProtocol;

    public Output<EndpointGroupHealthCheckProtocol> healthCheckProtocol() {
        return this.healthCheckProtocol == null ? Codegen.empty() : this.healthCheckProtocol;
    }

    /**
     * The Amazon Resource Name (ARN) of the listener
     * 
     */
    @Import(name="listenerArn", required=true)
      private final Output<String> listenerArn;

    public Output<String> listenerArn() {
        return this.listenerArn;
    }

    @Import(name="portOverrides")
      private final @Nullable Output<List<EndpointGroupPortOverrideArgs>> portOverrides;

    public Output<List<EndpointGroupPortOverrideArgs>> portOverrides() {
        return this.portOverrides == null ? Codegen.empty() : this.portOverrides;
    }

    /**
     * The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     * 
     */
    @Import(name="thresholdCount")
      private final @Nullable Output<Integer> thresholdCount;

    public Output<Integer> thresholdCount() {
        return this.thresholdCount == null ? Codegen.empty() : this.thresholdCount;
    }

    /**
     * The percentage of traffic to sent to an AWS Region
     * 
     */
    @Import(name="trafficDialPercentage")
      private final @Nullable Output<Double> trafficDialPercentage;

    public Output<Double> trafficDialPercentage() {
        return this.trafficDialPercentage == null ? Codegen.empty() : this.trafficDialPercentage;
    }

    public EndpointGroupArgs(
        @Nullable Output<List<EndpointGroupEndpointConfigurationArgs>> endpointConfigurations,
        Output<String> endpointGroupRegion,
        @Nullable Output<Integer> healthCheckIntervalSeconds,
        @Nullable Output<String> healthCheckPath,
        @Nullable Output<Integer> healthCheckPort,
        @Nullable Output<EndpointGroupHealthCheckProtocol> healthCheckProtocol,
        Output<String> listenerArn,
        @Nullable Output<List<EndpointGroupPortOverrideArgs>> portOverrides,
        @Nullable Output<Integer> thresholdCount,
        @Nullable Output<Double> trafficDialPercentage) {
        this.endpointConfigurations = endpointConfigurations;
        this.endpointGroupRegion = Objects.requireNonNull(endpointGroupRegion, "expected parameter 'endpointGroupRegion' to be non-null");
        this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
        this.healthCheckPath = healthCheckPath;
        this.healthCheckPort = healthCheckPort;
        this.healthCheckProtocol = healthCheckProtocol;
        this.listenerArn = Objects.requireNonNull(listenerArn, "expected parameter 'listenerArn' to be non-null");
        this.portOverrides = portOverrides;
        this.thresholdCount = thresholdCount;
        this.trafficDialPercentage = trafficDialPercentage;
    }

    private EndpointGroupArgs() {
        this.endpointConfigurations = Codegen.empty();
        this.endpointGroupRegion = Codegen.empty();
        this.healthCheckIntervalSeconds = Codegen.empty();
        this.healthCheckPath = Codegen.empty();
        this.healthCheckPort = Codegen.empty();
        this.healthCheckProtocol = Codegen.empty();
        this.listenerArn = Codegen.empty();
        this.portOverrides = Codegen.empty();
        this.thresholdCount = Codegen.empty();
        this.trafficDialPercentage = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<EndpointGroupEndpointConfigurationArgs>> endpointConfigurations;
        private Output<String> endpointGroupRegion;
        private @Nullable Output<Integer> healthCheckIntervalSeconds;
        private @Nullable Output<String> healthCheckPath;
        private @Nullable Output<Integer> healthCheckPort;
        private @Nullable Output<EndpointGroupHealthCheckProtocol> healthCheckProtocol;
        private Output<String> listenerArn;
        private @Nullable Output<List<EndpointGroupPortOverrideArgs>> portOverrides;
        private @Nullable Output<Integer> thresholdCount;
        private @Nullable Output<Double> trafficDialPercentage;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointConfigurations = defaults.endpointConfigurations;
    	      this.endpointGroupRegion = defaults.endpointGroupRegion;
    	      this.healthCheckIntervalSeconds = defaults.healthCheckIntervalSeconds;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckPort = defaults.healthCheckPort;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.listenerArn = defaults.listenerArn;
    	      this.portOverrides = defaults.portOverrides;
    	      this.thresholdCount = defaults.thresholdCount;
    	      this.trafficDialPercentage = defaults.trafficDialPercentage;
        }

        public Builder endpointConfigurations(@Nullable Output<List<EndpointGroupEndpointConfigurationArgs>> endpointConfigurations) {
            this.endpointConfigurations = endpointConfigurations;
            return this;
        }
        public Builder endpointConfigurations(@Nullable List<EndpointGroupEndpointConfigurationArgs> endpointConfigurations) {
            this.endpointConfigurations = Codegen.ofNullable(endpointConfigurations);
            return this;
        }
        public Builder endpointConfigurations(EndpointGroupEndpointConfigurationArgs... endpointConfigurations) {
            return endpointConfigurations(List.of(endpointConfigurations));
        }
        public Builder endpointGroupRegion(Output<String> endpointGroupRegion) {
            this.endpointGroupRegion = Objects.requireNonNull(endpointGroupRegion);
            return this;
        }
        public Builder endpointGroupRegion(String endpointGroupRegion) {
            this.endpointGroupRegion = Output.of(Objects.requireNonNull(endpointGroupRegion));
            return this;
        }
        public Builder healthCheckIntervalSeconds(@Nullable Output<Integer> healthCheckIntervalSeconds) {
            this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            return this;
        }
        public Builder healthCheckIntervalSeconds(@Nullable Integer healthCheckIntervalSeconds) {
            this.healthCheckIntervalSeconds = Codegen.ofNullable(healthCheckIntervalSeconds);
            return this;
        }
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = Codegen.ofNullable(healthCheckPath);
            return this;
        }
        public Builder healthCheckPort(@Nullable Output<Integer> healthCheckPort) {
            this.healthCheckPort = healthCheckPort;
            return this;
        }
        public Builder healthCheckPort(@Nullable Integer healthCheckPort) {
            this.healthCheckPort = Codegen.ofNullable(healthCheckPort);
            return this;
        }
        public Builder healthCheckProtocol(@Nullable Output<EndpointGroupHealthCheckProtocol> healthCheckProtocol) {
            this.healthCheckProtocol = healthCheckProtocol;
            return this;
        }
        public Builder healthCheckProtocol(@Nullable EndpointGroupHealthCheckProtocol healthCheckProtocol) {
            this.healthCheckProtocol = Codegen.ofNullable(healthCheckProtocol);
            return this;
        }
        public Builder listenerArn(Output<String> listenerArn) {
            this.listenerArn = Objects.requireNonNull(listenerArn);
            return this;
        }
        public Builder listenerArn(String listenerArn) {
            this.listenerArn = Output.of(Objects.requireNonNull(listenerArn));
            return this;
        }
        public Builder portOverrides(@Nullable Output<List<EndpointGroupPortOverrideArgs>> portOverrides) {
            this.portOverrides = portOverrides;
            return this;
        }
        public Builder portOverrides(@Nullable List<EndpointGroupPortOverrideArgs> portOverrides) {
            this.portOverrides = Codegen.ofNullable(portOverrides);
            return this;
        }
        public Builder portOverrides(EndpointGroupPortOverrideArgs... portOverrides) {
            return portOverrides(List.of(portOverrides));
        }
        public Builder thresholdCount(@Nullable Output<Integer> thresholdCount) {
            this.thresholdCount = thresholdCount;
            return this;
        }
        public Builder thresholdCount(@Nullable Integer thresholdCount) {
            this.thresholdCount = Codegen.ofNullable(thresholdCount);
            return this;
        }
        public Builder trafficDialPercentage(@Nullable Output<Double> trafficDialPercentage) {
            this.trafficDialPercentage = trafficDialPercentage;
            return this;
        }
        public Builder trafficDialPercentage(@Nullable Double trafficDialPercentage) {
            this.trafficDialPercentage = Codegen.ofNullable(trafficDialPercentage);
            return this;
        }        public EndpointGroupArgs build() {
            return new EndpointGroupArgs(endpointConfigurations, endpointGroupRegion, healthCheckIntervalSeconds, healthCheckPath, healthCheckPort, healthCheckProtocol, listenerArn, portOverrides, thresholdCount, trafficDialPercentage);
        }
    }
}
