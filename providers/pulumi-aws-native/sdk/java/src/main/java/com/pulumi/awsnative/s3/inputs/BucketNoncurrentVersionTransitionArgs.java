// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.awsnative.s3.enums.BucketNoncurrentVersionTransitionStorageClass;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object&#39;s lifetime.
 * 
 */
public final class BucketNoncurrentVersionTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketNoncurrentVersionTransitionArgs Empty = new BucketNoncurrentVersionTransitionArgs();

    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    @Import(name="newerNoncurrentVersions")
      private final @Nullable Output<Integer> newerNoncurrentVersions;

    public Output<Integer> newerNoncurrentVersions() {
        return this.newerNoncurrentVersions == null ? Codegen.empty() : this.newerNoncurrentVersions;
    }

    /**
     * The class of storage used to store the object.
     * 
     */
    @Import(name="storageClass", required=true)
      private final Output<BucketNoncurrentVersionTransitionStorageClass> storageClass;

    public Output<BucketNoncurrentVersionTransitionStorageClass> storageClass() {
        return this.storageClass;
    }

    /**
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    @Import(name="transitionInDays", required=true)
      private final Output<Integer> transitionInDays;

    public Output<Integer> transitionInDays() {
        return this.transitionInDays;
    }

    public BucketNoncurrentVersionTransitionArgs(
        @Nullable Output<Integer> newerNoncurrentVersions,
        Output<BucketNoncurrentVersionTransitionStorageClass> storageClass,
        Output<Integer> transitionInDays) {
        this.newerNoncurrentVersions = newerNoncurrentVersions;
        this.storageClass = Objects.requireNonNull(storageClass, "expected parameter 'storageClass' to be non-null");
        this.transitionInDays = Objects.requireNonNull(transitionInDays, "expected parameter 'transitionInDays' to be non-null");
    }

    private BucketNoncurrentVersionTransitionArgs() {
        this.newerNoncurrentVersions = Codegen.empty();
        this.storageClass = Codegen.empty();
        this.transitionInDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketNoncurrentVersionTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> newerNoncurrentVersions;
        private Output<BucketNoncurrentVersionTransitionStorageClass> storageClass;
        private Output<Integer> transitionInDays;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketNoncurrentVersionTransitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.newerNoncurrentVersions = defaults.newerNoncurrentVersions;
    	      this.storageClass = defaults.storageClass;
    	      this.transitionInDays = defaults.transitionInDays;
        }

        public Builder newerNoncurrentVersions(@Nullable Output<Integer> newerNoncurrentVersions) {
            this.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }
        public Builder newerNoncurrentVersions(@Nullable Integer newerNoncurrentVersions) {
            this.newerNoncurrentVersions = Codegen.ofNullable(newerNoncurrentVersions);
            return this;
        }
        public Builder storageClass(Output<BucketNoncurrentVersionTransitionStorageClass> storageClass) {
            this.storageClass = Objects.requireNonNull(storageClass);
            return this;
        }
        public Builder storageClass(BucketNoncurrentVersionTransitionStorageClass storageClass) {
            this.storageClass = Output.of(Objects.requireNonNull(storageClass));
            return this;
        }
        public Builder transitionInDays(Output<Integer> transitionInDays) {
            this.transitionInDays = Objects.requireNonNull(transitionInDays);
            return this;
        }
        public Builder transitionInDays(Integer transitionInDays) {
            this.transitionInDays = Output.of(Objects.requireNonNull(transitionInDays));
            return this;
        }        public BucketNoncurrentVersionTransitionArgs build() {
            return new BucketNoncurrentVersionTransitionArgs(newerNoncurrentVersions, storageClass, transitionInDays);
        }
    }
}
