// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kendra.inputs;

import com.pulumi.awsnative.kendra.inputs.DataSourceProxyConfiguration;
import com.pulumi.awsnative.kendra.inputs.DataSourceWebCrawlerAuthenticationConfiguration;
import com.pulumi.awsnative.kendra.inputs.DataSourceWebCrawlerUrls;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceWebCrawlerConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final DataSourceWebCrawlerConfiguration Empty = new DataSourceWebCrawlerConfiguration();

    @Import(name="authenticationConfiguration")
    private @Nullable DataSourceWebCrawlerAuthenticationConfiguration authenticationConfiguration;

    public Optional<DataSourceWebCrawlerAuthenticationConfiguration> authenticationConfiguration() {
        return Optional.ofNullable(this.authenticationConfiguration);
    }

    @Import(name="crawlDepth")
    private @Nullable Integer crawlDepth;

    public Optional<Integer> crawlDepth() {
        return Optional.ofNullable(this.crawlDepth);
    }

    @Import(name="maxContentSizePerPageInMegaBytes")
    private @Nullable Double maxContentSizePerPageInMegaBytes;

    public Optional<Double> maxContentSizePerPageInMegaBytes() {
        return Optional.ofNullable(this.maxContentSizePerPageInMegaBytes);
    }

    @Import(name="maxLinksPerPage")
    private @Nullable Integer maxLinksPerPage;

    public Optional<Integer> maxLinksPerPage() {
        return Optional.ofNullable(this.maxLinksPerPage);
    }

    @Import(name="maxUrlsPerMinuteCrawlRate")
    private @Nullable Integer maxUrlsPerMinuteCrawlRate;

    public Optional<Integer> maxUrlsPerMinuteCrawlRate() {
        return Optional.ofNullable(this.maxUrlsPerMinuteCrawlRate);
    }

    @Import(name="proxyConfiguration")
    private @Nullable DataSourceProxyConfiguration proxyConfiguration;

    public Optional<DataSourceProxyConfiguration> proxyConfiguration() {
        return Optional.ofNullable(this.proxyConfiguration);
    }

    @Import(name="urlExclusionPatterns")
    private @Nullable List<String> urlExclusionPatterns;

    public Optional<List<String>> urlExclusionPatterns() {
        return Optional.ofNullable(this.urlExclusionPatterns);
    }

    @Import(name="urlInclusionPatterns")
    private @Nullable List<String> urlInclusionPatterns;

    public Optional<List<String>> urlInclusionPatterns() {
        return Optional.ofNullable(this.urlInclusionPatterns);
    }

    @Import(name="urls", required=true)
    private DataSourceWebCrawlerUrls urls;

    public DataSourceWebCrawlerUrls urls() {
        return this.urls;
    }

    private DataSourceWebCrawlerConfiguration() {}

    private DataSourceWebCrawlerConfiguration(DataSourceWebCrawlerConfiguration $) {
        this.authenticationConfiguration = $.authenticationConfiguration;
        this.crawlDepth = $.crawlDepth;
        this.maxContentSizePerPageInMegaBytes = $.maxContentSizePerPageInMegaBytes;
        this.maxLinksPerPage = $.maxLinksPerPage;
        this.maxUrlsPerMinuteCrawlRate = $.maxUrlsPerMinuteCrawlRate;
        this.proxyConfiguration = $.proxyConfiguration;
        this.urlExclusionPatterns = $.urlExclusionPatterns;
        this.urlInclusionPatterns = $.urlInclusionPatterns;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceWebCrawlerConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceWebCrawlerConfiguration $;

        public Builder() {
            $ = new DataSourceWebCrawlerConfiguration();
        }

        public Builder(DataSourceWebCrawlerConfiguration defaults) {
            $ = new DataSourceWebCrawlerConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder authenticationConfiguration(@Nullable DataSourceWebCrawlerAuthenticationConfiguration authenticationConfiguration) {
            $.authenticationConfiguration = authenticationConfiguration;
            return this;
        }

        public Builder crawlDepth(@Nullable Integer crawlDepth) {
            $.crawlDepth = crawlDepth;
            return this;
        }

        public Builder maxContentSizePerPageInMegaBytes(@Nullable Double maxContentSizePerPageInMegaBytes) {
            $.maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes;
            return this;
        }

        public Builder maxLinksPerPage(@Nullable Integer maxLinksPerPage) {
            $.maxLinksPerPage = maxLinksPerPage;
            return this;
        }

        public Builder maxUrlsPerMinuteCrawlRate(@Nullable Integer maxUrlsPerMinuteCrawlRate) {
            $.maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate;
            return this;
        }

        public Builder proxyConfiguration(@Nullable DataSourceProxyConfiguration proxyConfiguration) {
            $.proxyConfiguration = proxyConfiguration;
            return this;
        }

        public Builder urlExclusionPatterns(@Nullable List<String> urlExclusionPatterns) {
            $.urlExclusionPatterns = urlExclusionPatterns;
            return this;
        }

        public Builder urlExclusionPatterns(String... urlExclusionPatterns) {
            return urlExclusionPatterns(List.of(urlExclusionPatterns));
        }

        public Builder urlInclusionPatterns(@Nullable List<String> urlInclusionPatterns) {
            $.urlInclusionPatterns = urlInclusionPatterns;
            return this;
        }

        public Builder urlInclusionPatterns(String... urlInclusionPatterns) {
            return urlInclusionPatterns(List.of(urlInclusionPatterns));
        }

        public Builder urls(DataSourceWebCrawlerUrls urls) {
            $.urls = urls;
            return this;
        }

        public DataSourceWebCrawlerConfiguration build() {
            $.urls = Objects.requireNonNull($.urls, "expected parameter 'urls' to be non-null");
            return $;
        }
    }

}
