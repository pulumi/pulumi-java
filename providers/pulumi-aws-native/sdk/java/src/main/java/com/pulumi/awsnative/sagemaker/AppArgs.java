// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker;

import com.pulumi.awsnative.sagemaker.enums.AppType;
import com.pulumi.awsnative.sagemaker.inputs.AppResourceSpecArgs;
import com.pulumi.awsnative.sagemaker.inputs.AppTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * The name of the app.
     * 
     */
    @Import(name="appName")
      private final @Nullable Output<String> appName;

    public Output<String> appName() {
        return this.appName == null ? Codegen.empty() : this.appName;
    }

    /**
     * The type of app.
     * 
     */
    @Import(name="appType", required=true)
      private final Output<AppType> appType;

    public Output<AppType> appType() {
        return this.appType;
    }

    /**
     * The domain ID.
     * 
     */
    @Import(name="domainId", required=true)
      private final Output<String> domainId;

    public Output<String> domainId() {
        return this.domainId;
    }

    /**
     * The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
     * 
     */
    @Import(name="resourceSpec")
      private final @Nullable Output<AppResourceSpecArgs> resourceSpec;

    public Output<AppResourceSpecArgs> resourceSpec() {
        return this.resourceSpec == null ? Codegen.empty() : this.resourceSpec;
    }

    /**
     * A list of tags to apply to the app.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<AppTagArgs>> tags;

    public Output<List<AppTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The user profile name.
     * 
     */
    @Import(name="userProfileName", required=true)
      private final Output<String> userProfileName;

    public Output<String> userProfileName() {
        return this.userProfileName;
    }

    public AppArgs(
        @Nullable Output<String> appName,
        Output<AppType> appType,
        Output<String> domainId,
        @Nullable Output<AppResourceSpecArgs> resourceSpec,
        @Nullable Output<List<AppTagArgs>> tags,
        Output<String> userProfileName) {
        this.appName = appName;
        this.appType = Objects.requireNonNull(appType, "expected parameter 'appType' to be non-null");
        this.domainId = Objects.requireNonNull(domainId, "expected parameter 'domainId' to be non-null");
        this.resourceSpec = resourceSpec;
        this.tags = tags;
        this.userProfileName = Objects.requireNonNull(userProfileName, "expected parameter 'userProfileName' to be non-null");
    }

    private AppArgs() {
        this.appName = Codegen.empty();
        this.appType = Codegen.empty();
        this.domainId = Codegen.empty();
        this.resourceSpec = Codegen.empty();
        this.tags = Codegen.empty();
        this.userProfileName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> appName;
        private Output<AppType> appType;
        private Output<String> domainId;
        private @Nullable Output<AppResourceSpecArgs> resourceSpec;
        private @Nullable Output<List<AppTagArgs>> tags;
        private Output<String> userProfileName;

        public Builder() {
    	      // Empty
        }

        public Builder(AppArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appName = defaults.appName;
    	      this.appType = defaults.appType;
    	      this.domainId = defaults.domainId;
    	      this.resourceSpec = defaults.resourceSpec;
    	      this.tags = defaults.tags;
    	      this.userProfileName = defaults.userProfileName;
        }

        public Builder appName(@Nullable Output<String> appName) {
            this.appName = appName;
            return this;
        }
        public Builder appName(@Nullable String appName) {
            this.appName = Codegen.ofNullable(appName);
            return this;
        }
        public Builder appType(Output<AppType> appType) {
            this.appType = Objects.requireNonNull(appType);
            return this;
        }
        public Builder appType(AppType appType) {
            this.appType = Output.of(Objects.requireNonNull(appType));
            return this;
        }
        public Builder domainId(Output<String> domainId) {
            this.domainId = Objects.requireNonNull(domainId);
            return this;
        }
        public Builder domainId(String domainId) {
            this.domainId = Output.of(Objects.requireNonNull(domainId));
            return this;
        }
        public Builder resourceSpec(@Nullable Output<AppResourceSpecArgs> resourceSpec) {
            this.resourceSpec = resourceSpec;
            return this;
        }
        public Builder resourceSpec(@Nullable AppResourceSpecArgs resourceSpec) {
            this.resourceSpec = Codegen.ofNullable(resourceSpec);
            return this;
        }
        public Builder tags(@Nullable Output<List<AppTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<AppTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(AppTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder userProfileName(Output<String> userProfileName) {
            this.userProfileName = Objects.requireNonNull(userProfileName);
            return this;
        }
        public Builder userProfileName(String userProfileName) {
            this.userProfileName = Output.of(Objects.requireNonNull(userProfileName));
            return this;
        }        public AppArgs build() {
            return new AppArgs(appName, appType, domainId, resourceSpec, tags, userProfileName);
        }
    }
}
