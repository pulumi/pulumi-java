// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53.inputs;

import com.pulumi.awsnative.route53.enums.HealthCheckConfigPropertiesInsufficientDataHealthStatus;
import com.pulumi.awsnative.route53.enums.HealthCheckConfigPropertiesType;
import com.pulumi.awsnative.route53.inputs.HealthCheckAlarmIdentifierArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A complex type that contains information about the health check.
 * 
 */
public final class HealthCheckConfigPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final HealthCheckConfigPropertiesArgs Empty = new HealthCheckConfigPropertiesArgs();

    @Import(name="alarmIdentifier")
      private final @Nullable Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier;

    public Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier() {
        return this.alarmIdentifier == null ? Codegen.empty() : this.alarmIdentifier;
    }

    @Import(name="childHealthChecks")
      private final @Nullable Output<List<String>> childHealthChecks;

    public Output<List<String>> childHealthChecks() {
        return this.childHealthChecks == null ? Codegen.empty() : this.childHealthChecks;
    }

    @Import(name="enableSNI")
      private final @Nullable Output<Boolean> enableSNI;

    public Output<Boolean> enableSNI() {
        return this.enableSNI == null ? Codegen.empty() : this.enableSNI;
    }

    @Import(name="failureThreshold")
      private final @Nullable Output<Integer> failureThreshold;

    public Output<Integer> failureThreshold() {
        return this.failureThreshold == null ? Codegen.empty() : this.failureThreshold;
    }

    @Import(name="fullyQualifiedDomainName")
      private final @Nullable Output<String> fullyQualifiedDomainName;

    public Output<String> fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName == null ? Codegen.empty() : this.fullyQualifiedDomainName;
    }

    @Import(name="healthThreshold")
      private final @Nullable Output<Integer> healthThreshold;

    public Output<Integer> healthThreshold() {
        return this.healthThreshold == null ? Codegen.empty() : this.healthThreshold;
    }

    @Import(name="iPAddress")
      private final @Nullable Output<String> iPAddress;

    public Output<String> iPAddress() {
        return this.iPAddress == null ? Codegen.empty() : this.iPAddress;
    }

    @Import(name="insufficientDataHealthStatus")
      private final @Nullable Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus;

    public Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus() {
        return this.insufficientDataHealthStatus == null ? Codegen.empty() : this.insufficientDataHealthStatus;
    }

    @Import(name="inverted")
      private final @Nullable Output<Boolean> inverted;

    public Output<Boolean> inverted() {
        return this.inverted == null ? Codegen.empty() : this.inverted;
    }

    @Import(name="measureLatency")
      private final @Nullable Output<Boolean> measureLatency;

    public Output<Boolean> measureLatency() {
        return this.measureLatency == null ? Codegen.empty() : this.measureLatency;
    }

    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    @Import(name="regions")
      private final @Nullable Output<List<String>> regions;

    public Output<List<String>> regions() {
        return this.regions == null ? Codegen.empty() : this.regions;
    }

    @Import(name="requestInterval")
      private final @Nullable Output<Integer> requestInterval;

    public Output<Integer> requestInterval() {
        return this.requestInterval == null ? Codegen.empty() : this.requestInterval;
    }

    @Import(name="resourcePath")
      private final @Nullable Output<String> resourcePath;

    public Output<String> resourcePath() {
        return this.resourcePath == null ? Codegen.empty() : this.resourcePath;
    }

    @Import(name="routingControlArn")
      private final @Nullable Output<String> routingControlArn;

    public Output<String> routingControlArn() {
        return this.routingControlArn == null ? Codegen.empty() : this.routingControlArn;
    }

    @Import(name="searchString")
      private final @Nullable Output<String> searchString;

    public Output<String> searchString() {
        return this.searchString == null ? Codegen.empty() : this.searchString;
    }

    @Import(name="type", required=true)
      private final Output<HealthCheckConfigPropertiesType> type;

    public Output<HealthCheckConfigPropertiesType> type() {
        return this.type;
    }

    public HealthCheckConfigPropertiesArgs(
        @Nullable Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier,
        @Nullable Output<List<String>> childHealthChecks,
        @Nullable Output<Boolean> enableSNI,
        @Nullable Output<Integer> failureThreshold,
        @Nullable Output<String> fullyQualifiedDomainName,
        @Nullable Output<Integer> healthThreshold,
        @Nullable Output<String> iPAddress,
        @Nullable Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus,
        @Nullable Output<Boolean> inverted,
        @Nullable Output<Boolean> measureLatency,
        @Nullable Output<Integer> port,
        @Nullable Output<List<String>> regions,
        @Nullable Output<Integer> requestInterval,
        @Nullable Output<String> resourcePath,
        @Nullable Output<String> routingControlArn,
        @Nullable Output<String> searchString,
        Output<HealthCheckConfigPropertiesType> type) {
        this.alarmIdentifier = alarmIdentifier;
        this.childHealthChecks = childHealthChecks;
        this.enableSNI = enableSNI;
        this.failureThreshold = failureThreshold;
        this.fullyQualifiedDomainName = fullyQualifiedDomainName;
        this.healthThreshold = healthThreshold;
        this.iPAddress = iPAddress;
        this.insufficientDataHealthStatus = insufficientDataHealthStatus;
        this.inverted = inverted;
        this.measureLatency = measureLatency;
        this.port = port;
        this.regions = regions;
        this.requestInterval = requestInterval;
        this.resourcePath = resourcePath;
        this.routingControlArn = routingControlArn;
        this.searchString = searchString;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private HealthCheckConfigPropertiesArgs() {
        this.alarmIdentifier = Codegen.empty();
        this.childHealthChecks = Codegen.empty();
        this.enableSNI = Codegen.empty();
        this.failureThreshold = Codegen.empty();
        this.fullyQualifiedDomainName = Codegen.empty();
        this.healthThreshold = Codegen.empty();
        this.iPAddress = Codegen.empty();
        this.insufficientDataHealthStatus = Codegen.empty();
        this.inverted = Codegen.empty();
        this.measureLatency = Codegen.empty();
        this.port = Codegen.empty();
        this.regions = Codegen.empty();
        this.requestInterval = Codegen.empty();
        this.resourcePath = Codegen.empty();
        this.routingControlArn = Codegen.empty();
        this.searchString = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HealthCheckConfigPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier;
        private @Nullable Output<List<String>> childHealthChecks;
        private @Nullable Output<Boolean> enableSNI;
        private @Nullable Output<Integer> failureThreshold;
        private @Nullable Output<String> fullyQualifiedDomainName;
        private @Nullable Output<Integer> healthThreshold;
        private @Nullable Output<String> iPAddress;
        private @Nullable Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus;
        private @Nullable Output<Boolean> inverted;
        private @Nullable Output<Boolean> measureLatency;
        private @Nullable Output<Integer> port;
        private @Nullable Output<List<String>> regions;
        private @Nullable Output<Integer> requestInterval;
        private @Nullable Output<String> resourcePath;
        private @Nullable Output<String> routingControlArn;
        private @Nullable Output<String> searchString;
        private Output<HealthCheckConfigPropertiesType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(HealthCheckConfigPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarmIdentifier = defaults.alarmIdentifier;
    	      this.childHealthChecks = defaults.childHealthChecks;
    	      this.enableSNI = defaults.enableSNI;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.fullyQualifiedDomainName = defaults.fullyQualifiedDomainName;
    	      this.healthThreshold = defaults.healthThreshold;
    	      this.iPAddress = defaults.iPAddress;
    	      this.insufficientDataHealthStatus = defaults.insufficientDataHealthStatus;
    	      this.inverted = defaults.inverted;
    	      this.measureLatency = defaults.measureLatency;
    	      this.port = defaults.port;
    	      this.regions = defaults.regions;
    	      this.requestInterval = defaults.requestInterval;
    	      this.resourcePath = defaults.resourcePath;
    	      this.routingControlArn = defaults.routingControlArn;
    	      this.searchString = defaults.searchString;
    	      this.type = defaults.type;
        }

        public Builder alarmIdentifier(@Nullable Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier) {
            this.alarmIdentifier = alarmIdentifier;
            return this;
        }
        public Builder alarmIdentifier(@Nullable HealthCheckAlarmIdentifierArgs alarmIdentifier) {
            this.alarmIdentifier = Codegen.ofNullable(alarmIdentifier);
            return this;
        }
        public Builder childHealthChecks(@Nullable Output<List<String>> childHealthChecks) {
            this.childHealthChecks = childHealthChecks;
            return this;
        }
        public Builder childHealthChecks(@Nullable List<String> childHealthChecks) {
            this.childHealthChecks = Codegen.ofNullable(childHealthChecks);
            return this;
        }
        public Builder childHealthChecks(String... childHealthChecks) {
            return childHealthChecks(List.of(childHealthChecks));
        }
        public Builder enableSNI(@Nullable Output<Boolean> enableSNI) {
            this.enableSNI = enableSNI;
            return this;
        }
        public Builder enableSNI(@Nullable Boolean enableSNI) {
            this.enableSNI = Codegen.ofNullable(enableSNI);
            return this;
        }
        public Builder failureThreshold(@Nullable Output<Integer> failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }
        public Builder failureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = Codegen.ofNullable(failureThreshold);
            return this;
        }
        public Builder fullyQualifiedDomainName(@Nullable Output<String> fullyQualifiedDomainName) {
            this.fullyQualifiedDomainName = fullyQualifiedDomainName;
            return this;
        }
        public Builder fullyQualifiedDomainName(@Nullable String fullyQualifiedDomainName) {
            this.fullyQualifiedDomainName = Codegen.ofNullable(fullyQualifiedDomainName);
            return this;
        }
        public Builder healthThreshold(@Nullable Output<Integer> healthThreshold) {
            this.healthThreshold = healthThreshold;
            return this;
        }
        public Builder healthThreshold(@Nullable Integer healthThreshold) {
            this.healthThreshold = Codegen.ofNullable(healthThreshold);
            return this;
        }
        public Builder iPAddress(@Nullable Output<String> iPAddress) {
            this.iPAddress = iPAddress;
            return this;
        }
        public Builder iPAddress(@Nullable String iPAddress) {
            this.iPAddress = Codegen.ofNullable(iPAddress);
            return this;
        }
        public Builder insufficientDataHealthStatus(@Nullable Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus) {
            this.insufficientDataHealthStatus = insufficientDataHealthStatus;
            return this;
        }
        public Builder insufficientDataHealthStatus(@Nullable HealthCheckConfigPropertiesInsufficientDataHealthStatus insufficientDataHealthStatus) {
            this.insufficientDataHealthStatus = Codegen.ofNullable(insufficientDataHealthStatus);
            return this;
        }
        public Builder inverted(@Nullable Output<Boolean> inverted) {
            this.inverted = inverted;
            return this;
        }
        public Builder inverted(@Nullable Boolean inverted) {
            this.inverted = Codegen.ofNullable(inverted);
            return this;
        }
        public Builder measureLatency(@Nullable Output<Boolean> measureLatency) {
            this.measureLatency = measureLatency;
            return this;
        }
        public Builder measureLatency(@Nullable Boolean measureLatency) {
            this.measureLatency = Codegen.ofNullable(measureLatency);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder regions(@Nullable Output<List<String>> regions) {
            this.regions = regions;
            return this;
        }
        public Builder regions(@Nullable List<String> regions) {
            this.regions = Codegen.ofNullable(regions);
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        public Builder requestInterval(@Nullable Output<Integer> requestInterval) {
            this.requestInterval = requestInterval;
            return this;
        }
        public Builder requestInterval(@Nullable Integer requestInterval) {
            this.requestInterval = Codegen.ofNullable(requestInterval);
            return this;
        }
        public Builder resourcePath(@Nullable Output<String> resourcePath) {
            this.resourcePath = resourcePath;
            return this;
        }
        public Builder resourcePath(@Nullable String resourcePath) {
            this.resourcePath = Codegen.ofNullable(resourcePath);
            return this;
        }
        public Builder routingControlArn(@Nullable Output<String> routingControlArn) {
            this.routingControlArn = routingControlArn;
            return this;
        }
        public Builder routingControlArn(@Nullable String routingControlArn) {
            this.routingControlArn = Codegen.ofNullable(routingControlArn);
            return this;
        }
        public Builder searchString(@Nullable Output<String> searchString) {
            this.searchString = searchString;
            return this;
        }
        public Builder searchString(@Nullable String searchString) {
            this.searchString = Codegen.ofNullable(searchString);
            return this;
        }
        public Builder type(Output<HealthCheckConfigPropertiesType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(HealthCheckConfigPropertiesType type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public HealthCheckConfigPropertiesArgs build() {
            return new HealthCheckConfigPropertiesArgs(alarmIdentifier, childHealthChecks, enableSNI, failureThreshold, fullyQualifiedDomainName, healthThreshold, iPAddress, insufficientDataHealthStatus, inverted, measureLatency, port, regions, requestInterval, resourcePath, routingControlArn, searchString, type);
        }
    }
}
