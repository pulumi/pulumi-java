// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;Amazon Redshift parameters. The &lt;code&gt;ClusterId&lt;/code&gt; field can be blank if
 *             &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; are both set. The &lt;code&gt;Host&lt;/code&gt; and
 *             &lt;code&gt;Port&lt;/code&gt; fields can be blank if the &lt;code&gt;ClusterId&lt;/code&gt; field is set.&lt;/p&gt;
 * 
 */
public final class DataSourceRedshiftParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceRedshiftParametersArgs Empty = new DataSourceRedshiftParametersArgs();

    /**
     * &lt;p&gt;Cluster ID. This field can be blank if the &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; are
     *             provided.&lt;/p&gt;
     * 
     */
    @Import(name="clusterId")
      private final @Nullable Output<String> clusterId;

    public Output<String> clusterId() {
        return this.clusterId == null ? Codegen.empty() : this.clusterId;
    }

    /**
     * &lt;p&gt;Database.&lt;/p&gt;
     * 
     */
    @Import(name="database", required=true)
      private final Output<String> database;

    public Output<String> database() {
        return this.database;
    }

    /**
     * &lt;p&gt;Host. This field can be blank if &lt;code&gt;ClusterId&lt;/code&gt; is provided.&lt;/p&gt;
     * 
     */
    @Import(name="host")
      private final @Nullable Output<String> host;

    public Output<String> host() {
        return this.host == null ? Codegen.empty() : this.host;
    }

    /**
     * &lt;p&gt;Port. This field can be blank if the &lt;code&gt;ClusterId&lt;/code&gt; is provided.&lt;/p&gt;
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Double> port;

    public Output<Double> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    public DataSourceRedshiftParametersArgs(
        @Nullable Output<String> clusterId,
        Output<String> database,
        @Nullable Output<String> host,
        @Nullable Output<Double> port) {
        this.clusterId = clusterId;
        this.database = Objects.requireNonNull(database, "expected parameter 'database' to be non-null");
        this.host = host;
        this.port = port;
    }

    private DataSourceRedshiftParametersArgs() {
        this.clusterId = Codegen.empty();
        this.database = Codegen.empty();
        this.host = Codegen.empty();
        this.port = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceRedshiftParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> clusterId;
        private Output<String> database;
        private @Nullable Output<String> host;
        private @Nullable Output<Double> port;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceRedshiftParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.database = defaults.database;
    	      this.host = defaults.host;
    	      this.port = defaults.port;
        }

        public Builder clusterId(@Nullable Output<String> clusterId) {
            this.clusterId = clusterId;
            return this;
        }
        public Builder clusterId(@Nullable String clusterId) {
            this.clusterId = Codegen.ofNullable(clusterId);
            return this;
        }
        public Builder database(Output<String> database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }
        public Builder database(String database) {
            this.database = Output.of(Objects.requireNonNull(database));
            return this;
        }
        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = Codegen.ofNullable(host);
            return this;
        }
        public Builder port(@Nullable Output<Double> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Double port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }        public DataSourceRedshiftParametersArgs build() {
            return new DataSourceRedshiftParametersArgs(clusterId, database, host, port);
        }
    }
}
