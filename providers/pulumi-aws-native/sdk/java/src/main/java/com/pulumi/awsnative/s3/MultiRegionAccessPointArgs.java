// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3;

import com.pulumi.awsnative.s3.inputs.MultiRegionAccessPointPublicAccessBlockConfigurationArgs;
import com.pulumi.awsnative.s3.inputs.MultiRegionAccessPointRegionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MultiRegionAccessPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final MultiRegionAccessPointArgs Empty = new MultiRegionAccessPointArgs();

    /**
     * The name you want to assign to this Multi Region Access Point.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The PublicAccessBlock configuration that you want to apply to this Multi Region Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status &#39;The Meaning of Public&#39; in the Amazon Simple Storage Service Developer Guide.
     * 
     */
    @Import(name="publicAccessBlockConfiguration")
    private @Nullable Output<MultiRegionAccessPointPublicAccessBlockConfigurationArgs> publicAccessBlockConfiguration;

    public Optional<Output<MultiRegionAccessPointPublicAccessBlockConfigurationArgs>> publicAccessBlockConfiguration() {
        return Optional.ofNullable(this.publicAccessBlockConfiguration);
    }

    /**
     * The list of buckets that you want to associate this Multi Region Access Point with.
     * 
     */
    @Import(name="regions", required=true)
    private Output<List<MultiRegionAccessPointRegionArgs>> regions;

    public Output<List<MultiRegionAccessPointRegionArgs>> regions() {
        return this.regions;
    }

    private MultiRegionAccessPointArgs() {}

    private MultiRegionAccessPointArgs(MultiRegionAccessPointArgs $) {
        this.name = $.name;
        this.publicAccessBlockConfiguration = $.publicAccessBlockConfiguration;
        this.regions = $.regions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MultiRegionAccessPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MultiRegionAccessPointArgs $;

        public Builder() {
            $ = new MultiRegionAccessPointArgs();
        }

        public Builder(MultiRegionAccessPointArgs defaults) {
            $ = new MultiRegionAccessPointArgs(Objects.requireNonNull(defaults));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder publicAccessBlockConfiguration(@Nullable Output<MultiRegionAccessPointPublicAccessBlockConfigurationArgs> publicAccessBlockConfiguration) {
            $.publicAccessBlockConfiguration = publicAccessBlockConfiguration;
            return this;
        }

        public Builder publicAccessBlockConfiguration(MultiRegionAccessPointPublicAccessBlockConfigurationArgs publicAccessBlockConfiguration) {
            return publicAccessBlockConfiguration(Output.of(publicAccessBlockConfiguration));
        }

        public Builder regions(Output<List<MultiRegionAccessPointRegionArgs>> regions) {
            $.regions = regions;
            return this;
        }

        public Builder regions(List<MultiRegionAccessPointRegionArgs> regions) {
            return regions(Output.of(regions));
        }

        public Builder regions(MultiRegionAccessPointRegionArgs... regions) {
            return regions(List.of(regions));
        }

        public MultiRegionAccessPointArgs build() {
            $.regions = Objects.requireNonNull($.regions, "expected parameter 'regions' to be non-null");
            return $;
        }
    }

}
