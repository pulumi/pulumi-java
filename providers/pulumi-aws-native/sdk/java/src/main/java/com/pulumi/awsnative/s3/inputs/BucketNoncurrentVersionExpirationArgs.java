// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Container for the expiration rule that describes when noncurrent objects are expired. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 expire noncurrent object versions at a specific period in the object's lifetime
 * 
 */
public final class BucketNoncurrentVersionExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketNoncurrentVersionExpirationArgs Empty = new BucketNoncurrentVersionExpirationArgs();

    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    @Import(name="newerNoncurrentVersions")
      private final @Nullable Output<Integer> newerNoncurrentVersions;

    public Output<Integer> newerNoncurrentVersions() {
        return this.newerNoncurrentVersions == null ? Codegen.empty() : this.newerNoncurrentVersions;
    }

    /**
     * Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
     * 
     */
    @Import(name="noncurrentDays", required=true)
      private final Output<Integer> noncurrentDays;

    public Output<Integer> noncurrentDays() {
        return this.noncurrentDays;
    }

    public BucketNoncurrentVersionExpirationArgs(
        @Nullable Output<Integer> newerNoncurrentVersions,
        Output<Integer> noncurrentDays) {
        this.newerNoncurrentVersions = newerNoncurrentVersions;
        this.noncurrentDays = Objects.requireNonNull(noncurrentDays, "expected parameter 'noncurrentDays' to be non-null");
    }

    private BucketNoncurrentVersionExpirationArgs() {
        this.newerNoncurrentVersions = Codegen.empty();
        this.noncurrentDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketNoncurrentVersionExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> newerNoncurrentVersions;
        private Output<Integer> noncurrentDays;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketNoncurrentVersionExpirationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.newerNoncurrentVersions = defaults.newerNoncurrentVersions;
    	      this.noncurrentDays = defaults.noncurrentDays;
        }

        public Builder newerNoncurrentVersions(@Nullable Output<Integer> newerNoncurrentVersions) {
            this.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }
        public Builder newerNoncurrentVersions(@Nullable Integer newerNoncurrentVersions) {
            this.newerNoncurrentVersions = Codegen.ofNullable(newerNoncurrentVersions);
            return this;
        }
        public Builder noncurrentDays(Output<Integer> noncurrentDays) {
            this.noncurrentDays = Objects.requireNonNull(noncurrentDays);
            return this;
        }
        public Builder noncurrentDays(Integer noncurrentDays) {
            this.noncurrentDays = Output.of(Objects.requireNonNull(noncurrentDays));
            return this;
        }        public BucketNoncurrentVersionExpirationArgs build() {
            return new BucketNoncurrentVersionExpirationArgs(newerNoncurrentVersions, noncurrentDays);
        }
    }
}
