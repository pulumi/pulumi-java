// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.gamelift;

import com.pulumi.awsnative.gamelift.enums.GameServerGroupBalancingStrategy;
import com.pulumi.awsnative.gamelift.enums.GameServerGroupDeleteOption;
import com.pulumi.awsnative.gamelift.enums.GameServerGroupGameServerProtectionPolicy;
import com.pulumi.awsnative.gamelift.inputs.GameServerGroupAutoScalingPolicyArgs;
import com.pulumi.awsnative.gamelift.inputs.GameServerGroupInstanceDefinitionArgs;
import com.pulumi.awsnative.gamelift.inputs.GameServerGroupLaunchTemplateArgs;
import com.pulumi.awsnative.gamelift.inputs.GameServerGroupTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GameServerGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final GameServerGroupArgs Empty = new GameServerGroupArgs();

    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
     * 
     */
    @Import(name="autoScalingPolicy")
      private final @Nullable Output<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy;

    public Output<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy() {
        return this.autoScalingPolicy == null ? Codegen.empty() : this.autoScalingPolicy;
    }

    /**
     * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
     * 
     */
    @Import(name="balancingStrategy")
      private final @Nullable Output<GameServerGroupBalancingStrategy> balancingStrategy;

    public Output<GameServerGroupBalancingStrategy> balancingStrategy() {
        return this.balancingStrategy == null ? Codegen.empty() : this.balancingStrategy;
    }

    /**
     * The type of delete to perform.
     * 
     */
    @Import(name="deleteOption")
      private final @Nullable Output<GameServerGroupDeleteOption> deleteOption;

    public Output<GameServerGroupDeleteOption> deleteOption() {
        return this.deleteOption == null ? Codegen.empty() : this.deleteOption;
    }

    /**
     * An identifier for the new game server group.
     * 
     */
    @Import(name="gameServerGroupName")
      private final @Nullable Output<String> gameServerGroupName;

    public Output<String> gameServerGroupName() {
        return this.gameServerGroupName == null ? Codegen.empty() : this.gameServerGroupName;
    }

    /**
     * A flag that indicates whether instances in the game server group are protected from early termination.
     * 
     */
    @Import(name="gameServerProtectionPolicy")
      private final @Nullable Output<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy;

    public Output<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy() {
        return this.gameServerProtectionPolicy == null ? Codegen.empty() : this.gameServerProtectionPolicy;
    }

    /**
     * A set of EC2 instance types to use when creating instances in the group.
     * 
     */
    @Import(name="instanceDefinitions", required=true)
      private final Output<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions;

    public Output<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions() {
        return this.instanceDefinitions;
    }

    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
     * 
     */
    @Import(name="launchTemplate", required=true)
      private final Output<GameServerGroupLaunchTemplateArgs> launchTemplate;

    public Output<GameServerGroupLaunchTemplateArgs> launchTemplate() {
        return this.launchTemplate;
    }

    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     * 
     */
    @Import(name="maxSize")
      private final @Nullable Output<Double> maxSize;

    public Output<Double> maxSize() {
        return this.maxSize == null ? Codegen.empty() : this.maxSize;
    }

    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     * 
     */
    @Import(name="minSize")
      private final @Nullable Output<Double> minSize;

    public Output<Double> minSize() {
        return this.minSize == null ? Codegen.empty() : this.minSize;
    }

    /**
     * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     * 
     */
    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * A list of labels to assign to the new game server group resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<GameServerGroupTagArgs>> tags;

    public Output<List<GameServerGroupTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
     * 
     */
    @Import(name="vpcSubnets")
      private final @Nullable Output<List<String>> vpcSubnets;

    public Output<List<String>> vpcSubnets() {
        return this.vpcSubnets == null ? Codegen.empty() : this.vpcSubnets;
    }

    public GameServerGroupArgs(
        @Nullable Output<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy,
        @Nullable Output<GameServerGroupBalancingStrategy> balancingStrategy,
        @Nullable Output<GameServerGroupDeleteOption> deleteOption,
        @Nullable Output<String> gameServerGroupName,
        @Nullable Output<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy,
        Output<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions,
        Output<GameServerGroupLaunchTemplateArgs> launchTemplate,
        @Nullable Output<Double> maxSize,
        @Nullable Output<Double> minSize,
        Output<String> roleArn,
        @Nullable Output<List<GameServerGroupTagArgs>> tags,
        @Nullable Output<List<String>> vpcSubnets) {
        this.autoScalingPolicy = autoScalingPolicy;
        this.balancingStrategy = balancingStrategy;
        this.deleteOption = deleteOption;
        this.gameServerGroupName = gameServerGroupName;
        this.gameServerProtectionPolicy = gameServerProtectionPolicy;
        this.instanceDefinitions = Objects.requireNonNull(instanceDefinitions, "expected parameter 'instanceDefinitions' to be non-null");
        this.launchTemplate = Objects.requireNonNull(launchTemplate, "expected parameter 'launchTemplate' to be non-null");
        this.maxSize = maxSize;
        this.minSize = minSize;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.tags = tags;
        this.vpcSubnets = vpcSubnets;
    }

    private GameServerGroupArgs() {
        this.autoScalingPolicy = Codegen.empty();
        this.balancingStrategy = Codegen.empty();
        this.deleteOption = Codegen.empty();
        this.gameServerGroupName = Codegen.empty();
        this.gameServerProtectionPolicy = Codegen.empty();
        this.instanceDefinitions = Codegen.empty();
        this.launchTemplate = Codegen.empty();
        this.maxSize = Codegen.empty();
        this.minSize = Codegen.empty();
        this.roleArn = Codegen.empty();
        this.tags = Codegen.empty();
        this.vpcSubnets = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GameServerGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy;
        private @Nullable Output<GameServerGroupBalancingStrategy> balancingStrategy;
        private @Nullable Output<GameServerGroupDeleteOption> deleteOption;
        private @Nullable Output<String> gameServerGroupName;
        private @Nullable Output<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy;
        private Output<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions;
        private Output<GameServerGroupLaunchTemplateArgs> launchTemplate;
        private @Nullable Output<Double> maxSize;
        private @Nullable Output<Double> minSize;
        private Output<String> roleArn;
        private @Nullable Output<List<GameServerGroupTagArgs>> tags;
        private @Nullable Output<List<String>> vpcSubnets;

        public Builder() {
    	      // Empty
        }

        public Builder(GameServerGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingPolicy = defaults.autoScalingPolicy;
    	      this.balancingStrategy = defaults.balancingStrategy;
    	      this.deleteOption = defaults.deleteOption;
    	      this.gameServerGroupName = defaults.gameServerGroupName;
    	      this.gameServerProtectionPolicy = defaults.gameServerProtectionPolicy;
    	      this.instanceDefinitions = defaults.instanceDefinitions;
    	      this.launchTemplate = defaults.launchTemplate;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
    	      this.vpcSubnets = defaults.vpcSubnets;
        }

        public Builder autoScalingPolicy(@Nullable Output<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy) {
            this.autoScalingPolicy = autoScalingPolicy;
            return this;
        }
        public Builder autoScalingPolicy(@Nullable GameServerGroupAutoScalingPolicyArgs autoScalingPolicy) {
            this.autoScalingPolicy = Codegen.ofNullable(autoScalingPolicy);
            return this;
        }
        public Builder balancingStrategy(@Nullable Output<GameServerGroupBalancingStrategy> balancingStrategy) {
            this.balancingStrategy = balancingStrategy;
            return this;
        }
        public Builder balancingStrategy(@Nullable GameServerGroupBalancingStrategy balancingStrategy) {
            this.balancingStrategy = Codegen.ofNullable(balancingStrategy);
            return this;
        }
        public Builder deleteOption(@Nullable Output<GameServerGroupDeleteOption> deleteOption) {
            this.deleteOption = deleteOption;
            return this;
        }
        public Builder deleteOption(@Nullable GameServerGroupDeleteOption deleteOption) {
            this.deleteOption = Codegen.ofNullable(deleteOption);
            return this;
        }
        public Builder gameServerGroupName(@Nullable Output<String> gameServerGroupName) {
            this.gameServerGroupName = gameServerGroupName;
            return this;
        }
        public Builder gameServerGroupName(@Nullable String gameServerGroupName) {
            this.gameServerGroupName = Codegen.ofNullable(gameServerGroupName);
            return this;
        }
        public Builder gameServerProtectionPolicy(@Nullable Output<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy) {
            this.gameServerProtectionPolicy = gameServerProtectionPolicy;
            return this;
        }
        public Builder gameServerProtectionPolicy(@Nullable GameServerGroupGameServerProtectionPolicy gameServerProtectionPolicy) {
            this.gameServerProtectionPolicy = Codegen.ofNullable(gameServerProtectionPolicy);
            return this;
        }
        public Builder instanceDefinitions(Output<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions) {
            this.instanceDefinitions = Objects.requireNonNull(instanceDefinitions);
            return this;
        }
        public Builder instanceDefinitions(List<GameServerGroupInstanceDefinitionArgs> instanceDefinitions) {
            this.instanceDefinitions = Output.of(Objects.requireNonNull(instanceDefinitions));
            return this;
        }
        public Builder instanceDefinitions(GameServerGroupInstanceDefinitionArgs... instanceDefinitions) {
            return instanceDefinitions(List.of(instanceDefinitions));
        }
        public Builder launchTemplate(Output<GameServerGroupLaunchTemplateArgs> launchTemplate) {
            this.launchTemplate = Objects.requireNonNull(launchTemplate);
            return this;
        }
        public Builder launchTemplate(GameServerGroupLaunchTemplateArgs launchTemplate) {
            this.launchTemplate = Output.of(Objects.requireNonNull(launchTemplate));
            return this;
        }
        public Builder maxSize(@Nullable Output<Double> maxSize) {
            this.maxSize = maxSize;
            return this;
        }
        public Builder maxSize(@Nullable Double maxSize) {
            this.maxSize = Codegen.ofNullable(maxSize);
            return this;
        }
        public Builder minSize(@Nullable Output<Double> minSize) {
            this.minSize = minSize;
            return this;
        }
        public Builder minSize(@Nullable Double minSize) {
            this.minSize = Codegen.ofNullable(minSize);
            return this;
        }
        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public Builder tags(@Nullable Output<List<GameServerGroupTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<GameServerGroupTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(GameServerGroupTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder vpcSubnets(@Nullable Output<List<String>> vpcSubnets) {
            this.vpcSubnets = vpcSubnets;
            return this;
        }
        public Builder vpcSubnets(@Nullable List<String> vpcSubnets) {
            this.vpcSubnets = Codegen.ofNullable(vpcSubnets);
            return this;
        }
        public Builder vpcSubnets(String... vpcSubnets) {
            return vpcSubnets(List.of(vpcSubnets));
        }        public GameServerGroupArgs build() {
            return new GameServerGroupArgs(autoScalingPolicy, balancingStrategy, deleteOption, gameServerGroupName, gameServerProtectionPolicy, instanceDefinitions, launchTemplate, maxSize, minSize, roleArn, tags, vpcSubnets);
        }
    }
}
