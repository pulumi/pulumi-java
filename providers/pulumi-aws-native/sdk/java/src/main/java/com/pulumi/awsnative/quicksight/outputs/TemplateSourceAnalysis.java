// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.outputs;

import com.pulumi.awsnative.quicksight.outputs.TemplateDataSetReference;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TemplateSourceAnalysis {
    /**
     * &lt;p&gt;The Amazon Resource Name (ARN) of the resource.&lt;/p&gt;
     * 
     */
    private final String arn;
    /**
     * &lt;p&gt;A structure containing information about the dataset references used as placeholders
     *             in the template.&lt;/p&gt;
     * 
     */
    private final List<TemplateDataSetReference> dataSetReferences;

    @CustomType.Constructor
    private TemplateSourceAnalysis(
        @CustomType.Parameter("arn") String arn,
        @CustomType.Parameter("dataSetReferences") List<TemplateDataSetReference> dataSetReferences) {
        this.arn = arn;
        this.dataSetReferences = dataSetReferences;
    }

    /**
     * &lt;p&gt;The Amazon Resource Name (ARN) of the resource.&lt;/p&gt;
     * 
    */
    public String arn() {
        return this.arn;
    }
    /**
     * &lt;p&gt;A structure containing information about the dataset references used as placeholders
     *             in the template.&lt;/p&gt;
     * 
    */
    public List<TemplateDataSetReference> dataSetReferences() {
        return this.dataSetReferences;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateSourceAnalysis defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private List<TemplateDataSetReference> dataSetReferences;

        public Builder() {
    	      // Empty
        }

        public Builder(TemplateSourceAnalysis defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.dataSetReferences = defaults.dataSetReferences;
        }

        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder dataSetReferences(List<TemplateDataSetReference> dataSetReferences) {
            this.dataSetReferences = Objects.requireNonNull(dataSetReferences);
            return this;
        }
        public Builder dataSetReferences(TemplateDataSetReference... dataSetReferences) {
            return dataSetReferences(List.of(dataSetReferences));
        }        public TemplateSourceAnalysis build() {
            return new TemplateSourceAnalysis(arn, dataSetReferences);
        }
    }
}
