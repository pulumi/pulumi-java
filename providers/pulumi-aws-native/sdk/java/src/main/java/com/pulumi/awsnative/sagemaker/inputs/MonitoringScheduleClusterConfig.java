// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for the cluster used to run model monitoring jobs.
 * 
 */
public final class MonitoringScheduleClusterConfig extends com.pulumi.resources.InvokeArgs {

    public static final MonitoringScheduleClusterConfig Empty = new MonitoringScheduleClusterConfig();

    /**
     * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
     * 
     */
    @Import(name="instanceCount", required=true)
    private Integer instanceCount;

    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * The ML compute instance type for the processing job.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     * 
     */
    @Import(name="volumeKmsKeyId")
    private @Nullable String volumeKmsKeyId;

    public Optional<String> volumeKmsKeyId() {
        return Optional.ofNullable(this.volumeKmsKeyId);
    }

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
     * 
     */
    @Import(name="volumeSizeInGB", required=true)
    private Integer volumeSizeInGB;

    public Integer volumeSizeInGB() {
        return this.volumeSizeInGB;
    }

    private MonitoringScheduleClusterConfig() {}

    private MonitoringScheduleClusterConfig(MonitoringScheduleClusterConfig $) {
        this.instanceCount = $.instanceCount;
        this.instanceType = $.instanceType;
        this.volumeKmsKeyId = $.volumeKmsKeyId;
        this.volumeSizeInGB = $.volumeSizeInGB;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoringScheduleClusterConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoringScheduleClusterConfig $;

        public Builder() {
            $ = new MonitoringScheduleClusterConfig();
        }

        public Builder(MonitoringScheduleClusterConfig defaults) {
            $ = new MonitoringScheduleClusterConfig(Objects.requireNonNull(defaults));
        }

        public Builder instanceCount(Integer instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder volumeKmsKeyId(@Nullable String volumeKmsKeyId) {
            $.volumeKmsKeyId = volumeKmsKeyId;
            return this;
        }

        public Builder volumeSizeInGB(Integer volumeSizeInGB) {
            $.volumeSizeInGB = volumeSizeInGB;
            return this;
        }

        public MonitoringScheduleClusterConfig build() {
            $.instanceCount = Objects.requireNonNull($.instanceCount, "expected parameter 'instanceCount' to be non-null");
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            $.volumeSizeInGB = Objects.requireNonNull($.volumeSizeInGB, "expected parameter 'volumeSizeInGB' to be non-null");
            return $;
        }
    }

}
