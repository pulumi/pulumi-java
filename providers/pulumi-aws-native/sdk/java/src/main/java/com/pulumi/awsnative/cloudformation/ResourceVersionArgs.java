// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudformation;

import com.pulumi.awsnative.cloudformation.inputs.ResourceVersionLoggingConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResourceVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceVersionArgs Empty = new ResourceVersionArgs();

    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
     * 
     */
    @Import(name="executionRoleArn")
      private final @Nullable Output<String> executionRoleArn;

    public Output<String> executionRoleArn() {
        return this.executionRoleArn == null ? Codegen.empty() : this.executionRoleArn;
    }

    /**
     * Specifies logging configuration information for a type.
     * 
     */
    @Import(name="loggingConfig")
      private final @Nullable Output<ResourceVersionLoggingConfigArgs> loggingConfig;

    public Output<ResourceVersionLoggingConfigArgs> loggingConfig() {
        return this.loggingConfig == null ? Codegen.empty() : this.loggingConfig;
    }

    /**
     * A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated files for the type you want to register.
     * 
     * For information on generating a schema handler package for the type you want to register, see submit in the CloudFormation CLI User Guide.
     * 
     */
    @Import(name="schemaHandlerPackage", required=true)
      private final Output<String> schemaHandlerPackage;

    public Output<String> schemaHandlerPackage() {
        return this.schemaHandlerPackage;
    }

    /**
     * The name of the type being registered.
     * 
     * We recommend that type names adhere to the following pattern: company_or_organization::service::type.
     * 
     */
    @Import(name="typeName", required=true)
      private final Output<String> typeName;

    public Output<String> typeName() {
        return this.typeName;
    }

    public ResourceVersionArgs(
        @Nullable Output<String> executionRoleArn,
        @Nullable Output<ResourceVersionLoggingConfigArgs> loggingConfig,
        Output<String> schemaHandlerPackage,
        Output<String> typeName) {
        this.executionRoleArn = executionRoleArn;
        this.loggingConfig = loggingConfig;
        this.schemaHandlerPackage = Objects.requireNonNull(schemaHandlerPackage, "expected parameter 'schemaHandlerPackage' to be non-null");
        this.typeName = Objects.requireNonNull(typeName, "expected parameter 'typeName' to be non-null");
    }

    private ResourceVersionArgs() {
        this.executionRoleArn = Codegen.empty();
        this.loggingConfig = Codegen.empty();
        this.schemaHandlerPackage = Codegen.empty();
        this.typeName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourceVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> executionRoleArn;
        private @Nullable Output<ResourceVersionLoggingConfigArgs> loggingConfig;
        private Output<String> schemaHandlerPackage;
        private Output<String> typeName;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourceVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.loggingConfig = defaults.loggingConfig;
    	      this.schemaHandlerPackage = defaults.schemaHandlerPackage;
    	      this.typeName = defaults.typeName;
        }

        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }
        public Builder executionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Codegen.ofNullable(executionRoleArn);
            return this;
        }
        public Builder loggingConfig(@Nullable Output<ResourceVersionLoggingConfigArgs> loggingConfig) {
            this.loggingConfig = loggingConfig;
            return this;
        }
        public Builder loggingConfig(@Nullable ResourceVersionLoggingConfigArgs loggingConfig) {
            this.loggingConfig = Codegen.ofNullable(loggingConfig);
            return this;
        }
        public Builder schemaHandlerPackage(Output<String> schemaHandlerPackage) {
            this.schemaHandlerPackage = Objects.requireNonNull(schemaHandlerPackage);
            return this;
        }
        public Builder schemaHandlerPackage(String schemaHandlerPackage) {
            this.schemaHandlerPackage = Output.of(Objects.requireNonNull(schemaHandlerPackage));
            return this;
        }
        public Builder typeName(Output<String> typeName) {
            this.typeName = Objects.requireNonNull(typeName);
            return this;
        }
        public Builder typeName(String typeName) {
            this.typeName = Output.of(Objects.requireNonNull(typeName));
            return this;
        }        public ResourceVersionArgs build() {
            return new ResourceVersionArgs(executionRoleArn, loggingConfig, schemaHandlerPackage, typeName);
        }
    }
}
