// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2.inputs;

import com.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataAllocationStrategy;
import com.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataExcessCapacityTerminationPolicy;
import com.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataInstanceInterruptionBehavior;
import com.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataTargetCapacityUnitType;
import com.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataType;
import com.pulumi.awsnative.ec2.inputs.SpotFleetLaunchSpecification;
import com.pulumi.awsnative.ec2.inputs.SpotFleetLaunchTemplateConfig;
import com.pulumi.awsnative.ec2.inputs.SpotFleetLoadBalancersConfig;
import com.pulumi.awsnative.ec2.inputs.SpotFleetSpotMaintenanceStrategies;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpotFleetRequestConfigData extends com.pulumi.resources.InvokeArgs {

    public static final SpotFleetRequestConfigData Empty = new SpotFleetRequestConfigData();

    @Import(name="allocationStrategy")
    private @Nullable SpotFleetRequestConfigDataAllocationStrategy allocationStrategy;

    public Optional<SpotFleetRequestConfigDataAllocationStrategy> allocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }

    @Import(name="context")
    private @Nullable String context;

    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }

    @Import(name="excessCapacityTerminationPolicy")
    private @Nullable SpotFleetRequestConfigDataExcessCapacityTerminationPolicy excessCapacityTerminationPolicy;

    public Optional<SpotFleetRequestConfigDataExcessCapacityTerminationPolicy> excessCapacityTerminationPolicy() {
        return Optional.ofNullable(this.excessCapacityTerminationPolicy);
    }

    @Import(name="iamFleetRole", required=true)
    private String iamFleetRole;

    public String iamFleetRole() {
        return this.iamFleetRole;
    }

    @Import(name="instanceInterruptionBehavior")
    private @Nullable SpotFleetRequestConfigDataInstanceInterruptionBehavior instanceInterruptionBehavior;

    public Optional<SpotFleetRequestConfigDataInstanceInterruptionBehavior> instanceInterruptionBehavior() {
        return Optional.ofNullable(this.instanceInterruptionBehavior);
    }

    @Import(name="instancePoolsToUseCount")
    private @Nullable Integer instancePoolsToUseCount;

    public Optional<Integer> instancePoolsToUseCount() {
        return Optional.ofNullable(this.instancePoolsToUseCount);
    }

    @Import(name="launchSpecifications")
    private @Nullable List<SpotFleetLaunchSpecification> launchSpecifications;

    public Optional<List<SpotFleetLaunchSpecification>> launchSpecifications() {
        return Optional.ofNullable(this.launchSpecifications);
    }

    @Import(name="launchTemplateConfigs")
    private @Nullable List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs;

    public Optional<List<SpotFleetLaunchTemplateConfig>> launchTemplateConfigs() {
        return Optional.ofNullable(this.launchTemplateConfigs);
    }

    @Import(name="loadBalancersConfig")
    private @Nullable SpotFleetLoadBalancersConfig loadBalancersConfig;

    public Optional<SpotFleetLoadBalancersConfig> loadBalancersConfig() {
        return Optional.ofNullable(this.loadBalancersConfig);
    }

    @Import(name="onDemandAllocationStrategy")
    private @Nullable String onDemandAllocationStrategy;

    public Optional<String> onDemandAllocationStrategy() {
        return Optional.ofNullable(this.onDemandAllocationStrategy);
    }

    @Import(name="onDemandMaxTotalPrice")
    private @Nullable String onDemandMaxTotalPrice;

    public Optional<String> onDemandMaxTotalPrice() {
        return Optional.ofNullable(this.onDemandMaxTotalPrice);
    }

    @Import(name="onDemandTargetCapacity")
    private @Nullable Integer onDemandTargetCapacity;

    public Optional<Integer> onDemandTargetCapacity() {
        return Optional.ofNullable(this.onDemandTargetCapacity);
    }

    @Import(name="replaceUnhealthyInstances")
    private @Nullable Boolean replaceUnhealthyInstances;

    public Optional<Boolean> replaceUnhealthyInstances() {
        return Optional.ofNullable(this.replaceUnhealthyInstances);
    }

    @Import(name="spotMaintenanceStrategies")
    private @Nullable SpotFleetSpotMaintenanceStrategies spotMaintenanceStrategies;

    public Optional<SpotFleetSpotMaintenanceStrategies> spotMaintenanceStrategies() {
        return Optional.ofNullable(this.spotMaintenanceStrategies);
    }

    @Import(name="spotMaxTotalPrice")
    private @Nullable String spotMaxTotalPrice;

    public Optional<String> spotMaxTotalPrice() {
        return Optional.ofNullable(this.spotMaxTotalPrice);
    }

    @Import(name="spotPrice")
    private @Nullable String spotPrice;

    public Optional<String> spotPrice() {
        return Optional.ofNullable(this.spotPrice);
    }

    @Import(name="targetCapacity", required=true)
    private Integer targetCapacity;

    public Integer targetCapacity() {
        return this.targetCapacity;
    }

    @Import(name="targetCapacityUnitType")
    private @Nullable SpotFleetRequestConfigDataTargetCapacityUnitType targetCapacityUnitType;

    public Optional<SpotFleetRequestConfigDataTargetCapacityUnitType> targetCapacityUnitType() {
        return Optional.ofNullable(this.targetCapacityUnitType);
    }

    @Import(name="terminateInstancesWithExpiration")
    private @Nullable Boolean terminateInstancesWithExpiration;

    public Optional<Boolean> terminateInstancesWithExpiration() {
        return Optional.ofNullable(this.terminateInstancesWithExpiration);
    }

    @Import(name="type")
    private @Nullable SpotFleetRequestConfigDataType type;

    public Optional<SpotFleetRequestConfigDataType> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="validFrom")
    private @Nullable String validFrom;

    public Optional<String> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    @Import(name="validUntil")
    private @Nullable String validUntil;

    public Optional<String> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    private SpotFleetRequestConfigData() {}

    private SpotFleetRequestConfigData(SpotFleetRequestConfigData $) {
        this.allocationStrategy = $.allocationStrategy;
        this.context = $.context;
        this.excessCapacityTerminationPolicy = $.excessCapacityTerminationPolicy;
        this.iamFleetRole = $.iamFleetRole;
        this.instanceInterruptionBehavior = $.instanceInterruptionBehavior;
        this.instancePoolsToUseCount = $.instancePoolsToUseCount;
        this.launchSpecifications = $.launchSpecifications;
        this.launchTemplateConfigs = $.launchTemplateConfigs;
        this.loadBalancersConfig = $.loadBalancersConfig;
        this.onDemandAllocationStrategy = $.onDemandAllocationStrategy;
        this.onDemandMaxTotalPrice = $.onDemandMaxTotalPrice;
        this.onDemandTargetCapacity = $.onDemandTargetCapacity;
        this.replaceUnhealthyInstances = $.replaceUnhealthyInstances;
        this.spotMaintenanceStrategies = $.spotMaintenanceStrategies;
        this.spotMaxTotalPrice = $.spotMaxTotalPrice;
        this.spotPrice = $.spotPrice;
        this.targetCapacity = $.targetCapacity;
        this.targetCapacityUnitType = $.targetCapacityUnitType;
        this.terminateInstancesWithExpiration = $.terminateInstancesWithExpiration;
        this.type = $.type;
        this.validFrom = $.validFrom;
        this.validUntil = $.validUntil;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpotFleetRequestConfigData defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpotFleetRequestConfigData $;

        public Builder() {
            $ = new SpotFleetRequestConfigData();
        }

        public Builder(SpotFleetRequestConfigData defaults) {
            $ = new SpotFleetRequestConfigData(Objects.requireNonNull(defaults));
        }

        public Builder allocationStrategy(@Nullable SpotFleetRequestConfigDataAllocationStrategy allocationStrategy) {
            $.allocationStrategy = allocationStrategy;
            return this;
        }

        public Builder context(@Nullable String context) {
            $.context = context;
            return this;
        }

        public Builder excessCapacityTerminationPolicy(@Nullable SpotFleetRequestConfigDataExcessCapacityTerminationPolicy excessCapacityTerminationPolicy) {
            $.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }

        public Builder iamFleetRole(String iamFleetRole) {
            $.iamFleetRole = iamFleetRole;
            return this;
        }

        public Builder instanceInterruptionBehavior(@Nullable SpotFleetRequestConfigDataInstanceInterruptionBehavior instanceInterruptionBehavior) {
            $.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }

        public Builder instancePoolsToUseCount(@Nullable Integer instancePoolsToUseCount) {
            $.instancePoolsToUseCount = instancePoolsToUseCount;
            return this;
        }

        public Builder launchSpecifications(@Nullable List<SpotFleetLaunchSpecification> launchSpecifications) {
            $.launchSpecifications = launchSpecifications;
            return this;
        }

        public Builder launchSpecifications(SpotFleetLaunchSpecification... launchSpecifications) {
            return launchSpecifications(List.of(launchSpecifications));
        }

        public Builder launchTemplateConfigs(@Nullable List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs) {
            $.launchTemplateConfigs = launchTemplateConfigs;
            return this;
        }

        public Builder launchTemplateConfigs(SpotFleetLaunchTemplateConfig... launchTemplateConfigs) {
            return launchTemplateConfigs(List.of(launchTemplateConfigs));
        }

        public Builder loadBalancersConfig(@Nullable SpotFleetLoadBalancersConfig loadBalancersConfig) {
            $.loadBalancersConfig = loadBalancersConfig;
            return this;
        }

        public Builder onDemandAllocationStrategy(@Nullable String onDemandAllocationStrategy) {
            $.onDemandAllocationStrategy = onDemandAllocationStrategy;
            return this;
        }

        public Builder onDemandMaxTotalPrice(@Nullable String onDemandMaxTotalPrice) {
            $.onDemandMaxTotalPrice = onDemandMaxTotalPrice;
            return this;
        }

        public Builder onDemandTargetCapacity(@Nullable Integer onDemandTargetCapacity) {
            $.onDemandTargetCapacity = onDemandTargetCapacity;
            return this;
        }

        public Builder replaceUnhealthyInstances(@Nullable Boolean replaceUnhealthyInstances) {
            $.replaceUnhealthyInstances = replaceUnhealthyInstances;
            return this;
        }

        public Builder spotMaintenanceStrategies(@Nullable SpotFleetSpotMaintenanceStrategies spotMaintenanceStrategies) {
            $.spotMaintenanceStrategies = spotMaintenanceStrategies;
            return this;
        }

        public Builder spotMaxTotalPrice(@Nullable String spotMaxTotalPrice) {
            $.spotMaxTotalPrice = spotMaxTotalPrice;
            return this;
        }

        public Builder spotPrice(@Nullable String spotPrice) {
            $.spotPrice = spotPrice;
            return this;
        }

        public Builder targetCapacity(Integer targetCapacity) {
            $.targetCapacity = targetCapacity;
            return this;
        }

        public Builder targetCapacityUnitType(@Nullable SpotFleetRequestConfigDataTargetCapacityUnitType targetCapacityUnitType) {
            $.targetCapacityUnitType = targetCapacityUnitType;
            return this;
        }

        public Builder terminateInstancesWithExpiration(@Nullable Boolean terminateInstancesWithExpiration) {
            $.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }

        public Builder type(@Nullable SpotFleetRequestConfigDataType type) {
            $.type = type;
            return this;
        }

        public Builder validFrom(@Nullable String validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        public Builder validUntil(@Nullable String validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        public SpotFleetRequestConfigData build() {
            $.iamFleetRole = Objects.requireNonNull($.iamFleetRole, "expected parameter 'iamFleetRole' to be non-null");
            $.targetCapacity = Objects.requireNonNull($.targetCapacity, "expected parameter 'targetCapacity' to be non-null");
            return $;
        }
    }

}
