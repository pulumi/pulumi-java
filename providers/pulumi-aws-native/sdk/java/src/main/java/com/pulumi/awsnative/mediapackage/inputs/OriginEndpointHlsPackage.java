// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.awsnative.mediapackage.enums.OriginEndpointAdsOnDeliveryRestrictions;
import com.pulumi.awsnative.mediapackage.enums.OriginEndpointHlsPackageAdMarkers;
import com.pulumi.awsnative.mediapackage.enums.OriginEndpointHlsPackageAdTriggersItem;
import com.pulumi.awsnative.mediapackage.enums.OriginEndpointHlsPackagePlaylistType;
import com.pulumi.awsnative.mediapackage.inputs.OriginEndpointHlsEncryption;
import com.pulumi.awsnative.mediapackage.inputs.OriginEndpointStreamSelection;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An HTTP Live Streaming (HLS) packaging configuration.
 * 
 */
public final class OriginEndpointHlsPackage extends com.pulumi.resources.InvokeArgs {

    public static final OriginEndpointHlsPackage Empty = new OriginEndpointHlsPackage();

    /**
     * This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
     * 
     */
    @Import(name="adMarkers")
    private @Nullable OriginEndpointHlsPackageAdMarkers adMarkers;

    /**
     * @return This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
     * 
     */
    public Optional<OriginEndpointHlsPackageAdMarkers> adMarkers() {
        return Optional.ofNullable(this.adMarkers);
    }

    /**
     * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
     * 
     */
    @Import(name="adTriggers")
    private @Nullable List<OriginEndpointHlsPackageAdTriggersItem> adTriggers;

    /**
     * @return A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
     * 
     */
    public Optional<List<OriginEndpointHlsPackageAdTriggersItem>> adTriggers() {
        return Optional.ofNullable(this.adTriggers);
    }

    @Import(name="adsOnDeliveryRestrictions")
    private @Nullable OriginEndpointAdsOnDeliveryRestrictions adsOnDeliveryRestrictions;

    public Optional<OriginEndpointAdsOnDeliveryRestrictions> adsOnDeliveryRestrictions() {
        return Optional.ofNullable(this.adsOnDeliveryRestrictions);
    }

    @Import(name="encryption")
    private @Nullable OriginEndpointHlsEncryption encryption;

    public Optional<OriginEndpointHlsEncryption> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * When enabled, an I-Frame only stream will be included in the output.
     * 
     */
    @Import(name="includeIframeOnlyStream")
    private @Nullable Boolean includeIframeOnlyStream;

    /**
     * @return When enabled, an I-Frame only stream will be included in the output.
     * 
     */
    public Optional<Boolean> includeIframeOnlyStream() {
        return Optional.ofNullable(this.includeIframeOnlyStream);
    }

    /**
     * The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
     * 
     */
    @Import(name="playlistType")
    private @Nullable OriginEndpointHlsPackagePlaylistType playlistType;

    /**
     * @return The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
     * 
     */
    public Optional<OriginEndpointHlsPackagePlaylistType> playlistType() {
        return Optional.ofNullable(this.playlistType);
    }

    /**
     * Time window (in seconds) contained in each parent manifest.
     * 
     */
    @Import(name="playlistWindowSeconds")
    private @Nullable Integer playlistWindowSeconds;

    /**
     * @return Time window (in seconds) contained in each parent manifest.
     * 
     */
    public Optional<Integer> playlistWindowSeconds() {
        return Optional.ofNullable(this.playlistWindowSeconds);
    }

    /**
     * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
     * 
     */
    @Import(name="programDateTimeIntervalSeconds")
    private @Nullable Integer programDateTimeIntervalSeconds;

    /**
     * @return The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
     * 
     */
    public Optional<Integer> programDateTimeIntervalSeconds() {
        return Optional.ofNullable(this.programDateTimeIntervalSeconds);
    }

    /**
     * Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
     * 
     */
    @Import(name="segmentDurationSeconds")
    private @Nullable Integer segmentDurationSeconds;

    /**
     * @return Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
     * 
     */
    public Optional<Integer> segmentDurationSeconds() {
        return Optional.ofNullable(this.segmentDurationSeconds);
    }

    @Import(name="streamSelection")
    private @Nullable OriginEndpointStreamSelection streamSelection;

    public Optional<OriginEndpointStreamSelection> streamSelection() {
        return Optional.ofNullable(this.streamSelection);
    }

    /**
     * When enabled, audio streams will be placed in rendition groups in the output.
     * 
     */
    @Import(name="useAudioRenditionGroup")
    private @Nullable Boolean useAudioRenditionGroup;

    /**
     * @return When enabled, audio streams will be placed in rendition groups in the output.
     * 
     */
    public Optional<Boolean> useAudioRenditionGroup() {
        return Optional.ofNullable(this.useAudioRenditionGroup);
    }

    private OriginEndpointHlsPackage() {}

    private OriginEndpointHlsPackage(OriginEndpointHlsPackage $) {
        this.adMarkers = $.adMarkers;
        this.adTriggers = $.adTriggers;
        this.adsOnDeliveryRestrictions = $.adsOnDeliveryRestrictions;
        this.encryption = $.encryption;
        this.includeIframeOnlyStream = $.includeIframeOnlyStream;
        this.playlistType = $.playlistType;
        this.playlistWindowSeconds = $.playlistWindowSeconds;
        this.programDateTimeIntervalSeconds = $.programDateTimeIntervalSeconds;
        this.segmentDurationSeconds = $.segmentDurationSeconds;
        this.streamSelection = $.streamSelection;
        this.useAudioRenditionGroup = $.useAudioRenditionGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OriginEndpointHlsPackage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OriginEndpointHlsPackage $;

        public Builder() {
            $ = new OriginEndpointHlsPackage();
        }

        public Builder(OriginEndpointHlsPackage defaults) {
            $ = new OriginEndpointHlsPackage(Objects.requireNonNull(defaults));
        }

        /**
         * @param adMarkers This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder adMarkers(@Nullable OriginEndpointHlsPackageAdMarkers adMarkers) {
            $.adMarkers = adMarkers;
            return this;
        }

        /**
         * @param adTriggers A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         * 
         * @return builder
         * 
         */
        public Builder adTriggers(@Nullable List<OriginEndpointHlsPackageAdTriggersItem> adTriggers) {
            $.adTriggers = adTriggers;
            return this;
        }

        /**
         * @param adTriggers A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         * 
         * @return builder
         * 
         */
        public Builder adTriggers(OriginEndpointHlsPackageAdTriggersItem... adTriggers) {
            return adTriggers(List.of(adTriggers));
        }

        public Builder adsOnDeliveryRestrictions(@Nullable OriginEndpointAdsOnDeliveryRestrictions adsOnDeliveryRestrictions) {
            $.adsOnDeliveryRestrictions = adsOnDeliveryRestrictions;
            return this;
        }

        public Builder encryption(@Nullable OriginEndpointHlsEncryption encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param includeIframeOnlyStream When enabled, an I-Frame only stream will be included in the output.
         * 
         * @return builder
         * 
         */
        public Builder includeIframeOnlyStream(@Nullable Boolean includeIframeOnlyStream) {
            $.includeIframeOnlyStream = includeIframeOnlyStream;
            return this;
        }

        /**
         * @param playlistType The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         * 
         * @return builder
         * 
         */
        public Builder playlistType(@Nullable OriginEndpointHlsPackagePlaylistType playlistType) {
            $.playlistType = playlistType;
            return this;
        }

        /**
         * @param playlistWindowSeconds Time window (in seconds) contained in each parent manifest.
         * 
         * @return builder
         * 
         */
        public Builder playlistWindowSeconds(@Nullable Integer playlistWindowSeconds) {
            $.playlistWindowSeconds = playlistWindowSeconds;
            return this;
        }

        /**
         * @param programDateTimeIntervalSeconds The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         * 
         * @return builder
         * 
         */
        public Builder programDateTimeIntervalSeconds(@Nullable Integer programDateTimeIntervalSeconds) {
            $.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
            return this;
        }

        /**
         * @param segmentDurationSeconds Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
         * 
         * @return builder
         * 
         */
        public Builder segmentDurationSeconds(@Nullable Integer segmentDurationSeconds) {
            $.segmentDurationSeconds = segmentDurationSeconds;
            return this;
        }

        public Builder streamSelection(@Nullable OriginEndpointStreamSelection streamSelection) {
            $.streamSelection = streamSelection;
            return this;
        }

        /**
         * @param useAudioRenditionGroup When enabled, audio streams will be placed in rendition groups in the output.
         * 
         * @return builder
         * 
         */
        public Builder useAudioRenditionGroup(@Nullable Boolean useAudioRenditionGroup) {
            $.useAudioRenditionGroup = useAudioRenditionGroup;
            return this;
        }

        public OriginEndpointHlsPackage build() {
            return $;
        }
    }

}
