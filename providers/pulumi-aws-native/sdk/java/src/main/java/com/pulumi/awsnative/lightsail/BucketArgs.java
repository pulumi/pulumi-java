// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.awsnative.lightsail.inputs.BucketAccessRulesArgs;
import com.pulumi.awsnative.lightsail.inputs.BucketTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketArgs Empty = new BucketArgs();

    @Import(name="accessRules")
    private @Nullable Output<BucketAccessRulesArgs> accessRules;

    public Optional<Output<BucketAccessRulesArgs>> accessRules() {
        return Optional.ofNullable(this.accessRules);
    }

    /**
     * The name for the bucket.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * The ID of the bundle to use for the bucket.
     * 
     */
    @Import(name="bundleId", required=true)
    private Output<String> bundleId;

    public Output<String> bundleId() {
        return this.bundleId;
    }

    /**
     * Specifies whether to enable or disable versioning of objects in the bucket.
     * 
     */
    @Import(name="objectVersioning")
    private @Nullable Output<Boolean> objectVersioning;

    public Optional<Output<Boolean>> objectVersioning() {
        return Optional.ofNullable(this.objectVersioning);
    }

    /**
     * An array of strings to specify the AWS account IDs that can access the bucket.
     * 
     */
    @Import(name="readOnlyAccessAccounts")
    private @Nullable Output<List<String>> readOnlyAccessAccounts;

    public Optional<Output<List<String>>> readOnlyAccessAccounts() {
        return Optional.ofNullable(this.readOnlyAccessAccounts);
    }

    /**
     * The names of the Lightsail resources for which to set bucket access.
     * 
     */
    @Import(name="resourcesReceivingAccess")
    private @Nullable Output<List<String>> resourcesReceivingAccess;

    public Optional<Output<List<String>>> resourcesReceivingAccess() {
        return Optional.ofNullable(this.resourcesReceivingAccess);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<BucketTagArgs>> tags;

    public Optional<Output<List<BucketTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private BucketArgs() {}

    private BucketArgs(BucketArgs $) {
        this.accessRules = $.accessRules;
        this.bucketName = $.bucketName;
        this.bundleId = $.bundleId;
        this.objectVersioning = $.objectVersioning;
        this.readOnlyAccessAccounts = $.readOnlyAccessAccounts;
        this.resourcesReceivingAccess = $.resourcesReceivingAccess;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketArgs $;

        public Builder() {
            $ = new BucketArgs();
        }

        public Builder(BucketArgs defaults) {
            $ = new BucketArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessRules(@Nullable Output<BucketAccessRulesArgs> accessRules) {
            $.accessRules = accessRules;
            return this;
        }

        public Builder accessRules(BucketAccessRulesArgs accessRules) {
            return accessRules(Output.of(accessRules));
        }

        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder bundleId(Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        public Builder objectVersioning(@Nullable Output<Boolean> objectVersioning) {
            $.objectVersioning = objectVersioning;
            return this;
        }

        public Builder objectVersioning(Boolean objectVersioning) {
            return objectVersioning(Output.of(objectVersioning));
        }

        public Builder readOnlyAccessAccounts(@Nullable Output<List<String>> readOnlyAccessAccounts) {
            $.readOnlyAccessAccounts = readOnlyAccessAccounts;
            return this;
        }

        public Builder readOnlyAccessAccounts(List<String> readOnlyAccessAccounts) {
            return readOnlyAccessAccounts(Output.of(readOnlyAccessAccounts));
        }

        public Builder readOnlyAccessAccounts(String... readOnlyAccessAccounts) {
            return readOnlyAccessAccounts(List.of(readOnlyAccessAccounts));
        }

        public Builder resourcesReceivingAccess(@Nullable Output<List<String>> resourcesReceivingAccess) {
            $.resourcesReceivingAccess = resourcesReceivingAccess;
            return this;
        }

        public Builder resourcesReceivingAccess(List<String> resourcesReceivingAccess) {
            return resourcesReceivingAccess(Output.of(resourcesReceivingAccess));
        }

        public Builder resourcesReceivingAccess(String... resourcesReceivingAccess) {
            return resourcesReceivingAccess(List.of(resourcesReceivingAccess));
        }

        public Builder tags(@Nullable Output<List<BucketTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<BucketTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(BucketTagArgs... tags) {
            return tags(List.of(tags));
        }

        public BucketArgs build() {
            $.bundleId = Objects.requireNonNull($.bundleId, "expected parameter 'bundleId' to be non-null");
            return $;
        }
    }

}
