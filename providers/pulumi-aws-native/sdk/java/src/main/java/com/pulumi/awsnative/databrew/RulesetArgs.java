// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew;

import com.pulumi.awsnative.databrew.inputs.RulesetRuleArgs;
import com.pulumi.awsnative.databrew.inputs.RulesetTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetArgs Empty = new RulesetArgs();

    /**
     * Description of the Ruleset
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the Ruleset
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of the data quality rules in the ruleset
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<RulesetRuleArgs>> rules;

    public Output<List<RulesetRuleArgs>> rules() {
        return this.rules;
    }

    @Import(name="tags")
    private @Nullable Output<List<RulesetTagArgs>> tags;

    public Optional<Output<List<RulesetTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Arn of the target resource (dataset) to apply the ruleset to
     * 
     */
    @Import(name="targetArn", required=true)
    private Output<String> targetArn;

    public Output<String> targetArn() {
        return this.targetArn;
    }

    private RulesetArgs() {}

    private RulesetArgs(RulesetArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.rules = $.rules;
        this.tags = $.tags;
        this.targetArn = $.targetArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetArgs $;

        public Builder() {
            $ = new RulesetArgs();
        }

        public Builder(RulesetArgs defaults) {
            $ = new RulesetArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder rules(Output<List<RulesetRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(List<RulesetRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        public Builder rules(RulesetRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public Builder tags(@Nullable Output<List<RulesetTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<RulesetTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(RulesetTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder targetArn(Output<String> targetArn) {
            $.targetArn = targetArn;
            return this;
        }

        public Builder targetArn(String targetArn) {
            return targetArn(Output.of(targetArn));
        }

        public RulesetArgs build() {
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            $.targetArn = Objects.requireNonNull($.targetArn, "expected parameter 'targetArn' to be non-null");
            return $;
        }
    }

}
