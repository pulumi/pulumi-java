// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotsitewise.inputs;

import com.pulumi.awsnative.iotsitewise.enums.AssetModelTypeName;
import com.pulumi.awsnative.iotsitewise.inputs.AssetModelAttribute;
import com.pulumi.awsnative.iotsitewise.inputs.AssetModelMetric;
import com.pulumi.awsnative.iotsitewise.inputs.AssetModelTransform;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contains a property type, which can be one of attribute, measurement, metric, or transform.
 * 
 */
public final class AssetModelPropertyType extends com.pulumi.resources.InvokeArgs {

    public static final AssetModelPropertyType Empty = new AssetModelPropertyType();

    @Import(name="attribute")
    private @Nullable AssetModelAttribute attribute;

    public Optional<AssetModelAttribute> attribute() {
        return Optional.ofNullable(this.attribute);
    }

    @Import(name="metric")
    private @Nullable AssetModelMetric metric;

    public Optional<AssetModelMetric> metric() {
        return Optional.ofNullable(this.metric);
    }

    @Import(name="transform")
    private @Nullable AssetModelTransform transform;

    public Optional<AssetModelTransform> transform() {
        return Optional.ofNullable(this.transform);
    }

    @Import(name="typeName", required=true)
    private AssetModelTypeName typeName;

    public AssetModelTypeName typeName() {
        return this.typeName;
    }

    private AssetModelPropertyType() {}

    private AssetModelPropertyType(AssetModelPropertyType $) {
        this.attribute = $.attribute;
        this.metric = $.metric;
        this.transform = $.transform;
        this.typeName = $.typeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetModelPropertyType defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetModelPropertyType $;

        public Builder() {
            $ = new AssetModelPropertyType();
        }

        public Builder(AssetModelPropertyType defaults) {
            $ = new AssetModelPropertyType(Objects.requireNonNull(defaults));
        }

        public Builder attribute(@Nullable AssetModelAttribute attribute) {
            $.attribute = attribute;
            return this;
        }

        public Builder metric(@Nullable AssetModelMetric metric) {
            $.metric = metric;
            return this;
        }

        public Builder transform(@Nullable AssetModelTransform transform) {
            $.transform = transform;
            return this;
        }

        public Builder typeName(AssetModelTypeName typeName) {
            $.typeName = typeName;
            return this;
        }

        public AssetModelPropertyType build() {
            $.typeName = Objects.requireNonNull($.typeName, "expected parameter 'typeName' to be non-null");
            return $;
        }
    }

}
