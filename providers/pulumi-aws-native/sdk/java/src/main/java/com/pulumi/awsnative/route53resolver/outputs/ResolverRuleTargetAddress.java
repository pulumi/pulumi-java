// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53resolver.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResolverRuleTargetAddress {
    /**
     * @return One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
     * 
     */
    private final String ip;
    /**
     * @return The port at Ip that you want to forward DNS queries to.
     * 
     */
    private final @Nullable String port;

    @CustomType.Constructor
    private ResolverRuleTargetAddress(
        @CustomType.Parameter("ip") String ip,
        @CustomType.Parameter("port") @Nullable String port) {
        this.ip = ip;
        this.port = port;
    }

    /**
     * @return One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return The port at Ip that you want to forward DNS queries to.
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverRuleTargetAddress defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String ip;
        private @Nullable String port;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverRuleTargetAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ip = defaults.ip;
    	      this.port = defaults.port;
        }

        public Builder ip(String ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        public Builder port(@Nullable String port) {
            this.port = port;
            return this;
        }        public ResolverRuleTargetAddress build() {
            return new ResolverRuleTargetAddress(ip, port);
        }
    }
}
