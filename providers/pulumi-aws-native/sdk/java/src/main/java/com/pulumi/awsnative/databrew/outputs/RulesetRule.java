// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.outputs;

import com.pulumi.awsnative.databrew.outputs.RulesetColumnSelector;
import com.pulumi.awsnative.databrew.outputs.RulesetSubstitutionValue;
import com.pulumi.awsnative.databrew.outputs.RulesetThreshold;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRule {
    private final String checkExpression;
    private final @Nullable List<RulesetColumnSelector> columnSelectors;
    private final @Nullable Boolean disabled;
    /**
     * Name of the rule
     * 
     */
    private final String name;
    private final @Nullable List<RulesetSubstitutionValue> substitutionMap;
    private final @Nullable RulesetThreshold threshold;

    @CustomType.Constructor
    private RulesetRule(
        @CustomType.Parameter("checkExpression") String checkExpression,
        @CustomType.Parameter("columnSelectors") @Nullable List<RulesetColumnSelector> columnSelectors,
        @CustomType.Parameter("disabled") @Nullable Boolean disabled,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("substitutionMap") @Nullable List<RulesetSubstitutionValue> substitutionMap,
        @CustomType.Parameter("threshold") @Nullable RulesetThreshold threshold) {
        this.checkExpression = checkExpression;
        this.columnSelectors = columnSelectors;
        this.disabled = disabled;
        this.name = name;
        this.substitutionMap = substitutionMap;
        this.threshold = threshold;
    }

    public String checkExpression() {
        return this.checkExpression;
    }
    public List<RulesetColumnSelector> columnSelectors() {
        return this.columnSelectors == null ? List.of() : this.columnSelectors;
    }
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * Name of the rule
     * 
    */
    public String name() {
        return this.name;
    }
    public List<RulesetSubstitutionValue> substitutionMap() {
        return this.substitutionMap == null ? List.of() : this.substitutionMap;
    }
    public Optional<RulesetThreshold> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String checkExpression;
        private @Nullable List<RulesetColumnSelector> columnSelectors;
        private @Nullable Boolean disabled;
        private String name;
        private @Nullable List<RulesetSubstitutionValue> substitutionMap;
        private @Nullable RulesetThreshold threshold;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesetRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkExpression = defaults.checkExpression;
    	      this.columnSelectors = defaults.columnSelectors;
    	      this.disabled = defaults.disabled;
    	      this.name = defaults.name;
    	      this.substitutionMap = defaults.substitutionMap;
    	      this.threshold = defaults.threshold;
        }

        public Builder checkExpression(String checkExpression) {
            this.checkExpression = Objects.requireNonNull(checkExpression);
            return this;
        }
        public Builder columnSelectors(@Nullable List<RulesetColumnSelector> columnSelectors) {
            this.columnSelectors = columnSelectors;
            return this;
        }
        public Builder columnSelectors(RulesetColumnSelector... columnSelectors) {
            return columnSelectors(List.of(columnSelectors));
        }
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder substitutionMap(@Nullable List<RulesetSubstitutionValue> substitutionMap) {
            this.substitutionMap = substitutionMap;
            return this;
        }
        public Builder substitutionMap(RulesetSubstitutionValue... substitutionMap) {
            return substitutionMap(List.of(substitutionMap));
        }
        public Builder threshold(@Nullable RulesetThreshold threshold) {
            this.threshold = threshold;
            return this;
        }        public RulesetRule build() {
            return new RulesetRule(checkExpression, columnSelectors, disabled, name, substitutionMap, threshold);
        }
    }
}
