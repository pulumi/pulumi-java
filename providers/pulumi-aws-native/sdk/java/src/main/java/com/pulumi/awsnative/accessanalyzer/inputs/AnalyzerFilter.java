// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.accessanalyzer.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyzerFilter extends com.pulumi.resources.InvokeArgs {

    public static final AnalyzerFilter Empty = new AnalyzerFilter();

    @Import(name="contains")
    private @Nullable List<String> contains;

    public Optional<List<String>> contains() {
        return Optional.ofNullable(this.contains);
    }

    @Import(name="eq")
    private @Nullable List<String> eq;

    public Optional<List<String>> eq() {
        return Optional.ofNullable(this.eq);
    }

    @Import(name="exists")
    private @Nullable Boolean exists;

    public Optional<Boolean> exists() {
        return Optional.ofNullable(this.exists);
    }

    @Import(name="neq")
    private @Nullable List<String> neq;

    public Optional<List<String>> neq() {
        return Optional.ofNullable(this.neq);
    }

    @Import(name="property", required=true)
    private String property;

    public String property() {
        return this.property;
    }

    private AnalyzerFilter() {}

    private AnalyzerFilter(AnalyzerFilter $) {
        this.contains = $.contains;
        this.eq = $.eq;
        this.exists = $.exists;
        this.neq = $.neq;
        this.property = $.property;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyzerFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyzerFilter $;

        public Builder() {
            $ = new AnalyzerFilter();
        }

        public Builder(AnalyzerFilter defaults) {
            $ = new AnalyzerFilter(Objects.requireNonNull(defaults));
        }

        public Builder contains(@Nullable List<String> contains) {
            $.contains = contains;
            return this;
        }

        public Builder contains(String... contains) {
            return contains(List.of(contains));
        }

        public Builder eq(@Nullable List<String> eq) {
            $.eq = eq;
            return this;
        }

        public Builder eq(String... eq) {
            return eq(List.of(eq));
        }

        public Builder exists(@Nullable Boolean exists) {
            $.exists = exists;
            return this;
        }

        public Builder neq(@Nullable List<String> neq) {
            $.neq = neq;
            return this;
        }

        public Builder neq(String... neq) {
            return neq(List.of(neq));
        }

        public Builder property(String property) {
            $.property = property;
            return this;
        }

        public AnalyzerFilter build() {
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            return $;
        }
    }

}
