// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.awsnative.s3.enums.BucketIntelligentTieringConfigurationStatus;
import com.pulumi.awsnative.s3.inputs.BucketTagFilter;
import com.pulumi.awsnative.s3.inputs.BucketTiering;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketIntelligentTieringConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final BucketIntelligentTieringConfiguration Empty = new BucketIntelligentTieringConfiguration();

    /**
     * The ID used to identify the S3 Intelligent-Tiering configuration.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The ID used to identify the S3 Intelligent-Tiering configuration.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * An object key name prefix that identifies the subset of objects to which the rule applies.
     * 
     */
    @Import(name="prefix")
    private @Nullable String prefix;

    /**
     * @return An object key name prefix that identifies the subset of objects to which the rule applies.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Specifies the status of the configuration.
     * 
     */
    @Import(name="status", required=true)
    private BucketIntelligentTieringConfigurationStatus status;

    /**
     * @return Specifies the status of the configuration.
     * 
     */
    public BucketIntelligentTieringConfigurationStatus status() {
        return this.status;
    }

    /**
     * A container for a key-value pair.
     * 
     */
    @Import(name="tagFilters")
    private @Nullable List<BucketTagFilter> tagFilters;

    /**
     * @return A container for a key-value pair.
     * 
     */
    public Optional<List<BucketTagFilter>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    /**
     * Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
     * 
     */
    @Import(name="tierings", required=true)
    private List<BucketTiering> tierings;

    /**
     * @return Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
     * 
     */
    public List<BucketTiering> tierings() {
        return this.tierings;
    }

    private BucketIntelligentTieringConfiguration() {}

    private BucketIntelligentTieringConfiguration(BucketIntelligentTieringConfiguration $) {
        this.id = $.id;
        this.prefix = $.prefix;
        this.status = $.status;
        this.tagFilters = $.tagFilters;
        this.tierings = $.tierings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketIntelligentTieringConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketIntelligentTieringConfiguration $;

        public Builder() {
            $ = new BucketIntelligentTieringConfiguration();
        }

        public Builder(BucketIntelligentTieringConfiguration defaults) {
            $ = new BucketIntelligentTieringConfiguration(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID used to identify the S3 Intelligent-Tiering configuration.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param prefix An object key name prefix that identifies the subset of objects to which the rule applies.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable String prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param status Specifies the status of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder status(BucketIntelligentTieringConfigurationStatus status) {
            $.status = status;
            return this;
        }

        /**
         * @param tagFilters A container for a key-value pair.
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(@Nullable List<BucketTagFilter> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        /**
         * @param tagFilters A container for a key-value pair.
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(BucketTagFilter... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        /**
         * @param tierings Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
         * 
         * @return builder
         * 
         */
        public Builder tierings(List<BucketTiering> tierings) {
            $.tierings = tierings;
            return this;
        }

        /**
         * @param tierings Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
         * 
         * @return builder
         * 
         */
        public Builder tierings(BucketTiering... tierings) {
            return tierings(List.of(tierings));
        }

        public BucketIntelligentTieringConfiguration build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.tierings = Objects.requireNonNull($.tierings, "expected parameter 'tierings' to be non-null");
            return $;
        }
    }

}
