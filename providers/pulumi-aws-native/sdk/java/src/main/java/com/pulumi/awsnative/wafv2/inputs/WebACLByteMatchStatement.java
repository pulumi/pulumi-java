// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.wafv2.inputs;

import com.pulumi.awsnative.wafv2.enums.WebACLPositionalConstraint;
import com.pulumi.awsnative.wafv2.inputs.WebACLFieldToMatch;
import com.pulumi.awsnative.wafv2.inputs.WebACLTextTransformation;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Byte Match statement.
 * 
 */
public final class WebACLByteMatchStatement extends com.pulumi.resources.InvokeArgs {

    public static final WebACLByteMatchStatement Empty = new WebACLByteMatchStatement();

    @Import(name="fieldToMatch", required=true)
    private WebACLFieldToMatch fieldToMatch;

    public WebACLFieldToMatch fieldToMatch() {
        return this.fieldToMatch;
    }

    @Import(name="positionalConstraint", required=true)
    private WebACLPositionalConstraint positionalConstraint;

    public WebACLPositionalConstraint positionalConstraint() {
        return this.positionalConstraint;
    }

    @Import(name="searchString")
    private @Nullable String searchString;

    public Optional<String> searchString() {
        return Optional.ofNullable(this.searchString);
    }

    @Import(name="searchStringBase64")
    private @Nullable String searchStringBase64;

    public Optional<String> searchStringBase64() {
        return Optional.ofNullable(this.searchStringBase64);
    }

    @Import(name="textTransformations", required=true)
    private List<WebACLTextTransformation> textTransformations;

    public List<WebACLTextTransformation> textTransformations() {
        return this.textTransformations;
    }

    private WebACLByteMatchStatement() {}

    private WebACLByteMatchStatement(WebACLByteMatchStatement $) {
        this.fieldToMatch = $.fieldToMatch;
        this.positionalConstraint = $.positionalConstraint;
        this.searchString = $.searchString;
        this.searchStringBase64 = $.searchStringBase64;
        this.textTransformations = $.textTransformations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebACLByteMatchStatement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebACLByteMatchStatement $;

        public Builder() {
            $ = new WebACLByteMatchStatement();
        }

        public Builder(WebACLByteMatchStatement defaults) {
            $ = new WebACLByteMatchStatement(Objects.requireNonNull(defaults));
        }

        public Builder fieldToMatch(WebACLFieldToMatch fieldToMatch) {
            $.fieldToMatch = fieldToMatch;
            return this;
        }

        public Builder positionalConstraint(WebACLPositionalConstraint positionalConstraint) {
            $.positionalConstraint = positionalConstraint;
            return this;
        }

        public Builder searchString(@Nullable String searchString) {
            $.searchString = searchString;
            return this;
        }

        public Builder searchStringBase64(@Nullable String searchStringBase64) {
            $.searchStringBase64 = searchStringBase64;
            return this;
        }

        public Builder textTransformations(List<WebACLTextTransformation> textTransformations) {
            $.textTransformations = textTransformations;
            return this;
        }

        public Builder textTransformations(WebACLTextTransformation... textTransformations) {
            return textTransformations(List.of(textTransformations));
        }

        public WebACLByteMatchStatement build() {
            $.fieldToMatch = Objects.requireNonNull($.fieldToMatch, "expected parameter 'fieldToMatch' to be non-null");
            $.positionalConstraint = Objects.requireNonNull($.positionalConstraint, "expected parameter 'positionalConstraint' to be non-null");
            $.textTransformations = Objects.requireNonNull($.textTransformations, "expected parameter 'textTransformations' to be non-null");
            return $;
        }
    }

}
