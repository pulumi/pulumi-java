// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect.inputs;

import com.pulumi.awsnative.mediaconnect.enums.FlowEncryptionAlgorithm;
import com.pulumi.awsnative.mediaconnect.enums.FlowEncryptionKeyType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information about the encryption of the flow.
 * 
 */
public final class FlowEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowEncryptionArgs Empty = new FlowEncryptionArgs();

    /**
     * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<FlowEncryptionAlgorithm> algorithm;

    public Optional<Output<FlowEncryptionAlgorithm>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
     * 
     */
    @Import(name="constantInitializationVector")
    private @Nullable Output<String> constantInitializationVector;

    public Optional<Output<String>> constantInitializationVector() {
        return Optional.ofNullable(this.constantInitializationVector);
    }

    /**
     * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
     * 
     */
    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    /**
     * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<FlowEncryptionKeyType> keyType;

    public Optional<Output<FlowEncryptionKeyType>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
     * 
     */
    @Import(name="secretArn")
    private @Nullable Output<String> secretArn;

    public Optional<Output<String>> secretArn() {
        return Optional.ofNullable(this.secretArn);
    }

    /**
     * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private FlowEncryptionArgs() {}

    private FlowEncryptionArgs(FlowEncryptionArgs $) {
        this.algorithm = $.algorithm;
        this.constantInitializationVector = $.constantInitializationVector;
        this.deviceId = $.deviceId;
        this.keyType = $.keyType;
        this.region = $.region;
        this.resourceId = $.resourceId;
        this.roleArn = $.roleArn;
        this.secretArn = $.secretArn;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowEncryptionArgs $;

        public Builder() {
            $ = new FlowEncryptionArgs();
        }

        public Builder(FlowEncryptionArgs defaults) {
            $ = new FlowEncryptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder algorithm(@Nullable Output<FlowEncryptionAlgorithm> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        public Builder algorithm(FlowEncryptionAlgorithm algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder constantInitializationVector(@Nullable Output<String> constantInitializationVector) {
            $.constantInitializationVector = constantInitializationVector;
            return this;
        }

        public Builder constantInitializationVector(String constantInitializationVector) {
            return constantInitializationVector(Output.of(constantInitializationVector));
        }

        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        public Builder keyType(@Nullable Output<FlowEncryptionKeyType> keyType) {
            $.keyType = keyType;
            return this;
        }

        public Builder keyType(FlowEncryptionKeyType keyType) {
            return keyType(Output.of(keyType));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder secretArn(@Nullable Output<String> secretArn) {
            $.secretArn = secretArn;
            return this;
        }

        public Builder secretArn(String secretArn) {
            return secretArn(Output.of(secretArn));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public FlowEncryptionArgs build() {
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
