// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ses.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The content of the email, composed of a subject line, an HTML part, and a text-only part
 * 
 */
public final class TemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateArgs Empty = new TemplateArgs();

    /**
     * The HTML body of the email.
     * 
     */
    @Import(name="htmlPart")
    private @Nullable Output<String> htmlPart;

    public Optional<Output<String>> htmlPart() {
        return Optional.ofNullable(this.htmlPart);
    }

    /**
     * The subject line of the email.
     * 
     */
    @Import(name="subjectPart", required=true)
    private Output<String> subjectPart;

    public Output<String> subjectPart() {
        return this.subjectPart;
    }

    /**
     * The name of the template.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * The email body that is visible to recipients whose email clients do not display HTML content.
     * 
     */
    @Import(name="textPart")
    private @Nullable Output<String> textPart;

    public Optional<Output<String>> textPart() {
        return Optional.ofNullable(this.textPart);
    }

    private TemplateArgs() {}

    private TemplateArgs(TemplateArgs $) {
        this.htmlPart = $.htmlPart;
        this.subjectPart = $.subjectPart;
        this.templateName = $.templateName;
        this.textPart = $.textPart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateArgs $;

        public Builder() {
            $ = new TemplateArgs();
        }

        public Builder(TemplateArgs defaults) {
            $ = new TemplateArgs(Objects.requireNonNull(defaults));
        }

        public Builder htmlPart(@Nullable Output<String> htmlPart) {
            $.htmlPart = htmlPart;
            return this;
        }

        public Builder htmlPart(String htmlPart) {
            return htmlPart(Output.of(htmlPart));
        }

        public Builder subjectPart(Output<String> subjectPart) {
            $.subjectPart = subjectPart;
            return this;
        }

        public Builder subjectPart(String subjectPart) {
            return subjectPart(Output.of(subjectPart));
        }

        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public Builder textPart(@Nullable Output<String> textPart) {
            $.textPart = textPart;
            return this;
        }

        public Builder textPart(String textPart) {
            return textPart(Output.of(textPart));
        }

        public TemplateArgs build() {
            $.subjectPart = Objects.requireNonNull($.subjectPart, "expected parameter 'subjectPart' to be non-null");
            return $;
        }
    }

}
