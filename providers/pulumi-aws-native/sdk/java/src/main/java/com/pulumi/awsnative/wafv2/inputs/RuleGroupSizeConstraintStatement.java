// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.wafv2.inputs;

import com.pulumi.awsnative.wafv2.enums.RuleGroupSizeConstraintStatementComparisonOperator;
import com.pulumi.awsnative.wafv2.inputs.RuleGroupFieldToMatch;
import com.pulumi.awsnative.wafv2.inputs.RuleGroupTextTransformation;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.List;
import java.util.Objects;


/**
 * Size Constraint statement.
 * 
 */
public final class RuleGroupSizeConstraintStatement extends com.pulumi.resources.InvokeArgs {

    public static final RuleGroupSizeConstraintStatement Empty = new RuleGroupSizeConstraintStatement();

    @Import(name="comparisonOperator", required=true)
    private RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator;

    public RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator() {
        return this.comparisonOperator;
    }

    @Import(name="fieldToMatch", required=true)
    private RuleGroupFieldToMatch fieldToMatch;

    public RuleGroupFieldToMatch fieldToMatch() {
        return this.fieldToMatch;
    }

    @Import(name="size", required=true)
    private Double size;

    public Double size() {
        return this.size;
    }

    @Import(name="textTransformations", required=true)
    private List<RuleGroupTextTransformation> textTransformations;

    public List<RuleGroupTextTransformation> textTransformations() {
        return this.textTransformations;
    }

    private RuleGroupSizeConstraintStatement() {}

    private RuleGroupSizeConstraintStatement(RuleGroupSizeConstraintStatement $) {
        this.comparisonOperator = $.comparisonOperator;
        this.fieldToMatch = $.fieldToMatch;
        this.size = $.size;
        this.textTransformations = $.textTransformations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleGroupSizeConstraintStatement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleGroupSizeConstraintStatement $;

        public Builder() {
            $ = new RuleGroupSizeConstraintStatement();
        }

        public Builder(RuleGroupSizeConstraintStatement defaults) {
            $ = new RuleGroupSizeConstraintStatement(Objects.requireNonNull(defaults));
        }

        public Builder comparisonOperator(RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder fieldToMatch(RuleGroupFieldToMatch fieldToMatch) {
            $.fieldToMatch = fieldToMatch;
            return this;
        }

        public Builder size(Double size) {
            $.size = size;
            return this;
        }

        public Builder textTransformations(List<RuleGroupTextTransformation> textTransformations) {
            $.textTransformations = textTransformations;
            return this;
        }

        public Builder textTransformations(RuleGroupTextTransformation... textTransformations) {
            return textTransformations(List.of(textTransformations));
        }

        public RuleGroupSizeConstraintStatement build() {
            $.comparisonOperator = Objects.requireNonNull($.comparisonOperator, "expected parameter 'comparisonOperator' to be non-null");
            $.fieldToMatch = Objects.requireNonNull($.fieldToMatch, "expected parameter 'fieldToMatch' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.textTransformations = Objects.requireNonNull($.textTransformations, "expected parameter 'textTransformations' to be non-null");
            return $;
        }
    }

}
