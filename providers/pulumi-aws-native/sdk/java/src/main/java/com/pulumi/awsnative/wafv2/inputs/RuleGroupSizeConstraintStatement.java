// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.wafv2.inputs;

import com.pulumi.awsnative.wafv2.enums.RuleGroupSizeConstraintStatementComparisonOperator;
import com.pulumi.awsnative.wafv2.inputs.RuleGroupFieldToMatch;
import com.pulumi.awsnative.wafv2.inputs.RuleGroupTextTransformation;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.List;
import java.util.Objects;


/**
 * Size Constraint statement.
 * 
 */
public final class RuleGroupSizeConstraintStatement extends com.pulumi.resources.InvokeArgs {

    public static final RuleGroupSizeConstraintStatement Empty = new RuleGroupSizeConstraintStatement();

    @Import(name="comparisonOperator", required=true)
      private final RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator;

    public RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator() {
        return this.comparisonOperator;
    }

    @Import(name="fieldToMatch", required=true)
      private final RuleGroupFieldToMatch fieldToMatch;

    public RuleGroupFieldToMatch fieldToMatch() {
        return this.fieldToMatch;
    }

    @Import(name="size", required=true)
      private final Double size;

    public Double size() {
        return this.size;
    }

    @Import(name="textTransformations", required=true)
      private final List<RuleGroupTextTransformation> textTransformations;

    public List<RuleGroupTextTransformation> textTransformations() {
        return this.textTransformations;
    }

    public RuleGroupSizeConstraintStatement(
        RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator,
        RuleGroupFieldToMatch fieldToMatch,
        Double size,
        List<RuleGroupTextTransformation> textTransformations) {
        this.comparisonOperator = Objects.requireNonNull(comparisonOperator, "expected parameter 'comparisonOperator' to be non-null");
        this.fieldToMatch = Objects.requireNonNull(fieldToMatch, "expected parameter 'fieldToMatch' to be non-null");
        this.size = Objects.requireNonNull(size, "expected parameter 'size' to be non-null");
        this.textTransformations = Objects.requireNonNull(textTransformations, "expected parameter 'textTransformations' to be non-null");
    }

    private RuleGroupSizeConstraintStatement() {
        this.comparisonOperator = null;
        this.fieldToMatch = null;
        this.size = null;
        this.textTransformations = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupSizeConstraintStatement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator;
        private RuleGroupFieldToMatch fieldToMatch;
        private Double size;
        private List<RuleGroupTextTransformation> textTransformations;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupSizeConstraintStatement defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.fieldToMatch = defaults.fieldToMatch;
    	      this.size = defaults.size;
    	      this.textTransformations = defaults.textTransformations;
        }

        public Builder comparisonOperator(RuleGroupSizeConstraintStatementComparisonOperator comparisonOperator) {
            this.comparisonOperator = Objects.requireNonNull(comparisonOperator);
            return this;
        }
        public Builder fieldToMatch(RuleGroupFieldToMatch fieldToMatch) {
            this.fieldToMatch = Objects.requireNonNull(fieldToMatch);
            return this;
        }
        public Builder size(Double size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder textTransformations(List<RuleGroupTextTransformation> textTransformations) {
            this.textTransformations = Objects.requireNonNull(textTransformations);
            return this;
        }
        public Builder textTransformations(RuleGroupTextTransformation... textTransformations) {
            return textTransformations(List.of(textTransformations));
        }        public RuleGroupSizeConstraintStatement build() {
            return new RuleGroupSizeConstraintStatement(comparisonOperator, fieldToMatch, size, textTransformations);
        }
    }
}
