// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.networkmanager;

import com.pulumi.awsnative.networkmanager.inputs.LinkBandwidthArgs;
import com.pulumi.awsnative.networkmanager.inputs.LinkTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkArgs Empty = new LinkArgs();

    /**
     * The Bandwidth for the link.
     * 
     */
    @Import(name="bandwidth", required=true)
    private Output<LinkBandwidthArgs> bandwidth;

    public Output<LinkBandwidthArgs> bandwidth() {
        return this.bandwidth;
    }

    /**
     * The description of the link.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the global network.
     * 
     */
    @Import(name="globalNetworkId", required=true)
    private Output<String> globalNetworkId;

    public Output<String> globalNetworkId() {
        return this.globalNetworkId;
    }

    /**
     * The provider of the link.
     * 
     */
    @Import(name="provider")
    private @Nullable Output<String> provider;

    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * The ID of the site
     * 
     */
    @Import(name="siteId", required=true)
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * The tags for the link.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LinkTagArgs>> tags;

    public Optional<Output<List<LinkTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of the link.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LinkArgs() {}

    private LinkArgs(LinkArgs $) {
        this.bandwidth = $.bandwidth;
        this.description = $.description;
        this.globalNetworkId = $.globalNetworkId;
        this.provider = $.provider;
        this.siteId = $.siteId;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkArgs $;

        public Builder() {
            $ = new LinkArgs();
        }

        public Builder(LinkArgs defaults) {
            $ = new LinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder bandwidth(Output<LinkBandwidthArgs> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        public Builder bandwidth(LinkBandwidthArgs bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder globalNetworkId(Output<String> globalNetworkId) {
            $.globalNetworkId = globalNetworkId;
            return this;
        }

        public Builder globalNetworkId(String globalNetworkId) {
            return globalNetworkId(Output.of(globalNetworkId));
        }

        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public Builder tags(@Nullable Output<List<LinkTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<LinkTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(LinkTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LinkArgs build() {
            $.bandwidth = Objects.requireNonNull($.bandwidth, "expected parameter 'bandwidth' to be non-null");
            $.globalNetworkId = Objects.requireNonNull($.globalNetworkId, "expected parameter 'globalNetworkId' to be non-null");
            $.siteId = Objects.requireNonNull($.siteId, "expected parameter 'siteId' to be non-null");
            return $;
        }
    }

}
