// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.inputs.RecipeS3Location;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecipeDataCatalogInputDefinition extends com.pulumi.resources.InvokeArgs {

    public static final RecipeDataCatalogInputDefinition Empty = new RecipeDataCatalogInputDefinition();

    /**
     * Catalog id
     * 
     */
    @Import(name="catalogId")
    private @Nullable String catalogId;

    /**
     * @return Catalog id
     * 
     */
    public Optional<String> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * Database name
     * 
     */
    @Import(name="databaseName")
    private @Nullable String databaseName;

    /**
     * @return Database name
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Table name
     * 
     */
    @Import(name="tableName")
    private @Nullable String tableName;

    /**
     * @return Table name
     * 
     */
    public Optional<String> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    @Import(name="tempDirectory")
    private @Nullable RecipeS3Location tempDirectory;

    public Optional<RecipeS3Location> tempDirectory() {
        return Optional.ofNullable(this.tempDirectory);
    }

    private RecipeDataCatalogInputDefinition() {}

    private RecipeDataCatalogInputDefinition(RecipeDataCatalogInputDefinition $) {
        this.catalogId = $.catalogId;
        this.databaseName = $.databaseName;
        this.tableName = $.tableName;
        this.tempDirectory = $.tempDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecipeDataCatalogInputDefinition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecipeDataCatalogInputDefinition $;

        public Builder() {
            $ = new RecipeDataCatalogInputDefinition();
        }

        public Builder(RecipeDataCatalogInputDefinition defaults) {
            $ = new RecipeDataCatalogInputDefinition(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Catalog id
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable String catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param databaseName Database name
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param tableName Table name
         * 
         * @return builder
         * 
         */
        public Builder tableName(@Nullable String tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tempDirectory(@Nullable RecipeS3Location tempDirectory) {
            $.tempDirectory = tempDirectory;
            return this;
        }

        public RecipeDataCatalogInputDefinition build() {
            return $;
        }
    }

}
