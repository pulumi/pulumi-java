// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.outputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationHlsManifestAdMarkers;
import com.pulumi.awsnative.mediapackage.outputs.PackagingConfigurationStreamSelection;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PackagingConfigurationHlsManifest {
    /**
     * @return This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source.
     * 
     */
    private final @Nullable PackagingConfigurationHlsManifestAdMarkers adMarkers;
    /**
     * @return When enabled, an I-Frame only stream will be included in the output.
     * 
     */
    private final @Nullable Boolean includeIframeOnlyStream;
    private final @Nullable String manifestName;
    /**
     * @return The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
     * 
     */
    private final @Nullable Integer programDateTimeIntervalSeconds;
    /**
     * @return When enabled, the EXT-X-KEY tag will be repeated in output manifests.
     * 
     */
    private final @Nullable Boolean repeatExtXKey;
    private final @Nullable PackagingConfigurationStreamSelection streamSelection;

    @CustomType.Constructor
    private PackagingConfigurationHlsManifest(
        @CustomType.Parameter("adMarkers") @Nullable PackagingConfigurationHlsManifestAdMarkers adMarkers,
        @CustomType.Parameter("includeIframeOnlyStream") @Nullable Boolean includeIframeOnlyStream,
        @CustomType.Parameter("manifestName") @Nullable String manifestName,
        @CustomType.Parameter("programDateTimeIntervalSeconds") @Nullable Integer programDateTimeIntervalSeconds,
        @CustomType.Parameter("repeatExtXKey") @Nullable Boolean repeatExtXKey,
        @CustomType.Parameter("streamSelection") @Nullable PackagingConfigurationStreamSelection streamSelection) {
        this.adMarkers = adMarkers;
        this.includeIframeOnlyStream = includeIframeOnlyStream;
        this.manifestName = manifestName;
        this.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
        this.repeatExtXKey = repeatExtXKey;
        this.streamSelection = streamSelection;
    }

    /**
     * @return This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source.
     * 
     */
    public Optional<PackagingConfigurationHlsManifestAdMarkers> adMarkers() {
        return Optional.ofNullable(this.adMarkers);
    }
    /**
     * @return When enabled, an I-Frame only stream will be included in the output.
     * 
     */
    public Optional<Boolean> includeIframeOnlyStream() {
        return Optional.ofNullable(this.includeIframeOnlyStream);
    }
    public Optional<String> manifestName() {
        return Optional.ofNullable(this.manifestName);
    }
    /**
     * @return The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
     * 
     */
    public Optional<Integer> programDateTimeIntervalSeconds() {
        return Optional.ofNullable(this.programDateTimeIntervalSeconds);
    }
    /**
     * @return When enabled, the EXT-X-KEY tag will be repeated in output manifests.
     * 
     */
    public Optional<Boolean> repeatExtXKey() {
        return Optional.ofNullable(this.repeatExtXKey);
    }
    public Optional<PackagingConfigurationStreamSelection> streamSelection() {
        return Optional.ofNullable(this.streamSelection);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackagingConfigurationHlsManifest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable PackagingConfigurationHlsManifestAdMarkers adMarkers;
        private @Nullable Boolean includeIframeOnlyStream;
        private @Nullable String manifestName;
        private @Nullable Integer programDateTimeIntervalSeconds;
        private @Nullable Boolean repeatExtXKey;
        private @Nullable PackagingConfigurationStreamSelection streamSelection;

        public Builder() {
    	      // Empty
        }

        public Builder(PackagingConfigurationHlsManifest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adMarkers = defaults.adMarkers;
    	      this.includeIframeOnlyStream = defaults.includeIframeOnlyStream;
    	      this.manifestName = defaults.manifestName;
    	      this.programDateTimeIntervalSeconds = defaults.programDateTimeIntervalSeconds;
    	      this.repeatExtXKey = defaults.repeatExtXKey;
    	      this.streamSelection = defaults.streamSelection;
        }

        public Builder adMarkers(@Nullable PackagingConfigurationHlsManifestAdMarkers adMarkers) {
            this.adMarkers = adMarkers;
            return this;
        }
        public Builder includeIframeOnlyStream(@Nullable Boolean includeIframeOnlyStream) {
            this.includeIframeOnlyStream = includeIframeOnlyStream;
            return this;
        }
        public Builder manifestName(@Nullable String manifestName) {
            this.manifestName = manifestName;
            return this;
        }
        public Builder programDateTimeIntervalSeconds(@Nullable Integer programDateTimeIntervalSeconds) {
            this.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
            return this;
        }
        public Builder repeatExtXKey(@Nullable Boolean repeatExtXKey) {
            this.repeatExtXKey = repeatExtXKey;
            return this;
        }
        public Builder streamSelection(@Nullable PackagingConfigurationStreamSelection streamSelection) {
            this.streamSelection = streamSelection;
            return this;
        }        public PackagingConfigurationHlsManifest build() {
            return new PackagingConfigurationHlsManifest(adMarkers, includeIframeOnlyStream, manifestName, programDateTimeIntervalSeconds, repeatExtXKey, streamSelection);
        }
    }
}
