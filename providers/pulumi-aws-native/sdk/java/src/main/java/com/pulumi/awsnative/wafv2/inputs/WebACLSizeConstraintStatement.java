// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.wafv2.inputs;

import com.pulumi.awsnative.wafv2.enums.WebACLSizeConstraintStatementComparisonOperator;
import com.pulumi.awsnative.wafv2.inputs.WebACLFieldToMatch;
import com.pulumi.awsnative.wafv2.inputs.WebACLTextTransformation;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.List;
import java.util.Objects;


/**
 * Size Constraint statement.
 * 
 */
public final class WebACLSizeConstraintStatement extends com.pulumi.resources.InvokeArgs {

    public static final WebACLSizeConstraintStatement Empty = new WebACLSizeConstraintStatement();

    @Import(name="comparisonOperator", required=true)
    private WebACLSizeConstraintStatementComparisonOperator comparisonOperator;

    public WebACLSizeConstraintStatementComparisonOperator comparisonOperator() {
        return this.comparisonOperator;
    }

    @Import(name="fieldToMatch", required=true)
    private WebACLFieldToMatch fieldToMatch;

    public WebACLFieldToMatch fieldToMatch() {
        return this.fieldToMatch;
    }

    @Import(name="size", required=true)
    private Double size;

    public Double size() {
        return this.size;
    }

    @Import(name="textTransformations", required=true)
    private List<WebACLTextTransformation> textTransformations;

    public List<WebACLTextTransformation> textTransformations() {
        return this.textTransformations;
    }

    private WebACLSizeConstraintStatement() {}

    private WebACLSizeConstraintStatement(WebACLSizeConstraintStatement $) {
        this.comparisonOperator = $.comparisonOperator;
        this.fieldToMatch = $.fieldToMatch;
        this.size = $.size;
        this.textTransformations = $.textTransformations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebACLSizeConstraintStatement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebACLSizeConstraintStatement $;

        public Builder() {
            $ = new WebACLSizeConstraintStatement();
        }

        public Builder(WebACLSizeConstraintStatement defaults) {
            $ = new WebACLSizeConstraintStatement(Objects.requireNonNull(defaults));
        }

        public Builder comparisonOperator(WebACLSizeConstraintStatementComparisonOperator comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder fieldToMatch(WebACLFieldToMatch fieldToMatch) {
            $.fieldToMatch = fieldToMatch;
            return this;
        }

        public Builder size(Double size) {
            $.size = size;
            return this;
        }

        public Builder textTransformations(List<WebACLTextTransformation> textTransformations) {
            $.textTransformations = textTransformations;
            return this;
        }

        public Builder textTransformations(WebACLTextTransformation... textTransformations) {
            return textTransformations(List.of(textTransformations));
        }

        public WebACLSizeConstraintStatement build() {
            $.comparisonOperator = Objects.requireNonNull($.comparisonOperator, "expected parameter 'comparisonOperator' to be non-null");
            $.fieldToMatch = Objects.requireNonNull($.fieldToMatch, "expected parameter 'fieldToMatch' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.textTransformations = Objects.requireNonNull($.textTransformations, "expected parameter 'textTransformations' to be non-null");
            return $;
        }
    }

}
