// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudwatch;

import com.pulumi.awsnative.cloudwatch.inputs.MetricStreamFilterArgs;
import com.pulumi.awsnative.cloudwatch.inputs.MetricStreamTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricStreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricStreamArgs Empty = new MetricStreamArgs();

    /**
     * Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    @Import(name="excludeFilters")
    private @Nullable Output<List<MetricStreamFilterArgs>> excludeFilters;

    public Optional<Output<List<MetricStreamFilterArgs>>> excludeFilters() {
        return Optional.ofNullable(this.excludeFilters);
    }

    /**
     * The ARN of the Kinesis Firehose where to stream the data.
     * 
     */
    @Import(name="firehoseArn", required=true)
    private Output<String> firehoseArn;

    public Output<String> firehoseArn() {
        return this.firehoseArn;
    }

    /**
     * Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    @Import(name="includeFilters")
    private @Nullable Output<List<MetricStreamFilterArgs>> includeFilters;

    public Optional<Output<List<MetricStreamFilterArgs>>> includeFilters() {
        return Optional.ofNullable(this.includeFilters);
    }

    /**
     * Name of the metric stream.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The output format of the data streamed to the Kinesis Firehose.
     * 
     */
    @Import(name="outputFormat", required=true)
    private Output<String> outputFormat;

    public Output<String> outputFormat() {
        return this.outputFormat;
    }

    /**
     * The ARN of the role that provides access to the Kinesis Firehose.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * A set of tags to assign to the delivery stream.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<MetricStreamTagArgs>> tags;

    public Optional<Output<List<MetricStreamTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MetricStreamArgs() {}

    private MetricStreamArgs(MetricStreamArgs $) {
        this.excludeFilters = $.excludeFilters;
        this.firehoseArn = $.firehoseArn;
        this.includeFilters = $.includeFilters;
        this.name = $.name;
        this.outputFormat = $.outputFormat;
        this.roleArn = $.roleArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricStreamArgs $;

        public Builder() {
            $ = new MetricStreamArgs();
        }

        public Builder(MetricStreamArgs defaults) {
            $ = new MetricStreamArgs(Objects.requireNonNull(defaults));
        }

        public Builder excludeFilters(@Nullable Output<List<MetricStreamFilterArgs>> excludeFilters) {
            $.excludeFilters = excludeFilters;
            return this;
        }

        public Builder excludeFilters(List<MetricStreamFilterArgs> excludeFilters) {
            return excludeFilters(Output.of(excludeFilters));
        }

        public Builder excludeFilters(MetricStreamFilterArgs... excludeFilters) {
            return excludeFilters(List.of(excludeFilters));
        }

        public Builder firehoseArn(Output<String> firehoseArn) {
            $.firehoseArn = firehoseArn;
            return this;
        }

        public Builder firehoseArn(String firehoseArn) {
            return firehoseArn(Output.of(firehoseArn));
        }

        public Builder includeFilters(@Nullable Output<List<MetricStreamFilterArgs>> includeFilters) {
            $.includeFilters = includeFilters;
            return this;
        }

        public Builder includeFilters(List<MetricStreamFilterArgs> includeFilters) {
            return includeFilters(Output.of(includeFilters));
        }

        public Builder includeFilters(MetricStreamFilterArgs... includeFilters) {
            return includeFilters(List.of(includeFilters));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder outputFormat(Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder tags(@Nullable Output<List<MetricStreamTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<MetricStreamTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(MetricStreamTagArgs... tags) {
            return tags(List.of(tags));
        }

        public MetricStreamArgs build() {
            $.firehoseArn = Objects.requireNonNull($.firehoseArn, "expected parameter 'firehoseArn' to be non-null");
            $.outputFormat = Objects.requireNonNull($.outputFormat, "expected parameter 'outputFormat' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
