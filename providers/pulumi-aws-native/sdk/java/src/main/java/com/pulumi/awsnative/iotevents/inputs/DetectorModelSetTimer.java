// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information needed to set the timer.
 * 
 */
public final class DetectorModelSetTimer extends com.pulumi.resources.InvokeArgs {

    public static final DetectorModelSetTimer Empty = new DetectorModelSetTimer();

    /**
     * The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.&lt;variable-name&gt;`), and input values (`$input.&lt;input-name&gt;.&lt;path-to-datum&gt;`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.
     * 
     */
    @Import(name="durationExpression")
    private @Nullable String durationExpression;

    /**
     * @return The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.&lt;variable-name&gt;`), and input values (`$input.&lt;input-name&gt;.&lt;path-to-datum&gt;`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.
     * 
     */
    public Optional<String> durationExpression() {
        return Optional.ofNullable(this.durationExpression);
    }

    /**
     * The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.
     * 
     */
    @Import(name="seconds")
    private @Nullable Integer seconds;

    /**
     * @return The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.
     * 
     */
    public Optional<Integer> seconds() {
        return Optional.ofNullable(this.seconds);
    }

    /**
     * The name of the timer.
     * 
     */
    @Import(name="timerName", required=true)
    private String timerName;

    /**
     * @return The name of the timer.
     * 
     */
    public String timerName() {
        return this.timerName;
    }

    private DetectorModelSetTimer() {}

    private DetectorModelSetTimer(DetectorModelSetTimer $) {
        this.durationExpression = $.durationExpression;
        this.seconds = $.seconds;
        this.timerName = $.timerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorModelSetTimer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorModelSetTimer $;

        public Builder() {
            $ = new DetectorModelSetTimer();
        }

        public Builder(DetectorModelSetTimer defaults) {
            $ = new DetectorModelSetTimer(Objects.requireNonNull(defaults));
        }

        /**
         * @param durationExpression The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.&lt;variable-name&gt;`), and input values (`$input.&lt;input-name&gt;.&lt;path-to-datum&gt;`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.
         * 
         * @return builder
         * 
         */
        public Builder durationExpression(@Nullable String durationExpression) {
            $.durationExpression = durationExpression;
            return this;
        }

        /**
         * @param seconds The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.
         * 
         * @return builder
         * 
         */
        public Builder seconds(@Nullable Integer seconds) {
            $.seconds = seconds;
            return this;
        }

        /**
         * @param timerName The name of the timer.
         * 
         * @return builder
         * 
         */
        public Builder timerName(String timerName) {
            $.timerName = timerName;
            return this;
        }

        public DetectorModelSetTimer build() {
            $.timerName = Objects.requireNonNull($.timerName, "expected parameter 'timerName' to be non-null");
            return $;
        }
    }

}
