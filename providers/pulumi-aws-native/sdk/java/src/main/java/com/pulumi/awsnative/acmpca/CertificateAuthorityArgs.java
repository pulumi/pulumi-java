// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.acmpca;

import com.pulumi.awsnative.acmpca.inputs.CertificateAuthorityCsrExtensionsArgs;
import com.pulumi.awsnative.acmpca.inputs.CertificateAuthorityRevocationConfigurationArgs;
import com.pulumi.awsnative.acmpca.inputs.CertificateAuthoritySubjectArgs;
import com.pulumi.awsnative.acmpca.inputs.CertificateAuthorityTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateAuthorityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityArgs Empty = new CertificateAuthorityArgs();

    /**
     * Structure that contains CSR pass through extension information used by the CreateCertificateAuthority action.
     * 
     */
    @Import(name="csrExtensions")
      private final @Nullable Output<CertificateAuthorityCsrExtensionsArgs> csrExtensions;

    public Output<CertificateAuthorityCsrExtensionsArgs> csrExtensions() {
        return this.csrExtensions == null ? Codegen.empty() : this.csrExtensions;
    }

    /**
     * Public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate.
     * 
     */
    @Import(name="keyAlgorithm", required=true)
      private final Output<String> keyAlgorithm;

    public Output<String> keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * KeyStorageSecurityStadard defines a cryptographic key management compliance standard used for handling CA keys.
     * 
     */
    @Import(name="keyStorageSecurityStandard")
      private final @Nullable Output<String> keyStorageSecurityStandard;

    public Output<String> keyStorageSecurityStandard() {
        return this.keyStorageSecurityStandard == null ? Codegen.empty() : this.keyStorageSecurityStandard;
    }

    /**
     * Certificate revocation information used by the CreateCertificateAuthority and UpdateCertificateAuthority actions.
     * 
     */
    @Import(name="revocationConfiguration")
      private final @Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration;

    public Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration() {
        return this.revocationConfiguration == null ? Codegen.empty() : this.revocationConfiguration;
    }

    /**
     * Algorithm your CA uses to sign certificate requests.
     * 
     */
    @Import(name="signingAlgorithm", required=true)
      private final Output<String> signingAlgorithm;

    public Output<String> signingAlgorithm() {
        return this.signingAlgorithm;
    }

    /**
     * Structure that contains X.500 distinguished name information for your CA.
     * 
     */
    @Import(name="subject", required=true)
      private final Output<CertificateAuthoritySubjectArgs> subject;

    public Output<CertificateAuthoritySubjectArgs> subject() {
        return this.subject;
    }

    @Import(name="tags")
      private final @Nullable Output<List<CertificateAuthorityTagArgs>> tags;

    public Output<List<CertificateAuthorityTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The type of the certificate authority.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public CertificateAuthorityArgs(
        @Nullable Output<CertificateAuthorityCsrExtensionsArgs> csrExtensions,
        Output<String> keyAlgorithm,
        @Nullable Output<String> keyStorageSecurityStandard,
        @Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration,
        Output<String> signingAlgorithm,
        Output<CertificateAuthoritySubjectArgs> subject,
        @Nullable Output<List<CertificateAuthorityTagArgs>> tags,
        Output<String> type) {
        this.csrExtensions = csrExtensions;
        this.keyAlgorithm = Objects.requireNonNull(keyAlgorithm, "expected parameter 'keyAlgorithm' to be non-null");
        this.keyStorageSecurityStandard = keyStorageSecurityStandard;
        this.revocationConfiguration = revocationConfiguration;
        this.signingAlgorithm = Objects.requireNonNull(signingAlgorithm, "expected parameter 'signingAlgorithm' to be non-null");
        this.subject = Objects.requireNonNull(subject, "expected parameter 'subject' to be non-null");
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private CertificateAuthorityArgs() {
        this.csrExtensions = Codegen.empty();
        this.keyAlgorithm = Codegen.empty();
        this.keyStorageSecurityStandard = Codegen.empty();
        this.revocationConfiguration = Codegen.empty();
        this.signingAlgorithm = Codegen.empty();
        this.subject = Codegen.empty();
        this.tags = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CertificateAuthorityCsrExtensionsArgs> csrExtensions;
        private Output<String> keyAlgorithm;
        private @Nullable Output<String> keyStorageSecurityStandard;
        private @Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration;
        private Output<String> signingAlgorithm;
        private Output<CertificateAuthoritySubjectArgs> subject;
        private @Nullable Output<List<CertificateAuthorityTagArgs>> tags;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateAuthorityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.csrExtensions = defaults.csrExtensions;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keyStorageSecurityStandard = defaults.keyStorageSecurityStandard;
    	      this.revocationConfiguration = defaults.revocationConfiguration;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
    	      this.subject = defaults.subject;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder csrExtensions(@Nullable Output<CertificateAuthorityCsrExtensionsArgs> csrExtensions) {
            this.csrExtensions = csrExtensions;
            return this;
        }
        public Builder csrExtensions(@Nullable CertificateAuthorityCsrExtensionsArgs csrExtensions) {
            this.csrExtensions = Codegen.ofNullable(csrExtensions);
            return this;
        }
        public Builder keyAlgorithm(Output<String> keyAlgorithm) {
            this.keyAlgorithm = Objects.requireNonNull(keyAlgorithm);
            return this;
        }
        public Builder keyAlgorithm(String keyAlgorithm) {
            this.keyAlgorithm = Output.of(Objects.requireNonNull(keyAlgorithm));
            return this;
        }
        public Builder keyStorageSecurityStandard(@Nullable Output<String> keyStorageSecurityStandard) {
            this.keyStorageSecurityStandard = keyStorageSecurityStandard;
            return this;
        }
        public Builder keyStorageSecurityStandard(@Nullable String keyStorageSecurityStandard) {
            this.keyStorageSecurityStandard = Codegen.ofNullable(keyStorageSecurityStandard);
            return this;
        }
        public Builder revocationConfiguration(@Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration) {
            this.revocationConfiguration = revocationConfiguration;
            return this;
        }
        public Builder revocationConfiguration(@Nullable CertificateAuthorityRevocationConfigurationArgs revocationConfiguration) {
            this.revocationConfiguration = Codegen.ofNullable(revocationConfiguration);
            return this;
        }
        public Builder signingAlgorithm(Output<String> signingAlgorithm) {
            this.signingAlgorithm = Objects.requireNonNull(signingAlgorithm);
            return this;
        }
        public Builder signingAlgorithm(String signingAlgorithm) {
            this.signingAlgorithm = Output.of(Objects.requireNonNull(signingAlgorithm));
            return this;
        }
        public Builder subject(Output<CertificateAuthoritySubjectArgs> subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        public Builder subject(CertificateAuthoritySubjectArgs subject) {
            this.subject = Output.of(Objects.requireNonNull(subject));
            return this;
        }
        public Builder tags(@Nullable Output<List<CertificateAuthorityTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<CertificateAuthorityTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(CertificateAuthorityTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public CertificateAuthorityArgs build() {
            return new CertificateAuthorityArgs(csrExtensions, keyAlgorithm, keyStorageSecurityStandard, revocationConfiguration, signingAlgorithm, subject, tags, type);
        }
    }
}
