// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.licensemanager.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseEntitlement extends com.pulumi.resources.InvokeArgs {

    public static final LicenseEntitlement Empty = new LicenseEntitlement();

    @Import(name="allowCheckIn")
    private @Nullable Boolean allowCheckIn;

    public Optional<Boolean> allowCheckIn() {
        return Optional.ofNullable(this.allowCheckIn);
    }

    @Import(name="maxCount")
    private @Nullable Integer maxCount;

    public Optional<Integer> maxCount() {
        return Optional.ofNullable(this.maxCount);
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    @Import(name="overage")
    private @Nullable Boolean overage;

    public Optional<Boolean> overage() {
        return Optional.ofNullable(this.overage);
    }

    @Import(name="unit", required=true)
    private String unit;

    public String unit() {
        return this.unit;
    }

    @Import(name="value")
    private @Nullable String value;

    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    private LicenseEntitlement() {}

    private LicenseEntitlement(LicenseEntitlement $) {
        this.allowCheckIn = $.allowCheckIn;
        this.maxCount = $.maxCount;
        this.name = $.name;
        this.overage = $.overage;
        this.unit = $.unit;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseEntitlement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseEntitlement $;

        public Builder() {
            $ = new LicenseEntitlement();
        }

        public Builder(LicenseEntitlement defaults) {
            $ = new LicenseEntitlement(Objects.requireNonNull(defaults));
        }

        public Builder allowCheckIn(@Nullable Boolean allowCheckIn) {
            $.allowCheckIn = allowCheckIn;
            return this;
        }

        public Builder maxCount(@Nullable Integer maxCount) {
            $.maxCount = maxCount;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder overage(@Nullable Boolean overage) {
            $.overage = overage;
            return this;
        }

        public Builder unit(String unit) {
            $.unit = unit;
            return this;
        }

        public Builder value(@Nullable String value) {
            $.value = value;
            return this;
        }

        public LicenseEntitlement build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.unit = Objects.requireNonNull($.unit, "expected parameter 'unit' to be non-null");
            return $;
        }
    }

}
