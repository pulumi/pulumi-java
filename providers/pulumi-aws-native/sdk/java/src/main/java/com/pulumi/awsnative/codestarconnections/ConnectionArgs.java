// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.codestarconnections;

import com.pulumi.awsnative.codestarconnections.inputs.ConnectionTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * The name of the connection. Connection names must be unique in an AWS user account.
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    /**
     * The host arn configured to represent the infrastructure where your third-party provider is installed. You must specify either a ProviderType or a HostArn.
     * 
     */
    @Import(name="hostArn")
    private @Nullable Output<String> hostArn;

    public Optional<Output<String>> hostArn() {
        return Optional.ofNullable(this.hostArn);
    }

    /**
     * The name of the external provider where your third-party code repository is configured. You must specify either a ProviderType or a HostArn.
     * 
     */
    @Import(name="providerType")
    private @Nullable Output<String> providerType;

    public Optional<Output<String>> providerType() {
        return Optional.ofNullable(this.providerType);
    }

    /**
     * Specifies the tags applied to a connection.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ConnectionTagArgs>> tags;

    public Optional<Output<List<ConnectionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.connectionName = $.connectionName;
        this.hostArn = $.hostArn;
        this.providerType = $.providerType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        public Builder hostArn(@Nullable Output<String> hostArn) {
            $.hostArn = hostArn;
            return this;
        }

        public Builder hostArn(String hostArn) {
            return hostArn(Output.of(hostArn));
        }

        public Builder providerType(@Nullable Output<String> providerType) {
            $.providerType = providerType;
            return this;
        }

        public Builder providerType(String providerType) {
            return providerType(Output.of(providerType));
        }

        public Builder tags(@Nullable Output<List<ConnectionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ConnectionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ConnectionTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ConnectionArgs build() {
            return $;
        }
    }

}
