// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudtrail;

import com.pulumi.awsnative.cloudtrail.inputs.TrailEventSelectorArgs;
import com.pulumi.awsnative.cloudtrail.inputs.TrailInsightSelectorArgs;
import com.pulumi.awsnative.cloudtrail.inputs.TrailTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrailArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrailArgs Empty = new TrailArgs();

    /**
     * Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
     * 
     */
    @Import(name="cloudWatchLogsLogGroupArn")
    private @Nullable Output<String> cloudWatchLogsLogGroupArn;

    public Optional<Output<String>> cloudWatchLogsLogGroupArn() {
        return Optional.ofNullable(this.cloudWatchLogsLogGroupArn);
    }

    /**
     * Specifies the role for the CloudWatch Logs endpoint to assume to write to a user&#39;s log group.
     * 
     */
    @Import(name="cloudWatchLogsRoleArn")
    private @Nullable Output<String> cloudWatchLogsRoleArn;

    public Optional<Output<String>> cloudWatchLogsRoleArn() {
        return Optional.ofNullable(this.cloudWatchLogsRoleArn);
    }

    /**
     * Specifies whether log file validation is enabled. The default is false.
     * 
     */
    @Import(name="enableLogFileValidation")
    private @Nullable Output<Boolean> enableLogFileValidation;

    public Optional<Output<Boolean>> enableLogFileValidation() {
        return Optional.ofNullable(this.enableLogFileValidation);
    }

    /**
     * Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event. You can configure up to five event selectors for a trail.
     * 
     */
    @Import(name="eventSelectors")
    private @Nullable Output<List<TrailEventSelectorArgs>> eventSelectors;

    public Optional<Output<List<TrailEventSelectorArgs>>> eventSelectors() {
        return Optional.ofNullable(this.eventSelectors);
    }

    /**
     * Specifies whether the trail is publishing events from global services such as IAM to the log files.
     * 
     */
    @Import(name="includeGlobalServiceEvents")
    private @Nullable Output<Boolean> includeGlobalServiceEvents;

    public Optional<Output<Boolean>> includeGlobalServiceEvents() {
        return Optional.ofNullable(this.includeGlobalServiceEvents);
    }

    /**
     * Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail.
     * 
     */
    @Import(name="insightSelectors")
    private @Nullable Output<List<TrailInsightSelectorArgs>> insightSelectors;

    public Optional<Output<List<TrailInsightSelectorArgs>>> insightSelectors() {
        return Optional.ofNullable(this.insightSelectors);
    }

    /**
     * Whether the CloudTrail is currently logging AWS API calls.
     * 
     */
    @Import(name="isLogging", required=true)
    private Output<Boolean> isLogging;

    public Output<Boolean> isLogging() {
        return this.isLogging;
    }

    /**
     * Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails that log events in all regions.
     * 
     */
    @Import(name="isMultiRegionTrail")
    private @Nullable Output<Boolean> isMultiRegionTrail;

    public Optional<Output<Boolean>> isMultiRegionTrail() {
        return Optional.ofNullable(this.isMultiRegionTrail);
    }

    /**
     * Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
     * 
     */
    @Import(name="isOrganizationTrail")
    private @Nullable Output<Boolean> isOrganizationTrail;

    public Optional<Output<Boolean>> isOrganizationTrail() {
        return Optional.ofNullable(this.isOrganizationTrail);
    }

    /**
     * Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by &#39;alias/&#39;, a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
     * 
     */
    @Import(name="kMSKeyId")
    private @Nullable Output<String> kMSKeyId;

    public Optional<Output<String>> kMSKeyId() {
        return Optional.ofNullable(this.kMSKeyId);
    }

    /**
     * Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
     * 
     */
    @Import(name="s3BucketName", required=true)
    private Output<String> s3BucketName;

    public Output<String> s3BucketName() {
        return this.s3BucketName;
    }

    /**
     * Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
     * 
     */
    @Import(name="s3KeyPrefix")
    private @Nullable Output<String> s3KeyPrefix;

    public Optional<Output<String>> s3KeyPrefix() {
        return Optional.ofNullable(this.s3KeyPrefix);
    }

    /**
     * Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
     * 
     */
    @Import(name="snsTopicName")
    private @Nullable Output<String> snsTopicName;

    public Optional<Output<String>> snsTopicName() {
        return Optional.ofNullable(this.snsTopicName);
    }

    @Import(name="tags")
    private @Nullable Output<List<TrailTagArgs>> tags;

    public Optional<Output<List<TrailTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="trailName")
    private @Nullable Output<String> trailName;

    public Optional<Output<String>> trailName() {
        return Optional.ofNullable(this.trailName);
    }

    private TrailArgs() {}

    private TrailArgs(TrailArgs $) {
        this.cloudWatchLogsLogGroupArn = $.cloudWatchLogsLogGroupArn;
        this.cloudWatchLogsRoleArn = $.cloudWatchLogsRoleArn;
        this.enableLogFileValidation = $.enableLogFileValidation;
        this.eventSelectors = $.eventSelectors;
        this.includeGlobalServiceEvents = $.includeGlobalServiceEvents;
        this.insightSelectors = $.insightSelectors;
        this.isLogging = $.isLogging;
        this.isMultiRegionTrail = $.isMultiRegionTrail;
        this.isOrganizationTrail = $.isOrganizationTrail;
        this.kMSKeyId = $.kMSKeyId;
        this.s3BucketName = $.s3BucketName;
        this.s3KeyPrefix = $.s3KeyPrefix;
        this.snsTopicName = $.snsTopicName;
        this.tags = $.tags;
        this.trailName = $.trailName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrailArgs $;

        public Builder() {
            $ = new TrailArgs();
        }

        public Builder(TrailArgs defaults) {
            $ = new TrailArgs(Objects.requireNonNull(defaults));
        }

        public Builder cloudWatchLogsLogGroupArn(@Nullable Output<String> cloudWatchLogsLogGroupArn) {
            $.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn;
            return this;
        }

        public Builder cloudWatchLogsLogGroupArn(String cloudWatchLogsLogGroupArn) {
            return cloudWatchLogsLogGroupArn(Output.of(cloudWatchLogsLogGroupArn));
        }

        public Builder cloudWatchLogsRoleArn(@Nullable Output<String> cloudWatchLogsRoleArn) {
            $.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
            return this;
        }

        public Builder cloudWatchLogsRoleArn(String cloudWatchLogsRoleArn) {
            return cloudWatchLogsRoleArn(Output.of(cloudWatchLogsRoleArn));
        }

        public Builder enableLogFileValidation(@Nullable Output<Boolean> enableLogFileValidation) {
            $.enableLogFileValidation = enableLogFileValidation;
            return this;
        }

        public Builder enableLogFileValidation(Boolean enableLogFileValidation) {
            return enableLogFileValidation(Output.of(enableLogFileValidation));
        }

        public Builder eventSelectors(@Nullable Output<List<TrailEventSelectorArgs>> eventSelectors) {
            $.eventSelectors = eventSelectors;
            return this;
        }

        public Builder eventSelectors(List<TrailEventSelectorArgs> eventSelectors) {
            return eventSelectors(Output.of(eventSelectors));
        }

        public Builder eventSelectors(TrailEventSelectorArgs... eventSelectors) {
            return eventSelectors(List.of(eventSelectors));
        }

        public Builder includeGlobalServiceEvents(@Nullable Output<Boolean> includeGlobalServiceEvents) {
            $.includeGlobalServiceEvents = includeGlobalServiceEvents;
            return this;
        }

        public Builder includeGlobalServiceEvents(Boolean includeGlobalServiceEvents) {
            return includeGlobalServiceEvents(Output.of(includeGlobalServiceEvents));
        }

        public Builder insightSelectors(@Nullable Output<List<TrailInsightSelectorArgs>> insightSelectors) {
            $.insightSelectors = insightSelectors;
            return this;
        }

        public Builder insightSelectors(List<TrailInsightSelectorArgs> insightSelectors) {
            return insightSelectors(Output.of(insightSelectors));
        }

        public Builder insightSelectors(TrailInsightSelectorArgs... insightSelectors) {
            return insightSelectors(List.of(insightSelectors));
        }

        public Builder isLogging(Output<Boolean> isLogging) {
            $.isLogging = isLogging;
            return this;
        }

        public Builder isLogging(Boolean isLogging) {
            return isLogging(Output.of(isLogging));
        }

        public Builder isMultiRegionTrail(@Nullable Output<Boolean> isMultiRegionTrail) {
            $.isMultiRegionTrail = isMultiRegionTrail;
            return this;
        }

        public Builder isMultiRegionTrail(Boolean isMultiRegionTrail) {
            return isMultiRegionTrail(Output.of(isMultiRegionTrail));
        }

        public Builder isOrganizationTrail(@Nullable Output<Boolean> isOrganizationTrail) {
            $.isOrganizationTrail = isOrganizationTrail;
            return this;
        }

        public Builder isOrganizationTrail(Boolean isOrganizationTrail) {
            return isOrganizationTrail(Output.of(isOrganizationTrail));
        }

        public Builder kMSKeyId(@Nullable Output<String> kMSKeyId) {
            $.kMSKeyId = kMSKeyId;
            return this;
        }

        public Builder kMSKeyId(String kMSKeyId) {
            return kMSKeyId(Output.of(kMSKeyId));
        }

        public Builder s3BucketName(Output<String> s3BucketName) {
            $.s3BucketName = s3BucketName;
            return this;
        }

        public Builder s3BucketName(String s3BucketName) {
            return s3BucketName(Output.of(s3BucketName));
        }

        public Builder s3KeyPrefix(@Nullable Output<String> s3KeyPrefix) {
            $.s3KeyPrefix = s3KeyPrefix;
            return this;
        }

        public Builder s3KeyPrefix(String s3KeyPrefix) {
            return s3KeyPrefix(Output.of(s3KeyPrefix));
        }

        public Builder snsTopicName(@Nullable Output<String> snsTopicName) {
            $.snsTopicName = snsTopicName;
            return this;
        }

        public Builder snsTopicName(String snsTopicName) {
            return snsTopicName(Output.of(snsTopicName));
        }

        public Builder tags(@Nullable Output<List<TrailTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<TrailTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(TrailTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder trailName(@Nullable Output<String> trailName) {
            $.trailName = trailName;
            return this;
        }

        public Builder trailName(String trailName) {
            return trailName(Output.of(trailName));
        }

        public TrailArgs build() {
            $.isLogging = Objects.requireNonNull($.isLogging, "expected parameter 'isLogging' to be non-null");
            $.s3BucketName = Objects.requireNonNull($.s3BucketName, "expected parameter 's3BucketName' to be non-null");
            return $;
        }
    }

}
