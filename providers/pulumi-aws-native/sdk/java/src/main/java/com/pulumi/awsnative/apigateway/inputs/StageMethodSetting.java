// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configures settings for all methods in a stage.
 * 
 */
public final class StageMethodSetting extends com.pulumi.resources.InvokeArgs {

    public static final StageMethodSetting Empty = new StageMethodSetting();

    /**
     * Indicates whether the cached responses are encrypted.
     * 
     */
    @Import(name="cacheDataEncrypted")
    private @Nullable Boolean cacheDataEncrypted;

    public Optional<Boolean> cacheDataEncrypted() {
        return Optional.ofNullable(this.cacheDataEncrypted);
    }

    /**
     * The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
     * 
     */
    @Import(name="cacheTtlInSeconds")
    private @Nullable Integer cacheTtlInSeconds;

    public Optional<Integer> cacheTtlInSeconds() {
        return Optional.ofNullable(this.cacheTtlInSeconds);
    }

    /**
     * Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
     * 
     */
    @Import(name="cachingEnabled")
    private @Nullable Boolean cachingEnabled;

    public Optional<Boolean> cachingEnabled() {
        return Optional.ofNullable(this.cachingEnabled);
    }

    /**
     * Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
     * 
     */
    @Import(name="dataTraceEnabled")
    private @Nullable Boolean dataTraceEnabled;

    public Optional<Boolean> dataTraceEnabled() {
        return Optional.ofNullable(this.dataTraceEnabled);
    }

    /**
     * The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
     * 
     */
    @Import(name="httpMethod")
    private @Nullable String httpMethod;

    public Optional<String> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    /**
     * The logging level for this method. For valid values, see the loggingLevel property of the Stage (https://docs.aws.amazon.com/apigateway/api-reference/resource/stage/#loggingLevel) resource in the Amazon API Gateway API Reference.
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable String loggingLevel;

    public Optional<String> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
     * 
     */
    @Import(name="metricsEnabled")
    private @Nullable Boolean metricsEnabled;

    public Optional<Boolean> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }

    /**
     * The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/). You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
     * 
     */
    @Import(name="resourcePath")
    private @Nullable String resourcePath;

    public Optional<String> resourcePath() {
        return Optional.ofNullable(this.resourcePath);
    }

    /**
     * The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
     * 
     */
    @Import(name="throttlingBurstLimit")
    private @Nullable Integer throttlingBurstLimit;

    public Optional<Integer> throttlingBurstLimit() {
        return Optional.ofNullable(this.throttlingBurstLimit);
    }

    /**
     * The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
     * 
     */
    @Import(name="throttlingRateLimit")
    private @Nullable Double throttlingRateLimit;

    public Optional<Double> throttlingRateLimit() {
        return Optional.ofNullable(this.throttlingRateLimit);
    }

    private StageMethodSetting() {}

    private StageMethodSetting(StageMethodSetting $) {
        this.cacheDataEncrypted = $.cacheDataEncrypted;
        this.cacheTtlInSeconds = $.cacheTtlInSeconds;
        this.cachingEnabled = $.cachingEnabled;
        this.dataTraceEnabled = $.dataTraceEnabled;
        this.httpMethod = $.httpMethod;
        this.loggingLevel = $.loggingLevel;
        this.metricsEnabled = $.metricsEnabled;
        this.resourcePath = $.resourcePath;
        this.throttlingBurstLimit = $.throttlingBurstLimit;
        this.throttlingRateLimit = $.throttlingRateLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StageMethodSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StageMethodSetting $;

        public Builder() {
            $ = new StageMethodSetting();
        }

        public Builder(StageMethodSetting defaults) {
            $ = new StageMethodSetting(Objects.requireNonNull(defaults));
        }

        public Builder cacheDataEncrypted(@Nullable Boolean cacheDataEncrypted) {
            $.cacheDataEncrypted = cacheDataEncrypted;
            return this;
        }

        public Builder cacheTtlInSeconds(@Nullable Integer cacheTtlInSeconds) {
            $.cacheTtlInSeconds = cacheTtlInSeconds;
            return this;
        }

        public Builder cachingEnabled(@Nullable Boolean cachingEnabled) {
            $.cachingEnabled = cachingEnabled;
            return this;
        }

        public Builder dataTraceEnabled(@Nullable Boolean dataTraceEnabled) {
            $.dataTraceEnabled = dataTraceEnabled;
            return this;
        }

        public Builder httpMethod(@Nullable String httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder loggingLevel(@Nullable String loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        public Builder metricsEnabled(@Nullable Boolean metricsEnabled) {
            $.metricsEnabled = metricsEnabled;
            return this;
        }

        public Builder resourcePath(@Nullable String resourcePath) {
            $.resourcePath = resourcePath;
            return this;
        }

        public Builder throttlingBurstLimit(@Nullable Integer throttlingBurstLimit) {
            $.throttlingBurstLimit = throttlingBurstLimit;
            return this;
        }

        public Builder throttlingRateLimit(@Nullable Double throttlingRateLimit) {
            $.throttlingRateLimit = throttlingRateLimit;
            return this;
        }

        public StageMethodSetting build() {
            return $;
        }
    }

}
