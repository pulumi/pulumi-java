// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.nimblestudio.inputs;

import com.pulumi.awsnative.nimblestudio.enums.LaunchProfileStreamingClipboardMode;
import com.pulumi.awsnative.nimblestudio.enums.LaunchProfileStreamingInstanceType;
import com.pulumi.awsnative.nimblestudio.inputs.LaunchProfileStreamConfigurationSessionStorage;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;A configuration for a streaming session.&lt;/p&gt;
 * 
 */
public final class LaunchProfileStreamConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final LaunchProfileStreamConfiguration Empty = new LaunchProfileStreamConfiguration();

    @Import(name="clipboardMode", required=true)
    private LaunchProfileStreamingClipboardMode clipboardMode;

    public LaunchProfileStreamingClipboardMode clipboardMode() {
        return this.clipboardMode;
    }

    /**
     * &lt;p&gt;The EC2 instance types that users can select from when launching a streaming session
     *             with this launch profile.&lt;/p&gt;
     * 
     */
    @Import(name="ec2InstanceTypes", required=true)
    private List<LaunchProfileStreamingInstanceType> ec2InstanceTypes;

    public List<LaunchProfileStreamingInstanceType> ec2InstanceTypes() {
        return this.ec2InstanceTypes;
    }

    /**
     * &lt;p&gt;The length of time, in minutes, that a streaming session can be active before it is
     *             stopped or terminated. After this point, Nimble Studio automatically terminates or
     *             stops the session. The default length of time is 690 minutes, and the maximum length of
     *             time is 30 days.&lt;/p&gt;
     * 
     */
    @Import(name="maxSessionLengthInMinutes")
    private @Nullable Double maxSessionLengthInMinutes;

    public Optional<Double> maxSessionLengthInMinutes() {
        return Optional.ofNullable(this.maxSessionLengthInMinutes);
    }

    /**
     * &lt;p&gt;Integer that determines if you can start and stop your sessions and how long a session
     *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.&lt;/p&gt;
     *         &lt;p&gt;If the value is missing or set to 0, your sessions canâ€™t be stopped. If you then call
     *             StopStreamingSession, the session fails. If the time that a session stays in the READY
     *             state exceeds the maxSessionLengthInMinutes value, the session will automatically be
     *             terminated by AWS (instead of stopped).&lt;/p&gt;
     *         &lt;p&gt;If the value is set to a positive number, the session can be stopped. You can call
     *             StopStreamingSession to stop sessions in the READY state. If the time that a session
     *             stays in the READY state exceeds the maxSessionLengthInMinutes value, the session will
     *             automatically be stopped by AWS (instead of terminated).&lt;/p&gt;
     * 
     */
    @Import(name="maxStoppedSessionLengthInMinutes")
    private @Nullable Double maxStoppedSessionLengthInMinutes;

    public Optional<Double> maxStoppedSessionLengthInMinutes() {
        return Optional.ofNullable(this.maxStoppedSessionLengthInMinutes);
    }

    @Import(name="sessionStorage")
    private @Nullable LaunchProfileStreamConfigurationSessionStorage sessionStorage;

    public Optional<LaunchProfileStreamConfigurationSessionStorage> sessionStorage() {
        return Optional.ofNullable(this.sessionStorage);
    }

    /**
     * &lt;p&gt;The streaming images that users can select from when launching a streaming session
     *             with this launch profile.&lt;/p&gt;
     * 
     */
    @Import(name="streamingImageIds", required=true)
    private List<String> streamingImageIds;

    public List<String> streamingImageIds() {
        return this.streamingImageIds;
    }

    private LaunchProfileStreamConfiguration() {}

    private LaunchProfileStreamConfiguration(LaunchProfileStreamConfiguration $) {
        this.clipboardMode = $.clipboardMode;
        this.ec2InstanceTypes = $.ec2InstanceTypes;
        this.maxSessionLengthInMinutes = $.maxSessionLengthInMinutes;
        this.maxStoppedSessionLengthInMinutes = $.maxStoppedSessionLengthInMinutes;
        this.sessionStorage = $.sessionStorage;
        this.streamingImageIds = $.streamingImageIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchProfileStreamConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchProfileStreamConfiguration $;

        public Builder() {
            $ = new LaunchProfileStreamConfiguration();
        }

        public Builder(LaunchProfileStreamConfiguration defaults) {
            $ = new LaunchProfileStreamConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder clipboardMode(LaunchProfileStreamingClipboardMode clipboardMode) {
            $.clipboardMode = clipboardMode;
            return this;
        }

        public Builder ec2InstanceTypes(List<LaunchProfileStreamingInstanceType> ec2InstanceTypes) {
            $.ec2InstanceTypes = ec2InstanceTypes;
            return this;
        }

        public Builder ec2InstanceTypes(LaunchProfileStreamingInstanceType... ec2InstanceTypes) {
            return ec2InstanceTypes(List.of(ec2InstanceTypes));
        }

        public Builder maxSessionLengthInMinutes(@Nullable Double maxSessionLengthInMinutes) {
            $.maxSessionLengthInMinutes = maxSessionLengthInMinutes;
            return this;
        }

        public Builder maxStoppedSessionLengthInMinutes(@Nullable Double maxStoppedSessionLengthInMinutes) {
            $.maxStoppedSessionLengthInMinutes = maxStoppedSessionLengthInMinutes;
            return this;
        }

        public Builder sessionStorage(@Nullable LaunchProfileStreamConfigurationSessionStorage sessionStorage) {
            $.sessionStorage = sessionStorage;
            return this;
        }

        public Builder streamingImageIds(List<String> streamingImageIds) {
            $.streamingImageIds = streamingImageIds;
            return this;
        }

        public Builder streamingImageIds(String... streamingImageIds) {
            return streamingImageIds(List.of(streamingImageIds));
        }

        public LaunchProfileStreamConfiguration build() {
            $.clipboardMode = Objects.requireNonNull($.clipboardMode, "expected parameter 'clipboardMode' to be non-null");
            $.ec2InstanceTypes = Objects.requireNonNull($.ec2InstanceTypes, "expected parameter 'ec2InstanceTypes' to be non-null");
            $.streamingImageIds = Objects.requireNonNull($.streamingImageIds, "expected parameter 'streamingImageIds' to be non-null");
            return $;
        }
    }

}
