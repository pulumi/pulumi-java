// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionCodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionCodeArgs Empty = new FunctionCodeArgs();

    /**
     * ImageUri.
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    /**
     * An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
     * 
     */
    @Import(name="s3Bucket")
    private @Nullable Output<String> s3Bucket;

    public Optional<Output<String>> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }

    /**
     * The Amazon S3 key of the deployment package.
     * 
     */
    @Import(name="s3Key")
    private @Nullable Output<String> s3Key;

    public Optional<Output<String>> s3Key() {
        return Optional.ofNullable(this.s3Key);
    }

    /**
     * For versioned objects, the version of the deployment package object to use.
     * 
     */
    @Import(name="s3ObjectVersion")
    private @Nullable Output<String> s3ObjectVersion;

    public Optional<Output<String>> s3ObjectVersion() {
        return Optional.ofNullable(this.s3ObjectVersion);
    }

    /**
     * The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
     * 
     */
    @Import(name="zipFile")
    private @Nullable Output<String> zipFile;

    public Optional<Output<String>> zipFile() {
        return Optional.ofNullable(this.zipFile);
    }

    private FunctionCodeArgs() {}

    private FunctionCodeArgs(FunctionCodeArgs $) {
        this.imageUri = $.imageUri;
        this.s3Bucket = $.s3Bucket;
        this.s3Key = $.s3Key;
        this.s3ObjectVersion = $.s3ObjectVersion;
        this.zipFile = $.zipFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionCodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionCodeArgs $;

        public Builder() {
            $ = new FunctionCodeArgs();
        }

        public Builder(FunctionCodeArgs defaults) {
            $ = new FunctionCodeArgs(Objects.requireNonNull(defaults));
        }

        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        public Builder s3Bucket(@Nullable Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        public Builder s3Key(@Nullable Output<String> s3Key) {
            $.s3Key = s3Key;
            return this;
        }

        public Builder s3Key(String s3Key) {
            return s3Key(Output.of(s3Key));
        }

        public Builder s3ObjectVersion(@Nullable Output<String> s3ObjectVersion) {
            $.s3ObjectVersion = s3ObjectVersion;
            return this;
        }

        public Builder s3ObjectVersion(String s3ObjectVersion) {
            return s3ObjectVersion(Output.of(s3ObjectVersion));
        }

        public Builder zipFile(@Nullable Output<String> zipFile) {
            $.zipFile = zipFile;
            return this;
        }

        public Builder zipFile(String zipFile) {
            return zipFile(Output.of(zipFile));
        }

        public FunctionCodeArgs build() {
            return $;
        }
    }

}
