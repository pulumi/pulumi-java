// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.nimblestudio.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;The configuration for a shared file storage system that is associated with a studio resource.&lt;/p&gt;
 * 
 */
public final class StudioComponentSharedFileSystemConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final StudioComponentSharedFileSystemConfiguration Empty = new StudioComponentSharedFileSystemConfiguration();

    /**
     * &lt;p&gt;The endpoint of the shared file system that is accessed by the studio component resource.&lt;/p&gt;
     * 
     */
    @Import(name="endpoint")
    private @Nullable String endpoint;

    /**
     * @return &lt;p&gt;The endpoint of the shared file system that is accessed by the studio component resource.&lt;/p&gt;
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * &lt;p&gt;The unique identifier for a file system.&lt;/p&gt;
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable String fileSystemId;

    /**
     * @return &lt;p&gt;The unique identifier for a file system.&lt;/p&gt;
     * 
     */
    public Optional<String> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * &lt;p&gt;The mount location for a shared file system on a Linux virtual workstation.&lt;/p&gt;
     * 
     */
    @Import(name="linuxMountPoint")
    private @Nullable String linuxMountPoint;

    /**
     * @return &lt;p&gt;The mount location for a shared file system on a Linux virtual workstation.&lt;/p&gt;
     * 
     */
    public Optional<String> linuxMountPoint() {
        return Optional.ofNullable(this.linuxMountPoint);
    }

    /**
     * &lt;p&gt;The name of the file share.&lt;/p&gt;
     * 
     */
    @Import(name="shareName")
    private @Nullable String shareName;

    /**
     * @return &lt;p&gt;The name of the file share.&lt;/p&gt;
     * 
     */
    public Optional<String> shareName() {
        return Optional.ofNullable(this.shareName);
    }

    /**
     * &lt;p&gt;The mount location for a shared file system on a Windows virtual workstation.&lt;/p&gt;
     * 
     */
    @Import(name="windowsMountDrive")
    private @Nullable String windowsMountDrive;

    /**
     * @return &lt;p&gt;The mount location for a shared file system on a Windows virtual workstation.&lt;/p&gt;
     * 
     */
    public Optional<String> windowsMountDrive() {
        return Optional.ofNullable(this.windowsMountDrive);
    }

    private StudioComponentSharedFileSystemConfiguration() {}

    private StudioComponentSharedFileSystemConfiguration(StudioComponentSharedFileSystemConfiguration $) {
        this.endpoint = $.endpoint;
        this.fileSystemId = $.fileSystemId;
        this.linuxMountPoint = $.linuxMountPoint;
        this.shareName = $.shareName;
        this.windowsMountDrive = $.windowsMountDrive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StudioComponentSharedFileSystemConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StudioComponentSharedFileSystemConfiguration $;

        public Builder() {
            $ = new StudioComponentSharedFileSystemConfiguration();
        }

        public Builder(StudioComponentSharedFileSystemConfiguration defaults) {
            $ = new StudioComponentSharedFileSystemConfiguration(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpoint &lt;p&gt;The endpoint of the shared file system that is accessed by the studio component resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable String endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param fileSystemId &lt;p&gt;The unique identifier for a file system.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable String fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param linuxMountPoint &lt;p&gt;The mount location for a shared file system on a Linux virtual workstation.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder linuxMountPoint(@Nullable String linuxMountPoint) {
            $.linuxMountPoint = linuxMountPoint;
            return this;
        }

        /**
         * @param shareName &lt;p&gt;The name of the file share.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder shareName(@Nullable String shareName) {
            $.shareName = shareName;
            return this;
        }

        /**
         * @param windowsMountDrive &lt;p&gt;The mount location for a shared file system on a Windows virtual workstation.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder windowsMountDrive(@Nullable String windowsMountDrive) {
            $.windowsMountDrive = windowsMountDrive;
            return this;
        }

        public StudioComponentSharedFileSystemConfiguration build() {
            return $;
        }
    }

}
