// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.awsnative.iotevents.inputs.DetectorModelActionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.
 * 
 */
public final class DetectorModelEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorModelEventArgs Empty = new DetectorModelEventArgs();

    /**
     * The actions to be performed.
     * 
     */
    @Import(name="actions")
      private final @Nullable Output<List<DetectorModelActionArgs>> actions;

    public Output<List<DetectorModelActionArgs>> actions() {
        return this.actions == null ? Codegen.empty() : this.actions;
    }

    /**
     * The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
     * 
     */
    @Import(name="condition")
      private final @Nullable Output<String> condition;

    public Output<String> condition() {
        return this.condition == null ? Codegen.empty() : this.condition;
    }

    /**
     * The name of the event.
     * 
     */
    @Import(name="eventName", required=true)
      private final Output<String> eventName;

    public Output<String> eventName() {
        return this.eventName;
    }

    public DetectorModelEventArgs(
        @Nullable Output<List<DetectorModelActionArgs>> actions,
        @Nullable Output<String> condition,
        Output<String> eventName) {
        this.actions = actions;
        this.condition = condition;
        this.eventName = Objects.requireNonNull(eventName, "expected parameter 'eventName' to be non-null");
    }

    private DetectorModelEventArgs() {
        this.actions = Codegen.empty();
        this.condition = Codegen.empty();
        this.eventName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DetectorModelEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<DetectorModelActionArgs>> actions;
        private @Nullable Output<String> condition;
        private Output<String> eventName;

        public Builder() {
    	      // Empty
        }

        public Builder(DetectorModelEventArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.condition = defaults.condition;
    	      this.eventName = defaults.eventName;
        }

        public Builder actions(@Nullable Output<List<DetectorModelActionArgs>> actions) {
            this.actions = actions;
            return this;
        }
        public Builder actions(@Nullable List<DetectorModelActionArgs> actions) {
            this.actions = Codegen.ofNullable(actions);
            return this;
        }
        public Builder actions(DetectorModelActionArgs... actions) {
            return actions(List.of(actions));
        }
        public Builder condition(@Nullable Output<String> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable String condition) {
            this.condition = Codegen.ofNullable(condition);
            return this;
        }
        public Builder eventName(Output<String> eventName) {
            this.eventName = Objects.requireNonNull(eventName);
            return this;
        }
        public Builder eventName(String eventName) {
            this.eventName = Output.of(Objects.requireNonNull(eventName));
            return this;
        }        public DetectorModelEventArgs build() {
            return new DetectorModelEventArgs(actions, condition, eventName);
        }
    }
}
