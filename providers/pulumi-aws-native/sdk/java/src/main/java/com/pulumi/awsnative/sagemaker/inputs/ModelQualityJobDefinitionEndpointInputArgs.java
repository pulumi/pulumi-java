// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.enums.ModelQualityJobDefinitionEndpointInputS3DataDistributionType;
import com.pulumi.awsnative.sagemaker.enums.ModelQualityJobDefinitionEndpointInputS3InputMode;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The endpoint for a monitoring job.
 * 
 */
public final class ModelQualityJobDefinitionEndpointInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelQualityJobDefinitionEndpointInputArgs Empty = new ModelQualityJobDefinitionEndpointInputArgs();

    /**
     * Monitoring end time offset, e.g. PT0H
     * 
     */
    @Import(name="endTimeOffset")
    private @Nullable Output<String> endTimeOffset;

    public Optional<Output<String>> endTimeOffset() {
        return Optional.ofNullable(this.endTimeOffset);
    }

    @Import(name="endpointName", required=true)
    private Output<String> endpointName;

    public Output<String> endpointName() {
        return this.endpointName;
    }

    /**
     * Index or JSONpath to locate predicted label(s)
     * 
     */
    @Import(name="inferenceAttribute")
    private @Nullable Output<String> inferenceAttribute;

    public Optional<Output<String>> inferenceAttribute() {
        return Optional.ofNullable(this.inferenceAttribute);
    }

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     * 
     */
    @Import(name="localPath", required=true)
    private Output<String> localPath;

    public Output<String> localPath() {
        return this.localPath;
    }

    /**
     * Index or JSONpath to locate probabilities
     * 
     */
    @Import(name="probabilityAttribute")
    private @Nullable Output<String> probabilityAttribute;

    public Optional<Output<String>> probabilityAttribute() {
        return Optional.ofNullable(this.probabilityAttribute);
    }

    @Import(name="probabilityThresholdAttribute")
    private @Nullable Output<Double> probabilityThresholdAttribute;

    public Optional<Output<Double>> probabilityThresholdAttribute() {
        return Optional.ofNullable(this.probabilityThresholdAttribute);
    }

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
     * 
     */
    @Import(name="s3DataDistributionType")
    private @Nullable Output<ModelQualityJobDefinitionEndpointInputS3DataDistributionType> s3DataDistributionType;

    public Optional<Output<ModelQualityJobDefinitionEndpointInputS3DataDistributionType>> s3DataDistributionType() {
        return Optional.ofNullable(this.s3DataDistributionType);
    }

    /**
     * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
     * 
     */
    @Import(name="s3InputMode")
    private @Nullable Output<ModelQualityJobDefinitionEndpointInputS3InputMode> s3InputMode;

    public Optional<Output<ModelQualityJobDefinitionEndpointInputS3InputMode>> s3InputMode() {
        return Optional.ofNullable(this.s3InputMode);
    }

    /**
     * Monitoring start time offset, e.g. -PT1H
     * 
     */
    @Import(name="startTimeOffset")
    private @Nullable Output<String> startTimeOffset;

    public Optional<Output<String>> startTimeOffset() {
        return Optional.ofNullable(this.startTimeOffset);
    }

    private ModelQualityJobDefinitionEndpointInputArgs() {}

    private ModelQualityJobDefinitionEndpointInputArgs(ModelQualityJobDefinitionEndpointInputArgs $) {
        this.endTimeOffset = $.endTimeOffset;
        this.endpointName = $.endpointName;
        this.inferenceAttribute = $.inferenceAttribute;
        this.localPath = $.localPath;
        this.probabilityAttribute = $.probabilityAttribute;
        this.probabilityThresholdAttribute = $.probabilityThresholdAttribute;
        this.s3DataDistributionType = $.s3DataDistributionType;
        this.s3InputMode = $.s3InputMode;
        this.startTimeOffset = $.startTimeOffset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelQualityJobDefinitionEndpointInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelQualityJobDefinitionEndpointInputArgs $;

        public Builder() {
            $ = new ModelQualityJobDefinitionEndpointInputArgs();
        }

        public Builder(ModelQualityJobDefinitionEndpointInputArgs defaults) {
            $ = new ModelQualityJobDefinitionEndpointInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder endTimeOffset(@Nullable Output<String> endTimeOffset) {
            $.endTimeOffset = endTimeOffset;
            return this;
        }

        public Builder endTimeOffset(String endTimeOffset) {
            return endTimeOffset(Output.of(endTimeOffset));
        }

        public Builder endpointName(Output<String> endpointName) {
            $.endpointName = endpointName;
            return this;
        }

        public Builder endpointName(String endpointName) {
            return endpointName(Output.of(endpointName));
        }

        public Builder inferenceAttribute(@Nullable Output<String> inferenceAttribute) {
            $.inferenceAttribute = inferenceAttribute;
            return this;
        }

        public Builder inferenceAttribute(String inferenceAttribute) {
            return inferenceAttribute(Output.of(inferenceAttribute));
        }

        public Builder localPath(Output<String> localPath) {
            $.localPath = localPath;
            return this;
        }

        public Builder localPath(String localPath) {
            return localPath(Output.of(localPath));
        }

        public Builder probabilityAttribute(@Nullable Output<String> probabilityAttribute) {
            $.probabilityAttribute = probabilityAttribute;
            return this;
        }

        public Builder probabilityAttribute(String probabilityAttribute) {
            return probabilityAttribute(Output.of(probabilityAttribute));
        }

        public Builder probabilityThresholdAttribute(@Nullable Output<Double> probabilityThresholdAttribute) {
            $.probabilityThresholdAttribute = probabilityThresholdAttribute;
            return this;
        }

        public Builder probabilityThresholdAttribute(Double probabilityThresholdAttribute) {
            return probabilityThresholdAttribute(Output.of(probabilityThresholdAttribute));
        }

        public Builder s3DataDistributionType(@Nullable Output<ModelQualityJobDefinitionEndpointInputS3DataDistributionType> s3DataDistributionType) {
            $.s3DataDistributionType = s3DataDistributionType;
            return this;
        }

        public Builder s3DataDistributionType(ModelQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType) {
            return s3DataDistributionType(Output.of(s3DataDistributionType));
        }

        public Builder s3InputMode(@Nullable Output<ModelQualityJobDefinitionEndpointInputS3InputMode> s3InputMode) {
            $.s3InputMode = s3InputMode;
            return this;
        }

        public Builder s3InputMode(ModelQualityJobDefinitionEndpointInputS3InputMode s3InputMode) {
            return s3InputMode(Output.of(s3InputMode));
        }

        public Builder startTimeOffset(@Nullable Output<String> startTimeOffset) {
            $.startTimeOffset = startTimeOffset;
            return this;
        }

        public Builder startTimeOffset(String startTimeOffset) {
            return startTimeOffset(Output.of(startTimeOffset));
        }

        public ModelQualityJobDefinitionEndpointInputArgs build() {
            $.endpointName = Objects.requireNonNull($.endpointName, "expected parameter 'endpointName' to be non-null");
            $.localPath = Objects.requireNonNull($.localPath, "expected parameter 'localPath' to be non-null");
            return $;
        }
    }

}
