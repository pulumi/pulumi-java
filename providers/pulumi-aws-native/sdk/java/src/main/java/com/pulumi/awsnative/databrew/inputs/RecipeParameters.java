// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.inputs.RecipeParametersInputProperties;
import com.pulumi.awsnative.databrew.inputs.RecipeSecondaryInput;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecipeParameters extends com.pulumi.resources.InvokeArgs {

    public static final RecipeParameters Empty = new RecipeParameters();

    @Import(name="aggregateFunction")
    private @Nullable String aggregateFunction;

    public Optional<String> aggregateFunction() {
        return Optional.ofNullable(this.aggregateFunction);
    }

    @Import(name="base")
    private @Nullable String base;

    public Optional<String> base() {
        return Optional.ofNullable(this.base);
    }

    @Import(name="caseStatement")
    private @Nullable String caseStatement;

    public Optional<String> caseStatement() {
        return Optional.ofNullable(this.caseStatement);
    }

    @Import(name="categoryMap")
    private @Nullable String categoryMap;

    public Optional<String> categoryMap() {
        return Optional.ofNullable(this.categoryMap);
    }

    @Import(name="charsToRemove")
    private @Nullable String charsToRemove;

    public Optional<String> charsToRemove() {
        return Optional.ofNullable(this.charsToRemove);
    }

    @Import(name="collapseConsecutiveWhitespace")
    private @Nullable String collapseConsecutiveWhitespace;

    public Optional<String> collapseConsecutiveWhitespace() {
        return Optional.ofNullable(this.collapseConsecutiveWhitespace);
    }

    @Import(name="columnDataType")
    private @Nullable String columnDataType;

    public Optional<String> columnDataType() {
        return Optional.ofNullable(this.columnDataType);
    }

    @Import(name="columnRange")
    private @Nullable String columnRange;

    public Optional<String> columnRange() {
        return Optional.ofNullable(this.columnRange);
    }

    @Import(name="count")
    private @Nullable String count;

    public Optional<String> count() {
        return Optional.ofNullable(this.count);
    }

    @Import(name="customCharacters")
    private @Nullable String customCharacters;

    public Optional<String> customCharacters() {
        return Optional.ofNullable(this.customCharacters);
    }

    @Import(name="customStopWords")
    private @Nullable String customStopWords;

    public Optional<String> customStopWords() {
        return Optional.ofNullable(this.customStopWords);
    }

    @Import(name="customValue")
    private @Nullable String customValue;

    public Optional<String> customValue() {
        return Optional.ofNullable(this.customValue);
    }

    @Import(name="datasetsColumns")
    private @Nullable String datasetsColumns;

    public Optional<String> datasetsColumns() {
        return Optional.ofNullable(this.datasetsColumns);
    }

    @Import(name="dateAddValue")
    private @Nullable String dateAddValue;

    public Optional<String> dateAddValue() {
        return Optional.ofNullable(this.dateAddValue);
    }

    @Import(name="dateTimeFormat")
    private @Nullable String dateTimeFormat;

    public Optional<String> dateTimeFormat() {
        return Optional.ofNullable(this.dateTimeFormat);
    }

    @Import(name="dateTimeParameters")
    private @Nullable String dateTimeParameters;

    public Optional<String> dateTimeParameters() {
        return Optional.ofNullable(this.dateTimeParameters);
    }

    @Import(name="deleteOtherRows")
    private @Nullable String deleteOtherRows;

    public Optional<String> deleteOtherRows() {
        return Optional.ofNullable(this.deleteOtherRows);
    }

    @Import(name="delimiter")
    private @Nullable String delimiter;

    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    @Import(name="endPattern")
    private @Nullable String endPattern;

    public Optional<String> endPattern() {
        return Optional.ofNullable(this.endPattern);
    }

    @Import(name="endPosition")
    private @Nullable String endPosition;

    public Optional<String> endPosition() {
        return Optional.ofNullable(this.endPosition);
    }

    @Import(name="endValue")
    private @Nullable String endValue;

    public Optional<String> endValue() {
        return Optional.ofNullable(this.endValue);
    }

    @Import(name="expandContractions")
    private @Nullable String expandContractions;

    public Optional<String> expandContractions() {
        return Optional.ofNullable(this.expandContractions);
    }

    @Import(name="exponent")
    private @Nullable String exponent;

    public Optional<String> exponent() {
        return Optional.ofNullable(this.exponent);
    }

    @Import(name="falseString")
    private @Nullable String falseString;

    public Optional<String> falseString() {
        return Optional.ofNullable(this.falseString);
    }

    @Import(name="groupByAggFunctionOptions")
    private @Nullable String groupByAggFunctionOptions;

    public Optional<String> groupByAggFunctionOptions() {
        return Optional.ofNullable(this.groupByAggFunctionOptions);
    }

    @Import(name="groupByColumns")
    private @Nullable String groupByColumns;

    public Optional<String> groupByColumns() {
        return Optional.ofNullable(this.groupByColumns);
    }

    @Import(name="hiddenColumns")
    private @Nullable String hiddenColumns;

    public Optional<String> hiddenColumns() {
        return Optional.ofNullable(this.hiddenColumns);
    }

    @Import(name="ignoreCase")
    private @Nullable String ignoreCase;

    public Optional<String> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    @Import(name="includeInSplit")
    private @Nullable String includeInSplit;

    public Optional<String> includeInSplit() {
        return Optional.ofNullable(this.includeInSplit);
    }

    /**
     * Input
     * 
     */
    @Import(name="input")
    private @Nullable RecipeParametersInputProperties input;

    /**
     * @return Input
     * 
     */
    public Optional<RecipeParametersInputProperties> input() {
        return Optional.ofNullable(this.input);
    }

    @Import(name="interval")
    private @Nullable String interval;

    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }

    @Import(name="isText")
    private @Nullable String isText;

    public Optional<String> isText() {
        return Optional.ofNullable(this.isText);
    }

    @Import(name="joinKeys")
    private @Nullable String joinKeys;

    public Optional<String> joinKeys() {
        return Optional.ofNullable(this.joinKeys);
    }

    @Import(name="joinType")
    private @Nullable String joinType;

    public Optional<String> joinType() {
        return Optional.ofNullable(this.joinType);
    }

    @Import(name="leftColumns")
    private @Nullable String leftColumns;

    public Optional<String> leftColumns() {
        return Optional.ofNullable(this.leftColumns);
    }

    @Import(name="limit")
    private @Nullable String limit;

    public Optional<String> limit() {
        return Optional.ofNullable(this.limit);
    }

    @Import(name="lowerBound")
    private @Nullable String lowerBound;

    public Optional<String> lowerBound() {
        return Optional.ofNullable(this.lowerBound);
    }

    @Import(name="mapType")
    private @Nullable String mapType;

    public Optional<String> mapType() {
        return Optional.ofNullable(this.mapType);
    }

    @Import(name="modeType")
    private @Nullable String modeType;

    public Optional<String> modeType() {
        return Optional.ofNullable(this.modeType);
    }

    @Import(name="multiLine")
    private @Nullable Boolean multiLine;

    public Optional<Boolean> multiLine() {
        return Optional.ofNullable(this.multiLine);
    }

    @Import(name="numRows")
    private @Nullable String numRows;

    public Optional<String> numRows() {
        return Optional.ofNullable(this.numRows);
    }

    @Import(name="numRowsAfter")
    private @Nullable String numRowsAfter;

    public Optional<String> numRowsAfter() {
        return Optional.ofNullable(this.numRowsAfter);
    }

    @Import(name="numRowsBefore")
    private @Nullable String numRowsBefore;

    public Optional<String> numRowsBefore() {
        return Optional.ofNullable(this.numRowsBefore);
    }

    @Import(name="orderByColumn")
    private @Nullable String orderByColumn;

    public Optional<String> orderByColumn() {
        return Optional.ofNullable(this.orderByColumn);
    }

    @Import(name="orderByColumns")
    private @Nullable String orderByColumns;

    public Optional<String> orderByColumns() {
        return Optional.ofNullable(this.orderByColumns);
    }

    @Import(name="other")
    private @Nullable String other;

    public Optional<String> other() {
        return Optional.ofNullable(this.other);
    }

    @Import(name="pattern")
    private @Nullable String pattern;

    public Optional<String> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    @Import(name="patternOption1")
    private @Nullable String patternOption1;

    public Optional<String> patternOption1() {
        return Optional.ofNullable(this.patternOption1);
    }

    @Import(name="patternOption2")
    private @Nullable String patternOption2;

    public Optional<String> patternOption2() {
        return Optional.ofNullable(this.patternOption2);
    }

    @Import(name="patternOptions")
    private @Nullable String patternOptions;

    public Optional<String> patternOptions() {
        return Optional.ofNullable(this.patternOptions);
    }

    @Import(name="period")
    private @Nullable String period;

    public Optional<String> period() {
        return Optional.ofNullable(this.period);
    }

    @Import(name="position")
    private @Nullable String position;

    public Optional<String> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="removeAllPunctuation")
    private @Nullable String removeAllPunctuation;

    public Optional<String> removeAllPunctuation() {
        return Optional.ofNullable(this.removeAllPunctuation);
    }

    @Import(name="removeAllQuotes")
    private @Nullable String removeAllQuotes;

    public Optional<String> removeAllQuotes() {
        return Optional.ofNullable(this.removeAllQuotes);
    }

    @Import(name="removeAllWhitespace")
    private @Nullable String removeAllWhitespace;

    public Optional<String> removeAllWhitespace() {
        return Optional.ofNullable(this.removeAllWhitespace);
    }

    @Import(name="removeCustomCharacters")
    private @Nullable String removeCustomCharacters;

    public Optional<String> removeCustomCharacters() {
        return Optional.ofNullable(this.removeCustomCharacters);
    }

    @Import(name="removeCustomValue")
    private @Nullable String removeCustomValue;

    public Optional<String> removeCustomValue() {
        return Optional.ofNullable(this.removeCustomValue);
    }

    @Import(name="removeLeadingAndTrailingPunctuation")
    private @Nullable String removeLeadingAndTrailingPunctuation;

    public Optional<String> removeLeadingAndTrailingPunctuation() {
        return Optional.ofNullable(this.removeLeadingAndTrailingPunctuation);
    }

    @Import(name="removeLeadingAndTrailingQuotes")
    private @Nullable String removeLeadingAndTrailingQuotes;

    public Optional<String> removeLeadingAndTrailingQuotes() {
        return Optional.ofNullable(this.removeLeadingAndTrailingQuotes);
    }

    @Import(name="removeLeadingAndTrailingWhitespace")
    private @Nullable String removeLeadingAndTrailingWhitespace;

    public Optional<String> removeLeadingAndTrailingWhitespace() {
        return Optional.ofNullable(this.removeLeadingAndTrailingWhitespace);
    }

    @Import(name="removeLetters")
    private @Nullable String removeLetters;

    public Optional<String> removeLetters() {
        return Optional.ofNullable(this.removeLetters);
    }

    @Import(name="removeNumbers")
    private @Nullable String removeNumbers;

    public Optional<String> removeNumbers() {
        return Optional.ofNullable(this.removeNumbers);
    }

    @Import(name="removeSourceColumn")
    private @Nullable String removeSourceColumn;

    public Optional<String> removeSourceColumn() {
        return Optional.ofNullable(this.removeSourceColumn);
    }

    @Import(name="removeSpecialCharacters")
    private @Nullable String removeSpecialCharacters;

    public Optional<String> removeSpecialCharacters() {
        return Optional.ofNullable(this.removeSpecialCharacters);
    }

    @Import(name="rightColumns")
    private @Nullable String rightColumns;

    public Optional<String> rightColumns() {
        return Optional.ofNullable(this.rightColumns);
    }

    @Import(name="sampleSize")
    private @Nullable String sampleSize;

    public Optional<String> sampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }

    @Import(name="sampleType")
    private @Nullable String sampleType;

    public Optional<String> sampleType() {
        return Optional.ofNullable(this.sampleType);
    }

    @Import(name="secondInput")
    private @Nullable String secondInput;

    public Optional<String> secondInput() {
        return Optional.ofNullable(this.secondInput);
    }

    @Import(name="secondaryInputs")
    private @Nullable List<RecipeSecondaryInput> secondaryInputs;

    public Optional<List<RecipeSecondaryInput>> secondaryInputs() {
        return Optional.ofNullable(this.secondaryInputs);
    }

    @Import(name="sheetIndexes")
    private @Nullable List<Integer> sheetIndexes;

    public Optional<List<Integer>> sheetIndexes() {
        return Optional.ofNullable(this.sheetIndexes);
    }

    @Import(name="sheetNames")
    private @Nullable List<String> sheetNames;

    public Optional<List<String>> sheetNames() {
        return Optional.ofNullable(this.sheetNames);
    }

    @Import(name="sourceColumn")
    private @Nullable String sourceColumn;

    public Optional<String> sourceColumn() {
        return Optional.ofNullable(this.sourceColumn);
    }

    @Import(name="sourceColumn1")
    private @Nullable String sourceColumn1;

    public Optional<String> sourceColumn1() {
        return Optional.ofNullable(this.sourceColumn1);
    }

    @Import(name="sourceColumn2")
    private @Nullable String sourceColumn2;

    public Optional<String> sourceColumn2() {
        return Optional.ofNullable(this.sourceColumn2);
    }

    @Import(name="sourceColumns")
    private @Nullable String sourceColumns;

    public Optional<String> sourceColumns() {
        return Optional.ofNullable(this.sourceColumns);
    }

    @Import(name="startColumnIndex")
    private @Nullable String startColumnIndex;

    public Optional<String> startColumnIndex() {
        return Optional.ofNullable(this.startColumnIndex);
    }

    @Import(name="startPattern")
    private @Nullable String startPattern;

    public Optional<String> startPattern() {
        return Optional.ofNullable(this.startPattern);
    }

    @Import(name="startPosition")
    private @Nullable String startPosition;

    public Optional<String> startPosition() {
        return Optional.ofNullable(this.startPosition);
    }

    @Import(name="startValue")
    private @Nullable String startValue;

    public Optional<String> startValue() {
        return Optional.ofNullable(this.startValue);
    }

    @Import(name="stemmingMode")
    private @Nullable String stemmingMode;

    public Optional<String> stemmingMode() {
        return Optional.ofNullable(this.stemmingMode);
    }

    @Import(name="stepCount")
    private @Nullable String stepCount;

    public Optional<String> stepCount() {
        return Optional.ofNullable(this.stepCount);
    }

    @Import(name="stepIndex")
    private @Nullable String stepIndex;

    public Optional<String> stepIndex() {
        return Optional.ofNullable(this.stepIndex);
    }

    @Import(name="stopWordsMode")
    private @Nullable String stopWordsMode;

    public Optional<String> stopWordsMode() {
        return Optional.ofNullable(this.stopWordsMode);
    }

    @Import(name="strategy")
    private @Nullable String strategy;

    public Optional<String> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    @Import(name="targetColumn")
    private @Nullable String targetColumn;

    public Optional<String> targetColumn() {
        return Optional.ofNullable(this.targetColumn);
    }

    @Import(name="targetColumnNames")
    private @Nullable String targetColumnNames;

    public Optional<String> targetColumnNames() {
        return Optional.ofNullable(this.targetColumnNames);
    }

    @Import(name="targetDateFormat")
    private @Nullable String targetDateFormat;

    public Optional<String> targetDateFormat() {
        return Optional.ofNullable(this.targetDateFormat);
    }

    @Import(name="targetIndex")
    private @Nullable String targetIndex;

    public Optional<String> targetIndex() {
        return Optional.ofNullable(this.targetIndex);
    }

    @Import(name="timeZone")
    private @Nullable String timeZone;

    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    @Import(name="tokenizerPattern")
    private @Nullable String tokenizerPattern;

    public Optional<String> tokenizerPattern() {
        return Optional.ofNullable(this.tokenizerPattern);
    }

    @Import(name="trueString")
    private @Nullable String trueString;

    public Optional<String> trueString() {
        return Optional.ofNullable(this.trueString);
    }

    @Import(name="udfLang")
    private @Nullable String udfLang;

    public Optional<String> udfLang() {
        return Optional.ofNullable(this.udfLang);
    }

    @Import(name="units")
    private @Nullable String units;

    public Optional<String> units() {
        return Optional.ofNullable(this.units);
    }

    @Import(name="unpivotColumn")
    private @Nullable String unpivotColumn;

    public Optional<String> unpivotColumn() {
        return Optional.ofNullable(this.unpivotColumn);
    }

    @Import(name="upperBound")
    private @Nullable String upperBound;

    public Optional<String> upperBound() {
        return Optional.ofNullable(this.upperBound);
    }

    @Import(name="useNewDataFrame")
    private @Nullable String useNewDataFrame;

    public Optional<String> useNewDataFrame() {
        return Optional.ofNullable(this.useNewDataFrame);
    }

    @Import(name="value")
    private @Nullable String value;

    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="value1")
    private @Nullable String value1;

    public Optional<String> value1() {
        return Optional.ofNullable(this.value1);
    }

    @Import(name="value2")
    private @Nullable String value2;

    public Optional<String> value2() {
        return Optional.ofNullable(this.value2);
    }

    @Import(name="valueColumn")
    private @Nullable String valueColumn;

    public Optional<String> valueColumn() {
        return Optional.ofNullable(this.valueColumn);
    }

    @Import(name="viewFrame")
    private @Nullable String viewFrame;

    public Optional<String> viewFrame() {
        return Optional.ofNullable(this.viewFrame);
    }

    private RecipeParameters() {}

    private RecipeParameters(RecipeParameters $) {
        this.aggregateFunction = $.aggregateFunction;
        this.base = $.base;
        this.caseStatement = $.caseStatement;
        this.categoryMap = $.categoryMap;
        this.charsToRemove = $.charsToRemove;
        this.collapseConsecutiveWhitespace = $.collapseConsecutiveWhitespace;
        this.columnDataType = $.columnDataType;
        this.columnRange = $.columnRange;
        this.count = $.count;
        this.customCharacters = $.customCharacters;
        this.customStopWords = $.customStopWords;
        this.customValue = $.customValue;
        this.datasetsColumns = $.datasetsColumns;
        this.dateAddValue = $.dateAddValue;
        this.dateTimeFormat = $.dateTimeFormat;
        this.dateTimeParameters = $.dateTimeParameters;
        this.deleteOtherRows = $.deleteOtherRows;
        this.delimiter = $.delimiter;
        this.endPattern = $.endPattern;
        this.endPosition = $.endPosition;
        this.endValue = $.endValue;
        this.expandContractions = $.expandContractions;
        this.exponent = $.exponent;
        this.falseString = $.falseString;
        this.groupByAggFunctionOptions = $.groupByAggFunctionOptions;
        this.groupByColumns = $.groupByColumns;
        this.hiddenColumns = $.hiddenColumns;
        this.ignoreCase = $.ignoreCase;
        this.includeInSplit = $.includeInSplit;
        this.input = $.input;
        this.interval = $.interval;
        this.isText = $.isText;
        this.joinKeys = $.joinKeys;
        this.joinType = $.joinType;
        this.leftColumns = $.leftColumns;
        this.limit = $.limit;
        this.lowerBound = $.lowerBound;
        this.mapType = $.mapType;
        this.modeType = $.modeType;
        this.multiLine = $.multiLine;
        this.numRows = $.numRows;
        this.numRowsAfter = $.numRowsAfter;
        this.numRowsBefore = $.numRowsBefore;
        this.orderByColumn = $.orderByColumn;
        this.orderByColumns = $.orderByColumns;
        this.other = $.other;
        this.pattern = $.pattern;
        this.patternOption1 = $.patternOption1;
        this.patternOption2 = $.patternOption2;
        this.patternOptions = $.patternOptions;
        this.period = $.period;
        this.position = $.position;
        this.removeAllPunctuation = $.removeAllPunctuation;
        this.removeAllQuotes = $.removeAllQuotes;
        this.removeAllWhitespace = $.removeAllWhitespace;
        this.removeCustomCharacters = $.removeCustomCharacters;
        this.removeCustomValue = $.removeCustomValue;
        this.removeLeadingAndTrailingPunctuation = $.removeLeadingAndTrailingPunctuation;
        this.removeLeadingAndTrailingQuotes = $.removeLeadingAndTrailingQuotes;
        this.removeLeadingAndTrailingWhitespace = $.removeLeadingAndTrailingWhitespace;
        this.removeLetters = $.removeLetters;
        this.removeNumbers = $.removeNumbers;
        this.removeSourceColumn = $.removeSourceColumn;
        this.removeSpecialCharacters = $.removeSpecialCharacters;
        this.rightColumns = $.rightColumns;
        this.sampleSize = $.sampleSize;
        this.sampleType = $.sampleType;
        this.secondInput = $.secondInput;
        this.secondaryInputs = $.secondaryInputs;
        this.sheetIndexes = $.sheetIndexes;
        this.sheetNames = $.sheetNames;
        this.sourceColumn = $.sourceColumn;
        this.sourceColumn1 = $.sourceColumn1;
        this.sourceColumn2 = $.sourceColumn2;
        this.sourceColumns = $.sourceColumns;
        this.startColumnIndex = $.startColumnIndex;
        this.startPattern = $.startPattern;
        this.startPosition = $.startPosition;
        this.startValue = $.startValue;
        this.stemmingMode = $.stemmingMode;
        this.stepCount = $.stepCount;
        this.stepIndex = $.stepIndex;
        this.stopWordsMode = $.stopWordsMode;
        this.strategy = $.strategy;
        this.targetColumn = $.targetColumn;
        this.targetColumnNames = $.targetColumnNames;
        this.targetDateFormat = $.targetDateFormat;
        this.targetIndex = $.targetIndex;
        this.timeZone = $.timeZone;
        this.tokenizerPattern = $.tokenizerPattern;
        this.trueString = $.trueString;
        this.udfLang = $.udfLang;
        this.units = $.units;
        this.unpivotColumn = $.unpivotColumn;
        this.upperBound = $.upperBound;
        this.useNewDataFrame = $.useNewDataFrame;
        this.value = $.value;
        this.value1 = $.value1;
        this.value2 = $.value2;
        this.valueColumn = $.valueColumn;
        this.viewFrame = $.viewFrame;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecipeParameters defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecipeParameters $;

        public Builder() {
            $ = new RecipeParameters();
        }

        public Builder(RecipeParameters defaults) {
            $ = new RecipeParameters(Objects.requireNonNull(defaults));
        }

        public Builder aggregateFunction(@Nullable String aggregateFunction) {
            $.aggregateFunction = aggregateFunction;
            return this;
        }

        public Builder base(@Nullable String base) {
            $.base = base;
            return this;
        }

        public Builder caseStatement(@Nullable String caseStatement) {
            $.caseStatement = caseStatement;
            return this;
        }

        public Builder categoryMap(@Nullable String categoryMap) {
            $.categoryMap = categoryMap;
            return this;
        }

        public Builder charsToRemove(@Nullable String charsToRemove) {
            $.charsToRemove = charsToRemove;
            return this;
        }

        public Builder collapseConsecutiveWhitespace(@Nullable String collapseConsecutiveWhitespace) {
            $.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            return this;
        }

        public Builder columnDataType(@Nullable String columnDataType) {
            $.columnDataType = columnDataType;
            return this;
        }

        public Builder columnRange(@Nullable String columnRange) {
            $.columnRange = columnRange;
            return this;
        }

        public Builder count(@Nullable String count) {
            $.count = count;
            return this;
        }

        public Builder customCharacters(@Nullable String customCharacters) {
            $.customCharacters = customCharacters;
            return this;
        }

        public Builder customStopWords(@Nullable String customStopWords) {
            $.customStopWords = customStopWords;
            return this;
        }

        public Builder customValue(@Nullable String customValue) {
            $.customValue = customValue;
            return this;
        }

        public Builder datasetsColumns(@Nullable String datasetsColumns) {
            $.datasetsColumns = datasetsColumns;
            return this;
        }

        public Builder dateAddValue(@Nullable String dateAddValue) {
            $.dateAddValue = dateAddValue;
            return this;
        }

        public Builder dateTimeFormat(@Nullable String dateTimeFormat) {
            $.dateTimeFormat = dateTimeFormat;
            return this;
        }

        public Builder dateTimeParameters(@Nullable String dateTimeParameters) {
            $.dateTimeParameters = dateTimeParameters;
            return this;
        }

        public Builder deleteOtherRows(@Nullable String deleteOtherRows) {
            $.deleteOtherRows = deleteOtherRows;
            return this;
        }

        public Builder delimiter(@Nullable String delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        public Builder endPattern(@Nullable String endPattern) {
            $.endPattern = endPattern;
            return this;
        }

        public Builder endPosition(@Nullable String endPosition) {
            $.endPosition = endPosition;
            return this;
        }

        public Builder endValue(@Nullable String endValue) {
            $.endValue = endValue;
            return this;
        }

        public Builder expandContractions(@Nullable String expandContractions) {
            $.expandContractions = expandContractions;
            return this;
        }

        public Builder exponent(@Nullable String exponent) {
            $.exponent = exponent;
            return this;
        }

        public Builder falseString(@Nullable String falseString) {
            $.falseString = falseString;
            return this;
        }

        public Builder groupByAggFunctionOptions(@Nullable String groupByAggFunctionOptions) {
            $.groupByAggFunctionOptions = groupByAggFunctionOptions;
            return this;
        }

        public Builder groupByColumns(@Nullable String groupByColumns) {
            $.groupByColumns = groupByColumns;
            return this;
        }

        public Builder hiddenColumns(@Nullable String hiddenColumns) {
            $.hiddenColumns = hiddenColumns;
            return this;
        }

        public Builder ignoreCase(@Nullable String ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        public Builder includeInSplit(@Nullable String includeInSplit) {
            $.includeInSplit = includeInSplit;
            return this;
        }

        /**
         * @param input Input
         * 
         * @return builder
         * 
         */
        public Builder input(@Nullable RecipeParametersInputProperties input) {
            $.input = input;
            return this;
        }

        public Builder interval(@Nullable String interval) {
            $.interval = interval;
            return this;
        }

        public Builder isText(@Nullable String isText) {
            $.isText = isText;
            return this;
        }

        public Builder joinKeys(@Nullable String joinKeys) {
            $.joinKeys = joinKeys;
            return this;
        }

        public Builder joinType(@Nullable String joinType) {
            $.joinType = joinType;
            return this;
        }

        public Builder leftColumns(@Nullable String leftColumns) {
            $.leftColumns = leftColumns;
            return this;
        }

        public Builder limit(@Nullable String limit) {
            $.limit = limit;
            return this;
        }

        public Builder lowerBound(@Nullable String lowerBound) {
            $.lowerBound = lowerBound;
            return this;
        }

        public Builder mapType(@Nullable String mapType) {
            $.mapType = mapType;
            return this;
        }

        public Builder modeType(@Nullable String modeType) {
            $.modeType = modeType;
            return this;
        }

        public Builder multiLine(@Nullable Boolean multiLine) {
            $.multiLine = multiLine;
            return this;
        }

        public Builder numRows(@Nullable String numRows) {
            $.numRows = numRows;
            return this;
        }

        public Builder numRowsAfter(@Nullable String numRowsAfter) {
            $.numRowsAfter = numRowsAfter;
            return this;
        }

        public Builder numRowsBefore(@Nullable String numRowsBefore) {
            $.numRowsBefore = numRowsBefore;
            return this;
        }

        public Builder orderByColumn(@Nullable String orderByColumn) {
            $.orderByColumn = orderByColumn;
            return this;
        }

        public Builder orderByColumns(@Nullable String orderByColumns) {
            $.orderByColumns = orderByColumns;
            return this;
        }

        public Builder other(@Nullable String other) {
            $.other = other;
            return this;
        }

        public Builder pattern(@Nullable String pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder patternOption1(@Nullable String patternOption1) {
            $.patternOption1 = patternOption1;
            return this;
        }

        public Builder patternOption2(@Nullable String patternOption2) {
            $.patternOption2 = patternOption2;
            return this;
        }

        public Builder patternOptions(@Nullable String patternOptions) {
            $.patternOptions = patternOptions;
            return this;
        }

        public Builder period(@Nullable String period) {
            $.period = period;
            return this;
        }

        public Builder position(@Nullable String position) {
            $.position = position;
            return this;
        }

        public Builder removeAllPunctuation(@Nullable String removeAllPunctuation) {
            $.removeAllPunctuation = removeAllPunctuation;
            return this;
        }

        public Builder removeAllQuotes(@Nullable String removeAllQuotes) {
            $.removeAllQuotes = removeAllQuotes;
            return this;
        }

        public Builder removeAllWhitespace(@Nullable String removeAllWhitespace) {
            $.removeAllWhitespace = removeAllWhitespace;
            return this;
        }

        public Builder removeCustomCharacters(@Nullable String removeCustomCharacters) {
            $.removeCustomCharacters = removeCustomCharacters;
            return this;
        }

        public Builder removeCustomValue(@Nullable String removeCustomValue) {
            $.removeCustomValue = removeCustomValue;
            return this;
        }

        public Builder removeLeadingAndTrailingPunctuation(@Nullable String removeLeadingAndTrailingPunctuation) {
            $.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            return this;
        }

        public Builder removeLeadingAndTrailingQuotes(@Nullable String removeLeadingAndTrailingQuotes) {
            $.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            return this;
        }

        public Builder removeLeadingAndTrailingWhitespace(@Nullable String removeLeadingAndTrailingWhitespace) {
            $.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            return this;
        }

        public Builder removeLetters(@Nullable String removeLetters) {
            $.removeLetters = removeLetters;
            return this;
        }

        public Builder removeNumbers(@Nullable String removeNumbers) {
            $.removeNumbers = removeNumbers;
            return this;
        }

        public Builder removeSourceColumn(@Nullable String removeSourceColumn) {
            $.removeSourceColumn = removeSourceColumn;
            return this;
        }

        public Builder removeSpecialCharacters(@Nullable String removeSpecialCharacters) {
            $.removeSpecialCharacters = removeSpecialCharacters;
            return this;
        }

        public Builder rightColumns(@Nullable String rightColumns) {
            $.rightColumns = rightColumns;
            return this;
        }

        public Builder sampleSize(@Nullable String sampleSize) {
            $.sampleSize = sampleSize;
            return this;
        }

        public Builder sampleType(@Nullable String sampleType) {
            $.sampleType = sampleType;
            return this;
        }

        public Builder secondInput(@Nullable String secondInput) {
            $.secondInput = secondInput;
            return this;
        }

        public Builder secondaryInputs(@Nullable List<RecipeSecondaryInput> secondaryInputs) {
            $.secondaryInputs = secondaryInputs;
            return this;
        }

        public Builder secondaryInputs(RecipeSecondaryInput... secondaryInputs) {
            return secondaryInputs(List.of(secondaryInputs));
        }

        public Builder sheetIndexes(@Nullable List<Integer> sheetIndexes) {
            $.sheetIndexes = sheetIndexes;
            return this;
        }

        public Builder sheetIndexes(Integer... sheetIndexes) {
            return sheetIndexes(List.of(sheetIndexes));
        }

        public Builder sheetNames(@Nullable List<String> sheetNames) {
            $.sheetNames = sheetNames;
            return this;
        }

        public Builder sheetNames(String... sheetNames) {
            return sheetNames(List.of(sheetNames));
        }

        public Builder sourceColumn(@Nullable String sourceColumn) {
            $.sourceColumn = sourceColumn;
            return this;
        }

        public Builder sourceColumn1(@Nullable String sourceColumn1) {
            $.sourceColumn1 = sourceColumn1;
            return this;
        }

        public Builder sourceColumn2(@Nullable String sourceColumn2) {
            $.sourceColumn2 = sourceColumn2;
            return this;
        }

        public Builder sourceColumns(@Nullable String sourceColumns) {
            $.sourceColumns = sourceColumns;
            return this;
        }

        public Builder startColumnIndex(@Nullable String startColumnIndex) {
            $.startColumnIndex = startColumnIndex;
            return this;
        }

        public Builder startPattern(@Nullable String startPattern) {
            $.startPattern = startPattern;
            return this;
        }

        public Builder startPosition(@Nullable String startPosition) {
            $.startPosition = startPosition;
            return this;
        }

        public Builder startValue(@Nullable String startValue) {
            $.startValue = startValue;
            return this;
        }

        public Builder stemmingMode(@Nullable String stemmingMode) {
            $.stemmingMode = stemmingMode;
            return this;
        }

        public Builder stepCount(@Nullable String stepCount) {
            $.stepCount = stepCount;
            return this;
        }

        public Builder stepIndex(@Nullable String stepIndex) {
            $.stepIndex = stepIndex;
            return this;
        }

        public Builder stopWordsMode(@Nullable String stopWordsMode) {
            $.stopWordsMode = stopWordsMode;
            return this;
        }

        public Builder strategy(@Nullable String strategy) {
            $.strategy = strategy;
            return this;
        }

        public Builder targetColumn(@Nullable String targetColumn) {
            $.targetColumn = targetColumn;
            return this;
        }

        public Builder targetColumnNames(@Nullable String targetColumnNames) {
            $.targetColumnNames = targetColumnNames;
            return this;
        }

        public Builder targetDateFormat(@Nullable String targetDateFormat) {
            $.targetDateFormat = targetDateFormat;
            return this;
        }

        public Builder targetIndex(@Nullable String targetIndex) {
            $.targetIndex = targetIndex;
            return this;
        }

        public Builder timeZone(@Nullable String timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder tokenizerPattern(@Nullable String tokenizerPattern) {
            $.tokenizerPattern = tokenizerPattern;
            return this;
        }

        public Builder trueString(@Nullable String trueString) {
            $.trueString = trueString;
            return this;
        }

        public Builder udfLang(@Nullable String udfLang) {
            $.udfLang = udfLang;
            return this;
        }

        public Builder units(@Nullable String units) {
            $.units = units;
            return this;
        }

        public Builder unpivotColumn(@Nullable String unpivotColumn) {
            $.unpivotColumn = unpivotColumn;
            return this;
        }

        public Builder upperBound(@Nullable String upperBound) {
            $.upperBound = upperBound;
            return this;
        }

        public Builder useNewDataFrame(@Nullable String useNewDataFrame) {
            $.useNewDataFrame = useNewDataFrame;
            return this;
        }

        public Builder value(@Nullable String value) {
            $.value = value;
            return this;
        }

        public Builder value1(@Nullable String value1) {
            $.value1 = value1;
            return this;
        }

        public Builder value2(@Nullable String value2) {
            $.value2 = value2;
            return this;
        }

        public Builder valueColumn(@Nullable String valueColumn) {
            $.valueColumn = valueColumn;
            return this;
        }

        public Builder viewFrame(@Nullable String viewFrame) {
            $.viewFrame = viewFrame;
            return this;
        }

        public RecipeParameters build() {
            return $;
        }
    }

}
