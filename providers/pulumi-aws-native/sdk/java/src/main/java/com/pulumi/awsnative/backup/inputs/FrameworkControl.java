// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.backup.inputs;

import com.pulumi.awsnative.backup.inputs.FrameworkControlControlScopeProperties;
import com.pulumi.awsnative.backup.inputs.FrameworkControlInputParameter;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrameworkControl extends com.pulumi.resources.InvokeArgs {

    public static final FrameworkControl Empty = new FrameworkControl();

    /**
     * A list of ParameterName and ParameterValue pairs.
     * 
     */
    @Import(name="controlInputParameters")
    private @Nullable List<FrameworkControlInputParameter> controlInputParameters;

    public Optional<List<FrameworkControlInputParameter>> controlInputParameters() {
        return Optional.ofNullable(this.controlInputParameters);
    }

    /**
     * The name of a control. This name is between 1 and 256 characters.
     * 
     */
    @Import(name="controlName", required=true)
    private String controlName;

    public String controlName() {
        return this.controlName;
    }

    /**
     * The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
     * 
     */
    @Import(name="controlScope")
    private @Nullable FrameworkControlControlScopeProperties controlScope;

    public Optional<FrameworkControlControlScopeProperties> controlScope() {
        return Optional.ofNullable(this.controlScope);
    }

    private FrameworkControl() {}

    private FrameworkControl(FrameworkControl $) {
        this.controlInputParameters = $.controlInputParameters;
        this.controlName = $.controlName;
        this.controlScope = $.controlScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrameworkControl defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrameworkControl $;

        public Builder() {
            $ = new FrameworkControl();
        }

        public Builder(FrameworkControl defaults) {
            $ = new FrameworkControl(Objects.requireNonNull(defaults));
        }

        public Builder controlInputParameters(@Nullable List<FrameworkControlInputParameter> controlInputParameters) {
            $.controlInputParameters = controlInputParameters;
            return this;
        }

        public Builder controlInputParameters(FrameworkControlInputParameter... controlInputParameters) {
            return controlInputParameters(List.of(controlInputParameters));
        }

        public Builder controlName(String controlName) {
            $.controlName = controlName;
            return this;
        }

        public Builder controlScope(@Nullable FrameworkControlControlScopeProperties controlScope) {
            $.controlScope = controlScope;
            return this;
        }

        public FrameworkControl build() {
            $.controlName = Objects.requireNonNull($.controlName, "expected parameter 'controlName' to be non-null");
            return $;
        }
    }

}
