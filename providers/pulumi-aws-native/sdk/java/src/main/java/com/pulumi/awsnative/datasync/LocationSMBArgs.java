// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.datasync;

import com.pulumi.awsnative.datasync.inputs.LocationSMBMountOptionsArgs;
import com.pulumi.awsnative.datasync.inputs.LocationSMBTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocationSMBArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocationSMBArgs Empty = new LocationSMBArgs();

    /**
     * The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
     * 
     */
    @Import(name="agentArns", required=true)
    private Output<List<String>> agentArns;

    public Output<List<String>> agentArns() {
        return this.agentArns;
    }

    /**
     * The name of the Windows domain that the SMB server belongs to.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="mountOptions")
    private @Nullable Output<LocationSMBMountOptionsArgs> mountOptions;

    public Optional<Output<LocationSMBMountOptionsArgs>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    /**
     * The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
     * 
     */
    @Import(name="serverHostname", required=true)
    private Output<String> serverHostname;

    public Output<String> serverHostname() {
        return this.serverHostname;
    }

    /**
     * The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination
     * 
     */
    @Import(name="subdirectory", required=true)
    private Output<String> subdirectory;

    public Output<String> subdirectory() {
        return this.subdirectory;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LocationSMBTagArgs>> tags;

    public Optional<Output<List<LocationSMBTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The user who can mount the share, has the permissions to access files and folders in the SMB share.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    public Output<String> user() {
        return this.user;
    }

    private LocationSMBArgs() {}

    private LocationSMBArgs(LocationSMBArgs $) {
        this.agentArns = $.agentArns;
        this.domain = $.domain;
        this.mountOptions = $.mountOptions;
        this.password = $.password;
        this.serverHostname = $.serverHostname;
        this.subdirectory = $.subdirectory;
        this.tags = $.tags;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocationSMBArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocationSMBArgs $;

        public Builder() {
            $ = new LocationSMBArgs();
        }

        public Builder(LocationSMBArgs defaults) {
            $ = new LocationSMBArgs(Objects.requireNonNull(defaults));
        }

        public Builder agentArns(Output<List<String>> agentArns) {
            $.agentArns = agentArns;
            return this;
        }

        public Builder agentArns(List<String> agentArns) {
            return agentArns(Output.of(agentArns));
        }

        public Builder agentArns(String... agentArns) {
            return agentArns(List.of(agentArns));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder mountOptions(@Nullable Output<LocationSMBMountOptionsArgs> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        public Builder mountOptions(LocationSMBMountOptionsArgs mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder serverHostname(Output<String> serverHostname) {
            $.serverHostname = serverHostname;
            return this;
        }

        public Builder serverHostname(String serverHostname) {
            return serverHostname(Output.of(serverHostname));
        }

        public Builder subdirectory(Output<String> subdirectory) {
            $.subdirectory = subdirectory;
            return this;
        }

        public Builder subdirectory(String subdirectory) {
            return subdirectory(Output.of(subdirectory));
        }

        public Builder tags(@Nullable Output<List<LocationSMBTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<LocationSMBTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(LocationSMBTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public LocationSMBArgs build() {
            $.agentArns = Objects.requireNonNull($.agentArns, "expected parameter 'agentArns' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.serverHostname = Objects.requireNonNull($.serverHostname, "expected parameter 'serverHostname' to be non-null");
            $.subdirectory = Objects.requireNonNull($.subdirectory, "expected parameter 'subdirectory' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            return $;
        }
    }

}
