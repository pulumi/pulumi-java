// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.eks.outputs;

import com.pulumi.awsnative.eks.outputs.IdentityProviderConfigRequiredClaim;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IdentityProviderConfigOidcIdentityProviderConfig {
    /**
     * @return This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
     * 
     */
    private final String clientId;
    /**
     * @return The JWT claim that the provider uses to return your groups.
     * 
     */
    private final @Nullable String groupsClaim;
    /**
     * @return The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
     * 
     */
    private final @Nullable String groupsPrefix;
    /**
     * @return The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
     * 
     */
    private final String issuerUrl;
    private final @Nullable List<IdentityProviderConfigRequiredClaim> requiredClaims;
    /**
     * @return The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
     * 
     */
    private final @Nullable String usernameClaim;
    /**
     * @return The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
     * 
     */
    private final @Nullable String usernamePrefix;

    @CustomType.Constructor
    private IdentityProviderConfigOidcIdentityProviderConfig(
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("groupsClaim") @Nullable String groupsClaim,
        @CustomType.Parameter("groupsPrefix") @Nullable String groupsPrefix,
        @CustomType.Parameter("issuerUrl") String issuerUrl,
        @CustomType.Parameter("requiredClaims") @Nullable List<IdentityProviderConfigRequiredClaim> requiredClaims,
        @CustomType.Parameter("usernameClaim") @Nullable String usernameClaim,
        @CustomType.Parameter("usernamePrefix") @Nullable String usernamePrefix) {
        this.clientId = clientId;
        this.groupsClaim = groupsClaim;
        this.groupsPrefix = groupsPrefix;
        this.issuerUrl = issuerUrl;
        this.requiredClaims = requiredClaims;
        this.usernameClaim = usernameClaim;
        this.usernamePrefix = usernamePrefix;
    }

    /**
     * @return This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The JWT claim that the provider uses to return your groups.
     * 
     */
    public Optional<String> groupsClaim() {
        return Optional.ofNullable(this.groupsClaim);
    }
    /**
     * @return The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
     * 
     */
    public Optional<String> groupsPrefix() {
        return Optional.ofNullable(this.groupsPrefix);
    }
    /**
     * @return The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
     * 
     */
    public String issuerUrl() {
        return this.issuerUrl;
    }
    public List<IdentityProviderConfigRequiredClaim> requiredClaims() {
        return this.requiredClaims == null ? List.of() : this.requiredClaims;
    }
    /**
     * @return The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
     * 
     */
    public Optional<String> usernameClaim() {
        return Optional.ofNullable(this.usernameClaim);
    }
    /**
     * @return The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
     * 
     */
    public Optional<String> usernamePrefix() {
        return Optional.ofNullable(this.usernamePrefix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityProviderConfigOidcIdentityProviderConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clientId;
        private @Nullable String groupsClaim;
        private @Nullable String groupsPrefix;
        private String issuerUrl;
        private @Nullable List<IdentityProviderConfigRequiredClaim> requiredClaims;
        private @Nullable String usernameClaim;
        private @Nullable String usernamePrefix;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityProviderConfigOidcIdentityProviderConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.groupsClaim = defaults.groupsClaim;
    	      this.groupsPrefix = defaults.groupsPrefix;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.requiredClaims = defaults.requiredClaims;
    	      this.usernameClaim = defaults.usernameClaim;
    	      this.usernamePrefix = defaults.usernamePrefix;
        }

        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder groupsClaim(@Nullable String groupsClaim) {
            this.groupsClaim = groupsClaim;
            return this;
        }
        public Builder groupsPrefix(@Nullable String groupsPrefix) {
            this.groupsPrefix = groupsPrefix;
            return this;
        }
        public Builder issuerUrl(String issuerUrl) {
            this.issuerUrl = Objects.requireNonNull(issuerUrl);
            return this;
        }
        public Builder requiredClaims(@Nullable List<IdentityProviderConfigRequiredClaim> requiredClaims) {
            this.requiredClaims = requiredClaims;
            return this;
        }
        public Builder requiredClaims(IdentityProviderConfigRequiredClaim... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }
        public Builder usernameClaim(@Nullable String usernameClaim) {
            this.usernameClaim = usernameClaim;
            return this;
        }
        public Builder usernamePrefix(@Nullable String usernamePrefix) {
            this.usernamePrefix = usernamePrefix;
            return this;
        }        public IdentityProviderConfigOidcIdentityProviderConfig build() {
            return new IdentityProviderConfigOidcIdentityProviderConfig(clientId, groupsClaim, groupsPrefix, issuerUrl, requiredClaims, usernameClaim, usernamePrefix);
        }
    }
}
