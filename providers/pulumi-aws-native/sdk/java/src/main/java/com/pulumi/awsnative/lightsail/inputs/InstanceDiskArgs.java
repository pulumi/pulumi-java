// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Disk associated with the Instance.
 * 
 */
public final class InstanceDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceDiskArgs Empty = new InstanceDiskArgs();

    /**
     * Instance attached to the disk.
     * 
     */
    @Import(name="attachedTo")
    private @Nullable Output<String> attachedTo;

    public Optional<Output<String>> attachedTo() {
        return Optional.ofNullable(this.attachedTo);
    }

    /**
     * Attachment state of the disk.
     * 
     */
    @Import(name="attachmentState")
    private @Nullable Output<String> attachmentState;

    public Optional<Output<String>> attachmentState() {
        return Optional.ofNullable(this.attachmentState);
    }

    /**
     * The names to use for your new Lightsail disk.
     * 
     */
    @Import(name="diskName", required=true)
    private Output<String> diskName;

    public Output<String> diskName() {
        return this.diskName;
    }

    /**
     * IOPS of disk.
     * 
     */
    @Import(name="iOPS")
    private @Nullable Output<Integer> iOPS;

    public Optional<Output<Integer>> iOPS() {
        return Optional.ofNullable(this.iOPS);
    }

    /**
     * Is the Attached disk is the system disk of the Instance.
     * 
     */
    @Import(name="isSystemDisk")
    private @Nullable Output<Boolean> isSystemDisk;

    public Optional<Output<Boolean>> isSystemDisk() {
        return Optional.ofNullable(this.isSystemDisk);
    }

    /**
     * Path of the disk attached to the instance.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    public Output<String> path() {
        return this.path;
    }

    /**
     * Size of the disk attached to the Instance.
     * 
     */
    @Import(name="sizeInGb")
    private @Nullable Output<String> sizeInGb;

    public Optional<Output<String>> sizeInGb() {
        return Optional.ofNullable(this.sizeInGb);
    }

    private InstanceDiskArgs() {}

    private InstanceDiskArgs(InstanceDiskArgs $) {
        this.attachedTo = $.attachedTo;
        this.attachmentState = $.attachmentState;
        this.diskName = $.diskName;
        this.iOPS = $.iOPS;
        this.isSystemDisk = $.isSystemDisk;
        this.path = $.path;
        this.sizeInGb = $.sizeInGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceDiskArgs $;

        public Builder() {
            $ = new InstanceDiskArgs();
        }

        public Builder(InstanceDiskArgs defaults) {
            $ = new InstanceDiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder attachedTo(@Nullable Output<String> attachedTo) {
            $.attachedTo = attachedTo;
            return this;
        }

        public Builder attachedTo(String attachedTo) {
            return attachedTo(Output.of(attachedTo));
        }

        public Builder attachmentState(@Nullable Output<String> attachmentState) {
            $.attachmentState = attachmentState;
            return this;
        }

        public Builder attachmentState(String attachmentState) {
            return attachmentState(Output.of(attachmentState));
        }

        public Builder diskName(Output<String> diskName) {
            $.diskName = diskName;
            return this;
        }

        public Builder diskName(String diskName) {
            return diskName(Output.of(diskName));
        }

        public Builder iOPS(@Nullable Output<Integer> iOPS) {
            $.iOPS = iOPS;
            return this;
        }

        public Builder iOPS(Integer iOPS) {
            return iOPS(Output.of(iOPS));
        }

        public Builder isSystemDisk(@Nullable Output<Boolean> isSystemDisk) {
            $.isSystemDisk = isSystemDisk;
            return this;
        }

        public Builder isSystemDisk(Boolean isSystemDisk) {
            return isSystemDisk(Output.of(isSystemDisk));
        }

        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder sizeInGb(@Nullable Output<String> sizeInGb) {
            $.sizeInGb = sizeInGb;
            return this;
        }

        public Builder sizeInGb(String sizeInGb) {
            return sizeInGb(Output.of(sizeInGb));
        }

        public InstanceDiskArgs build() {
            $.diskName = Objects.requireNonNull($.diskName, "expected parameter 'diskName' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
