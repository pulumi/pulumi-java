// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.datasync.outputs;

import com.pulumi.awsnative.datasync.enums.LocationHDFSAuthenticationType;
import com.pulumi.awsnative.datasync.outputs.LocationHDFSNameNode;
import com.pulumi.awsnative.datasync.outputs.LocationHDFSQopConfiguration;
import com.pulumi.awsnative.datasync.outputs.LocationHDFSTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLocationHDFSResult {
    /**
     * ARN(s) of the agent(s) to use for an HDFS location.
     * 
     */
    private final @Nullable List<String> agentArns;
    /**
     * The authentication mode used to determine identity of user.
     * 
     */
    private final @Nullable LocationHDFSAuthenticationType authenticationType;
    /**
     * Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
     * 
     */
    private final @Nullable Integer blockSize;
    /**
     * The unique identity, or principal, to which Kerberos can assign tickets.
     * 
     */
    private final @Nullable String kerberosPrincipal;
    /**
     * The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
     * 
     */
    private final @Nullable String kmsKeyProviderUri;
    /**
     * The Amazon Resource Name (ARN) of the HDFS location.
     * 
     */
    private final @Nullable String locationArn;
    /**
     * The URL of the HDFS location that was described.
     * 
     */
    private final @Nullable String locationUri;
    /**
     * An array of Name Node(s) of the HDFS location.
     * 
     */
    private final @Nullable List<LocationHDFSNameNode> nameNodes;
    private final @Nullable LocationHDFSQopConfiguration qopConfiguration;
    /**
     * Number of copies of each block that exists inside the HDFS cluster.
     * 
     */
    private final @Nullable Integer replicationFactor;
    /**
     * The user name that has read and write permissions on the specified HDFS cluster.
     * 
     */
    private final @Nullable String simpleUser;
    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    private final @Nullable List<LocationHDFSTag> tags;

    @CustomType.Constructor
    private GetLocationHDFSResult(
        @CustomType.Parameter("agentArns") @Nullable List<String> agentArns,
        @CustomType.Parameter("authenticationType") @Nullable LocationHDFSAuthenticationType authenticationType,
        @CustomType.Parameter("blockSize") @Nullable Integer blockSize,
        @CustomType.Parameter("kerberosPrincipal") @Nullable String kerberosPrincipal,
        @CustomType.Parameter("kmsKeyProviderUri") @Nullable String kmsKeyProviderUri,
        @CustomType.Parameter("locationArn") @Nullable String locationArn,
        @CustomType.Parameter("locationUri") @Nullable String locationUri,
        @CustomType.Parameter("nameNodes") @Nullable List<LocationHDFSNameNode> nameNodes,
        @CustomType.Parameter("qopConfiguration") @Nullable LocationHDFSQopConfiguration qopConfiguration,
        @CustomType.Parameter("replicationFactor") @Nullable Integer replicationFactor,
        @CustomType.Parameter("simpleUser") @Nullable String simpleUser,
        @CustomType.Parameter("tags") @Nullable List<LocationHDFSTag> tags) {
        this.agentArns = agentArns;
        this.authenticationType = authenticationType;
        this.blockSize = blockSize;
        this.kerberosPrincipal = kerberosPrincipal;
        this.kmsKeyProviderUri = kmsKeyProviderUri;
        this.locationArn = locationArn;
        this.locationUri = locationUri;
        this.nameNodes = nameNodes;
        this.qopConfiguration = qopConfiguration;
        this.replicationFactor = replicationFactor;
        this.simpleUser = simpleUser;
        this.tags = tags;
    }

    /**
     * ARN(s) of the agent(s) to use for an HDFS location.
     * 
    */
    public List<String> agentArns() {
        return this.agentArns == null ? List.of() : this.agentArns;
    }
    /**
     * The authentication mode used to determine identity of user.
     * 
    */
    public Optional<LocationHDFSAuthenticationType> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    /**
     * Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
     * 
    */
    public Optional<Integer> blockSize() {
        return Optional.ofNullable(this.blockSize);
    }
    /**
     * The unique identity, or principal, to which Kerberos can assign tickets.
     * 
    */
    public Optional<String> kerberosPrincipal() {
        return Optional.ofNullable(this.kerberosPrincipal);
    }
    /**
     * The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
     * 
    */
    public Optional<String> kmsKeyProviderUri() {
        return Optional.ofNullable(this.kmsKeyProviderUri);
    }
    /**
     * The Amazon Resource Name (ARN) of the HDFS location.
     * 
    */
    public Optional<String> locationArn() {
        return Optional.ofNullable(this.locationArn);
    }
    /**
     * The URL of the HDFS location that was described.
     * 
    */
    public Optional<String> locationUri() {
        return Optional.ofNullable(this.locationUri);
    }
    /**
     * An array of Name Node(s) of the HDFS location.
     * 
    */
    public List<LocationHDFSNameNode> nameNodes() {
        return this.nameNodes == null ? List.of() : this.nameNodes;
    }
    public Optional<LocationHDFSQopConfiguration> qopConfiguration() {
        return Optional.ofNullable(this.qopConfiguration);
    }
    /**
     * Number of copies of each block that exists inside the HDFS cluster.
     * 
    */
    public Optional<Integer> replicationFactor() {
        return Optional.ofNullable(this.replicationFactor);
    }
    /**
     * The user name that has read and write permissions on the specified HDFS cluster.
     * 
    */
    public Optional<String> simpleUser() {
        return Optional.ofNullable(this.simpleUser);
    }
    /**
     * An array of key-value pairs to apply to this resource.
     * 
    */
    public List<LocationHDFSTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocationHDFSResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> agentArns;
        private @Nullable LocationHDFSAuthenticationType authenticationType;
        private @Nullable Integer blockSize;
        private @Nullable String kerberosPrincipal;
        private @Nullable String kmsKeyProviderUri;
        private @Nullable String locationArn;
        private @Nullable String locationUri;
        private @Nullable List<LocationHDFSNameNode> nameNodes;
        private @Nullable LocationHDFSQopConfiguration qopConfiguration;
        private @Nullable Integer replicationFactor;
        private @Nullable String simpleUser;
        private @Nullable List<LocationHDFSTag> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLocationHDFSResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentArns = defaults.agentArns;
    	      this.authenticationType = defaults.authenticationType;
    	      this.blockSize = defaults.blockSize;
    	      this.kerberosPrincipal = defaults.kerberosPrincipal;
    	      this.kmsKeyProviderUri = defaults.kmsKeyProviderUri;
    	      this.locationArn = defaults.locationArn;
    	      this.locationUri = defaults.locationUri;
    	      this.nameNodes = defaults.nameNodes;
    	      this.qopConfiguration = defaults.qopConfiguration;
    	      this.replicationFactor = defaults.replicationFactor;
    	      this.simpleUser = defaults.simpleUser;
    	      this.tags = defaults.tags;
        }

        public Builder agentArns(@Nullable List<String> agentArns) {
            this.agentArns = agentArns;
            return this;
        }
        public Builder agentArns(String... agentArns) {
            return agentArns(List.of(agentArns));
        }
        public Builder authenticationType(@Nullable LocationHDFSAuthenticationType authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        public Builder blockSize(@Nullable Integer blockSize) {
            this.blockSize = blockSize;
            return this;
        }
        public Builder kerberosPrincipal(@Nullable String kerberosPrincipal) {
            this.kerberosPrincipal = kerberosPrincipal;
            return this;
        }
        public Builder kmsKeyProviderUri(@Nullable String kmsKeyProviderUri) {
            this.kmsKeyProviderUri = kmsKeyProviderUri;
            return this;
        }
        public Builder locationArn(@Nullable String locationArn) {
            this.locationArn = locationArn;
            return this;
        }
        public Builder locationUri(@Nullable String locationUri) {
            this.locationUri = locationUri;
            return this;
        }
        public Builder nameNodes(@Nullable List<LocationHDFSNameNode> nameNodes) {
            this.nameNodes = nameNodes;
            return this;
        }
        public Builder nameNodes(LocationHDFSNameNode... nameNodes) {
            return nameNodes(List.of(nameNodes));
        }
        public Builder qopConfiguration(@Nullable LocationHDFSQopConfiguration qopConfiguration) {
            this.qopConfiguration = qopConfiguration;
            return this;
        }
        public Builder replicationFactor(@Nullable Integer replicationFactor) {
            this.replicationFactor = replicationFactor;
            return this;
        }
        public Builder simpleUser(@Nullable String simpleUser) {
            this.simpleUser = simpleUser;
            return this;
        }
        public Builder tags(@Nullable List<LocationHDFSTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(LocationHDFSTag... tags) {
            return tags(List.of(tags));
        }        public GetLocationHDFSResult build() {
            return new GetLocationHDFSResult(agentArns, authenticationType, blockSize, kerberosPrincipal, kmsKeyProviderUri, locationArn, locationUri, nameNodes, qopConfiguration, replicationFactor, simpleUser, tags);
        }
    }
}
