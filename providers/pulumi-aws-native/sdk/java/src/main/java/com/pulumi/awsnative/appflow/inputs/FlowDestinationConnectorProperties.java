// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.appflow.inputs;

import com.pulumi.awsnative.appflow.inputs.FlowEventBridgeDestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowLookoutMetricsDestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowRedshiftDestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowS3DestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowSalesforceDestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowSnowflakeDestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowUpsolverDestinationProperties;
import com.pulumi.awsnative.appflow.inputs.FlowZendeskDestinationProperties;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Destination connector details
 * 
 */
public final class FlowDestinationConnectorProperties extends com.pulumi.resources.InvokeArgs {

    public static final FlowDestinationConnectorProperties Empty = new FlowDestinationConnectorProperties();

    @Import(name="eventBridge")
    private @Nullable FlowEventBridgeDestinationProperties eventBridge;

    public Optional<FlowEventBridgeDestinationProperties> eventBridge() {
        return Optional.ofNullable(this.eventBridge);
    }

    @Import(name="lookoutMetrics")
    private @Nullable FlowLookoutMetricsDestinationProperties lookoutMetrics;

    public Optional<FlowLookoutMetricsDestinationProperties> lookoutMetrics() {
        return Optional.ofNullable(this.lookoutMetrics);
    }

    @Import(name="redshift")
    private @Nullable FlowRedshiftDestinationProperties redshift;

    public Optional<FlowRedshiftDestinationProperties> redshift() {
        return Optional.ofNullable(this.redshift);
    }

    @Import(name="s3")
    private @Nullable FlowS3DestinationProperties s3;

    public Optional<FlowS3DestinationProperties> s3() {
        return Optional.ofNullable(this.s3);
    }

    @Import(name="salesforce")
    private @Nullable FlowSalesforceDestinationProperties salesforce;

    public Optional<FlowSalesforceDestinationProperties> salesforce() {
        return Optional.ofNullable(this.salesforce);
    }

    @Import(name="snowflake")
    private @Nullable FlowSnowflakeDestinationProperties snowflake;

    public Optional<FlowSnowflakeDestinationProperties> snowflake() {
        return Optional.ofNullable(this.snowflake);
    }

    @Import(name="upsolver")
    private @Nullable FlowUpsolverDestinationProperties upsolver;

    public Optional<FlowUpsolverDestinationProperties> upsolver() {
        return Optional.ofNullable(this.upsolver);
    }

    @Import(name="zendesk")
    private @Nullable FlowZendeskDestinationProperties zendesk;

    public Optional<FlowZendeskDestinationProperties> zendesk() {
        return Optional.ofNullable(this.zendesk);
    }

    private FlowDestinationConnectorProperties() {}

    private FlowDestinationConnectorProperties(FlowDestinationConnectorProperties $) {
        this.eventBridge = $.eventBridge;
        this.lookoutMetrics = $.lookoutMetrics;
        this.redshift = $.redshift;
        this.s3 = $.s3;
        this.salesforce = $.salesforce;
        this.snowflake = $.snowflake;
        this.upsolver = $.upsolver;
        this.zendesk = $.zendesk;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowDestinationConnectorProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowDestinationConnectorProperties $;

        public Builder() {
            $ = new FlowDestinationConnectorProperties();
        }

        public Builder(FlowDestinationConnectorProperties defaults) {
            $ = new FlowDestinationConnectorProperties(Objects.requireNonNull(defaults));
        }

        public Builder eventBridge(@Nullable FlowEventBridgeDestinationProperties eventBridge) {
            $.eventBridge = eventBridge;
            return this;
        }

        public Builder lookoutMetrics(@Nullable FlowLookoutMetricsDestinationProperties lookoutMetrics) {
            $.lookoutMetrics = lookoutMetrics;
            return this;
        }

        public Builder redshift(@Nullable FlowRedshiftDestinationProperties redshift) {
            $.redshift = redshift;
            return this;
        }

        public Builder s3(@Nullable FlowS3DestinationProperties s3) {
            $.s3 = s3;
            return this;
        }

        public Builder salesforce(@Nullable FlowSalesforceDestinationProperties salesforce) {
            $.salesforce = salesforce;
            return this;
        }

        public Builder snowflake(@Nullable FlowSnowflakeDestinationProperties snowflake) {
            $.snowflake = snowflake;
            return this;
        }

        public Builder upsolver(@Nullable FlowUpsolverDestinationProperties upsolver) {
            $.upsolver = upsolver;
            return this;
        }

        public Builder zendesk(@Nullable FlowZendeskDestinationProperties zendesk) {
            $.zendesk = zendesk;
            return this;
        }

        public FlowDestinationConnectorProperties build() {
            return $;
        }
    }

}
