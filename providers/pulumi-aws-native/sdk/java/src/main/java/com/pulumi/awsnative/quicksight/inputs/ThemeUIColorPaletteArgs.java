// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;The theme colors that apply to UI and to charts, excluding data colors. The colors
 *             description is a hexadecimal color code that consists of six alphanumerical characters,
 *             prefixed with &lt;code&gt;#&lt;/code&gt;, for example #37BFF5. For more information, see &lt;a href=&#34;https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html&#34;&gt;Using Themes in Amazon QuickSight&lt;/a&gt; in the &lt;i&gt;Amazon QuickSight User
 *                 Guide.&lt;/i&gt;
 *         &lt;/p&gt;
 * 
 */
public final class ThemeUIColorPaletteArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThemeUIColorPaletteArgs Empty = new ThemeUIColorPaletteArgs();

    /**
     * &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
     * 
     */
    @Import(name="accent")
    private @Nullable Output<String> accent;

    public Optional<Output<String>> accent() {
        return Optional.ofNullable(this.accent);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             accent color.&lt;/p&gt;
     * 
     */
    @Import(name="accentForeground")
    private @Nullable Output<String> accentForeground;

    public Optional<Output<String>> accentForeground() {
        return Optional.ofNullable(this.accentForeground);
    }

    /**
     * &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
     * 
     */
    @Import(name="danger")
    private @Nullable Output<String> danger;

    public Optional<Output<String>> danger() {
        return Optional.ofNullable(this.danger);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             error color.&lt;/p&gt;
     * 
     */
    @Import(name="dangerForeground")
    private @Nullable Output<String> dangerForeground;

    public Optional<Output<String>> dangerForeground() {
        return Optional.ofNullable(this.dangerForeground);
    }

    /**
     * &lt;p&gt;The color that applies to the names of fields that are identified as
     *             dimensions.&lt;/p&gt;
     * 
     */
    @Import(name="dimension")
    private @Nullable Output<String> dimension;

    public Optional<Output<String>> dimension() {
        return Optional.ofNullable(this.dimension);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             dimension color.&lt;/p&gt;
     * 
     */
    @Import(name="dimensionForeground")
    private @Nullable Output<String> dimensionForeground;

    public Optional<Output<String>> dimensionForeground() {
        return Optional.ofNullable(this.dimensionForeground);
    }

    /**
     * &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
     * 
     */
    @Import(name="measure")
    private @Nullable Output<String> measure;

    public Optional<Output<String>> measure() {
        return Optional.ofNullable(this.measure);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             measure color.&lt;/p&gt;
     * 
     */
    @Import(name="measureForeground")
    private @Nullable Output<String> measureForeground;

    public Optional<Output<String>> measureForeground() {
        return Optional.ofNullable(this.measureForeground);
    }

    /**
     * &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
     * 
     */
    @Import(name="primaryBackground")
    private @Nullable Output<String> primaryBackground;

    public Optional<Output<String>> primaryBackground() {
        return Optional.ofNullable(this.primaryBackground);
    }

    /**
     * &lt;p&gt;The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
     * 
     */
    @Import(name="primaryForeground")
    private @Nullable Output<String> primaryForeground;

    public Optional<Output<String>> primaryForeground() {
        return Optional.ofNullable(this.primaryForeground);
    }

    /**
     * &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
     * 
     */
    @Import(name="secondaryBackground")
    private @Nullable Output<String> secondaryBackground;

    public Optional<Output<String>> secondaryBackground() {
        return Optional.ofNullable(this.secondaryBackground);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.&lt;/p&gt;
     * 
     */
    @Import(name="secondaryForeground")
    private @Nullable Output<String> secondaryForeground;

    public Optional<Output<String>> secondaryForeground() {
        return Optional.ofNullable(this.secondaryForeground);
    }

    /**
     * &lt;p&gt;The color that applies to success messages, for example the check mark for a
     *             successful download.&lt;/p&gt;
     * 
     */
    @Import(name="success")
    private @Nullable Output<String> success;

    public Optional<Output<String>> success() {
        return Optional.ofNullable(this.success);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             success color.&lt;/p&gt;
     * 
     */
    @Import(name="successForeground")
    private @Nullable Output<String> successForeground;

    public Optional<Output<String>> successForeground() {
        return Optional.ofNullable(this.successForeground);
    }

    /**
     * &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
     * 
     */
    @Import(name="warning")
    private @Nullable Output<String> warning;

    public Optional<Output<String>> warning() {
        return Optional.ofNullable(this.warning);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             warning color.&lt;/p&gt;
     * 
     */
    @Import(name="warningForeground")
    private @Nullable Output<String> warningForeground;

    public Optional<Output<String>> warningForeground() {
        return Optional.ofNullable(this.warningForeground);
    }

    private ThemeUIColorPaletteArgs() {}

    private ThemeUIColorPaletteArgs(ThemeUIColorPaletteArgs $) {
        this.accent = $.accent;
        this.accentForeground = $.accentForeground;
        this.danger = $.danger;
        this.dangerForeground = $.dangerForeground;
        this.dimension = $.dimension;
        this.dimensionForeground = $.dimensionForeground;
        this.measure = $.measure;
        this.measureForeground = $.measureForeground;
        this.primaryBackground = $.primaryBackground;
        this.primaryForeground = $.primaryForeground;
        this.secondaryBackground = $.secondaryBackground;
        this.secondaryForeground = $.secondaryForeground;
        this.success = $.success;
        this.successForeground = $.successForeground;
        this.warning = $.warning;
        this.warningForeground = $.warningForeground;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeUIColorPaletteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeUIColorPaletteArgs $;

        public Builder() {
            $ = new ThemeUIColorPaletteArgs();
        }

        public Builder(ThemeUIColorPaletteArgs defaults) {
            $ = new ThemeUIColorPaletteArgs(Objects.requireNonNull(defaults));
        }

        public Builder accent(@Nullable Output<String> accent) {
            $.accent = accent;
            return this;
        }

        public Builder accent(String accent) {
            return accent(Output.of(accent));
        }

        public Builder accentForeground(@Nullable Output<String> accentForeground) {
            $.accentForeground = accentForeground;
            return this;
        }

        public Builder accentForeground(String accentForeground) {
            return accentForeground(Output.of(accentForeground));
        }

        public Builder danger(@Nullable Output<String> danger) {
            $.danger = danger;
            return this;
        }

        public Builder danger(String danger) {
            return danger(Output.of(danger));
        }

        public Builder dangerForeground(@Nullable Output<String> dangerForeground) {
            $.dangerForeground = dangerForeground;
            return this;
        }

        public Builder dangerForeground(String dangerForeground) {
            return dangerForeground(Output.of(dangerForeground));
        }

        public Builder dimension(@Nullable Output<String> dimension) {
            $.dimension = dimension;
            return this;
        }

        public Builder dimension(String dimension) {
            return dimension(Output.of(dimension));
        }

        public Builder dimensionForeground(@Nullable Output<String> dimensionForeground) {
            $.dimensionForeground = dimensionForeground;
            return this;
        }

        public Builder dimensionForeground(String dimensionForeground) {
            return dimensionForeground(Output.of(dimensionForeground));
        }

        public Builder measure(@Nullable Output<String> measure) {
            $.measure = measure;
            return this;
        }

        public Builder measure(String measure) {
            return measure(Output.of(measure));
        }

        public Builder measureForeground(@Nullable Output<String> measureForeground) {
            $.measureForeground = measureForeground;
            return this;
        }

        public Builder measureForeground(String measureForeground) {
            return measureForeground(Output.of(measureForeground));
        }

        public Builder primaryBackground(@Nullable Output<String> primaryBackground) {
            $.primaryBackground = primaryBackground;
            return this;
        }

        public Builder primaryBackground(String primaryBackground) {
            return primaryBackground(Output.of(primaryBackground));
        }

        public Builder primaryForeground(@Nullable Output<String> primaryForeground) {
            $.primaryForeground = primaryForeground;
            return this;
        }

        public Builder primaryForeground(String primaryForeground) {
            return primaryForeground(Output.of(primaryForeground));
        }

        public Builder secondaryBackground(@Nullable Output<String> secondaryBackground) {
            $.secondaryBackground = secondaryBackground;
            return this;
        }

        public Builder secondaryBackground(String secondaryBackground) {
            return secondaryBackground(Output.of(secondaryBackground));
        }

        public Builder secondaryForeground(@Nullable Output<String> secondaryForeground) {
            $.secondaryForeground = secondaryForeground;
            return this;
        }

        public Builder secondaryForeground(String secondaryForeground) {
            return secondaryForeground(Output.of(secondaryForeground));
        }

        public Builder success(@Nullable Output<String> success) {
            $.success = success;
            return this;
        }

        public Builder success(String success) {
            return success(Output.of(success));
        }

        public Builder successForeground(@Nullable Output<String> successForeground) {
            $.successForeground = successForeground;
            return this;
        }

        public Builder successForeground(String successForeground) {
            return successForeground(Output.of(successForeground));
        }

        public Builder warning(@Nullable Output<String> warning) {
            $.warning = warning;
            return this;
        }

        public Builder warning(String warning) {
            return warning(Output.of(warning));
        }

        public Builder warningForeground(@Nullable Output<String> warningForeground) {
            $.warningForeground = warningForeground;
            return this;
        }

        public Builder warningForeground(String warningForeground) {
            return warningForeground(Output.of(warningForeground));
        }

        public ThemeUIColorPaletteArgs build() {
            return $;
        }
    }

}
