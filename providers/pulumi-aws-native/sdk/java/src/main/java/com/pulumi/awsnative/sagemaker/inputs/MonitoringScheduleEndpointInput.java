// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.enums.MonitoringScheduleEndpointInputS3DataDistributionType;
import com.pulumi.awsnative.sagemaker.enums.MonitoringScheduleEndpointInputS3InputMode;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The endpoint for a monitoring job.
 * 
 */
public final class MonitoringScheduleEndpointInput extends com.pulumi.resources.InvokeArgs {

    public static final MonitoringScheduleEndpointInput Empty = new MonitoringScheduleEndpointInput();

    @Import(name="endpointName", required=true)
    private String endpointName;

    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     * 
     */
    @Import(name="localPath", required=true)
    private String localPath;

    public String localPath() {
        return this.localPath;
    }

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
     * 
     */
    @Import(name="s3DataDistributionType")
    private @Nullable MonitoringScheduleEndpointInputS3DataDistributionType s3DataDistributionType;

    public Optional<MonitoringScheduleEndpointInputS3DataDistributionType> s3DataDistributionType() {
        return Optional.ofNullable(this.s3DataDistributionType);
    }

    /**
     * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
     * 
     */
    @Import(name="s3InputMode")
    private @Nullable MonitoringScheduleEndpointInputS3InputMode s3InputMode;

    public Optional<MonitoringScheduleEndpointInputS3InputMode> s3InputMode() {
        return Optional.ofNullable(this.s3InputMode);
    }

    private MonitoringScheduleEndpointInput() {}

    private MonitoringScheduleEndpointInput(MonitoringScheduleEndpointInput $) {
        this.endpointName = $.endpointName;
        this.localPath = $.localPath;
        this.s3DataDistributionType = $.s3DataDistributionType;
        this.s3InputMode = $.s3InputMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitoringScheduleEndpointInput defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitoringScheduleEndpointInput $;

        public Builder() {
            $ = new MonitoringScheduleEndpointInput();
        }

        public Builder(MonitoringScheduleEndpointInput defaults) {
            $ = new MonitoringScheduleEndpointInput(Objects.requireNonNull(defaults));
        }

        public Builder endpointName(String endpointName) {
            $.endpointName = endpointName;
            return this;
        }

        public Builder localPath(String localPath) {
            $.localPath = localPath;
            return this;
        }

        public Builder s3DataDistributionType(@Nullable MonitoringScheduleEndpointInputS3DataDistributionType s3DataDistributionType) {
            $.s3DataDistributionType = s3DataDistributionType;
            return this;
        }

        public Builder s3InputMode(@Nullable MonitoringScheduleEndpointInputS3InputMode s3InputMode) {
            $.s3InputMode = s3InputMode;
            return this;
        }

        public MonitoringScheduleEndpointInput build() {
            $.endpointName = Objects.requireNonNull($.endpointName, "expected parameter 'endpointName' to be non-null");
            $.localPath = Objects.requireNonNull($.localPath, "expected parameter 'localPath' to be non-null");
            return $;
        }
    }

}
