// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ssmcontacts;

import com.pulumi.awsnative.ssmcontacts.enums.ContactType;
import com.pulumi.awsnative.ssmcontacts.inputs.ContactStageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactArgs Empty = new ContactArgs();

    /**
     * Alias of the contact. String value with 20 to 256 characters. Only alphabetical, numeric characters, dash, or underscore allowed.
     * 
     */
    @Import(name="alias", required=true)
      private final Output<String> alias;

    public Output<String> alias() {
        return this.alias;
    }

    /**
     * Name of the contact. String value with 3 to 256 characters. Only alphabetical, space, numeric characters, dash, or underscore allowed.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The stages that an escalation plan or engagement plan engages contacts and contact methods in.
     * 
     */
    @Import(name="plan", required=true)
      private final Output<List<ContactStageArgs>> plan;

    public Output<List<ContactStageArgs>> plan() {
        return this.plan;
    }

    /**
     * Contact type, which specify type of contact. Currently supported values: “PERSONAL”, “SHARED”, “OTHER“.
     * 
     */
    @Import(name="type", required=true)
      private final Output<ContactType> type;

    public Output<ContactType> type() {
        return this.type;
    }

    public ContactArgs(
        Output<String> alias,
        Output<String> displayName,
        Output<List<ContactStageArgs>> plan,
        Output<ContactType> type) {
        this.alias = Objects.requireNonNull(alias, "expected parameter 'alias' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.plan = Objects.requireNonNull(plan, "expected parameter 'plan' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ContactArgs() {
        this.alias = Codegen.empty();
        this.displayName = Codegen.empty();
        this.plan = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> alias;
        private Output<String> displayName;
        private Output<List<ContactStageArgs>> plan;
        private Output<ContactType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ContactArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.displayName = defaults.displayName;
    	      this.plan = defaults.plan;
    	      this.type = defaults.type;
        }

        public Builder alias(Output<String> alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }
        public Builder alias(String alias) {
            this.alias = Output.of(Objects.requireNonNull(alias));
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder plan(Output<List<ContactStageArgs>> plan) {
            this.plan = Objects.requireNonNull(plan);
            return this;
        }
        public Builder plan(List<ContactStageArgs> plan) {
            this.plan = Output.of(Objects.requireNonNull(plan));
            return this;
        }
        public Builder plan(ContactStageArgs... plan) {
            return plan(List.of(plan));
        }
        public Builder type(Output<ContactType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(ContactType type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ContactArgs build() {
            return new ContactArgs(alias, displayName, plan, type);
        }
    }
}
