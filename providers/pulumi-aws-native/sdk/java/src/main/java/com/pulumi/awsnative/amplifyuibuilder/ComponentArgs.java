// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.amplifyuibuilder;

import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentBindingPropertiesArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentChildArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentCollectionPropertiesArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentOverridesArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentPropertiesArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentTagsArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentVariantArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComponentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComponentArgs Empty = new ComponentArgs();

    @Import(name="bindingProperties")
    private @Nullable Output<ComponentBindingPropertiesArgs> bindingProperties;

    public Optional<Output<ComponentBindingPropertiesArgs>> bindingProperties() {
        return Optional.ofNullable(this.bindingProperties);
    }

    @Import(name="children")
    private @Nullable Output<List<ComponentChildArgs>> children;

    public Optional<Output<List<ComponentChildArgs>>> children() {
        return Optional.ofNullable(this.children);
    }

    @Import(name="collectionProperties")
    private @Nullable Output<ComponentCollectionPropertiesArgs> collectionProperties;

    public Optional<Output<ComponentCollectionPropertiesArgs>> collectionProperties() {
        return Optional.ofNullable(this.collectionProperties);
    }

    @Import(name="componentType")
    private @Nullable Output<String> componentType;

    public Optional<Output<String>> componentType() {
        return Optional.ofNullable(this.componentType);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="overrides")
    private @Nullable Output<ComponentOverridesArgs> overrides;

    public Optional<Output<ComponentOverridesArgs>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    @Import(name="properties")
    private @Nullable Output<ComponentPropertiesArgs> properties;

    public Optional<Output<ComponentPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="sourceId")
    private @Nullable Output<String> sourceId;

    public Optional<Output<String>> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    @Import(name="tags")
    private @Nullable Output<ComponentTagsArgs> tags;

    public Optional<Output<ComponentTagsArgs>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="variants")
    private @Nullable Output<List<ComponentVariantArgs>> variants;

    public Optional<Output<List<ComponentVariantArgs>>> variants() {
        return Optional.ofNullable(this.variants);
    }

    private ComponentArgs() {}

    private ComponentArgs(ComponentArgs $) {
        this.bindingProperties = $.bindingProperties;
        this.children = $.children;
        this.collectionProperties = $.collectionProperties;
        this.componentType = $.componentType;
        this.name = $.name;
        this.overrides = $.overrides;
        this.properties = $.properties;
        this.sourceId = $.sourceId;
        this.tags = $.tags;
        this.variants = $.variants;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComponentArgs $;

        public Builder() {
            $ = new ComponentArgs();
        }

        public Builder(ComponentArgs defaults) {
            $ = new ComponentArgs(Objects.requireNonNull(defaults));
        }

        public Builder bindingProperties(@Nullable Output<ComponentBindingPropertiesArgs> bindingProperties) {
            $.bindingProperties = bindingProperties;
            return this;
        }

        public Builder bindingProperties(ComponentBindingPropertiesArgs bindingProperties) {
            return bindingProperties(Output.of(bindingProperties));
        }

        public Builder children(@Nullable Output<List<ComponentChildArgs>> children) {
            $.children = children;
            return this;
        }

        public Builder children(List<ComponentChildArgs> children) {
            return children(Output.of(children));
        }

        public Builder children(ComponentChildArgs... children) {
            return children(List.of(children));
        }

        public Builder collectionProperties(@Nullable Output<ComponentCollectionPropertiesArgs> collectionProperties) {
            $.collectionProperties = collectionProperties;
            return this;
        }

        public Builder collectionProperties(ComponentCollectionPropertiesArgs collectionProperties) {
            return collectionProperties(Output.of(collectionProperties));
        }

        public Builder componentType(@Nullable Output<String> componentType) {
            $.componentType = componentType;
            return this;
        }

        public Builder componentType(String componentType) {
            return componentType(Output.of(componentType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder overrides(@Nullable Output<ComponentOverridesArgs> overrides) {
            $.overrides = overrides;
            return this;
        }

        public Builder overrides(ComponentOverridesArgs overrides) {
            return overrides(Output.of(overrides));
        }

        public Builder properties(@Nullable Output<ComponentPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(ComponentPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public Builder sourceId(@Nullable Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        public Builder tags(@Nullable Output<ComponentTagsArgs> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(ComponentTagsArgs tags) {
            return tags(Output.of(tags));
        }

        public Builder variants(@Nullable Output<List<ComponentVariantArgs>> variants) {
            $.variants = variants;
            return this;
        }

        public Builder variants(List<ComponentVariantArgs> variants) {
            return variants(Output.of(variants));
        }

        public Builder variants(ComponentVariantArgs... variants) {
            return variants(List.of(variants));
        }

        public ComponentArgs build() {
            return $;
        }
    }

}
