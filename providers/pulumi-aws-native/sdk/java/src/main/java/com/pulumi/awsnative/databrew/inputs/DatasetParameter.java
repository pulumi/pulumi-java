// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.enums.DatasetParameterType;
import com.pulumi.awsnative.databrew.inputs.DatasetDatetimeOptions;
import com.pulumi.awsnative.databrew.inputs.DatasetFilterExpression;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetParameter extends com.pulumi.resources.InvokeArgs {

    public static final DatasetParameter Empty = new DatasetParameter();

    /**
     * Add the value of this parameter as a column in a dataset.
     * 
     */
    @Import(name="createColumn")
    private @Nullable Boolean createColumn;

    /**
     * @return Add the value of this parameter as a column in a dataset.
     * 
     */
    public Optional<Boolean> createColumn() {
        return Optional.ofNullable(this.createColumn);
    }

    @Import(name="datetimeOptions")
    private @Nullable DatasetDatetimeOptions datetimeOptions;

    public Optional<DatasetDatetimeOptions> datetimeOptions() {
        return Optional.ofNullable(this.datetimeOptions);
    }

    @Import(name="filter")
    private @Nullable DatasetFilterExpression filter;

    public Optional<DatasetFilterExpression> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Parameter type
     * 
     */
    @Import(name="type", required=true)
    private DatasetParameterType type;

    /**
     * @return Parameter type
     * 
     */
    public DatasetParameterType type() {
        return this.type;
    }

    private DatasetParameter() {}

    private DatasetParameter(DatasetParameter $) {
        this.createColumn = $.createColumn;
        this.datetimeOptions = $.datetimeOptions;
        this.filter = $.filter;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetParameter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetParameter $;

        public Builder() {
            $ = new DatasetParameter();
        }

        public Builder(DatasetParameter defaults) {
            $ = new DatasetParameter(Objects.requireNonNull(defaults));
        }

        /**
         * @param createColumn Add the value of this parameter as a column in a dataset.
         * 
         * @return builder
         * 
         */
        public Builder createColumn(@Nullable Boolean createColumn) {
            $.createColumn = createColumn;
            return this;
        }

        public Builder datetimeOptions(@Nullable DatasetDatetimeOptions datetimeOptions) {
            $.datetimeOptions = datetimeOptions;
            return this;
        }

        public Builder filter(@Nullable DatasetFilterExpression filter) {
            $.filter = filter;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type Parameter type
         * 
         * @return builder
         * 
         */
        public Builder type(DatasetParameterType type) {
            $.type = type;
            return this;
        }

        public DatasetParameter build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
