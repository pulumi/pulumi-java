// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.enums.DatasetParameterType;
import com.pulumi.awsnative.databrew.inputs.DatasetDatetimeOptions;
import com.pulumi.awsnative.databrew.inputs.DatasetFilterExpression;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetParameter extends com.pulumi.resources.InvokeArgs {

    public static final DatasetParameter Empty = new DatasetParameter();

    /**
     * Add the value of this parameter as a column in a dataset.
     * 
     */
    @Import(name="createColumn")
      private final @Nullable Boolean createColumn;

    public Optional<Boolean> createColumn() {
        return this.createColumn == null ? Optional.empty() : Optional.ofNullable(this.createColumn);
    }

    @Import(name="datetimeOptions")
      private final @Nullable DatasetDatetimeOptions datetimeOptions;

    public Optional<DatasetDatetimeOptions> datetimeOptions() {
        return this.datetimeOptions == null ? Optional.empty() : Optional.ofNullable(this.datetimeOptions);
    }

    @Import(name="filter")
      private final @Nullable DatasetFilterExpression filter;

    public Optional<DatasetFilterExpression> filter() {
        return this.filter == null ? Optional.empty() : Optional.ofNullable(this.filter);
    }

    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * Parameter type
     * 
     */
    @Import(name="type", required=true)
      private final DatasetParameterType type;

    public DatasetParameterType type() {
        return this.type;
    }

    public DatasetParameter(
        @Nullable Boolean createColumn,
        @Nullable DatasetDatetimeOptions datetimeOptions,
        @Nullable DatasetFilterExpression filter,
        String name,
        DatasetParameterType type) {
        this.createColumn = createColumn;
        this.datetimeOptions = datetimeOptions;
        this.filter = filter;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DatasetParameter() {
        this.createColumn = null;
        this.datetimeOptions = null;
        this.filter = null;
        this.name = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetParameter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean createColumn;
        private @Nullable DatasetDatetimeOptions datetimeOptions;
        private @Nullable DatasetFilterExpression filter;
        private String name;
        private DatasetParameterType type;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createColumn = defaults.createColumn;
    	      this.datetimeOptions = defaults.datetimeOptions;
    	      this.filter = defaults.filter;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        public Builder createColumn(@Nullable Boolean createColumn) {
            this.createColumn = createColumn;
            return this;
        }
        public Builder datetimeOptions(@Nullable DatasetDatetimeOptions datetimeOptions) {
            this.datetimeOptions = datetimeOptions;
            return this;
        }
        public Builder filter(@Nullable DatasetFilterExpression filter) {
            this.filter = filter;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(DatasetParameterType type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public DatasetParameter build() {
            return new DatasetParameter(createColumn, datetimeOptions, filter, name, type);
        }
    }
}
