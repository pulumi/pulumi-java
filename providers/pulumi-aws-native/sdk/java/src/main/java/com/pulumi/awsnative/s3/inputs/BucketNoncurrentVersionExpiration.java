// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container for the expiration rule that describes when noncurrent objects are expired. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 expire noncurrent object versions at a specific period in the object&#39;s lifetime
 * 
 */
public final class BucketNoncurrentVersionExpiration extends com.pulumi.resources.InvokeArgs {

    public static final BucketNoncurrentVersionExpiration Empty = new BucketNoncurrentVersionExpiration();

    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    @Import(name="newerNoncurrentVersions")
    private @Nullable Integer newerNoncurrentVersions;

    public Optional<Integer> newerNoncurrentVersions() {
        return Optional.ofNullable(this.newerNoncurrentVersions);
    }

    /**
     * Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
     * 
     */
    @Import(name="noncurrentDays", required=true)
    private Integer noncurrentDays;

    public Integer noncurrentDays() {
        return this.noncurrentDays;
    }

    private BucketNoncurrentVersionExpiration() {}

    private BucketNoncurrentVersionExpiration(BucketNoncurrentVersionExpiration $) {
        this.newerNoncurrentVersions = $.newerNoncurrentVersions;
        this.noncurrentDays = $.noncurrentDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketNoncurrentVersionExpiration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketNoncurrentVersionExpiration $;

        public Builder() {
            $ = new BucketNoncurrentVersionExpiration();
        }

        public Builder(BucketNoncurrentVersionExpiration defaults) {
            $ = new BucketNoncurrentVersionExpiration(Objects.requireNonNull(defaults));
        }

        public Builder newerNoncurrentVersions(@Nullable Integer newerNoncurrentVersions) {
            $.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }

        public Builder noncurrentDays(Integer noncurrentDays) {
            $.noncurrentDays = noncurrentDays;
            return this;
        }

        public BucketNoncurrentVersionExpiration build() {
            $.noncurrentDays = Objects.requireNonNull($.noncurrentDays, "expected parameter 'noncurrentDays' to be non-null");
            return $;
        }
    }

}
