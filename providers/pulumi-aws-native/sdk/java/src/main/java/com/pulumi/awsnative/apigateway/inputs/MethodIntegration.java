// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.inputs;

import com.pulumi.awsnative.apigateway.enums.MethodIntegrationConnectionType;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationContentHandling;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationPassthroughBehavior;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationType;
import com.pulumi.awsnative.apigateway.inputs.MethodIntegrationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MethodIntegration extends com.pulumi.resources.InvokeArgs {

    public static final MethodIntegration Empty = new MethodIntegration();

    /**
     * A list of request parameters whose values API Gateway caches.
     * 
     */
    @Import(name="cacheKeyParameters")
    private @Nullable List<String> cacheKeyParameters;

    public Optional<List<String>> cacheKeyParameters() {
        return Optional.ofNullable(this.cacheKeyParameters);
    }

    /**
     * An API-specific tag group of related cached parameters.
     * 
     */
    @Import(name="cacheNamespace")
    private @Nullable String cacheNamespace;

    public Optional<String> cacheNamespace() {
        return Optional.ofNullable(this.cacheNamespace);
    }

    /**
     * The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    @Import(name="connectionId")
    private @Nullable String connectionId;

    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * The type of the network connection to the integration endpoint.
     * 
     */
    @Import(name="connectionType")
    private @Nullable MethodIntegrationConnectionType connectionType;

    public Optional<MethodIntegrationConnectionType> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * Specifies how to handle request payload content type conversions.
     * 
     */
    @Import(name="contentHandling")
    private @Nullable MethodIntegrationContentHandling contentHandling;

    public Optional<MethodIntegrationContentHandling> contentHandling() {
        return Optional.ofNullable(this.contentHandling);
    }

    /**
     * The credentials that are required for the integration.
     * 
     */
    @Import(name="credentials")
    private @Nullable String credentials;

    public Optional<String> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The integration&#39;s HTTP method type.
     * 
     */
    @Import(name="integrationHttpMethod")
    private @Nullable String integrationHttpMethod;

    public Optional<String> integrationHttpMethod() {
        return Optional.ofNullable(this.integrationHttpMethod);
    }

    /**
     * The response that API Gateway provides after a method&#39;s backend completes processing a request.
     * 
     */
    @Import(name="integrationResponses")
    private @Nullable List<MethodIntegrationResponse> integrationResponses;

    public Optional<List<MethodIntegrationResponse>> integrationResponses() {
        return Optional.ofNullable(this.integrationResponses);
    }

    /**
     * Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    @Import(name="passthroughBehavior")
    private @Nullable MethodIntegrationPassthroughBehavior passthroughBehavior;

    public Optional<MethodIntegrationPassthroughBehavior> passthroughBehavior() {
        return Optional.ofNullable(this.passthroughBehavior);
    }

    /**
     * The request parameters that API Gateway sends with the backend request.
     * 
     */
    @Import(name="requestParameters")
    private @Nullable Object requestParameters;

    public Optional<Object> requestParameters() {
        return Optional.ofNullable(this.requestParameters);
    }

    /**
     * A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    @Import(name="requestTemplates")
    private @Nullable Object requestTemplates;

    public Optional<Object> requestTemplates() {
        return Optional.ofNullable(this.requestTemplates);
    }

    /**
     * Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    @Import(name="timeoutInMillis")
    private @Nullable Integer timeoutInMillis;

    public Optional<Integer> timeoutInMillis() {
        return Optional.ofNullable(this.timeoutInMillis);
    }

    /**
     * The type of backend that your method is running.
     * 
     */
    @Import(name="type", required=true)
    private MethodIntegrationType type;

    public MethodIntegrationType type() {
        return this.type;
    }

    /**
     * The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    @Import(name="uri")
    private @Nullable String uri;

    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    private MethodIntegration() {}

    private MethodIntegration(MethodIntegration $) {
        this.cacheKeyParameters = $.cacheKeyParameters;
        this.cacheNamespace = $.cacheNamespace;
        this.connectionId = $.connectionId;
        this.connectionType = $.connectionType;
        this.contentHandling = $.contentHandling;
        this.credentials = $.credentials;
        this.integrationHttpMethod = $.integrationHttpMethod;
        this.integrationResponses = $.integrationResponses;
        this.passthroughBehavior = $.passthroughBehavior;
        this.requestParameters = $.requestParameters;
        this.requestTemplates = $.requestTemplates;
        this.timeoutInMillis = $.timeoutInMillis;
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MethodIntegration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MethodIntegration $;

        public Builder() {
            $ = new MethodIntegration();
        }

        public Builder(MethodIntegration defaults) {
            $ = new MethodIntegration(Objects.requireNonNull(defaults));
        }

        public Builder cacheKeyParameters(@Nullable List<String> cacheKeyParameters) {
            $.cacheKeyParameters = cacheKeyParameters;
            return this;
        }

        public Builder cacheKeyParameters(String... cacheKeyParameters) {
            return cacheKeyParameters(List.of(cacheKeyParameters));
        }

        public Builder cacheNamespace(@Nullable String cacheNamespace) {
            $.cacheNamespace = cacheNamespace;
            return this;
        }

        public Builder connectionId(@Nullable String connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        public Builder connectionType(@Nullable MethodIntegrationConnectionType connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder contentHandling(@Nullable MethodIntegrationContentHandling contentHandling) {
            $.contentHandling = contentHandling;
            return this;
        }

        public Builder credentials(@Nullable String credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder integrationHttpMethod(@Nullable String integrationHttpMethod) {
            $.integrationHttpMethod = integrationHttpMethod;
            return this;
        }

        public Builder integrationResponses(@Nullable List<MethodIntegrationResponse> integrationResponses) {
            $.integrationResponses = integrationResponses;
            return this;
        }

        public Builder integrationResponses(MethodIntegrationResponse... integrationResponses) {
            return integrationResponses(List.of(integrationResponses));
        }

        public Builder passthroughBehavior(@Nullable MethodIntegrationPassthroughBehavior passthroughBehavior) {
            $.passthroughBehavior = passthroughBehavior;
            return this;
        }

        public Builder requestParameters(@Nullable Object requestParameters) {
            $.requestParameters = requestParameters;
            return this;
        }

        public Builder requestTemplates(@Nullable Object requestTemplates) {
            $.requestTemplates = requestTemplates;
            return this;
        }

        public Builder timeoutInMillis(@Nullable Integer timeoutInMillis) {
            $.timeoutInMillis = timeoutInMillis;
            return this;
        }

        public Builder type(MethodIntegrationType type) {
            $.type = type;
            return this;
        }

        public Builder uri(@Nullable String uri) {
            $.uri = uri;
            return this;
        }

        public MethodIntegration build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
