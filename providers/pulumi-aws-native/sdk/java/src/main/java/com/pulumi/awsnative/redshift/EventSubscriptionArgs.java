// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.redshift;

import com.pulumi.awsnative.redshift.enums.EventSubscriptionEventCategoriesItem;
import com.pulumi.awsnative.redshift.enums.EventSubscriptionSeverity;
import com.pulumi.awsnative.redshift.enums.EventSubscriptionSourceType;
import com.pulumi.awsnative.redshift.inputs.EventSubscriptionTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionArgs Empty = new EventSubscriptionArgs();

    /**
     * A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies the Amazon Redshift event categories to be published by the event notification subscription.
     * 
     */
    @Import(name="eventCategories")
    private @Nullable Output<List<EventSubscriptionEventCategoriesItem>> eventCategories;

    public Optional<Output<List<EventSubscriptionEventCategoriesItem>>> eventCategories() {
        return Optional.ofNullable(this.eventCategories);
    }

    /**
     * Specifies the Amazon Redshift event severity to be published by the event notification subscription.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<EventSubscriptionSeverity> severity;

    public Optional<Output<EventSubscriptionSeverity>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
     * 
     */
    @Import(name="snsTopicArn")
    private @Nullable Output<String> snsTopicArn;

    public Optional<Output<String>> snsTopicArn() {
        return Optional.ofNullable(this.snsTopicArn);
    }

    /**
     * A list of one or more identifiers of Amazon Redshift source objects.
     * 
     */
    @Import(name="sourceIds")
    private @Nullable Output<List<String>> sourceIds;

    public Optional<Output<List<String>>> sourceIds() {
        return Optional.ofNullable(this.sourceIds);
    }

    /**
     * The type of source that will be generating the events.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<EventSubscriptionSourceType> sourceType;

    public Optional<Output<EventSubscriptionSourceType>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * The name of the Amazon Redshift event notification subscription
     * 
     */
    @Import(name="subscriptionName", required=true)
    private Output<String> subscriptionName;

    public Output<String> subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<EventSubscriptionTagArgs>> tags;

    public Optional<Output<List<EventSubscriptionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EventSubscriptionArgs() {}

    private EventSubscriptionArgs(EventSubscriptionArgs $) {
        this.enabled = $.enabled;
        this.eventCategories = $.eventCategories;
        this.severity = $.severity;
        this.snsTopicArn = $.snsTopicArn;
        this.sourceIds = $.sourceIds;
        this.sourceType = $.sourceType;
        this.subscriptionName = $.subscriptionName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSubscriptionArgs $;

        public Builder() {
            $ = new EventSubscriptionArgs();
        }

        public Builder(EventSubscriptionArgs defaults) {
            $ = new EventSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder eventCategories(@Nullable Output<List<EventSubscriptionEventCategoriesItem>> eventCategories) {
            $.eventCategories = eventCategories;
            return this;
        }

        public Builder eventCategories(List<EventSubscriptionEventCategoriesItem> eventCategories) {
            return eventCategories(Output.of(eventCategories));
        }

        public Builder eventCategories(EventSubscriptionEventCategoriesItem... eventCategories) {
            return eventCategories(List.of(eventCategories));
        }

        public Builder severity(@Nullable Output<EventSubscriptionSeverity> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(EventSubscriptionSeverity severity) {
            return severity(Output.of(severity));
        }

        public Builder snsTopicArn(@Nullable Output<String> snsTopicArn) {
            $.snsTopicArn = snsTopicArn;
            return this;
        }

        public Builder snsTopicArn(String snsTopicArn) {
            return snsTopicArn(Output.of(snsTopicArn));
        }

        public Builder sourceIds(@Nullable Output<List<String>> sourceIds) {
            $.sourceIds = sourceIds;
            return this;
        }

        public Builder sourceIds(List<String> sourceIds) {
            return sourceIds(Output.of(sourceIds));
        }

        public Builder sourceIds(String... sourceIds) {
            return sourceIds(List.of(sourceIds));
        }

        public Builder sourceType(@Nullable Output<EventSubscriptionSourceType> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(EventSubscriptionSourceType sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public Builder subscriptionName(Output<String> subscriptionName) {
            $.subscriptionName = subscriptionName;
            return this;
        }

        public Builder subscriptionName(String subscriptionName) {
            return subscriptionName(Output.of(subscriptionName));
        }

        public Builder tags(@Nullable Output<List<EventSubscriptionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<EventSubscriptionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(EventSubscriptionTagArgs... tags) {
            return tags(List.of(tags));
        }

        public EventSubscriptionArgs build() {
            $.subscriptionName = Objects.requireNonNull($.subscriptionName, "expected parameter 'subscriptionName' to be non-null");
            return $;
        }
    }

}
