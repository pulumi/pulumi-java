// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.awsnative.lightsail.inputs.DatabaseRelationalDatabaseParameterArgs;
import com.pulumi.awsnative.lightsail.inputs.DatabaseTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> availabilityZone() {
        return this.availabilityZone == null ? Codegen.empty() : this.availabilityZone;
    }

    /**
     * When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    @Import(name="backupRetention")
      private final @Nullable Output<Boolean> backupRetention;

    public Output<Boolean> backupRetention() {
        return this.backupRetention == null ? Codegen.empty() : this.backupRetention;
    }

    /**
     * Indicates the certificate that needs to be associated with the database.
     * 
     */
    @Import(name="caCertificateIdentifier")
      private final @Nullable Output<String> caCertificateIdentifier;

    public Output<String> caCertificateIdentifier() {
        return this.caCertificateIdentifier == null ? Codegen.empty() : this.caCertificateIdentifier;
    }

    /**
     * The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn&#39;t specified, no database is created in the database resource. For PostgreSQL, if this parameter isn&#39;t specified, a database named postgres is created in the database resource.
     * 
     */
    @Import(name="masterDatabaseName", required=true)
      private final Output<String> masterDatabaseName;

    public Output<String> masterDatabaseName() {
        return this.masterDatabaseName;
    }

    /**
     * The password for the master user. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;@&#34;. It cannot contain spaces.
     * 
     */
    @Import(name="masterUserPassword")
      private final @Nullable Output<String> masterUserPassword;

    public Output<String> masterUserPassword() {
        return this.masterUserPassword == null ? Codegen.empty() : this.masterUserPassword;
    }

    /**
     * The name for the master user.
     * 
     */
    @Import(name="masterUsername", required=true)
      private final Output<String> masterUsername;

    public Output<String> masterUsername() {
        return this.masterUsername;
    }

    /**
     * The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    @Import(name="preferredBackupWindow")
      private final @Nullable Output<String> preferredBackupWindow;

    public Output<String> preferredBackupWindow() {
        return this.preferredBackupWindow == null ? Codegen.empty() : this.preferredBackupWindow;
    }

    /**
     * The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    @Import(name="preferredMaintenanceWindow")
      private final @Nullable Output<String> preferredMaintenanceWindow;

    public Output<String> preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Codegen.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    @Import(name="publiclyAccessible")
      private final @Nullable Output<Boolean> publiclyAccessible;

    public Output<Boolean> publiclyAccessible() {
        return this.publiclyAccessible == null ? Codegen.empty() : this.publiclyAccessible;
    }

    /**
     * The blueprint ID for your new database. A blueprint describes the major engine version of a database.
     * 
     */
    @Import(name="relationalDatabaseBlueprintId", required=true)
      private final Output<String> relationalDatabaseBlueprintId;

    public Output<String> relationalDatabaseBlueprintId() {
        return this.relationalDatabaseBlueprintId;
    }

    /**
     * The bundle ID for your new database. A bundle describes the performance specifications for your database.
     * 
     */
    @Import(name="relationalDatabaseBundleId", required=true)
      private final Output<String> relationalDatabaseBundleId;

    public Output<String> relationalDatabaseBundleId() {
        return this.relationalDatabaseBundleId;
    }

    /**
     * The name to use for your new Lightsail database resource.
     * 
     */
    @Import(name="relationalDatabaseName", required=true)
      private final Output<String> relationalDatabaseName;

    public Output<String> relationalDatabaseName() {
        return this.relationalDatabaseName;
    }

    /**
     * Update one or more parameters of the relational database.
     * 
     */
    @Import(name="relationalDatabaseParameters")
      private final @Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters;

    public Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters() {
        return this.relationalDatabaseParameters == null ? Codegen.empty() : this.relationalDatabaseParameters;
    }

    /**
     * When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
     * 
     */
    @Import(name="rotateMasterUserPassword")
      private final @Nullable Output<Boolean> rotateMasterUserPassword;

    public Output<Boolean> rotateMasterUserPassword() {
        return this.rotateMasterUserPassword == null ? Codegen.empty() : this.rotateMasterUserPassword;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<DatabaseTagArgs>> tags;

    public Output<List<DatabaseTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public DatabaseArgs(
        @Nullable Output<String> availabilityZone,
        @Nullable Output<Boolean> backupRetention,
        @Nullable Output<String> caCertificateIdentifier,
        Output<String> masterDatabaseName,
        @Nullable Output<String> masterUserPassword,
        Output<String> masterUsername,
        @Nullable Output<String> preferredBackupWindow,
        @Nullable Output<String> preferredMaintenanceWindow,
        @Nullable Output<Boolean> publiclyAccessible,
        Output<String> relationalDatabaseBlueprintId,
        Output<String> relationalDatabaseBundleId,
        Output<String> relationalDatabaseName,
        @Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters,
        @Nullable Output<Boolean> rotateMasterUserPassword,
        @Nullable Output<List<DatabaseTagArgs>> tags) {
        this.availabilityZone = availabilityZone;
        this.backupRetention = backupRetention;
        this.caCertificateIdentifier = caCertificateIdentifier;
        this.masterDatabaseName = Objects.requireNonNull(masterDatabaseName, "expected parameter 'masterDatabaseName' to be non-null");
        this.masterUserPassword = masterUserPassword;
        this.masterUsername = Objects.requireNonNull(masterUsername, "expected parameter 'masterUsername' to be non-null");
        this.preferredBackupWindow = preferredBackupWindow;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.publiclyAccessible = publiclyAccessible;
        this.relationalDatabaseBlueprintId = Objects.requireNonNull(relationalDatabaseBlueprintId, "expected parameter 'relationalDatabaseBlueprintId' to be non-null");
        this.relationalDatabaseBundleId = Objects.requireNonNull(relationalDatabaseBundleId, "expected parameter 'relationalDatabaseBundleId' to be non-null");
        this.relationalDatabaseName = Objects.requireNonNull(relationalDatabaseName, "expected parameter 'relationalDatabaseName' to be non-null");
        this.relationalDatabaseParameters = relationalDatabaseParameters;
        this.rotateMasterUserPassword = rotateMasterUserPassword;
        this.tags = tags;
    }

    private DatabaseArgs() {
        this.availabilityZone = Codegen.empty();
        this.backupRetention = Codegen.empty();
        this.caCertificateIdentifier = Codegen.empty();
        this.masterDatabaseName = Codegen.empty();
        this.masterUserPassword = Codegen.empty();
        this.masterUsername = Codegen.empty();
        this.preferredBackupWindow = Codegen.empty();
        this.preferredMaintenanceWindow = Codegen.empty();
        this.publiclyAccessible = Codegen.empty();
        this.relationalDatabaseBlueprintId = Codegen.empty();
        this.relationalDatabaseBundleId = Codegen.empty();
        this.relationalDatabaseName = Codegen.empty();
        this.relationalDatabaseParameters = Codegen.empty();
        this.rotateMasterUserPassword = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<Boolean> backupRetention;
        private @Nullable Output<String> caCertificateIdentifier;
        private Output<String> masterDatabaseName;
        private @Nullable Output<String> masterUserPassword;
        private Output<String> masterUsername;
        private @Nullable Output<String> preferredBackupWindow;
        private @Nullable Output<String> preferredMaintenanceWindow;
        private @Nullable Output<Boolean> publiclyAccessible;
        private Output<String> relationalDatabaseBlueprintId;
        private Output<String> relationalDatabaseBundleId;
        private Output<String> relationalDatabaseName;
        private @Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters;
        private @Nullable Output<Boolean> rotateMasterUserPassword;
        private @Nullable Output<List<DatabaseTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetention = defaults.backupRetention;
    	      this.caCertificateIdentifier = defaults.caCertificateIdentifier;
    	      this.masterDatabaseName = defaults.masterDatabaseName;
    	      this.masterUserPassword = defaults.masterUserPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.relationalDatabaseBlueprintId = defaults.relationalDatabaseBlueprintId;
    	      this.relationalDatabaseBundleId = defaults.relationalDatabaseBundleId;
    	      this.relationalDatabaseName = defaults.relationalDatabaseName;
    	      this.relationalDatabaseParameters = defaults.relationalDatabaseParameters;
    	      this.rotateMasterUserPassword = defaults.rotateMasterUserPassword;
    	      this.tags = defaults.tags;
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Codegen.ofNullable(availabilityZone);
            return this;
        }
        public Builder backupRetention(@Nullable Output<Boolean> backupRetention) {
            this.backupRetention = backupRetention;
            return this;
        }
        public Builder backupRetention(@Nullable Boolean backupRetention) {
            this.backupRetention = Codegen.ofNullable(backupRetention);
            return this;
        }
        public Builder caCertificateIdentifier(@Nullable Output<String> caCertificateIdentifier) {
            this.caCertificateIdentifier = caCertificateIdentifier;
            return this;
        }
        public Builder caCertificateIdentifier(@Nullable String caCertificateIdentifier) {
            this.caCertificateIdentifier = Codegen.ofNullable(caCertificateIdentifier);
            return this;
        }
        public Builder masterDatabaseName(Output<String> masterDatabaseName) {
            this.masterDatabaseName = Objects.requireNonNull(masterDatabaseName);
            return this;
        }
        public Builder masterDatabaseName(String masterDatabaseName) {
            this.masterDatabaseName = Output.of(Objects.requireNonNull(masterDatabaseName));
            return this;
        }
        public Builder masterUserPassword(@Nullable Output<String> masterUserPassword) {
            this.masterUserPassword = masterUserPassword;
            return this;
        }
        public Builder masterUserPassword(@Nullable String masterUserPassword) {
            this.masterUserPassword = Codegen.ofNullable(masterUserPassword);
            return this;
        }
        public Builder masterUsername(Output<String> masterUsername) {
            this.masterUsername = Objects.requireNonNull(masterUsername);
            return this;
        }
        public Builder masterUsername(String masterUsername) {
            this.masterUsername = Output.of(Objects.requireNonNull(masterUsername));
            return this;
        }
        public Builder preferredBackupWindow(@Nullable Output<String> preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }
        public Builder preferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = Codegen.ofNullable(preferredBackupWindow);
            return this;
        }
        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Codegen.ofNullable(preferredMaintenanceWindow);
            return this;
        }
        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Codegen.ofNullable(publiclyAccessible);
            return this;
        }
        public Builder relationalDatabaseBlueprintId(Output<String> relationalDatabaseBlueprintId) {
            this.relationalDatabaseBlueprintId = Objects.requireNonNull(relationalDatabaseBlueprintId);
            return this;
        }
        public Builder relationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
            this.relationalDatabaseBlueprintId = Output.of(Objects.requireNonNull(relationalDatabaseBlueprintId));
            return this;
        }
        public Builder relationalDatabaseBundleId(Output<String> relationalDatabaseBundleId) {
            this.relationalDatabaseBundleId = Objects.requireNonNull(relationalDatabaseBundleId);
            return this;
        }
        public Builder relationalDatabaseBundleId(String relationalDatabaseBundleId) {
            this.relationalDatabaseBundleId = Output.of(Objects.requireNonNull(relationalDatabaseBundleId));
            return this;
        }
        public Builder relationalDatabaseName(Output<String> relationalDatabaseName) {
            this.relationalDatabaseName = Objects.requireNonNull(relationalDatabaseName);
            return this;
        }
        public Builder relationalDatabaseName(String relationalDatabaseName) {
            this.relationalDatabaseName = Output.of(Objects.requireNonNull(relationalDatabaseName));
            return this;
        }
        public Builder relationalDatabaseParameters(@Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters) {
            this.relationalDatabaseParameters = relationalDatabaseParameters;
            return this;
        }
        public Builder relationalDatabaseParameters(@Nullable List<DatabaseRelationalDatabaseParameterArgs> relationalDatabaseParameters) {
            this.relationalDatabaseParameters = Codegen.ofNullable(relationalDatabaseParameters);
            return this;
        }
        public Builder relationalDatabaseParameters(DatabaseRelationalDatabaseParameterArgs... relationalDatabaseParameters) {
            return relationalDatabaseParameters(List.of(relationalDatabaseParameters));
        }
        public Builder rotateMasterUserPassword(@Nullable Output<Boolean> rotateMasterUserPassword) {
            this.rotateMasterUserPassword = rotateMasterUserPassword;
            return this;
        }
        public Builder rotateMasterUserPassword(@Nullable Boolean rotateMasterUserPassword) {
            this.rotateMasterUserPassword = Codegen.ofNullable(rotateMasterUserPassword);
            return this;
        }
        public Builder tags(@Nullable Output<List<DatabaseTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<DatabaseTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(DatabaseTagArgs... tags) {
            return tags(List.of(tags));
        }        public DatabaseArgs build() {
            return new DatabaseArgs(availabilityZone, backupRetention, caCertificateIdentifier, masterDatabaseName, masterUserPassword, masterUsername, preferredBackupWindow, preferredMaintenanceWindow, publiclyAccessible, relationalDatabaseBlueprintId, relationalDatabaseBundleId, relationalDatabaseName, relationalDatabaseParameters, rotateMasterUserPassword, tags);
        }
    }
}
