// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect.inputs;

import com.pulumi.awsnative.mediaconnect.enums.FlowSourceProtocol;
import com.pulumi.awsnative.mediaconnect.inputs.FlowEncryption;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The settings for the source of the flow.
 * 
 */
public final class FlowSource extends com.pulumi.resources.InvokeArgs {

    public static final FlowSource Empty = new FlowSource();

    /**
     * The type of decryption that is used on the content ingested from this source.
     * 
     */
    @Import(name="decryption")
    private @Nullable FlowEncryption decryption;

    public Optional<FlowEncryption> decryption() {
        return Optional.ofNullable(this.decryption);
    }

    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator&#39;s flow.
     * 
     */
    @Import(name="entitlementArn")
    private @Nullable String entitlementArn;

    public Optional<String> entitlementArn() {
        return Optional.ofNullable(this.entitlementArn);
    }

    /**
     * The IP address that the flow will be listening on for incoming content.
     * 
     */
    @Import(name="ingestIp")
    private @Nullable String ingestIp;

    public Optional<String> ingestIp() {
        return Optional.ofNullable(this.ingestIp);
    }

    /**
     * The port that the flow will be listening on for incoming content.
     * 
     */
    @Import(name="ingestPort")
    private @Nullable Integer ingestPort;

    public Optional<Integer> ingestPort() {
        return Optional.ofNullable(this.ingestPort);
    }

    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    @Import(name="maxBitrate")
    private @Nullable Integer maxBitrate;

    public Optional<Integer> maxBitrate() {
        return Optional.ofNullable(this.maxBitrate);
    }

    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    @Import(name="maxLatency")
    private @Nullable Integer maxLatency;

    public Optional<Integer> maxLatency() {
        return Optional.ofNullable(this.maxLatency);
    }

    /**
     * The minimum latency in milliseconds.
     * 
     */
    @Import(name="minLatency")
    private @Nullable Integer minLatency;

    public Optional<Integer> minLatency() {
        return Optional.ofNullable(this.minLatency);
    }

    /**
     * The name of the source.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The protocol that is used by the source or output.
     * 
     */
    @Import(name="protocol")
    private @Nullable FlowSourceProtocol protocol;

    public Optional<FlowSourceProtocol> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The ARN of the source.
     * 
     */
    @Import(name="sourceArn")
    private @Nullable String sourceArn;

    public Optional<String> sourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }

    /**
     * The port that the flow will be listening on for incoming content.(ReadOnly)
     * 
     */
    @Import(name="sourceIngestPort")
    private @Nullable String sourceIngestPort;

    public Optional<String> sourceIngestPort() {
        return Optional.ofNullable(this.sourceIngestPort);
    }

    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    @Import(name="streamId")
    private @Nullable String streamId;

    public Optional<String> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    /**
     * The name of the VPC Interface this Source is configured with.
     * 
     */
    @Import(name="vpcInterfaceName")
    private @Nullable String vpcInterfaceName;

    public Optional<String> vpcInterfaceName() {
        return Optional.ofNullable(this.vpcInterfaceName);
    }

    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    @Import(name="whitelistCidr")
    private @Nullable String whitelistCidr;

    public Optional<String> whitelistCidr() {
        return Optional.ofNullable(this.whitelistCidr);
    }

    private FlowSource() {}

    private FlowSource(FlowSource $) {
        this.decryption = $.decryption;
        this.description = $.description;
        this.entitlementArn = $.entitlementArn;
        this.ingestIp = $.ingestIp;
        this.ingestPort = $.ingestPort;
        this.maxBitrate = $.maxBitrate;
        this.maxLatency = $.maxLatency;
        this.minLatency = $.minLatency;
        this.name = $.name;
        this.protocol = $.protocol;
        this.sourceArn = $.sourceArn;
        this.sourceIngestPort = $.sourceIngestPort;
        this.streamId = $.streamId;
        this.vpcInterfaceName = $.vpcInterfaceName;
        this.whitelistCidr = $.whitelistCidr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowSource $;

        public Builder() {
            $ = new FlowSource();
        }

        public Builder(FlowSource defaults) {
            $ = new FlowSource(Objects.requireNonNull(defaults));
        }

        public Builder decryption(@Nullable FlowEncryption decryption) {
            $.decryption = decryption;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder entitlementArn(@Nullable String entitlementArn) {
            $.entitlementArn = entitlementArn;
            return this;
        }

        public Builder ingestIp(@Nullable String ingestIp) {
            $.ingestIp = ingestIp;
            return this;
        }

        public Builder ingestPort(@Nullable Integer ingestPort) {
            $.ingestPort = ingestPort;
            return this;
        }

        public Builder maxBitrate(@Nullable Integer maxBitrate) {
            $.maxBitrate = maxBitrate;
            return this;
        }

        public Builder maxLatency(@Nullable Integer maxLatency) {
            $.maxLatency = maxLatency;
            return this;
        }

        public Builder minLatency(@Nullable Integer minLatency) {
            $.minLatency = minLatency;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder protocol(@Nullable FlowSourceProtocol protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder sourceArn(@Nullable String sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        public Builder sourceIngestPort(@Nullable String sourceIngestPort) {
            $.sourceIngestPort = sourceIngestPort;
            return this;
        }

        public Builder streamId(@Nullable String streamId) {
            $.streamId = streamId;
            return this;
        }

        public Builder vpcInterfaceName(@Nullable String vpcInterfaceName) {
            $.vpcInterfaceName = vpcInterfaceName;
            return this;
        }

        public Builder whitelistCidr(@Nullable String whitelistCidr) {
            $.whitelistCidr = whitelistCidr;
            return this;
        }

        public FlowSource build() {
            return $;
        }
    }

}
