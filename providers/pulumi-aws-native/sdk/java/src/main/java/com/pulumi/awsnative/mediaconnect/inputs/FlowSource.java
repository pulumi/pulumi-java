// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect.inputs;

import com.pulumi.awsnative.mediaconnect.enums.FlowSourceProtocol;
import com.pulumi.awsnative.mediaconnect.inputs.FlowEncryption;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The settings for the source of the flow.
 * 
 */
public final class FlowSource extends com.pulumi.resources.InvokeArgs {

    public static final FlowSource Empty = new FlowSource();

    /**
     * The type of decryption that is used on the content ingested from this source.
     * 
     */
    @Import(name="decryption")
      private final @Nullable FlowEncryption decryption;

    public Optional<FlowEncryption> decryption() {
        return this.decryption == null ? Optional.empty() : Optional.ofNullable(this.decryption);
    }

    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator&#39;s flow.
     * 
     */
    @Import(name="entitlementArn")
      private final @Nullable String entitlementArn;

    public Optional<String> entitlementArn() {
        return this.entitlementArn == null ? Optional.empty() : Optional.ofNullable(this.entitlementArn);
    }

    /**
     * The IP address that the flow will be listening on for incoming content.
     * 
     */
    @Import(name="ingestIp")
      private final @Nullable String ingestIp;

    public Optional<String> ingestIp() {
        return this.ingestIp == null ? Optional.empty() : Optional.ofNullable(this.ingestIp);
    }

    /**
     * The port that the flow will be listening on for incoming content.
     * 
     */
    @Import(name="ingestPort")
      private final @Nullable Integer ingestPort;

    public Optional<Integer> ingestPort() {
        return this.ingestPort == null ? Optional.empty() : Optional.ofNullable(this.ingestPort);
    }

    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    @Import(name="maxBitrate")
      private final @Nullable Integer maxBitrate;

    public Optional<Integer> maxBitrate() {
        return this.maxBitrate == null ? Optional.empty() : Optional.ofNullable(this.maxBitrate);
    }

    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    @Import(name="maxLatency")
      private final @Nullable Integer maxLatency;

    public Optional<Integer> maxLatency() {
        return this.maxLatency == null ? Optional.empty() : Optional.ofNullable(this.maxLatency);
    }

    /**
     * The minimum latency in milliseconds.
     * 
     */
    @Import(name="minLatency")
      private final @Nullable Integer minLatency;

    public Optional<Integer> minLatency() {
        return this.minLatency == null ? Optional.empty() : Optional.ofNullable(this.minLatency);
    }

    /**
     * The name of the source.
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> name() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * The protocol that is used by the source or output.
     * 
     */
    @Import(name="protocol")
      private final @Nullable FlowSourceProtocol protocol;

    public Optional<FlowSourceProtocol> protocol() {
        return this.protocol == null ? Optional.empty() : Optional.ofNullable(this.protocol);
    }

    /**
     * The ARN of the source.
     * 
     */
    @Import(name="sourceArn")
      private final @Nullable String sourceArn;

    public Optional<String> sourceArn() {
        return this.sourceArn == null ? Optional.empty() : Optional.ofNullable(this.sourceArn);
    }

    /**
     * The port that the flow will be listening on for incoming content.(ReadOnly)
     * 
     */
    @Import(name="sourceIngestPort")
      private final @Nullable String sourceIngestPort;

    public Optional<String> sourceIngestPort() {
        return this.sourceIngestPort == null ? Optional.empty() : Optional.ofNullable(this.sourceIngestPort);
    }

    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    @Import(name="streamId")
      private final @Nullable String streamId;

    public Optional<String> streamId() {
        return this.streamId == null ? Optional.empty() : Optional.ofNullable(this.streamId);
    }

    /**
     * The name of the VPC Interface this Source is configured with.
     * 
     */
    @Import(name="vpcInterfaceName")
      private final @Nullable String vpcInterfaceName;

    public Optional<String> vpcInterfaceName() {
        return this.vpcInterfaceName == null ? Optional.empty() : Optional.ofNullable(this.vpcInterfaceName);
    }

    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    @Import(name="whitelistCidr")
      private final @Nullable String whitelistCidr;

    public Optional<String> whitelistCidr() {
        return this.whitelistCidr == null ? Optional.empty() : Optional.ofNullable(this.whitelistCidr);
    }

    public FlowSource(
        @Nullable FlowEncryption decryption,
        @Nullable String description,
        @Nullable String entitlementArn,
        @Nullable String ingestIp,
        @Nullable Integer ingestPort,
        @Nullable Integer maxBitrate,
        @Nullable Integer maxLatency,
        @Nullable Integer minLatency,
        @Nullable String name,
        @Nullable FlowSourceProtocol protocol,
        @Nullable String sourceArn,
        @Nullable String sourceIngestPort,
        @Nullable String streamId,
        @Nullable String vpcInterfaceName,
        @Nullable String whitelistCidr) {
        this.decryption = decryption;
        this.description = description;
        this.entitlementArn = entitlementArn;
        this.ingestIp = ingestIp;
        this.ingestPort = ingestPort;
        this.maxBitrate = maxBitrate;
        this.maxLatency = maxLatency;
        this.minLatency = minLatency;
        this.name = name;
        this.protocol = protocol;
        this.sourceArn = sourceArn;
        this.sourceIngestPort = sourceIngestPort;
        this.streamId = streamId;
        this.vpcInterfaceName = vpcInterfaceName;
        this.whitelistCidr = whitelistCidr;
    }

    private FlowSource() {
        this.decryption = null;
        this.description = null;
        this.entitlementArn = null;
        this.ingestIp = null;
        this.ingestPort = null;
        this.maxBitrate = null;
        this.maxLatency = null;
        this.minLatency = null;
        this.name = null;
        this.protocol = null;
        this.sourceArn = null;
        this.sourceIngestPort = null;
        this.streamId = null;
        this.vpcInterfaceName = null;
        this.whitelistCidr = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable FlowEncryption decryption;
        private @Nullable String description;
        private @Nullable String entitlementArn;
        private @Nullable String ingestIp;
        private @Nullable Integer ingestPort;
        private @Nullable Integer maxBitrate;
        private @Nullable Integer maxLatency;
        private @Nullable Integer minLatency;
        private @Nullable String name;
        private @Nullable FlowSourceProtocol protocol;
        private @Nullable String sourceArn;
        private @Nullable String sourceIngestPort;
        private @Nullable String streamId;
        private @Nullable String vpcInterfaceName;
        private @Nullable String whitelistCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decryption = defaults.decryption;
    	      this.description = defaults.description;
    	      this.entitlementArn = defaults.entitlementArn;
    	      this.ingestIp = defaults.ingestIp;
    	      this.ingestPort = defaults.ingestPort;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.maxLatency = defaults.maxLatency;
    	      this.minLatency = defaults.minLatency;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.sourceArn = defaults.sourceArn;
    	      this.sourceIngestPort = defaults.sourceIngestPort;
    	      this.streamId = defaults.streamId;
    	      this.vpcInterfaceName = defaults.vpcInterfaceName;
    	      this.whitelistCidr = defaults.whitelistCidr;
        }

        public Builder decryption(@Nullable FlowEncryption decryption) {
            this.decryption = decryption;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder entitlementArn(@Nullable String entitlementArn) {
            this.entitlementArn = entitlementArn;
            return this;
        }
        public Builder ingestIp(@Nullable String ingestIp) {
            this.ingestIp = ingestIp;
            return this;
        }
        public Builder ingestPort(@Nullable Integer ingestPort) {
            this.ingestPort = ingestPort;
            return this;
        }
        public Builder maxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }
        public Builder maxLatency(@Nullable Integer maxLatency) {
            this.maxLatency = maxLatency;
            return this;
        }
        public Builder minLatency(@Nullable Integer minLatency) {
            this.minLatency = minLatency;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder protocol(@Nullable FlowSourceProtocol protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder sourceArn(@Nullable String sourceArn) {
            this.sourceArn = sourceArn;
            return this;
        }
        public Builder sourceIngestPort(@Nullable String sourceIngestPort) {
            this.sourceIngestPort = sourceIngestPort;
            return this;
        }
        public Builder streamId(@Nullable String streamId) {
            this.streamId = streamId;
            return this;
        }
        public Builder vpcInterfaceName(@Nullable String vpcInterfaceName) {
            this.vpcInterfaceName = vpcInterfaceName;
            return this;
        }
        public Builder whitelistCidr(@Nullable String whitelistCidr) {
            this.whitelistCidr = whitelistCidr;
            return this;
        }        public FlowSource build() {
            return new FlowSource(decryption, description, entitlementArn, ingestIp, ingestPort, maxBitrate, maxLatency, minLatency, name, protocol, sourceArn, sourceIngestPort, streamId, vpcInterfaceName, whitelistCidr);
        }
    }
}
