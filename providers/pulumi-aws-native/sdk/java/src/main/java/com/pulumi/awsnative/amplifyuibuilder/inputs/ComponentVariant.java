// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.amplifyuibuilder.inputs;

import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentOverrides;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentVariantValues;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComponentVariant extends com.pulumi.resources.InvokeArgs {

    public static final ComponentVariant Empty = new ComponentVariant();

    @Import(name="overrides")
    private @Nullable ComponentOverrides overrides;

    public Optional<ComponentOverrides> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    @Import(name="variantValues")
    private @Nullable ComponentVariantValues variantValues;

    public Optional<ComponentVariantValues> variantValues() {
        return Optional.ofNullable(this.variantValues);
    }

    private ComponentVariant() {}

    private ComponentVariant(ComponentVariant $) {
        this.overrides = $.overrides;
        this.variantValues = $.variantValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComponentVariant defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComponentVariant $;

        public Builder() {
            $ = new ComponentVariant();
        }

        public Builder(ComponentVariant defaults) {
            $ = new ComponentVariant(Objects.requireNonNull(defaults));
        }

        public Builder overrides(@Nullable ComponentOverrides overrides) {
            $.overrides = overrides;
            return this;
        }

        public Builder variantValues(@Nullable ComponentVariantValues variantValues) {
            $.variantValues = variantValues;
            return this;
        }

        public ComponentVariant build() {
            return $;
        }
    }

}
