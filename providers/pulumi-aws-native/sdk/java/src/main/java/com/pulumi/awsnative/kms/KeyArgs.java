// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kms;

import com.pulumi.awsnative.kms.enums.KeySpec;
import com.pulumi.awsnative.kms.enums.KeyUsage;
import com.pulumi.awsnative.kms.inputs.KeyTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyArgs Empty = new KeyArgs();

    /**
     * A description of the CMK. Use a description that helps you to distinguish this CMK from others in the account, such as its intended use.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enables automatic rotation of the key material for the specified customer master key (CMK). By default, automation key rotation is not enabled.
     * 
     */
    @Import(name="enableKeyRotation")
    private @Nullable Output<Boolean> enableKeyRotation;

    public Optional<Output<Boolean>> enableKeyRotation() {
        return Optional.ofNullable(this.enableKeyRotation);
    }

    /**
     * Specifies whether the customer master key (CMK) is enabled. Disabled CMKs cannot be used in cryptographic operations.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The key policy that authorizes use of the CMK. The key policy must observe the following rules.
     * 
     */
    @Import(name="keyPolicy", required=true)
    private Output<Object> keyPolicy;

    public Output<Object> keyPolicy() {
        return this.keyPolicy;
    }

    /**
     * Specifies the type of CMK to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric CMKs. You can&#39;t change the KeySpec value after the CMK is created.
     * 
     */
    @Import(name="keySpec")
    private @Nullable Output<KeySpec> keySpec;

    public Optional<Output<KeySpec>> keySpec() {
        return Optional.ofNullable(this.keySpec);
    }

    /**
     * Determines the cryptographic operations for which you can use the CMK. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric CMKs. You can&#39;t change the KeyUsage value after the CMK is created.
     * 
     */
    @Import(name="keyUsage")
    private @Nullable Output<KeyUsage> keyUsage;

    public Optional<Output<KeyUsage>> keyUsage() {
        return Optional.ofNullable(this.keyUsage);
    }

    /**
     * Specifies whether the CMK should be Multi-Region. You can&#39;t change the MultiRegion value after the CMK is created.
     * 
     */
    @Import(name="multiRegion")
    private @Nullable Output<Boolean> multiRegion;

    public Optional<Output<Boolean>> multiRegion() {
        return Optional.ofNullable(this.multiRegion);
    }

    /**
     * Specifies the number of days in the waiting period before AWS KMS deletes a CMK that has been removed from a CloudFormation stack. Enter a value between 7 and 30 days. The default value is 30 days.
     * 
     */
    @Import(name="pendingWindowInDays")
    private @Nullable Output<Integer> pendingWindowInDays;

    public Optional<Output<Integer>> pendingWindowInDays() {
        return Optional.ofNullable(this.pendingWindowInDays);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<KeyTagArgs>> tags;

    public Optional<Output<List<KeyTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private KeyArgs() {}

    private KeyArgs(KeyArgs $) {
        this.description = $.description;
        this.enableKeyRotation = $.enableKeyRotation;
        this.enabled = $.enabled;
        this.keyPolicy = $.keyPolicy;
        this.keySpec = $.keySpec;
        this.keyUsage = $.keyUsage;
        this.multiRegion = $.multiRegion;
        this.pendingWindowInDays = $.pendingWindowInDays;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyArgs $;

        public Builder() {
            $ = new KeyArgs();
        }

        public Builder(KeyArgs defaults) {
            $ = new KeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enableKeyRotation(@Nullable Output<Boolean> enableKeyRotation) {
            $.enableKeyRotation = enableKeyRotation;
            return this;
        }

        public Builder enableKeyRotation(Boolean enableKeyRotation) {
            return enableKeyRotation(Output.of(enableKeyRotation));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder keyPolicy(Output<Object> keyPolicy) {
            $.keyPolicy = keyPolicy;
            return this;
        }

        public Builder keyPolicy(Object keyPolicy) {
            return keyPolicy(Output.of(keyPolicy));
        }

        public Builder keySpec(@Nullable Output<KeySpec> keySpec) {
            $.keySpec = keySpec;
            return this;
        }

        public Builder keySpec(KeySpec keySpec) {
            return keySpec(Output.of(keySpec));
        }

        public Builder keyUsage(@Nullable Output<KeyUsage> keyUsage) {
            $.keyUsage = keyUsage;
            return this;
        }

        public Builder keyUsage(KeyUsage keyUsage) {
            return keyUsage(Output.of(keyUsage));
        }

        public Builder multiRegion(@Nullable Output<Boolean> multiRegion) {
            $.multiRegion = multiRegion;
            return this;
        }

        public Builder multiRegion(Boolean multiRegion) {
            return multiRegion(Output.of(multiRegion));
        }

        public Builder pendingWindowInDays(@Nullable Output<Integer> pendingWindowInDays) {
            $.pendingWindowInDays = pendingWindowInDays;
            return this;
        }

        public Builder pendingWindowInDays(Integer pendingWindowInDays) {
            return pendingWindowInDays(Output.of(pendingWindowInDays));
        }

        public Builder tags(@Nullable Output<List<KeyTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<KeyTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(KeyTagArgs... tags) {
            return tags(List.of(tags));
        }

        public KeyArgs build() {
            $.keyPolicy = Objects.requireNonNull($.keyPolicy, "expected parameter 'keyPolicy' to be non-null");
            return $;
        }
    }

}
