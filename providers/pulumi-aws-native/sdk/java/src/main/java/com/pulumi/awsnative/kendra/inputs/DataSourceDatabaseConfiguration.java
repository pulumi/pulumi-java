// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kendra.inputs;

import com.pulumi.awsnative.kendra.enums.DataSourceDatabaseEngineType;
import com.pulumi.awsnative.kendra.inputs.DataSourceAclConfiguration;
import com.pulumi.awsnative.kendra.inputs.DataSourceColumnConfiguration;
import com.pulumi.awsnative.kendra.inputs.DataSourceConnectionConfiguration;
import com.pulumi.awsnative.kendra.inputs.DataSourceSqlConfiguration;
import com.pulumi.awsnative.kendra.inputs.DataSourceVpcConfiguration;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceDatabaseConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final DataSourceDatabaseConfiguration Empty = new DataSourceDatabaseConfiguration();

    @Import(name="aclConfiguration")
    private @Nullable DataSourceAclConfiguration aclConfiguration;

    public Optional<DataSourceAclConfiguration> aclConfiguration() {
        return Optional.ofNullable(this.aclConfiguration);
    }

    @Import(name="columnConfiguration", required=true)
    private DataSourceColumnConfiguration columnConfiguration;

    public DataSourceColumnConfiguration columnConfiguration() {
        return this.columnConfiguration;
    }

    @Import(name="connectionConfiguration", required=true)
    private DataSourceConnectionConfiguration connectionConfiguration;

    public DataSourceConnectionConfiguration connectionConfiguration() {
        return this.connectionConfiguration;
    }

    @Import(name="databaseEngineType", required=true)
    private DataSourceDatabaseEngineType databaseEngineType;

    public DataSourceDatabaseEngineType databaseEngineType() {
        return this.databaseEngineType;
    }

    @Import(name="sqlConfiguration")
    private @Nullable DataSourceSqlConfiguration sqlConfiguration;

    public Optional<DataSourceSqlConfiguration> sqlConfiguration() {
        return Optional.ofNullable(this.sqlConfiguration);
    }

    @Import(name="vpcConfiguration")
    private @Nullable DataSourceVpcConfiguration vpcConfiguration;

    public Optional<DataSourceVpcConfiguration> vpcConfiguration() {
        return Optional.ofNullable(this.vpcConfiguration);
    }

    private DataSourceDatabaseConfiguration() {}

    private DataSourceDatabaseConfiguration(DataSourceDatabaseConfiguration $) {
        this.aclConfiguration = $.aclConfiguration;
        this.columnConfiguration = $.columnConfiguration;
        this.connectionConfiguration = $.connectionConfiguration;
        this.databaseEngineType = $.databaseEngineType;
        this.sqlConfiguration = $.sqlConfiguration;
        this.vpcConfiguration = $.vpcConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceDatabaseConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceDatabaseConfiguration $;

        public Builder() {
            $ = new DataSourceDatabaseConfiguration();
        }

        public Builder(DataSourceDatabaseConfiguration defaults) {
            $ = new DataSourceDatabaseConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder aclConfiguration(@Nullable DataSourceAclConfiguration aclConfiguration) {
            $.aclConfiguration = aclConfiguration;
            return this;
        }

        public Builder columnConfiguration(DataSourceColumnConfiguration columnConfiguration) {
            $.columnConfiguration = columnConfiguration;
            return this;
        }

        public Builder connectionConfiguration(DataSourceConnectionConfiguration connectionConfiguration) {
            $.connectionConfiguration = connectionConfiguration;
            return this;
        }

        public Builder databaseEngineType(DataSourceDatabaseEngineType databaseEngineType) {
            $.databaseEngineType = databaseEngineType;
            return this;
        }

        public Builder sqlConfiguration(@Nullable DataSourceSqlConfiguration sqlConfiguration) {
            $.sqlConfiguration = sqlConfiguration;
            return this;
        }

        public Builder vpcConfiguration(@Nullable DataSourceVpcConfiguration vpcConfiguration) {
            $.vpcConfiguration = vpcConfiguration;
            return this;
        }

        public DataSourceDatabaseConfiguration build() {
            $.columnConfiguration = Objects.requireNonNull($.columnConfiguration, "expected parameter 'columnConfiguration' to be non-null");
            $.connectionConfiguration = Objects.requireNonNull($.connectionConfiguration, "expected parameter 'connectionConfiguration' to be non-null");
            $.databaseEngineType = Objects.requireNonNull($.databaseEngineType, "expected parameter 'databaseEngineType' to be non-null");
            return $;
        }
    }

}
