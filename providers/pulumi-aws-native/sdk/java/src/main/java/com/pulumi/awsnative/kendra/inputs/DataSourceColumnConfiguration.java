// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kendra.inputs;

import com.pulumi.awsnative.kendra.inputs.DataSourceToIndexFieldMapping;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceColumnConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final DataSourceColumnConfiguration Empty = new DataSourceColumnConfiguration();

    @Import(name="changeDetectingColumns", required=true)
    private List<String> changeDetectingColumns;

    public List<String> changeDetectingColumns() {
        return this.changeDetectingColumns;
    }

    @Import(name="documentDataColumnName", required=true)
    private String documentDataColumnName;

    public String documentDataColumnName() {
        return this.documentDataColumnName;
    }

    @Import(name="documentIdColumnName", required=true)
    private String documentIdColumnName;

    public String documentIdColumnName() {
        return this.documentIdColumnName;
    }

    @Import(name="documentTitleColumnName")
    private @Nullable String documentTitleColumnName;

    public Optional<String> documentTitleColumnName() {
        return Optional.ofNullable(this.documentTitleColumnName);
    }

    @Import(name="fieldMappings")
    private @Nullable List<DataSourceToIndexFieldMapping> fieldMappings;

    public Optional<List<DataSourceToIndexFieldMapping>> fieldMappings() {
        return Optional.ofNullable(this.fieldMappings);
    }

    private DataSourceColumnConfiguration() {}

    private DataSourceColumnConfiguration(DataSourceColumnConfiguration $) {
        this.changeDetectingColumns = $.changeDetectingColumns;
        this.documentDataColumnName = $.documentDataColumnName;
        this.documentIdColumnName = $.documentIdColumnName;
        this.documentTitleColumnName = $.documentTitleColumnName;
        this.fieldMappings = $.fieldMappings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceColumnConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceColumnConfiguration $;

        public Builder() {
            $ = new DataSourceColumnConfiguration();
        }

        public Builder(DataSourceColumnConfiguration defaults) {
            $ = new DataSourceColumnConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder changeDetectingColumns(List<String> changeDetectingColumns) {
            $.changeDetectingColumns = changeDetectingColumns;
            return this;
        }

        public Builder changeDetectingColumns(String... changeDetectingColumns) {
            return changeDetectingColumns(List.of(changeDetectingColumns));
        }

        public Builder documentDataColumnName(String documentDataColumnName) {
            $.documentDataColumnName = documentDataColumnName;
            return this;
        }

        public Builder documentIdColumnName(String documentIdColumnName) {
            $.documentIdColumnName = documentIdColumnName;
            return this;
        }

        public Builder documentTitleColumnName(@Nullable String documentTitleColumnName) {
            $.documentTitleColumnName = documentTitleColumnName;
            return this;
        }

        public Builder fieldMappings(@Nullable List<DataSourceToIndexFieldMapping> fieldMappings) {
            $.fieldMappings = fieldMappings;
            return this;
        }

        public Builder fieldMappings(DataSourceToIndexFieldMapping... fieldMappings) {
            return fieldMappings(List.of(fieldMappings));
        }

        public DataSourceColumnConfiguration build() {
            $.changeDetectingColumns = Objects.requireNonNull($.changeDetectingColumns, "expected parameter 'changeDetectingColumns' to be non-null");
            $.documentDataColumnName = Objects.requireNonNull($.documentDataColumnName, "expected parameter 'documentDataColumnName' to be non-null");
            $.documentIdColumnName = Objects.requireNonNull($.documentIdColumnName, "expected parameter 'documentIdColumnName' to be non-null");
            return $;
        }
    }

}
