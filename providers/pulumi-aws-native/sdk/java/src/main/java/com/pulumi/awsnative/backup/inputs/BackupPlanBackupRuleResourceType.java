// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.backup.inputs;

import com.pulumi.awsnative.backup.inputs.BackupPlanCopyActionResourceType;
import com.pulumi.awsnative.backup.inputs.BackupPlanLifecycleResourceType;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanBackupRuleResourceType extends com.pulumi.resources.InvokeArgs {

    public static final BackupPlanBackupRuleResourceType Empty = new BackupPlanBackupRuleResourceType();

    @Import(name="completionWindowMinutes")
    private @Nullable Double completionWindowMinutes;

    public Optional<Double> completionWindowMinutes() {
        return Optional.ofNullable(this.completionWindowMinutes);
    }

    @Import(name="copyActions")
    private @Nullable List<BackupPlanCopyActionResourceType> copyActions;

    public Optional<List<BackupPlanCopyActionResourceType>> copyActions() {
        return Optional.ofNullable(this.copyActions);
    }

    @Import(name="enableContinuousBackup")
    private @Nullable Boolean enableContinuousBackup;

    public Optional<Boolean> enableContinuousBackup() {
        return Optional.ofNullable(this.enableContinuousBackup);
    }

    @Import(name="lifecycle")
    private @Nullable BackupPlanLifecycleResourceType lifecycle;

    public Optional<BackupPlanLifecycleResourceType> lifecycle() {
        return Optional.ofNullable(this.lifecycle);
    }

    @Import(name="recoveryPointTags")
    private @Nullable Object recoveryPointTags;

    public Optional<Object> recoveryPointTags() {
        return Optional.ofNullable(this.recoveryPointTags);
    }

    @Import(name="ruleName", required=true)
    private String ruleName;

    public String ruleName() {
        return this.ruleName;
    }

    @Import(name="scheduleExpression")
    private @Nullable String scheduleExpression;

    public Optional<String> scheduleExpression() {
        return Optional.ofNullable(this.scheduleExpression);
    }

    @Import(name="startWindowMinutes")
    private @Nullable Double startWindowMinutes;

    public Optional<Double> startWindowMinutes() {
        return Optional.ofNullable(this.startWindowMinutes);
    }

    @Import(name="targetBackupVault", required=true)
    private String targetBackupVault;

    public String targetBackupVault() {
        return this.targetBackupVault;
    }

    private BackupPlanBackupRuleResourceType() {}

    private BackupPlanBackupRuleResourceType(BackupPlanBackupRuleResourceType $) {
        this.completionWindowMinutes = $.completionWindowMinutes;
        this.copyActions = $.copyActions;
        this.enableContinuousBackup = $.enableContinuousBackup;
        this.lifecycle = $.lifecycle;
        this.recoveryPointTags = $.recoveryPointTags;
        this.ruleName = $.ruleName;
        this.scheduleExpression = $.scheduleExpression;
        this.startWindowMinutes = $.startWindowMinutes;
        this.targetBackupVault = $.targetBackupVault;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanBackupRuleResourceType defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanBackupRuleResourceType $;

        public Builder() {
            $ = new BackupPlanBackupRuleResourceType();
        }

        public Builder(BackupPlanBackupRuleResourceType defaults) {
            $ = new BackupPlanBackupRuleResourceType(Objects.requireNonNull(defaults));
        }

        public Builder completionWindowMinutes(@Nullable Double completionWindowMinutes) {
            $.completionWindowMinutes = completionWindowMinutes;
            return this;
        }

        public Builder copyActions(@Nullable List<BackupPlanCopyActionResourceType> copyActions) {
            $.copyActions = copyActions;
            return this;
        }

        public Builder copyActions(BackupPlanCopyActionResourceType... copyActions) {
            return copyActions(List.of(copyActions));
        }

        public Builder enableContinuousBackup(@Nullable Boolean enableContinuousBackup) {
            $.enableContinuousBackup = enableContinuousBackup;
            return this;
        }

        public Builder lifecycle(@Nullable BackupPlanLifecycleResourceType lifecycle) {
            $.lifecycle = lifecycle;
            return this;
        }

        public Builder recoveryPointTags(@Nullable Object recoveryPointTags) {
            $.recoveryPointTags = recoveryPointTags;
            return this;
        }

        public Builder ruleName(String ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder scheduleExpression(@Nullable String scheduleExpression) {
            $.scheduleExpression = scheduleExpression;
            return this;
        }

        public Builder startWindowMinutes(@Nullable Double startWindowMinutes) {
            $.startWindowMinutes = startWindowMinutes;
            return this;
        }

        public Builder targetBackupVault(String targetBackupVault) {
            $.targetBackupVault = targetBackupVault;
            return this;
        }

        public BackupPlanBackupRuleResourceType build() {
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.targetBackupVault = Objects.requireNonNull($.targetBackupVault, "expected parameter 'targetBackupVault' to be non-null");
            return $;
        }
    }

}
