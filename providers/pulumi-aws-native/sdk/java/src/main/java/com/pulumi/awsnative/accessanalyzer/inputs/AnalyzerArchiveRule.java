// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.accessanalyzer.inputs;

import com.pulumi.awsnative.accessanalyzer.inputs.AnalyzerFilter;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
 * 
 */
public final class AnalyzerArchiveRule extends com.pulumi.resources.InvokeArgs {

    public static final AnalyzerArchiveRule Empty = new AnalyzerArchiveRule();

    @Import(name="filter", required=true)
    private List<AnalyzerFilter> filter;

    public List<AnalyzerFilter> filter() {
        return this.filter;
    }

    /**
     * The archive rule name
     * 
     */
    @Import(name="ruleName", required=true)
    private String ruleName;

    public String ruleName() {
        return this.ruleName;
    }

    private AnalyzerArchiveRule() {}

    private AnalyzerArchiveRule(AnalyzerArchiveRule $) {
        this.filter = $.filter;
        this.ruleName = $.ruleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyzerArchiveRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyzerArchiveRule $;

        public Builder() {
            $ = new AnalyzerArchiveRule();
        }

        public Builder(AnalyzerArchiveRule defaults) {
            $ = new AnalyzerArchiveRule(Objects.requireNonNull(defaults));
        }

        public Builder filter(List<AnalyzerFilter> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(AnalyzerFilter... filter) {
            return filter(List.of(filter));
        }

        public Builder ruleName(String ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public AnalyzerArchiveRule build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            return $;
        }
    }

}
