// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestManifestLayout;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestProfile;
import com.pulumi.awsnative.mediapackage.inputs.PackagingConfigurationStreamSelection;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A DASH manifest configuration.
 * 
 */
public final class PackagingConfigurationDashManifest extends com.pulumi.resources.InvokeArgs {

    public static final PackagingConfigurationDashManifest Empty = new PackagingConfigurationDashManifest();

    /**
     * Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
     * 
     */
    @Import(name="manifestLayout")
    private @Nullable PackagingConfigurationDashManifestManifestLayout manifestLayout;

    /**
     * @return Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
     * 
     */
    public Optional<PackagingConfigurationDashManifestManifestLayout> manifestLayout() {
        return Optional.ofNullable(this.manifestLayout);
    }

    @Import(name="manifestName")
    private @Nullable String manifestName;

    public Optional<String> manifestName() {
        return Optional.ofNullable(this.manifestName);
    }

    /**
     * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
     * 
     */
    @Import(name="minBufferTimeSeconds")
    private @Nullable Integer minBufferTimeSeconds;

    /**
     * @return Minimum duration (in seconds) that a player will buffer media before starting the presentation.
     * 
     */
    public Optional<Integer> minBufferTimeSeconds() {
        return Optional.ofNullable(this.minBufferTimeSeconds);
    }

    /**
     * The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
     * 
     */
    @Import(name="profile")
    private @Nullable PackagingConfigurationDashManifestProfile profile;

    /**
     * @return The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
     * 
     */
    public Optional<PackagingConfigurationDashManifestProfile> profile() {
        return Optional.ofNullable(this.profile);
    }

    @Import(name="streamSelection")
    private @Nullable PackagingConfigurationStreamSelection streamSelection;

    public Optional<PackagingConfigurationStreamSelection> streamSelection() {
        return Optional.ofNullable(this.streamSelection);
    }

    private PackagingConfigurationDashManifest() {}

    private PackagingConfigurationDashManifest(PackagingConfigurationDashManifest $) {
        this.manifestLayout = $.manifestLayout;
        this.manifestName = $.manifestName;
        this.minBufferTimeSeconds = $.minBufferTimeSeconds;
        this.profile = $.profile;
        this.streamSelection = $.streamSelection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackagingConfigurationDashManifest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackagingConfigurationDashManifest $;

        public Builder() {
            $ = new PackagingConfigurationDashManifest();
        }

        public Builder(PackagingConfigurationDashManifest defaults) {
            $ = new PackagingConfigurationDashManifest(Objects.requireNonNull(defaults));
        }

        /**
         * @param manifestLayout Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         * 
         * @return builder
         * 
         */
        public Builder manifestLayout(@Nullable PackagingConfigurationDashManifestManifestLayout manifestLayout) {
            $.manifestLayout = manifestLayout;
            return this;
        }

        public Builder manifestName(@Nullable String manifestName) {
            $.manifestName = manifestName;
            return this;
        }

        /**
         * @param minBufferTimeSeconds Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         * 
         * @return builder
         * 
         */
        public Builder minBufferTimeSeconds(@Nullable Integer minBufferTimeSeconds) {
            $.minBufferTimeSeconds = minBufferTimeSeconds;
            return this;
        }

        /**
         * @param profile The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable PackagingConfigurationDashManifestProfile profile) {
            $.profile = profile;
            return this;
        }

        public Builder streamSelection(@Nullable PackagingConfigurationStreamSelection streamSelection) {
            $.streamSelection = streamSelection;
            return this;
        }

        public PackagingConfigurationDashManifest build() {
            return $;
        }
    }

}
