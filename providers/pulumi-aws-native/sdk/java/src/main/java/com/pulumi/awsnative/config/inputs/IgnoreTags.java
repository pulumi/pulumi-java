// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.config.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
 * 
 */
public final class IgnoreTags extends com.pulumi.resources.InvokeArgs {

    public static final IgnoreTags Empty = new IgnoreTags();

    /**
     * List of exact resource tag keys to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning the tag in any `tags` attributes and displaying any configuration difference for the tag value. If any resource configuration still has this tag key configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
     * 
     */
    @Import(name="keyPrefixes")
    private @Nullable List<String> keyPrefixes;

    public Optional<List<String>> keyPrefixes() {
        return Optional.ofNullable(this.keyPrefixes);
    }

    /**
     * List of resource tag key prefixes to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning any tag key matching the prefixes in any `tags` attributes and displaying any configuration difference for those tag values. If any resource configuration still has a tag matching one of the prefixes configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
     * 
     */
    @Import(name="keys")
    private @Nullable List<String> keys;

    public Optional<List<String>> keys() {
        return Optional.ofNullable(this.keys);
    }

    private IgnoreTags() {}

    private IgnoreTags(IgnoreTags $) {
        this.keyPrefixes = $.keyPrefixes;
        this.keys = $.keys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IgnoreTags defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IgnoreTags $;

        public Builder() {
            $ = new IgnoreTags();
        }

        public Builder(IgnoreTags defaults) {
            $ = new IgnoreTags(Objects.requireNonNull(defaults));
        }

        public Builder keyPrefixes(@Nullable List<String> keyPrefixes) {
            $.keyPrefixes = keyPrefixes;
            return this;
        }

        public Builder keyPrefixes(String... keyPrefixes) {
            return keyPrefixes(List.of(keyPrefixes));
        }

        public Builder keys(@Nullable List<String> keys) {
            $.keys = keys;
            return this;
        }

        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }

        public IgnoreTags build() {
            return $;
        }
    }

}
