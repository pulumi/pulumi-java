// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.appflow.inputs;

import com.pulumi.awsnative.appflow.enums.FlowTaskType;
import com.pulumi.awsnative.appflow.inputs.FlowConnectorOperatorArgs;
import com.pulumi.awsnative.appflow.inputs.FlowTaskPropertiesObjectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowTaskArgs Empty = new FlowTaskArgs();

    /**
     * Operation to be performed on provided source fields
     * 
     */
    @Import(name="connectorOperator")
    private @Nullable Output<FlowConnectorOperatorArgs> connectorOperator;

    public Optional<Output<FlowConnectorOperatorArgs>> connectorOperator() {
        return Optional.ofNullable(this.connectorOperator);
    }

    /**
     * A field value on which source field should be validated
     * 
     */
    @Import(name="destinationField")
    private @Nullable Output<String> destinationField;

    public Optional<Output<String>> destinationField() {
        return Optional.ofNullable(this.destinationField);
    }

    /**
     * Source fields on which particular task will be applied
     * 
     */
    @Import(name="sourceFields", required=true)
    private Output<List<String>> sourceFields;

    public Output<List<String>> sourceFields() {
        return this.sourceFields;
    }

    /**
     * A Map used to store task related info
     * 
     */
    @Import(name="taskProperties")
    private @Nullable Output<List<FlowTaskPropertiesObjectArgs>> taskProperties;

    public Optional<Output<List<FlowTaskPropertiesObjectArgs>>> taskProperties() {
        return Optional.ofNullable(this.taskProperties);
    }

    /**
     * Type of task
     * 
     */
    @Import(name="taskType", required=true)
    private Output<FlowTaskType> taskType;

    public Output<FlowTaskType> taskType() {
        return this.taskType;
    }

    private FlowTaskArgs() {}

    private FlowTaskArgs(FlowTaskArgs $) {
        this.connectorOperator = $.connectorOperator;
        this.destinationField = $.destinationField;
        this.sourceFields = $.sourceFields;
        this.taskProperties = $.taskProperties;
        this.taskType = $.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowTaskArgs $;

        public Builder() {
            $ = new FlowTaskArgs();
        }

        public Builder(FlowTaskArgs defaults) {
            $ = new FlowTaskArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectorOperator(@Nullable Output<FlowConnectorOperatorArgs> connectorOperator) {
            $.connectorOperator = connectorOperator;
            return this;
        }

        public Builder connectorOperator(FlowConnectorOperatorArgs connectorOperator) {
            return connectorOperator(Output.of(connectorOperator));
        }

        public Builder destinationField(@Nullable Output<String> destinationField) {
            $.destinationField = destinationField;
            return this;
        }

        public Builder destinationField(String destinationField) {
            return destinationField(Output.of(destinationField));
        }

        public Builder sourceFields(Output<List<String>> sourceFields) {
            $.sourceFields = sourceFields;
            return this;
        }

        public Builder sourceFields(List<String> sourceFields) {
            return sourceFields(Output.of(sourceFields));
        }

        public Builder sourceFields(String... sourceFields) {
            return sourceFields(List.of(sourceFields));
        }

        public Builder taskProperties(@Nullable Output<List<FlowTaskPropertiesObjectArgs>> taskProperties) {
            $.taskProperties = taskProperties;
            return this;
        }

        public Builder taskProperties(List<FlowTaskPropertiesObjectArgs> taskProperties) {
            return taskProperties(Output.of(taskProperties));
        }

        public Builder taskProperties(FlowTaskPropertiesObjectArgs... taskProperties) {
            return taskProperties(List.of(taskProperties));
        }

        public Builder taskType(Output<FlowTaskType> taskType) {
            $.taskType = taskType;
            return this;
        }

        public Builder taskType(FlowTaskType taskType) {
            return taskType(Output.of(taskType));
        }

        public FlowTaskArgs build() {
            $.sourceFields = Objects.requireNonNull($.sourceFields, "expected parameter 'sourceFields' to be non-null");
            $.taskType = Objects.requireNonNull($.taskType, "expected parameter 'taskType' to be non-null");
            return $;
        }
    }

}
