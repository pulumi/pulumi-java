// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisfirehose.inputs;

import com.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamSplunkDestinationConfigurationHECEndpointType;
import com.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamCloudWatchLoggingOptions;
import com.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamProcessingConfiguration;
import com.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamS3DestinationConfiguration;
import com.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamSplunkRetryOptions;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeliveryStreamSplunkDestinationConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final DeliveryStreamSplunkDestinationConfiguration Empty = new DeliveryStreamSplunkDestinationConfiguration();

    @Import(name="cloudWatchLoggingOptions")
    private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;

    public Optional<DeliveryStreamCloudWatchLoggingOptions> cloudWatchLoggingOptions() {
        return Optional.ofNullable(this.cloudWatchLoggingOptions);
    }

    @Import(name="hECAcknowledgmentTimeoutInSeconds")
    private @Nullable Integer hECAcknowledgmentTimeoutInSeconds;

    public Optional<Integer> hECAcknowledgmentTimeoutInSeconds() {
        return Optional.ofNullable(this.hECAcknowledgmentTimeoutInSeconds);
    }

    @Import(name="hECEndpoint", required=true)
    private String hECEndpoint;

    public String hECEndpoint() {
        return this.hECEndpoint;
    }

    @Import(name="hECEndpointType", required=true)
    private DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType;

    public DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType() {
        return this.hECEndpointType;
    }

    @Import(name="hECToken", required=true)
    private String hECToken;

    public String hECToken() {
        return this.hECToken;
    }

    @Import(name="processingConfiguration")
    private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;

    public Optional<DeliveryStreamProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }

    @Import(name="retryOptions")
    private @Nullable DeliveryStreamSplunkRetryOptions retryOptions;

    public Optional<DeliveryStreamSplunkRetryOptions> retryOptions() {
        return Optional.ofNullable(this.retryOptions);
    }

    @Import(name="s3BackupMode")
    private @Nullable String s3BackupMode;

    public Optional<String> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }

    @Import(name="s3Configuration", required=true)
    private DeliveryStreamS3DestinationConfiguration s3Configuration;

    public DeliveryStreamS3DestinationConfiguration s3Configuration() {
        return this.s3Configuration;
    }

    private DeliveryStreamSplunkDestinationConfiguration() {}

    private DeliveryStreamSplunkDestinationConfiguration(DeliveryStreamSplunkDestinationConfiguration $) {
        this.cloudWatchLoggingOptions = $.cloudWatchLoggingOptions;
        this.hECAcknowledgmentTimeoutInSeconds = $.hECAcknowledgmentTimeoutInSeconds;
        this.hECEndpoint = $.hECEndpoint;
        this.hECEndpointType = $.hECEndpointType;
        this.hECToken = $.hECToken;
        this.processingConfiguration = $.processingConfiguration;
        this.retryOptions = $.retryOptions;
        this.s3BackupMode = $.s3BackupMode;
        this.s3Configuration = $.s3Configuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeliveryStreamSplunkDestinationConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeliveryStreamSplunkDestinationConfiguration $;

        public Builder() {
            $ = new DeliveryStreamSplunkDestinationConfiguration();
        }

        public Builder(DeliveryStreamSplunkDestinationConfiguration defaults) {
            $ = new DeliveryStreamSplunkDestinationConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions) {
            $.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }

        public Builder hECAcknowledgmentTimeoutInSeconds(@Nullable Integer hECAcknowledgmentTimeoutInSeconds) {
            $.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
            return this;
        }

        public Builder hECEndpoint(String hECEndpoint) {
            $.hECEndpoint = hECEndpoint;
            return this;
        }

        public Builder hECEndpointType(DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType) {
            $.hECEndpointType = hECEndpointType;
            return this;
        }

        public Builder hECToken(String hECToken) {
            $.hECToken = hECToken;
            return this;
        }

        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfiguration processingConfiguration) {
            $.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder retryOptions(@Nullable DeliveryStreamSplunkRetryOptions retryOptions) {
            $.retryOptions = retryOptions;
            return this;
        }

        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            $.s3BackupMode = s3BackupMode;
            return this;
        }

        public Builder s3Configuration(DeliveryStreamS3DestinationConfiguration s3Configuration) {
            $.s3Configuration = s3Configuration;
            return this;
        }

        public DeliveryStreamSplunkDestinationConfiguration build() {
            $.hECEndpoint = Objects.requireNonNull($.hECEndpoint, "expected parameter 'hECEndpoint' to be non-null");
            $.hECEndpointType = Objects.requireNonNull($.hECEndpointType, "expected parameter 'hECEndpointType' to be non-null");
            $.hECToken = Objects.requireNonNull($.hECToken, "expected parameter 'hECToken' to be non-null");
            $.s3Configuration = Objects.requireNonNull($.s3Configuration, "expected parameter 's3Configuration' to be non-null");
            return $;
        }
    }

}
