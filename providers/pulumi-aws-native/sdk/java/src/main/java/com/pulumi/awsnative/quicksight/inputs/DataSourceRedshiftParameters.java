// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;Amazon Redshift parameters. The &lt;code&gt;ClusterId&lt;/code&gt; field can be blank if
 *             &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; are both set. The &lt;code&gt;Host&lt;/code&gt; and
 *             &lt;code&gt;Port&lt;/code&gt; fields can be blank if the &lt;code&gt;ClusterId&lt;/code&gt; field is set.&lt;/p&gt;
 * 
 */
public final class DataSourceRedshiftParameters extends com.pulumi.resources.InvokeArgs {

    public static final DataSourceRedshiftParameters Empty = new DataSourceRedshiftParameters();

    /**
     * &lt;p&gt;Cluster ID. This field can be blank if the &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; are
     *             provided.&lt;/p&gt;
     * 
     */
    @Import(name="clusterId")
      private final @Nullable String clusterId;

    public Optional<String> clusterId() {
        return this.clusterId == null ? Optional.empty() : Optional.ofNullable(this.clusterId);
    }

    /**
     * &lt;p&gt;Database.&lt;/p&gt;
     * 
     */
    @Import(name="database", required=true)
      private final String database;

    public String database() {
        return this.database;
    }

    /**
     * &lt;p&gt;Host. This field can be blank if &lt;code&gt;ClusterId&lt;/code&gt; is provided.&lt;/p&gt;
     * 
     */
    @Import(name="host")
      private final @Nullable String host;

    public Optional<String> host() {
        return this.host == null ? Optional.empty() : Optional.ofNullable(this.host);
    }

    /**
     * &lt;p&gt;Port. This field can be blank if the &lt;code&gt;ClusterId&lt;/code&gt; is provided.&lt;/p&gt;
     * 
     */
    @Import(name="port")
      private final @Nullable Double port;

    public Optional<Double> port() {
        return this.port == null ? Optional.empty() : Optional.ofNullable(this.port);
    }

    public DataSourceRedshiftParameters(
        @Nullable String clusterId,
        String database,
        @Nullable String host,
        @Nullable Double port) {
        this.clusterId = clusterId;
        this.database = Objects.requireNonNull(database, "expected parameter 'database' to be non-null");
        this.host = host;
        this.port = port;
    }

    private DataSourceRedshiftParameters() {
        this.clusterId = null;
        this.database = null;
        this.host = null;
        this.port = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceRedshiftParameters defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String clusterId;
        private String database;
        private @Nullable String host;
        private @Nullable Double port;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceRedshiftParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.database = defaults.database;
    	      this.host = defaults.host;
    	      this.port = defaults.port;
        }

        public Builder clusterId(@Nullable String clusterId) {
            this.clusterId = clusterId;
            return this;
        }
        public Builder database(String database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        public Builder port(@Nullable Double port) {
            this.port = port;
            return this;
        }        public DataSourceRedshiftParameters build() {
            return new DataSourceRedshiftParameters(clusterId, database, host, port);
        }
    }
}
