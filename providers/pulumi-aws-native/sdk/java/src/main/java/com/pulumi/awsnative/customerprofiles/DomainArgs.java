// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.customerprofiles;

import com.pulumi.awsnative.customerprofiles.inputs.DomainTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * The URL of the SQS dead letter queue
     * 
     */
    @Import(name="deadLetterQueueUrl")
    private @Nullable Output<String> deadLetterQueueUrl;

    public Optional<Output<String>> deadLetterQueueUrl() {
        return Optional.ofNullable(this.deadLetterQueueUrl);
    }

    /**
     * The default encryption key
     * 
     */
    @Import(name="defaultEncryptionKey")
    private @Nullable Output<String> defaultEncryptionKey;

    public Optional<Output<String>> defaultEncryptionKey() {
        return Optional.ofNullable(this.defaultEncryptionKey);
    }

    /**
     * The default number of days until the data within the domain expires.
     * 
     */
    @Import(name="defaultExpirationDays")
    private @Nullable Output<Integer> defaultExpirationDays;

    public Optional<Output<Integer>> defaultExpirationDays() {
        return Optional.ofNullable(this.defaultExpirationDays);
    }

    /**
     * The unique name of the domain.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The tags (keys and values) associated with the domain
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DomainTagArgs>> tags;

    public Optional<Output<List<DomainTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.deadLetterQueueUrl = $.deadLetterQueueUrl;
        this.defaultEncryptionKey = $.defaultEncryptionKey;
        this.defaultExpirationDays = $.defaultExpirationDays;
        this.domainName = $.domainName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder deadLetterQueueUrl(@Nullable Output<String> deadLetterQueueUrl) {
            $.deadLetterQueueUrl = deadLetterQueueUrl;
            return this;
        }

        public Builder deadLetterQueueUrl(String deadLetterQueueUrl) {
            return deadLetterQueueUrl(Output.of(deadLetterQueueUrl));
        }

        public Builder defaultEncryptionKey(@Nullable Output<String> defaultEncryptionKey) {
            $.defaultEncryptionKey = defaultEncryptionKey;
            return this;
        }

        public Builder defaultEncryptionKey(String defaultEncryptionKey) {
            return defaultEncryptionKey(Output.of(defaultEncryptionKey));
        }

        public Builder defaultExpirationDays(@Nullable Output<Integer> defaultExpirationDays) {
            $.defaultExpirationDays = defaultExpirationDays;
            return this;
        }

        public Builder defaultExpirationDays(Integer defaultExpirationDays) {
            return defaultExpirationDays(Output.of(defaultExpirationDays));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder tags(@Nullable Output<List<DomainTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<DomainTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(DomainTagArgs... tags) {
            return tags(List.of(tags));
        }

        public DomainArgs build() {
            return $;
        }
    }

}
