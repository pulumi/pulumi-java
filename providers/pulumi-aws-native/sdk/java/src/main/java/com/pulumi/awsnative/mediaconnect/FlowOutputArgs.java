// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect;

import com.pulumi.awsnative.mediaconnect.enums.FlowOutputProtocol;
import com.pulumi.awsnative.mediaconnect.inputs.FlowOutputEncryptionArgs;
import com.pulumi.awsnative.mediaconnect.inputs.FlowOutputVpcInterfaceAttachmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowOutputArgs Empty = new FlowOutputArgs();

    /**
     * The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    @Import(name="cidrAllowList")
    private @Nullable Output<List<String>> cidrAllowList;

    public Optional<Output<List<String>>> cidrAllowList() {
        return Optional.ofNullable(this.cidrAllowList);
    }

    /**
     * A description of the output.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The address where you want to send the output.
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<FlowOutputEncryptionArgs> encryption;

    public Optional<Output<FlowOutputEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
     * 
     */
    @Import(name="flowArn", required=true)
    private Output<String> flowArn;

    public Output<String> flowArn() {
        return this.flowArn;
    }

    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    @Import(name="maxLatency")
    private @Nullable Output<Integer> maxLatency;

    public Optional<Output<Integer>> maxLatency() {
        return Optional.ofNullable(this.maxLatency);
    }

    /**
     * The minimum latency in milliseconds.
     * 
     */
    @Import(name="minLatency")
    private @Nullable Output<Integer> minLatency;

    public Optional<Output<Integer>> minLatency() {
        return Optional.ofNullable(this.minLatency);
    }

    /**
     * The name of the output. This value must be unique within the current flow.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The port to use when content is distributed to this output.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol that is used by the source or output.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<FlowOutputProtocol> protocol;

    public Output<FlowOutputProtocol> protocol() {
        return this.protocol;
    }

    /**
     * The remote ID for the Zixi-pull stream.
     * 
     */
    @Import(name="remoteId")
    private @Nullable Output<String> remoteId;

    public Optional<Output<String>> remoteId() {
        return Optional.ofNullable(this.remoteId);
    }

    /**
     * The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
     * 
     */
    @Import(name="smoothingLatency")
    private @Nullable Output<Integer> smoothingLatency;

    public Optional<Output<Integer>> smoothingLatency() {
        return Optional.ofNullable(this.smoothingLatency);
    }

    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    @Import(name="streamId")
    private @Nullable Output<String> streamId;

    public Optional<Output<String>> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    /**
     * The name of the VPC interface attachment to use for this output.
     * 
     */
    @Import(name="vpcInterfaceAttachment")
    private @Nullable Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment;

    public Optional<Output<FlowOutputVpcInterfaceAttachmentArgs>> vpcInterfaceAttachment() {
        return Optional.ofNullable(this.vpcInterfaceAttachment);
    }

    private FlowOutputArgs() {}

    private FlowOutputArgs(FlowOutputArgs $) {
        this.cidrAllowList = $.cidrAllowList;
        this.description = $.description;
        this.destination = $.destination;
        this.encryption = $.encryption;
        this.flowArn = $.flowArn;
        this.maxLatency = $.maxLatency;
        this.minLatency = $.minLatency;
        this.name = $.name;
        this.port = $.port;
        this.protocol = $.protocol;
        this.remoteId = $.remoteId;
        this.smoothingLatency = $.smoothingLatency;
        this.streamId = $.streamId;
        this.vpcInterfaceAttachment = $.vpcInterfaceAttachment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowOutputArgs $;

        public Builder() {
            $ = new FlowOutputArgs();
        }

        public Builder(FlowOutputArgs defaults) {
            $ = new FlowOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder cidrAllowList(@Nullable Output<List<String>> cidrAllowList) {
            $.cidrAllowList = cidrAllowList;
            return this;
        }

        public Builder cidrAllowList(List<String> cidrAllowList) {
            return cidrAllowList(Output.of(cidrAllowList));
        }

        public Builder cidrAllowList(String... cidrAllowList) {
            return cidrAllowList(List.of(cidrAllowList));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        public Builder encryption(@Nullable Output<FlowOutputEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(FlowOutputEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder flowArn(Output<String> flowArn) {
            $.flowArn = flowArn;
            return this;
        }

        public Builder flowArn(String flowArn) {
            return flowArn(Output.of(flowArn));
        }

        public Builder maxLatency(@Nullable Output<Integer> maxLatency) {
            $.maxLatency = maxLatency;
            return this;
        }

        public Builder maxLatency(Integer maxLatency) {
            return maxLatency(Output.of(maxLatency));
        }

        public Builder minLatency(@Nullable Output<Integer> minLatency) {
            $.minLatency = minLatency;
            return this;
        }

        public Builder minLatency(Integer minLatency) {
            return minLatency(Output.of(minLatency));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder protocol(Output<FlowOutputProtocol> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(FlowOutputProtocol protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder remoteId(@Nullable Output<String> remoteId) {
            $.remoteId = remoteId;
            return this;
        }

        public Builder remoteId(String remoteId) {
            return remoteId(Output.of(remoteId));
        }

        public Builder smoothingLatency(@Nullable Output<Integer> smoothingLatency) {
            $.smoothingLatency = smoothingLatency;
            return this;
        }

        public Builder smoothingLatency(Integer smoothingLatency) {
            return smoothingLatency(Output.of(smoothingLatency));
        }

        public Builder streamId(@Nullable Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder vpcInterfaceAttachment(@Nullable Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment) {
            $.vpcInterfaceAttachment = vpcInterfaceAttachment;
            return this;
        }

        public Builder vpcInterfaceAttachment(FlowOutputVpcInterfaceAttachmentArgs vpcInterfaceAttachment) {
            return vpcInterfaceAttachment(Output.of(vpcInterfaceAttachment));
        }

        public FlowOutputArgs build() {
            $.flowArn = Objects.requireNonNull($.flowArn, "expected parameter 'flowArn' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
