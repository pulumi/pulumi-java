// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect;

import com.pulumi.awsnative.mediaconnect.enums.FlowOutputProtocol;
import com.pulumi.awsnative.mediaconnect.inputs.FlowOutputEncryptionArgs;
import com.pulumi.awsnative.mediaconnect.inputs.FlowOutputVpcInterfaceAttachmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlowOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowOutputArgs Empty = new FlowOutputArgs();

    /**
     * The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    @Import(name="cidrAllowList")
      private final @Nullable Output<List<String>> cidrAllowList;

    public Output<List<String>> cidrAllowList() {
        return this.cidrAllowList == null ? Codegen.empty() : this.cidrAllowList;
    }

    /**
     * A description of the output.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The address where you want to send the output.
     * 
     */
    @Import(name="destination")
      private final @Nullable Output<String> destination;

    public Output<String> destination() {
        return this.destination == null ? Codegen.empty() : this.destination;
    }

    /**
     * The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<FlowOutputEncryptionArgs> encryption;

    public Output<FlowOutputEncryptionArgs> encryption() {
        return this.encryption == null ? Codegen.empty() : this.encryption;
    }

    /**
     * The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
     * 
     */
    @Import(name="flowArn", required=true)
      private final Output<String> flowArn;

    public Output<String> flowArn() {
        return this.flowArn;
    }

    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    @Import(name="maxLatency")
      private final @Nullable Output<Integer> maxLatency;

    public Output<Integer> maxLatency() {
        return this.maxLatency == null ? Codegen.empty() : this.maxLatency;
    }

    /**
     * The minimum latency in milliseconds.
     * 
     */
    @Import(name="minLatency")
      private final @Nullable Output<Integer> minLatency;

    public Output<Integer> minLatency() {
        return this.minLatency == null ? Codegen.empty() : this.minLatency;
    }

    /**
     * The name of the output. This value must be unique within the current flow.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The port to use when content is distributed to this output.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * The protocol that is used by the source or output.
     * 
     */
    @Import(name="protocol", required=true)
      private final Output<FlowOutputProtocol> protocol;

    public Output<FlowOutputProtocol> protocol() {
        return this.protocol;
    }

    /**
     * The remote ID for the Zixi-pull stream.
     * 
     */
    @Import(name="remoteId")
      private final @Nullable Output<String> remoteId;

    public Output<String> remoteId() {
        return this.remoteId == null ? Codegen.empty() : this.remoteId;
    }

    /**
     * The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
     * 
     */
    @Import(name="smoothingLatency")
      private final @Nullable Output<Integer> smoothingLatency;

    public Output<Integer> smoothingLatency() {
        return this.smoothingLatency == null ? Codegen.empty() : this.smoothingLatency;
    }

    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    @Import(name="streamId")
      private final @Nullable Output<String> streamId;

    public Output<String> streamId() {
        return this.streamId == null ? Codegen.empty() : this.streamId;
    }

    /**
     * The name of the VPC interface attachment to use for this output.
     * 
     */
    @Import(name="vpcInterfaceAttachment")
      private final @Nullable Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment;

    public Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment() {
        return this.vpcInterfaceAttachment == null ? Codegen.empty() : this.vpcInterfaceAttachment;
    }

    public FlowOutputArgs(
        @Nullable Output<List<String>> cidrAllowList,
        @Nullable Output<String> description,
        @Nullable Output<String> destination,
        @Nullable Output<FlowOutputEncryptionArgs> encryption,
        Output<String> flowArn,
        @Nullable Output<Integer> maxLatency,
        @Nullable Output<Integer> minLatency,
        @Nullable Output<String> name,
        @Nullable Output<Integer> port,
        Output<FlowOutputProtocol> protocol,
        @Nullable Output<String> remoteId,
        @Nullable Output<Integer> smoothingLatency,
        @Nullable Output<String> streamId,
        @Nullable Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment) {
        this.cidrAllowList = cidrAllowList;
        this.description = description;
        this.destination = destination;
        this.encryption = encryption;
        this.flowArn = Objects.requireNonNull(flowArn, "expected parameter 'flowArn' to be non-null");
        this.maxLatency = maxLatency;
        this.minLatency = minLatency;
        this.name = name;
        this.port = port;
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.remoteId = remoteId;
        this.smoothingLatency = smoothingLatency;
        this.streamId = streamId;
        this.vpcInterfaceAttachment = vpcInterfaceAttachment;
    }

    private FlowOutputArgs() {
        this.cidrAllowList = Codegen.empty();
        this.description = Codegen.empty();
        this.destination = Codegen.empty();
        this.encryption = Codegen.empty();
        this.flowArn = Codegen.empty();
        this.maxLatency = Codegen.empty();
        this.minLatency = Codegen.empty();
        this.name = Codegen.empty();
        this.port = Codegen.empty();
        this.protocol = Codegen.empty();
        this.remoteId = Codegen.empty();
        this.smoothingLatency = Codegen.empty();
        this.streamId = Codegen.empty();
        this.vpcInterfaceAttachment = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> cidrAllowList;
        private @Nullable Output<String> description;
        private @Nullable Output<String> destination;
        private @Nullable Output<FlowOutputEncryptionArgs> encryption;
        private Output<String> flowArn;
        private @Nullable Output<Integer> maxLatency;
        private @Nullable Output<Integer> minLatency;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> port;
        private Output<FlowOutputProtocol> protocol;
        private @Nullable Output<String> remoteId;
        private @Nullable Output<Integer> smoothingLatency;
        private @Nullable Output<String> streamId;
        private @Nullable Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowOutputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrAllowList = defaults.cidrAllowList;
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.encryption = defaults.encryption;
    	      this.flowArn = defaults.flowArn;
    	      this.maxLatency = defaults.maxLatency;
    	      this.minLatency = defaults.minLatency;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.remoteId = defaults.remoteId;
    	      this.smoothingLatency = defaults.smoothingLatency;
    	      this.streamId = defaults.streamId;
    	      this.vpcInterfaceAttachment = defaults.vpcInterfaceAttachment;
        }

        public Builder cidrAllowList(@Nullable Output<List<String>> cidrAllowList) {
            this.cidrAllowList = cidrAllowList;
            return this;
        }
        public Builder cidrAllowList(@Nullable List<String> cidrAllowList) {
            this.cidrAllowList = Codegen.ofNullable(cidrAllowList);
            return this;
        }
        public Builder cidrAllowList(String... cidrAllowList) {
            return cidrAllowList(List.of(cidrAllowList));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder destination(@Nullable Output<String> destination) {
            this.destination = destination;
            return this;
        }
        public Builder destination(@Nullable String destination) {
            this.destination = Codegen.ofNullable(destination);
            return this;
        }
        public Builder encryption(@Nullable Output<FlowOutputEncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }
        public Builder encryption(@Nullable FlowOutputEncryptionArgs encryption) {
            this.encryption = Codegen.ofNullable(encryption);
            return this;
        }
        public Builder flowArn(Output<String> flowArn) {
            this.flowArn = Objects.requireNonNull(flowArn);
            return this;
        }
        public Builder flowArn(String flowArn) {
            this.flowArn = Output.of(Objects.requireNonNull(flowArn));
            return this;
        }
        public Builder maxLatency(@Nullable Output<Integer> maxLatency) {
            this.maxLatency = maxLatency;
            return this;
        }
        public Builder maxLatency(@Nullable Integer maxLatency) {
            this.maxLatency = Codegen.ofNullable(maxLatency);
            return this;
        }
        public Builder minLatency(@Nullable Output<Integer> minLatency) {
            this.minLatency = minLatency;
            return this;
        }
        public Builder minLatency(@Nullable Integer minLatency) {
            this.minLatency = Codegen.ofNullable(minLatency);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder protocol(Output<FlowOutputProtocol> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder protocol(FlowOutputProtocol protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }
        public Builder remoteId(@Nullable Output<String> remoteId) {
            this.remoteId = remoteId;
            return this;
        }
        public Builder remoteId(@Nullable String remoteId) {
            this.remoteId = Codegen.ofNullable(remoteId);
            return this;
        }
        public Builder smoothingLatency(@Nullable Output<Integer> smoothingLatency) {
            this.smoothingLatency = smoothingLatency;
            return this;
        }
        public Builder smoothingLatency(@Nullable Integer smoothingLatency) {
            this.smoothingLatency = Codegen.ofNullable(smoothingLatency);
            return this;
        }
        public Builder streamId(@Nullable Output<String> streamId) {
            this.streamId = streamId;
            return this;
        }
        public Builder streamId(@Nullable String streamId) {
            this.streamId = Codegen.ofNullable(streamId);
            return this;
        }
        public Builder vpcInterfaceAttachment(@Nullable Output<FlowOutputVpcInterfaceAttachmentArgs> vpcInterfaceAttachment) {
            this.vpcInterfaceAttachment = vpcInterfaceAttachment;
            return this;
        }
        public Builder vpcInterfaceAttachment(@Nullable FlowOutputVpcInterfaceAttachmentArgs vpcInterfaceAttachment) {
            this.vpcInterfaceAttachment = Codegen.ofNullable(vpcInterfaceAttachment);
            return this;
        }        public FlowOutputArgs build() {
            return new FlowOutputArgs(cidrAllowList, description, destination, encryption, flowArn, maxLatency, minLatency, name, port, protocol, remoteId, smoothingLatency, streamId, vpcInterfaceAttachment);
        }
    }
}
