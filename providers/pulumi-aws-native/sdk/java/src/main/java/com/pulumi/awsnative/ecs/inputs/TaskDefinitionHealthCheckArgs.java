// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The health check command and associated configuration parameters for the container.
 * 
 */
public final class TaskDefinitionHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionHealthCheckArgs Empty = new TaskDefinitionHealthCheckArgs();

    /**
     * A string array representing the command that the container runs to determine if it is healthy.
     * 
     */
    @Import(name="command")
    private @Nullable Output<List<String>> command;

    public Optional<Output<List<String>>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
     * 
     */
    @Import(name="startPeriod")
    private @Nullable Output<Integer> startPeriod;

    public Optional<Output<Integer>> startPeriod() {
        return Optional.ofNullable(this.startPeriod);
    }

    /**
     * The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private TaskDefinitionHealthCheckArgs() {}

    private TaskDefinitionHealthCheckArgs(TaskDefinitionHealthCheckArgs $) {
        this.command = $.command;
        this.interval = $.interval;
        this.retries = $.retries;
        this.startPeriod = $.startPeriod;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskDefinitionHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskDefinitionHealthCheckArgs $;

        public Builder() {
            $ = new TaskDefinitionHealthCheckArgs();
        }

        public Builder(TaskDefinitionHealthCheckArgs defaults) {
            $ = new TaskDefinitionHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        public Builder command(@Nullable Output<List<String>> command) {
            $.command = command;
            return this;
        }

        public Builder command(List<String> command) {
            return command(Output.of(command));
        }

        public Builder command(String... command) {
            return command(List.of(command));
        }

        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        public Builder startPeriod(@Nullable Output<Integer> startPeriod) {
            $.startPeriod = startPeriod;
            return this;
        }

        public Builder startPeriod(Integer startPeriod) {
            return startPeriod(Output.of(startPeriod));
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public TaskDefinitionHealthCheckArgs build() {
            return $;
        }
    }

}
