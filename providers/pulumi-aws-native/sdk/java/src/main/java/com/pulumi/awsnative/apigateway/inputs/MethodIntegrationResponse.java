// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.inputs;

import com.pulumi.awsnative.apigateway.enums.MethodIntegrationResponseContentHandling;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MethodIntegrationResponse extends com.pulumi.resources.InvokeArgs {

    public static final MethodIntegrationResponse Empty = new MethodIntegrationResponse();

    /**
     * Specifies how to handle request payload content type conversions.
     * 
     */
    @Import(name="contentHandling")
    private @Nullable MethodIntegrationResponseContentHandling contentHandling;

    /**
     * @return Specifies how to handle request payload content type conversions.
     * 
     */
    public Optional<MethodIntegrationResponseContentHandling> contentHandling() {
        return Optional.ofNullable(this.contentHandling);
    }

    /**
     * The response parameters from the backend response that API Gateway sends to the method response.
     * 
     */
    @Import(name="responseParameters")
    private @Nullable Object responseParameters;

    /**
     * @return The response parameters from the backend response that API Gateway sends to the method response.
     * 
     */
    public Optional<Object> responseParameters() {
        return Optional.ofNullable(this.responseParameters);
    }

    /**
     * The templates that are used to transform the integration response body. Specify templates as key-value pairs (string-to-string mappings), with a content type as the key and a template as the value.
     * 
     */
    @Import(name="responseTemplates")
    private @Nullable Object responseTemplates;

    /**
     * @return The templates that are used to transform the integration response body. Specify templates as key-value pairs (string-to-string mappings), with a content type as the key and a template as the value.
     * 
     */
    public Optional<Object> responseTemplates() {
        return Optional.ofNullable(this.responseTemplates);
    }

    /**
     * A regular expression that specifies which error strings or status codes from the backend map to the integration response.
     * 
     */
    @Import(name="selectionPattern")
    private @Nullable String selectionPattern;

    /**
     * @return A regular expression that specifies which error strings or status codes from the backend map to the integration response.
     * 
     */
    public Optional<String> selectionPattern() {
        return Optional.ofNullable(this.selectionPattern);
    }

    /**
     * The status code that API Gateway uses to map the integration response to a MethodResponse status code.
     * 
     */
    @Import(name="statusCode", required=true)
    private String statusCode;

    /**
     * @return The status code that API Gateway uses to map the integration response to a MethodResponse status code.
     * 
     */
    public String statusCode() {
        return this.statusCode;
    }

    private MethodIntegrationResponse() {}

    private MethodIntegrationResponse(MethodIntegrationResponse $) {
        this.contentHandling = $.contentHandling;
        this.responseParameters = $.responseParameters;
        this.responseTemplates = $.responseTemplates;
        this.selectionPattern = $.selectionPattern;
        this.statusCode = $.statusCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MethodIntegrationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MethodIntegrationResponse $;

        public Builder() {
            $ = new MethodIntegrationResponse();
        }

        public Builder(MethodIntegrationResponse defaults) {
            $ = new MethodIntegrationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentHandling Specifies how to handle request payload content type conversions.
         * 
         * @return builder
         * 
         */
        public Builder contentHandling(@Nullable MethodIntegrationResponseContentHandling contentHandling) {
            $.contentHandling = contentHandling;
            return this;
        }

        /**
         * @param responseParameters The response parameters from the backend response that API Gateway sends to the method response.
         * 
         * @return builder
         * 
         */
        public Builder responseParameters(@Nullable Object responseParameters) {
            $.responseParameters = responseParameters;
            return this;
        }

        /**
         * @param responseTemplates The templates that are used to transform the integration response body. Specify templates as key-value pairs (string-to-string mappings), with a content type as the key and a template as the value.
         * 
         * @return builder
         * 
         */
        public Builder responseTemplates(@Nullable Object responseTemplates) {
            $.responseTemplates = responseTemplates;
            return this;
        }

        /**
         * @param selectionPattern A regular expression that specifies which error strings or status codes from the backend map to the integration response.
         * 
         * @return builder
         * 
         */
        public Builder selectionPattern(@Nullable String selectionPattern) {
            $.selectionPattern = selectionPattern;
            return this;
        }

        /**
         * @param statusCode The status code that API Gateway uses to map the integration response to a MethodResponse status code.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(String statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        public MethodIntegrationResponse build() {
            $.statusCode = Objects.requireNonNull($.statusCode, "expected parameter 'statusCode' to be non-null");
            return $;
        }
    }

}
