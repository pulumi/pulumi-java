// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;The theme colors that apply to UI and to charts, excluding data colors. The colors
 *             description is a hexadecimal color code that consists of six alphanumerical characters,
 *             prefixed with &lt;code&gt;#&lt;/code&gt;, for example #37BFF5. For more information, see &lt;a href=&#34;https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html&#34;&gt;Using Themes in Amazon QuickSight&lt;/a&gt; in the &lt;i&gt;Amazon QuickSight User
 *                 Guide.&lt;/i&gt;
 *         &lt;/p&gt;
 * 
 */
public final class ThemeUIColorPalette extends com.pulumi.resources.InvokeArgs {

    public static final ThemeUIColorPalette Empty = new ThemeUIColorPalette();

    /**
     * &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
     * 
     */
    @Import(name="accent")
      private final @Nullable String accent;

    public Optional<String> accent() {
        return this.accent == null ? Optional.empty() : Optional.ofNullable(this.accent);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             accent color.&lt;/p&gt;
     * 
     */
    @Import(name="accentForeground")
      private final @Nullable String accentForeground;

    public Optional<String> accentForeground() {
        return this.accentForeground == null ? Optional.empty() : Optional.ofNullable(this.accentForeground);
    }

    /**
     * &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
     * 
     */
    @Import(name="danger")
      private final @Nullable String danger;

    public Optional<String> danger() {
        return this.danger == null ? Optional.empty() : Optional.ofNullable(this.danger);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             error color.&lt;/p&gt;
     * 
     */
    @Import(name="dangerForeground")
      private final @Nullable String dangerForeground;

    public Optional<String> dangerForeground() {
        return this.dangerForeground == null ? Optional.empty() : Optional.ofNullable(this.dangerForeground);
    }

    /**
     * &lt;p&gt;The color that applies to the names of fields that are identified as
     *             dimensions.&lt;/p&gt;
     * 
     */
    @Import(name="dimension")
      private final @Nullable String dimension;

    public Optional<String> dimension() {
        return this.dimension == null ? Optional.empty() : Optional.ofNullable(this.dimension);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             dimension color.&lt;/p&gt;
     * 
     */
    @Import(name="dimensionForeground")
      private final @Nullable String dimensionForeground;

    public Optional<String> dimensionForeground() {
        return this.dimensionForeground == null ? Optional.empty() : Optional.ofNullable(this.dimensionForeground);
    }

    /**
     * &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
     * 
     */
    @Import(name="measure")
      private final @Nullable String measure;

    public Optional<String> measure() {
        return this.measure == null ? Optional.empty() : Optional.ofNullable(this.measure);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             measure color.&lt;/p&gt;
     * 
     */
    @Import(name="measureForeground")
      private final @Nullable String measureForeground;

    public Optional<String> measureForeground() {
        return this.measureForeground == null ? Optional.empty() : Optional.ofNullable(this.measureForeground);
    }

    /**
     * &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
     * 
     */
    @Import(name="primaryBackground")
      private final @Nullable String primaryBackground;

    public Optional<String> primaryBackground() {
        return this.primaryBackground == null ? Optional.empty() : Optional.ofNullable(this.primaryBackground);
    }

    /**
     * &lt;p&gt;The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
     * 
     */
    @Import(name="primaryForeground")
      private final @Nullable String primaryForeground;

    public Optional<String> primaryForeground() {
        return this.primaryForeground == null ? Optional.empty() : Optional.ofNullable(this.primaryForeground);
    }

    /**
     * &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
     * 
     */
    @Import(name="secondaryBackground")
      private final @Nullable String secondaryBackground;

    public Optional<String> secondaryBackground() {
        return this.secondaryBackground == null ? Optional.empty() : Optional.ofNullable(this.secondaryBackground);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.&lt;/p&gt;
     * 
     */
    @Import(name="secondaryForeground")
      private final @Nullable String secondaryForeground;

    public Optional<String> secondaryForeground() {
        return this.secondaryForeground == null ? Optional.empty() : Optional.ofNullable(this.secondaryForeground);
    }

    /**
     * &lt;p&gt;The color that applies to success messages, for example the check mark for a
     *             successful download.&lt;/p&gt;
     * 
     */
    @Import(name="success")
      private final @Nullable String success;

    public Optional<String> success() {
        return this.success == null ? Optional.empty() : Optional.ofNullable(this.success);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             success color.&lt;/p&gt;
     * 
     */
    @Import(name="successForeground")
      private final @Nullable String successForeground;

    public Optional<String> successForeground() {
        return this.successForeground == null ? Optional.empty() : Optional.ofNullable(this.successForeground);
    }

    /**
     * &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
     * 
     */
    @Import(name="warning")
      private final @Nullable String warning;

    public Optional<String> warning() {
        return this.warning == null ? Optional.empty() : Optional.ofNullable(this.warning);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             warning color.&lt;/p&gt;
     * 
     */
    @Import(name="warningForeground")
      private final @Nullable String warningForeground;

    public Optional<String> warningForeground() {
        return this.warningForeground == null ? Optional.empty() : Optional.ofNullable(this.warningForeground);
    }

    public ThemeUIColorPalette(
        @Nullable String accent,
        @Nullable String accentForeground,
        @Nullable String danger,
        @Nullable String dangerForeground,
        @Nullable String dimension,
        @Nullable String dimensionForeground,
        @Nullable String measure,
        @Nullable String measureForeground,
        @Nullable String primaryBackground,
        @Nullable String primaryForeground,
        @Nullable String secondaryBackground,
        @Nullable String secondaryForeground,
        @Nullable String success,
        @Nullable String successForeground,
        @Nullable String warning,
        @Nullable String warningForeground) {
        this.accent = accent;
        this.accentForeground = accentForeground;
        this.danger = danger;
        this.dangerForeground = dangerForeground;
        this.dimension = dimension;
        this.dimensionForeground = dimensionForeground;
        this.measure = measure;
        this.measureForeground = measureForeground;
        this.primaryBackground = primaryBackground;
        this.primaryForeground = primaryForeground;
        this.secondaryBackground = secondaryBackground;
        this.secondaryForeground = secondaryForeground;
        this.success = success;
        this.successForeground = successForeground;
        this.warning = warning;
        this.warningForeground = warningForeground;
    }

    private ThemeUIColorPalette() {
        this.accent = null;
        this.accentForeground = null;
        this.danger = null;
        this.dangerForeground = null;
        this.dimension = null;
        this.dimensionForeground = null;
        this.measure = null;
        this.measureForeground = null;
        this.primaryBackground = null;
        this.primaryForeground = null;
        this.secondaryBackground = null;
        this.secondaryForeground = null;
        this.success = null;
        this.successForeground = null;
        this.warning = null;
        this.warningForeground = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThemeUIColorPalette defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accent;
        private @Nullable String accentForeground;
        private @Nullable String danger;
        private @Nullable String dangerForeground;
        private @Nullable String dimension;
        private @Nullable String dimensionForeground;
        private @Nullable String measure;
        private @Nullable String measureForeground;
        private @Nullable String primaryBackground;
        private @Nullable String primaryForeground;
        private @Nullable String secondaryBackground;
        private @Nullable String secondaryForeground;
        private @Nullable String success;
        private @Nullable String successForeground;
        private @Nullable String warning;
        private @Nullable String warningForeground;

        public Builder() {
    	      // Empty
        }

        public Builder(ThemeUIColorPalette defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accent = defaults.accent;
    	      this.accentForeground = defaults.accentForeground;
    	      this.danger = defaults.danger;
    	      this.dangerForeground = defaults.dangerForeground;
    	      this.dimension = defaults.dimension;
    	      this.dimensionForeground = defaults.dimensionForeground;
    	      this.measure = defaults.measure;
    	      this.measureForeground = defaults.measureForeground;
    	      this.primaryBackground = defaults.primaryBackground;
    	      this.primaryForeground = defaults.primaryForeground;
    	      this.secondaryBackground = defaults.secondaryBackground;
    	      this.secondaryForeground = defaults.secondaryForeground;
    	      this.success = defaults.success;
    	      this.successForeground = defaults.successForeground;
    	      this.warning = defaults.warning;
    	      this.warningForeground = defaults.warningForeground;
        }

        public Builder accent(@Nullable String accent) {
            this.accent = accent;
            return this;
        }
        public Builder accentForeground(@Nullable String accentForeground) {
            this.accentForeground = accentForeground;
            return this;
        }
        public Builder danger(@Nullable String danger) {
            this.danger = danger;
            return this;
        }
        public Builder dangerForeground(@Nullable String dangerForeground) {
            this.dangerForeground = dangerForeground;
            return this;
        }
        public Builder dimension(@Nullable String dimension) {
            this.dimension = dimension;
            return this;
        }
        public Builder dimensionForeground(@Nullable String dimensionForeground) {
            this.dimensionForeground = dimensionForeground;
            return this;
        }
        public Builder measure(@Nullable String measure) {
            this.measure = measure;
            return this;
        }
        public Builder measureForeground(@Nullable String measureForeground) {
            this.measureForeground = measureForeground;
            return this;
        }
        public Builder primaryBackground(@Nullable String primaryBackground) {
            this.primaryBackground = primaryBackground;
            return this;
        }
        public Builder primaryForeground(@Nullable String primaryForeground) {
            this.primaryForeground = primaryForeground;
            return this;
        }
        public Builder secondaryBackground(@Nullable String secondaryBackground) {
            this.secondaryBackground = secondaryBackground;
            return this;
        }
        public Builder secondaryForeground(@Nullable String secondaryForeground) {
            this.secondaryForeground = secondaryForeground;
            return this;
        }
        public Builder success(@Nullable String success) {
            this.success = success;
            return this;
        }
        public Builder successForeground(@Nullable String successForeground) {
            this.successForeground = successForeground;
            return this;
        }
        public Builder warning(@Nullable String warning) {
            this.warning = warning;
            return this;
        }
        public Builder warningForeground(@Nullable String warningForeground) {
            this.warningForeground = warningForeground;
            return this;
        }        public ThemeUIColorPalette build() {
            return new ThemeUIColorPalette(accent, accentForeground, danger, dangerForeground, dimension, dimensionForeground, measure, measureForeground, primaryBackground, primaryForeground, secondaryBackground, secondaryForeground, success, successForeground, warning, warningForeground);
        }
    }
}
