// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;The theme colors that apply to UI and to charts, excluding data colors. The colors
 *             description is a hexadecimal color code that consists of six alphanumerical characters,
 *             prefixed with &lt;code&gt;#&lt;/code&gt;, for example #37BFF5. For more information, see &lt;a href=&#34;https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html&#34;&gt;Using Themes in Amazon QuickSight&lt;/a&gt; in the &lt;i&gt;Amazon QuickSight User
 *                 Guide.&lt;/i&gt;
 *         &lt;/p&gt;
 * 
 */
public final class ThemeUIColorPalette extends com.pulumi.resources.InvokeArgs {

    public static final ThemeUIColorPalette Empty = new ThemeUIColorPalette();

    /**
     * &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
     * 
     */
    @Import(name="accent")
    private @Nullable String accent;

    /**
     * @return &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
     * 
     */
    public Optional<String> accent() {
        return Optional.ofNullable(this.accent);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             accent color.&lt;/p&gt;
     * 
     */
    @Import(name="accentForeground")
    private @Nullable String accentForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             accent color.&lt;/p&gt;
     * 
     */
    public Optional<String> accentForeground() {
        return Optional.ofNullable(this.accentForeground);
    }

    /**
     * &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
     * 
     */
    @Import(name="danger")
    private @Nullable String danger;

    /**
     * @return &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
     * 
     */
    public Optional<String> danger() {
        return Optional.ofNullable(this.danger);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             error color.&lt;/p&gt;
     * 
     */
    @Import(name="dangerForeground")
    private @Nullable String dangerForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             error color.&lt;/p&gt;
     * 
     */
    public Optional<String> dangerForeground() {
        return Optional.ofNullable(this.dangerForeground);
    }

    /**
     * &lt;p&gt;The color that applies to the names of fields that are identified as
     *             dimensions.&lt;/p&gt;
     * 
     */
    @Import(name="dimension")
    private @Nullable String dimension;

    /**
     * @return &lt;p&gt;The color that applies to the names of fields that are identified as
     *             dimensions.&lt;/p&gt;
     * 
     */
    public Optional<String> dimension() {
        return Optional.ofNullable(this.dimension);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             dimension color.&lt;/p&gt;
     * 
     */
    @Import(name="dimensionForeground")
    private @Nullable String dimensionForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             dimension color.&lt;/p&gt;
     * 
     */
    public Optional<String> dimensionForeground() {
        return Optional.ofNullable(this.dimensionForeground);
    }

    /**
     * &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
     * 
     */
    @Import(name="measure")
    private @Nullable String measure;

    /**
     * @return &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
     * 
     */
    public Optional<String> measure() {
        return Optional.ofNullable(this.measure);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             measure color.&lt;/p&gt;
     * 
     */
    @Import(name="measureForeground")
    private @Nullable String measureForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             measure color.&lt;/p&gt;
     * 
     */
    public Optional<String> measureForeground() {
        return Optional.ofNullable(this.measureForeground);
    }

    /**
     * &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
     * 
     */
    @Import(name="primaryBackground")
    private @Nullable String primaryBackground;

    /**
     * @return &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
     * 
     */
    public Optional<String> primaryBackground() {
        return Optional.ofNullable(this.primaryBackground);
    }

    /**
     * &lt;p&gt;The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
     * 
     */
    @Import(name="primaryForeground")
    private @Nullable String primaryForeground;

    /**
     * @return &lt;p&gt;The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
     * 
     */
    public Optional<String> primaryForeground() {
        return Optional.ofNullable(this.primaryForeground);
    }

    /**
     * &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
     * 
     */
    @Import(name="secondaryBackground")
    private @Nullable String secondaryBackground;

    /**
     * @return &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
     * 
     */
    public Optional<String> secondaryBackground() {
        return Optional.ofNullable(this.secondaryBackground);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.&lt;/p&gt;
     * 
     */
    @Import(name="secondaryForeground")
    private @Nullable String secondaryForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.&lt;/p&gt;
     * 
     */
    public Optional<String> secondaryForeground() {
        return Optional.ofNullable(this.secondaryForeground);
    }

    /**
     * &lt;p&gt;The color that applies to success messages, for example the check mark for a
     *             successful download.&lt;/p&gt;
     * 
     */
    @Import(name="success")
    private @Nullable String success;

    /**
     * @return &lt;p&gt;The color that applies to success messages, for example the check mark for a
     *             successful download.&lt;/p&gt;
     * 
     */
    public Optional<String> success() {
        return Optional.ofNullable(this.success);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             success color.&lt;/p&gt;
     * 
     */
    @Import(name="successForeground")
    private @Nullable String successForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             success color.&lt;/p&gt;
     * 
     */
    public Optional<String> successForeground() {
        return Optional.ofNullable(this.successForeground);
    }

    /**
     * &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
     * 
     */
    @Import(name="warning")
    private @Nullable String warning;

    /**
     * @return &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
     * 
     */
    public Optional<String> warning() {
        return Optional.ofNullable(this.warning);
    }

    /**
     * &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             warning color.&lt;/p&gt;
     * 
     */
    @Import(name="warningForeground")
    private @Nullable String warningForeground;

    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             warning color.&lt;/p&gt;
     * 
     */
    public Optional<String> warningForeground() {
        return Optional.ofNullable(this.warningForeground);
    }

    private ThemeUIColorPalette() {}

    private ThemeUIColorPalette(ThemeUIColorPalette $) {
        this.accent = $.accent;
        this.accentForeground = $.accentForeground;
        this.danger = $.danger;
        this.dangerForeground = $.dangerForeground;
        this.dimension = $.dimension;
        this.dimensionForeground = $.dimensionForeground;
        this.measure = $.measure;
        this.measureForeground = $.measureForeground;
        this.primaryBackground = $.primaryBackground;
        this.primaryForeground = $.primaryForeground;
        this.secondaryBackground = $.secondaryBackground;
        this.secondaryForeground = $.secondaryForeground;
        this.success = $.success;
        this.successForeground = $.successForeground;
        this.warning = $.warning;
        this.warningForeground = $.warningForeground;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeUIColorPalette defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeUIColorPalette $;

        public Builder() {
            $ = new ThemeUIColorPalette();
        }

        public Builder(ThemeUIColorPalette defaults) {
            $ = new ThemeUIColorPalette(Objects.requireNonNull(defaults));
        }

        /**
         * @param accent &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder accent(@Nullable String accent) {
            $.accent = accent;
            return this;
        }

        /**
         * @param accentForeground &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
         *             accent color.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder accentForeground(@Nullable String accentForeground) {
            $.accentForeground = accentForeground;
            return this;
        }

        /**
         * @param danger &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder danger(@Nullable String danger) {
            $.danger = danger;
            return this;
        }

        /**
         * @param dangerForeground &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
         *             error color.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder dangerForeground(@Nullable String dangerForeground) {
            $.dangerForeground = dangerForeground;
            return this;
        }

        /**
         * @param dimension &lt;p&gt;The color that applies to the names of fields that are identified as
         *             dimensions.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder dimension(@Nullable String dimension) {
            $.dimension = dimension;
            return this;
        }

        /**
         * @param dimensionForeground &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
         *             dimension color.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder dimensionForeground(@Nullable String dimensionForeground) {
            $.dimensionForeground = dimensionForeground;
            return this;
        }

        /**
         * @param measure &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder measure(@Nullable String measure) {
            $.measure = measure;
            return this;
        }

        /**
         * @param measureForeground &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
         *             measure color.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder measureForeground(@Nullable String measureForeground) {
            $.measureForeground = measureForeground;
            return this;
        }

        /**
         * @param primaryBackground &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder primaryBackground(@Nullable String primaryBackground) {
            $.primaryBackground = primaryBackground;
            return this;
        }

        /**
         * @param primaryForeground &lt;p&gt;The color of text and other foreground elements that appear over the primary
         *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder primaryForeground(@Nullable String primaryForeground) {
            $.primaryForeground = primaryForeground;
            return this;
        }

        /**
         * @param secondaryBackground &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder secondaryBackground(@Nullable String secondaryBackground) {
            $.secondaryBackground = secondaryBackground;
            return this;
        }

        /**
         * @param secondaryForeground &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
         *             appears over the secondary background.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder secondaryForeground(@Nullable String secondaryForeground) {
            $.secondaryForeground = secondaryForeground;
            return this;
        }

        /**
         * @param success &lt;p&gt;The color that applies to success messages, for example the check mark for a
         *             successful download.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder success(@Nullable String success) {
            $.success = success;
            return this;
        }

        /**
         * @param successForeground &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
         *             success color.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder successForeground(@Nullable String successForeground) {
            $.successForeground = successForeground;
            return this;
        }

        /**
         * @param warning &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder warning(@Nullable String warning) {
            $.warning = warning;
            return this;
        }

        /**
         * @param warningForeground &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
         *             warning color.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder warningForeground(@Nullable String warningForeground) {
            $.warningForeground = warningForeground;
            return this;
        }

        public ThemeUIColorPalette build() {
            return $;
        }
    }

}
