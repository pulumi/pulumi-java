// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.awsnative.iotevents.inputs.DetectorModelAction;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the ` actions  `performed and the next `state` entered when a `condition` evaluates to `TRUE`.
 * 
 */
public final class DetectorModelTransitionEvent extends com.pulumi.resources.InvokeArgs {

    public static final DetectorModelTransitionEvent Empty = new DetectorModelTransitionEvent();

    /**
     * The actions to be performed.
     * 
     */
    @Import(name="actions")
    private @Nullable List<DetectorModelAction> actions;

    /**
     * @return The actions to be performed.
     * 
     */
    public Optional<List<DetectorModelAction>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
     * 
     */
    @Import(name="condition", required=true)
    private String condition;

    /**
     * @return A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
     * 
     */
    public String condition() {
        return this.condition;
    }

    /**
     * The name of the event.
     * 
     */
    @Import(name="eventName", required=true)
    private String eventName;

    /**
     * @return The name of the event.
     * 
     */
    public String eventName() {
        return this.eventName;
    }

    /**
     * The next state to enter.
     * 
     */
    @Import(name="nextState", required=true)
    private String nextState;

    /**
     * @return The next state to enter.
     * 
     */
    public String nextState() {
        return this.nextState;
    }

    private DetectorModelTransitionEvent() {}

    private DetectorModelTransitionEvent(DetectorModelTransitionEvent $) {
        this.actions = $.actions;
        this.condition = $.condition;
        this.eventName = $.eventName;
        this.nextState = $.nextState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorModelTransitionEvent defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorModelTransitionEvent $;

        public Builder() {
            $ = new DetectorModelTransitionEvent();
        }

        public Builder(DetectorModelTransitionEvent defaults) {
            $ = new DetectorModelTransitionEvent(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions The actions to be performed.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable List<DetectorModelAction> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions The actions to be performed.
         * 
         * @return builder
         * 
         */
        public Builder actions(DetectorModelAction... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param condition A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param eventName The name of the event.
         * 
         * @return builder
         * 
         */
        public Builder eventName(String eventName) {
            $.eventName = eventName;
            return this;
        }

        /**
         * @param nextState The next state to enter.
         * 
         * @return builder
         * 
         */
        public Builder nextState(String nextState) {
            $.nextState = nextState;
            return this;
        }

        public DetectorModelTransitionEvent build() {
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            $.eventName = Objects.requireNonNull($.eventName, "expected parameter 'eventName' to be non-null");
            $.nextState = Objects.requireNonNull($.nextState, "expected parameter 'nextState' to be non-null");
            return $;
        }
    }

}
