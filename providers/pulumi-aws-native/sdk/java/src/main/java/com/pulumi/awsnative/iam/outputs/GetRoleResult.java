// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iam.outputs;

import com.pulumi.awsnative.iam.outputs.RolePolicy;
import com.pulumi.awsnative.iam.outputs.RoleTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRoleResult {
    /**
     * @return The Amazon Resource Name (ARN) for the role.
     * 
     */
    private final @Nullable String arn;
    /**
     * @return The trust policy that is associated with this role.
     * 
     */
    private final @Nullable Object assumeRolePolicyDocument;
    /**
     * @return A description of the role that you provide.
     * 
     */
    private final @Nullable String description;
    /**
     * @return A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
     * 
     */
    private final @Nullable List<String> managedPolicyArns;
    /**
     * @return The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    private final @Nullable Integer maxSessionDuration;
    /**
     * @return The ARN of the policy used to set the permissions boundary for the role.
     * 
     */
    private final @Nullable String permissionsBoundary;
    /**
     * @return Adds or updates an inline policy document that is embedded in the specified IAM role.
     * 
     */
    private final @Nullable List<RolePolicy> policies;
    /**
     * @return The stable and unique string identifying the role.
     * 
     */
    private final @Nullable String roleId;
    /**
     * @return A list of tags that are attached to the role.
     * 
     */
    private final @Nullable List<RoleTag> tags;

    @CustomType.Constructor
    private GetRoleResult(
        @CustomType.Parameter("arn") @Nullable String arn,
        @CustomType.Parameter("assumeRolePolicyDocument") @Nullable Object assumeRolePolicyDocument,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("managedPolicyArns") @Nullable List<String> managedPolicyArns,
        @CustomType.Parameter("maxSessionDuration") @Nullable Integer maxSessionDuration,
        @CustomType.Parameter("permissionsBoundary") @Nullable String permissionsBoundary,
        @CustomType.Parameter("policies") @Nullable List<RolePolicy> policies,
        @CustomType.Parameter("roleId") @Nullable String roleId,
        @CustomType.Parameter("tags") @Nullable List<RoleTag> tags) {
        this.arn = arn;
        this.assumeRolePolicyDocument = assumeRolePolicyDocument;
        this.description = description;
        this.managedPolicyArns = managedPolicyArns;
        this.maxSessionDuration = maxSessionDuration;
        this.permissionsBoundary = permissionsBoundary;
        this.policies = policies;
        this.roleId = roleId;
        this.tags = tags;
    }

    /**
     * @return The Amazon Resource Name (ARN) for the role.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return The trust policy that is associated with this role.
     * 
     */
    public Optional<Object> assumeRolePolicyDocument() {
        return Optional.ofNullable(this.assumeRolePolicyDocument);
    }
    /**
     * @return A description of the role that you provide.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
     * 
     */
    public List<String> managedPolicyArns() {
        return this.managedPolicyArns == null ? List.of() : this.managedPolicyArns;
    }
    /**
     * @return The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    public Optional<Integer> maxSessionDuration() {
        return Optional.ofNullable(this.maxSessionDuration);
    }
    /**
     * @return The ARN of the policy used to set the permissions boundary for the role.
     * 
     */
    public Optional<String> permissionsBoundary() {
        return Optional.ofNullable(this.permissionsBoundary);
    }
    /**
     * @return Adds or updates an inline policy document that is embedded in the specified IAM role.
     * 
     */
    public List<RolePolicy> policies() {
        return this.policies == null ? List.of() : this.policies;
    }
    /**
     * @return The stable and unique string identifying the role.
     * 
     */
    public Optional<String> roleId() {
        return Optional.ofNullable(this.roleId);
    }
    /**
     * @return A list of tags that are attached to the role.
     * 
     */
    public List<RoleTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String arn;
        private @Nullable Object assumeRolePolicyDocument;
        private @Nullable String description;
        private @Nullable List<String> managedPolicyArns;
        private @Nullable Integer maxSessionDuration;
        private @Nullable String permissionsBoundary;
        private @Nullable List<RolePolicy> policies;
        private @Nullable String roleId;
        private @Nullable List<RoleTag> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRoleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.assumeRolePolicyDocument = defaults.assumeRolePolicyDocument;
    	      this.description = defaults.description;
    	      this.managedPolicyArns = defaults.managedPolicyArns;
    	      this.maxSessionDuration = defaults.maxSessionDuration;
    	      this.permissionsBoundary = defaults.permissionsBoundary;
    	      this.policies = defaults.policies;
    	      this.roleId = defaults.roleId;
    	      this.tags = defaults.tags;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        public Builder assumeRolePolicyDocument(@Nullable Object assumeRolePolicyDocument) {
            this.assumeRolePolicyDocument = assumeRolePolicyDocument;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder managedPolicyArns(@Nullable List<String> managedPolicyArns) {
            this.managedPolicyArns = managedPolicyArns;
            return this;
        }
        public Builder managedPolicyArns(String... managedPolicyArns) {
            return managedPolicyArns(List.of(managedPolicyArns));
        }
        public Builder maxSessionDuration(@Nullable Integer maxSessionDuration) {
            this.maxSessionDuration = maxSessionDuration;
            return this;
        }
        public Builder permissionsBoundary(@Nullable String permissionsBoundary) {
            this.permissionsBoundary = permissionsBoundary;
            return this;
        }
        public Builder policies(@Nullable List<RolePolicy> policies) {
            this.policies = policies;
            return this;
        }
        public Builder policies(RolePolicy... policies) {
            return policies(List.of(policies));
        }
        public Builder roleId(@Nullable String roleId) {
            this.roleId = roleId;
            return this;
        }
        public Builder tags(@Nullable List<RoleTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(RoleTag... tags) {
            return tags(List.of(tags));
        }        public GetRoleResult build() {
            return new GetRoleResult(arn, assumeRolePolicyDocument, description, managedPolicyArns, maxSessionDuration, permissionsBoundary, policies, roleId, tags);
        }
    }
}
