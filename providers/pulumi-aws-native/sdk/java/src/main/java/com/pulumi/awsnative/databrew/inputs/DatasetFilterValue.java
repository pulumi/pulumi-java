// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A key-value pair to associate expression variable names with their values
 * 
 */
public final class DatasetFilterValue extends com.pulumi.resources.InvokeArgs {

    public static final DatasetFilterValue Empty = new DatasetFilterValue();

    @Import(name="value", required=true)
    private String value;

    public String value() {
        return this.value;
    }

    /**
     * Variable name
     * 
     */
    @Import(name="valueReference", required=true)
    private String valueReference;

    /**
     * @return Variable name
     * 
     */
    public String valueReference() {
        return this.valueReference;
    }

    private DatasetFilterValue() {}

    private DatasetFilterValue(DatasetFilterValue $) {
        this.value = $.value;
        this.valueReference = $.valueReference;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetFilterValue defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetFilterValue $;

        public Builder() {
            $ = new DatasetFilterValue();
        }

        public Builder(DatasetFilterValue defaults) {
            $ = new DatasetFilterValue(Objects.requireNonNull(defaults));
        }

        public Builder value(String value) {
            $.value = value;
            return this;
        }

        /**
         * @param valueReference Variable name
         * 
         * @return builder
         * 
         */
        public Builder valueReference(String valueReference) {
            $.valueReference = valueReference;
            return this;
        }

        public DatasetFilterValue build() {
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            $.valueReference = Objects.requireNonNull($.valueReference, "expected parameter 'valueReference' to be non-null");
            return $;
        }
    }

}
