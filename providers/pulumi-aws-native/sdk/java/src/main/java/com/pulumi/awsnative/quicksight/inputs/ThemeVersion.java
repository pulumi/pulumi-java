// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.awsnative.quicksight.enums.ThemeResourceStatus;
import com.pulumi.awsnative.quicksight.inputs.ThemeConfiguration;
import com.pulumi.awsnative.quicksight.inputs.ThemeError;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;A version of a theme.&lt;/p&gt;
 * 
 */
public final class ThemeVersion extends com.pulumi.resources.InvokeArgs {

    public static final ThemeVersion Empty = new ThemeVersion();

    /**
     * &lt;p&gt;The Amazon Resource Name (ARN) of the resource.&lt;/p&gt;
     * 
     */
    @Import(name="arn")
    private @Nullable String arn;

    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * &lt;p&gt;The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
     *             themes initially inherit from a default QuickSight theme.&lt;/p&gt;
     * 
     */
    @Import(name="baseThemeId")
    private @Nullable String baseThemeId;

    public Optional<String> baseThemeId() {
        return Optional.ofNullable(this.baseThemeId);
    }

    @Import(name="configuration")
    private @Nullable ThemeConfiguration configuration;

    public Optional<ThemeConfiguration> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * &lt;p&gt;The date and time that this theme version was created.&lt;/p&gt;
     * 
     */
    @Import(name="createdTime")
    private @Nullable String createdTime;

    public Optional<String> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * &lt;p&gt;The description of the theme.&lt;/p&gt;
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * &lt;p&gt;Errors associated with the theme.&lt;/p&gt;
     * 
     */
    @Import(name="errors")
    private @Nullable List<ThemeError> errors;

    public Optional<List<ThemeError>> errors() {
        return Optional.ofNullable(this.errors);
    }

    @Import(name="status")
    private @Nullable ThemeResourceStatus status;

    public Optional<ThemeResourceStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * &lt;p&gt;The version number of the theme.&lt;/p&gt;
     * 
     */
    @Import(name="versionNumber")
    private @Nullable Double versionNumber;

    public Optional<Double> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    private ThemeVersion() {}

    private ThemeVersion(ThemeVersion $) {
        this.arn = $.arn;
        this.baseThemeId = $.baseThemeId;
        this.configuration = $.configuration;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.errors = $.errors;
        this.status = $.status;
        this.versionNumber = $.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeVersion defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeVersion $;

        public Builder() {
            $ = new ThemeVersion();
        }

        public Builder(ThemeVersion defaults) {
            $ = new ThemeVersion(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable String arn) {
            $.arn = arn;
            return this;
        }

        public Builder baseThemeId(@Nullable String baseThemeId) {
            $.baseThemeId = baseThemeId;
            return this;
        }

        public Builder configuration(@Nullable ThemeConfiguration configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder createdTime(@Nullable String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder errors(@Nullable List<ThemeError> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(ThemeError... errors) {
            return errors(List.of(errors));
        }

        public Builder status(@Nullable ThemeResourceStatus status) {
            $.status = status;
            return this;
        }

        public Builder versionNumber(@Nullable Double versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        public ThemeVersion build() {
            return $;
        }
    }

}
