// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.rds;

import com.pulumi.awsnative.rds.enums.DBProxyEngineFamily;
import com.pulumi.awsnative.rds.inputs.DBProxyAuthFormatArgs;
import com.pulumi.awsnative.rds.inputs.DBProxyTagFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DBProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DBProxyArgs Empty = new DBProxyArgs();

    /**
     * The authorization mechanism that the proxy uses.
     * 
     */
    @Import(name="auth", required=true)
      private final Output<List<DBProxyAuthFormatArgs>> auth;

    public Output<List<DBProxyAuthFormatArgs>> auth() {
        return this.auth;
    }

    /**
     * The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
     * 
     */
    @Import(name="dBProxyName")
      private final @Nullable Output<String> dBProxyName;

    public Output<String> dBProxyName() {
        return this.dBProxyName == null ? Codegen.empty() : this.dBProxyName;
    }

    /**
     * Whether the proxy includes detailed information about SQL statements in its logs.
     * 
     */
    @Import(name="debugLogging")
      private final @Nullable Output<Boolean> debugLogging;

    public Output<Boolean> debugLogging() {
        return this.debugLogging == null ? Codegen.empty() : this.debugLogging;
    }

    /**
     * The kinds of databases that the proxy can connect to.
     * 
     */
    @Import(name="engineFamily", required=true)
      private final Output<DBProxyEngineFamily> engineFamily;

    public Output<DBProxyEngineFamily> engineFamily() {
        return this.engineFamily;
    }

    /**
     * The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
     * 
     */
    @Import(name="idleClientTimeout")
      private final @Nullable Output<Integer> idleClientTimeout;

    public Output<Integer> idleClientTimeout() {
        return this.idleClientTimeout == null ? Codegen.empty() : this.idleClientTimeout;
    }

    /**
     * A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
     * 
     */
    @Import(name="requireTLS")
      private final @Nullable Output<Boolean> requireTLS;

    public Output<Boolean> requireTLS() {
        return this.requireTLS == null ? Codegen.empty() : this.requireTLS;
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
     * 
     */
    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<DBProxyTagFormatArgs>> tags;

    public Output<List<DBProxyTagFormatArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * VPC security group IDs to associate with the new proxy.
     * 
     */
    @Import(name="vpcSecurityGroupIds")
      private final @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Output<List<String>> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Codegen.empty() : this.vpcSecurityGroupIds;
    }

    /**
     * VPC subnet IDs to associate with the new proxy.
     * 
     */
    @Import(name="vpcSubnetIds", required=true)
      private final Output<List<String>> vpcSubnetIds;

    public Output<List<String>> vpcSubnetIds() {
        return this.vpcSubnetIds;
    }

    public DBProxyArgs(
        Output<List<DBProxyAuthFormatArgs>> auth,
        @Nullable Output<String> dBProxyName,
        @Nullable Output<Boolean> debugLogging,
        Output<DBProxyEngineFamily> engineFamily,
        @Nullable Output<Integer> idleClientTimeout,
        @Nullable Output<Boolean> requireTLS,
        Output<String> roleArn,
        @Nullable Output<List<DBProxyTagFormatArgs>> tags,
        @Nullable Output<List<String>> vpcSecurityGroupIds,
        Output<List<String>> vpcSubnetIds) {
        this.auth = Objects.requireNonNull(auth, "expected parameter 'auth' to be non-null");
        this.dBProxyName = dBProxyName;
        this.debugLogging = debugLogging;
        this.engineFamily = Objects.requireNonNull(engineFamily, "expected parameter 'engineFamily' to be non-null");
        this.idleClientTimeout = idleClientTimeout;
        this.requireTLS = requireTLS;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.tags = tags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
        this.vpcSubnetIds = Objects.requireNonNull(vpcSubnetIds, "expected parameter 'vpcSubnetIds' to be non-null");
    }

    private DBProxyArgs() {
        this.auth = Codegen.empty();
        this.dBProxyName = Codegen.empty();
        this.debugLogging = Codegen.empty();
        this.engineFamily = Codegen.empty();
        this.idleClientTimeout = Codegen.empty();
        this.requireTLS = Codegen.empty();
        this.roleArn = Codegen.empty();
        this.tags = Codegen.empty();
        this.vpcSecurityGroupIds = Codegen.empty();
        this.vpcSubnetIds = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DBProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<DBProxyAuthFormatArgs>> auth;
        private @Nullable Output<String> dBProxyName;
        private @Nullable Output<Boolean> debugLogging;
        private Output<DBProxyEngineFamily> engineFamily;
        private @Nullable Output<Integer> idleClientTimeout;
        private @Nullable Output<Boolean> requireTLS;
        private Output<String> roleArn;
        private @Nullable Output<List<DBProxyTagFormatArgs>> tags;
        private @Nullable Output<List<String>> vpcSecurityGroupIds;
        private Output<List<String>> vpcSubnetIds;

        public Builder() {
    	      // Empty
        }

        public Builder(DBProxyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.dBProxyName = defaults.dBProxyName;
    	      this.debugLogging = defaults.debugLogging;
    	      this.engineFamily = defaults.engineFamily;
    	      this.idleClientTimeout = defaults.idleClientTimeout;
    	      this.requireTLS = defaults.requireTLS;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
    	      this.vpcSubnetIds = defaults.vpcSubnetIds;
        }

        public Builder auth(Output<List<DBProxyAuthFormatArgs>> auth) {
            this.auth = Objects.requireNonNull(auth);
            return this;
        }
        public Builder auth(List<DBProxyAuthFormatArgs> auth) {
            this.auth = Output.of(Objects.requireNonNull(auth));
            return this;
        }
        public Builder auth(DBProxyAuthFormatArgs... auth) {
            return auth(List.of(auth));
        }
        public Builder dBProxyName(@Nullable Output<String> dBProxyName) {
            this.dBProxyName = dBProxyName;
            return this;
        }
        public Builder dBProxyName(@Nullable String dBProxyName) {
            this.dBProxyName = Codegen.ofNullable(dBProxyName);
            return this;
        }
        public Builder debugLogging(@Nullable Output<Boolean> debugLogging) {
            this.debugLogging = debugLogging;
            return this;
        }
        public Builder debugLogging(@Nullable Boolean debugLogging) {
            this.debugLogging = Codegen.ofNullable(debugLogging);
            return this;
        }
        public Builder engineFamily(Output<DBProxyEngineFamily> engineFamily) {
            this.engineFamily = Objects.requireNonNull(engineFamily);
            return this;
        }
        public Builder engineFamily(DBProxyEngineFamily engineFamily) {
            this.engineFamily = Output.of(Objects.requireNonNull(engineFamily));
            return this;
        }
        public Builder idleClientTimeout(@Nullable Output<Integer> idleClientTimeout) {
            this.idleClientTimeout = idleClientTimeout;
            return this;
        }
        public Builder idleClientTimeout(@Nullable Integer idleClientTimeout) {
            this.idleClientTimeout = Codegen.ofNullable(idleClientTimeout);
            return this;
        }
        public Builder requireTLS(@Nullable Output<Boolean> requireTLS) {
            this.requireTLS = requireTLS;
            return this;
        }
        public Builder requireTLS(@Nullable Boolean requireTLS) {
            this.requireTLS = Codegen.ofNullable(requireTLS);
            return this;
        }
        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public Builder tags(@Nullable Output<List<DBProxyTagFormatArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<DBProxyTagFormatArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(DBProxyTagFormatArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }
        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Codegen.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }
        public Builder vpcSubnetIds(Output<List<String>> vpcSubnetIds) {
            this.vpcSubnetIds = Objects.requireNonNull(vpcSubnetIds);
            return this;
        }
        public Builder vpcSubnetIds(List<String> vpcSubnetIds) {
            this.vpcSubnetIds = Output.of(Objects.requireNonNull(vpcSubnetIds));
            return this;
        }
        public Builder vpcSubnetIds(String... vpcSubnetIds) {
            return vpcSubnetIds(List.of(vpcSubnetIds));
        }        public DBProxyArgs build() {
            return new DBProxyArgs(auth, dBProxyName, debugLogging, engineFamily, idleClientTimeout, requireTLS, roleArn, tags, vpcSecurityGroupIds, vpcSubnetIds);
        }
    }
}
