// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.backup.inputs;

import io.pulumi.awsnative.backup.inputs.BackupPlanCopyActionResourceType;
import io.pulumi.awsnative.backup.inputs.BackupPlanLifecycleResourceType;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanBackupRuleResourceType extends io.pulumi.resources.InvokeArgs {

    public static final BackupPlanBackupRuleResourceType Empty = new BackupPlanBackupRuleResourceType();

    @InputImport(name="completionWindowMinutes")
      private final @Nullable Double completionWindowMinutes;

    public Optional<Double> getCompletionWindowMinutes() {
        return this.completionWindowMinutes == null ? Optional.empty() : Optional.ofNullable(this.completionWindowMinutes);
    }

    @InputImport(name="copyActions")
      private final @Nullable List<BackupPlanCopyActionResourceType> copyActions;

    public List<BackupPlanCopyActionResourceType> getCopyActions() {
        return this.copyActions == null ? List.of() : this.copyActions;
    }

    @InputImport(name="enableContinuousBackup")
      private final @Nullable Boolean enableContinuousBackup;

    public Optional<Boolean> getEnableContinuousBackup() {
        return this.enableContinuousBackup == null ? Optional.empty() : Optional.ofNullable(this.enableContinuousBackup);
    }

    @InputImport(name="lifecycle")
      private final @Nullable BackupPlanLifecycleResourceType lifecycle;

    public Optional<BackupPlanLifecycleResourceType> getLifecycle() {
        return this.lifecycle == null ? Optional.empty() : Optional.ofNullable(this.lifecycle);
    }

    @InputImport(name="recoveryPointTags")
      private final @Nullable Object recoveryPointTags;

    public Optional<Object> getRecoveryPointTags() {
        return this.recoveryPointTags == null ? Optional.empty() : Optional.ofNullable(this.recoveryPointTags);
    }

    @InputImport(name="ruleName", required=true)
      private final String ruleName;

    public String getRuleName() {
        return this.ruleName;
    }

    @InputImport(name="scheduleExpression")
      private final @Nullable String scheduleExpression;

    public Optional<String> getScheduleExpression() {
        return this.scheduleExpression == null ? Optional.empty() : Optional.ofNullable(this.scheduleExpression);
    }

    @InputImport(name="startWindowMinutes")
      private final @Nullable Double startWindowMinutes;

    public Optional<Double> getStartWindowMinutes() {
        return this.startWindowMinutes == null ? Optional.empty() : Optional.ofNullable(this.startWindowMinutes);
    }

    @InputImport(name="targetBackupVault", required=true)
      private final String targetBackupVault;

    public String getTargetBackupVault() {
        return this.targetBackupVault;
    }

    public BackupPlanBackupRuleResourceType(
        @Nullable Double completionWindowMinutes,
        @Nullable List<BackupPlanCopyActionResourceType> copyActions,
        @Nullable Boolean enableContinuousBackup,
        @Nullable BackupPlanLifecycleResourceType lifecycle,
        @Nullable Object recoveryPointTags,
        String ruleName,
        @Nullable String scheduleExpression,
        @Nullable Double startWindowMinutes,
        String targetBackupVault) {
        this.completionWindowMinutes = completionWindowMinutes;
        this.copyActions = copyActions;
        this.enableContinuousBackup = enableContinuousBackup;
        this.lifecycle = lifecycle;
        this.recoveryPointTags = recoveryPointTags;
        this.ruleName = Objects.requireNonNull(ruleName, "expected parameter 'ruleName' to be non-null");
        this.scheduleExpression = scheduleExpression;
        this.startWindowMinutes = startWindowMinutes;
        this.targetBackupVault = Objects.requireNonNull(targetBackupVault, "expected parameter 'targetBackupVault' to be non-null");
    }

    private BackupPlanBackupRuleResourceType() {
        this.completionWindowMinutes = null;
        this.copyActions = List.of();
        this.enableContinuousBackup = null;
        this.lifecycle = null;
        this.recoveryPointTags = null;
        this.ruleName = null;
        this.scheduleExpression = null;
        this.startWindowMinutes = null;
        this.targetBackupVault = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupPlanBackupRuleResourceType defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Double completionWindowMinutes;
        private @Nullable List<BackupPlanCopyActionResourceType> copyActions;
        private @Nullable Boolean enableContinuousBackup;
        private @Nullable BackupPlanLifecycleResourceType lifecycle;
        private @Nullable Object recoveryPointTags;
        private String ruleName;
        private @Nullable String scheduleExpression;
        private @Nullable Double startWindowMinutes;
        private String targetBackupVault;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupPlanBackupRuleResourceType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completionWindowMinutes = defaults.completionWindowMinutes;
    	      this.copyActions = defaults.copyActions;
    	      this.enableContinuousBackup = defaults.enableContinuousBackup;
    	      this.lifecycle = defaults.lifecycle;
    	      this.recoveryPointTags = defaults.recoveryPointTags;
    	      this.ruleName = defaults.ruleName;
    	      this.scheduleExpression = defaults.scheduleExpression;
    	      this.startWindowMinutes = defaults.startWindowMinutes;
    	      this.targetBackupVault = defaults.targetBackupVault;
        }

        public Builder setCompletionWindowMinutes(@Nullable Double completionWindowMinutes) {
            this.completionWindowMinutes = completionWindowMinutes;
            return this;
        }

        public Builder setCopyActions(@Nullable List<BackupPlanCopyActionResourceType> copyActions) {
            this.copyActions = copyActions;
            return this;
        }

        public Builder setEnableContinuousBackup(@Nullable Boolean enableContinuousBackup) {
            this.enableContinuousBackup = enableContinuousBackup;
            return this;
        }

        public Builder setLifecycle(@Nullable BackupPlanLifecycleResourceType lifecycle) {
            this.lifecycle = lifecycle;
            return this;
        }

        public Builder setRecoveryPointTags(@Nullable Object recoveryPointTags) {
            this.recoveryPointTags = recoveryPointTags;
            return this;
        }

        public Builder setRuleName(String ruleName) {
            this.ruleName = Objects.requireNonNull(ruleName);
            return this;
        }

        public Builder setScheduleExpression(@Nullable String scheduleExpression) {
            this.scheduleExpression = scheduleExpression;
            return this;
        }

        public Builder setStartWindowMinutes(@Nullable Double startWindowMinutes) {
            this.startWindowMinutes = startWindowMinutes;
            return this;
        }

        public Builder setTargetBackupVault(String targetBackupVault) {
            this.targetBackupVault = Objects.requireNonNull(targetBackupVault);
            return this;
        }
        public BackupPlanBackupRuleResourceType build() {
            return new BackupPlanBackupRuleResourceType(completionWindowMinutes, copyActions, enableContinuousBackup, lifecycle, recoveryPointTags, ruleName, scheduleExpression, startWindowMinutes, targetBackupVault);
        }
    }
}
