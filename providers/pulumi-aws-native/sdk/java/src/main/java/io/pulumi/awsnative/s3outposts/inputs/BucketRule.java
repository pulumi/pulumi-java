// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3outposts.inputs;

import io.pulumi.awsnative.s3outposts.enums.BucketRuleStatus;
import io.pulumi.awsnative.s3outposts.inputs.BucketAbortIncompleteMultipartUpload;
import io.pulumi.awsnative.s3outposts.inputs.BucketRuleFilterProperties;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies lifecycle rules for an Amazon S3Outposts bucket. You must specify at least one of the following: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays.
 * 
 */
public final class BucketRule extends io.pulumi.resources.InvokeArgs {

    public static final BucketRule Empty = new BucketRule();

    /**
     * Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
     * 
     */
    @Import(name="abortIncompleteMultipartUpload")
      private final @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;

    public Optional<BucketAbortIncompleteMultipartUpload> getAbortIncompleteMultipartUpload() {
        return this.abortIncompleteMultipartUpload == null ? Optional.empty() : Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }

    /**
     * Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
     * 
     */
    @Import(name="expirationDate")
      private final @Nullable String expirationDate;

    public Optional<String> getExpirationDate() {
        return this.expirationDate == null ? Optional.empty() : Optional.ofNullable(this.expirationDate);
    }

    /**
     * Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
     * 
     */
    @Import(name="expirationInDays")
      private final @Nullable Integer expirationInDays;

    public Optional<Integer> getExpirationInDays() {
        return this.expirationInDays == null ? Optional.empty() : Optional.ofNullable(this.expirationInDays);
    }

    /**
     * The container for the filter of the lifecycle rule.
     * 
     */
    @Import(name="filter")
      private final @Nullable BucketRuleFilterProperties filter;

    public Optional<BucketRuleFilterProperties> getFilter() {
        return this.filter == null ? Optional.empty() : Optional.ofNullable(this.filter);
    }

    /**
     * Unique identifier for the lifecycle rule. The value can't be longer than 255 characters.
     * 
     */
    @Import(name="id")
      private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    @Import(name="status")
      private final @Nullable BucketRuleStatus status;

    public Optional<BucketRuleStatus> getStatus() {
        return this.status == null ? Optional.empty() : Optional.ofNullable(this.status);
    }

    public BucketRule(
        @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload,
        @Nullable String expirationDate,
        @Nullable Integer expirationInDays,
        @Nullable BucketRuleFilterProperties filter,
        @Nullable String id,
        @Nullable BucketRuleStatus status) {
        this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
        this.expirationDate = expirationDate;
        this.expirationInDays = expirationInDays;
        this.filter = filter;
        this.id = id;
        this.status = status;
    }

    private BucketRule() {
        this.abortIncompleteMultipartUpload = null;
        this.expirationDate = null;
        this.expirationInDays = null;
        this.filter = null;
        this.id = null;
        this.status = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
        private @Nullable String expirationDate;
        private @Nullable Integer expirationInDays;
        private @Nullable BucketRuleFilterProperties filter;
        private @Nullable String id;
        private @Nullable BucketRuleStatus status;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUpload = defaults.abortIncompleteMultipartUpload;
    	      this.expirationDate = defaults.expirationDate;
    	      this.expirationInDays = defaults.expirationInDays;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.status = defaults.status;
        }

        public Builder abortIncompleteMultipartUpload(@Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }

        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationInDays(@Nullable Integer expirationInDays) {
            this.expirationInDays = expirationInDays;
            return this;
        }

        public Builder filter(@Nullable BucketRuleFilterProperties filter) {
            this.filter = filter;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder status(@Nullable BucketRuleStatus status) {
            this.status = status;
            return this;
        }
        public BucketRule build() {
            return new BucketRule(abortIncompleteMultipartUpload, expirationDate, expirationInDays, filter, id, status);
        }
    }
}
