// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.groundstation;

import io.pulumi.awsnative.groundstation.inputs.ConfigDataArgs;
import io.pulumi.awsnative.groundstation.inputs.ConfigTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigArgs Empty = new ConfigArgs();

    @InputImport(name="configData", required=true)
      private final Input<ConfigDataArgs> configData;

    public Input<ConfigDataArgs> getConfigData() {
        return this.configData;
    }

    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="tags")
      private final @Nullable Input<List<ConfigTagArgs>> tags;

    public Input<List<ConfigTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ConfigArgs(
        Input<ConfigDataArgs> configData,
        @Nullable Input<String> name,
        @Nullable Input<List<ConfigTagArgs>> tags) {
        this.configData = Objects.requireNonNull(configData, "expected parameter 'configData' to be non-null");
        this.name = name;
        this.tags = tags;
    }

    private ConfigArgs() {
        this.configData = Input.empty();
        this.name = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<ConfigDataArgs> configData;
        private @Nullable Input<String> name;
        private @Nullable Input<List<ConfigTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configData = defaults.configData;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
        }

        public Builder configData(Input<ConfigDataArgs> configData) {
            this.configData = Objects.requireNonNull(configData);
            return this;
        }

        public Builder configData(ConfigDataArgs configData) {
            this.configData = Input.of(Objects.requireNonNull(configData));
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder tags(@Nullable Input<List<ConfigTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<ConfigTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ConfigArgs build() {
            return new ConfigArgs(configData, name, tags);
        }
    }
}
