// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.eventschemas;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.eventschemas.RegistryPolicyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Resource Type definition for AWS::EventSchemas::RegistryPolicy
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var registryPolicy = new AwsNative.EventSchemas.RegistryPolicy("registryPolicy", new AwsNative.EventSchemas.RegistryPolicyArgs
 *         {
 *             RegistryName = "registryName",
 *             Policy = 
 *             {
 *                 { "version", "2012-10-17" },
 *                 { "statement", 
 *                 {
 *                     { "sid", 1 },
 *                     { "effect", "Allow" },
 *                     { "principal", 
 *                     {
 *                         { "aws", "arn:aws:iam::012345678901:user/TestAccountForRegistryPolicy" },
 *                     } },
 *                     { "action", 
 *                     {
 *                         "schemas:DescribeRegistry",
 *                         "schemas:CreateSchema",
 *                     } },
 *                     { "resource", "registryArn" },
 *                 } },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/eventschemas"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := eventschemas.NewRegistryPolicy(ctx, "registryPolicy", &eventschemas.RegistryPolicyArgs{
 * 			RegistryName: pulumi.String("registryName"),
 * 			Policy: pulumi.Any{
 * 				Version: "2012-10-17",
 * 				Statement: map[string]interface{}{
 * 					"sid":    1,
 * 					"effect": "Allow",
 * 					"principal": map[string]interface{}{
 * 						"aws": "arn:aws:iam::012345678901:user/TestAccountForRegistryPolicy",
 * 					},
 * 					"action": []string{
 * 						"schemas:DescribeRegistry",
 * 						"schemas:CreateSchema",
 * 					},
 * 					"resource": "registryArn",
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const registryPolicy = new aws_native.eventschemas.RegistryPolicy("registryPolicy", {
 *     registryName: "registryName",
 *     policy: {
 *         version: "2012-10-17",
 *         statement: {
 *             sid: 1,
 *             effect: "Allow",
 *             principal: {
 *                 aws: "arn:aws:iam::012345678901:user/TestAccountForRegistryPolicy",
 *             },
 *             action: [
 *                 "schemas:DescribeRegistry",
 *                 "schemas:CreateSchema",
 *             ],
 *             resource: "registryArn",
 *         },
 *     },
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * registry_policy = aws_native.eventschemas.RegistryPolicy("registryPolicy",
 *     registry_name="registryName",
 *     policy={
 *         "version": "2012-10-17",
 *         "statement": {
 *             "sid": 1,
 *             "effect": "Allow",
 *             "principal": {
 *                 "aws": "arn:aws:iam::012345678901:user/TestAccountForRegistryPolicy",
 *             },
 *             "action": [
 *                 "schemas:DescribeRegistry",
 *                 "schemas:CreateSchema",
 *             ],
 *             "resource": "registryArn",
 *         },
 *     })
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var registryPolicy = new AwsNative.EventSchemas.RegistryPolicy("registryPolicy", new AwsNative.EventSchemas.RegistryPolicyArgs
 *         {
 *             RegistryName = "MyRegistry",
 *             Policy = 
 *             {
 *                 { "version", "2012-10-17" },
 *                 { "statement", 
 *                 {
 *                     
 *                     {
 *                         { "sid", "Test" },
 *                         { "effect", "Allow" },
 *                         { "action", 
 *                         {
 *                             "schemas:*",
 *                         } },
 *                         { "principal", 
 *                         {
 *                             { "aws", 
 *                             {
 *                                 "109876543210",
 *                             } },
 *                         } },
 *                         { "resource", 
 *                         {
 *                             "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                             "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *                         } },
 *                     },
 *                 } },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/eventschemas"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := eventschemas.NewRegistryPolicy(ctx, "registryPolicy", &eventschemas.RegistryPolicyArgs{
 * 			RegistryName: pulumi.String("MyRegistry"),
 * 			Policy: pulumi.Any{
 * 				Version: "2012-10-17",
 * 				Statement: []map[string]interface{}{
 * 					map[string]interface{}{
 * 						"sid":    "Test",
 * 						"effect": "Allow",
 * 						"action": []string{
 * 							"schemas:*",
 * 						},
 * 						"principal": map[string]interface{}{
 * 							"aws": []string{
 * 								"109876543210",
 * 							},
 * 						},
 * 						"resource": []string{
 * 							"arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 * 							"arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const registryPolicy = new aws_native.eventschemas.RegistryPolicy("registryPolicy", {
 *     registryName: "MyRegistry",
 *     policy: {
 *         version: "2012-10-17",
 *         statement: [{
 *             sid: "Test",
 *             effect: "Allow",
 *             action: ["schemas:*"],
 *             principal: {
 *                 aws: ["109876543210"],
 *             },
 *             resource: [
 *                 "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                 "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *             ],
 *         }],
 *     },
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * registry_policy = aws_native.eventschemas.RegistryPolicy("registryPolicy",
 *     registry_name="MyRegistry",
 *     policy={
 *         "version": "2012-10-17",
 *         "statement": [{
 *             "sid": "Test",
 *             "effect": "Allow",
 *             "action": ["schemas:*"],
 *             "principal": {
 *                 "aws": ["109876543210"],
 *             },
 *             "resource": [
 *                 "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                 "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *             ],
 *         }],
 *     })
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var registryPolicy = new AwsNative.EventSchemas.RegistryPolicy("registryPolicy", new AwsNative.EventSchemas.RegistryPolicyArgs
 *         {
 *             RegistryName = "MyRegistry",
 *             Policy = 
 *             {
 *                 { "version", "2012-10-17" },
 *                 { "statement", 
 *                 {
 *                     
 *                     {
 *                         { "sid", "Test" },
 *                         { "effect", "Allow" },
 *                         { "action", 
 *                         {
 *                             "schemas:*",
 *                         } },
 *                         { "principal", 
 *                         {
 *                             { "aws", 
 *                             {
 *                                 "109876543210",
 *                             } },
 *                         } },
 *                         { "resource", 
 *                         {
 *                             "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                             "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *                         } },
 *                     },
 *                 } },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/eventschemas"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := eventschemas.NewRegistryPolicy(ctx, "registryPolicy", &eventschemas.RegistryPolicyArgs{
 * 			RegistryName: pulumi.String("MyRegistry"),
 * 			Policy: pulumi.Any{
 * 				Version: "2012-10-17",
 * 				Statement: []map[string]interface{}{
 * 					map[string]interface{}{
 * 						"sid":    "Test",
 * 						"effect": "Allow",
 * 						"action": []string{
 * 							"schemas:*",
 * 						},
 * 						"principal": map[string]interface{}{
 * 							"aws": []string{
 * 								"109876543210",
 * 							},
 * 						},
 * 						"resource": []string{
 * 							"arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 * 							"arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const registryPolicy = new aws_native.eventschemas.RegistryPolicy("registryPolicy", {
 *     registryName: "MyRegistry",
 *     policy: {
 *         version: "2012-10-17",
 *         statement: [{
 *             sid: "Test",
 *             effect: "Allow",
 *             action: ["schemas:*"],
 *             principal: {
 *                 aws: ["109876543210"],
 *             },
 *             resource: [
 *                 "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                 "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *             ],
 *         }],
 *     },
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * registry_policy = aws_native.eventschemas.RegistryPolicy("registryPolicy",
 *     registry_name="MyRegistry",
 *     policy={
 *         "version": "2012-10-17",
 *         "statement": [{
 *             "sid": "Test",
 *             "effect": "Allow",
 *             "action": ["schemas:*"],
 *             "principal": {
 *                 "aws": ["109876543210"],
 *             },
 *             "resource": [
 *                 "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                 "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *             ],
 *         }],
 *     })
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 */
@ResourceType(type="aws-native:eventschemas:RegistryPolicy")
public class RegistryPolicy extends io.pulumi.resources.CustomResource {
    @Export(name="policy", type=Object.class, parameters={})
    private Output<Object> policy;

    public Output<Object> getPolicy() {
        return this.policy;
    }
    @Export(name="registryName", type=String.class, parameters={})
    private Output<String> registryName;

    public Output<String> getRegistryName() {
        return this.registryName;
    }
    @Export(name="revisionId", type=String.class, parameters={})
    private Output</* @Nullable */ String> revisionId;

    public Output</* @Nullable */ String> getRevisionId() {
        return this.revisionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegistryPolicy(String name) {
        this(name, RegistryPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegistryPolicy(String name, RegistryPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegistryPolicy(String name, RegistryPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:eventschemas:RegistryPolicy", name, args == null ? RegistryPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RegistryPolicy(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:eventschemas:RegistryPolicy", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegistryPolicy get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RegistryPolicy(name, id, options);
    }
}
