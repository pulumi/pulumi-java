// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail;

import io.pulumi.awsnative.lightsail.inputs.DatabaseRelationalDatabaseParameterArgs;
import io.pulumi.awsnative.lightsail.inputs.DatabaseTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Output.empty() : this.availabilityZone;
    }

    /**
     * When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    @InputImport(name="backupRetention")
      private final @Nullable Output<Boolean> backupRetention;

    public Output<Boolean> getBackupRetention() {
        return this.backupRetention == null ? Output.empty() : this.backupRetention;
    }

    /**
     * Indicates the certificate that needs to be associated with the database.
     * 
     */
    @InputImport(name="caCertificateIdentifier")
      private final @Nullable Output<String> caCertificateIdentifier;

    public Output<String> getCaCertificateIdentifier() {
        return this.caCertificateIdentifier == null ? Output.empty() : this.caCertificateIdentifier;
    }

    /**
     * The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn't specified, no database is created in the database resource. For PostgreSQL, if this parameter isn't specified, a database named postgres is created in the database resource.
     * 
     */
    @InputImport(name="masterDatabaseName", required=true)
      private final Output<String> masterDatabaseName;

    public Output<String> getMasterDatabaseName() {
        return this.masterDatabaseName;
    }

    /**
     * The password for the master user. The password can include any printable ASCII character except "/", """, or "@". It cannot contain spaces.
     * 
     */
    @InputImport(name="masterUserPassword")
      private final @Nullable Output<String> masterUserPassword;

    public Output<String> getMasterUserPassword() {
        return this.masterUserPassword == null ? Output.empty() : this.masterUserPassword;
    }

    /**
     * The name for the master user.
     * 
     */
    @InputImport(name="masterUsername", required=true)
      private final Output<String> masterUsername;

    public Output<String> getMasterUsername() {
        return this.masterUsername;
    }

    /**
     * The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    @InputImport(name="preferredBackupWindow")
      private final @Nullable Output<String> preferredBackupWindow;

    public Output<String> getPreferredBackupWindow() {
        return this.preferredBackupWindow == null ? Output.empty() : this.preferredBackupWindow;
    }

    /**
     * The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    @InputImport(name="preferredMaintenanceWindow")
      private final @Nullable Output<String> preferredMaintenanceWindow;

    public Output<String> getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Output.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    @InputImport(name="publiclyAccessible")
      private final @Nullable Output<Boolean> publiclyAccessible;

    public Output<Boolean> getPubliclyAccessible() {
        return this.publiclyAccessible == null ? Output.empty() : this.publiclyAccessible;
    }

    /**
     * The blueprint ID for your new database. A blueprint describes the major engine version of a database.
     * 
     */
    @InputImport(name="relationalDatabaseBlueprintId", required=true)
      private final Output<String> relationalDatabaseBlueprintId;

    public Output<String> getRelationalDatabaseBlueprintId() {
        return this.relationalDatabaseBlueprintId;
    }

    /**
     * The bundle ID for your new database. A bundle describes the performance specifications for your database.
     * 
     */
    @InputImport(name="relationalDatabaseBundleId", required=true)
      private final Output<String> relationalDatabaseBundleId;

    public Output<String> getRelationalDatabaseBundleId() {
        return this.relationalDatabaseBundleId;
    }

    /**
     * The name to use for your new Lightsail database resource.
     * 
     */
    @InputImport(name="relationalDatabaseName", required=true)
      private final Output<String> relationalDatabaseName;

    public Output<String> getRelationalDatabaseName() {
        return this.relationalDatabaseName;
    }

    /**
     * Update one or more parameters of the relational database.
     * 
     */
    @InputImport(name="relationalDatabaseParameters")
      private final @Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters;

    public Output<List<DatabaseRelationalDatabaseParameterArgs>> getRelationalDatabaseParameters() {
        return this.relationalDatabaseParameters == null ? Output.empty() : this.relationalDatabaseParameters;
    }

    /**
     * When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
     * 
     */
    @InputImport(name="rotateMasterUserPassword")
      private final @Nullable Output<Boolean> rotateMasterUserPassword;

    public Output<Boolean> getRotateMasterUserPassword() {
        return this.rotateMasterUserPassword == null ? Output.empty() : this.rotateMasterUserPassword;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<List<DatabaseTagArgs>> tags;

    public Output<List<DatabaseTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DatabaseArgs(
        @Nullable Output<String> availabilityZone,
        @Nullable Output<Boolean> backupRetention,
        @Nullable Output<String> caCertificateIdentifier,
        Output<String> masterDatabaseName,
        @Nullable Output<String> masterUserPassword,
        Output<String> masterUsername,
        @Nullable Output<String> preferredBackupWindow,
        @Nullable Output<String> preferredMaintenanceWindow,
        @Nullable Output<Boolean> publiclyAccessible,
        Output<String> relationalDatabaseBlueprintId,
        Output<String> relationalDatabaseBundleId,
        Output<String> relationalDatabaseName,
        @Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters,
        @Nullable Output<Boolean> rotateMasterUserPassword,
        @Nullable Output<List<DatabaseTagArgs>> tags) {
        this.availabilityZone = availabilityZone;
        this.backupRetention = backupRetention;
        this.caCertificateIdentifier = caCertificateIdentifier;
        this.masterDatabaseName = Objects.requireNonNull(masterDatabaseName, "expected parameter 'masterDatabaseName' to be non-null");
        this.masterUserPassword = masterUserPassword;
        this.masterUsername = Objects.requireNonNull(masterUsername, "expected parameter 'masterUsername' to be non-null");
        this.preferredBackupWindow = preferredBackupWindow;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.publiclyAccessible = publiclyAccessible;
        this.relationalDatabaseBlueprintId = Objects.requireNonNull(relationalDatabaseBlueprintId, "expected parameter 'relationalDatabaseBlueprintId' to be non-null");
        this.relationalDatabaseBundleId = Objects.requireNonNull(relationalDatabaseBundleId, "expected parameter 'relationalDatabaseBundleId' to be non-null");
        this.relationalDatabaseName = Objects.requireNonNull(relationalDatabaseName, "expected parameter 'relationalDatabaseName' to be non-null");
        this.relationalDatabaseParameters = relationalDatabaseParameters;
        this.rotateMasterUserPassword = rotateMasterUserPassword;
        this.tags = tags;
    }

    private DatabaseArgs() {
        this.availabilityZone = Output.empty();
        this.backupRetention = Output.empty();
        this.caCertificateIdentifier = Output.empty();
        this.masterDatabaseName = Output.empty();
        this.masterUserPassword = Output.empty();
        this.masterUsername = Output.empty();
        this.preferredBackupWindow = Output.empty();
        this.preferredMaintenanceWindow = Output.empty();
        this.publiclyAccessible = Output.empty();
        this.relationalDatabaseBlueprintId = Output.empty();
        this.relationalDatabaseBundleId = Output.empty();
        this.relationalDatabaseName = Output.empty();
        this.relationalDatabaseParameters = Output.empty();
        this.rotateMasterUserPassword = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<Boolean> backupRetention;
        private @Nullable Output<String> caCertificateIdentifier;
        private Output<String> masterDatabaseName;
        private @Nullable Output<String> masterUserPassword;
        private Output<String> masterUsername;
        private @Nullable Output<String> preferredBackupWindow;
        private @Nullable Output<String> preferredMaintenanceWindow;
        private @Nullable Output<Boolean> publiclyAccessible;
        private Output<String> relationalDatabaseBlueprintId;
        private Output<String> relationalDatabaseBundleId;
        private Output<String> relationalDatabaseName;
        private @Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters;
        private @Nullable Output<Boolean> rotateMasterUserPassword;
        private @Nullable Output<List<DatabaseTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetention = defaults.backupRetention;
    	      this.caCertificateIdentifier = defaults.caCertificateIdentifier;
    	      this.masterDatabaseName = defaults.masterDatabaseName;
    	      this.masterUserPassword = defaults.masterUserPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.relationalDatabaseBlueprintId = defaults.relationalDatabaseBlueprintId;
    	      this.relationalDatabaseBundleId = defaults.relationalDatabaseBundleId;
    	      this.relationalDatabaseName = defaults.relationalDatabaseName;
    	      this.relationalDatabaseParameters = defaults.relationalDatabaseParameters;
    	      this.rotateMasterUserPassword = defaults.rotateMasterUserPassword;
    	      this.tags = defaults.tags;
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Output.ofNullable(availabilityZone);
            return this;
        }

        public Builder backupRetention(@Nullable Output<Boolean> backupRetention) {
            this.backupRetention = backupRetention;
            return this;
        }

        public Builder backupRetention(@Nullable Boolean backupRetention) {
            this.backupRetention = Output.ofNullable(backupRetention);
            return this;
        }

        public Builder caCertificateIdentifier(@Nullable Output<String> caCertificateIdentifier) {
            this.caCertificateIdentifier = caCertificateIdentifier;
            return this;
        }

        public Builder caCertificateIdentifier(@Nullable String caCertificateIdentifier) {
            this.caCertificateIdentifier = Output.ofNullable(caCertificateIdentifier);
            return this;
        }

        public Builder masterDatabaseName(Output<String> masterDatabaseName) {
            this.masterDatabaseName = Objects.requireNonNull(masterDatabaseName);
            return this;
        }

        public Builder masterDatabaseName(String masterDatabaseName) {
            this.masterDatabaseName = Output.of(Objects.requireNonNull(masterDatabaseName));
            return this;
        }

        public Builder masterUserPassword(@Nullable Output<String> masterUserPassword) {
            this.masterUserPassword = masterUserPassword;
            return this;
        }

        public Builder masterUserPassword(@Nullable String masterUserPassword) {
            this.masterUserPassword = Output.ofNullable(masterUserPassword);
            return this;
        }

        public Builder masterUsername(Output<String> masterUsername) {
            this.masterUsername = Objects.requireNonNull(masterUsername);
            return this;
        }

        public Builder masterUsername(String masterUsername) {
            this.masterUsername = Output.of(Objects.requireNonNull(masterUsername));
            return this;
        }

        public Builder preferredBackupWindow(@Nullable Output<String> preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }

        public Builder preferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = Output.ofNullable(preferredBackupWindow);
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Output.ofNullable(preferredMaintenanceWindow);
            return this;
        }

        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Output.ofNullable(publiclyAccessible);
            return this;
        }

        public Builder relationalDatabaseBlueprintId(Output<String> relationalDatabaseBlueprintId) {
            this.relationalDatabaseBlueprintId = Objects.requireNonNull(relationalDatabaseBlueprintId);
            return this;
        }

        public Builder relationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
            this.relationalDatabaseBlueprintId = Output.of(Objects.requireNonNull(relationalDatabaseBlueprintId));
            return this;
        }

        public Builder relationalDatabaseBundleId(Output<String> relationalDatabaseBundleId) {
            this.relationalDatabaseBundleId = Objects.requireNonNull(relationalDatabaseBundleId);
            return this;
        }

        public Builder relationalDatabaseBundleId(String relationalDatabaseBundleId) {
            this.relationalDatabaseBundleId = Output.of(Objects.requireNonNull(relationalDatabaseBundleId));
            return this;
        }

        public Builder relationalDatabaseName(Output<String> relationalDatabaseName) {
            this.relationalDatabaseName = Objects.requireNonNull(relationalDatabaseName);
            return this;
        }

        public Builder relationalDatabaseName(String relationalDatabaseName) {
            this.relationalDatabaseName = Output.of(Objects.requireNonNull(relationalDatabaseName));
            return this;
        }

        public Builder relationalDatabaseParameters(@Nullable Output<List<DatabaseRelationalDatabaseParameterArgs>> relationalDatabaseParameters) {
            this.relationalDatabaseParameters = relationalDatabaseParameters;
            return this;
        }

        public Builder relationalDatabaseParameters(@Nullable List<DatabaseRelationalDatabaseParameterArgs> relationalDatabaseParameters) {
            this.relationalDatabaseParameters = Output.ofNullable(relationalDatabaseParameters);
            return this;
        }

        public Builder rotateMasterUserPassword(@Nullable Output<Boolean> rotateMasterUserPassword) {
            this.rotateMasterUserPassword = rotateMasterUserPassword;
            return this;
        }

        public Builder rotateMasterUserPassword(@Nullable Boolean rotateMasterUserPassword) {
            this.rotateMasterUserPassword = Output.ofNullable(rotateMasterUserPassword);
            return this;
        }

        public Builder tags(@Nullable Output<List<DatabaseTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<DatabaseTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DatabaseArgs build() {
            return new DatabaseArgs(availabilityZone, backupRetention, caCertificateIdentifier, masterDatabaseName, masterUserPassword, masterUsername, preferredBackupWindow, preferredMaintenanceWindow, publiclyAccessible, relationalDatabaseBlueprintId, relationalDatabaseBundleId, relationalDatabaseName, relationalDatabaseParameters, rotateMasterUserPassword, tags);
        }
    }
}
