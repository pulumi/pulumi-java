// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.budgets;

import io.pulumi.awsnative.budgets.enums.BudgetsActionActionType;
import io.pulumi.awsnative.budgets.enums.BudgetsActionApprovalModel;
import io.pulumi.awsnative.budgets.enums.BudgetsActionNotificationType;
import io.pulumi.awsnative.budgets.inputs.BudgetsActionActionThresholdArgs;
import io.pulumi.awsnative.budgets.inputs.BudgetsActionDefinitionArgs;
import io.pulumi.awsnative.budgets.inputs.BudgetsActionSubscriberArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BudgetsActionArgs extends io.pulumi.resources.ResourceArgs {

    public static final BudgetsActionArgs Empty = new BudgetsActionArgs();

    @InputImport(name="actionThreshold", required=true)
    private final Input<BudgetsActionActionThresholdArgs> actionThreshold;

    public Input<BudgetsActionActionThresholdArgs> getActionThreshold() {
        return this.actionThreshold;
    }

    @InputImport(name="actionType", required=true)
    private final Input<BudgetsActionActionType> actionType;

    public Input<BudgetsActionActionType> getActionType() {
        return this.actionType;
    }

    @InputImport(name="approvalModel")
    private final @Nullable Input<BudgetsActionApprovalModel> approvalModel;

    public Input<BudgetsActionApprovalModel> getApprovalModel() {
        return this.approvalModel == null ? Input.empty() : this.approvalModel;
    }

    @InputImport(name="budgetName", required=true)
    private final Input<String> budgetName;

    public Input<String> getBudgetName() {
        return this.budgetName;
    }

    @InputImport(name="definition", required=true)
    private final Input<BudgetsActionDefinitionArgs> definition;

    public Input<BudgetsActionDefinitionArgs> getDefinition() {
        return this.definition;
    }

    @InputImport(name="executionRoleArn", required=true)
    private final Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }

    @InputImport(name="notificationType", required=true)
    private final Input<BudgetsActionNotificationType> notificationType;

    public Input<BudgetsActionNotificationType> getNotificationType() {
        return this.notificationType;
    }

    @InputImport(name="subscribers", required=true)
    private final Input<List<BudgetsActionSubscriberArgs>> subscribers;

    public Input<List<BudgetsActionSubscriberArgs>> getSubscribers() {
        return this.subscribers;
    }

    public BudgetsActionArgs(
        Input<BudgetsActionActionThresholdArgs> actionThreshold,
        Input<BudgetsActionActionType> actionType,
        @Nullable Input<BudgetsActionApprovalModel> approvalModel,
        Input<String> budgetName,
        Input<BudgetsActionDefinitionArgs> definition,
        Input<String> executionRoleArn,
        Input<BudgetsActionNotificationType> notificationType,
        Input<List<BudgetsActionSubscriberArgs>> subscribers) {
        this.actionThreshold = Objects.requireNonNull(actionThreshold, "expected parameter 'actionThreshold' to be non-null");
        this.actionType = Objects.requireNonNull(actionType, "expected parameter 'actionType' to be non-null");
        this.approvalModel = approvalModel;
        this.budgetName = Objects.requireNonNull(budgetName, "expected parameter 'budgetName' to be non-null");
        this.definition = Objects.requireNonNull(definition, "expected parameter 'definition' to be non-null");
        this.executionRoleArn = Objects.requireNonNull(executionRoleArn, "expected parameter 'executionRoleArn' to be non-null");
        this.notificationType = Objects.requireNonNull(notificationType, "expected parameter 'notificationType' to be non-null");
        this.subscribers = Objects.requireNonNull(subscribers, "expected parameter 'subscribers' to be non-null");
    }

    private BudgetsActionArgs() {
        this.actionThreshold = Input.empty();
        this.actionType = Input.empty();
        this.approvalModel = Input.empty();
        this.budgetName = Input.empty();
        this.definition = Input.empty();
        this.executionRoleArn = Input.empty();
        this.notificationType = Input.empty();
        this.subscribers = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetsActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<BudgetsActionActionThresholdArgs> actionThreshold;
        private Input<BudgetsActionActionType> actionType;
        private @Nullable Input<BudgetsActionApprovalModel> approvalModel;
        private Input<String> budgetName;
        private Input<BudgetsActionDefinitionArgs> definition;
        private Input<String> executionRoleArn;
        private Input<BudgetsActionNotificationType> notificationType;
        private Input<List<BudgetsActionSubscriberArgs>> subscribers;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetsActionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionThreshold = defaults.actionThreshold;
    	      this.actionType = defaults.actionType;
    	      this.approvalModel = defaults.approvalModel;
    	      this.budgetName = defaults.budgetName;
    	      this.definition = defaults.definition;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.notificationType = defaults.notificationType;
    	      this.subscribers = defaults.subscribers;
        }

        public Builder setActionThreshold(Input<BudgetsActionActionThresholdArgs> actionThreshold) {
            this.actionThreshold = Objects.requireNonNull(actionThreshold);
            return this;
        }

        public Builder setActionThreshold(BudgetsActionActionThresholdArgs actionThreshold) {
            this.actionThreshold = Input.of(Objects.requireNonNull(actionThreshold));
            return this;
        }

        public Builder setActionType(Input<BudgetsActionActionType> actionType) {
            this.actionType = Objects.requireNonNull(actionType);
            return this;
        }

        public Builder setActionType(BudgetsActionActionType actionType) {
            this.actionType = Input.of(Objects.requireNonNull(actionType));
            return this;
        }

        public Builder setApprovalModel(@Nullable Input<BudgetsActionApprovalModel> approvalModel) {
            this.approvalModel = approvalModel;
            return this;
        }

        public Builder setApprovalModel(@Nullable BudgetsActionApprovalModel approvalModel) {
            this.approvalModel = Input.ofNullable(approvalModel);
            return this;
        }

        public Builder setBudgetName(Input<String> budgetName) {
            this.budgetName = Objects.requireNonNull(budgetName);
            return this;
        }

        public Builder setBudgetName(String budgetName) {
            this.budgetName = Input.of(Objects.requireNonNull(budgetName));
            return this;
        }

        public Builder setDefinition(Input<BudgetsActionDefinitionArgs> definition) {
            this.definition = Objects.requireNonNull(definition);
            return this;
        }

        public Builder setDefinition(BudgetsActionDefinitionArgs definition) {
            this.definition = Input.of(Objects.requireNonNull(definition));
            return this;
        }

        public Builder setExecutionRoleArn(Input<String> executionRoleArn) {
            this.executionRoleArn = Objects.requireNonNull(executionRoleArn);
            return this;
        }

        public Builder setExecutionRoleArn(String executionRoleArn) {
            this.executionRoleArn = Input.of(Objects.requireNonNull(executionRoleArn));
            return this;
        }

        public Builder setNotificationType(Input<BudgetsActionNotificationType> notificationType) {
            this.notificationType = Objects.requireNonNull(notificationType);
            return this;
        }

        public Builder setNotificationType(BudgetsActionNotificationType notificationType) {
            this.notificationType = Input.of(Objects.requireNonNull(notificationType));
            return this;
        }

        public Builder setSubscribers(Input<List<BudgetsActionSubscriberArgs>> subscribers) {
            this.subscribers = Objects.requireNonNull(subscribers);
            return this;
        }

        public Builder setSubscribers(List<BudgetsActionSubscriberArgs> subscribers) {
            this.subscribers = Input.of(Objects.requireNonNull(subscribers));
            return this;
        }

        public BudgetsActionArgs build() {
            return new BudgetsActionArgs(actionThreshold, actionType, approvalModel, budgetName, definition, executionRoleArn, notificationType, subscribers);
        }
    }
}
