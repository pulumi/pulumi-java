// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ivs;

import io.pulumi.awsnative.ivs.inputs.RecordingConfigurationDestinationConfigurationArgs;
import io.pulumi.awsnative.ivs.inputs.RecordingConfigurationTagArgs;
import io.pulumi.awsnative.ivs.inputs.RecordingConfigurationThumbnailConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RecordingConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final RecordingConfigurationArgs Empty = new RecordingConfigurationArgs();

    @Import(name="destinationConfiguration", required=true)
      private final Output<RecordingConfigurationDestinationConfigurationArgs> destinationConfiguration;

    public Output<RecordingConfigurationDestinationConfigurationArgs> getDestinationConfiguration() {
        return this.destinationConfiguration;
    }

    /**
     * Recording Configuration Name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * A list of key-value pairs that contain metadata for the asset model.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<RecordingConfigurationTagArgs>> tags;

    public Output<List<RecordingConfigurationTagArgs>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    @Import(name="thumbnailConfiguration")
      private final @Nullable Output<RecordingConfigurationThumbnailConfigurationArgs> thumbnailConfiguration;

    public Output<RecordingConfigurationThumbnailConfigurationArgs> getThumbnailConfiguration() {
        return this.thumbnailConfiguration == null ? Codegen.empty() : this.thumbnailConfiguration;
    }

    public RecordingConfigurationArgs(
        Output<RecordingConfigurationDestinationConfigurationArgs> destinationConfiguration,
        @Nullable Output<String> name,
        @Nullable Output<List<RecordingConfigurationTagArgs>> tags,
        @Nullable Output<RecordingConfigurationThumbnailConfigurationArgs> thumbnailConfiguration) {
        this.destinationConfiguration = Objects.requireNonNull(destinationConfiguration, "expected parameter 'destinationConfiguration' to be non-null");
        this.name = name;
        this.tags = tags;
        this.thumbnailConfiguration = thumbnailConfiguration;
    }

    private RecordingConfigurationArgs() {
        this.destinationConfiguration = Codegen.empty();
        this.name = Codegen.empty();
        this.tags = Codegen.empty();
        this.thumbnailConfiguration = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordingConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<RecordingConfigurationDestinationConfigurationArgs> destinationConfiguration;
        private @Nullable Output<String> name;
        private @Nullable Output<List<RecordingConfigurationTagArgs>> tags;
        private @Nullable Output<RecordingConfigurationThumbnailConfigurationArgs> thumbnailConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(RecordingConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationConfiguration = defaults.destinationConfiguration;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.thumbnailConfiguration = defaults.thumbnailConfiguration;
        }

        public Builder destinationConfiguration(Output<RecordingConfigurationDestinationConfigurationArgs> destinationConfiguration) {
            this.destinationConfiguration = Objects.requireNonNull(destinationConfiguration);
            return this;
        }
        public Builder destinationConfiguration(RecordingConfigurationDestinationConfigurationArgs destinationConfiguration) {
            this.destinationConfiguration = Output.of(Objects.requireNonNull(destinationConfiguration));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder tags(@Nullable Output<List<RecordingConfigurationTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<RecordingConfigurationTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(RecordingConfigurationTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder thumbnailConfiguration(@Nullable Output<RecordingConfigurationThumbnailConfigurationArgs> thumbnailConfiguration) {
            this.thumbnailConfiguration = thumbnailConfiguration;
            return this;
        }
        public Builder thumbnailConfiguration(@Nullable RecordingConfigurationThumbnailConfigurationArgs thumbnailConfiguration) {
            this.thumbnailConfiguration = Codegen.ofNullable(thumbnailConfiguration);
            return this;
        }        public RecordingConfigurationArgs build() {
            return new RecordingConfigurationArgs(destinationConfiguration, name, tags, thumbnailConfiguration);
        }
    }
}
