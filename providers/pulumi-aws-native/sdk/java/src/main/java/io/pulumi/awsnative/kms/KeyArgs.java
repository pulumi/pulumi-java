// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kms;

import io.pulumi.awsnative.kms.enums.KeySpec;
import io.pulumi.awsnative.kms.enums.KeyUsage;
import io.pulumi.awsnative.kms.inputs.KeyTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class KeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final KeyArgs Empty = new KeyArgs();

    /**
     * A description of the CMK. Use a description that helps you to distinguish this CMK from others in the account, such as its intended use.
     * 
     */
    @InputImport(name="description")
        private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Enables automatic rotation of the key material for the specified customer master key (CMK). By default, automation key rotation is not enabled.
     * 
     */
    @InputImport(name="enableKeyRotation")
        private final @Nullable Input<Boolean> enableKeyRotation;

    public Input<Boolean> getEnableKeyRotation() {
        return this.enableKeyRotation == null ? Input.empty() : this.enableKeyRotation;
    }

    /**
     * Specifies whether the customer master key (CMK) is enabled. Disabled CMKs cannot be used in cryptographic operations.
     * 
     */
    @InputImport(name="enabled")
        private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * The key policy that authorizes use of the CMK. The key policy must observe the following rules.
     * 
     */
    @InputImport(name="keyPolicy", required=true)
        private final Input<Object> keyPolicy;

    public Input<Object> getKeyPolicy() {
        return this.keyPolicy;
    }

    /**
     * Specifies the type of CMK to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric CMKs. You can't change the KeySpec value after the CMK is created.
     * 
     */
    @InputImport(name="keySpec")
        private final @Nullable Input<KeySpec> keySpec;

    public Input<KeySpec> getKeySpec() {
        return this.keySpec == null ? Input.empty() : this.keySpec;
    }

    /**
     * Determines the cryptographic operations for which you can use the CMK. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric CMKs. You can't change the KeyUsage value after the CMK is created.
     * 
     */
    @InputImport(name="keyUsage")
        private final @Nullable Input<KeyUsage> keyUsage;

    public Input<KeyUsage> getKeyUsage() {
        return this.keyUsage == null ? Input.empty() : this.keyUsage;
    }

    /**
     * Specifies whether the CMK should be Multi-Region. You can't change the MultiRegion value after the CMK is created.
     * 
     */
    @InputImport(name="multiRegion")
        private final @Nullable Input<Boolean> multiRegion;

    public Input<Boolean> getMultiRegion() {
        return this.multiRegion == null ? Input.empty() : this.multiRegion;
    }

    /**
     * Specifies the number of days in the waiting period before AWS KMS deletes a CMK that has been removed from a CloudFormation stack. Enter a value between 7 and 30 days. The default value is 30 days.
     * 
     */
    @InputImport(name="pendingWindowInDays")
        private final @Nullable Input<Integer> pendingWindowInDays;

    public Input<Integer> getPendingWindowInDays() {
        return this.pendingWindowInDays == null ? Input.empty() : this.pendingWindowInDays;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<List<KeyTagArgs>> tags;

    public Input<List<KeyTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public KeyArgs(
        @Nullable Input<String> description,
        @Nullable Input<Boolean> enableKeyRotation,
        @Nullable Input<Boolean> enabled,
        Input<Object> keyPolicy,
        @Nullable Input<KeySpec> keySpec,
        @Nullable Input<KeyUsage> keyUsage,
        @Nullable Input<Boolean> multiRegion,
        @Nullable Input<Integer> pendingWindowInDays,
        @Nullable Input<List<KeyTagArgs>> tags) {
        this.description = description;
        this.enableKeyRotation = enableKeyRotation;
        this.enabled = enabled;
        this.keyPolicy = Objects.requireNonNull(keyPolicy, "expected parameter 'keyPolicy' to be non-null");
        this.keySpec = keySpec;
        this.keyUsage = keyUsage;
        this.multiRegion = multiRegion;
        this.pendingWindowInDays = pendingWindowInDays;
        this.tags = tags;
    }

    private KeyArgs() {
        this.description = Input.empty();
        this.enableKeyRotation = Input.empty();
        this.enabled = Input.empty();
        this.keyPolicy = Input.empty();
        this.keySpec = Input.empty();
        this.keyUsage = Input.empty();
        this.multiRegion = Input.empty();
        this.pendingWindowInDays = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> enableKeyRotation;
        private @Nullable Input<Boolean> enabled;
        private Input<Object> keyPolicy;
        private @Nullable Input<KeySpec> keySpec;
        private @Nullable Input<KeyUsage> keyUsage;
        private @Nullable Input<Boolean> multiRegion;
        private @Nullable Input<Integer> pendingWindowInDays;
        private @Nullable Input<List<KeyTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.enableKeyRotation = defaults.enableKeyRotation;
    	      this.enabled = defaults.enabled;
    	      this.keyPolicy = defaults.keyPolicy;
    	      this.keySpec = defaults.keySpec;
    	      this.keyUsage = defaults.keyUsage;
    	      this.multiRegion = defaults.multiRegion;
    	      this.pendingWindowInDays = defaults.pendingWindowInDays;
    	      this.tags = defaults.tags;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEnableKeyRotation(@Nullable Input<Boolean> enableKeyRotation) {
            this.enableKeyRotation = enableKeyRotation;
            return this;
        }

        public Builder setEnableKeyRotation(@Nullable Boolean enableKeyRotation) {
            this.enableKeyRotation = Input.ofNullable(enableKeyRotation);
            return this;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setKeyPolicy(Input<Object> keyPolicy) {
            this.keyPolicy = Objects.requireNonNull(keyPolicy);
            return this;
        }

        public Builder setKeyPolicy(Object keyPolicy) {
            this.keyPolicy = Input.of(Objects.requireNonNull(keyPolicy));
            return this;
        }

        public Builder setKeySpec(@Nullable Input<KeySpec> keySpec) {
            this.keySpec = keySpec;
            return this;
        }

        public Builder setKeySpec(@Nullable KeySpec keySpec) {
            this.keySpec = Input.ofNullable(keySpec);
            return this;
        }

        public Builder setKeyUsage(@Nullable Input<KeyUsage> keyUsage) {
            this.keyUsage = keyUsage;
            return this;
        }

        public Builder setKeyUsage(@Nullable KeyUsage keyUsage) {
            this.keyUsage = Input.ofNullable(keyUsage);
            return this;
        }

        public Builder setMultiRegion(@Nullable Input<Boolean> multiRegion) {
            this.multiRegion = multiRegion;
            return this;
        }

        public Builder setMultiRegion(@Nullable Boolean multiRegion) {
            this.multiRegion = Input.ofNullable(multiRegion);
            return this;
        }

        public Builder setPendingWindowInDays(@Nullable Input<Integer> pendingWindowInDays) {
            this.pendingWindowInDays = pendingWindowInDays;
            return this;
        }

        public Builder setPendingWindowInDays(@Nullable Integer pendingWindowInDays) {
            this.pendingWindowInDays = Input.ofNullable(pendingWindowInDays);
            return this;
        }

        public Builder setTags(@Nullable Input<List<KeyTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<KeyTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public KeyArgs build() {
            return new KeyArgs(description, enableKeyRotation, enabled, keyPolicy, keySpec, keyUsage, multiRegion, pendingWindowInDays, tags);
        }
    }
}
