// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew.inputs;

import io.pulumi.awsnative.databrew.enums.JobSampleMode;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Job Sample
 * 
 */
public final class JobSample extends io.pulumi.resources.InvokeArgs {

    public static final JobSample Empty = new JobSample();

    @InputImport(name="mode")
    private final @Nullable JobSampleMode mode;

    public Optional<JobSampleMode> getMode() {
        return this.mode == null ? Optional.empty() : Optional.ofNullable(this.mode);
    }

    @InputImport(name="size")
    private final @Nullable Integer size;

    public Optional<Integer> getSize() {
        return this.size == null ? Optional.empty() : Optional.ofNullable(this.size);
    }

    public JobSample(
        @Nullable JobSampleMode mode,
        @Nullable Integer size) {
        this.mode = mode;
        this.size = size;
    }

    private JobSample() {
        this.mode = null;
        this.size = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobSample defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable JobSampleMode mode;
        private @Nullable Integer size;

        public Builder() {
    	      // Empty
        }

        public Builder(JobSample defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.size = defaults.size;
        }

        public Builder setMode(@Nullable JobSampleMode mode) {
            this.mode = mode;
            return this;
        }

        public Builder setSize(@Nullable Integer size) {
            this.size = size;
            return this;
        }

        public JobSample build() {
            return new JobSample(mode, size);
        }
    }
}
