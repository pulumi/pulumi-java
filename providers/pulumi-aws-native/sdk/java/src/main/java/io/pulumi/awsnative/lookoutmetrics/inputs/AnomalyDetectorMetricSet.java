// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lookoutmetrics.inputs;

import io.pulumi.awsnative.lookoutmetrics.enums.AnomalyDetectorMetricSetMetricSetFrequency;
import io.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorMetric;
import io.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorMetricSource;
import io.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorTimestampColumn;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnomalyDetectorMetricSet extends io.pulumi.resources.InvokeArgs {

    public static final AnomalyDetectorMetricSet Empty = new AnomalyDetectorMetricSet();

    /**
     * Dimensions for this MetricSet.
     * 
     */
    @InputImport(name="dimensionList")
      private final @Nullable List<String> dimensionList;

    public List<String> getDimensionList() {
        return this.dimensionList == null ? List.of() : this.dimensionList;
    }

    /**
     * Metrics captured by this MetricSet.
     * 
     */
    @InputImport(name="metricList", required=true)
      private final List<AnomalyDetectorMetric> metricList;

    public List<AnomalyDetectorMetric> getMetricList() {
        return this.metricList;
    }

    /**
     * A description for the MetricSet.
     * 
     */
    @InputImport(name="metricSetDescription")
      private final @Nullable String metricSetDescription;

    public Optional<String> getMetricSetDescription() {
        return this.metricSetDescription == null ? Optional.empty() : Optional.ofNullable(this.metricSetDescription);
    }

    /**
     * A frequency period to aggregate the data
     * 
     */
    @InputImport(name="metricSetFrequency")
      private final @Nullable AnomalyDetectorMetricSetMetricSetFrequency metricSetFrequency;

    public Optional<AnomalyDetectorMetricSetMetricSetFrequency> getMetricSetFrequency() {
        return this.metricSetFrequency == null ? Optional.empty() : Optional.ofNullable(this.metricSetFrequency);
    }

    /**
     * The name of the MetricSet.
     * 
     */
    @InputImport(name="metricSetName", required=true)
      private final String metricSetName;

    public String getMetricSetName() {
        return this.metricSetName;
    }

    @InputImport(name="metricSource", required=true)
      private final AnomalyDetectorMetricSource metricSource;

    public AnomalyDetectorMetricSource getMetricSource() {
        return this.metricSource;
    }

    /**
     * Offset, in seconds, between the frequency interval and the time at which the metrics are available.
     * 
     */
    @InputImport(name="offset")
      private final @Nullable Integer offset;

    public Optional<Integer> getOffset() {
        return this.offset == null ? Optional.empty() : Optional.ofNullable(this.offset);
    }

    @InputImport(name="timestampColumn")
      private final @Nullable AnomalyDetectorTimestampColumn timestampColumn;

    public Optional<AnomalyDetectorTimestampColumn> getTimestampColumn() {
        return this.timestampColumn == null ? Optional.empty() : Optional.ofNullable(this.timestampColumn);
    }

    @InputImport(name="timezone")
      private final @Nullable String timezone;

    public Optional<String> getTimezone() {
        return this.timezone == null ? Optional.empty() : Optional.ofNullable(this.timezone);
    }

    public AnomalyDetectorMetricSet(
        @Nullable List<String> dimensionList,
        List<AnomalyDetectorMetric> metricList,
        @Nullable String metricSetDescription,
        @Nullable AnomalyDetectorMetricSetMetricSetFrequency metricSetFrequency,
        String metricSetName,
        AnomalyDetectorMetricSource metricSource,
        @Nullable Integer offset,
        @Nullable AnomalyDetectorTimestampColumn timestampColumn,
        @Nullable String timezone) {
        this.dimensionList = dimensionList;
        this.metricList = Objects.requireNonNull(metricList, "expected parameter 'metricList' to be non-null");
        this.metricSetDescription = metricSetDescription;
        this.metricSetFrequency = metricSetFrequency;
        this.metricSetName = Objects.requireNonNull(metricSetName, "expected parameter 'metricSetName' to be non-null");
        this.metricSource = Objects.requireNonNull(metricSource, "expected parameter 'metricSource' to be non-null");
        this.offset = offset;
        this.timestampColumn = timestampColumn;
        this.timezone = timezone;
    }

    private AnomalyDetectorMetricSet() {
        this.dimensionList = List.of();
        this.metricList = List.of();
        this.metricSetDescription = null;
        this.metricSetFrequency = null;
        this.metricSetName = null;
        this.metricSource = null;
        this.offset = null;
        this.timestampColumn = null;
        this.timezone = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnomalyDetectorMetricSet defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> dimensionList;
        private List<AnomalyDetectorMetric> metricList;
        private @Nullable String metricSetDescription;
        private @Nullable AnomalyDetectorMetricSetMetricSetFrequency metricSetFrequency;
        private String metricSetName;
        private AnomalyDetectorMetricSource metricSource;
        private @Nullable Integer offset;
        private @Nullable AnomalyDetectorTimestampColumn timestampColumn;
        private @Nullable String timezone;

        public Builder() {
    	      // Empty
        }

        public Builder(AnomalyDetectorMetricSet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensionList = defaults.dimensionList;
    	      this.metricList = defaults.metricList;
    	      this.metricSetDescription = defaults.metricSetDescription;
    	      this.metricSetFrequency = defaults.metricSetFrequency;
    	      this.metricSetName = defaults.metricSetName;
    	      this.metricSource = defaults.metricSource;
    	      this.offset = defaults.offset;
    	      this.timestampColumn = defaults.timestampColumn;
    	      this.timezone = defaults.timezone;
        }

        public Builder setDimensionList(@Nullable List<String> dimensionList) {
            this.dimensionList = dimensionList;
            return this;
        }

        public Builder setMetricList(List<AnomalyDetectorMetric> metricList) {
            this.metricList = Objects.requireNonNull(metricList);
            return this;
        }

        public Builder setMetricSetDescription(@Nullable String metricSetDescription) {
            this.metricSetDescription = metricSetDescription;
            return this;
        }

        public Builder setMetricSetFrequency(@Nullable AnomalyDetectorMetricSetMetricSetFrequency metricSetFrequency) {
            this.metricSetFrequency = metricSetFrequency;
            return this;
        }

        public Builder setMetricSetName(String metricSetName) {
            this.metricSetName = Objects.requireNonNull(metricSetName);
            return this;
        }

        public Builder setMetricSource(AnomalyDetectorMetricSource metricSource) {
            this.metricSource = Objects.requireNonNull(metricSource);
            return this;
        }

        public Builder setOffset(@Nullable Integer offset) {
            this.offset = offset;
            return this;
        }

        public Builder setTimestampColumn(@Nullable AnomalyDetectorTimestampColumn timestampColumn) {
            this.timestampColumn = timestampColumn;
            return this;
        }

        public Builder setTimezone(@Nullable String timezone) {
            this.timezone = timezone;
            return this;
        }
        public AnomalyDetectorMetricSet build() {
            return new AnomalyDetectorMetricSet(dimensionList, metricList, metricSetDescription, metricSetFrequency, metricSetName, metricSource, offset, timestampColumn, timezone);
        }
    }
}
