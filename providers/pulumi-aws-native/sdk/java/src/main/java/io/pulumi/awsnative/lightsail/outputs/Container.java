// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail.outputs;

import io.pulumi.awsnative.lightsail.outputs.ContainerEnvironmentVariable;
import io.pulumi.awsnative.lightsail.outputs.ContainerPortInfo;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Container {
    /**
     * The launch command for the container.
     * 
     */
    private final @Nullable List<String> command;
    /**
     * The name of the container.
     * 
     */
    private final @Nullable String containerName;
    /**
     * The environment variables of the container.
     * 
     */
    private final @Nullable List<ContainerEnvironmentVariable> environment;
    /**
     * The name of the image used for the container.
     * 
     */
    private final @Nullable String image;
    /**
     * The open firewall ports of the container.
     * 
     */
    private final @Nullable List<ContainerPortInfo> ports;

    @CustomType.Constructor
    private Container(
        @CustomType.Parameter("command") @Nullable List<String> command,
        @CustomType.Parameter("containerName") @Nullable String containerName,
        @CustomType.Parameter("environment") @Nullable List<ContainerEnvironmentVariable> environment,
        @CustomType.Parameter("image") @Nullable String image,
        @CustomType.Parameter("ports") @Nullable List<ContainerPortInfo> ports) {
        this.command = command;
        this.containerName = containerName;
        this.environment = environment;
        this.image = image;
        this.ports = ports;
    }

    /**
     * The launch command for the container.
     * 
    */
    public List<String> getCommand() {
        return this.command == null ? List.of() : this.command;
    }
    /**
     * The name of the container.
     * 
    */
    public Optional<String> getContainerName() {
        return Optional.ofNullable(this.containerName);
    }
    /**
     * The environment variables of the container.
     * 
    */
    public List<ContainerEnvironmentVariable> getEnvironment() {
        return this.environment == null ? List.of() : this.environment;
    }
    /**
     * The name of the image used for the container.
     * 
    */
    public Optional<String> getImage() {
        return Optional.ofNullable(this.image);
    }
    /**
     * The open firewall ports of the container.
     * 
    */
    public List<ContainerPortInfo> getPorts() {
        return this.ports == null ? List.of() : this.ports;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Container defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> command;
        private @Nullable String containerName;
        private @Nullable List<ContainerEnvironmentVariable> environment;
        private @Nullable String image;
        private @Nullable List<ContainerPortInfo> ports;

        public Builder() {
    	      // Empty
        }

        public Builder(Container defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.command = defaults.command;
    	      this.containerName = defaults.containerName;
    	      this.environment = defaults.environment;
    	      this.image = defaults.image;
    	      this.ports = defaults.ports;
        }

        public Builder command(@Nullable List<String> command) {
            this.command = command;
            return this;
        }

        public Builder containerName(@Nullable String containerName) {
            this.containerName = containerName;
            return this;
        }

        public Builder environment(@Nullable List<ContainerEnvironmentVariable> environment) {
            this.environment = environment;
            return this;
        }

        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }

        public Builder ports(@Nullable List<ContainerPortInfo> ports) {
            this.ports = ports;
            return this;
        }
        public Container build() {
            return new Container(command, containerName, environment, image, ports);
        }
    }
}
