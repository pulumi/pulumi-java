// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kinesis.outputs;

import io.pulumi.awsnative.kinesis.enums.StreamEncryptionEncryptionType;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class StreamEncryption {
    private final StreamEncryptionEncryptionType encryptionType;
    private final String keyId;

    @OutputCustomType.Constructor({"encryptionType","keyId"})
    private StreamEncryption(
        StreamEncryptionEncryptionType encryptionType,
        String keyId) {
        this.encryptionType = Objects.requireNonNull(encryptionType);
        this.keyId = Objects.requireNonNull(keyId);
    }

    public StreamEncryptionEncryptionType getEncryptionType() {
        return this.encryptionType;
    }
    public String getKeyId() {
        return this.keyId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamEncryption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamEncryptionEncryptionType encryptionType;
        private String keyId;

        public Builder() {
    	      // Empty
        }

        public Builder(StreamEncryption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptionType = defaults.encryptionType;
    	      this.keyId = defaults.keyId;
        }

        public Builder setEncryptionType(StreamEncryptionEncryptionType encryptionType) {
            this.encryptionType = Objects.requireNonNull(encryptionType);
            return this;
        }

        public Builder setKeyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }

        public StreamEncryption build() {
            return new StreamEncryption(encryptionType, keyId);
        }
    }
}
