// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iot.inputs;

import io.pulumi.awsnative.iot.inputs.JobTemplateRateIncreaseCriteriaArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;


/**
 * Allows you to create an exponential rate of rollout for a job.
 * 
 */
public final class JobTemplateExponentialRolloutRateArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobTemplateExponentialRolloutRateArgs Empty = new JobTemplateExponentialRolloutRateArgs();

    /**
     * The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.
     * 
     */
    @InputImport(name="baseRatePerMinute", required=true)
      private final Input<Integer> baseRatePerMinute;

    public Input<Integer> getBaseRatePerMinute() {
        return this.baseRatePerMinute;
    }

    /**
     * The exponential factor to increase the rate of rollout for a job.
     * 
     */
    @InputImport(name="incrementFactor", required=true)
      private final Input<Double> incrementFactor;

    public Input<Double> getIncrementFactor() {
        return this.incrementFactor;
    }

    /**
     * The criteria to initiate the increase in rate of rollout for a job.
     * 
     */
    @InputImport(name="rateIncreaseCriteria", required=true)
      private final Input<JobTemplateRateIncreaseCriteriaArgs> rateIncreaseCriteria;

    public Input<JobTemplateRateIncreaseCriteriaArgs> getRateIncreaseCriteria() {
        return this.rateIncreaseCriteria;
    }

    public JobTemplateExponentialRolloutRateArgs(
        Input<Integer> baseRatePerMinute,
        Input<Double> incrementFactor,
        Input<JobTemplateRateIncreaseCriteriaArgs> rateIncreaseCriteria) {
        this.baseRatePerMinute = Objects.requireNonNull(baseRatePerMinute, "expected parameter 'baseRatePerMinute' to be non-null");
        this.incrementFactor = Objects.requireNonNull(incrementFactor, "expected parameter 'incrementFactor' to be non-null");
        this.rateIncreaseCriteria = Objects.requireNonNull(rateIncreaseCriteria, "expected parameter 'rateIncreaseCriteria' to be non-null");
    }

    private JobTemplateExponentialRolloutRateArgs() {
        this.baseRatePerMinute = Input.empty();
        this.incrementFactor = Input.empty();
        this.rateIncreaseCriteria = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobTemplateExponentialRolloutRateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> baseRatePerMinute;
        private Input<Double> incrementFactor;
        private Input<JobTemplateRateIncreaseCriteriaArgs> rateIncreaseCriteria;

        public Builder() {
    	      // Empty
        }

        public Builder(JobTemplateExponentialRolloutRateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseRatePerMinute = defaults.baseRatePerMinute;
    	      this.incrementFactor = defaults.incrementFactor;
    	      this.rateIncreaseCriteria = defaults.rateIncreaseCriteria;
        }

        public Builder setBaseRatePerMinute(Input<Integer> baseRatePerMinute) {
            this.baseRatePerMinute = Objects.requireNonNull(baseRatePerMinute);
            return this;
        }

        public Builder setBaseRatePerMinute(Integer baseRatePerMinute) {
            this.baseRatePerMinute = Input.of(Objects.requireNonNull(baseRatePerMinute));
            return this;
        }

        public Builder setIncrementFactor(Input<Double> incrementFactor) {
            this.incrementFactor = Objects.requireNonNull(incrementFactor);
            return this;
        }

        public Builder setIncrementFactor(Double incrementFactor) {
            this.incrementFactor = Input.of(Objects.requireNonNull(incrementFactor));
            return this;
        }

        public Builder setRateIncreaseCriteria(Input<JobTemplateRateIncreaseCriteriaArgs> rateIncreaseCriteria) {
            this.rateIncreaseCriteria = Objects.requireNonNull(rateIncreaseCriteria);
            return this;
        }

        public Builder setRateIncreaseCriteria(JobTemplateRateIncreaseCriteriaArgs rateIncreaseCriteria) {
            this.rateIncreaseCriteria = Input.of(Objects.requireNonNull(rateIncreaseCriteria));
            return this;
        }
        public JobTemplateExponentialRolloutRateArgs build() {
            return new JobTemplateExponentialRolloutRateArgs(baseRatePerMinute, incrementFactor, rateIncreaseCriteria);
        }
    }
}
