// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.outputs;

import io.pulumi.awsnative.s3.enums.BucketNoncurrentVersionTransitionStorageClass;
import io.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketNoncurrentVersionTransition {
    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    private final @Nullable Integer newerNoncurrentVersions;
    /**
     * The class of storage used to store the object.
     * 
     */
    private final BucketNoncurrentVersionTransitionStorageClass storageClass;
    /**
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    private final Integer transitionInDays;

    @CustomType.Constructor
    private BucketNoncurrentVersionTransition(
        @CustomType.Parameter("newerNoncurrentVersions") @Nullable Integer newerNoncurrentVersions,
        @CustomType.Parameter("storageClass") BucketNoncurrentVersionTransitionStorageClass storageClass,
        @CustomType.Parameter("transitionInDays") Integer transitionInDays) {
        this.newerNoncurrentVersions = newerNoncurrentVersions;
        this.storageClass = storageClass;
        this.transitionInDays = transitionInDays;
    }

    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
    */
    public Optional<Integer> getNewerNoncurrentVersions() {
        return Optional.ofNullable(this.newerNoncurrentVersions);
    }
    /**
     * The class of storage used to store the object.
     * 
    */
    public BucketNoncurrentVersionTransitionStorageClass getStorageClass() {
        return this.storageClass;
    }
    /**
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
    */
    public Integer getTransitionInDays() {
        return this.transitionInDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketNoncurrentVersionTransition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer newerNoncurrentVersions;
        private BucketNoncurrentVersionTransitionStorageClass storageClass;
        private Integer transitionInDays;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketNoncurrentVersionTransition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.newerNoncurrentVersions = defaults.newerNoncurrentVersions;
    	      this.storageClass = defaults.storageClass;
    	      this.transitionInDays = defaults.transitionInDays;
        }

        public Builder newerNoncurrentVersions(@Nullable Integer newerNoncurrentVersions) {
            this.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }

        public Builder storageClass(BucketNoncurrentVersionTransitionStorageClass storageClass) {
            this.storageClass = Objects.requireNonNull(storageClass);
            return this;
        }

        public Builder transitionInDays(Integer transitionInDays) {
            this.transitionInDays = Objects.requireNonNull(transitionInDays);
            return this;
        }
        public BucketNoncurrentVersionTransition build() {
            return new BucketNoncurrentVersionTransition(newerNoncurrentVersions, storageClass, transitionInDays);
        }
    }
}
