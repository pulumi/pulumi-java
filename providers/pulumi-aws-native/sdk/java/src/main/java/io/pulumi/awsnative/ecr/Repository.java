// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ecr;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.ecr.RepositoryArgs;
import io.pulumi.awsnative.ecr.enums.RepositoryImageTagMutability;
import io.pulumi.awsnative.ecr.outputs.RepositoryEncryptionConfiguration;
import io.pulumi.awsnative.ecr.outputs.RepositoryImageScanningConfiguration;
import io.pulumi.awsnative.ecr.outputs.RepositoryLifecyclePolicy;
import io.pulumi.awsnative.ecr.outputs.RepositoryTag;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The AWS::ECR::Repository resource specifies an Amazon Elastic Container Registry (Amazon ECR) repository, where users can push and pull Docker images. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var config = new Config();
 *         var lifecyclePolicyText = config.Require("lifecyclePolicyText");
 *         var repositoryName = config.Require("repositoryName");
 *         var registryId = config.Require("registryId");
 *         var myRepository = new AwsNative.ECR.Repository("myRepository", new AwsNative.ECR.RepositoryArgs
 *         {
 *             LifecyclePolicy = new AwsNative.ECR.Inputs.RepositoryLifecyclePolicyArgs
 *             {
 *                 LifecyclePolicyText = lifecyclePolicyText,
 *                 RegistryId = registryId,
 *             },
 *             RepositoryName = repositoryName,
 *         });
 *         this.Arn = myRepository.Arn;
 *     }
 * 
 *     [Output("arn")]
 *     public Output<string> Arn { get; set; }
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecr"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		cfg := config.New(ctx, "")
 * 		lifecyclePolicyText := cfg.Require("lifecyclePolicyText")
 * 		repositoryName := cfg.Require("repositoryName")
 * 		registryId := cfg.Require("registryId")
 * 		myRepository, err := ecr.NewRepository(ctx, "myRepository", &ecr.RepositoryArgs{
 * 			LifecyclePolicy: &ecr.RepositoryLifecyclePolicyArgs{
 * 				LifecyclePolicyText: pulumi.String(lifecyclePolicyText),
 * 				RegistryId:          pulumi.String(registryId),
 * 			},
 * 			RepositoryName: pulumi.String(repositoryName),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ctx.Export("arn", myRepository.Arn)
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const config = new pulumi.Config();
 * const lifecyclePolicyText = config.require("lifecyclePolicyText");
 * const repositoryName = config.require("repositoryName");
 * const registryId = config.require("registryId");
 * const myRepository = new aws_native.ecr.Repository("myRepository", {
 *     lifecyclePolicy: {
 *         lifecyclePolicyText: lifecyclePolicyText,
 *         registryId: registryId,
 *     },
 *     repositoryName: repositoryName,
 * });
 * export const arn = myRepository.arn;
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * config = pulumi.Config()
 * lifecycle_policy_text = config.require("lifecyclePolicyText")
 * repository_name = config.require("repositoryName")
 * registry_id = config.require("registryId")
 * my_repository = aws_native.ecr.Repository("myRepository",
 *     lifecycle_policy=aws_native.ecr.RepositoryLifecyclePolicyArgs(
 *         lifecycle_policy_text=lifecycle_policy_text,
 *         registry_id=registry_id,
 *     ),
 *     repository_name=repository_name)
 * pulumi.export("arn", my_repository.arn)
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var config = new Config();
 *         var lifecyclePolicyText = config.Require("lifecyclePolicyText");
 *         var repositoryName = config.Require("repositoryName");
 *         var registryId = config.Require("registryId");
 *         var myRepository = new AwsNative.ECR.Repository("myRepository", new AwsNative.ECR.RepositoryArgs
 *         {
 *             LifecyclePolicy = new AwsNative.ECR.Inputs.RepositoryLifecyclePolicyArgs
 *             {
 *                 LifecyclePolicyText = lifecyclePolicyText,
 *                 RegistryId = registryId,
 *             },
 *             RepositoryName = repositoryName,
 *         });
 *         this.Arn = myRepository.Arn;
 *     }
 * 
 *     [Output("arn")]
 *     public Output<string> Arn { get; set; }
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecr"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		cfg := config.New(ctx, "")
 * 		lifecyclePolicyText := cfg.Require("lifecyclePolicyText")
 * 		repositoryName := cfg.Require("repositoryName")
 * 		registryId := cfg.Require("registryId")
 * 		myRepository, err := ecr.NewRepository(ctx, "myRepository", &ecr.RepositoryArgs{
 * 			LifecyclePolicy: &ecr.RepositoryLifecyclePolicyArgs{
 * 				LifecyclePolicyText: pulumi.String(lifecyclePolicyText),
 * 				RegistryId:          pulumi.String(registryId),
 * 			},
 * 			RepositoryName: pulumi.String(repositoryName),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ctx.Export("arn", myRepository.Arn)
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const config = new pulumi.Config();
 * const lifecyclePolicyText = config.require("lifecyclePolicyText");
 * const repositoryName = config.require("repositoryName");
 * const registryId = config.require("registryId");
 * const myRepository = new aws_native.ecr.Repository("myRepository", {
 *     lifecyclePolicy: {
 *         lifecyclePolicyText: lifecyclePolicyText,
 *         registryId: registryId,
 *     },
 *     repositoryName: repositoryName,
 * });
 * export const arn = myRepository.arn;
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * config = pulumi.Config()
 * lifecycle_policy_text = config.require("lifecyclePolicyText")
 * repository_name = config.require("repositoryName")
 * registry_id = config.require("registryId")
 * my_repository = aws_native.ecr.Repository("myRepository",
 *     lifecycle_policy=aws_native.ecr.RepositoryLifecyclePolicyArgs(
 *         lifecycle_policy_text=lifecycle_policy_text,
 *         registry_id=registry_id,
 *     ),
 *     repository_name=repository_name)
 * pulumi.export("arn", my_repository.arn)
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 */
@ResourceType(type="aws-native:ecr:Repository")
public class Repository extends io.pulumi.resources.CustomResource {
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    public Output<String> getArn() {
        return this.arn;
    }
    @Export(name="encryptionConfiguration", type=RepositoryEncryptionConfiguration.class, parameters={})
    private Output</* @Nullable */ RepositoryEncryptionConfiguration> encryptionConfiguration;

    public Output</* @Nullable */ RepositoryEncryptionConfiguration> getEncryptionConfiguration() {
        return this.encryptionConfiguration;
    }
    @Export(name="imageScanningConfiguration", type=RepositoryImageScanningConfiguration.class, parameters={})
    private Output</* @Nullable */ RepositoryImageScanningConfiguration> imageScanningConfiguration;

    public Output</* @Nullable */ RepositoryImageScanningConfiguration> getImageScanningConfiguration() {
        return this.imageScanningConfiguration;
    }
    /**
     * The image tag mutability setting for the repository.
     */
    @Export(name="imageTagMutability", type=RepositoryImageTagMutability.class, parameters={})
    private Output</* @Nullable */ RepositoryImageTagMutability> imageTagMutability;

    /**
     * @return The image tag mutability setting for the repository.
     */
    public Output</* @Nullable */ RepositoryImageTagMutability> getImageTagMutability() {
        return this.imageTagMutability;
    }
    @Export(name="lifecyclePolicy", type=RepositoryLifecyclePolicy.class, parameters={})
    private Output</* @Nullable */ RepositoryLifecyclePolicy> lifecyclePolicy;

    public Output</* @Nullable */ RepositoryLifecyclePolicy> getLifecyclePolicy() {
        return this.lifecyclePolicy;
    }
    /**
     * The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     */
    @Export(name="repositoryName", type=String.class, parameters={})
    private Output</* @Nullable */ String> repositoryName;

    /**
     * @return The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     */
    public Output</* @Nullable */ String> getRepositoryName() {
        return this.repositoryName;
    }
    /**
     * The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. 
     */
    @Export(name="repositoryPolicyText", type=Object.class, parameters={})
    private Output</* @Nullable */ Object> repositoryPolicyText;

    /**
     * @return The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. 
     */
    public Output</* @Nullable */ Object> getRepositoryPolicyText() {
        return this.repositoryPolicyText;
    }
    @Export(name="repositoryUri", type=String.class, parameters={})
    private Output<String> repositoryUri;

    public Output<String> getRepositoryUri() {
        return this.repositoryUri;
    }
    /**
     * An array of key-value pairs to apply to this resource.
     */
    @Export(name="tags", type=List.class, parameters={RepositoryTag.class})
    private Output</* @Nullable */ List<RepositoryTag>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     */
    public Output</* @Nullable */ List<RepositoryTag>> getTags() {
        return this.tags;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repository(String name) {
        this(name, RepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repository(String name, @Nullable RepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repository(String name, @Nullable RepositoryArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:ecr:Repository", name, args == null ? RepositoryArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Repository(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:ecr:Repository", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repository get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Repository(name, id, options);
    }
}
