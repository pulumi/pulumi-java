// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.timestream.inputs;

import io.pulumi.awsnative.timestream.inputs.ScheduledQueryDimensionMappingArgs;
import io.pulumi.awsnative.timestream.inputs.ScheduledQueryMixedMeasureMappingArgs;
import io.pulumi.awsnative.timestream.inputs.ScheduledQueryMultiMeasureMappingsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration needed to write data into the Timestream database and table.
 * 
 */
public final class ScheduledQueryTimestreamConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryTimestreamConfigurationArgs Empty = new ScheduledQueryTimestreamConfigurationArgs();

    @InputImport(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    @InputImport(name="dimensionMappings", required=true)
      private final Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings;

    public Output<List<ScheduledQueryDimensionMappingArgs>> getDimensionMappings() {
        return this.dimensionMappings;
    }

    @InputImport(name="measureNameColumn")
      private final @Nullable Output<String> measureNameColumn;

    public Output<String> getMeasureNameColumn() {
        return this.measureNameColumn == null ? Output.empty() : this.measureNameColumn;
    }

    @InputImport(name="mixedMeasureMappings")
      private final @Nullable Output<List<ScheduledQueryMixedMeasureMappingArgs>> mixedMeasureMappings;

    public Output<List<ScheduledQueryMixedMeasureMappingArgs>> getMixedMeasureMappings() {
        return this.mixedMeasureMappings == null ? Output.empty() : this.mixedMeasureMappings;
    }

    @InputImport(name="multiMeasureMappings")
      private final @Nullable Output<ScheduledQueryMultiMeasureMappingsArgs> multiMeasureMappings;

    public Output<ScheduledQueryMultiMeasureMappingsArgs> getMultiMeasureMappings() {
        return this.multiMeasureMappings == null ? Output.empty() : this.multiMeasureMappings;
    }

    @InputImport(name="tableName", required=true)
      private final Output<String> tableName;

    public Output<String> getTableName() {
        return this.tableName;
    }

    @InputImport(name="timeColumn", required=true)
      private final Output<String> timeColumn;

    public Output<String> getTimeColumn() {
        return this.timeColumn;
    }

    public ScheduledQueryTimestreamConfigurationArgs(
        Output<String> databaseName,
        Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings,
        @Nullable Output<String> measureNameColumn,
        @Nullable Output<List<ScheduledQueryMixedMeasureMappingArgs>> mixedMeasureMappings,
        @Nullable Output<ScheduledQueryMultiMeasureMappingsArgs> multiMeasureMappings,
        Output<String> tableName,
        Output<String> timeColumn) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.dimensionMappings = Objects.requireNonNull(dimensionMappings, "expected parameter 'dimensionMappings' to be non-null");
        this.measureNameColumn = measureNameColumn;
        this.mixedMeasureMappings = mixedMeasureMappings;
        this.multiMeasureMappings = multiMeasureMappings;
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
        this.timeColumn = Objects.requireNonNull(timeColumn, "expected parameter 'timeColumn' to be non-null");
    }

    private ScheduledQueryTimestreamConfigurationArgs() {
        this.databaseName = Output.empty();
        this.dimensionMappings = Output.empty();
        this.measureNameColumn = Output.empty();
        this.mixedMeasureMappings = Output.empty();
        this.multiMeasureMappings = Output.empty();
        this.tableName = Output.empty();
        this.timeColumn = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduledQueryTimestreamConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> databaseName;
        private Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings;
        private @Nullable Output<String> measureNameColumn;
        private @Nullable Output<List<ScheduledQueryMixedMeasureMappingArgs>> mixedMeasureMappings;
        private @Nullable Output<ScheduledQueryMultiMeasureMappingsArgs> multiMeasureMappings;
        private Output<String> tableName;
        private Output<String> timeColumn;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduledQueryTimestreamConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.dimensionMappings = defaults.dimensionMappings;
    	      this.measureNameColumn = defaults.measureNameColumn;
    	      this.mixedMeasureMappings = defaults.mixedMeasureMappings;
    	      this.multiMeasureMappings = defaults.multiMeasureMappings;
    	      this.tableName = defaults.tableName;
    	      this.timeColumn = defaults.timeColumn;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder dimensionMappings(Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings) {
            this.dimensionMappings = Objects.requireNonNull(dimensionMappings);
            return this;
        }

        public Builder dimensionMappings(List<ScheduledQueryDimensionMappingArgs> dimensionMappings) {
            this.dimensionMappings = Output.of(Objects.requireNonNull(dimensionMappings));
            return this;
        }

        public Builder measureNameColumn(@Nullable Output<String> measureNameColumn) {
            this.measureNameColumn = measureNameColumn;
            return this;
        }

        public Builder measureNameColumn(@Nullable String measureNameColumn) {
            this.measureNameColumn = Output.ofNullable(measureNameColumn);
            return this;
        }

        public Builder mixedMeasureMappings(@Nullable Output<List<ScheduledQueryMixedMeasureMappingArgs>> mixedMeasureMappings) {
            this.mixedMeasureMappings = mixedMeasureMappings;
            return this;
        }

        public Builder mixedMeasureMappings(@Nullable List<ScheduledQueryMixedMeasureMappingArgs> mixedMeasureMappings) {
            this.mixedMeasureMappings = Output.ofNullable(mixedMeasureMappings);
            return this;
        }

        public Builder multiMeasureMappings(@Nullable Output<ScheduledQueryMultiMeasureMappingsArgs> multiMeasureMappings) {
            this.multiMeasureMappings = multiMeasureMappings;
            return this;
        }

        public Builder multiMeasureMappings(@Nullable ScheduledQueryMultiMeasureMappingsArgs multiMeasureMappings) {
            this.multiMeasureMappings = Output.ofNullable(multiMeasureMappings);
            return this;
        }

        public Builder tableName(Output<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }

        public Builder tableName(String tableName) {
            this.tableName = Output.of(Objects.requireNonNull(tableName));
            return this;
        }

        public Builder timeColumn(Output<String> timeColumn) {
            this.timeColumn = Objects.requireNonNull(timeColumn);
            return this;
        }

        public Builder timeColumn(String timeColumn) {
            this.timeColumn = Output.of(Objects.requireNonNull(timeColumn));
            return this;
        }
        public ScheduledQueryTimestreamConfigurationArgs build() {
            return new ScheduledQueryTimestreamConfigurationArgs(databaseName, dimensionMappings, measureNameColumn, mixedMeasureMappings, multiMeasureMappings, tableName, timeColumn);
        }
    }
}
