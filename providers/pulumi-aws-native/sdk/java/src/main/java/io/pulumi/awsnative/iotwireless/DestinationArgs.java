// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iotwireless;

import io.pulumi.awsnative.iotwireless.enums.DestinationExpressionType;
import io.pulumi.awsnative.iotwireless.inputs.DestinationTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DestinationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DestinationArgs Empty = new DestinationArgs();

    /**
     * Destination description
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Destination expression
     * 
     */
    @Import(name="expression", required=true)
      private final Output<String> expression;

    public Output<String> getExpression() {
        return this.expression;
    }

    /**
     * Must be RuleName
     * 
     */
    @Import(name="expressionType", required=true)
      private final Output<DestinationExpressionType> expressionType;

    public Output<DestinationExpressionType> getExpressionType() {
        return this.expressionType;
    }

    /**
     * Unique name of destination
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * AWS role ARN that grants access
     * 
     */
    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     * A list of key-value pairs that contain metadata for the destination.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<DestinationTagArgs>> tags;

    public Output<List<DestinationTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DestinationArgs(
        @Nullable Output<String> description,
        Output<String> expression,
        Output<DestinationExpressionType> expressionType,
        @Nullable Output<String> name,
        Output<String> roleArn,
        @Nullable Output<List<DestinationTagArgs>> tags) {
        this.description = description;
        this.expression = Objects.requireNonNull(expression, "expected parameter 'expression' to be non-null");
        this.expressionType = Objects.requireNonNull(expressionType, "expected parameter 'expressionType' to be non-null");
        this.name = name;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.tags = tags;
    }

    private DestinationArgs() {
        this.description = Output.empty();
        this.expression = Output.empty();
        this.expressionType = Output.empty();
        this.name = Output.empty();
        this.roleArn = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> expression;
        private Output<DestinationExpressionType> expressionType;
        private @Nullable Output<String> name;
        private Output<String> roleArn;
        private @Nullable Output<List<DestinationTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DestinationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.expression = defaults.expression;
    	      this.expressionType = defaults.expressionType;
    	      this.name = defaults.name;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder expression(Output<String> expression) {
            this.expression = Objects.requireNonNull(expression);
            return this;
        }
        public Builder expression(String expression) {
            this.expression = Output.of(Objects.requireNonNull(expression));
            return this;
        }
        public Builder expressionType(Output<DestinationExpressionType> expressionType) {
            this.expressionType = Objects.requireNonNull(expressionType);
            return this;
        }
        public Builder expressionType(DestinationExpressionType expressionType) {
            this.expressionType = Output.of(Objects.requireNonNull(expressionType));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public Builder tags(@Nullable Output<List<DestinationTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<DestinationTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(DestinationTagArgs... tags) {
            return tags(List.of(tags));
        }        public DestinationArgs build() {
            return new DestinationArgs(description, expression, expressionType, name, roleArn, tags);
        }
    }
}
