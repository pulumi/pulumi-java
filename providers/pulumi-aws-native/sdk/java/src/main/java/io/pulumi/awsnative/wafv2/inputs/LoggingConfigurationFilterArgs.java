// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.wafv2.inputs;

import io.pulumi.awsnative.wafv2.enums.LoggingConfigurationFilterBehavior;
import io.pulumi.awsnative.wafv2.enums.LoggingConfigurationFilterRequirement;
import io.pulumi.awsnative.wafv2.inputs.LoggingConfigurationConditionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.util.List;
import java.util.Objects;


public final class LoggingConfigurationFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoggingConfigurationFilterArgs Empty = new LoggingConfigurationFilterArgs();

    /**
     * How to handle logs that satisfy the filter's conditions and requirement.
     * 
     */
    @InputImport(name="behavior", required=true)
    private final Input<LoggingConfigurationFilterBehavior> behavior;

    public Input<LoggingConfigurationFilterBehavior> getBehavior() {
        return this.behavior;
    }

    /**
     * Match conditions for the filter.
     * 
     */
    @InputImport(name="conditions", required=true)
    private final Input<List<LoggingConfigurationConditionArgs>> conditions;

    public Input<List<LoggingConfigurationConditionArgs>> getConditions() {
        return this.conditions;
    }

    /**
     * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
     * 
     */
    @InputImport(name="requirement", required=true)
    private final Input<LoggingConfigurationFilterRequirement> requirement;

    public Input<LoggingConfigurationFilterRequirement> getRequirement() {
        return this.requirement;
    }

    public LoggingConfigurationFilterArgs(
        Input<LoggingConfigurationFilterBehavior> behavior,
        Input<List<LoggingConfigurationConditionArgs>> conditions,
        Input<LoggingConfigurationFilterRequirement> requirement) {
        this.behavior = Objects.requireNonNull(behavior, "expected parameter 'behavior' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.requirement = Objects.requireNonNull(requirement, "expected parameter 'requirement' to be non-null");
    }

    private LoggingConfigurationFilterArgs() {
        this.behavior = Input.empty();
        this.conditions = Input.empty();
        this.requirement = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoggingConfigurationFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<LoggingConfigurationFilterBehavior> behavior;
        private Input<List<LoggingConfigurationConditionArgs>> conditions;
        private Input<LoggingConfigurationFilterRequirement> requirement;

        public Builder() {
    	      // Empty
        }

        public Builder(LoggingConfigurationFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.behavior = defaults.behavior;
    	      this.conditions = defaults.conditions;
    	      this.requirement = defaults.requirement;
        }

        public Builder setBehavior(Input<LoggingConfigurationFilterBehavior> behavior) {
            this.behavior = Objects.requireNonNull(behavior);
            return this;
        }

        public Builder setBehavior(LoggingConfigurationFilterBehavior behavior) {
            this.behavior = Input.of(Objects.requireNonNull(behavior));
            return this;
        }

        public Builder setConditions(Input<List<LoggingConfigurationConditionArgs>> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setConditions(List<LoggingConfigurationConditionArgs> conditions) {
            this.conditions = Input.of(Objects.requireNonNull(conditions));
            return this;
        }

        public Builder setRequirement(Input<LoggingConfigurationFilterRequirement> requirement) {
            this.requirement = Objects.requireNonNull(requirement);
            return this;
        }

        public Builder setRequirement(LoggingConfigurationFilterRequirement requirement) {
            this.requirement = Input.of(Objects.requireNonNull(requirement));
            return this;
        }

        public LoggingConfigurationFilterArgs build() {
            return new LoggingConfigurationFilterArgs(behavior, conditions, requirement);
        }
    }
}
