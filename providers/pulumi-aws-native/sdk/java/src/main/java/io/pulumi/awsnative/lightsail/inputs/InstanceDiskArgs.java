// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Disk associated with the Instance.
 * 
 */
public final class InstanceDiskArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceDiskArgs Empty = new InstanceDiskArgs();

    /**
     * Instance attached to the disk.
     * 
     */
    @Import(name="attachedTo")
      private final @Nullable Output<String> attachedTo;

    public Output<String> getAttachedTo() {
        return this.attachedTo == null ? Output.empty() : this.attachedTo;
    }

    /**
     * Attachment state of the disk.
     * 
     */
    @Import(name="attachmentState")
      private final @Nullable Output<String> attachmentState;

    public Output<String> getAttachmentState() {
        return this.attachmentState == null ? Output.empty() : this.attachmentState;
    }

    /**
     * The names to use for your new Lightsail disk.
     * 
     */
    @Import(name="diskName", required=true)
      private final Output<String> diskName;

    public Output<String> getDiskName() {
        return this.diskName;
    }

    /**
     * IOPS of disk.
     * 
     */
    @Import(name="iOPS")
      private final @Nullable Output<Integer> iOPS;

    public Output<Integer> getIOPS() {
        return this.iOPS == null ? Output.empty() : this.iOPS;
    }

    /**
     * Is the Attached disk is the system disk of the Instance.
     * 
     */
    @Import(name="isSystemDisk")
      private final @Nullable Output<Boolean> isSystemDisk;

    public Output<Boolean> getIsSystemDisk() {
        return this.isSystemDisk == null ? Output.empty() : this.isSystemDisk;
    }

    /**
     * Path of the disk attached to the instance.
     * 
     */
    @Import(name="path", required=true)
      private final Output<String> path;

    public Output<String> getPath() {
        return this.path;
    }

    /**
     * Size of the disk attached to the Instance.
     * 
     */
    @Import(name="sizeInGb")
      private final @Nullable Output<String> sizeInGb;

    public Output<String> getSizeInGb() {
        return this.sizeInGb == null ? Output.empty() : this.sizeInGb;
    }

    public InstanceDiskArgs(
        @Nullable Output<String> attachedTo,
        @Nullable Output<String> attachmentState,
        Output<String> diskName,
        @Nullable Output<Integer> iOPS,
        @Nullable Output<Boolean> isSystemDisk,
        Output<String> path,
        @Nullable Output<String> sizeInGb) {
        this.attachedTo = attachedTo;
        this.attachmentState = attachmentState;
        this.diskName = Objects.requireNonNull(diskName, "expected parameter 'diskName' to be non-null");
        this.iOPS = iOPS;
        this.isSystemDisk = isSystemDisk;
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
        this.sizeInGb = sizeInGb;
    }

    private InstanceDiskArgs() {
        this.attachedTo = Output.empty();
        this.attachmentState = Output.empty();
        this.diskName = Output.empty();
        this.iOPS = Output.empty();
        this.isSystemDisk = Output.empty();
        this.path = Output.empty();
        this.sizeInGb = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> attachedTo;
        private @Nullable Output<String> attachmentState;
        private Output<String> diskName;
        private @Nullable Output<Integer> iOPS;
        private @Nullable Output<Boolean> isSystemDisk;
        private Output<String> path;
        private @Nullable Output<String> sizeInGb;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedTo = defaults.attachedTo;
    	      this.attachmentState = defaults.attachmentState;
    	      this.diskName = defaults.diskName;
    	      this.iOPS = defaults.iOPS;
    	      this.isSystemDisk = defaults.isSystemDisk;
    	      this.path = defaults.path;
    	      this.sizeInGb = defaults.sizeInGb;
        }

        public Builder attachedTo(@Nullable Output<String> attachedTo) {
            this.attachedTo = attachedTo;
            return this;
        }
        public Builder attachedTo(@Nullable String attachedTo) {
            this.attachedTo = Output.ofNullable(attachedTo);
            return this;
        }
        public Builder attachmentState(@Nullable Output<String> attachmentState) {
            this.attachmentState = attachmentState;
            return this;
        }
        public Builder attachmentState(@Nullable String attachmentState) {
            this.attachmentState = Output.ofNullable(attachmentState);
            return this;
        }
        public Builder diskName(Output<String> diskName) {
            this.diskName = Objects.requireNonNull(diskName);
            return this;
        }
        public Builder diskName(String diskName) {
            this.diskName = Output.of(Objects.requireNonNull(diskName));
            return this;
        }
        public Builder iOPS(@Nullable Output<Integer> iOPS) {
            this.iOPS = iOPS;
            return this;
        }
        public Builder iOPS(@Nullable Integer iOPS) {
            this.iOPS = Output.ofNullable(iOPS);
            return this;
        }
        public Builder isSystemDisk(@Nullable Output<Boolean> isSystemDisk) {
            this.isSystemDisk = isSystemDisk;
            return this;
        }
        public Builder isSystemDisk(@Nullable Boolean isSystemDisk) {
            this.isSystemDisk = Output.ofNullable(isSystemDisk);
            return this;
        }
        public Builder path(Output<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder path(String path) {
            this.path = Output.of(Objects.requireNonNull(path));
            return this;
        }
        public Builder sizeInGb(@Nullable Output<String> sizeInGb) {
            this.sizeInGb = sizeInGb;
            return this;
        }
        public Builder sizeInGb(@Nullable String sizeInGb) {
            this.sizeInGb = Output.ofNullable(sizeInGb);
            return this;
        }        public InstanceDiskArgs build() {
            return new InstanceDiskArgs(attachedTo, attachmentState, diskName, iOPS, isSystemDisk, path, sizeInGb);
        }
    }
}
