// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.healthlake;

import io.pulumi.awsnative.healthlake.enums.FHIRDatastoreDatastoreTypeVersion;
import io.pulumi.awsnative.healthlake.inputs.FHIRDatastorePreloadDataConfigArgs;
import io.pulumi.awsnative.healthlake.inputs.FHIRDatastoreSseConfigurationArgs;
import io.pulumi.awsnative.healthlake.inputs.FHIRDatastoreTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FHIRDatastoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final FHIRDatastoreArgs Empty = new FHIRDatastoreArgs();

    @InputImport(name="datastoreName")
        private final @Nullable Input<String> datastoreName;

    public Input<String> getDatastoreName() {
        return this.datastoreName == null ? Input.empty() : this.datastoreName;
    }

    @InputImport(name="datastoreTypeVersion", required=true)
        private final Input<FHIRDatastoreDatastoreTypeVersion> datastoreTypeVersion;

    public Input<FHIRDatastoreDatastoreTypeVersion> getDatastoreTypeVersion() {
        return this.datastoreTypeVersion;
    }

    @InputImport(name="preloadDataConfig")
        private final @Nullable Input<FHIRDatastorePreloadDataConfigArgs> preloadDataConfig;

    public Input<FHIRDatastorePreloadDataConfigArgs> getPreloadDataConfig() {
        return this.preloadDataConfig == null ? Input.empty() : this.preloadDataConfig;
    }

    @InputImport(name="sseConfiguration")
        private final @Nullable Input<FHIRDatastoreSseConfigurationArgs> sseConfiguration;

    public Input<FHIRDatastoreSseConfigurationArgs> getSseConfiguration() {
        return this.sseConfiguration == null ? Input.empty() : this.sseConfiguration;
    }

    @InputImport(name="tags")
        private final @Nullable Input<List<FHIRDatastoreTagArgs>> tags;

    public Input<List<FHIRDatastoreTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public FHIRDatastoreArgs(
        @Nullable Input<String> datastoreName,
        Input<FHIRDatastoreDatastoreTypeVersion> datastoreTypeVersion,
        @Nullable Input<FHIRDatastorePreloadDataConfigArgs> preloadDataConfig,
        @Nullable Input<FHIRDatastoreSseConfigurationArgs> sseConfiguration,
        @Nullable Input<List<FHIRDatastoreTagArgs>> tags) {
        this.datastoreName = datastoreName;
        this.datastoreTypeVersion = Objects.requireNonNull(datastoreTypeVersion, "expected parameter 'datastoreTypeVersion' to be non-null");
        this.preloadDataConfig = preloadDataConfig;
        this.sseConfiguration = sseConfiguration;
        this.tags = tags;
    }

    private FHIRDatastoreArgs() {
        this.datastoreName = Input.empty();
        this.datastoreTypeVersion = Input.empty();
        this.preloadDataConfig = Input.empty();
        this.sseConfiguration = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FHIRDatastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> datastoreName;
        private Input<FHIRDatastoreDatastoreTypeVersion> datastoreTypeVersion;
        private @Nullable Input<FHIRDatastorePreloadDataConfigArgs> preloadDataConfig;
        private @Nullable Input<FHIRDatastoreSseConfigurationArgs> sseConfiguration;
        private @Nullable Input<List<FHIRDatastoreTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(FHIRDatastoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastoreName = defaults.datastoreName;
    	      this.datastoreTypeVersion = defaults.datastoreTypeVersion;
    	      this.preloadDataConfig = defaults.preloadDataConfig;
    	      this.sseConfiguration = defaults.sseConfiguration;
    	      this.tags = defaults.tags;
        }

        public Builder setDatastoreName(@Nullable Input<String> datastoreName) {
            this.datastoreName = datastoreName;
            return this;
        }

        public Builder setDatastoreName(@Nullable String datastoreName) {
            this.datastoreName = Input.ofNullable(datastoreName);
            return this;
        }

        public Builder setDatastoreTypeVersion(Input<FHIRDatastoreDatastoreTypeVersion> datastoreTypeVersion) {
            this.datastoreTypeVersion = Objects.requireNonNull(datastoreTypeVersion);
            return this;
        }

        public Builder setDatastoreTypeVersion(FHIRDatastoreDatastoreTypeVersion datastoreTypeVersion) {
            this.datastoreTypeVersion = Input.of(Objects.requireNonNull(datastoreTypeVersion));
            return this;
        }

        public Builder setPreloadDataConfig(@Nullable Input<FHIRDatastorePreloadDataConfigArgs> preloadDataConfig) {
            this.preloadDataConfig = preloadDataConfig;
            return this;
        }

        public Builder setPreloadDataConfig(@Nullable FHIRDatastorePreloadDataConfigArgs preloadDataConfig) {
            this.preloadDataConfig = Input.ofNullable(preloadDataConfig);
            return this;
        }

        public Builder setSseConfiguration(@Nullable Input<FHIRDatastoreSseConfigurationArgs> sseConfiguration) {
            this.sseConfiguration = sseConfiguration;
            return this;
        }

        public Builder setSseConfiguration(@Nullable FHIRDatastoreSseConfigurationArgs sseConfiguration) {
            this.sseConfiguration = Input.ofNullable(sseConfiguration);
            return this;
        }

        public Builder setTags(@Nullable Input<List<FHIRDatastoreTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<FHIRDatastoreTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public FHIRDatastoreArgs build() {
            return new FHIRDatastoreArgs(datastoreName, datastoreTypeVersion, preloadDataConfig, sseConfiguration, tags);
        }
    }
}
