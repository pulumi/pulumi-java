// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudwatch;

import io.pulumi.awsnative.cloudwatch.inputs.MetricStreamFilterArgs;
import io.pulumi.awsnative.cloudwatch.inputs.MetricStreamTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricStreamArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricStreamArgs Empty = new MetricStreamArgs();

    /**
     * Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    @InputImport(name="excludeFilters")
      private final @Nullable Output<List<MetricStreamFilterArgs>> excludeFilters;

    public Output<List<MetricStreamFilterArgs>> getExcludeFilters() {
        return this.excludeFilters == null ? Output.empty() : this.excludeFilters;
    }

    /**
     * The ARN of the Kinesis Firehose where to stream the data.
     * 
     */
    @InputImport(name="firehoseArn", required=true)
      private final Output<String> firehoseArn;

    public Output<String> getFirehoseArn() {
        return this.firehoseArn;
    }

    /**
     * Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    @InputImport(name="includeFilters")
      private final @Nullable Output<List<MetricStreamFilterArgs>> includeFilters;

    public Output<List<MetricStreamFilterArgs>> getIncludeFilters() {
        return this.includeFilters == null ? Output.empty() : this.includeFilters;
    }

    /**
     * Name of the metric stream.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The output format of the data streamed to the Kinesis Firehose.
     * 
     */
    @InputImport(name="outputFormat", required=true)
      private final Output<String> outputFormat;

    public Output<String> getOutputFormat() {
        return this.outputFormat;
    }

    /**
     * The ARN of the role that provides access to the Kinesis Firehose.
     * 
     */
    @InputImport(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     * A set of tags to assign to the delivery stream.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<List<MetricStreamTagArgs>> tags;

    public Output<List<MetricStreamTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public MetricStreamArgs(
        @Nullable Output<List<MetricStreamFilterArgs>> excludeFilters,
        Output<String> firehoseArn,
        @Nullable Output<List<MetricStreamFilterArgs>> includeFilters,
        @Nullable Output<String> name,
        Output<String> outputFormat,
        Output<String> roleArn,
        @Nullable Output<List<MetricStreamTagArgs>> tags) {
        this.excludeFilters = excludeFilters;
        this.firehoseArn = Objects.requireNonNull(firehoseArn, "expected parameter 'firehoseArn' to be non-null");
        this.includeFilters = includeFilters;
        this.name = name;
        this.outputFormat = Objects.requireNonNull(outputFormat, "expected parameter 'outputFormat' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.tags = tags;
    }

    private MetricStreamArgs() {
        this.excludeFilters = Output.empty();
        this.firehoseArn = Output.empty();
        this.includeFilters = Output.empty();
        this.name = Output.empty();
        this.outputFormat = Output.empty();
        this.roleArn = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<MetricStreamFilterArgs>> excludeFilters;
        private Output<String> firehoseArn;
        private @Nullable Output<List<MetricStreamFilterArgs>> includeFilters;
        private @Nullable Output<String> name;
        private Output<String> outputFormat;
        private Output<String> roleArn;
        private @Nullable Output<List<MetricStreamTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricStreamArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeFilters = defaults.excludeFilters;
    	      this.firehoseArn = defaults.firehoseArn;
    	      this.includeFilters = defaults.includeFilters;
    	      this.name = defaults.name;
    	      this.outputFormat = defaults.outputFormat;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
        }

        public Builder excludeFilters(@Nullable Output<List<MetricStreamFilterArgs>> excludeFilters) {
            this.excludeFilters = excludeFilters;
            return this;
        }

        public Builder excludeFilters(@Nullable List<MetricStreamFilterArgs> excludeFilters) {
            this.excludeFilters = Output.ofNullable(excludeFilters);
            return this;
        }

        public Builder firehoseArn(Output<String> firehoseArn) {
            this.firehoseArn = Objects.requireNonNull(firehoseArn);
            return this;
        }

        public Builder firehoseArn(String firehoseArn) {
            this.firehoseArn = Output.of(Objects.requireNonNull(firehoseArn));
            return this;
        }

        public Builder includeFilters(@Nullable Output<List<MetricStreamFilterArgs>> includeFilters) {
            this.includeFilters = includeFilters;
            return this;
        }

        public Builder includeFilters(@Nullable List<MetricStreamFilterArgs> includeFilters) {
            this.includeFilters = Output.ofNullable(includeFilters);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder outputFormat(Output<String> outputFormat) {
            this.outputFormat = Objects.requireNonNull(outputFormat);
            return this;
        }

        public Builder outputFormat(String outputFormat) {
            this.outputFormat = Output.of(Objects.requireNonNull(outputFormat));
            return this;
        }

        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder tags(@Nullable Output<List<MetricStreamTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<MetricStreamTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public MetricStreamArgs build() {
            return new MetricStreamArgs(excludeFilters, firehoseArn, includeFilters, name, outputFormat, roleArn, tags);
        }
    }
}
