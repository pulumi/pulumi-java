// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kinesisfirehose.outputs;

import io.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamSplunkDestinationConfigurationHECEndpointType;
import io.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamCloudWatchLoggingOptions;
import io.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamProcessingConfiguration;
import io.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamS3DestinationConfiguration;
import io.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamSplunkRetryOptions;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DeliveryStreamSplunkDestinationConfiguration {
    private final @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
    private final @Nullable Integer hECAcknowledgmentTimeoutInSeconds;
    private final String hECEndpoint;
    private final DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType;
    private final String hECToken;
    private final @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
    private final @Nullable DeliveryStreamSplunkRetryOptions retryOptions;
    private final @Nullable String s3BackupMode;
    private final DeliveryStreamS3DestinationConfiguration s3Configuration;

    @OutputCustomType.Constructor({"cloudWatchLoggingOptions","hECAcknowledgmentTimeoutInSeconds","hECEndpoint","hECEndpointType","hECToken","processingConfiguration","retryOptions","s3BackupMode","s3Configuration"})
    private DeliveryStreamSplunkDestinationConfiguration(
        @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions,
        @Nullable Integer hECAcknowledgmentTimeoutInSeconds,
        String hECEndpoint,
        DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType,
        String hECToken,
        @Nullable DeliveryStreamProcessingConfiguration processingConfiguration,
        @Nullable DeliveryStreamSplunkRetryOptions retryOptions,
        @Nullable String s3BackupMode,
        DeliveryStreamS3DestinationConfiguration s3Configuration) {
        this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
        this.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
        this.hECEndpoint = Objects.requireNonNull(hECEndpoint);
        this.hECEndpointType = Objects.requireNonNull(hECEndpointType);
        this.hECToken = Objects.requireNonNull(hECToken);
        this.processingConfiguration = processingConfiguration;
        this.retryOptions = retryOptions;
        this.s3BackupMode = s3BackupMode;
        this.s3Configuration = Objects.requireNonNull(s3Configuration);
    }

    public Optional<DeliveryStreamCloudWatchLoggingOptions> getCloudWatchLoggingOptions() {
        return Optional.ofNullable(this.cloudWatchLoggingOptions);
    }
    public Optional<Integer> getHECAcknowledgmentTimeoutInSeconds() {
        return Optional.ofNullable(this.hECAcknowledgmentTimeoutInSeconds);
    }
    public String getHECEndpoint() {
        return this.hECEndpoint;
    }
    public DeliveryStreamSplunkDestinationConfigurationHECEndpointType getHECEndpointType() {
        return this.hECEndpointType;
    }
    public String getHECToken() {
        return this.hECToken;
    }
    public Optional<DeliveryStreamProcessingConfiguration> getProcessingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    public Optional<DeliveryStreamSplunkRetryOptions> getRetryOptions() {
        return Optional.ofNullable(this.retryOptions);
    }
    public Optional<String> getS3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }
    public DeliveryStreamS3DestinationConfiguration getS3Configuration() {
        return this.s3Configuration;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamSplunkDestinationConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
        private @Nullable Integer hECAcknowledgmentTimeoutInSeconds;
        private String hECEndpoint;
        private DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType;
        private String hECToken;
        private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
        private @Nullable DeliveryStreamSplunkRetryOptions retryOptions;
        private @Nullable String s3BackupMode;
        private DeliveryStreamS3DestinationConfiguration s3Configuration;

        public Builder() {
    	      // Empty
        }

        public Builder(DeliveryStreamSplunkDestinationConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.hECAcknowledgmentTimeoutInSeconds = defaults.hECAcknowledgmentTimeoutInSeconds;
    	      this.hECEndpoint = defaults.hECEndpoint;
    	      this.hECEndpointType = defaults.hECEndpointType;
    	      this.hECToken = defaults.hECToken;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryOptions = defaults.retryOptions;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
        }

        public Builder setCloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }

        public Builder setHECAcknowledgmentTimeoutInSeconds(@Nullable Integer hECAcknowledgmentTimeoutInSeconds) {
            this.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
            return this;
        }

        public Builder setHECEndpoint(String hECEndpoint) {
            this.hECEndpoint = Objects.requireNonNull(hECEndpoint);
            return this;
        }

        public Builder setHECEndpointType(DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType) {
            this.hECEndpointType = Objects.requireNonNull(hECEndpointType);
            return this;
        }

        public Builder setHECToken(String hECToken) {
            this.hECToken = Objects.requireNonNull(hECToken);
            return this;
        }

        public Builder setProcessingConfiguration(@Nullable DeliveryStreamProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder setRetryOptions(@Nullable DeliveryStreamSplunkRetryOptions retryOptions) {
            this.retryOptions = retryOptions;
            return this;
        }

        public Builder setS3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }

        public Builder setS3Configuration(DeliveryStreamS3DestinationConfiguration s3Configuration) {
            this.s3Configuration = Objects.requireNonNull(s3Configuration);
            return this;
        }
        public DeliveryStreamSplunkDestinationConfiguration build() {
            return new DeliveryStreamSplunkDestinationConfiguration(cloudWatchLoggingOptions, hECAcknowledgmentTimeoutInSeconds, hECEndpoint, hECEndpointType, hECToken, processingConfiguration, retryOptions, s3BackupMode, s3Configuration);
        }
    }
}
