// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.backup;

import io.pulumi.awsnative.backup.inputs.FrameworkControlArgs;
import io.pulumi.awsnative.backup.inputs.FrameworkTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FrameworkArgs extends io.pulumi.resources.ResourceArgs {

    public static final FrameworkArgs Empty = new FrameworkArgs();

    /**
     * Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
     * 
     */
    @InputImport(name="frameworkControls", required=true)
      private final Output<List<FrameworkControlArgs>> frameworkControls;

    public Output<List<FrameworkControlArgs>> getFrameworkControls() {
        return this.frameworkControls;
    }

    /**
     * An optional description of the framework with a maximum 1,024 characters.
     * 
     */
    @InputImport(name="frameworkDescription")
      private final @Nullable Output<String> frameworkDescription;

    public Output<String> getFrameworkDescription() {
        return this.frameworkDescription == null ? Output.empty() : this.frameworkDescription;
    }

    /**
     * The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
     * 
     */
    @InputImport(name="frameworkName")
      private final @Nullable Output<String> frameworkName;

    public Output<String> getFrameworkName() {
        return this.frameworkName == null ? Output.empty() : this.frameworkName;
    }

    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     * 
     */
    @InputImport(name="frameworkTags")
      private final @Nullable Output<List<FrameworkTagArgs>> frameworkTags;

    public Output<List<FrameworkTagArgs>> getFrameworkTags() {
        return this.frameworkTags == null ? Output.empty() : this.frameworkTags;
    }

    public FrameworkArgs(
        Output<List<FrameworkControlArgs>> frameworkControls,
        @Nullable Output<String> frameworkDescription,
        @Nullable Output<String> frameworkName,
        @Nullable Output<List<FrameworkTagArgs>> frameworkTags) {
        this.frameworkControls = Objects.requireNonNull(frameworkControls, "expected parameter 'frameworkControls' to be non-null");
        this.frameworkDescription = frameworkDescription;
        this.frameworkName = frameworkName;
        this.frameworkTags = frameworkTags;
    }

    private FrameworkArgs() {
        this.frameworkControls = Output.empty();
        this.frameworkDescription = Output.empty();
        this.frameworkName = Output.empty();
        this.frameworkTags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrameworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<FrameworkControlArgs>> frameworkControls;
        private @Nullable Output<String> frameworkDescription;
        private @Nullable Output<String> frameworkName;
        private @Nullable Output<List<FrameworkTagArgs>> frameworkTags;

        public Builder() {
    	      // Empty
        }

        public Builder(FrameworkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.frameworkControls = defaults.frameworkControls;
    	      this.frameworkDescription = defaults.frameworkDescription;
    	      this.frameworkName = defaults.frameworkName;
    	      this.frameworkTags = defaults.frameworkTags;
        }

        public Builder frameworkControls(Output<List<FrameworkControlArgs>> frameworkControls) {
            this.frameworkControls = Objects.requireNonNull(frameworkControls);
            return this;
        }

        public Builder frameworkControls(List<FrameworkControlArgs> frameworkControls) {
            this.frameworkControls = Output.of(Objects.requireNonNull(frameworkControls));
            return this;
        }

        public Builder frameworkDescription(@Nullable Output<String> frameworkDescription) {
            this.frameworkDescription = frameworkDescription;
            return this;
        }

        public Builder frameworkDescription(@Nullable String frameworkDescription) {
            this.frameworkDescription = Output.ofNullable(frameworkDescription);
            return this;
        }

        public Builder frameworkName(@Nullable Output<String> frameworkName) {
            this.frameworkName = frameworkName;
            return this;
        }

        public Builder frameworkName(@Nullable String frameworkName) {
            this.frameworkName = Output.ofNullable(frameworkName);
            return this;
        }

        public Builder frameworkTags(@Nullable Output<List<FrameworkTagArgs>> frameworkTags) {
            this.frameworkTags = frameworkTags;
            return this;
        }

        public Builder frameworkTags(@Nullable List<FrameworkTagArgs> frameworkTags) {
            this.frameworkTags = Output.ofNullable(frameworkTags);
            return this;
        }
        public FrameworkArgs build() {
            return new FrameworkArgs(frameworkControls, frameworkDescription, frameworkName, frameworkTags);
        }
    }
}
