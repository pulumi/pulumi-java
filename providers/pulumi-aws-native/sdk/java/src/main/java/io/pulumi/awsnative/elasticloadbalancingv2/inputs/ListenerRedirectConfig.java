// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.elasticloadbalancingv2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerRedirectConfig extends io.pulumi.resources.InvokeArgs {

    public static final ListenerRedirectConfig Empty = new ListenerRedirectConfig();

    @Import(name="host")
      private final @Nullable String host;

    public Optional<String> host() {
        return this.host == null ? Optional.empty() : Optional.ofNullable(this.host);
    }

    @Import(name="path")
      private final @Nullable String path;

    public Optional<String> path() {
        return this.path == null ? Optional.empty() : Optional.ofNullable(this.path);
    }

    @Import(name="port")
      private final @Nullable String port;

    public Optional<String> port() {
        return this.port == null ? Optional.empty() : Optional.ofNullable(this.port);
    }

    @Import(name="protocol")
      private final @Nullable String protocol;

    public Optional<String> protocol() {
        return this.protocol == null ? Optional.empty() : Optional.ofNullable(this.protocol);
    }

    @Import(name="query")
      private final @Nullable String query;

    public Optional<String> query() {
        return this.query == null ? Optional.empty() : Optional.ofNullable(this.query);
    }

    @Import(name="statusCode", required=true)
      private final String statusCode;

    public String statusCode() {
        return this.statusCode;
    }

    public ListenerRedirectConfig(
        @Nullable String host,
        @Nullable String path,
        @Nullable String port,
        @Nullable String protocol,
        @Nullable String query,
        String statusCode) {
        this.host = host;
        this.path = path;
        this.port = port;
        this.protocol = protocol;
        this.query = query;
        this.statusCode = Objects.requireNonNull(statusCode, "expected parameter 'statusCode' to be non-null");
    }

    private ListenerRedirectConfig() {
        this.host = null;
        this.path = null;
        this.port = null;
        this.protocol = null;
        this.query = null;
        this.statusCode = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerRedirectConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String host;
        private @Nullable String path;
        private @Nullable String port;
        private @Nullable String protocol;
        private @Nullable String query;
        private String statusCode;

        public Builder() {
    	      // Empty
        }

        public Builder(ListenerRedirectConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.query = defaults.query;
    	      this.statusCode = defaults.statusCode;
        }

        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        public Builder port(@Nullable String port) {
            this.port = port;
            return this;
        }
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder query(@Nullable String query) {
            this.query = query;
            return this;
        }
        public Builder statusCode(String statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }        public ListenerRedirectConfig build() {
            return new ListenerRedirectConfig(host, path, port, protocol, query, statusCode);
        }
    }
}
