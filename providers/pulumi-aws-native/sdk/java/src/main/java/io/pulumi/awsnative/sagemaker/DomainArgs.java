// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.sagemaker;

import io.pulumi.awsnative.sagemaker.enums.DomainAppNetworkAccessType;
import io.pulumi.awsnative.sagemaker.enums.DomainAuthMode;
import io.pulumi.awsnative.sagemaker.inputs.DomainTagArgs;
import io.pulumi.awsnative.sagemaker.inputs.DomainUserSettingsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
     * 
     */
    @Import(name="appNetworkAccessType")
      private final @Nullable Output<DomainAppNetworkAccessType> appNetworkAccessType;

    public Output<DomainAppNetworkAccessType> getAppNetworkAccessType() {
        return this.appNetworkAccessType == null ? Codegen.empty() : this.appNetworkAccessType;
    }

    /**
     * The mode of authentication that members use to access the domain.
     * 
     */
    @Import(name="authMode", required=true)
      private final Output<DomainAuthMode> authMode;

    public Output<DomainAuthMode> getAuthMode() {
        return this.authMode;
    }

    /**
     * The default user settings.
     * 
     */
    @Import(name="defaultUserSettings", required=true)
      private final Output<DomainUserSettingsArgs> defaultUserSettings;

    public Output<DomainUserSettingsArgs> getDefaultUserSettings() {
        return this.defaultUserSettings;
    }

    /**
     * A name for the domain.
     * 
     */
    @Import(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName == null ? Codegen.empty() : this.domainName;
    }

    /**
     * SageMaker uses AWS KMS to encrypt the EFS volume attached to the domain with an AWS managed customer master key (CMK) by default.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * The VPC subnets that Studio uses for communication.
     * 
     */
    @Import(name="subnetIds", required=true)
      private final Output<List<String>> subnetIds;

    public Output<List<String>> getSubnetIds() {
        return this.subnetIds;
    }

    /**
     * A list of tags to apply to the user profile.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<DomainTagArgs>> tags;

    public Output<List<DomainTagArgs>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     * 
     */
    @Import(name="vpcId", required=true)
      private final Output<String> vpcId;

    public Output<String> getVpcId() {
        return this.vpcId;
    }

    public DomainArgs(
        @Nullable Output<DomainAppNetworkAccessType> appNetworkAccessType,
        Output<DomainAuthMode> authMode,
        Output<DomainUserSettingsArgs> defaultUserSettings,
        @Nullable Output<String> domainName,
        @Nullable Output<String> kmsKeyId,
        Output<List<String>> subnetIds,
        @Nullable Output<List<DomainTagArgs>> tags,
        Output<String> vpcId) {
        this.appNetworkAccessType = appNetworkAccessType;
        this.authMode = Objects.requireNonNull(authMode, "expected parameter 'authMode' to be non-null");
        this.defaultUserSettings = Objects.requireNonNull(defaultUserSettings, "expected parameter 'defaultUserSettings' to be non-null");
        this.domainName = domainName;
        this.kmsKeyId = kmsKeyId;
        this.subnetIds = Objects.requireNonNull(subnetIds, "expected parameter 'subnetIds' to be non-null");
        this.tags = tags;
        this.vpcId = Objects.requireNonNull(vpcId, "expected parameter 'vpcId' to be non-null");
    }

    private DomainArgs() {
        this.appNetworkAccessType = Codegen.empty();
        this.authMode = Codegen.empty();
        this.defaultUserSettings = Codegen.empty();
        this.domainName = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.subnetIds = Codegen.empty();
        this.tags = Codegen.empty();
        this.vpcId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DomainAppNetworkAccessType> appNetworkAccessType;
        private Output<DomainAuthMode> authMode;
        private Output<DomainUserSettingsArgs> defaultUserSettings;
        private @Nullable Output<String> domainName;
        private @Nullable Output<String> kmsKeyId;
        private Output<List<String>> subnetIds;
        private @Nullable Output<List<DomainTagArgs>> tags;
        private Output<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appNetworkAccessType = defaults.appNetworkAccessType;
    	      this.authMode = defaults.authMode;
    	      this.defaultUserSettings = defaults.defaultUserSettings;
    	      this.domainName = defaults.domainName;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder appNetworkAccessType(@Nullable Output<DomainAppNetworkAccessType> appNetworkAccessType) {
            this.appNetworkAccessType = appNetworkAccessType;
            return this;
        }
        public Builder appNetworkAccessType(@Nullable DomainAppNetworkAccessType appNetworkAccessType) {
            this.appNetworkAccessType = Codegen.ofNullable(appNetworkAccessType);
            return this;
        }
        public Builder authMode(Output<DomainAuthMode> authMode) {
            this.authMode = Objects.requireNonNull(authMode);
            return this;
        }
        public Builder authMode(DomainAuthMode authMode) {
            this.authMode = Output.of(Objects.requireNonNull(authMode));
            return this;
        }
        public Builder defaultUserSettings(Output<DomainUserSettingsArgs> defaultUserSettings) {
            this.defaultUserSettings = Objects.requireNonNull(defaultUserSettings);
            return this;
        }
        public Builder defaultUserSettings(DomainUserSettingsArgs defaultUserSettings) {
            this.defaultUserSettings = Output.of(Objects.requireNonNull(defaultUserSettings));
            return this;
        }
        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }
        public Builder domainName(@Nullable String domainName) {
            this.domainName = Codegen.ofNullable(domainName);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder subnetIds(Output<List<String>> subnetIds) {
            this.subnetIds = Objects.requireNonNull(subnetIds);
            return this;
        }
        public Builder subnetIds(List<String> subnetIds) {
            this.subnetIds = Output.of(Objects.requireNonNull(subnetIds));
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        public Builder tags(@Nullable Output<List<DomainTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<DomainTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(DomainTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder vpcId(Output<String> vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Output.of(Objects.requireNonNull(vpcId));
            return this;
        }        public DomainArgs build() {
            return new DomainArgs(appNetworkAccessType, authMode, defaultUserSettings, domainName, kmsKeyId, subnetIds, tags, vpcId);
        }
    }
}
