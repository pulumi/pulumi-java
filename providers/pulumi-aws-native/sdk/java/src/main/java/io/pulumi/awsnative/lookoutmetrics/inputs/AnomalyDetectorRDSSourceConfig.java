// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lookoutmetrics.inputs;

import io.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorVpcConfiguration;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AnomalyDetectorRDSSourceConfig extends io.pulumi.resources.InvokeArgs {

    public static final AnomalyDetectorRDSSourceConfig Empty = new AnomalyDetectorRDSSourceConfig();

    @Import(name="dBInstanceIdentifier", required=true)
      private final String dBInstanceIdentifier;

    public String getDBInstanceIdentifier() {
        return this.dBInstanceIdentifier;
    }

    @Import(name="databaseHost", required=true)
      private final String databaseHost;

    public String getDatabaseHost() {
        return this.databaseHost;
    }

    @Import(name="databaseName", required=true)
      private final String databaseName;

    public String getDatabaseName() {
        return this.databaseName;
    }

    @Import(name="databasePort", required=true)
      private final Integer databasePort;

    public Integer getDatabasePort() {
        return this.databasePort;
    }

    @Import(name="roleArn", required=true)
      private final String roleArn;

    public String getRoleArn() {
        return this.roleArn;
    }

    @Import(name="secretManagerArn", required=true)
      private final String secretManagerArn;

    public String getSecretManagerArn() {
        return this.secretManagerArn;
    }

    @Import(name="tableName", required=true)
      private final String tableName;

    public String getTableName() {
        return this.tableName;
    }

    @Import(name="vpcConfiguration", required=true)
      private final AnomalyDetectorVpcConfiguration vpcConfiguration;

    public AnomalyDetectorVpcConfiguration getVpcConfiguration() {
        return this.vpcConfiguration;
    }

    public AnomalyDetectorRDSSourceConfig(
        String dBInstanceIdentifier,
        String databaseHost,
        String databaseName,
        Integer databasePort,
        String roleArn,
        String secretManagerArn,
        String tableName,
        AnomalyDetectorVpcConfiguration vpcConfiguration) {
        this.dBInstanceIdentifier = Objects.requireNonNull(dBInstanceIdentifier, "expected parameter 'dBInstanceIdentifier' to be non-null");
        this.databaseHost = Objects.requireNonNull(databaseHost, "expected parameter 'databaseHost' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.databasePort = Objects.requireNonNull(databasePort, "expected parameter 'databasePort' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.secretManagerArn = Objects.requireNonNull(secretManagerArn, "expected parameter 'secretManagerArn' to be non-null");
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
        this.vpcConfiguration = Objects.requireNonNull(vpcConfiguration, "expected parameter 'vpcConfiguration' to be non-null");
    }

    private AnomalyDetectorRDSSourceConfig() {
        this.dBInstanceIdentifier = null;
        this.databaseHost = null;
        this.databaseName = null;
        this.databasePort = null;
        this.roleArn = null;
        this.secretManagerArn = null;
        this.tableName = null;
        this.vpcConfiguration = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnomalyDetectorRDSSourceConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String dBInstanceIdentifier;
        private String databaseHost;
        private String databaseName;
        private Integer databasePort;
        private String roleArn;
        private String secretManagerArn;
        private String tableName;
        private AnomalyDetectorVpcConfiguration vpcConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(AnomalyDetectorRDSSourceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dBInstanceIdentifier = defaults.dBInstanceIdentifier;
    	      this.databaseHost = defaults.databaseHost;
    	      this.databaseName = defaults.databaseName;
    	      this.databasePort = defaults.databasePort;
    	      this.roleArn = defaults.roleArn;
    	      this.secretManagerArn = defaults.secretManagerArn;
    	      this.tableName = defaults.tableName;
    	      this.vpcConfiguration = defaults.vpcConfiguration;
        }

        public Builder dBInstanceIdentifier(String dBInstanceIdentifier) {
            this.dBInstanceIdentifier = Objects.requireNonNull(dBInstanceIdentifier);
            return this;
        }

        public Builder databaseHost(String databaseHost) {
            this.databaseHost = Objects.requireNonNull(databaseHost);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databasePort(Integer databasePort) {
            this.databasePort = Objects.requireNonNull(databasePort);
            return this;
        }

        public Builder roleArn(String roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder secretManagerArn(String secretManagerArn) {
            this.secretManagerArn = Objects.requireNonNull(secretManagerArn);
            return this;
        }

        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }

        public Builder vpcConfiguration(AnomalyDetectorVpcConfiguration vpcConfiguration) {
            this.vpcConfiguration = Objects.requireNonNull(vpcConfiguration);
            return this;
        }
        public AnomalyDetectorRDSSourceConfig build() {
            return new AnomalyDetectorRDSSourceConfig(dBInstanceIdentifier, databaseHost, databaseName, databasePort, roleArn, secretManagerArn, tableName, vpcConfiguration);
        }
    }
}
