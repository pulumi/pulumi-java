// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation.inputs;

import io.pulumi.awsnative.cloudformation.enums.StackSetRegionConcurrencyType;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The user-specified preferences for how AWS CloudFormation performs a stack set operation.
 * 
 */
public final class StackSetOperationPreferencesArgs extends io.pulumi.resources.ResourceArgs {

    public static final StackSetOperationPreferencesArgs Empty = new StackSetOperationPreferencesArgs();

    @InputImport(name="failureToleranceCount")
        private final @Nullable Input<Integer> failureToleranceCount;

    public Input<Integer> getFailureToleranceCount() {
        return this.failureToleranceCount == null ? Input.empty() : this.failureToleranceCount;
    }

    @InputImport(name="failureTolerancePercentage")
        private final @Nullable Input<Integer> failureTolerancePercentage;

    public Input<Integer> getFailureTolerancePercentage() {
        return this.failureTolerancePercentage == null ? Input.empty() : this.failureTolerancePercentage;
    }

    @InputImport(name="maxConcurrentCount")
        private final @Nullable Input<Integer> maxConcurrentCount;

    public Input<Integer> getMaxConcurrentCount() {
        return this.maxConcurrentCount == null ? Input.empty() : this.maxConcurrentCount;
    }

    @InputImport(name="maxConcurrentPercentage")
        private final @Nullable Input<Integer> maxConcurrentPercentage;

    public Input<Integer> getMaxConcurrentPercentage() {
        return this.maxConcurrentPercentage == null ? Input.empty() : this.maxConcurrentPercentage;
    }

    @InputImport(name="regionConcurrencyType")
        private final @Nullable Input<StackSetRegionConcurrencyType> regionConcurrencyType;

    public Input<StackSetRegionConcurrencyType> getRegionConcurrencyType() {
        return this.regionConcurrencyType == null ? Input.empty() : this.regionConcurrencyType;
    }

    @InputImport(name="regionOrder")
        private final @Nullable Input<List<String>> regionOrder;

    public Input<List<String>> getRegionOrder() {
        return this.regionOrder == null ? Input.empty() : this.regionOrder;
    }

    public StackSetOperationPreferencesArgs(
        @Nullable Input<Integer> failureToleranceCount,
        @Nullable Input<Integer> failureTolerancePercentage,
        @Nullable Input<Integer> maxConcurrentCount,
        @Nullable Input<Integer> maxConcurrentPercentage,
        @Nullable Input<StackSetRegionConcurrencyType> regionConcurrencyType,
        @Nullable Input<List<String>> regionOrder) {
        this.failureToleranceCount = failureToleranceCount;
        this.failureTolerancePercentage = failureTolerancePercentage;
        this.maxConcurrentCount = maxConcurrentCount;
        this.maxConcurrentPercentage = maxConcurrentPercentage;
        this.regionConcurrencyType = regionConcurrencyType;
        this.regionOrder = regionOrder;
    }

    private StackSetOperationPreferencesArgs() {
        this.failureToleranceCount = Input.empty();
        this.failureTolerancePercentage = Input.empty();
        this.maxConcurrentCount = Input.empty();
        this.maxConcurrentPercentage = Input.empty();
        this.regionConcurrencyType = Input.empty();
        this.regionOrder = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StackSetOperationPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> failureToleranceCount;
        private @Nullable Input<Integer> failureTolerancePercentage;
        private @Nullable Input<Integer> maxConcurrentCount;
        private @Nullable Input<Integer> maxConcurrentPercentage;
        private @Nullable Input<StackSetRegionConcurrencyType> regionConcurrencyType;
        private @Nullable Input<List<String>> regionOrder;

        public Builder() {
    	      // Empty
        }

        public Builder(StackSetOperationPreferencesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureToleranceCount = defaults.failureToleranceCount;
    	      this.failureTolerancePercentage = defaults.failureTolerancePercentage;
    	      this.maxConcurrentCount = defaults.maxConcurrentCount;
    	      this.maxConcurrentPercentage = defaults.maxConcurrentPercentage;
    	      this.regionConcurrencyType = defaults.regionConcurrencyType;
    	      this.regionOrder = defaults.regionOrder;
        }

        public Builder setFailureToleranceCount(@Nullable Input<Integer> failureToleranceCount) {
            this.failureToleranceCount = failureToleranceCount;
            return this;
        }

        public Builder setFailureToleranceCount(@Nullable Integer failureToleranceCount) {
            this.failureToleranceCount = Input.ofNullable(failureToleranceCount);
            return this;
        }

        public Builder setFailureTolerancePercentage(@Nullable Input<Integer> failureTolerancePercentage) {
            this.failureTolerancePercentage = failureTolerancePercentage;
            return this;
        }

        public Builder setFailureTolerancePercentage(@Nullable Integer failureTolerancePercentage) {
            this.failureTolerancePercentage = Input.ofNullable(failureTolerancePercentage);
            return this;
        }

        public Builder setMaxConcurrentCount(@Nullable Input<Integer> maxConcurrentCount) {
            this.maxConcurrentCount = maxConcurrentCount;
            return this;
        }

        public Builder setMaxConcurrentCount(@Nullable Integer maxConcurrentCount) {
            this.maxConcurrentCount = Input.ofNullable(maxConcurrentCount);
            return this;
        }

        public Builder setMaxConcurrentPercentage(@Nullable Input<Integer> maxConcurrentPercentage) {
            this.maxConcurrentPercentage = maxConcurrentPercentage;
            return this;
        }

        public Builder setMaxConcurrentPercentage(@Nullable Integer maxConcurrentPercentage) {
            this.maxConcurrentPercentage = Input.ofNullable(maxConcurrentPercentage);
            return this;
        }

        public Builder setRegionConcurrencyType(@Nullable Input<StackSetRegionConcurrencyType> regionConcurrencyType) {
            this.regionConcurrencyType = regionConcurrencyType;
            return this;
        }

        public Builder setRegionConcurrencyType(@Nullable StackSetRegionConcurrencyType regionConcurrencyType) {
            this.regionConcurrencyType = Input.ofNullable(regionConcurrencyType);
            return this;
        }

        public Builder setRegionOrder(@Nullable Input<List<String>> regionOrder) {
            this.regionOrder = regionOrder;
            return this;
        }

        public Builder setRegionOrder(@Nullable List<String> regionOrder) {
            this.regionOrder = Input.ofNullable(regionOrder);
            return this;
        }
        public StackSetOperationPreferencesArgs build() {
            return new StackSetOperationPreferencesArgs(failureToleranceCount, failureTolerancePercentage, maxConcurrentCount, maxConcurrentPercentage, regionConcurrencyType, regionOrder);
        }
    }
}
