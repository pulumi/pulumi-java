// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight.inputs;

import io.pulumi.awsnative.quicksight.inputs.DataSourceManifestFileLocationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.util.Objects;


/**
 * <p>S3 parameters.</p>
 * 
 */
public final class DataSourceS3ParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataSourceS3ParametersArgs Empty = new DataSourceS3ParametersArgs();

    @InputImport(name="manifestFileLocation", required=true)
    private final Input<DataSourceManifestFileLocationArgs> manifestFileLocation;

    public Input<DataSourceManifestFileLocationArgs> getManifestFileLocation() {
        return this.manifestFileLocation;
    }

    public DataSourceS3ParametersArgs(Input<DataSourceManifestFileLocationArgs> manifestFileLocation) {
        this.manifestFileLocation = Objects.requireNonNull(manifestFileLocation, "expected parameter 'manifestFileLocation' to be non-null");
    }

    private DataSourceS3ParametersArgs() {
        this.manifestFileLocation = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceS3ParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<DataSourceManifestFileLocationArgs> manifestFileLocation;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceS3ParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.manifestFileLocation = defaults.manifestFileLocation;
        }

        public Builder setManifestFileLocation(Input<DataSourceManifestFileLocationArgs> manifestFileLocation) {
            this.manifestFileLocation = Objects.requireNonNull(manifestFileLocation);
            return this;
        }

        public Builder setManifestFileLocation(DataSourceManifestFileLocationArgs manifestFileLocation) {
            this.manifestFileLocation = Input.of(Objects.requireNonNull(manifestFileLocation));
            return this;
        }

        public DataSourceS3ParametersArgs build() {
            return new DataSourceS3ParametersArgs(manifestFileLocation);
        }
    }
}
