// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation;

import io.pulumi.awsnative.cloudformation.enums.StackSetCallAs;
import io.pulumi.awsnative.cloudformation.enums.StackSetCapability;
import io.pulumi.awsnative.cloudformation.enums.StackSetPermissionModel;
import io.pulumi.awsnative.cloudformation.inputs.ManagedExecutionPropertiesArgs;
import io.pulumi.awsnative.cloudformation.inputs.StackSetAutoDeploymentArgs;
import io.pulumi.awsnative.cloudformation.inputs.StackSetOperationPreferencesArgs;
import io.pulumi.awsnative.cloudformation.inputs.StackSetParameterArgs;
import io.pulumi.awsnative.cloudformation.inputs.StackSetStackInstancesArgs;
import io.pulumi.awsnative.cloudformation.inputs.StackSetTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StackSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final StackSetArgs Empty = new StackSetArgs();

    /**
     * The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
     * 
     */
    @Import(name="administrationRoleARN")
      private final @Nullable Output<String> administrationRoleARN;

    public Output<String> administrationRoleARN() {
        return this.administrationRoleARN == null ? Codegen.empty() : this.administrationRoleARN;
    }

    /**
     * Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
     * 
     */
    @Import(name="autoDeployment")
      private final @Nullable Output<StackSetAutoDeploymentArgs> autoDeployment;

    public Output<StackSetAutoDeploymentArgs> autoDeployment() {
        return this.autoDeployment == null ? Codegen.empty() : this.autoDeployment;
    }

    /**
     * Specifies the AWS account that you are acting from. By default, SELF is specified. For self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the organization's management account, specify SELF. If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN.
     * 
     */
    @Import(name="callAs")
      private final @Nullable Output<StackSetCallAs> callAs;

    public Output<StackSetCallAs> callAs() {
        return this.callAs == null ? Codegen.empty() : this.callAs;
    }

    /**
     * In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
     * 
     */
    @Import(name="capabilities")
      private final @Nullable Output<List<StackSetCapability>> capabilities;

    public Output<List<StackSetCapability>> capabilities() {
        return this.capabilities == null ? Codegen.empty() : this.capabilities;
    }

    /**
     * A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
     * 
     */
    @Import(name="executionRoleName")
      private final @Nullable Output<String> executionRoleName;

    public Output<String> executionRoleName() {
        return this.executionRoleName == null ? Codegen.empty() : this.executionRoleName;
    }

    /**
     * Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     * 
     */
    @Import(name="managedExecution")
      private final @Nullable Output<ManagedExecutionPropertiesArgs> managedExecution;

    public Output<ManagedExecutionPropertiesArgs> managedExecution() {
        return this.managedExecution == null ? Codegen.empty() : this.managedExecution;
    }

    @Import(name="operationPreferences")
      private final @Nullable Output<StackSetOperationPreferencesArgs> operationPreferences;

    public Output<StackSetOperationPreferencesArgs> operationPreferences() {
        return this.operationPreferences == null ? Codegen.empty() : this.operationPreferences;
    }

    /**
     * The input parameters for the stack set template.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<List<StackSetParameterArgs>> parameters;

    public Output<List<StackSetParameterArgs>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
     * 
     */
    @Import(name="permissionModel", required=true)
      private final Output<StackSetPermissionModel> permissionModel;

    public Output<StackSetPermissionModel> permissionModel() {
        return this.permissionModel;
    }

    /**
     * A group of stack instances with parameters in some specific accounts and regions.
     * 
     */
    @Import(name="stackInstancesGroup")
      private final @Nullable Output<List<StackSetStackInstancesArgs>> stackInstancesGroup;

    public Output<List<StackSetStackInstancesArgs>> stackInstancesGroup() {
        return this.stackInstancesGroup == null ? Codegen.empty() : this.stackInstancesGroup;
    }

    /**
     * The name to associate with the stack set. The name must be unique in the Region where you create your stack set.
     * 
     */
    @Import(name="stackSetName")
      private final @Nullable Output<String> stackSetName;

    public Output<String> stackSetName() {
        return this.stackSetName == null ? Codegen.empty() : this.stackSetName;
    }

    /**
     * The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<StackSetTagArgs>> tags;

    public Output<List<StackSetTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
     * 
     */
    @Import(name="templateBody")
      private final @Nullable Output<String> templateBody;

    public Output<String> templateBody() {
        return this.templateBody == null ? Codegen.empty() : this.templateBody;
    }

    /**
     * Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket.
     * 
     */
    @Import(name="templateURL")
      private final @Nullable Output<String> templateURL;

    public Output<String> templateURL() {
        return this.templateURL == null ? Codegen.empty() : this.templateURL;
    }

    public StackSetArgs(
        @Nullable Output<String> administrationRoleARN,
        @Nullable Output<StackSetAutoDeploymentArgs> autoDeployment,
        @Nullable Output<StackSetCallAs> callAs,
        @Nullable Output<List<StackSetCapability>> capabilities,
        @Nullable Output<String> description,
        @Nullable Output<String> executionRoleName,
        @Nullable Output<ManagedExecutionPropertiesArgs> managedExecution,
        @Nullable Output<StackSetOperationPreferencesArgs> operationPreferences,
        @Nullable Output<List<StackSetParameterArgs>> parameters,
        Output<StackSetPermissionModel> permissionModel,
        @Nullable Output<List<StackSetStackInstancesArgs>> stackInstancesGroup,
        @Nullable Output<String> stackSetName,
        @Nullable Output<List<StackSetTagArgs>> tags,
        @Nullable Output<String> templateBody,
        @Nullable Output<String> templateURL) {
        this.administrationRoleARN = administrationRoleARN;
        this.autoDeployment = autoDeployment;
        this.callAs = callAs;
        this.capabilities = capabilities;
        this.description = description;
        this.executionRoleName = executionRoleName;
        this.managedExecution = managedExecution;
        this.operationPreferences = operationPreferences;
        this.parameters = parameters;
        this.permissionModel = Objects.requireNonNull(permissionModel, "expected parameter 'permissionModel' to be non-null");
        this.stackInstancesGroup = stackInstancesGroup;
        this.stackSetName = stackSetName;
        this.tags = tags;
        this.templateBody = templateBody;
        this.templateURL = templateURL;
    }

    private StackSetArgs() {
        this.administrationRoleARN = Codegen.empty();
        this.autoDeployment = Codegen.empty();
        this.callAs = Codegen.empty();
        this.capabilities = Codegen.empty();
        this.description = Codegen.empty();
        this.executionRoleName = Codegen.empty();
        this.managedExecution = Codegen.empty();
        this.operationPreferences = Codegen.empty();
        this.parameters = Codegen.empty();
        this.permissionModel = Codegen.empty();
        this.stackInstancesGroup = Codegen.empty();
        this.stackSetName = Codegen.empty();
        this.tags = Codegen.empty();
        this.templateBody = Codegen.empty();
        this.templateURL = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StackSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> administrationRoleARN;
        private @Nullable Output<StackSetAutoDeploymentArgs> autoDeployment;
        private @Nullable Output<StackSetCallAs> callAs;
        private @Nullable Output<List<StackSetCapability>> capabilities;
        private @Nullable Output<String> description;
        private @Nullable Output<String> executionRoleName;
        private @Nullable Output<ManagedExecutionPropertiesArgs> managedExecution;
        private @Nullable Output<StackSetOperationPreferencesArgs> operationPreferences;
        private @Nullable Output<List<StackSetParameterArgs>> parameters;
        private Output<StackSetPermissionModel> permissionModel;
        private @Nullable Output<List<StackSetStackInstancesArgs>> stackInstancesGroup;
        private @Nullable Output<String> stackSetName;
        private @Nullable Output<List<StackSetTagArgs>> tags;
        private @Nullable Output<String> templateBody;
        private @Nullable Output<String> templateURL;

        public Builder() {
    	      // Empty
        }

        public Builder(StackSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administrationRoleARN = defaults.administrationRoleARN;
    	      this.autoDeployment = defaults.autoDeployment;
    	      this.callAs = defaults.callAs;
    	      this.capabilities = defaults.capabilities;
    	      this.description = defaults.description;
    	      this.executionRoleName = defaults.executionRoleName;
    	      this.managedExecution = defaults.managedExecution;
    	      this.operationPreferences = defaults.operationPreferences;
    	      this.parameters = defaults.parameters;
    	      this.permissionModel = defaults.permissionModel;
    	      this.stackInstancesGroup = defaults.stackInstancesGroup;
    	      this.stackSetName = defaults.stackSetName;
    	      this.tags = defaults.tags;
    	      this.templateBody = defaults.templateBody;
    	      this.templateURL = defaults.templateURL;
        }

        public Builder administrationRoleARN(@Nullable Output<String> administrationRoleARN) {
            this.administrationRoleARN = administrationRoleARN;
            return this;
        }
        public Builder administrationRoleARN(@Nullable String administrationRoleARN) {
            this.administrationRoleARN = Codegen.ofNullable(administrationRoleARN);
            return this;
        }
        public Builder autoDeployment(@Nullable Output<StackSetAutoDeploymentArgs> autoDeployment) {
            this.autoDeployment = autoDeployment;
            return this;
        }
        public Builder autoDeployment(@Nullable StackSetAutoDeploymentArgs autoDeployment) {
            this.autoDeployment = Codegen.ofNullable(autoDeployment);
            return this;
        }
        public Builder callAs(@Nullable Output<StackSetCallAs> callAs) {
            this.callAs = callAs;
            return this;
        }
        public Builder callAs(@Nullable StackSetCallAs callAs) {
            this.callAs = Codegen.ofNullable(callAs);
            return this;
        }
        public Builder capabilities(@Nullable Output<List<StackSetCapability>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(@Nullable List<StackSetCapability> capabilities) {
            this.capabilities = Codegen.ofNullable(capabilities);
            return this;
        }
        public Builder capabilities(StackSetCapability... capabilities) {
            return capabilities(List.of(capabilities));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder executionRoleName(@Nullable Output<String> executionRoleName) {
            this.executionRoleName = executionRoleName;
            return this;
        }
        public Builder executionRoleName(@Nullable String executionRoleName) {
            this.executionRoleName = Codegen.ofNullable(executionRoleName);
            return this;
        }
        public Builder managedExecution(@Nullable Output<ManagedExecutionPropertiesArgs> managedExecution) {
            this.managedExecution = managedExecution;
            return this;
        }
        public Builder managedExecution(@Nullable ManagedExecutionPropertiesArgs managedExecution) {
            this.managedExecution = Codegen.ofNullable(managedExecution);
            return this;
        }
        public Builder operationPreferences(@Nullable Output<StackSetOperationPreferencesArgs> operationPreferences) {
            this.operationPreferences = operationPreferences;
            return this;
        }
        public Builder operationPreferences(@Nullable StackSetOperationPreferencesArgs operationPreferences) {
            this.operationPreferences = Codegen.ofNullable(operationPreferences);
            return this;
        }
        public Builder parameters(@Nullable Output<List<StackSetParameterArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable List<StackSetParameterArgs> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder parameters(StackSetParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder permissionModel(Output<StackSetPermissionModel> permissionModel) {
            this.permissionModel = Objects.requireNonNull(permissionModel);
            return this;
        }
        public Builder permissionModel(StackSetPermissionModel permissionModel) {
            this.permissionModel = Output.of(Objects.requireNonNull(permissionModel));
            return this;
        }
        public Builder stackInstancesGroup(@Nullable Output<List<StackSetStackInstancesArgs>> stackInstancesGroup) {
            this.stackInstancesGroup = stackInstancesGroup;
            return this;
        }
        public Builder stackInstancesGroup(@Nullable List<StackSetStackInstancesArgs> stackInstancesGroup) {
            this.stackInstancesGroup = Codegen.ofNullable(stackInstancesGroup);
            return this;
        }
        public Builder stackInstancesGroup(StackSetStackInstancesArgs... stackInstancesGroup) {
            return stackInstancesGroup(List.of(stackInstancesGroup));
        }
        public Builder stackSetName(@Nullable Output<String> stackSetName) {
            this.stackSetName = stackSetName;
            return this;
        }
        public Builder stackSetName(@Nullable String stackSetName) {
            this.stackSetName = Codegen.ofNullable(stackSetName);
            return this;
        }
        public Builder tags(@Nullable Output<List<StackSetTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<StackSetTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(StackSetTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder templateBody(@Nullable Output<String> templateBody) {
            this.templateBody = templateBody;
            return this;
        }
        public Builder templateBody(@Nullable String templateBody) {
            this.templateBody = Codegen.ofNullable(templateBody);
            return this;
        }
        public Builder templateURL(@Nullable Output<String> templateURL) {
            this.templateURL = templateURL;
            return this;
        }
        public Builder templateURL(@Nullable String templateURL) {
            this.templateURL = Codegen.ofNullable(templateURL);
            return this;
        }        public StackSetArgs build() {
            return new StackSetArgs(administrationRoleARN, autoDeployment, callAs, capabilities, description, executionRoleName, managedExecution, operationPreferences, parameters, permissionModel, stackInstancesGroup, stackSetName, tags, templateBody, templateURL);
        }
    }
}
