// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iotanalytics.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class PipelineDatastoreArgs extends io.pulumi.resources.ResourceArgs {

    public static final PipelineDatastoreArgs Empty = new PipelineDatastoreArgs();

    @InputImport(name="datastoreName", required=true)
      private final Input<String> datastoreName;

    public Input<String> getDatastoreName() {
        return this.datastoreName;
    }

    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    public PipelineDatastoreArgs(
        Input<String> datastoreName,
        Input<String> name) {
        this.datastoreName = Objects.requireNonNull(datastoreName, "expected parameter 'datastoreName' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private PipelineDatastoreArgs() {
        this.datastoreName = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineDatastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> datastoreName;
        private Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineDatastoreArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastoreName = defaults.datastoreName;
    	      this.name = defaults.name;
        }

        public Builder datastoreName(Input<String> datastoreName) {
            this.datastoreName = Objects.requireNonNull(datastoreName);
            return this;
        }

        public Builder datastoreName(String datastoreName) {
            this.datastoreName = Input.of(Objects.requireNonNull(datastoreName));
            return this;
        }

        public Builder name(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }
        public PipelineDatastoreArgs build() {
            return new PipelineDatastoreArgs(datastoreName, name);
        }
    }
}
