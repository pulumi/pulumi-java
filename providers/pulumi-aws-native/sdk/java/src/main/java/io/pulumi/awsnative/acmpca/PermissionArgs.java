// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.acmpca;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PermissionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PermissionArgs Empty = new PermissionArgs();

    /**
     * The actions that the specified AWS service principal can use. Actions IssueCertificate, GetCertificate and ListPermissions must be provided.
     * 
     */
    @InputImport(name="actions", required=true)
        private final Input<List<String>> actions;

    public Input<List<String>> getActions() {
        return this.actions;
    }

    /**
     * The Amazon Resource Name (ARN) of the Private Certificate Authority that grants the permission.
     * 
     */
    @InputImport(name="certificateAuthorityArn", required=true)
        private final Input<String> certificateAuthorityArn;

    public Input<String> getCertificateAuthorityArn() {
        return this.certificateAuthorityArn;
    }

    /**
     * The AWS service or identity that receives the permission. At this time, the only valid principal is acm.amazonaws.com.
     * 
     */
    @InputImport(name="principal", required=true)
        private final Input<String> principal;

    public Input<String> getPrincipal() {
        return this.principal;
    }

    /**
     * The ID of the calling account.
     * 
     */
    @InputImport(name="sourceAccount")
        private final @Nullable Input<String> sourceAccount;

    public Input<String> getSourceAccount() {
        return this.sourceAccount == null ? Input.empty() : this.sourceAccount;
    }

    public PermissionArgs(
        Input<List<String>> actions,
        Input<String> certificateAuthorityArn,
        Input<String> principal,
        @Nullable Input<String> sourceAccount) {
        this.actions = Objects.requireNonNull(actions, "expected parameter 'actions' to be non-null");
        this.certificateAuthorityArn = Objects.requireNonNull(certificateAuthorityArn, "expected parameter 'certificateAuthorityArn' to be non-null");
        this.principal = Objects.requireNonNull(principal, "expected parameter 'principal' to be non-null");
        this.sourceAccount = sourceAccount;
    }

    private PermissionArgs() {
        this.actions = Input.empty();
        this.certificateAuthorityArn = Input.empty();
        this.principal = Input.empty();
        this.sourceAccount = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> actions;
        private Input<String> certificateAuthorityArn;
        private Input<String> principal;
        private @Nullable Input<String> sourceAccount;

        public Builder() {
    	      // Empty
        }

        public Builder(PermissionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.certificateAuthorityArn = defaults.certificateAuthorityArn;
    	      this.principal = defaults.principal;
    	      this.sourceAccount = defaults.sourceAccount;
        }

        public Builder setActions(Input<List<String>> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }

        public Builder setActions(List<String> actions) {
            this.actions = Input.of(Objects.requireNonNull(actions));
            return this;
        }

        public Builder setCertificateAuthorityArn(Input<String> certificateAuthorityArn) {
            this.certificateAuthorityArn = Objects.requireNonNull(certificateAuthorityArn);
            return this;
        }

        public Builder setCertificateAuthorityArn(String certificateAuthorityArn) {
            this.certificateAuthorityArn = Input.of(Objects.requireNonNull(certificateAuthorityArn));
            return this;
        }

        public Builder setPrincipal(Input<String> principal) {
            this.principal = Objects.requireNonNull(principal);
            return this;
        }

        public Builder setPrincipal(String principal) {
            this.principal = Input.of(Objects.requireNonNull(principal));
            return this;
        }

        public Builder setSourceAccount(@Nullable Input<String> sourceAccount) {
            this.sourceAccount = sourceAccount;
            return this;
        }

        public Builder setSourceAccount(@Nullable String sourceAccount) {
            this.sourceAccount = Input.ofNullable(sourceAccount);
            return this;
        }
        public PermissionArgs build() {
            return new PermissionArgs(actions, certificateAuthorityArn, principal, sourceAccount);
        }
    }
}
