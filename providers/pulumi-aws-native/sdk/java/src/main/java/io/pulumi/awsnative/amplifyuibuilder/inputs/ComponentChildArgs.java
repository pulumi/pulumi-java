// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.amplifyuibuilder.inputs;

import io.pulumi.awsnative.amplifyuibuilder.inputs.ComponentPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ComponentChildArgs extends io.pulumi.resources.ResourceArgs {

    public static final ComponentChildArgs Empty = new ComponentChildArgs();

    @Import(name="children")
      private final @Nullable Output<List<ComponentChildArgs>> children;

    public Output<List<ComponentChildArgs>> getChildren() {
        return this.children == null ? Codegen.empty() : this.children;
    }

    @Import(name="componentType", required=true)
      private final Output<String> componentType;

    public Output<String> getComponentType() {
        return this.componentType;
    }

    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    @Import(name="properties", required=true)
      private final Output<ComponentPropertiesArgs> properties;

    public Output<ComponentPropertiesArgs> getProperties() {
        return this.properties;
    }

    public ComponentChildArgs(
        @Nullable Output<List<ComponentChildArgs>> children,
        Output<String> componentType,
        Output<String> name,
        Output<ComponentPropertiesArgs> properties) {
        this.children = children;
        this.componentType = Objects.requireNonNull(componentType, "expected parameter 'componentType' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.properties = Objects.requireNonNull(properties, "expected parameter 'properties' to be non-null");
    }

    private ComponentChildArgs() {
        this.children = Codegen.empty();
        this.componentType = Codegen.empty();
        this.name = Codegen.empty();
        this.properties = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComponentChildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ComponentChildArgs>> children;
        private Output<String> componentType;
        private Output<String> name;
        private Output<ComponentPropertiesArgs> properties;

        public Builder() {
    	      // Empty
        }

        public Builder(ComponentChildArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.children = defaults.children;
    	      this.componentType = defaults.componentType;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
        }

        public Builder children(@Nullable Output<List<ComponentChildArgs>> children) {
            this.children = children;
            return this;
        }
        public Builder children(@Nullable List<ComponentChildArgs> children) {
            this.children = Codegen.ofNullable(children);
            return this;
        }
        public Builder children(ComponentChildArgs... children) {
            return children(List.of(children));
        }
        public Builder componentType(Output<String> componentType) {
            this.componentType = Objects.requireNonNull(componentType);
            return this;
        }
        public Builder componentType(String componentType) {
            this.componentType = Output.of(Objects.requireNonNull(componentType));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder properties(Output<ComponentPropertiesArgs> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder properties(ComponentPropertiesArgs properties) {
            this.properties = Output.of(Objects.requireNonNull(properties));
            return this;
        }        public ComponentChildArgs build() {
            return new ComponentChildArgs(children, componentType, name, properties);
        }
    }
}
