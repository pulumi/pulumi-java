// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.accessanalyzer.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AnalyzerFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnalyzerFilterArgs Empty = new AnalyzerFilterArgs();

    @Import(name="contains")
      private final @Nullable Output<List<String>> contains;

    public Output<List<String>> contains() {
        return this.contains == null ? Codegen.empty() : this.contains;
    }

    @Import(name="eq")
      private final @Nullable Output<List<String>> eq;

    public Output<List<String>> eq() {
        return this.eq == null ? Codegen.empty() : this.eq;
    }

    @Import(name="exists")
      private final @Nullable Output<Boolean> exists;

    public Output<Boolean> exists() {
        return this.exists == null ? Codegen.empty() : this.exists;
    }

    @Import(name="neq")
      private final @Nullable Output<List<String>> neq;

    public Output<List<String>> neq() {
        return this.neq == null ? Codegen.empty() : this.neq;
    }

    @Import(name="property", required=true)
      private final Output<String> property;

    public Output<String> property() {
        return this.property;
    }

    public AnalyzerFilterArgs(
        @Nullable Output<List<String>> contains,
        @Nullable Output<List<String>> eq,
        @Nullable Output<Boolean> exists,
        @Nullable Output<List<String>> neq,
        Output<String> property) {
        this.contains = contains;
        this.eq = eq;
        this.exists = exists;
        this.neq = neq;
        this.property = Objects.requireNonNull(property, "expected parameter 'property' to be non-null");
    }

    private AnalyzerFilterArgs() {
        this.contains = Codegen.empty();
        this.eq = Codegen.empty();
        this.exists = Codegen.empty();
        this.neq = Codegen.empty();
        this.property = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyzerFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> contains;
        private @Nullable Output<List<String>> eq;
        private @Nullable Output<Boolean> exists;
        private @Nullable Output<List<String>> neq;
        private Output<String> property;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyzerFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contains = defaults.contains;
    	      this.eq = defaults.eq;
    	      this.exists = defaults.exists;
    	      this.neq = defaults.neq;
    	      this.property = defaults.property;
        }

        public Builder contains(@Nullable Output<List<String>> contains) {
            this.contains = contains;
            return this;
        }
        public Builder contains(@Nullable List<String> contains) {
            this.contains = Codegen.ofNullable(contains);
            return this;
        }
        public Builder contains(String... contains) {
            return contains(List.of(contains));
        }
        public Builder eq(@Nullable Output<List<String>> eq) {
            this.eq = eq;
            return this;
        }
        public Builder eq(@Nullable List<String> eq) {
            this.eq = Codegen.ofNullable(eq);
            return this;
        }
        public Builder eq(String... eq) {
            return eq(List.of(eq));
        }
        public Builder exists(@Nullable Output<Boolean> exists) {
            this.exists = exists;
            return this;
        }
        public Builder exists(@Nullable Boolean exists) {
            this.exists = Codegen.ofNullable(exists);
            return this;
        }
        public Builder neq(@Nullable Output<List<String>> neq) {
            this.neq = neq;
            return this;
        }
        public Builder neq(@Nullable List<String> neq) {
            this.neq = Codegen.ofNullable(neq);
            return this;
        }
        public Builder neq(String... neq) {
            return neq(List.of(neq));
        }
        public Builder property(Output<String> property) {
            this.property = Objects.requireNonNull(property);
            return this;
        }
        public Builder property(String property) {
            this.property = Output.of(Objects.requireNonNull(property));
            return this;
        }        public AnalyzerFilterArgs build() {
            return new AnalyzerFilterArgs(contains, eq, exists, neq, property);
        }
    }
}
