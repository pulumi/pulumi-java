// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.datasync;

import io.pulumi.awsnative.datasync.inputs.TaskFilterRuleArgs;
import io.pulumi.awsnative.datasync.inputs.TaskOptionsArgs;
import io.pulumi.awsnative.datasync.inputs.TaskScheduleArgs;
import io.pulumi.awsnative.datasync.inputs.TaskTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskArgs Empty = new TaskArgs();

    /**
     * The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     * 
     */
    @Import(name="cloudWatchLogGroupArn")
      private final @Nullable Output<String> cloudWatchLogGroupArn;

    public Output<String> cloudWatchLogGroupArn() {
        return this.cloudWatchLogGroupArn == null ? Codegen.empty() : this.cloudWatchLogGroupArn;
    }

    /**
     * The ARN of an AWS storage resource's location.
     * 
     */
    @Import(name="destinationLocationArn", required=true)
      private final Output<String> destinationLocationArn;

    public Output<String> destinationLocationArn() {
        return this.destinationLocationArn;
    }

    @Import(name="excludes")
      private final @Nullable Output<List<TaskFilterRuleArgs>> excludes;

    public Output<List<TaskFilterRuleArgs>> excludes() {
        return this.excludes == null ? Codegen.empty() : this.excludes;
    }

    @Import(name="includes")
      private final @Nullable Output<List<TaskFilterRuleArgs>> includes;

    public Output<List<TaskFilterRuleArgs>> includes() {
        return this.includes == null ? Codegen.empty() : this.includes;
    }

    /**
     * The name of a task. This value is a text reference that is used to identify the task in the console.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="options")
      private final @Nullable Output<TaskOptionsArgs> options;

    public Output<TaskOptionsArgs> options() {
        return this.options == null ? Codegen.empty() : this.options;
    }

    @Import(name="schedule")
      private final @Nullable Output<TaskScheduleArgs> schedule;

    public Output<TaskScheduleArgs> schedule() {
        return this.schedule == null ? Codegen.empty() : this.schedule;
    }

    /**
     * The ARN of the source location for the task.
     * 
     */
    @Import(name="sourceLocationArn", required=true)
      private final Output<String> sourceLocationArn;

    public Output<String> sourceLocationArn() {
        return this.sourceLocationArn;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<TaskTagArgs>> tags;

    public Output<List<TaskTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public TaskArgs(
        @Nullable Output<String> cloudWatchLogGroupArn,
        Output<String> destinationLocationArn,
        @Nullable Output<List<TaskFilterRuleArgs>> excludes,
        @Nullable Output<List<TaskFilterRuleArgs>> includes,
        @Nullable Output<String> name,
        @Nullable Output<TaskOptionsArgs> options,
        @Nullable Output<TaskScheduleArgs> schedule,
        Output<String> sourceLocationArn,
        @Nullable Output<List<TaskTagArgs>> tags) {
        this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
        this.destinationLocationArn = Objects.requireNonNull(destinationLocationArn, "expected parameter 'destinationLocationArn' to be non-null");
        this.excludes = excludes;
        this.includes = includes;
        this.name = name;
        this.options = options;
        this.schedule = schedule;
        this.sourceLocationArn = Objects.requireNonNull(sourceLocationArn, "expected parameter 'sourceLocationArn' to be non-null");
        this.tags = tags;
    }

    private TaskArgs() {
        this.cloudWatchLogGroupArn = Codegen.empty();
        this.destinationLocationArn = Codegen.empty();
        this.excludes = Codegen.empty();
        this.includes = Codegen.empty();
        this.name = Codegen.empty();
        this.options = Codegen.empty();
        this.schedule = Codegen.empty();
        this.sourceLocationArn = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> cloudWatchLogGroupArn;
        private Output<String> destinationLocationArn;
        private @Nullable Output<List<TaskFilterRuleArgs>> excludes;
        private @Nullable Output<List<TaskFilterRuleArgs>> includes;
        private @Nullable Output<String> name;
        private @Nullable Output<TaskOptionsArgs> options;
        private @Nullable Output<TaskScheduleArgs> schedule;
        private Output<String> sourceLocationArn;
        private @Nullable Output<List<TaskTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLogGroupArn = defaults.cloudWatchLogGroupArn;
    	      this.destinationLocationArn = defaults.destinationLocationArn;
    	      this.excludes = defaults.excludes;
    	      this.includes = defaults.includes;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.schedule = defaults.schedule;
    	      this.sourceLocationArn = defaults.sourceLocationArn;
    	      this.tags = defaults.tags;
        }

        public Builder cloudWatchLogGroupArn(@Nullable Output<String> cloudWatchLogGroupArn) {
            this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
            return this;
        }
        public Builder cloudWatchLogGroupArn(@Nullable String cloudWatchLogGroupArn) {
            this.cloudWatchLogGroupArn = Codegen.ofNullable(cloudWatchLogGroupArn);
            return this;
        }
        public Builder destinationLocationArn(Output<String> destinationLocationArn) {
            this.destinationLocationArn = Objects.requireNonNull(destinationLocationArn);
            return this;
        }
        public Builder destinationLocationArn(String destinationLocationArn) {
            this.destinationLocationArn = Output.of(Objects.requireNonNull(destinationLocationArn));
            return this;
        }
        public Builder excludes(@Nullable Output<List<TaskFilterRuleArgs>> excludes) {
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(@Nullable List<TaskFilterRuleArgs> excludes) {
            this.excludes = Codegen.ofNullable(excludes);
            return this;
        }
        public Builder excludes(TaskFilterRuleArgs... excludes) {
            return excludes(List.of(excludes));
        }
        public Builder includes(@Nullable Output<List<TaskFilterRuleArgs>> includes) {
            this.includes = includes;
            return this;
        }
        public Builder includes(@Nullable List<TaskFilterRuleArgs> includes) {
            this.includes = Codegen.ofNullable(includes);
            return this;
        }
        public Builder includes(TaskFilterRuleArgs... includes) {
            return includes(List.of(includes));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder options(@Nullable Output<TaskOptionsArgs> options) {
            this.options = options;
            return this;
        }
        public Builder options(@Nullable TaskOptionsArgs options) {
            this.options = Codegen.ofNullable(options);
            return this;
        }
        public Builder schedule(@Nullable Output<TaskScheduleArgs> schedule) {
            this.schedule = schedule;
            return this;
        }
        public Builder schedule(@Nullable TaskScheduleArgs schedule) {
            this.schedule = Codegen.ofNullable(schedule);
            return this;
        }
        public Builder sourceLocationArn(Output<String> sourceLocationArn) {
            this.sourceLocationArn = Objects.requireNonNull(sourceLocationArn);
            return this;
        }
        public Builder sourceLocationArn(String sourceLocationArn) {
            this.sourceLocationArn = Output.of(Objects.requireNonNull(sourceLocationArn));
            return this;
        }
        public Builder tags(@Nullable Output<List<TaskTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<TaskTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(TaskTagArgs... tags) {
            return tags(List.of(tags));
        }        public TaskArgs build() {
            return new TaskArgs(cloudWatchLogGroupArn, destinationLocationArn, excludes, includes, name, options, schedule, sourceLocationArn, tags);
        }
    }
}
