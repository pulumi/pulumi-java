// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ecs.outputs;

import io.pulumi.awsnative.ecs.outputs.TaskDefinitionContainerDependency;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionEnvironmentFile;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionFirelensConfiguration;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionHealthCheck;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionHostEntry;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionKeyValuePair;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionLinuxParameters;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionLogConfiguration;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionMountPoint;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionPortMapping;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionRepositoryCredentials;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionResourceRequirement;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionSecret;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionSystemControl;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionUlimit;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionVolumeFrom;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class TaskDefinitionContainerDefinition {
    private final @Nullable List<String> command;
    private final @Nullable Integer cpu;
    private final @Nullable List<TaskDefinitionContainerDependency> dependsOn;
    private final @Nullable Boolean disableNetworking;
    private final @Nullable List<String> dnsSearchDomains;
    private final @Nullable List<String> dnsServers;
    private final @Nullable Object dockerLabels;
    private final @Nullable List<String> dockerSecurityOptions;
    private final @Nullable List<String> entryPoint;
    /**
     * The environment variables to pass to a container
     * 
     */
    private final @Nullable List<TaskDefinitionKeyValuePair> environment;
    /**
     * The list of one or more files that contain the environment variables to pass to a container
     * 
     */
    private final @Nullable List<TaskDefinitionEnvironmentFile> environmentFiles;
    private final @Nullable Boolean essential;
    private final @Nullable List<TaskDefinitionHostEntry> extraHosts;
    private final @Nullable TaskDefinitionFirelensConfiguration firelensConfiguration;
    private final @Nullable TaskDefinitionHealthCheck healthCheck;
    private final @Nullable String hostname;
    /**
     * The image used to start a container. This string is passed directly to the Docker daemon.
     * 
     */
    private final @Nullable String image;
    private final @Nullable Boolean interactive;
    private final @Nullable List<String> links;
    private final @Nullable TaskDefinitionLinuxParameters linuxParameters;
    private final @Nullable TaskDefinitionLogConfiguration logConfiguration;
    /**
     * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
     * 
     */
    private final @Nullable Integer memory;
    private final @Nullable Integer memoryReservation;
    private final @Nullable List<TaskDefinitionMountPoint> mountPoints;
    /**
     * The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
     * 
     */
    private final @Nullable String name;
    /**
     * Port mappings allow containers to access ports on the host container instance to send or receive traffic.
     * 
     */
    private final @Nullable List<TaskDefinitionPortMapping> portMappings;
    private final @Nullable Boolean privileged;
    private final @Nullable Boolean pseudoTerminal;
    private final @Nullable Boolean readonlyRootFilesystem;
    private final @Nullable TaskDefinitionRepositoryCredentials repositoryCredentials;
    private final @Nullable List<TaskDefinitionResourceRequirement> resourceRequirements;
    private final @Nullable List<TaskDefinitionSecret> secrets;
    private final @Nullable Integer startTimeout;
    private final @Nullable Integer stopTimeout;
    private final @Nullable List<TaskDefinitionSystemControl> systemControls;
    private final @Nullable List<TaskDefinitionUlimit> ulimits;
    private final @Nullable String user;
    private final @Nullable List<TaskDefinitionVolumeFrom> volumesFrom;
    private final @Nullable String workingDirectory;

    @OutputCustomType.Constructor
    private TaskDefinitionContainerDefinition(
        @OutputCustomType.Parameter("command") @Nullable List<String> command,
        @OutputCustomType.Parameter("cpu") @Nullable Integer cpu,
        @OutputCustomType.Parameter("dependsOn") @Nullable List<TaskDefinitionContainerDependency> dependsOn,
        @OutputCustomType.Parameter("disableNetworking") @Nullable Boolean disableNetworking,
        @OutputCustomType.Parameter("dnsSearchDomains") @Nullable List<String> dnsSearchDomains,
        @OutputCustomType.Parameter("dnsServers") @Nullable List<String> dnsServers,
        @OutputCustomType.Parameter("dockerLabels") @Nullable Object dockerLabels,
        @OutputCustomType.Parameter("dockerSecurityOptions") @Nullable List<String> dockerSecurityOptions,
        @OutputCustomType.Parameter("entryPoint") @Nullable List<String> entryPoint,
        @OutputCustomType.Parameter("environment") @Nullable List<TaskDefinitionKeyValuePair> environment,
        @OutputCustomType.Parameter("environmentFiles") @Nullable List<TaskDefinitionEnvironmentFile> environmentFiles,
        @OutputCustomType.Parameter("essential") @Nullable Boolean essential,
        @OutputCustomType.Parameter("extraHosts") @Nullable List<TaskDefinitionHostEntry> extraHosts,
        @OutputCustomType.Parameter("firelensConfiguration") @Nullable TaskDefinitionFirelensConfiguration firelensConfiguration,
        @OutputCustomType.Parameter("healthCheck") @Nullable TaskDefinitionHealthCheck healthCheck,
        @OutputCustomType.Parameter("hostname") @Nullable String hostname,
        @OutputCustomType.Parameter("image") @Nullable String image,
        @OutputCustomType.Parameter("interactive") @Nullable Boolean interactive,
        @OutputCustomType.Parameter("links") @Nullable List<String> links,
        @OutputCustomType.Parameter("linuxParameters") @Nullable TaskDefinitionLinuxParameters linuxParameters,
        @OutputCustomType.Parameter("logConfiguration") @Nullable TaskDefinitionLogConfiguration logConfiguration,
        @OutputCustomType.Parameter("memory") @Nullable Integer memory,
        @OutputCustomType.Parameter("memoryReservation") @Nullable Integer memoryReservation,
        @OutputCustomType.Parameter("mountPoints") @Nullable List<TaskDefinitionMountPoint> mountPoints,
        @OutputCustomType.Parameter("name") @Nullable String name,
        @OutputCustomType.Parameter("portMappings") @Nullable List<TaskDefinitionPortMapping> portMappings,
        @OutputCustomType.Parameter("privileged") @Nullable Boolean privileged,
        @OutputCustomType.Parameter("pseudoTerminal") @Nullable Boolean pseudoTerminal,
        @OutputCustomType.Parameter("readonlyRootFilesystem") @Nullable Boolean readonlyRootFilesystem,
        @OutputCustomType.Parameter("repositoryCredentials") @Nullable TaskDefinitionRepositoryCredentials repositoryCredentials,
        @OutputCustomType.Parameter("resourceRequirements") @Nullable List<TaskDefinitionResourceRequirement> resourceRequirements,
        @OutputCustomType.Parameter("secrets") @Nullable List<TaskDefinitionSecret> secrets,
        @OutputCustomType.Parameter("startTimeout") @Nullable Integer startTimeout,
        @OutputCustomType.Parameter("stopTimeout") @Nullable Integer stopTimeout,
        @OutputCustomType.Parameter("systemControls") @Nullable List<TaskDefinitionSystemControl> systemControls,
        @OutputCustomType.Parameter("ulimits") @Nullable List<TaskDefinitionUlimit> ulimits,
        @OutputCustomType.Parameter("user") @Nullable String user,
        @OutputCustomType.Parameter("volumesFrom") @Nullable List<TaskDefinitionVolumeFrom> volumesFrom,
        @OutputCustomType.Parameter("workingDirectory") @Nullable String workingDirectory) {
        this.command = command;
        this.cpu = cpu;
        this.dependsOn = dependsOn;
        this.disableNetworking = disableNetworking;
        this.dnsSearchDomains = dnsSearchDomains;
        this.dnsServers = dnsServers;
        this.dockerLabels = dockerLabels;
        this.dockerSecurityOptions = dockerSecurityOptions;
        this.entryPoint = entryPoint;
        this.environment = environment;
        this.environmentFiles = environmentFiles;
        this.essential = essential;
        this.extraHosts = extraHosts;
        this.firelensConfiguration = firelensConfiguration;
        this.healthCheck = healthCheck;
        this.hostname = hostname;
        this.image = image;
        this.interactive = interactive;
        this.links = links;
        this.linuxParameters = linuxParameters;
        this.logConfiguration = logConfiguration;
        this.memory = memory;
        this.memoryReservation = memoryReservation;
        this.mountPoints = mountPoints;
        this.name = name;
        this.portMappings = portMappings;
        this.privileged = privileged;
        this.pseudoTerminal = pseudoTerminal;
        this.readonlyRootFilesystem = readonlyRootFilesystem;
        this.repositoryCredentials = repositoryCredentials;
        this.resourceRequirements = resourceRequirements;
        this.secrets = secrets;
        this.startTimeout = startTimeout;
        this.stopTimeout = stopTimeout;
        this.systemControls = systemControls;
        this.ulimits = ulimits;
        this.user = user;
        this.volumesFrom = volumesFrom;
        this.workingDirectory = workingDirectory;
    }

    public List<String> getCommand() {
        return this.command == null ? List.of() : this.command;
    }
    public Optional<Integer> getCpu() {
        return Optional.ofNullable(this.cpu);
    }
    public List<TaskDefinitionContainerDependency> getDependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    public Optional<Boolean> getDisableNetworking() {
        return Optional.ofNullable(this.disableNetworking);
    }
    public List<String> getDnsSearchDomains() {
        return this.dnsSearchDomains == null ? List.of() : this.dnsSearchDomains;
    }
    public List<String> getDnsServers() {
        return this.dnsServers == null ? List.of() : this.dnsServers;
    }
    public Optional<Object> getDockerLabels() {
        return Optional.ofNullable(this.dockerLabels);
    }
    public List<String> getDockerSecurityOptions() {
        return this.dockerSecurityOptions == null ? List.of() : this.dockerSecurityOptions;
    }
    public List<String> getEntryPoint() {
        return this.entryPoint == null ? List.of() : this.entryPoint;
    }
    /**
     * The environment variables to pass to a container
     * 
    */
    public List<TaskDefinitionKeyValuePair> getEnvironment() {
        return this.environment == null ? List.of() : this.environment;
    }
    /**
     * The list of one or more files that contain the environment variables to pass to a container
     * 
    */
    public List<TaskDefinitionEnvironmentFile> getEnvironmentFiles() {
        return this.environmentFiles == null ? List.of() : this.environmentFiles;
    }
    public Optional<Boolean> getEssential() {
        return Optional.ofNullable(this.essential);
    }
    public List<TaskDefinitionHostEntry> getExtraHosts() {
        return this.extraHosts == null ? List.of() : this.extraHosts;
    }
    public Optional<TaskDefinitionFirelensConfiguration> getFirelensConfiguration() {
        return Optional.ofNullable(this.firelensConfiguration);
    }
    public Optional<TaskDefinitionHealthCheck> getHealthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }
    public Optional<String> getHostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * The image used to start a container. This string is passed directly to the Docker daemon.
     * 
    */
    public Optional<String> getImage() {
        return Optional.ofNullable(this.image);
    }
    public Optional<Boolean> getInteractive() {
        return Optional.ofNullable(this.interactive);
    }
    public List<String> getLinks() {
        return this.links == null ? List.of() : this.links;
    }
    public Optional<TaskDefinitionLinuxParameters> getLinuxParameters() {
        return Optional.ofNullable(this.linuxParameters);
    }
    public Optional<TaskDefinitionLogConfiguration> getLogConfiguration() {
        return Optional.ofNullable(this.logConfiguration);
    }
    /**
     * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
     * 
    */
    public Optional<Integer> getMemory() {
        return Optional.ofNullable(this.memory);
    }
    public Optional<Integer> getMemoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }
    public List<TaskDefinitionMountPoint> getMountPoints() {
        return this.mountPoints == null ? List.of() : this.mountPoints;
    }
    /**
     * The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
     * 
    */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Port mappings allow containers to access ports on the host container instance to send or receive traffic.
     * 
    */
    public List<TaskDefinitionPortMapping> getPortMappings() {
        return this.portMappings == null ? List.of() : this.portMappings;
    }
    public Optional<Boolean> getPrivileged() {
        return Optional.ofNullable(this.privileged);
    }
    public Optional<Boolean> getPseudoTerminal() {
        return Optional.ofNullable(this.pseudoTerminal);
    }
    public Optional<Boolean> getReadonlyRootFilesystem() {
        return Optional.ofNullable(this.readonlyRootFilesystem);
    }
    public Optional<TaskDefinitionRepositoryCredentials> getRepositoryCredentials() {
        return Optional.ofNullable(this.repositoryCredentials);
    }
    public List<TaskDefinitionResourceRequirement> getResourceRequirements() {
        return this.resourceRequirements == null ? List.of() : this.resourceRequirements;
    }
    public List<TaskDefinitionSecret> getSecrets() {
        return this.secrets == null ? List.of() : this.secrets;
    }
    public Optional<Integer> getStartTimeout() {
        return Optional.ofNullable(this.startTimeout);
    }
    public Optional<Integer> getStopTimeout() {
        return Optional.ofNullable(this.stopTimeout);
    }
    public List<TaskDefinitionSystemControl> getSystemControls() {
        return this.systemControls == null ? List.of() : this.systemControls;
    }
    public List<TaskDefinitionUlimit> getUlimits() {
        return this.ulimits == null ? List.of() : this.ulimits;
    }
    public Optional<String> getUser() {
        return Optional.ofNullable(this.user);
    }
    public List<TaskDefinitionVolumeFrom> getVolumesFrom() {
        return this.volumesFrom == null ? List.of() : this.volumesFrom;
    }
    public Optional<String> getWorkingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskDefinitionContainerDefinition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> command;
        private @Nullable Integer cpu;
        private @Nullable List<TaskDefinitionContainerDependency> dependsOn;
        private @Nullable Boolean disableNetworking;
        private @Nullable List<String> dnsSearchDomains;
        private @Nullable List<String> dnsServers;
        private @Nullable Object dockerLabels;
        private @Nullable List<String> dockerSecurityOptions;
        private @Nullable List<String> entryPoint;
        private @Nullable List<TaskDefinitionKeyValuePair> environment;
        private @Nullable List<TaskDefinitionEnvironmentFile> environmentFiles;
        private @Nullable Boolean essential;
        private @Nullable List<TaskDefinitionHostEntry> extraHosts;
        private @Nullable TaskDefinitionFirelensConfiguration firelensConfiguration;
        private @Nullable TaskDefinitionHealthCheck healthCheck;
        private @Nullable String hostname;
        private @Nullable String image;
        private @Nullable Boolean interactive;
        private @Nullable List<String> links;
        private @Nullable TaskDefinitionLinuxParameters linuxParameters;
        private @Nullable TaskDefinitionLogConfiguration logConfiguration;
        private @Nullable Integer memory;
        private @Nullable Integer memoryReservation;
        private @Nullable List<TaskDefinitionMountPoint> mountPoints;
        private @Nullable String name;
        private @Nullable List<TaskDefinitionPortMapping> portMappings;
        private @Nullable Boolean privileged;
        private @Nullable Boolean pseudoTerminal;
        private @Nullable Boolean readonlyRootFilesystem;
        private @Nullable TaskDefinitionRepositoryCredentials repositoryCredentials;
        private @Nullable List<TaskDefinitionResourceRequirement> resourceRequirements;
        private @Nullable List<TaskDefinitionSecret> secrets;
        private @Nullable Integer startTimeout;
        private @Nullable Integer stopTimeout;
        private @Nullable List<TaskDefinitionSystemControl> systemControls;
        private @Nullable List<TaskDefinitionUlimit> ulimits;
        private @Nullable String user;
        private @Nullable List<TaskDefinitionVolumeFrom> volumesFrom;
        private @Nullable String workingDirectory;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskDefinitionContainerDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.command = defaults.command;
    	      this.cpu = defaults.cpu;
    	      this.dependsOn = defaults.dependsOn;
    	      this.disableNetworking = defaults.disableNetworking;
    	      this.dnsSearchDomains = defaults.dnsSearchDomains;
    	      this.dnsServers = defaults.dnsServers;
    	      this.dockerLabels = defaults.dockerLabels;
    	      this.dockerSecurityOptions = defaults.dockerSecurityOptions;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environment = defaults.environment;
    	      this.environmentFiles = defaults.environmentFiles;
    	      this.essential = defaults.essential;
    	      this.extraHosts = defaults.extraHosts;
    	      this.firelensConfiguration = defaults.firelensConfiguration;
    	      this.healthCheck = defaults.healthCheck;
    	      this.hostname = defaults.hostname;
    	      this.image = defaults.image;
    	      this.interactive = defaults.interactive;
    	      this.links = defaults.links;
    	      this.linuxParameters = defaults.linuxParameters;
    	      this.logConfiguration = defaults.logConfiguration;
    	      this.memory = defaults.memory;
    	      this.memoryReservation = defaults.memoryReservation;
    	      this.mountPoints = defaults.mountPoints;
    	      this.name = defaults.name;
    	      this.portMappings = defaults.portMappings;
    	      this.privileged = defaults.privileged;
    	      this.pseudoTerminal = defaults.pseudoTerminal;
    	      this.readonlyRootFilesystem = defaults.readonlyRootFilesystem;
    	      this.repositoryCredentials = defaults.repositoryCredentials;
    	      this.resourceRequirements = defaults.resourceRequirements;
    	      this.secrets = defaults.secrets;
    	      this.startTimeout = defaults.startTimeout;
    	      this.stopTimeout = defaults.stopTimeout;
    	      this.systemControls = defaults.systemControls;
    	      this.ulimits = defaults.ulimits;
    	      this.user = defaults.user;
    	      this.volumesFrom = defaults.volumesFrom;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        public Builder command(@Nullable List<String> command) {
            this.command = command;
            return this;
        }

        public Builder cpu(@Nullable Integer cpu) {
            this.cpu = cpu;
            return this;
        }

        public Builder dependsOn(@Nullable List<TaskDefinitionContainerDependency> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }

        public Builder disableNetworking(@Nullable Boolean disableNetworking) {
            this.disableNetworking = disableNetworking;
            return this;
        }

        public Builder dnsSearchDomains(@Nullable List<String> dnsSearchDomains) {
            this.dnsSearchDomains = dnsSearchDomains;
            return this;
        }

        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }

        public Builder dockerLabels(@Nullable Object dockerLabels) {
            this.dockerLabels = dockerLabels;
            return this;
        }

        public Builder dockerSecurityOptions(@Nullable List<String> dockerSecurityOptions) {
            this.dockerSecurityOptions = dockerSecurityOptions;
            return this;
        }

        public Builder entryPoint(@Nullable List<String> entryPoint) {
            this.entryPoint = entryPoint;
            return this;
        }

        public Builder environment(@Nullable List<TaskDefinitionKeyValuePair> environment) {
            this.environment = environment;
            return this;
        }

        public Builder environmentFiles(@Nullable List<TaskDefinitionEnvironmentFile> environmentFiles) {
            this.environmentFiles = environmentFiles;
            return this;
        }

        public Builder essential(@Nullable Boolean essential) {
            this.essential = essential;
            return this;
        }

        public Builder extraHosts(@Nullable List<TaskDefinitionHostEntry> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }

        public Builder firelensConfiguration(@Nullable TaskDefinitionFirelensConfiguration firelensConfiguration) {
            this.firelensConfiguration = firelensConfiguration;
            return this;
        }

        public Builder healthCheck(@Nullable TaskDefinitionHealthCheck healthCheck) {
            this.healthCheck = healthCheck;
            return this;
        }

        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }

        public Builder interactive(@Nullable Boolean interactive) {
            this.interactive = interactive;
            return this;
        }

        public Builder links(@Nullable List<String> links) {
            this.links = links;
            return this;
        }

        public Builder linuxParameters(@Nullable TaskDefinitionLinuxParameters linuxParameters) {
            this.linuxParameters = linuxParameters;
            return this;
        }

        public Builder logConfiguration(@Nullable TaskDefinitionLogConfiguration logConfiguration) {
            this.logConfiguration = logConfiguration;
            return this;
        }

        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }

        public Builder memoryReservation(@Nullable Integer memoryReservation) {
            this.memoryReservation = memoryReservation;
            return this;
        }

        public Builder mountPoints(@Nullable List<TaskDefinitionMountPoint> mountPoints) {
            this.mountPoints = mountPoints;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder portMappings(@Nullable List<TaskDefinitionPortMapping> portMappings) {
            this.portMappings = portMappings;
            return this;
        }

        public Builder privileged(@Nullable Boolean privileged) {
            this.privileged = privileged;
            return this;
        }

        public Builder pseudoTerminal(@Nullable Boolean pseudoTerminal) {
            this.pseudoTerminal = pseudoTerminal;
            return this;
        }

        public Builder readonlyRootFilesystem(@Nullable Boolean readonlyRootFilesystem) {
            this.readonlyRootFilesystem = readonlyRootFilesystem;
            return this;
        }

        public Builder repositoryCredentials(@Nullable TaskDefinitionRepositoryCredentials repositoryCredentials) {
            this.repositoryCredentials = repositoryCredentials;
            return this;
        }

        public Builder resourceRequirements(@Nullable List<TaskDefinitionResourceRequirement> resourceRequirements) {
            this.resourceRequirements = resourceRequirements;
            return this;
        }

        public Builder secrets(@Nullable List<TaskDefinitionSecret> secrets) {
            this.secrets = secrets;
            return this;
        }

        public Builder startTimeout(@Nullable Integer startTimeout) {
            this.startTimeout = startTimeout;
            return this;
        }

        public Builder stopTimeout(@Nullable Integer stopTimeout) {
            this.stopTimeout = stopTimeout;
            return this;
        }

        public Builder systemControls(@Nullable List<TaskDefinitionSystemControl> systemControls) {
            this.systemControls = systemControls;
            return this;
        }

        public Builder ulimits(@Nullable List<TaskDefinitionUlimit> ulimits) {
            this.ulimits = ulimits;
            return this;
        }

        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }

        public Builder volumesFrom(@Nullable List<TaskDefinitionVolumeFrom> volumesFrom) {
            this.volumesFrom = volumesFrom;
            return this;
        }

        public Builder workingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }
        public TaskDefinitionContainerDefinition build() {
            return new TaskDefinitionContainerDefinition(command, cpu, dependsOn, disableNetworking, dnsSearchDomains, dnsServers, dockerLabels, dockerSecurityOptions, entryPoint, environment, environmentFiles, essential, extraHosts, firelensConfiguration, healthCheck, hostname, image, interactive, links, linuxParameters, logConfiguration, memory, memoryReservation, mountPoints, name, portMappings, privileged, pseudoTerminal, readonlyRootFilesystem, repositoryCredentials, resourceRequirements, secrets, startTimeout, stopTimeout, systemControls, ulimits, user, volumesFrom, workingDirectory);
        }
    }
}
