// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ec2.inputs;

import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisAnalysisAclRule;
import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisAnalysisComponent;
import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisAnalysisLoadBalancerListener;
import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisAnalysisLoadBalancerTarget;
import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisAnalysisRouteTableRoute;
import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisAnalysisSecurityGroupRule;
import io.pulumi.awsnative.ec2.inputs.NetworkInsightsAnalysisPortRange;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkInsightsAnalysisExplanation extends io.pulumi.resources.InvokeArgs {

    public static final NetworkInsightsAnalysisExplanation Empty = new NetworkInsightsAnalysisExplanation();

    @InputImport(name="acl")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent acl;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getAcl() {
        return this.acl == null ? Optional.empty() : Optional.ofNullable(this.acl);
    }

    @InputImport(name="aclRule")
    private final @Nullable NetworkInsightsAnalysisAnalysisAclRule aclRule;

    public Optional<NetworkInsightsAnalysisAnalysisAclRule> getAclRule() {
        return this.aclRule == null ? Optional.empty() : Optional.ofNullable(this.aclRule);
    }

    @InputImport(name="address")
    private final @Nullable String address;

    public Optional<String> getAddress() {
        return this.address == null ? Optional.empty() : Optional.ofNullable(this.address);
    }

    @InputImport(name="addresses")
    private final @Nullable List<String> addresses;

    public List<String> getAddresses() {
        return this.addresses == null ? List.of() : this.addresses;
    }

    @InputImport(name="attachedTo")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent attachedTo;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getAttachedTo() {
        return this.attachedTo == null ? Optional.empty() : Optional.ofNullable(this.attachedTo);
    }

    @InputImport(name="availabilityZones")
    private final @Nullable List<String> availabilityZones;

    public List<String> getAvailabilityZones() {
        return this.availabilityZones == null ? List.of() : this.availabilityZones;
    }

    @InputImport(name="cidrs")
    private final @Nullable List<String> cidrs;

    public List<String> getCidrs() {
        return this.cidrs == null ? List.of() : this.cidrs;
    }

    @InputImport(name="classicLoadBalancerListener")
    private final @Nullable NetworkInsightsAnalysisAnalysisLoadBalancerListener classicLoadBalancerListener;

    public Optional<NetworkInsightsAnalysisAnalysisLoadBalancerListener> getClassicLoadBalancerListener() {
        return this.classicLoadBalancerListener == null ? Optional.empty() : Optional.ofNullable(this.classicLoadBalancerListener);
    }

    @InputImport(name="component")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent component;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getComponent() {
        return this.component == null ? Optional.empty() : Optional.ofNullable(this.component);
    }

    @InputImport(name="customerGateway")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent customerGateway;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getCustomerGateway() {
        return this.customerGateway == null ? Optional.empty() : Optional.ofNullable(this.customerGateway);
    }

    @InputImport(name="destination")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent destination;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getDestination() {
        return this.destination == null ? Optional.empty() : Optional.ofNullable(this.destination);
    }

    @InputImport(name="destinationVpc")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent destinationVpc;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getDestinationVpc() {
        return this.destinationVpc == null ? Optional.empty() : Optional.ofNullable(this.destinationVpc);
    }

    @InputImport(name="direction")
    private final @Nullable String direction;

    public Optional<String> getDirection() {
        return this.direction == null ? Optional.empty() : Optional.ofNullable(this.direction);
    }

    @InputImport(name="elasticLoadBalancerListener")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent elasticLoadBalancerListener;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getElasticLoadBalancerListener() {
        return this.elasticLoadBalancerListener == null ? Optional.empty() : Optional.ofNullable(this.elasticLoadBalancerListener);
    }

    @InputImport(name="explanationCode")
    private final @Nullable String explanationCode;

    public Optional<String> getExplanationCode() {
        return this.explanationCode == null ? Optional.empty() : Optional.ofNullable(this.explanationCode);
    }

    @InputImport(name="ingressRouteTable")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent ingressRouteTable;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getIngressRouteTable() {
        return this.ingressRouteTable == null ? Optional.empty() : Optional.ofNullable(this.ingressRouteTable);
    }

    @InputImport(name="internetGateway")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent internetGateway;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getInternetGateway() {
        return this.internetGateway == null ? Optional.empty() : Optional.ofNullable(this.internetGateway);
    }

    @InputImport(name="loadBalancerArn")
    private final @Nullable String loadBalancerArn;

    public Optional<String> getLoadBalancerArn() {
        return this.loadBalancerArn == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerArn);
    }

    @InputImport(name="loadBalancerListenerPort")
    private final @Nullable Integer loadBalancerListenerPort;

    public Optional<Integer> getLoadBalancerListenerPort() {
        return this.loadBalancerListenerPort == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerListenerPort);
    }

    @InputImport(name="loadBalancerTarget")
    private final @Nullable NetworkInsightsAnalysisAnalysisLoadBalancerTarget loadBalancerTarget;

    public Optional<NetworkInsightsAnalysisAnalysisLoadBalancerTarget> getLoadBalancerTarget() {
        return this.loadBalancerTarget == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerTarget);
    }

    @InputImport(name="loadBalancerTargetGroup")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent loadBalancerTargetGroup;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getLoadBalancerTargetGroup() {
        return this.loadBalancerTargetGroup == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerTargetGroup);
    }

    @InputImport(name="loadBalancerTargetGroups")
    private final @Nullable List<NetworkInsightsAnalysisAnalysisComponent> loadBalancerTargetGroups;

    public List<NetworkInsightsAnalysisAnalysisComponent> getLoadBalancerTargetGroups() {
        return this.loadBalancerTargetGroups == null ? List.of() : this.loadBalancerTargetGroups;
    }

    @InputImport(name="loadBalancerTargetPort")
    private final @Nullable Integer loadBalancerTargetPort;

    public Optional<Integer> getLoadBalancerTargetPort() {
        return this.loadBalancerTargetPort == null ? Optional.empty() : Optional.ofNullable(this.loadBalancerTargetPort);
    }

    @InputImport(name="missingComponent")
    private final @Nullable String missingComponent;

    public Optional<String> getMissingComponent() {
        return this.missingComponent == null ? Optional.empty() : Optional.ofNullable(this.missingComponent);
    }

    @InputImport(name="natGateway")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent natGateway;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getNatGateway() {
        return this.natGateway == null ? Optional.empty() : Optional.ofNullable(this.natGateway);
    }

    @InputImport(name="networkInterface")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent networkInterface;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getNetworkInterface() {
        return this.networkInterface == null ? Optional.empty() : Optional.ofNullable(this.networkInterface);
    }

    @InputImport(name="packetField")
    private final @Nullable String packetField;

    public Optional<String> getPacketField() {
        return this.packetField == null ? Optional.empty() : Optional.ofNullable(this.packetField);
    }

    @InputImport(name="port")
    private final @Nullable Integer port;

    public Optional<Integer> getPort() {
        return this.port == null ? Optional.empty() : Optional.ofNullable(this.port);
    }

    @InputImport(name="portRanges")
    private final @Nullable List<NetworkInsightsAnalysisPortRange> portRanges;

    public List<NetworkInsightsAnalysisPortRange> getPortRanges() {
        return this.portRanges == null ? List.of() : this.portRanges;
    }

    @InputImport(name="prefixList")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent prefixList;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getPrefixList() {
        return this.prefixList == null ? Optional.empty() : Optional.ofNullable(this.prefixList);
    }

    @InputImport(name="protocols")
    private final @Nullable List<String> protocols;

    public List<String> getProtocols() {
        return this.protocols == null ? List.of() : this.protocols;
    }

    @InputImport(name="routeTable")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent routeTable;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getRouteTable() {
        return this.routeTable == null ? Optional.empty() : Optional.ofNullable(this.routeTable);
    }

    @InputImport(name="routeTableRoute")
    private final @Nullable NetworkInsightsAnalysisAnalysisRouteTableRoute routeTableRoute;

    public Optional<NetworkInsightsAnalysisAnalysisRouteTableRoute> getRouteTableRoute() {
        return this.routeTableRoute == null ? Optional.empty() : Optional.ofNullable(this.routeTableRoute);
    }

    @InputImport(name="securityGroup")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent securityGroup;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getSecurityGroup() {
        return this.securityGroup == null ? Optional.empty() : Optional.ofNullable(this.securityGroup);
    }

    @InputImport(name="securityGroupRule")
    private final @Nullable NetworkInsightsAnalysisAnalysisSecurityGroupRule securityGroupRule;

    public Optional<NetworkInsightsAnalysisAnalysisSecurityGroupRule> getSecurityGroupRule() {
        return this.securityGroupRule == null ? Optional.empty() : Optional.ofNullable(this.securityGroupRule);
    }

    @InputImport(name="securityGroups")
    private final @Nullable List<NetworkInsightsAnalysisAnalysisComponent> securityGroups;

    public List<NetworkInsightsAnalysisAnalysisComponent> getSecurityGroups() {
        return this.securityGroups == null ? List.of() : this.securityGroups;
    }

    @InputImport(name="sourceVpc")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent sourceVpc;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getSourceVpc() {
        return this.sourceVpc == null ? Optional.empty() : Optional.ofNullable(this.sourceVpc);
    }

    @InputImport(name="state")
    private final @Nullable String state;

    public Optional<String> getState() {
        return this.state == null ? Optional.empty() : Optional.ofNullable(this.state);
    }

    @InputImport(name="subnet")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent subnet;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getSubnet() {
        return this.subnet == null ? Optional.empty() : Optional.ofNullable(this.subnet);
    }

    @InputImport(name="subnetRouteTable")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent subnetRouteTable;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getSubnetRouteTable() {
        return this.subnetRouteTable == null ? Optional.empty() : Optional.ofNullable(this.subnetRouteTable);
    }

    @InputImport(name="vpc")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent vpc;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getVpc() {
        return this.vpc == null ? Optional.empty() : Optional.ofNullable(this.vpc);
    }

    @InputImport(name="vpcEndpoint")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent vpcEndpoint;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getVpcEndpoint() {
        return this.vpcEndpoint == null ? Optional.empty() : Optional.ofNullable(this.vpcEndpoint);
    }

    @InputImport(name="vpcPeeringConnection")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent vpcPeeringConnection;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getVpcPeeringConnection() {
        return this.vpcPeeringConnection == null ? Optional.empty() : Optional.ofNullable(this.vpcPeeringConnection);
    }

    @InputImport(name="vpnConnection")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent vpnConnection;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getVpnConnection() {
        return this.vpnConnection == null ? Optional.empty() : Optional.ofNullable(this.vpnConnection);
    }

    @InputImport(name="vpnGateway")
    private final @Nullable NetworkInsightsAnalysisAnalysisComponent vpnGateway;

    public Optional<NetworkInsightsAnalysisAnalysisComponent> getVpnGateway() {
        return this.vpnGateway == null ? Optional.empty() : Optional.ofNullable(this.vpnGateway);
    }

    public NetworkInsightsAnalysisExplanation(
        @Nullable NetworkInsightsAnalysisAnalysisComponent acl,
        @Nullable NetworkInsightsAnalysisAnalysisAclRule aclRule,
        @Nullable String address,
        @Nullable List<String> addresses,
        @Nullable NetworkInsightsAnalysisAnalysisComponent attachedTo,
        @Nullable List<String> availabilityZones,
        @Nullable List<String> cidrs,
        @Nullable NetworkInsightsAnalysisAnalysisLoadBalancerListener classicLoadBalancerListener,
        @Nullable NetworkInsightsAnalysisAnalysisComponent component,
        @Nullable NetworkInsightsAnalysisAnalysisComponent customerGateway,
        @Nullable NetworkInsightsAnalysisAnalysisComponent destination,
        @Nullable NetworkInsightsAnalysisAnalysisComponent destinationVpc,
        @Nullable String direction,
        @Nullable NetworkInsightsAnalysisAnalysisComponent elasticLoadBalancerListener,
        @Nullable String explanationCode,
        @Nullable NetworkInsightsAnalysisAnalysisComponent ingressRouteTable,
        @Nullable NetworkInsightsAnalysisAnalysisComponent internetGateway,
        @Nullable String loadBalancerArn,
        @Nullable Integer loadBalancerListenerPort,
        @Nullable NetworkInsightsAnalysisAnalysisLoadBalancerTarget loadBalancerTarget,
        @Nullable NetworkInsightsAnalysisAnalysisComponent loadBalancerTargetGroup,
        @Nullable List<NetworkInsightsAnalysisAnalysisComponent> loadBalancerTargetGroups,
        @Nullable Integer loadBalancerTargetPort,
        @Nullable String missingComponent,
        @Nullable NetworkInsightsAnalysisAnalysisComponent natGateway,
        @Nullable NetworkInsightsAnalysisAnalysisComponent networkInterface,
        @Nullable String packetField,
        @Nullable Integer port,
        @Nullable List<NetworkInsightsAnalysisPortRange> portRanges,
        @Nullable NetworkInsightsAnalysisAnalysisComponent prefixList,
        @Nullable List<String> protocols,
        @Nullable NetworkInsightsAnalysisAnalysisComponent routeTable,
        @Nullable NetworkInsightsAnalysisAnalysisRouteTableRoute routeTableRoute,
        @Nullable NetworkInsightsAnalysisAnalysisComponent securityGroup,
        @Nullable NetworkInsightsAnalysisAnalysisSecurityGroupRule securityGroupRule,
        @Nullable List<NetworkInsightsAnalysisAnalysisComponent> securityGroups,
        @Nullable NetworkInsightsAnalysisAnalysisComponent sourceVpc,
        @Nullable String state,
        @Nullable NetworkInsightsAnalysisAnalysisComponent subnet,
        @Nullable NetworkInsightsAnalysisAnalysisComponent subnetRouteTable,
        @Nullable NetworkInsightsAnalysisAnalysisComponent vpc,
        @Nullable NetworkInsightsAnalysisAnalysisComponent vpcEndpoint,
        @Nullable NetworkInsightsAnalysisAnalysisComponent vpcPeeringConnection,
        @Nullable NetworkInsightsAnalysisAnalysisComponent vpnConnection,
        @Nullable NetworkInsightsAnalysisAnalysisComponent vpnGateway) {
        this.acl = acl;
        this.aclRule = aclRule;
        this.address = address;
        this.addresses = addresses;
        this.attachedTo = attachedTo;
        this.availabilityZones = availabilityZones;
        this.cidrs = cidrs;
        this.classicLoadBalancerListener = classicLoadBalancerListener;
        this.component = component;
        this.customerGateway = customerGateway;
        this.destination = destination;
        this.destinationVpc = destinationVpc;
        this.direction = direction;
        this.elasticLoadBalancerListener = elasticLoadBalancerListener;
        this.explanationCode = explanationCode;
        this.ingressRouteTable = ingressRouteTable;
        this.internetGateway = internetGateway;
        this.loadBalancerArn = loadBalancerArn;
        this.loadBalancerListenerPort = loadBalancerListenerPort;
        this.loadBalancerTarget = loadBalancerTarget;
        this.loadBalancerTargetGroup = loadBalancerTargetGroup;
        this.loadBalancerTargetGroups = loadBalancerTargetGroups;
        this.loadBalancerTargetPort = loadBalancerTargetPort;
        this.missingComponent = missingComponent;
        this.natGateway = natGateway;
        this.networkInterface = networkInterface;
        this.packetField = packetField;
        this.port = port;
        this.portRanges = portRanges;
        this.prefixList = prefixList;
        this.protocols = protocols;
        this.routeTable = routeTable;
        this.routeTableRoute = routeTableRoute;
        this.securityGroup = securityGroup;
        this.securityGroupRule = securityGroupRule;
        this.securityGroups = securityGroups;
        this.sourceVpc = sourceVpc;
        this.state = state;
        this.subnet = subnet;
        this.subnetRouteTable = subnetRouteTable;
        this.vpc = vpc;
        this.vpcEndpoint = vpcEndpoint;
        this.vpcPeeringConnection = vpcPeeringConnection;
        this.vpnConnection = vpnConnection;
        this.vpnGateway = vpnGateway;
    }

    private NetworkInsightsAnalysisExplanation() {
        this.acl = null;
        this.aclRule = null;
        this.address = null;
        this.addresses = List.of();
        this.attachedTo = null;
        this.availabilityZones = List.of();
        this.cidrs = List.of();
        this.classicLoadBalancerListener = null;
        this.component = null;
        this.customerGateway = null;
        this.destination = null;
        this.destinationVpc = null;
        this.direction = null;
        this.elasticLoadBalancerListener = null;
        this.explanationCode = null;
        this.ingressRouteTable = null;
        this.internetGateway = null;
        this.loadBalancerArn = null;
        this.loadBalancerListenerPort = null;
        this.loadBalancerTarget = null;
        this.loadBalancerTargetGroup = null;
        this.loadBalancerTargetGroups = List.of();
        this.loadBalancerTargetPort = null;
        this.missingComponent = null;
        this.natGateway = null;
        this.networkInterface = null;
        this.packetField = null;
        this.port = null;
        this.portRanges = List.of();
        this.prefixList = null;
        this.protocols = List.of();
        this.routeTable = null;
        this.routeTableRoute = null;
        this.securityGroup = null;
        this.securityGroupRule = null;
        this.securityGroups = List.of();
        this.sourceVpc = null;
        this.state = null;
        this.subnet = null;
        this.subnetRouteTable = null;
        this.vpc = null;
        this.vpcEndpoint = null;
        this.vpcPeeringConnection = null;
        this.vpnConnection = null;
        this.vpnGateway = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInsightsAnalysisExplanation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable NetworkInsightsAnalysisAnalysisComponent acl;
        private @Nullable NetworkInsightsAnalysisAnalysisAclRule aclRule;
        private @Nullable String address;
        private @Nullable List<String> addresses;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent attachedTo;
        private @Nullable List<String> availabilityZones;
        private @Nullable List<String> cidrs;
        private @Nullable NetworkInsightsAnalysisAnalysisLoadBalancerListener classicLoadBalancerListener;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent component;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent customerGateway;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent destination;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent destinationVpc;
        private @Nullable String direction;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent elasticLoadBalancerListener;
        private @Nullable String explanationCode;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent ingressRouteTable;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent internetGateway;
        private @Nullable String loadBalancerArn;
        private @Nullable Integer loadBalancerListenerPort;
        private @Nullable NetworkInsightsAnalysisAnalysisLoadBalancerTarget loadBalancerTarget;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent loadBalancerTargetGroup;
        private @Nullable List<NetworkInsightsAnalysisAnalysisComponent> loadBalancerTargetGroups;
        private @Nullable Integer loadBalancerTargetPort;
        private @Nullable String missingComponent;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent natGateway;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent networkInterface;
        private @Nullable String packetField;
        private @Nullable Integer port;
        private @Nullable List<NetworkInsightsAnalysisPortRange> portRanges;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent prefixList;
        private @Nullable List<String> protocols;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent routeTable;
        private @Nullable NetworkInsightsAnalysisAnalysisRouteTableRoute routeTableRoute;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent securityGroup;
        private @Nullable NetworkInsightsAnalysisAnalysisSecurityGroupRule securityGroupRule;
        private @Nullable List<NetworkInsightsAnalysisAnalysisComponent> securityGroups;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent sourceVpc;
        private @Nullable String state;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent subnet;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent subnetRouteTable;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent vpc;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent vpcEndpoint;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent vpcPeeringConnection;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent vpnConnection;
        private @Nullable NetworkInsightsAnalysisAnalysisComponent vpnGateway;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInsightsAnalysisExplanation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.aclRule = defaults.aclRule;
    	      this.address = defaults.address;
    	      this.addresses = defaults.addresses;
    	      this.attachedTo = defaults.attachedTo;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.cidrs = defaults.cidrs;
    	      this.classicLoadBalancerListener = defaults.classicLoadBalancerListener;
    	      this.component = defaults.component;
    	      this.customerGateway = defaults.customerGateway;
    	      this.destination = defaults.destination;
    	      this.destinationVpc = defaults.destinationVpc;
    	      this.direction = defaults.direction;
    	      this.elasticLoadBalancerListener = defaults.elasticLoadBalancerListener;
    	      this.explanationCode = defaults.explanationCode;
    	      this.ingressRouteTable = defaults.ingressRouteTable;
    	      this.internetGateway = defaults.internetGateway;
    	      this.loadBalancerArn = defaults.loadBalancerArn;
    	      this.loadBalancerListenerPort = defaults.loadBalancerListenerPort;
    	      this.loadBalancerTarget = defaults.loadBalancerTarget;
    	      this.loadBalancerTargetGroup = defaults.loadBalancerTargetGroup;
    	      this.loadBalancerTargetGroups = defaults.loadBalancerTargetGroups;
    	      this.loadBalancerTargetPort = defaults.loadBalancerTargetPort;
    	      this.missingComponent = defaults.missingComponent;
    	      this.natGateway = defaults.natGateway;
    	      this.networkInterface = defaults.networkInterface;
    	      this.packetField = defaults.packetField;
    	      this.port = defaults.port;
    	      this.portRanges = defaults.portRanges;
    	      this.prefixList = defaults.prefixList;
    	      this.protocols = defaults.protocols;
    	      this.routeTable = defaults.routeTable;
    	      this.routeTableRoute = defaults.routeTableRoute;
    	      this.securityGroup = defaults.securityGroup;
    	      this.securityGroupRule = defaults.securityGroupRule;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sourceVpc = defaults.sourceVpc;
    	      this.state = defaults.state;
    	      this.subnet = defaults.subnet;
    	      this.subnetRouteTable = defaults.subnetRouteTable;
    	      this.vpc = defaults.vpc;
    	      this.vpcEndpoint = defaults.vpcEndpoint;
    	      this.vpcPeeringConnection = defaults.vpcPeeringConnection;
    	      this.vpnConnection = defaults.vpnConnection;
    	      this.vpnGateway = defaults.vpnGateway;
        }

        public Builder setAcl(@Nullable NetworkInsightsAnalysisAnalysisComponent acl) {
            this.acl = acl;
            return this;
        }

        public Builder setAclRule(@Nullable NetworkInsightsAnalysisAnalysisAclRule aclRule) {
            this.aclRule = aclRule;
            return this;
        }

        public Builder setAddress(@Nullable String address) {
            this.address = address;
            return this;
        }

        public Builder setAddresses(@Nullable List<String> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder setAttachedTo(@Nullable NetworkInsightsAnalysisAnalysisComponent attachedTo) {
            this.attachedTo = attachedTo;
            return this;
        }

        public Builder setAvailabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }

        public Builder setCidrs(@Nullable List<String> cidrs) {
            this.cidrs = cidrs;
            return this;
        }

        public Builder setClassicLoadBalancerListener(@Nullable NetworkInsightsAnalysisAnalysisLoadBalancerListener classicLoadBalancerListener) {
            this.classicLoadBalancerListener = classicLoadBalancerListener;
            return this;
        }

        public Builder setComponent(@Nullable NetworkInsightsAnalysisAnalysisComponent component) {
            this.component = component;
            return this;
        }

        public Builder setCustomerGateway(@Nullable NetworkInsightsAnalysisAnalysisComponent customerGateway) {
            this.customerGateway = customerGateway;
            return this;
        }

        public Builder setDestination(@Nullable NetworkInsightsAnalysisAnalysisComponent destination) {
            this.destination = destination;
            return this;
        }

        public Builder setDestinationVpc(@Nullable NetworkInsightsAnalysisAnalysisComponent destinationVpc) {
            this.destinationVpc = destinationVpc;
            return this;
        }

        public Builder setDirection(@Nullable String direction) {
            this.direction = direction;
            return this;
        }

        public Builder setElasticLoadBalancerListener(@Nullable NetworkInsightsAnalysisAnalysisComponent elasticLoadBalancerListener) {
            this.elasticLoadBalancerListener = elasticLoadBalancerListener;
            return this;
        }

        public Builder setExplanationCode(@Nullable String explanationCode) {
            this.explanationCode = explanationCode;
            return this;
        }

        public Builder setIngressRouteTable(@Nullable NetworkInsightsAnalysisAnalysisComponent ingressRouteTable) {
            this.ingressRouteTable = ingressRouteTable;
            return this;
        }

        public Builder setInternetGateway(@Nullable NetworkInsightsAnalysisAnalysisComponent internetGateway) {
            this.internetGateway = internetGateway;
            return this;
        }

        public Builder setLoadBalancerArn(@Nullable String loadBalancerArn) {
            this.loadBalancerArn = loadBalancerArn;
            return this;
        }

        public Builder setLoadBalancerListenerPort(@Nullable Integer loadBalancerListenerPort) {
            this.loadBalancerListenerPort = loadBalancerListenerPort;
            return this;
        }

        public Builder setLoadBalancerTarget(@Nullable NetworkInsightsAnalysisAnalysisLoadBalancerTarget loadBalancerTarget) {
            this.loadBalancerTarget = loadBalancerTarget;
            return this;
        }

        public Builder setLoadBalancerTargetGroup(@Nullable NetworkInsightsAnalysisAnalysisComponent loadBalancerTargetGroup) {
            this.loadBalancerTargetGroup = loadBalancerTargetGroup;
            return this;
        }

        public Builder setLoadBalancerTargetGroups(@Nullable List<NetworkInsightsAnalysisAnalysisComponent> loadBalancerTargetGroups) {
            this.loadBalancerTargetGroups = loadBalancerTargetGroups;
            return this;
        }

        public Builder setLoadBalancerTargetPort(@Nullable Integer loadBalancerTargetPort) {
            this.loadBalancerTargetPort = loadBalancerTargetPort;
            return this;
        }

        public Builder setMissingComponent(@Nullable String missingComponent) {
            this.missingComponent = missingComponent;
            return this;
        }

        public Builder setNatGateway(@Nullable NetworkInsightsAnalysisAnalysisComponent natGateway) {
            this.natGateway = natGateway;
            return this;
        }

        public Builder setNetworkInterface(@Nullable NetworkInsightsAnalysisAnalysisComponent networkInterface) {
            this.networkInterface = networkInterface;
            return this;
        }

        public Builder setPacketField(@Nullable String packetField) {
            this.packetField = packetField;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = port;
            return this;
        }

        public Builder setPortRanges(@Nullable List<NetworkInsightsAnalysisPortRange> portRanges) {
            this.portRanges = portRanges;
            return this;
        }

        public Builder setPrefixList(@Nullable NetworkInsightsAnalysisAnalysisComponent prefixList) {
            this.prefixList = prefixList;
            return this;
        }

        public Builder setProtocols(@Nullable List<String> protocols) {
            this.protocols = protocols;
            return this;
        }

        public Builder setRouteTable(@Nullable NetworkInsightsAnalysisAnalysisComponent routeTable) {
            this.routeTable = routeTable;
            return this;
        }

        public Builder setRouteTableRoute(@Nullable NetworkInsightsAnalysisAnalysisRouteTableRoute routeTableRoute) {
            this.routeTableRoute = routeTableRoute;
            return this;
        }

        public Builder setSecurityGroup(@Nullable NetworkInsightsAnalysisAnalysisComponent securityGroup) {
            this.securityGroup = securityGroup;
            return this;
        }

        public Builder setSecurityGroupRule(@Nullable NetworkInsightsAnalysisAnalysisSecurityGroupRule securityGroupRule) {
            this.securityGroupRule = securityGroupRule;
            return this;
        }

        public Builder setSecurityGroups(@Nullable List<NetworkInsightsAnalysisAnalysisComponent> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder setSourceVpc(@Nullable NetworkInsightsAnalysisAnalysisComponent sourceVpc) {
            this.sourceVpc = sourceVpc;
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = state;
            return this;
        }

        public Builder setSubnet(@Nullable NetworkInsightsAnalysisAnalysisComponent subnet) {
            this.subnet = subnet;
            return this;
        }

        public Builder setSubnetRouteTable(@Nullable NetworkInsightsAnalysisAnalysisComponent subnetRouteTable) {
            this.subnetRouteTable = subnetRouteTable;
            return this;
        }

        public Builder setVpc(@Nullable NetworkInsightsAnalysisAnalysisComponent vpc) {
            this.vpc = vpc;
            return this;
        }

        public Builder setVpcEndpoint(@Nullable NetworkInsightsAnalysisAnalysisComponent vpcEndpoint) {
            this.vpcEndpoint = vpcEndpoint;
            return this;
        }

        public Builder setVpcPeeringConnection(@Nullable NetworkInsightsAnalysisAnalysisComponent vpcPeeringConnection) {
            this.vpcPeeringConnection = vpcPeeringConnection;
            return this;
        }

        public Builder setVpnConnection(@Nullable NetworkInsightsAnalysisAnalysisComponent vpnConnection) {
            this.vpnConnection = vpnConnection;
            return this;
        }

        public Builder setVpnGateway(@Nullable NetworkInsightsAnalysisAnalysisComponent vpnGateway) {
            this.vpnGateway = vpnGateway;
            return this;
        }

        public NetworkInsightsAnalysisExplanation build() {
            return new NetworkInsightsAnalysisExplanation(acl, aclRule, address, addresses, attachedTo, availabilityZones, cidrs, classicLoadBalancerListener, component, customerGateway, destination, destinationVpc, direction, elasticLoadBalancerListener, explanationCode, ingressRouteTable, internetGateway, loadBalancerArn, loadBalancerListenerPort, loadBalancerTarget, loadBalancerTargetGroup, loadBalancerTargetGroups, loadBalancerTargetPort, missingComponent, natGateway, networkInterface, packetField, port, portRanges, prefixList, protocols, routeTable, routeTableRoute, securityGroup, securityGroupRule, securityGroups, sourceVpc, state, subnet, subnetRouteTable, vpc, vpcEndpoint, vpcPeeringConnection, vpnConnection, vpnGateway);
        }
    }
}
