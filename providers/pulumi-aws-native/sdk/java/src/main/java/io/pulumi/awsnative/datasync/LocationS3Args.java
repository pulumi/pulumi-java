// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.datasync;

import io.pulumi.awsnative.datasync.enums.LocationS3S3StorageClass;
import io.pulumi.awsnative.datasync.inputs.LocationS3S3ConfigArgs;
import io.pulumi.awsnative.datasync.inputs.LocationS3TagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocationS3Args extends io.pulumi.resources.ResourceArgs {

    public static final LocationS3Args Empty = new LocationS3Args();

    /**
     * The Amazon Resource Name (ARN) of the Amazon S3 bucket.
     * 
     */
    @InputImport(name="s3BucketArn", required=true)
    private final Input<String> s3BucketArn;

    public Input<String> getS3BucketArn() {
        return this.s3BucketArn;
    }

    @InputImport(name="s3Config", required=true)
    private final Input<LocationS3S3ConfigArgs> s3Config;

    public Input<LocationS3S3ConfigArgs> getS3Config() {
        return this.s3Config;
    }

    /**
     * The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
     * 
     */
    @InputImport(name="s3StorageClass")
    private final @Nullable Input<LocationS3S3StorageClass> s3StorageClass;

    public Input<LocationS3S3StorageClass> getS3StorageClass() {
        return this.s3StorageClass == null ? Input.empty() : this.s3StorageClass;
    }

    /**
     * A subdirectory in the Amazon S3 bucket. This subdirectory in Amazon S3 is used to read data from the S3 source location or write data to the S3 destination.
     * 
     */
    @InputImport(name="subdirectory")
    private final @Nullable Input<String> subdirectory;

    public Input<String> getSubdirectory() {
        return this.subdirectory == null ? Input.empty() : this.subdirectory;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<LocationS3TagArgs>> tags;

    public Input<List<LocationS3TagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public LocationS3Args(
        Input<String> s3BucketArn,
        Input<LocationS3S3ConfigArgs> s3Config,
        @Nullable Input<LocationS3S3StorageClass> s3StorageClass,
        @Nullable Input<String> subdirectory,
        @Nullable Input<List<LocationS3TagArgs>> tags) {
        this.s3BucketArn = Objects.requireNonNull(s3BucketArn, "expected parameter 's3BucketArn' to be non-null");
        this.s3Config = Objects.requireNonNull(s3Config, "expected parameter 's3Config' to be non-null");
        this.s3StorageClass = s3StorageClass;
        this.subdirectory = subdirectory;
        this.tags = tags;
    }

    private LocationS3Args() {
        this.s3BucketArn = Input.empty();
        this.s3Config = Input.empty();
        this.s3StorageClass = Input.empty();
        this.subdirectory = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationS3Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> s3BucketArn;
        private Input<LocationS3S3ConfigArgs> s3Config;
        private @Nullable Input<LocationS3S3StorageClass> s3StorageClass;
        private @Nullable Input<String> subdirectory;
        private @Nullable Input<List<LocationS3TagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationS3Args defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.s3BucketArn = defaults.s3BucketArn;
    	      this.s3Config = defaults.s3Config;
    	      this.s3StorageClass = defaults.s3StorageClass;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
        }

        public Builder setS3BucketArn(Input<String> s3BucketArn) {
            this.s3BucketArn = Objects.requireNonNull(s3BucketArn);
            return this;
        }

        public Builder setS3BucketArn(String s3BucketArn) {
            this.s3BucketArn = Input.of(Objects.requireNonNull(s3BucketArn));
            return this;
        }

        public Builder setS3Config(Input<LocationS3S3ConfigArgs> s3Config) {
            this.s3Config = Objects.requireNonNull(s3Config);
            return this;
        }

        public Builder setS3Config(LocationS3S3ConfigArgs s3Config) {
            this.s3Config = Input.of(Objects.requireNonNull(s3Config));
            return this;
        }

        public Builder setS3StorageClass(@Nullable Input<LocationS3S3StorageClass> s3StorageClass) {
            this.s3StorageClass = s3StorageClass;
            return this;
        }

        public Builder setS3StorageClass(@Nullable LocationS3S3StorageClass s3StorageClass) {
            this.s3StorageClass = Input.ofNullable(s3StorageClass);
            return this;
        }

        public Builder setSubdirectory(@Nullable Input<String> subdirectory) {
            this.subdirectory = subdirectory;
            return this;
        }

        public Builder setSubdirectory(@Nullable String subdirectory) {
            this.subdirectory = Input.ofNullable(subdirectory);
            return this;
        }

        public Builder setTags(@Nullable Input<List<LocationS3TagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<LocationS3TagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public LocationS3Args build() {
            return new LocationS3Args(s3BucketArn, s3Config, s3StorageClass, subdirectory, tags);
        }
    }
}
