// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.datasync;

import io.pulumi.awsnative.datasync.enums.LocationS3S3StorageClass;
import io.pulumi.awsnative.datasync.inputs.LocationS3S3ConfigArgs;
import io.pulumi.awsnative.datasync.inputs.LocationS3TagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocationS3Args extends io.pulumi.resources.ResourceArgs {

    public static final LocationS3Args Empty = new LocationS3Args();

    /**
     * The Amazon Resource Name (ARN) of the Amazon S3 bucket.
     * 
     */
    @Import(name="s3BucketArn", required=true)
      private final Output<String> s3BucketArn;

    public Output<String> getS3BucketArn() {
        return this.s3BucketArn;
    }

    @Import(name="s3Config", required=true)
      private final Output<LocationS3S3ConfigArgs> s3Config;

    public Output<LocationS3S3ConfigArgs> getS3Config() {
        return this.s3Config;
    }

    /**
     * The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
     * 
     */
    @Import(name="s3StorageClass")
      private final @Nullable Output<LocationS3S3StorageClass> s3StorageClass;

    public Output<LocationS3S3StorageClass> getS3StorageClass() {
        return this.s3StorageClass == null ? Output.empty() : this.s3StorageClass;
    }

    /**
     * A subdirectory in the Amazon S3 bucket. This subdirectory in Amazon S3 is used to read data from the S3 source location or write data to the S3 destination.
     * 
     */
    @Import(name="subdirectory")
      private final @Nullable Output<String> subdirectory;

    public Output<String> getSubdirectory() {
        return this.subdirectory == null ? Output.empty() : this.subdirectory;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<LocationS3TagArgs>> tags;

    public Output<List<LocationS3TagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public LocationS3Args(
        Output<String> s3BucketArn,
        Output<LocationS3S3ConfigArgs> s3Config,
        @Nullable Output<LocationS3S3StorageClass> s3StorageClass,
        @Nullable Output<String> subdirectory,
        @Nullable Output<List<LocationS3TagArgs>> tags) {
        this.s3BucketArn = Objects.requireNonNull(s3BucketArn, "expected parameter 's3BucketArn' to be non-null");
        this.s3Config = Objects.requireNonNull(s3Config, "expected parameter 's3Config' to be non-null");
        this.s3StorageClass = s3StorageClass;
        this.subdirectory = subdirectory;
        this.tags = tags;
    }

    private LocationS3Args() {
        this.s3BucketArn = Output.empty();
        this.s3Config = Output.empty();
        this.s3StorageClass = Output.empty();
        this.subdirectory = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationS3Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> s3BucketArn;
        private Output<LocationS3S3ConfigArgs> s3Config;
        private @Nullable Output<LocationS3S3StorageClass> s3StorageClass;
        private @Nullable Output<String> subdirectory;
        private @Nullable Output<List<LocationS3TagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationS3Args defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.s3BucketArn = defaults.s3BucketArn;
    	      this.s3Config = defaults.s3Config;
    	      this.s3StorageClass = defaults.s3StorageClass;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
        }

        public Builder s3BucketArn(Output<String> s3BucketArn) {
            this.s3BucketArn = Objects.requireNonNull(s3BucketArn);
            return this;
        }

        public Builder s3BucketArn(String s3BucketArn) {
            this.s3BucketArn = Output.of(Objects.requireNonNull(s3BucketArn));
            return this;
        }

        public Builder s3Config(Output<LocationS3S3ConfigArgs> s3Config) {
            this.s3Config = Objects.requireNonNull(s3Config);
            return this;
        }

        public Builder s3Config(LocationS3S3ConfigArgs s3Config) {
            this.s3Config = Output.of(Objects.requireNonNull(s3Config));
            return this;
        }

        public Builder s3StorageClass(@Nullable Output<LocationS3S3StorageClass> s3StorageClass) {
            this.s3StorageClass = s3StorageClass;
            return this;
        }

        public Builder s3StorageClass(@Nullable LocationS3S3StorageClass s3StorageClass) {
            this.s3StorageClass = Output.ofNullable(s3StorageClass);
            return this;
        }

        public Builder subdirectory(@Nullable Output<String> subdirectory) {
            this.subdirectory = subdirectory;
            return this;
        }

        public Builder subdirectory(@Nullable String subdirectory) {
            this.subdirectory = Output.ofNullable(subdirectory);
            return this;
        }

        public Builder tags(@Nullable Output<List<LocationS3TagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<LocationS3TagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public LocationS3Args build() {
            return new LocationS3Args(s3BucketArn, s3Config, s3StorageClass, subdirectory, tags);
        }
    }
}
