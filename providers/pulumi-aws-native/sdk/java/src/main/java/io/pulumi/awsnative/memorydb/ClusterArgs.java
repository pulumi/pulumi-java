// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.memorydb;

import io.pulumi.awsnative.memorydb.inputs.ClusterEndpointArgs;
import io.pulumi.awsnative.memorydb.inputs.ClusterTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The name of the Access Control List to associate with the cluster.
     * 
     */
    @Import(name="aCLName", required=true)
      private final Output<String> aCLName;

    public Output<String> aCLName() {
        return this.aCLName;
    }

    /**
     * A flag that enables automatic minor version upgrade when set to true.
     * 
     * You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
     * 
     */
    @Import(name="autoMinorVersionUpgrade")
      private final @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Output<Boolean> autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Codegen.empty() : this.autoMinorVersionUpgrade;
    }

    /**
     * The cluster endpoint.
     * 
     */
    @Import(name="clusterEndpoint")
      private final @Nullable Output<ClusterEndpointArgs> clusterEndpoint;

    public Output<ClusterEndpointArgs> clusterEndpoint() {
        return this.clusterEndpoint == null ? Codegen.empty() : this.clusterEndpoint;
    }

    /**
     * The name of the cluster. This value must be unique as it also serves as the cluster identifier.
     * 
     */
    @Import(name="clusterName")
      private final @Nullable Output<String> clusterName;

    public Output<String> clusterName() {
        return this.clusterName == null ? Codegen.empty() : this.clusterName;
    }

    /**
     * An optional description of the cluster.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The Redis engine version used by the cluster.
     * 
     */
    @Import(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> engineVersion() {
        return this.engineVersion == null ? Codegen.empty() : this.engineVersion;
    }

    /**
     * The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
     * 
     */
    @Import(name="finalSnapshotName")
      private final @Nullable Output<String> finalSnapshotName;

    public Output<String> finalSnapshotName() {
        return this.finalSnapshotName == null ? Codegen.empty() : this.finalSnapshotName;
    }

    /**
     * The ID of the KMS key used to encrypt the cluster.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> kmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     * 
     */
    @Import(name="maintenanceWindow")
      private final @Nullable Output<String> maintenanceWindow;

    public Output<String> maintenanceWindow() {
        return this.maintenanceWindow == null ? Codegen.empty() : this.maintenanceWindow;
    }

    /**
     * The compute and memory capacity of the nodes in the cluster.
     * 
     */
    @Import(name="nodeType", required=true)
      private final Output<String> nodeType;

    public Output<String> nodeType() {
        return this.nodeType;
    }

    /**
     * The number of replicas to apply to each shard. The limit is 5.
     * 
     */
    @Import(name="numReplicasPerShard")
      private final @Nullable Output<Integer> numReplicasPerShard;

    public Output<Integer> numReplicasPerShard() {
        return this.numReplicasPerShard == null ? Codegen.empty() : this.numReplicasPerShard;
    }

    /**
     * The number of shards the cluster will contain.
     * 
     */
    @Import(name="numShards")
      private final @Nullable Output<Integer> numShards;

    public Output<Integer> numShards() {
        return this.numShards == null ? Codegen.empty() : this.numShards;
    }

    /**
     * The name of the parameter group associated with the cluster.
     * 
     */
    @Import(name="parameterGroupName")
      private final @Nullable Output<String> parameterGroupName;

    public Output<String> parameterGroupName() {
        return this.parameterGroupName == null ? Codegen.empty() : this.parameterGroupName;
    }

    /**
     * The port number on which each member of the cluster accepts connections.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * One or more Amazon VPC security groups associated with this cluster.
     * 
     */
    @Import(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> securityGroupIds() {
        return this.securityGroupIds == null ? Codegen.empty() : this.securityGroupIds;
    }

    /**
     * A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
     * 
     */
    @Import(name="snapshotArns")
      private final @Nullable Output<List<String>> snapshotArns;

    public Output<List<String>> snapshotArns() {
        return this.snapshotArns == null ? Codegen.empty() : this.snapshotArns;
    }

    /**
     * The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
     * 
     */
    @Import(name="snapshotName")
      private final @Nullable Output<String> snapshotName;

    public Output<String> snapshotName() {
        return this.snapshotName == null ? Codegen.empty() : this.snapshotName;
    }

    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     * 
     */
    @Import(name="snapshotRetentionLimit")
      private final @Nullable Output<Integer> snapshotRetentionLimit;

    public Output<Integer> snapshotRetentionLimit() {
        return this.snapshotRetentionLimit == null ? Codegen.empty() : this.snapshotRetentionLimit;
    }

    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     * 
     */
    @Import(name="snapshotWindow")
      private final @Nullable Output<String> snapshotWindow;

    public Output<String> snapshotWindow() {
        return this.snapshotWindow == null ? Codegen.empty() : this.snapshotWindow;
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     * 
     */
    @Import(name="snsTopicArn")
      private final @Nullable Output<String> snsTopicArn;

    public Output<String> snsTopicArn() {
        return this.snsTopicArn == null ? Codegen.empty() : this.snsTopicArn;
    }

    /**
     * The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     * 
     */
    @Import(name="snsTopicStatus")
      private final @Nullable Output<String> snsTopicStatus;

    public Output<String> snsTopicStatus() {
        return this.snsTopicStatus == null ? Codegen.empty() : this.snsTopicStatus;
    }

    /**
     * The name of the subnet group to be used for the cluster.
     * 
     */
    @Import(name="subnetGroupName")
      private final @Nullable Output<String> subnetGroupName;

    public Output<String> subnetGroupName() {
        return this.subnetGroupName == null ? Codegen.empty() : this.subnetGroupName;
    }

    /**
     * A flag that enables in-transit encryption when set to true.
     * 
     * You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
     * 
     */
    @Import(name="tLSEnabled")
      private final @Nullable Output<Boolean> tLSEnabled;

    public Output<Boolean> tLSEnabled() {
        return this.tLSEnabled == null ? Codegen.empty() : this.tLSEnabled;
    }

    /**
     * An array of key-value pairs to apply to this cluster.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<ClusterTagArgs>> tags;

    public Output<List<ClusterTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ClusterArgs(
        Output<String> aCLName,
        @Nullable Output<Boolean> autoMinorVersionUpgrade,
        @Nullable Output<ClusterEndpointArgs> clusterEndpoint,
        @Nullable Output<String> clusterName,
        @Nullable Output<String> description,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> finalSnapshotName,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> maintenanceWindow,
        Output<String> nodeType,
        @Nullable Output<Integer> numReplicasPerShard,
        @Nullable Output<Integer> numShards,
        @Nullable Output<String> parameterGroupName,
        @Nullable Output<Integer> port,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<List<String>> snapshotArns,
        @Nullable Output<String> snapshotName,
        @Nullable Output<Integer> snapshotRetentionLimit,
        @Nullable Output<String> snapshotWindow,
        @Nullable Output<String> snsTopicArn,
        @Nullable Output<String> snsTopicStatus,
        @Nullable Output<String> subnetGroupName,
        @Nullable Output<Boolean> tLSEnabled,
        @Nullable Output<List<ClusterTagArgs>> tags) {
        this.aCLName = Objects.requireNonNull(aCLName, "expected parameter 'aCLName' to be non-null");
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.clusterEndpoint = clusterEndpoint;
        this.clusterName = clusterName;
        this.description = description;
        this.engineVersion = engineVersion;
        this.finalSnapshotName = finalSnapshotName;
        this.kmsKeyId = kmsKeyId;
        this.maintenanceWindow = maintenanceWindow;
        this.nodeType = Objects.requireNonNull(nodeType, "expected parameter 'nodeType' to be non-null");
        this.numReplicasPerShard = numReplicasPerShard;
        this.numShards = numShards;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.securityGroupIds = securityGroupIds;
        this.snapshotArns = snapshotArns;
        this.snapshotName = snapshotName;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.snsTopicArn = snsTopicArn;
        this.snsTopicStatus = snsTopicStatus;
        this.subnetGroupName = subnetGroupName;
        this.tLSEnabled = tLSEnabled;
        this.tags = tags;
    }

    private ClusterArgs() {
        this.aCLName = Codegen.empty();
        this.autoMinorVersionUpgrade = Codegen.empty();
        this.clusterEndpoint = Codegen.empty();
        this.clusterName = Codegen.empty();
        this.description = Codegen.empty();
        this.engineVersion = Codegen.empty();
        this.finalSnapshotName = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.maintenanceWindow = Codegen.empty();
        this.nodeType = Codegen.empty();
        this.numReplicasPerShard = Codegen.empty();
        this.numShards = Codegen.empty();
        this.parameterGroupName = Codegen.empty();
        this.port = Codegen.empty();
        this.securityGroupIds = Codegen.empty();
        this.snapshotArns = Codegen.empty();
        this.snapshotName = Codegen.empty();
        this.snapshotRetentionLimit = Codegen.empty();
        this.snapshotWindow = Codegen.empty();
        this.snsTopicArn = Codegen.empty();
        this.snsTopicStatus = Codegen.empty();
        this.subnetGroupName = Codegen.empty();
        this.tLSEnabled = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> aCLName;
        private @Nullable Output<Boolean> autoMinorVersionUpgrade;
        private @Nullable Output<ClusterEndpointArgs> clusterEndpoint;
        private @Nullable Output<String> clusterName;
        private @Nullable Output<String> description;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> finalSnapshotName;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> maintenanceWindow;
        private Output<String> nodeType;
        private @Nullable Output<Integer> numReplicasPerShard;
        private @Nullable Output<Integer> numShards;
        private @Nullable Output<String> parameterGroupName;
        private @Nullable Output<Integer> port;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<List<String>> snapshotArns;
        private @Nullable Output<String> snapshotName;
        private @Nullable Output<Integer> snapshotRetentionLimit;
        private @Nullable Output<String> snapshotWindow;
        private @Nullable Output<String> snsTopicArn;
        private @Nullable Output<String> snsTopicStatus;
        private @Nullable Output<String> subnetGroupName;
        private @Nullable Output<Boolean> tLSEnabled;
        private @Nullable Output<List<ClusterTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aCLName = defaults.aCLName;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.clusterEndpoint = defaults.clusterEndpoint;
    	      this.clusterName = defaults.clusterName;
    	      this.description = defaults.description;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.nodeType = defaults.nodeType;
    	      this.numReplicasPerShard = defaults.numReplicasPerShard;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.snapshotArns = defaults.snapshotArns;
    	      this.snapshotName = defaults.snapshotName;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.snsTopicStatus = defaults.snsTopicStatus;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tLSEnabled = defaults.tLSEnabled;
    	      this.tags = defaults.tags;
        }

        public Builder aCLName(Output<String> aCLName) {
            this.aCLName = Objects.requireNonNull(aCLName);
            return this;
        }
        public Builder aCLName(String aCLName) {
            this.aCLName = Output.of(Objects.requireNonNull(aCLName));
            return this;
        }
        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }
        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Codegen.ofNullable(autoMinorVersionUpgrade);
            return this;
        }
        public Builder clusterEndpoint(@Nullable Output<ClusterEndpointArgs> clusterEndpoint) {
            this.clusterEndpoint = clusterEndpoint;
            return this;
        }
        public Builder clusterEndpoint(@Nullable ClusterEndpointArgs clusterEndpoint) {
            this.clusterEndpoint = Codegen.ofNullable(clusterEndpoint);
            return this;
        }
        public Builder clusterName(@Nullable Output<String> clusterName) {
            this.clusterName = clusterName;
            return this;
        }
        public Builder clusterName(@Nullable String clusterName) {
            this.clusterName = Codegen.ofNullable(clusterName);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Codegen.ofNullable(engineVersion);
            return this;
        }
        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            this.finalSnapshotName = finalSnapshotName;
            return this;
        }
        public Builder finalSnapshotName(@Nullable String finalSnapshotName) {
            this.finalSnapshotName = Codegen.ofNullable(finalSnapshotName);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder maintenanceWindow(@Nullable Output<String> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = Codegen.ofNullable(maintenanceWindow);
            return this;
        }
        public Builder nodeType(Output<String> nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }
        public Builder nodeType(String nodeType) {
            this.nodeType = Output.of(Objects.requireNonNull(nodeType));
            return this;
        }
        public Builder numReplicasPerShard(@Nullable Output<Integer> numReplicasPerShard) {
            this.numReplicasPerShard = numReplicasPerShard;
            return this;
        }
        public Builder numReplicasPerShard(@Nullable Integer numReplicasPerShard) {
            this.numReplicasPerShard = Codegen.ofNullable(numReplicasPerShard);
            return this;
        }
        public Builder numShards(@Nullable Output<Integer> numShards) {
            this.numShards = numShards;
            return this;
        }
        public Builder numShards(@Nullable Integer numShards) {
            this.numShards = Codegen.ofNullable(numShards);
            return this;
        }
        public Builder parameterGroupName(@Nullable Output<String> parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }
        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = Codegen.ofNullable(parameterGroupName);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Codegen.ofNullable(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder snapshotArns(@Nullable Output<List<String>> snapshotArns) {
            this.snapshotArns = snapshotArns;
            return this;
        }
        public Builder snapshotArns(@Nullable List<String> snapshotArns) {
            this.snapshotArns = Codegen.ofNullable(snapshotArns);
            return this;
        }
        public Builder snapshotArns(String... snapshotArns) {
            return snapshotArns(List.of(snapshotArns));
        }
        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            this.snapshotName = snapshotName;
            return this;
        }
        public Builder snapshotName(@Nullable String snapshotName) {
            this.snapshotName = Codegen.ofNullable(snapshotName);
            return this;
        }
        public Builder snapshotRetentionLimit(@Nullable Output<Integer> snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = Codegen.ofNullable(snapshotRetentionLimit);
            return this;
        }
        public Builder snapshotWindow(@Nullable Output<String> snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = Codegen.ofNullable(snapshotWindow);
            return this;
        }
        public Builder snsTopicArn(@Nullable Output<String> snsTopicArn) {
            this.snsTopicArn = snsTopicArn;
            return this;
        }
        public Builder snsTopicArn(@Nullable String snsTopicArn) {
            this.snsTopicArn = Codegen.ofNullable(snsTopicArn);
            return this;
        }
        public Builder snsTopicStatus(@Nullable Output<String> snsTopicStatus) {
            this.snsTopicStatus = snsTopicStatus;
            return this;
        }
        public Builder snsTopicStatus(@Nullable String snsTopicStatus) {
            this.snsTopicStatus = Codegen.ofNullable(snsTopicStatus);
            return this;
        }
        public Builder subnetGroupName(@Nullable Output<String> subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }
        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = Codegen.ofNullable(subnetGroupName);
            return this;
        }
        public Builder tLSEnabled(@Nullable Output<Boolean> tLSEnabled) {
            this.tLSEnabled = tLSEnabled;
            return this;
        }
        public Builder tLSEnabled(@Nullable Boolean tLSEnabled) {
            this.tLSEnabled = Codegen.ofNullable(tLSEnabled);
            return this;
        }
        public Builder tags(@Nullable Output<List<ClusterTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<ClusterTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(ClusterTagArgs... tags) {
            return tags(List.of(tags));
        }        public ClusterArgs build() {
            return new ClusterArgs(aCLName, autoMinorVersionUpgrade, clusterEndpoint, clusterName, description, engineVersion, finalSnapshotName, kmsKeyId, maintenanceWindow, nodeType, numReplicasPerShard, numShards, parameterGroupName, port, securityGroupIds, snapshotArns, snapshotName, snapshotRetentionLimit, snapshotWindow, snsTopicArn, snsTopicStatus, subnetGroupName, tLSEnabled, tags);
        }
    }
}
