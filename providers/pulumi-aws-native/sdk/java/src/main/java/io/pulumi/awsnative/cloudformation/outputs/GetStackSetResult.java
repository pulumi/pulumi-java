// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation.outputs;

import io.pulumi.awsnative.cloudformation.enums.StackSetCapability;
import io.pulumi.awsnative.cloudformation.outputs.ManagedExecutionProperties;
import io.pulumi.awsnative.cloudformation.outputs.StackSetAutoDeployment;
import io.pulumi.awsnative.cloudformation.outputs.StackSetParameter;
import io.pulumi.awsnative.cloudformation.outputs.StackSetStackInstances;
import io.pulumi.awsnative.cloudformation.outputs.StackSetTag;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetStackSetResult {
    /**
     * The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
     * 
     */
    private final @Nullable String administrationRoleARN;
    /**
     * Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
     * 
     */
    private final @Nullable StackSetAutoDeployment autoDeployment;
    /**
     * In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
     * 
     */
    private final @Nullable List<StackSetCapability> capabilities;
    /**
     * A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
     * 
     */
    private final @Nullable String description;
    /**
     * The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
     * 
     */
    private final @Nullable String executionRoleName;
    /**
     * Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     * 
     */
    private final @Nullable ManagedExecutionProperties managedExecution;
    /**
     * The input parameters for the stack set template.
     * 
     */
    private final @Nullable List<StackSetParameter> parameters;
    /**
     * A group of stack instances with parameters in some specific accounts and regions.
     * 
     */
    private final @Nullable List<StackSetStackInstances> stackInstancesGroup;
    /**
     * The ID of the stack set that you're creating.
     * 
     */
    private final @Nullable String stackSetId;
    /**
     * The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
     * 
     */
    private final @Nullable List<StackSetTag> tags;
    /**
     * The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
     * 
     */
    private final @Nullable String templateBody;

    @OutputCustomType.Constructor({"administrationRoleARN","autoDeployment","capabilities","description","executionRoleName","managedExecution","parameters","stackInstancesGroup","stackSetId","tags","templateBody"})
    private GetStackSetResult(
        @Nullable String administrationRoleARN,
        @Nullable StackSetAutoDeployment autoDeployment,
        @Nullable List<StackSetCapability> capabilities,
        @Nullable String description,
        @Nullable String executionRoleName,
        @Nullable ManagedExecutionProperties managedExecution,
        @Nullable List<StackSetParameter> parameters,
        @Nullable List<StackSetStackInstances> stackInstancesGroup,
        @Nullable String stackSetId,
        @Nullable List<StackSetTag> tags,
        @Nullable String templateBody) {
        this.administrationRoleARN = administrationRoleARN;
        this.autoDeployment = autoDeployment;
        this.capabilities = capabilities;
        this.description = description;
        this.executionRoleName = executionRoleName;
        this.managedExecution = managedExecution;
        this.parameters = parameters;
        this.stackInstancesGroup = stackInstancesGroup;
        this.stackSetId = stackSetId;
        this.tags = tags;
        this.templateBody = templateBody;
    }

    /**
     * The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
     * 
     */
    public Optional<String> getAdministrationRoleARN() {
        return Optional.ofNullable(this.administrationRoleARN);
    }
    /**
     * Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
     * 
     */
    public Optional<StackSetAutoDeployment> getAutoDeployment() {
        return Optional.ofNullable(this.autoDeployment);
    }
    /**
     * In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
     * 
     */
    public List<StackSetCapability> getCapabilities() {
        return this.capabilities == null ? List.of() : this.capabilities;
    }
    /**
     * A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
     * 
     */
    public Optional<String> getExecutionRoleName() {
        return Optional.ofNullable(this.executionRoleName);
    }
    /**
     * Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     * 
     */
    public Optional<ManagedExecutionProperties> getManagedExecution() {
        return Optional.ofNullable(this.managedExecution);
    }
    /**
     * The input parameters for the stack set template.
     * 
     */
    public List<StackSetParameter> getParameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    /**
     * A group of stack instances with parameters in some specific accounts and regions.
     * 
     */
    public List<StackSetStackInstances> getStackInstancesGroup() {
        return this.stackInstancesGroup == null ? List.of() : this.stackInstancesGroup;
    }
    /**
     * The ID of the stack set that you're creating.
     * 
     */
    public Optional<String> getStackSetId() {
        return Optional.ofNullable(this.stackSetId);
    }
    /**
     * The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
     * 
     */
    public List<StackSetTag> getTags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
     * 
     */
    public Optional<String> getTemplateBody() {
        return Optional.ofNullable(this.templateBody);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStackSetResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String administrationRoleARN;
        private @Nullable StackSetAutoDeployment autoDeployment;
        private @Nullable List<StackSetCapability> capabilities;
        private @Nullable String description;
        private @Nullable String executionRoleName;
        private @Nullable ManagedExecutionProperties managedExecution;
        private @Nullable List<StackSetParameter> parameters;
        private @Nullable List<StackSetStackInstances> stackInstancesGroup;
        private @Nullable String stackSetId;
        private @Nullable List<StackSetTag> tags;
        private @Nullable String templateBody;

        public Builder() {
    	      // Empty
        }

        public Builder(GetStackSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administrationRoleARN = defaults.administrationRoleARN;
    	      this.autoDeployment = defaults.autoDeployment;
    	      this.capabilities = defaults.capabilities;
    	      this.description = defaults.description;
    	      this.executionRoleName = defaults.executionRoleName;
    	      this.managedExecution = defaults.managedExecution;
    	      this.parameters = defaults.parameters;
    	      this.stackInstancesGroup = defaults.stackInstancesGroup;
    	      this.stackSetId = defaults.stackSetId;
    	      this.tags = defaults.tags;
    	      this.templateBody = defaults.templateBody;
        }

        public Builder setAdministrationRoleARN(@Nullable String administrationRoleARN) {
            this.administrationRoleARN = administrationRoleARN;
            return this;
        }

        public Builder setAutoDeployment(@Nullable StackSetAutoDeployment autoDeployment) {
            this.autoDeployment = autoDeployment;
            return this;
        }

        public Builder setCapabilities(@Nullable List<StackSetCapability> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setExecutionRoleName(@Nullable String executionRoleName) {
            this.executionRoleName = executionRoleName;
            return this;
        }

        public Builder setManagedExecution(@Nullable ManagedExecutionProperties managedExecution) {
            this.managedExecution = managedExecution;
            return this;
        }

        public Builder setParameters(@Nullable List<StackSetParameter> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setStackInstancesGroup(@Nullable List<StackSetStackInstances> stackInstancesGroup) {
            this.stackInstancesGroup = stackInstancesGroup;
            return this;
        }

        public Builder setStackSetId(@Nullable String stackSetId) {
            this.stackSetId = stackSetId;
            return this;
        }

        public Builder setTags(@Nullable List<StackSetTag> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTemplateBody(@Nullable String templateBody) {
            this.templateBody = templateBody;
            return this;
        }
        public GetStackSetResult build() {
            return new GetStackSetResult(administrationRoleARN, autoDeployment, capabilities, description, executionRoleName, managedExecution, parameters, stackInstancesGroup, stackSetId, tags, templateBody);
        }
    }
}
