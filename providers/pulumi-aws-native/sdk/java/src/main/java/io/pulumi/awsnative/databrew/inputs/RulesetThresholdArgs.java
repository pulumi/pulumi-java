// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew.inputs;

import io.pulumi.awsnative.databrew.enums.RulesetThresholdType;
import io.pulumi.awsnative.databrew.enums.RulesetThresholdUnit;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RulesetThresholdArgs extends io.pulumi.resources.ResourceArgs {

    public static final RulesetThresholdArgs Empty = new RulesetThresholdArgs();

    @InputImport(name="type")
        private final @Nullable Input<RulesetThresholdType> type;

    public Input<RulesetThresholdType> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    @InputImport(name="unit")
        private final @Nullable Input<RulesetThresholdUnit> unit;

    public Input<RulesetThresholdUnit> getUnit() {
        return this.unit == null ? Input.empty() : this.unit;
    }

    @InputImport(name="value", required=true)
        private final Input<Double> value;

    public Input<Double> getValue() {
        return this.value;
    }

    public RulesetThresholdArgs(
        @Nullable Input<RulesetThresholdType> type,
        @Nullable Input<RulesetThresholdUnit> unit,
        Input<Double> value) {
        this.type = type;
        this.unit = unit;
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private RulesetThresholdArgs() {
        this.type = Input.empty();
        this.unit = Input.empty();
        this.value = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RulesetThresholdType> type;
        private @Nullable Input<RulesetThresholdUnit> unit;
        private Input<Double> value;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesetThresholdArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.type = defaults.type;
    	      this.unit = defaults.unit;
    	      this.value = defaults.value;
        }

        public Builder setType(@Nullable Input<RulesetThresholdType> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable RulesetThresholdType type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setUnit(@Nullable Input<RulesetThresholdUnit> unit) {
            this.unit = unit;
            return this;
        }

        public Builder setUnit(@Nullable RulesetThresholdUnit unit) {
            this.unit = Input.ofNullable(unit);
            return this;
        }

        public Builder setValue(Input<Double> value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }

        public Builder setValue(Double value) {
            this.value = Input.of(Objects.requireNonNull(value));
            return this;
        }
        public RulesetThresholdArgs build() {
            return new RulesetThresholdArgs(type, unit, value);
        }
    }
}
