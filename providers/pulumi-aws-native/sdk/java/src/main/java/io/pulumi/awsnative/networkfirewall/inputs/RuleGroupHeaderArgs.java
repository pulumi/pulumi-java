// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.networkfirewall.inputs;

import io.pulumi.awsnative.networkfirewall.enums.RuleGroupHeaderDirection;
import io.pulumi.awsnative.networkfirewall.enums.RuleGroupHeaderProtocol;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class RuleGroupHeaderArgs extends io.pulumi.resources.ResourceArgs {

    public static final RuleGroupHeaderArgs Empty = new RuleGroupHeaderArgs();

    @Import(name="destination", required=true)
      private final Output<String> destination;

    public Output<String> getDestination() {
        return this.destination;
    }

    @Import(name="destinationPort", required=true)
      private final Output<String> destinationPort;

    public Output<String> getDestinationPort() {
        return this.destinationPort;
    }

    @Import(name="direction", required=true)
      private final Output<RuleGroupHeaderDirection> direction;

    public Output<RuleGroupHeaderDirection> getDirection() {
        return this.direction;
    }

    @Import(name="protocol", required=true)
      private final Output<RuleGroupHeaderProtocol> protocol;

    public Output<RuleGroupHeaderProtocol> getProtocol() {
        return this.protocol;
    }

    @Import(name="source", required=true)
      private final Output<String> source;

    public Output<String> getSource() {
        return this.source;
    }

    @Import(name="sourcePort", required=true)
      private final Output<String> sourcePort;

    public Output<String> getSourcePort() {
        return this.sourcePort;
    }

    public RuleGroupHeaderArgs(
        Output<String> destination,
        Output<String> destinationPort,
        Output<RuleGroupHeaderDirection> direction,
        Output<RuleGroupHeaderProtocol> protocol,
        Output<String> source,
        Output<String> sourcePort) {
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.destinationPort = Objects.requireNonNull(destinationPort, "expected parameter 'destinationPort' to be non-null");
        this.direction = Objects.requireNonNull(direction, "expected parameter 'direction' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.sourcePort = Objects.requireNonNull(sourcePort, "expected parameter 'sourcePort' to be non-null");
    }

    private RuleGroupHeaderArgs() {
        this.destination = Output.empty();
        this.destinationPort = Output.empty();
        this.direction = Output.empty();
        this.protocol = Output.empty();
        this.source = Output.empty();
        this.sourcePort = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupHeaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> destination;
        private Output<String> destinationPort;
        private Output<RuleGroupHeaderDirection> direction;
        private Output<RuleGroupHeaderProtocol> protocol;
        private Output<String> source;
        private Output<String> sourcePort;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupHeaderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destination = defaults.destination;
    	      this.destinationPort = defaults.destinationPort;
    	      this.direction = defaults.direction;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourcePort = defaults.sourcePort;
        }

        public Builder destination(Output<String> destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }

        public Builder destination(String destination) {
            this.destination = Output.of(Objects.requireNonNull(destination));
            return this;
        }

        public Builder destinationPort(Output<String> destinationPort) {
            this.destinationPort = Objects.requireNonNull(destinationPort);
            return this;
        }

        public Builder destinationPort(String destinationPort) {
            this.destinationPort = Output.of(Objects.requireNonNull(destinationPort));
            return this;
        }

        public Builder direction(Output<RuleGroupHeaderDirection> direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }

        public Builder direction(RuleGroupHeaderDirection direction) {
            this.direction = Output.of(Objects.requireNonNull(direction));
            return this;
        }

        public Builder protocol(Output<RuleGroupHeaderProtocol> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder protocol(RuleGroupHeaderProtocol protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }

        public Builder source(Output<String> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder source(String source) {
            this.source = Output.of(Objects.requireNonNull(source));
            return this;
        }

        public Builder sourcePort(Output<String> sourcePort) {
            this.sourcePort = Objects.requireNonNull(sourcePort);
            return this;
        }

        public Builder sourcePort(String sourcePort) {
            this.sourcePort = Output.of(Objects.requireNonNull(sourcePort));
            return this;
        }
        public RuleGroupHeaderArgs build() {
            return new RuleGroupHeaderArgs(destination, destinationPort, direction, protocol, source, sourcePort);
        }
    }
}
