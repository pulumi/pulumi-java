// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.gamelift;

import io.pulumi.awsnative.gamelift.enums.GameServerGroupBalancingStrategy;
import io.pulumi.awsnative.gamelift.enums.GameServerGroupDeleteOption;
import io.pulumi.awsnative.gamelift.enums.GameServerGroupGameServerProtectionPolicy;
import io.pulumi.awsnative.gamelift.inputs.GameServerGroupAutoScalingPolicyArgs;
import io.pulumi.awsnative.gamelift.inputs.GameServerGroupInstanceDefinitionArgs;
import io.pulumi.awsnative.gamelift.inputs.GameServerGroupLaunchTemplateArgs;
import io.pulumi.awsnative.gamelift.inputs.GameServerGroupTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GameServerGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final GameServerGroupArgs Empty = new GameServerGroupArgs();

    @InputImport(name="autoScalingPolicy")
    private final @Nullable Input<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy;

    public Input<GameServerGroupAutoScalingPolicyArgs> getAutoScalingPolicy() {
        return this.autoScalingPolicy == null ? Input.empty() : this.autoScalingPolicy;
    }

    @InputImport(name="balancingStrategy")
    private final @Nullable Input<GameServerGroupBalancingStrategy> balancingStrategy;

    public Input<GameServerGroupBalancingStrategy> getBalancingStrategy() {
        return this.balancingStrategy == null ? Input.empty() : this.balancingStrategy;
    }

    @InputImport(name="deleteOption")
    private final @Nullable Input<GameServerGroupDeleteOption> deleteOption;

    public Input<GameServerGroupDeleteOption> getDeleteOption() {
        return this.deleteOption == null ? Input.empty() : this.deleteOption;
    }

    @InputImport(name="gameServerGroupName")
    private final @Nullable Input<String> gameServerGroupName;

    public Input<String> getGameServerGroupName() {
        return this.gameServerGroupName == null ? Input.empty() : this.gameServerGroupName;
    }

    @InputImport(name="gameServerProtectionPolicy")
    private final @Nullable Input<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy;

    public Input<GameServerGroupGameServerProtectionPolicy> getGameServerProtectionPolicy() {
        return this.gameServerProtectionPolicy == null ? Input.empty() : this.gameServerProtectionPolicy;
    }

    @InputImport(name="instanceDefinitions", required=true)
    private final Input<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions;

    public Input<List<GameServerGroupInstanceDefinitionArgs>> getInstanceDefinitions() {
        return this.instanceDefinitions;
    }

    @InputImport(name="launchTemplate", required=true)
    private final Input<GameServerGroupLaunchTemplateArgs> launchTemplate;

    public Input<GameServerGroupLaunchTemplateArgs> getLaunchTemplate() {
        return this.launchTemplate;
    }

    @InputImport(name="maxSize")
    private final @Nullable Input<Double> maxSize;

    public Input<Double> getMaxSize() {
        return this.maxSize == null ? Input.empty() : this.maxSize;
    }

    @InputImport(name="minSize")
    private final @Nullable Input<Double> minSize;

    public Input<Double> getMinSize() {
        return this.minSize == null ? Input.empty() : this.minSize;
    }

    @InputImport(name="roleArn", required=true)
    private final Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn;
    }

    @InputImport(name="tags")
    private final @Nullable Input<List<GameServerGroupTagArgs>> tags;

    public Input<List<GameServerGroupTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="vpcSubnets")
    private final @Nullable Input<List<String>> vpcSubnets;

    public Input<List<String>> getVpcSubnets() {
        return this.vpcSubnets == null ? Input.empty() : this.vpcSubnets;
    }

    public GameServerGroupArgs(
        @Nullable Input<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy,
        @Nullable Input<GameServerGroupBalancingStrategy> balancingStrategy,
        @Nullable Input<GameServerGroupDeleteOption> deleteOption,
        @Nullable Input<String> gameServerGroupName,
        @Nullable Input<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy,
        Input<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions,
        Input<GameServerGroupLaunchTemplateArgs> launchTemplate,
        @Nullable Input<Double> maxSize,
        @Nullable Input<Double> minSize,
        Input<String> roleArn,
        @Nullable Input<List<GameServerGroupTagArgs>> tags,
        @Nullable Input<List<String>> vpcSubnets) {
        this.autoScalingPolicy = autoScalingPolicy;
        this.balancingStrategy = balancingStrategy;
        this.deleteOption = deleteOption;
        this.gameServerGroupName = gameServerGroupName;
        this.gameServerProtectionPolicy = gameServerProtectionPolicy;
        this.instanceDefinitions = Objects.requireNonNull(instanceDefinitions, "expected parameter 'instanceDefinitions' to be non-null");
        this.launchTemplate = Objects.requireNonNull(launchTemplate, "expected parameter 'launchTemplate' to be non-null");
        this.maxSize = maxSize;
        this.minSize = minSize;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.tags = tags;
        this.vpcSubnets = vpcSubnets;
    }

    private GameServerGroupArgs() {
        this.autoScalingPolicy = Input.empty();
        this.balancingStrategy = Input.empty();
        this.deleteOption = Input.empty();
        this.gameServerGroupName = Input.empty();
        this.gameServerProtectionPolicy = Input.empty();
        this.instanceDefinitions = Input.empty();
        this.launchTemplate = Input.empty();
        this.maxSize = Input.empty();
        this.minSize = Input.empty();
        this.roleArn = Input.empty();
        this.tags = Input.empty();
        this.vpcSubnets = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GameServerGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy;
        private @Nullable Input<GameServerGroupBalancingStrategy> balancingStrategy;
        private @Nullable Input<GameServerGroupDeleteOption> deleteOption;
        private @Nullable Input<String> gameServerGroupName;
        private @Nullable Input<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy;
        private Input<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions;
        private Input<GameServerGroupLaunchTemplateArgs> launchTemplate;
        private @Nullable Input<Double> maxSize;
        private @Nullable Input<Double> minSize;
        private Input<String> roleArn;
        private @Nullable Input<List<GameServerGroupTagArgs>> tags;
        private @Nullable Input<List<String>> vpcSubnets;

        public Builder() {
    	      // Empty
        }

        public Builder(GameServerGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingPolicy = defaults.autoScalingPolicy;
    	      this.balancingStrategy = defaults.balancingStrategy;
    	      this.deleteOption = defaults.deleteOption;
    	      this.gameServerGroupName = defaults.gameServerGroupName;
    	      this.gameServerProtectionPolicy = defaults.gameServerProtectionPolicy;
    	      this.instanceDefinitions = defaults.instanceDefinitions;
    	      this.launchTemplate = defaults.launchTemplate;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
    	      this.vpcSubnets = defaults.vpcSubnets;
        }

        public Builder setAutoScalingPolicy(@Nullable Input<GameServerGroupAutoScalingPolicyArgs> autoScalingPolicy) {
            this.autoScalingPolicy = autoScalingPolicy;
            return this;
        }

        public Builder setAutoScalingPolicy(@Nullable GameServerGroupAutoScalingPolicyArgs autoScalingPolicy) {
            this.autoScalingPolicy = Input.ofNullable(autoScalingPolicy);
            return this;
        }

        public Builder setBalancingStrategy(@Nullable Input<GameServerGroupBalancingStrategy> balancingStrategy) {
            this.balancingStrategy = balancingStrategy;
            return this;
        }

        public Builder setBalancingStrategy(@Nullable GameServerGroupBalancingStrategy balancingStrategy) {
            this.balancingStrategy = Input.ofNullable(balancingStrategy);
            return this;
        }

        public Builder setDeleteOption(@Nullable Input<GameServerGroupDeleteOption> deleteOption) {
            this.deleteOption = deleteOption;
            return this;
        }

        public Builder setDeleteOption(@Nullable GameServerGroupDeleteOption deleteOption) {
            this.deleteOption = Input.ofNullable(deleteOption);
            return this;
        }

        public Builder setGameServerGroupName(@Nullable Input<String> gameServerGroupName) {
            this.gameServerGroupName = gameServerGroupName;
            return this;
        }

        public Builder setGameServerGroupName(@Nullable String gameServerGroupName) {
            this.gameServerGroupName = Input.ofNullable(gameServerGroupName);
            return this;
        }

        public Builder setGameServerProtectionPolicy(@Nullable Input<GameServerGroupGameServerProtectionPolicy> gameServerProtectionPolicy) {
            this.gameServerProtectionPolicy = gameServerProtectionPolicy;
            return this;
        }

        public Builder setGameServerProtectionPolicy(@Nullable GameServerGroupGameServerProtectionPolicy gameServerProtectionPolicy) {
            this.gameServerProtectionPolicy = Input.ofNullable(gameServerProtectionPolicy);
            return this;
        }

        public Builder setInstanceDefinitions(Input<List<GameServerGroupInstanceDefinitionArgs>> instanceDefinitions) {
            this.instanceDefinitions = Objects.requireNonNull(instanceDefinitions);
            return this;
        }

        public Builder setInstanceDefinitions(List<GameServerGroupInstanceDefinitionArgs> instanceDefinitions) {
            this.instanceDefinitions = Input.of(Objects.requireNonNull(instanceDefinitions));
            return this;
        }

        public Builder setLaunchTemplate(Input<GameServerGroupLaunchTemplateArgs> launchTemplate) {
            this.launchTemplate = Objects.requireNonNull(launchTemplate);
            return this;
        }

        public Builder setLaunchTemplate(GameServerGroupLaunchTemplateArgs launchTemplate) {
            this.launchTemplate = Input.of(Objects.requireNonNull(launchTemplate));
            return this;
        }

        public Builder setMaxSize(@Nullable Input<Double> maxSize) {
            this.maxSize = maxSize;
            return this;
        }

        public Builder setMaxSize(@Nullable Double maxSize) {
            this.maxSize = Input.ofNullable(maxSize);
            return this;
        }

        public Builder setMinSize(@Nullable Input<Double> minSize) {
            this.minSize = minSize;
            return this;
        }

        public Builder setMinSize(@Nullable Double minSize) {
            this.minSize = Input.ofNullable(minSize);
            return this;
        }

        public Builder setRoleArn(Input<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder setRoleArn(String roleArn) {
            this.roleArn = Input.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder setTags(@Nullable Input<List<GameServerGroupTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<GameServerGroupTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVpcSubnets(@Nullable Input<List<String>> vpcSubnets) {
            this.vpcSubnets = vpcSubnets;
            return this;
        }

        public Builder setVpcSubnets(@Nullable List<String> vpcSubnets) {
            this.vpcSubnets = Input.ofNullable(vpcSubnets);
            return this;
        }

        public GameServerGroupArgs build() {
            return new GameServerGroupArgs(autoScalingPolicy, balancingStrategy, deleteOption, gameServerGroupName, gameServerProtectionPolicy, instanceDefinitions, launchTemplate, maxSize, minSize, roleArn, tags, vpcSubnets);
        }
    }
}
