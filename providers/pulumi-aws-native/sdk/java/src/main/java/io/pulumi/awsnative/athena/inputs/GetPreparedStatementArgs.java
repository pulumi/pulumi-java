// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.athena.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class GetPreparedStatementArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetPreparedStatementArgs Empty = new GetPreparedStatementArgs();

    /**
     * The name of the prepared statement.
     * 
     */
    @InputImport(name="statementName", required=true)
    private final String statementName;

    public String getStatementName() {
        return this.statementName;
    }

    /**
     * The name of the workgroup to which the prepared statement belongs.
     * 
     */
    @InputImport(name="workGroup", required=true)
    private final String workGroup;

    public String getWorkGroup() {
        return this.workGroup;
    }

    public GetPreparedStatementArgs(
        String statementName,
        String workGroup) {
        this.statementName = Objects.requireNonNull(statementName, "expected parameter 'statementName' to be non-null");
        this.workGroup = Objects.requireNonNull(workGroup, "expected parameter 'workGroup' to be non-null");
    }

    private GetPreparedStatementArgs() {
        this.statementName = null;
        this.workGroup = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPreparedStatementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String statementName;
        private String workGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPreparedStatementArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.statementName = defaults.statementName;
    	      this.workGroup = defaults.workGroup;
        }

        public Builder setStatementName(String statementName) {
            this.statementName = Objects.requireNonNull(statementName);
            return this;
        }

        public Builder setWorkGroup(String workGroup) {
            this.workGroup = Objects.requireNonNull(workGroup);
            return this;
        }

        public GetPreparedStatementArgs build() {
            return new GetPreparedStatementArgs(statementName, workGroup);
        }
    }
}
