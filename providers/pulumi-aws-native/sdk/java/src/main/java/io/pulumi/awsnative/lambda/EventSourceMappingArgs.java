// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lambda;

import io.pulumi.awsnative.lambda.enums.EventSourceMappingFunctionResponseTypesItem;
import io.pulumi.awsnative.lambda.inputs.EventSourceMappingDestinationConfigArgs;
import io.pulumi.awsnative.lambda.inputs.EventSourceMappingSelfManagedEventSourceArgs;
import io.pulumi.awsnative.lambda.inputs.EventSourceMappingSourceAccessConfigurationArgs;
import io.pulumi.awsnative.lambda.inputs.FilterCriteriaPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventSourceMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventSourceMappingArgs Empty = new EventSourceMappingArgs();

    /**
     * The maximum number of items to retrieve in a single batch.
     * 
     */
    @Import(name="batchSize")
      private final @Nullable Output<Integer> batchSize;

    public Output<Integer> getBatchSize() {
        return this.batchSize == null ? Output.empty() : this.batchSize;
    }

    /**
     * (Streams) If the function returns an error, split the batch in two and retry.
     * 
     */
    @Import(name="bisectBatchOnFunctionError")
      private final @Nullable Output<Boolean> bisectBatchOnFunctionError;

    public Output<Boolean> getBisectBatchOnFunctionError() {
        return this.bisectBatchOnFunctionError == null ? Output.empty() : this.bisectBatchOnFunctionError;
    }

    /**
     * (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
     * 
     */
    @Import(name="destinationConfig")
      private final @Nullable Output<EventSourceMappingDestinationConfigArgs> destinationConfig;

    public Output<EventSourceMappingDestinationConfigArgs> getDestinationConfig() {
        return this.destinationConfig == null ? Output.empty() : this.destinationConfig;
    }

    /**
     * Disables the event source mapping to pause polling and invocation.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * The Amazon Resource Name (ARN) of the event source.
     * 
     */
    @Import(name="eventSourceArn")
      private final @Nullable Output<String> eventSourceArn;

    public Output<String> getEventSourceArn() {
        return this.eventSourceArn == null ? Output.empty() : this.eventSourceArn;
    }

    /**
     * The filter criteria to control event filtering.
     * 
     */
    @Import(name="filterCriteria")
      private final @Nullable Output<FilterCriteriaPropertiesArgs> filterCriteria;

    public Output<FilterCriteriaPropertiesArgs> getFilterCriteria() {
        return this.filterCriteria == null ? Output.empty() : this.filterCriteria;
    }

    /**
     * The name of the Lambda function.
     * 
     */
    @Import(name="functionName", required=true)
      private final Output<String> functionName;

    public Output<String> getFunctionName() {
        return this.functionName;
    }

    /**
     * (Streams) A list of response types supported by the function.
     * 
     */
    @Import(name="functionResponseTypes")
      private final @Nullable Output<List<EventSourceMappingFunctionResponseTypesItem>> functionResponseTypes;

    public Output<List<EventSourceMappingFunctionResponseTypesItem>> getFunctionResponseTypes() {
        return this.functionResponseTypes == null ? Output.empty() : this.functionResponseTypes;
    }

    /**
     * (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
     * 
     */
    @Import(name="maximumBatchingWindowInSeconds")
      private final @Nullable Output<Integer> maximumBatchingWindowInSeconds;

    public Output<Integer> getMaximumBatchingWindowInSeconds() {
        return this.maximumBatchingWindowInSeconds == null ? Output.empty() : this.maximumBatchingWindowInSeconds;
    }

    /**
     * (Streams) The maximum age of a record that Lambda sends to a function for processing.
     * 
     */
    @Import(name="maximumRecordAgeInSeconds")
      private final @Nullable Output<Integer> maximumRecordAgeInSeconds;

    public Output<Integer> getMaximumRecordAgeInSeconds() {
        return this.maximumRecordAgeInSeconds == null ? Output.empty() : this.maximumRecordAgeInSeconds;
    }

    /**
     * (Streams) The maximum number of times to retry when the function returns an error.
     * 
     */
    @Import(name="maximumRetryAttempts")
      private final @Nullable Output<Integer> maximumRetryAttempts;

    public Output<Integer> getMaximumRetryAttempts() {
        return this.maximumRetryAttempts == null ? Output.empty() : this.maximumRetryAttempts;
    }

    /**
     * (Streams) The number of batches to process from each shard concurrently.
     * 
     */
    @Import(name="parallelizationFactor")
      private final @Nullable Output<Integer> parallelizationFactor;

    public Output<Integer> getParallelizationFactor() {
        return this.parallelizationFactor == null ? Output.empty() : this.parallelizationFactor;
    }

    /**
     * (ActiveMQ) A list of ActiveMQ queues.
     * 
     */
    @Import(name="queues")
      private final @Nullable Output<List<String>> queues;

    public Output<List<String>> getQueues() {
        return this.queues == null ? Output.empty() : this.queues;
    }

    /**
     * Self-managed event source endpoints.
     * 
     */
    @Import(name="selfManagedEventSource")
      private final @Nullable Output<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource;

    public Output<EventSourceMappingSelfManagedEventSourceArgs> getSelfManagedEventSource() {
        return this.selfManagedEventSource == null ? Output.empty() : this.selfManagedEventSource;
    }

    /**
     * A list of SourceAccessConfiguration.
     * 
     */
    @Import(name="sourceAccessConfigurations")
      private final @Nullable Output<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations;

    public Output<List<EventSourceMappingSourceAccessConfigurationArgs>> getSourceAccessConfigurations() {
        return this.sourceAccessConfigurations == null ? Output.empty() : this.sourceAccessConfigurations;
    }

    /**
     * The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
     * 
     */
    @Import(name="startingPosition")
      private final @Nullable Output<String> startingPosition;

    public Output<String> getStartingPosition() {
        return this.startingPosition == null ? Output.empty() : this.startingPosition;
    }

    /**
     * With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
     * 
     */
    @Import(name="startingPositionTimestamp")
      private final @Nullable Output<Double> startingPositionTimestamp;

    public Output<Double> getStartingPositionTimestamp() {
        return this.startingPositionTimestamp == null ? Output.empty() : this.startingPositionTimestamp;
    }

    /**
     * (Kafka) A list of Kafka topics.
     * 
     */
    @Import(name="topics")
      private final @Nullable Output<List<String>> topics;

    public Output<List<String>> getTopics() {
        return this.topics == null ? Output.empty() : this.topics;
    }

    /**
     * (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
     * 
     */
    @Import(name="tumblingWindowInSeconds")
      private final @Nullable Output<Integer> tumblingWindowInSeconds;

    public Output<Integer> getTumblingWindowInSeconds() {
        return this.tumblingWindowInSeconds == null ? Output.empty() : this.tumblingWindowInSeconds;
    }

    public EventSourceMappingArgs(
        @Nullable Output<Integer> batchSize,
        @Nullable Output<Boolean> bisectBatchOnFunctionError,
        @Nullable Output<EventSourceMappingDestinationConfigArgs> destinationConfig,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> eventSourceArn,
        @Nullable Output<FilterCriteriaPropertiesArgs> filterCriteria,
        Output<String> functionName,
        @Nullable Output<List<EventSourceMappingFunctionResponseTypesItem>> functionResponseTypes,
        @Nullable Output<Integer> maximumBatchingWindowInSeconds,
        @Nullable Output<Integer> maximumRecordAgeInSeconds,
        @Nullable Output<Integer> maximumRetryAttempts,
        @Nullable Output<Integer> parallelizationFactor,
        @Nullable Output<List<String>> queues,
        @Nullable Output<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource,
        @Nullable Output<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations,
        @Nullable Output<String> startingPosition,
        @Nullable Output<Double> startingPositionTimestamp,
        @Nullable Output<List<String>> topics,
        @Nullable Output<Integer> tumblingWindowInSeconds) {
        this.batchSize = batchSize;
        this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
        this.destinationConfig = destinationConfig;
        this.enabled = enabled;
        this.eventSourceArn = eventSourceArn;
        this.filterCriteria = filterCriteria;
        this.functionName = Objects.requireNonNull(functionName, "expected parameter 'functionName' to be non-null");
        this.functionResponseTypes = functionResponseTypes;
        this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
        this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
        this.maximumRetryAttempts = maximumRetryAttempts;
        this.parallelizationFactor = parallelizationFactor;
        this.queues = queues;
        this.selfManagedEventSource = selfManagedEventSource;
        this.sourceAccessConfigurations = sourceAccessConfigurations;
        this.startingPosition = startingPosition;
        this.startingPositionTimestamp = startingPositionTimestamp;
        this.topics = topics;
        this.tumblingWindowInSeconds = tumblingWindowInSeconds;
    }

    private EventSourceMappingArgs() {
        this.batchSize = Output.empty();
        this.bisectBatchOnFunctionError = Output.empty();
        this.destinationConfig = Output.empty();
        this.enabled = Output.empty();
        this.eventSourceArn = Output.empty();
        this.filterCriteria = Output.empty();
        this.functionName = Output.empty();
        this.functionResponseTypes = Output.empty();
        this.maximumBatchingWindowInSeconds = Output.empty();
        this.maximumRecordAgeInSeconds = Output.empty();
        this.maximumRetryAttempts = Output.empty();
        this.parallelizationFactor = Output.empty();
        this.queues = Output.empty();
        this.selfManagedEventSource = Output.empty();
        this.sourceAccessConfigurations = Output.empty();
        this.startingPosition = Output.empty();
        this.startingPositionTimestamp = Output.empty();
        this.topics = Output.empty();
        this.tumblingWindowInSeconds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSourceMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> batchSize;
        private @Nullable Output<Boolean> bisectBatchOnFunctionError;
        private @Nullable Output<EventSourceMappingDestinationConfigArgs> destinationConfig;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> eventSourceArn;
        private @Nullable Output<FilterCriteriaPropertiesArgs> filterCriteria;
        private Output<String> functionName;
        private @Nullable Output<List<EventSourceMappingFunctionResponseTypesItem>> functionResponseTypes;
        private @Nullable Output<Integer> maximumBatchingWindowInSeconds;
        private @Nullable Output<Integer> maximumRecordAgeInSeconds;
        private @Nullable Output<Integer> maximumRetryAttempts;
        private @Nullable Output<Integer> parallelizationFactor;
        private @Nullable Output<List<String>> queues;
        private @Nullable Output<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource;
        private @Nullable Output<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations;
        private @Nullable Output<String> startingPosition;
        private @Nullable Output<Double> startingPositionTimestamp;
        private @Nullable Output<List<String>> topics;
        private @Nullable Output<Integer> tumblingWindowInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(EventSourceMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.bisectBatchOnFunctionError = defaults.bisectBatchOnFunctionError;
    	      this.destinationConfig = defaults.destinationConfig;
    	      this.enabled = defaults.enabled;
    	      this.eventSourceArn = defaults.eventSourceArn;
    	      this.filterCriteria = defaults.filterCriteria;
    	      this.functionName = defaults.functionName;
    	      this.functionResponseTypes = defaults.functionResponseTypes;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.maximumRecordAgeInSeconds = defaults.maximumRecordAgeInSeconds;
    	      this.maximumRetryAttempts = defaults.maximumRetryAttempts;
    	      this.parallelizationFactor = defaults.parallelizationFactor;
    	      this.queues = defaults.queues;
    	      this.selfManagedEventSource = defaults.selfManagedEventSource;
    	      this.sourceAccessConfigurations = defaults.sourceAccessConfigurations;
    	      this.startingPosition = defaults.startingPosition;
    	      this.startingPositionTimestamp = defaults.startingPositionTimestamp;
    	      this.topics = defaults.topics;
    	      this.tumblingWindowInSeconds = defaults.tumblingWindowInSeconds;
        }

        public Builder batchSize(@Nullable Output<Integer> batchSize) {
            this.batchSize = batchSize;
            return this;
        }
        public Builder batchSize(@Nullable Integer batchSize) {
            this.batchSize = Output.ofNullable(batchSize);
            return this;
        }
        public Builder bisectBatchOnFunctionError(@Nullable Output<Boolean> bisectBatchOnFunctionError) {
            this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
            return this;
        }
        public Builder bisectBatchOnFunctionError(@Nullable Boolean bisectBatchOnFunctionError) {
            this.bisectBatchOnFunctionError = Output.ofNullable(bisectBatchOnFunctionError);
            return this;
        }
        public Builder destinationConfig(@Nullable Output<EventSourceMappingDestinationConfigArgs> destinationConfig) {
            this.destinationConfig = destinationConfig;
            return this;
        }
        public Builder destinationConfig(@Nullable EventSourceMappingDestinationConfigArgs destinationConfig) {
            this.destinationConfig = Output.ofNullable(destinationConfig);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }
        public Builder eventSourceArn(@Nullable Output<String> eventSourceArn) {
            this.eventSourceArn = eventSourceArn;
            return this;
        }
        public Builder eventSourceArn(@Nullable String eventSourceArn) {
            this.eventSourceArn = Output.ofNullable(eventSourceArn);
            return this;
        }
        public Builder filterCriteria(@Nullable Output<FilterCriteriaPropertiesArgs> filterCriteria) {
            this.filterCriteria = filterCriteria;
            return this;
        }
        public Builder filterCriteria(@Nullable FilterCriteriaPropertiesArgs filterCriteria) {
            this.filterCriteria = Output.ofNullable(filterCriteria);
            return this;
        }
        public Builder functionName(Output<String> functionName) {
            this.functionName = Objects.requireNonNull(functionName);
            return this;
        }
        public Builder functionName(String functionName) {
            this.functionName = Output.of(Objects.requireNonNull(functionName));
            return this;
        }
        public Builder functionResponseTypes(@Nullable Output<List<EventSourceMappingFunctionResponseTypesItem>> functionResponseTypes) {
            this.functionResponseTypes = functionResponseTypes;
            return this;
        }
        public Builder functionResponseTypes(@Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes) {
            this.functionResponseTypes = Output.ofNullable(functionResponseTypes);
            return this;
        }
        public Builder functionResponseTypes(EventSourceMappingFunctionResponseTypesItem... functionResponseTypes) {
            return functionResponseTypes(List.of(functionResponseTypes));
        }
        public Builder maximumBatchingWindowInSeconds(@Nullable Output<Integer> maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }
        public Builder maximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = Output.ofNullable(maximumBatchingWindowInSeconds);
            return this;
        }
        public Builder maximumRecordAgeInSeconds(@Nullable Output<Integer> maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            return this;
        }
        public Builder maximumRecordAgeInSeconds(@Nullable Integer maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = Output.ofNullable(maximumRecordAgeInSeconds);
            return this;
        }
        public Builder maximumRetryAttempts(@Nullable Output<Integer> maximumRetryAttempts) {
            this.maximumRetryAttempts = maximumRetryAttempts;
            return this;
        }
        public Builder maximumRetryAttempts(@Nullable Integer maximumRetryAttempts) {
            this.maximumRetryAttempts = Output.ofNullable(maximumRetryAttempts);
            return this;
        }
        public Builder parallelizationFactor(@Nullable Output<Integer> parallelizationFactor) {
            this.parallelizationFactor = parallelizationFactor;
            return this;
        }
        public Builder parallelizationFactor(@Nullable Integer parallelizationFactor) {
            this.parallelizationFactor = Output.ofNullable(parallelizationFactor);
            return this;
        }
        public Builder queues(@Nullable Output<List<String>> queues) {
            this.queues = queues;
            return this;
        }
        public Builder queues(@Nullable List<String> queues) {
            this.queues = Output.ofNullable(queues);
            return this;
        }
        public Builder queues(String... queues) {
            return queues(List.of(queues));
        }
        public Builder selfManagedEventSource(@Nullable Output<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource) {
            this.selfManagedEventSource = selfManagedEventSource;
            return this;
        }
        public Builder selfManagedEventSource(@Nullable EventSourceMappingSelfManagedEventSourceArgs selfManagedEventSource) {
            this.selfManagedEventSource = Output.ofNullable(selfManagedEventSource);
            return this;
        }
        public Builder sourceAccessConfigurations(@Nullable Output<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations) {
            this.sourceAccessConfigurations = sourceAccessConfigurations;
            return this;
        }
        public Builder sourceAccessConfigurations(@Nullable List<EventSourceMappingSourceAccessConfigurationArgs> sourceAccessConfigurations) {
            this.sourceAccessConfigurations = Output.ofNullable(sourceAccessConfigurations);
            return this;
        }
        public Builder sourceAccessConfigurations(EventSourceMappingSourceAccessConfigurationArgs... sourceAccessConfigurations) {
            return sourceAccessConfigurations(List.of(sourceAccessConfigurations));
        }
        public Builder startingPosition(@Nullable Output<String> startingPosition) {
            this.startingPosition = startingPosition;
            return this;
        }
        public Builder startingPosition(@Nullable String startingPosition) {
            this.startingPosition = Output.ofNullable(startingPosition);
            return this;
        }
        public Builder startingPositionTimestamp(@Nullable Output<Double> startingPositionTimestamp) {
            this.startingPositionTimestamp = startingPositionTimestamp;
            return this;
        }
        public Builder startingPositionTimestamp(@Nullable Double startingPositionTimestamp) {
            this.startingPositionTimestamp = Output.ofNullable(startingPositionTimestamp);
            return this;
        }
        public Builder topics(@Nullable Output<List<String>> topics) {
            this.topics = topics;
            return this;
        }
        public Builder topics(@Nullable List<String> topics) {
            this.topics = Output.ofNullable(topics);
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        public Builder tumblingWindowInSeconds(@Nullable Output<Integer> tumblingWindowInSeconds) {
            this.tumblingWindowInSeconds = tumblingWindowInSeconds;
            return this;
        }
        public Builder tumblingWindowInSeconds(@Nullable Integer tumblingWindowInSeconds) {
            this.tumblingWindowInSeconds = Output.ofNullable(tumblingWindowInSeconds);
            return this;
        }        public EventSourceMappingArgs build() {
            return new EventSourceMappingArgs(batchSize, bisectBatchOnFunctionError, destinationConfig, enabled, eventSourceArn, filterCriteria, functionName, functionResponseTypes, maximumBatchingWindowInSeconds, maximumRecordAgeInSeconds, maximumRetryAttempts, parallelizationFactor, queues, selfManagedEventSource, sourceAccessConfigurations, startingPosition, startingPositionTimestamp, topics, tumblingWindowInSeconds);
        }
    }
}
