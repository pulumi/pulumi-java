// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetAlarmResult {
    private final @Nullable String alarmArn;
    /**
     * The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    private final @Nullable String comparisonOperator;
    /**
     * The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    private final @Nullable List<String> contactProtocols;
    /**
     * The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    private final @Nullable Integer datapointsToAlarm;
    /**
     * The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
     * 
     */
    private final @Nullable Integer evaluationPeriods;
    /**
     * Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
     * 
     */
    private final @Nullable Boolean notificationEnabled;
    /**
     * The alarm states that trigger a notification.
     * 
     */
    private final @Nullable List<String> notificationTriggers;
    /**
     * The current state of the alarm.
     * 
     */
    private final @Nullable String state;
    /**
     * The value against which the specified statistic is compared.
     * 
     */
    private final @Nullable Double threshold;
    /**
     * Sets how this alarm will handle missing data points.
     * 
     */
    private final @Nullable String treatMissingData;

    @OutputCustomType.Constructor
    private GetAlarmResult(
        @OutputCustomType.Parameter("alarmArn") @Nullable String alarmArn,
        @OutputCustomType.Parameter("comparisonOperator") @Nullable String comparisonOperator,
        @OutputCustomType.Parameter("contactProtocols") @Nullable List<String> contactProtocols,
        @OutputCustomType.Parameter("datapointsToAlarm") @Nullable Integer datapointsToAlarm,
        @OutputCustomType.Parameter("evaluationPeriods") @Nullable Integer evaluationPeriods,
        @OutputCustomType.Parameter("notificationEnabled") @Nullable Boolean notificationEnabled,
        @OutputCustomType.Parameter("notificationTriggers") @Nullable List<String> notificationTriggers,
        @OutputCustomType.Parameter("state") @Nullable String state,
        @OutputCustomType.Parameter("threshold") @Nullable Double threshold,
        @OutputCustomType.Parameter("treatMissingData") @Nullable String treatMissingData) {
        this.alarmArn = alarmArn;
        this.comparisonOperator = comparisonOperator;
        this.contactProtocols = contactProtocols;
        this.datapointsToAlarm = datapointsToAlarm;
        this.evaluationPeriods = evaluationPeriods;
        this.notificationEnabled = notificationEnabled;
        this.notificationTriggers = notificationTriggers;
        this.state = state;
        this.threshold = threshold;
        this.treatMissingData = treatMissingData;
    }

    public Optional<String> getAlarmArn() {
        return Optional.ofNullable(this.alarmArn);
    }
    /**
     * The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
    */
    public Optional<String> getComparisonOperator() {
        return Optional.ofNullable(this.comparisonOperator);
    }
    /**
     * The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
    */
    public List<String> getContactProtocols() {
        return this.contactProtocols == null ? List.of() : this.contactProtocols;
    }
    /**
     * The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
     * 
    */
    public Optional<Integer> getDatapointsToAlarm() {
        return Optional.ofNullable(this.datapointsToAlarm);
    }
    /**
     * The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
     * 
    */
    public Optional<Integer> getEvaluationPeriods() {
        return Optional.ofNullable(this.evaluationPeriods);
    }
    /**
     * Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
     * 
    */
    public Optional<Boolean> getNotificationEnabled() {
        return Optional.ofNullable(this.notificationEnabled);
    }
    /**
     * The alarm states that trigger a notification.
     * 
    */
    public List<String> getNotificationTriggers() {
        return this.notificationTriggers == null ? List.of() : this.notificationTriggers;
    }
    /**
     * The current state of the alarm.
     * 
    */
    public Optional<String> getState() {
        return Optional.ofNullable(this.state);
    }
    /**
     * The value against which the specified statistic is compared.
     * 
    */
    public Optional<Double> getThreshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * Sets how this alarm will handle missing data points.
     * 
    */
    public Optional<String> getTreatMissingData() {
        return Optional.ofNullable(this.treatMissingData);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlarmResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String alarmArn;
        private @Nullable String comparisonOperator;
        private @Nullable List<String> contactProtocols;
        private @Nullable Integer datapointsToAlarm;
        private @Nullable Integer evaluationPeriods;
        private @Nullable Boolean notificationEnabled;
        private @Nullable List<String> notificationTriggers;
        private @Nullable String state;
        private @Nullable Double threshold;
        private @Nullable String treatMissingData;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAlarmResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarmArn = defaults.alarmArn;
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.contactProtocols = defaults.contactProtocols;
    	      this.datapointsToAlarm = defaults.datapointsToAlarm;
    	      this.evaluationPeriods = defaults.evaluationPeriods;
    	      this.notificationEnabled = defaults.notificationEnabled;
    	      this.notificationTriggers = defaults.notificationTriggers;
    	      this.state = defaults.state;
    	      this.threshold = defaults.threshold;
    	      this.treatMissingData = defaults.treatMissingData;
        }

        public Builder setAlarmArn(@Nullable String alarmArn) {
            this.alarmArn = alarmArn;
            return this;
        }

        public Builder setComparisonOperator(@Nullable String comparisonOperator) {
            this.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder setContactProtocols(@Nullable List<String> contactProtocols) {
            this.contactProtocols = contactProtocols;
            return this;
        }

        public Builder setDatapointsToAlarm(@Nullable Integer datapointsToAlarm) {
            this.datapointsToAlarm = datapointsToAlarm;
            return this;
        }

        public Builder setEvaluationPeriods(@Nullable Integer evaluationPeriods) {
            this.evaluationPeriods = evaluationPeriods;
            return this;
        }

        public Builder setNotificationEnabled(@Nullable Boolean notificationEnabled) {
            this.notificationEnabled = notificationEnabled;
            return this;
        }

        public Builder setNotificationTriggers(@Nullable List<String> notificationTriggers) {
            this.notificationTriggers = notificationTriggers;
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = state;
            return this;
        }

        public Builder setThreshold(@Nullable Double threshold) {
            this.threshold = threshold;
            return this;
        }

        public Builder setTreatMissingData(@Nullable String treatMissingData) {
            this.treatMissingData = treatMissingData;
            return this;
        }
        public GetAlarmResult build() {
            return new GetAlarmResult(alarmArn, comparisonOperator, contactProtocols, datapointsToAlarm, evaluationPeriods, notificationEnabled, notificationTriggers, state, threshold, treatMissingData);
        }
    }
}
