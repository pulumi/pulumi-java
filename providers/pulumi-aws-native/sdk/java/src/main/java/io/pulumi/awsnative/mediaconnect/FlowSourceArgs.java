// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.mediaconnect;

import io.pulumi.awsnative.mediaconnect.enums.FlowSourceProtocol;
import io.pulumi.awsnative.mediaconnect.inputs.FlowSourceEncryptionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlowSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final FlowSourceArgs Empty = new FlowSourceArgs();

    /**
     * The type of encryption that is used on the content ingested from this source.
     * 
     */
    @Import(name="decryption")
      private final @Nullable Output<FlowSourceEncryptionArgs> decryption;

    public Output<FlowSourceEncryptionArgs> getDecryption() {
        return this.decryption == null ? Output.empty() : this.decryption;
    }

    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    @Import(name="description", required=true)
      private final Output<String> description;

    public Output<String> getDescription() {
        return this.description;
    }

    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
     * 
     */
    @Import(name="entitlementArn")
      private final @Nullable Output<String> entitlementArn;

    public Output<String> getEntitlementArn() {
        return this.entitlementArn == null ? Output.empty() : this.entitlementArn;
    }

    /**
     * The ARN of the flow.
     * 
     */
    @Import(name="flowArn")
      private final @Nullable Output<String> flowArn;

    public Output<String> getFlowArn() {
        return this.flowArn == null ? Output.empty() : this.flowArn;
    }

    /**
     * The port that the flow will be listening on for incoming content.
     * 
     */
    @Import(name="ingestPort")
      private final @Nullable Output<Integer> ingestPort;

    public Output<Integer> getIngestPort() {
        return this.ingestPort == null ? Output.empty() : this.ingestPort;
    }

    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    @Import(name="maxBitrate")
      private final @Nullable Output<Integer> maxBitrate;

    public Output<Integer> getMaxBitrate() {
        return this.maxBitrate == null ? Output.empty() : this.maxBitrate;
    }

    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    @Import(name="maxLatency")
      private final @Nullable Output<Integer> maxLatency;

    public Output<Integer> getMaxLatency() {
        return this.maxLatency == null ? Output.empty() : this.maxLatency;
    }

    /**
     * The name of the source.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The protocol that is used by the source.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<FlowSourceProtocol> protocol;

    public Output<FlowSourceProtocol> getProtocol() {
        return this.protocol == null ? Output.empty() : this.protocol;
    }

    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    @Import(name="streamId")
      private final @Nullable Output<String> streamId;

    public Output<String> getStreamId() {
        return this.streamId == null ? Output.empty() : this.streamId;
    }

    /**
     * The name of the VPC Interface this Source is configured with.
     * 
     */
    @Import(name="vpcInterfaceName")
      private final @Nullable Output<String> vpcInterfaceName;

    public Output<String> getVpcInterfaceName() {
        return this.vpcInterfaceName == null ? Output.empty() : this.vpcInterfaceName;
    }

    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    @Import(name="whitelistCidr")
      private final @Nullable Output<String> whitelistCidr;

    public Output<String> getWhitelistCidr() {
        return this.whitelistCidr == null ? Output.empty() : this.whitelistCidr;
    }

    public FlowSourceArgs(
        @Nullable Output<FlowSourceEncryptionArgs> decryption,
        Output<String> description,
        @Nullable Output<String> entitlementArn,
        @Nullable Output<String> flowArn,
        @Nullable Output<Integer> ingestPort,
        @Nullable Output<Integer> maxBitrate,
        @Nullable Output<Integer> maxLatency,
        @Nullable Output<String> name,
        @Nullable Output<FlowSourceProtocol> protocol,
        @Nullable Output<String> streamId,
        @Nullable Output<String> vpcInterfaceName,
        @Nullable Output<String> whitelistCidr) {
        this.decryption = decryption;
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.entitlementArn = entitlementArn;
        this.flowArn = flowArn;
        this.ingestPort = ingestPort;
        this.maxBitrate = maxBitrate;
        this.maxLatency = maxLatency;
        this.name = name;
        this.protocol = protocol;
        this.streamId = streamId;
        this.vpcInterfaceName = vpcInterfaceName;
        this.whitelistCidr = whitelistCidr;
    }

    private FlowSourceArgs() {
        this.decryption = Output.empty();
        this.description = Output.empty();
        this.entitlementArn = Output.empty();
        this.flowArn = Output.empty();
        this.ingestPort = Output.empty();
        this.maxBitrate = Output.empty();
        this.maxLatency = Output.empty();
        this.name = Output.empty();
        this.protocol = Output.empty();
        this.streamId = Output.empty();
        this.vpcInterfaceName = Output.empty();
        this.whitelistCidr = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FlowSourceEncryptionArgs> decryption;
        private Output<String> description;
        private @Nullable Output<String> entitlementArn;
        private @Nullable Output<String> flowArn;
        private @Nullable Output<Integer> ingestPort;
        private @Nullable Output<Integer> maxBitrate;
        private @Nullable Output<Integer> maxLatency;
        private @Nullable Output<String> name;
        private @Nullable Output<FlowSourceProtocol> protocol;
        private @Nullable Output<String> streamId;
        private @Nullable Output<String> vpcInterfaceName;
        private @Nullable Output<String> whitelistCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decryption = defaults.decryption;
    	      this.description = defaults.description;
    	      this.entitlementArn = defaults.entitlementArn;
    	      this.flowArn = defaults.flowArn;
    	      this.ingestPort = defaults.ingestPort;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.maxLatency = defaults.maxLatency;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.streamId = defaults.streamId;
    	      this.vpcInterfaceName = defaults.vpcInterfaceName;
    	      this.whitelistCidr = defaults.whitelistCidr;
        }

        public Builder decryption(@Nullable Output<FlowSourceEncryptionArgs> decryption) {
            this.decryption = decryption;
            return this;
        }

        public Builder decryption(@Nullable FlowSourceEncryptionArgs decryption) {
            this.decryption = Output.ofNullable(decryption);
            return this;
        }

        public Builder description(Output<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder description(String description) {
            this.description = Output.of(Objects.requireNonNull(description));
            return this;
        }

        public Builder entitlementArn(@Nullable Output<String> entitlementArn) {
            this.entitlementArn = entitlementArn;
            return this;
        }

        public Builder entitlementArn(@Nullable String entitlementArn) {
            this.entitlementArn = Output.ofNullable(entitlementArn);
            return this;
        }

        public Builder flowArn(@Nullable Output<String> flowArn) {
            this.flowArn = flowArn;
            return this;
        }

        public Builder flowArn(@Nullable String flowArn) {
            this.flowArn = Output.ofNullable(flowArn);
            return this;
        }

        public Builder ingestPort(@Nullable Output<Integer> ingestPort) {
            this.ingestPort = ingestPort;
            return this;
        }

        public Builder ingestPort(@Nullable Integer ingestPort) {
            this.ingestPort = Output.ofNullable(ingestPort);
            return this;
        }

        public Builder maxBitrate(@Nullable Output<Integer> maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }

        public Builder maxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = Output.ofNullable(maxBitrate);
            return this;
        }

        public Builder maxLatency(@Nullable Output<Integer> maxLatency) {
            this.maxLatency = maxLatency;
            return this;
        }

        public Builder maxLatency(@Nullable Integer maxLatency) {
            this.maxLatency = Output.ofNullable(maxLatency);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder protocol(@Nullable Output<FlowSourceProtocol> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder protocol(@Nullable FlowSourceProtocol protocol) {
            this.protocol = Output.ofNullable(protocol);
            return this;
        }

        public Builder streamId(@Nullable Output<String> streamId) {
            this.streamId = streamId;
            return this;
        }

        public Builder streamId(@Nullable String streamId) {
            this.streamId = Output.ofNullable(streamId);
            return this;
        }

        public Builder vpcInterfaceName(@Nullable Output<String> vpcInterfaceName) {
            this.vpcInterfaceName = vpcInterfaceName;
            return this;
        }

        public Builder vpcInterfaceName(@Nullable String vpcInterfaceName) {
            this.vpcInterfaceName = Output.ofNullable(vpcInterfaceName);
            return this;
        }

        public Builder whitelistCidr(@Nullable Output<String> whitelistCidr) {
            this.whitelistCidr = whitelistCidr;
            return this;
        }

        public Builder whitelistCidr(@Nullable String whitelistCidr) {
            this.whitelistCidr = Output.ofNullable(whitelistCidr);
            return this;
        }
        public FlowSourceArgs build() {
            return new FlowSourceArgs(decryption, description, entitlementArn, flowArn, ingestPort, maxBitrate, maxLatency, name, protocol, streamId, vpcInterfaceName, whitelistCidr);
        }
    }
}
