// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation;

import io.pulumi.awsnative.cloudformation.inputs.HookVersionLoggingConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HookVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final HookVersionArgs Empty = new HookVersionArgs();

    /**
     * The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
     * 
     */
    @InputImport(name="executionRoleArn")
        private final @Nullable Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn == null ? Input.empty() : this.executionRoleArn;
    }

    /**
     * Specifies logging configuration information for a type.
     * 
     */
    @InputImport(name="loggingConfig")
        private final @Nullable Input<HookVersionLoggingConfigArgs> loggingConfig;

    public Input<HookVersionLoggingConfigArgs> getLoggingConfig() {
        return this.loggingConfig == null ? Input.empty() : this.loggingConfig;
    }

    /**
     * A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated files for the type you want to register.
     * 
     * For information on generating a schema handler package for the type you want to register, see submit in the CloudFormation CLI User Guide.
     * 
     */
    @InputImport(name="schemaHandlerPackage", required=true)
        private final Input<String> schemaHandlerPackage;

    public Input<String> getSchemaHandlerPackage() {
        return this.schemaHandlerPackage;
    }

    /**
     * The name of the type being registered.
     * 
     * We recommend that type names adhere to the following pattern: company_or_organization::service::type.
     * 
     */
    @InputImport(name="typeName", required=true)
        private final Input<String> typeName;

    public Input<String> getTypeName() {
        return this.typeName;
    }

    public HookVersionArgs(
        @Nullable Input<String> executionRoleArn,
        @Nullable Input<HookVersionLoggingConfigArgs> loggingConfig,
        Input<String> schemaHandlerPackage,
        Input<String> typeName) {
        this.executionRoleArn = executionRoleArn;
        this.loggingConfig = loggingConfig;
        this.schemaHandlerPackage = Objects.requireNonNull(schemaHandlerPackage, "expected parameter 'schemaHandlerPackage' to be non-null");
        this.typeName = Objects.requireNonNull(typeName, "expected parameter 'typeName' to be non-null");
    }

    private HookVersionArgs() {
        this.executionRoleArn = Input.empty();
        this.loggingConfig = Input.empty();
        this.schemaHandlerPackage = Input.empty();
        this.typeName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HookVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> executionRoleArn;
        private @Nullable Input<HookVersionLoggingConfigArgs> loggingConfig;
        private Input<String> schemaHandlerPackage;
        private Input<String> typeName;

        public Builder() {
    	      // Empty
        }

        public Builder(HookVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.loggingConfig = defaults.loggingConfig;
    	      this.schemaHandlerPackage = defaults.schemaHandlerPackage;
    	      this.typeName = defaults.typeName;
        }

        public Builder setExecutionRoleArn(@Nullable Input<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder setExecutionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Input.ofNullable(executionRoleArn);
            return this;
        }

        public Builder setLoggingConfig(@Nullable Input<HookVersionLoggingConfigArgs> loggingConfig) {
            this.loggingConfig = loggingConfig;
            return this;
        }

        public Builder setLoggingConfig(@Nullable HookVersionLoggingConfigArgs loggingConfig) {
            this.loggingConfig = Input.ofNullable(loggingConfig);
            return this;
        }

        public Builder setSchemaHandlerPackage(Input<String> schemaHandlerPackage) {
            this.schemaHandlerPackage = Objects.requireNonNull(schemaHandlerPackage);
            return this;
        }

        public Builder setSchemaHandlerPackage(String schemaHandlerPackage) {
            this.schemaHandlerPackage = Input.of(Objects.requireNonNull(schemaHandlerPackage));
            return this;
        }

        public Builder setTypeName(Input<String> typeName) {
            this.typeName = Objects.requireNonNull(typeName);
            return this;
        }

        public Builder setTypeName(String typeName) {
            this.typeName = Input.of(Objects.requireNonNull(typeName));
            return this;
        }
        public HookVersionArgs build() {
            return new HookVersionArgs(executionRoleArn, loggingConfig, schemaHandlerPackage, typeName);
        }
    }
}
