// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.accessanalyzer.inputs;

import io.pulumi.awsnative.accessanalyzer.inputs.AnalyzerFilterArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
 * 
 */
public final class AnalyzerArchiveRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnalyzerArchiveRuleArgs Empty = new AnalyzerArchiveRuleArgs();

    @InputImport(name="filter", required=true)
    private final Input<List<AnalyzerFilterArgs>> filter;

    public Input<List<AnalyzerFilterArgs>> getFilter() {
        return this.filter;
    }

    /**
     * The archive rule name
     * 
     */
    @InputImport(name="ruleName", required=true)
    private final Input<String> ruleName;

    public Input<String> getRuleName() {
        return this.ruleName;
    }

    public AnalyzerArchiveRuleArgs(
        Input<List<AnalyzerFilterArgs>> filter,
        Input<String> ruleName) {
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.ruleName = Objects.requireNonNull(ruleName, "expected parameter 'ruleName' to be non-null");
    }

    private AnalyzerArchiveRuleArgs() {
        this.filter = Input.empty();
        this.ruleName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyzerArchiveRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<AnalyzerFilterArgs>> filter;
        private Input<String> ruleName;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyzerArchiveRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.ruleName = defaults.ruleName;
        }

        public Builder setFilter(Input<List<AnalyzerFilterArgs>> filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder setFilter(List<AnalyzerFilterArgs> filter) {
            this.filter = Input.of(Objects.requireNonNull(filter));
            return this;
        }

        public Builder setRuleName(Input<String> ruleName) {
            this.ruleName = Objects.requireNonNull(ruleName);
            return this;
        }

        public Builder setRuleName(String ruleName) {
            this.ruleName = Input.of(Objects.requireNonNull(ruleName));
            return this;
        }

        public AnalyzerArchiveRuleArgs build() {
            return new AnalyzerArchiveRuleArgs(filter, ruleName);
        }
    }
}
