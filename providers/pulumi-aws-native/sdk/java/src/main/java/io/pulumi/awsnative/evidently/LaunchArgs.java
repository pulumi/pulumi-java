// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.evidently;

import io.pulumi.awsnative.evidently.inputs.LaunchGroupObjectArgs;
import io.pulumi.awsnative.evidently.inputs.LaunchMetricDefinitionObjectArgs;
import io.pulumi.awsnative.evidently.inputs.LaunchStepConfigArgs;
import io.pulumi.awsnative.evidently.inputs.LaunchTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LaunchArgs extends io.pulumi.resources.ResourceArgs {

    public static final LaunchArgs Empty = new LaunchArgs();

    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    @Import(name="groups", required=true)
      private final Output<List<LaunchGroupObjectArgs>> groups;

    public Output<List<LaunchGroupObjectArgs>> getGroups() {
        return this.groups;
    }

    @Import(name="metricMonitors")
      private final @Nullable Output<List<LaunchMetricDefinitionObjectArgs>> metricMonitors;

    public Output<List<LaunchMetricDefinitionObjectArgs>> getMetricMonitors() {
        return this.metricMonitors == null ? Codegen.empty() : this.metricMonitors;
    }

    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project", required=true)
      private final Output<String> project;

    public Output<String> getProject() {
        return this.project;
    }

    @Import(name="randomizationSalt")
      private final @Nullable Output<String> randomizationSalt;

    public Output<String> getRandomizationSalt() {
        return this.randomizationSalt == null ? Codegen.empty() : this.randomizationSalt;
    }

    @Import(name="scheduledSplitsConfig", required=true)
      private final Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig;

    public Output<List<LaunchStepConfigArgs>> getScheduledSplitsConfig() {
        return this.scheduledSplitsConfig;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<LaunchTagArgs>> tags;

    public Output<List<LaunchTagArgs>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public LaunchArgs(
        @Nullable Output<String> description,
        Output<List<LaunchGroupObjectArgs>> groups,
        @Nullable Output<List<LaunchMetricDefinitionObjectArgs>> metricMonitors,
        @Nullable Output<String> name,
        Output<String> project,
        @Nullable Output<String> randomizationSalt,
        Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig,
        @Nullable Output<List<LaunchTagArgs>> tags) {
        this.description = description;
        this.groups = Objects.requireNonNull(groups, "expected parameter 'groups' to be non-null");
        this.metricMonitors = metricMonitors;
        this.name = name;
        this.project = Objects.requireNonNull(project, "expected parameter 'project' to be non-null");
        this.randomizationSalt = randomizationSalt;
        this.scheduledSplitsConfig = Objects.requireNonNull(scheduledSplitsConfig, "expected parameter 'scheduledSplitsConfig' to be non-null");
        this.tags = tags;
    }

    private LaunchArgs() {
        this.description = Codegen.empty();
        this.groups = Codegen.empty();
        this.metricMonitors = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.randomizationSalt = Codegen.empty();
        this.scheduledSplitsConfig = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LaunchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<List<LaunchGroupObjectArgs>> groups;
        private @Nullable Output<List<LaunchMetricDefinitionObjectArgs>> metricMonitors;
        private @Nullable Output<String> name;
        private Output<String> project;
        private @Nullable Output<String> randomizationSalt;
        private Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig;
        private @Nullable Output<List<LaunchTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LaunchArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.groups = defaults.groups;
    	      this.metricMonitors = defaults.metricMonitors;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.randomizationSalt = defaults.randomizationSalt;
    	      this.scheduledSplitsConfig = defaults.scheduledSplitsConfig;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder groups(Output<List<LaunchGroupObjectArgs>> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(List<LaunchGroupObjectArgs> groups) {
            this.groups = Output.of(Objects.requireNonNull(groups));
            return this;
        }
        public Builder groups(LaunchGroupObjectArgs... groups) {
            return groups(List.of(groups));
        }
        public Builder metricMonitors(@Nullable Output<List<LaunchMetricDefinitionObjectArgs>> metricMonitors) {
            this.metricMonitors = metricMonitors;
            return this;
        }
        public Builder metricMonitors(@Nullable List<LaunchMetricDefinitionObjectArgs> metricMonitors) {
            this.metricMonitors = Codegen.ofNullable(metricMonitors);
            return this;
        }
        public Builder metricMonitors(LaunchMetricDefinitionObjectArgs... metricMonitors) {
            return metricMonitors(List.of(metricMonitors));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(Output<String> project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        public Builder project(String project) {
            this.project = Output.of(Objects.requireNonNull(project));
            return this;
        }
        public Builder randomizationSalt(@Nullable Output<String> randomizationSalt) {
            this.randomizationSalt = randomizationSalt;
            return this;
        }
        public Builder randomizationSalt(@Nullable String randomizationSalt) {
            this.randomizationSalt = Codegen.ofNullable(randomizationSalt);
            return this;
        }
        public Builder scheduledSplitsConfig(Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig) {
            this.scheduledSplitsConfig = Objects.requireNonNull(scheduledSplitsConfig);
            return this;
        }
        public Builder scheduledSplitsConfig(List<LaunchStepConfigArgs> scheduledSplitsConfig) {
            this.scheduledSplitsConfig = Output.of(Objects.requireNonNull(scheduledSplitsConfig));
            return this;
        }
        public Builder scheduledSplitsConfig(LaunchStepConfigArgs... scheduledSplitsConfig) {
            return scheduledSplitsConfig(List.of(scheduledSplitsConfig));
        }
        public Builder tags(@Nullable Output<List<LaunchTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<LaunchTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(LaunchTagArgs... tags) {
            return tags(List.of(tags));
        }        public LaunchArgs build() {
            return new LaunchArgs(description, groups, metricMonitors, name, project, randomizationSalt, scheduledSplitsConfig, tags);
        }
    }
}
