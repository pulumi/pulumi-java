// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.datasync;

import io.pulumi.awsnative.datasync.inputs.LocationSMBMountOptionsArgs;
import io.pulumi.awsnative.datasync.inputs.LocationSMBTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocationSMBArgs extends io.pulumi.resources.ResourceArgs {

    public static final LocationSMBArgs Empty = new LocationSMBArgs();

    @InputImport(name="agentArns", required=true)
    private final Input<List<String>> agentArns;

    public Input<List<String>> getAgentArns() {
        return this.agentArns;
    }

    @InputImport(name="domain")
    private final @Nullable Input<String> domain;

    public Input<String> getDomain() {
        return this.domain == null ? Input.empty() : this.domain;
    }

    @InputImport(name="mountOptions")
    private final @Nullable Input<LocationSMBMountOptionsArgs> mountOptions;

    public Input<LocationSMBMountOptionsArgs> getMountOptions() {
        return this.mountOptions == null ? Input.empty() : this.mountOptions;
    }

    @InputImport(name="password", required=true)
    private final Input<String> password;

    public Input<String> getPassword() {
        return this.password;
    }

    @InputImport(name="serverHostname", required=true)
    private final Input<String> serverHostname;

    public Input<String> getServerHostname() {
        return this.serverHostname;
    }

    @InputImport(name="subdirectory", required=true)
    private final Input<String> subdirectory;

    public Input<String> getSubdirectory() {
        return this.subdirectory;
    }

    @InputImport(name="tags")
    private final @Nullable Input<List<LocationSMBTagArgs>> tags;

    public Input<List<LocationSMBTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="user", required=true)
    private final Input<String> user;

    public Input<String> getUser() {
        return this.user;
    }

    public LocationSMBArgs(
        Input<List<String>> agentArns,
        @Nullable Input<String> domain,
        @Nullable Input<LocationSMBMountOptionsArgs> mountOptions,
        Input<String> password,
        Input<String> serverHostname,
        Input<String> subdirectory,
        @Nullable Input<List<LocationSMBTagArgs>> tags,
        Input<String> user) {
        this.agentArns = Objects.requireNonNull(agentArns, "expected parameter 'agentArns' to be non-null");
        this.domain = domain;
        this.mountOptions = mountOptions;
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.serverHostname = Objects.requireNonNull(serverHostname, "expected parameter 'serverHostname' to be non-null");
        this.subdirectory = Objects.requireNonNull(subdirectory, "expected parameter 'subdirectory' to be non-null");
        this.tags = tags;
        this.user = Objects.requireNonNull(user, "expected parameter 'user' to be non-null");
    }

    private LocationSMBArgs() {
        this.agentArns = Input.empty();
        this.domain = Input.empty();
        this.mountOptions = Input.empty();
        this.password = Input.empty();
        this.serverHostname = Input.empty();
        this.subdirectory = Input.empty();
        this.tags = Input.empty();
        this.user = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationSMBArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> agentArns;
        private @Nullable Input<String> domain;
        private @Nullable Input<LocationSMBMountOptionsArgs> mountOptions;
        private Input<String> password;
        private Input<String> serverHostname;
        private Input<String> subdirectory;
        private @Nullable Input<List<LocationSMBTagArgs>> tags;
        private Input<String> user;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationSMBArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentArns = defaults.agentArns;
    	      this.domain = defaults.domain;
    	      this.mountOptions = defaults.mountOptions;
    	      this.password = defaults.password;
    	      this.serverHostname = defaults.serverHostname;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
    	      this.user = defaults.user;
        }

        public Builder setAgentArns(Input<List<String>> agentArns) {
            this.agentArns = Objects.requireNonNull(agentArns);
            return this;
        }

        public Builder setAgentArns(List<String> agentArns) {
            this.agentArns = Input.of(Objects.requireNonNull(agentArns));
            return this;
        }

        public Builder setDomain(@Nullable Input<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder setDomain(@Nullable String domain) {
            this.domain = Input.ofNullable(domain);
            return this;
        }

        public Builder setMountOptions(@Nullable Input<LocationSMBMountOptionsArgs> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }

        public Builder setMountOptions(@Nullable LocationSMBMountOptionsArgs mountOptions) {
            this.mountOptions = Input.ofNullable(mountOptions);
            return this;
        }

        public Builder setPassword(Input<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder setPassword(String password) {
            this.password = Input.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder setServerHostname(Input<String> serverHostname) {
            this.serverHostname = Objects.requireNonNull(serverHostname);
            return this;
        }

        public Builder setServerHostname(String serverHostname) {
            this.serverHostname = Input.of(Objects.requireNonNull(serverHostname));
            return this;
        }

        public Builder setSubdirectory(Input<String> subdirectory) {
            this.subdirectory = Objects.requireNonNull(subdirectory);
            return this;
        }

        public Builder setSubdirectory(String subdirectory) {
            this.subdirectory = Input.of(Objects.requireNonNull(subdirectory));
            return this;
        }

        public Builder setTags(@Nullable Input<List<LocationSMBTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<LocationSMBTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setUser(Input<String> user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }

        public Builder setUser(String user) {
            this.user = Input.of(Objects.requireNonNull(user));
            return this;
        }

        public LocationSMBArgs build() {
            return new LocationSMBArgs(agentArns, domain, mountOptions, password, serverHostname, subdirectory, tags, user);
        }
    }
}
