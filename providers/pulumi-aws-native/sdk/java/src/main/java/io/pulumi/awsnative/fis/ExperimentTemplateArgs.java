// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.fis;

import io.pulumi.awsnative.fis.inputs.ExperimentTemplateActionMapArgs;
import io.pulumi.awsnative.fis.inputs.ExperimentTemplateStopConditionArgs;
import io.pulumi.awsnative.fis.inputs.ExperimentTemplateTargetMapArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExperimentTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExperimentTemplateArgs Empty = new ExperimentTemplateArgs();

    @Import(name="actions")
      private final @Nullable Output<ExperimentTemplateActionMapArgs> actions;

    public Output<ExperimentTemplateActionMapArgs> getActions() {
        return this.actions == null ? Codegen.empty() : this.actions;
    }

    @Import(name="description", required=true)
      private final Output<String> description;

    public Output<String> getDescription() {
        return this.description;
    }

    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    @Import(name="stopConditions", required=true)
      private final Output<List<ExperimentTemplateStopConditionArgs>> stopConditions;

    public Output<List<ExperimentTemplateStopConditionArgs>> getStopConditions() {
        return this.stopConditions;
    }

    @Import(name="tags", required=true)
      private final Output<Object> tags;

    public Output<Object> getTags() {
        return this.tags;
    }

    @Import(name="targets", required=true)
      private final Output<ExperimentTemplateTargetMapArgs> targets;

    public Output<ExperimentTemplateTargetMapArgs> getTargets() {
        return this.targets;
    }

    public ExperimentTemplateArgs(
        @Nullable Output<ExperimentTemplateActionMapArgs> actions,
        Output<String> description,
        Output<String> roleArn,
        Output<List<ExperimentTemplateStopConditionArgs>> stopConditions,
        Output<Object> tags,
        Output<ExperimentTemplateTargetMapArgs> targets) {
        this.actions = actions;
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.stopConditions = Objects.requireNonNull(stopConditions, "expected parameter 'stopConditions' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.targets = Objects.requireNonNull(targets, "expected parameter 'targets' to be non-null");
    }

    private ExperimentTemplateArgs() {
        this.actions = Codegen.empty();
        this.description = Codegen.empty();
        this.roleArn = Codegen.empty();
        this.stopConditions = Codegen.empty();
        this.tags = Codegen.empty();
        this.targets = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExperimentTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ExperimentTemplateActionMapArgs> actions;
        private Output<String> description;
        private Output<String> roleArn;
        private Output<List<ExperimentTemplateStopConditionArgs>> stopConditions;
        private Output<Object> tags;
        private Output<ExperimentTemplateTargetMapArgs> targets;

        public Builder() {
    	      // Empty
        }

        public Builder(ExperimentTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.description = defaults.description;
    	      this.roleArn = defaults.roleArn;
    	      this.stopConditions = defaults.stopConditions;
    	      this.tags = defaults.tags;
    	      this.targets = defaults.targets;
        }

        public Builder actions(@Nullable Output<ExperimentTemplateActionMapArgs> actions) {
            this.actions = actions;
            return this;
        }
        public Builder actions(@Nullable ExperimentTemplateActionMapArgs actions) {
            this.actions = Codegen.ofNullable(actions);
            return this;
        }
        public Builder description(Output<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder description(String description) {
            this.description = Output.of(Objects.requireNonNull(description));
            return this;
        }
        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public Builder stopConditions(Output<List<ExperimentTemplateStopConditionArgs>> stopConditions) {
            this.stopConditions = Objects.requireNonNull(stopConditions);
            return this;
        }
        public Builder stopConditions(List<ExperimentTemplateStopConditionArgs> stopConditions) {
            this.stopConditions = Output.of(Objects.requireNonNull(stopConditions));
            return this;
        }
        public Builder stopConditions(ExperimentTemplateStopConditionArgs... stopConditions) {
            return stopConditions(List.of(stopConditions));
        }
        public Builder tags(Output<Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(Object tags) {
            this.tags = Output.of(Objects.requireNonNull(tags));
            return this;
        }
        public Builder targets(Output<ExperimentTemplateTargetMapArgs> targets) {
            this.targets = Objects.requireNonNull(targets);
            return this;
        }
        public Builder targets(ExperimentTemplateTargetMapArgs targets) {
            this.targets = Output.of(Objects.requireNonNull(targets));
            return this;
        }        public ExperimentTemplateArgs build() {
            return new ExperimentTemplateArgs(actions, description, roleArn, stopConditions, tags, targets);
        }
    }
}
