// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.mediaconnect.outputs;

import io.pulumi.awsnative.mediaconnect.enums.FlowSourceProtocol;
import io.pulumi.awsnative.mediaconnect.outputs.FlowSourceEncryption;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetFlowSourceResult {
    /**
     * The type of encryption that is used on the content ingested from this source.
     * 
     */
    private final @Nullable FlowSourceEncryption decryption;
    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    private final @Nullable String description;
    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
     * 
     */
    private final @Nullable String entitlementArn;
    /**
     * The ARN of the flow.
     * 
     */
    private final @Nullable String flowArn;
    /**
     * The IP address that the flow will be listening on for incoming content.
     * 
     */
    private final @Nullable String ingestIp;
    /**
     * The port that the flow will be listening on for incoming content.
     * 
     */
    private final @Nullable Integer ingestPort;
    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    private final @Nullable Integer maxBitrate;
    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    private final @Nullable Integer maxLatency;
    /**
     * The protocol that is used by the source.
     * 
     */
    private final @Nullable FlowSourceProtocol protocol;
    /**
     * The ARN of the source.
     * 
     */
    private final @Nullable String sourceArn;
    /**
     * The port that the flow will be listening on for incoming content.(ReadOnly)
     * 
     */
    private final @Nullable String sourceIngestPort;
    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    private final @Nullable String streamId;
    /**
     * The name of the VPC Interface this Source is configured with.
     * 
     */
    private final @Nullable String vpcInterfaceName;
    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    private final @Nullable String whitelistCidr;

    @OutputCustomType.Constructor({"decryption","description","entitlementArn","flowArn","ingestIp","ingestPort","maxBitrate","maxLatency","protocol","sourceArn","sourceIngestPort","streamId","vpcInterfaceName","whitelistCidr"})
    private GetFlowSourceResult(
        @Nullable FlowSourceEncryption decryption,
        @Nullable String description,
        @Nullable String entitlementArn,
        @Nullable String flowArn,
        @Nullable String ingestIp,
        @Nullable Integer ingestPort,
        @Nullable Integer maxBitrate,
        @Nullable Integer maxLatency,
        @Nullable FlowSourceProtocol protocol,
        @Nullable String sourceArn,
        @Nullable String sourceIngestPort,
        @Nullable String streamId,
        @Nullable String vpcInterfaceName,
        @Nullable String whitelistCidr) {
        this.decryption = decryption;
        this.description = description;
        this.entitlementArn = entitlementArn;
        this.flowArn = flowArn;
        this.ingestIp = ingestIp;
        this.ingestPort = ingestPort;
        this.maxBitrate = maxBitrate;
        this.maxLatency = maxLatency;
        this.protocol = protocol;
        this.sourceArn = sourceArn;
        this.sourceIngestPort = sourceIngestPort;
        this.streamId = streamId;
        this.vpcInterfaceName = vpcInterfaceName;
        this.whitelistCidr = whitelistCidr;
    }

    /**
     * The type of encryption that is used on the content ingested from this source.
     * 
     */
    public Optional<FlowSourceEncryption> getDecryption() {
        return Optional.ofNullable(this.decryption);
    }
    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
     * 
     */
    public Optional<String> getEntitlementArn() {
        return Optional.ofNullable(this.entitlementArn);
    }
    /**
     * The ARN of the flow.
     * 
     */
    public Optional<String> getFlowArn() {
        return Optional.ofNullable(this.flowArn);
    }
    /**
     * The IP address that the flow will be listening on for incoming content.
     * 
     */
    public Optional<String> getIngestIp() {
        return Optional.ofNullable(this.ingestIp);
    }
    /**
     * The port that the flow will be listening on for incoming content.
     * 
     */
    public Optional<Integer> getIngestPort() {
        return Optional.ofNullable(this.ingestPort);
    }
    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    public Optional<Integer> getMaxBitrate() {
        return Optional.ofNullable(this.maxBitrate);
    }
    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    public Optional<Integer> getMaxLatency() {
        return Optional.ofNullable(this.maxLatency);
    }
    /**
     * The protocol that is used by the source.
     * 
     */
    public Optional<FlowSourceProtocol> getProtocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * The ARN of the source.
     * 
     */
    public Optional<String> getSourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }
    /**
     * The port that the flow will be listening on for incoming content.(ReadOnly)
     * 
     */
    public Optional<String> getSourceIngestPort() {
        return Optional.ofNullable(this.sourceIngestPort);
    }
    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    public Optional<String> getStreamId() {
        return Optional.ofNullable(this.streamId);
    }
    /**
     * The name of the VPC Interface this Source is configured with.
     * 
     */
    public Optional<String> getVpcInterfaceName() {
        return Optional.ofNullable(this.vpcInterfaceName);
    }
    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    public Optional<String> getWhitelistCidr() {
        return Optional.ofNullable(this.whitelistCidr);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFlowSourceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable FlowSourceEncryption decryption;
        private @Nullable String description;
        private @Nullable String entitlementArn;
        private @Nullable String flowArn;
        private @Nullable String ingestIp;
        private @Nullable Integer ingestPort;
        private @Nullable Integer maxBitrate;
        private @Nullable Integer maxLatency;
        private @Nullable FlowSourceProtocol protocol;
        private @Nullable String sourceArn;
        private @Nullable String sourceIngestPort;
        private @Nullable String streamId;
        private @Nullable String vpcInterfaceName;
        private @Nullable String whitelistCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFlowSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decryption = defaults.decryption;
    	      this.description = defaults.description;
    	      this.entitlementArn = defaults.entitlementArn;
    	      this.flowArn = defaults.flowArn;
    	      this.ingestIp = defaults.ingestIp;
    	      this.ingestPort = defaults.ingestPort;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.maxLatency = defaults.maxLatency;
    	      this.protocol = defaults.protocol;
    	      this.sourceArn = defaults.sourceArn;
    	      this.sourceIngestPort = defaults.sourceIngestPort;
    	      this.streamId = defaults.streamId;
    	      this.vpcInterfaceName = defaults.vpcInterfaceName;
    	      this.whitelistCidr = defaults.whitelistCidr;
        }

        public Builder setDecryption(@Nullable FlowSourceEncryption decryption) {
            this.decryption = decryption;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setEntitlementArn(@Nullable String entitlementArn) {
            this.entitlementArn = entitlementArn;
            return this;
        }

        public Builder setFlowArn(@Nullable String flowArn) {
            this.flowArn = flowArn;
            return this;
        }

        public Builder setIngestIp(@Nullable String ingestIp) {
            this.ingestIp = ingestIp;
            return this;
        }

        public Builder setIngestPort(@Nullable Integer ingestPort) {
            this.ingestPort = ingestPort;
            return this;
        }

        public Builder setMaxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }

        public Builder setMaxLatency(@Nullable Integer maxLatency) {
            this.maxLatency = maxLatency;
            return this;
        }

        public Builder setProtocol(@Nullable FlowSourceProtocol protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setSourceArn(@Nullable String sourceArn) {
            this.sourceArn = sourceArn;
            return this;
        }

        public Builder setSourceIngestPort(@Nullable String sourceIngestPort) {
            this.sourceIngestPort = sourceIngestPort;
            return this;
        }

        public Builder setStreamId(@Nullable String streamId) {
            this.streamId = streamId;
            return this;
        }

        public Builder setVpcInterfaceName(@Nullable String vpcInterfaceName) {
            this.vpcInterfaceName = vpcInterfaceName;
            return this;
        }

        public Builder setWhitelistCidr(@Nullable String whitelistCidr) {
            this.whitelistCidr = whitelistCidr;
            return this;
        }

        public GetFlowSourceResult build() {
            return new GetFlowSourceResult(decryption, description, entitlementArn, flowArn, ingestIp, ingestPort, maxBitrate, maxLatency, protocol, sourceArn, sourceIngestPort, streamId, vpcInterfaceName, whitelistCidr);
        }
    }
}
