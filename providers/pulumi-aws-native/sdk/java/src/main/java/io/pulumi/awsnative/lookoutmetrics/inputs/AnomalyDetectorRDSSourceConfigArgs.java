// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lookoutmetrics.inputs;

import io.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorVpcConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AnomalyDetectorRDSSourceConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnomalyDetectorRDSSourceConfigArgs Empty = new AnomalyDetectorRDSSourceConfigArgs();

    @Import(name="dBInstanceIdentifier", required=true)
      private final Output<String> dBInstanceIdentifier;

    public Output<String> getDBInstanceIdentifier() {
        return this.dBInstanceIdentifier;
    }

    @Import(name="databaseHost", required=true)
      private final Output<String> databaseHost;

    public Output<String> getDatabaseHost() {
        return this.databaseHost;
    }

    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    @Import(name="databasePort", required=true)
      private final Output<Integer> databasePort;

    public Output<Integer> getDatabasePort() {
        return this.databasePort;
    }

    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    @Import(name="secretManagerArn", required=true)
      private final Output<String> secretManagerArn;

    public Output<String> getSecretManagerArn() {
        return this.secretManagerArn;
    }

    @Import(name="tableName", required=true)
      private final Output<String> tableName;

    public Output<String> getTableName() {
        return this.tableName;
    }

    @Import(name="vpcConfiguration", required=true)
      private final Output<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration;

    public Output<AnomalyDetectorVpcConfigurationArgs> getVpcConfiguration() {
        return this.vpcConfiguration;
    }

    public AnomalyDetectorRDSSourceConfigArgs(
        Output<String> dBInstanceIdentifier,
        Output<String> databaseHost,
        Output<String> databaseName,
        Output<Integer> databasePort,
        Output<String> roleArn,
        Output<String> secretManagerArn,
        Output<String> tableName,
        Output<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration) {
        this.dBInstanceIdentifier = Objects.requireNonNull(dBInstanceIdentifier, "expected parameter 'dBInstanceIdentifier' to be non-null");
        this.databaseHost = Objects.requireNonNull(databaseHost, "expected parameter 'databaseHost' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.databasePort = Objects.requireNonNull(databasePort, "expected parameter 'databasePort' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.secretManagerArn = Objects.requireNonNull(secretManagerArn, "expected parameter 'secretManagerArn' to be non-null");
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
        this.vpcConfiguration = Objects.requireNonNull(vpcConfiguration, "expected parameter 'vpcConfiguration' to be non-null");
    }

    private AnomalyDetectorRDSSourceConfigArgs() {
        this.dBInstanceIdentifier = Output.empty();
        this.databaseHost = Output.empty();
        this.databaseName = Output.empty();
        this.databasePort = Output.empty();
        this.roleArn = Output.empty();
        this.secretManagerArn = Output.empty();
        this.tableName = Output.empty();
        this.vpcConfiguration = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnomalyDetectorRDSSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> dBInstanceIdentifier;
        private Output<String> databaseHost;
        private Output<String> databaseName;
        private Output<Integer> databasePort;
        private Output<String> roleArn;
        private Output<String> secretManagerArn;
        private Output<String> tableName;
        private Output<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(AnomalyDetectorRDSSourceConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dBInstanceIdentifier = defaults.dBInstanceIdentifier;
    	      this.databaseHost = defaults.databaseHost;
    	      this.databaseName = defaults.databaseName;
    	      this.databasePort = defaults.databasePort;
    	      this.roleArn = defaults.roleArn;
    	      this.secretManagerArn = defaults.secretManagerArn;
    	      this.tableName = defaults.tableName;
    	      this.vpcConfiguration = defaults.vpcConfiguration;
        }

        public Builder dBInstanceIdentifier(Output<String> dBInstanceIdentifier) {
            this.dBInstanceIdentifier = Objects.requireNonNull(dBInstanceIdentifier);
            return this;
        }

        public Builder dBInstanceIdentifier(String dBInstanceIdentifier) {
            this.dBInstanceIdentifier = Output.of(Objects.requireNonNull(dBInstanceIdentifier));
            return this;
        }

        public Builder databaseHost(Output<String> databaseHost) {
            this.databaseHost = Objects.requireNonNull(databaseHost);
            return this;
        }

        public Builder databaseHost(String databaseHost) {
            this.databaseHost = Output.of(Objects.requireNonNull(databaseHost));
            return this;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder databasePort(Output<Integer> databasePort) {
            this.databasePort = Objects.requireNonNull(databasePort);
            return this;
        }

        public Builder databasePort(Integer databasePort) {
            this.databasePort = Output.of(Objects.requireNonNull(databasePort));
            return this;
        }

        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder secretManagerArn(Output<String> secretManagerArn) {
            this.secretManagerArn = Objects.requireNonNull(secretManagerArn);
            return this;
        }

        public Builder secretManagerArn(String secretManagerArn) {
            this.secretManagerArn = Output.of(Objects.requireNonNull(secretManagerArn));
            return this;
        }

        public Builder tableName(Output<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }

        public Builder tableName(String tableName) {
            this.tableName = Output.of(Objects.requireNonNull(tableName));
            return this;
        }

        public Builder vpcConfiguration(Output<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration) {
            this.vpcConfiguration = Objects.requireNonNull(vpcConfiguration);
            return this;
        }

        public Builder vpcConfiguration(AnomalyDetectorVpcConfigurationArgs vpcConfiguration) {
            this.vpcConfiguration = Output.of(Objects.requireNonNull(vpcConfiguration));
            return this;
        }
        public AnomalyDetectorRDSSourceConfigArgs build() {
            return new AnomalyDetectorRDSSourceConfigArgs(dBInstanceIdentifier, databaseHost, databaseName, databasePort, roleArn, secretManagerArn, tableName, vpcConfiguration);
        }
    }
}
