// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.xray.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SamplingRuleUpdateArgs extends io.pulumi.resources.ResourceArgs {

    public static final SamplingRuleUpdateArgs Empty = new SamplingRuleUpdateArgs();

    /**
     * Matches attributes derived from the request.
     * 
     */
    @InputImport(name="attributes")
    private final @Nullable Input<Object> attributes;

    public Input<Object> getAttributes() {
        return this.attributes == null ? Input.empty() : this.attributes;
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @InputImport(name="fixedRate")
    private final @Nullable Input<Double> fixedRate;

    public Input<Double> getFixedRate() {
        return this.fixedRate == null ? Input.empty() : this.fixedRate;
    }

    /**
     * Matches the HTTP method from a request URL.
     * 
     */
    @InputImport(name="hTTPMethod")
    private final @Nullable Input<String> hTTPMethod;

    public Input<String> getHTTPMethod() {
        return this.hTTPMethod == null ? Input.empty() : this.hTTPMethod;
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @InputImport(name="host")
    private final @Nullable Input<String> host;

    public Input<String> getHost() {
        return this.host == null ? Input.empty() : this.host;
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @InputImport(name="priority")
    private final @Nullable Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @InputImport(name="reservoirSize")
    private final @Nullable Input<Integer> reservoirSize;

    public Input<Integer> getReservoirSize() {
        return this.reservoirSize == null ? Input.empty() : this.reservoirSize;
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @InputImport(name="resourceARN")
    private final @Nullable Input<String> resourceARN;

    public Input<String> getResourceARN() {
        return this.resourceARN == null ? Input.empty() : this.resourceARN;
    }

    @InputImport(name="ruleARN")
    private final @Nullable Input<String> ruleARN;

    public Input<String> getRuleARN() {
        return this.ruleARN == null ? Input.empty() : this.ruleARN;
    }

    @InputImport(name="ruleName")
    private final @Nullable Input<String> ruleName;

    public Input<String> getRuleName() {
        return this.ruleName == null ? Input.empty() : this.ruleName;
    }

    /**
     * Matches the name that the service uses to identify itself in segments.
     * 
     */
    @InputImport(name="serviceName")
    private final @Nullable Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName == null ? Input.empty() : this.serviceName;
    }

    /**
     * Matches the origin that the service uses to identify its type in segments.
     * 
     */
    @InputImport(name="serviceType")
    private final @Nullable Input<String> serviceType;

    public Input<String> getServiceType() {
        return this.serviceType == null ? Input.empty() : this.serviceType;
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @InputImport(name="uRLPath")
    private final @Nullable Input<String> uRLPath;

    public Input<String> getURLPath() {
        return this.uRLPath == null ? Input.empty() : this.uRLPath;
    }

    public SamplingRuleUpdateArgs(
        @Nullable Input<Object> attributes,
        @Nullable Input<Double> fixedRate,
        @Nullable Input<String> hTTPMethod,
        @Nullable Input<String> host,
        @Nullable Input<Integer> priority,
        @Nullable Input<Integer> reservoirSize,
        @Nullable Input<String> resourceARN,
        @Nullable Input<String> ruleARN,
        @Nullable Input<String> ruleName,
        @Nullable Input<String> serviceName,
        @Nullable Input<String> serviceType,
        @Nullable Input<String> uRLPath) {
        this.attributes = attributes;
        this.fixedRate = fixedRate;
        this.hTTPMethod = hTTPMethod;
        this.host = host;
        this.priority = priority;
        this.reservoirSize = reservoirSize;
        this.resourceARN = resourceARN;
        this.ruleARN = ruleARN;
        this.ruleName = ruleName;
        this.serviceName = serviceName;
        this.serviceType = serviceType;
        this.uRLPath = uRLPath;
    }

    private SamplingRuleUpdateArgs() {
        this.attributes = Input.empty();
        this.fixedRate = Input.empty();
        this.hTTPMethod = Input.empty();
        this.host = Input.empty();
        this.priority = Input.empty();
        this.reservoirSize = Input.empty();
        this.resourceARN = Input.empty();
        this.ruleARN = Input.empty();
        this.ruleName = Input.empty();
        this.serviceName = Input.empty();
        this.serviceType = Input.empty();
        this.uRLPath = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SamplingRuleUpdateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Object> attributes;
        private @Nullable Input<Double> fixedRate;
        private @Nullable Input<String> hTTPMethod;
        private @Nullable Input<String> host;
        private @Nullable Input<Integer> priority;
        private @Nullable Input<Integer> reservoirSize;
        private @Nullable Input<String> resourceARN;
        private @Nullable Input<String> ruleARN;
        private @Nullable Input<String> ruleName;
        private @Nullable Input<String> serviceName;
        private @Nullable Input<String> serviceType;
        private @Nullable Input<String> uRLPath;

        public Builder() {
    	      // Empty
        }

        public Builder(SamplingRuleUpdateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.fixedRate = defaults.fixedRate;
    	      this.hTTPMethod = defaults.hTTPMethod;
    	      this.host = defaults.host;
    	      this.priority = defaults.priority;
    	      this.reservoirSize = defaults.reservoirSize;
    	      this.resourceARN = defaults.resourceARN;
    	      this.ruleARN = defaults.ruleARN;
    	      this.ruleName = defaults.ruleName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceType = defaults.serviceType;
    	      this.uRLPath = defaults.uRLPath;
        }

        public Builder setAttributes(@Nullable Input<Object> attributes) {
            this.attributes = attributes;
            return this;
        }

        public Builder setAttributes(@Nullable Object attributes) {
            this.attributes = Input.ofNullable(attributes);
            return this;
        }

        public Builder setFixedRate(@Nullable Input<Double> fixedRate) {
            this.fixedRate = fixedRate;
            return this;
        }

        public Builder setFixedRate(@Nullable Double fixedRate) {
            this.fixedRate = Input.ofNullable(fixedRate);
            return this;
        }

        public Builder setHTTPMethod(@Nullable Input<String> hTTPMethod) {
            this.hTTPMethod = hTTPMethod;
            return this;
        }

        public Builder setHTTPMethod(@Nullable String hTTPMethod) {
            this.hTTPMethod = Input.ofNullable(hTTPMethod);
            return this;
        }

        public Builder setHost(@Nullable Input<String> host) {
            this.host = host;
            return this;
        }

        public Builder setHost(@Nullable String host) {
            this.host = Input.ofNullable(host);
            return this;
        }

        public Builder setPriority(@Nullable Input<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder setPriority(@Nullable Integer priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder setReservoirSize(@Nullable Input<Integer> reservoirSize) {
            this.reservoirSize = reservoirSize;
            return this;
        }

        public Builder setReservoirSize(@Nullable Integer reservoirSize) {
            this.reservoirSize = Input.ofNullable(reservoirSize);
            return this;
        }

        public Builder setResourceARN(@Nullable Input<String> resourceARN) {
            this.resourceARN = resourceARN;
            return this;
        }

        public Builder setResourceARN(@Nullable String resourceARN) {
            this.resourceARN = Input.ofNullable(resourceARN);
            return this;
        }

        public Builder setRuleARN(@Nullable Input<String> ruleARN) {
            this.ruleARN = ruleARN;
            return this;
        }

        public Builder setRuleARN(@Nullable String ruleARN) {
            this.ruleARN = Input.ofNullable(ruleARN);
            return this;
        }

        public Builder setRuleName(@Nullable Input<String> ruleName) {
            this.ruleName = ruleName;
            return this;
        }

        public Builder setRuleName(@Nullable String ruleName) {
            this.ruleName = Input.ofNullable(ruleName);
            return this;
        }

        public Builder setServiceName(@Nullable Input<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }

        public Builder setServiceName(@Nullable String serviceName) {
            this.serviceName = Input.ofNullable(serviceName);
            return this;
        }

        public Builder setServiceType(@Nullable Input<String> serviceType) {
            this.serviceType = serviceType;
            return this;
        }

        public Builder setServiceType(@Nullable String serviceType) {
            this.serviceType = Input.ofNullable(serviceType);
            return this;
        }

        public Builder setURLPath(@Nullable Input<String> uRLPath) {
            this.uRLPath = uRLPath;
            return this;
        }

        public Builder setURLPath(@Nullable String uRLPath) {
            this.uRLPath = Input.ofNullable(uRLPath);
            return this;
        }

        public SamplingRuleUpdateArgs build() {
            return new SamplingRuleUpdateArgs(attributes, fixedRate, hTTPMethod, host, priority, reservoirSize, resourceARN, ruleARN, ruleName, serviceName, serviceType, uRLPath);
        }
    }
}
