// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lambda.outputs;

import io.pulumi.awsnative.lambda.enums.EventSourceMappingFunctionResponseTypesItem;
import io.pulumi.awsnative.lambda.outputs.EventSourceMappingDestinationConfig;
import io.pulumi.awsnative.lambda.outputs.EventSourceMappingSourceAccessConfiguration;
import io.pulumi.awsnative.lambda.outputs.FilterCriteriaProperties;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetEventSourceMappingResult {
    private final @Nullable Integer batchSize;
    private final @Nullable Boolean bisectBatchOnFunctionError;
    private final @Nullable EventSourceMappingDestinationConfig destinationConfig;
    private final @Nullable Boolean enabled;
    private final @Nullable FilterCriteriaProperties filterCriteria;
    private final @Nullable String functionName;
    private final @Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes;
    private final @Nullable String id;
    private final @Nullable Integer maximumBatchingWindowInSeconds;
    private final @Nullable Integer maximumRecordAgeInSeconds;
    private final @Nullable Integer maximumRetryAttempts;
    private final @Nullable Integer parallelizationFactor;
    private final @Nullable List<String> queues;
    private final @Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations;
    private final @Nullable Double startingPositionTimestamp;
    private final @Nullable List<String> topics;
    private final @Nullable Integer tumblingWindowInSeconds;

    @OutputCustomType.Constructor({"batchSize","bisectBatchOnFunctionError","destinationConfig","enabled","filterCriteria","functionName","functionResponseTypes","id","maximumBatchingWindowInSeconds","maximumRecordAgeInSeconds","maximumRetryAttempts","parallelizationFactor","queues","sourceAccessConfigurations","startingPositionTimestamp","topics","tumblingWindowInSeconds"})
    private GetEventSourceMappingResult(
        @Nullable Integer batchSize,
        @Nullable Boolean bisectBatchOnFunctionError,
        @Nullable EventSourceMappingDestinationConfig destinationConfig,
        @Nullable Boolean enabled,
        @Nullable FilterCriteriaProperties filterCriteria,
        @Nullable String functionName,
        @Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes,
        @Nullable String id,
        @Nullable Integer maximumBatchingWindowInSeconds,
        @Nullable Integer maximumRecordAgeInSeconds,
        @Nullable Integer maximumRetryAttempts,
        @Nullable Integer parallelizationFactor,
        @Nullable List<String> queues,
        @Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations,
        @Nullable Double startingPositionTimestamp,
        @Nullable List<String> topics,
        @Nullable Integer tumblingWindowInSeconds) {
        this.batchSize = batchSize;
        this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
        this.destinationConfig = destinationConfig;
        this.enabled = enabled;
        this.filterCriteria = filterCriteria;
        this.functionName = functionName;
        this.functionResponseTypes = functionResponseTypes;
        this.id = id;
        this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
        this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
        this.maximumRetryAttempts = maximumRetryAttempts;
        this.parallelizationFactor = parallelizationFactor;
        this.queues = queues;
        this.sourceAccessConfigurations = sourceAccessConfigurations;
        this.startingPositionTimestamp = startingPositionTimestamp;
        this.topics = topics;
        this.tumblingWindowInSeconds = tumblingWindowInSeconds;
    }

    public Optional<Integer> getBatchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    public Optional<Boolean> getBisectBatchOnFunctionError() {
        return Optional.ofNullable(this.bisectBatchOnFunctionError);
    }
    public Optional<EventSourceMappingDestinationConfig> getDestinationConfig() {
        return Optional.ofNullable(this.destinationConfig);
    }
    public Optional<Boolean> getEnabled() {
        return Optional.ofNullable(this.enabled);
    }
    public Optional<FilterCriteriaProperties> getFilterCriteria() {
        return Optional.ofNullable(this.filterCriteria);
    }
    public Optional<String> getFunctionName() {
        return Optional.ofNullable(this.functionName);
    }
    public List<EventSourceMappingFunctionResponseTypesItem> getFunctionResponseTypes() {
        return this.functionResponseTypes == null ? List.of() : this.functionResponseTypes;
    }
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Integer> getMaximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }
    public Optional<Integer> getMaximumRecordAgeInSeconds() {
        return Optional.ofNullable(this.maximumRecordAgeInSeconds);
    }
    public Optional<Integer> getMaximumRetryAttempts() {
        return Optional.ofNullable(this.maximumRetryAttempts);
    }
    public Optional<Integer> getParallelizationFactor() {
        return Optional.ofNullable(this.parallelizationFactor);
    }
    public List<String> getQueues() {
        return this.queues == null ? List.of() : this.queues;
    }
    public List<EventSourceMappingSourceAccessConfiguration> getSourceAccessConfigurations() {
        return this.sourceAccessConfigurations == null ? List.of() : this.sourceAccessConfigurations;
    }
    public Optional<Double> getStartingPositionTimestamp() {
        return Optional.ofNullable(this.startingPositionTimestamp);
    }
    public List<String> getTopics() {
        return this.topics == null ? List.of() : this.topics;
    }
    public Optional<Integer> getTumblingWindowInSeconds() {
        return Optional.ofNullable(this.tumblingWindowInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventSourceMappingResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer batchSize;
        private @Nullable Boolean bisectBatchOnFunctionError;
        private @Nullable EventSourceMappingDestinationConfig destinationConfig;
        private @Nullable Boolean enabled;
        private @Nullable FilterCriteriaProperties filterCriteria;
        private @Nullable String functionName;
        private @Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes;
        private @Nullable String id;
        private @Nullable Integer maximumBatchingWindowInSeconds;
        private @Nullable Integer maximumRecordAgeInSeconds;
        private @Nullable Integer maximumRetryAttempts;
        private @Nullable Integer parallelizationFactor;
        private @Nullable List<String> queues;
        private @Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations;
        private @Nullable Double startingPositionTimestamp;
        private @Nullable List<String> topics;
        private @Nullable Integer tumblingWindowInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEventSourceMappingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.bisectBatchOnFunctionError = defaults.bisectBatchOnFunctionError;
    	      this.destinationConfig = defaults.destinationConfig;
    	      this.enabled = defaults.enabled;
    	      this.filterCriteria = defaults.filterCriteria;
    	      this.functionName = defaults.functionName;
    	      this.functionResponseTypes = defaults.functionResponseTypes;
    	      this.id = defaults.id;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.maximumRecordAgeInSeconds = defaults.maximumRecordAgeInSeconds;
    	      this.maximumRetryAttempts = defaults.maximumRetryAttempts;
    	      this.parallelizationFactor = defaults.parallelizationFactor;
    	      this.queues = defaults.queues;
    	      this.sourceAccessConfigurations = defaults.sourceAccessConfigurations;
    	      this.startingPositionTimestamp = defaults.startingPositionTimestamp;
    	      this.topics = defaults.topics;
    	      this.tumblingWindowInSeconds = defaults.tumblingWindowInSeconds;
        }

        public Builder setBatchSize(@Nullable Integer batchSize) {
            this.batchSize = batchSize;
            return this;
        }

        public Builder setBisectBatchOnFunctionError(@Nullable Boolean bisectBatchOnFunctionError) {
            this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
            return this;
        }

        public Builder setDestinationConfig(@Nullable EventSourceMappingDestinationConfig destinationConfig) {
            this.destinationConfig = destinationConfig;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setFilterCriteria(@Nullable FilterCriteriaProperties filterCriteria) {
            this.filterCriteria = filterCriteria;
            return this;
        }

        public Builder setFunctionName(@Nullable String functionName) {
            this.functionName = functionName;
            return this;
        }

        public Builder setFunctionResponseTypes(@Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes) {
            this.functionResponseTypes = functionResponseTypes;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setMaximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }

        public Builder setMaximumRecordAgeInSeconds(@Nullable Integer maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            return this;
        }

        public Builder setMaximumRetryAttempts(@Nullable Integer maximumRetryAttempts) {
            this.maximumRetryAttempts = maximumRetryAttempts;
            return this;
        }

        public Builder setParallelizationFactor(@Nullable Integer parallelizationFactor) {
            this.parallelizationFactor = parallelizationFactor;
            return this;
        }

        public Builder setQueues(@Nullable List<String> queues) {
            this.queues = queues;
            return this;
        }

        public Builder setSourceAccessConfigurations(@Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations) {
            this.sourceAccessConfigurations = sourceAccessConfigurations;
            return this;
        }

        public Builder setStartingPositionTimestamp(@Nullable Double startingPositionTimestamp) {
            this.startingPositionTimestamp = startingPositionTimestamp;
            return this;
        }

        public Builder setTopics(@Nullable List<String> topics) {
            this.topics = topics;
            return this;
        }

        public Builder setTumblingWindowInSeconds(@Nullable Integer tumblingWindowInSeconds) {
            this.tumblingWindowInSeconds = tumblingWindowInSeconds;
            return this;
        }

        public GetEventSourceMappingResult build() {
            return new GetEventSourceMappingResult(batchSize, bisectBatchOnFunctionError, destinationConfig, enabled, filterCriteria, functionName, functionResponseTypes, id, maximumBatchingWindowInSeconds, maximumRecordAgeInSeconds, maximumRetryAttempts, parallelizationFactor, queues, sourceAccessConfigurations, startingPositionTimestamp, topics, tumblingWindowInSeconds);
        }
    }
}
