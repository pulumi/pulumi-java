// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.redshift.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a network interface.
 * 
 */
public final class EndpointAccessNetworkInterface extends io.pulumi.resources.InvokeArgs {

    public static final EndpointAccessNetworkInterface Empty = new EndpointAccessNetworkInterface();

    /**
     * The Availability Zone.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable String availabilityZone;

    public Optional<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Optional.empty() : Optional.ofNullable(this.availabilityZone);
    }

    /**
     * The network interface identifier.
     * 
     */
    @Import(name="networkInterfaceId")
      private final @Nullable String networkInterfaceId;

    public Optional<String> getNetworkInterfaceId() {
        return this.networkInterfaceId == null ? Optional.empty() : Optional.ofNullable(this.networkInterfaceId);
    }

    /**
     * The IPv4 address of the network interface within the subnet.
     * 
     */
    @Import(name="privateIpAddress")
      private final @Nullable String privateIpAddress;

    public Optional<String> getPrivateIpAddress() {
        return this.privateIpAddress == null ? Optional.empty() : Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The subnet identifier.
     * 
     */
    @Import(name="subnetId")
      private final @Nullable String subnetId;

    public Optional<String> getSubnetId() {
        return this.subnetId == null ? Optional.empty() : Optional.ofNullable(this.subnetId);
    }

    public EndpointAccessNetworkInterface(
        @Nullable String availabilityZone,
        @Nullable String networkInterfaceId,
        @Nullable String privateIpAddress,
        @Nullable String subnetId) {
        this.availabilityZone = availabilityZone;
        this.networkInterfaceId = networkInterfaceId;
        this.privateIpAddress = privateIpAddress;
        this.subnetId = subnetId;
    }

    private EndpointAccessNetworkInterface() {
        this.availabilityZone = null;
        this.networkInterfaceId = null;
        this.privateIpAddress = null;
        this.subnetId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointAccessNetworkInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String availabilityZone;
        private @Nullable String networkInterfaceId;
        private @Nullable String privateIpAddress;
        private @Nullable String subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointAccessNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder networkInterfaceId(@Nullable String networkInterfaceId) {
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public EndpointAccessNetworkInterface build() {
            return new EndpointAccessNetworkInterface(availabilityZone, networkInterfaceId, privateIpAddress, subnetId);
        }
    }
}
