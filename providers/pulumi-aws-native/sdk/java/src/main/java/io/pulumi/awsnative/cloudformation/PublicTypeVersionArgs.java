// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation;

import io.pulumi.awsnative.cloudformation.enums.PublicTypeVersionType;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PublicTypeVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PublicTypeVersionArgs Empty = new PublicTypeVersionArgs();

    /**
     * The Amazon Resource Number (ARN) of the extension.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * A url to the S3 bucket where logs for the testType run will be available
     * 
     */
    @Import(name="logDeliveryBucket")
      private final @Nullable Output<String> logDeliveryBucket;

    public Output<String> getLogDeliveryBucket() {
        return this.logDeliveryBucket == null ? Codegen.empty() : this.logDeliveryBucket;
    }

    /**
     * The version number of a public third-party extension
     * 
     */
    @Import(name="publicVersionNumber")
      private final @Nullable Output<String> publicVersionNumber;

    public Output<String> getPublicVersionNumber() {
        return this.publicVersionNumber == null ? Codegen.empty() : this.publicVersionNumber;
    }

    /**
     * The kind of extension
     * 
     */
    @Import(name="type")
      private final @Nullable Output<PublicTypeVersionType> type;

    public Output<PublicTypeVersionType> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * The name of the type being registered.
     * 
     * We recommend that type names adhere to the following pattern: company_or_organization::service::type.
     * 
     */
    @Import(name="typeName")
      private final @Nullable Output<String> typeName;

    public Output<String> getTypeName() {
        return this.typeName == null ? Codegen.empty() : this.typeName;
    }

    public PublicTypeVersionArgs(
        @Nullable Output<String> arn,
        @Nullable Output<String> logDeliveryBucket,
        @Nullable Output<String> publicVersionNumber,
        @Nullable Output<PublicTypeVersionType> type,
        @Nullable Output<String> typeName) {
        this.arn = arn;
        this.logDeliveryBucket = logDeliveryBucket;
        this.publicVersionNumber = publicVersionNumber;
        this.type = type;
        this.typeName = typeName;
    }

    private PublicTypeVersionArgs() {
        this.arn = Codegen.empty();
        this.logDeliveryBucket = Codegen.empty();
        this.publicVersionNumber = Codegen.empty();
        this.type = Codegen.empty();
        this.typeName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PublicTypeVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> logDeliveryBucket;
        private @Nullable Output<String> publicVersionNumber;
        private @Nullable Output<PublicTypeVersionType> type;
        private @Nullable Output<String> typeName;

        public Builder() {
    	      // Empty
        }

        public Builder(PublicTypeVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.logDeliveryBucket = defaults.logDeliveryBucket;
    	      this.publicVersionNumber = defaults.publicVersionNumber;
    	      this.type = defaults.type;
    	      this.typeName = defaults.typeName;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder logDeliveryBucket(@Nullable Output<String> logDeliveryBucket) {
            this.logDeliveryBucket = logDeliveryBucket;
            return this;
        }
        public Builder logDeliveryBucket(@Nullable String logDeliveryBucket) {
            this.logDeliveryBucket = Codegen.ofNullable(logDeliveryBucket);
            return this;
        }
        public Builder publicVersionNumber(@Nullable Output<String> publicVersionNumber) {
            this.publicVersionNumber = publicVersionNumber;
            return this;
        }
        public Builder publicVersionNumber(@Nullable String publicVersionNumber) {
            this.publicVersionNumber = Codegen.ofNullable(publicVersionNumber);
            return this;
        }
        public Builder type(@Nullable Output<PublicTypeVersionType> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable PublicTypeVersionType type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder typeName(@Nullable Output<String> typeName) {
            this.typeName = typeName;
            return this;
        }
        public Builder typeName(@Nullable String typeName) {
            this.typeName = Codegen.ofNullable(typeName);
            return this;
        }        public PublicTypeVersionArgs build() {
            return new PublicTypeVersionArgs(arn, logDeliveryBucket, publicVersionNumber, type, typeName);
        }
    }
}
