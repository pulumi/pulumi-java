// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ecs;

import io.pulumi.awsnative.ecs.enums.TaskSetLaunchType;
import io.pulumi.awsnative.ecs.inputs.TaskSetLoadBalancerArgs;
import io.pulumi.awsnative.ecs.inputs.TaskSetNetworkConfigurationArgs;
import io.pulumi.awsnative.ecs.inputs.TaskSetScaleArgs;
import io.pulumi.awsnative.ecs.inputs.TaskSetServiceRegistryArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskSetArgs Empty = new TaskSetArgs();

    /**
     * The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
     * 
     */
    @Import(name="cluster", required=true)
      private final Output<String> cluster;

    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
     * 
     */
    @Import(name="externalId")
      private final @Nullable Output<String> externalId;

    public Output<String> externalId() {
        return this.externalId == null ? Codegen.empty() : this.externalId;
    }

    /**
     * The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
     * 
     */
    @Import(name="launchType")
      private final @Nullable Output<TaskSetLaunchType> launchType;

    public Output<TaskSetLaunchType> launchType() {
        return this.launchType == null ? Codegen.empty() : this.launchType;
    }

    @Import(name="loadBalancers")
      private final @Nullable Output<List<TaskSetLoadBalancerArgs>> loadBalancers;

    public Output<List<TaskSetLoadBalancerArgs>> loadBalancers() {
        return this.loadBalancers == null ? Codegen.empty() : this.loadBalancers;
    }

    @Import(name="networkConfiguration")
      private final @Nullable Output<TaskSetNetworkConfigurationArgs> networkConfiguration;

    public Output<TaskSetNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration == null ? Codegen.empty() : this.networkConfiguration;
    }

    /**
     * The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
     * 
     */
    @Import(name="platformVersion")
      private final @Nullable Output<String> platformVersion;

    public Output<String> platformVersion() {
        return this.platformVersion == null ? Codegen.empty() : this.platformVersion;
    }

    /**
     * A floating-point percentage of the desired number of tasks to place and keep running in the task set.
     * 
     */
    @Import(name="scale")
      private final @Nullable Output<TaskSetScaleArgs> scale;

    public Output<TaskSetScaleArgs> scale() {
        return this.scale == null ? Codegen.empty() : this.scale;
    }

    /**
     * The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
     * 
     */
    @Import(name="service", required=true)
      private final Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    /**
     * The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
     * 
     */
    @Import(name="serviceRegistries")
      private final @Nullable Output<List<TaskSetServiceRegistryArgs>> serviceRegistries;

    public Output<List<TaskSetServiceRegistryArgs>> serviceRegistries() {
        return this.serviceRegistries == null ? Codegen.empty() : this.serviceRegistries;
    }

    /**
     * The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
     * 
     */
    @Import(name="taskDefinition", required=true)
      private final Output<String> taskDefinition;

    public Output<String> taskDefinition() {
        return this.taskDefinition;
    }

    public TaskSetArgs(
        Output<String> cluster,
        @Nullable Output<String> externalId,
        @Nullable Output<TaskSetLaunchType> launchType,
        @Nullable Output<List<TaskSetLoadBalancerArgs>> loadBalancers,
        @Nullable Output<TaskSetNetworkConfigurationArgs> networkConfiguration,
        @Nullable Output<String> platformVersion,
        @Nullable Output<TaskSetScaleArgs> scale,
        Output<String> service,
        @Nullable Output<List<TaskSetServiceRegistryArgs>> serviceRegistries,
        Output<String> taskDefinition) {
        this.cluster = Objects.requireNonNull(cluster, "expected parameter 'cluster' to be non-null");
        this.externalId = externalId;
        this.launchType = launchType;
        this.loadBalancers = loadBalancers;
        this.networkConfiguration = networkConfiguration;
        this.platformVersion = platformVersion;
        this.scale = scale;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.serviceRegistries = serviceRegistries;
        this.taskDefinition = Objects.requireNonNull(taskDefinition, "expected parameter 'taskDefinition' to be non-null");
    }

    private TaskSetArgs() {
        this.cluster = Codegen.empty();
        this.externalId = Codegen.empty();
        this.launchType = Codegen.empty();
        this.loadBalancers = Codegen.empty();
        this.networkConfiguration = Codegen.empty();
        this.platformVersion = Codegen.empty();
        this.scale = Codegen.empty();
        this.service = Codegen.empty();
        this.serviceRegistries = Codegen.empty();
        this.taskDefinition = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> cluster;
        private @Nullable Output<String> externalId;
        private @Nullable Output<TaskSetLaunchType> launchType;
        private @Nullable Output<List<TaskSetLoadBalancerArgs>> loadBalancers;
        private @Nullable Output<TaskSetNetworkConfigurationArgs> networkConfiguration;
        private @Nullable Output<String> platformVersion;
        private @Nullable Output<TaskSetScaleArgs> scale;
        private Output<String> service;
        private @Nullable Output<List<TaskSetServiceRegistryArgs>> serviceRegistries;
        private Output<String> taskDefinition;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cluster = defaults.cluster;
    	      this.externalId = defaults.externalId;
    	      this.launchType = defaults.launchType;
    	      this.loadBalancers = defaults.loadBalancers;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.platformVersion = defaults.platformVersion;
    	      this.scale = defaults.scale;
    	      this.service = defaults.service;
    	      this.serviceRegistries = defaults.serviceRegistries;
    	      this.taskDefinition = defaults.taskDefinition;
        }

        public Builder cluster(Output<String> cluster) {
            this.cluster = Objects.requireNonNull(cluster);
            return this;
        }
        public Builder cluster(String cluster) {
            this.cluster = Output.of(Objects.requireNonNull(cluster));
            return this;
        }
        public Builder externalId(@Nullable Output<String> externalId) {
            this.externalId = externalId;
            return this;
        }
        public Builder externalId(@Nullable String externalId) {
            this.externalId = Codegen.ofNullable(externalId);
            return this;
        }
        public Builder launchType(@Nullable Output<TaskSetLaunchType> launchType) {
            this.launchType = launchType;
            return this;
        }
        public Builder launchType(@Nullable TaskSetLaunchType launchType) {
            this.launchType = Codegen.ofNullable(launchType);
            return this;
        }
        public Builder loadBalancers(@Nullable Output<List<TaskSetLoadBalancerArgs>> loadBalancers) {
            this.loadBalancers = loadBalancers;
            return this;
        }
        public Builder loadBalancers(@Nullable List<TaskSetLoadBalancerArgs> loadBalancers) {
            this.loadBalancers = Codegen.ofNullable(loadBalancers);
            return this;
        }
        public Builder loadBalancers(TaskSetLoadBalancerArgs... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }
        public Builder networkConfiguration(@Nullable Output<TaskSetNetworkConfigurationArgs> networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        public Builder networkConfiguration(@Nullable TaskSetNetworkConfigurationArgs networkConfiguration) {
            this.networkConfiguration = Codegen.ofNullable(networkConfiguration);
            return this;
        }
        public Builder platformVersion(@Nullable Output<String> platformVersion) {
            this.platformVersion = platformVersion;
            return this;
        }
        public Builder platformVersion(@Nullable String platformVersion) {
            this.platformVersion = Codegen.ofNullable(platformVersion);
            return this;
        }
        public Builder scale(@Nullable Output<TaskSetScaleArgs> scale) {
            this.scale = scale;
            return this;
        }
        public Builder scale(@Nullable TaskSetScaleArgs scale) {
            this.scale = Codegen.ofNullable(scale);
            return this;
        }
        public Builder service(Output<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public Builder service(String service) {
            this.service = Output.of(Objects.requireNonNull(service));
            return this;
        }
        public Builder serviceRegistries(@Nullable Output<List<TaskSetServiceRegistryArgs>> serviceRegistries) {
            this.serviceRegistries = serviceRegistries;
            return this;
        }
        public Builder serviceRegistries(@Nullable List<TaskSetServiceRegistryArgs> serviceRegistries) {
            this.serviceRegistries = Codegen.ofNullable(serviceRegistries);
            return this;
        }
        public Builder serviceRegistries(TaskSetServiceRegistryArgs... serviceRegistries) {
            return serviceRegistries(List.of(serviceRegistries));
        }
        public Builder taskDefinition(Output<String> taskDefinition) {
            this.taskDefinition = Objects.requireNonNull(taskDefinition);
            return this;
        }
        public Builder taskDefinition(String taskDefinition) {
            this.taskDefinition = Output.of(Objects.requireNonNull(taskDefinition));
            return this;
        }        public TaskSetArgs build() {
            return new TaskSetArgs(cluster, externalId, launchType, loadBalancers, networkConfiguration, platformVersion, scale, service, serviceRegistries, taskDefinition);
        }
    }
}
