// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.events.inputs;

import io.pulumi.awsnative.events.enums.ConnectionOAuthParametersHttpMethod;
import io.pulumi.awsnative.events.inputs.ConnectionClientParametersArgs;
import io.pulumi.awsnative.events.inputs.ConnectionHttpParametersArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectionOAuthParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectionOAuthParametersArgs Empty = new ConnectionOAuthParametersArgs();

    @InputImport(name="authorizationEndpoint", required=true)
      private final Input<String> authorizationEndpoint;

    public Input<String> getAuthorizationEndpoint() {
        return this.authorizationEndpoint;
    }

    @InputImport(name="clientParameters", required=true)
      private final Input<ConnectionClientParametersArgs> clientParameters;

    public Input<ConnectionClientParametersArgs> getClientParameters() {
        return this.clientParameters;
    }

    @InputImport(name="httpMethod", required=true)
      private final Input<ConnectionOAuthParametersHttpMethod> httpMethod;

    public Input<ConnectionOAuthParametersHttpMethod> getHttpMethod() {
        return this.httpMethod;
    }

    @InputImport(name="oAuthHttpParameters")
      private final @Nullable Input<ConnectionHttpParametersArgs> oAuthHttpParameters;

    public Input<ConnectionHttpParametersArgs> getOAuthHttpParameters() {
        return this.oAuthHttpParameters == null ? Input.empty() : this.oAuthHttpParameters;
    }

    public ConnectionOAuthParametersArgs(
        Input<String> authorizationEndpoint,
        Input<ConnectionClientParametersArgs> clientParameters,
        Input<ConnectionOAuthParametersHttpMethod> httpMethod,
        @Nullable Input<ConnectionHttpParametersArgs> oAuthHttpParameters) {
        this.authorizationEndpoint = Objects.requireNonNull(authorizationEndpoint, "expected parameter 'authorizationEndpoint' to be non-null");
        this.clientParameters = Objects.requireNonNull(clientParameters, "expected parameter 'clientParameters' to be non-null");
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.oAuthHttpParameters = oAuthHttpParameters;
    }

    private ConnectionOAuthParametersArgs() {
        this.authorizationEndpoint = Input.empty();
        this.clientParameters = Input.empty();
        this.httpMethod = Input.empty();
        this.oAuthHttpParameters = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionOAuthParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> authorizationEndpoint;
        private Input<ConnectionClientParametersArgs> clientParameters;
        private Input<ConnectionOAuthParametersHttpMethod> httpMethod;
        private @Nullable Input<ConnectionHttpParametersArgs> oAuthHttpParameters;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectionOAuthParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.clientParameters = defaults.clientParameters;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oAuthHttpParameters = defaults.oAuthHttpParameters;
        }

        public Builder authorizationEndpoint(Input<String> authorizationEndpoint) {
            this.authorizationEndpoint = Objects.requireNonNull(authorizationEndpoint);
            return this;
        }

        public Builder authorizationEndpoint(String authorizationEndpoint) {
            this.authorizationEndpoint = Input.of(Objects.requireNonNull(authorizationEndpoint));
            return this;
        }

        public Builder clientParameters(Input<ConnectionClientParametersArgs> clientParameters) {
            this.clientParameters = Objects.requireNonNull(clientParameters);
            return this;
        }

        public Builder clientParameters(ConnectionClientParametersArgs clientParameters) {
            this.clientParameters = Input.of(Objects.requireNonNull(clientParameters));
            return this;
        }

        public Builder httpMethod(Input<ConnectionOAuthParametersHttpMethod> httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }

        public Builder httpMethod(ConnectionOAuthParametersHttpMethod httpMethod) {
            this.httpMethod = Input.of(Objects.requireNonNull(httpMethod));
            return this;
        }

        public Builder oAuthHttpParameters(@Nullable Input<ConnectionHttpParametersArgs> oAuthHttpParameters) {
            this.oAuthHttpParameters = oAuthHttpParameters;
            return this;
        }

        public Builder oAuthHttpParameters(@Nullable ConnectionHttpParametersArgs oAuthHttpParameters) {
            this.oAuthHttpParameters = Input.ofNullable(oAuthHttpParameters);
            return this;
        }
        public ConnectionOAuthParametersArgs build() {
            return new ConnectionOAuthParametersArgs(authorizationEndpoint, clientParameters, httpMethod, oAuthHttpParameters);
        }
    }
}
