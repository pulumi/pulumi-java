// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.wafv2.inputs;

import io.pulumi.awsnative.wafv2.enums.LoggingConfigurationLoggingFilterPropertiesDefaultBehavior;
import io.pulumi.awsnative.wafv2.inputs.LoggingConfigurationFilterArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.util.List;
import java.util.Objects;


/**
 * Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
 * 
 */
public final class LoggingFilterPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoggingFilterPropertiesArgs Empty = new LoggingFilterPropertiesArgs();

    /**
     * Default handling for logs that don't match any of the specified filtering conditions.
     * 
     */
    @InputImport(name="defaultBehavior", required=true)
      private final Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior;

    public Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> getDefaultBehavior() {
        return this.defaultBehavior;
    }

    /**
     * The filters that you want to apply to the logs.
     * 
     */
    @InputImport(name="filters", required=true)
      private final Output<List<LoggingConfigurationFilterArgs>> filters;

    public Output<List<LoggingConfigurationFilterArgs>> getFilters() {
        return this.filters;
    }

    public LoggingFilterPropertiesArgs(
        Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior,
        Output<List<LoggingConfigurationFilterArgs>> filters) {
        this.defaultBehavior = Objects.requireNonNull(defaultBehavior, "expected parameter 'defaultBehavior' to be non-null");
        this.filters = Objects.requireNonNull(filters, "expected parameter 'filters' to be non-null");
    }

    private LoggingFilterPropertiesArgs() {
        this.defaultBehavior = Output.empty();
        this.filters = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoggingFilterPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior;
        private Output<List<LoggingConfigurationFilterArgs>> filters;

        public Builder() {
    	      // Empty
        }

        public Builder(LoggingFilterPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultBehavior = defaults.defaultBehavior;
    	      this.filters = defaults.filters;
        }

        public Builder defaultBehavior(Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior) {
            this.defaultBehavior = Objects.requireNonNull(defaultBehavior);
            return this;
        }

        public Builder defaultBehavior(LoggingConfigurationLoggingFilterPropertiesDefaultBehavior defaultBehavior) {
            this.defaultBehavior = Output.of(Objects.requireNonNull(defaultBehavior));
            return this;
        }

        public Builder filters(Output<List<LoggingConfigurationFilterArgs>> filters) {
            this.filters = Objects.requireNonNull(filters);
            return this;
        }

        public Builder filters(List<LoggingConfigurationFilterArgs> filters) {
            this.filters = Output.of(Objects.requireNonNull(filters));
            return this;
        }
        public LoggingFilterPropertiesArgs build() {
            return new LoggingFilterPropertiesArgs(defaultBehavior, filters);
        }
    }
}
