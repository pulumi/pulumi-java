// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.inputs;

import io.pulumi.awsnative.s3.enums.BucketRuleStatus;
import io.pulumi.awsnative.s3.inputs.BucketAbortIncompleteMultipartUploadArgs;
import io.pulumi.awsnative.s3.inputs.BucketNoncurrentVersionExpirationArgs;
import io.pulumi.awsnative.s3.inputs.BucketNoncurrentVersionTransitionArgs;
import io.pulumi.awsnative.s3.inputs.BucketTagFilterArgs;
import io.pulumi.awsnative.s3.inputs.BucketTransitionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * You must specify at least one of the following properties: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays, NoncurrentVersionExpirationInDays, NoncurrentVersionTransition, NoncurrentVersionTransitions, Transition, or Transitions.
 * 
 */
public final class BucketRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketRuleArgs Empty = new BucketRuleArgs();

    @Import(name="abortIncompleteMultipartUpload")
      private final @Nullable Output<BucketAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;

    public Output<BucketAbortIncompleteMultipartUploadArgs> getAbortIncompleteMultipartUpload() {
        return this.abortIncompleteMultipartUpload == null ? Output.empty() : this.abortIncompleteMultipartUpload;
    }

    @Import(name="expirationDate")
      private final @Nullable Output<String> expirationDate;

    public Output<String> getExpirationDate() {
        return this.expirationDate == null ? Output.empty() : this.expirationDate;
    }

    @Import(name="expirationInDays")
      private final @Nullable Output<Integer> expirationInDays;

    public Output<Integer> getExpirationInDays() {
        return this.expirationInDays == null ? Output.empty() : this.expirationInDays;
    }

    @Import(name="expiredObjectDeleteMarker")
      private final @Nullable Output<Boolean> expiredObjectDeleteMarker;

    public Output<Boolean> getExpiredObjectDeleteMarker() {
        return this.expiredObjectDeleteMarker == null ? Output.empty() : this.expiredObjectDeleteMarker;
    }

    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    @Import(name="noncurrentVersionExpiration")
      private final @Nullable Output<BucketNoncurrentVersionExpirationArgs> noncurrentVersionExpiration;

    public Output<BucketNoncurrentVersionExpirationArgs> getNoncurrentVersionExpiration() {
        return this.noncurrentVersionExpiration == null ? Output.empty() : this.noncurrentVersionExpiration;
    }

    @Import(name="noncurrentVersionExpirationInDays")
      private final @Nullable Output<Integer> noncurrentVersionExpirationInDays;

    public Output<Integer> getNoncurrentVersionExpirationInDays() {
        return this.noncurrentVersionExpirationInDays == null ? Output.empty() : this.noncurrentVersionExpirationInDays;
    }

    @Import(name="noncurrentVersionTransition")
      private final @Nullable Output<BucketNoncurrentVersionTransitionArgs> noncurrentVersionTransition;

    public Output<BucketNoncurrentVersionTransitionArgs> getNoncurrentVersionTransition() {
        return this.noncurrentVersionTransition == null ? Output.empty() : this.noncurrentVersionTransition;
    }

    @Import(name="noncurrentVersionTransitions")
      private final @Nullable Output<List<BucketNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions;

    public Output<List<BucketNoncurrentVersionTransitionArgs>> getNoncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? Output.empty() : this.noncurrentVersionTransitions;
    }

    @Import(name="objectSizeGreaterThan")
      private final @Nullable Output<String> objectSizeGreaterThan;

    public Output<String> getObjectSizeGreaterThan() {
        return this.objectSizeGreaterThan == null ? Output.empty() : this.objectSizeGreaterThan;
    }

    @Import(name="objectSizeLessThan")
      private final @Nullable Output<String> objectSizeLessThan;

    public Output<String> getObjectSizeLessThan() {
        return this.objectSizeLessThan == null ? Output.empty() : this.objectSizeLessThan;
    }

    @Import(name="prefix")
      private final @Nullable Output<String> prefix;

    public Output<String> getPrefix() {
        return this.prefix == null ? Output.empty() : this.prefix;
    }

    @Import(name="status", required=true)
      private final Output<BucketRuleStatus> status;

    public Output<BucketRuleStatus> getStatus() {
        return this.status;
    }

    @Import(name="tagFilters")
      private final @Nullable Output<List<BucketTagFilterArgs>> tagFilters;

    public Output<List<BucketTagFilterArgs>> getTagFilters() {
        return this.tagFilters == null ? Output.empty() : this.tagFilters;
    }

    @Import(name="transition")
      private final @Nullable Output<BucketTransitionArgs> transition;

    public Output<BucketTransitionArgs> getTransition() {
        return this.transition == null ? Output.empty() : this.transition;
    }

    @Import(name="transitions")
      private final @Nullable Output<List<BucketTransitionArgs>> transitions;

    public Output<List<BucketTransitionArgs>> getTransitions() {
        return this.transitions == null ? Output.empty() : this.transitions;
    }

    public BucketRuleArgs(
        @Nullable Output<BucketAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload,
        @Nullable Output<String> expirationDate,
        @Nullable Output<Integer> expirationInDays,
        @Nullable Output<Boolean> expiredObjectDeleteMarker,
        @Nullable Output<String> id,
        @Nullable Output<BucketNoncurrentVersionExpirationArgs> noncurrentVersionExpiration,
        @Nullable Output<Integer> noncurrentVersionExpirationInDays,
        @Nullable Output<BucketNoncurrentVersionTransitionArgs> noncurrentVersionTransition,
        @Nullable Output<List<BucketNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions,
        @Nullable Output<String> objectSizeGreaterThan,
        @Nullable Output<String> objectSizeLessThan,
        @Nullable Output<String> prefix,
        Output<BucketRuleStatus> status,
        @Nullable Output<List<BucketTagFilterArgs>> tagFilters,
        @Nullable Output<BucketTransitionArgs> transition,
        @Nullable Output<List<BucketTransitionArgs>> transitions) {
        this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
        this.expirationDate = expirationDate;
        this.expirationInDays = expirationInDays;
        this.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
        this.id = id;
        this.noncurrentVersionExpiration = noncurrentVersionExpiration;
        this.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
        this.noncurrentVersionTransition = noncurrentVersionTransition;
        this.noncurrentVersionTransitions = noncurrentVersionTransitions;
        this.objectSizeGreaterThan = objectSizeGreaterThan;
        this.objectSizeLessThan = objectSizeLessThan;
        this.prefix = prefix;
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.tagFilters = tagFilters;
        this.transition = transition;
        this.transitions = transitions;
    }

    private BucketRuleArgs() {
        this.abortIncompleteMultipartUpload = Output.empty();
        this.expirationDate = Output.empty();
        this.expirationInDays = Output.empty();
        this.expiredObjectDeleteMarker = Output.empty();
        this.id = Output.empty();
        this.noncurrentVersionExpiration = Output.empty();
        this.noncurrentVersionExpirationInDays = Output.empty();
        this.noncurrentVersionTransition = Output.empty();
        this.noncurrentVersionTransitions = Output.empty();
        this.objectSizeGreaterThan = Output.empty();
        this.objectSizeLessThan = Output.empty();
        this.prefix = Output.empty();
        this.status = Output.empty();
        this.tagFilters = Output.empty();
        this.transition = Output.empty();
        this.transitions = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BucketAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;
        private @Nullable Output<String> expirationDate;
        private @Nullable Output<Integer> expirationInDays;
        private @Nullable Output<Boolean> expiredObjectDeleteMarker;
        private @Nullable Output<String> id;
        private @Nullable Output<BucketNoncurrentVersionExpirationArgs> noncurrentVersionExpiration;
        private @Nullable Output<Integer> noncurrentVersionExpirationInDays;
        private @Nullable Output<BucketNoncurrentVersionTransitionArgs> noncurrentVersionTransition;
        private @Nullable Output<List<BucketNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions;
        private @Nullable Output<String> objectSizeGreaterThan;
        private @Nullable Output<String> objectSizeLessThan;
        private @Nullable Output<String> prefix;
        private Output<BucketRuleStatus> status;
        private @Nullable Output<List<BucketTagFilterArgs>> tagFilters;
        private @Nullable Output<BucketTransitionArgs> transition;
        private @Nullable Output<List<BucketTransitionArgs>> transitions;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUpload = defaults.abortIncompleteMultipartUpload;
    	      this.expirationDate = defaults.expirationDate;
    	      this.expirationInDays = defaults.expirationInDays;
    	      this.expiredObjectDeleteMarker = defaults.expiredObjectDeleteMarker;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.noncurrentVersionExpirationInDays = defaults.noncurrentVersionExpirationInDays;
    	      this.noncurrentVersionTransition = defaults.noncurrentVersionTransition;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.objectSizeGreaterThan = defaults.objectSizeGreaterThan;
    	      this.objectSizeLessThan = defaults.objectSizeLessThan;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.tagFilters = defaults.tagFilters;
    	      this.transition = defaults.transition;
    	      this.transitions = defaults.transitions;
        }

        public Builder abortIncompleteMultipartUpload(@Nullable Output<BucketAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }
        public Builder abortIncompleteMultipartUpload(@Nullable BucketAbortIncompleteMultipartUploadArgs abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = Output.ofNullable(abortIncompleteMultipartUpload);
            return this;
        }
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = Output.ofNullable(expirationDate);
            return this;
        }
        public Builder expirationInDays(@Nullable Output<Integer> expirationInDays) {
            this.expirationInDays = expirationInDays;
            return this;
        }
        public Builder expirationInDays(@Nullable Integer expirationInDays) {
            this.expirationInDays = Output.ofNullable(expirationInDays);
            return this;
        }
        public Builder expiredObjectDeleteMarker(@Nullable Output<Boolean> expiredObjectDeleteMarker) {
            this.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
            return this;
        }
        public Builder expiredObjectDeleteMarker(@Nullable Boolean expiredObjectDeleteMarker) {
            this.expiredObjectDeleteMarker = Output.ofNullable(expiredObjectDeleteMarker);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }
        public Builder noncurrentVersionExpiration(@Nullable Output<BucketNoncurrentVersionExpirationArgs> noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }
        public Builder noncurrentVersionExpiration(@Nullable BucketNoncurrentVersionExpirationArgs noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = Output.ofNullable(noncurrentVersionExpiration);
            return this;
        }
        public Builder noncurrentVersionExpirationInDays(@Nullable Output<Integer> noncurrentVersionExpirationInDays) {
            this.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
            return this;
        }
        public Builder noncurrentVersionExpirationInDays(@Nullable Integer noncurrentVersionExpirationInDays) {
            this.noncurrentVersionExpirationInDays = Output.ofNullable(noncurrentVersionExpirationInDays);
            return this;
        }
        public Builder noncurrentVersionTransition(@Nullable Output<BucketNoncurrentVersionTransitionArgs> noncurrentVersionTransition) {
            this.noncurrentVersionTransition = noncurrentVersionTransition;
            return this;
        }
        public Builder noncurrentVersionTransition(@Nullable BucketNoncurrentVersionTransitionArgs noncurrentVersionTransition) {
            this.noncurrentVersionTransition = Output.ofNullable(noncurrentVersionTransition);
            return this;
        }
        public Builder noncurrentVersionTransitions(@Nullable Output<List<BucketNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions) {
            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }
        public Builder noncurrentVersionTransitions(@Nullable List<BucketNoncurrentVersionTransitionArgs> noncurrentVersionTransitions) {
            this.noncurrentVersionTransitions = Output.ofNullable(noncurrentVersionTransitions);
            return this;
        }
        public Builder noncurrentVersionTransitions(BucketNoncurrentVersionTransitionArgs... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }
        public Builder objectSizeGreaterThan(@Nullable Output<String> objectSizeGreaterThan) {
            this.objectSizeGreaterThan = objectSizeGreaterThan;
            return this;
        }
        public Builder objectSizeGreaterThan(@Nullable String objectSizeGreaterThan) {
            this.objectSizeGreaterThan = Output.ofNullable(objectSizeGreaterThan);
            return this;
        }
        public Builder objectSizeLessThan(@Nullable Output<String> objectSizeLessThan) {
            this.objectSizeLessThan = objectSizeLessThan;
            return this;
        }
        public Builder objectSizeLessThan(@Nullable String objectSizeLessThan) {
            this.objectSizeLessThan = Output.ofNullable(objectSizeLessThan);
            return this;
        }
        public Builder prefix(@Nullable Output<String> prefix) {
            this.prefix = prefix;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = Output.ofNullable(prefix);
            return this;
        }
        public Builder status(Output<BucketRuleStatus> status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder status(BucketRuleStatus status) {
            this.status = Output.of(Objects.requireNonNull(status));
            return this;
        }
        public Builder tagFilters(@Nullable Output<List<BucketTagFilterArgs>> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        public Builder tagFilters(@Nullable List<BucketTagFilterArgs> tagFilters) {
            this.tagFilters = Output.ofNullable(tagFilters);
            return this;
        }
        public Builder tagFilters(BucketTagFilterArgs... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }
        public Builder transition(@Nullable Output<BucketTransitionArgs> transition) {
            this.transition = transition;
            return this;
        }
        public Builder transition(@Nullable BucketTransitionArgs transition) {
            this.transition = Output.ofNullable(transition);
            return this;
        }
        public Builder transitions(@Nullable Output<List<BucketTransitionArgs>> transitions) {
            this.transitions = transitions;
            return this;
        }
        public Builder transitions(@Nullable List<BucketTransitionArgs> transitions) {
            this.transitions = Output.ofNullable(transitions);
            return this;
        }
        public Builder transitions(BucketTransitionArgs... transitions) {
            return transitions(List.of(transitions));
        }        public BucketRuleArgs build() {
            return new BucketRuleArgs(abortIncompleteMultipartUpload, expirationDate, expirationInDays, expiredObjectDeleteMarker, id, noncurrentVersionExpiration, noncurrentVersionExpirationInDays, noncurrentVersionTransition, noncurrentVersionTransitions, objectSizeGreaterThan, objectSizeLessThan, prefix, status, tagFilters, transition, transitions);
        }
    }
}
