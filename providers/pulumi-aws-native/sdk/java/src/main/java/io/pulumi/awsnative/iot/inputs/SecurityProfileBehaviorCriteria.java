// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iot.inputs;

import io.pulumi.awsnative.iot.enums.SecurityProfileBehaviorCriteriaComparisonOperator;
import io.pulumi.awsnative.iot.inputs.SecurityProfileMachineLearningDetectionConfig;
import io.pulumi.awsnative.iot.inputs.SecurityProfileMetricValue;
import io.pulumi.awsnative.iot.inputs.SecurityProfileStatisticalThreshold;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The criteria by which the behavior is determined to be normal.
 * 
 */
public final class SecurityProfileBehaviorCriteria extends io.pulumi.resources.InvokeArgs {

    public static final SecurityProfileBehaviorCriteria Empty = new SecurityProfileBehaviorCriteria();

    /**
     * The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
     * 
     */
    @InputImport(name="comparisonOperator")
      private final @Nullable SecurityProfileBehaviorCriteriaComparisonOperator comparisonOperator;

    public Optional<SecurityProfileBehaviorCriteriaComparisonOperator> getComparisonOperator() {
        return this.comparisonOperator == null ? Optional.empty() : Optional.ofNullable(this.comparisonOperator);
    }

    /**
     * If a device is in violation of the behavior for the specified number of consecutive datapoints, an alarm occurs. If not specified, the default is 1.
     * 
     */
    @InputImport(name="consecutiveDatapointsToAlarm")
      private final @Nullable Integer consecutiveDatapointsToAlarm;

    public Optional<Integer> getConsecutiveDatapointsToAlarm() {
        return this.consecutiveDatapointsToAlarm == null ? Optional.empty() : Optional.ofNullable(this.consecutiveDatapointsToAlarm);
    }

    /**
     * If an alarm has occurred and the offending device is no longer in violation of the behavior for the specified number of consecutive datapoints, the alarm is cleared. If not specified, the default is 1.
     * 
     */
    @InputImport(name="consecutiveDatapointsToClear")
      private final @Nullable Integer consecutiveDatapointsToClear;

    public Optional<Integer> getConsecutiveDatapointsToClear() {
        return this.consecutiveDatapointsToClear == null ? Optional.empty() : Optional.ofNullable(this.consecutiveDatapointsToClear);
    }

    /**
     * Use this to specify the time duration over which the behavior is evaluated.
     * 
     */
    @InputImport(name="durationSeconds")
      private final @Nullable Integer durationSeconds;

    public Optional<Integer> getDurationSeconds() {
        return this.durationSeconds == null ? Optional.empty() : Optional.ofNullable(this.durationSeconds);
    }

    @InputImport(name="mlDetectionConfig")
      private final @Nullable SecurityProfileMachineLearningDetectionConfig mlDetectionConfig;

    public Optional<SecurityProfileMachineLearningDetectionConfig> getMlDetectionConfig() {
        return this.mlDetectionConfig == null ? Optional.empty() : Optional.ofNullable(this.mlDetectionConfig);
    }

    @InputImport(name="statisticalThreshold")
      private final @Nullable SecurityProfileStatisticalThreshold statisticalThreshold;

    public Optional<SecurityProfileStatisticalThreshold> getStatisticalThreshold() {
        return this.statisticalThreshold == null ? Optional.empty() : Optional.ofNullable(this.statisticalThreshold);
    }

    @InputImport(name="value")
      private final @Nullable SecurityProfileMetricValue value;

    public Optional<SecurityProfileMetricValue> getValue() {
        return this.value == null ? Optional.empty() : Optional.ofNullable(this.value);
    }

    public SecurityProfileBehaviorCriteria(
        @Nullable SecurityProfileBehaviorCriteriaComparisonOperator comparisonOperator,
        @Nullable Integer consecutiveDatapointsToAlarm,
        @Nullable Integer consecutiveDatapointsToClear,
        @Nullable Integer durationSeconds,
        @Nullable SecurityProfileMachineLearningDetectionConfig mlDetectionConfig,
        @Nullable SecurityProfileStatisticalThreshold statisticalThreshold,
        @Nullable SecurityProfileMetricValue value) {
        this.comparisonOperator = comparisonOperator;
        this.consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarm;
        this.consecutiveDatapointsToClear = consecutiveDatapointsToClear;
        this.durationSeconds = durationSeconds;
        this.mlDetectionConfig = mlDetectionConfig;
        this.statisticalThreshold = statisticalThreshold;
        this.value = value;
    }

    private SecurityProfileBehaviorCriteria() {
        this.comparisonOperator = null;
        this.consecutiveDatapointsToAlarm = null;
        this.consecutiveDatapointsToClear = null;
        this.durationSeconds = null;
        this.mlDetectionConfig = null;
        this.statisticalThreshold = null;
        this.value = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityProfileBehaviorCriteria defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable SecurityProfileBehaviorCriteriaComparisonOperator comparisonOperator;
        private @Nullable Integer consecutiveDatapointsToAlarm;
        private @Nullable Integer consecutiveDatapointsToClear;
        private @Nullable Integer durationSeconds;
        private @Nullable SecurityProfileMachineLearningDetectionConfig mlDetectionConfig;
        private @Nullable SecurityProfileStatisticalThreshold statisticalThreshold;
        private @Nullable SecurityProfileMetricValue value;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityProfileBehaviorCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.consecutiveDatapointsToAlarm = defaults.consecutiveDatapointsToAlarm;
    	      this.consecutiveDatapointsToClear = defaults.consecutiveDatapointsToClear;
    	      this.durationSeconds = defaults.durationSeconds;
    	      this.mlDetectionConfig = defaults.mlDetectionConfig;
    	      this.statisticalThreshold = defaults.statisticalThreshold;
    	      this.value = defaults.value;
        }

        public Builder comparisonOperator(@Nullable SecurityProfileBehaviorCriteriaComparisonOperator comparisonOperator) {
            this.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder consecutiveDatapointsToAlarm(@Nullable Integer consecutiveDatapointsToAlarm) {
            this.consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarm;
            return this;
        }

        public Builder consecutiveDatapointsToClear(@Nullable Integer consecutiveDatapointsToClear) {
            this.consecutiveDatapointsToClear = consecutiveDatapointsToClear;
            return this;
        }

        public Builder durationSeconds(@Nullable Integer durationSeconds) {
            this.durationSeconds = durationSeconds;
            return this;
        }

        public Builder mlDetectionConfig(@Nullable SecurityProfileMachineLearningDetectionConfig mlDetectionConfig) {
            this.mlDetectionConfig = mlDetectionConfig;
            return this;
        }

        public Builder statisticalThreshold(@Nullable SecurityProfileStatisticalThreshold statisticalThreshold) {
            this.statisticalThreshold = statisticalThreshold;
            return this;
        }

        public Builder value(@Nullable SecurityProfileMetricValue value) {
            this.value = value;
            return this;
        }
        public SecurityProfileBehaviorCriteria build() {
            return new SecurityProfileBehaviorCriteria(comparisonOperator, consecutiveDatapointsToAlarm, consecutiveDatapointsToClear, durationSeconds, mlDetectionConfig, statisticalThreshold, value);
        }
    }
}
