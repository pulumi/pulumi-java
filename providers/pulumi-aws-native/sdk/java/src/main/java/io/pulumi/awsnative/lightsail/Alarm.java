// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.lightsail.AlarmArgs;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Resource Type definition for AWS::Lightsail::Alarm
 * 
 */
@ResourceType(type="aws-native:lightsail:Alarm")
public class Alarm extends io.pulumi.resources.CustomResource {
    @OutputExport(name="alarmArn", type=String.class, parameters={})
    private Output<String> alarmArn;

    public Output<String> getAlarmArn() {
        return this.alarmArn;
    }
    /**
     * The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
     * 
     */
    @OutputExport(name="alarmName", type=String.class, parameters={})
    private Output<String> alarmName;

    /**
     * @return The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
     * 
     */
    public Output<String> getAlarmName() {
        return this.alarmName;
    }
    /**
     * The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    @OutputExport(name="comparisonOperator", type=String.class, parameters={})
    private Output<String> comparisonOperator;

    /**
     * @return The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    public Output<String> getComparisonOperator() {
        return this.comparisonOperator;
    }
    /**
     * The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    @OutputExport(name="contactProtocols", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> contactProtocols;

    /**
     * @return The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    public Output</* @Nullable */ List<String>> getContactProtocols() {
        return this.contactProtocols;
    }
    /**
     * The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    @OutputExport(name="datapointsToAlarm", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> datapointsToAlarm;

    /**
     * @return The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    public Output</* @Nullable */ Integer> getDatapointsToAlarm() {
        return this.datapointsToAlarm;
    }
    /**
     * The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
     * 
     */
    @OutputExport(name="evaluationPeriods", type=Integer.class, parameters={})
    private Output<Integer> evaluationPeriods;

    /**
     * @return The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
     * 
     */
    public Output<Integer> getEvaluationPeriods() {
        return this.evaluationPeriods;
    }
    /**
     * The name of the metric to associate with the alarm.
     * 
     */
    @OutputExport(name="metricName", type=String.class, parameters={})
    private Output<String> metricName;

    /**
     * @return The name of the metric to associate with the alarm.
     * 
     */
    public Output<String> getMetricName() {
        return this.metricName;
    }
    /**
     * The validation status of the SSL/TLS certificate.
     * 
     */
    @OutputExport(name="monitoredResourceName", type=String.class, parameters={})
    private Output<String> monitoredResourceName;

    /**
     * @return The validation status of the SSL/TLS certificate.
     * 
     */
    public Output<String> getMonitoredResourceName() {
        return this.monitoredResourceName;
    }
    /**
     * Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
     * 
     */
    @OutputExport(name="notificationEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> notificationEnabled;

    /**
     * @return Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
     * 
     */
    public Output</* @Nullable */ Boolean> getNotificationEnabled() {
        return this.notificationEnabled;
    }
    /**
     * The alarm states that trigger a notification.
     * 
     */
    @OutputExport(name="notificationTriggers", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> notificationTriggers;

    /**
     * @return The alarm states that trigger a notification.
     * 
     */
    public Output</* @Nullable */ List<String>> getNotificationTriggers() {
        return this.notificationTriggers;
    }
    /**
     * The current state of the alarm.
     * 
     */
    @OutputExport(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the alarm.
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * The value against which the specified statistic is compared.
     * 
     */
    @OutputExport(name="threshold", type=Double.class, parameters={})
    private Output<Double> threshold;

    /**
     * @return The value against which the specified statistic is compared.
     * 
     */
    public Output<Double> getThreshold() {
        return this.threshold;
    }
    /**
     * Sets how this alarm will handle missing data points.
     * 
     */
    @OutputExport(name="treatMissingData", type=String.class, parameters={})
    private Output</* @Nullable */ String> treatMissingData;

    /**
     * @return Sets how this alarm will handle missing data points.
     * 
     */
    public Output</* @Nullable */ String> getTreatMissingData() {
        return this.treatMissingData;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Alarm(String name, AlarmArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:lightsail:Alarm", name, args == null ? AlarmArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Alarm(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:lightsail:Alarm", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Alarm get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Alarm(name, id, options);
    }
}
