// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.outputs;

import io.pulumi.awsnative.s3.enums.BucketRuleStatus;
import io.pulumi.awsnative.s3.outputs.BucketAbortIncompleteMultipartUpload;
import io.pulumi.awsnative.s3.outputs.BucketNoncurrentVersionExpiration;
import io.pulumi.awsnative.s3.outputs.BucketNoncurrentVersionTransition;
import io.pulumi.awsnative.s3.outputs.BucketTagFilter;
import io.pulumi.awsnative.s3.outputs.BucketTransition;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BucketRule {
    private final @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
    private final @Nullable String expirationDate;
    private final @Nullable Integer expirationInDays;
    private final @Nullable Boolean expiredObjectDeleteMarker;
    private final @Nullable String id;
    private final @Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration;
    private final @Nullable Integer noncurrentVersionExpirationInDays;
    private final @Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition;
    private final @Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions;
    private final @Nullable String objectSizeGreaterThan;
    private final @Nullable String objectSizeLessThan;
    private final @Nullable String prefix;
    private final BucketRuleStatus status;
    private final @Nullable List<BucketTagFilter> tagFilters;
    private final @Nullable BucketTransition transition;
    private final @Nullable List<BucketTransition> transitions;

    @OutputCustomType.Constructor({"abortIncompleteMultipartUpload","expirationDate","expirationInDays","expiredObjectDeleteMarker","id","noncurrentVersionExpiration","noncurrentVersionExpirationInDays","noncurrentVersionTransition","noncurrentVersionTransitions","objectSizeGreaterThan","objectSizeLessThan","prefix","status","tagFilters","transition","transitions"})
    private BucketRule(
        @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload,
        @Nullable String expirationDate,
        @Nullable Integer expirationInDays,
        @Nullable Boolean expiredObjectDeleteMarker,
        @Nullable String id,
        @Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration,
        @Nullable Integer noncurrentVersionExpirationInDays,
        @Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition,
        @Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions,
        @Nullable String objectSizeGreaterThan,
        @Nullable String objectSizeLessThan,
        @Nullable String prefix,
        BucketRuleStatus status,
        @Nullable List<BucketTagFilter> tagFilters,
        @Nullable BucketTransition transition,
        @Nullable List<BucketTransition> transitions) {
        this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
        this.expirationDate = expirationDate;
        this.expirationInDays = expirationInDays;
        this.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
        this.id = id;
        this.noncurrentVersionExpiration = noncurrentVersionExpiration;
        this.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
        this.noncurrentVersionTransition = noncurrentVersionTransition;
        this.noncurrentVersionTransitions = noncurrentVersionTransitions;
        this.objectSizeGreaterThan = objectSizeGreaterThan;
        this.objectSizeLessThan = objectSizeLessThan;
        this.prefix = prefix;
        this.status = Objects.requireNonNull(status);
        this.tagFilters = tagFilters;
        this.transition = transition;
        this.transitions = transitions;
    }

    public Optional<BucketAbortIncompleteMultipartUpload> getAbortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }
    public Optional<String> getExpirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    public Optional<Integer> getExpirationInDays() {
        return Optional.ofNullable(this.expirationInDays);
    }
    public Optional<Boolean> getExpiredObjectDeleteMarker() {
        return Optional.ofNullable(this.expiredObjectDeleteMarker);
    }
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    public Optional<BucketNoncurrentVersionExpiration> getNoncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }
    public Optional<Integer> getNoncurrentVersionExpirationInDays() {
        return Optional.ofNullable(this.noncurrentVersionExpirationInDays);
    }
    public Optional<BucketNoncurrentVersionTransition> getNoncurrentVersionTransition() {
        return Optional.ofNullable(this.noncurrentVersionTransition);
    }
    public List<BucketNoncurrentVersionTransition> getNoncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? List.of() : this.noncurrentVersionTransitions;
    }
    public Optional<String> getObjectSizeGreaterThan() {
        return Optional.ofNullable(this.objectSizeGreaterThan);
    }
    public Optional<String> getObjectSizeLessThan() {
        return Optional.ofNullable(this.objectSizeLessThan);
    }
    public Optional<String> getPrefix() {
        return Optional.ofNullable(this.prefix);
    }
    public BucketRuleStatus getStatus() {
        return this.status;
    }
    public List<BucketTagFilter> getTagFilters() {
        return this.tagFilters == null ? List.of() : this.tagFilters;
    }
    public Optional<BucketTransition> getTransition() {
        return Optional.ofNullable(this.transition);
    }
    public List<BucketTransition> getTransitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
        private @Nullable String expirationDate;
        private @Nullable Integer expirationInDays;
        private @Nullable Boolean expiredObjectDeleteMarker;
        private @Nullable String id;
        private @Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration;
        private @Nullable Integer noncurrentVersionExpirationInDays;
        private @Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition;
        private @Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions;
        private @Nullable String objectSizeGreaterThan;
        private @Nullable String objectSizeLessThan;
        private @Nullable String prefix;
        private BucketRuleStatus status;
        private @Nullable List<BucketTagFilter> tagFilters;
        private @Nullable BucketTransition transition;
        private @Nullable List<BucketTransition> transitions;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUpload = defaults.abortIncompleteMultipartUpload;
    	      this.expirationDate = defaults.expirationDate;
    	      this.expirationInDays = defaults.expirationInDays;
    	      this.expiredObjectDeleteMarker = defaults.expiredObjectDeleteMarker;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.noncurrentVersionExpirationInDays = defaults.noncurrentVersionExpirationInDays;
    	      this.noncurrentVersionTransition = defaults.noncurrentVersionTransition;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.objectSizeGreaterThan = defaults.objectSizeGreaterThan;
    	      this.objectSizeLessThan = defaults.objectSizeLessThan;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.tagFilters = defaults.tagFilters;
    	      this.transition = defaults.transition;
    	      this.transitions = defaults.transitions;
        }

        public Builder setAbortIncompleteMultipartUpload(@Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }

        public Builder setExpirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }

        public Builder setExpirationInDays(@Nullable Integer expirationInDays) {
            this.expirationInDays = expirationInDays;
            return this;
        }

        public Builder setExpiredObjectDeleteMarker(@Nullable Boolean expiredObjectDeleteMarker) {
            this.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setNoncurrentVersionExpiration(@Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }

        public Builder setNoncurrentVersionExpirationInDays(@Nullable Integer noncurrentVersionExpirationInDays) {
            this.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
            return this;
        }

        public Builder setNoncurrentVersionTransition(@Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition) {
            this.noncurrentVersionTransition = noncurrentVersionTransition;
            return this;
        }

        public Builder setNoncurrentVersionTransitions(@Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions) {
            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }

        public Builder setObjectSizeGreaterThan(@Nullable String objectSizeGreaterThan) {
            this.objectSizeGreaterThan = objectSizeGreaterThan;
            return this;
        }

        public Builder setObjectSizeLessThan(@Nullable String objectSizeLessThan) {
            this.objectSizeLessThan = objectSizeLessThan;
            return this;
        }

        public Builder setPrefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder setStatus(BucketRuleStatus status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTagFilters(@Nullable List<BucketTagFilter> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }

        public Builder setTransition(@Nullable BucketTransition transition) {
            this.transition = transition;
            return this;
        }

        public Builder setTransitions(@Nullable List<BucketTransition> transitions) {
            this.transitions = transitions;
            return this;
        }

        public BucketRule build() {
            return new BucketRule(abortIncompleteMultipartUpload, expirationDate, expirationInDays, expiredObjectDeleteMarker, id, noncurrentVersionExpiration, noncurrentVersionExpirationInDays, noncurrentVersionTransition, noncurrentVersionTransitions, objectSizeGreaterThan, objectSizeLessThan, prefix, status, tagFilters, transition, transitions);
        }
    }
}
