// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ec2;

import io.pulumi.awsnative.ec2.enums.FlowLogLogDestinationType;
import io.pulumi.awsnative.ec2.enums.FlowLogResourceType;
import io.pulumi.awsnative.ec2.enums.FlowLogTrafficType;
import io.pulumi.awsnative.ec2.inputs.DestinationOptionsPropertiesArgs;
import io.pulumi.awsnative.ec2.inputs.FlowLogTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlowLogArgs extends io.pulumi.resources.ResourceArgs {

    public static final FlowLogArgs Empty = new FlowLogArgs();

    /**
     * The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName.
     * 
     */
    @Import(name="deliverLogsPermissionArn")
      private final @Nullable Output<String> deliverLogsPermissionArn;

    public Output<String> deliverLogsPermissionArn() {
        return this.deliverLogsPermissionArn == null ? Codegen.empty() : this.deliverLogsPermissionArn;
    }

    @Import(name="destinationOptions")
      private final @Nullable Output<DestinationOptionsPropertiesArgs> destinationOptions;

    public Output<DestinationOptionsPropertiesArgs> destinationOptions() {
        return this.destinationOptions == null ? Codegen.empty() : this.destinationOptions;
    }

    /**
     * Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType.
     * 
     */
    @Import(name="logDestination")
      private final @Nullable Output<String> logDestination;

    public Output<String> logDestination() {
        return this.logDestination == null ? Codegen.empty() : this.logDestination;
    }

    /**
     * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
     * 
     */
    @Import(name="logDestinationType")
      private final @Nullable Output<FlowLogLogDestinationType> logDestinationType;

    public Output<FlowLogLogDestinationType> logDestinationType() {
        return this.logDestinationType == null ? Codegen.empty() : this.logDestinationType;
    }

    /**
     * The fields to include in the flow log record, in the order in which they should appear.
     * 
     */
    @Import(name="logFormat")
      private final @Nullable Output<String> logFormat;

    public Output<String> logFormat() {
        return this.logFormat == null ? Codegen.empty() : this.logFormat;
    }

    /**
     * The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName.
     * 
     */
    @Import(name="logGroupName")
      private final @Nullable Output<String> logGroupName;

    public Output<String> logGroupName() {
        return this.logGroupName == null ? Codegen.empty() : this.logGroupName;
    }

    /**
     * The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     * 
     */
    @Import(name="maxAggregationInterval")
      private final @Nullable Output<Integer> maxAggregationInterval;

    public Output<Integer> maxAggregationInterval() {
        return this.maxAggregationInterval == null ? Codegen.empty() : this.maxAggregationInterval;
    }

    /**
     * The ID of the subnet, network interface, or VPC for which you want to create a flow log.
     * 
     */
    @Import(name="resourceId", required=true)
      private final Output<String> resourceId;

    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
     * 
     */
    @Import(name="resourceType", required=true)
      private final Output<FlowLogResourceType> resourceType;

    public Output<FlowLogResourceType> resourceType() {
        return this.resourceType;
    }

    /**
     * The tags to apply to the flow logs.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<FlowLogTagArgs>> tags;

    public Output<List<FlowLogTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
     * 
     */
    @Import(name="trafficType", required=true)
      private final Output<FlowLogTrafficType> trafficType;

    public Output<FlowLogTrafficType> trafficType() {
        return this.trafficType;
    }

    public FlowLogArgs(
        @Nullable Output<String> deliverLogsPermissionArn,
        @Nullable Output<DestinationOptionsPropertiesArgs> destinationOptions,
        @Nullable Output<String> logDestination,
        @Nullable Output<FlowLogLogDestinationType> logDestinationType,
        @Nullable Output<String> logFormat,
        @Nullable Output<String> logGroupName,
        @Nullable Output<Integer> maxAggregationInterval,
        Output<String> resourceId,
        Output<FlowLogResourceType> resourceType,
        @Nullable Output<List<FlowLogTagArgs>> tags,
        Output<FlowLogTrafficType> trafficType) {
        this.deliverLogsPermissionArn = deliverLogsPermissionArn;
        this.destinationOptions = destinationOptions;
        this.logDestination = logDestination;
        this.logDestinationType = logDestinationType;
        this.logFormat = logFormat;
        this.logGroupName = logGroupName;
        this.maxAggregationInterval = maxAggregationInterval;
        this.resourceId = Objects.requireNonNull(resourceId, "expected parameter 'resourceId' to be non-null");
        this.resourceType = Objects.requireNonNull(resourceType, "expected parameter 'resourceType' to be non-null");
        this.tags = tags;
        this.trafficType = Objects.requireNonNull(trafficType, "expected parameter 'trafficType' to be non-null");
    }

    private FlowLogArgs() {
        this.deliverLogsPermissionArn = Codegen.empty();
        this.destinationOptions = Codegen.empty();
        this.logDestination = Codegen.empty();
        this.logDestinationType = Codegen.empty();
        this.logFormat = Codegen.empty();
        this.logGroupName = Codegen.empty();
        this.maxAggregationInterval = Codegen.empty();
        this.resourceId = Codegen.empty();
        this.resourceType = Codegen.empty();
        this.tags = Codegen.empty();
        this.trafficType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> deliverLogsPermissionArn;
        private @Nullable Output<DestinationOptionsPropertiesArgs> destinationOptions;
        private @Nullable Output<String> logDestination;
        private @Nullable Output<FlowLogLogDestinationType> logDestinationType;
        private @Nullable Output<String> logFormat;
        private @Nullable Output<String> logGroupName;
        private @Nullable Output<Integer> maxAggregationInterval;
        private Output<String> resourceId;
        private Output<FlowLogResourceType> resourceType;
        private @Nullable Output<List<FlowLogTagArgs>> tags;
        private Output<FlowLogTrafficType> trafficType;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowLogArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deliverLogsPermissionArn = defaults.deliverLogsPermissionArn;
    	      this.destinationOptions = defaults.destinationOptions;
    	      this.logDestination = defaults.logDestination;
    	      this.logDestinationType = defaults.logDestinationType;
    	      this.logFormat = defaults.logFormat;
    	      this.logGroupName = defaults.logGroupName;
    	      this.maxAggregationInterval = defaults.maxAggregationInterval;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceType = defaults.resourceType;
    	      this.tags = defaults.tags;
    	      this.trafficType = defaults.trafficType;
        }

        public Builder deliverLogsPermissionArn(@Nullable Output<String> deliverLogsPermissionArn) {
            this.deliverLogsPermissionArn = deliverLogsPermissionArn;
            return this;
        }
        public Builder deliverLogsPermissionArn(@Nullable String deliverLogsPermissionArn) {
            this.deliverLogsPermissionArn = Codegen.ofNullable(deliverLogsPermissionArn);
            return this;
        }
        public Builder destinationOptions(@Nullable Output<DestinationOptionsPropertiesArgs> destinationOptions) {
            this.destinationOptions = destinationOptions;
            return this;
        }
        public Builder destinationOptions(@Nullable DestinationOptionsPropertiesArgs destinationOptions) {
            this.destinationOptions = Codegen.ofNullable(destinationOptions);
            return this;
        }
        public Builder logDestination(@Nullable Output<String> logDestination) {
            this.logDestination = logDestination;
            return this;
        }
        public Builder logDestination(@Nullable String logDestination) {
            this.logDestination = Codegen.ofNullable(logDestination);
            return this;
        }
        public Builder logDestinationType(@Nullable Output<FlowLogLogDestinationType> logDestinationType) {
            this.logDestinationType = logDestinationType;
            return this;
        }
        public Builder logDestinationType(@Nullable FlowLogLogDestinationType logDestinationType) {
            this.logDestinationType = Codegen.ofNullable(logDestinationType);
            return this;
        }
        public Builder logFormat(@Nullable Output<String> logFormat) {
            this.logFormat = logFormat;
            return this;
        }
        public Builder logFormat(@Nullable String logFormat) {
            this.logFormat = Codegen.ofNullable(logFormat);
            return this;
        }
        public Builder logGroupName(@Nullable Output<String> logGroupName) {
            this.logGroupName = logGroupName;
            return this;
        }
        public Builder logGroupName(@Nullable String logGroupName) {
            this.logGroupName = Codegen.ofNullable(logGroupName);
            return this;
        }
        public Builder maxAggregationInterval(@Nullable Output<Integer> maxAggregationInterval) {
            this.maxAggregationInterval = maxAggregationInterval;
            return this;
        }
        public Builder maxAggregationInterval(@Nullable Integer maxAggregationInterval) {
            this.maxAggregationInterval = Codegen.ofNullable(maxAggregationInterval);
            return this;
        }
        public Builder resourceId(Output<String> resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        public Builder resourceId(String resourceId) {
            this.resourceId = Output.of(Objects.requireNonNull(resourceId));
            return this;
        }
        public Builder resourceType(Output<FlowLogResourceType> resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        public Builder resourceType(FlowLogResourceType resourceType) {
            this.resourceType = Output.of(Objects.requireNonNull(resourceType));
            return this;
        }
        public Builder tags(@Nullable Output<List<FlowLogTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<FlowLogTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(FlowLogTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder trafficType(Output<FlowLogTrafficType> trafficType) {
            this.trafficType = Objects.requireNonNull(trafficType);
            return this;
        }
        public Builder trafficType(FlowLogTrafficType trafficType) {
            this.trafficType = Output.of(Objects.requireNonNull(trafficType));
            return this;
        }        public FlowLogArgs build() {
            return new FlowLogArgs(deliverLogsPermissionArn, destinationOptions, logDestination, logDestinationType, logFormat, logGroupName, maxAggregationInterval, resourceId, resourceType, tags, trafficType);
        }
    }
}
