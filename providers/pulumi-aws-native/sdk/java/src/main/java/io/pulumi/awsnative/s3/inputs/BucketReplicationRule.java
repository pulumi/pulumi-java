// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.inputs;

import io.pulumi.awsnative.s3.enums.BucketReplicationRuleStatus;
import io.pulumi.awsnative.s3.inputs.BucketDeleteMarkerReplication;
import io.pulumi.awsnative.s3.inputs.BucketReplicationDestination;
import io.pulumi.awsnative.s3.inputs.BucketReplicationRuleFilter;
import io.pulumi.awsnative.s3.inputs.BucketSourceSelectionCriteria;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies which Amazon S3 objects to replicate and where to store the replicas.
 * 
 */
public final class BucketReplicationRule extends io.pulumi.resources.InvokeArgs {

    public static final BucketReplicationRule Empty = new BucketReplicationRule();

    @Import(name="deleteMarkerReplication")
      private final @Nullable BucketDeleteMarkerReplication deleteMarkerReplication;

    public Optional<BucketDeleteMarkerReplication> getDeleteMarkerReplication() {
        return this.deleteMarkerReplication == null ? Optional.empty() : Optional.ofNullable(this.deleteMarkerReplication);
    }

    @Import(name="destination", required=true)
      private final BucketReplicationDestination destination;

    public BucketReplicationDestination getDestination() {
        return this.destination;
    }

    @Import(name="filter")
      private final @Nullable BucketReplicationRuleFilter filter;

    public Optional<BucketReplicationRuleFilter> getFilter() {
        return this.filter == null ? Optional.empty() : Optional.ofNullable(this.filter);
    }

    /**
     * A unique identifier for the rule.
     * 
     */
    @Import(name="id")
      private final @Nullable String id;

    public Optional<String> getId() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * An object key name prefix that identifies the object or objects to which the rule applies.
     * 
     */
    @Import(name="prefix")
      private final @Nullable String prefix;

    public Optional<String> getPrefix() {
        return this.prefix == null ? Optional.empty() : Optional.ofNullable(this.prefix);
    }

    @Import(name="priority")
      private final @Nullable Integer priority;

    public Optional<Integer> getPriority() {
        return this.priority == null ? Optional.empty() : Optional.ofNullable(this.priority);
    }

    @Import(name="sourceSelectionCriteria")
      private final @Nullable BucketSourceSelectionCriteria sourceSelectionCriteria;

    public Optional<BucketSourceSelectionCriteria> getSourceSelectionCriteria() {
        return this.sourceSelectionCriteria == null ? Optional.empty() : Optional.ofNullable(this.sourceSelectionCriteria);
    }

    /**
     * Specifies whether the rule is enabled.
     * 
     */
    @Import(name="status", required=true)
      private final BucketReplicationRuleStatus status;

    public BucketReplicationRuleStatus getStatus() {
        return this.status;
    }

    public BucketReplicationRule(
        @Nullable BucketDeleteMarkerReplication deleteMarkerReplication,
        BucketReplicationDestination destination,
        @Nullable BucketReplicationRuleFilter filter,
        @Nullable String id,
        @Nullable String prefix,
        @Nullable Integer priority,
        @Nullable BucketSourceSelectionCriteria sourceSelectionCriteria,
        BucketReplicationRuleStatus status) {
        this.deleteMarkerReplication = deleteMarkerReplication;
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.filter = filter;
        this.id = id;
        this.prefix = prefix;
        this.priority = priority;
        this.sourceSelectionCriteria = sourceSelectionCriteria;
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
    }

    private BucketReplicationRule() {
        this.deleteMarkerReplication = null;
        this.destination = null;
        this.filter = null;
        this.id = null;
        this.prefix = null;
        this.priority = null;
        this.sourceSelectionCriteria = null;
        this.status = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketReplicationRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BucketDeleteMarkerReplication deleteMarkerReplication;
        private BucketReplicationDestination destination;
        private @Nullable BucketReplicationRuleFilter filter;
        private @Nullable String id;
        private @Nullable String prefix;
        private @Nullable Integer priority;
        private @Nullable BucketSourceSelectionCriteria sourceSelectionCriteria;
        private BucketReplicationRuleStatus status;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketReplicationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteMarkerReplication = defaults.deleteMarkerReplication;
    	      this.destination = defaults.destination;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.prefix = defaults.prefix;
    	      this.priority = defaults.priority;
    	      this.sourceSelectionCriteria = defaults.sourceSelectionCriteria;
    	      this.status = defaults.status;
        }

        public Builder deleteMarkerReplication(@Nullable BucketDeleteMarkerReplication deleteMarkerReplication) {
            this.deleteMarkerReplication = deleteMarkerReplication;
            return this;
        }

        public Builder destination(BucketReplicationDestination destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }

        public Builder filter(@Nullable BucketReplicationRuleFilter filter) {
            this.filter = filter;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }

        public Builder sourceSelectionCriteria(@Nullable BucketSourceSelectionCriteria sourceSelectionCriteria) {
            this.sourceSelectionCriteria = sourceSelectionCriteria;
            return this;
        }

        public Builder status(BucketReplicationRuleStatus status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public BucketReplicationRule build() {
            return new BucketReplicationRule(deleteMarkerReplication, destination, filter, id, prefix, priority, sourceSelectionCriteria, status);
        }
    }
}
