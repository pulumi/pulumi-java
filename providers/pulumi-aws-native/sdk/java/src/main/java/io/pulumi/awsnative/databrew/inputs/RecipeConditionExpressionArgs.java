// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RecipeConditionExpressionArgs extends io.pulumi.resources.ResourceArgs {

    public static final RecipeConditionExpressionArgs Empty = new RecipeConditionExpressionArgs();

    @InputImport(name="condition", required=true)
    private final Input<String> condition;

    public Input<String> getCondition() {
        return this.condition;
    }

    @InputImport(name="targetColumn", required=true)
    private final Input<String> targetColumn;

    public Input<String> getTargetColumn() {
        return this.targetColumn;
    }

    @InputImport(name="value")
    private final @Nullable Input<String> value;

    public Input<String> getValue() {
        return this.value == null ? Input.empty() : this.value;
    }

    public RecipeConditionExpressionArgs(
        Input<String> condition,
        Input<String> targetColumn,
        @Nullable Input<String> value) {
        this.condition = Objects.requireNonNull(condition, "expected parameter 'condition' to be non-null");
        this.targetColumn = Objects.requireNonNull(targetColumn, "expected parameter 'targetColumn' to be non-null");
        this.value = value;
    }

    private RecipeConditionExpressionArgs() {
        this.condition = Input.empty();
        this.targetColumn = Input.empty();
        this.value = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecipeConditionExpressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> condition;
        private Input<String> targetColumn;
        private @Nullable Input<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(RecipeConditionExpressionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.targetColumn = defaults.targetColumn;
    	      this.value = defaults.value;
        }

        public Builder setCondition(Input<String> condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }

        public Builder setCondition(String condition) {
            this.condition = Input.of(Objects.requireNonNull(condition));
            return this;
        }

        public Builder setTargetColumn(Input<String> targetColumn) {
            this.targetColumn = Objects.requireNonNull(targetColumn);
            return this;
        }

        public Builder setTargetColumn(String targetColumn) {
            this.targetColumn = Input.of(Objects.requireNonNull(targetColumn));
            return this;
        }

        public Builder setValue(@Nullable Input<String> value) {
            this.value = value;
            return this;
        }

        public Builder setValue(@Nullable String value) {
            this.value = Input.ofNullable(value);
            return this;
        }

        public RecipeConditionExpressionArgs build() {
            return new RecipeConditionExpressionArgs(condition, targetColumn, value);
        }
    }
}
