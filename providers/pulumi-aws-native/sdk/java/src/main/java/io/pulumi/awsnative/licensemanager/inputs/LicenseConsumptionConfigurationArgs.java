// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.licensemanager.inputs;

import io.pulumi.awsnative.licensemanager.inputs.LicenseBorrowConfigurationArgs;
import io.pulumi.awsnative.licensemanager.inputs.LicenseProvisionalConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LicenseConsumptionConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final LicenseConsumptionConfigurationArgs Empty = new LicenseConsumptionConfigurationArgs();

    @InputImport(name="borrowConfiguration")
      private final @Nullable Input<LicenseBorrowConfigurationArgs> borrowConfiguration;

    public Input<LicenseBorrowConfigurationArgs> getBorrowConfiguration() {
        return this.borrowConfiguration == null ? Input.empty() : this.borrowConfiguration;
    }

    @InputImport(name="provisionalConfiguration")
      private final @Nullable Input<LicenseProvisionalConfigurationArgs> provisionalConfiguration;

    public Input<LicenseProvisionalConfigurationArgs> getProvisionalConfiguration() {
        return this.provisionalConfiguration == null ? Input.empty() : this.provisionalConfiguration;
    }

    @InputImport(name="renewType")
      private final @Nullable Input<String> renewType;

    public Input<String> getRenewType() {
        return this.renewType == null ? Input.empty() : this.renewType;
    }

    public LicenseConsumptionConfigurationArgs(
        @Nullable Input<LicenseBorrowConfigurationArgs> borrowConfiguration,
        @Nullable Input<LicenseProvisionalConfigurationArgs> provisionalConfiguration,
        @Nullable Input<String> renewType) {
        this.borrowConfiguration = borrowConfiguration;
        this.provisionalConfiguration = provisionalConfiguration;
        this.renewType = renewType;
    }

    private LicenseConsumptionConfigurationArgs() {
        this.borrowConfiguration = Input.empty();
        this.provisionalConfiguration = Input.empty();
        this.renewType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicenseConsumptionConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<LicenseBorrowConfigurationArgs> borrowConfiguration;
        private @Nullable Input<LicenseProvisionalConfigurationArgs> provisionalConfiguration;
        private @Nullable Input<String> renewType;

        public Builder() {
    	      // Empty
        }

        public Builder(LicenseConsumptionConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.borrowConfiguration = defaults.borrowConfiguration;
    	      this.provisionalConfiguration = defaults.provisionalConfiguration;
    	      this.renewType = defaults.renewType;
        }

        public Builder setBorrowConfiguration(@Nullable Input<LicenseBorrowConfigurationArgs> borrowConfiguration) {
            this.borrowConfiguration = borrowConfiguration;
            return this;
        }

        public Builder setBorrowConfiguration(@Nullable LicenseBorrowConfigurationArgs borrowConfiguration) {
            this.borrowConfiguration = Input.ofNullable(borrowConfiguration);
            return this;
        }

        public Builder setProvisionalConfiguration(@Nullable Input<LicenseProvisionalConfigurationArgs> provisionalConfiguration) {
            this.provisionalConfiguration = provisionalConfiguration;
            return this;
        }

        public Builder setProvisionalConfiguration(@Nullable LicenseProvisionalConfigurationArgs provisionalConfiguration) {
            this.provisionalConfiguration = Input.ofNullable(provisionalConfiguration);
            return this;
        }

        public Builder setRenewType(@Nullable Input<String> renewType) {
            this.renewType = renewType;
            return this;
        }

        public Builder setRenewType(@Nullable String renewType) {
            this.renewType = Input.ofNullable(renewType);
            return this;
        }
        public LicenseConsumptionConfigurationArgs build() {
            return new LicenseConsumptionConfigurationArgs(borrowConfiguration, provisionalConfiguration, renewType);
        }
    }
}
