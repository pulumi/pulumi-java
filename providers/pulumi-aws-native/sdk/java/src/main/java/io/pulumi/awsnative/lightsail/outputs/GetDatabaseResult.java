// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail.outputs;

import io.pulumi.awsnative.lightsail.outputs.DatabaseTag;
import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseResult {
    /**
     * When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    private final @Nullable Boolean backupRetention;
    /**
     * Indicates the certificate that needs to be associated with the database.
     * 
     */
    private final @Nullable String caCertificateIdentifier;
    private final @Nullable String databaseArn;
    /**
     * The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    private final @Nullable String preferredBackupWindow;
    /**
     * The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    private final @Nullable String preferredMaintenanceWindow;
    /**
     * Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    private final @Nullable Boolean publiclyAccessible;
    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    private final @Nullable List<DatabaseTag> tags;

    @CustomType.Constructor
    private GetDatabaseResult(
        @CustomType.Parameter("backupRetention") @Nullable Boolean backupRetention,
        @CustomType.Parameter("caCertificateIdentifier") @Nullable String caCertificateIdentifier,
        @CustomType.Parameter("databaseArn") @Nullable String databaseArn,
        @CustomType.Parameter("preferredBackupWindow") @Nullable String preferredBackupWindow,
        @CustomType.Parameter("preferredMaintenanceWindow") @Nullable String preferredMaintenanceWindow,
        @CustomType.Parameter("publiclyAccessible") @Nullable Boolean publiclyAccessible,
        @CustomType.Parameter("tags") @Nullable List<DatabaseTag> tags) {
        this.backupRetention = backupRetention;
        this.caCertificateIdentifier = caCertificateIdentifier;
        this.databaseArn = databaseArn;
        this.preferredBackupWindow = preferredBackupWindow;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.publiclyAccessible = publiclyAccessible;
        this.tags = tags;
    }

    /**
     * When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
    */
    public Optional<Boolean> getBackupRetention() {
        return Optional.ofNullable(this.backupRetention);
    }
    /**
     * Indicates the certificate that needs to be associated with the database.
     * 
    */
    public Optional<String> getCaCertificateIdentifier() {
        return Optional.ofNullable(this.caCertificateIdentifier);
    }
    public Optional<String> getDatabaseArn() {
        return Optional.ofNullable(this.databaseArn);
    }
    /**
     * The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
    */
    public Optional<String> getPreferredBackupWindow() {
        return Optional.ofNullable(this.preferredBackupWindow);
    }
    /**
     * The weekly time range during which system maintenance can occur on your new database.
     * 
    */
    public Optional<String> getPreferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }
    /**
     * Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
    */
    public Optional<Boolean> getPubliclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }
    /**
     * An array of key-value pairs to apply to this resource.
     * 
    */
    public List<DatabaseTag> getTags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean backupRetention;
        private @Nullable String caCertificateIdentifier;
        private @Nullable String databaseArn;
        private @Nullable String preferredBackupWindow;
        private @Nullable String preferredMaintenanceWindow;
        private @Nullable Boolean publiclyAccessible;
        private @Nullable List<DatabaseTag> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupRetention = defaults.backupRetention;
    	      this.caCertificateIdentifier = defaults.caCertificateIdentifier;
    	      this.databaseArn = defaults.databaseArn;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.tags = defaults.tags;
        }

        public Builder backupRetention(@Nullable Boolean backupRetention) {
            this.backupRetention = backupRetention;
            return this;
        }
        public Builder caCertificateIdentifier(@Nullable String caCertificateIdentifier) {
            this.caCertificateIdentifier = caCertificateIdentifier;
            return this;
        }
        public Builder databaseArn(@Nullable String databaseArn) {
            this.databaseArn = databaseArn;
            return this;
        }
        public Builder preferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }
        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        public Builder tags(@Nullable List<DatabaseTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DatabaseTag... tags) {
            return tags(List.of(tags));
        }        public GetDatabaseResult build() {
            return new GetDatabaseResult(backupRetention, caCertificateIdentifier, databaseArn, preferredBackupWindow, preferredMaintenanceWindow, publiclyAccessible, tags);
        }
    }
}
