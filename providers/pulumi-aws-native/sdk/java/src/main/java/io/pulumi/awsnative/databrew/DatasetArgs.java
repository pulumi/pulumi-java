// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew;

import io.pulumi.awsnative.databrew.enums.DatasetFormat;
import io.pulumi.awsnative.databrew.inputs.DatasetFormatOptionsArgs;
import io.pulumi.awsnative.databrew.inputs.DatasetInputArgs;
import io.pulumi.awsnative.databrew.inputs.DatasetPathOptionsArgs;
import io.pulumi.awsnative.databrew.inputs.DatasetTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatasetArgs Empty = new DatasetArgs();

    /**
     * Dataset format
     * 
     */
    @InputImport(name="format")
        private final @Nullable Input<DatasetFormat> format;

    public Input<DatasetFormat> getFormat() {
        return this.format == null ? Input.empty() : this.format;
    }

    /**
     * Format options for dataset
     * 
     */
    @InputImport(name="formatOptions")
        private final @Nullable Input<DatasetFormatOptionsArgs> formatOptions;

    public Input<DatasetFormatOptionsArgs> getFormatOptions() {
        return this.formatOptions == null ? Input.empty() : this.formatOptions;
    }

    /**
     * Input
     * 
     */
    @InputImport(name="input", required=true)
        private final Input<DatasetInputArgs> input;

    public Input<DatasetInputArgs> getInput() {
        return this.input;
    }

    /**
     * Dataset name
     * 
     */
    @InputImport(name="name")
        private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * PathOptions
     * 
     */
    @InputImport(name="pathOptions")
        private final @Nullable Input<DatasetPathOptionsArgs> pathOptions;

    public Input<DatasetPathOptionsArgs> getPathOptions() {
        return this.pathOptions == null ? Input.empty() : this.pathOptions;
    }

    @InputImport(name="tags")
        private final @Nullable Input<List<DatasetTagArgs>> tags;

    public Input<List<DatasetTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DatasetArgs(
        @Nullable Input<DatasetFormat> format,
        @Nullable Input<DatasetFormatOptionsArgs> formatOptions,
        Input<DatasetInputArgs> input,
        @Nullable Input<String> name,
        @Nullable Input<DatasetPathOptionsArgs> pathOptions,
        @Nullable Input<List<DatasetTagArgs>> tags) {
        this.format = format;
        this.formatOptions = formatOptions;
        this.input = Objects.requireNonNull(input, "expected parameter 'input' to be non-null");
        this.name = name;
        this.pathOptions = pathOptions;
        this.tags = tags;
    }

    private DatasetArgs() {
        this.format = Input.empty();
        this.formatOptions = Input.empty();
        this.input = Input.empty();
        this.name = Input.empty();
        this.pathOptions = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DatasetFormat> format;
        private @Nullable Input<DatasetFormatOptionsArgs> formatOptions;
        private Input<DatasetInputArgs> input;
        private @Nullable Input<String> name;
        private @Nullable Input<DatasetPathOptionsArgs> pathOptions;
        private @Nullable Input<List<DatasetTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.format = defaults.format;
    	      this.formatOptions = defaults.formatOptions;
    	      this.input = defaults.input;
    	      this.name = defaults.name;
    	      this.pathOptions = defaults.pathOptions;
    	      this.tags = defaults.tags;
        }

        public Builder setFormat(@Nullable Input<DatasetFormat> format) {
            this.format = format;
            return this;
        }

        public Builder setFormat(@Nullable DatasetFormat format) {
            this.format = Input.ofNullable(format);
            return this;
        }

        public Builder setFormatOptions(@Nullable Input<DatasetFormatOptionsArgs> formatOptions) {
            this.formatOptions = formatOptions;
            return this;
        }

        public Builder setFormatOptions(@Nullable DatasetFormatOptionsArgs formatOptions) {
            this.formatOptions = Input.ofNullable(formatOptions);
            return this;
        }

        public Builder setInput(Input<DatasetInputArgs> input) {
            this.input = Objects.requireNonNull(input);
            return this;
        }

        public Builder setInput(DatasetInputArgs input) {
            this.input = Input.of(Objects.requireNonNull(input));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPathOptions(@Nullable Input<DatasetPathOptionsArgs> pathOptions) {
            this.pathOptions = pathOptions;
            return this;
        }

        public Builder setPathOptions(@Nullable DatasetPathOptionsArgs pathOptions) {
            this.pathOptions = Input.ofNullable(pathOptions);
            return this;
        }

        public Builder setTags(@Nullable Input<List<DatasetTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<DatasetTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public DatasetArgs build() {
            return new DatasetArgs(format, formatOptions, input, name, pathOptions, tags);
        }
    }
}
