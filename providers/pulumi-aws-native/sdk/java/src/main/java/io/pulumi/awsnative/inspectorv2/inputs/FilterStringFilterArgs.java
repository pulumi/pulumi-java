// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.inspectorv2.inputs;

import io.pulumi.awsnative.inspectorv2.enums.FilterStringComparison;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


public final class FilterStringFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final FilterStringFilterArgs Empty = new FilterStringFilterArgs();

    @Import(name="comparison", required=true)
      private final Output<FilterStringComparison> comparison;

    public Output<FilterStringComparison> comparison() {
        return this.comparison;
    }

    @Import(name="value", required=true)
      private final Output<String> value;

    public Output<String> value() {
        return this.value;
    }

    public FilterStringFilterArgs(
        Output<FilterStringComparison> comparison,
        Output<String> value) {
        this.comparison = Objects.requireNonNull(comparison, "expected parameter 'comparison' to be non-null");
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private FilterStringFilterArgs() {
        this.comparison = Codegen.empty();
        this.value = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FilterStringFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<FilterStringComparison> comparison;
        private Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(FilterStringFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparison = defaults.comparison;
    	      this.value = defaults.value;
        }

        public Builder comparison(Output<FilterStringComparison> comparison) {
            this.comparison = Objects.requireNonNull(comparison);
            return this;
        }
        public Builder comparison(FilterStringComparison comparison) {
            this.comparison = Output.of(Objects.requireNonNull(comparison));
            return this;
        }
        public Builder value(Output<String> value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public Builder value(String value) {
            this.value = Output.of(Objects.requireNonNull(value));
            return this;
        }        public FilterStringFilterArgs build() {
            return new FilterStringFilterArgs(comparison, value);
        }
    }
}
