// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.route53.inputs;

import io.pulumi.awsnative.route53.enums.HealthCheckConfigPropertiesInsufficientDataHealthStatus;
import io.pulumi.awsnative.route53.enums.HealthCheckConfigPropertiesType;
import io.pulumi.awsnative.route53.inputs.HealthCheckAlarmIdentifier;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A complex type that contains information about the health check.
 * 
 */
public final class HealthCheckConfigProperties extends io.pulumi.resources.InvokeArgs {

    public static final HealthCheckConfigProperties Empty = new HealthCheckConfigProperties();

    @Import(name="alarmIdentifier")
      private final @Nullable HealthCheckAlarmIdentifier alarmIdentifier;

    public Optional<HealthCheckAlarmIdentifier> alarmIdentifier() {
        return this.alarmIdentifier == null ? Optional.empty() : Optional.ofNullable(this.alarmIdentifier);
    }

    @Import(name="childHealthChecks")
      private final @Nullable List<String> childHealthChecks;

    public List<String> childHealthChecks() {
        return this.childHealthChecks == null ? List.of() : this.childHealthChecks;
    }

    @Import(name="enableSNI")
      private final @Nullable Boolean enableSNI;

    public Optional<Boolean> enableSNI() {
        return this.enableSNI == null ? Optional.empty() : Optional.ofNullable(this.enableSNI);
    }

    @Import(name="failureThreshold")
      private final @Nullable Integer failureThreshold;

    public Optional<Integer> failureThreshold() {
        return this.failureThreshold == null ? Optional.empty() : Optional.ofNullable(this.failureThreshold);
    }

    @Import(name="fullyQualifiedDomainName")
      private final @Nullable String fullyQualifiedDomainName;

    public Optional<String> fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName == null ? Optional.empty() : Optional.ofNullable(this.fullyQualifiedDomainName);
    }

    @Import(name="healthThreshold")
      private final @Nullable Integer healthThreshold;

    public Optional<Integer> healthThreshold() {
        return this.healthThreshold == null ? Optional.empty() : Optional.ofNullable(this.healthThreshold);
    }

    @Import(name="iPAddress")
      private final @Nullable String iPAddress;

    public Optional<String> iPAddress() {
        return this.iPAddress == null ? Optional.empty() : Optional.ofNullable(this.iPAddress);
    }

    @Import(name="insufficientDataHealthStatus")
      private final @Nullable HealthCheckConfigPropertiesInsufficientDataHealthStatus insufficientDataHealthStatus;

    public Optional<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus() {
        return this.insufficientDataHealthStatus == null ? Optional.empty() : Optional.ofNullable(this.insufficientDataHealthStatus);
    }

    @Import(name="inverted")
      private final @Nullable Boolean inverted;

    public Optional<Boolean> inverted() {
        return this.inverted == null ? Optional.empty() : Optional.ofNullable(this.inverted);
    }

    @Import(name="measureLatency")
      private final @Nullable Boolean measureLatency;

    public Optional<Boolean> measureLatency() {
        return this.measureLatency == null ? Optional.empty() : Optional.ofNullable(this.measureLatency);
    }

    @Import(name="port")
      private final @Nullable Integer port;

    public Optional<Integer> port() {
        return this.port == null ? Optional.empty() : Optional.ofNullable(this.port);
    }

    @Import(name="regions")
      private final @Nullable List<String> regions;

    public List<String> regions() {
        return this.regions == null ? List.of() : this.regions;
    }

    @Import(name="requestInterval")
      private final @Nullable Integer requestInterval;

    public Optional<Integer> requestInterval() {
        return this.requestInterval == null ? Optional.empty() : Optional.ofNullable(this.requestInterval);
    }

    @Import(name="resourcePath")
      private final @Nullable String resourcePath;

    public Optional<String> resourcePath() {
        return this.resourcePath == null ? Optional.empty() : Optional.ofNullable(this.resourcePath);
    }

    @Import(name="routingControlArn")
      private final @Nullable String routingControlArn;

    public Optional<String> routingControlArn() {
        return this.routingControlArn == null ? Optional.empty() : Optional.ofNullable(this.routingControlArn);
    }

    @Import(name="searchString")
      private final @Nullable String searchString;

    public Optional<String> searchString() {
        return this.searchString == null ? Optional.empty() : Optional.ofNullable(this.searchString);
    }

    @Import(name="type", required=true)
      private final HealthCheckConfigPropertiesType type;

    public HealthCheckConfigPropertiesType type() {
        return this.type;
    }

    public HealthCheckConfigProperties(
        @Nullable HealthCheckAlarmIdentifier alarmIdentifier,
        @Nullable List<String> childHealthChecks,
        @Nullable Boolean enableSNI,
        @Nullable Integer failureThreshold,
        @Nullable String fullyQualifiedDomainName,
        @Nullable Integer healthThreshold,
        @Nullable String iPAddress,
        @Nullable HealthCheckConfigPropertiesInsufficientDataHealthStatus insufficientDataHealthStatus,
        @Nullable Boolean inverted,
        @Nullable Boolean measureLatency,
        @Nullable Integer port,
        @Nullable List<String> regions,
        @Nullable Integer requestInterval,
        @Nullable String resourcePath,
        @Nullable String routingControlArn,
        @Nullable String searchString,
        HealthCheckConfigPropertiesType type) {
        this.alarmIdentifier = alarmIdentifier;
        this.childHealthChecks = childHealthChecks;
        this.enableSNI = enableSNI;
        this.failureThreshold = failureThreshold;
        this.fullyQualifiedDomainName = fullyQualifiedDomainName;
        this.healthThreshold = healthThreshold;
        this.iPAddress = iPAddress;
        this.insufficientDataHealthStatus = insufficientDataHealthStatus;
        this.inverted = inverted;
        this.measureLatency = measureLatency;
        this.port = port;
        this.regions = regions;
        this.requestInterval = requestInterval;
        this.resourcePath = resourcePath;
        this.routingControlArn = routingControlArn;
        this.searchString = searchString;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private HealthCheckConfigProperties() {
        this.alarmIdentifier = null;
        this.childHealthChecks = List.of();
        this.enableSNI = null;
        this.failureThreshold = null;
        this.fullyQualifiedDomainName = null;
        this.healthThreshold = null;
        this.iPAddress = null;
        this.insufficientDataHealthStatus = null;
        this.inverted = null;
        this.measureLatency = null;
        this.port = null;
        this.regions = List.of();
        this.requestInterval = null;
        this.resourcePath = null;
        this.routingControlArn = null;
        this.searchString = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HealthCheckConfigProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable HealthCheckAlarmIdentifier alarmIdentifier;
        private @Nullable List<String> childHealthChecks;
        private @Nullable Boolean enableSNI;
        private @Nullable Integer failureThreshold;
        private @Nullable String fullyQualifiedDomainName;
        private @Nullable Integer healthThreshold;
        private @Nullable String iPAddress;
        private @Nullable HealthCheckConfigPropertiesInsufficientDataHealthStatus insufficientDataHealthStatus;
        private @Nullable Boolean inverted;
        private @Nullable Boolean measureLatency;
        private @Nullable Integer port;
        private @Nullable List<String> regions;
        private @Nullable Integer requestInterval;
        private @Nullable String resourcePath;
        private @Nullable String routingControlArn;
        private @Nullable String searchString;
        private HealthCheckConfigPropertiesType type;

        public Builder() {
    	      // Empty
        }

        public Builder(HealthCheckConfigProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarmIdentifier = defaults.alarmIdentifier;
    	      this.childHealthChecks = defaults.childHealthChecks;
    	      this.enableSNI = defaults.enableSNI;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.fullyQualifiedDomainName = defaults.fullyQualifiedDomainName;
    	      this.healthThreshold = defaults.healthThreshold;
    	      this.iPAddress = defaults.iPAddress;
    	      this.insufficientDataHealthStatus = defaults.insufficientDataHealthStatus;
    	      this.inverted = defaults.inverted;
    	      this.measureLatency = defaults.measureLatency;
    	      this.port = defaults.port;
    	      this.regions = defaults.regions;
    	      this.requestInterval = defaults.requestInterval;
    	      this.resourcePath = defaults.resourcePath;
    	      this.routingControlArn = defaults.routingControlArn;
    	      this.searchString = defaults.searchString;
    	      this.type = defaults.type;
        }

        public Builder alarmIdentifier(@Nullable HealthCheckAlarmIdentifier alarmIdentifier) {
            this.alarmIdentifier = alarmIdentifier;
            return this;
        }
        public Builder childHealthChecks(@Nullable List<String> childHealthChecks) {
            this.childHealthChecks = childHealthChecks;
            return this;
        }
        public Builder childHealthChecks(String... childHealthChecks) {
            return childHealthChecks(List.of(childHealthChecks));
        }
        public Builder enableSNI(@Nullable Boolean enableSNI) {
            this.enableSNI = enableSNI;
            return this;
        }
        public Builder failureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }
        public Builder fullyQualifiedDomainName(@Nullable String fullyQualifiedDomainName) {
            this.fullyQualifiedDomainName = fullyQualifiedDomainName;
            return this;
        }
        public Builder healthThreshold(@Nullable Integer healthThreshold) {
            this.healthThreshold = healthThreshold;
            return this;
        }
        public Builder iPAddress(@Nullable String iPAddress) {
            this.iPAddress = iPAddress;
            return this;
        }
        public Builder insufficientDataHealthStatus(@Nullable HealthCheckConfigPropertiesInsufficientDataHealthStatus insufficientDataHealthStatus) {
            this.insufficientDataHealthStatus = insufficientDataHealthStatus;
            return this;
        }
        public Builder inverted(@Nullable Boolean inverted) {
            this.inverted = inverted;
            return this;
        }
        public Builder measureLatency(@Nullable Boolean measureLatency) {
            this.measureLatency = measureLatency;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public Builder regions(@Nullable List<String> regions) {
            this.regions = regions;
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        public Builder requestInterval(@Nullable Integer requestInterval) {
            this.requestInterval = requestInterval;
            return this;
        }
        public Builder resourcePath(@Nullable String resourcePath) {
            this.resourcePath = resourcePath;
            return this;
        }
        public Builder routingControlArn(@Nullable String routingControlArn) {
            this.routingControlArn = routingControlArn;
            return this;
        }
        public Builder searchString(@Nullable String searchString) {
            this.searchString = searchString;
            return this;
        }
        public Builder type(HealthCheckConfigPropertiesType type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public HealthCheckConfigProperties build() {
            return new HealthCheckConfigProperties(alarmIdentifier, childHealthChecks, enableSNI, failureThreshold, fullyQualifiedDomainName, healthThreshold, iPAddress, insufficientDataHealthStatus, inverted, measureLatency, port, regions, requestInterval, resourcePath, routingControlArn, searchString, type);
        }
    }
}
