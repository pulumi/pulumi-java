// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.frauddetector;

import io.pulumi.awsnative.frauddetector.enums.DetectorRuleExecutionMode;
import io.pulumi.awsnative.frauddetector.enums.DetectorVersionStatus;
import io.pulumi.awsnative.frauddetector.inputs.DetectorEventTypeArgs;
import io.pulumi.awsnative.frauddetector.inputs.DetectorModelArgs;
import io.pulumi.awsnative.frauddetector.inputs.DetectorRuleArgs;
import io.pulumi.awsnative.frauddetector.inputs.DetectorTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DetectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final DetectorArgs Empty = new DetectorArgs();

    /**
     * The models to associate with this detector.
     * 
     */
    @InputImport(name="associatedModels")
      private final @Nullable Output<List<DetectorModelArgs>> associatedModels;

    public Output<List<DetectorModelArgs>> getAssociatedModels() {
        return this.associatedModels == null ? Output.empty() : this.associatedModels;
    }

    /**
     * The description of the detector.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The ID of the detector
     * 
     */
    @InputImport(name="detectorId", required=true)
      private final Output<String> detectorId;

    public Output<String> getDetectorId() {
        return this.detectorId;
    }

    /**
     * The desired detector version status for the detector
     * 
     */
    @InputImport(name="detectorVersionStatus")
      private final @Nullable Output<DetectorVersionStatus> detectorVersionStatus;

    public Output<DetectorVersionStatus> getDetectorVersionStatus() {
        return this.detectorVersionStatus == null ? Output.empty() : this.detectorVersionStatus;
    }

    /**
     * The event type to associate this detector with.
     * 
     */
    @InputImport(name="eventType", required=true)
      private final Output<DetectorEventTypeArgs> eventType;

    public Output<DetectorEventTypeArgs> getEventType() {
        return this.eventType;
    }

    @InputImport(name="ruleExecutionMode")
      private final @Nullable Output<DetectorRuleExecutionMode> ruleExecutionMode;

    public Output<DetectorRuleExecutionMode> getRuleExecutionMode() {
        return this.ruleExecutionMode == null ? Output.empty() : this.ruleExecutionMode;
    }

    @InputImport(name="rules", required=true)
      private final Output<List<DetectorRuleArgs>> rules;

    public Output<List<DetectorRuleArgs>> getRules() {
        return this.rules;
    }

    /**
     * Tags associated with this detector.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<List<DetectorTagArgs>> tags;

    public Output<List<DetectorTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DetectorArgs(
        @Nullable Output<List<DetectorModelArgs>> associatedModels,
        @Nullable Output<String> description,
        Output<String> detectorId,
        @Nullable Output<DetectorVersionStatus> detectorVersionStatus,
        Output<DetectorEventTypeArgs> eventType,
        @Nullable Output<DetectorRuleExecutionMode> ruleExecutionMode,
        Output<List<DetectorRuleArgs>> rules,
        @Nullable Output<List<DetectorTagArgs>> tags) {
        this.associatedModels = associatedModels;
        this.description = description;
        this.detectorId = Objects.requireNonNull(detectorId, "expected parameter 'detectorId' to be non-null");
        this.detectorVersionStatus = detectorVersionStatus;
        this.eventType = Objects.requireNonNull(eventType, "expected parameter 'eventType' to be non-null");
        this.ruleExecutionMode = ruleExecutionMode;
        this.rules = Objects.requireNonNull(rules, "expected parameter 'rules' to be non-null");
        this.tags = tags;
    }

    private DetectorArgs() {
        this.associatedModels = Output.empty();
        this.description = Output.empty();
        this.detectorId = Output.empty();
        this.detectorVersionStatus = Output.empty();
        this.eventType = Output.empty();
        this.ruleExecutionMode = Output.empty();
        this.rules = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DetectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<DetectorModelArgs>> associatedModels;
        private @Nullable Output<String> description;
        private Output<String> detectorId;
        private @Nullable Output<DetectorVersionStatus> detectorVersionStatus;
        private Output<DetectorEventTypeArgs> eventType;
        private @Nullable Output<DetectorRuleExecutionMode> ruleExecutionMode;
        private Output<List<DetectorRuleArgs>> rules;
        private @Nullable Output<List<DetectorTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DetectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedModels = defaults.associatedModels;
    	      this.description = defaults.description;
    	      this.detectorId = defaults.detectorId;
    	      this.detectorVersionStatus = defaults.detectorVersionStatus;
    	      this.eventType = defaults.eventType;
    	      this.ruleExecutionMode = defaults.ruleExecutionMode;
    	      this.rules = defaults.rules;
    	      this.tags = defaults.tags;
        }

        public Builder associatedModels(@Nullable Output<List<DetectorModelArgs>> associatedModels) {
            this.associatedModels = associatedModels;
            return this;
        }

        public Builder associatedModels(@Nullable List<DetectorModelArgs> associatedModels) {
            this.associatedModels = Output.ofNullable(associatedModels);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder detectorId(Output<String> detectorId) {
            this.detectorId = Objects.requireNonNull(detectorId);
            return this;
        }

        public Builder detectorId(String detectorId) {
            this.detectorId = Output.of(Objects.requireNonNull(detectorId));
            return this;
        }

        public Builder detectorVersionStatus(@Nullable Output<DetectorVersionStatus> detectorVersionStatus) {
            this.detectorVersionStatus = detectorVersionStatus;
            return this;
        }

        public Builder detectorVersionStatus(@Nullable DetectorVersionStatus detectorVersionStatus) {
            this.detectorVersionStatus = Output.ofNullable(detectorVersionStatus);
            return this;
        }

        public Builder eventType(Output<DetectorEventTypeArgs> eventType) {
            this.eventType = Objects.requireNonNull(eventType);
            return this;
        }

        public Builder eventType(DetectorEventTypeArgs eventType) {
            this.eventType = Output.of(Objects.requireNonNull(eventType));
            return this;
        }

        public Builder ruleExecutionMode(@Nullable Output<DetectorRuleExecutionMode> ruleExecutionMode) {
            this.ruleExecutionMode = ruleExecutionMode;
            return this;
        }

        public Builder ruleExecutionMode(@Nullable DetectorRuleExecutionMode ruleExecutionMode) {
            this.ruleExecutionMode = Output.ofNullable(ruleExecutionMode);
            return this;
        }

        public Builder rules(Output<List<DetectorRuleArgs>> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }

        public Builder rules(List<DetectorRuleArgs> rules) {
            this.rules = Output.of(Objects.requireNonNull(rules));
            return this;
        }

        public Builder tags(@Nullable Output<List<DetectorTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<DetectorTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DetectorArgs build() {
            return new DetectorArgs(associatedModels, description, detectorId, detectorVersionStatus, eventType, ruleExecutionMode, rules, tags);
        }
    }
}
