// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kendra.inputs;

import io.pulumi.awsnative.kendra.enums.DataSourceDatabaseEngineType;
import io.pulumi.awsnative.kendra.inputs.DataSourceAclConfiguration;
import io.pulumi.awsnative.kendra.inputs.DataSourceColumnConfiguration;
import io.pulumi.awsnative.kendra.inputs.DataSourceConnectionConfiguration;
import io.pulumi.awsnative.kendra.inputs.DataSourceSqlConfiguration;
import io.pulumi.awsnative.kendra.inputs.DataSourceVpcConfiguration;
import io.pulumi.core.annotations.InputImport;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceDatabaseConfiguration extends io.pulumi.resources.InvokeArgs {

    public static final DataSourceDatabaseConfiguration Empty = new DataSourceDatabaseConfiguration();

    @InputImport(name="aclConfiguration")
      private final @Nullable DataSourceAclConfiguration aclConfiguration;

    public Optional<DataSourceAclConfiguration> getAclConfiguration() {
        return this.aclConfiguration == null ? Optional.empty() : Optional.ofNullable(this.aclConfiguration);
    }

    @InputImport(name="columnConfiguration", required=true)
      private final DataSourceColumnConfiguration columnConfiguration;

    public DataSourceColumnConfiguration getColumnConfiguration() {
        return this.columnConfiguration;
    }

    @InputImport(name="connectionConfiguration", required=true)
      private final DataSourceConnectionConfiguration connectionConfiguration;

    public DataSourceConnectionConfiguration getConnectionConfiguration() {
        return this.connectionConfiguration;
    }

    @InputImport(name="databaseEngineType", required=true)
      private final DataSourceDatabaseEngineType databaseEngineType;

    public DataSourceDatabaseEngineType getDatabaseEngineType() {
        return this.databaseEngineType;
    }

    @InputImport(name="sqlConfiguration")
      private final @Nullable DataSourceSqlConfiguration sqlConfiguration;

    public Optional<DataSourceSqlConfiguration> getSqlConfiguration() {
        return this.sqlConfiguration == null ? Optional.empty() : Optional.ofNullable(this.sqlConfiguration);
    }

    @InputImport(name="vpcConfiguration")
      private final @Nullable DataSourceVpcConfiguration vpcConfiguration;

    public Optional<DataSourceVpcConfiguration> getVpcConfiguration() {
        return this.vpcConfiguration == null ? Optional.empty() : Optional.ofNullable(this.vpcConfiguration);
    }

    public DataSourceDatabaseConfiguration(
        @Nullable DataSourceAclConfiguration aclConfiguration,
        DataSourceColumnConfiguration columnConfiguration,
        DataSourceConnectionConfiguration connectionConfiguration,
        DataSourceDatabaseEngineType databaseEngineType,
        @Nullable DataSourceSqlConfiguration sqlConfiguration,
        @Nullable DataSourceVpcConfiguration vpcConfiguration) {
        this.aclConfiguration = aclConfiguration;
        this.columnConfiguration = Objects.requireNonNull(columnConfiguration, "expected parameter 'columnConfiguration' to be non-null");
        this.connectionConfiguration = Objects.requireNonNull(connectionConfiguration, "expected parameter 'connectionConfiguration' to be non-null");
        this.databaseEngineType = Objects.requireNonNull(databaseEngineType, "expected parameter 'databaseEngineType' to be non-null");
        this.sqlConfiguration = sqlConfiguration;
        this.vpcConfiguration = vpcConfiguration;
    }

    private DataSourceDatabaseConfiguration() {
        this.aclConfiguration = null;
        this.columnConfiguration = null;
        this.connectionConfiguration = null;
        this.databaseEngineType = null;
        this.sqlConfiguration = null;
        this.vpcConfiguration = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceDatabaseConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable DataSourceAclConfiguration aclConfiguration;
        private DataSourceColumnConfiguration columnConfiguration;
        private DataSourceConnectionConfiguration connectionConfiguration;
        private DataSourceDatabaseEngineType databaseEngineType;
        private @Nullable DataSourceSqlConfiguration sqlConfiguration;
        private @Nullable DataSourceVpcConfiguration vpcConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceDatabaseConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclConfiguration = defaults.aclConfiguration;
    	      this.columnConfiguration = defaults.columnConfiguration;
    	      this.connectionConfiguration = defaults.connectionConfiguration;
    	      this.databaseEngineType = defaults.databaseEngineType;
    	      this.sqlConfiguration = defaults.sqlConfiguration;
    	      this.vpcConfiguration = defaults.vpcConfiguration;
        }

        public Builder aclConfiguration(@Nullable DataSourceAclConfiguration aclConfiguration) {
            this.aclConfiguration = aclConfiguration;
            return this;
        }

        public Builder columnConfiguration(DataSourceColumnConfiguration columnConfiguration) {
            this.columnConfiguration = Objects.requireNonNull(columnConfiguration);
            return this;
        }

        public Builder connectionConfiguration(DataSourceConnectionConfiguration connectionConfiguration) {
            this.connectionConfiguration = Objects.requireNonNull(connectionConfiguration);
            return this;
        }

        public Builder databaseEngineType(DataSourceDatabaseEngineType databaseEngineType) {
            this.databaseEngineType = Objects.requireNonNull(databaseEngineType);
            return this;
        }

        public Builder sqlConfiguration(@Nullable DataSourceSqlConfiguration sqlConfiguration) {
            this.sqlConfiguration = sqlConfiguration;
            return this;
        }

        public Builder vpcConfiguration(@Nullable DataSourceVpcConfiguration vpcConfiguration) {
            this.vpcConfiguration = vpcConfiguration;
            return this;
        }
        public DataSourceDatabaseConfiguration build() {
            return new DataSourceDatabaseConfiguration(aclConfiguration, columnConfiguration, connectionConfiguration, databaseEngineType, sqlConfiguration, vpcConfiguration);
        }
    }
}
