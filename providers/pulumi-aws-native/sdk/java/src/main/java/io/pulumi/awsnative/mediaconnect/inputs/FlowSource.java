// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.mediaconnect.inputs;

import io.pulumi.awsnative.mediaconnect.enums.FlowSourceProtocol;
import io.pulumi.awsnative.mediaconnect.inputs.FlowEncryption;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowSource extends io.pulumi.resources.InvokeArgs {

    public static final FlowSource Empty = new FlowSource();

    @InputImport(name="decryption")
    private final @Nullable FlowEncryption decryption;

    public Optional<FlowEncryption> getDecryption() {
        return this.decryption == null ? Optional.empty() : Optional.ofNullable(this.decryption);
    }

    @InputImport(name="description")
    private final @Nullable String description;

    public Optional<String> getDescription() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    @InputImport(name="entitlementArn")
    private final @Nullable String entitlementArn;

    public Optional<String> getEntitlementArn() {
        return this.entitlementArn == null ? Optional.empty() : Optional.ofNullable(this.entitlementArn);
    }

    @InputImport(name="ingestIp")
    private final @Nullable String ingestIp;

    public Optional<String> getIngestIp() {
        return this.ingestIp == null ? Optional.empty() : Optional.ofNullable(this.ingestIp);
    }

    @InputImport(name="ingestPort")
    private final @Nullable Integer ingestPort;

    public Optional<Integer> getIngestPort() {
        return this.ingestPort == null ? Optional.empty() : Optional.ofNullable(this.ingestPort);
    }

    @InputImport(name="maxBitrate")
    private final @Nullable Integer maxBitrate;

    public Optional<Integer> getMaxBitrate() {
        return this.maxBitrate == null ? Optional.empty() : Optional.ofNullable(this.maxBitrate);
    }

    @InputImport(name="maxLatency")
    private final @Nullable Integer maxLatency;

    public Optional<Integer> getMaxLatency() {
        return this.maxLatency == null ? Optional.empty() : Optional.ofNullable(this.maxLatency);
    }

    @InputImport(name="minLatency")
    private final @Nullable Integer minLatency;

    public Optional<Integer> getMinLatency() {
        return this.minLatency == null ? Optional.empty() : Optional.ofNullable(this.minLatency);
    }

    @InputImport(name="name")
    private final @Nullable String name;

    public Optional<String> getName() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    @InputImport(name="protocol")
    private final @Nullable FlowSourceProtocol protocol;

    public Optional<FlowSourceProtocol> getProtocol() {
        return this.protocol == null ? Optional.empty() : Optional.ofNullable(this.protocol);
    }

    @InputImport(name="sourceArn")
    private final @Nullable String sourceArn;

    public Optional<String> getSourceArn() {
        return this.sourceArn == null ? Optional.empty() : Optional.ofNullable(this.sourceArn);
    }

    @InputImport(name="sourceIngestPort")
    private final @Nullable String sourceIngestPort;

    public Optional<String> getSourceIngestPort() {
        return this.sourceIngestPort == null ? Optional.empty() : Optional.ofNullable(this.sourceIngestPort);
    }

    @InputImport(name="streamId")
    private final @Nullable String streamId;

    public Optional<String> getStreamId() {
        return this.streamId == null ? Optional.empty() : Optional.ofNullable(this.streamId);
    }

    @InputImport(name="vpcInterfaceName")
    private final @Nullable String vpcInterfaceName;

    public Optional<String> getVpcInterfaceName() {
        return this.vpcInterfaceName == null ? Optional.empty() : Optional.ofNullable(this.vpcInterfaceName);
    }

    @InputImport(name="whitelistCidr")
    private final @Nullable String whitelistCidr;

    public Optional<String> getWhitelistCidr() {
        return this.whitelistCidr == null ? Optional.empty() : Optional.ofNullable(this.whitelistCidr);
    }

    public FlowSource(
        @Nullable FlowEncryption decryption,
        @Nullable String description,
        @Nullable String entitlementArn,
        @Nullable String ingestIp,
        @Nullable Integer ingestPort,
        @Nullable Integer maxBitrate,
        @Nullable Integer maxLatency,
        @Nullable Integer minLatency,
        @Nullable String name,
        @Nullable FlowSourceProtocol protocol,
        @Nullable String sourceArn,
        @Nullable String sourceIngestPort,
        @Nullable String streamId,
        @Nullable String vpcInterfaceName,
        @Nullable String whitelistCidr) {
        this.decryption = decryption;
        this.description = description;
        this.entitlementArn = entitlementArn;
        this.ingestIp = ingestIp;
        this.ingestPort = ingestPort;
        this.maxBitrate = maxBitrate;
        this.maxLatency = maxLatency;
        this.minLatency = minLatency;
        this.name = name;
        this.protocol = protocol;
        this.sourceArn = sourceArn;
        this.sourceIngestPort = sourceIngestPort;
        this.streamId = streamId;
        this.vpcInterfaceName = vpcInterfaceName;
        this.whitelistCidr = whitelistCidr;
    }

    private FlowSource() {
        this.decryption = null;
        this.description = null;
        this.entitlementArn = null;
        this.ingestIp = null;
        this.ingestPort = null;
        this.maxBitrate = null;
        this.maxLatency = null;
        this.minLatency = null;
        this.name = null;
        this.protocol = null;
        this.sourceArn = null;
        this.sourceIngestPort = null;
        this.streamId = null;
        this.vpcInterfaceName = null;
        this.whitelistCidr = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable FlowEncryption decryption;
        private @Nullable String description;
        private @Nullable String entitlementArn;
        private @Nullable String ingestIp;
        private @Nullable Integer ingestPort;
        private @Nullable Integer maxBitrate;
        private @Nullable Integer maxLatency;
        private @Nullable Integer minLatency;
        private @Nullable String name;
        private @Nullable FlowSourceProtocol protocol;
        private @Nullable String sourceArn;
        private @Nullable String sourceIngestPort;
        private @Nullable String streamId;
        private @Nullable String vpcInterfaceName;
        private @Nullable String whitelistCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decryption = defaults.decryption;
    	      this.description = defaults.description;
    	      this.entitlementArn = defaults.entitlementArn;
    	      this.ingestIp = defaults.ingestIp;
    	      this.ingestPort = defaults.ingestPort;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.maxLatency = defaults.maxLatency;
    	      this.minLatency = defaults.minLatency;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.sourceArn = defaults.sourceArn;
    	      this.sourceIngestPort = defaults.sourceIngestPort;
    	      this.streamId = defaults.streamId;
    	      this.vpcInterfaceName = defaults.vpcInterfaceName;
    	      this.whitelistCidr = defaults.whitelistCidr;
        }

        public Builder setDecryption(@Nullable FlowEncryption decryption) {
            this.decryption = decryption;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setEntitlementArn(@Nullable String entitlementArn) {
            this.entitlementArn = entitlementArn;
            return this;
        }

        public Builder setIngestIp(@Nullable String ingestIp) {
            this.ingestIp = ingestIp;
            return this;
        }

        public Builder setIngestPort(@Nullable Integer ingestPort) {
            this.ingestPort = ingestPort;
            return this;
        }

        public Builder setMaxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }

        public Builder setMaxLatency(@Nullable Integer maxLatency) {
            this.maxLatency = maxLatency;
            return this;
        }

        public Builder setMinLatency(@Nullable Integer minLatency) {
            this.minLatency = minLatency;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setProtocol(@Nullable FlowSourceProtocol protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setSourceArn(@Nullable String sourceArn) {
            this.sourceArn = sourceArn;
            return this;
        }

        public Builder setSourceIngestPort(@Nullable String sourceIngestPort) {
            this.sourceIngestPort = sourceIngestPort;
            return this;
        }

        public Builder setStreamId(@Nullable String streamId) {
            this.streamId = streamId;
            return this;
        }

        public Builder setVpcInterfaceName(@Nullable String vpcInterfaceName) {
            this.vpcInterfaceName = vpcInterfaceName;
            return this;
        }

        public Builder setWhitelistCidr(@Nullable String whitelistCidr) {
            this.whitelistCidr = whitelistCidr;
            return this;
        }

        public FlowSource build() {
            return new FlowSource(decryption, description, entitlementArn, ingestIp, ingestPort, maxBitrate, maxLatency, minLatency, name, protocol, sourceArn, sourceIngestPort, streamId, vpcInterfaceName, whitelistCidr);
        }
    }
}
