// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudtrail;

import io.pulumi.awsnative.cloudtrail.inputs.TrailEventSelectorArgs;
import io.pulumi.awsnative.cloudtrail.inputs.TrailInsightSelectorArgs;
import io.pulumi.awsnative.cloudtrail.inputs.TrailTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrailArgs extends io.pulumi.resources.ResourceArgs {

    public static final TrailArgs Empty = new TrailArgs();

    /**
     * Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
     * 
     */
    @InputImport(name="cloudWatchLogsLogGroupArn")
        private final @Nullable Input<String> cloudWatchLogsLogGroupArn;

    public Input<String> getCloudWatchLogsLogGroupArn() {
        return this.cloudWatchLogsLogGroupArn == null ? Input.empty() : this.cloudWatchLogsLogGroupArn;
    }

    /**
     * Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
     * 
     */
    @InputImport(name="cloudWatchLogsRoleArn")
        private final @Nullable Input<String> cloudWatchLogsRoleArn;

    public Input<String> getCloudWatchLogsRoleArn() {
        return this.cloudWatchLogsRoleArn == null ? Input.empty() : this.cloudWatchLogsRoleArn;
    }

    /**
     * Specifies whether log file validation is enabled. The default is false.
     * 
     */
    @InputImport(name="enableLogFileValidation")
        private final @Nullable Input<Boolean> enableLogFileValidation;

    public Input<Boolean> getEnableLogFileValidation() {
        return this.enableLogFileValidation == null ? Input.empty() : this.enableLogFileValidation;
    }

    /**
     * Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the trail doesn't log the event. You can configure up to five event selectors for a trail.
     * 
     */
    @InputImport(name="eventSelectors")
        private final @Nullable Input<List<TrailEventSelectorArgs>> eventSelectors;

    public Input<List<TrailEventSelectorArgs>> getEventSelectors() {
        return this.eventSelectors == null ? Input.empty() : this.eventSelectors;
    }

    /**
     * Specifies whether the trail is publishing events from global services such as IAM to the log files.
     * 
     */
    @InputImport(name="includeGlobalServiceEvents")
        private final @Nullable Input<Boolean> includeGlobalServiceEvents;

    public Input<Boolean> getIncludeGlobalServiceEvents() {
        return this.includeGlobalServiceEvents == null ? Input.empty() : this.includeGlobalServiceEvents;
    }

    /**
     * Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail.
     * 
     */
    @InputImport(name="insightSelectors")
        private final @Nullable Input<List<TrailInsightSelectorArgs>> insightSelectors;

    public Input<List<TrailInsightSelectorArgs>> getInsightSelectors() {
        return this.insightSelectors == null ? Input.empty() : this.insightSelectors;
    }

    /**
     * Whether the CloudTrail is currently logging AWS API calls.
     * 
     */
    @InputImport(name="isLogging", required=true)
        private final Input<Boolean> isLogging;

    public Input<Boolean> getIsLogging() {
        return this.isLogging;
    }

    /**
     * Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails that log events in all regions.
     * 
     */
    @InputImport(name="isMultiRegionTrail")
        private final @Nullable Input<Boolean> isMultiRegionTrail;

    public Input<Boolean> getIsMultiRegionTrail() {
        return this.isMultiRegionTrail == null ? Input.empty() : this.isMultiRegionTrail;
    }

    /**
     * Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
     * 
     */
    @InputImport(name="isOrganizationTrail")
        private final @Nullable Input<Boolean> isOrganizationTrail;

    public Input<Boolean> getIsOrganizationTrail() {
        return this.isOrganizationTrail == null ? Input.empty() : this.isOrganizationTrail;
    }

    /**
     * Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
     * 
     */
    @InputImport(name="kMSKeyId")
        private final @Nullable Input<String> kMSKeyId;

    public Input<String> getKMSKeyId() {
        return this.kMSKeyId == null ? Input.empty() : this.kMSKeyId;
    }

    /**
     * Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
     * 
     */
    @InputImport(name="s3BucketName", required=true)
        private final Input<String> s3BucketName;

    public Input<String> getS3BucketName() {
        return this.s3BucketName;
    }

    /**
     * Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
     * 
     */
    @InputImport(name="s3KeyPrefix")
        private final @Nullable Input<String> s3KeyPrefix;

    public Input<String> getS3KeyPrefix() {
        return this.s3KeyPrefix == null ? Input.empty() : this.s3KeyPrefix;
    }

    /**
     * Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
     * 
     */
    @InputImport(name="snsTopicName")
        private final @Nullable Input<String> snsTopicName;

    public Input<String> getSnsTopicName() {
        return this.snsTopicName == null ? Input.empty() : this.snsTopicName;
    }

    @InputImport(name="tags")
        private final @Nullable Input<List<TrailTagArgs>> tags;

    public Input<List<TrailTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="trailName")
        private final @Nullable Input<String> trailName;

    public Input<String> getTrailName() {
        return this.trailName == null ? Input.empty() : this.trailName;
    }

    public TrailArgs(
        @Nullable Input<String> cloudWatchLogsLogGroupArn,
        @Nullable Input<String> cloudWatchLogsRoleArn,
        @Nullable Input<Boolean> enableLogFileValidation,
        @Nullable Input<List<TrailEventSelectorArgs>> eventSelectors,
        @Nullable Input<Boolean> includeGlobalServiceEvents,
        @Nullable Input<List<TrailInsightSelectorArgs>> insightSelectors,
        Input<Boolean> isLogging,
        @Nullable Input<Boolean> isMultiRegionTrail,
        @Nullable Input<Boolean> isOrganizationTrail,
        @Nullable Input<String> kMSKeyId,
        Input<String> s3BucketName,
        @Nullable Input<String> s3KeyPrefix,
        @Nullable Input<String> snsTopicName,
        @Nullable Input<List<TrailTagArgs>> tags,
        @Nullable Input<String> trailName) {
        this.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn;
        this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
        this.enableLogFileValidation = enableLogFileValidation;
        this.eventSelectors = eventSelectors;
        this.includeGlobalServiceEvents = includeGlobalServiceEvents;
        this.insightSelectors = insightSelectors;
        this.isLogging = Objects.requireNonNull(isLogging, "expected parameter 'isLogging' to be non-null");
        this.isMultiRegionTrail = isMultiRegionTrail;
        this.isOrganizationTrail = isOrganizationTrail;
        this.kMSKeyId = kMSKeyId;
        this.s3BucketName = Objects.requireNonNull(s3BucketName, "expected parameter 's3BucketName' to be non-null");
        this.s3KeyPrefix = s3KeyPrefix;
        this.snsTopicName = snsTopicName;
        this.tags = tags;
        this.trailName = trailName;
    }

    private TrailArgs() {
        this.cloudWatchLogsLogGroupArn = Input.empty();
        this.cloudWatchLogsRoleArn = Input.empty();
        this.enableLogFileValidation = Input.empty();
        this.eventSelectors = Input.empty();
        this.includeGlobalServiceEvents = Input.empty();
        this.insightSelectors = Input.empty();
        this.isLogging = Input.empty();
        this.isMultiRegionTrail = Input.empty();
        this.isOrganizationTrail = Input.empty();
        this.kMSKeyId = Input.empty();
        this.s3BucketName = Input.empty();
        this.s3KeyPrefix = Input.empty();
        this.snsTopicName = Input.empty();
        this.tags = Input.empty();
        this.trailName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cloudWatchLogsLogGroupArn;
        private @Nullable Input<String> cloudWatchLogsRoleArn;
        private @Nullable Input<Boolean> enableLogFileValidation;
        private @Nullable Input<List<TrailEventSelectorArgs>> eventSelectors;
        private @Nullable Input<Boolean> includeGlobalServiceEvents;
        private @Nullable Input<List<TrailInsightSelectorArgs>> insightSelectors;
        private Input<Boolean> isLogging;
        private @Nullable Input<Boolean> isMultiRegionTrail;
        private @Nullable Input<Boolean> isOrganizationTrail;
        private @Nullable Input<String> kMSKeyId;
        private Input<String> s3BucketName;
        private @Nullable Input<String> s3KeyPrefix;
        private @Nullable Input<String> snsTopicName;
        private @Nullable Input<List<TrailTagArgs>> tags;
        private @Nullable Input<String> trailName;

        public Builder() {
    	      // Empty
        }

        public Builder(TrailArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLogsLogGroupArn = defaults.cloudWatchLogsLogGroupArn;
    	      this.cloudWatchLogsRoleArn = defaults.cloudWatchLogsRoleArn;
    	      this.enableLogFileValidation = defaults.enableLogFileValidation;
    	      this.eventSelectors = defaults.eventSelectors;
    	      this.includeGlobalServiceEvents = defaults.includeGlobalServiceEvents;
    	      this.insightSelectors = defaults.insightSelectors;
    	      this.isLogging = defaults.isLogging;
    	      this.isMultiRegionTrail = defaults.isMultiRegionTrail;
    	      this.isOrganizationTrail = defaults.isOrganizationTrail;
    	      this.kMSKeyId = defaults.kMSKeyId;
    	      this.s3BucketName = defaults.s3BucketName;
    	      this.s3KeyPrefix = defaults.s3KeyPrefix;
    	      this.snsTopicName = defaults.snsTopicName;
    	      this.tags = defaults.tags;
    	      this.trailName = defaults.trailName;
        }

        public Builder setCloudWatchLogsLogGroupArn(@Nullable Input<String> cloudWatchLogsLogGroupArn) {
            this.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn;
            return this;
        }

        public Builder setCloudWatchLogsLogGroupArn(@Nullable String cloudWatchLogsLogGroupArn) {
            this.cloudWatchLogsLogGroupArn = Input.ofNullable(cloudWatchLogsLogGroupArn);
            return this;
        }

        public Builder setCloudWatchLogsRoleArn(@Nullable Input<String> cloudWatchLogsRoleArn) {
            this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
            return this;
        }

        public Builder setCloudWatchLogsRoleArn(@Nullable String cloudWatchLogsRoleArn) {
            this.cloudWatchLogsRoleArn = Input.ofNullable(cloudWatchLogsRoleArn);
            return this;
        }

        public Builder setEnableLogFileValidation(@Nullable Input<Boolean> enableLogFileValidation) {
            this.enableLogFileValidation = enableLogFileValidation;
            return this;
        }

        public Builder setEnableLogFileValidation(@Nullable Boolean enableLogFileValidation) {
            this.enableLogFileValidation = Input.ofNullable(enableLogFileValidation);
            return this;
        }

        public Builder setEventSelectors(@Nullable Input<List<TrailEventSelectorArgs>> eventSelectors) {
            this.eventSelectors = eventSelectors;
            return this;
        }

        public Builder setEventSelectors(@Nullable List<TrailEventSelectorArgs> eventSelectors) {
            this.eventSelectors = Input.ofNullable(eventSelectors);
            return this;
        }

        public Builder setIncludeGlobalServiceEvents(@Nullable Input<Boolean> includeGlobalServiceEvents) {
            this.includeGlobalServiceEvents = includeGlobalServiceEvents;
            return this;
        }

        public Builder setIncludeGlobalServiceEvents(@Nullable Boolean includeGlobalServiceEvents) {
            this.includeGlobalServiceEvents = Input.ofNullable(includeGlobalServiceEvents);
            return this;
        }

        public Builder setInsightSelectors(@Nullable Input<List<TrailInsightSelectorArgs>> insightSelectors) {
            this.insightSelectors = insightSelectors;
            return this;
        }

        public Builder setInsightSelectors(@Nullable List<TrailInsightSelectorArgs> insightSelectors) {
            this.insightSelectors = Input.ofNullable(insightSelectors);
            return this;
        }

        public Builder setIsLogging(Input<Boolean> isLogging) {
            this.isLogging = Objects.requireNonNull(isLogging);
            return this;
        }

        public Builder setIsLogging(Boolean isLogging) {
            this.isLogging = Input.of(Objects.requireNonNull(isLogging));
            return this;
        }

        public Builder setIsMultiRegionTrail(@Nullable Input<Boolean> isMultiRegionTrail) {
            this.isMultiRegionTrail = isMultiRegionTrail;
            return this;
        }

        public Builder setIsMultiRegionTrail(@Nullable Boolean isMultiRegionTrail) {
            this.isMultiRegionTrail = Input.ofNullable(isMultiRegionTrail);
            return this;
        }

        public Builder setIsOrganizationTrail(@Nullable Input<Boolean> isOrganizationTrail) {
            this.isOrganizationTrail = isOrganizationTrail;
            return this;
        }

        public Builder setIsOrganizationTrail(@Nullable Boolean isOrganizationTrail) {
            this.isOrganizationTrail = Input.ofNullable(isOrganizationTrail);
            return this;
        }

        public Builder setKMSKeyId(@Nullable Input<String> kMSKeyId) {
            this.kMSKeyId = kMSKeyId;
            return this;
        }

        public Builder setKMSKeyId(@Nullable String kMSKeyId) {
            this.kMSKeyId = Input.ofNullable(kMSKeyId);
            return this;
        }

        public Builder setS3BucketName(Input<String> s3BucketName) {
            this.s3BucketName = Objects.requireNonNull(s3BucketName);
            return this;
        }

        public Builder setS3BucketName(String s3BucketName) {
            this.s3BucketName = Input.of(Objects.requireNonNull(s3BucketName));
            return this;
        }

        public Builder setS3KeyPrefix(@Nullable Input<String> s3KeyPrefix) {
            this.s3KeyPrefix = s3KeyPrefix;
            return this;
        }

        public Builder setS3KeyPrefix(@Nullable String s3KeyPrefix) {
            this.s3KeyPrefix = Input.ofNullable(s3KeyPrefix);
            return this;
        }

        public Builder setSnsTopicName(@Nullable Input<String> snsTopicName) {
            this.snsTopicName = snsTopicName;
            return this;
        }

        public Builder setSnsTopicName(@Nullable String snsTopicName) {
            this.snsTopicName = Input.ofNullable(snsTopicName);
            return this;
        }

        public Builder setTags(@Nullable Input<List<TrailTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<TrailTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTrailName(@Nullable Input<String> trailName) {
            this.trailName = trailName;
            return this;
        }

        public Builder setTrailName(@Nullable String trailName) {
            this.trailName = Input.ofNullable(trailName);
            return this;
        }
        public TrailArgs build() {
            return new TrailArgs(cloudWatchLogsLogGroupArn, cloudWatchLogsRoleArn, enableLogFileValidation, eventSelectors, includeGlobalServiceEvents, insightSelectors, isLogging, isMultiRegionTrail, isOrganizationTrail, kMSKeyId, s3BucketName, s3KeyPrefix, snsTopicName, tags, trailName);
        }
    }
}
