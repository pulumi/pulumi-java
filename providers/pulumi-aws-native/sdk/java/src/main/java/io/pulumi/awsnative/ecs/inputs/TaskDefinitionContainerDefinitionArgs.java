// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ecs.inputs;

import io.pulumi.awsnative.ecs.inputs.TaskDefinitionContainerDependencyArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionEnvironmentFileArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionFirelensConfigurationArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionHealthCheckArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionHostEntryArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionKeyValuePairArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionLinuxParametersArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionLogConfigurationArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionMountPointArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionPortMappingArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionRepositoryCredentialsArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionResourceRequirementArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionSecretArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionSystemControlArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionUlimitArgs;
import io.pulumi.awsnative.ecs.inputs.TaskDefinitionVolumeFromArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * List of container definitions that are passed to the Docker daemon on a container instance
 * 
 */
public final class TaskDefinitionContainerDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionContainerDefinitionArgs Empty = new TaskDefinitionContainerDefinitionArgs();

    @Import(name="command")
      private final @Nullable Output<List<String>> command;

    public Output<List<String>> getCommand() {
        return this.command == null ? Output.empty() : this.command;
    }

    @Import(name="cpu")
      private final @Nullable Output<Integer> cpu;

    public Output<Integer> getCpu() {
        return this.cpu == null ? Output.empty() : this.cpu;
    }

    @Import(name="dependsOn")
      private final @Nullable Output<List<TaskDefinitionContainerDependencyArgs>> dependsOn;

    public Output<List<TaskDefinitionContainerDependencyArgs>> getDependsOn() {
        return this.dependsOn == null ? Output.empty() : this.dependsOn;
    }

    @Import(name="disableNetworking")
      private final @Nullable Output<Boolean> disableNetworking;

    public Output<Boolean> getDisableNetworking() {
        return this.disableNetworking == null ? Output.empty() : this.disableNetworking;
    }

    @Import(name="dnsSearchDomains")
      private final @Nullable Output<List<String>> dnsSearchDomains;

    public Output<List<String>> getDnsSearchDomains() {
        return this.dnsSearchDomains == null ? Output.empty() : this.dnsSearchDomains;
    }

    @Import(name="dnsServers")
      private final @Nullable Output<List<String>> dnsServers;

    public Output<List<String>> getDnsServers() {
        return this.dnsServers == null ? Output.empty() : this.dnsServers;
    }

    @Import(name="dockerLabels")
      private final @Nullable Output<Object> dockerLabels;

    public Output<Object> getDockerLabels() {
        return this.dockerLabels == null ? Output.empty() : this.dockerLabels;
    }

    @Import(name="dockerSecurityOptions")
      private final @Nullable Output<List<String>> dockerSecurityOptions;

    public Output<List<String>> getDockerSecurityOptions() {
        return this.dockerSecurityOptions == null ? Output.empty() : this.dockerSecurityOptions;
    }

    @Import(name="entryPoint")
      private final @Nullable Output<List<String>> entryPoint;

    public Output<List<String>> getEntryPoint() {
        return this.entryPoint == null ? Output.empty() : this.entryPoint;
    }

    /**
     * The environment variables to pass to a container
     * 
     */
    @Import(name="environment")
      private final @Nullable Output<List<TaskDefinitionKeyValuePairArgs>> environment;

    public Output<List<TaskDefinitionKeyValuePairArgs>> getEnvironment() {
        return this.environment == null ? Output.empty() : this.environment;
    }

    /**
     * The list of one or more files that contain the environment variables to pass to a container
     * 
     */
    @Import(name="environmentFiles")
      private final @Nullable Output<List<TaskDefinitionEnvironmentFileArgs>> environmentFiles;

    public Output<List<TaskDefinitionEnvironmentFileArgs>> getEnvironmentFiles() {
        return this.environmentFiles == null ? Output.empty() : this.environmentFiles;
    }

    @Import(name="essential")
      private final @Nullable Output<Boolean> essential;

    public Output<Boolean> getEssential() {
        return this.essential == null ? Output.empty() : this.essential;
    }

    @Import(name="extraHosts")
      private final @Nullable Output<List<TaskDefinitionHostEntryArgs>> extraHosts;

    public Output<List<TaskDefinitionHostEntryArgs>> getExtraHosts() {
        return this.extraHosts == null ? Output.empty() : this.extraHosts;
    }

    @Import(name="firelensConfiguration")
      private final @Nullable Output<TaskDefinitionFirelensConfigurationArgs> firelensConfiguration;

    public Output<TaskDefinitionFirelensConfigurationArgs> getFirelensConfiguration() {
        return this.firelensConfiguration == null ? Output.empty() : this.firelensConfiguration;
    }

    @Import(name="healthCheck")
      private final @Nullable Output<TaskDefinitionHealthCheckArgs> healthCheck;

    public Output<TaskDefinitionHealthCheckArgs> getHealthCheck() {
        return this.healthCheck == null ? Output.empty() : this.healthCheck;
    }

    @Import(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname == null ? Output.empty() : this.hostname;
    }

    /**
     * The image used to start a container. This string is passed directly to the Docker daemon.
     * 
     */
    @Import(name="image")
      private final @Nullable Output<String> image;

    public Output<String> getImage() {
        return this.image == null ? Output.empty() : this.image;
    }

    @Import(name="interactive")
      private final @Nullable Output<Boolean> interactive;

    public Output<Boolean> getInteractive() {
        return this.interactive == null ? Output.empty() : this.interactive;
    }

    @Import(name="links")
      private final @Nullable Output<List<String>> links;

    public Output<List<String>> getLinks() {
        return this.links == null ? Output.empty() : this.links;
    }

    @Import(name="linuxParameters")
      private final @Nullable Output<TaskDefinitionLinuxParametersArgs> linuxParameters;

    public Output<TaskDefinitionLinuxParametersArgs> getLinuxParameters() {
        return this.linuxParameters == null ? Output.empty() : this.linuxParameters;
    }

    @Import(name="logConfiguration")
      private final @Nullable Output<TaskDefinitionLogConfigurationArgs> logConfiguration;

    public Output<TaskDefinitionLogConfigurationArgs> getLogConfiguration() {
        return this.logConfiguration == null ? Output.empty() : this.logConfiguration;
    }

    /**
     * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
     * 
     */
    @Import(name="memory")
      private final @Nullable Output<Integer> memory;

    public Output<Integer> getMemory() {
        return this.memory == null ? Output.empty() : this.memory;
    }

    @Import(name="memoryReservation")
      private final @Nullable Output<Integer> memoryReservation;

    public Output<Integer> getMemoryReservation() {
        return this.memoryReservation == null ? Output.empty() : this.memoryReservation;
    }

    @Import(name="mountPoints")
      private final @Nullable Output<List<TaskDefinitionMountPointArgs>> mountPoints;

    public Output<List<TaskDefinitionMountPointArgs>> getMountPoints() {
        return this.mountPoints == null ? Output.empty() : this.mountPoints;
    }

    /**
     * The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Port mappings allow containers to access ports on the host container instance to send or receive traffic.
     * 
     */
    @Import(name="portMappings")
      private final @Nullable Output<List<TaskDefinitionPortMappingArgs>> portMappings;

    public Output<List<TaskDefinitionPortMappingArgs>> getPortMappings() {
        return this.portMappings == null ? Output.empty() : this.portMappings;
    }

    @Import(name="privileged")
      private final @Nullable Output<Boolean> privileged;

    public Output<Boolean> getPrivileged() {
        return this.privileged == null ? Output.empty() : this.privileged;
    }

    @Import(name="pseudoTerminal")
      private final @Nullable Output<Boolean> pseudoTerminal;

    public Output<Boolean> getPseudoTerminal() {
        return this.pseudoTerminal == null ? Output.empty() : this.pseudoTerminal;
    }

    @Import(name="readonlyRootFilesystem")
      private final @Nullable Output<Boolean> readonlyRootFilesystem;

    public Output<Boolean> getReadonlyRootFilesystem() {
        return this.readonlyRootFilesystem == null ? Output.empty() : this.readonlyRootFilesystem;
    }

    @Import(name="repositoryCredentials")
      private final @Nullable Output<TaskDefinitionRepositoryCredentialsArgs> repositoryCredentials;

    public Output<TaskDefinitionRepositoryCredentialsArgs> getRepositoryCredentials() {
        return this.repositoryCredentials == null ? Output.empty() : this.repositoryCredentials;
    }

    @Import(name="resourceRequirements")
      private final @Nullable Output<List<TaskDefinitionResourceRequirementArgs>> resourceRequirements;

    public Output<List<TaskDefinitionResourceRequirementArgs>> getResourceRequirements() {
        return this.resourceRequirements == null ? Output.empty() : this.resourceRequirements;
    }

    @Import(name="secrets")
      private final @Nullable Output<List<TaskDefinitionSecretArgs>> secrets;

    public Output<List<TaskDefinitionSecretArgs>> getSecrets() {
        return this.secrets == null ? Output.empty() : this.secrets;
    }

    @Import(name="startTimeout")
      private final @Nullable Output<Integer> startTimeout;

    public Output<Integer> getStartTimeout() {
        return this.startTimeout == null ? Output.empty() : this.startTimeout;
    }

    @Import(name="stopTimeout")
      private final @Nullable Output<Integer> stopTimeout;

    public Output<Integer> getStopTimeout() {
        return this.stopTimeout == null ? Output.empty() : this.stopTimeout;
    }

    @Import(name="systemControls")
      private final @Nullable Output<List<TaskDefinitionSystemControlArgs>> systemControls;

    public Output<List<TaskDefinitionSystemControlArgs>> getSystemControls() {
        return this.systemControls == null ? Output.empty() : this.systemControls;
    }

    @Import(name="ulimits")
      private final @Nullable Output<List<TaskDefinitionUlimitArgs>> ulimits;

    public Output<List<TaskDefinitionUlimitArgs>> getUlimits() {
        return this.ulimits == null ? Output.empty() : this.ulimits;
    }

    @Import(name="user")
      private final @Nullable Output<String> user;

    public Output<String> getUser() {
        return this.user == null ? Output.empty() : this.user;
    }

    @Import(name="volumesFrom")
      private final @Nullable Output<List<TaskDefinitionVolumeFromArgs>> volumesFrom;

    public Output<List<TaskDefinitionVolumeFromArgs>> getVolumesFrom() {
        return this.volumesFrom == null ? Output.empty() : this.volumesFrom;
    }

    @Import(name="workingDirectory")
      private final @Nullable Output<String> workingDirectory;

    public Output<String> getWorkingDirectory() {
        return this.workingDirectory == null ? Output.empty() : this.workingDirectory;
    }

    public TaskDefinitionContainerDefinitionArgs(
        @Nullable Output<List<String>> command,
        @Nullable Output<Integer> cpu,
        @Nullable Output<List<TaskDefinitionContainerDependencyArgs>> dependsOn,
        @Nullable Output<Boolean> disableNetworking,
        @Nullable Output<List<String>> dnsSearchDomains,
        @Nullable Output<List<String>> dnsServers,
        @Nullable Output<Object> dockerLabels,
        @Nullable Output<List<String>> dockerSecurityOptions,
        @Nullable Output<List<String>> entryPoint,
        @Nullable Output<List<TaskDefinitionKeyValuePairArgs>> environment,
        @Nullable Output<List<TaskDefinitionEnvironmentFileArgs>> environmentFiles,
        @Nullable Output<Boolean> essential,
        @Nullable Output<List<TaskDefinitionHostEntryArgs>> extraHosts,
        @Nullable Output<TaskDefinitionFirelensConfigurationArgs> firelensConfiguration,
        @Nullable Output<TaskDefinitionHealthCheckArgs> healthCheck,
        @Nullable Output<String> hostname,
        @Nullable Output<String> image,
        @Nullable Output<Boolean> interactive,
        @Nullable Output<List<String>> links,
        @Nullable Output<TaskDefinitionLinuxParametersArgs> linuxParameters,
        @Nullable Output<TaskDefinitionLogConfigurationArgs> logConfiguration,
        @Nullable Output<Integer> memory,
        @Nullable Output<Integer> memoryReservation,
        @Nullable Output<List<TaskDefinitionMountPointArgs>> mountPoints,
        @Nullable Output<String> name,
        @Nullable Output<List<TaskDefinitionPortMappingArgs>> portMappings,
        @Nullable Output<Boolean> privileged,
        @Nullable Output<Boolean> pseudoTerminal,
        @Nullable Output<Boolean> readonlyRootFilesystem,
        @Nullable Output<TaskDefinitionRepositoryCredentialsArgs> repositoryCredentials,
        @Nullable Output<List<TaskDefinitionResourceRequirementArgs>> resourceRequirements,
        @Nullable Output<List<TaskDefinitionSecretArgs>> secrets,
        @Nullable Output<Integer> startTimeout,
        @Nullable Output<Integer> stopTimeout,
        @Nullable Output<List<TaskDefinitionSystemControlArgs>> systemControls,
        @Nullable Output<List<TaskDefinitionUlimitArgs>> ulimits,
        @Nullable Output<String> user,
        @Nullable Output<List<TaskDefinitionVolumeFromArgs>> volumesFrom,
        @Nullable Output<String> workingDirectory) {
        this.command = command;
        this.cpu = cpu;
        this.dependsOn = dependsOn;
        this.disableNetworking = disableNetworking;
        this.dnsSearchDomains = dnsSearchDomains;
        this.dnsServers = dnsServers;
        this.dockerLabels = dockerLabels;
        this.dockerSecurityOptions = dockerSecurityOptions;
        this.entryPoint = entryPoint;
        this.environment = environment;
        this.environmentFiles = environmentFiles;
        this.essential = essential;
        this.extraHosts = extraHosts;
        this.firelensConfiguration = firelensConfiguration;
        this.healthCheck = healthCheck;
        this.hostname = hostname;
        this.image = image;
        this.interactive = interactive;
        this.links = links;
        this.linuxParameters = linuxParameters;
        this.logConfiguration = logConfiguration;
        this.memory = memory;
        this.memoryReservation = memoryReservation;
        this.mountPoints = mountPoints;
        this.name = name;
        this.portMappings = portMappings;
        this.privileged = privileged;
        this.pseudoTerminal = pseudoTerminal;
        this.readonlyRootFilesystem = readonlyRootFilesystem;
        this.repositoryCredentials = repositoryCredentials;
        this.resourceRequirements = resourceRequirements;
        this.secrets = secrets;
        this.startTimeout = startTimeout;
        this.stopTimeout = stopTimeout;
        this.systemControls = systemControls;
        this.ulimits = ulimits;
        this.user = user;
        this.volumesFrom = volumesFrom;
        this.workingDirectory = workingDirectory;
    }

    private TaskDefinitionContainerDefinitionArgs() {
        this.command = Output.empty();
        this.cpu = Output.empty();
        this.dependsOn = Output.empty();
        this.disableNetworking = Output.empty();
        this.dnsSearchDomains = Output.empty();
        this.dnsServers = Output.empty();
        this.dockerLabels = Output.empty();
        this.dockerSecurityOptions = Output.empty();
        this.entryPoint = Output.empty();
        this.environment = Output.empty();
        this.environmentFiles = Output.empty();
        this.essential = Output.empty();
        this.extraHosts = Output.empty();
        this.firelensConfiguration = Output.empty();
        this.healthCheck = Output.empty();
        this.hostname = Output.empty();
        this.image = Output.empty();
        this.interactive = Output.empty();
        this.links = Output.empty();
        this.linuxParameters = Output.empty();
        this.logConfiguration = Output.empty();
        this.memory = Output.empty();
        this.memoryReservation = Output.empty();
        this.mountPoints = Output.empty();
        this.name = Output.empty();
        this.portMappings = Output.empty();
        this.privileged = Output.empty();
        this.pseudoTerminal = Output.empty();
        this.readonlyRootFilesystem = Output.empty();
        this.repositoryCredentials = Output.empty();
        this.resourceRequirements = Output.empty();
        this.secrets = Output.empty();
        this.startTimeout = Output.empty();
        this.stopTimeout = Output.empty();
        this.systemControls = Output.empty();
        this.ulimits = Output.empty();
        this.user = Output.empty();
        this.volumesFrom = Output.empty();
        this.workingDirectory = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskDefinitionContainerDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> command;
        private @Nullable Output<Integer> cpu;
        private @Nullable Output<List<TaskDefinitionContainerDependencyArgs>> dependsOn;
        private @Nullable Output<Boolean> disableNetworking;
        private @Nullable Output<List<String>> dnsSearchDomains;
        private @Nullable Output<List<String>> dnsServers;
        private @Nullable Output<Object> dockerLabels;
        private @Nullable Output<List<String>> dockerSecurityOptions;
        private @Nullable Output<List<String>> entryPoint;
        private @Nullable Output<List<TaskDefinitionKeyValuePairArgs>> environment;
        private @Nullable Output<List<TaskDefinitionEnvironmentFileArgs>> environmentFiles;
        private @Nullable Output<Boolean> essential;
        private @Nullable Output<List<TaskDefinitionHostEntryArgs>> extraHosts;
        private @Nullable Output<TaskDefinitionFirelensConfigurationArgs> firelensConfiguration;
        private @Nullable Output<TaskDefinitionHealthCheckArgs> healthCheck;
        private @Nullable Output<String> hostname;
        private @Nullable Output<String> image;
        private @Nullable Output<Boolean> interactive;
        private @Nullable Output<List<String>> links;
        private @Nullable Output<TaskDefinitionLinuxParametersArgs> linuxParameters;
        private @Nullable Output<TaskDefinitionLogConfigurationArgs> logConfiguration;
        private @Nullable Output<Integer> memory;
        private @Nullable Output<Integer> memoryReservation;
        private @Nullable Output<List<TaskDefinitionMountPointArgs>> mountPoints;
        private @Nullable Output<String> name;
        private @Nullable Output<List<TaskDefinitionPortMappingArgs>> portMappings;
        private @Nullable Output<Boolean> privileged;
        private @Nullable Output<Boolean> pseudoTerminal;
        private @Nullable Output<Boolean> readonlyRootFilesystem;
        private @Nullable Output<TaskDefinitionRepositoryCredentialsArgs> repositoryCredentials;
        private @Nullable Output<List<TaskDefinitionResourceRequirementArgs>> resourceRequirements;
        private @Nullable Output<List<TaskDefinitionSecretArgs>> secrets;
        private @Nullable Output<Integer> startTimeout;
        private @Nullable Output<Integer> stopTimeout;
        private @Nullable Output<List<TaskDefinitionSystemControlArgs>> systemControls;
        private @Nullable Output<List<TaskDefinitionUlimitArgs>> ulimits;
        private @Nullable Output<String> user;
        private @Nullable Output<List<TaskDefinitionVolumeFromArgs>> volumesFrom;
        private @Nullable Output<String> workingDirectory;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskDefinitionContainerDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.command = defaults.command;
    	      this.cpu = defaults.cpu;
    	      this.dependsOn = defaults.dependsOn;
    	      this.disableNetworking = defaults.disableNetworking;
    	      this.dnsSearchDomains = defaults.dnsSearchDomains;
    	      this.dnsServers = defaults.dnsServers;
    	      this.dockerLabels = defaults.dockerLabels;
    	      this.dockerSecurityOptions = defaults.dockerSecurityOptions;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environment = defaults.environment;
    	      this.environmentFiles = defaults.environmentFiles;
    	      this.essential = defaults.essential;
    	      this.extraHosts = defaults.extraHosts;
    	      this.firelensConfiguration = defaults.firelensConfiguration;
    	      this.healthCheck = defaults.healthCheck;
    	      this.hostname = defaults.hostname;
    	      this.image = defaults.image;
    	      this.interactive = defaults.interactive;
    	      this.links = defaults.links;
    	      this.linuxParameters = defaults.linuxParameters;
    	      this.logConfiguration = defaults.logConfiguration;
    	      this.memory = defaults.memory;
    	      this.memoryReservation = defaults.memoryReservation;
    	      this.mountPoints = defaults.mountPoints;
    	      this.name = defaults.name;
    	      this.portMappings = defaults.portMappings;
    	      this.privileged = defaults.privileged;
    	      this.pseudoTerminal = defaults.pseudoTerminal;
    	      this.readonlyRootFilesystem = defaults.readonlyRootFilesystem;
    	      this.repositoryCredentials = defaults.repositoryCredentials;
    	      this.resourceRequirements = defaults.resourceRequirements;
    	      this.secrets = defaults.secrets;
    	      this.startTimeout = defaults.startTimeout;
    	      this.stopTimeout = defaults.stopTimeout;
    	      this.systemControls = defaults.systemControls;
    	      this.ulimits = defaults.ulimits;
    	      this.user = defaults.user;
    	      this.volumesFrom = defaults.volumesFrom;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        public Builder command(@Nullable Output<List<String>> command) {
            this.command = command;
            return this;
        }
        public Builder command(@Nullable List<String> command) {
            this.command = Output.ofNullable(command);
            return this;
        }
        public Builder command(String... command) {
            return command(List.of(command));
        }
        public Builder cpu(@Nullable Output<Integer> cpu) {
            this.cpu = cpu;
            return this;
        }
        public Builder cpu(@Nullable Integer cpu) {
            this.cpu = Output.ofNullable(cpu);
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<TaskDefinitionContainerDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<TaskDefinitionContainerDependencyArgs> dependsOn) {
            this.dependsOn = Output.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(TaskDefinitionContainerDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder disableNetworking(@Nullable Output<Boolean> disableNetworking) {
            this.disableNetworking = disableNetworking;
            return this;
        }
        public Builder disableNetworking(@Nullable Boolean disableNetworking) {
            this.disableNetworking = Output.ofNullable(disableNetworking);
            return this;
        }
        public Builder dnsSearchDomains(@Nullable Output<List<String>> dnsSearchDomains) {
            this.dnsSearchDomains = dnsSearchDomains;
            return this;
        }
        public Builder dnsSearchDomains(@Nullable List<String> dnsSearchDomains) {
            this.dnsSearchDomains = Output.ofNullable(dnsSearchDomains);
            return this;
        }
        public Builder dnsSearchDomains(String... dnsSearchDomains) {
            return dnsSearchDomains(List.of(dnsSearchDomains));
        }
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = Output.ofNullable(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder dockerLabels(@Nullable Output<Object> dockerLabels) {
            this.dockerLabels = dockerLabels;
            return this;
        }
        public Builder dockerLabels(@Nullable Object dockerLabels) {
            this.dockerLabels = Output.ofNullable(dockerLabels);
            return this;
        }
        public Builder dockerSecurityOptions(@Nullable Output<List<String>> dockerSecurityOptions) {
            this.dockerSecurityOptions = dockerSecurityOptions;
            return this;
        }
        public Builder dockerSecurityOptions(@Nullable List<String> dockerSecurityOptions) {
            this.dockerSecurityOptions = Output.ofNullable(dockerSecurityOptions);
            return this;
        }
        public Builder dockerSecurityOptions(String... dockerSecurityOptions) {
            return dockerSecurityOptions(List.of(dockerSecurityOptions));
        }
        public Builder entryPoint(@Nullable Output<List<String>> entryPoint) {
            this.entryPoint = entryPoint;
            return this;
        }
        public Builder entryPoint(@Nullable List<String> entryPoint) {
            this.entryPoint = Output.ofNullable(entryPoint);
            return this;
        }
        public Builder entryPoint(String... entryPoint) {
            return entryPoint(List.of(entryPoint));
        }
        public Builder environment(@Nullable Output<List<TaskDefinitionKeyValuePairArgs>> environment) {
            this.environment = environment;
            return this;
        }
        public Builder environment(@Nullable List<TaskDefinitionKeyValuePairArgs> environment) {
            this.environment = Output.ofNullable(environment);
            return this;
        }
        public Builder environment(TaskDefinitionKeyValuePairArgs... environment) {
            return environment(List.of(environment));
        }
        public Builder environmentFiles(@Nullable Output<List<TaskDefinitionEnvironmentFileArgs>> environmentFiles) {
            this.environmentFiles = environmentFiles;
            return this;
        }
        public Builder environmentFiles(@Nullable List<TaskDefinitionEnvironmentFileArgs> environmentFiles) {
            this.environmentFiles = Output.ofNullable(environmentFiles);
            return this;
        }
        public Builder environmentFiles(TaskDefinitionEnvironmentFileArgs... environmentFiles) {
            return environmentFiles(List.of(environmentFiles));
        }
        public Builder essential(@Nullable Output<Boolean> essential) {
            this.essential = essential;
            return this;
        }
        public Builder essential(@Nullable Boolean essential) {
            this.essential = Output.ofNullable(essential);
            return this;
        }
        public Builder extraHosts(@Nullable Output<List<TaskDefinitionHostEntryArgs>> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }
        public Builder extraHosts(@Nullable List<TaskDefinitionHostEntryArgs> extraHosts) {
            this.extraHosts = Output.ofNullable(extraHosts);
            return this;
        }
        public Builder extraHosts(TaskDefinitionHostEntryArgs... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }
        public Builder firelensConfiguration(@Nullable Output<TaskDefinitionFirelensConfigurationArgs> firelensConfiguration) {
            this.firelensConfiguration = firelensConfiguration;
            return this;
        }
        public Builder firelensConfiguration(@Nullable TaskDefinitionFirelensConfigurationArgs firelensConfiguration) {
            this.firelensConfiguration = Output.ofNullable(firelensConfiguration);
            return this;
        }
        public Builder healthCheck(@Nullable Output<TaskDefinitionHealthCheckArgs> healthCheck) {
            this.healthCheck = healthCheck;
            return this;
        }
        public Builder healthCheck(@Nullable TaskDefinitionHealthCheckArgs healthCheck) {
            this.healthCheck = Output.ofNullable(healthCheck);
            return this;
        }
        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }
        public Builder hostname(@Nullable String hostname) {
            this.hostname = Output.ofNullable(hostname);
            return this;
        }
        public Builder image(@Nullable Output<String> image) {
            this.image = image;
            return this;
        }
        public Builder image(@Nullable String image) {
            this.image = Output.ofNullable(image);
            return this;
        }
        public Builder interactive(@Nullable Output<Boolean> interactive) {
            this.interactive = interactive;
            return this;
        }
        public Builder interactive(@Nullable Boolean interactive) {
            this.interactive = Output.ofNullable(interactive);
            return this;
        }
        public Builder links(@Nullable Output<List<String>> links) {
            this.links = links;
            return this;
        }
        public Builder links(@Nullable List<String> links) {
            this.links = Output.ofNullable(links);
            return this;
        }
        public Builder links(String... links) {
            return links(List.of(links));
        }
        public Builder linuxParameters(@Nullable Output<TaskDefinitionLinuxParametersArgs> linuxParameters) {
            this.linuxParameters = linuxParameters;
            return this;
        }
        public Builder linuxParameters(@Nullable TaskDefinitionLinuxParametersArgs linuxParameters) {
            this.linuxParameters = Output.ofNullable(linuxParameters);
            return this;
        }
        public Builder logConfiguration(@Nullable Output<TaskDefinitionLogConfigurationArgs> logConfiguration) {
            this.logConfiguration = logConfiguration;
            return this;
        }
        public Builder logConfiguration(@Nullable TaskDefinitionLogConfigurationArgs logConfiguration) {
            this.logConfiguration = Output.ofNullable(logConfiguration);
            return this;
        }
        public Builder memory(@Nullable Output<Integer> memory) {
            this.memory = memory;
            return this;
        }
        public Builder memory(@Nullable Integer memory) {
            this.memory = Output.ofNullable(memory);
            return this;
        }
        public Builder memoryReservation(@Nullable Output<Integer> memoryReservation) {
            this.memoryReservation = memoryReservation;
            return this;
        }
        public Builder memoryReservation(@Nullable Integer memoryReservation) {
            this.memoryReservation = Output.ofNullable(memoryReservation);
            return this;
        }
        public Builder mountPoints(@Nullable Output<List<TaskDefinitionMountPointArgs>> mountPoints) {
            this.mountPoints = mountPoints;
            return this;
        }
        public Builder mountPoints(@Nullable List<TaskDefinitionMountPointArgs> mountPoints) {
            this.mountPoints = Output.ofNullable(mountPoints);
            return this;
        }
        public Builder mountPoints(TaskDefinitionMountPointArgs... mountPoints) {
            return mountPoints(List.of(mountPoints));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder portMappings(@Nullable Output<List<TaskDefinitionPortMappingArgs>> portMappings) {
            this.portMappings = portMappings;
            return this;
        }
        public Builder portMappings(@Nullable List<TaskDefinitionPortMappingArgs> portMappings) {
            this.portMappings = Output.ofNullable(portMappings);
            return this;
        }
        public Builder portMappings(TaskDefinitionPortMappingArgs... portMappings) {
            return portMappings(List.of(portMappings));
        }
        public Builder privileged(@Nullable Output<Boolean> privileged) {
            this.privileged = privileged;
            return this;
        }
        public Builder privileged(@Nullable Boolean privileged) {
            this.privileged = Output.ofNullable(privileged);
            return this;
        }
        public Builder pseudoTerminal(@Nullable Output<Boolean> pseudoTerminal) {
            this.pseudoTerminal = pseudoTerminal;
            return this;
        }
        public Builder pseudoTerminal(@Nullable Boolean pseudoTerminal) {
            this.pseudoTerminal = Output.ofNullable(pseudoTerminal);
            return this;
        }
        public Builder readonlyRootFilesystem(@Nullable Output<Boolean> readonlyRootFilesystem) {
            this.readonlyRootFilesystem = readonlyRootFilesystem;
            return this;
        }
        public Builder readonlyRootFilesystem(@Nullable Boolean readonlyRootFilesystem) {
            this.readonlyRootFilesystem = Output.ofNullable(readonlyRootFilesystem);
            return this;
        }
        public Builder repositoryCredentials(@Nullable Output<TaskDefinitionRepositoryCredentialsArgs> repositoryCredentials) {
            this.repositoryCredentials = repositoryCredentials;
            return this;
        }
        public Builder repositoryCredentials(@Nullable TaskDefinitionRepositoryCredentialsArgs repositoryCredentials) {
            this.repositoryCredentials = Output.ofNullable(repositoryCredentials);
            return this;
        }
        public Builder resourceRequirements(@Nullable Output<List<TaskDefinitionResourceRequirementArgs>> resourceRequirements) {
            this.resourceRequirements = resourceRequirements;
            return this;
        }
        public Builder resourceRequirements(@Nullable List<TaskDefinitionResourceRequirementArgs> resourceRequirements) {
            this.resourceRequirements = Output.ofNullable(resourceRequirements);
            return this;
        }
        public Builder resourceRequirements(TaskDefinitionResourceRequirementArgs... resourceRequirements) {
            return resourceRequirements(List.of(resourceRequirements));
        }
        public Builder secrets(@Nullable Output<List<TaskDefinitionSecretArgs>> secrets) {
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(@Nullable List<TaskDefinitionSecretArgs> secrets) {
            this.secrets = Output.ofNullable(secrets);
            return this;
        }
        public Builder secrets(TaskDefinitionSecretArgs... secrets) {
            return secrets(List.of(secrets));
        }
        public Builder startTimeout(@Nullable Output<Integer> startTimeout) {
            this.startTimeout = startTimeout;
            return this;
        }
        public Builder startTimeout(@Nullable Integer startTimeout) {
            this.startTimeout = Output.ofNullable(startTimeout);
            return this;
        }
        public Builder stopTimeout(@Nullable Output<Integer> stopTimeout) {
            this.stopTimeout = stopTimeout;
            return this;
        }
        public Builder stopTimeout(@Nullable Integer stopTimeout) {
            this.stopTimeout = Output.ofNullable(stopTimeout);
            return this;
        }
        public Builder systemControls(@Nullable Output<List<TaskDefinitionSystemControlArgs>> systemControls) {
            this.systemControls = systemControls;
            return this;
        }
        public Builder systemControls(@Nullable List<TaskDefinitionSystemControlArgs> systemControls) {
            this.systemControls = Output.ofNullable(systemControls);
            return this;
        }
        public Builder systemControls(TaskDefinitionSystemControlArgs... systemControls) {
            return systemControls(List.of(systemControls));
        }
        public Builder ulimits(@Nullable Output<List<TaskDefinitionUlimitArgs>> ulimits) {
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(@Nullable List<TaskDefinitionUlimitArgs> ulimits) {
            this.ulimits = Output.ofNullable(ulimits);
            return this;
        }
        public Builder ulimits(TaskDefinitionUlimitArgs... ulimits) {
            return ulimits(List.of(ulimits));
        }
        public Builder user(@Nullable Output<String> user) {
            this.user = user;
            return this;
        }
        public Builder user(@Nullable String user) {
            this.user = Output.ofNullable(user);
            return this;
        }
        public Builder volumesFrom(@Nullable Output<List<TaskDefinitionVolumeFromArgs>> volumesFrom) {
            this.volumesFrom = volumesFrom;
            return this;
        }
        public Builder volumesFrom(@Nullable List<TaskDefinitionVolumeFromArgs> volumesFrom) {
            this.volumesFrom = Output.ofNullable(volumesFrom);
            return this;
        }
        public Builder volumesFrom(TaskDefinitionVolumeFromArgs... volumesFrom) {
            return volumesFrom(List.of(volumesFrom));
        }
        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }
        public Builder workingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = Output.ofNullable(workingDirectory);
            return this;
        }        public TaskDefinitionContainerDefinitionArgs build() {
            return new TaskDefinitionContainerDefinitionArgs(command, cpu, dependsOn, disableNetworking, dnsSearchDomains, dnsServers, dockerLabels, dockerSecurityOptions, entryPoint, environment, environmentFiles, essential, extraHosts, firelensConfiguration, healthCheck, hostname, image, interactive, links, linuxParameters, logConfiguration, memory, memoryReservation, mountPoints, name, portMappings, privileged, pseudoTerminal, readonlyRootFilesystem, repositoryCredentials, resourceRequirements, secrets, startTimeout, stopTimeout, systemControls, ulimits, user, volumesFrom, workingDirectory);
        }
    }
}
