// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.sagemaker;

import io.pulumi.awsnative.sagemaker.inputs.FeatureGroupFeatureDefinitionArgs;
import io.pulumi.awsnative.sagemaker.inputs.FeatureGroupTagArgs;
import io.pulumi.awsnative.sagemaker.inputs.OfflineStoreConfigPropertiesArgs;
import io.pulumi.awsnative.sagemaker.inputs.OnlineStoreConfigPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FeatureGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final FeatureGroupArgs Empty = new FeatureGroupArgs();

    /**
     * Description about the FeatureGroup.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The Event Time Feature Name.
     * 
     */
    @InputImport(name="eventTimeFeatureName", required=true)
      private final Output<String> eventTimeFeatureName;

    public Output<String> getEventTimeFeatureName() {
        return this.eventTimeFeatureName;
    }

    /**
     * An Array of Feature Definition
     * 
     */
    @InputImport(name="featureDefinitions", required=true)
      private final Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions;

    public Output<List<FeatureGroupFeatureDefinitionArgs>> getFeatureDefinitions() {
        return this.featureDefinitions;
    }

    /**
     * The Name of the FeatureGroup.
     * 
     */
    @InputImport(name="featureGroupName")
      private final @Nullable Output<String> featureGroupName;

    public Output<String> getFeatureGroupName() {
        return this.featureGroupName == null ? Output.empty() : this.featureGroupName;
    }

    @InputImport(name="offlineStoreConfig")
      private final @Nullable Output<OfflineStoreConfigPropertiesArgs> offlineStoreConfig;

    public Output<OfflineStoreConfigPropertiesArgs> getOfflineStoreConfig() {
        return this.offlineStoreConfig == null ? Output.empty() : this.offlineStoreConfig;
    }

    @InputImport(name="onlineStoreConfig")
      private final @Nullable Output<OnlineStoreConfigPropertiesArgs> onlineStoreConfig;

    public Output<OnlineStoreConfigPropertiesArgs> getOnlineStoreConfig() {
        return this.onlineStoreConfig == null ? Output.empty() : this.onlineStoreConfig;
    }

    /**
     * The Record Identifier Feature Name.
     * 
     */
    @InputImport(name="recordIdentifierFeatureName", required=true)
      private final Output<String> recordIdentifierFeatureName;

    public Output<String> getRecordIdentifierFeatureName() {
        return this.recordIdentifierFeatureName;
    }

    /**
     * Role Arn
     * 
     */
    @InputImport(name="roleArn")
      private final @Nullable Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn == null ? Output.empty() : this.roleArn;
    }

    /**
     * An array of key-value pair to apply to this resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<List<FeatureGroupTagArgs>> tags;

    public Output<List<FeatureGroupTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public FeatureGroupArgs(
        @Nullable Output<String> description,
        Output<String> eventTimeFeatureName,
        Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions,
        @Nullable Output<String> featureGroupName,
        @Nullable Output<OfflineStoreConfigPropertiesArgs> offlineStoreConfig,
        @Nullable Output<OnlineStoreConfigPropertiesArgs> onlineStoreConfig,
        Output<String> recordIdentifierFeatureName,
        @Nullable Output<String> roleArn,
        @Nullable Output<List<FeatureGroupTagArgs>> tags) {
        this.description = description;
        this.eventTimeFeatureName = Objects.requireNonNull(eventTimeFeatureName, "expected parameter 'eventTimeFeatureName' to be non-null");
        this.featureDefinitions = Objects.requireNonNull(featureDefinitions, "expected parameter 'featureDefinitions' to be non-null");
        this.featureGroupName = featureGroupName;
        this.offlineStoreConfig = offlineStoreConfig;
        this.onlineStoreConfig = onlineStoreConfig;
        this.recordIdentifierFeatureName = Objects.requireNonNull(recordIdentifierFeatureName, "expected parameter 'recordIdentifierFeatureName' to be non-null");
        this.roleArn = roleArn;
        this.tags = tags;
    }

    private FeatureGroupArgs() {
        this.description = Output.empty();
        this.eventTimeFeatureName = Output.empty();
        this.featureDefinitions = Output.empty();
        this.featureGroupName = Output.empty();
        this.offlineStoreConfig = Output.empty();
        this.onlineStoreConfig = Output.empty();
        this.recordIdentifierFeatureName = Output.empty();
        this.roleArn = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> eventTimeFeatureName;
        private Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions;
        private @Nullable Output<String> featureGroupName;
        private @Nullable Output<OfflineStoreConfigPropertiesArgs> offlineStoreConfig;
        private @Nullable Output<OnlineStoreConfigPropertiesArgs> onlineStoreConfig;
        private Output<String> recordIdentifierFeatureName;
        private @Nullable Output<String> roleArn;
        private @Nullable Output<List<FeatureGroupTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(FeatureGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.eventTimeFeatureName = defaults.eventTimeFeatureName;
    	      this.featureDefinitions = defaults.featureDefinitions;
    	      this.featureGroupName = defaults.featureGroupName;
    	      this.offlineStoreConfig = defaults.offlineStoreConfig;
    	      this.onlineStoreConfig = defaults.onlineStoreConfig;
    	      this.recordIdentifierFeatureName = defaults.recordIdentifierFeatureName;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder eventTimeFeatureName(Output<String> eventTimeFeatureName) {
            this.eventTimeFeatureName = Objects.requireNonNull(eventTimeFeatureName);
            return this;
        }

        public Builder eventTimeFeatureName(String eventTimeFeatureName) {
            this.eventTimeFeatureName = Output.of(Objects.requireNonNull(eventTimeFeatureName));
            return this;
        }

        public Builder featureDefinitions(Output<List<FeatureGroupFeatureDefinitionArgs>> featureDefinitions) {
            this.featureDefinitions = Objects.requireNonNull(featureDefinitions);
            return this;
        }

        public Builder featureDefinitions(List<FeatureGroupFeatureDefinitionArgs> featureDefinitions) {
            this.featureDefinitions = Output.of(Objects.requireNonNull(featureDefinitions));
            return this;
        }

        public Builder featureGroupName(@Nullable Output<String> featureGroupName) {
            this.featureGroupName = featureGroupName;
            return this;
        }

        public Builder featureGroupName(@Nullable String featureGroupName) {
            this.featureGroupName = Output.ofNullable(featureGroupName);
            return this;
        }

        public Builder offlineStoreConfig(@Nullable Output<OfflineStoreConfigPropertiesArgs> offlineStoreConfig) {
            this.offlineStoreConfig = offlineStoreConfig;
            return this;
        }

        public Builder offlineStoreConfig(@Nullable OfflineStoreConfigPropertiesArgs offlineStoreConfig) {
            this.offlineStoreConfig = Output.ofNullable(offlineStoreConfig);
            return this;
        }

        public Builder onlineStoreConfig(@Nullable Output<OnlineStoreConfigPropertiesArgs> onlineStoreConfig) {
            this.onlineStoreConfig = onlineStoreConfig;
            return this;
        }

        public Builder onlineStoreConfig(@Nullable OnlineStoreConfigPropertiesArgs onlineStoreConfig) {
            this.onlineStoreConfig = Output.ofNullable(onlineStoreConfig);
            return this;
        }

        public Builder recordIdentifierFeatureName(Output<String> recordIdentifierFeatureName) {
            this.recordIdentifierFeatureName = Objects.requireNonNull(recordIdentifierFeatureName);
            return this;
        }

        public Builder recordIdentifierFeatureName(String recordIdentifierFeatureName) {
            this.recordIdentifierFeatureName = Output.of(Objects.requireNonNull(recordIdentifierFeatureName));
            return this;
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = Output.ofNullable(roleArn);
            return this;
        }

        public Builder tags(@Nullable Output<List<FeatureGroupTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<FeatureGroupTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public FeatureGroupArgs build() {
            return new FeatureGroupArgs(description, eventTimeFeatureName, featureDefinitions, featureGroupName, offlineStoreConfig, onlineStoreConfig, recordIdentifierFeatureName, roleArn, tags);
        }
    }
}
