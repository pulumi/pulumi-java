// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HookDefaultVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final HookDefaultVersionArgs Empty = new HookDefaultVersionArgs();

    /**
     * The name of the type being registered.
     * 
     * We recommend that type names adhere to the following pattern: company_or_organization::service::type.
     * 
     */
    @Import(name="typeName")
      private final @Nullable Output<String> typeName;

    public Output<String> getTypeName() {
        return this.typeName == null ? Codegen.empty() : this.typeName;
    }

    /**
     * The Amazon Resource Name (ARN) of the type version.
     * 
     */
    @Import(name="typeVersionArn")
      private final @Nullable Output<String> typeVersionArn;

    public Output<String> getTypeVersionArn() {
        return this.typeVersionArn == null ? Codegen.empty() : this.typeVersionArn;
    }

    /**
     * The ID of an existing version of the hook to set as the default.
     * 
     */
    @Import(name="versionId")
      private final @Nullable Output<String> versionId;

    public Output<String> getVersionId() {
        return this.versionId == null ? Codegen.empty() : this.versionId;
    }

    public HookDefaultVersionArgs(
        @Nullable Output<String> typeName,
        @Nullable Output<String> typeVersionArn,
        @Nullable Output<String> versionId) {
        this.typeName = typeName;
        this.typeVersionArn = typeVersionArn;
        this.versionId = versionId;
    }

    private HookDefaultVersionArgs() {
        this.typeName = Codegen.empty();
        this.typeVersionArn = Codegen.empty();
        this.versionId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HookDefaultVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> typeName;
        private @Nullable Output<String> typeVersionArn;
        private @Nullable Output<String> versionId;

        public Builder() {
    	      // Empty
        }

        public Builder(HookDefaultVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.typeName = defaults.typeName;
    	      this.typeVersionArn = defaults.typeVersionArn;
    	      this.versionId = defaults.versionId;
        }

        public Builder typeName(@Nullable Output<String> typeName) {
            this.typeName = typeName;
            return this;
        }
        public Builder typeName(@Nullable String typeName) {
            this.typeName = Codegen.ofNullable(typeName);
            return this;
        }
        public Builder typeVersionArn(@Nullable Output<String> typeVersionArn) {
            this.typeVersionArn = typeVersionArn;
            return this;
        }
        public Builder typeVersionArn(@Nullable String typeVersionArn) {
            this.typeVersionArn = Codegen.ofNullable(typeVersionArn);
            return this;
        }
        public Builder versionId(@Nullable Output<String> versionId) {
            this.versionId = versionId;
            return this;
        }
        public Builder versionId(@Nullable String versionId) {
            this.versionId = Codegen.ofNullable(versionId);
            return this;
        }        public HookDefaultVersionArgs build() {
            return new HookDefaultVersionArgs(typeName, typeVersionArn, versionId);
        }
    }
}
