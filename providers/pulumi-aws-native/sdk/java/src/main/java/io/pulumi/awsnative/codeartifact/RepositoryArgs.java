// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.codeartifact;

import io.pulumi.awsnative.codeartifact.inputs.RepositoryTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * A text description of the repository.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A list of external connections associated with the repository.
     * 
     */
    @Import(name="externalConnections")
      private final @Nullable Output<List<String>> externalConnections;

    public Output<List<String>> externalConnections() {
        return this.externalConnections == null ? Codegen.empty() : this.externalConnections;
    }

    /**
     * The access control resource policy on the provided repository.
     * 
     */
    @Import(name="permissionsPolicyDocument")
      private final @Nullable Output<Object> permissionsPolicyDocument;

    public Output<Object> permissionsPolicyDocument() {
        return this.permissionsPolicyDocument == null ? Codegen.empty() : this.permissionsPolicyDocument;
    }

    /**
     * The name of the repository.
     * 
     */
    @Import(name="repositoryName")
      private final @Nullable Output<String> repositoryName;

    public Output<String> repositoryName() {
        return this.repositoryName == null ? Codegen.empty() : this.repositoryName;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<RepositoryTagArgs>> tags;

    public Output<List<RepositoryTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A list of upstream repositories associated with the repository.
     * 
     */
    @Import(name="upstreams")
      private final @Nullable Output<List<String>> upstreams;

    public Output<List<String>> upstreams() {
        return this.upstreams == null ? Codegen.empty() : this.upstreams;
    }

    public RepositoryArgs(
        @Nullable Output<String> description,
        @Nullable Output<List<String>> externalConnections,
        @Nullable Output<Object> permissionsPolicyDocument,
        @Nullable Output<String> repositoryName,
        @Nullable Output<List<RepositoryTagArgs>> tags,
        @Nullable Output<List<String>> upstreams) {
        this.description = description;
        this.externalConnections = externalConnections;
        this.permissionsPolicyDocument = permissionsPolicyDocument;
        this.repositoryName = repositoryName;
        this.tags = tags;
        this.upstreams = upstreams;
    }

    private RepositoryArgs() {
        this.description = Codegen.empty();
        this.externalConnections = Codegen.empty();
        this.permissionsPolicyDocument = Codegen.empty();
        this.repositoryName = Codegen.empty();
        this.tags = Codegen.empty();
        this.upstreams = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<List<String>> externalConnections;
        private @Nullable Output<Object> permissionsPolicyDocument;
        private @Nullable Output<String> repositoryName;
        private @Nullable Output<List<RepositoryTagArgs>> tags;
        private @Nullable Output<List<String>> upstreams;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.externalConnections = defaults.externalConnections;
    	      this.permissionsPolicyDocument = defaults.permissionsPolicyDocument;
    	      this.repositoryName = defaults.repositoryName;
    	      this.tags = defaults.tags;
    	      this.upstreams = defaults.upstreams;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder externalConnections(@Nullable Output<List<String>> externalConnections) {
            this.externalConnections = externalConnections;
            return this;
        }
        public Builder externalConnections(@Nullable List<String> externalConnections) {
            this.externalConnections = Codegen.ofNullable(externalConnections);
            return this;
        }
        public Builder externalConnections(String... externalConnections) {
            return externalConnections(List.of(externalConnections));
        }
        public Builder permissionsPolicyDocument(@Nullable Output<Object> permissionsPolicyDocument) {
            this.permissionsPolicyDocument = permissionsPolicyDocument;
            return this;
        }
        public Builder permissionsPolicyDocument(@Nullable Object permissionsPolicyDocument) {
            this.permissionsPolicyDocument = Codegen.ofNullable(permissionsPolicyDocument);
            return this;
        }
        public Builder repositoryName(@Nullable Output<String> repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }
        public Builder repositoryName(@Nullable String repositoryName) {
            this.repositoryName = Codegen.ofNullable(repositoryName);
            return this;
        }
        public Builder tags(@Nullable Output<List<RepositoryTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<RepositoryTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(RepositoryTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder upstreams(@Nullable Output<List<String>> upstreams) {
            this.upstreams = upstreams;
            return this;
        }
        public Builder upstreams(@Nullable List<String> upstreams) {
            this.upstreams = Codegen.ofNullable(upstreams);
            return this;
        }
        public Builder upstreams(String... upstreams) {
            return upstreams(List.of(upstreams));
        }        public RepositoryArgs build() {
            return new RepositoryArgs(description, externalConnections, permissionsPolicyDocument, repositoryName, tags, upstreams);
        }
    }
}
