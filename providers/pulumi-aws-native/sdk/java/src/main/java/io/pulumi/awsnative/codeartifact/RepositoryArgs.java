// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.codeartifact;

import io.pulumi.awsnative.codeartifact.inputs.RepositoryTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * A text description of the repository.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * A list of external connections associated with the repository.
     * 
     */
    @InputImport(name="externalConnections")
    private final @Nullable Input<List<String>> externalConnections;

    public Input<List<String>> getExternalConnections() {
        return this.externalConnections == null ? Input.empty() : this.externalConnections;
    }

    /**
     * The access control resource policy on the provided repository.
     * 
     */
    @InputImport(name="permissionsPolicyDocument")
    private final @Nullable Input<Object> permissionsPolicyDocument;

    public Input<Object> getPermissionsPolicyDocument() {
        return this.permissionsPolicyDocument == null ? Input.empty() : this.permissionsPolicyDocument;
    }

    /**
     * The name of the repository.
     * 
     */
    @InputImport(name="repositoryName")
    private final @Nullable Input<String> repositoryName;

    public Input<String> getRepositoryName() {
        return this.repositoryName == null ? Input.empty() : this.repositoryName;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<RepositoryTagArgs>> tags;

    public Input<List<RepositoryTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A list of upstream repositories associated with the repository.
     * 
     */
    @InputImport(name="upstreams")
    private final @Nullable Input<List<String>> upstreams;

    public Input<List<String>> getUpstreams() {
        return this.upstreams == null ? Input.empty() : this.upstreams;
    }

    public RepositoryArgs(
        @Nullable Input<String> description,
        @Nullable Input<List<String>> externalConnections,
        @Nullable Input<Object> permissionsPolicyDocument,
        @Nullable Input<String> repositoryName,
        @Nullable Input<List<RepositoryTagArgs>> tags,
        @Nullable Input<List<String>> upstreams) {
        this.description = description;
        this.externalConnections = externalConnections;
        this.permissionsPolicyDocument = permissionsPolicyDocument;
        this.repositoryName = repositoryName;
        this.tags = tags;
        this.upstreams = upstreams;
    }

    private RepositoryArgs() {
        this.description = Input.empty();
        this.externalConnections = Input.empty();
        this.permissionsPolicyDocument = Input.empty();
        this.repositoryName = Input.empty();
        this.tags = Input.empty();
        this.upstreams = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<List<String>> externalConnections;
        private @Nullable Input<Object> permissionsPolicyDocument;
        private @Nullable Input<String> repositoryName;
        private @Nullable Input<List<RepositoryTagArgs>> tags;
        private @Nullable Input<List<String>> upstreams;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.externalConnections = defaults.externalConnections;
    	      this.permissionsPolicyDocument = defaults.permissionsPolicyDocument;
    	      this.repositoryName = defaults.repositoryName;
    	      this.tags = defaults.tags;
    	      this.upstreams = defaults.upstreams;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setExternalConnections(@Nullable Input<List<String>> externalConnections) {
            this.externalConnections = externalConnections;
            return this;
        }

        public Builder setExternalConnections(@Nullable List<String> externalConnections) {
            this.externalConnections = Input.ofNullable(externalConnections);
            return this;
        }

        public Builder setPermissionsPolicyDocument(@Nullable Input<Object> permissionsPolicyDocument) {
            this.permissionsPolicyDocument = permissionsPolicyDocument;
            return this;
        }

        public Builder setPermissionsPolicyDocument(@Nullable Object permissionsPolicyDocument) {
            this.permissionsPolicyDocument = Input.ofNullable(permissionsPolicyDocument);
            return this;
        }

        public Builder setRepositoryName(@Nullable Input<String> repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }

        public Builder setRepositoryName(@Nullable String repositoryName) {
            this.repositoryName = Input.ofNullable(repositoryName);
            return this;
        }

        public Builder setTags(@Nullable Input<List<RepositoryTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<RepositoryTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setUpstreams(@Nullable Input<List<String>> upstreams) {
            this.upstreams = upstreams;
            return this;
        }

        public Builder setUpstreams(@Nullable List<String> upstreams) {
            this.upstreams = Input.ofNullable(upstreams);
            return this;
        }

        public RepositoryArgs build() {
            return new RepositoryArgs(description, externalConnections, permissionsPolicyDocument, repositoryName, tags, upstreams);
        }
    }
}
