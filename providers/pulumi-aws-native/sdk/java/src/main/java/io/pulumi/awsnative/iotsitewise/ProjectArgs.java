// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iotsitewise;

import io.pulumi.awsnative.iotsitewise.inputs.ProjectTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * The IDs of the assets to be associated to the project.
     * 
     */
    @Import(name="assetIds")
      private final @Nullable Output<List<String>> assetIds;

    public Output<List<String>> getAssetIds() {
        return this.assetIds == null ? Codegen.empty() : this.assetIds;
    }

    /**
     * The ID of the portal in which to create the project.
     * 
     */
    @Import(name="portalId", required=true)
      private final Output<String> portalId;

    public Output<String> getPortalId() {
        return this.portalId;
    }

    /**
     * A description for the project.
     * 
     */
    @Import(name="projectDescription")
      private final @Nullable Output<String> projectDescription;

    public Output<String> getProjectDescription() {
        return this.projectDescription == null ? Codegen.empty() : this.projectDescription;
    }

    /**
     * A friendly name for the project.
     * 
     */
    @Import(name="projectName")
      private final @Nullable Output<String> projectName;

    public Output<String> getProjectName() {
        return this.projectName == null ? Codegen.empty() : this.projectName;
    }

    /**
     * A list of key-value pairs that contain metadata for the project.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<ProjectTagArgs>> tags;

    public Output<List<ProjectTagArgs>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ProjectArgs(
        @Nullable Output<List<String>> assetIds,
        Output<String> portalId,
        @Nullable Output<String> projectDescription,
        @Nullable Output<String> projectName,
        @Nullable Output<List<ProjectTagArgs>> tags) {
        this.assetIds = assetIds;
        this.portalId = Objects.requireNonNull(portalId, "expected parameter 'portalId' to be non-null");
        this.projectDescription = projectDescription;
        this.projectName = projectName;
        this.tags = tags;
    }

    private ProjectArgs() {
        this.assetIds = Codegen.empty();
        this.portalId = Codegen.empty();
        this.projectDescription = Codegen.empty();
        this.projectName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> assetIds;
        private Output<String> portalId;
        private @Nullable Output<String> projectDescription;
        private @Nullable Output<String> projectName;
        private @Nullable Output<List<ProjectTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetIds = defaults.assetIds;
    	      this.portalId = defaults.portalId;
    	      this.projectDescription = defaults.projectDescription;
    	      this.projectName = defaults.projectName;
    	      this.tags = defaults.tags;
        }

        public Builder assetIds(@Nullable Output<List<String>> assetIds) {
            this.assetIds = assetIds;
            return this;
        }
        public Builder assetIds(@Nullable List<String> assetIds) {
            this.assetIds = Codegen.ofNullable(assetIds);
            return this;
        }
        public Builder assetIds(String... assetIds) {
            return assetIds(List.of(assetIds));
        }
        public Builder portalId(Output<String> portalId) {
            this.portalId = Objects.requireNonNull(portalId);
            return this;
        }
        public Builder portalId(String portalId) {
            this.portalId = Output.of(Objects.requireNonNull(portalId));
            return this;
        }
        public Builder projectDescription(@Nullable Output<String> projectDescription) {
            this.projectDescription = projectDescription;
            return this;
        }
        public Builder projectDescription(@Nullable String projectDescription) {
            this.projectDescription = Codegen.ofNullable(projectDescription);
            return this;
        }
        public Builder projectName(@Nullable Output<String> projectName) {
            this.projectName = projectName;
            return this;
        }
        public Builder projectName(@Nullable String projectName) {
            this.projectName = Codegen.ofNullable(projectName);
            return this;
        }
        public Builder tags(@Nullable Output<List<ProjectTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<ProjectTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(ProjectTagArgs... tags) {
            return tags(List.of(tags));
        }        public ProjectArgs build() {
            return new ProjectArgs(assetIds, portalId, projectDescription, projectName, tags);
        }
    }
}
