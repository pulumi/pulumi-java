// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kinesisfirehose.inputs;

import io.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamSplunkDestinationConfigurationHECEndpointType;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamCloudWatchLoggingOptionsArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamProcessingConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamS3DestinationConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamSplunkRetryOptionsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeliveryStreamSplunkDestinationConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeliveryStreamSplunkDestinationConfigurationArgs Empty = new DeliveryStreamSplunkDestinationConfigurationArgs();

    @InputImport(name="cloudWatchLoggingOptions")
      private final @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions;

    public Output<DeliveryStreamCloudWatchLoggingOptionsArgs> getCloudWatchLoggingOptions() {
        return this.cloudWatchLoggingOptions == null ? Output.empty() : this.cloudWatchLoggingOptions;
    }

    @InputImport(name="hECAcknowledgmentTimeoutInSeconds")
      private final @Nullable Output<Integer> hECAcknowledgmentTimeoutInSeconds;

    public Output<Integer> getHECAcknowledgmentTimeoutInSeconds() {
        return this.hECAcknowledgmentTimeoutInSeconds == null ? Output.empty() : this.hECAcknowledgmentTimeoutInSeconds;
    }

    @InputImport(name="hECEndpoint", required=true)
      private final Output<String> hECEndpoint;

    public Output<String> getHECEndpoint() {
        return this.hECEndpoint;
    }

    @InputImport(name="hECEndpointType", required=true)
      private final Output<DeliveryStreamSplunkDestinationConfigurationHECEndpointType> hECEndpointType;

    public Output<DeliveryStreamSplunkDestinationConfigurationHECEndpointType> getHECEndpointType() {
        return this.hECEndpointType;
    }

    @InputImport(name="hECToken", required=true)
      private final Output<String> hECToken;

    public Output<String> getHECToken() {
        return this.hECToken;
    }

    @InputImport(name="processingConfiguration")
      private final @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration;

    public Output<DeliveryStreamProcessingConfigurationArgs> getProcessingConfiguration() {
        return this.processingConfiguration == null ? Output.empty() : this.processingConfiguration;
    }

    @InputImport(name="retryOptions")
      private final @Nullable Output<DeliveryStreamSplunkRetryOptionsArgs> retryOptions;

    public Output<DeliveryStreamSplunkRetryOptionsArgs> getRetryOptions() {
        return this.retryOptions == null ? Output.empty() : this.retryOptions;
    }

    @InputImport(name="s3BackupMode")
      private final @Nullable Output<String> s3BackupMode;

    public Output<String> getS3BackupMode() {
        return this.s3BackupMode == null ? Output.empty() : this.s3BackupMode;
    }

    @InputImport(name="s3Configuration", required=true)
      private final Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration;

    public Output<DeliveryStreamS3DestinationConfigurationArgs> getS3Configuration() {
        return this.s3Configuration;
    }

    public DeliveryStreamSplunkDestinationConfigurationArgs(
        @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions,
        @Nullable Output<Integer> hECAcknowledgmentTimeoutInSeconds,
        Output<String> hECEndpoint,
        Output<DeliveryStreamSplunkDestinationConfigurationHECEndpointType> hECEndpointType,
        Output<String> hECToken,
        @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration,
        @Nullable Output<DeliveryStreamSplunkRetryOptionsArgs> retryOptions,
        @Nullable Output<String> s3BackupMode,
        Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration) {
        this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
        this.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
        this.hECEndpoint = Objects.requireNonNull(hECEndpoint, "expected parameter 'hECEndpoint' to be non-null");
        this.hECEndpointType = Objects.requireNonNull(hECEndpointType, "expected parameter 'hECEndpointType' to be non-null");
        this.hECToken = Objects.requireNonNull(hECToken, "expected parameter 'hECToken' to be non-null");
        this.processingConfiguration = processingConfiguration;
        this.retryOptions = retryOptions;
        this.s3BackupMode = s3BackupMode;
        this.s3Configuration = Objects.requireNonNull(s3Configuration, "expected parameter 's3Configuration' to be non-null");
    }

    private DeliveryStreamSplunkDestinationConfigurationArgs() {
        this.cloudWatchLoggingOptions = Output.empty();
        this.hECAcknowledgmentTimeoutInSeconds = Output.empty();
        this.hECEndpoint = Output.empty();
        this.hECEndpointType = Output.empty();
        this.hECToken = Output.empty();
        this.processingConfiguration = Output.empty();
        this.retryOptions = Output.empty();
        this.s3BackupMode = Output.empty();
        this.s3Configuration = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamSplunkDestinationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions;
        private @Nullable Output<Integer> hECAcknowledgmentTimeoutInSeconds;
        private Output<String> hECEndpoint;
        private Output<DeliveryStreamSplunkDestinationConfigurationHECEndpointType> hECEndpointType;
        private Output<String> hECToken;
        private @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration;
        private @Nullable Output<DeliveryStreamSplunkRetryOptionsArgs> retryOptions;
        private @Nullable Output<String> s3BackupMode;
        private Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration;

        public Builder() {
    	      // Empty
        }

        public Builder(DeliveryStreamSplunkDestinationConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.hECAcknowledgmentTimeoutInSeconds = defaults.hECAcknowledgmentTimeoutInSeconds;
    	      this.hECEndpoint = defaults.hECEndpoint;
    	      this.hECEndpointType = defaults.hECEndpointType;
    	      this.hECToken = defaults.hECToken;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryOptions = defaults.retryOptions;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
        }

        public Builder cloudWatchLoggingOptions(@Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }

        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptionsArgs cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = Output.ofNullable(cloudWatchLoggingOptions);
            return this;
        }

        public Builder hECAcknowledgmentTimeoutInSeconds(@Nullable Output<Integer> hECAcknowledgmentTimeoutInSeconds) {
            this.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
            return this;
        }

        public Builder hECAcknowledgmentTimeoutInSeconds(@Nullable Integer hECAcknowledgmentTimeoutInSeconds) {
            this.hECAcknowledgmentTimeoutInSeconds = Output.ofNullable(hECAcknowledgmentTimeoutInSeconds);
            return this;
        }

        public Builder hECEndpoint(Output<String> hECEndpoint) {
            this.hECEndpoint = Objects.requireNonNull(hECEndpoint);
            return this;
        }

        public Builder hECEndpoint(String hECEndpoint) {
            this.hECEndpoint = Output.of(Objects.requireNonNull(hECEndpoint));
            return this;
        }

        public Builder hECEndpointType(Output<DeliveryStreamSplunkDestinationConfigurationHECEndpointType> hECEndpointType) {
            this.hECEndpointType = Objects.requireNonNull(hECEndpointType);
            return this;
        }

        public Builder hECEndpointType(DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType) {
            this.hECEndpointType = Output.of(Objects.requireNonNull(hECEndpointType));
            return this;
        }

        public Builder hECToken(Output<String> hECToken) {
            this.hECToken = Objects.requireNonNull(hECToken);
            return this;
        }

        public Builder hECToken(String hECToken) {
            this.hECToken = Output.of(Objects.requireNonNull(hECToken));
            return this;
        }

        public Builder processingConfiguration(@Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfigurationArgs processingConfiguration) {
            this.processingConfiguration = Output.ofNullable(processingConfiguration);
            return this;
        }

        public Builder retryOptions(@Nullable Output<DeliveryStreamSplunkRetryOptionsArgs> retryOptions) {
            this.retryOptions = retryOptions;
            return this;
        }

        public Builder retryOptions(@Nullable DeliveryStreamSplunkRetryOptionsArgs retryOptions) {
            this.retryOptions = Output.ofNullable(retryOptions);
            return this;
        }

        public Builder s3BackupMode(@Nullable Output<String> s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }

        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = Output.ofNullable(s3BackupMode);
            return this;
        }

        public Builder s3Configuration(Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration) {
            this.s3Configuration = Objects.requireNonNull(s3Configuration);
            return this;
        }

        public Builder s3Configuration(DeliveryStreamS3DestinationConfigurationArgs s3Configuration) {
            this.s3Configuration = Output.of(Objects.requireNonNull(s3Configuration));
            return this;
        }
        public DeliveryStreamSplunkDestinationConfigurationArgs build() {
            return new DeliveryStreamSplunkDestinationConfigurationArgs(cloudWatchLoggingOptions, hECAcknowledgmentTimeoutInSeconds, hECEndpoint, hECEndpointType, hECToken, processingConfiguration, retryOptions, s3BackupMode, s3Configuration);
        }
    }
}
