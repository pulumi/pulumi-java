// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.emr;

import io.pulumi.awsnative.emr.enums.StudioSessionMappingIdentityType;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


public final class StudioSessionMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final StudioSessionMappingArgs Empty = new StudioSessionMappingArgs();

    /**
     * The name of the user or group. For more information, see UserName and DisplayName in the AWS SSO Identity Store API Reference. Either IdentityName or IdentityId must be specified.
     * 
     */
    @Import(name="identityName", required=true)
      private final Output<String> identityName;

    public Output<String> getIdentityName() {
        return this.identityName;
    }

    /**
     * Specifies whether the identity to map to the Studio is a user or a group.
     * 
     */
    @Import(name="identityType", required=true)
      private final Output<StudioSessionMappingIdentityType> identityType;

    public Output<StudioSessionMappingIdentityType> getIdentityType() {
        return this.identityType;
    }

    /**
     * The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. Session policies refine Studio user permissions without the need to use multiple IAM user roles.
     * 
     */
    @Import(name="sessionPolicyArn", required=true)
      private final Output<String> sessionPolicyArn;

    public Output<String> getSessionPolicyArn() {
        return this.sessionPolicyArn;
    }

    /**
     * The ID of the Amazon EMR Studio to which the user or group will be mapped.
     * 
     */
    @Import(name="studioId", required=true)
      private final Output<String> studioId;

    public Output<String> getStudioId() {
        return this.studioId;
    }

    public StudioSessionMappingArgs(
        Output<String> identityName,
        Output<StudioSessionMappingIdentityType> identityType,
        Output<String> sessionPolicyArn,
        Output<String> studioId) {
        this.identityName = Objects.requireNonNull(identityName, "expected parameter 'identityName' to be non-null");
        this.identityType = Objects.requireNonNull(identityType, "expected parameter 'identityType' to be non-null");
        this.sessionPolicyArn = Objects.requireNonNull(sessionPolicyArn, "expected parameter 'sessionPolicyArn' to be non-null");
        this.studioId = Objects.requireNonNull(studioId, "expected parameter 'studioId' to be non-null");
    }

    private StudioSessionMappingArgs() {
        this.identityName = Codegen.empty();
        this.identityType = Codegen.empty();
        this.sessionPolicyArn = Codegen.empty();
        this.studioId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StudioSessionMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> identityName;
        private Output<StudioSessionMappingIdentityType> identityType;
        private Output<String> sessionPolicyArn;
        private Output<String> studioId;

        public Builder() {
    	      // Empty
        }

        public Builder(StudioSessionMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identityName = defaults.identityName;
    	      this.identityType = defaults.identityType;
    	      this.sessionPolicyArn = defaults.sessionPolicyArn;
    	      this.studioId = defaults.studioId;
        }

        public Builder identityName(Output<String> identityName) {
            this.identityName = Objects.requireNonNull(identityName);
            return this;
        }
        public Builder identityName(String identityName) {
            this.identityName = Output.of(Objects.requireNonNull(identityName));
            return this;
        }
        public Builder identityType(Output<StudioSessionMappingIdentityType> identityType) {
            this.identityType = Objects.requireNonNull(identityType);
            return this;
        }
        public Builder identityType(StudioSessionMappingIdentityType identityType) {
            this.identityType = Output.of(Objects.requireNonNull(identityType));
            return this;
        }
        public Builder sessionPolicyArn(Output<String> sessionPolicyArn) {
            this.sessionPolicyArn = Objects.requireNonNull(sessionPolicyArn);
            return this;
        }
        public Builder sessionPolicyArn(String sessionPolicyArn) {
            this.sessionPolicyArn = Output.of(Objects.requireNonNull(sessionPolicyArn));
            return this;
        }
        public Builder studioId(Output<String> studioId) {
            this.studioId = Objects.requireNonNull(studioId);
            return this;
        }
        public Builder studioId(String studioId) {
            this.studioId = Output.of(Objects.requireNonNull(studioId));
            return this;
        }        public StudioSessionMappingArgs build() {
            return new StudioSessionMappingArgs(identityName, identityType, sessionPolicyArn, studioId);
        }
    }
}
