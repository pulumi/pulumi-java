// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.datasync.inputs;

import io.pulumi.awsnative.datasync.enums.TaskOptionsAtime;
import io.pulumi.awsnative.datasync.enums.TaskOptionsGid;
import io.pulumi.awsnative.datasync.enums.TaskOptionsLogLevel;
import io.pulumi.awsnative.datasync.enums.TaskOptionsMtime;
import io.pulumi.awsnative.datasync.enums.TaskOptionsOverwriteMode;
import io.pulumi.awsnative.datasync.enums.TaskOptionsPosixPermissions;
import io.pulumi.awsnative.datasync.enums.TaskOptionsPreserveDeletedFiles;
import io.pulumi.awsnative.datasync.enums.TaskOptionsPreserveDevices;
import io.pulumi.awsnative.datasync.enums.TaskOptionsSecurityDescriptorCopyFlags;
import io.pulumi.awsnative.datasync.enums.TaskOptionsTaskQueueing;
import io.pulumi.awsnative.datasync.enums.TaskOptionsTransferMode;
import io.pulumi.awsnative.datasync.enums.TaskOptionsUid;
import io.pulumi.awsnative.datasync.enums.TaskOptionsVerifyMode;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents the options that are available to control the behavior of a StartTaskExecution operation.
 * 
 */
public final class TaskOptions extends io.pulumi.resources.InvokeArgs {

    public static final TaskOptions Empty = new TaskOptions();

    /**
     * A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
     * 
     */
    @InputImport(name="atime")
    private final @Nullable TaskOptionsAtime atime;

    public Optional<TaskOptionsAtime> getAtime() {
        return this.atime == null ? Optional.empty() : Optional.ofNullable(this.atime);
    }

    /**
     * A value that limits the bandwidth used by AWS DataSync.
     * 
     */
    @InputImport(name="bytesPerSecond")
    private final @Nullable Integer bytesPerSecond;

    public Optional<Integer> getBytesPerSecond() {
        return this.bytesPerSecond == null ? Optional.empty() : Optional.ofNullable(this.bytesPerSecond);
    }

    /**
     * The group ID (GID) of the file's owners.
     * 
     */
    @InputImport(name="gid")
    private final @Nullable TaskOptionsGid gid;

    public Optional<TaskOptionsGid> getGid() {
        return this.gid == null ? Optional.empty() : Optional.ofNullable(this.gid);
    }

    /**
     * A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
     * 
     */
    @InputImport(name="logLevel")
    private final @Nullable TaskOptionsLogLevel logLevel;

    public Optional<TaskOptionsLogLevel> getLogLevel() {
        return this.logLevel == null ? Optional.empty() : Optional.ofNullable(this.logLevel);
    }

    /**
     * A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
     * 
     */
    @InputImport(name="mtime")
    private final @Nullable TaskOptionsMtime mtime;

    public Optional<TaskOptionsMtime> getMtime() {
        return this.mtime == null ? Optional.empty() : Optional.ofNullable(this.mtime);
    }

    /**
     * A value that determines whether files at the destination should be overwritten or preserved when copying files.
     * 
     */
    @InputImport(name="overwriteMode")
    private final @Nullable TaskOptionsOverwriteMode overwriteMode;

    public Optional<TaskOptionsOverwriteMode> getOverwriteMode() {
        return this.overwriteMode == null ? Optional.empty() : Optional.ofNullable(this.overwriteMode);
    }

    /**
     * A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
     * 
     */
    @InputImport(name="posixPermissions")
    private final @Nullable TaskOptionsPosixPermissions posixPermissions;

    public Optional<TaskOptionsPosixPermissions> getPosixPermissions() {
        return this.posixPermissions == null ? Optional.empty() : Optional.ofNullable(this.posixPermissions);
    }

    /**
     * A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
     * 
     */
    @InputImport(name="preserveDeletedFiles")
    private final @Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles;

    public Optional<TaskOptionsPreserveDeletedFiles> getPreserveDeletedFiles() {
        return this.preserveDeletedFiles == null ? Optional.empty() : Optional.ofNullable(this.preserveDeletedFiles);
    }

    /**
     * A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
     * 
     */
    @InputImport(name="preserveDevices")
    private final @Nullable TaskOptionsPreserveDevices preserveDevices;

    public Optional<TaskOptionsPreserveDevices> getPreserveDevices() {
        return this.preserveDevices == null ? Optional.empty() : Optional.ofNullable(this.preserveDevices);
    }

    /**
     * A value that determines which components of the SMB security descriptor are copied during transfer.
     * 
     */
    @InputImport(name="securityDescriptorCopyFlags")
    private final @Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags;

    public Optional<TaskOptionsSecurityDescriptorCopyFlags> getSecurityDescriptorCopyFlags() {
        return this.securityDescriptorCopyFlags == null ? Optional.empty() : Optional.ofNullable(this.securityDescriptorCopyFlags);
    }

    /**
     * A value that determines whether tasks should be queued before executing the tasks.
     * 
     */
    @InputImport(name="taskQueueing")
    private final @Nullable TaskOptionsTaskQueueing taskQueueing;

    public Optional<TaskOptionsTaskQueueing> getTaskQueueing() {
        return this.taskQueueing == null ? Optional.empty() : Optional.ofNullable(this.taskQueueing);
    }

    /**
     * A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
     * 
     */
    @InputImport(name="transferMode")
    private final @Nullable TaskOptionsTransferMode transferMode;

    public Optional<TaskOptionsTransferMode> getTransferMode() {
        return this.transferMode == null ? Optional.empty() : Optional.ofNullable(this.transferMode);
    }

    /**
     * The user ID (UID) of the file's owner.
     * 
     */
    @InputImport(name="uid")
    private final @Nullable TaskOptionsUid uid;

    public Optional<TaskOptionsUid> getUid() {
        return this.uid == null ? Optional.empty() : Optional.ofNullable(this.uid);
    }

    /**
     * A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
     * 
     */
    @InputImport(name="verifyMode")
    private final @Nullable TaskOptionsVerifyMode verifyMode;

    public Optional<TaskOptionsVerifyMode> getVerifyMode() {
        return this.verifyMode == null ? Optional.empty() : Optional.ofNullable(this.verifyMode);
    }

    public TaskOptions(
        @Nullable TaskOptionsAtime atime,
        @Nullable Integer bytesPerSecond,
        @Nullable TaskOptionsGid gid,
        @Nullable TaskOptionsLogLevel logLevel,
        @Nullable TaskOptionsMtime mtime,
        @Nullable TaskOptionsOverwriteMode overwriteMode,
        @Nullable TaskOptionsPosixPermissions posixPermissions,
        @Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles,
        @Nullable TaskOptionsPreserveDevices preserveDevices,
        @Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags,
        @Nullable TaskOptionsTaskQueueing taskQueueing,
        @Nullable TaskOptionsTransferMode transferMode,
        @Nullable TaskOptionsUid uid,
        @Nullable TaskOptionsVerifyMode verifyMode) {
        this.atime = atime;
        this.bytesPerSecond = bytesPerSecond;
        this.gid = gid;
        this.logLevel = logLevel;
        this.mtime = mtime;
        this.overwriteMode = overwriteMode;
        this.posixPermissions = posixPermissions;
        this.preserveDeletedFiles = preserveDeletedFiles;
        this.preserveDevices = preserveDevices;
        this.securityDescriptorCopyFlags = securityDescriptorCopyFlags;
        this.taskQueueing = taskQueueing;
        this.transferMode = transferMode;
        this.uid = uid;
        this.verifyMode = verifyMode;
    }

    private TaskOptions() {
        this.atime = null;
        this.bytesPerSecond = null;
        this.gid = null;
        this.logLevel = null;
        this.mtime = null;
        this.overwriteMode = null;
        this.posixPermissions = null;
        this.preserveDeletedFiles = null;
        this.preserveDevices = null;
        this.securityDescriptorCopyFlags = null;
        this.taskQueueing = null;
        this.transferMode = null;
        this.uid = null;
        this.verifyMode = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable TaskOptionsAtime atime;
        private @Nullable Integer bytesPerSecond;
        private @Nullable TaskOptionsGid gid;
        private @Nullable TaskOptionsLogLevel logLevel;
        private @Nullable TaskOptionsMtime mtime;
        private @Nullable TaskOptionsOverwriteMode overwriteMode;
        private @Nullable TaskOptionsPosixPermissions posixPermissions;
        private @Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles;
        private @Nullable TaskOptionsPreserveDevices preserveDevices;
        private @Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags;
        private @Nullable TaskOptionsTaskQueueing taskQueueing;
        private @Nullable TaskOptionsTransferMode transferMode;
        private @Nullable TaskOptionsUid uid;
        private @Nullable TaskOptionsVerifyMode verifyMode;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atime = defaults.atime;
    	      this.bytesPerSecond = defaults.bytesPerSecond;
    	      this.gid = defaults.gid;
    	      this.logLevel = defaults.logLevel;
    	      this.mtime = defaults.mtime;
    	      this.overwriteMode = defaults.overwriteMode;
    	      this.posixPermissions = defaults.posixPermissions;
    	      this.preserveDeletedFiles = defaults.preserveDeletedFiles;
    	      this.preserveDevices = defaults.preserveDevices;
    	      this.securityDescriptorCopyFlags = defaults.securityDescriptorCopyFlags;
    	      this.taskQueueing = defaults.taskQueueing;
    	      this.transferMode = defaults.transferMode;
    	      this.uid = defaults.uid;
    	      this.verifyMode = defaults.verifyMode;
        }

        public Builder setAtime(@Nullable TaskOptionsAtime atime) {
            this.atime = atime;
            return this;
        }

        public Builder setBytesPerSecond(@Nullable Integer bytesPerSecond) {
            this.bytesPerSecond = bytesPerSecond;
            return this;
        }

        public Builder setGid(@Nullable TaskOptionsGid gid) {
            this.gid = gid;
            return this;
        }

        public Builder setLogLevel(@Nullable TaskOptionsLogLevel logLevel) {
            this.logLevel = logLevel;
            return this;
        }

        public Builder setMtime(@Nullable TaskOptionsMtime mtime) {
            this.mtime = mtime;
            return this;
        }

        public Builder setOverwriteMode(@Nullable TaskOptionsOverwriteMode overwriteMode) {
            this.overwriteMode = overwriteMode;
            return this;
        }

        public Builder setPosixPermissions(@Nullable TaskOptionsPosixPermissions posixPermissions) {
            this.posixPermissions = posixPermissions;
            return this;
        }

        public Builder setPreserveDeletedFiles(@Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles) {
            this.preserveDeletedFiles = preserveDeletedFiles;
            return this;
        }

        public Builder setPreserveDevices(@Nullable TaskOptionsPreserveDevices preserveDevices) {
            this.preserveDevices = preserveDevices;
            return this;
        }

        public Builder setSecurityDescriptorCopyFlags(@Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags) {
            this.securityDescriptorCopyFlags = securityDescriptorCopyFlags;
            return this;
        }

        public Builder setTaskQueueing(@Nullable TaskOptionsTaskQueueing taskQueueing) {
            this.taskQueueing = taskQueueing;
            return this;
        }

        public Builder setTransferMode(@Nullable TaskOptionsTransferMode transferMode) {
            this.transferMode = transferMode;
            return this;
        }

        public Builder setUid(@Nullable TaskOptionsUid uid) {
            this.uid = uid;
            return this;
        }

        public Builder setVerifyMode(@Nullable TaskOptionsVerifyMode verifyMode) {
            this.verifyMode = verifyMode;
            return this;
        }

        public TaskOptions build() {
            return new TaskOptions(atime, bytesPerSecond, gid, logLevel, mtime, overwriteMode, posixPermissions, preserveDeletedFiles, preserveDevices, securityDescriptorCopyFlags, taskQueueing, transferMode, uid, verifyMode);
        }
    }
}
