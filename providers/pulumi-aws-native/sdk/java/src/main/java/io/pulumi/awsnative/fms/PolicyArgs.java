// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.fms;

import io.pulumi.awsnative.fms.inputs.PolicyIEMapArgs;
import io.pulumi.awsnative.fms.inputs.PolicyResourceTagArgs;
import io.pulumi.awsnative.fms.inputs.PolicyTagArgs;
import io.pulumi.awsnative.fms.inputs.SecurityServicePolicyDataPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    @InputImport(name="deleteAllPolicyResources")
      private final @Nullable Output<Boolean> deleteAllPolicyResources;

    public Output<Boolean> getDeleteAllPolicyResources() {
        return this.deleteAllPolicyResources == null ? Output.empty() : this.deleteAllPolicyResources;
    }

    @InputImport(name="excludeMap")
      private final @Nullable Output<PolicyIEMapArgs> excludeMap;

    public Output<PolicyIEMapArgs> getExcludeMap() {
        return this.excludeMap == null ? Output.empty() : this.excludeMap;
    }

    @InputImport(name="excludeResourceTags", required=true)
      private final Output<Boolean> excludeResourceTags;

    public Output<Boolean> getExcludeResourceTags() {
        return this.excludeResourceTags;
    }

    @InputImport(name="includeMap")
      private final @Nullable Output<PolicyIEMapArgs> includeMap;

    public Output<PolicyIEMapArgs> getIncludeMap() {
        return this.includeMap == null ? Output.empty() : this.includeMap;
    }

    @InputImport(name="policyName")
      private final @Nullable Output<String> policyName;

    public Output<String> getPolicyName() {
        return this.policyName == null ? Output.empty() : this.policyName;
    }

    @InputImport(name="remediationEnabled", required=true)
      private final Output<Boolean> remediationEnabled;

    public Output<Boolean> getRemediationEnabled() {
        return this.remediationEnabled;
    }

    @InputImport(name="resourceTags")
      private final @Nullable Output<List<PolicyResourceTagArgs>> resourceTags;

    public Output<List<PolicyResourceTagArgs>> getResourceTags() {
        return this.resourceTags == null ? Output.empty() : this.resourceTags;
    }

    @InputImport(name="resourceType", required=true)
      private final Output<String> resourceType;

    public Output<String> getPropResourceType() {
        return this.resourceType;
    }

    @InputImport(name="resourceTypeList")
      private final @Nullable Output<List<String>> resourceTypeList;

    public Output<List<String>> getResourceTypeList() {
        return this.resourceTypeList == null ? Output.empty() : this.resourceTypeList;
    }

    @InputImport(name="resourcesCleanUp")
      private final @Nullable Output<Boolean> resourcesCleanUp;

    public Output<Boolean> getResourcesCleanUp() {
        return this.resourcesCleanUp == null ? Output.empty() : this.resourcesCleanUp;
    }

    @InputImport(name="securityServicePolicyData", required=true)
      private final Output<SecurityServicePolicyDataPropertiesArgs> securityServicePolicyData;

    public Output<SecurityServicePolicyDataPropertiesArgs> getSecurityServicePolicyData() {
        return this.securityServicePolicyData;
    }

    @InputImport(name="tags")
      private final @Nullable Output<List<PolicyTagArgs>> tags;

    public Output<List<PolicyTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public PolicyArgs(
        @Nullable Output<Boolean> deleteAllPolicyResources,
        @Nullable Output<PolicyIEMapArgs> excludeMap,
        Output<Boolean> excludeResourceTags,
        @Nullable Output<PolicyIEMapArgs> includeMap,
        @Nullable Output<String> policyName,
        Output<Boolean> remediationEnabled,
        @Nullable Output<List<PolicyResourceTagArgs>> resourceTags,
        Output<String> resourceType,
        @Nullable Output<List<String>> resourceTypeList,
        @Nullable Output<Boolean> resourcesCleanUp,
        Output<SecurityServicePolicyDataPropertiesArgs> securityServicePolicyData,
        @Nullable Output<List<PolicyTagArgs>> tags) {
        this.deleteAllPolicyResources = deleteAllPolicyResources;
        this.excludeMap = excludeMap;
        this.excludeResourceTags = Objects.requireNonNull(excludeResourceTags, "expected parameter 'excludeResourceTags' to be non-null");
        this.includeMap = includeMap;
        this.policyName = policyName;
        this.remediationEnabled = Objects.requireNonNull(remediationEnabled, "expected parameter 'remediationEnabled' to be non-null");
        this.resourceTags = resourceTags;
        this.resourceType = Objects.requireNonNull(resourceType, "expected parameter 'resourceType' to be non-null");
        this.resourceTypeList = resourceTypeList;
        this.resourcesCleanUp = resourcesCleanUp;
        this.securityServicePolicyData = Objects.requireNonNull(securityServicePolicyData, "expected parameter 'securityServicePolicyData' to be non-null");
        this.tags = tags;
    }

    private PolicyArgs() {
        this.deleteAllPolicyResources = Output.empty();
        this.excludeMap = Output.empty();
        this.excludeResourceTags = Output.empty();
        this.includeMap = Output.empty();
        this.policyName = Output.empty();
        this.remediationEnabled = Output.empty();
        this.resourceTags = Output.empty();
        this.resourceType = Output.empty();
        this.resourceTypeList = Output.empty();
        this.resourcesCleanUp = Output.empty();
        this.securityServicePolicyData = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> deleteAllPolicyResources;
        private @Nullable Output<PolicyIEMapArgs> excludeMap;
        private Output<Boolean> excludeResourceTags;
        private @Nullable Output<PolicyIEMapArgs> includeMap;
        private @Nullable Output<String> policyName;
        private Output<Boolean> remediationEnabled;
        private @Nullable Output<List<PolicyResourceTagArgs>> resourceTags;
        private Output<String> resourceType;
        private @Nullable Output<List<String>> resourceTypeList;
        private @Nullable Output<Boolean> resourcesCleanUp;
        private Output<SecurityServicePolicyDataPropertiesArgs> securityServicePolicyData;
        private @Nullable Output<List<PolicyTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteAllPolicyResources = defaults.deleteAllPolicyResources;
    	      this.excludeMap = defaults.excludeMap;
    	      this.excludeResourceTags = defaults.excludeResourceTags;
    	      this.includeMap = defaults.includeMap;
    	      this.policyName = defaults.policyName;
    	      this.remediationEnabled = defaults.remediationEnabled;
    	      this.resourceTags = defaults.resourceTags;
    	      this.resourceType = defaults.resourceType;
    	      this.resourceTypeList = defaults.resourceTypeList;
    	      this.resourcesCleanUp = defaults.resourcesCleanUp;
    	      this.securityServicePolicyData = defaults.securityServicePolicyData;
    	      this.tags = defaults.tags;
        }

        public Builder deleteAllPolicyResources(@Nullable Output<Boolean> deleteAllPolicyResources) {
            this.deleteAllPolicyResources = deleteAllPolicyResources;
            return this;
        }

        public Builder deleteAllPolicyResources(@Nullable Boolean deleteAllPolicyResources) {
            this.deleteAllPolicyResources = Output.ofNullable(deleteAllPolicyResources);
            return this;
        }

        public Builder excludeMap(@Nullable Output<PolicyIEMapArgs> excludeMap) {
            this.excludeMap = excludeMap;
            return this;
        }

        public Builder excludeMap(@Nullable PolicyIEMapArgs excludeMap) {
            this.excludeMap = Output.ofNullable(excludeMap);
            return this;
        }

        public Builder excludeResourceTags(Output<Boolean> excludeResourceTags) {
            this.excludeResourceTags = Objects.requireNonNull(excludeResourceTags);
            return this;
        }

        public Builder excludeResourceTags(Boolean excludeResourceTags) {
            this.excludeResourceTags = Output.of(Objects.requireNonNull(excludeResourceTags));
            return this;
        }

        public Builder includeMap(@Nullable Output<PolicyIEMapArgs> includeMap) {
            this.includeMap = includeMap;
            return this;
        }

        public Builder includeMap(@Nullable PolicyIEMapArgs includeMap) {
            this.includeMap = Output.ofNullable(includeMap);
            return this;
        }

        public Builder policyName(@Nullable Output<String> policyName) {
            this.policyName = policyName;
            return this;
        }

        public Builder policyName(@Nullable String policyName) {
            this.policyName = Output.ofNullable(policyName);
            return this;
        }

        public Builder remediationEnabled(Output<Boolean> remediationEnabled) {
            this.remediationEnabled = Objects.requireNonNull(remediationEnabled);
            return this;
        }

        public Builder remediationEnabled(Boolean remediationEnabled) {
            this.remediationEnabled = Output.of(Objects.requireNonNull(remediationEnabled));
            return this;
        }

        public Builder resourceTags(@Nullable Output<List<PolicyResourceTagArgs>> resourceTags) {
            this.resourceTags = resourceTags;
            return this;
        }

        public Builder resourceTags(@Nullable List<PolicyResourceTagArgs> resourceTags) {
            this.resourceTags = Output.ofNullable(resourceTags);
            return this;
        }

        public Builder resourceType(Output<String> resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }

        public Builder resourceType(String resourceType) {
            this.resourceType = Output.of(Objects.requireNonNull(resourceType));
            return this;
        }

        public Builder resourceTypeList(@Nullable Output<List<String>> resourceTypeList) {
            this.resourceTypeList = resourceTypeList;
            return this;
        }

        public Builder resourceTypeList(@Nullable List<String> resourceTypeList) {
            this.resourceTypeList = Output.ofNullable(resourceTypeList);
            return this;
        }

        public Builder resourcesCleanUp(@Nullable Output<Boolean> resourcesCleanUp) {
            this.resourcesCleanUp = resourcesCleanUp;
            return this;
        }

        public Builder resourcesCleanUp(@Nullable Boolean resourcesCleanUp) {
            this.resourcesCleanUp = Output.ofNullable(resourcesCleanUp);
            return this;
        }

        public Builder securityServicePolicyData(Output<SecurityServicePolicyDataPropertiesArgs> securityServicePolicyData) {
            this.securityServicePolicyData = Objects.requireNonNull(securityServicePolicyData);
            return this;
        }

        public Builder securityServicePolicyData(SecurityServicePolicyDataPropertiesArgs securityServicePolicyData) {
            this.securityServicePolicyData = Output.of(Objects.requireNonNull(securityServicePolicyData));
            return this;
        }

        public Builder tags(@Nullable Output<List<PolicyTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<PolicyTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public PolicyArgs build() {
            return new PolicyArgs(deleteAllPolicyResources, excludeMap, excludeResourceTags, includeMap, policyName, remediationEnabled, resourceTags, resourceType, resourceTypeList, resourcesCleanUp, securityServicePolicyData, tags);
        }
    }
}
