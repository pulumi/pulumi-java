// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.accessanalyzer.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyzerFilter extends io.pulumi.resources.InvokeArgs {

    public static final AnalyzerFilter Empty = new AnalyzerFilter();

    @Import(name="contains")
      private final @Nullable List<String> contains;

    public List<String> contains() {
        return this.contains == null ? List.of() : this.contains;
    }

    @Import(name="eq")
      private final @Nullable List<String> eq;

    public List<String> eq() {
        return this.eq == null ? List.of() : this.eq;
    }

    @Import(name="exists")
      private final @Nullable Boolean exists;

    public Optional<Boolean> exists() {
        return this.exists == null ? Optional.empty() : Optional.ofNullable(this.exists);
    }

    @Import(name="neq")
      private final @Nullable List<String> neq;

    public List<String> neq() {
        return this.neq == null ? List.of() : this.neq;
    }

    @Import(name="property", required=true)
      private final String property;

    public String property() {
        return this.property;
    }

    public AnalyzerFilter(
        @Nullable List<String> contains,
        @Nullable List<String> eq,
        @Nullable Boolean exists,
        @Nullable List<String> neq,
        String property) {
        this.contains = contains;
        this.eq = eq;
        this.exists = exists;
        this.neq = neq;
        this.property = Objects.requireNonNull(property, "expected parameter 'property' to be non-null");
    }

    private AnalyzerFilter() {
        this.contains = List.of();
        this.eq = List.of();
        this.exists = null;
        this.neq = List.of();
        this.property = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyzerFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> contains;
        private @Nullable List<String> eq;
        private @Nullable Boolean exists;
        private @Nullable List<String> neq;
        private String property;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyzerFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contains = defaults.contains;
    	      this.eq = defaults.eq;
    	      this.exists = defaults.exists;
    	      this.neq = defaults.neq;
    	      this.property = defaults.property;
        }

        public Builder contains(@Nullable List<String> contains) {
            this.contains = contains;
            return this;
        }
        public Builder contains(String... contains) {
            return contains(List.of(contains));
        }
        public Builder eq(@Nullable List<String> eq) {
            this.eq = eq;
            return this;
        }
        public Builder eq(String... eq) {
            return eq(List.of(eq));
        }
        public Builder exists(@Nullable Boolean exists) {
            this.exists = exists;
            return this;
        }
        public Builder neq(@Nullable List<String> neq) {
            this.neq = neq;
            return this;
        }
        public Builder neq(String... neq) {
            return neq(List.of(neq));
        }
        public Builder property(String property) {
            this.property = Objects.requireNonNull(property);
            return this;
        }        public AnalyzerFilter build() {
            return new AnalyzerFilter(contains, eq, exists, neq, property);
        }
    }
}
