// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.imagebuilder;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.imagebuilder.ContainerRecipeArgs;
import io.pulumi.awsnative.imagebuilder.enums.ContainerRecipeContainerType;
import io.pulumi.awsnative.imagebuilder.enums.ContainerRecipePlatformOverride;
import io.pulumi.awsnative.imagebuilder.outputs.ContainerRecipeComponentConfiguration;
import io.pulumi.awsnative.imagebuilder.outputs.ContainerRecipeInstanceConfiguration;
import io.pulumi.awsnative.imagebuilder.outputs.ContainerRecipeTargetContainerRepository;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Resource schema for AWS::ImageBuilder::ContainerRecipe
 * 
 */
@ResourceType(type="aws-native:imagebuilder:ContainerRecipe")
public class ContainerRecipe extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the container recipe.
     * 
     */
    @OutputExport(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the container recipe.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Components for build and test that are included in the container recipe.
     * 
     */
    @OutputExport(name="components", type=List.class, parameters={ContainerRecipeComponentConfiguration.class})
    private Output</* @Nullable */ List<ContainerRecipeComponentConfiguration>> components;

    /**
     * @return Components for build and test that are included in the container recipe.
     * 
     */
    public Output</* @Nullable */ List<ContainerRecipeComponentConfiguration>> getComponents() {
        return this.components;
    }
    /**
     * Specifies the type of container, such as Docker.
     * 
     */
    @OutputExport(name="containerType", type=ContainerRecipeContainerType.class, parameters={})
    private Output</* @Nullable */ ContainerRecipeContainerType> containerType;

    /**
     * @return Specifies the type of container, such as Docker.
     * 
     */
    public Output</* @Nullable */ ContainerRecipeContainerType> getContainerType() {
        return this.containerType;
    }
    /**
     * The description of the container recipe.
     * 
     */
    @OutputExport(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the container recipe.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
     * 
     */
    @OutputExport(name="dockerfileTemplateData", type=String.class, parameters={})
    private Output</* @Nullable */ String> dockerfileTemplateData;

    /**
     * @return Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
     * 
     */
    public Output</* @Nullable */ String> getDockerfileTemplateData() {
        return this.dockerfileTemplateData;
    }
    /**
     * The S3 URI for the Dockerfile that will be used to build your container image.
     * 
     */
    @OutputExport(name="dockerfileTemplateUri", type=String.class, parameters={})
    private Output</* @Nullable */ String> dockerfileTemplateUri;

    /**
     * @return The S3 URI for the Dockerfile that will be used to build your container image.
     * 
     */
    public Output</* @Nullable */ String> getDockerfileTemplateUri() {
        return this.dockerfileTemplateUri;
    }
    /**
     * Specifies the operating system version for the source image.
     * 
     */
    @OutputExport(name="imageOsVersionOverride", type=String.class, parameters={})
    private Output</* @Nullable */ String> imageOsVersionOverride;

    /**
     * @return Specifies the operating system version for the source image.
     * 
     */
    public Output</* @Nullable */ String> getImageOsVersionOverride() {
        return this.imageOsVersionOverride;
    }
    /**
     * A group of options that can be used to configure an instance for building and testing container images.
     * 
     */
    @OutputExport(name="instanceConfiguration", type=ContainerRecipeInstanceConfiguration.class, parameters={})
    private Output</* @Nullable */ ContainerRecipeInstanceConfiguration> instanceConfiguration;

    /**
     * @return A group of options that can be used to configure an instance for building and testing container images.
     * 
     */
    public Output</* @Nullable */ ContainerRecipeInstanceConfiguration> getInstanceConfiguration() {
        return this.instanceConfiguration;
    }
    /**
     * Identifies which KMS key is used to encrypt the container image.
     * 
     */
    @OutputExport(name="kmsKeyId", type=String.class, parameters={})
    private Output</* @Nullable */ String> kmsKeyId;

    /**
     * @return Identifies which KMS key is used to encrypt the container image.
     * 
     */
    public Output</* @Nullable */ String> getKmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * The name of the container recipe.
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output</* @Nullable */ String> name;

    /**
     * @return The name of the container recipe.
     * 
     */
    public Output</* @Nullable */ String> getName() {
        return this.name;
    }
    /**
     * The source image for the container recipe.
     * 
     */
    @OutputExport(name="parentImage", type=String.class, parameters={})
    private Output</* @Nullable */ String> parentImage;

    /**
     * @return The source image for the container recipe.
     * 
     */
    public Output</* @Nullable */ String> getParentImage() {
        return this.parentImage;
    }
    /**
     * Specifies the operating system platform when you use a custom source image.
     * 
     */
    @OutputExport(name="platformOverride", type=ContainerRecipePlatformOverride.class, parameters={})
    private Output</* @Nullable */ ContainerRecipePlatformOverride> platformOverride;

    /**
     * @return Specifies the operating system platform when you use a custom source image.
     * 
     */
    public Output</* @Nullable */ ContainerRecipePlatformOverride> getPlatformOverride() {
        return this.platformOverride;
    }
    /**
     * Tags that are attached to the container recipe.
     * 
     */
    @OutputExport(name="tags", type=Object.class, parameters={})
    private Output</* @Nullable */ Object> tags;

    /**
     * @return Tags that are attached to the container recipe.
     * 
     */
    public Output</* @Nullable */ Object> getTags() {
        return this.tags;
    }
    /**
     * The destination repository for the container image.
     * 
     */
    @OutputExport(name="targetRepository", type=ContainerRecipeTargetContainerRepository.class, parameters={})
    private Output</* @Nullable */ ContainerRecipeTargetContainerRepository> targetRepository;

    /**
     * @return The destination repository for the container image.
     * 
     */
    public Output</* @Nullable */ ContainerRecipeTargetContainerRepository> getTargetRepository() {
        return this.targetRepository;
    }
    /**
     * The semantic version of the container recipe (<major>.<minor>.<patch>).
     * 
     */
    @OutputExport(name="version", type=String.class, parameters={})
    private Output</* @Nullable */ String> version;

    /**
     * @return The semantic version of the container recipe (<major>.<minor>.<patch>).
     * 
     */
    public Output</* @Nullable */ String> getVersion() {
        return this.version;
    }
    /**
     * The working directory to be used during build and test workflows.
     * 
     */
    @OutputExport(name="workingDirectory", type=String.class, parameters={})
    private Output</* @Nullable */ String> workingDirectory;

    /**
     * @return The working directory to be used during build and test workflows.
     * 
     */
    public Output</* @Nullable */ String> getWorkingDirectory() {
        return this.workingDirectory;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContainerRecipe(String name) {
        this(name, ContainerRecipeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContainerRecipe(String name, @Nullable ContainerRecipeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContainerRecipe(String name, @Nullable ContainerRecipeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:imagebuilder:ContainerRecipe", name, args == null ? ContainerRecipeArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private ContainerRecipe(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:imagebuilder:ContainerRecipe", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContainerRecipe get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ContainerRecipe(name, id, options);
    }
}
