// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail;

import io.pulumi.awsnative.lightsail.inputs.CertificateTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * The name for the certificate.
     * 
     */
    @InputImport(name="certificateName")
      private final @Nullable Input<String> certificateName;

    public Input<String> getCertificateName() {
        return this.certificateName == null ? Input.empty() : this.certificateName;
    }

    /**
     * The domain name (e.g., example.com ) for the certificate.
     * 
     */
    @InputImport(name="domainName", required=true)
      private final Input<String> domainName;

    public Input<String> getDomainName() {
        return this.domainName;
    }

    /**
     * An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) for the certificate.
     * 
     */
    @InputImport(name="subjectAlternativeNames")
      private final @Nullable Input<List<String>> subjectAlternativeNames;

    public Input<List<String>> getSubjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? Input.empty() : this.subjectAlternativeNames;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<List<CertificateTagArgs>> tags;

    public Input<List<CertificateTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public CertificateArgs(
        @Nullable Input<String> certificateName,
        Input<String> domainName,
        @Nullable Input<List<String>> subjectAlternativeNames,
        @Nullable Input<List<CertificateTagArgs>> tags) {
        this.certificateName = certificateName;
        this.domainName = Objects.requireNonNull(domainName, "expected parameter 'domainName' to be non-null");
        this.subjectAlternativeNames = subjectAlternativeNames;
        this.tags = tags;
    }

    private CertificateArgs() {
        this.certificateName = Input.empty();
        this.domainName = Input.empty();
        this.subjectAlternativeNames = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> certificateName;
        private Input<String> domainName;
        private @Nullable Input<List<String>> subjectAlternativeNames;
        private @Nullable Input<List<CertificateTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateName = defaults.certificateName;
    	      this.domainName = defaults.domainName;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.tags = defaults.tags;
        }

        public Builder certificateName(@Nullable Input<String> certificateName) {
            this.certificateName = certificateName;
            return this;
        }

        public Builder certificateName(@Nullable String certificateName) {
            this.certificateName = Input.ofNullable(certificateName);
            return this;
        }

        public Builder domainName(Input<String> domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }

        public Builder domainName(String domainName) {
            this.domainName = Input.of(Objects.requireNonNull(domainName));
            return this;
        }

        public Builder subjectAlternativeNames(@Nullable Input<List<String>> subjectAlternativeNames) {
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        public Builder subjectAlternativeNames(@Nullable List<String> subjectAlternativeNames) {
            this.subjectAlternativeNames = Input.ofNullable(subjectAlternativeNames);
            return this;
        }

        public Builder tags(@Nullable Input<List<CertificateTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<CertificateTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public CertificateArgs build() {
            return new CertificateArgs(certificateName, domainName, subjectAlternativeNames, tags);
        }
    }
}
