// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.apprunner;

import io.pulumi.awsnative.apprunner.inputs.VpcConnectorTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcConnectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpcConnectorArgs Empty = new VpcConnectorArgs();

    /**
     * A list of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets. If not specified, App Runner uses the default security group of the Amazon VPC. The default security group allows all outbound traffic.
     * 
     */
    @Import(name="securityGroups")
      private final @Nullable Output<List<String>> securityGroups;

    public Output<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Output.empty() : this.securityGroups;
    }

    /**
     * A list of IDs of subnets that App Runner should use when it associates your service with a custom Amazon VPC. Specify IDs of subnets of a single Amazon VPC. App Runner determines the Amazon VPC from the subnets you specify.
     * 
     */
    @Import(name="subnets", required=true)
      private final Output<List<String>> subnets;

    public Output<List<String>> getSubnets() {
        return this.subnets;
    }

    /**
     * A list of metadata items that you can associate with your VPC connector resource. A tag is a key-value pair.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<VpcConnectorTagArgs>> tags;

    public Output<List<VpcConnectorTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A name for the VPC connector. If you don't specify a name, AWS CloudFormation generates a name for your VPC connector.
     * 
     */
    @Import(name="vpcConnectorName")
      private final @Nullable Output<String> vpcConnectorName;

    public Output<String> getVpcConnectorName() {
        return this.vpcConnectorName == null ? Output.empty() : this.vpcConnectorName;
    }

    public VpcConnectorArgs(
        @Nullable Output<List<String>> securityGroups,
        Output<List<String>> subnets,
        @Nullable Output<List<VpcConnectorTagArgs>> tags,
        @Nullable Output<String> vpcConnectorName) {
        this.securityGroups = securityGroups;
        this.subnets = Objects.requireNonNull(subnets, "expected parameter 'subnets' to be non-null");
        this.tags = tags;
        this.vpcConnectorName = vpcConnectorName;
    }

    private VpcConnectorArgs() {
        this.securityGroups = Output.empty();
        this.subnets = Output.empty();
        this.tags = Output.empty();
        this.vpcConnectorName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> securityGroups;
        private Output<List<String>> subnets;
        private @Nullable Output<List<VpcConnectorTagArgs>> tags;
        private @Nullable Output<String> vpcConnectorName;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcConnectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.securityGroups = defaults.securityGroups;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.vpcConnectorName = defaults.vpcConnectorName;
        }

        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Output.ofNullable(securityGroups);
            return this;
        }

        public Builder subnets(Output<List<String>> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }

        public Builder subnets(List<String> subnets) {
            this.subnets = Output.of(Objects.requireNonNull(subnets));
            return this;
        }

        public Builder tags(@Nullable Output<List<VpcConnectorTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<VpcConnectorTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vpcConnectorName(@Nullable Output<String> vpcConnectorName) {
            this.vpcConnectorName = vpcConnectorName;
            return this;
        }

        public Builder vpcConnectorName(@Nullable String vpcConnectorName) {
            this.vpcConnectorName = Output.ofNullable(vpcConnectorName);
            return this;
        }
        public VpcConnectorArgs build() {
            return new VpcConnectorArgs(securityGroups, subnets, tags, vpcConnectorName);
        }
    }
}
