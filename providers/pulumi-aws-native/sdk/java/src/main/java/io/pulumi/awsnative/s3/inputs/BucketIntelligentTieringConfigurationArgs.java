// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.inputs;

import io.pulumi.awsnative.s3.enums.BucketIntelligentTieringConfigurationStatus;
import io.pulumi.awsnative.s3.inputs.BucketTagFilterArgs;
import io.pulumi.awsnative.s3.inputs.BucketTieringArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketIntelligentTieringConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketIntelligentTieringConfigurationArgs Empty = new BucketIntelligentTieringConfigurationArgs();

    /**
     * The ID used to identify the S3 Intelligent-Tiering configuration.
     * 
     */
    @InputImport(name="id", required=true)
    private final Input<String> id;

    public Input<String> getId() {
        return this.id;
    }

    /**
     * An object key name prefix that identifies the subset of objects to which the rule applies.
     * 
     */
    @InputImport(name="prefix")
    private final @Nullable Input<String> prefix;

    public Input<String> getPrefix() {
        return this.prefix == null ? Input.empty() : this.prefix;
    }

    /**
     * Specifies the status of the configuration.
     * 
     */
    @InputImport(name="status", required=true)
    private final Input<BucketIntelligentTieringConfigurationStatus> status;

    public Input<BucketIntelligentTieringConfigurationStatus> getStatus() {
        return this.status;
    }

    /**
     * A container for a key-value pair.
     * 
     */
    @InputImport(name="tagFilters")
    private final @Nullable Input<List<BucketTagFilterArgs>> tagFilters;

    public Input<List<BucketTagFilterArgs>> getTagFilters() {
        return this.tagFilters == null ? Input.empty() : this.tagFilters;
    }

    /**
     * Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
     * 
     */
    @InputImport(name="tierings", required=true)
    private final Input<List<BucketTieringArgs>> tierings;

    public Input<List<BucketTieringArgs>> getTierings() {
        return this.tierings;
    }

    public BucketIntelligentTieringConfigurationArgs(
        Input<String> id,
        @Nullable Input<String> prefix,
        Input<BucketIntelligentTieringConfigurationStatus> status,
        @Nullable Input<List<BucketTagFilterArgs>> tagFilters,
        Input<List<BucketTieringArgs>> tierings) {
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.prefix = prefix;
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.tagFilters = tagFilters;
        this.tierings = Objects.requireNonNull(tierings, "expected parameter 'tierings' to be non-null");
    }

    private BucketIntelligentTieringConfigurationArgs() {
        this.id = Input.empty();
        this.prefix = Input.empty();
        this.status = Input.empty();
        this.tagFilters = Input.empty();
        this.tierings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketIntelligentTieringConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> id;
        private @Nullable Input<String> prefix;
        private Input<BucketIntelligentTieringConfigurationStatus> status;
        private @Nullable Input<List<BucketTagFilterArgs>> tagFilters;
        private Input<List<BucketTieringArgs>> tierings;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketIntelligentTieringConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.tagFilters = defaults.tagFilters;
    	      this.tierings = defaults.tierings;
        }

        public Builder setId(Input<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setId(String id) {
            this.id = Input.of(Objects.requireNonNull(id));
            return this;
        }

        public Builder setPrefix(@Nullable Input<String> prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder setPrefix(@Nullable String prefix) {
            this.prefix = Input.ofNullable(prefix);
            return this;
        }

        public Builder setStatus(Input<BucketIntelligentTieringConfigurationStatus> status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setStatus(BucketIntelligentTieringConfigurationStatus status) {
            this.status = Input.of(Objects.requireNonNull(status));
            return this;
        }

        public Builder setTagFilters(@Nullable Input<List<BucketTagFilterArgs>> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }

        public Builder setTagFilters(@Nullable List<BucketTagFilterArgs> tagFilters) {
            this.tagFilters = Input.ofNullable(tagFilters);
            return this;
        }

        public Builder setTierings(Input<List<BucketTieringArgs>> tierings) {
            this.tierings = Objects.requireNonNull(tierings);
            return this;
        }

        public Builder setTierings(List<BucketTieringArgs> tierings) {
            this.tierings = Input.of(Objects.requireNonNull(tierings));
            return this;
        }

        public BucketIntelligentTieringConfigurationArgs build() {
            return new BucketIntelligentTieringConfigurationArgs(id, prefix, status, tagFilters, tierings);
        }
    }
}
