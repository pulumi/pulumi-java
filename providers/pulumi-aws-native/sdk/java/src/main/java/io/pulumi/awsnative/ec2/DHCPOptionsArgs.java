// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ec2;

import io.pulumi.awsnative.ec2.inputs.DHCPOptionsTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DHCPOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final DHCPOptionsArgs Empty = new DHCPOptionsArgs();

    /**
     * This value is used to complete unqualified DNS hostnames.
     * 
     */
    @Import(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName == null ? Output.empty() : this.domainName;
    }

    /**
     * The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
     * 
     */
    @Import(name="domainNameServers")
      private final @Nullable Output<List<String>> domainNameServers;

    public Output<List<String>> getDomainNameServers() {
        return this.domainNameServers == null ? Output.empty() : this.domainNameServers;
    }

    /**
     * The IPv4 addresses of up to four NetBIOS name servers.
     * 
     */
    @Import(name="netbiosNameServers")
      private final @Nullable Output<List<String>> netbiosNameServers;

    public Output<List<String>> getNetbiosNameServers() {
        return this.netbiosNameServers == null ? Output.empty() : this.netbiosNameServers;
    }

    /**
     * The NetBIOS node type (1, 2, 4, or 8).
     * 
     */
    @Import(name="netbiosNodeType")
      private final @Nullable Output<Integer> netbiosNodeType;

    public Output<Integer> getNetbiosNodeType() {
        return this.netbiosNodeType == null ? Output.empty() : this.netbiosNodeType;
    }

    /**
     * The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
     * 
     */
    @Import(name="ntpServers")
      private final @Nullable Output<List<String>> ntpServers;

    public Output<List<String>> getNtpServers() {
        return this.ntpServers == null ? Output.empty() : this.ntpServers;
    }

    /**
     * Any tags assigned to the DHCP options set.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<DHCPOptionsTagArgs>> tags;

    public Output<List<DHCPOptionsTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DHCPOptionsArgs(
        @Nullable Output<String> domainName,
        @Nullable Output<List<String>> domainNameServers,
        @Nullable Output<List<String>> netbiosNameServers,
        @Nullable Output<Integer> netbiosNodeType,
        @Nullable Output<List<String>> ntpServers,
        @Nullable Output<List<DHCPOptionsTagArgs>> tags) {
        this.domainName = domainName;
        this.domainNameServers = domainNameServers;
        this.netbiosNameServers = netbiosNameServers;
        this.netbiosNodeType = netbiosNodeType;
        this.ntpServers = ntpServers;
        this.tags = tags;
    }

    private DHCPOptionsArgs() {
        this.domainName = Output.empty();
        this.domainNameServers = Output.empty();
        this.netbiosNameServers = Output.empty();
        this.netbiosNodeType = Output.empty();
        this.ntpServers = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DHCPOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> domainName;
        private @Nullable Output<List<String>> domainNameServers;
        private @Nullable Output<List<String>> netbiosNameServers;
        private @Nullable Output<Integer> netbiosNodeType;
        private @Nullable Output<List<String>> ntpServers;
        private @Nullable Output<List<DHCPOptionsTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DHCPOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.domainNameServers = defaults.domainNameServers;
    	      this.netbiosNameServers = defaults.netbiosNameServers;
    	      this.netbiosNodeType = defaults.netbiosNodeType;
    	      this.ntpServers = defaults.ntpServers;
    	      this.tags = defaults.tags;
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder domainName(@Nullable String domainName) {
            this.domainName = Output.ofNullable(domainName);
            return this;
        }

        public Builder domainNameServers(@Nullable Output<List<String>> domainNameServers) {
            this.domainNameServers = domainNameServers;
            return this;
        }

        public Builder domainNameServers(@Nullable List<String> domainNameServers) {
            this.domainNameServers = Output.ofNullable(domainNameServers);
            return this;
        }

        public Builder netbiosNameServers(@Nullable Output<List<String>> netbiosNameServers) {
            this.netbiosNameServers = netbiosNameServers;
            return this;
        }

        public Builder netbiosNameServers(@Nullable List<String> netbiosNameServers) {
            this.netbiosNameServers = Output.ofNullable(netbiosNameServers);
            return this;
        }

        public Builder netbiosNodeType(@Nullable Output<Integer> netbiosNodeType) {
            this.netbiosNodeType = netbiosNodeType;
            return this;
        }

        public Builder netbiosNodeType(@Nullable Integer netbiosNodeType) {
            this.netbiosNodeType = Output.ofNullable(netbiosNodeType);
            return this;
        }

        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            this.ntpServers = ntpServers;
            return this;
        }

        public Builder ntpServers(@Nullable List<String> ntpServers) {
            this.ntpServers = Output.ofNullable(ntpServers);
            return this;
        }

        public Builder tags(@Nullable Output<List<DHCPOptionsTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<DHCPOptionsTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DHCPOptionsArgs build() {
            return new DHCPOptionsArgs(domainName, domainNameServers, netbiosNameServers, netbiosNodeType, ntpServers, tags);
        }
    }
}
