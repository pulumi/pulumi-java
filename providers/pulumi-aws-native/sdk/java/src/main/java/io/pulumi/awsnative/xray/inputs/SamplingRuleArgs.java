// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.xray.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SamplingRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final SamplingRuleArgs Empty = new SamplingRuleArgs();

    /**
     * Matches attributes derived from the request.
     * 
     */
    @Import(name="attributes")
      private final @Nullable Output<Object> attributes;

    public Output<Object> attributes() {
        return this.attributes == null ? Codegen.empty() : this.attributes;
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @Import(name="fixedRate")
      private final @Nullable Output<Double> fixedRate;

    public Output<Double> fixedRate() {
        return this.fixedRate == null ? Codegen.empty() : this.fixedRate;
    }

    /**
     * Matches the HTTP method from a request URL.
     * 
     */
    @Import(name="hTTPMethod")
      private final @Nullable Output<String> hTTPMethod;

    public Output<String> hTTPMethod() {
        return this.hTTPMethod == null ? Codegen.empty() : this.hTTPMethod;
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @Import(name="host")
      private final @Nullable Output<String> host;

    public Output<String> host() {
        return this.host == null ? Codegen.empty() : this.host;
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority == null ? Codegen.empty() : this.priority;
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @Import(name="reservoirSize")
      private final @Nullable Output<Integer> reservoirSize;

    public Output<Integer> reservoirSize() {
        return this.reservoirSize == null ? Codegen.empty() : this.reservoirSize;
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @Import(name="resourceARN")
      private final @Nullable Output<String> resourceARN;

    public Output<String> resourceARN() {
        return this.resourceARN == null ? Codegen.empty() : this.resourceARN;
    }

    @Import(name="ruleARN")
      private final @Nullable Output<String> ruleARN;

    public Output<String> ruleARN() {
        return this.ruleARN == null ? Codegen.empty() : this.ruleARN;
    }

    @Import(name="ruleName")
      private final @Nullable Output<String> ruleName;

    public Output<String> ruleName() {
        return this.ruleName == null ? Codegen.empty() : this.ruleName;
    }

    /**
     * Matches the name that the service uses to identify itself in segments.
     * 
     */
    @Import(name="serviceName")
      private final @Nullable Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName == null ? Codegen.empty() : this.serviceName;
    }

    /**
     * Matches the origin that the service uses to identify its type in segments.
     * 
     */
    @Import(name="serviceType")
      private final @Nullable Output<String> serviceType;

    public Output<String> serviceType() {
        return this.serviceType == null ? Codegen.empty() : this.serviceType;
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @Import(name="uRLPath")
      private final @Nullable Output<String> uRLPath;

    public Output<String> uRLPath() {
        return this.uRLPath == null ? Codegen.empty() : this.uRLPath;
    }

    /**
     * The version of the sampling rule format (1)
     * 
     */
    @Import(name="version")
      private final @Nullable Output<Integer> version;

    public Output<Integer> version() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public SamplingRuleArgs(
        @Nullable Output<Object> attributes,
        @Nullable Output<Double> fixedRate,
        @Nullable Output<String> hTTPMethod,
        @Nullable Output<String> host,
        @Nullable Output<Integer> priority,
        @Nullable Output<Integer> reservoirSize,
        @Nullable Output<String> resourceARN,
        @Nullable Output<String> ruleARN,
        @Nullable Output<String> ruleName,
        @Nullable Output<String> serviceName,
        @Nullable Output<String> serviceType,
        @Nullable Output<String> uRLPath,
        @Nullable Output<Integer> version) {
        this.attributes = attributes;
        this.fixedRate = fixedRate;
        this.hTTPMethod = hTTPMethod;
        this.host = host;
        this.priority = priority;
        this.reservoirSize = reservoirSize;
        this.resourceARN = resourceARN;
        this.ruleARN = ruleARN;
        this.ruleName = ruleName;
        this.serviceName = serviceName;
        this.serviceType = serviceType;
        this.uRLPath = uRLPath;
        this.version = version;
    }

    private SamplingRuleArgs() {
        this.attributes = Codegen.empty();
        this.fixedRate = Codegen.empty();
        this.hTTPMethod = Codegen.empty();
        this.host = Codegen.empty();
        this.priority = Codegen.empty();
        this.reservoirSize = Codegen.empty();
        this.resourceARN = Codegen.empty();
        this.ruleARN = Codegen.empty();
        this.ruleName = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.serviceType = Codegen.empty();
        this.uRLPath = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SamplingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> attributes;
        private @Nullable Output<Double> fixedRate;
        private @Nullable Output<String> hTTPMethod;
        private @Nullable Output<String> host;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<Integer> reservoirSize;
        private @Nullable Output<String> resourceARN;
        private @Nullable Output<String> ruleARN;
        private @Nullable Output<String> ruleName;
        private @Nullable Output<String> serviceName;
        private @Nullable Output<String> serviceType;
        private @Nullable Output<String> uRLPath;
        private @Nullable Output<Integer> version;

        public Builder() {
    	      // Empty
        }

        public Builder(SamplingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.fixedRate = defaults.fixedRate;
    	      this.hTTPMethod = defaults.hTTPMethod;
    	      this.host = defaults.host;
    	      this.priority = defaults.priority;
    	      this.reservoirSize = defaults.reservoirSize;
    	      this.resourceARN = defaults.resourceARN;
    	      this.ruleARN = defaults.ruleARN;
    	      this.ruleName = defaults.ruleName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceType = defaults.serviceType;
    	      this.uRLPath = defaults.uRLPath;
    	      this.version = defaults.version;
        }

        public Builder attributes(@Nullable Output<Object> attributes) {
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(@Nullable Object attributes) {
            this.attributes = Codegen.ofNullable(attributes);
            return this;
        }
        public Builder fixedRate(@Nullable Output<Double> fixedRate) {
            this.fixedRate = fixedRate;
            return this;
        }
        public Builder fixedRate(@Nullable Double fixedRate) {
            this.fixedRate = Codegen.ofNullable(fixedRate);
            return this;
        }
        public Builder hTTPMethod(@Nullable Output<String> hTTPMethod) {
            this.hTTPMethod = hTTPMethod;
            return this;
        }
        public Builder hTTPMethod(@Nullable String hTTPMethod) {
            this.hTTPMethod = Codegen.ofNullable(hTTPMethod);
            return this;
        }
        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = Codegen.ofNullable(host);
            return this;
        }
        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = Codegen.ofNullable(priority);
            return this;
        }
        public Builder reservoirSize(@Nullable Output<Integer> reservoirSize) {
            this.reservoirSize = reservoirSize;
            return this;
        }
        public Builder reservoirSize(@Nullable Integer reservoirSize) {
            this.reservoirSize = Codegen.ofNullable(reservoirSize);
            return this;
        }
        public Builder resourceARN(@Nullable Output<String> resourceARN) {
            this.resourceARN = resourceARN;
            return this;
        }
        public Builder resourceARN(@Nullable String resourceARN) {
            this.resourceARN = Codegen.ofNullable(resourceARN);
            return this;
        }
        public Builder ruleARN(@Nullable Output<String> ruleARN) {
            this.ruleARN = ruleARN;
            return this;
        }
        public Builder ruleARN(@Nullable String ruleARN) {
            this.ruleARN = Codegen.ofNullable(ruleARN);
            return this;
        }
        public Builder ruleName(@Nullable Output<String> ruleName) {
            this.ruleName = ruleName;
            return this;
        }
        public Builder ruleName(@Nullable String ruleName) {
            this.ruleName = Codegen.ofNullable(ruleName);
            return this;
        }
        public Builder serviceName(@Nullable Output<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = Codegen.ofNullable(serviceName);
            return this;
        }
        public Builder serviceType(@Nullable Output<String> serviceType) {
            this.serviceType = serviceType;
            return this;
        }
        public Builder serviceType(@Nullable String serviceType) {
            this.serviceType = Codegen.ofNullable(serviceType);
            return this;
        }
        public Builder uRLPath(@Nullable Output<String> uRLPath) {
            this.uRLPath = uRLPath;
            return this;
        }
        public Builder uRLPath(@Nullable String uRLPath) {
            this.uRLPath = Codegen.ofNullable(uRLPath);
            return this;
        }
        public Builder version(@Nullable Output<Integer> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable Integer version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }        public SamplingRuleArgs build() {
            return new SamplingRuleArgs(attributes, fixedRate, hTTPMethod, host, priority, reservoirSize, resourceARN, ruleARN, ruleName, serviceName, serviceType, uRLPath, version);
        }
    }
}
