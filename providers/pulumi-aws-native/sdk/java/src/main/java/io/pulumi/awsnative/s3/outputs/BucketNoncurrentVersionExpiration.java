// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BucketNoncurrentVersionExpiration {
    private final @Nullable Integer newerNoncurrentVersions;
    private final Integer noncurrentDays;

    @OutputCustomType.Constructor({"newerNoncurrentVersions","noncurrentDays"})
    private BucketNoncurrentVersionExpiration(
        @Nullable Integer newerNoncurrentVersions,
        Integer noncurrentDays) {
        this.newerNoncurrentVersions = newerNoncurrentVersions;
        this.noncurrentDays = Objects.requireNonNull(noncurrentDays);
    }

    public Optional<Integer> getNewerNoncurrentVersions() {
        return Optional.ofNullable(this.newerNoncurrentVersions);
    }
    public Integer getNoncurrentDays() {
        return this.noncurrentDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketNoncurrentVersionExpiration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer newerNoncurrentVersions;
        private Integer noncurrentDays;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketNoncurrentVersionExpiration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.newerNoncurrentVersions = defaults.newerNoncurrentVersions;
    	      this.noncurrentDays = defaults.noncurrentDays;
        }

        public Builder setNewerNoncurrentVersions(@Nullable Integer newerNoncurrentVersions) {
            this.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }

        public Builder setNoncurrentDays(Integer noncurrentDays) {
            this.noncurrentDays = Objects.requireNonNull(noncurrentDays);
            return this;
        }

        public BucketNoncurrentVersionExpiration build() {
            return new BucketNoncurrentVersionExpiration(newerNoncurrentVersions, noncurrentDays);
        }
    }
}
