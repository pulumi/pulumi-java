// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew;

import io.pulumi.awsnative.databrew.inputs.ProjectSampleArgs;
import io.pulumi.awsnative.databrew.inputs.ProjectTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Dataset name
     * 
     */
    @InputImport(name="datasetName", required=true)
        private final Input<String> datasetName;

    public Input<String> getDatasetName() {
        return this.datasetName;
    }

    /**
     * Project name
     * 
     */
    @InputImport(name="name")
        private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Recipe name
     * 
     */
    @InputImport(name="recipeName", required=true)
        private final Input<String> recipeName;

    public Input<String> getRecipeName() {
        return this.recipeName;
    }

    /**
     * Role arn
     * 
     */
    @InputImport(name="roleArn", required=true)
        private final Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     * Sample
     * 
     */
    @InputImport(name="sample")
        private final @Nullable Input<ProjectSampleArgs> sample;

    public Input<ProjectSampleArgs> getSample() {
        return this.sample == null ? Input.empty() : this.sample;
    }

    @InputImport(name="tags")
        private final @Nullable Input<List<ProjectTagArgs>> tags;

    public Input<List<ProjectTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ProjectArgs(
        Input<String> datasetName,
        @Nullable Input<String> name,
        Input<String> recipeName,
        Input<String> roleArn,
        @Nullable Input<ProjectSampleArgs> sample,
        @Nullable Input<List<ProjectTagArgs>> tags) {
        this.datasetName = Objects.requireNonNull(datasetName, "expected parameter 'datasetName' to be non-null");
        this.name = name;
        this.recipeName = Objects.requireNonNull(recipeName, "expected parameter 'recipeName' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.sample = sample;
        this.tags = tags;
    }

    private ProjectArgs() {
        this.datasetName = Input.empty();
        this.name = Input.empty();
        this.recipeName = Input.empty();
        this.roleArn = Input.empty();
        this.sample = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> datasetName;
        private @Nullable Input<String> name;
        private Input<String> recipeName;
        private Input<String> roleArn;
        private @Nullable Input<ProjectSampleArgs> sample;
        private @Nullable Input<List<ProjectTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetName = defaults.datasetName;
    	      this.name = defaults.name;
    	      this.recipeName = defaults.recipeName;
    	      this.roleArn = defaults.roleArn;
    	      this.sample = defaults.sample;
    	      this.tags = defaults.tags;
        }

        public Builder setDatasetName(Input<String> datasetName) {
            this.datasetName = Objects.requireNonNull(datasetName);
            return this;
        }

        public Builder setDatasetName(String datasetName) {
            this.datasetName = Input.of(Objects.requireNonNull(datasetName));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRecipeName(Input<String> recipeName) {
            this.recipeName = Objects.requireNonNull(recipeName);
            return this;
        }

        public Builder setRecipeName(String recipeName) {
            this.recipeName = Input.of(Objects.requireNonNull(recipeName));
            return this;
        }

        public Builder setRoleArn(Input<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder setRoleArn(String roleArn) {
            this.roleArn = Input.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder setSample(@Nullable Input<ProjectSampleArgs> sample) {
            this.sample = sample;
            return this;
        }

        public Builder setSample(@Nullable ProjectSampleArgs sample) {
            this.sample = Input.ofNullable(sample);
            return this;
        }

        public Builder setTags(@Nullable Input<List<ProjectTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<ProjectTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ProjectArgs build() {
            return new ProjectArgs(datasetName, name, recipeName, roleArn, sample, tags);
        }
    }
}
