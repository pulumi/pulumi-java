// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kinesisfirehose.inputs;

import io.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat;
import io.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamBufferingHintsArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamCloudWatchLoggingOptionsArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamDataFormatConversionConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamDynamicPartitioningConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamEncryptionConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamProcessingConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamS3DestinationConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeliveryStreamExtendedS3DestinationConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeliveryStreamExtendedS3DestinationConfigurationArgs Empty = new DeliveryStreamExtendedS3DestinationConfigurationArgs();

    @Import(name="bucketARN", required=true)
      private final Output<String> bucketARN;

    public Output<String> getBucketARN() {
        return this.bucketARN;
    }

    @Import(name="bufferingHints")
      private final @Nullable Output<DeliveryStreamBufferingHintsArgs> bufferingHints;

    public Output<DeliveryStreamBufferingHintsArgs> getBufferingHints() {
        return this.bufferingHints == null ? Output.empty() : this.bufferingHints;
    }

    @Import(name="cloudWatchLoggingOptions")
      private final @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions;

    public Output<DeliveryStreamCloudWatchLoggingOptionsArgs> getCloudWatchLoggingOptions() {
        return this.cloudWatchLoggingOptions == null ? Output.empty() : this.cloudWatchLoggingOptions;
    }

    @Import(name="compressionFormat")
      private final @Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat> compressionFormat;

    public Output<DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat> getCompressionFormat() {
        return this.compressionFormat == null ? Output.empty() : this.compressionFormat;
    }

    @Import(name="dataFormatConversionConfiguration")
      private final @Nullable Output<DeliveryStreamDataFormatConversionConfigurationArgs> dataFormatConversionConfiguration;

    public Output<DeliveryStreamDataFormatConversionConfigurationArgs> getDataFormatConversionConfiguration() {
        return this.dataFormatConversionConfiguration == null ? Output.empty() : this.dataFormatConversionConfiguration;
    }

    @Import(name="dynamicPartitioningConfiguration")
      private final @Nullable Output<DeliveryStreamDynamicPartitioningConfigurationArgs> dynamicPartitioningConfiguration;

    public Output<DeliveryStreamDynamicPartitioningConfigurationArgs> getDynamicPartitioningConfiguration() {
        return this.dynamicPartitioningConfiguration == null ? Output.empty() : this.dynamicPartitioningConfiguration;
    }

    @Import(name="encryptionConfiguration")
      private final @Nullable Output<DeliveryStreamEncryptionConfigurationArgs> encryptionConfiguration;

    public Output<DeliveryStreamEncryptionConfigurationArgs> getEncryptionConfiguration() {
        return this.encryptionConfiguration == null ? Output.empty() : this.encryptionConfiguration;
    }

    @Import(name="errorOutputPrefix")
      private final @Nullable Output<String> errorOutputPrefix;

    public Output<String> getErrorOutputPrefix() {
        return this.errorOutputPrefix == null ? Output.empty() : this.errorOutputPrefix;
    }

    @Import(name="prefix")
      private final @Nullable Output<String> prefix;

    public Output<String> getPrefix() {
        return this.prefix == null ? Output.empty() : this.prefix;
    }

    @Import(name="processingConfiguration")
      private final @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration;

    public Output<DeliveryStreamProcessingConfigurationArgs> getProcessingConfiguration() {
        return this.processingConfiguration == null ? Output.empty() : this.processingConfiguration;
    }

    @Import(name="roleARN", required=true)
      private final Output<String> roleARN;

    public Output<String> getRoleARN() {
        return this.roleARN;
    }

    @Import(name="s3BackupConfiguration")
      private final @Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration;

    public Output<DeliveryStreamS3DestinationConfigurationArgs> getS3BackupConfiguration() {
        return this.s3BackupConfiguration == null ? Output.empty() : this.s3BackupConfiguration;
    }

    @Import(name="s3BackupMode")
      private final @Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode> s3BackupMode;

    public Output<DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode> getS3BackupMode() {
        return this.s3BackupMode == null ? Output.empty() : this.s3BackupMode;
    }

    public DeliveryStreamExtendedS3DestinationConfigurationArgs(
        Output<String> bucketARN,
        @Nullable Output<DeliveryStreamBufferingHintsArgs> bufferingHints,
        @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions,
        @Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat> compressionFormat,
        @Nullable Output<DeliveryStreamDataFormatConversionConfigurationArgs> dataFormatConversionConfiguration,
        @Nullable Output<DeliveryStreamDynamicPartitioningConfigurationArgs> dynamicPartitioningConfiguration,
        @Nullable Output<DeliveryStreamEncryptionConfigurationArgs> encryptionConfiguration,
        @Nullable Output<String> errorOutputPrefix,
        @Nullable Output<String> prefix,
        @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration,
        Output<String> roleARN,
        @Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration,
        @Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode> s3BackupMode) {
        this.bucketARN = Objects.requireNonNull(bucketARN, "expected parameter 'bucketARN' to be non-null");
        this.bufferingHints = bufferingHints;
        this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
        this.compressionFormat = compressionFormat;
        this.dataFormatConversionConfiguration = dataFormatConversionConfiguration;
        this.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration;
        this.encryptionConfiguration = encryptionConfiguration;
        this.errorOutputPrefix = errorOutputPrefix;
        this.prefix = prefix;
        this.processingConfiguration = processingConfiguration;
        this.roleARN = Objects.requireNonNull(roleARN, "expected parameter 'roleARN' to be non-null");
        this.s3BackupConfiguration = s3BackupConfiguration;
        this.s3BackupMode = s3BackupMode;
    }

    private DeliveryStreamExtendedS3DestinationConfigurationArgs() {
        this.bucketARN = Output.empty();
        this.bufferingHints = Output.empty();
        this.cloudWatchLoggingOptions = Output.empty();
        this.compressionFormat = Output.empty();
        this.dataFormatConversionConfiguration = Output.empty();
        this.dynamicPartitioningConfiguration = Output.empty();
        this.encryptionConfiguration = Output.empty();
        this.errorOutputPrefix = Output.empty();
        this.prefix = Output.empty();
        this.processingConfiguration = Output.empty();
        this.roleARN = Output.empty();
        this.s3BackupConfiguration = Output.empty();
        this.s3BackupMode = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamExtendedS3DestinationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> bucketARN;
        private @Nullable Output<DeliveryStreamBufferingHintsArgs> bufferingHints;
        private @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions;
        private @Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat> compressionFormat;
        private @Nullable Output<DeliveryStreamDataFormatConversionConfigurationArgs> dataFormatConversionConfiguration;
        private @Nullable Output<DeliveryStreamDynamicPartitioningConfigurationArgs> dynamicPartitioningConfiguration;
        private @Nullable Output<DeliveryStreamEncryptionConfigurationArgs> encryptionConfiguration;
        private @Nullable Output<String> errorOutputPrefix;
        private @Nullable Output<String> prefix;
        private @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration;
        private Output<String> roleARN;
        private @Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration;
        private @Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode> s3BackupMode;

        public Builder() {
    	      // Empty
        }

        public Builder(DeliveryStreamExtendedS3DestinationConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketARN = defaults.bucketARN;
    	      this.bufferingHints = defaults.bufferingHints;
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.compressionFormat = defaults.compressionFormat;
    	      this.dataFormatConversionConfiguration = defaults.dataFormatConversionConfiguration;
    	      this.dynamicPartitioningConfiguration = defaults.dynamicPartitioningConfiguration;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.errorOutputPrefix = defaults.errorOutputPrefix;
    	      this.prefix = defaults.prefix;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.roleARN = defaults.roleARN;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
        }

        public Builder bucketARN(Output<String> bucketARN) {
            this.bucketARN = Objects.requireNonNull(bucketARN);
            return this;
        }
        public Builder bucketARN(String bucketARN) {
            this.bucketARN = Output.of(Objects.requireNonNull(bucketARN));
            return this;
        }
        public Builder bufferingHints(@Nullable Output<DeliveryStreamBufferingHintsArgs> bufferingHints) {
            this.bufferingHints = bufferingHints;
            return this;
        }
        public Builder bufferingHints(@Nullable DeliveryStreamBufferingHintsArgs bufferingHints) {
            this.bufferingHints = Output.ofNullable(bufferingHints);
            return this;
        }
        public Builder cloudWatchLoggingOptions(@Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }
        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptionsArgs cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = Output.ofNullable(cloudWatchLoggingOptions);
            return this;
        }
        public Builder compressionFormat(@Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat> compressionFormat) {
            this.compressionFormat = compressionFormat;
            return this;
        }
        public Builder compressionFormat(@Nullable DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat compressionFormat) {
            this.compressionFormat = Output.ofNullable(compressionFormat);
            return this;
        }
        public Builder dataFormatConversionConfiguration(@Nullable Output<DeliveryStreamDataFormatConversionConfigurationArgs> dataFormatConversionConfiguration) {
            this.dataFormatConversionConfiguration = dataFormatConversionConfiguration;
            return this;
        }
        public Builder dataFormatConversionConfiguration(@Nullable DeliveryStreamDataFormatConversionConfigurationArgs dataFormatConversionConfiguration) {
            this.dataFormatConversionConfiguration = Output.ofNullable(dataFormatConversionConfiguration);
            return this;
        }
        public Builder dynamicPartitioningConfiguration(@Nullable Output<DeliveryStreamDynamicPartitioningConfigurationArgs> dynamicPartitioningConfiguration) {
            this.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration;
            return this;
        }
        public Builder dynamicPartitioningConfiguration(@Nullable DeliveryStreamDynamicPartitioningConfigurationArgs dynamicPartitioningConfiguration) {
            this.dynamicPartitioningConfiguration = Output.ofNullable(dynamicPartitioningConfiguration);
            return this;
        }
        public Builder encryptionConfiguration(@Nullable Output<DeliveryStreamEncryptionConfigurationArgs> encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }
        public Builder encryptionConfiguration(@Nullable DeliveryStreamEncryptionConfigurationArgs encryptionConfiguration) {
            this.encryptionConfiguration = Output.ofNullable(encryptionConfiguration);
            return this;
        }
        public Builder errorOutputPrefix(@Nullable Output<String> errorOutputPrefix) {
            this.errorOutputPrefix = errorOutputPrefix;
            return this;
        }
        public Builder errorOutputPrefix(@Nullable String errorOutputPrefix) {
            this.errorOutputPrefix = Output.ofNullable(errorOutputPrefix);
            return this;
        }
        public Builder prefix(@Nullable Output<String> prefix) {
            this.prefix = prefix;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = Output.ofNullable(prefix);
            return this;
        }
        public Builder processingConfiguration(@Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfigurationArgs processingConfiguration) {
            this.processingConfiguration = Output.ofNullable(processingConfiguration);
            return this;
        }
        public Builder roleARN(Output<String> roleARN) {
            this.roleARN = Objects.requireNonNull(roleARN);
            return this;
        }
        public Builder roleARN(String roleARN) {
            this.roleARN = Output.of(Objects.requireNonNull(roleARN));
            return this;
        }
        public Builder s3BackupConfiguration(@Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }
        public Builder s3BackupConfiguration(@Nullable DeliveryStreamS3DestinationConfigurationArgs s3BackupConfiguration) {
            this.s3BackupConfiguration = Output.ofNullable(s3BackupConfiguration);
            return this;
        }
        public Builder s3BackupMode(@Nullable Output<DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode> s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        public Builder s3BackupMode(@Nullable DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode s3BackupMode) {
            this.s3BackupMode = Output.ofNullable(s3BackupMode);
            return this;
        }        public DeliveryStreamExtendedS3DestinationConfigurationArgs build() {
            return new DeliveryStreamExtendedS3DestinationConfigurationArgs(bucketARN, bufferingHints, cloudWatchLoggingOptions, compressionFormat, dataFormatConversionConfiguration, dynamicPartitioningConfiguration, encryptionConfiguration, errorOutputPrefix, prefix, processingConfiguration, roleARN, s3BackupConfiguration, s3BackupMode);
        }
    }
}
