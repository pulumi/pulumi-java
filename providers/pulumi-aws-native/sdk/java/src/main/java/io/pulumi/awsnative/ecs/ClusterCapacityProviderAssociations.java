// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ecs;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.ecs.ClusterCapacityProviderAssociationsArgs;
import io.pulumi.awsnative.ecs.outputs.ClusterCapacityProviderAssociationsCapacityProviderStrategy;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Associate a set of ECS Capacity Providers with a specified ECS Cluster
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var config = new Config();
 *         var clusterName = config.Require("clusterName");
 *         var clusterCPAssociation = new AwsNative.ECS.ClusterCapacityProviderAssociations("clusterCPAssociation", new AwsNative.ECS.ClusterCapacityProviderAssociationsArgs
 *         {
 *             Cluster = clusterName,
 *             CapacityProviders = 
 *             {
 *                 "FARGATE",
 *                 "FARGATE_SPOT",
 *             },
 *             DefaultCapacityProviderStrategy = 
 *             {
 *                 new AwsNative.ECS.Inputs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs
 *                 {
 *                     Base = 2,
 *                     Weight = 1,
 *                     CapacityProvider = "FARGATE",
 *                 },
 *                 new AwsNative.ECS.Inputs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs
 *                 {
 *                     Base = 0,
 *                     Weight = 1,
 *                     CapacityProvider = "FARGATE_SPOT",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		cfg := config.New(ctx, "")
 * 		clusterName := cfg.Require("clusterName")
 * 		_, err := ecs.NewClusterCapacityProviderAssociations(ctx, "clusterCPAssociation", &ecs.ClusterCapacityProviderAssociationsArgs{
 * 			Cluster: pulumi.String(clusterName),
 * 			CapacityProviders: pulumi.StringArray{
 * 				pulumi.String("FARGATE"),
 * 				pulumi.String("FARGATE_SPOT"),
 * 			},
 * 			DefaultCapacityProviderStrategy: ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{
 * 				&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
 * 					Base:             pulumi.Int(2),
 * 					Weight:           pulumi.Int(1),
 * 					CapacityProvider: pulumi.String("FARGATE"),
 * 				},
 * 				&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
 * 					Base:             pulumi.Int(0),
 * 					Weight:           pulumi.Int(1),
 * 					CapacityProvider: pulumi.String("FARGATE_SPOT"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const config = new pulumi.Config();
 * const clusterName = config.require("clusterName");
 * const clusterCPAssociation = new aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation", {
 *     cluster: clusterName,
 *     capacityProviders: [
 *         "FARGATE",
 *         "FARGATE_SPOT",
 *     ],
 *     defaultCapacityProviderStrategy: [
 *         {
 *             base: 2,
 *             weight: 1,
 *             capacityProvider: "FARGATE",
 *         },
 *         {
 *             base: 0,
 *             weight: 1,
 *             capacityProvider: "FARGATE_SPOT",
 *         },
 *     ],
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * config = pulumi.Config()
 * cluster_name = config.require("clusterName")
 * cluster_cpassociation = aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation",
 *     cluster=cluster_name,
 *     capacity_providers=[
 *         "FARGATE",
 *         "FARGATE_SPOT",
 *     ],
 *     default_capacity_provider_strategy=[
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs(
 *             base=2,
 *             weight=1,
 *             capacity_provider="FARGATE",
 *         ),
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs(
 *             base=0,
 *             weight=1,
 *             capacity_provider="FARGATE_SPOT",
 *         ),
 *     ])
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var config = new Config();
 *         var clusterName = config.Require("clusterName");
 *         var clusterCPAssociation = new AwsNative.ECS.ClusterCapacityProviderAssociations("clusterCPAssociation", new AwsNative.ECS.ClusterCapacityProviderAssociationsArgs
 *         {
 *             Cluster = clusterName,
 *             CapacityProviders = 
 *             {
 *                 "FARGATE",
 *                 "FARGATE_SPOT",
 *             },
 *             DefaultCapacityProviderStrategy = 
 *             {
 *                 new AwsNative.ECS.Inputs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs
 *                 {
 *                     Base = 2,
 *                     Weight = 1,
 *                     CapacityProvider = "FARGATE",
 *                 },
 *                 new AwsNative.ECS.Inputs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs
 *                 {
 *                     Base = 0,
 *                     Weight = 1,
 *                     CapacityProvider = "FARGATE_SPOT",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		cfg := config.New(ctx, "")
 * 		clusterName := cfg.Require("clusterName")
 * 		_, err := ecs.NewClusterCapacityProviderAssociations(ctx, "clusterCPAssociation", &ecs.ClusterCapacityProviderAssociationsArgs{
 * 			Cluster: pulumi.String(clusterName),
 * 			CapacityProviders: pulumi.StringArray{
 * 				pulumi.String("FARGATE"),
 * 				pulumi.String("FARGATE_SPOT"),
 * 			},
 * 			DefaultCapacityProviderStrategy: ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{
 * 				&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
 * 					Base:             pulumi.Int(2),
 * 					Weight:           pulumi.Int(1),
 * 					CapacityProvider: pulumi.String("FARGATE"),
 * 				},
 * 				&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
 * 					Base:             pulumi.Int(0),
 * 					Weight:           pulumi.Int(1),
 * 					CapacityProvider: pulumi.String("FARGATE_SPOT"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const config = new pulumi.Config();
 * const clusterName = config.require("clusterName");
 * const clusterCPAssociation = new aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation", {
 *     cluster: clusterName,
 *     capacityProviders: [
 *         "FARGATE",
 *         "FARGATE_SPOT",
 *     ],
 *     defaultCapacityProviderStrategy: [
 *         {
 *             base: 2,
 *             weight: 1,
 *             capacityProvider: "FARGATE",
 *         },
 *         {
 *             base: 0,
 *             weight: 1,
 *             capacityProvider: "FARGATE_SPOT",
 *         },
 *     ],
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * config = pulumi.Config()
 * cluster_name = config.require("clusterName")
 * cluster_cpassociation = aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation",
 *     cluster=cluster_name,
 *     capacity_providers=[
 *         "FARGATE",
 *         "FARGATE_SPOT",
 *     ],
 *     default_capacity_provider_strategy=[
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs(
 *             base=2,
 *             weight=1,
 *             capacity_provider="FARGATE",
 *         ),
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs(
 *             base=0,
 *             weight=1,
 *             capacity_provider="FARGATE_SPOT",
 *         ),
 *     ])
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 */
@ResourceType(type="aws-native:ecs:ClusterCapacityProviderAssociations")
public class ClusterCapacityProviderAssociations extends io.pulumi.resources.CustomResource {
    @Export(name="capacityProviders", type=List.class, parameters={String.class})
    private Output<List<String>> capacityProviders;

    public Output<List<String>> getCapacityProviders() {
        return this.capacityProviders;
    }
    @Export(name="cluster", type=String.class, parameters={})
    private Output<String> cluster;

    public Output<String> getCluster() {
        return this.cluster;
    }
    @Export(name="defaultCapacityProviderStrategy", type=List.class, parameters={ClusterCapacityProviderAssociationsCapacityProviderStrategy.class})
    private Output<List<ClusterCapacityProviderAssociationsCapacityProviderStrategy>> defaultCapacityProviderStrategy;

    public Output<List<ClusterCapacityProviderAssociationsCapacityProviderStrategy>> getDefaultCapacityProviderStrategy() {
        return this.defaultCapacityProviderStrategy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ClusterCapacityProviderAssociations(String name) {
        this(name, ClusterCapacityProviderAssociationsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ClusterCapacityProviderAssociations(String name, ClusterCapacityProviderAssociationsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ClusterCapacityProviderAssociations(String name, ClusterCapacityProviderAssociationsArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:ecs:ClusterCapacityProviderAssociations", name, args == null ? ClusterCapacityProviderAssociationsArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ClusterCapacityProviderAssociations(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:ecs:ClusterCapacityProviderAssociations", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ClusterCapacityProviderAssociations get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ClusterCapacityProviderAssociations(name, id, options);
    }
}
