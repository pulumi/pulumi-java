// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.dynamodb.inputs;

import io.pulumi.awsnative.dynamodb.inputs.GlobalTableKeySchemaArgs;
import io.pulumi.awsnative.dynamodb.inputs.GlobalTableProjectionArgs;
import io.pulumi.awsnative.dynamodb.inputs.GlobalTableWriteProvisionedThroughputSettingsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GlobalTableGlobalSecondaryIndexArgs extends io.pulumi.resources.ResourceArgs {

    public static final GlobalTableGlobalSecondaryIndexArgs Empty = new GlobalTableGlobalSecondaryIndexArgs();

    @InputImport(name="indexName", required=true)
      private final Input<String> indexName;

    public Input<String> getIndexName() {
        return this.indexName;
    }

    @InputImport(name="keySchema", required=true)
      private final Input<List<GlobalTableKeySchemaArgs>> keySchema;

    public Input<List<GlobalTableKeySchemaArgs>> getKeySchema() {
        return this.keySchema;
    }

    @InputImport(name="projection", required=true)
      private final Input<GlobalTableProjectionArgs> projection;

    public Input<GlobalTableProjectionArgs> getProjection() {
        return this.projection;
    }

    @InputImport(name="writeProvisionedThroughputSettings")
      private final @Nullable Input<GlobalTableWriteProvisionedThroughputSettingsArgs> writeProvisionedThroughputSettings;

    public Input<GlobalTableWriteProvisionedThroughputSettingsArgs> getWriteProvisionedThroughputSettings() {
        return this.writeProvisionedThroughputSettings == null ? Input.empty() : this.writeProvisionedThroughputSettings;
    }

    public GlobalTableGlobalSecondaryIndexArgs(
        Input<String> indexName,
        Input<List<GlobalTableKeySchemaArgs>> keySchema,
        Input<GlobalTableProjectionArgs> projection,
        @Nullable Input<GlobalTableWriteProvisionedThroughputSettingsArgs> writeProvisionedThroughputSettings) {
        this.indexName = Objects.requireNonNull(indexName, "expected parameter 'indexName' to be non-null");
        this.keySchema = Objects.requireNonNull(keySchema, "expected parameter 'keySchema' to be non-null");
        this.projection = Objects.requireNonNull(projection, "expected parameter 'projection' to be non-null");
        this.writeProvisionedThroughputSettings = writeProvisionedThroughputSettings;
    }

    private GlobalTableGlobalSecondaryIndexArgs() {
        this.indexName = Input.empty();
        this.keySchema = Input.empty();
        this.projection = Input.empty();
        this.writeProvisionedThroughputSettings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalTableGlobalSecondaryIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> indexName;
        private Input<List<GlobalTableKeySchemaArgs>> keySchema;
        private Input<GlobalTableProjectionArgs> projection;
        private @Nullable Input<GlobalTableWriteProvisionedThroughputSettingsArgs> writeProvisionedThroughputSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(GlobalTableGlobalSecondaryIndexArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.indexName = defaults.indexName;
    	      this.keySchema = defaults.keySchema;
    	      this.projection = defaults.projection;
    	      this.writeProvisionedThroughputSettings = defaults.writeProvisionedThroughputSettings;
        }

        public Builder setIndexName(Input<String> indexName) {
            this.indexName = Objects.requireNonNull(indexName);
            return this;
        }

        public Builder setIndexName(String indexName) {
            this.indexName = Input.of(Objects.requireNonNull(indexName));
            return this;
        }

        public Builder setKeySchema(Input<List<GlobalTableKeySchemaArgs>> keySchema) {
            this.keySchema = Objects.requireNonNull(keySchema);
            return this;
        }

        public Builder setKeySchema(List<GlobalTableKeySchemaArgs> keySchema) {
            this.keySchema = Input.of(Objects.requireNonNull(keySchema));
            return this;
        }

        public Builder setProjection(Input<GlobalTableProjectionArgs> projection) {
            this.projection = Objects.requireNonNull(projection);
            return this;
        }

        public Builder setProjection(GlobalTableProjectionArgs projection) {
            this.projection = Input.of(Objects.requireNonNull(projection));
            return this;
        }

        public Builder setWriteProvisionedThroughputSettings(@Nullable Input<GlobalTableWriteProvisionedThroughputSettingsArgs> writeProvisionedThroughputSettings) {
            this.writeProvisionedThroughputSettings = writeProvisionedThroughputSettings;
            return this;
        }

        public Builder setWriteProvisionedThroughputSettings(@Nullable GlobalTableWriteProvisionedThroughputSettingsArgs writeProvisionedThroughputSettings) {
            this.writeProvisionedThroughputSettings = Input.ofNullable(writeProvisionedThroughputSettings);
            return this;
        }
        public GlobalTableGlobalSecondaryIndexArgs build() {
            return new GlobalTableGlobalSecondaryIndexArgs(indexName, keySchema, projection, writeProvisionedThroughputSettings);
        }
    }
}
