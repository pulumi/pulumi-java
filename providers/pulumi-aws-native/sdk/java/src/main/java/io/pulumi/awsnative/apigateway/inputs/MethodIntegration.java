// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.apigateway.inputs;

import io.pulumi.awsnative.apigateway.enums.MethodIntegrationConnectionType;
import io.pulumi.awsnative.apigateway.enums.MethodIntegrationContentHandling;
import io.pulumi.awsnative.apigateway.enums.MethodIntegrationPassthroughBehavior;
import io.pulumi.awsnative.apigateway.enums.MethodIntegrationType;
import io.pulumi.awsnative.apigateway.inputs.MethodIntegrationResponse;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MethodIntegration extends io.pulumi.resources.InvokeArgs {

    public static final MethodIntegration Empty = new MethodIntegration();

    /**
     * A list of request parameters whose values API Gateway caches.
     * 
     */
    @InputImport(name="cacheKeyParameters")
        private final @Nullable List<String> cacheKeyParameters;

    public List<String> getCacheKeyParameters() {
        return this.cacheKeyParameters == null ? List.of() : this.cacheKeyParameters;
    }

    /**
     * An API-specific tag group of related cached parameters.
     * 
     */
    @InputImport(name="cacheNamespace")
        private final @Nullable String cacheNamespace;

    public Optional<String> getCacheNamespace() {
        return this.cacheNamespace == null ? Optional.empty() : Optional.ofNullable(this.cacheNamespace);
    }

    /**
     * The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    @InputImport(name="connectionId")
        private final @Nullable String connectionId;

    public Optional<String> getConnectionId() {
        return this.connectionId == null ? Optional.empty() : Optional.ofNullable(this.connectionId);
    }

    /**
     * The type of the network connection to the integration endpoint.
     * 
     */
    @InputImport(name="connectionType")
        private final @Nullable MethodIntegrationConnectionType connectionType;

    public Optional<MethodIntegrationConnectionType> getConnectionType() {
        return this.connectionType == null ? Optional.empty() : Optional.ofNullable(this.connectionType);
    }

    /**
     * Specifies how to handle request payload content type conversions.
     * 
     */
    @InputImport(name="contentHandling")
        private final @Nullable MethodIntegrationContentHandling contentHandling;

    public Optional<MethodIntegrationContentHandling> getContentHandling() {
        return this.contentHandling == null ? Optional.empty() : Optional.ofNullable(this.contentHandling);
    }

    /**
     * The credentials that are required for the integration.
     * 
     */
    @InputImport(name="credentials")
        private final @Nullable String credentials;

    public Optional<String> getCredentials() {
        return this.credentials == null ? Optional.empty() : Optional.ofNullable(this.credentials);
    }

    /**
     * The integration's HTTP method type.
     * 
     */
    @InputImport(name="integrationHttpMethod")
        private final @Nullable String integrationHttpMethod;

    public Optional<String> getIntegrationHttpMethod() {
        return this.integrationHttpMethod == null ? Optional.empty() : Optional.ofNullable(this.integrationHttpMethod);
    }

    /**
     * The response that API Gateway provides after a method's backend completes processing a request.
     * 
     */
    @InputImport(name="integrationResponses")
        private final @Nullable List<MethodIntegrationResponse> integrationResponses;

    public List<MethodIntegrationResponse> getIntegrationResponses() {
        return this.integrationResponses == null ? List.of() : this.integrationResponses;
    }

    /**
     * Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    @InputImport(name="passthroughBehavior")
        private final @Nullable MethodIntegrationPassthroughBehavior passthroughBehavior;

    public Optional<MethodIntegrationPassthroughBehavior> getPassthroughBehavior() {
        return this.passthroughBehavior == null ? Optional.empty() : Optional.ofNullable(this.passthroughBehavior);
    }

    /**
     * The request parameters that API Gateway sends with the backend request.
     * 
     */
    @InputImport(name="requestParameters")
        private final @Nullable Object requestParameters;

    public Optional<Object> getRequestParameters() {
        return this.requestParameters == null ? Optional.empty() : Optional.ofNullable(this.requestParameters);
    }

    /**
     * A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    @InputImport(name="requestTemplates")
        private final @Nullable Object requestTemplates;

    public Optional<Object> getRequestTemplates() {
        return this.requestTemplates == null ? Optional.empty() : Optional.ofNullable(this.requestTemplates);
    }

    /**
     * Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    @InputImport(name="timeoutInMillis")
        private final @Nullable Integer timeoutInMillis;

    public Optional<Integer> getTimeoutInMillis() {
        return this.timeoutInMillis == null ? Optional.empty() : Optional.ofNullable(this.timeoutInMillis);
    }

    /**
     * The type of backend that your method is running.
     * 
     */
    @InputImport(name="type", required=true)
        private final MethodIntegrationType type;

    public MethodIntegrationType getType() {
        return this.type;
    }

    /**
     * The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    @InputImport(name="uri")
        private final @Nullable String uri;

    public Optional<String> getUri() {
        return this.uri == null ? Optional.empty() : Optional.ofNullable(this.uri);
    }

    public MethodIntegration(
        @Nullable List<String> cacheKeyParameters,
        @Nullable String cacheNamespace,
        @Nullable String connectionId,
        @Nullable MethodIntegrationConnectionType connectionType,
        @Nullable MethodIntegrationContentHandling contentHandling,
        @Nullable String credentials,
        @Nullable String integrationHttpMethod,
        @Nullable List<MethodIntegrationResponse> integrationResponses,
        @Nullable MethodIntegrationPassthroughBehavior passthroughBehavior,
        @Nullable Object requestParameters,
        @Nullable Object requestTemplates,
        @Nullable Integer timeoutInMillis,
        MethodIntegrationType type,
        @Nullable String uri) {
        this.cacheKeyParameters = cacheKeyParameters;
        this.cacheNamespace = cacheNamespace;
        this.connectionId = connectionId;
        this.connectionType = connectionType;
        this.contentHandling = contentHandling;
        this.credentials = credentials;
        this.integrationHttpMethod = integrationHttpMethod;
        this.integrationResponses = integrationResponses;
        this.passthroughBehavior = passthroughBehavior;
        this.requestParameters = requestParameters;
        this.requestTemplates = requestTemplates;
        this.timeoutInMillis = timeoutInMillis;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.uri = uri;
    }

    private MethodIntegration() {
        this.cacheKeyParameters = List.of();
        this.cacheNamespace = null;
        this.connectionId = null;
        this.connectionType = null;
        this.contentHandling = null;
        this.credentials = null;
        this.integrationHttpMethod = null;
        this.integrationResponses = List.of();
        this.passthroughBehavior = null;
        this.requestParameters = null;
        this.requestTemplates = null;
        this.timeoutInMillis = null;
        this.type = null;
        this.uri = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodIntegration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> cacheKeyParameters;
        private @Nullable String cacheNamespace;
        private @Nullable String connectionId;
        private @Nullable MethodIntegrationConnectionType connectionType;
        private @Nullable MethodIntegrationContentHandling contentHandling;
        private @Nullable String credentials;
        private @Nullable String integrationHttpMethod;
        private @Nullable List<MethodIntegrationResponse> integrationResponses;
        private @Nullable MethodIntegrationPassthroughBehavior passthroughBehavior;
        private @Nullable Object requestParameters;
        private @Nullable Object requestTemplates;
        private @Nullable Integer timeoutInMillis;
        private MethodIntegrationType type;
        private @Nullable String uri;

        public Builder() {
    	      // Empty
        }

        public Builder(MethodIntegration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheKeyParameters = defaults.cacheKeyParameters;
    	      this.cacheNamespace = defaults.cacheNamespace;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionType = defaults.connectionType;
    	      this.contentHandling = defaults.contentHandling;
    	      this.credentials = defaults.credentials;
    	      this.integrationHttpMethod = defaults.integrationHttpMethod;
    	      this.integrationResponses = defaults.integrationResponses;
    	      this.passthroughBehavior = defaults.passthroughBehavior;
    	      this.requestParameters = defaults.requestParameters;
    	      this.requestTemplates = defaults.requestTemplates;
    	      this.timeoutInMillis = defaults.timeoutInMillis;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        public Builder setCacheKeyParameters(@Nullable List<String> cacheKeyParameters) {
            this.cacheKeyParameters = cacheKeyParameters;
            return this;
        }

        public Builder setCacheNamespace(@Nullable String cacheNamespace) {
            this.cacheNamespace = cacheNamespace;
            return this;
        }

        public Builder setConnectionId(@Nullable String connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder setConnectionType(@Nullable MethodIntegrationConnectionType connectionType) {
            this.connectionType = connectionType;
            return this;
        }

        public Builder setContentHandling(@Nullable MethodIntegrationContentHandling contentHandling) {
            this.contentHandling = contentHandling;
            return this;
        }

        public Builder setCredentials(@Nullable String credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder setIntegrationHttpMethod(@Nullable String integrationHttpMethod) {
            this.integrationHttpMethod = integrationHttpMethod;
            return this;
        }

        public Builder setIntegrationResponses(@Nullable List<MethodIntegrationResponse> integrationResponses) {
            this.integrationResponses = integrationResponses;
            return this;
        }

        public Builder setPassthroughBehavior(@Nullable MethodIntegrationPassthroughBehavior passthroughBehavior) {
            this.passthroughBehavior = passthroughBehavior;
            return this;
        }

        public Builder setRequestParameters(@Nullable Object requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }

        public Builder setRequestTemplates(@Nullable Object requestTemplates) {
            this.requestTemplates = requestTemplates;
            return this;
        }

        public Builder setTimeoutInMillis(@Nullable Integer timeoutInMillis) {
            this.timeoutInMillis = timeoutInMillis;
            return this;
        }

        public Builder setType(MethodIntegrationType type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public MethodIntegration build() {
            return new MethodIntegration(cacheKeyParameters, cacheNamespace, connectionId, connectionType, contentHandling, credentials, integrationHttpMethod, integrationResponses, passthroughBehavior, requestParameters, requestTemplates, timeoutInMillis, type, uri);
        }
    }
}
