// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ThemeUIColorPalette {
    /**
     * <p>This color is that applies to selected states and buttons.</p>
     * 
     */
    private final @Nullable String accent;
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             accent color.</p>
     * 
     */
    private final @Nullable String accentForeground;
    /**
     * <p>The color that applies to error messages.</p>
     * 
     */
    private final @Nullable String danger;
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             error color.</p>
     * 
     */
    private final @Nullable String dangerForeground;
    /**
     * <p>The color that applies to the names of fields that are identified as
     *             dimensions.</p>
     * 
     */
    private final @Nullable String dimension;
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             dimension color.</p>
     * 
     */
    private final @Nullable String dimensionForeground;
    /**
     * <p>The color that applies to the names of fields that are identified as measures.</p>
     * 
     */
    private final @Nullable String measure;
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             measure color.</p>
     * 
     */
    private final @Nullable String measureForeground;
    /**
     * <p>The background color that applies to visuals and other high emphasis UI.</p>
     * 
     */
    private final @Nullable String primaryBackground;
    /**
     * <p>The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
     * 
     */
    private final @Nullable String primaryForeground;
    /**
     * <p>The background color that applies to the sheet background and sheet controls.</p>
     * 
     */
    private final @Nullable String secondaryBackground;
    /**
     * <p>The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.</p>
     * 
     */
    private final @Nullable String secondaryForeground;
    /**
     * <p>The color that applies to success messages, for example the check mark for a
     *             successful download.</p>
     * 
     */
    private final @Nullable String success;
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             success color.</p>
     * 
     */
    private final @Nullable String successForeground;
    /**
     * <p>This color that applies to warning and informational messages.</p>
     * 
     */
    private final @Nullable String warning;
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             warning color.</p>
     * 
     */
    private final @Nullable String warningForeground;

    @OutputCustomType.Constructor({"accent","accentForeground","danger","dangerForeground","dimension","dimensionForeground","measure","measureForeground","primaryBackground","primaryForeground","secondaryBackground","secondaryForeground","success","successForeground","warning","warningForeground"})
    private ThemeUIColorPalette(
        @Nullable String accent,
        @Nullable String accentForeground,
        @Nullable String danger,
        @Nullable String dangerForeground,
        @Nullable String dimension,
        @Nullable String dimensionForeground,
        @Nullable String measure,
        @Nullable String measureForeground,
        @Nullable String primaryBackground,
        @Nullable String primaryForeground,
        @Nullable String secondaryBackground,
        @Nullable String secondaryForeground,
        @Nullable String success,
        @Nullable String successForeground,
        @Nullable String warning,
        @Nullable String warningForeground) {
        this.accent = accent;
        this.accentForeground = accentForeground;
        this.danger = danger;
        this.dangerForeground = dangerForeground;
        this.dimension = dimension;
        this.dimensionForeground = dimensionForeground;
        this.measure = measure;
        this.measureForeground = measureForeground;
        this.primaryBackground = primaryBackground;
        this.primaryForeground = primaryForeground;
        this.secondaryBackground = secondaryBackground;
        this.secondaryForeground = secondaryForeground;
        this.success = success;
        this.successForeground = successForeground;
        this.warning = warning;
        this.warningForeground = warningForeground;
    }

    /**
     * <p>This color is that applies to selected states and buttons.</p>
     * 
     */
    public Optional<String> getAccent() {
        return Optional.ofNullable(this.accent);
    }
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             accent color.</p>
     * 
     */
    public Optional<String> getAccentForeground() {
        return Optional.ofNullable(this.accentForeground);
    }
    /**
     * <p>The color that applies to error messages.</p>
     * 
     */
    public Optional<String> getDanger() {
        return Optional.ofNullable(this.danger);
    }
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             error color.</p>
     * 
     */
    public Optional<String> getDangerForeground() {
        return Optional.ofNullable(this.dangerForeground);
    }
    /**
     * <p>The color that applies to the names of fields that are identified as
     *             dimensions.</p>
     * 
     */
    public Optional<String> getDimension() {
        return Optional.ofNullable(this.dimension);
    }
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             dimension color.</p>
     * 
     */
    public Optional<String> getDimensionForeground() {
        return Optional.ofNullable(this.dimensionForeground);
    }
    /**
     * <p>The color that applies to the names of fields that are identified as measures.</p>
     * 
     */
    public Optional<String> getMeasure() {
        return Optional.ofNullable(this.measure);
    }
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             measure color.</p>
     * 
     */
    public Optional<String> getMeasureForeground() {
        return Optional.ofNullable(this.measureForeground);
    }
    /**
     * <p>The background color that applies to visuals and other high emphasis UI.</p>
     * 
     */
    public Optional<String> getPrimaryBackground() {
        return Optional.ofNullable(this.primaryBackground);
    }
    /**
     * <p>The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
     * 
     */
    public Optional<String> getPrimaryForeground() {
        return Optional.ofNullable(this.primaryForeground);
    }
    /**
     * <p>The background color that applies to the sheet background and sheet controls.</p>
     * 
     */
    public Optional<String> getSecondaryBackground() {
        return Optional.ofNullable(this.secondaryBackground);
    }
    /**
     * <p>The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.</p>
     * 
     */
    public Optional<String> getSecondaryForeground() {
        return Optional.ofNullable(this.secondaryForeground);
    }
    /**
     * <p>The color that applies to success messages, for example the check mark for a
     *             successful download.</p>
     * 
     */
    public Optional<String> getSuccess() {
        return Optional.ofNullable(this.success);
    }
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             success color.</p>
     * 
     */
    public Optional<String> getSuccessForeground() {
        return Optional.ofNullable(this.successForeground);
    }
    /**
     * <p>This color that applies to warning and informational messages.</p>
     * 
     */
    public Optional<String> getWarning() {
        return Optional.ofNullable(this.warning);
    }
    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             warning color.</p>
     * 
     */
    public Optional<String> getWarningForeground() {
        return Optional.ofNullable(this.warningForeground);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThemeUIColorPalette defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accent;
        private @Nullable String accentForeground;
        private @Nullable String danger;
        private @Nullable String dangerForeground;
        private @Nullable String dimension;
        private @Nullable String dimensionForeground;
        private @Nullable String measure;
        private @Nullable String measureForeground;
        private @Nullable String primaryBackground;
        private @Nullable String primaryForeground;
        private @Nullable String secondaryBackground;
        private @Nullable String secondaryForeground;
        private @Nullable String success;
        private @Nullable String successForeground;
        private @Nullable String warning;
        private @Nullable String warningForeground;

        public Builder() {
    	      // Empty
        }

        public Builder(ThemeUIColorPalette defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accent = defaults.accent;
    	      this.accentForeground = defaults.accentForeground;
    	      this.danger = defaults.danger;
    	      this.dangerForeground = defaults.dangerForeground;
    	      this.dimension = defaults.dimension;
    	      this.dimensionForeground = defaults.dimensionForeground;
    	      this.measure = defaults.measure;
    	      this.measureForeground = defaults.measureForeground;
    	      this.primaryBackground = defaults.primaryBackground;
    	      this.primaryForeground = defaults.primaryForeground;
    	      this.secondaryBackground = defaults.secondaryBackground;
    	      this.secondaryForeground = defaults.secondaryForeground;
    	      this.success = defaults.success;
    	      this.successForeground = defaults.successForeground;
    	      this.warning = defaults.warning;
    	      this.warningForeground = defaults.warningForeground;
        }

        public Builder setAccent(@Nullable String accent) {
            this.accent = accent;
            return this;
        }

        public Builder setAccentForeground(@Nullable String accentForeground) {
            this.accentForeground = accentForeground;
            return this;
        }

        public Builder setDanger(@Nullable String danger) {
            this.danger = danger;
            return this;
        }

        public Builder setDangerForeground(@Nullable String dangerForeground) {
            this.dangerForeground = dangerForeground;
            return this;
        }

        public Builder setDimension(@Nullable String dimension) {
            this.dimension = dimension;
            return this;
        }

        public Builder setDimensionForeground(@Nullable String dimensionForeground) {
            this.dimensionForeground = dimensionForeground;
            return this;
        }

        public Builder setMeasure(@Nullable String measure) {
            this.measure = measure;
            return this;
        }

        public Builder setMeasureForeground(@Nullable String measureForeground) {
            this.measureForeground = measureForeground;
            return this;
        }

        public Builder setPrimaryBackground(@Nullable String primaryBackground) {
            this.primaryBackground = primaryBackground;
            return this;
        }

        public Builder setPrimaryForeground(@Nullable String primaryForeground) {
            this.primaryForeground = primaryForeground;
            return this;
        }

        public Builder setSecondaryBackground(@Nullable String secondaryBackground) {
            this.secondaryBackground = secondaryBackground;
            return this;
        }

        public Builder setSecondaryForeground(@Nullable String secondaryForeground) {
            this.secondaryForeground = secondaryForeground;
            return this;
        }

        public Builder setSuccess(@Nullable String success) {
            this.success = success;
            return this;
        }

        public Builder setSuccessForeground(@Nullable String successForeground) {
            this.successForeground = successForeground;
            return this;
        }

        public Builder setWarning(@Nullable String warning) {
            this.warning = warning;
            return this;
        }

        public Builder setWarningForeground(@Nullable String warningForeground) {
            this.warningForeground = warningForeground;
            return this;
        }

        public ThemeUIColorPalette build() {
            return new ThemeUIColorPalette(accent, accentForeground, danger, dangerForeground, dimension, dimensionForeground, measure, measureForeground, primaryBackground, primaryForeground, secondaryBackground, secondaryForeground, success, successForeground, warning, warningForeground);
        }
    }
}
