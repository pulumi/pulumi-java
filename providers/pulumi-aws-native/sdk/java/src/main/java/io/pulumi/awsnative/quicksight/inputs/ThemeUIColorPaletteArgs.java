// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
 *             description is a hexadecimal color code that consists of six alphanumerical characters,
 *             prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
 *                 Guide.</i>
 *         </p>
 * 
 */
public final class ThemeUIColorPaletteArgs extends io.pulumi.resources.ResourceArgs {

    public static final ThemeUIColorPaletteArgs Empty = new ThemeUIColorPaletteArgs();

    /**
     * <p>This color is that applies to selected states and buttons.</p>
     * 
     */
    @Import(name="accent")
      private final @Nullable Output<String> accent;

    public Output<String> accent() {
        return this.accent == null ? Codegen.empty() : this.accent;
    }

    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             accent color.</p>
     * 
     */
    @Import(name="accentForeground")
      private final @Nullable Output<String> accentForeground;

    public Output<String> accentForeground() {
        return this.accentForeground == null ? Codegen.empty() : this.accentForeground;
    }

    /**
     * <p>The color that applies to error messages.</p>
     * 
     */
    @Import(name="danger")
      private final @Nullable Output<String> danger;

    public Output<String> danger() {
        return this.danger == null ? Codegen.empty() : this.danger;
    }

    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             error color.</p>
     * 
     */
    @Import(name="dangerForeground")
      private final @Nullable Output<String> dangerForeground;

    public Output<String> dangerForeground() {
        return this.dangerForeground == null ? Codegen.empty() : this.dangerForeground;
    }

    /**
     * <p>The color that applies to the names of fields that are identified as
     *             dimensions.</p>
     * 
     */
    @Import(name="dimension")
      private final @Nullable Output<String> dimension;

    public Output<String> dimension() {
        return this.dimension == null ? Codegen.empty() : this.dimension;
    }

    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             dimension color.</p>
     * 
     */
    @Import(name="dimensionForeground")
      private final @Nullable Output<String> dimensionForeground;

    public Output<String> dimensionForeground() {
        return this.dimensionForeground == null ? Codegen.empty() : this.dimensionForeground;
    }

    /**
     * <p>The color that applies to the names of fields that are identified as measures.</p>
     * 
     */
    @Import(name="measure")
      private final @Nullable Output<String> measure;

    public Output<String> measure() {
        return this.measure == null ? Codegen.empty() : this.measure;
    }

    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             measure color.</p>
     * 
     */
    @Import(name="measureForeground")
      private final @Nullable Output<String> measureForeground;

    public Output<String> measureForeground() {
        return this.measureForeground == null ? Codegen.empty() : this.measureForeground;
    }

    /**
     * <p>The background color that applies to visuals and other high emphasis UI.</p>
     * 
     */
    @Import(name="primaryBackground")
      private final @Nullable Output<String> primaryBackground;

    public Output<String> primaryBackground() {
        return this.primaryBackground == null ? Codegen.empty() : this.primaryBackground;
    }

    /**
     * <p>The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
     * 
     */
    @Import(name="primaryForeground")
      private final @Nullable Output<String> primaryForeground;

    public Output<String> primaryForeground() {
        return this.primaryForeground == null ? Codegen.empty() : this.primaryForeground;
    }

    /**
     * <p>The background color that applies to the sheet background and sheet controls.</p>
     * 
     */
    @Import(name="secondaryBackground")
      private final @Nullable Output<String> secondaryBackground;

    public Output<String> secondaryBackground() {
        return this.secondaryBackground == null ? Codegen.empty() : this.secondaryBackground;
    }

    /**
     * <p>The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.</p>
     * 
     */
    @Import(name="secondaryForeground")
      private final @Nullable Output<String> secondaryForeground;

    public Output<String> secondaryForeground() {
        return this.secondaryForeground == null ? Codegen.empty() : this.secondaryForeground;
    }

    /**
     * <p>The color that applies to success messages, for example the check mark for a
     *             successful download.</p>
     * 
     */
    @Import(name="success")
      private final @Nullable Output<String> success;

    public Output<String> success() {
        return this.success == null ? Codegen.empty() : this.success;
    }

    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             success color.</p>
     * 
     */
    @Import(name="successForeground")
      private final @Nullable Output<String> successForeground;

    public Output<String> successForeground() {
        return this.successForeground == null ? Codegen.empty() : this.successForeground;
    }

    /**
     * <p>This color that applies to warning and informational messages.</p>
     * 
     */
    @Import(name="warning")
      private final @Nullable Output<String> warning;

    public Output<String> warning() {
        return this.warning == null ? Codegen.empty() : this.warning;
    }

    /**
     * <p>The foreground color that applies to any text or other elements that appear over the
     *             warning color.</p>
     * 
     */
    @Import(name="warningForeground")
      private final @Nullable Output<String> warningForeground;

    public Output<String> warningForeground() {
        return this.warningForeground == null ? Codegen.empty() : this.warningForeground;
    }

    public ThemeUIColorPaletteArgs(
        @Nullable Output<String> accent,
        @Nullable Output<String> accentForeground,
        @Nullable Output<String> danger,
        @Nullable Output<String> dangerForeground,
        @Nullable Output<String> dimension,
        @Nullable Output<String> dimensionForeground,
        @Nullable Output<String> measure,
        @Nullable Output<String> measureForeground,
        @Nullable Output<String> primaryBackground,
        @Nullable Output<String> primaryForeground,
        @Nullable Output<String> secondaryBackground,
        @Nullable Output<String> secondaryForeground,
        @Nullable Output<String> success,
        @Nullable Output<String> successForeground,
        @Nullable Output<String> warning,
        @Nullable Output<String> warningForeground) {
        this.accent = accent;
        this.accentForeground = accentForeground;
        this.danger = danger;
        this.dangerForeground = dangerForeground;
        this.dimension = dimension;
        this.dimensionForeground = dimensionForeground;
        this.measure = measure;
        this.measureForeground = measureForeground;
        this.primaryBackground = primaryBackground;
        this.primaryForeground = primaryForeground;
        this.secondaryBackground = secondaryBackground;
        this.secondaryForeground = secondaryForeground;
        this.success = success;
        this.successForeground = successForeground;
        this.warning = warning;
        this.warningForeground = warningForeground;
    }

    private ThemeUIColorPaletteArgs() {
        this.accent = Codegen.empty();
        this.accentForeground = Codegen.empty();
        this.danger = Codegen.empty();
        this.dangerForeground = Codegen.empty();
        this.dimension = Codegen.empty();
        this.dimensionForeground = Codegen.empty();
        this.measure = Codegen.empty();
        this.measureForeground = Codegen.empty();
        this.primaryBackground = Codegen.empty();
        this.primaryForeground = Codegen.empty();
        this.secondaryBackground = Codegen.empty();
        this.secondaryForeground = Codegen.empty();
        this.success = Codegen.empty();
        this.successForeground = Codegen.empty();
        this.warning = Codegen.empty();
        this.warningForeground = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThemeUIColorPaletteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accent;
        private @Nullable Output<String> accentForeground;
        private @Nullable Output<String> danger;
        private @Nullable Output<String> dangerForeground;
        private @Nullable Output<String> dimension;
        private @Nullable Output<String> dimensionForeground;
        private @Nullable Output<String> measure;
        private @Nullable Output<String> measureForeground;
        private @Nullable Output<String> primaryBackground;
        private @Nullable Output<String> primaryForeground;
        private @Nullable Output<String> secondaryBackground;
        private @Nullable Output<String> secondaryForeground;
        private @Nullable Output<String> success;
        private @Nullable Output<String> successForeground;
        private @Nullable Output<String> warning;
        private @Nullable Output<String> warningForeground;

        public Builder() {
    	      // Empty
        }

        public Builder(ThemeUIColorPaletteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accent = defaults.accent;
    	      this.accentForeground = defaults.accentForeground;
    	      this.danger = defaults.danger;
    	      this.dangerForeground = defaults.dangerForeground;
    	      this.dimension = defaults.dimension;
    	      this.dimensionForeground = defaults.dimensionForeground;
    	      this.measure = defaults.measure;
    	      this.measureForeground = defaults.measureForeground;
    	      this.primaryBackground = defaults.primaryBackground;
    	      this.primaryForeground = defaults.primaryForeground;
    	      this.secondaryBackground = defaults.secondaryBackground;
    	      this.secondaryForeground = defaults.secondaryForeground;
    	      this.success = defaults.success;
    	      this.successForeground = defaults.successForeground;
    	      this.warning = defaults.warning;
    	      this.warningForeground = defaults.warningForeground;
        }

        public Builder accent(@Nullable Output<String> accent) {
            this.accent = accent;
            return this;
        }
        public Builder accent(@Nullable String accent) {
            this.accent = Codegen.ofNullable(accent);
            return this;
        }
        public Builder accentForeground(@Nullable Output<String> accentForeground) {
            this.accentForeground = accentForeground;
            return this;
        }
        public Builder accentForeground(@Nullable String accentForeground) {
            this.accentForeground = Codegen.ofNullable(accentForeground);
            return this;
        }
        public Builder danger(@Nullable Output<String> danger) {
            this.danger = danger;
            return this;
        }
        public Builder danger(@Nullable String danger) {
            this.danger = Codegen.ofNullable(danger);
            return this;
        }
        public Builder dangerForeground(@Nullable Output<String> dangerForeground) {
            this.dangerForeground = dangerForeground;
            return this;
        }
        public Builder dangerForeground(@Nullable String dangerForeground) {
            this.dangerForeground = Codegen.ofNullable(dangerForeground);
            return this;
        }
        public Builder dimension(@Nullable Output<String> dimension) {
            this.dimension = dimension;
            return this;
        }
        public Builder dimension(@Nullable String dimension) {
            this.dimension = Codegen.ofNullable(dimension);
            return this;
        }
        public Builder dimensionForeground(@Nullable Output<String> dimensionForeground) {
            this.dimensionForeground = dimensionForeground;
            return this;
        }
        public Builder dimensionForeground(@Nullable String dimensionForeground) {
            this.dimensionForeground = Codegen.ofNullable(dimensionForeground);
            return this;
        }
        public Builder measure(@Nullable Output<String> measure) {
            this.measure = measure;
            return this;
        }
        public Builder measure(@Nullable String measure) {
            this.measure = Codegen.ofNullable(measure);
            return this;
        }
        public Builder measureForeground(@Nullable Output<String> measureForeground) {
            this.measureForeground = measureForeground;
            return this;
        }
        public Builder measureForeground(@Nullable String measureForeground) {
            this.measureForeground = Codegen.ofNullable(measureForeground);
            return this;
        }
        public Builder primaryBackground(@Nullable Output<String> primaryBackground) {
            this.primaryBackground = primaryBackground;
            return this;
        }
        public Builder primaryBackground(@Nullable String primaryBackground) {
            this.primaryBackground = Codegen.ofNullable(primaryBackground);
            return this;
        }
        public Builder primaryForeground(@Nullable Output<String> primaryForeground) {
            this.primaryForeground = primaryForeground;
            return this;
        }
        public Builder primaryForeground(@Nullable String primaryForeground) {
            this.primaryForeground = Codegen.ofNullable(primaryForeground);
            return this;
        }
        public Builder secondaryBackground(@Nullable Output<String> secondaryBackground) {
            this.secondaryBackground = secondaryBackground;
            return this;
        }
        public Builder secondaryBackground(@Nullable String secondaryBackground) {
            this.secondaryBackground = Codegen.ofNullable(secondaryBackground);
            return this;
        }
        public Builder secondaryForeground(@Nullable Output<String> secondaryForeground) {
            this.secondaryForeground = secondaryForeground;
            return this;
        }
        public Builder secondaryForeground(@Nullable String secondaryForeground) {
            this.secondaryForeground = Codegen.ofNullable(secondaryForeground);
            return this;
        }
        public Builder success(@Nullable Output<String> success) {
            this.success = success;
            return this;
        }
        public Builder success(@Nullable String success) {
            this.success = Codegen.ofNullable(success);
            return this;
        }
        public Builder successForeground(@Nullable Output<String> successForeground) {
            this.successForeground = successForeground;
            return this;
        }
        public Builder successForeground(@Nullable String successForeground) {
            this.successForeground = Codegen.ofNullable(successForeground);
            return this;
        }
        public Builder warning(@Nullable Output<String> warning) {
            this.warning = warning;
            return this;
        }
        public Builder warning(@Nullable String warning) {
            this.warning = Codegen.ofNullable(warning);
            return this;
        }
        public Builder warningForeground(@Nullable Output<String> warningForeground) {
            this.warningForeground = warningForeground;
            return this;
        }
        public Builder warningForeground(@Nullable String warningForeground) {
            this.warningForeground = Codegen.ofNullable(warningForeground);
            return this;
        }        public ThemeUIColorPaletteArgs build() {
            return new ThemeUIColorPaletteArgs(accent, accentForeground, danger, dangerForeground, dimension, dimensionForeground, measure, measureForeground, primaryBackground, primaryForeground, secondaryBackground, secondaryForeground, success, successForeground, warning, warningForeground);
        }
    }
}
