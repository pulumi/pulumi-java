// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.pinpoint;

import io.pulumi.awsnative.pinpoint.enums.InAppTemplateLayout;
import io.pulumi.awsnative.pinpoint.inputs.InAppTemplateInAppMessageContentArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InAppTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final InAppTemplateArgs Empty = new InAppTemplateArgs();

    @InputImport(name="content")
      private final @Nullable Input<List<InAppTemplateInAppMessageContentArgs>> content;

    public Input<List<InAppTemplateInAppMessageContentArgs>> getContent() {
        return this.content == null ? Input.empty() : this.content;
    }

    @InputImport(name="customConfig")
      private final @Nullable Input<Object> customConfig;

    public Input<Object> getCustomConfig() {
        return this.customConfig == null ? Input.empty() : this.customConfig;
    }

    @InputImport(name="layout")
      private final @Nullable Input<InAppTemplateLayout> layout;

    public Input<InAppTemplateLayout> getLayout() {
        return this.layout == null ? Input.empty() : this.layout;
    }

    @InputImport(name="tags")
      private final @Nullable Input<Object> tags;

    public Input<Object> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="templateDescription")
      private final @Nullable Input<String> templateDescription;

    public Input<String> getTemplateDescription() {
        return this.templateDescription == null ? Input.empty() : this.templateDescription;
    }

    @InputImport(name="templateName", required=true)
      private final Input<String> templateName;

    public Input<String> getTemplateName() {
        return this.templateName;
    }

    public InAppTemplateArgs(
        @Nullable Input<List<InAppTemplateInAppMessageContentArgs>> content,
        @Nullable Input<Object> customConfig,
        @Nullable Input<InAppTemplateLayout> layout,
        @Nullable Input<Object> tags,
        @Nullable Input<String> templateDescription,
        Input<String> templateName) {
        this.content = content;
        this.customConfig = customConfig;
        this.layout = layout;
        this.tags = tags;
        this.templateDescription = templateDescription;
        this.templateName = Objects.requireNonNull(templateName, "expected parameter 'templateName' to be non-null");
    }

    private InAppTemplateArgs() {
        this.content = Input.empty();
        this.customConfig = Input.empty();
        this.layout = Input.empty();
        this.tags = Input.empty();
        this.templateDescription = Input.empty();
        this.templateName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InAppTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<InAppTemplateInAppMessageContentArgs>> content;
        private @Nullable Input<Object> customConfig;
        private @Nullable Input<InAppTemplateLayout> layout;
        private @Nullable Input<Object> tags;
        private @Nullable Input<String> templateDescription;
        private Input<String> templateName;

        public Builder() {
    	      // Empty
        }

        public Builder(InAppTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.customConfig = defaults.customConfig;
    	      this.layout = defaults.layout;
    	      this.tags = defaults.tags;
    	      this.templateDescription = defaults.templateDescription;
    	      this.templateName = defaults.templateName;
        }

        public Builder setContent(@Nullable Input<List<InAppTemplateInAppMessageContentArgs>> content) {
            this.content = content;
            return this;
        }

        public Builder setContent(@Nullable List<InAppTemplateInAppMessageContentArgs> content) {
            this.content = Input.ofNullable(content);
            return this;
        }

        public Builder setCustomConfig(@Nullable Input<Object> customConfig) {
            this.customConfig = customConfig;
            return this;
        }

        public Builder setCustomConfig(@Nullable Object customConfig) {
            this.customConfig = Input.ofNullable(customConfig);
            return this;
        }

        public Builder setLayout(@Nullable Input<InAppTemplateLayout> layout) {
            this.layout = layout;
            return this;
        }

        public Builder setLayout(@Nullable InAppTemplateLayout layout) {
            this.layout = Input.ofNullable(layout);
            return this;
        }

        public Builder setTags(@Nullable Input<Object> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Object tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTemplateDescription(@Nullable Input<String> templateDescription) {
            this.templateDescription = templateDescription;
            return this;
        }

        public Builder setTemplateDescription(@Nullable String templateDescription) {
            this.templateDescription = Input.ofNullable(templateDescription);
            return this;
        }

        public Builder setTemplateName(Input<String> templateName) {
            this.templateName = Objects.requireNonNull(templateName);
            return this;
        }

        public Builder setTemplateName(String templateName) {
            this.templateName = Input.of(Objects.requireNonNull(templateName));
            return this;
        }
        public InAppTemplateArgs build() {
            return new InAppTemplateArgs(content, customConfig, layout, tags, templateDescription, templateName);
        }
    }
}
