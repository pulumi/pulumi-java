// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.groundstation;

import io.pulumi.awsnative.groundstation.inputs.MissionProfileDataflowEdgeArgs;
import io.pulumi.awsnative.groundstation.inputs.MissionProfileTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MissionProfileArgs extends io.pulumi.resources.ResourceArgs {

    public static final MissionProfileArgs Empty = new MissionProfileArgs();

    /**
     * Post-pass time needed after the contact.
     * 
     */
    @Import(name="contactPostPassDurationSeconds")
      private final @Nullable Output<Integer> contactPostPassDurationSeconds;

    public Output<Integer> getContactPostPassDurationSeconds() {
        return this.contactPostPassDurationSeconds == null ? Output.empty() : this.contactPostPassDurationSeconds;
    }

    /**
     * Pre-pass time needed before the contact.
     * 
     */
    @Import(name="contactPrePassDurationSeconds")
      private final @Nullable Output<Integer> contactPrePassDurationSeconds;

    public Output<Integer> getContactPrePassDurationSeconds() {
        return this.contactPrePassDurationSeconds == null ? Output.empty() : this.contactPrePassDurationSeconds;
    }

    @Import(name="dataflowEdges", required=true)
      private final Output<List<MissionProfileDataflowEdgeArgs>> dataflowEdges;

    public Output<List<MissionProfileDataflowEdgeArgs>> getDataflowEdges() {
        return this.dataflowEdges;
    }

    /**
     * Visibilities with shorter duration than the specified minimum viable contact duration will be ignored when searching for available contacts.
     * 
     */
    @Import(name="minimumViableContactDurationSeconds", required=true)
      private final Output<Integer> minimumViableContactDurationSeconds;

    public Output<Integer> getMinimumViableContactDurationSeconds() {
        return this.minimumViableContactDurationSeconds;
    }

    /**
     * A name used to identify a mission profile.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="tags")
      private final @Nullable Output<List<MissionProfileTagArgs>> tags;

    public Output<List<MissionProfileTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    @Import(name="trackingConfigArn", required=true)
      private final Output<String> trackingConfigArn;

    public Output<String> getTrackingConfigArn() {
        return this.trackingConfigArn;
    }

    public MissionProfileArgs(
        @Nullable Output<Integer> contactPostPassDurationSeconds,
        @Nullable Output<Integer> contactPrePassDurationSeconds,
        Output<List<MissionProfileDataflowEdgeArgs>> dataflowEdges,
        Output<Integer> minimumViableContactDurationSeconds,
        @Nullable Output<String> name,
        @Nullable Output<List<MissionProfileTagArgs>> tags,
        Output<String> trackingConfigArn) {
        this.contactPostPassDurationSeconds = contactPostPassDurationSeconds;
        this.contactPrePassDurationSeconds = contactPrePassDurationSeconds;
        this.dataflowEdges = Objects.requireNonNull(dataflowEdges, "expected parameter 'dataflowEdges' to be non-null");
        this.minimumViableContactDurationSeconds = Objects.requireNonNull(minimumViableContactDurationSeconds, "expected parameter 'minimumViableContactDurationSeconds' to be non-null");
        this.name = name;
        this.tags = tags;
        this.trackingConfigArn = Objects.requireNonNull(trackingConfigArn, "expected parameter 'trackingConfigArn' to be non-null");
    }

    private MissionProfileArgs() {
        this.contactPostPassDurationSeconds = Output.empty();
        this.contactPrePassDurationSeconds = Output.empty();
        this.dataflowEdges = Output.empty();
        this.minimumViableContactDurationSeconds = Output.empty();
        this.name = Output.empty();
        this.tags = Output.empty();
        this.trackingConfigArn = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MissionProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> contactPostPassDurationSeconds;
        private @Nullable Output<Integer> contactPrePassDurationSeconds;
        private Output<List<MissionProfileDataflowEdgeArgs>> dataflowEdges;
        private Output<Integer> minimumViableContactDurationSeconds;
        private @Nullable Output<String> name;
        private @Nullable Output<List<MissionProfileTagArgs>> tags;
        private Output<String> trackingConfigArn;

        public Builder() {
    	      // Empty
        }

        public Builder(MissionProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactPostPassDurationSeconds = defaults.contactPostPassDurationSeconds;
    	      this.contactPrePassDurationSeconds = defaults.contactPrePassDurationSeconds;
    	      this.dataflowEdges = defaults.dataflowEdges;
    	      this.minimumViableContactDurationSeconds = defaults.minimumViableContactDurationSeconds;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.trackingConfigArn = defaults.trackingConfigArn;
        }

        public Builder contactPostPassDurationSeconds(@Nullable Output<Integer> contactPostPassDurationSeconds) {
            this.contactPostPassDurationSeconds = contactPostPassDurationSeconds;
            return this;
        }
        public Builder contactPostPassDurationSeconds(@Nullable Integer contactPostPassDurationSeconds) {
            this.contactPostPassDurationSeconds = Output.ofNullable(contactPostPassDurationSeconds);
            return this;
        }
        public Builder contactPrePassDurationSeconds(@Nullable Output<Integer> contactPrePassDurationSeconds) {
            this.contactPrePassDurationSeconds = contactPrePassDurationSeconds;
            return this;
        }
        public Builder contactPrePassDurationSeconds(@Nullable Integer contactPrePassDurationSeconds) {
            this.contactPrePassDurationSeconds = Output.ofNullable(contactPrePassDurationSeconds);
            return this;
        }
        public Builder dataflowEdges(Output<List<MissionProfileDataflowEdgeArgs>> dataflowEdges) {
            this.dataflowEdges = Objects.requireNonNull(dataflowEdges);
            return this;
        }
        public Builder dataflowEdges(List<MissionProfileDataflowEdgeArgs> dataflowEdges) {
            this.dataflowEdges = Output.of(Objects.requireNonNull(dataflowEdges));
            return this;
        }
        public Builder dataflowEdges(MissionProfileDataflowEdgeArgs... dataflowEdges) {
            return dataflowEdges(List.of(dataflowEdges));
        }
        public Builder minimumViableContactDurationSeconds(Output<Integer> minimumViableContactDurationSeconds) {
            this.minimumViableContactDurationSeconds = Objects.requireNonNull(minimumViableContactDurationSeconds);
            return this;
        }
        public Builder minimumViableContactDurationSeconds(Integer minimumViableContactDurationSeconds) {
            this.minimumViableContactDurationSeconds = Output.of(Objects.requireNonNull(minimumViableContactDurationSeconds));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder tags(@Nullable Output<List<MissionProfileTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<MissionProfileTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(MissionProfileTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder trackingConfigArn(Output<String> trackingConfigArn) {
            this.trackingConfigArn = Objects.requireNonNull(trackingConfigArn);
            return this;
        }
        public Builder trackingConfigArn(String trackingConfigArn) {
            this.trackingConfigArn = Output.of(Objects.requireNonNull(trackingConfigArn));
            return this;
        }        public MissionProfileArgs build() {
            return new MissionProfileArgs(contactPostPassDurationSeconds, contactPrePassDurationSeconds, dataflowEdges, minimumViableContactDurationSeconds, name, tags, trackingConfigArn);
        }
    }
}
