// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail;

import io.pulumi.awsnative.lightsail.inputs.ContainerPublicDomainNameArgs;
import io.pulumi.awsnative.lightsail.inputs.ContainerServiceDeploymentArgs;
import io.pulumi.awsnative.lightsail.inputs.ContainerTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ContainerArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerArgs Empty = new ContainerArgs();

    /**
     * Describes a container deployment configuration of an Amazon Lightsail container service.
     * 
     */
    @Import(name="containerServiceDeployment")
      private final @Nullable Output<ContainerServiceDeploymentArgs> containerServiceDeployment;

    public Output<ContainerServiceDeploymentArgs> getContainerServiceDeployment() {
        return this.containerServiceDeployment == null ? Output.empty() : this.containerServiceDeployment;
    }

    /**
     * A Boolean value to indicate whether the container service is disabled.
     * 
     */
    @Import(name="isDisabled")
      private final @Nullable Output<Boolean> isDisabled;

    public Output<Boolean> getIsDisabled() {
        return this.isDisabled == null ? Output.empty() : this.isDisabled;
    }

    /**
     * The power specification for the container service.
     * 
     */
    @Import(name="power", required=true)
      private final Output<String> power;

    public Output<String> getPower() {
        return this.power;
    }

    /**
     * The public domain names to use with the container service, such as example.com and www.example.com.
     * 
     */
    @Import(name="publicDomainNames")
      private final @Nullable Output<List<ContainerPublicDomainNameArgs>> publicDomainNames;

    public Output<List<ContainerPublicDomainNameArgs>> getPublicDomainNames() {
        return this.publicDomainNames == null ? Output.empty() : this.publicDomainNames;
    }

    /**
     * The scale specification for the container service.
     * 
     */
    @Import(name="scale", required=true)
      private final Output<Integer> scale;

    public Output<Integer> getScale() {
        return this.scale;
    }

    /**
     * The name for the container service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<ContainerTagArgs>> tags;

    public Output<List<ContainerTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public ContainerArgs(
        @Nullable Output<ContainerServiceDeploymentArgs> containerServiceDeployment,
        @Nullable Output<Boolean> isDisabled,
        Output<String> power,
        @Nullable Output<List<ContainerPublicDomainNameArgs>> publicDomainNames,
        Output<Integer> scale,
        Output<String> serviceName,
        @Nullable Output<List<ContainerTagArgs>> tags) {
        this.containerServiceDeployment = containerServiceDeployment;
        this.isDisabled = isDisabled;
        this.power = Objects.requireNonNull(power, "expected parameter 'power' to be non-null");
        this.publicDomainNames = publicDomainNames;
        this.scale = Objects.requireNonNull(scale, "expected parameter 'scale' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.tags = tags;
    }

    private ContainerArgs() {
        this.containerServiceDeployment = Output.empty();
        this.isDisabled = Output.empty();
        this.power = Output.empty();
        this.publicDomainNames = Output.empty();
        this.scale = Output.empty();
        this.serviceName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ContainerServiceDeploymentArgs> containerServiceDeployment;
        private @Nullable Output<Boolean> isDisabled;
        private Output<String> power;
        private @Nullable Output<List<ContainerPublicDomainNameArgs>> publicDomainNames;
        private Output<Integer> scale;
        private Output<String> serviceName;
        private @Nullable Output<List<ContainerTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerServiceDeployment = defaults.containerServiceDeployment;
    	      this.isDisabled = defaults.isDisabled;
    	      this.power = defaults.power;
    	      this.publicDomainNames = defaults.publicDomainNames;
    	      this.scale = defaults.scale;
    	      this.serviceName = defaults.serviceName;
    	      this.tags = defaults.tags;
        }

        public Builder containerServiceDeployment(@Nullable Output<ContainerServiceDeploymentArgs> containerServiceDeployment) {
            this.containerServiceDeployment = containerServiceDeployment;
            return this;
        }
        public Builder containerServiceDeployment(@Nullable ContainerServiceDeploymentArgs containerServiceDeployment) {
            this.containerServiceDeployment = Output.ofNullable(containerServiceDeployment);
            return this;
        }
        public Builder isDisabled(@Nullable Output<Boolean> isDisabled) {
            this.isDisabled = isDisabled;
            return this;
        }
        public Builder isDisabled(@Nullable Boolean isDisabled) {
            this.isDisabled = Output.ofNullable(isDisabled);
            return this;
        }
        public Builder power(Output<String> power) {
            this.power = Objects.requireNonNull(power);
            return this;
        }
        public Builder power(String power) {
            this.power = Output.of(Objects.requireNonNull(power));
            return this;
        }
        public Builder publicDomainNames(@Nullable Output<List<ContainerPublicDomainNameArgs>> publicDomainNames) {
            this.publicDomainNames = publicDomainNames;
            return this;
        }
        public Builder publicDomainNames(@Nullable List<ContainerPublicDomainNameArgs> publicDomainNames) {
            this.publicDomainNames = Output.ofNullable(publicDomainNames);
            return this;
        }
        public Builder publicDomainNames(ContainerPublicDomainNameArgs... publicDomainNames) {
            return publicDomainNames(List.of(publicDomainNames));
        }
        public Builder scale(Output<Integer> scale) {
            this.scale = Objects.requireNonNull(scale);
            return this;
        }
        public Builder scale(Integer scale) {
            this.scale = Output.of(Objects.requireNonNull(scale));
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder tags(@Nullable Output<List<ContainerTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<ContainerTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(ContainerTagArgs... tags) {
            return tags(List.of(tags));
        }        public ContainerArgs build() {
            return new ContainerArgs(containerServiceDeployment, isDisabled, power, publicDomainNames, scale, serviceName, tags);
        }
    }
}
