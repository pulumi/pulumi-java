// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the parameters of the database.
 * 
 */
public final class DatabaseRelationalDatabaseParameterArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseRelationalDatabaseParameterArgs Empty = new DatabaseRelationalDatabaseParameterArgs();

    /**
     * Specifies the valid range of values for the parameter.
     * 
     */
    @Import(name="allowedValues")
      private final @Nullable Output<String> allowedValues;

    public Output<String> getAllowedValues() {
        return this.allowedValues == null ? Codegen.empty() : this.allowedValues;
    }

    /**
     * Indicates when parameter updates are applied. Can be immediate or pending-reboot.
     * 
     */
    @Import(name="applyMethod")
      private final @Nullable Output<String> applyMethod;

    public Output<String> getApplyMethod() {
        return this.applyMethod == null ? Codegen.empty() : this.applyMethod;
    }

    /**
     * Specifies the engine-specific parameter type.
     * 
     */
    @Import(name="applyType")
      private final @Nullable Output<String> applyType;

    public Output<String> getApplyType() {
        return this.applyType == null ? Codegen.empty() : this.applyType;
    }

    /**
     * Specifies the valid data type for the parameter.
     * 
     */
    @Import(name="dataType")
      private final @Nullable Output<String> dataType;

    public Output<String> getDataType() {
        return this.dataType == null ? Codegen.empty() : this.dataType;
    }

    /**
     * Provides a description of the parameter.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A Boolean value indicating whether the parameter can be modified.
     * 
     */
    @Import(name="isModifiable")
      private final @Nullable Output<Boolean> isModifiable;

    public Output<Boolean> getIsModifiable() {
        return this.isModifiable == null ? Codegen.empty() : this.isModifiable;
    }

    /**
     * Specifies the name of the parameter.
     * 
     */
    @Import(name="parameterName")
      private final @Nullable Output<String> parameterName;

    public Output<String> getParameterName() {
        return this.parameterName == null ? Codegen.empty() : this.parameterName;
    }

    /**
     * Specifies the value of the parameter.
     * 
     */
    @Import(name="parameterValue")
      private final @Nullable Output<String> parameterValue;

    public Output<String> getParameterValue() {
        return this.parameterValue == null ? Codegen.empty() : this.parameterValue;
    }

    public DatabaseRelationalDatabaseParameterArgs(
        @Nullable Output<String> allowedValues,
        @Nullable Output<String> applyMethod,
        @Nullable Output<String> applyType,
        @Nullable Output<String> dataType,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> isModifiable,
        @Nullable Output<String> parameterName,
        @Nullable Output<String> parameterValue) {
        this.allowedValues = allowedValues;
        this.applyMethod = applyMethod;
        this.applyType = applyType;
        this.dataType = dataType;
        this.description = description;
        this.isModifiable = isModifiable;
        this.parameterName = parameterName;
        this.parameterValue = parameterValue;
    }

    private DatabaseRelationalDatabaseParameterArgs() {
        this.allowedValues = Codegen.empty();
        this.applyMethod = Codegen.empty();
        this.applyType = Codegen.empty();
        this.dataType = Codegen.empty();
        this.description = Codegen.empty();
        this.isModifiable = Codegen.empty();
        this.parameterName = Codegen.empty();
        this.parameterValue = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseRelationalDatabaseParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> allowedValues;
        private @Nullable Output<String> applyMethod;
        private @Nullable Output<String> applyType;
        private @Nullable Output<String> dataType;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> isModifiable;
        private @Nullable Output<String> parameterName;
        private @Nullable Output<String> parameterValue;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseRelationalDatabaseParameterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.applyMethod = defaults.applyMethod;
    	      this.applyType = defaults.applyType;
    	      this.dataType = defaults.dataType;
    	      this.description = defaults.description;
    	      this.isModifiable = defaults.isModifiable;
    	      this.parameterName = defaults.parameterName;
    	      this.parameterValue = defaults.parameterValue;
        }

        public Builder allowedValues(@Nullable Output<String> allowedValues) {
            this.allowedValues = allowedValues;
            return this;
        }
        public Builder allowedValues(@Nullable String allowedValues) {
            this.allowedValues = Codegen.ofNullable(allowedValues);
            return this;
        }
        public Builder applyMethod(@Nullable Output<String> applyMethod) {
            this.applyMethod = applyMethod;
            return this;
        }
        public Builder applyMethod(@Nullable String applyMethod) {
            this.applyMethod = Codegen.ofNullable(applyMethod);
            return this;
        }
        public Builder applyType(@Nullable Output<String> applyType) {
            this.applyType = applyType;
            return this;
        }
        public Builder applyType(@Nullable String applyType) {
            this.applyType = Codegen.ofNullable(applyType);
            return this;
        }
        public Builder dataType(@Nullable Output<String> dataType) {
            this.dataType = dataType;
            return this;
        }
        public Builder dataType(@Nullable String dataType) {
            this.dataType = Codegen.ofNullable(dataType);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder isModifiable(@Nullable Output<Boolean> isModifiable) {
            this.isModifiable = isModifiable;
            return this;
        }
        public Builder isModifiable(@Nullable Boolean isModifiable) {
            this.isModifiable = Codegen.ofNullable(isModifiable);
            return this;
        }
        public Builder parameterName(@Nullable Output<String> parameterName) {
            this.parameterName = parameterName;
            return this;
        }
        public Builder parameterName(@Nullable String parameterName) {
            this.parameterName = Codegen.ofNullable(parameterName);
            return this;
        }
        public Builder parameterValue(@Nullable Output<String> parameterValue) {
            this.parameterValue = parameterValue;
            return this;
        }
        public Builder parameterValue(@Nullable String parameterValue) {
            this.parameterValue = Codegen.ofNullable(parameterValue);
            return this;
        }        public DatabaseRelationalDatabaseParameterArgs build() {
            return new DatabaseRelationalDatabaseParameterArgs(allowedValues, applyMethod, applyType, dataType, description, isModifiable, parameterName, parameterValue);
        }
    }
}
