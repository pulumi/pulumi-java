// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.inputs;

import io.pulumi.awsnative.s3.enums.BucketReplicationDestinationStorageClass;
import io.pulumi.awsnative.s3.inputs.BucketAccessControlTranslation;
import io.pulumi.awsnative.s3.inputs.BucketEncryptionConfiguration;
import io.pulumi.awsnative.s3.inputs.BucketMetrics;
import io.pulumi.awsnative.s3.inputs.BucketReplicationTime;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies which Amazon S3 bucket to store replicated objects in and their storage class.
 * 
 */
public final class BucketReplicationDestination extends io.pulumi.resources.InvokeArgs {

    public static final BucketReplicationDestination Empty = new BucketReplicationDestination();

    @Import(name="accessControlTranslation")
      private final @Nullable BucketAccessControlTranslation accessControlTranslation;

    public Optional<BucketAccessControlTranslation> getAccessControlTranslation() {
        return this.accessControlTranslation == null ? Optional.empty() : Optional.ofNullable(this.accessControlTranslation);
    }

    @Import(name="account")
      private final @Nullable String account;

    public Optional<String> getAccount() {
        return this.account == null ? Optional.empty() : Optional.ofNullable(this.account);
    }

    @Import(name="bucket", required=true)
      private final String bucket;

    public String getBucket() {
        return this.bucket;
    }

    @Import(name="encryptionConfiguration")
      private final @Nullable BucketEncryptionConfiguration encryptionConfiguration;

    public Optional<BucketEncryptionConfiguration> getEncryptionConfiguration() {
        return this.encryptionConfiguration == null ? Optional.empty() : Optional.ofNullable(this.encryptionConfiguration);
    }

    @Import(name="metrics")
      private final @Nullable BucketMetrics metrics;

    public Optional<BucketMetrics> getMetrics() {
        return this.metrics == null ? Optional.empty() : Optional.ofNullable(this.metrics);
    }

    @Import(name="replicationTime")
      private final @Nullable BucketReplicationTime replicationTime;

    public Optional<BucketReplicationTime> getReplicationTime() {
        return this.replicationTime == null ? Optional.empty() : Optional.ofNullable(this.replicationTime);
    }

    /**
     * The storage class to use when replicating objects, such as S3 Standard or reduced redundancy.
     * 
     */
    @Import(name="storageClass")
      private final @Nullable BucketReplicationDestinationStorageClass storageClass;

    public Optional<BucketReplicationDestinationStorageClass> getStorageClass() {
        return this.storageClass == null ? Optional.empty() : Optional.ofNullable(this.storageClass);
    }

    public BucketReplicationDestination(
        @Nullable BucketAccessControlTranslation accessControlTranslation,
        @Nullable String account,
        String bucket,
        @Nullable BucketEncryptionConfiguration encryptionConfiguration,
        @Nullable BucketMetrics metrics,
        @Nullable BucketReplicationTime replicationTime,
        @Nullable BucketReplicationDestinationStorageClass storageClass) {
        this.accessControlTranslation = accessControlTranslation;
        this.account = account;
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.encryptionConfiguration = encryptionConfiguration;
        this.metrics = metrics;
        this.replicationTime = replicationTime;
        this.storageClass = storageClass;
    }

    private BucketReplicationDestination() {
        this.accessControlTranslation = null;
        this.account = null;
        this.bucket = null;
        this.encryptionConfiguration = null;
        this.metrics = null;
        this.replicationTime = null;
        this.storageClass = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketReplicationDestination defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BucketAccessControlTranslation accessControlTranslation;
        private @Nullable String account;
        private String bucket;
        private @Nullable BucketEncryptionConfiguration encryptionConfiguration;
        private @Nullable BucketMetrics metrics;
        private @Nullable BucketReplicationTime replicationTime;
        private @Nullable BucketReplicationDestinationStorageClass storageClass;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketReplicationDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControlTranslation = defaults.accessControlTranslation;
    	      this.account = defaults.account;
    	      this.bucket = defaults.bucket;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.metrics = defaults.metrics;
    	      this.replicationTime = defaults.replicationTime;
    	      this.storageClass = defaults.storageClass;
        }

        public Builder accessControlTranslation(@Nullable BucketAccessControlTranslation accessControlTranslation) {
            this.accessControlTranslation = accessControlTranslation;
            return this;
        }
        public Builder account(@Nullable String account) {
            this.account = account;
            return this;
        }
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder encryptionConfiguration(@Nullable BucketEncryptionConfiguration encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }
        public Builder metrics(@Nullable BucketMetrics metrics) {
            this.metrics = metrics;
            return this;
        }
        public Builder replicationTime(@Nullable BucketReplicationTime replicationTime) {
            this.replicationTime = replicationTime;
            return this;
        }
        public Builder storageClass(@Nullable BucketReplicationDestinationStorageClass storageClass) {
            this.storageClass = storageClass;
            return this;
        }        public BucketReplicationDestination build() {
            return new BucketReplicationDestination(accessControlTranslation, account, bucket, encryptionConfiguration, metrics, replicationTime, storageClass);
        }
    }
}
