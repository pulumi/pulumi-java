// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ec2.outputs;

import io.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataAllocationStrategy;
import io.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataExcessCapacityTerminationPolicy;
import io.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataInstanceInterruptionBehavior;
import io.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataTargetCapacityUnitType;
import io.pulumi.awsnative.ec2.enums.SpotFleetRequestConfigDataType;
import io.pulumi.awsnative.ec2.outputs.SpotFleetLaunchSpecification;
import io.pulumi.awsnative.ec2.outputs.SpotFleetLaunchTemplateConfig;
import io.pulumi.awsnative.ec2.outputs.SpotFleetLoadBalancersConfig;
import io.pulumi.awsnative.ec2.outputs.SpotFleetSpotMaintenanceStrategies;
import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SpotFleetRequestConfigData {
    private final @Nullable SpotFleetRequestConfigDataAllocationStrategy allocationStrategy;
    private final @Nullable String context;
    private final @Nullable SpotFleetRequestConfigDataExcessCapacityTerminationPolicy excessCapacityTerminationPolicy;
    private final String iamFleetRole;
    private final @Nullable SpotFleetRequestConfigDataInstanceInterruptionBehavior instanceInterruptionBehavior;
    private final @Nullable Integer instancePoolsToUseCount;
    private final @Nullable List<SpotFleetLaunchSpecification> launchSpecifications;
    private final @Nullable List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs;
    private final @Nullable SpotFleetLoadBalancersConfig loadBalancersConfig;
    private final @Nullable String onDemandAllocationStrategy;
    private final @Nullable String onDemandMaxTotalPrice;
    private final @Nullable Integer onDemandTargetCapacity;
    private final @Nullable Boolean replaceUnhealthyInstances;
    private final @Nullable SpotFleetSpotMaintenanceStrategies spotMaintenanceStrategies;
    private final @Nullable String spotMaxTotalPrice;
    private final @Nullable String spotPrice;
    private final Integer targetCapacity;
    private final @Nullable SpotFleetRequestConfigDataTargetCapacityUnitType targetCapacityUnitType;
    private final @Nullable Boolean terminateInstancesWithExpiration;
    private final @Nullable SpotFleetRequestConfigDataType type;
    private final @Nullable String validFrom;
    private final @Nullable String validUntil;

    @CustomType.Constructor
    private SpotFleetRequestConfigData(
        @CustomType.Parameter("allocationStrategy") @Nullable SpotFleetRequestConfigDataAllocationStrategy allocationStrategy,
        @CustomType.Parameter("context") @Nullable String context,
        @CustomType.Parameter("excessCapacityTerminationPolicy") @Nullable SpotFleetRequestConfigDataExcessCapacityTerminationPolicy excessCapacityTerminationPolicy,
        @CustomType.Parameter("iamFleetRole") String iamFleetRole,
        @CustomType.Parameter("instanceInterruptionBehavior") @Nullable SpotFleetRequestConfigDataInstanceInterruptionBehavior instanceInterruptionBehavior,
        @CustomType.Parameter("instancePoolsToUseCount") @Nullable Integer instancePoolsToUseCount,
        @CustomType.Parameter("launchSpecifications") @Nullable List<SpotFleetLaunchSpecification> launchSpecifications,
        @CustomType.Parameter("launchTemplateConfigs") @Nullable List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs,
        @CustomType.Parameter("loadBalancersConfig") @Nullable SpotFleetLoadBalancersConfig loadBalancersConfig,
        @CustomType.Parameter("onDemandAllocationStrategy") @Nullable String onDemandAllocationStrategy,
        @CustomType.Parameter("onDemandMaxTotalPrice") @Nullable String onDemandMaxTotalPrice,
        @CustomType.Parameter("onDemandTargetCapacity") @Nullable Integer onDemandTargetCapacity,
        @CustomType.Parameter("replaceUnhealthyInstances") @Nullable Boolean replaceUnhealthyInstances,
        @CustomType.Parameter("spotMaintenanceStrategies") @Nullable SpotFleetSpotMaintenanceStrategies spotMaintenanceStrategies,
        @CustomType.Parameter("spotMaxTotalPrice") @Nullable String spotMaxTotalPrice,
        @CustomType.Parameter("spotPrice") @Nullable String spotPrice,
        @CustomType.Parameter("targetCapacity") Integer targetCapacity,
        @CustomType.Parameter("targetCapacityUnitType") @Nullable SpotFleetRequestConfigDataTargetCapacityUnitType targetCapacityUnitType,
        @CustomType.Parameter("terminateInstancesWithExpiration") @Nullable Boolean terminateInstancesWithExpiration,
        @CustomType.Parameter("type") @Nullable SpotFleetRequestConfigDataType type,
        @CustomType.Parameter("validFrom") @Nullable String validFrom,
        @CustomType.Parameter("validUntil") @Nullable String validUntil) {
        this.allocationStrategy = allocationStrategy;
        this.context = context;
        this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
        this.iamFleetRole = iamFleetRole;
        this.instanceInterruptionBehavior = instanceInterruptionBehavior;
        this.instancePoolsToUseCount = instancePoolsToUseCount;
        this.launchSpecifications = launchSpecifications;
        this.launchTemplateConfigs = launchTemplateConfigs;
        this.loadBalancersConfig = loadBalancersConfig;
        this.onDemandAllocationStrategy = onDemandAllocationStrategy;
        this.onDemandMaxTotalPrice = onDemandMaxTotalPrice;
        this.onDemandTargetCapacity = onDemandTargetCapacity;
        this.replaceUnhealthyInstances = replaceUnhealthyInstances;
        this.spotMaintenanceStrategies = spotMaintenanceStrategies;
        this.spotMaxTotalPrice = spotMaxTotalPrice;
        this.spotPrice = spotPrice;
        this.targetCapacity = targetCapacity;
        this.targetCapacityUnitType = targetCapacityUnitType;
        this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
        this.type = type;
        this.validFrom = validFrom;
        this.validUntil = validUntil;
    }

    public Optional<SpotFleetRequestConfigDataAllocationStrategy> allocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }
    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }
    public Optional<SpotFleetRequestConfigDataExcessCapacityTerminationPolicy> excessCapacityTerminationPolicy() {
        return Optional.ofNullable(this.excessCapacityTerminationPolicy);
    }
    public String iamFleetRole() {
        return this.iamFleetRole;
    }
    public Optional<SpotFleetRequestConfigDataInstanceInterruptionBehavior> instanceInterruptionBehavior() {
        return Optional.ofNullable(this.instanceInterruptionBehavior);
    }
    public Optional<Integer> instancePoolsToUseCount() {
        return Optional.ofNullable(this.instancePoolsToUseCount);
    }
    public List<SpotFleetLaunchSpecification> launchSpecifications() {
        return this.launchSpecifications == null ? List.of() : this.launchSpecifications;
    }
    public List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs() {
        return this.launchTemplateConfigs == null ? List.of() : this.launchTemplateConfigs;
    }
    public Optional<SpotFleetLoadBalancersConfig> loadBalancersConfig() {
        return Optional.ofNullable(this.loadBalancersConfig);
    }
    public Optional<String> onDemandAllocationStrategy() {
        return Optional.ofNullable(this.onDemandAllocationStrategy);
    }
    public Optional<String> onDemandMaxTotalPrice() {
        return Optional.ofNullable(this.onDemandMaxTotalPrice);
    }
    public Optional<Integer> onDemandTargetCapacity() {
        return Optional.ofNullable(this.onDemandTargetCapacity);
    }
    public Optional<Boolean> replaceUnhealthyInstances() {
        return Optional.ofNullable(this.replaceUnhealthyInstances);
    }
    public Optional<SpotFleetSpotMaintenanceStrategies> spotMaintenanceStrategies() {
        return Optional.ofNullable(this.spotMaintenanceStrategies);
    }
    public Optional<String> spotMaxTotalPrice() {
        return Optional.ofNullable(this.spotMaxTotalPrice);
    }
    public Optional<String> spotPrice() {
        return Optional.ofNullable(this.spotPrice);
    }
    public Integer targetCapacity() {
        return this.targetCapacity;
    }
    public Optional<SpotFleetRequestConfigDataTargetCapacityUnitType> targetCapacityUnitType() {
        return Optional.ofNullable(this.targetCapacityUnitType);
    }
    public Optional<Boolean> terminateInstancesWithExpiration() {
        return Optional.ofNullable(this.terminateInstancesWithExpiration);
    }
    public Optional<SpotFleetRequestConfigDataType> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<String> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }
    public Optional<String> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpotFleetRequestConfigData defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable SpotFleetRequestConfigDataAllocationStrategy allocationStrategy;
        private @Nullable String context;
        private @Nullable SpotFleetRequestConfigDataExcessCapacityTerminationPolicy excessCapacityTerminationPolicy;
        private String iamFleetRole;
        private @Nullable SpotFleetRequestConfigDataInstanceInterruptionBehavior instanceInterruptionBehavior;
        private @Nullable Integer instancePoolsToUseCount;
        private @Nullable List<SpotFleetLaunchSpecification> launchSpecifications;
        private @Nullable List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs;
        private @Nullable SpotFleetLoadBalancersConfig loadBalancersConfig;
        private @Nullable String onDemandAllocationStrategy;
        private @Nullable String onDemandMaxTotalPrice;
        private @Nullable Integer onDemandTargetCapacity;
        private @Nullable Boolean replaceUnhealthyInstances;
        private @Nullable SpotFleetSpotMaintenanceStrategies spotMaintenanceStrategies;
        private @Nullable String spotMaxTotalPrice;
        private @Nullable String spotPrice;
        private Integer targetCapacity;
        private @Nullable SpotFleetRequestConfigDataTargetCapacityUnitType targetCapacityUnitType;
        private @Nullable Boolean terminateInstancesWithExpiration;
        private @Nullable SpotFleetRequestConfigDataType type;
        private @Nullable String validFrom;
        private @Nullable String validUntil;

        public Builder() {
    	      // Empty
        }

        public Builder(SpotFleetRequestConfigData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStrategy = defaults.allocationStrategy;
    	      this.context = defaults.context;
    	      this.excessCapacityTerminationPolicy = defaults.excessCapacityTerminationPolicy;
    	      this.iamFleetRole = defaults.iamFleetRole;
    	      this.instanceInterruptionBehavior = defaults.instanceInterruptionBehavior;
    	      this.instancePoolsToUseCount = defaults.instancePoolsToUseCount;
    	      this.launchSpecifications = defaults.launchSpecifications;
    	      this.launchTemplateConfigs = defaults.launchTemplateConfigs;
    	      this.loadBalancersConfig = defaults.loadBalancersConfig;
    	      this.onDemandAllocationStrategy = defaults.onDemandAllocationStrategy;
    	      this.onDemandMaxTotalPrice = defaults.onDemandMaxTotalPrice;
    	      this.onDemandTargetCapacity = defaults.onDemandTargetCapacity;
    	      this.replaceUnhealthyInstances = defaults.replaceUnhealthyInstances;
    	      this.spotMaintenanceStrategies = defaults.spotMaintenanceStrategies;
    	      this.spotMaxTotalPrice = defaults.spotMaxTotalPrice;
    	      this.spotPrice = defaults.spotPrice;
    	      this.targetCapacity = defaults.targetCapacity;
    	      this.targetCapacityUnitType = defaults.targetCapacityUnitType;
    	      this.terminateInstancesWithExpiration = defaults.terminateInstancesWithExpiration;
    	      this.type = defaults.type;
    	      this.validFrom = defaults.validFrom;
    	      this.validUntil = defaults.validUntil;
        }

        public Builder allocationStrategy(@Nullable SpotFleetRequestConfigDataAllocationStrategy allocationStrategy) {
            this.allocationStrategy = allocationStrategy;
            return this;
        }
        public Builder context(@Nullable String context) {
            this.context = context;
            return this;
        }
        public Builder excessCapacityTerminationPolicy(@Nullable SpotFleetRequestConfigDataExcessCapacityTerminationPolicy excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }
        public Builder iamFleetRole(String iamFleetRole) {
            this.iamFleetRole = Objects.requireNonNull(iamFleetRole);
            return this;
        }
        public Builder instanceInterruptionBehavior(@Nullable SpotFleetRequestConfigDataInstanceInterruptionBehavior instanceInterruptionBehavior) {
            this.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }
        public Builder instancePoolsToUseCount(@Nullable Integer instancePoolsToUseCount) {
            this.instancePoolsToUseCount = instancePoolsToUseCount;
            return this;
        }
        public Builder launchSpecifications(@Nullable List<SpotFleetLaunchSpecification> launchSpecifications) {
            this.launchSpecifications = launchSpecifications;
            return this;
        }
        public Builder launchSpecifications(SpotFleetLaunchSpecification... launchSpecifications) {
            return launchSpecifications(List.of(launchSpecifications));
        }
        public Builder launchTemplateConfigs(@Nullable List<SpotFleetLaunchTemplateConfig> launchTemplateConfigs) {
            this.launchTemplateConfigs = launchTemplateConfigs;
            return this;
        }
        public Builder launchTemplateConfigs(SpotFleetLaunchTemplateConfig... launchTemplateConfigs) {
            return launchTemplateConfigs(List.of(launchTemplateConfigs));
        }
        public Builder loadBalancersConfig(@Nullable SpotFleetLoadBalancersConfig loadBalancersConfig) {
            this.loadBalancersConfig = loadBalancersConfig;
            return this;
        }
        public Builder onDemandAllocationStrategy(@Nullable String onDemandAllocationStrategy) {
            this.onDemandAllocationStrategy = onDemandAllocationStrategy;
            return this;
        }
        public Builder onDemandMaxTotalPrice(@Nullable String onDemandMaxTotalPrice) {
            this.onDemandMaxTotalPrice = onDemandMaxTotalPrice;
            return this;
        }
        public Builder onDemandTargetCapacity(@Nullable Integer onDemandTargetCapacity) {
            this.onDemandTargetCapacity = onDemandTargetCapacity;
            return this;
        }
        public Builder replaceUnhealthyInstances(@Nullable Boolean replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = replaceUnhealthyInstances;
            return this;
        }
        public Builder spotMaintenanceStrategies(@Nullable SpotFleetSpotMaintenanceStrategies spotMaintenanceStrategies) {
            this.spotMaintenanceStrategies = spotMaintenanceStrategies;
            return this;
        }
        public Builder spotMaxTotalPrice(@Nullable String spotMaxTotalPrice) {
            this.spotMaxTotalPrice = spotMaxTotalPrice;
            return this;
        }
        public Builder spotPrice(@Nullable String spotPrice) {
            this.spotPrice = spotPrice;
            return this;
        }
        public Builder targetCapacity(Integer targetCapacity) {
            this.targetCapacity = Objects.requireNonNull(targetCapacity);
            return this;
        }
        public Builder targetCapacityUnitType(@Nullable SpotFleetRequestConfigDataTargetCapacityUnitType targetCapacityUnitType) {
            this.targetCapacityUnitType = targetCapacityUnitType;
            return this;
        }
        public Builder terminateInstancesWithExpiration(@Nullable Boolean terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }
        public Builder type(@Nullable SpotFleetRequestConfigDataType type) {
            this.type = type;
            return this;
        }
        public Builder validFrom(@Nullable String validFrom) {
            this.validFrom = validFrom;
            return this;
        }
        public Builder validUntil(@Nullable String validUntil) {
            this.validUntil = validUntil;
            return this;
        }        public SpotFleetRequestConfigData build() {
            return new SpotFleetRequestConfigData(allocationStrategy, context, excessCapacityTerminationPolicy, iamFleetRole, instanceInterruptionBehavior, instancePoolsToUseCount, launchSpecifications, launchTemplateConfigs, loadBalancersConfig, onDemandAllocationStrategy, onDemandMaxTotalPrice, onDemandTargetCapacity, replaceUnhealthyInstances, spotMaintenanceStrategies, spotMaxTotalPrice, spotPrice, targetCapacity, targetCapacityUnitType, terminateInstancesWithExpiration, type, validFrom, validUntil);
        }
    }
}
