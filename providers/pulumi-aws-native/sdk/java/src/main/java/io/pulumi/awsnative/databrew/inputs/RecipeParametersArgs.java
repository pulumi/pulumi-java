// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew.inputs;

import io.pulumi.awsnative.databrew.inputs.RecipeParametersInputPropertiesArgs;
import io.pulumi.awsnative.databrew.inputs.RecipeSecondaryInputArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RecipeParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final RecipeParametersArgs Empty = new RecipeParametersArgs();

    @Import(name="aggregateFunction")
      private final @Nullable Output<String> aggregateFunction;

    public Output<String> getAggregateFunction() {
        return this.aggregateFunction == null ? Codegen.empty() : this.aggregateFunction;
    }

    @Import(name="base")
      private final @Nullable Output<String> base;

    public Output<String> getBase() {
        return this.base == null ? Codegen.empty() : this.base;
    }

    @Import(name="caseStatement")
      private final @Nullable Output<String> caseStatement;

    public Output<String> getCaseStatement() {
        return this.caseStatement == null ? Codegen.empty() : this.caseStatement;
    }

    @Import(name="categoryMap")
      private final @Nullable Output<String> categoryMap;

    public Output<String> getCategoryMap() {
        return this.categoryMap == null ? Codegen.empty() : this.categoryMap;
    }

    @Import(name="charsToRemove")
      private final @Nullable Output<String> charsToRemove;

    public Output<String> getCharsToRemove() {
        return this.charsToRemove == null ? Codegen.empty() : this.charsToRemove;
    }

    @Import(name="collapseConsecutiveWhitespace")
      private final @Nullable Output<String> collapseConsecutiveWhitespace;

    public Output<String> getCollapseConsecutiveWhitespace() {
        return this.collapseConsecutiveWhitespace == null ? Codegen.empty() : this.collapseConsecutiveWhitespace;
    }

    @Import(name="columnDataType")
      private final @Nullable Output<String> columnDataType;

    public Output<String> getColumnDataType() {
        return this.columnDataType == null ? Codegen.empty() : this.columnDataType;
    }

    @Import(name="columnRange")
      private final @Nullable Output<String> columnRange;

    public Output<String> getColumnRange() {
        return this.columnRange == null ? Codegen.empty() : this.columnRange;
    }

    @Import(name="count")
      private final @Nullable Output<String> count;

    public Output<String> getCount() {
        return this.count == null ? Codegen.empty() : this.count;
    }

    @Import(name="customCharacters")
      private final @Nullable Output<String> customCharacters;

    public Output<String> getCustomCharacters() {
        return this.customCharacters == null ? Codegen.empty() : this.customCharacters;
    }

    @Import(name="customStopWords")
      private final @Nullable Output<String> customStopWords;

    public Output<String> getCustomStopWords() {
        return this.customStopWords == null ? Codegen.empty() : this.customStopWords;
    }

    @Import(name="customValue")
      private final @Nullable Output<String> customValue;

    public Output<String> getCustomValue() {
        return this.customValue == null ? Codegen.empty() : this.customValue;
    }

    @Import(name="datasetsColumns")
      private final @Nullable Output<String> datasetsColumns;

    public Output<String> getDatasetsColumns() {
        return this.datasetsColumns == null ? Codegen.empty() : this.datasetsColumns;
    }

    @Import(name="dateAddValue")
      private final @Nullable Output<String> dateAddValue;

    public Output<String> getDateAddValue() {
        return this.dateAddValue == null ? Codegen.empty() : this.dateAddValue;
    }

    @Import(name="dateTimeFormat")
      private final @Nullable Output<String> dateTimeFormat;

    public Output<String> getDateTimeFormat() {
        return this.dateTimeFormat == null ? Codegen.empty() : this.dateTimeFormat;
    }

    @Import(name="dateTimeParameters")
      private final @Nullable Output<String> dateTimeParameters;

    public Output<String> getDateTimeParameters() {
        return this.dateTimeParameters == null ? Codegen.empty() : this.dateTimeParameters;
    }

    @Import(name="deleteOtherRows")
      private final @Nullable Output<String> deleteOtherRows;

    public Output<String> getDeleteOtherRows() {
        return this.deleteOtherRows == null ? Codegen.empty() : this.deleteOtherRows;
    }

    @Import(name="delimiter")
      private final @Nullable Output<String> delimiter;

    public Output<String> getDelimiter() {
        return this.delimiter == null ? Codegen.empty() : this.delimiter;
    }

    @Import(name="endPattern")
      private final @Nullable Output<String> endPattern;

    public Output<String> getEndPattern() {
        return this.endPattern == null ? Codegen.empty() : this.endPattern;
    }

    @Import(name="endPosition")
      private final @Nullable Output<String> endPosition;

    public Output<String> getEndPosition() {
        return this.endPosition == null ? Codegen.empty() : this.endPosition;
    }

    @Import(name="endValue")
      private final @Nullable Output<String> endValue;

    public Output<String> getEndValue() {
        return this.endValue == null ? Codegen.empty() : this.endValue;
    }

    @Import(name="expandContractions")
      private final @Nullable Output<String> expandContractions;

    public Output<String> getExpandContractions() {
        return this.expandContractions == null ? Codegen.empty() : this.expandContractions;
    }

    @Import(name="exponent")
      private final @Nullable Output<String> exponent;

    public Output<String> getExponent() {
        return this.exponent == null ? Codegen.empty() : this.exponent;
    }

    @Import(name="falseString")
      private final @Nullable Output<String> falseString;

    public Output<String> getFalseString() {
        return this.falseString == null ? Codegen.empty() : this.falseString;
    }

    @Import(name="groupByAggFunctionOptions")
      private final @Nullable Output<String> groupByAggFunctionOptions;

    public Output<String> getGroupByAggFunctionOptions() {
        return this.groupByAggFunctionOptions == null ? Codegen.empty() : this.groupByAggFunctionOptions;
    }

    @Import(name="groupByColumns")
      private final @Nullable Output<String> groupByColumns;

    public Output<String> getGroupByColumns() {
        return this.groupByColumns == null ? Codegen.empty() : this.groupByColumns;
    }

    @Import(name="hiddenColumns")
      private final @Nullable Output<String> hiddenColumns;

    public Output<String> getHiddenColumns() {
        return this.hiddenColumns == null ? Codegen.empty() : this.hiddenColumns;
    }

    @Import(name="ignoreCase")
      private final @Nullable Output<String> ignoreCase;

    public Output<String> getIgnoreCase() {
        return this.ignoreCase == null ? Codegen.empty() : this.ignoreCase;
    }

    @Import(name="includeInSplit")
      private final @Nullable Output<String> includeInSplit;

    public Output<String> getIncludeInSplit() {
        return this.includeInSplit == null ? Codegen.empty() : this.includeInSplit;
    }

    /**
     * Input
     * 
     */
    @Import(name="input")
      private final @Nullable Output<RecipeParametersInputPropertiesArgs> input;

    public Output<RecipeParametersInputPropertiesArgs> getInput() {
        return this.input == null ? Codegen.empty() : this.input;
    }

    @Import(name="interval")
      private final @Nullable Output<String> interval;

    public Output<String> getInterval() {
        return this.interval == null ? Codegen.empty() : this.interval;
    }

    @Import(name="isText")
      private final @Nullable Output<String> isText;

    public Output<String> getIsText() {
        return this.isText == null ? Codegen.empty() : this.isText;
    }

    @Import(name="joinKeys")
      private final @Nullable Output<String> joinKeys;

    public Output<String> getJoinKeys() {
        return this.joinKeys == null ? Codegen.empty() : this.joinKeys;
    }

    @Import(name="joinType")
      private final @Nullable Output<String> joinType;

    public Output<String> getJoinType() {
        return this.joinType == null ? Codegen.empty() : this.joinType;
    }

    @Import(name="leftColumns")
      private final @Nullable Output<String> leftColumns;

    public Output<String> getLeftColumns() {
        return this.leftColumns == null ? Codegen.empty() : this.leftColumns;
    }

    @Import(name="limit")
      private final @Nullable Output<String> limit;

    public Output<String> getLimit() {
        return this.limit == null ? Codegen.empty() : this.limit;
    }

    @Import(name="lowerBound")
      private final @Nullable Output<String> lowerBound;

    public Output<String> getLowerBound() {
        return this.lowerBound == null ? Codegen.empty() : this.lowerBound;
    }

    @Import(name="mapType")
      private final @Nullable Output<String> mapType;

    public Output<String> getMapType() {
        return this.mapType == null ? Codegen.empty() : this.mapType;
    }

    @Import(name="modeType")
      private final @Nullable Output<String> modeType;

    public Output<String> getModeType() {
        return this.modeType == null ? Codegen.empty() : this.modeType;
    }

    @Import(name="multiLine")
      private final @Nullable Output<Boolean> multiLine;

    public Output<Boolean> getMultiLine() {
        return this.multiLine == null ? Codegen.empty() : this.multiLine;
    }

    @Import(name="numRows")
      private final @Nullable Output<String> numRows;

    public Output<String> getNumRows() {
        return this.numRows == null ? Codegen.empty() : this.numRows;
    }

    @Import(name="numRowsAfter")
      private final @Nullable Output<String> numRowsAfter;

    public Output<String> getNumRowsAfter() {
        return this.numRowsAfter == null ? Codegen.empty() : this.numRowsAfter;
    }

    @Import(name="numRowsBefore")
      private final @Nullable Output<String> numRowsBefore;

    public Output<String> getNumRowsBefore() {
        return this.numRowsBefore == null ? Codegen.empty() : this.numRowsBefore;
    }

    @Import(name="orderByColumn")
      private final @Nullable Output<String> orderByColumn;

    public Output<String> getOrderByColumn() {
        return this.orderByColumn == null ? Codegen.empty() : this.orderByColumn;
    }

    @Import(name="orderByColumns")
      private final @Nullable Output<String> orderByColumns;

    public Output<String> getOrderByColumns() {
        return this.orderByColumns == null ? Codegen.empty() : this.orderByColumns;
    }

    @Import(name="other")
      private final @Nullable Output<String> other;

    public Output<String> getOther() {
        return this.other == null ? Codegen.empty() : this.other;
    }

    @Import(name="pattern")
      private final @Nullable Output<String> pattern;

    public Output<String> getPattern() {
        return this.pattern == null ? Codegen.empty() : this.pattern;
    }

    @Import(name="patternOption1")
      private final @Nullable Output<String> patternOption1;

    public Output<String> getPatternOption1() {
        return this.patternOption1 == null ? Codegen.empty() : this.patternOption1;
    }

    @Import(name="patternOption2")
      private final @Nullable Output<String> patternOption2;

    public Output<String> getPatternOption2() {
        return this.patternOption2 == null ? Codegen.empty() : this.patternOption2;
    }

    @Import(name="patternOptions")
      private final @Nullable Output<String> patternOptions;

    public Output<String> getPatternOptions() {
        return this.patternOptions == null ? Codegen.empty() : this.patternOptions;
    }

    @Import(name="period")
      private final @Nullable Output<String> period;

    public Output<String> getPeriod() {
        return this.period == null ? Codegen.empty() : this.period;
    }

    @Import(name="position")
      private final @Nullable Output<String> position;

    public Output<String> getPosition() {
        return this.position == null ? Codegen.empty() : this.position;
    }

    @Import(name="removeAllPunctuation")
      private final @Nullable Output<String> removeAllPunctuation;

    public Output<String> getRemoveAllPunctuation() {
        return this.removeAllPunctuation == null ? Codegen.empty() : this.removeAllPunctuation;
    }

    @Import(name="removeAllQuotes")
      private final @Nullable Output<String> removeAllQuotes;

    public Output<String> getRemoveAllQuotes() {
        return this.removeAllQuotes == null ? Codegen.empty() : this.removeAllQuotes;
    }

    @Import(name="removeAllWhitespace")
      private final @Nullable Output<String> removeAllWhitespace;

    public Output<String> getRemoveAllWhitespace() {
        return this.removeAllWhitespace == null ? Codegen.empty() : this.removeAllWhitespace;
    }

    @Import(name="removeCustomCharacters")
      private final @Nullable Output<String> removeCustomCharacters;

    public Output<String> getRemoveCustomCharacters() {
        return this.removeCustomCharacters == null ? Codegen.empty() : this.removeCustomCharacters;
    }

    @Import(name="removeCustomValue")
      private final @Nullable Output<String> removeCustomValue;

    public Output<String> getRemoveCustomValue() {
        return this.removeCustomValue == null ? Codegen.empty() : this.removeCustomValue;
    }

    @Import(name="removeLeadingAndTrailingPunctuation")
      private final @Nullable Output<String> removeLeadingAndTrailingPunctuation;

    public Output<String> getRemoveLeadingAndTrailingPunctuation() {
        return this.removeLeadingAndTrailingPunctuation == null ? Codegen.empty() : this.removeLeadingAndTrailingPunctuation;
    }

    @Import(name="removeLeadingAndTrailingQuotes")
      private final @Nullable Output<String> removeLeadingAndTrailingQuotes;

    public Output<String> getRemoveLeadingAndTrailingQuotes() {
        return this.removeLeadingAndTrailingQuotes == null ? Codegen.empty() : this.removeLeadingAndTrailingQuotes;
    }

    @Import(name="removeLeadingAndTrailingWhitespace")
      private final @Nullable Output<String> removeLeadingAndTrailingWhitespace;

    public Output<String> getRemoveLeadingAndTrailingWhitespace() {
        return this.removeLeadingAndTrailingWhitespace == null ? Codegen.empty() : this.removeLeadingAndTrailingWhitespace;
    }

    @Import(name="removeLetters")
      private final @Nullable Output<String> removeLetters;

    public Output<String> getRemoveLetters() {
        return this.removeLetters == null ? Codegen.empty() : this.removeLetters;
    }

    @Import(name="removeNumbers")
      private final @Nullable Output<String> removeNumbers;

    public Output<String> getRemoveNumbers() {
        return this.removeNumbers == null ? Codegen.empty() : this.removeNumbers;
    }

    @Import(name="removeSourceColumn")
      private final @Nullable Output<String> removeSourceColumn;

    public Output<String> getRemoveSourceColumn() {
        return this.removeSourceColumn == null ? Codegen.empty() : this.removeSourceColumn;
    }

    @Import(name="removeSpecialCharacters")
      private final @Nullable Output<String> removeSpecialCharacters;

    public Output<String> getRemoveSpecialCharacters() {
        return this.removeSpecialCharacters == null ? Codegen.empty() : this.removeSpecialCharacters;
    }

    @Import(name="rightColumns")
      private final @Nullable Output<String> rightColumns;

    public Output<String> getRightColumns() {
        return this.rightColumns == null ? Codegen.empty() : this.rightColumns;
    }

    @Import(name="sampleSize")
      private final @Nullable Output<String> sampleSize;

    public Output<String> getSampleSize() {
        return this.sampleSize == null ? Codegen.empty() : this.sampleSize;
    }

    @Import(name="sampleType")
      private final @Nullable Output<String> sampleType;

    public Output<String> getSampleType() {
        return this.sampleType == null ? Codegen.empty() : this.sampleType;
    }

    @Import(name="secondInput")
      private final @Nullable Output<String> secondInput;

    public Output<String> getSecondInput() {
        return this.secondInput == null ? Codegen.empty() : this.secondInput;
    }

    @Import(name="secondaryInputs")
      private final @Nullable Output<List<RecipeSecondaryInputArgs>> secondaryInputs;

    public Output<List<RecipeSecondaryInputArgs>> getSecondaryInputs() {
        return this.secondaryInputs == null ? Codegen.empty() : this.secondaryInputs;
    }

    @Import(name="sheetIndexes")
      private final @Nullable Output<List<Integer>> sheetIndexes;

    public Output<List<Integer>> getSheetIndexes() {
        return this.sheetIndexes == null ? Codegen.empty() : this.sheetIndexes;
    }

    @Import(name="sheetNames")
      private final @Nullable Output<List<String>> sheetNames;

    public Output<List<String>> getSheetNames() {
        return this.sheetNames == null ? Codegen.empty() : this.sheetNames;
    }

    @Import(name="sourceColumn")
      private final @Nullable Output<String> sourceColumn;

    public Output<String> getSourceColumn() {
        return this.sourceColumn == null ? Codegen.empty() : this.sourceColumn;
    }

    @Import(name="sourceColumn1")
      private final @Nullable Output<String> sourceColumn1;

    public Output<String> getSourceColumn1() {
        return this.sourceColumn1 == null ? Codegen.empty() : this.sourceColumn1;
    }

    @Import(name="sourceColumn2")
      private final @Nullable Output<String> sourceColumn2;

    public Output<String> getSourceColumn2() {
        return this.sourceColumn2 == null ? Codegen.empty() : this.sourceColumn2;
    }

    @Import(name="sourceColumns")
      private final @Nullable Output<String> sourceColumns;

    public Output<String> getSourceColumns() {
        return this.sourceColumns == null ? Codegen.empty() : this.sourceColumns;
    }

    @Import(name="startColumnIndex")
      private final @Nullable Output<String> startColumnIndex;

    public Output<String> getStartColumnIndex() {
        return this.startColumnIndex == null ? Codegen.empty() : this.startColumnIndex;
    }

    @Import(name="startPattern")
      private final @Nullable Output<String> startPattern;

    public Output<String> getStartPattern() {
        return this.startPattern == null ? Codegen.empty() : this.startPattern;
    }

    @Import(name="startPosition")
      private final @Nullable Output<String> startPosition;

    public Output<String> getStartPosition() {
        return this.startPosition == null ? Codegen.empty() : this.startPosition;
    }

    @Import(name="startValue")
      private final @Nullable Output<String> startValue;

    public Output<String> getStartValue() {
        return this.startValue == null ? Codegen.empty() : this.startValue;
    }

    @Import(name="stemmingMode")
      private final @Nullable Output<String> stemmingMode;

    public Output<String> getStemmingMode() {
        return this.stemmingMode == null ? Codegen.empty() : this.stemmingMode;
    }

    @Import(name="stepCount")
      private final @Nullable Output<String> stepCount;

    public Output<String> getStepCount() {
        return this.stepCount == null ? Codegen.empty() : this.stepCount;
    }

    @Import(name="stepIndex")
      private final @Nullable Output<String> stepIndex;

    public Output<String> getStepIndex() {
        return this.stepIndex == null ? Codegen.empty() : this.stepIndex;
    }

    @Import(name="stopWordsMode")
      private final @Nullable Output<String> stopWordsMode;

    public Output<String> getStopWordsMode() {
        return this.stopWordsMode == null ? Codegen.empty() : this.stopWordsMode;
    }

    @Import(name="strategy")
      private final @Nullable Output<String> strategy;

    public Output<String> getStrategy() {
        return this.strategy == null ? Codegen.empty() : this.strategy;
    }

    @Import(name="targetColumn")
      private final @Nullable Output<String> targetColumn;

    public Output<String> getTargetColumn() {
        return this.targetColumn == null ? Codegen.empty() : this.targetColumn;
    }

    @Import(name="targetColumnNames")
      private final @Nullable Output<String> targetColumnNames;

    public Output<String> getTargetColumnNames() {
        return this.targetColumnNames == null ? Codegen.empty() : this.targetColumnNames;
    }

    @Import(name="targetDateFormat")
      private final @Nullable Output<String> targetDateFormat;

    public Output<String> getTargetDateFormat() {
        return this.targetDateFormat == null ? Codegen.empty() : this.targetDateFormat;
    }

    @Import(name="targetIndex")
      private final @Nullable Output<String> targetIndex;

    public Output<String> getTargetIndex() {
        return this.targetIndex == null ? Codegen.empty() : this.targetIndex;
    }

    @Import(name="timeZone")
      private final @Nullable Output<String> timeZone;

    public Output<String> getTimeZone() {
        return this.timeZone == null ? Codegen.empty() : this.timeZone;
    }

    @Import(name="tokenizerPattern")
      private final @Nullable Output<String> tokenizerPattern;

    public Output<String> getTokenizerPattern() {
        return this.tokenizerPattern == null ? Codegen.empty() : this.tokenizerPattern;
    }

    @Import(name="trueString")
      private final @Nullable Output<String> trueString;

    public Output<String> getTrueString() {
        return this.trueString == null ? Codegen.empty() : this.trueString;
    }

    @Import(name="udfLang")
      private final @Nullable Output<String> udfLang;

    public Output<String> getUdfLang() {
        return this.udfLang == null ? Codegen.empty() : this.udfLang;
    }

    @Import(name="units")
      private final @Nullable Output<String> units;

    public Output<String> getUnits() {
        return this.units == null ? Codegen.empty() : this.units;
    }

    @Import(name="unpivotColumn")
      private final @Nullable Output<String> unpivotColumn;

    public Output<String> getUnpivotColumn() {
        return this.unpivotColumn == null ? Codegen.empty() : this.unpivotColumn;
    }

    @Import(name="upperBound")
      private final @Nullable Output<String> upperBound;

    public Output<String> getUpperBound() {
        return this.upperBound == null ? Codegen.empty() : this.upperBound;
    }

    @Import(name="useNewDataFrame")
      private final @Nullable Output<String> useNewDataFrame;

    public Output<String> getUseNewDataFrame() {
        return this.useNewDataFrame == null ? Codegen.empty() : this.useNewDataFrame;
    }

    @Import(name="value")
      private final @Nullable Output<String> value;

    public Output<String> getValue() {
        return this.value == null ? Codegen.empty() : this.value;
    }

    @Import(name="value1")
      private final @Nullable Output<String> value1;

    public Output<String> getValue1() {
        return this.value1 == null ? Codegen.empty() : this.value1;
    }

    @Import(name="value2")
      private final @Nullable Output<String> value2;

    public Output<String> getValue2() {
        return this.value2 == null ? Codegen.empty() : this.value2;
    }

    @Import(name="valueColumn")
      private final @Nullable Output<String> valueColumn;

    public Output<String> getValueColumn() {
        return this.valueColumn == null ? Codegen.empty() : this.valueColumn;
    }

    @Import(name="viewFrame")
      private final @Nullable Output<String> viewFrame;

    public Output<String> getViewFrame() {
        return this.viewFrame == null ? Codegen.empty() : this.viewFrame;
    }

    public RecipeParametersArgs(
        @Nullable Output<String> aggregateFunction,
        @Nullable Output<String> base,
        @Nullable Output<String> caseStatement,
        @Nullable Output<String> categoryMap,
        @Nullable Output<String> charsToRemove,
        @Nullable Output<String> collapseConsecutiveWhitespace,
        @Nullable Output<String> columnDataType,
        @Nullable Output<String> columnRange,
        @Nullable Output<String> count,
        @Nullable Output<String> customCharacters,
        @Nullable Output<String> customStopWords,
        @Nullable Output<String> customValue,
        @Nullable Output<String> datasetsColumns,
        @Nullable Output<String> dateAddValue,
        @Nullable Output<String> dateTimeFormat,
        @Nullable Output<String> dateTimeParameters,
        @Nullable Output<String> deleteOtherRows,
        @Nullable Output<String> delimiter,
        @Nullable Output<String> endPattern,
        @Nullable Output<String> endPosition,
        @Nullable Output<String> endValue,
        @Nullable Output<String> expandContractions,
        @Nullable Output<String> exponent,
        @Nullable Output<String> falseString,
        @Nullable Output<String> groupByAggFunctionOptions,
        @Nullable Output<String> groupByColumns,
        @Nullable Output<String> hiddenColumns,
        @Nullable Output<String> ignoreCase,
        @Nullable Output<String> includeInSplit,
        @Nullable Output<RecipeParametersInputPropertiesArgs> input,
        @Nullable Output<String> interval,
        @Nullable Output<String> isText,
        @Nullable Output<String> joinKeys,
        @Nullable Output<String> joinType,
        @Nullable Output<String> leftColumns,
        @Nullable Output<String> limit,
        @Nullable Output<String> lowerBound,
        @Nullable Output<String> mapType,
        @Nullable Output<String> modeType,
        @Nullable Output<Boolean> multiLine,
        @Nullable Output<String> numRows,
        @Nullable Output<String> numRowsAfter,
        @Nullable Output<String> numRowsBefore,
        @Nullable Output<String> orderByColumn,
        @Nullable Output<String> orderByColumns,
        @Nullable Output<String> other,
        @Nullable Output<String> pattern,
        @Nullable Output<String> patternOption1,
        @Nullable Output<String> patternOption2,
        @Nullable Output<String> patternOptions,
        @Nullable Output<String> period,
        @Nullable Output<String> position,
        @Nullable Output<String> removeAllPunctuation,
        @Nullable Output<String> removeAllQuotes,
        @Nullable Output<String> removeAllWhitespace,
        @Nullable Output<String> removeCustomCharacters,
        @Nullable Output<String> removeCustomValue,
        @Nullable Output<String> removeLeadingAndTrailingPunctuation,
        @Nullable Output<String> removeLeadingAndTrailingQuotes,
        @Nullable Output<String> removeLeadingAndTrailingWhitespace,
        @Nullable Output<String> removeLetters,
        @Nullable Output<String> removeNumbers,
        @Nullable Output<String> removeSourceColumn,
        @Nullable Output<String> removeSpecialCharacters,
        @Nullable Output<String> rightColumns,
        @Nullable Output<String> sampleSize,
        @Nullable Output<String> sampleType,
        @Nullable Output<String> secondInput,
        @Nullable Output<List<RecipeSecondaryInputArgs>> secondaryInputs,
        @Nullable Output<List<Integer>> sheetIndexes,
        @Nullable Output<List<String>> sheetNames,
        @Nullable Output<String> sourceColumn,
        @Nullable Output<String> sourceColumn1,
        @Nullable Output<String> sourceColumn2,
        @Nullable Output<String> sourceColumns,
        @Nullable Output<String> startColumnIndex,
        @Nullable Output<String> startPattern,
        @Nullable Output<String> startPosition,
        @Nullable Output<String> startValue,
        @Nullable Output<String> stemmingMode,
        @Nullable Output<String> stepCount,
        @Nullable Output<String> stepIndex,
        @Nullable Output<String> stopWordsMode,
        @Nullable Output<String> strategy,
        @Nullable Output<String> targetColumn,
        @Nullable Output<String> targetColumnNames,
        @Nullable Output<String> targetDateFormat,
        @Nullable Output<String> targetIndex,
        @Nullable Output<String> timeZone,
        @Nullable Output<String> tokenizerPattern,
        @Nullable Output<String> trueString,
        @Nullable Output<String> udfLang,
        @Nullable Output<String> units,
        @Nullable Output<String> unpivotColumn,
        @Nullable Output<String> upperBound,
        @Nullable Output<String> useNewDataFrame,
        @Nullable Output<String> value,
        @Nullable Output<String> value1,
        @Nullable Output<String> value2,
        @Nullable Output<String> valueColumn,
        @Nullable Output<String> viewFrame) {
        this.aggregateFunction = aggregateFunction;
        this.base = base;
        this.caseStatement = caseStatement;
        this.categoryMap = categoryMap;
        this.charsToRemove = charsToRemove;
        this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
        this.columnDataType = columnDataType;
        this.columnRange = columnRange;
        this.count = count;
        this.customCharacters = customCharacters;
        this.customStopWords = customStopWords;
        this.customValue = customValue;
        this.datasetsColumns = datasetsColumns;
        this.dateAddValue = dateAddValue;
        this.dateTimeFormat = dateTimeFormat;
        this.dateTimeParameters = dateTimeParameters;
        this.deleteOtherRows = deleteOtherRows;
        this.delimiter = delimiter;
        this.endPattern = endPattern;
        this.endPosition = endPosition;
        this.endValue = endValue;
        this.expandContractions = expandContractions;
        this.exponent = exponent;
        this.falseString = falseString;
        this.groupByAggFunctionOptions = groupByAggFunctionOptions;
        this.groupByColumns = groupByColumns;
        this.hiddenColumns = hiddenColumns;
        this.ignoreCase = ignoreCase;
        this.includeInSplit = includeInSplit;
        this.input = input;
        this.interval = interval;
        this.isText = isText;
        this.joinKeys = joinKeys;
        this.joinType = joinType;
        this.leftColumns = leftColumns;
        this.limit = limit;
        this.lowerBound = lowerBound;
        this.mapType = mapType;
        this.modeType = modeType;
        this.multiLine = multiLine;
        this.numRows = numRows;
        this.numRowsAfter = numRowsAfter;
        this.numRowsBefore = numRowsBefore;
        this.orderByColumn = orderByColumn;
        this.orderByColumns = orderByColumns;
        this.other = other;
        this.pattern = pattern;
        this.patternOption1 = patternOption1;
        this.patternOption2 = patternOption2;
        this.patternOptions = patternOptions;
        this.period = period;
        this.position = position;
        this.removeAllPunctuation = removeAllPunctuation;
        this.removeAllQuotes = removeAllQuotes;
        this.removeAllWhitespace = removeAllWhitespace;
        this.removeCustomCharacters = removeCustomCharacters;
        this.removeCustomValue = removeCustomValue;
        this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
        this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
        this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
        this.removeLetters = removeLetters;
        this.removeNumbers = removeNumbers;
        this.removeSourceColumn = removeSourceColumn;
        this.removeSpecialCharacters = removeSpecialCharacters;
        this.rightColumns = rightColumns;
        this.sampleSize = sampleSize;
        this.sampleType = sampleType;
        this.secondInput = secondInput;
        this.secondaryInputs = secondaryInputs;
        this.sheetIndexes = sheetIndexes;
        this.sheetNames = sheetNames;
        this.sourceColumn = sourceColumn;
        this.sourceColumn1 = sourceColumn1;
        this.sourceColumn2 = sourceColumn2;
        this.sourceColumns = sourceColumns;
        this.startColumnIndex = startColumnIndex;
        this.startPattern = startPattern;
        this.startPosition = startPosition;
        this.startValue = startValue;
        this.stemmingMode = stemmingMode;
        this.stepCount = stepCount;
        this.stepIndex = stepIndex;
        this.stopWordsMode = stopWordsMode;
        this.strategy = strategy;
        this.targetColumn = targetColumn;
        this.targetColumnNames = targetColumnNames;
        this.targetDateFormat = targetDateFormat;
        this.targetIndex = targetIndex;
        this.timeZone = timeZone;
        this.tokenizerPattern = tokenizerPattern;
        this.trueString = trueString;
        this.udfLang = udfLang;
        this.units = units;
        this.unpivotColumn = unpivotColumn;
        this.upperBound = upperBound;
        this.useNewDataFrame = useNewDataFrame;
        this.value = value;
        this.value1 = value1;
        this.value2 = value2;
        this.valueColumn = valueColumn;
        this.viewFrame = viewFrame;
    }

    private RecipeParametersArgs() {
        this.aggregateFunction = Codegen.empty();
        this.base = Codegen.empty();
        this.caseStatement = Codegen.empty();
        this.categoryMap = Codegen.empty();
        this.charsToRemove = Codegen.empty();
        this.collapseConsecutiveWhitespace = Codegen.empty();
        this.columnDataType = Codegen.empty();
        this.columnRange = Codegen.empty();
        this.count = Codegen.empty();
        this.customCharacters = Codegen.empty();
        this.customStopWords = Codegen.empty();
        this.customValue = Codegen.empty();
        this.datasetsColumns = Codegen.empty();
        this.dateAddValue = Codegen.empty();
        this.dateTimeFormat = Codegen.empty();
        this.dateTimeParameters = Codegen.empty();
        this.deleteOtherRows = Codegen.empty();
        this.delimiter = Codegen.empty();
        this.endPattern = Codegen.empty();
        this.endPosition = Codegen.empty();
        this.endValue = Codegen.empty();
        this.expandContractions = Codegen.empty();
        this.exponent = Codegen.empty();
        this.falseString = Codegen.empty();
        this.groupByAggFunctionOptions = Codegen.empty();
        this.groupByColumns = Codegen.empty();
        this.hiddenColumns = Codegen.empty();
        this.ignoreCase = Codegen.empty();
        this.includeInSplit = Codegen.empty();
        this.input = Codegen.empty();
        this.interval = Codegen.empty();
        this.isText = Codegen.empty();
        this.joinKeys = Codegen.empty();
        this.joinType = Codegen.empty();
        this.leftColumns = Codegen.empty();
        this.limit = Codegen.empty();
        this.lowerBound = Codegen.empty();
        this.mapType = Codegen.empty();
        this.modeType = Codegen.empty();
        this.multiLine = Codegen.empty();
        this.numRows = Codegen.empty();
        this.numRowsAfter = Codegen.empty();
        this.numRowsBefore = Codegen.empty();
        this.orderByColumn = Codegen.empty();
        this.orderByColumns = Codegen.empty();
        this.other = Codegen.empty();
        this.pattern = Codegen.empty();
        this.patternOption1 = Codegen.empty();
        this.patternOption2 = Codegen.empty();
        this.patternOptions = Codegen.empty();
        this.period = Codegen.empty();
        this.position = Codegen.empty();
        this.removeAllPunctuation = Codegen.empty();
        this.removeAllQuotes = Codegen.empty();
        this.removeAllWhitespace = Codegen.empty();
        this.removeCustomCharacters = Codegen.empty();
        this.removeCustomValue = Codegen.empty();
        this.removeLeadingAndTrailingPunctuation = Codegen.empty();
        this.removeLeadingAndTrailingQuotes = Codegen.empty();
        this.removeLeadingAndTrailingWhitespace = Codegen.empty();
        this.removeLetters = Codegen.empty();
        this.removeNumbers = Codegen.empty();
        this.removeSourceColumn = Codegen.empty();
        this.removeSpecialCharacters = Codegen.empty();
        this.rightColumns = Codegen.empty();
        this.sampleSize = Codegen.empty();
        this.sampleType = Codegen.empty();
        this.secondInput = Codegen.empty();
        this.secondaryInputs = Codegen.empty();
        this.sheetIndexes = Codegen.empty();
        this.sheetNames = Codegen.empty();
        this.sourceColumn = Codegen.empty();
        this.sourceColumn1 = Codegen.empty();
        this.sourceColumn2 = Codegen.empty();
        this.sourceColumns = Codegen.empty();
        this.startColumnIndex = Codegen.empty();
        this.startPattern = Codegen.empty();
        this.startPosition = Codegen.empty();
        this.startValue = Codegen.empty();
        this.stemmingMode = Codegen.empty();
        this.stepCount = Codegen.empty();
        this.stepIndex = Codegen.empty();
        this.stopWordsMode = Codegen.empty();
        this.strategy = Codegen.empty();
        this.targetColumn = Codegen.empty();
        this.targetColumnNames = Codegen.empty();
        this.targetDateFormat = Codegen.empty();
        this.targetIndex = Codegen.empty();
        this.timeZone = Codegen.empty();
        this.tokenizerPattern = Codegen.empty();
        this.trueString = Codegen.empty();
        this.udfLang = Codegen.empty();
        this.units = Codegen.empty();
        this.unpivotColumn = Codegen.empty();
        this.upperBound = Codegen.empty();
        this.useNewDataFrame = Codegen.empty();
        this.value = Codegen.empty();
        this.value1 = Codegen.empty();
        this.value2 = Codegen.empty();
        this.valueColumn = Codegen.empty();
        this.viewFrame = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecipeParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> aggregateFunction;
        private @Nullable Output<String> base;
        private @Nullable Output<String> caseStatement;
        private @Nullable Output<String> categoryMap;
        private @Nullable Output<String> charsToRemove;
        private @Nullable Output<String> collapseConsecutiveWhitespace;
        private @Nullable Output<String> columnDataType;
        private @Nullable Output<String> columnRange;
        private @Nullable Output<String> count;
        private @Nullable Output<String> customCharacters;
        private @Nullable Output<String> customStopWords;
        private @Nullable Output<String> customValue;
        private @Nullable Output<String> datasetsColumns;
        private @Nullable Output<String> dateAddValue;
        private @Nullable Output<String> dateTimeFormat;
        private @Nullable Output<String> dateTimeParameters;
        private @Nullable Output<String> deleteOtherRows;
        private @Nullable Output<String> delimiter;
        private @Nullable Output<String> endPattern;
        private @Nullable Output<String> endPosition;
        private @Nullable Output<String> endValue;
        private @Nullable Output<String> expandContractions;
        private @Nullable Output<String> exponent;
        private @Nullable Output<String> falseString;
        private @Nullable Output<String> groupByAggFunctionOptions;
        private @Nullable Output<String> groupByColumns;
        private @Nullable Output<String> hiddenColumns;
        private @Nullable Output<String> ignoreCase;
        private @Nullable Output<String> includeInSplit;
        private @Nullable Output<RecipeParametersInputPropertiesArgs> input;
        private @Nullable Output<String> interval;
        private @Nullable Output<String> isText;
        private @Nullable Output<String> joinKeys;
        private @Nullable Output<String> joinType;
        private @Nullable Output<String> leftColumns;
        private @Nullable Output<String> limit;
        private @Nullable Output<String> lowerBound;
        private @Nullable Output<String> mapType;
        private @Nullable Output<String> modeType;
        private @Nullable Output<Boolean> multiLine;
        private @Nullable Output<String> numRows;
        private @Nullable Output<String> numRowsAfter;
        private @Nullable Output<String> numRowsBefore;
        private @Nullable Output<String> orderByColumn;
        private @Nullable Output<String> orderByColumns;
        private @Nullable Output<String> other;
        private @Nullable Output<String> pattern;
        private @Nullable Output<String> patternOption1;
        private @Nullable Output<String> patternOption2;
        private @Nullable Output<String> patternOptions;
        private @Nullable Output<String> period;
        private @Nullable Output<String> position;
        private @Nullable Output<String> removeAllPunctuation;
        private @Nullable Output<String> removeAllQuotes;
        private @Nullable Output<String> removeAllWhitespace;
        private @Nullable Output<String> removeCustomCharacters;
        private @Nullable Output<String> removeCustomValue;
        private @Nullable Output<String> removeLeadingAndTrailingPunctuation;
        private @Nullable Output<String> removeLeadingAndTrailingQuotes;
        private @Nullable Output<String> removeLeadingAndTrailingWhitespace;
        private @Nullable Output<String> removeLetters;
        private @Nullable Output<String> removeNumbers;
        private @Nullable Output<String> removeSourceColumn;
        private @Nullable Output<String> removeSpecialCharacters;
        private @Nullable Output<String> rightColumns;
        private @Nullable Output<String> sampleSize;
        private @Nullable Output<String> sampleType;
        private @Nullable Output<String> secondInput;
        private @Nullable Output<List<RecipeSecondaryInputArgs>> secondaryInputs;
        private @Nullable Output<List<Integer>> sheetIndexes;
        private @Nullable Output<List<String>> sheetNames;
        private @Nullable Output<String> sourceColumn;
        private @Nullable Output<String> sourceColumn1;
        private @Nullable Output<String> sourceColumn2;
        private @Nullable Output<String> sourceColumns;
        private @Nullable Output<String> startColumnIndex;
        private @Nullable Output<String> startPattern;
        private @Nullable Output<String> startPosition;
        private @Nullable Output<String> startValue;
        private @Nullable Output<String> stemmingMode;
        private @Nullable Output<String> stepCount;
        private @Nullable Output<String> stepIndex;
        private @Nullable Output<String> stopWordsMode;
        private @Nullable Output<String> strategy;
        private @Nullable Output<String> targetColumn;
        private @Nullable Output<String> targetColumnNames;
        private @Nullable Output<String> targetDateFormat;
        private @Nullable Output<String> targetIndex;
        private @Nullable Output<String> timeZone;
        private @Nullable Output<String> tokenizerPattern;
        private @Nullable Output<String> trueString;
        private @Nullable Output<String> udfLang;
        private @Nullable Output<String> units;
        private @Nullable Output<String> unpivotColumn;
        private @Nullable Output<String> upperBound;
        private @Nullable Output<String> useNewDataFrame;
        private @Nullable Output<String> value;
        private @Nullable Output<String> value1;
        private @Nullable Output<String> value2;
        private @Nullable Output<String> valueColumn;
        private @Nullable Output<String> viewFrame;

        public Builder() {
    	      // Empty
        }

        public Builder(RecipeParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregateFunction = defaults.aggregateFunction;
    	      this.base = defaults.base;
    	      this.caseStatement = defaults.caseStatement;
    	      this.categoryMap = defaults.categoryMap;
    	      this.charsToRemove = defaults.charsToRemove;
    	      this.collapseConsecutiveWhitespace = defaults.collapseConsecutiveWhitespace;
    	      this.columnDataType = defaults.columnDataType;
    	      this.columnRange = defaults.columnRange;
    	      this.count = defaults.count;
    	      this.customCharacters = defaults.customCharacters;
    	      this.customStopWords = defaults.customStopWords;
    	      this.customValue = defaults.customValue;
    	      this.datasetsColumns = defaults.datasetsColumns;
    	      this.dateAddValue = defaults.dateAddValue;
    	      this.dateTimeFormat = defaults.dateTimeFormat;
    	      this.dateTimeParameters = defaults.dateTimeParameters;
    	      this.deleteOtherRows = defaults.deleteOtherRows;
    	      this.delimiter = defaults.delimiter;
    	      this.endPattern = defaults.endPattern;
    	      this.endPosition = defaults.endPosition;
    	      this.endValue = defaults.endValue;
    	      this.expandContractions = defaults.expandContractions;
    	      this.exponent = defaults.exponent;
    	      this.falseString = defaults.falseString;
    	      this.groupByAggFunctionOptions = defaults.groupByAggFunctionOptions;
    	      this.groupByColumns = defaults.groupByColumns;
    	      this.hiddenColumns = defaults.hiddenColumns;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.includeInSplit = defaults.includeInSplit;
    	      this.input = defaults.input;
    	      this.interval = defaults.interval;
    	      this.isText = defaults.isText;
    	      this.joinKeys = defaults.joinKeys;
    	      this.joinType = defaults.joinType;
    	      this.leftColumns = defaults.leftColumns;
    	      this.limit = defaults.limit;
    	      this.lowerBound = defaults.lowerBound;
    	      this.mapType = defaults.mapType;
    	      this.modeType = defaults.modeType;
    	      this.multiLine = defaults.multiLine;
    	      this.numRows = defaults.numRows;
    	      this.numRowsAfter = defaults.numRowsAfter;
    	      this.numRowsBefore = defaults.numRowsBefore;
    	      this.orderByColumn = defaults.orderByColumn;
    	      this.orderByColumns = defaults.orderByColumns;
    	      this.other = defaults.other;
    	      this.pattern = defaults.pattern;
    	      this.patternOption1 = defaults.patternOption1;
    	      this.patternOption2 = defaults.patternOption2;
    	      this.patternOptions = defaults.patternOptions;
    	      this.period = defaults.period;
    	      this.position = defaults.position;
    	      this.removeAllPunctuation = defaults.removeAllPunctuation;
    	      this.removeAllQuotes = defaults.removeAllQuotes;
    	      this.removeAllWhitespace = defaults.removeAllWhitespace;
    	      this.removeCustomCharacters = defaults.removeCustomCharacters;
    	      this.removeCustomValue = defaults.removeCustomValue;
    	      this.removeLeadingAndTrailingPunctuation = defaults.removeLeadingAndTrailingPunctuation;
    	      this.removeLeadingAndTrailingQuotes = defaults.removeLeadingAndTrailingQuotes;
    	      this.removeLeadingAndTrailingWhitespace = defaults.removeLeadingAndTrailingWhitespace;
    	      this.removeLetters = defaults.removeLetters;
    	      this.removeNumbers = defaults.removeNumbers;
    	      this.removeSourceColumn = defaults.removeSourceColumn;
    	      this.removeSpecialCharacters = defaults.removeSpecialCharacters;
    	      this.rightColumns = defaults.rightColumns;
    	      this.sampleSize = defaults.sampleSize;
    	      this.sampleType = defaults.sampleType;
    	      this.secondInput = defaults.secondInput;
    	      this.secondaryInputs = defaults.secondaryInputs;
    	      this.sheetIndexes = defaults.sheetIndexes;
    	      this.sheetNames = defaults.sheetNames;
    	      this.sourceColumn = defaults.sourceColumn;
    	      this.sourceColumn1 = defaults.sourceColumn1;
    	      this.sourceColumn2 = defaults.sourceColumn2;
    	      this.sourceColumns = defaults.sourceColumns;
    	      this.startColumnIndex = defaults.startColumnIndex;
    	      this.startPattern = defaults.startPattern;
    	      this.startPosition = defaults.startPosition;
    	      this.startValue = defaults.startValue;
    	      this.stemmingMode = defaults.stemmingMode;
    	      this.stepCount = defaults.stepCount;
    	      this.stepIndex = defaults.stepIndex;
    	      this.stopWordsMode = defaults.stopWordsMode;
    	      this.strategy = defaults.strategy;
    	      this.targetColumn = defaults.targetColumn;
    	      this.targetColumnNames = defaults.targetColumnNames;
    	      this.targetDateFormat = defaults.targetDateFormat;
    	      this.targetIndex = defaults.targetIndex;
    	      this.timeZone = defaults.timeZone;
    	      this.tokenizerPattern = defaults.tokenizerPattern;
    	      this.trueString = defaults.trueString;
    	      this.udfLang = defaults.udfLang;
    	      this.units = defaults.units;
    	      this.unpivotColumn = defaults.unpivotColumn;
    	      this.upperBound = defaults.upperBound;
    	      this.useNewDataFrame = defaults.useNewDataFrame;
    	      this.value = defaults.value;
    	      this.value1 = defaults.value1;
    	      this.value2 = defaults.value2;
    	      this.valueColumn = defaults.valueColumn;
    	      this.viewFrame = defaults.viewFrame;
        }

        public Builder aggregateFunction(@Nullable Output<String> aggregateFunction) {
            this.aggregateFunction = aggregateFunction;
            return this;
        }
        public Builder aggregateFunction(@Nullable String aggregateFunction) {
            this.aggregateFunction = Codegen.ofNullable(aggregateFunction);
            return this;
        }
        public Builder base(@Nullable Output<String> base) {
            this.base = base;
            return this;
        }
        public Builder base(@Nullable String base) {
            this.base = Codegen.ofNullable(base);
            return this;
        }
        public Builder caseStatement(@Nullable Output<String> caseStatement) {
            this.caseStatement = caseStatement;
            return this;
        }
        public Builder caseStatement(@Nullable String caseStatement) {
            this.caseStatement = Codegen.ofNullable(caseStatement);
            return this;
        }
        public Builder categoryMap(@Nullable Output<String> categoryMap) {
            this.categoryMap = categoryMap;
            return this;
        }
        public Builder categoryMap(@Nullable String categoryMap) {
            this.categoryMap = Codegen.ofNullable(categoryMap);
            return this;
        }
        public Builder charsToRemove(@Nullable Output<String> charsToRemove) {
            this.charsToRemove = charsToRemove;
            return this;
        }
        public Builder charsToRemove(@Nullable String charsToRemove) {
            this.charsToRemove = Codegen.ofNullable(charsToRemove);
            return this;
        }
        public Builder collapseConsecutiveWhitespace(@Nullable Output<String> collapseConsecutiveWhitespace) {
            this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            return this;
        }
        public Builder collapseConsecutiveWhitespace(@Nullable String collapseConsecutiveWhitespace) {
            this.collapseConsecutiveWhitespace = Codegen.ofNullable(collapseConsecutiveWhitespace);
            return this;
        }
        public Builder columnDataType(@Nullable Output<String> columnDataType) {
            this.columnDataType = columnDataType;
            return this;
        }
        public Builder columnDataType(@Nullable String columnDataType) {
            this.columnDataType = Codegen.ofNullable(columnDataType);
            return this;
        }
        public Builder columnRange(@Nullable Output<String> columnRange) {
            this.columnRange = columnRange;
            return this;
        }
        public Builder columnRange(@Nullable String columnRange) {
            this.columnRange = Codegen.ofNullable(columnRange);
            return this;
        }
        public Builder count(@Nullable Output<String> count) {
            this.count = count;
            return this;
        }
        public Builder count(@Nullable String count) {
            this.count = Codegen.ofNullable(count);
            return this;
        }
        public Builder customCharacters(@Nullable Output<String> customCharacters) {
            this.customCharacters = customCharacters;
            return this;
        }
        public Builder customCharacters(@Nullable String customCharacters) {
            this.customCharacters = Codegen.ofNullable(customCharacters);
            return this;
        }
        public Builder customStopWords(@Nullable Output<String> customStopWords) {
            this.customStopWords = customStopWords;
            return this;
        }
        public Builder customStopWords(@Nullable String customStopWords) {
            this.customStopWords = Codegen.ofNullable(customStopWords);
            return this;
        }
        public Builder customValue(@Nullable Output<String> customValue) {
            this.customValue = customValue;
            return this;
        }
        public Builder customValue(@Nullable String customValue) {
            this.customValue = Codegen.ofNullable(customValue);
            return this;
        }
        public Builder datasetsColumns(@Nullable Output<String> datasetsColumns) {
            this.datasetsColumns = datasetsColumns;
            return this;
        }
        public Builder datasetsColumns(@Nullable String datasetsColumns) {
            this.datasetsColumns = Codegen.ofNullable(datasetsColumns);
            return this;
        }
        public Builder dateAddValue(@Nullable Output<String> dateAddValue) {
            this.dateAddValue = dateAddValue;
            return this;
        }
        public Builder dateAddValue(@Nullable String dateAddValue) {
            this.dateAddValue = Codegen.ofNullable(dateAddValue);
            return this;
        }
        public Builder dateTimeFormat(@Nullable Output<String> dateTimeFormat) {
            this.dateTimeFormat = dateTimeFormat;
            return this;
        }
        public Builder dateTimeFormat(@Nullable String dateTimeFormat) {
            this.dateTimeFormat = Codegen.ofNullable(dateTimeFormat);
            return this;
        }
        public Builder dateTimeParameters(@Nullable Output<String> dateTimeParameters) {
            this.dateTimeParameters = dateTimeParameters;
            return this;
        }
        public Builder dateTimeParameters(@Nullable String dateTimeParameters) {
            this.dateTimeParameters = Codegen.ofNullable(dateTimeParameters);
            return this;
        }
        public Builder deleteOtherRows(@Nullable Output<String> deleteOtherRows) {
            this.deleteOtherRows = deleteOtherRows;
            return this;
        }
        public Builder deleteOtherRows(@Nullable String deleteOtherRows) {
            this.deleteOtherRows = Codegen.ofNullable(deleteOtherRows);
            return this;
        }
        public Builder delimiter(@Nullable Output<String> delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = Codegen.ofNullable(delimiter);
            return this;
        }
        public Builder endPattern(@Nullable Output<String> endPattern) {
            this.endPattern = endPattern;
            return this;
        }
        public Builder endPattern(@Nullable String endPattern) {
            this.endPattern = Codegen.ofNullable(endPattern);
            return this;
        }
        public Builder endPosition(@Nullable Output<String> endPosition) {
            this.endPosition = endPosition;
            return this;
        }
        public Builder endPosition(@Nullable String endPosition) {
            this.endPosition = Codegen.ofNullable(endPosition);
            return this;
        }
        public Builder endValue(@Nullable Output<String> endValue) {
            this.endValue = endValue;
            return this;
        }
        public Builder endValue(@Nullable String endValue) {
            this.endValue = Codegen.ofNullable(endValue);
            return this;
        }
        public Builder expandContractions(@Nullable Output<String> expandContractions) {
            this.expandContractions = expandContractions;
            return this;
        }
        public Builder expandContractions(@Nullable String expandContractions) {
            this.expandContractions = Codegen.ofNullable(expandContractions);
            return this;
        }
        public Builder exponent(@Nullable Output<String> exponent) {
            this.exponent = exponent;
            return this;
        }
        public Builder exponent(@Nullable String exponent) {
            this.exponent = Codegen.ofNullable(exponent);
            return this;
        }
        public Builder falseString(@Nullable Output<String> falseString) {
            this.falseString = falseString;
            return this;
        }
        public Builder falseString(@Nullable String falseString) {
            this.falseString = Codegen.ofNullable(falseString);
            return this;
        }
        public Builder groupByAggFunctionOptions(@Nullable Output<String> groupByAggFunctionOptions) {
            this.groupByAggFunctionOptions = groupByAggFunctionOptions;
            return this;
        }
        public Builder groupByAggFunctionOptions(@Nullable String groupByAggFunctionOptions) {
            this.groupByAggFunctionOptions = Codegen.ofNullable(groupByAggFunctionOptions);
            return this;
        }
        public Builder groupByColumns(@Nullable Output<String> groupByColumns) {
            this.groupByColumns = groupByColumns;
            return this;
        }
        public Builder groupByColumns(@Nullable String groupByColumns) {
            this.groupByColumns = Codegen.ofNullable(groupByColumns);
            return this;
        }
        public Builder hiddenColumns(@Nullable Output<String> hiddenColumns) {
            this.hiddenColumns = hiddenColumns;
            return this;
        }
        public Builder hiddenColumns(@Nullable String hiddenColumns) {
            this.hiddenColumns = Codegen.ofNullable(hiddenColumns);
            return this;
        }
        public Builder ignoreCase(@Nullable Output<String> ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }
        public Builder ignoreCase(@Nullable String ignoreCase) {
            this.ignoreCase = Codegen.ofNullable(ignoreCase);
            return this;
        }
        public Builder includeInSplit(@Nullable Output<String> includeInSplit) {
            this.includeInSplit = includeInSplit;
            return this;
        }
        public Builder includeInSplit(@Nullable String includeInSplit) {
            this.includeInSplit = Codegen.ofNullable(includeInSplit);
            return this;
        }
        public Builder input(@Nullable Output<RecipeParametersInputPropertiesArgs> input) {
            this.input = input;
            return this;
        }
        public Builder input(@Nullable RecipeParametersInputPropertiesArgs input) {
            this.input = Codegen.ofNullable(input);
            return this;
        }
        public Builder interval(@Nullable Output<String> interval) {
            this.interval = interval;
            return this;
        }
        public Builder interval(@Nullable String interval) {
            this.interval = Codegen.ofNullable(interval);
            return this;
        }
        public Builder isText(@Nullable Output<String> isText) {
            this.isText = isText;
            return this;
        }
        public Builder isText(@Nullable String isText) {
            this.isText = Codegen.ofNullable(isText);
            return this;
        }
        public Builder joinKeys(@Nullable Output<String> joinKeys) {
            this.joinKeys = joinKeys;
            return this;
        }
        public Builder joinKeys(@Nullable String joinKeys) {
            this.joinKeys = Codegen.ofNullable(joinKeys);
            return this;
        }
        public Builder joinType(@Nullable Output<String> joinType) {
            this.joinType = joinType;
            return this;
        }
        public Builder joinType(@Nullable String joinType) {
            this.joinType = Codegen.ofNullable(joinType);
            return this;
        }
        public Builder leftColumns(@Nullable Output<String> leftColumns) {
            this.leftColumns = leftColumns;
            return this;
        }
        public Builder leftColumns(@Nullable String leftColumns) {
            this.leftColumns = Codegen.ofNullable(leftColumns);
            return this;
        }
        public Builder limit(@Nullable Output<String> limit) {
            this.limit = limit;
            return this;
        }
        public Builder limit(@Nullable String limit) {
            this.limit = Codegen.ofNullable(limit);
            return this;
        }
        public Builder lowerBound(@Nullable Output<String> lowerBound) {
            this.lowerBound = lowerBound;
            return this;
        }
        public Builder lowerBound(@Nullable String lowerBound) {
            this.lowerBound = Codegen.ofNullable(lowerBound);
            return this;
        }
        public Builder mapType(@Nullable Output<String> mapType) {
            this.mapType = mapType;
            return this;
        }
        public Builder mapType(@Nullable String mapType) {
            this.mapType = Codegen.ofNullable(mapType);
            return this;
        }
        public Builder modeType(@Nullable Output<String> modeType) {
            this.modeType = modeType;
            return this;
        }
        public Builder modeType(@Nullable String modeType) {
            this.modeType = Codegen.ofNullable(modeType);
            return this;
        }
        public Builder multiLine(@Nullable Output<Boolean> multiLine) {
            this.multiLine = multiLine;
            return this;
        }
        public Builder multiLine(@Nullable Boolean multiLine) {
            this.multiLine = Codegen.ofNullable(multiLine);
            return this;
        }
        public Builder numRows(@Nullable Output<String> numRows) {
            this.numRows = numRows;
            return this;
        }
        public Builder numRows(@Nullable String numRows) {
            this.numRows = Codegen.ofNullable(numRows);
            return this;
        }
        public Builder numRowsAfter(@Nullable Output<String> numRowsAfter) {
            this.numRowsAfter = numRowsAfter;
            return this;
        }
        public Builder numRowsAfter(@Nullable String numRowsAfter) {
            this.numRowsAfter = Codegen.ofNullable(numRowsAfter);
            return this;
        }
        public Builder numRowsBefore(@Nullable Output<String> numRowsBefore) {
            this.numRowsBefore = numRowsBefore;
            return this;
        }
        public Builder numRowsBefore(@Nullable String numRowsBefore) {
            this.numRowsBefore = Codegen.ofNullable(numRowsBefore);
            return this;
        }
        public Builder orderByColumn(@Nullable Output<String> orderByColumn) {
            this.orderByColumn = orderByColumn;
            return this;
        }
        public Builder orderByColumn(@Nullable String orderByColumn) {
            this.orderByColumn = Codegen.ofNullable(orderByColumn);
            return this;
        }
        public Builder orderByColumns(@Nullable Output<String> orderByColumns) {
            this.orderByColumns = orderByColumns;
            return this;
        }
        public Builder orderByColumns(@Nullable String orderByColumns) {
            this.orderByColumns = Codegen.ofNullable(orderByColumns);
            return this;
        }
        public Builder other(@Nullable Output<String> other) {
            this.other = other;
            return this;
        }
        public Builder other(@Nullable String other) {
            this.other = Codegen.ofNullable(other);
            return this;
        }
        public Builder pattern(@Nullable Output<String> pattern) {
            this.pattern = pattern;
            return this;
        }
        public Builder pattern(@Nullable String pattern) {
            this.pattern = Codegen.ofNullable(pattern);
            return this;
        }
        public Builder patternOption1(@Nullable Output<String> patternOption1) {
            this.patternOption1 = patternOption1;
            return this;
        }
        public Builder patternOption1(@Nullable String patternOption1) {
            this.patternOption1 = Codegen.ofNullable(patternOption1);
            return this;
        }
        public Builder patternOption2(@Nullable Output<String> patternOption2) {
            this.patternOption2 = patternOption2;
            return this;
        }
        public Builder patternOption2(@Nullable String patternOption2) {
            this.patternOption2 = Codegen.ofNullable(patternOption2);
            return this;
        }
        public Builder patternOptions(@Nullable Output<String> patternOptions) {
            this.patternOptions = patternOptions;
            return this;
        }
        public Builder patternOptions(@Nullable String patternOptions) {
            this.patternOptions = Codegen.ofNullable(patternOptions);
            return this;
        }
        public Builder period(@Nullable Output<String> period) {
            this.period = period;
            return this;
        }
        public Builder period(@Nullable String period) {
            this.period = Codegen.ofNullable(period);
            return this;
        }
        public Builder position(@Nullable Output<String> position) {
            this.position = position;
            return this;
        }
        public Builder position(@Nullable String position) {
            this.position = Codegen.ofNullable(position);
            return this;
        }
        public Builder removeAllPunctuation(@Nullable Output<String> removeAllPunctuation) {
            this.removeAllPunctuation = removeAllPunctuation;
            return this;
        }
        public Builder removeAllPunctuation(@Nullable String removeAllPunctuation) {
            this.removeAllPunctuation = Codegen.ofNullable(removeAllPunctuation);
            return this;
        }
        public Builder removeAllQuotes(@Nullable Output<String> removeAllQuotes) {
            this.removeAllQuotes = removeAllQuotes;
            return this;
        }
        public Builder removeAllQuotes(@Nullable String removeAllQuotes) {
            this.removeAllQuotes = Codegen.ofNullable(removeAllQuotes);
            return this;
        }
        public Builder removeAllWhitespace(@Nullable Output<String> removeAllWhitespace) {
            this.removeAllWhitespace = removeAllWhitespace;
            return this;
        }
        public Builder removeAllWhitespace(@Nullable String removeAllWhitespace) {
            this.removeAllWhitespace = Codegen.ofNullable(removeAllWhitespace);
            return this;
        }
        public Builder removeCustomCharacters(@Nullable Output<String> removeCustomCharacters) {
            this.removeCustomCharacters = removeCustomCharacters;
            return this;
        }
        public Builder removeCustomCharacters(@Nullable String removeCustomCharacters) {
            this.removeCustomCharacters = Codegen.ofNullable(removeCustomCharacters);
            return this;
        }
        public Builder removeCustomValue(@Nullable Output<String> removeCustomValue) {
            this.removeCustomValue = removeCustomValue;
            return this;
        }
        public Builder removeCustomValue(@Nullable String removeCustomValue) {
            this.removeCustomValue = Codegen.ofNullable(removeCustomValue);
            return this;
        }
        public Builder removeLeadingAndTrailingPunctuation(@Nullable Output<String> removeLeadingAndTrailingPunctuation) {
            this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            return this;
        }
        public Builder removeLeadingAndTrailingPunctuation(@Nullable String removeLeadingAndTrailingPunctuation) {
            this.removeLeadingAndTrailingPunctuation = Codegen.ofNullable(removeLeadingAndTrailingPunctuation);
            return this;
        }
        public Builder removeLeadingAndTrailingQuotes(@Nullable Output<String> removeLeadingAndTrailingQuotes) {
            this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            return this;
        }
        public Builder removeLeadingAndTrailingQuotes(@Nullable String removeLeadingAndTrailingQuotes) {
            this.removeLeadingAndTrailingQuotes = Codegen.ofNullable(removeLeadingAndTrailingQuotes);
            return this;
        }
        public Builder removeLeadingAndTrailingWhitespace(@Nullable Output<String> removeLeadingAndTrailingWhitespace) {
            this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            return this;
        }
        public Builder removeLeadingAndTrailingWhitespace(@Nullable String removeLeadingAndTrailingWhitespace) {
            this.removeLeadingAndTrailingWhitespace = Codegen.ofNullable(removeLeadingAndTrailingWhitespace);
            return this;
        }
        public Builder removeLetters(@Nullable Output<String> removeLetters) {
            this.removeLetters = removeLetters;
            return this;
        }
        public Builder removeLetters(@Nullable String removeLetters) {
            this.removeLetters = Codegen.ofNullable(removeLetters);
            return this;
        }
        public Builder removeNumbers(@Nullable Output<String> removeNumbers) {
            this.removeNumbers = removeNumbers;
            return this;
        }
        public Builder removeNumbers(@Nullable String removeNumbers) {
            this.removeNumbers = Codegen.ofNullable(removeNumbers);
            return this;
        }
        public Builder removeSourceColumn(@Nullable Output<String> removeSourceColumn) {
            this.removeSourceColumn = removeSourceColumn;
            return this;
        }
        public Builder removeSourceColumn(@Nullable String removeSourceColumn) {
            this.removeSourceColumn = Codegen.ofNullable(removeSourceColumn);
            return this;
        }
        public Builder removeSpecialCharacters(@Nullable Output<String> removeSpecialCharacters) {
            this.removeSpecialCharacters = removeSpecialCharacters;
            return this;
        }
        public Builder removeSpecialCharacters(@Nullable String removeSpecialCharacters) {
            this.removeSpecialCharacters = Codegen.ofNullable(removeSpecialCharacters);
            return this;
        }
        public Builder rightColumns(@Nullable Output<String> rightColumns) {
            this.rightColumns = rightColumns;
            return this;
        }
        public Builder rightColumns(@Nullable String rightColumns) {
            this.rightColumns = Codegen.ofNullable(rightColumns);
            return this;
        }
        public Builder sampleSize(@Nullable Output<String> sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }
        public Builder sampleSize(@Nullable String sampleSize) {
            this.sampleSize = Codegen.ofNullable(sampleSize);
            return this;
        }
        public Builder sampleType(@Nullable Output<String> sampleType) {
            this.sampleType = sampleType;
            return this;
        }
        public Builder sampleType(@Nullable String sampleType) {
            this.sampleType = Codegen.ofNullable(sampleType);
            return this;
        }
        public Builder secondInput(@Nullable Output<String> secondInput) {
            this.secondInput = secondInput;
            return this;
        }
        public Builder secondInput(@Nullable String secondInput) {
            this.secondInput = Codegen.ofNullable(secondInput);
            return this;
        }
        public Builder secondaryInputs(@Nullable Output<List<RecipeSecondaryInputArgs>> secondaryInputs) {
            this.secondaryInputs = secondaryInputs;
            return this;
        }
        public Builder secondaryInputs(@Nullable List<RecipeSecondaryInputArgs> secondaryInputs) {
            this.secondaryInputs = Codegen.ofNullable(secondaryInputs);
            return this;
        }
        public Builder secondaryInputs(RecipeSecondaryInputArgs... secondaryInputs) {
            return secondaryInputs(List.of(secondaryInputs));
        }
        public Builder sheetIndexes(@Nullable Output<List<Integer>> sheetIndexes) {
            this.sheetIndexes = sheetIndexes;
            return this;
        }
        public Builder sheetIndexes(@Nullable List<Integer> sheetIndexes) {
            this.sheetIndexes = Codegen.ofNullable(sheetIndexes);
            return this;
        }
        public Builder sheetIndexes(Integer... sheetIndexes) {
            return sheetIndexes(List.of(sheetIndexes));
        }
        public Builder sheetNames(@Nullable Output<List<String>> sheetNames) {
            this.sheetNames = sheetNames;
            return this;
        }
        public Builder sheetNames(@Nullable List<String> sheetNames) {
            this.sheetNames = Codegen.ofNullable(sheetNames);
            return this;
        }
        public Builder sheetNames(String... sheetNames) {
            return sheetNames(List.of(sheetNames));
        }
        public Builder sourceColumn(@Nullable Output<String> sourceColumn) {
            this.sourceColumn = sourceColumn;
            return this;
        }
        public Builder sourceColumn(@Nullable String sourceColumn) {
            this.sourceColumn = Codegen.ofNullable(sourceColumn);
            return this;
        }
        public Builder sourceColumn1(@Nullable Output<String> sourceColumn1) {
            this.sourceColumn1 = sourceColumn1;
            return this;
        }
        public Builder sourceColumn1(@Nullable String sourceColumn1) {
            this.sourceColumn1 = Codegen.ofNullable(sourceColumn1);
            return this;
        }
        public Builder sourceColumn2(@Nullable Output<String> sourceColumn2) {
            this.sourceColumn2 = sourceColumn2;
            return this;
        }
        public Builder sourceColumn2(@Nullable String sourceColumn2) {
            this.sourceColumn2 = Codegen.ofNullable(sourceColumn2);
            return this;
        }
        public Builder sourceColumns(@Nullable Output<String> sourceColumns) {
            this.sourceColumns = sourceColumns;
            return this;
        }
        public Builder sourceColumns(@Nullable String sourceColumns) {
            this.sourceColumns = Codegen.ofNullable(sourceColumns);
            return this;
        }
        public Builder startColumnIndex(@Nullable Output<String> startColumnIndex) {
            this.startColumnIndex = startColumnIndex;
            return this;
        }
        public Builder startColumnIndex(@Nullable String startColumnIndex) {
            this.startColumnIndex = Codegen.ofNullable(startColumnIndex);
            return this;
        }
        public Builder startPattern(@Nullable Output<String> startPattern) {
            this.startPattern = startPattern;
            return this;
        }
        public Builder startPattern(@Nullable String startPattern) {
            this.startPattern = Codegen.ofNullable(startPattern);
            return this;
        }
        public Builder startPosition(@Nullable Output<String> startPosition) {
            this.startPosition = startPosition;
            return this;
        }
        public Builder startPosition(@Nullable String startPosition) {
            this.startPosition = Codegen.ofNullable(startPosition);
            return this;
        }
        public Builder startValue(@Nullable Output<String> startValue) {
            this.startValue = startValue;
            return this;
        }
        public Builder startValue(@Nullable String startValue) {
            this.startValue = Codegen.ofNullable(startValue);
            return this;
        }
        public Builder stemmingMode(@Nullable Output<String> stemmingMode) {
            this.stemmingMode = stemmingMode;
            return this;
        }
        public Builder stemmingMode(@Nullable String stemmingMode) {
            this.stemmingMode = Codegen.ofNullable(stemmingMode);
            return this;
        }
        public Builder stepCount(@Nullable Output<String> stepCount) {
            this.stepCount = stepCount;
            return this;
        }
        public Builder stepCount(@Nullable String stepCount) {
            this.stepCount = Codegen.ofNullable(stepCount);
            return this;
        }
        public Builder stepIndex(@Nullable Output<String> stepIndex) {
            this.stepIndex = stepIndex;
            return this;
        }
        public Builder stepIndex(@Nullable String stepIndex) {
            this.stepIndex = Codegen.ofNullable(stepIndex);
            return this;
        }
        public Builder stopWordsMode(@Nullable Output<String> stopWordsMode) {
            this.stopWordsMode = stopWordsMode;
            return this;
        }
        public Builder stopWordsMode(@Nullable String stopWordsMode) {
            this.stopWordsMode = Codegen.ofNullable(stopWordsMode);
            return this;
        }
        public Builder strategy(@Nullable Output<String> strategy) {
            this.strategy = strategy;
            return this;
        }
        public Builder strategy(@Nullable String strategy) {
            this.strategy = Codegen.ofNullable(strategy);
            return this;
        }
        public Builder targetColumn(@Nullable Output<String> targetColumn) {
            this.targetColumn = targetColumn;
            return this;
        }
        public Builder targetColumn(@Nullable String targetColumn) {
            this.targetColumn = Codegen.ofNullable(targetColumn);
            return this;
        }
        public Builder targetColumnNames(@Nullable Output<String> targetColumnNames) {
            this.targetColumnNames = targetColumnNames;
            return this;
        }
        public Builder targetColumnNames(@Nullable String targetColumnNames) {
            this.targetColumnNames = Codegen.ofNullable(targetColumnNames);
            return this;
        }
        public Builder targetDateFormat(@Nullable Output<String> targetDateFormat) {
            this.targetDateFormat = targetDateFormat;
            return this;
        }
        public Builder targetDateFormat(@Nullable String targetDateFormat) {
            this.targetDateFormat = Codegen.ofNullable(targetDateFormat);
            return this;
        }
        public Builder targetIndex(@Nullable Output<String> targetIndex) {
            this.targetIndex = targetIndex;
            return this;
        }
        public Builder targetIndex(@Nullable String targetIndex) {
            this.targetIndex = Codegen.ofNullable(targetIndex);
            return this;
        }
        public Builder timeZone(@Nullable Output<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = Codegen.ofNullable(timeZone);
            return this;
        }
        public Builder tokenizerPattern(@Nullable Output<String> tokenizerPattern) {
            this.tokenizerPattern = tokenizerPattern;
            return this;
        }
        public Builder tokenizerPattern(@Nullable String tokenizerPattern) {
            this.tokenizerPattern = Codegen.ofNullable(tokenizerPattern);
            return this;
        }
        public Builder trueString(@Nullable Output<String> trueString) {
            this.trueString = trueString;
            return this;
        }
        public Builder trueString(@Nullable String trueString) {
            this.trueString = Codegen.ofNullable(trueString);
            return this;
        }
        public Builder udfLang(@Nullable Output<String> udfLang) {
            this.udfLang = udfLang;
            return this;
        }
        public Builder udfLang(@Nullable String udfLang) {
            this.udfLang = Codegen.ofNullable(udfLang);
            return this;
        }
        public Builder units(@Nullable Output<String> units) {
            this.units = units;
            return this;
        }
        public Builder units(@Nullable String units) {
            this.units = Codegen.ofNullable(units);
            return this;
        }
        public Builder unpivotColumn(@Nullable Output<String> unpivotColumn) {
            this.unpivotColumn = unpivotColumn;
            return this;
        }
        public Builder unpivotColumn(@Nullable String unpivotColumn) {
            this.unpivotColumn = Codegen.ofNullable(unpivotColumn);
            return this;
        }
        public Builder upperBound(@Nullable Output<String> upperBound) {
            this.upperBound = upperBound;
            return this;
        }
        public Builder upperBound(@Nullable String upperBound) {
            this.upperBound = Codegen.ofNullable(upperBound);
            return this;
        }
        public Builder useNewDataFrame(@Nullable Output<String> useNewDataFrame) {
            this.useNewDataFrame = useNewDataFrame;
            return this;
        }
        public Builder useNewDataFrame(@Nullable String useNewDataFrame) {
            this.useNewDataFrame = Codegen.ofNullable(useNewDataFrame);
            return this;
        }
        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }
        public Builder value(@Nullable String value) {
            this.value = Codegen.ofNullable(value);
            return this;
        }
        public Builder value1(@Nullable Output<String> value1) {
            this.value1 = value1;
            return this;
        }
        public Builder value1(@Nullable String value1) {
            this.value1 = Codegen.ofNullable(value1);
            return this;
        }
        public Builder value2(@Nullable Output<String> value2) {
            this.value2 = value2;
            return this;
        }
        public Builder value2(@Nullable String value2) {
            this.value2 = Codegen.ofNullable(value2);
            return this;
        }
        public Builder valueColumn(@Nullable Output<String> valueColumn) {
            this.valueColumn = valueColumn;
            return this;
        }
        public Builder valueColumn(@Nullable String valueColumn) {
            this.valueColumn = Codegen.ofNullable(valueColumn);
            return this;
        }
        public Builder viewFrame(@Nullable Output<String> viewFrame) {
            this.viewFrame = viewFrame;
            return this;
        }
        public Builder viewFrame(@Nullable String viewFrame) {
            this.viewFrame = Codegen.ofNullable(viewFrame);
            return this;
        }        public RecipeParametersArgs build() {
            return new RecipeParametersArgs(aggregateFunction, base, caseStatement, categoryMap, charsToRemove, collapseConsecutiveWhitespace, columnDataType, columnRange, count, customCharacters, customStopWords, customValue, datasetsColumns, dateAddValue, dateTimeFormat, dateTimeParameters, deleteOtherRows, delimiter, endPattern, endPosition, endValue, expandContractions, exponent, falseString, groupByAggFunctionOptions, groupByColumns, hiddenColumns, ignoreCase, includeInSplit, input, interval, isText, joinKeys, joinType, leftColumns, limit, lowerBound, mapType, modeType, multiLine, numRows, numRowsAfter, numRowsBefore, orderByColumn, orderByColumns, other, pattern, patternOption1, patternOption2, patternOptions, period, position, removeAllPunctuation, removeAllQuotes, removeAllWhitespace, removeCustomCharacters, removeCustomValue, removeLeadingAndTrailingPunctuation, removeLeadingAndTrailingQuotes, removeLeadingAndTrailingWhitespace, removeLetters, removeNumbers, removeSourceColumn, removeSpecialCharacters, rightColumns, sampleSize, sampleType, secondInput, secondaryInputs, sheetIndexes, sheetNames, sourceColumn, sourceColumn1, sourceColumn2, sourceColumns, startColumnIndex, startPattern, startPosition, startValue, stemmingMode, stepCount, stepIndex, stopWordsMode, strategy, targetColumn, targetColumnNames, targetDateFormat, targetIndex, timeZone, tokenizerPattern, trueString, udfLang, units, unpivotColumn, upperBound, useNewDataFrame, value, value1, value2, valueColumn, viewFrame);
        }
    }
}
