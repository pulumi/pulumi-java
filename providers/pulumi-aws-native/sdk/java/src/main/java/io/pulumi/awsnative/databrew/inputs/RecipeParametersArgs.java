// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew.inputs;

import io.pulumi.awsnative.databrew.inputs.RecipeParametersInputPropertiesArgs;
import io.pulumi.awsnative.databrew.inputs.RecipeSecondaryInputArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RecipeParametersArgs extends io.pulumi.resources.ResourceArgs {

    public static final RecipeParametersArgs Empty = new RecipeParametersArgs();

    @InputImport(name="aggregateFunction")
      private final @Nullable Input<String> aggregateFunction;

    public Input<String> getAggregateFunction() {
        return this.aggregateFunction == null ? Input.empty() : this.aggregateFunction;
    }

    @InputImport(name="base")
      private final @Nullable Input<String> base;

    public Input<String> getBase() {
        return this.base == null ? Input.empty() : this.base;
    }

    @InputImport(name="caseStatement")
      private final @Nullable Input<String> caseStatement;

    public Input<String> getCaseStatement() {
        return this.caseStatement == null ? Input.empty() : this.caseStatement;
    }

    @InputImport(name="categoryMap")
      private final @Nullable Input<String> categoryMap;

    public Input<String> getCategoryMap() {
        return this.categoryMap == null ? Input.empty() : this.categoryMap;
    }

    @InputImport(name="charsToRemove")
      private final @Nullable Input<String> charsToRemove;

    public Input<String> getCharsToRemove() {
        return this.charsToRemove == null ? Input.empty() : this.charsToRemove;
    }

    @InputImport(name="collapseConsecutiveWhitespace")
      private final @Nullable Input<String> collapseConsecutiveWhitespace;

    public Input<String> getCollapseConsecutiveWhitespace() {
        return this.collapseConsecutiveWhitespace == null ? Input.empty() : this.collapseConsecutiveWhitespace;
    }

    @InputImport(name="columnDataType")
      private final @Nullable Input<String> columnDataType;

    public Input<String> getColumnDataType() {
        return this.columnDataType == null ? Input.empty() : this.columnDataType;
    }

    @InputImport(name="columnRange")
      private final @Nullable Input<String> columnRange;

    public Input<String> getColumnRange() {
        return this.columnRange == null ? Input.empty() : this.columnRange;
    }

    @InputImport(name="count")
      private final @Nullable Input<String> count;

    public Input<String> getCount() {
        return this.count == null ? Input.empty() : this.count;
    }

    @InputImport(name="customCharacters")
      private final @Nullable Input<String> customCharacters;

    public Input<String> getCustomCharacters() {
        return this.customCharacters == null ? Input.empty() : this.customCharacters;
    }

    @InputImport(name="customStopWords")
      private final @Nullable Input<String> customStopWords;

    public Input<String> getCustomStopWords() {
        return this.customStopWords == null ? Input.empty() : this.customStopWords;
    }

    @InputImport(name="customValue")
      private final @Nullable Input<String> customValue;

    public Input<String> getCustomValue() {
        return this.customValue == null ? Input.empty() : this.customValue;
    }

    @InputImport(name="datasetsColumns")
      private final @Nullable Input<String> datasetsColumns;

    public Input<String> getDatasetsColumns() {
        return this.datasetsColumns == null ? Input.empty() : this.datasetsColumns;
    }

    @InputImport(name="dateAddValue")
      private final @Nullable Input<String> dateAddValue;

    public Input<String> getDateAddValue() {
        return this.dateAddValue == null ? Input.empty() : this.dateAddValue;
    }

    @InputImport(name="dateTimeFormat")
      private final @Nullable Input<String> dateTimeFormat;

    public Input<String> getDateTimeFormat() {
        return this.dateTimeFormat == null ? Input.empty() : this.dateTimeFormat;
    }

    @InputImport(name="dateTimeParameters")
      private final @Nullable Input<String> dateTimeParameters;

    public Input<String> getDateTimeParameters() {
        return this.dateTimeParameters == null ? Input.empty() : this.dateTimeParameters;
    }

    @InputImport(name="deleteOtherRows")
      private final @Nullable Input<String> deleteOtherRows;

    public Input<String> getDeleteOtherRows() {
        return this.deleteOtherRows == null ? Input.empty() : this.deleteOtherRows;
    }

    @InputImport(name="delimiter")
      private final @Nullable Input<String> delimiter;

    public Input<String> getDelimiter() {
        return this.delimiter == null ? Input.empty() : this.delimiter;
    }

    @InputImport(name="endPattern")
      private final @Nullable Input<String> endPattern;

    public Input<String> getEndPattern() {
        return this.endPattern == null ? Input.empty() : this.endPattern;
    }

    @InputImport(name="endPosition")
      private final @Nullable Input<String> endPosition;

    public Input<String> getEndPosition() {
        return this.endPosition == null ? Input.empty() : this.endPosition;
    }

    @InputImport(name="endValue")
      private final @Nullable Input<String> endValue;

    public Input<String> getEndValue() {
        return this.endValue == null ? Input.empty() : this.endValue;
    }

    @InputImport(name="expandContractions")
      private final @Nullable Input<String> expandContractions;

    public Input<String> getExpandContractions() {
        return this.expandContractions == null ? Input.empty() : this.expandContractions;
    }

    @InputImport(name="exponent")
      private final @Nullable Input<String> exponent;

    public Input<String> getExponent() {
        return this.exponent == null ? Input.empty() : this.exponent;
    }

    @InputImport(name="falseString")
      private final @Nullable Input<String> falseString;

    public Input<String> getFalseString() {
        return this.falseString == null ? Input.empty() : this.falseString;
    }

    @InputImport(name="groupByAggFunctionOptions")
      private final @Nullable Input<String> groupByAggFunctionOptions;

    public Input<String> getGroupByAggFunctionOptions() {
        return this.groupByAggFunctionOptions == null ? Input.empty() : this.groupByAggFunctionOptions;
    }

    @InputImport(name="groupByColumns")
      private final @Nullable Input<String> groupByColumns;

    public Input<String> getGroupByColumns() {
        return this.groupByColumns == null ? Input.empty() : this.groupByColumns;
    }

    @InputImport(name="hiddenColumns")
      private final @Nullable Input<String> hiddenColumns;

    public Input<String> getHiddenColumns() {
        return this.hiddenColumns == null ? Input.empty() : this.hiddenColumns;
    }

    @InputImport(name="ignoreCase")
      private final @Nullable Input<String> ignoreCase;

    public Input<String> getIgnoreCase() {
        return this.ignoreCase == null ? Input.empty() : this.ignoreCase;
    }

    @InputImport(name="includeInSplit")
      private final @Nullable Input<String> includeInSplit;

    public Input<String> getIncludeInSplit() {
        return this.includeInSplit == null ? Input.empty() : this.includeInSplit;
    }

    /**
     * Input
     * 
     */
    @InputImport(name="input")
      private final @Nullable Input<RecipeParametersInputPropertiesArgs> input;

    public Input<RecipeParametersInputPropertiesArgs> getInput() {
        return this.input == null ? Input.empty() : this.input;
    }

    @InputImport(name="interval")
      private final @Nullable Input<String> interval;

    public Input<String> getInterval() {
        return this.interval == null ? Input.empty() : this.interval;
    }

    @InputImport(name="isText")
      private final @Nullable Input<String> isText;

    public Input<String> getIsText() {
        return this.isText == null ? Input.empty() : this.isText;
    }

    @InputImport(name="joinKeys")
      private final @Nullable Input<String> joinKeys;

    public Input<String> getJoinKeys() {
        return this.joinKeys == null ? Input.empty() : this.joinKeys;
    }

    @InputImport(name="joinType")
      private final @Nullable Input<String> joinType;

    public Input<String> getJoinType() {
        return this.joinType == null ? Input.empty() : this.joinType;
    }

    @InputImport(name="leftColumns")
      private final @Nullable Input<String> leftColumns;

    public Input<String> getLeftColumns() {
        return this.leftColumns == null ? Input.empty() : this.leftColumns;
    }

    @InputImport(name="limit")
      private final @Nullable Input<String> limit;

    public Input<String> getLimit() {
        return this.limit == null ? Input.empty() : this.limit;
    }

    @InputImport(name="lowerBound")
      private final @Nullable Input<String> lowerBound;

    public Input<String> getLowerBound() {
        return this.lowerBound == null ? Input.empty() : this.lowerBound;
    }

    @InputImport(name="mapType")
      private final @Nullable Input<String> mapType;

    public Input<String> getMapType() {
        return this.mapType == null ? Input.empty() : this.mapType;
    }

    @InputImport(name="modeType")
      private final @Nullable Input<String> modeType;

    public Input<String> getModeType() {
        return this.modeType == null ? Input.empty() : this.modeType;
    }

    @InputImport(name="multiLine")
      private final @Nullable Input<Boolean> multiLine;

    public Input<Boolean> getMultiLine() {
        return this.multiLine == null ? Input.empty() : this.multiLine;
    }

    @InputImport(name="numRows")
      private final @Nullable Input<String> numRows;

    public Input<String> getNumRows() {
        return this.numRows == null ? Input.empty() : this.numRows;
    }

    @InputImport(name="numRowsAfter")
      private final @Nullable Input<String> numRowsAfter;

    public Input<String> getNumRowsAfter() {
        return this.numRowsAfter == null ? Input.empty() : this.numRowsAfter;
    }

    @InputImport(name="numRowsBefore")
      private final @Nullable Input<String> numRowsBefore;

    public Input<String> getNumRowsBefore() {
        return this.numRowsBefore == null ? Input.empty() : this.numRowsBefore;
    }

    @InputImport(name="orderByColumn")
      private final @Nullable Input<String> orderByColumn;

    public Input<String> getOrderByColumn() {
        return this.orderByColumn == null ? Input.empty() : this.orderByColumn;
    }

    @InputImport(name="orderByColumns")
      private final @Nullable Input<String> orderByColumns;

    public Input<String> getOrderByColumns() {
        return this.orderByColumns == null ? Input.empty() : this.orderByColumns;
    }

    @InputImport(name="other")
      private final @Nullable Input<String> other;

    public Input<String> getOther() {
        return this.other == null ? Input.empty() : this.other;
    }

    @InputImport(name="pattern")
      private final @Nullable Input<String> pattern;

    public Input<String> getPattern() {
        return this.pattern == null ? Input.empty() : this.pattern;
    }

    @InputImport(name="patternOption1")
      private final @Nullable Input<String> patternOption1;

    public Input<String> getPatternOption1() {
        return this.patternOption1 == null ? Input.empty() : this.patternOption1;
    }

    @InputImport(name="patternOption2")
      private final @Nullable Input<String> patternOption2;

    public Input<String> getPatternOption2() {
        return this.patternOption2 == null ? Input.empty() : this.patternOption2;
    }

    @InputImport(name="patternOptions")
      private final @Nullable Input<String> patternOptions;

    public Input<String> getPatternOptions() {
        return this.patternOptions == null ? Input.empty() : this.patternOptions;
    }

    @InputImport(name="period")
      private final @Nullable Input<String> period;

    public Input<String> getPeriod() {
        return this.period == null ? Input.empty() : this.period;
    }

    @InputImport(name="position")
      private final @Nullable Input<String> position;

    public Input<String> getPosition() {
        return this.position == null ? Input.empty() : this.position;
    }

    @InputImport(name="removeAllPunctuation")
      private final @Nullable Input<String> removeAllPunctuation;

    public Input<String> getRemoveAllPunctuation() {
        return this.removeAllPunctuation == null ? Input.empty() : this.removeAllPunctuation;
    }

    @InputImport(name="removeAllQuotes")
      private final @Nullable Input<String> removeAllQuotes;

    public Input<String> getRemoveAllQuotes() {
        return this.removeAllQuotes == null ? Input.empty() : this.removeAllQuotes;
    }

    @InputImport(name="removeAllWhitespace")
      private final @Nullable Input<String> removeAllWhitespace;

    public Input<String> getRemoveAllWhitespace() {
        return this.removeAllWhitespace == null ? Input.empty() : this.removeAllWhitespace;
    }

    @InputImport(name="removeCustomCharacters")
      private final @Nullable Input<String> removeCustomCharacters;

    public Input<String> getRemoveCustomCharacters() {
        return this.removeCustomCharacters == null ? Input.empty() : this.removeCustomCharacters;
    }

    @InputImport(name="removeCustomValue")
      private final @Nullable Input<String> removeCustomValue;

    public Input<String> getRemoveCustomValue() {
        return this.removeCustomValue == null ? Input.empty() : this.removeCustomValue;
    }

    @InputImport(name="removeLeadingAndTrailingPunctuation")
      private final @Nullable Input<String> removeLeadingAndTrailingPunctuation;

    public Input<String> getRemoveLeadingAndTrailingPunctuation() {
        return this.removeLeadingAndTrailingPunctuation == null ? Input.empty() : this.removeLeadingAndTrailingPunctuation;
    }

    @InputImport(name="removeLeadingAndTrailingQuotes")
      private final @Nullable Input<String> removeLeadingAndTrailingQuotes;

    public Input<String> getRemoveLeadingAndTrailingQuotes() {
        return this.removeLeadingAndTrailingQuotes == null ? Input.empty() : this.removeLeadingAndTrailingQuotes;
    }

    @InputImport(name="removeLeadingAndTrailingWhitespace")
      private final @Nullable Input<String> removeLeadingAndTrailingWhitespace;

    public Input<String> getRemoveLeadingAndTrailingWhitespace() {
        return this.removeLeadingAndTrailingWhitespace == null ? Input.empty() : this.removeLeadingAndTrailingWhitespace;
    }

    @InputImport(name="removeLetters")
      private final @Nullable Input<String> removeLetters;

    public Input<String> getRemoveLetters() {
        return this.removeLetters == null ? Input.empty() : this.removeLetters;
    }

    @InputImport(name="removeNumbers")
      private final @Nullable Input<String> removeNumbers;

    public Input<String> getRemoveNumbers() {
        return this.removeNumbers == null ? Input.empty() : this.removeNumbers;
    }

    @InputImport(name="removeSourceColumn")
      private final @Nullable Input<String> removeSourceColumn;

    public Input<String> getRemoveSourceColumn() {
        return this.removeSourceColumn == null ? Input.empty() : this.removeSourceColumn;
    }

    @InputImport(name="removeSpecialCharacters")
      private final @Nullable Input<String> removeSpecialCharacters;

    public Input<String> getRemoveSpecialCharacters() {
        return this.removeSpecialCharacters == null ? Input.empty() : this.removeSpecialCharacters;
    }

    @InputImport(name="rightColumns")
      private final @Nullable Input<String> rightColumns;

    public Input<String> getRightColumns() {
        return this.rightColumns == null ? Input.empty() : this.rightColumns;
    }

    @InputImport(name="sampleSize")
      private final @Nullable Input<String> sampleSize;

    public Input<String> getSampleSize() {
        return this.sampleSize == null ? Input.empty() : this.sampleSize;
    }

    @InputImport(name="sampleType")
      private final @Nullable Input<String> sampleType;

    public Input<String> getSampleType() {
        return this.sampleType == null ? Input.empty() : this.sampleType;
    }

    @InputImport(name="secondInput")
      private final @Nullable Input<String> secondInput;

    public Input<String> getSecondInput() {
        return this.secondInput == null ? Input.empty() : this.secondInput;
    }

    @InputImport(name="secondaryInputs")
      private final @Nullable Input<List<RecipeSecondaryInputArgs>> secondaryInputs;

    public Input<List<RecipeSecondaryInputArgs>> getSecondaryInputs() {
        return this.secondaryInputs == null ? Input.empty() : this.secondaryInputs;
    }

    @InputImport(name="sheetIndexes")
      private final @Nullable Input<List<Integer>> sheetIndexes;

    public Input<List<Integer>> getSheetIndexes() {
        return this.sheetIndexes == null ? Input.empty() : this.sheetIndexes;
    }

    @InputImport(name="sheetNames")
      private final @Nullable Input<List<String>> sheetNames;

    public Input<List<String>> getSheetNames() {
        return this.sheetNames == null ? Input.empty() : this.sheetNames;
    }

    @InputImport(name="sourceColumn")
      private final @Nullable Input<String> sourceColumn;

    public Input<String> getSourceColumn() {
        return this.sourceColumn == null ? Input.empty() : this.sourceColumn;
    }

    @InputImport(name="sourceColumn1")
      private final @Nullable Input<String> sourceColumn1;

    public Input<String> getSourceColumn1() {
        return this.sourceColumn1 == null ? Input.empty() : this.sourceColumn1;
    }

    @InputImport(name="sourceColumn2")
      private final @Nullable Input<String> sourceColumn2;

    public Input<String> getSourceColumn2() {
        return this.sourceColumn2 == null ? Input.empty() : this.sourceColumn2;
    }

    @InputImport(name="sourceColumns")
      private final @Nullable Input<String> sourceColumns;

    public Input<String> getSourceColumns() {
        return this.sourceColumns == null ? Input.empty() : this.sourceColumns;
    }

    @InputImport(name="startColumnIndex")
      private final @Nullable Input<String> startColumnIndex;

    public Input<String> getStartColumnIndex() {
        return this.startColumnIndex == null ? Input.empty() : this.startColumnIndex;
    }

    @InputImport(name="startPattern")
      private final @Nullable Input<String> startPattern;

    public Input<String> getStartPattern() {
        return this.startPattern == null ? Input.empty() : this.startPattern;
    }

    @InputImport(name="startPosition")
      private final @Nullable Input<String> startPosition;

    public Input<String> getStartPosition() {
        return this.startPosition == null ? Input.empty() : this.startPosition;
    }

    @InputImport(name="startValue")
      private final @Nullable Input<String> startValue;

    public Input<String> getStartValue() {
        return this.startValue == null ? Input.empty() : this.startValue;
    }

    @InputImport(name="stemmingMode")
      private final @Nullable Input<String> stemmingMode;

    public Input<String> getStemmingMode() {
        return this.stemmingMode == null ? Input.empty() : this.stemmingMode;
    }

    @InputImport(name="stepCount")
      private final @Nullable Input<String> stepCount;

    public Input<String> getStepCount() {
        return this.stepCount == null ? Input.empty() : this.stepCount;
    }

    @InputImport(name="stepIndex")
      private final @Nullable Input<String> stepIndex;

    public Input<String> getStepIndex() {
        return this.stepIndex == null ? Input.empty() : this.stepIndex;
    }

    @InputImport(name="stopWordsMode")
      private final @Nullable Input<String> stopWordsMode;

    public Input<String> getStopWordsMode() {
        return this.stopWordsMode == null ? Input.empty() : this.stopWordsMode;
    }

    @InputImport(name="strategy")
      private final @Nullable Input<String> strategy;

    public Input<String> getStrategy() {
        return this.strategy == null ? Input.empty() : this.strategy;
    }

    @InputImport(name="targetColumn")
      private final @Nullable Input<String> targetColumn;

    public Input<String> getTargetColumn() {
        return this.targetColumn == null ? Input.empty() : this.targetColumn;
    }

    @InputImport(name="targetColumnNames")
      private final @Nullable Input<String> targetColumnNames;

    public Input<String> getTargetColumnNames() {
        return this.targetColumnNames == null ? Input.empty() : this.targetColumnNames;
    }

    @InputImport(name="targetDateFormat")
      private final @Nullable Input<String> targetDateFormat;

    public Input<String> getTargetDateFormat() {
        return this.targetDateFormat == null ? Input.empty() : this.targetDateFormat;
    }

    @InputImport(name="targetIndex")
      private final @Nullable Input<String> targetIndex;

    public Input<String> getTargetIndex() {
        return this.targetIndex == null ? Input.empty() : this.targetIndex;
    }

    @InputImport(name="timeZone")
      private final @Nullable Input<String> timeZone;

    public Input<String> getTimeZone() {
        return this.timeZone == null ? Input.empty() : this.timeZone;
    }

    @InputImport(name="tokenizerPattern")
      private final @Nullable Input<String> tokenizerPattern;

    public Input<String> getTokenizerPattern() {
        return this.tokenizerPattern == null ? Input.empty() : this.tokenizerPattern;
    }

    @InputImport(name="trueString")
      private final @Nullable Input<String> trueString;

    public Input<String> getTrueString() {
        return this.trueString == null ? Input.empty() : this.trueString;
    }

    @InputImport(name="udfLang")
      private final @Nullable Input<String> udfLang;

    public Input<String> getUdfLang() {
        return this.udfLang == null ? Input.empty() : this.udfLang;
    }

    @InputImport(name="units")
      private final @Nullable Input<String> units;

    public Input<String> getUnits() {
        return this.units == null ? Input.empty() : this.units;
    }

    @InputImport(name="unpivotColumn")
      private final @Nullable Input<String> unpivotColumn;

    public Input<String> getUnpivotColumn() {
        return this.unpivotColumn == null ? Input.empty() : this.unpivotColumn;
    }

    @InputImport(name="upperBound")
      private final @Nullable Input<String> upperBound;

    public Input<String> getUpperBound() {
        return this.upperBound == null ? Input.empty() : this.upperBound;
    }

    @InputImport(name="useNewDataFrame")
      private final @Nullable Input<String> useNewDataFrame;

    public Input<String> getUseNewDataFrame() {
        return this.useNewDataFrame == null ? Input.empty() : this.useNewDataFrame;
    }

    @InputImport(name="value")
      private final @Nullable Input<String> value;

    public Input<String> getValue() {
        return this.value == null ? Input.empty() : this.value;
    }

    @InputImport(name="value1")
      private final @Nullable Input<String> value1;

    public Input<String> getValue1() {
        return this.value1 == null ? Input.empty() : this.value1;
    }

    @InputImport(name="value2")
      private final @Nullable Input<String> value2;

    public Input<String> getValue2() {
        return this.value2 == null ? Input.empty() : this.value2;
    }

    @InputImport(name="valueColumn")
      private final @Nullable Input<String> valueColumn;

    public Input<String> getValueColumn() {
        return this.valueColumn == null ? Input.empty() : this.valueColumn;
    }

    @InputImport(name="viewFrame")
      private final @Nullable Input<String> viewFrame;

    public Input<String> getViewFrame() {
        return this.viewFrame == null ? Input.empty() : this.viewFrame;
    }

    public RecipeParametersArgs(
        @Nullable Input<String> aggregateFunction,
        @Nullable Input<String> base,
        @Nullable Input<String> caseStatement,
        @Nullable Input<String> categoryMap,
        @Nullable Input<String> charsToRemove,
        @Nullable Input<String> collapseConsecutiveWhitespace,
        @Nullable Input<String> columnDataType,
        @Nullable Input<String> columnRange,
        @Nullable Input<String> count,
        @Nullable Input<String> customCharacters,
        @Nullable Input<String> customStopWords,
        @Nullable Input<String> customValue,
        @Nullable Input<String> datasetsColumns,
        @Nullable Input<String> dateAddValue,
        @Nullable Input<String> dateTimeFormat,
        @Nullable Input<String> dateTimeParameters,
        @Nullable Input<String> deleteOtherRows,
        @Nullable Input<String> delimiter,
        @Nullable Input<String> endPattern,
        @Nullable Input<String> endPosition,
        @Nullable Input<String> endValue,
        @Nullable Input<String> expandContractions,
        @Nullable Input<String> exponent,
        @Nullable Input<String> falseString,
        @Nullable Input<String> groupByAggFunctionOptions,
        @Nullable Input<String> groupByColumns,
        @Nullable Input<String> hiddenColumns,
        @Nullable Input<String> ignoreCase,
        @Nullable Input<String> includeInSplit,
        @Nullable Input<RecipeParametersInputPropertiesArgs> input,
        @Nullable Input<String> interval,
        @Nullable Input<String> isText,
        @Nullable Input<String> joinKeys,
        @Nullable Input<String> joinType,
        @Nullable Input<String> leftColumns,
        @Nullable Input<String> limit,
        @Nullable Input<String> lowerBound,
        @Nullable Input<String> mapType,
        @Nullable Input<String> modeType,
        @Nullable Input<Boolean> multiLine,
        @Nullable Input<String> numRows,
        @Nullable Input<String> numRowsAfter,
        @Nullable Input<String> numRowsBefore,
        @Nullable Input<String> orderByColumn,
        @Nullable Input<String> orderByColumns,
        @Nullable Input<String> other,
        @Nullable Input<String> pattern,
        @Nullable Input<String> patternOption1,
        @Nullable Input<String> patternOption2,
        @Nullable Input<String> patternOptions,
        @Nullable Input<String> period,
        @Nullable Input<String> position,
        @Nullable Input<String> removeAllPunctuation,
        @Nullable Input<String> removeAllQuotes,
        @Nullable Input<String> removeAllWhitespace,
        @Nullable Input<String> removeCustomCharacters,
        @Nullable Input<String> removeCustomValue,
        @Nullable Input<String> removeLeadingAndTrailingPunctuation,
        @Nullable Input<String> removeLeadingAndTrailingQuotes,
        @Nullable Input<String> removeLeadingAndTrailingWhitespace,
        @Nullable Input<String> removeLetters,
        @Nullable Input<String> removeNumbers,
        @Nullable Input<String> removeSourceColumn,
        @Nullable Input<String> removeSpecialCharacters,
        @Nullable Input<String> rightColumns,
        @Nullable Input<String> sampleSize,
        @Nullable Input<String> sampleType,
        @Nullable Input<String> secondInput,
        @Nullable Input<List<RecipeSecondaryInputArgs>> secondaryInputs,
        @Nullable Input<List<Integer>> sheetIndexes,
        @Nullable Input<List<String>> sheetNames,
        @Nullable Input<String> sourceColumn,
        @Nullable Input<String> sourceColumn1,
        @Nullable Input<String> sourceColumn2,
        @Nullable Input<String> sourceColumns,
        @Nullable Input<String> startColumnIndex,
        @Nullable Input<String> startPattern,
        @Nullable Input<String> startPosition,
        @Nullable Input<String> startValue,
        @Nullable Input<String> stemmingMode,
        @Nullable Input<String> stepCount,
        @Nullable Input<String> stepIndex,
        @Nullable Input<String> stopWordsMode,
        @Nullable Input<String> strategy,
        @Nullable Input<String> targetColumn,
        @Nullable Input<String> targetColumnNames,
        @Nullable Input<String> targetDateFormat,
        @Nullable Input<String> targetIndex,
        @Nullable Input<String> timeZone,
        @Nullable Input<String> tokenizerPattern,
        @Nullable Input<String> trueString,
        @Nullable Input<String> udfLang,
        @Nullable Input<String> units,
        @Nullable Input<String> unpivotColumn,
        @Nullable Input<String> upperBound,
        @Nullable Input<String> useNewDataFrame,
        @Nullable Input<String> value,
        @Nullable Input<String> value1,
        @Nullable Input<String> value2,
        @Nullable Input<String> valueColumn,
        @Nullable Input<String> viewFrame) {
        this.aggregateFunction = aggregateFunction;
        this.base = base;
        this.caseStatement = caseStatement;
        this.categoryMap = categoryMap;
        this.charsToRemove = charsToRemove;
        this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
        this.columnDataType = columnDataType;
        this.columnRange = columnRange;
        this.count = count;
        this.customCharacters = customCharacters;
        this.customStopWords = customStopWords;
        this.customValue = customValue;
        this.datasetsColumns = datasetsColumns;
        this.dateAddValue = dateAddValue;
        this.dateTimeFormat = dateTimeFormat;
        this.dateTimeParameters = dateTimeParameters;
        this.deleteOtherRows = deleteOtherRows;
        this.delimiter = delimiter;
        this.endPattern = endPattern;
        this.endPosition = endPosition;
        this.endValue = endValue;
        this.expandContractions = expandContractions;
        this.exponent = exponent;
        this.falseString = falseString;
        this.groupByAggFunctionOptions = groupByAggFunctionOptions;
        this.groupByColumns = groupByColumns;
        this.hiddenColumns = hiddenColumns;
        this.ignoreCase = ignoreCase;
        this.includeInSplit = includeInSplit;
        this.input = input;
        this.interval = interval;
        this.isText = isText;
        this.joinKeys = joinKeys;
        this.joinType = joinType;
        this.leftColumns = leftColumns;
        this.limit = limit;
        this.lowerBound = lowerBound;
        this.mapType = mapType;
        this.modeType = modeType;
        this.multiLine = multiLine;
        this.numRows = numRows;
        this.numRowsAfter = numRowsAfter;
        this.numRowsBefore = numRowsBefore;
        this.orderByColumn = orderByColumn;
        this.orderByColumns = orderByColumns;
        this.other = other;
        this.pattern = pattern;
        this.patternOption1 = patternOption1;
        this.patternOption2 = patternOption2;
        this.patternOptions = patternOptions;
        this.period = period;
        this.position = position;
        this.removeAllPunctuation = removeAllPunctuation;
        this.removeAllQuotes = removeAllQuotes;
        this.removeAllWhitespace = removeAllWhitespace;
        this.removeCustomCharacters = removeCustomCharacters;
        this.removeCustomValue = removeCustomValue;
        this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
        this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
        this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
        this.removeLetters = removeLetters;
        this.removeNumbers = removeNumbers;
        this.removeSourceColumn = removeSourceColumn;
        this.removeSpecialCharacters = removeSpecialCharacters;
        this.rightColumns = rightColumns;
        this.sampleSize = sampleSize;
        this.sampleType = sampleType;
        this.secondInput = secondInput;
        this.secondaryInputs = secondaryInputs;
        this.sheetIndexes = sheetIndexes;
        this.sheetNames = sheetNames;
        this.sourceColumn = sourceColumn;
        this.sourceColumn1 = sourceColumn1;
        this.sourceColumn2 = sourceColumn2;
        this.sourceColumns = sourceColumns;
        this.startColumnIndex = startColumnIndex;
        this.startPattern = startPattern;
        this.startPosition = startPosition;
        this.startValue = startValue;
        this.stemmingMode = stemmingMode;
        this.stepCount = stepCount;
        this.stepIndex = stepIndex;
        this.stopWordsMode = stopWordsMode;
        this.strategy = strategy;
        this.targetColumn = targetColumn;
        this.targetColumnNames = targetColumnNames;
        this.targetDateFormat = targetDateFormat;
        this.targetIndex = targetIndex;
        this.timeZone = timeZone;
        this.tokenizerPattern = tokenizerPattern;
        this.trueString = trueString;
        this.udfLang = udfLang;
        this.units = units;
        this.unpivotColumn = unpivotColumn;
        this.upperBound = upperBound;
        this.useNewDataFrame = useNewDataFrame;
        this.value = value;
        this.value1 = value1;
        this.value2 = value2;
        this.valueColumn = valueColumn;
        this.viewFrame = viewFrame;
    }

    private RecipeParametersArgs() {
        this.aggregateFunction = Input.empty();
        this.base = Input.empty();
        this.caseStatement = Input.empty();
        this.categoryMap = Input.empty();
        this.charsToRemove = Input.empty();
        this.collapseConsecutiveWhitespace = Input.empty();
        this.columnDataType = Input.empty();
        this.columnRange = Input.empty();
        this.count = Input.empty();
        this.customCharacters = Input.empty();
        this.customStopWords = Input.empty();
        this.customValue = Input.empty();
        this.datasetsColumns = Input.empty();
        this.dateAddValue = Input.empty();
        this.dateTimeFormat = Input.empty();
        this.dateTimeParameters = Input.empty();
        this.deleteOtherRows = Input.empty();
        this.delimiter = Input.empty();
        this.endPattern = Input.empty();
        this.endPosition = Input.empty();
        this.endValue = Input.empty();
        this.expandContractions = Input.empty();
        this.exponent = Input.empty();
        this.falseString = Input.empty();
        this.groupByAggFunctionOptions = Input.empty();
        this.groupByColumns = Input.empty();
        this.hiddenColumns = Input.empty();
        this.ignoreCase = Input.empty();
        this.includeInSplit = Input.empty();
        this.input = Input.empty();
        this.interval = Input.empty();
        this.isText = Input.empty();
        this.joinKeys = Input.empty();
        this.joinType = Input.empty();
        this.leftColumns = Input.empty();
        this.limit = Input.empty();
        this.lowerBound = Input.empty();
        this.mapType = Input.empty();
        this.modeType = Input.empty();
        this.multiLine = Input.empty();
        this.numRows = Input.empty();
        this.numRowsAfter = Input.empty();
        this.numRowsBefore = Input.empty();
        this.orderByColumn = Input.empty();
        this.orderByColumns = Input.empty();
        this.other = Input.empty();
        this.pattern = Input.empty();
        this.patternOption1 = Input.empty();
        this.patternOption2 = Input.empty();
        this.patternOptions = Input.empty();
        this.period = Input.empty();
        this.position = Input.empty();
        this.removeAllPunctuation = Input.empty();
        this.removeAllQuotes = Input.empty();
        this.removeAllWhitespace = Input.empty();
        this.removeCustomCharacters = Input.empty();
        this.removeCustomValue = Input.empty();
        this.removeLeadingAndTrailingPunctuation = Input.empty();
        this.removeLeadingAndTrailingQuotes = Input.empty();
        this.removeLeadingAndTrailingWhitespace = Input.empty();
        this.removeLetters = Input.empty();
        this.removeNumbers = Input.empty();
        this.removeSourceColumn = Input.empty();
        this.removeSpecialCharacters = Input.empty();
        this.rightColumns = Input.empty();
        this.sampleSize = Input.empty();
        this.sampleType = Input.empty();
        this.secondInput = Input.empty();
        this.secondaryInputs = Input.empty();
        this.sheetIndexes = Input.empty();
        this.sheetNames = Input.empty();
        this.sourceColumn = Input.empty();
        this.sourceColumn1 = Input.empty();
        this.sourceColumn2 = Input.empty();
        this.sourceColumns = Input.empty();
        this.startColumnIndex = Input.empty();
        this.startPattern = Input.empty();
        this.startPosition = Input.empty();
        this.startValue = Input.empty();
        this.stemmingMode = Input.empty();
        this.stepCount = Input.empty();
        this.stepIndex = Input.empty();
        this.stopWordsMode = Input.empty();
        this.strategy = Input.empty();
        this.targetColumn = Input.empty();
        this.targetColumnNames = Input.empty();
        this.targetDateFormat = Input.empty();
        this.targetIndex = Input.empty();
        this.timeZone = Input.empty();
        this.tokenizerPattern = Input.empty();
        this.trueString = Input.empty();
        this.udfLang = Input.empty();
        this.units = Input.empty();
        this.unpivotColumn = Input.empty();
        this.upperBound = Input.empty();
        this.useNewDataFrame = Input.empty();
        this.value = Input.empty();
        this.value1 = Input.empty();
        this.value2 = Input.empty();
        this.valueColumn = Input.empty();
        this.viewFrame = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecipeParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> aggregateFunction;
        private @Nullable Input<String> base;
        private @Nullable Input<String> caseStatement;
        private @Nullable Input<String> categoryMap;
        private @Nullable Input<String> charsToRemove;
        private @Nullable Input<String> collapseConsecutiveWhitespace;
        private @Nullable Input<String> columnDataType;
        private @Nullable Input<String> columnRange;
        private @Nullable Input<String> count;
        private @Nullable Input<String> customCharacters;
        private @Nullable Input<String> customStopWords;
        private @Nullable Input<String> customValue;
        private @Nullable Input<String> datasetsColumns;
        private @Nullable Input<String> dateAddValue;
        private @Nullable Input<String> dateTimeFormat;
        private @Nullable Input<String> dateTimeParameters;
        private @Nullable Input<String> deleteOtherRows;
        private @Nullable Input<String> delimiter;
        private @Nullable Input<String> endPattern;
        private @Nullable Input<String> endPosition;
        private @Nullable Input<String> endValue;
        private @Nullable Input<String> expandContractions;
        private @Nullable Input<String> exponent;
        private @Nullable Input<String> falseString;
        private @Nullable Input<String> groupByAggFunctionOptions;
        private @Nullable Input<String> groupByColumns;
        private @Nullable Input<String> hiddenColumns;
        private @Nullable Input<String> ignoreCase;
        private @Nullable Input<String> includeInSplit;
        private @Nullable Input<RecipeParametersInputPropertiesArgs> input;
        private @Nullable Input<String> interval;
        private @Nullable Input<String> isText;
        private @Nullable Input<String> joinKeys;
        private @Nullable Input<String> joinType;
        private @Nullable Input<String> leftColumns;
        private @Nullable Input<String> limit;
        private @Nullable Input<String> lowerBound;
        private @Nullable Input<String> mapType;
        private @Nullable Input<String> modeType;
        private @Nullable Input<Boolean> multiLine;
        private @Nullable Input<String> numRows;
        private @Nullable Input<String> numRowsAfter;
        private @Nullable Input<String> numRowsBefore;
        private @Nullable Input<String> orderByColumn;
        private @Nullable Input<String> orderByColumns;
        private @Nullable Input<String> other;
        private @Nullable Input<String> pattern;
        private @Nullable Input<String> patternOption1;
        private @Nullable Input<String> patternOption2;
        private @Nullable Input<String> patternOptions;
        private @Nullable Input<String> period;
        private @Nullable Input<String> position;
        private @Nullable Input<String> removeAllPunctuation;
        private @Nullable Input<String> removeAllQuotes;
        private @Nullable Input<String> removeAllWhitespace;
        private @Nullable Input<String> removeCustomCharacters;
        private @Nullable Input<String> removeCustomValue;
        private @Nullable Input<String> removeLeadingAndTrailingPunctuation;
        private @Nullable Input<String> removeLeadingAndTrailingQuotes;
        private @Nullable Input<String> removeLeadingAndTrailingWhitespace;
        private @Nullable Input<String> removeLetters;
        private @Nullable Input<String> removeNumbers;
        private @Nullable Input<String> removeSourceColumn;
        private @Nullable Input<String> removeSpecialCharacters;
        private @Nullable Input<String> rightColumns;
        private @Nullable Input<String> sampleSize;
        private @Nullable Input<String> sampleType;
        private @Nullable Input<String> secondInput;
        private @Nullable Input<List<RecipeSecondaryInputArgs>> secondaryInputs;
        private @Nullable Input<List<Integer>> sheetIndexes;
        private @Nullable Input<List<String>> sheetNames;
        private @Nullable Input<String> sourceColumn;
        private @Nullable Input<String> sourceColumn1;
        private @Nullable Input<String> sourceColumn2;
        private @Nullable Input<String> sourceColumns;
        private @Nullable Input<String> startColumnIndex;
        private @Nullable Input<String> startPattern;
        private @Nullable Input<String> startPosition;
        private @Nullable Input<String> startValue;
        private @Nullable Input<String> stemmingMode;
        private @Nullable Input<String> stepCount;
        private @Nullable Input<String> stepIndex;
        private @Nullable Input<String> stopWordsMode;
        private @Nullable Input<String> strategy;
        private @Nullable Input<String> targetColumn;
        private @Nullable Input<String> targetColumnNames;
        private @Nullable Input<String> targetDateFormat;
        private @Nullable Input<String> targetIndex;
        private @Nullable Input<String> timeZone;
        private @Nullable Input<String> tokenizerPattern;
        private @Nullable Input<String> trueString;
        private @Nullable Input<String> udfLang;
        private @Nullable Input<String> units;
        private @Nullable Input<String> unpivotColumn;
        private @Nullable Input<String> upperBound;
        private @Nullable Input<String> useNewDataFrame;
        private @Nullable Input<String> value;
        private @Nullable Input<String> value1;
        private @Nullable Input<String> value2;
        private @Nullable Input<String> valueColumn;
        private @Nullable Input<String> viewFrame;

        public Builder() {
    	      // Empty
        }

        public Builder(RecipeParametersArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregateFunction = defaults.aggregateFunction;
    	      this.base = defaults.base;
    	      this.caseStatement = defaults.caseStatement;
    	      this.categoryMap = defaults.categoryMap;
    	      this.charsToRemove = defaults.charsToRemove;
    	      this.collapseConsecutiveWhitespace = defaults.collapseConsecutiveWhitespace;
    	      this.columnDataType = defaults.columnDataType;
    	      this.columnRange = defaults.columnRange;
    	      this.count = defaults.count;
    	      this.customCharacters = defaults.customCharacters;
    	      this.customStopWords = defaults.customStopWords;
    	      this.customValue = defaults.customValue;
    	      this.datasetsColumns = defaults.datasetsColumns;
    	      this.dateAddValue = defaults.dateAddValue;
    	      this.dateTimeFormat = defaults.dateTimeFormat;
    	      this.dateTimeParameters = defaults.dateTimeParameters;
    	      this.deleteOtherRows = defaults.deleteOtherRows;
    	      this.delimiter = defaults.delimiter;
    	      this.endPattern = defaults.endPattern;
    	      this.endPosition = defaults.endPosition;
    	      this.endValue = defaults.endValue;
    	      this.expandContractions = defaults.expandContractions;
    	      this.exponent = defaults.exponent;
    	      this.falseString = defaults.falseString;
    	      this.groupByAggFunctionOptions = defaults.groupByAggFunctionOptions;
    	      this.groupByColumns = defaults.groupByColumns;
    	      this.hiddenColumns = defaults.hiddenColumns;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.includeInSplit = defaults.includeInSplit;
    	      this.input = defaults.input;
    	      this.interval = defaults.interval;
    	      this.isText = defaults.isText;
    	      this.joinKeys = defaults.joinKeys;
    	      this.joinType = defaults.joinType;
    	      this.leftColumns = defaults.leftColumns;
    	      this.limit = defaults.limit;
    	      this.lowerBound = defaults.lowerBound;
    	      this.mapType = defaults.mapType;
    	      this.modeType = defaults.modeType;
    	      this.multiLine = defaults.multiLine;
    	      this.numRows = defaults.numRows;
    	      this.numRowsAfter = defaults.numRowsAfter;
    	      this.numRowsBefore = defaults.numRowsBefore;
    	      this.orderByColumn = defaults.orderByColumn;
    	      this.orderByColumns = defaults.orderByColumns;
    	      this.other = defaults.other;
    	      this.pattern = defaults.pattern;
    	      this.patternOption1 = defaults.patternOption1;
    	      this.patternOption2 = defaults.patternOption2;
    	      this.patternOptions = defaults.patternOptions;
    	      this.period = defaults.period;
    	      this.position = defaults.position;
    	      this.removeAllPunctuation = defaults.removeAllPunctuation;
    	      this.removeAllQuotes = defaults.removeAllQuotes;
    	      this.removeAllWhitespace = defaults.removeAllWhitespace;
    	      this.removeCustomCharacters = defaults.removeCustomCharacters;
    	      this.removeCustomValue = defaults.removeCustomValue;
    	      this.removeLeadingAndTrailingPunctuation = defaults.removeLeadingAndTrailingPunctuation;
    	      this.removeLeadingAndTrailingQuotes = defaults.removeLeadingAndTrailingQuotes;
    	      this.removeLeadingAndTrailingWhitespace = defaults.removeLeadingAndTrailingWhitespace;
    	      this.removeLetters = defaults.removeLetters;
    	      this.removeNumbers = defaults.removeNumbers;
    	      this.removeSourceColumn = defaults.removeSourceColumn;
    	      this.removeSpecialCharacters = defaults.removeSpecialCharacters;
    	      this.rightColumns = defaults.rightColumns;
    	      this.sampleSize = defaults.sampleSize;
    	      this.sampleType = defaults.sampleType;
    	      this.secondInput = defaults.secondInput;
    	      this.secondaryInputs = defaults.secondaryInputs;
    	      this.sheetIndexes = defaults.sheetIndexes;
    	      this.sheetNames = defaults.sheetNames;
    	      this.sourceColumn = defaults.sourceColumn;
    	      this.sourceColumn1 = defaults.sourceColumn1;
    	      this.sourceColumn2 = defaults.sourceColumn2;
    	      this.sourceColumns = defaults.sourceColumns;
    	      this.startColumnIndex = defaults.startColumnIndex;
    	      this.startPattern = defaults.startPattern;
    	      this.startPosition = defaults.startPosition;
    	      this.startValue = defaults.startValue;
    	      this.stemmingMode = defaults.stemmingMode;
    	      this.stepCount = defaults.stepCount;
    	      this.stepIndex = defaults.stepIndex;
    	      this.stopWordsMode = defaults.stopWordsMode;
    	      this.strategy = defaults.strategy;
    	      this.targetColumn = defaults.targetColumn;
    	      this.targetColumnNames = defaults.targetColumnNames;
    	      this.targetDateFormat = defaults.targetDateFormat;
    	      this.targetIndex = defaults.targetIndex;
    	      this.timeZone = defaults.timeZone;
    	      this.tokenizerPattern = defaults.tokenizerPattern;
    	      this.trueString = defaults.trueString;
    	      this.udfLang = defaults.udfLang;
    	      this.units = defaults.units;
    	      this.unpivotColumn = defaults.unpivotColumn;
    	      this.upperBound = defaults.upperBound;
    	      this.useNewDataFrame = defaults.useNewDataFrame;
    	      this.value = defaults.value;
    	      this.value1 = defaults.value1;
    	      this.value2 = defaults.value2;
    	      this.valueColumn = defaults.valueColumn;
    	      this.viewFrame = defaults.viewFrame;
        }

        public Builder setAggregateFunction(@Nullable Input<String> aggregateFunction) {
            this.aggregateFunction = aggregateFunction;
            return this;
        }

        public Builder setAggregateFunction(@Nullable String aggregateFunction) {
            this.aggregateFunction = Input.ofNullable(aggregateFunction);
            return this;
        }

        public Builder setBase(@Nullable Input<String> base) {
            this.base = base;
            return this;
        }

        public Builder setBase(@Nullable String base) {
            this.base = Input.ofNullable(base);
            return this;
        }

        public Builder setCaseStatement(@Nullable Input<String> caseStatement) {
            this.caseStatement = caseStatement;
            return this;
        }

        public Builder setCaseStatement(@Nullable String caseStatement) {
            this.caseStatement = Input.ofNullable(caseStatement);
            return this;
        }

        public Builder setCategoryMap(@Nullable Input<String> categoryMap) {
            this.categoryMap = categoryMap;
            return this;
        }

        public Builder setCategoryMap(@Nullable String categoryMap) {
            this.categoryMap = Input.ofNullable(categoryMap);
            return this;
        }

        public Builder setCharsToRemove(@Nullable Input<String> charsToRemove) {
            this.charsToRemove = charsToRemove;
            return this;
        }

        public Builder setCharsToRemove(@Nullable String charsToRemove) {
            this.charsToRemove = Input.ofNullable(charsToRemove);
            return this;
        }

        public Builder setCollapseConsecutiveWhitespace(@Nullable Input<String> collapseConsecutiveWhitespace) {
            this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            return this;
        }

        public Builder setCollapseConsecutiveWhitespace(@Nullable String collapseConsecutiveWhitespace) {
            this.collapseConsecutiveWhitespace = Input.ofNullable(collapseConsecutiveWhitespace);
            return this;
        }

        public Builder setColumnDataType(@Nullable Input<String> columnDataType) {
            this.columnDataType = columnDataType;
            return this;
        }

        public Builder setColumnDataType(@Nullable String columnDataType) {
            this.columnDataType = Input.ofNullable(columnDataType);
            return this;
        }

        public Builder setColumnRange(@Nullable Input<String> columnRange) {
            this.columnRange = columnRange;
            return this;
        }

        public Builder setColumnRange(@Nullable String columnRange) {
            this.columnRange = Input.ofNullable(columnRange);
            return this;
        }

        public Builder setCount(@Nullable Input<String> count) {
            this.count = count;
            return this;
        }

        public Builder setCount(@Nullable String count) {
            this.count = Input.ofNullable(count);
            return this;
        }

        public Builder setCustomCharacters(@Nullable Input<String> customCharacters) {
            this.customCharacters = customCharacters;
            return this;
        }

        public Builder setCustomCharacters(@Nullable String customCharacters) {
            this.customCharacters = Input.ofNullable(customCharacters);
            return this;
        }

        public Builder setCustomStopWords(@Nullable Input<String> customStopWords) {
            this.customStopWords = customStopWords;
            return this;
        }

        public Builder setCustomStopWords(@Nullable String customStopWords) {
            this.customStopWords = Input.ofNullable(customStopWords);
            return this;
        }

        public Builder setCustomValue(@Nullable Input<String> customValue) {
            this.customValue = customValue;
            return this;
        }

        public Builder setCustomValue(@Nullable String customValue) {
            this.customValue = Input.ofNullable(customValue);
            return this;
        }

        public Builder setDatasetsColumns(@Nullable Input<String> datasetsColumns) {
            this.datasetsColumns = datasetsColumns;
            return this;
        }

        public Builder setDatasetsColumns(@Nullable String datasetsColumns) {
            this.datasetsColumns = Input.ofNullable(datasetsColumns);
            return this;
        }

        public Builder setDateAddValue(@Nullable Input<String> dateAddValue) {
            this.dateAddValue = dateAddValue;
            return this;
        }

        public Builder setDateAddValue(@Nullable String dateAddValue) {
            this.dateAddValue = Input.ofNullable(dateAddValue);
            return this;
        }

        public Builder setDateTimeFormat(@Nullable Input<String> dateTimeFormat) {
            this.dateTimeFormat = dateTimeFormat;
            return this;
        }

        public Builder setDateTimeFormat(@Nullable String dateTimeFormat) {
            this.dateTimeFormat = Input.ofNullable(dateTimeFormat);
            return this;
        }

        public Builder setDateTimeParameters(@Nullable Input<String> dateTimeParameters) {
            this.dateTimeParameters = dateTimeParameters;
            return this;
        }

        public Builder setDateTimeParameters(@Nullable String dateTimeParameters) {
            this.dateTimeParameters = Input.ofNullable(dateTimeParameters);
            return this;
        }

        public Builder setDeleteOtherRows(@Nullable Input<String> deleteOtherRows) {
            this.deleteOtherRows = deleteOtherRows;
            return this;
        }

        public Builder setDeleteOtherRows(@Nullable String deleteOtherRows) {
            this.deleteOtherRows = Input.ofNullable(deleteOtherRows);
            return this;
        }

        public Builder setDelimiter(@Nullable Input<String> delimiter) {
            this.delimiter = delimiter;
            return this;
        }

        public Builder setDelimiter(@Nullable String delimiter) {
            this.delimiter = Input.ofNullable(delimiter);
            return this;
        }

        public Builder setEndPattern(@Nullable Input<String> endPattern) {
            this.endPattern = endPattern;
            return this;
        }

        public Builder setEndPattern(@Nullable String endPattern) {
            this.endPattern = Input.ofNullable(endPattern);
            return this;
        }

        public Builder setEndPosition(@Nullable Input<String> endPosition) {
            this.endPosition = endPosition;
            return this;
        }

        public Builder setEndPosition(@Nullable String endPosition) {
            this.endPosition = Input.ofNullable(endPosition);
            return this;
        }

        public Builder setEndValue(@Nullable Input<String> endValue) {
            this.endValue = endValue;
            return this;
        }

        public Builder setEndValue(@Nullable String endValue) {
            this.endValue = Input.ofNullable(endValue);
            return this;
        }

        public Builder setExpandContractions(@Nullable Input<String> expandContractions) {
            this.expandContractions = expandContractions;
            return this;
        }

        public Builder setExpandContractions(@Nullable String expandContractions) {
            this.expandContractions = Input.ofNullable(expandContractions);
            return this;
        }

        public Builder setExponent(@Nullable Input<String> exponent) {
            this.exponent = exponent;
            return this;
        }

        public Builder setExponent(@Nullable String exponent) {
            this.exponent = Input.ofNullable(exponent);
            return this;
        }

        public Builder setFalseString(@Nullable Input<String> falseString) {
            this.falseString = falseString;
            return this;
        }

        public Builder setFalseString(@Nullable String falseString) {
            this.falseString = Input.ofNullable(falseString);
            return this;
        }

        public Builder setGroupByAggFunctionOptions(@Nullable Input<String> groupByAggFunctionOptions) {
            this.groupByAggFunctionOptions = groupByAggFunctionOptions;
            return this;
        }

        public Builder setGroupByAggFunctionOptions(@Nullable String groupByAggFunctionOptions) {
            this.groupByAggFunctionOptions = Input.ofNullable(groupByAggFunctionOptions);
            return this;
        }

        public Builder setGroupByColumns(@Nullable Input<String> groupByColumns) {
            this.groupByColumns = groupByColumns;
            return this;
        }

        public Builder setGroupByColumns(@Nullable String groupByColumns) {
            this.groupByColumns = Input.ofNullable(groupByColumns);
            return this;
        }

        public Builder setHiddenColumns(@Nullable Input<String> hiddenColumns) {
            this.hiddenColumns = hiddenColumns;
            return this;
        }

        public Builder setHiddenColumns(@Nullable String hiddenColumns) {
            this.hiddenColumns = Input.ofNullable(hiddenColumns);
            return this;
        }

        public Builder setIgnoreCase(@Nullable Input<String> ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }

        public Builder setIgnoreCase(@Nullable String ignoreCase) {
            this.ignoreCase = Input.ofNullable(ignoreCase);
            return this;
        }

        public Builder setIncludeInSplit(@Nullable Input<String> includeInSplit) {
            this.includeInSplit = includeInSplit;
            return this;
        }

        public Builder setIncludeInSplit(@Nullable String includeInSplit) {
            this.includeInSplit = Input.ofNullable(includeInSplit);
            return this;
        }

        public Builder setInput(@Nullable Input<RecipeParametersInputPropertiesArgs> input) {
            this.input = input;
            return this;
        }

        public Builder setInput(@Nullable RecipeParametersInputPropertiesArgs input) {
            this.input = Input.ofNullable(input);
            return this;
        }

        public Builder setInterval(@Nullable Input<String> interval) {
            this.interval = interval;
            return this;
        }

        public Builder setInterval(@Nullable String interval) {
            this.interval = Input.ofNullable(interval);
            return this;
        }

        public Builder setIsText(@Nullable Input<String> isText) {
            this.isText = isText;
            return this;
        }

        public Builder setIsText(@Nullable String isText) {
            this.isText = Input.ofNullable(isText);
            return this;
        }

        public Builder setJoinKeys(@Nullable Input<String> joinKeys) {
            this.joinKeys = joinKeys;
            return this;
        }

        public Builder setJoinKeys(@Nullable String joinKeys) {
            this.joinKeys = Input.ofNullable(joinKeys);
            return this;
        }

        public Builder setJoinType(@Nullable Input<String> joinType) {
            this.joinType = joinType;
            return this;
        }

        public Builder setJoinType(@Nullable String joinType) {
            this.joinType = Input.ofNullable(joinType);
            return this;
        }

        public Builder setLeftColumns(@Nullable Input<String> leftColumns) {
            this.leftColumns = leftColumns;
            return this;
        }

        public Builder setLeftColumns(@Nullable String leftColumns) {
            this.leftColumns = Input.ofNullable(leftColumns);
            return this;
        }

        public Builder setLimit(@Nullable Input<String> limit) {
            this.limit = limit;
            return this;
        }

        public Builder setLimit(@Nullable String limit) {
            this.limit = Input.ofNullable(limit);
            return this;
        }

        public Builder setLowerBound(@Nullable Input<String> lowerBound) {
            this.lowerBound = lowerBound;
            return this;
        }

        public Builder setLowerBound(@Nullable String lowerBound) {
            this.lowerBound = Input.ofNullable(lowerBound);
            return this;
        }

        public Builder setMapType(@Nullable Input<String> mapType) {
            this.mapType = mapType;
            return this;
        }

        public Builder setMapType(@Nullable String mapType) {
            this.mapType = Input.ofNullable(mapType);
            return this;
        }

        public Builder setModeType(@Nullable Input<String> modeType) {
            this.modeType = modeType;
            return this;
        }

        public Builder setModeType(@Nullable String modeType) {
            this.modeType = Input.ofNullable(modeType);
            return this;
        }

        public Builder setMultiLine(@Nullable Input<Boolean> multiLine) {
            this.multiLine = multiLine;
            return this;
        }

        public Builder setMultiLine(@Nullable Boolean multiLine) {
            this.multiLine = Input.ofNullable(multiLine);
            return this;
        }

        public Builder setNumRows(@Nullable Input<String> numRows) {
            this.numRows = numRows;
            return this;
        }

        public Builder setNumRows(@Nullable String numRows) {
            this.numRows = Input.ofNullable(numRows);
            return this;
        }

        public Builder setNumRowsAfter(@Nullable Input<String> numRowsAfter) {
            this.numRowsAfter = numRowsAfter;
            return this;
        }

        public Builder setNumRowsAfter(@Nullable String numRowsAfter) {
            this.numRowsAfter = Input.ofNullable(numRowsAfter);
            return this;
        }

        public Builder setNumRowsBefore(@Nullable Input<String> numRowsBefore) {
            this.numRowsBefore = numRowsBefore;
            return this;
        }

        public Builder setNumRowsBefore(@Nullable String numRowsBefore) {
            this.numRowsBefore = Input.ofNullable(numRowsBefore);
            return this;
        }

        public Builder setOrderByColumn(@Nullable Input<String> orderByColumn) {
            this.orderByColumn = orderByColumn;
            return this;
        }

        public Builder setOrderByColumn(@Nullable String orderByColumn) {
            this.orderByColumn = Input.ofNullable(orderByColumn);
            return this;
        }

        public Builder setOrderByColumns(@Nullable Input<String> orderByColumns) {
            this.orderByColumns = orderByColumns;
            return this;
        }

        public Builder setOrderByColumns(@Nullable String orderByColumns) {
            this.orderByColumns = Input.ofNullable(orderByColumns);
            return this;
        }

        public Builder setOther(@Nullable Input<String> other) {
            this.other = other;
            return this;
        }

        public Builder setOther(@Nullable String other) {
            this.other = Input.ofNullable(other);
            return this;
        }

        public Builder setPattern(@Nullable Input<String> pattern) {
            this.pattern = pattern;
            return this;
        }

        public Builder setPattern(@Nullable String pattern) {
            this.pattern = Input.ofNullable(pattern);
            return this;
        }

        public Builder setPatternOption1(@Nullable Input<String> patternOption1) {
            this.patternOption1 = patternOption1;
            return this;
        }

        public Builder setPatternOption1(@Nullable String patternOption1) {
            this.patternOption1 = Input.ofNullable(patternOption1);
            return this;
        }

        public Builder setPatternOption2(@Nullable Input<String> patternOption2) {
            this.patternOption2 = patternOption2;
            return this;
        }

        public Builder setPatternOption2(@Nullable String patternOption2) {
            this.patternOption2 = Input.ofNullable(patternOption2);
            return this;
        }

        public Builder setPatternOptions(@Nullable Input<String> patternOptions) {
            this.patternOptions = patternOptions;
            return this;
        }

        public Builder setPatternOptions(@Nullable String patternOptions) {
            this.patternOptions = Input.ofNullable(patternOptions);
            return this;
        }

        public Builder setPeriod(@Nullable Input<String> period) {
            this.period = period;
            return this;
        }

        public Builder setPeriod(@Nullable String period) {
            this.period = Input.ofNullable(period);
            return this;
        }

        public Builder setPosition(@Nullable Input<String> position) {
            this.position = position;
            return this;
        }

        public Builder setPosition(@Nullable String position) {
            this.position = Input.ofNullable(position);
            return this;
        }

        public Builder setRemoveAllPunctuation(@Nullable Input<String> removeAllPunctuation) {
            this.removeAllPunctuation = removeAllPunctuation;
            return this;
        }

        public Builder setRemoveAllPunctuation(@Nullable String removeAllPunctuation) {
            this.removeAllPunctuation = Input.ofNullable(removeAllPunctuation);
            return this;
        }

        public Builder setRemoveAllQuotes(@Nullable Input<String> removeAllQuotes) {
            this.removeAllQuotes = removeAllQuotes;
            return this;
        }

        public Builder setRemoveAllQuotes(@Nullable String removeAllQuotes) {
            this.removeAllQuotes = Input.ofNullable(removeAllQuotes);
            return this;
        }

        public Builder setRemoveAllWhitespace(@Nullable Input<String> removeAllWhitespace) {
            this.removeAllWhitespace = removeAllWhitespace;
            return this;
        }

        public Builder setRemoveAllWhitespace(@Nullable String removeAllWhitespace) {
            this.removeAllWhitespace = Input.ofNullable(removeAllWhitespace);
            return this;
        }

        public Builder setRemoveCustomCharacters(@Nullable Input<String> removeCustomCharacters) {
            this.removeCustomCharacters = removeCustomCharacters;
            return this;
        }

        public Builder setRemoveCustomCharacters(@Nullable String removeCustomCharacters) {
            this.removeCustomCharacters = Input.ofNullable(removeCustomCharacters);
            return this;
        }

        public Builder setRemoveCustomValue(@Nullable Input<String> removeCustomValue) {
            this.removeCustomValue = removeCustomValue;
            return this;
        }

        public Builder setRemoveCustomValue(@Nullable String removeCustomValue) {
            this.removeCustomValue = Input.ofNullable(removeCustomValue);
            return this;
        }

        public Builder setRemoveLeadingAndTrailingPunctuation(@Nullable Input<String> removeLeadingAndTrailingPunctuation) {
            this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            return this;
        }

        public Builder setRemoveLeadingAndTrailingPunctuation(@Nullable String removeLeadingAndTrailingPunctuation) {
            this.removeLeadingAndTrailingPunctuation = Input.ofNullable(removeLeadingAndTrailingPunctuation);
            return this;
        }

        public Builder setRemoveLeadingAndTrailingQuotes(@Nullable Input<String> removeLeadingAndTrailingQuotes) {
            this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            return this;
        }

        public Builder setRemoveLeadingAndTrailingQuotes(@Nullable String removeLeadingAndTrailingQuotes) {
            this.removeLeadingAndTrailingQuotes = Input.ofNullable(removeLeadingAndTrailingQuotes);
            return this;
        }

        public Builder setRemoveLeadingAndTrailingWhitespace(@Nullable Input<String> removeLeadingAndTrailingWhitespace) {
            this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            return this;
        }

        public Builder setRemoveLeadingAndTrailingWhitespace(@Nullable String removeLeadingAndTrailingWhitespace) {
            this.removeLeadingAndTrailingWhitespace = Input.ofNullable(removeLeadingAndTrailingWhitespace);
            return this;
        }

        public Builder setRemoveLetters(@Nullable Input<String> removeLetters) {
            this.removeLetters = removeLetters;
            return this;
        }

        public Builder setRemoveLetters(@Nullable String removeLetters) {
            this.removeLetters = Input.ofNullable(removeLetters);
            return this;
        }

        public Builder setRemoveNumbers(@Nullable Input<String> removeNumbers) {
            this.removeNumbers = removeNumbers;
            return this;
        }

        public Builder setRemoveNumbers(@Nullable String removeNumbers) {
            this.removeNumbers = Input.ofNullable(removeNumbers);
            return this;
        }

        public Builder setRemoveSourceColumn(@Nullable Input<String> removeSourceColumn) {
            this.removeSourceColumn = removeSourceColumn;
            return this;
        }

        public Builder setRemoveSourceColumn(@Nullable String removeSourceColumn) {
            this.removeSourceColumn = Input.ofNullable(removeSourceColumn);
            return this;
        }

        public Builder setRemoveSpecialCharacters(@Nullable Input<String> removeSpecialCharacters) {
            this.removeSpecialCharacters = removeSpecialCharacters;
            return this;
        }

        public Builder setRemoveSpecialCharacters(@Nullable String removeSpecialCharacters) {
            this.removeSpecialCharacters = Input.ofNullable(removeSpecialCharacters);
            return this;
        }

        public Builder setRightColumns(@Nullable Input<String> rightColumns) {
            this.rightColumns = rightColumns;
            return this;
        }

        public Builder setRightColumns(@Nullable String rightColumns) {
            this.rightColumns = Input.ofNullable(rightColumns);
            return this;
        }

        public Builder setSampleSize(@Nullable Input<String> sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }

        public Builder setSampleSize(@Nullable String sampleSize) {
            this.sampleSize = Input.ofNullable(sampleSize);
            return this;
        }

        public Builder setSampleType(@Nullable Input<String> sampleType) {
            this.sampleType = sampleType;
            return this;
        }

        public Builder setSampleType(@Nullable String sampleType) {
            this.sampleType = Input.ofNullable(sampleType);
            return this;
        }

        public Builder setSecondInput(@Nullable Input<String> secondInput) {
            this.secondInput = secondInput;
            return this;
        }

        public Builder setSecondInput(@Nullable String secondInput) {
            this.secondInput = Input.ofNullable(secondInput);
            return this;
        }

        public Builder setSecondaryInputs(@Nullable Input<List<RecipeSecondaryInputArgs>> secondaryInputs) {
            this.secondaryInputs = secondaryInputs;
            return this;
        }

        public Builder setSecondaryInputs(@Nullable List<RecipeSecondaryInputArgs> secondaryInputs) {
            this.secondaryInputs = Input.ofNullable(secondaryInputs);
            return this;
        }

        public Builder setSheetIndexes(@Nullable Input<List<Integer>> sheetIndexes) {
            this.sheetIndexes = sheetIndexes;
            return this;
        }

        public Builder setSheetIndexes(@Nullable List<Integer> sheetIndexes) {
            this.sheetIndexes = Input.ofNullable(sheetIndexes);
            return this;
        }

        public Builder setSheetNames(@Nullable Input<List<String>> sheetNames) {
            this.sheetNames = sheetNames;
            return this;
        }

        public Builder setSheetNames(@Nullable List<String> sheetNames) {
            this.sheetNames = Input.ofNullable(sheetNames);
            return this;
        }

        public Builder setSourceColumn(@Nullable Input<String> sourceColumn) {
            this.sourceColumn = sourceColumn;
            return this;
        }

        public Builder setSourceColumn(@Nullable String sourceColumn) {
            this.sourceColumn = Input.ofNullable(sourceColumn);
            return this;
        }

        public Builder setSourceColumn1(@Nullable Input<String> sourceColumn1) {
            this.sourceColumn1 = sourceColumn1;
            return this;
        }

        public Builder setSourceColumn1(@Nullable String sourceColumn1) {
            this.sourceColumn1 = Input.ofNullable(sourceColumn1);
            return this;
        }

        public Builder setSourceColumn2(@Nullable Input<String> sourceColumn2) {
            this.sourceColumn2 = sourceColumn2;
            return this;
        }

        public Builder setSourceColumn2(@Nullable String sourceColumn2) {
            this.sourceColumn2 = Input.ofNullable(sourceColumn2);
            return this;
        }

        public Builder setSourceColumns(@Nullable Input<String> sourceColumns) {
            this.sourceColumns = sourceColumns;
            return this;
        }

        public Builder setSourceColumns(@Nullable String sourceColumns) {
            this.sourceColumns = Input.ofNullable(sourceColumns);
            return this;
        }

        public Builder setStartColumnIndex(@Nullable Input<String> startColumnIndex) {
            this.startColumnIndex = startColumnIndex;
            return this;
        }

        public Builder setStartColumnIndex(@Nullable String startColumnIndex) {
            this.startColumnIndex = Input.ofNullable(startColumnIndex);
            return this;
        }

        public Builder setStartPattern(@Nullable Input<String> startPattern) {
            this.startPattern = startPattern;
            return this;
        }

        public Builder setStartPattern(@Nullable String startPattern) {
            this.startPattern = Input.ofNullable(startPattern);
            return this;
        }

        public Builder setStartPosition(@Nullable Input<String> startPosition) {
            this.startPosition = startPosition;
            return this;
        }

        public Builder setStartPosition(@Nullable String startPosition) {
            this.startPosition = Input.ofNullable(startPosition);
            return this;
        }

        public Builder setStartValue(@Nullable Input<String> startValue) {
            this.startValue = startValue;
            return this;
        }

        public Builder setStartValue(@Nullable String startValue) {
            this.startValue = Input.ofNullable(startValue);
            return this;
        }

        public Builder setStemmingMode(@Nullable Input<String> stemmingMode) {
            this.stemmingMode = stemmingMode;
            return this;
        }

        public Builder setStemmingMode(@Nullable String stemmingMode) {
            this.stemmingMode = Input.ofNullable(stemmingMode);
            return this;
        }

        public Builder setStepCount(@Nullable Input<String> stepCount) {
            this.stepCount = stepCount;
            return this;
        }

        public Builder setStepCount(@Nullable String stepCount) {
            this.stepCount = Input.ofNullable(stepCount);
            return this;
        }

        public Builder setStepIndex(@Nullable Input<String> stepIndex) {
            this.stepIndex = stepIndex;
            return this;
        }

        public Builder setStepIndex(@Nullable String stepIndex) {
            this.stepIndex = Input.ofNullable(stepIndex);
            return this;
        }

        public Builder setStopWordsMode(@Nullable Input<String> stopWordsMode) {
            this.stopWordsMode = stopWordsMode;
            return this;
        }

        public Builder setStopWordsMode(@Nullable String stopWordsMode) {
            this.stopWordsMode = Input.ofNullable(stopWordsMode);
            return this;
        }

        public Builder setStrategy(@Nullable Input<String> strategy) {
            this.strategy = strategy;
            return this;
        }

        public Builder setStrategy(@Nullable String strategy) {
            this.strategy = Input.ofNullable(strategy);
            return this;
        }

        public Builder setTargetColumn(@Nullable Input<String> targetColumn) {
            this.targetColumn = targetColumn;
            return this;
        }

        public Builder setTargetColumn(@Nullable String targetColumn) {
            this.targetColumn = Input.ofNullable(targetColumn);
            return this;
        }

        public Builder setTargetColumnNames(@Nullable Input<String> targetColumnNames) {
            this.targetColumnNames = targetColumnNames;
            return this;
        }

        public Builder setTargetColumnNames(@Nullable String targetColumnNames) {
            this.targetColumnNames = Input.ofNullable(targetColumnNames);
            return this;
        }

        public Builder setTargetDateFormat(@Nullable Input<String> targetDateFormat) {
            this.targetDateFormat = targetDateFormat;
            return this;
        }

        public Builder setTargetDateFormat(@Nullable String targetDateFormat) {
            this.targetDateFormat = Input.ofNullable(targetDateFormat);
            return this;
        }

        public Builder setTargetIndex(@Nullable Input<String> targetIndex) {
            this.targetIndex = targetIndex;
            return this;
        }

        public Builder setTargetIndex(@Nullable String targetIndex) {
            this.targetIndex = Input.ofNullable(targetIndex);
            return this;
        }

        public Builder setTimeZone(@Nullable Input<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder setTimeZone(@Nullable String timeZone) {
            this.timeZone = Input.ofNullable(timeZone);
            return this;
        }

        public Builder setTokenizerPattern(@Nullable Input<String> tokenizerPattern) {
            this.tokenizerPattern = tokenizerPattern;
            return this;
        }

        public Builder setTokenizerPattern(@Nullable String tokenizerPattern) {
            this.tokenizerPattern = Input.ofNullable(tokenizerPattern);
            return this;
        }

        public Builder setTrueString(@Nullable Input<String> trueString) {
            this.trueString = trueString;
            return this;
        }

        public Builder setTrueString(@Nullable String trueString) {
            this.trueString = Input.ofNullable(trueString);
            return this;
        }

        public Builder setUdfLang(@Nullable Input<String> udfLang) {
            this.udfLang = udfLang;
            return this;
        }

        public Builder setUdfLang(@Nullable String udfLang) {
            this.udfLang = Input.ofNullable(udfLang);
            return this;
        }

        public Builder setUnits(@Nullable Input<String> units) {
            this.units = units;
            return this;
        }

        public Builder setUnits(@Nullable String units) {
            this.units = Input.ofNullable(units);
            return this;
        }

        public Builder setUnpivotColumn(@Nullable Input<String> unpivotColumn) {
            this.unpivotColumn = unpivotColumn;
            return this;
        }

        public Builder setUnpivotColumn(@Nullable String unpivotColumn) {
            this.unpivotColumn = Input.ofNullable(unpivotColumn);
            return this;
        }

        public Builder setUpperBound(@Nullable Input<String> upperBound) {
            this.upperBound = upperBound;
            return this;
        }

        public Builder setUpperBound(@Nullable String upperBound) {
            this.upperBound = Input.ofNullable(upperBound);
            return this;
        }

        public Builder setUseNewDataFrame(@Nullable Input<String> useNewDataFrame) {
            this.useNewDataFrame = useNewDataFrame;
            return this;
        }

        public Builder setUseNewDataFrame(@Nullable String useNewDataFrame) {
            this.useNewDataFrame = Input.ofNullable(useNewDataFrame);
            return this;
        }

        public Builder setValue(@Nullable Input<String> value) {
            this.value = value;
            return this;
        }

        public Builder setValue(@Nullable String value) {
            this.value = Input.ofNullable(value);
            return this;
        }

        public Builder setValue1(@Nullable Input<String> value1) {
            this.value1 = value1;
            return this;
        }

        public Builder setValue1(@Nullable String value1) {
            this.value1 = Input.ofNullable(value1);
            return this;
        }

        public Builder setValue2(@Nullable Input<String> value2) {
            this.value2 = value2;
            return this;
        }

        public Builder setValue2(@Nullable String value2) {
            this.value2 = Input.ofNullable(value2);
            return this;
        }

        public Builder setValueColumn(@Nullable Input<String> valueColumn) {
            this.valueColumn = valueColumn;
            return this;
        }

        public Builder setValueColumn(@Nullable String valueColumn) {
            this.valueColumn = Input.ofNullable(valueColumn);
            return this;
        }

        public Builder setViewFrame(@Nullable Input<String> viewFrame) {
            this.viewFrame = viewFrame;
            return this;
        }

        public Builder setViewFrame(@Nullable String viewFrame) {
            this.viewFrame = Input.ofNullable(viewFrame);
            return this;
        }
        public RecipeParametersArgs build() {
            return new RecipeParametersArgs(aggregateFunction, base, caseStatement, categoryMap, charsToRemove, collapseConsecutiveWhitespace, columnDataType, columnRange, count, customCharacters, customStopWords, customValue, datasetsColumns, dateAddValue, dateTimeFormat, dateTimeParameters, deleteOtherRows, delimiter, endPattern, endPosition, endValue, expandContractions, exponent, falseString, groupByAggFunctionOptions, groupByColumns, hiddenColumns, ignoreCase, includeInSplit, input, interval, isText, joinKeys, joinType, leftColumns, limit, lowerBound, mapType, modeType, multiLine, numRows, numRowsAfter, numRowsBefore, orderByColumn, orderByColumns, other, pattern, patternOption1, patternOption2, patternOptions, period, position, removeAllPunctuation, removeAllQuotes, removeAllWhitespace, removeCustomCharacters, removeCustomValue, removeLeadingAndTrailingPunctuation, removeLeadingAndTrailingQuotes, removeLeadingAndTrailingWhitespace, removeLetters, removeNumbers, removeSourceColumn, removeSpecialCharacters, rightColumns, sampleSize, sampleType, secondInput, secondaryInputs, sheetIndexes, sheetNames, sourceColumn, sourceColumn1, sourceColumn2, sourceColumns, startColumnIndex, startPattern, startPosition, startValue, stemmingMode, stepCount, stepIndex, stopWordsMode, strategy, targetColumn, targetColumnNames, targetDateFormat, targetIndex, timeZone, tokenizerPattern, trueString, udfLang, units, unpivotColumn, upperBound, useNewDataFrame, value, value1, value2, valueColumn, viewFrame);
        }
    }
}
