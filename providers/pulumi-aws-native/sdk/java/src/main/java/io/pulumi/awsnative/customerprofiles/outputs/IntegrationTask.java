// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.customerprofiles.outputs;

import io.pulumi.awsnative.customerprofiles.enums.IntegrationTaskType;
import io.pulumi.awsnative.customerprofiles.outputs.IntegrationConnectorOperator;
import io.pulumi.awsnative.customerprofiles.outputs.IntegrationTaskPropertiesMap;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class IntegrationTask {
    private final @Nullable IntegrationConnectorOperator connectorOperator;
    private final @Nullable String destinationField;
    private final List<String> sourceFields;
    private final @Nullable List<IntegrationTaskPropertiesMap> taskProperties;
    private final IntegrationTaskType taskType;

    @OutputCustomType.Constructor({"connectorOperator","destinationField","sourceFields","taskProperties","taskType"})
    private IntegrationTask(
        @Nullable IntegrationConnectorOperator connectorOperator,
        @Nullable String destinationField,
        List<String> sourceFields,
        @Nullable List<IntegrationTaskPropertiesMap> taskProperties,
        IntegrationTaskType taskType) {
        this.connectorOperator = connectorOperator;
        this.destinationField = destinationField;
        this.sourceFields = Objects.requireNonNull(sourceFields);
        this.taskProperties = taskProperties;
        this.taskType = Objects.requireNonNull(taskType);
    }

    public Optional<IntegrationConnectorOperator> getConnectorOperator() {
        return Optional.ofNullable(this.connectorOperator);
    }
    public Optional<String> getDestinationField() {
        return Optional.ofNullable(this.destinationField);
    }
    public List<String> getSourceFields() {
        return this.sourceFields;
    }
    public List<IntegrationTaskPropertiesMap> getTaskProperties() {
        return this.taskProperties == null ? List.of() : this.taskProperties;
    }
    public IntegrationTaskType getTaskType() {
        return this.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationTask defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable IntegrationConnectorOperator connectorOperator;
        private @Nullable String destinationField;
        private List<String> sourceFields;
        private @Nullable List<IntegrationTaskPropertiesMap> taskProperties;
        private IntegrationTaskType taskType;

        public Builder() {
    	      // Empty
        }

        public Builder(IntegrationTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorOperator = defaults.connectorOperator;
    	      this.destinationField = defaults.destinationField;
    	      this.sourceFields = defaults.sourceFields;
    	      this.taskProperties = defaults.taskProperties;
    	      this.taskType = defaults.taskType;
        }

        public Builder setConnectorOperator(@Nullable IntegrationConnectorOperator connectorOperator) {
            this.connectorOperator = connectorOperator;
            return this;
        }

        public Builder setDestinationField(@Nullable String destinationField) {
            this.destinationField = destinationField;
            return this;
        }

        public Builder setSourceFields(List<String> sourceFields) {
            this.sourceFields = Objects.requireNonNull(sourceFields);
            return this;
        }

        public Builder setTaskProperties(@Nullable List<IntegrationTaskPropertiesMap> taskProperties) {
            this.taskProperties = taskProperties;
            return this;
        }

        public Builder setTaskType(IntegrationTaskType taskType) {
            this.taskType = Objects.requireNonNull(taskType);
            return this;
        }
        public IntegrationTask build() {
            return new IntegrationTask(connectorOperator, destinationField, sourceFields, taskProperties, taskType);
        }
    }
}
