// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.quicksight.ThemeArgs;
import io.pulumi.awsnative.quicksight.enums.ThemeType;
import io.pulumi.awsnative.quicksight.outputs.ThemeConfiguration;
import io.pulumi.awsnative.quicksight.outputs.ThemeResourcePermission;
import io.pulumi.awsnative.quicksight.outputs.ThemeTag;
import io.pulumi.awsnative.quicksight.outputs.ThemeVersion;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Definition of the AWS::QuickSight::Theme Resource Type.
 * 
 */
@ResourceType(type="aws-native:quicksight:Theme")
public class Theme extends io.pulumi.resources.CustomResource {
    /**
     * <p>The Amazon Resource Name (ARN) of the theme.</p>
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return <p>The Amazon Resource Name (ARN) of the theme.</p>
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    @Export(name="awsAccountId", type=String.class, parameters={})
    private Output<String> awsAccountId;

    public Output<String> getAwsAccountId() {
        return this.awsAccountId;
    }
    /**
     * <p>The ID of the theme that a custom theme will inherit from. All themes inherit from one of
     * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
     * 				<code>ListThemes</code> or choose <b>Themes</b> from
     * 			within a QuickSight analysis. </p>
     * 
     */
    @Export(name="baseThemeId", type=String.class, parameters={})
    private Output</* @Nullable */ String> baseThemeId;

    /**
     * @return <p>The ID of the theme that a custom theme will inherit from. All themes inherit from one of
     * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
     * 				<code>ListThemes</code> or choose <b>Themes</b> from
     * 			within a QuickSight analysis. </p>
     * 
     */
    public Output</* @Nullable */ String> getBaseThemeId() {
        return this.baseThemeId;
    }
    @Export(name="configuration", type=ThemeConfiguration.class, parameters={})
    private Output</* @Nullable */ ThemeConfiguration> configuration;

    public Output</* @Nullable */ ThemeConfiguration> getConfiguration() {
        return this.configuration;
    }
    /**
     * <p>The date and time that the theme was created.</p>
     * 
     */
    @Export(name="createdTime", type=String.class, parameters={})
    private Output<String> createdTime;

    /**
     * @return <p>The date and time that the theme was created.</p>
     * 
     */
    public Output<String> getCreatedTime() {
        return this.createdTime;
    }
    /**
     * <p>The date and time that the theme was last updated.</p>
     * 
     */
    @Export(name="lastUpdatedTime", type=String.class, parameters={})
    private Output<String> lastUpdatedTime;

    /**
     * @return <p>The date and time that the theme was last updated.</p>
     * 
     */
    public Output<String> getLastUpdatedTime() {
        return this.lastUpdatedTime;
    }
    /**
     * <p>A display name for the theme.</p>
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output</* @Nullable */ String> name;

    /**
     * @return <p>A display name for the theme.</p>
     * 
     */
    public Output</* @Nullable */ String> getName() {
        return this.name;
    }
    /**
     * <p>A valid grouping of resource permissions to apply to the new theme.
     * 			</p>
     * 
     */
    @Export(name="permissions", type=List.class, parameters={ThemeResourcePermission.class})
    private Output</* @Nullable */ List<ThemeResourcePermission>> permissions;

    /**
     * @return <p>A valid grouping of resource permissions to apply to the new theme.
     * 			</p>
     * 
     */
    public Output</* @Nullable */ List<ThemeResourcePermission>> getPermissions() {
        return this.permissions;
    }
    /**
     * <p>A map of the key-value pairs for the resource tag or tags that you want to add to the
     * 			resource.</p>
     * 
     */
    @Export(name="tags", type=List.class, parameters={ThemeTag.class})
    private Output</* @Nullable */ List<ThemeTag>> tags;

    /**
     * @return <p>A map of the key-value pairs for the resource tag or tags that you want to add to the
     * 			resource.</p>
     * 
     */
    public Output</* @Nullable */ List<ThemeTag>> getTags() {
        return this.tags;
    }
    @Export(name="themeId", type=String.class, parameters={})
    private Output<String> themeId;

    public Output<String> getThemeId() {
        return this.themeId;
    }
    @Export(name="type", type=ThemeType.class, parameters={})
    private Output<ThemeType> type;

    public Output<ThemeType> getType() {
        return this.type;
    }
    @Export(name="version", type=ThemeVersion.class, parameters={})
    private Output<ThemeVersion> version;

    public Output<ThemeVersion> getVersion() {
        return this.version;
    }
    /**
     * <p>A description of the first version of the theme that you're creating. Every time
     * 				<code>UpdateTheme</code> is called, a new version is created. Each version of the
     * 			theme has a description of the version in the <code>VersionDescription</code>
     * 			field.</p>
     * 
     */
    @Export(name="versionDescription", type=String.class, parameters={})
    private Output</* @Nullable */ String> versionDescription;

    /**
     * @return <p>A description of the first version of the theme that you're creating. Every time
     * 				<code>UpdateTheme</code> is called, a new version is created. Each version of the
     * 			theme has a description of the version in the <code>VersionDescription</code>
     * 			field.</p>
     * 
     */
    public Output</* @Nullable */ String> getVersionDescription() {
        return this.versionDescription;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Theme(String name) {
        this(name, ThemeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Theme(String name, ThemeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Theme(String name, ThemeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:quicksight:Theme", name, args == null ? ThemeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Theme(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:quicksight:Theme", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Theme get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Theme(name, id, options);
    }
}
