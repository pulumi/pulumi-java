// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.apigateway.inputs;

import io.pulumi.awsnative.apigateway.enums.MethodIntegrationConnectionType;
import io.pulumi.awsnative.apigateway.enums.MethodIntegrationContentHandling;
import io.pulumi.awsnative.apigateway.enums.MethodIntegrationPassthroughBehavior;
import io.pulumi.awsnative.apigateway.enums.MethodIntegrationType;
import io.pulumi.awsnative.apigateway.inputs.MethodIntegrationResponseArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MethodIntegrationArgs extends io.pulumi.resources.ResourceArgs {

    public static final MethodIntegrationArgs Empty = new MethodIntegrationArgs();

    /**
     * A list of request parameters whose values API Gateway caches.
     * 
     */
    @InputImport(name="cacheKeyParameters")
      private final @Nullable Input<List<String>> cacheKeyParameters;

    public Input<List<String>> getCacheKeyParameters() {
        return this.cacheKeyParameters == null ? Input.empty() : this.cacheKeyParameters;
    }

    /**
     * An API-specific tag group of related cached parameters.
     * 
     */
    @InputImport(name="cacheNamespace")
      private final @Nullable Input<String> cacheNamespace;

    public Input<String> getCacheNamespace() {
        return this.cacheNamespace == null ? Input.empty() : this.cacheNamespace;
    }

    /**
     * The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    @InputImport(name="connectionId")
      private final @Nullable Input<String> connectionId;

    public Input<String> getConnectionId() {
        return this.connectionId == null ? Input.empty() : this.connectionId;
    }

    /**
     * The type of the network connection to the integration endpoint.
     * 
     */
    @InputImport(name="connectionType")
      private final @Nullable Input<MethodIntegrationConnectionType> connectionType;

    public Input<MethodIntegrationConnectionType> getConnectionType() {
        return this.connectionType == null ? Input.empty() : this.connectionType;
    }

    /**
     * Specifies how to handle request payload content type conversions.
     * 
     */
    @InputImport(name="contentHandling")
      private final @Nullable Input<MethodIntegrationContentHandling> contentHandling;

    public Input<MethodIntegrationContentHandling> getContentHandling() {
        return this.contentHandling == null ? Input.empty() : this.contentHandling;
    }

    /**
     * The credentials that are required for the integration.
     * 
     */
    @InputImport(name="credentials")
      private final @Nullable Input<String> credentials;

    public Input<String> getCredentials() {
        return this.credentials == null ? Input.empty() : this.credentials;
    }

    /**
     * The integration's HTTP method type.
     * 
     */
    @InputImport(name="integrationHttpMethod")
      private final @Nullable Input<String> integrationHttpMethod;

    public Input<String> getIntegrationHttpMethod() {
        return this.integrationHttpMethod == null ? Input.empty() : this.integrationHttpMethod;
    }

    /**
     * The response that API Gateway provides after a method's backend completes processing a request.
     * 
     */
    @InputImport(name="integrationResponses")
      private final @Nullable Input<List<MethodIntegrationResponseArgs>> integrationResponses;

    public Input<List<MethodIntegrationResponseArgs>> getIntegrationResponses() {
        return this.integrationResponses == null ? Input.empty() : this.integrationResponses;
    }

    /**
     * Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    @InputImport(name="passthroughBehavior")
      private final @Nullable Input<MethodIntegrationPassthroughBehavior> passthroughBehavior;

    public Input<MethodIntegrationPassthroughBehavior> getPassthroughBehavior() {
        return this.passthroughBehavior == null ? Input.empty() : this.passthroughBehavior;
    }

    /**
     * The request parameters that API Gateway sends with the backend request.
     * 
     */
    @InputImport(name="requestParameters")
      private final @Nullable Input<Object> requestParameters;

    public Input<Object> getRequestParameters() {
        return this.requestParameters == null ? Input.empty() : this.requestParameters;
    }

    /**
     * A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    @InputImport(name="requestTemplates")
      private final @Nullable Input<Object> requestTemplates;

    public Input<Object> getRequestTemplates() {
        return this.requestTemplates == null ? Input.empty() : this.requestTemplates;
    }

    /**
     * Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    @InputImport(name="timeoutInMillis")
      private final @Nullable Input<Integer> timeoutInMillis;

    public Input<Integer> getTimeoutInMillis() {
        return this.timeoutInMillis == null ? Input.empty() : this.timeoutInMillis;
    }

    /**
     * The type of backend that your method is running.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<MethodIntegrationType> type;

    public Input<MethodIntegrationType> getType() {
        return this.type;
    }

    /**
     * The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    @InputImport(name="uri")
      private final @Nullable Input<String> uri;

    public Input<String> getUri() {
        return this.uri == null ? Input.empty() : this.uri;
    }

    public MethodIntegrationArgs(
        @Nullable Input<List<String>> cacheKeyParameters,
        @Nullable Input<String> cacheNamespace,
        @Nullable Input<String> connectionId,
        @Nullable Input<MethodIntegrationConnectionType> connectionType,
        @Nullable Input<MethodIntegrationContentHandling> contentHandling,
        @Nullable Input<String> credentials,
        @Nullable Input<String> integrationHttpMethod,
        @Nullable Input<List<MethodIntegrationResponseArgs>> integrationResponses,
        @Nullable Input<MethodIntegrationPassthroughBehavior> passthroughBehavior,
        @Nullable Input<Object> requestParameters,
        @Nullable Input<Object> requestTemplates,
        @Nullable Input<Integer> timeoutInMillis,
        Input<MethodIntegrationType> type,
        @Nullable Input<String> uri) {
        this.cacheKeyParameters = cacheKeyParameters;
        this.cacheNamespace = cacheNamespace;
        this.connectionId = connectionId;
        this.connectionType = connectionType;
        this.contentHandling = contentHandling;
        this.credentials = credentials;
        this.integrationHttpMethod = integrationHttpMethod;
        this.integrationResponses = integrationResponses;
        this.passthroughBehavior = passthroughBehavior;
        this.requestParameters = requestParameters;
        this.requestTemplates = requestTemplates;
        this.timeoutInMillis = timeoutInMillis;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.uri = uri;
    }

    private MethodIntegrationArgs() {
        this.cacheKeyParameters = Input.empty();
        this.cacheNamespace = Input.empty();
        this.connectionId = Input.empty();
        this.connectionType = Input.empty();
        this.contentHandling = Input.empty();
        this.credentials = Input.empty();
        this.integrationHttpMethod = Input.empty();
        this.integrationResponses = Input.empty();
        this.passthroughBehavior = Input.empty();
        this.requestParameters = Input.empty();
        this.requestTemplates = Input.empty();
        this.timeoutInMillis = Input.empty();
        this.type = Input.empty();
        this.uri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> cacheKeyParameters;
        private @Nullable Input<String> cacheNamespace;
        private @Nullable Input<String> connectionId;
        private @Nullable Input<MethodIntegrationConnectionType> connectionType;
        private @Nullable Input<MethodIntegrationContentHandling> contentHandling;
        private @Nullable Input<String> credentials;
        private @Nullable Input<String> integrationHttpMethod;
        private @Nullable Input<List<MethodIntegrationResponseArgs>> integrationResponses;
        private @Nullable Input<MethodIntegrationPassthroughBehavior> passthroughBehavior;
        private @Nullable Input<Object> requestParameters;
        private @Nullable Input<Object> requestTemplates;
        private @Nullable Input<Integer> timeoutInMillis;
        private Input<MethodIntegrationType> type;
        private @Nullable Input<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(MethodIntegrationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheKeyParameters = defaults.cacheKeyParameters;
    	      this.cacheNamespace = defaults.cacheNamespace;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionType = defaults.connectionType;
    	      this.contentHandling = defaults.contentHandling;
    	      this.credentials = defaults.credentials;
    	      this.integrationHttpMethod = defaults.integrationHttpMethod;
    	      this.integrationResponses = defaults.integrationResponses;
    	      this.passthroughBehavior = defaults.passthroughBehavior;
    	      this.requestParameters = defaults.requestParameters;
    	      this.requestTemplates = defaults.requestTemplates;
    	      this.timeoutInMillis = defaults.timeoutInMillis;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        public Builder cacheKeyParameters(@Nullable Input<List<String>> cacheKeyParameters) {
            this.cacheKeyParameters = cacheKeyParameters;
            return this;
        }

        public Builder cacheKeyParameters(@Nullable List<String> cacheKeyParameters) {
            this.cacheKeyParameters = Input.ofNullable(cacheKeyParameters);
            return this;
        }

        public Builder cacheNamespace(@Nullable Input<String> cacheNamespace) {
            this.cacheNamespace = cacheNamespace;
            return this;
        }

        public Builder cacheNamespace(@Nullable String cacheNamespace) {
            this.cacheNamespace = Input.ofNullable(cacheNamespace);
            return this;
        }

        public Builder connectionId(@Nullable Input<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(@Nullable String connectionId) {
            this.connectionId = Input.ofNullable(connectionId);
            return this;
        }

        public Builder connectionType(@Nullable Input<MethodIntegrationConnectionType> connectionType) {
            this.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(@Nullable MethodIntegrationConnectionType connectionType) {
            this.connectionType = Input.ofNullable(connectionType);
            return this;
        }

        public Builder contentHandling(@Nullable Input<MethodIntegrationContentHandling> contentHandling) {
            this.contentHandling = contentHandling;
            return this;
        }

        public Builder contentHandling(@Nullable MethodIntegrationContentHandling contentHandling) {
            this.contentHandling = Input.ofNullable(contentHandling);
            return this;
        }

        public Builder credentials(@Nullable Input<String> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder credentials(@Nullable String credentials) {
            this.credentials = Input.ofNullable(credentials);
            return this;
        }

        public Builder integrationHttpMethod(@Nullable Input<String> integrationHttpMethod) {
            this.integrationHttpMethod = integrationHttpMethod;
            return this;
        }

        public Builder integrationHttpMethod(@Nullable String integrationHttpMethod) {
            this.integrationHttpMethod = Input.ofNullable(integrationHttpMethod);
            return this;
        }

        public Builder integrationResponses(@Nullable Input<List<MethodIntegrationResponseArgs>> integrationResponses) {
            this.integrationResponses = integrationResponses;
            return this;
        }

        public Builder integrationResponses(@Nullable List<MethodIntegrationResponseArgs> integrationResponses) {
            this.integrationResponses = Input.ofNullable(integrationResponses);
            return this;
        }

        public Builder passthroughBehavior(@Nullable Input<MethodIntegrationPassthroughBehavior> passthroughBehavior) {
            this.passthroughBehavior = passthroughBehavior;
            return this;
        }

        public Builder passthroughBehavior(@Nullable MethodIntegrationPassthroughBehavior passthroughBehavior) {
            this.passthroughBehavior = Input.ofNullable(passthroughBehavior);
            return this;
        }

        public Builder requestParameters(@Nullable Input<Object> requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }

        public Builder requestParameters(@Nullable Object requestParameters) {
            this.requestParameters = Input.ofNullable(requestParameters);
            return this;
        }

        public Builder requestTemplates(@Nullable Input<Object> requestTemplates) {
            this.requestTemplates = requestTemplates;
            return this;
        }

        public Builder requestTemplates(@Nullable Object requestTemplates) {
            this.requestTemplates = Input.ofNullable(requestTemplates);
            return this;
        }

        public Builder timeoutInMillis(@Nullable Input<Integer> timeoutInMillis) {
            this.timeoutInMillis = timeoutInMillis;
            return this;
        }

        public Builder timeoutInMillis(@Nullable Integer timeoutInMillis) {
            this.timeoutInMillis = Input.ofNullable(timeoutInMillis);
            return this;
        }

        public Builder type(Input<MethodIntegrationType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(MethodIntegrationType type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder uri(@Nullable Input<String> uri) {
            this.uri = uri;
            return this;
        }

        public Builder uri(@Nullable String uri) {
            this.uri = Input.ofNullable(uri);
            return this;
        }
        public MethodIntegrationArgs build() {
            return new MethodIntegrationArgs(cacheKeyParameters, cacheNamespace, connectionId, connectionType, contentHandling, credentials, integrationHttpMethod, integrationResponses, passthroughBehavior, requestParameters, requestTemplates, timeoutInMillis, type, uri);
        }
    }
}
