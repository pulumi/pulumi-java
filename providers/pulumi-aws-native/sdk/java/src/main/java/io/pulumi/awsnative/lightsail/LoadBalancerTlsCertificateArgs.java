// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LoadBalancerTlsCertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoadBalancerTlsCertificateArgs Empty = new LoadBalancerTlsCertificateArgs();

    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     * 
     */
    @Import(name="certificateAlternativeNames")
      private final @Nullable Output<List<String>> certificateAlternativeNames;

    public Output<List<String>> getCertificateAlternativeNames() {
        return this.certificateAlternativeNames == null ? Output.empty() : this.certificateAlternativeNames;
    }

    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     * 
     */
    @Import(name="certificateDomainName", required=true)
      private final Output<String> certificateDomainName;

    public Output<String> getCertificateDomainName() {
        return this.certificateDomainName;
    }

    /**
     * The SSL/TLS certificate name.
     * 
     */
    @Import(name="certificateName", required=true)
      private final Output<String> certificateName;

    public Output<String> getCertificateName() {
        return this.certificateName;
    }

    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     * 
     */
    @Import(name="isAttached")
      private final @Nullable Output<Boolean> isAttached;

    public Output<Boolean> getIsAttached() {
        return this.isAttached == null ? Output.empty() : this.isAttached;
    }

    /**
     * The name of your load balancer.
     * 
     */
    @Import(name="loadBalancerName", required=true)
      private final Output<String> loadBalancerName;

    public Output<String> getLoadBalancerName() {
        return this.loadBalancerName;
    }

    public LoadBalancerTlsCertificateArgs(
        @Nullable Output<List<String>> certificateAlternativeNames,
        Output<String> certificateDomainName,
        Output<String> certificateName,
        @Nullable Output<Boolean> isAttached,
        Output<String> loadBalancerName) {
        this.certificateAlternativeNames = certificateAlternativeNames;
        this.certificateDomainName = Objects.requireNonNull(certificateDomainName, "expected parameter 'certificateDomainName' to be non-null");
        this.certificateName = Objects.requireNonNull(certificateName, "expected parameter 'certificateName' to be non-null");
        this.isAttached = isAttached;
        this.loadBalancerName = Objects.requireNonNull(loadBalancerName, "expected parameter 'loadBalancerName' to be non-null");
    }

    private LoadBalancerTlsCertificateArgs() {
        this.certificateAlternativeNames = Output.empty();
        this.certificateDomainName = Output.empty();
        this.certificateName = Output.empty();
        this.isAttached = Output.empty();
        this.loadBalancerName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerTlsCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> certificateAlternativeNames;
        private Output<String> certificateDomainName;
        private Output<String> certificateName;
        private @Nullable Output<Boolean> isAttached;
        private Output<String> loadBalancerName;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerTlsCertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAlternativeNames = defaults.certificateAlternativeNames;
    	      this.certificateDomainName = defaults.certificateDomainName;
    	      this.certificateName = defaults.certificateName;
    	      this.isAttached = defaults.isAttached;
    	      this.loadBalancerName = defaults.loadBalancerName;
        }

        public Builder certificateAlternativeNames(@Nullable Output<List<String>> certificateAlternativeNames) {
            this.certificateAlternativeNames = certificateAlternativeNames;
            return this;
        }

        public Builder certificateAlternativeNames(@Nullable List<String> certificateAlternativeNames) {
            this.certificateAlternativeNames = Output.ofNullable(certificateAlternativeNames);
            return this;
        }

        public Builder certificateDomainName(Output<String> certificateDomainName) {
            this.certificateDomainName = Objects.requireNonNull(certificateDomainName);
            return this;
        }

        public Builder certificateDomainName(String certificateDomainName) {
            this.certificateDomainName = Output.of(Objects.requireNonNull(certificateDomainName));
            return this;
        }

        public Builder certificateName(Output<String> certificateName) {
            this.certificateName = Objects.requireNonNull(certificateName);
            return this;
        }

        public Builder certificateName(String certificateName) {
            this.certificateName = Output.of(Objects.requireNonNull(certificateName));
            return this;
        }

        public Builder isAttached(@Nullable Output<Boolean> isAttached) {
            this.isAttached = isAttached;
            return this;
        }

        public Builder isAttached(@Nullable Boolean isAttached) {
            this.isAttached = Output.ofNullable(isAttached);
            return this;
        }

        public Builder loadBalancerName(Output<String> loadBalancerName) {
            this.loadBalancerName = Objects.requireNonNull(loadBalancerName);
            return this;
        }

        public Builder loadBalancerName(String loadBalancerName) {
            this.loadBalancerName = Output.of(Objects.requireNonNull(loadBalancerName));
            return this;
        }
        public LoadBalancerTlsCertificateArgs build() {
            return new LoadBalancerTlsCertificateArgs(certificateAlternativeNames, certificateDomainName, certificateName, isAttached, loadBalancerName);
        }
    }
}
