// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudwatch;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.cloudwatch.inputs.GetCompositeAlarmArgs;
import io.pulumi.awsnative.cloudwatch.inputs.GetMetricStreamArgs;
import io.pulumi.awsnative.cloudwatch.outputs.GetCompositeAlarmResult;
import io.pulumi.awsnative.cloudwatch.outputs.GetMetricStreamResult;
import io.pulumi.core.TypeShape;
import io.pulumi.deployment.Deployment;
import io.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class CloudwatchFunctions {
    /**
     * The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression
     * 
     */
    public static CompletableFuture<GetCompositeAlarmResult> getCompositeAlarm(io.pulumi.awsnative.cloudwatch.inputs.GetCompositeAlarmArgs args) {
        return getCompositeAlarm(args, io.pulumi.deployment.InvokeOptions.Empty);
    }
    public static CompletableFuture<GetCompositeAlarmResult> getCompositeAlarm(io.pulumi.awsnative.cloudwatch.inputs.GetCompositeAlarmArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws-native:cloudwatch:getCompositeAlarm", TypeShape.of(GetCompositeAlarmResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Resource Type definition for Metric Stream
     * 
     */
    public static CompletableFuture<GetMetricStreamResult> getMetricStream(io.pulumi.awsnative.cloudwatch.inputs.GetMetricStreamArgs args) {
        return getMetricStream(args, io.pulumi.deployment.InvokeOptions.Empty);
    }
    public static CompletableFuture<GetMetricStreamResult> getMetricStream(io.pulumi.awsnative.cloudwatch.inputs.GetMetricStreamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("aws-native:cloudwatch:getMetricStream", TypeShape.of(GetMetricStreamResult.class), args, Utilities.withVersion(options));
    }
}
