// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.emr;

import io.pulumi.awsnative.emr.enums.StudioAuthMode;
import io.pulumi.awsnative.emr.inputs.StudioTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StudioArgs extends io.pulumi.resources.ResourceArgs {

    public static final StudioArgs Empty = new StudioArgs();

    /**
     * Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only supports SSO authentication.
     * 
     */
    @InputImport(name="authMode", required=true)
      private final Input<StudioAuthMode> authMode;

    public Input<StudioAuthMode> getAuthMode() {
        return this.authMode;
    }

    /**
     * The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an alternative Amazon S3 location when creating a Workspace.
     * 
     */
    @InputImport(name="defaultS3Location", required=true)
      private final Input<String> defaultS3Location;

    public Input<String> getDefaultS3Location() {
        return this.defaultS3Location;
    }

    /**
     * A detailed description of the Studio.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
     * 
     */
    @InputImport(name="engineSecurityGroupId", required=true)
      private final Input<String> engineSecurityGroupId;

    public Input<String> getEngineSecurityGroupId() {
        return this.engineSecurityGroupId;
    }

    /**
     * Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
     * 
     */
    @InputImport(name="idpAuthUrl")
      private final @Nullable Input<String> idpAuthUrl;

    public Input<String> getIdpAuthUrl() {
        return this.idpAuthUrl == null ? Input.empty() : this.idpAuthUrl;
    }

    /**
     * The name of relay state parameter for external Identity Provider.
     * 
     */
    @InputImport(name="idpRelayStateParameterName")
      private final @Nullable Input<String> idpRelayStateParameterName;

    public Input<String> getIdpRelayStateParameterName() {
        return this.idpRelayStateParameterName == null ? Input.empty() : this.idpRelayStateParameterName;
    }

    /**
     * A descriptive name for the Amazon EMR Studio.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.
     * 
     */
    @InputImport(name="serviceRole", required=true)
      private final Input<String> serviceRole;

    public Input<String> getServiceRole() {
        return this.serviceRole;
    }

    /**
     * A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
     * 
     */
    @InputImport(name="subnetIds", required=true)
      private final Input<List<String>> subnetIds;

    public Input<List<String>> getSubnetIds() {
        return this.subnetIds;
    }

    /**
     * A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<List<StudioTagArgs>> tags;

    public Input<List<StudioTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies.
     * 
     */
    @InputImport(name="userRole")
      private final @Nullable Input<String> userRole;

    public Input<String> getUserRole() {
        return this.userRole == null ? Input.empty() : this.userRole;
    }

    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     * 
     */
    @InputImport(name="vpcId", required=true)
      private final Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId;
    }

    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
     * 
     */
    @InputImport(name="workspaceSecurityGroupId", required=true)
      private final Input<String> workspaceSecurityGroupId;

    public Input<String> getWorkspaceSecurityGroupId() {
        return this.workspaceSecurityGroupId;
    }

    public StudioArgs(
        Input<StudioAuthMode> authMode,
        Input<String> defaultS3Location,
        @Nullable Input<String> description,
        Input<String> engineSecurityGroupId,
        @Nullable Input<String> idpAuthUrl,
        @Nullable Input<String> idpRelayStateParameterName,
        @Nullable Input<String> name,
        Input<String> serviceRole,
        Input<List<String>> subnetIds,
        @Nullable Input<List<StudioTagArgs>> tags,
        @Nullable Input<String> userRole,
        Input<String> vpcId,
        Input<String> workspaceSecurityGroupId) {
        this.authMode = Objects.requireNonNull(authMode, "expected parameter 'authMode' to be non-null");
        this.defaultS3Location = Objects.requireNonNull(defaultS3Location, "expected parameter 'defaultS3Location' to be non-null");
        this.description = description;
        this.engineSecurityGroupId = Objects.requireNonNull(engineSecurityGroupId, "expected parameter 'engineSecurityGroupId' to be non-null");
        this.idpAuthUrl = idpAuthUrl;
        this.idpRelayStateParameterName = idpRelayStateParameterName;
        this.name = name;
        this.serviceRole = Objects.requireNonNull(serviceRole, "expected parameter 'serviceRole' to be non-null");
        this.subnetIds = Objects.requireNonNull(subnetIds, "expected parameter 'subnetIds' to be non-null");
        this.tags = tags;
        this.userRole = userRole;
        this.vpcId = Objects.requireNonNull(vpcId, "expected parameter 'vpcId' to be non-null");
        this.workspaceSecurityGroupId = Objects.requireNonNull(workspaceSecurityGroupId, "expected parameter 'workspaceSecurityGroupId' to be non-null");
    }

    private StudioArgs() {
        this.authMode = Input.empty();
        this.defaultS3Location = Input.empty();
        this.description = Input.empty();
        this.engineSecurityGroupId = Input.empty();
        this.idpAuthUrl = Input.empty();
        this.idpRelayStateParameterName = Input.empty();
        this.name = Input.empty();
        this.serviceRole = Input.empty();
        this.subnetIds = Input.empty();
        this.tags = Input.empty();
        this.userRole = Input.empty();
        this.vpcId = Input.empty();
        this.workspaceSecurityGroupId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StudioArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<StudioAuthMode> authMode;
        private Input<String> defaultS3Location;
        private @Nullable Input<String> description;
        private Input<String> engineSecurityGroupId;
        private @Nullable Input<String> idpAuthUrl;
        private @Nullable Input<String> idpRelayStateParameterName;
        private @Nullable Input<String> name;
        private Input<String> serviceRole;
        private Input<List<String>> subnetIds;
        private @Nullable Input<List<StudioTagArgs>> tags;
        private @Nullable Input<String> userRole;
        private Input<String> vpcId;
        private Input<String> workspaceSecurityGroupId;

        public Builder() {
    	      // Empty
        }

        public Builder(StudioArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authMode = defaults.authMode;
    	      this.defaultS3Location = defaults.defaultS3Location;
    	      this.description = defaults.description;
    	      this.engineSecurityGroupId = defaults.engineSecurityGroupId;
    	      this.idpAuthUrl = defaults.idpAuthUrl;
    	      this.idpRelayStateParameterName = defaults.idpRelayStateParameterName;
    	      this.name = defaults.name;
    	      this.serviceRole = defaults.serviceRole;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.userRole = defaults.userRole;
    	      this.vpcId = defaults.vpcId;
    	      this.workspaceSecurityGroupId = defaults.workspaceSecurityGroupId;
        }

        public Builder authMode(Input<StudioAuthMode> authMode) {
            this.authMode = Objects.requireNonNull(authMode);
            return this;
        }

        public Builder authMode(StudioAuthMode authMode) {
            this.authMode = Input.of(Objects.requireNonNull(authMode));
            return this;
        }

        public Builder defaultS3Location(Input<String> defaultS3Location) {
            this.defaultS3Location = Objects.requireNonNull(defaultS3Location);
            return this;
        }

        public Builder defaultS3Location(String defaultS3Location) {
            this.defaultS3Location = Input.of(Objects.requireNonNull(defaultS3Location));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder engineSecurityGroupId(Input<String> engineSecurityGroupId) {
            this.engineSecurityGroupId = Objects.requireNonNull(engineSecurityGroupId);
            return this;
        }

        public Builder engineSecurityGroupId(String engineSecurityGroupId) {
            this.engineSecurityGroupId = Input.of(Objects.requireNonNull(engineSecurityGroupId));
            return this;
        }

        public Builder idpAuthUrl(@Nullable Input<String> idpAuthUrl) {
            this.idpAuthUrl = idpAuthUrl;
            return this;
        }

        public Builder idpAuthUrl(@Nullable String idpAuthUrl) {
            this.idpAuthUrl = Input.ofNullable(idpAuthUrl);
            return this;
        }

        public Builder idpRelayStateParameterName(@Nullable Input<String> idpRelayStateParameterName) {
            this.idpRelayStateParameterName = idpRelayStateParameterName;
            return this;
        }

        public Builder idpRelayStateParameterName(@Nullable String idpRelayStateParameterName) {
            this.idpRelayStateParameterName = Input.ofNullable(idpRelayStateParameterName);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder serviceRole(Input<String> serviceRole) {
            this.serviceRole = Objects.requireNonNull(serviceRole);
            return this;
        }

        public Builder serviceRole(String serviceRole) {
            this.serviceRole = Input.of(Objects.requireNonNull(serviceRole));
            return this;
        }

        public Builder subnetIds(Input<List<String>> subnetIds) {
            this.subnetIds = Objects.requireNonNull(subnetIds);
            return this;
        }

        public Builder subnetIds(List<String> subnetIds) {
            this.subnetIds = Input.of(Objects.requireNonNull(subnetIds));
            return this;
        }

        public Builder tags(@Nullable Input<List<StudioTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<StudioTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder userRole(@Nullable Input<String> userRole) {
            this.userRole = userRole;
            return this;
        }

        public Builder userRole(@Nullable String userRole) {
            this.userRole = Input.ofNullable(userRole);
            return this;
        }

        public Builder vpcId(Input<String> vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }

        public Builder vpcId(String vpcId) {
            this.vpcId = Input.of(Objects.requireNonNull(vpcId));
            return this;
        }

        public Builder workspaceSecurityGroupId(Input<String> workspaceSecurityGroupId) {
            this.workspaceSecurityGroupId = Objects.requireNonNull(workspaceSecurityGroupId);
            return this;
        }

        public Builder workspaceSecurityGroupId(String workspaceSecurityGroupId) {
            this.workspaceSecurityGroupId = Input.of(Objects.requireNonNull(workspaceSecurityGroupId));
            return this;
        }
        public StudioArgs build() {
            return new StudioArgs(authMode, defaultS3Location, description, engineSecurityGroupId, idpAuthUrl, idpRelayStateParameterName, name, serviceRole, subnetIds, tags, userRole, vpcId, workspaceSecurityGroupId);
        }
    }
}
