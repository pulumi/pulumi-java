// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lookoutmetrics.inputs;

import io.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorVpcConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AnomalyDetectorRedshiftSourceConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnomalyDetectorRedshiftSourceConfigArgs Empty = new AnomalyDetectorRedshiftSourceConfigArgs();

    @InputImport(name="clusterIdentifier", required=true)
      private final Input<String> clusterIdentifier;

    public Input<String> getClusterIdentifier() {
        return this.clusterIdentifier;
    }

    @InputImport(name="databaseHost", required=true)
      private final Input<String> databaseHost;

    public Input<String> getDatabaseHost() {
        return this.databaseHost;
    }

    @InputImport(name="databaseName", required=true)
      private final Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName;
    }

    @InputImport(name="databasePort", required=true)
      private final Input<Integer> databasePort;

    public Input<Integer> getDatabasePort() {
        return this.databasePort;
    }

    @InputImport(name="roleArn", required=true)
      private final Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn;
    }

    @InputImport(name="secretManagerArn", required=true)
      private final Input<String> secretManagerArn;

    public Input<String> getSecretManagerArn() {
        return this.secretManagerArn;
    }

    @InputImport(name="tableName", required=true)
      private final Input<String> tableName;

    public Input<String> getTableName() {
        return this.tableName;
    }

    @InputImport(name="vpcConfiguration", required=true)
      private final Input<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration;

    public Input<AnomalyDetectorVpcConfigurationArgs> getVpcConfiguration() {
        return this.vpcConfiguration;
    }

    public AnomalyDetectorRedshiftSourceConfigArgs(
        Input<String> clusterIdentifier,
        Input<String> databaseHost,
        Input<String> databaseName,
        Input<Integer> databasePort,
        Input<String> roleArn,
        Input<String> secretManagerArn,
        Input<String> tableName,
        Input<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration) {
        this.clusterIdentifier = Objects.requireNonNull(clusterIdentifier, "expected parameter 'clusterIdentifier' to be non-null");
        this.databaseHost = Objects.requireNonNull(databaseHost, "expected parameter 'databaseHost' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.databasePort = Objects.requireNonNull(databasePort, "expected parameter 'databasePort' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.secretManagerArn = Objects.requireNonNull(secretManagerArn, "expected parameter 'secretManagerArn' to be non-null");
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
        this.vpcConfiguration = Objects.requireNonNull(vpcConfiguration, "expected parameter 'vpcConfiguration' to be non-null");
    }

    private AnomalyDetectorRedshiftSourceConfigArgs() {
        this.clusterIdentifier = Input.empty();
        this.databaseHost = Input.empty();
        this.databaseName = Input.empty();
        this.databasePort = Input.empty();
        this.roleArn = Input.empty();
        this.secretManagerArn = Input.empty();
        this.tableName = Input.empty();
        this.vpcConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnomalyDetectorRedshiftSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clusterIdentifier;
        private Input<String> databaseHost;
        private Input<String> databaseName;
        private Input<Integer> databasePort;
        private Input<String> roleArn;
        private Input<String> secretManagerArn;
        private Input<String> tableName;
        private Input<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(AnomalyDetectorRedshiftSourceConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.databaseHost = defaults.databaseHost;
    	      this.databaseName = defaults.databaseName;
    	      this.databasePort = defaults.databasePort;
    	      this.roleArn = defaults.roleArn;
    	      this.secretManagerArn = defaults.secretManagerArn;
    	      this.tableName = defaults.tableName;
    	      this.vpcConfiguration = defaults.vpcConfiguration;
        }

        public Builder clusterIdentifier(Input<String> clusterIdentifier) {
            this.clusterIdentifier = Objects.requireNonNull(clusterIdentifier);
            return this;
        }

        public Builder clusterIdentifier(String clusterIdentifier) {
            this.clusterIdentifier = Input.of(Objects.requireNonNull(clusterIdentifier));
            return this;
        }

        public Builder databaseHost(Input<String> databaseHost) {
            this.databaseHost = Objects.requireNonNull(databaseHost);
            return this;
        }

        public Builder databaseHost(String databaseHost) {
            this.databaseHost = Input.of(Objects.requireNonNull(databaseHost));
            return this;
        }

        public Builder databaseName(Input<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Input.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder databasePort(Input<Integer> databasePort) {
            this.databasePort = Objects.requireNonNull(databasePort);
            return this;
        }

        public Builder databasePort(Integer databasePort) {
            this.databasePort = Input.of(Objects.requireNonNull(databasePort));
            return this;
        }

        public Builder roleArn(Input<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder roleArn(String roleArn) {
            this.roleArn = Input.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder secretManagerArn(Input<String> secretManagerArn) {
            this.secretManagerArn = Objects.requireNonNull(secretManagerArn);
            return this;
        }

        public Builder secretManagerArn(String secretManagerArn) {
            this.secretManagerArn = Input.of(Objects.requireNonNull(secretManagerArn));
            return this;
        }

        public Builder tableName(Input<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }

        public Builder tableName(String tableName) {
            this.tableName = Input.of(Objects.requireNonNull(tableName));
            return this;
        }

        public Builder vpcConfiguration(Input<AnomalyDetectorVpcConfigurationArgs> vpcConfiguration) {
            this.vpcConfiguration = Objects.requireNonNull(vpcConfiguration);
            return this;
        }

        public Builder vpcConfiguration(AnomalyDetectorVpcConfigurationArgs vpcConfiguration) {
            this.vpcConfiguration = Input.of(Objects.requireNonNull(vpcConfiguration));
            return this;
        }
        public AnomalyDetectorRedshiftSourceConfigArgs build() {
            return new AnomalyDetectorRedshiftSourceConfigArgs(clusterIdentifier, databaseHost, databaseName, databasePort, roleArn, secretManagerArn, tableName, vpcConfiguration);
        }
    }
}
