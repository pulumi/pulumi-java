// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.athena;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PreparedStatementArgs extends io.pulumi.resources.ResourceArgs {

    public static final PreparedStatementArgs Empty = new PreparedStatementArgs();

    /**
     * The description of the prepared statement.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The query string for the prepared statement.
     * 
     */
    @Import(name="queryStatement", required=true)
      private final Output<String> queryStatement;

    public Output<String> getQueryStatement() {
        return this.queryStatement;
    }

    /**
     * The name of the prepared statement.
     * 
     */
    @Import(name="statementName", required=true)
      private final Output<String> statementName;

    public Output<String> getStatementName() {
        return this.statementName;
    }

    /**
     * The name of the workgroup to which the prepared statement belongs.
     * 
     */
    @Import(name="workGroup", required=true)
      private final Output<String> workGroup;

    public Output<String> getWorkGroup() {
        return this.workGroup;
    }

    public PreparedStatementArgs(
        @Nullable Output<String> description,
        Output<String> queryStatement,
        Output<String> statementName,
        Output<String> workGroup) {
        this.description = description;
        this.queryStatement = Objects.requireNonNull(queryStatement, "expected parameter 'queryStatement' to be non-null");
        this.statementName = Objects.requireNonNull(statementName, "expected parameter 'statementName' to be non-null");
        this.workGroup = Objects.requireNonNull(workGroup, "expected parameter 'workGroup' to be non-null");
    }

    private PreparedStatementArgs() {
        this.description = Codegen.empty();
        this.queryStatement = Codegen.empty();
        this.statementName = Codegen.empty();
        this.workGroup = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreparedStatementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> queryStatement;
        private Output<String> statementName;
        private Output<String> workGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(PreparedStatementArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.queryStatement = defaults.queryStatement;
    	      this.statementName = defaults.statementName;
    	      this.workGroup = defaults.workGroup;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder queryStatement(Output<String> queryStatement) {
            this.queryStatement = Objects.requireNonNull(queryStatement);
            return this;
        }
        public Builder queryStatement(String queryStatement) {
            this.queryStatement = Output.of(Objects.requireNonNull(queryStatement));
            return this;
        }
        public Builder statementName(Output<String> statementName) {
            this.statementName = Objects.requireNonNull(statementName);
            return this;
        }
        public Builder statementName(String statementName) {
            this.statementName = Output.of(Objects.requireNonNull(statementName));
            return this;
        }
        public Builder workGroup(Output<String> workGroup) {
            this.workGroup = Objects.requireNonNull(workGroup);
            return this;
        }
        public Builder workGroup(String workGroup) {
            this.workGroup = Output.of(Objects.requireNonNull(workGroup));
            return this;
        }        public PreparedStatementArgs build() {
            return new PreparedStatementArgs(description, queryStatement, statementName, workGroup);
        }
    }
}
