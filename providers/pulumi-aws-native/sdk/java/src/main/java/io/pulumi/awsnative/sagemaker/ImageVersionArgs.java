// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.sagemaker;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class ImageVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageVersionArgs Empty = new ImageVersionArgs();

    @InputImport(name="baseImage", required=true)
      private final Input<String> baseImage;

    public Input<String> getBaseImage() {
        return this.baseImage;
    }

    @InputImport(name="imageName", required=true)
      private final Input<String> imageName;

    public Input<String> getImageName() {
        return this.imageName;
    }

    public ImageVersionArgs(
        Input<String> baseImage,
        Input<String> imageName) {
        this.baseImage = Objects.requireNonNull(baseImage, "expected parameter 'baseImage' to be non-null");
        this.imageName = Objects.requireNonNull(imageName, "expected parameter 'imageName' to be non-null");
    }

    private ImageVersionArgs() {
        this.baseImage = Input.empty();
        this.imageName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> baseImage;
        private Input<String> imageName;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseImage = defaults.baseImage;
    	      this.imageName = defaults.imageName;
        }

        public Builder baseImage(Input<String> baseImage) {
            this.baseImage = Objects.requireNonNull(baseImage);
            return this;
        }

        public Builder baseImage(String baseImage) {
            this.baseImage = Input.of(Objects.requireNonNull(baseImage));
            return this;
        }

        public Builder imageName(Input<String> imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }

        public Builder imageName(String imageName) {
            this.imageName = Input.of(Objects.requireNonNull(imageName));
            return this;
        }
        public ImageVersionArgs build() {
            return new ImageVersionArgs(baseImage, imageName);
        }
    }
}
