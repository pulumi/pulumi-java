// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight.outputs;

import io.pulumi.awsnative.quicksight.outputs.DataSourceParameters;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DataSourceCredentialPair {
    /**
     * <p>A set of alternate data source parameters that you want to share for these
     *             credentials. The credentials are applied in tandem with the data source parameters when
     *             you copy a data source by using a create or update request. The API operation compares
     *             the <code>DataSourceParameters</code> structure that's in the request with the
     *             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
     *             structures are an exact match, the request is allowed to use the new data source with
     *             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
     *             null, the <code>DataSourceParameters</code> originally used with these
     *                 <code>Credentials</code> is automatically allowed.</p>
     * 
     */
    private final @Nullable List<DataSourceParameters> alternateDataSourceParameters;
    /**
     * <p>Password.</p>
     * 
     */
    private final String password;
    /**
     * <p>User name.</p>
     * 
     */
    private final String username;

    @CustomType.Constructor
    private DataSourceCredentialPair(
        @CustomType.Parameter("alternateDataSourceParameters") @Nullable List<DataSourceParameters> alternateDataSourceParameters,
        @CustomType.Parameter("password") String password,
        @CustomType.Parameter("username") String username) {
        this.alternateDataSourceParameters = alternateDataSourceParameters;
        this.password = password;
        this.username = username;
    }

    /**
     * <p>A set of alternate data source parameters that you want to share for these
     *             credentials. The credentials are applied in tandem with the data source parameters when
     *             you copy a data source by using a create or update request. The API operation compares
     *             the <code>DataSourceParameters</code> structure that's in the request with the
     *             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
     *             structures are an exact match, the request is allowed to use the new data source with
     *             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
     *             null, the <code>DataSourceParameters</code> originally used with these
     *                 <code>Credentials</code> is automatically allowed.</p>
     * 
    */
    public List<DataSourceParameters> getAlternateDataSourceParameters() {
        return this.alternateDataSourceParameters == null ? List.of() : this.alternateDataSourceParameters;
    }
    /**
     * <p>Password.</p>
     * 
    */
    public String getPassword() {
        return this.password;
    }
    /**
     * <p>User name.</p>
     * 
    */
    public String getUsername() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceCredentialPair defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<DataSourceParameters> alternateDataSourceParameters;
        private String password;
        private String username;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceCredentialPair defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateDataSourceParameters = defaults.alternateDataSourceParameters;
    	      this.password = defaults.password;
    	      this.username = defaults.username;
        }

        public Builder alternateDataSourceParameters(@Nullable List<DataSourceParameters> alternateDataSourceParameters) {
            this.alternateDataSourceParameters = alternateDataSourceParameters;
            return this;
        }

        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public DataSourceCredentialPair build() {
            return new DataSourceCredentialPair(alternateDataSourceParameters, password, username);
        }
    }
}
