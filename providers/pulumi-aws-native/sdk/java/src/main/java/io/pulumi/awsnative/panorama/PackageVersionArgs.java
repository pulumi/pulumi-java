// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.panorama;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PackageVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PackageVersionArgs Empty = new PackageVersionArgs();

    @InputImport(name="markLatest")
      private final @Nullable Output<Boolean> markLatest;

    public Output<Boolean> getMarkLatest() {
        return this.markLatest == null ? Output.empty() : this.markLatest;
    }

    @InputImport(name="ownerAccount")
      private final @Nullable Output<String> ownerAccount;

    public Output<String> getOwnerAccount() {
        return this.ownerAccount == null ? Output.empty() : this.ownerAccount;
    }

    @InputImport(name="packageId", required=true)
      private final Output<String> packageId;

    public Output<String> getPackageId() {
        return this.packageId;
    }

    @InputImport(name="packageVersion", required=true)
      private final Output<String> packageVersion;

    public Output<String> getPackageVersion() {
        return this.packageVersion;
    }

    @InputImport(name="patchVersion", required=true)
      private final Output<String> patchVersion;

    public Output<String> getPatchVersion() {
        return this.patchVersion;
    }

    @InputImport(name="updatedLatestPatchVersion")
      private final @Nullable Output<String> updatedLatestPatchVersion;

    public Output<String> getUpdatedLatestPatchVersion() {
        return this.updatedLatestPatchVersion == null ? Output.empty() : this.updatedLatestPatchVersion;
    }

    public PackageVersionArgs(
        @Nullable Output<Boolean> markLatest,
        @Nullable Output<String> ownerAccount,
        Output<String> packageId,
        Output<String> packageVersion,
        Output<String> patchVersion,
        @Nullable Output<String> updatedLatestPatchVersion) {
        this.markLatest = markLatest;
        this.ownerAccount = ownerAccount;
        this.packageId = Objects.requireNonNull(packageId, "expected parameter 'packageId' to be non-null");
        this.packageVersion = Objects.requireNonNull(packageVersion, "expected parameter 'packageVersion' to be non-null");
        this.patchVersion = Objects.requireNonNull(patchVersion, "expected parameter 'patchVersion' to be non-null");
        this.updatedLatestPatchVersion = updatedLatestPatchVersion;
    }

    private PackageVersionArgs() {
        this.markLatest = Output.empty();
        this.ownerAccount = Output.empty();
        this.packageId = Output.empty();
        this.packageVersion = Output.empty();
        this.patchVersion = Output.empty();
        this.updatedLatestPatchVersion = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackageVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> markLatest;
        private @Nullable Output<String> ownerAccount;
        private Output<String> packageId;
        private Output<String> packageVersion;
        private Output<String> patchVersion;
        private @Nullable Output<String> updatedLatestPatchVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(PackageVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.markLatest = defaults.markLatest;
    	      this.ownerAccount = defaults.ownerAccount;
    	      this.packageId = defaults.packageId;
    	      this.packageVersion = defaults.packageVersion;
    	      this.patchVersion = defaults.patchVersion;
    	      this.updatedLatestPatchVersion = defaults.updatedLatestPatchVersion;
        }

        public Builder markLatest(@Nullable Output<Boolean> markLatest) {
            this.markLatest = markLatest;
            return this;
        }

        public Builder markLatest(@Nullable Boolean markLatest) {
            this.markLatest = Output.ofNullable(markLatest);
            return this;
        }

        public Builder ownerAccount(@Nullable Output<String> ownerAccount) {
            this.ownerAccount = ownerAccount;
            return this;
        }

        public Builder ownerAccount(@Nullable String ownerAccount) {
            this.ownerAccount = Output.ofNullable(ownerAccount);
            return this;
        }

        public Builder packageId(Output<String> packageId) {
            this.packageId = Objects.requireNonNull(packageId);
            return this;
        }

        public Builder packageId(String packageId) {
            this.packageId = Output.of(Objects.requireNonNull(packageId));
            return this;
        }

        public Builder packageVersion(Output<String> packageVersion) {
            this.packageVersion = Objects.requireNonNull(packageVersion);
            return this;
        }

        public Builder packageVersion(String packageVersion) {
            this.packageVersion = Output.of(Objects.requireNonNull(packageVersion));
            return this;
        }

        public Builder patchVersion(Output<String> patchVersion) {
            this.patchVersion = Objects.requireNonNull(patchVersion);
            return this;
        }

        public Builder patchVersion(String patchVersion) {
            this.patchVersion = Output.of(Objects.requireNonNull(patchVersion));
            return this;
        }

        public Builder updatedLatestPatchVersion(@Nullable Output<String> updatedLatestPatchVersion) {
            this.updatedLatestPatchVersion = updatedLatestPatchVersion;
            return this;
        }

        public Builder updatedLatestPatchVersion(@Nullable String updatedLatestPatchVersion) {
            this.updatedLatestPatchVersion = Output.ofNullable(updatedLatestPatchVersion);
            return this;
        }
        public PackageVersionArgs build() {
            return new PackageVersionArgs(markLatest, ownerAccount, packageId, packageVersion, patchVersion, updatedLatestPatchVersion);
        }
    }
}
