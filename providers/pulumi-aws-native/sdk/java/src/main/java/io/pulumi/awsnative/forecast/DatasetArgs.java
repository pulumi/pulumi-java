// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.forecast;

import io.pulumi.awsnative.forecast.enums.DatasetDomain;
import io.pulumi.awsnative.forecast.enums.DatasetType;
import io.pulumi.awsnative.forecast.inputs.EncryptionConfigPropertiesArgs;
import io.pulumi.awsnative.forecast.inputs.SchemaPropertiesArgs;
import io.pulumi.awsnative.forecast.inputs.TagsItemPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatasetArgs Empty = new DatasetArgs();

    /**
     * Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
     * 
     */
    @InputImport(name="dataFrequency")
      private final @Nullable Output<String> dataFrequency;

    public Output<String> getDataFrequency() {
        return this.dataFrequency == null ? Output.empty() : this.dataFrequency;
    }

    /**
     * A name for the dataset
     * 
     */
    @InputImport(name="datasetName")
      private final @Nullable Output<String> datasetName;

    public Output<String> getDatasetName() {
        return this.datasetName == null ? Output.empty() : this.datasetName;
    }

    /**
     * The dataset type
     * 
     */
    @InputImport(name="datasetType", required=true)
      private final Output<DatasetType> datasetType;

    public Output<DatasetType> getDatasetType() {
        return this.datasetType;
    }

    /**
     * The domain associated with the dataset
     * 
     */
    @InputImport(name="domain", required=true)
      private final Output<DatasetDomain> domain;

    public Output<DatasetDomain> getDomain() {
        return this.domain;
    }

    @InputImport(name="encryptionConfig")
      private final @Nullable Output<EncryptionConfigPropertiesArgs> encryptionConfig;

    public Output<EncryptionConfigPropertiesArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Output.empty() : this.encryptionConfig;
    }

    @InputImport(name="schema", required=true)
      private final Output<SchemaPropertiesArgs> schema;

    public Output<SchemaPropertiesArgs> getSchema() {
        return this.schema;
    }

    @InputImport(name="tags")
      private final @Nullable Output<List<TagsItemPropertiesArgs>> tags;

    public Output<List<TagsItemPropertiesArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DatasetArgs(
        @Nullable Output<String> dataFrequency,
        @Nullable Output<String> datasetName,
        Output<DatasetType> datasetType,
        Output<DatasetDomain> domain,
        @Nullable Output<EncryptionConfigPropertiesArgs> encryptionConfig,
        Output<SchemaPropertiesArgs> schema,
        @Nullable Output<List<TagsItemPropertiesArgs>> tags) {
        this.dataFrequency = dataFrequency;
        this.datasetName = datasetName;
        this.datasetType = Objects.requireNonNull(datasetType, "expected parameter 'datasetType' to be non-null");
        this.domain = Objects.requireNonNull(domain, "expected parameter 'domain' to be non-null");
        this.encryptionConfig = encryptionConfig;
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
        this.tags = tags;
    }

    private DatasetArgs() {
        this.dataFrequency = Output.empty();
        this.datasetName = Output.empty();
        this.datasetType = Output.empty();
        this.domain = Output.empty();
        this.encryptionConfig = Output.empty();
        this.schema = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dataFrequency;
        private @Nullable Output<String> datasetName;
        private Output<DatasetType> datasetType;
        private Output<DatasetDomain> domain;
        private @Nullable Output<EncryptionConfigPropertiesArgs> encryptionConfig;
        private Output<SchemaPropertiesArgs> schema;
        private @Nullable Output<List<TagsItemPropertiesArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataFrequency = defaults.dataFrequency;
    	      this.datasetName = defaults.datasetName;
    	      this.datasetType = defaults.datasetType;
    	      this.domain = defaults.domain;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.schema = defaults.schema;
    	      this.tags = defaults.tags;
        }

        public Builder dataFrequency(@Nullable Output<String> dataFrequency) {
            this.dataFrequency = dataFrequency;
            return this;
        }

        public Builder dataFrequency(@Nullable String dataFrequency) {
            this.dataFrequency = Output.ofNullable(dataFrequency);
            return this;
        }

        public Builder datasetName(@Nullable Output<String> datasetName) {
            this.datasetName = datasetName;
            return this;
        }

        public Builder datasetName(@Nullable String datasetName) {
            this.datasetName = Output.ofNullable(datasetName);
            return this;
        }

        public Builder datasetType(Output<DatasetType> datasetType) {
            this.datasetType = Objects.requireNonNull(datasetType);
            return this;
        }

        public Builder datasetType(DatasetType datasetType) {
            this.datasetType = Output.of(Objects.requireNonNull(datasetType));
            return this;
        }

        public Builder domain(Output<DatasetDomain> domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }

        public Builder domain(DatasetDomain domain) {
            this.domain = Output.of(Objects.requireNonNull(domain));
            return this;
        }

        public Builder encryptionConfig(@Nullable Output<EncryptionConfigPropertiesArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder encryptionConfig(@Nullable EncryptionConfigPropertiesArgs encryptionConfig) {
            this.encryptionConfig = Output.ofNullable(encryptionConfig);
            return this;
        }

        public Builder schema(Output<SchemaPropertiesArgs> schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }

        public Builder schema(SchemaPropertiesArgs schema) {
            this.schema = Output.of(Objects.requireNonNull(schema));
            return this;
        }

        public Builder tags(@Nullable Output<List<TagsItemPropertiesArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<TagsItemPropertiesArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public DatasetArgs build() {
            return new DatasetArgs(dataFrequency, datasetName, datasetType, domain, encryptionConfig, schema, tags);
        }
    }
}
