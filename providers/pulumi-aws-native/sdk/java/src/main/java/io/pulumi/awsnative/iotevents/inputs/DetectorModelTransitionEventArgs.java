// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iotevents.inputs;

import io.pulumi.awsnative.iotevents.inputs.DetectorModelActionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the ` actions  `performed and the next `state` entered when a `condition` evaluates to `TRUE`.
 * 
 */
public final class DetectorModelTransitionEventArgs extends io.pulumi.resources.ResourceArgs {

    public static final DetectorModelTransitionEventArgs Empty = new DetectorModelTransitionEventArgs();

    /**
     * The actions to be performed.
     * 
     */
    @InputImport(name="actions")
      private final @Nullable Input<List<DetectorModelActionArgs>> actions;

    public Input<List<DetectorModelActionArgs>> getActions() {
        return this.actions == null ? Input.empty() : this.actions;
    }

    /**
     * A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
     * 
     */
    @InputImport(name="condition", required=true)
      private final Input<String> condition;

    public Input<String> getCondition() {
        return this.condition;
    }

    /**
     * The name of the event.
     * 
     */
    @InputImport(name="eventName", required=true)
      private final Input<String> eventName;

    public Input<String> getEventName() {
        return this.eventName;
    }

    /**
     * The next state to enter.
     * 
     */
    @InputImport(name="nextState", required=true)
      private final Input<String> nextState;

    public Input<String> getNextState() {
        return this.nextState;
    }

    public DetectorModelTransitionEventArgs(
        @Nullable Input<List<DetectorModelActionArgs>> actions,
        Input<String> condition,
        Input<String> eventName,
        Input<String> nextState) {
        this.actions = actions;
        this.condition = Objects.requireNonNull(condition, "expected parameter 'condition' to be non-null");
        this.eventName = Objects.requireNonNull(eventName, "expected parameter 'eventName' to be non-null");
        this.nextState = Objects.requireNonNull(nextState, "expected parameter 'nextState' to be non-null");
    }

    private DetectorModelTransitionEventArgs() {
        this.actions = Input.empty();
        this.condition = Input.empty();
        this.eventName = Input.empty();
        this.nextState = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DetectorModelTransitionEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<DetectorModelActionArgs>> actions;
        private Input<String> condition;
        private Input<String> eventName;
        private Input<String> nextState;

        public Builder() {
    	      // Empty
        }

        public Builder(DetectorModelTransitionEventArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.condition = defaults.condition;
    	      this.eventName = defaults.eventName;
    	      this.nextState = defaults.nextState;
        }

        public Builder setActions(@Nullable Input<List<DetectorModelActionArgs>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder setActions(@Nullable List<DetectorModelActionArgs> actions) {
            this.actions = Input.ofNullable(actions);
            return this;
        }

        public Builder setCondition(Input<String> condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }

        public Builder setCondition(String condition) {
            this.condition = Input.of(Objects.requireNonNull(condition));
            return this;
        }

        public Builder setEventName(Input<String> eventName) {
            this.eventName = Objects.requireNonNull(eventName);
            return this;
        }

        public Builder setEventName(String eventName) {
            this.eventName = Input.of(Objects.requireNonNull(eventName));
            return this;
        }

        public Builder setNextState(Input<String> nextState) {
            this.nextState = Objects.requireNonNull(nextState);
            return this;
        }

        public Builder setNextState(String nextState) {
            this.nextState = Input.of(Objects.requireNonNull(nextState));
            return this;
        }
        public DetectorModelTransitionEventArgs build() {
            return new DetectorModelTransitionEventArgs(actions, condition, eventName, nextState);
        }
    }
}
