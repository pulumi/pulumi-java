// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ecs;

import io.pulumi.awsnative.Utilities;
import io.pulumi.awsnative.ecs.TaskDefinitionArgs;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionContainerDefinition;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionEphemeralStorage;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionInferenceAccelerator;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionPlacementConstraint;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionProxyConfiguration;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionRuntimePlatform;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionTag;
import io.pulumi.awsnative.ecs.outputs.TaskDefinitionVolume;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Resource Schema describing various properties for ECS TaskDefinition
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var taskdefinition = new AwsNative.ECS.TaskDefinition("taskdefinition", new AwsNative.ECS.TaskDefinitionArgs
 *         {
 *             RequiresCompatibilities = 
 *             {
 *                 "EC2",
 *             },
 *             ContainerDefinitions = 
 *             {
 *                 new AwsNative.ECS.Inputs.TaskDefinitionContainerDefinitionArgs
 *                 {
 *                     Name = "my-app",
 *                     MountPoints = 
 *                     {
 *                         new AwsNative.ECS.Inputs.TaskDefinitionMountPointArgs
 *                         {
 *                             SourceVolume = "my-vol",
 *                             ContainerPath = "/var/www/my-vol",
 *                         },
 *                     },
 *                     Image = "amazon/amazon-ecs-sample",
 *                     Cpu = 256,
 *                     EntryPoint = 
 *                     {
 *                         "/usr/sbin/apache2",
 *                         "-D",
 *                         "FOREGROUND",
 *                     },
 *                     Memory = 512,
 *                     Essential = true,
 *                 },
 *                 new AwsNative.ECS.Inputs.TaskDefinitionContainerDefinitionArgs
 *                 {
 *                     Name = "busybox",
 *                     Image = "busybox",
 *                     Cpu = 256,
 *                     EntryPoint = 
 *                     {
 *                         "sh",
 *                         "-c",
 *                     },
 *                     Memory = 512,
 *                     Command = 
 *                     {
 *                         "/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\"",
 *                     },
 *                     Essential = false,
 *                     DependsOn = 
 *                     {
 *                         new AwsNative.ECS.Inputs.TaskDefinitionContainerDependencyArgs
 *                         {
 *                             ContainerName = "my-app",
 *                             Condition = "START",
 *                         },
 *                     },
 *                     VolumesFrom = 
 *                     {
 *                         new AwsNative.ECS.Inputs.TaskDefinitionVolumeFromArgs
 *                         {
 *                             SourceContainer = "my-app",
 *                         },
 *                     },
 *                 },
 *             },
 *             Volumes = 
 *             {
 *                 new AwsNative.ECS.Inputs.TaskDefinitionVolumeArgs
 *                 {
 *                     Host = new AwsNative.ECS.Inputs.TaskDefinitionHostVolumePropertiesArgs
 *                     {
 *                         SourcePath = "/var/lib/docker/vfs/dir/",
 *                     },
 *                     Name = "my-vol",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ecs.NewTaskDefinition(ctx, "taskdefinition", &ecs.TaskDefinitionArgs{
 * 			RequiresCompatibilities: pulumi.StringArray{
 * 				pulumi.String("EC2"),
 * 			},
 * 			ContainerDefinitions: []ecs.TaskDefinitionContainerDefinitionArgs{
 * 				&ecs.TaskDefinitionContainerDefinitionArgs{
 * 					Name: pulumi.String("my-app"),
 * 					MountPoints: ecs.TaskDefinitionMountPointArray{
 * 						&ecs.TaskDefinitionMountPointArgs{
 * 							SourceVolume:  pulumi.String("my-vol"),
 * 							ContainerPath: pulumi.String("/var/www/my-vol"),
 * 						},
 * 					},
 * 					Image: pulumi.String("amazon/amazon-ecs-sample"),
 * 					Cpu:   pulumi.Int(256),
 * 					EntryPoint: pulumi.StringArray{
 * 						pulumi.String("/usr/sbin/apache2"),
 * 						pulumi.String("-D"),
 * 						pulumi.String("FOREGROUND"),
 * 					},
 * 					Memory:    pulumi.Int(512),
 * 					Essential: pulumi.Bool(true),
 * 				},
 * 				&ecs.TaskDefinitionContainerDefinitionArgs{
 * 					Name:  pulumi.String("busybox"),
 * 					Image: pulumi.String("busybox"),
 * 					Cpu:   pulumi.Int(256),
 * 					EntryPoint: pulumi.StringArray{
 * 						pulumi.String("sh"),
 * 						pulumi.String("-c"),
 * 					},
 * 					Memory: pulumi.Int(512),
 * 					Command: pulumi.StringArray{
 * 						pulumi.String("/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""),
 * 					},
 * 					Essential: pulumi.Bool(false),
 * 					DependsOn: ecs.TaskDefinitionContainerDependencyArray{
 * 						&ecs.TaskDefinitionContainerDependencyArgs{
 * 							ContainerName: pulumi.String("my-app"),
 * 							Condition:     pulumi.String("START"),
 * 						},
 * 					},
 * 					VolumesFrom: ecs.TaskDefinitionVolumeFromArray{
 * 						&ecs.TaskDefinitionVolumeFromArgs{
 * 							SourceContainer: pulumi.String("my-app"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Volumes: []ecs.TaskDefinitionVolumeArgs{
 * 				&ecs.TaskDefinitionVolumeArgs{
 * 					Host: &ecs.TaskDefinitionHostVolumePropertiesArgs{
 * 						SourcePath: pulumi.String("/var/lib/docker/vfs/dir/"),
 * 					},
 * 					Name: pulumi.String("my-vol"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const taskdefinition = new aws_native.ecs.TaskDefinition("taskdefinition", {
 *     requiresCompatibilities: ["EC2"],
 *     containerDefinitions: [
 *         {
 *             name: "my-app",
 *             mountPoints: [{
 *                 sourceVolume: "my-vol",
 *                 containerPath: "/var/www/my-vol",
 *             }],
 *             image: "amazon/amazon-ecs-sample",
 *             cpu: 256,
 *             entryPoint: [
 *                 "/usr/sbin/apache2",
 *                 "-D",
 *                 "FOREGROUND",
 *             ],
 *             memory: 512,
 *             essential: true,
 *         },
 *         {
 *             name: "busybox",
 *             image: "busybox",
 *             cpu: 256,
 *             entryPoint: [
 *                 "sh",
 *                 "-c",
 *             ],
 *             memory: 512,
 *             command: ["/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""],
 *             essential: false,
 *             dependsOn: [{
 *                 containerName: "my-app",
 *                 condition: "START",
 *             }],
 *             volumesFrom: [{
 *                 sourceContainer: "my-app",
 *             }],
 *         },
 *     ],
 *     volumes: [{
 *         host: {
 *             sourcePath: "/var/lib/docker/vfs/dir/",
 *         },
 *         name: "my-vol",
 *     }],
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * taskdefinition = aws_native.ecs.TaskDefinition("taskdefinition",
 *     requires_compatibilities=["EC2"],
 *     container_definitions=[
 *         aws_native.ecs.TaskDefinitionContainerDefinitionArgs(
 *             name="my-app",
 *             mount_points=[aws_native.ecs.TaskDefinitionMountPointArgs(
 *                 source_volume="my-vol",
 *                 container_path="/var/www/my-vol",
 *             )],
 *             image="amazon/amazon-ecs-sample",
 *             cpu=256,
 *             entry_point=[
 *                 "/usr/sbin/apache2",
 *                 "-D",
 *                 "FOREGROUND",
 *             ],
 *             memory=512,
 *             essential=True,
 *         ),
 *         aws_native.ecs.TaskDefinitionContainerDefinitionArgs(
 *             name="busybox",
 *             image="busybox",
 *             cpu=256,
 *             entry_point=[
 *                 "sh",
 *                 "-c",
 *             ],
 *             memory=512,
 *             command=["/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""],
 *             essential=False,
 *             depends_on=[aws_native.ecs.TaskDefinitionContainerDependencyArgs(
 *                 container_name="my-app",
 *                 condition="START",
 *             )],
 *             volumes_from=[aws_native.ecs.TaskDefinitionVolumeFromArgs(
 *                 source_container="my-app",
 *             )],
 *         ),
 *     ],
 *     volumes=[aws_native.ecs.TaskDefinitionVolumeArgs(
 *         host=aws_native.ecs.TaskDefinitionHostVolumePropertiesArgs(
 *             source_path="/var/lib/docker/vfs/dir/",
 *         ),
 *         name="my-vol",
 *     )])
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Example
 * ```csharp
 * using Pulumi;
 * using AwsNative = Pulumi.AwsNative;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var taskdefinition = new AwsNative.ECS.TaskDefinition("taskdefinition", new AwsNative.ECS.TaskDefinitionArgs
 *         {
 *             RequiresCompatibilities = 
 *             {
 *                 "EC2",
 *             },
 *             ContainerDefinitions = 
 *             {
 *                 new AwsNative.ECS.Inputs.TaskDefinitionContainerDefinitionArgs
 *                 {
 *                     Name = "my-app",
 *                     MountPoints = 
 *                     {
 *                         new AwsNative.ECS.Inputs.TaskDefinitionMountPointArgs
 *                         {
 *                             SourceVolume = "my-vol",
 *                             ContainerPath = "/var/www/my-vol",
 *                         },
 *                     },
 *                     Image = "amazon/amazon-ecs-sample",
 *                     Cpu = 256,
 *                     EntryPoint = 
 *                     {
 *                         "/usr/sbin/apache2",
 *                         "-D",
 *                         "FOREGROUND",
 *                     },
 *                     Memory = 512,
 *                     Essential = true,
 *                 },
 *                 new AwsNative.ECS.Inputs.TaskDefinitionContainerDefinitionArgs
 *                 {
 *                     Name = "busybox",
 *                     Image = "busybox",
 *                     Cpu = 256,
 *                     EntryPoint = 
 *                     {
 *                         "sh",
 *                         "-c",
 *                     },
 *                     Memory = 512,
 *                     Command = 
 *                     {
 *                         "/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\"",
 *                     },
 *                     Essential = false,
 *                     DependsOn = 
 *                     {
 *                         new AwsNative.ECS.Inputs.TaskDefinitionContainerDependencyArgs
 *                         {
 *                             ContainerName = "my-app",
 *                             Condition = "START",
 *                         },
 *                     },
 *                     VolumesFrom = 
 *                     {
 *                         new AwsNative.ECS.Inputs.TaskDefinitionVolumeFromArgs
 *                         {
 *                             SourceContainer = "my-app",
 *                         },
 *                     },
 *                 },
 *             },
 *             Volumes = 
 *             {
 *                 new AwsNative.ECS.Inputs.TaskDefinitionVolumeArgs
 *                 {
 *                     Host = new AwsNative.ECS.Inputs.TaskDefinitionHostVolumePropertiesArgs
 *                     {
 *                         SourcePath = "/var/lib/docker/vfs/dir/",
 *                     },
 *                     Name = "my-vol",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * 
 * ```
 * 
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ecs.NewTaskDefinition(ctx, "taskdefinition", &ecs.TaskDefinitionArgs{
 * 			RequiresCompatibilities: pulumi.StringArray{
 * 				pulumi.String("EC2"),
 * 			},
 * 			ContainerDefinitions: []ecs.TaskDefinitionContainerDefinitionArgs{
 * 				&ecs.TaskDefinitionContainerDefinitionArgs{
 * 					Name: pulumi.String("my-app"),
 * 					MountPoints: ecs.TaskDefinitionMountPointArray{
 * 						&ecs.TaskDefinitionMountPointArgs{
 * 							SourceVolume:  pulumi.String("my-vol"),
 * 							ContainerPath: pulumi.String("/var/www/my-vol"),
 * 						},
 * 					},
 * 					Image: pulumi.String("amazon/amazon-ecs-sample"),
 * 					Cpu:   pulumi.Int(256),
 * 					EntryPoint: pulumi.StringArray{
 * 						pulumi.String("/usr/sbin/apache2"),
 * 						pulumi.String("-D"),
 * 						pulumi.String("FOREGROUND"),
 * 					},
 * 					Memory:    pulumi.Int(512),
 * 					Essential: pulumi.Bool(true),
 * 				},
 * 				&ecs.TaskDefinitionContainerDefinitionArgs{
 * 					Name:  pulumi.String("busybox"),
 * 					Image: pulumi.String("busybox"),
 * 					Cpu:   pulumi.Int(256),
 * 					EntryPoint: pulumi.StringArray{
 * 						pulumi.String("sh"),
 * 						pulumi.String("-c"),
 * 					},
 * 					Memory: pulumi.Int(512),
 * 					Command: pulumi.StringArray{
 * 						pulumi.String("/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""),
 * 					},
 * 					Essential: pulumi.Bool(false),
 * 					DependsOn: ecs.TaskDefinitionContainerDependencyArray{
 * 						&ecs.TaskDefinitionContainerDependencyArgs{
 * 							ContainerName: pulumi.String("my-app"),
 * 							Condition:     pulumi.String("START"),
 * 						},
 * 					},
 * 					VolumesFrom: ecs.TaskDefinitionVolumeFromArray{
 * 						&ecs.TaskDefinitionVolumeFromArgs{
 * 							SourceContainer: pulumi.String("my-app"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Volumes: []ecs.TaskDefinitionVolumeArgs{
 * 				&ecs.TaskDefinitionVolumeArgs{
 * 					Host: &ecs.TaskDefinitionHostVolumePropertiesArgs{
 * 						SourcePath: pulumi.String("/var/lib/docker/vfs/dir/"),
 * 					},
 * 					Name: pulumi.String("my-vol"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * 
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 * 
 * const taskdefinition = new aws_native.ecs.TaskDefinition("taskdefinition", {
 *     requiresCompatibilities: ["EC2"],
 *     containerDefinitions: [
 *         {
 *             name: "my-app",
 *             mountPoints: [{
 *                 sourceVolume: "my-vol",
 *                 containerPath: "/var/www/my-vol",
 *             }],
 *             image: "amazon/amazon-ecs-sample",
 *             cpu: 256,
 *             entryPoint: [
 *                 "/usr/sbin/apache2",
 *                 "-D",
 *                 "FOREGROUND",
 *             ],
 *             memory: 512,
 *             essential: true,
 *         },
 *         {
 *             name: "busybox",
 *             image: "busybox",
 *             cpu: 256,
 *             entryPoint: [
 *                 "sh",
 *                 "-c",
 *             ],
 *             memory: 512,
 *             command: ["/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""],
 *             essential: false,
 *             dependsOn: [{
 *                 containerName: "my-app",
 *                 condition: "START",
 *             }],
 *             volumesFrom: [{
 *                 sourceContainer: "my-app",
 *             }],
 *         },
 *     ],
 *     volumes: [{
 *         host: {
 *             sourcePath: "/var/lib/docker/vfs/dir/",
 *         },
 *         name: "my-vol",
 *     }],
 * });
 * 
 * ```
 * 
 * ```python
 * import pulumi
 * import pulumi_aws_native as aws_native
 * 
 * taskdefinition = aws_native.ecs.TaskDefinition("taskdefinition",
 *     requires_compatibilities=["EC2"],
 *     container_definitions=[
 *         aws_native.ecs.TaskDefinitionContainerDefinitionArgs(
 *             name="my-app",
 *             mount_points=[aws_native.ecs.TaskDefinitionMountPointArgs(
 *                 source_volume="my-vol",
 *                 container_path="/var/www/my-vol",
 *             )],
 *             image="amazon/amazon-ecs-sample",
 *             cpu=256,
 *             entry_point=[
 *                 "/usr/sbin/apache2",
 *                 "-D",
 *                 "FOREGROUND",
 *             ],
 *             memory=512,
 *             essential=True,
 *         ),
 *         aws_native.ecs.TaskDefinitionContainerDefinitionArgs(
 *             name="busybox",
 *             image="busybox",
 *             cpu=256,
 *             entry_point=[
 *                 "sh",
 *                 "-c",
 *             ],
 *             memory=512,
 *             command=["/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""],
 *             essential=False,
 *             depends_on=[aws_native.ecs.TaskDefinitionContainerDependencyArgs(
 *                 container_name="my-app",
 *                 condition="START",
 *             )],
 *             volumes_from=[aws_native.ecs.TaskDefinitionVolumeFromArgs(
 *                 source_container="my-app",
 *             )],
 *         ),
 *     ],
 *     volumes=[aws_native.ecs.TaskDefinitionVolumeArgs(
 *         host=aws_native.ecs.TaskDefinitionHostVolumePropertiesArgs(
 *             source_path="/var/lib/docker/vfs/dir/",
 *         ),
 *         name="my-vol",
 *     )])
 * 
 * ```
 * 
 * {{% /example %}}
 * {{% /examples %}}
 * 
 */
@ResourceType(type="aws-native:ecs:TaskDefinition")
public class TaskDefinition extends io.pulumi.resources.CustomResource {
    @Export(name="containerDefinitions", type=List.class, parameters={TaskDefinitionContainerDefinition.class})
    private Output</* @Nullable */ List<TaskDefinitionContainerDefinition>> containerDefinitions;

    public Output</* @Nullable */ List<TaskDefinitionContainerDefinition>> getContainerDefinitions() {
        return this.containerDefinitions;
    }
    @Export(name="cpu", type=String.class, parameters={})
    private Output</* @Nullable */ String> cpu;

    public Output</* @Nullable */ String> getCpu() {
        return this.cpu;
    }
    @Export(name="ephemeralStorage", type=TaskDefinitionEphemeralStorage.class, parameters={})
    private Output</* @Nullable */ TaskDefinitionEphemeralStorage> ephemeralStorage;

    public Output</* @Nullable */ TaskDefinitionEphemeralStorage> getEphemeralStorage() {
        return this.ephemeralStorage;
    }
    @Export(name="executionRoleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> executionRoleArn;

    public Output</* @Nullable */ String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }
    @Export(name="family", type=String.class, parameters={})
    private Output</* @Nullable */ String> family;

    public Output</* @Nullable */ String> getFamily() {
        return this.family;
    }
    @Export(name="inferenceAccelerators", type=List.class, parameters={TaskDefinitionInferenceAccelerator.class})
    private Output</* @Nullable */ List<TaskDefinitionInferenceAccelerator>> inferenceAccelerators;

    public Output</* @Nullable */ List<TaskDefinitionInferenceAccelerator>> getInferenceAccelerators() {
        return this.inferenceAccelerators;
    }
    @Export(name="ipcMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> ipcMode;

    public Output</* @Nullable */ String> getIpcMode() {
        return this.ipcMode;
    }
    @Export(name="memory", type=String.class, parameters={})
    private Output</* @Nullable */ String> memory;

    public Output</* @Nullable */ String> getMemory() {
        return this.memory;
    }
    @Export(name="networkMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> networkMode;

    public Output</* @Nullable */ String> getNetworkMode() {
        return this.networkMode;
    }
    @Export(name="pidMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> pidMode;

    public Output</* @Nullable */ String> getPidMode() {
        return this.pidMode;
    }
    @Export(name="placementConstraints", type=List.class, parameters={TaskDefinitionPlacementConstraint.class})
    private Output</* @Nullable */ List<TaskDefinitionPlacementConstraint>> placementConstraints;

    public Output</* @Nullable */ List<TaskDefinitionPlacementConstraint>> getPlacementConstraints() {
        return this.placementConstraints;
    }
    @Export(name="proxyConfiguration", type=TaskDefinitionProxyConfiguration.class, parameters={})
    private Output</* @Nullable */ TaskDefinitionProxyConfiguration> proxyConfiguration;

    public Output</* @Nullable */ TaskDefinitionProxyConfiguration> getProxyConfiguration() {
        return this.proxyConfiguration;
    }
    @Export(name="requiresCompatibilities", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> requiresCompatibilities;

    public Output</* @Nullable */ List<String>> getRequiresCompatibilities() {
        return this.requiresCompatibilities;
    }
    @Export(name="runtimePlatform", type=TaskDefinitionRuntimePlatform.class, parameters={})
    private Output</* @Nullable */ TaskDefinitionRuntimePlatform> runtimePlatform;

    public Output</* @Nullable */ TaskDefinitionRuntimePlatform> getRuntimePlatform() {
        return this.runtimePlatform;
    }
    @Export(name="tags", type=List.class, parameters={TaskDefinitionTag.class})
    private Output</* @Nullable */ List<TaskDefinitionTag>> tags;

    public Output</* @Nullable */ List<TaskDefinitionTag>> getTags() {
        return this.tags;
    }
    /**
     * The Amazon Resource Name (ARN) of the Amazon ECS task definition
     */
    @Export(name="taskDefinitionArn", type=String.class, parameters={})
    private Output<String> taskDefinitionArn;

    /**
     * @return The Amazon Resource Name (ARN) of the Amazon ECS task definition
     */
    public Output<String> getTaskDefinitionArn() {
        return this.taskDefinitionArn;
    }
    @Export(name="taskRoleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> taskRoleArn;

    public Output</* @Nullable */ String> getTaskRoleArn() {
        return this.taskRoleArn;
    }
    @Export(name="volumes", type=List.class, parameters={TaskDefinitionVolume.class})
    private Output</* @Nullable */ List<TaskDefinitionVolume>> volumes;

    public Output</* @Nullable */ List<TaskDefinitionVolume>> getVolumes() {
        return this.volumes;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TaskDefinition(String name) {
        this(name, TaskDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TaskDefinition(String name, @Nullable TaskDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TaskDefinition(String name, @Nullable TaskDefinitionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:ecs:TaskDefinition", name, args == null ? TaskDefinitionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private TaskDefinition(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:ecs:TaskDefinition", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TaskDefinition get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new TaskDefinition(name, id, options);
    }
}
