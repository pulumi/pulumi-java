// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ses.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The content of the email, composed of a subject line, an HTML part, and a text-only part
 * 
 */
public final class TemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final TemplateArgs Empty = new TemplateArgs();

    /**
     * The HTML body of the email.
     * 
     */
    @InputImport(name="htmlPart")
    private final @Nullable Input<String> htmlPart;

    public Input<String> getHtmlPart() {
        return this.htmlPart == null ? Input.empty() : this.htmlPart;
    }

    /**
     * The subject line of the email.
     * 
     */
    @InputImport(name="subjectPart", required=true)
    private final Input<String> subjectPart;

    public Input<String> getSubjectPart() {
        return this.subjectPart;
    }

    /**
     * The name of the template.
     * 
     */
    @InputImport(name="templateName")
    private final @Nullable Input<String> templateName;

    public Input<String> getTemplateName() {
        return this.templateName == null ? Input.empty() : this.templateName;
    }

    /**
     * The email body that is visible to recipients whose email clients do not display HTML content.
     * 
     */
    @InputImport(name="textPart")
    private final @Nullable Input<String> textPart;

    public Input<String> getTextPart() {
        return this.textPart == null ? Input.empty() : this.textPart;
    }

    public TemplateArgs(
        @Nullable Input<String> htmlPart,
        Input<String> subjectPart,
        @Nullable Input<String> templateName,
        @Nullable Input<String> textPart) {
        this.htmlPart = htmlPart;
        this.subjectPart = Objects.requireNonNull(subjectPart, "expected parameter 'subjectPart' to be non-null");
        this.templateName = templateName;
        this.textPart = textPart;
    }

    private TemplateArgs() {
        this.htmlPart = Input.empty();
        this.subjectPart = Input.empty();
        this.templateName = Input.empty();
        this.textPart = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> htmlPart;
        private Input<String> subjectPart;
        private @Nullable Input<String> templateName;
        private @Nullable Input<String> textPart;

        public Builder() {
    	      // Empty
        }

        public Builder(TemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.htmlPart = defaults.htmlPart;
    	      this.subjectPart = defaults.subjectPart;
    	      this.templateName = defaults.templateName;
    	      this.textPart = defaults.textPart;
        }

        public Builder setHtmlPart(@Nullable Input<String> htmlPart) {
            this.htmlPart = htmlPart;
            return this;
        }

        public Builder setHtmlPart(@Nullable String htmlPart) {
            this.htmlPart = Input.ofNullable(htmlPart);
            return this;
        }

        public Builder setSubjectPart(Input<String> subjectPart) {
            this.subjectPart = Objects.requireNonNull(subjectPart);
            return this;
        }

        public Builder setSubjectPart(String subjectPart) {
            this.subjectPart = Input.of(Objects.requireNonNull(subjectPart));
            return this;
        }

        public Builder setTemplateName(@Nullable Input<String> templateName) {
            this.templateName = templateName;
            return this;
        }

        public Builder setTemplateName(@Nullable String templateName) {
            this.templateName = Input.ofNullable(templateName);
            return this;
        }

        public Builder setTextPart(@Nullable Input<String> textPart) {
            this.textPart = textPart;
            return this;
        }

        public Builder setTextPart(@Nullable String textPart) {
            this.textPart = Input.ofNullable(textPart);
            return this;
        }

        public TemplateArgs build() {
            return new TemplateArgs(htmlPart, subjectPart, templateName, textPart);
        }
    }
}
