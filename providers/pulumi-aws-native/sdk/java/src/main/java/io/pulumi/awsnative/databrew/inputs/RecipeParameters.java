// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew.inputs;

import io.pulumi.awsnative.databrew.inputs.RecipeParametersInputProperties;
import io.pulumi.awsnative.databrew.inputs.RecipeSecondaryInput;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecipeParameters extends io.pulumi.resources.InvokeArgs {

    public static final RecipeParameters Empty = new RecipeParameters();

    @InputImport(name="aggregateFunction")
      private final @Nullable String aggregateFunction;

    public Optional<String> getAggregateFunction() {
        return this.aggregateFunction == null ? Optional.empty() : Optional.ofNullable(this.aggregateFunction);
    }

    @InputImport(name="base")
      private final @Nullable String base;

    public Optional<String> getBase() {
        return this.base == null ? Optional.empty() : Optional.ofNullable(this.base);
    }

    @InputImport(name="caseStatement")
      private final @Nullable String caseStatement;

    public Optional<String> getCaseStatement() {
        return this.caseStatement == null ? Optional.empty() : Optional.ofNullable(this.caseStatement);
    }

    @InputImport(name="categoryMap")
      private final @Nullable String categoryMap;

    public Optional<String> getCategoryMap() {
        return this.categoryMap == null ? Optional.empty() : Optional.ofNullable(this.categoryMap);
    }

    @InputImport(name="charsToRemove")
      private final @Nullable String charsToRemove;

    public Optional<String> getCharsToRemove() {
        return this.charsToRemove == null ? Optional.empty() : Optional.ofNullable(this.charsToRemove);
    }

    @InputImport(name="collapseConsecutiveWhitespace")
      private final @Nullable String collapseConsecutiveWhitespace;

    public Optional<String> getCollapseConsecutiveWhitespace() {
        return this.collapseConsecutiveWhitespace == null ? Optional.empty() : Optional.ofNullable(this.collapseConsecutiveWhitespace);
    }

    @InputImport(name="columnDataType")
      private final @Nullable String columnDataType;

    public Optional<String> getColumnDataType() {
        return this.columnDataType == null ? Optional.empty() : Optional.ofNullable(this.columnDataType);
    }

    @InputImport(name="columnRange")
      private final @Nullable String columnRange;

    public Optional<String> getColumnRange() {
        return this.columnRange == null ? Optional.empty() : Optional.ofNullable(this.columnRange);
    }

    @InputImport(name="count")
      private final @Nullable String count;

    public Optional<String> getCount() {
        return this.count == null ? Optional.empty() : Optional.ofNullable(this.count);
    }

    @InputImport(name="customCharacters")
      private final @Nullable String customCharacters;

    public Optional<String> getCustomCharacters() {
        return this.customCharacters == null ? Optional.empty() : Optional.ofNullable(this.customCharacters);
    }

    @InputImport(name="customStopWords")
      private final @Nullable String customStopWords;

    public Optional<String> getCustomStopWords() {
        return this.customStopWords == null ? Optional.empty() : Optional.ofNullable(this.customStopWords);
    }

    @InputImport(name="customValue")
      private final @Nullable String customValue;

    public Optional<String> getCustomValue() {
        return this.customValue == null ? Optional.empty() : Optional.ofNullable(this.customValue);
    }

    @InputImport(name="datasetsColumns")
      private final @Nullable String datasetsColumns;

    public Optional<String> getDatasetsColumns() {
        return this.datasetsColumns == null ? Optional.empty() : Optional.ofNullable(this.datasetsColumns);
    }

    @InputImport(name="dateAddValue")
      private final @Nullable String dateAddValue;

    public Optional<String> getDateAddValue() {
        return this.dateAddValue == null ? Optional.empty() : Optional.ofNullable(this.dateAddValue);
    }

    @InputImport(name="dateTimeFormat")
      private final @Nullable String dateTimeFormat;

    public Optional<String> getDateTimeFormat() {
        return this.dateTimeFormat == null ? Optional.empty() : Optional.ofNullable(this.dateTimeFormat);
    }

    @InputImport(name="dateTimeParameters")
      private final @Nullable String dateTimeParameters;

    public Optional<String> getDateTimeParameters() {
        return this.dateTimeParameters == null ? Optional.empty() : Optional.ofNullable(this.dateTimeParameters);
    }

    @InputImport(name="deleteOtherRows")
      private final @Nullable String deleteOtherRows;

    public Optional<String> getDeleteOtherRows() {
        return this.deleteOtherRows == null ? Optional.empty() : Optional.ofNullable(this.deleteOtherRows);
    }

    @InputImport(name="delimiter")
      private final @Nullable String delimiter;

    public Optional<String> getDelimiter() {
        return this.delimiter == null ? Optional.empty() : Optional.ofNullable(this.delimiter);
    }

    @InputImport(name="endPattern")
      private final @Nullable String endPattern;

    public Optional<String> getEndPattern() {
        return this.endPattern == null ? Optional.empty() : Optional.ofNullable(this.endPattern);
    }

    @InputImport(name="endPosition")
      private final @Nullable String endPosition;

    public Optional<String> getEndPosition() {
        return this.endPosition == null ? Optional.empty() : Optional.ofNullable(this.endPosition);
    }

    @InputImport(name="endValue")
      private final @Nullable String endValue;

    public Optional<String> getEndValue() {
        return this.endValue == null ? Optional.empty() : Optional.ofNullable(this.endValue);
    }

    @InputImport(name="expandContractions")
      private final @Nullable String expandContractions;

    public Optional<String> getExpandContractions() {
        return this.expandContractions == null ? Optional.empty() : Optional.ofNullable(this.expandContractions);
    }

    @InputImport(name="exponent")
      private final @Nullable String exponent;

    public Optional<String> getExponent() {
        return this.exponent == null ? Optional.empty() : Optional.ofNullable(this.exponent);
    }

    @InputImport(name="falseString")
      private final @Nullable String falseString;

    public Optional<String> getFalseString() {
        return this.falseString == null ? Optional.empty() : Optional.ofNullable(this.falseString);
    }

    @InputImport(name="groupByAggFunctionOptions")
      private final @Nullable String groupByAggFunctionOptions;

    public Optional<String> getGroupByAggFunctionOptions() {
        return this.groupByAggFunctionOptions == null ? Optional.empty() : Optional.ofNullable(this.groupByAggFunctionOptions);
    }

    @InputImport(name="groupByColumns")
      private final @Nullable String groupByColumns;

    public Optional<String> getGroupByColumns() {
        return this.groupByColumns == null ? Optional.empty() : Optional.ofNullable(this.groupByColumns);
    }

    @InputImport(name="hiddenColumns")
      private final @Nullable String hiddenColumns;

    public Optional<String> getHiddenColumns() {
        return this.hiddenColumns == null ? Optional.empty() : Optional.ofNullable(this.hiddenColumns);
    }

    @InputImport(name="ignoreCase")
      private final @Nullable String ignoreCase;

    public Optional<String> getIgnoreCase() {
        return this.ignoreCase == null ? Optional.empty() : Optional.ofNullable(this.ignoreCase);
    }

    @InputImport(name="includeInSplit")
      private final @Nullable String includeInSplit;

    public Optional<String> getIncludeInSplit() {
        return this.includeInSplit == null ? Optional.empty() : Optional.ofNullable(this.includeInSplit);
    }

    /**
     * Input
     * 
     */
    @InputImport(name="input")
      private final @Nullable RecipeParametersInputProperties input;

    public Optional<RecipeParametersInputProperties> getInput() {
        return this.input == null ? Optional.empty() : Optional.ofNullable(this.input);
    }

    @InputImport(name="interval")
      private final @Nullable String interval;

    public Optional<String> getInterval() {
        return this.interval == null ? Optional.empty() : Optional.ofNullable(this.interval);
    }

    @InputImport(name="isText")
      private final @Nullable String isText;

    public Optional<String> getIsText() {
        return this.isText == null ? Optional.empty() : Optional.ofNullable(this.isText);
    }

    @InputImport(name="joinKeys")
      private final @Nullable String joinKeys;

    public Optional<String> getJoinKeys() {
        return this.joinKeys == null ? Optional.empty() : Optional.ofNullable(this.joinKeys);
    }

    @InputImport(name="joinType")
      private final @Nullable String joinType;

    public Optional<String> getJoinType() {
        return this.joinType == null ? Optional.empty() : Optional.ofNullable(this.joinType);
    }

    @InputImport(name="leftColumns")
      private final @Nullable String leftColumns;

    public Optional<String> getLeftColumns() {
        return this.leftColumns == null ? Optional.empty() : Optional.ofNullable(this.leftColumns);
    }

    @InputImport(name="limit")
      private final @Nullable String limit;

    public Optional<String> getLimit() {
        return this.limit == null ? Optional.empty() : Optional.ofNullable(this.limit);
    }

    @InputImport(name="lowerBound")
      private final @Nullable String lowerBound;

    public Optional<String> getLowerBound() {
        return this.lowerBound == null ? Optional.empty() : Optional.ofNullable(this.lowerBound);
    }

    @InputImport(name="mapType")
      private final @Nullable String mapType;

    public Optional<String> getMapType() {
        return this.mapType == null ? Optional.empty() : Optional.ofNullable(this.mapType);
    }

    @InputImport(name="modeType")
      private final @Nullable String modeType;

    public Optional<String> getModeType() {
        return this.modeType == null ? Optional.empty() : Optional.ofNullable(this.modeType);
    }

    @InputImport(name="multiLine")
      private final @Nullable Boolean multiLine;

    public Optional<Boolean> getMultiLine() {
        return this.multiLine == null ? Optional.empty() : Optional.ofNullable(this.multiLine);
    }

    @InputImport(name="numRows")
      private final @Nullable String numRows;

    public Optional<String> getNumRows() {
        return this.numRows == null ? Optional.empty() : Optional.ofNullable(this.numRows);
    }

    @InputImport(name="numRowsAfter")
      private final @Nullable String numRowsAfter;

    public Optional<String> getNumRowsAfter() {
        return this.numRowsAfter == null ? Optional.empty() : Optional.ofNullable(this.numRowsAfter);
    }

    @InputImport(name="numRowsBefore")
      private final @Nullable String numRowsBefore;

    public Optional<String> getNumRowsBefore() {
        return this.numRowsBefore == null ? Optional.empty() : Optional.ofNullable(this.numRowsBefore);
    }

    @InputImport(name="orderByColumn")
      private final @Nullable String orderByColumn;

    public Optional<String> getOrderByColumn() {
        return this.orderByColumn == null ? Optional.empty() : Optional.ofNullable(this.orderByColumn);
    }

    @InputImport(name="orderByColumns")
      private final @Nullable String orderByColumns;

    public Optional<String> getOrderByColumns() {
        return this.orderByColumns == null ? Optional.empty() : Optional.ofNullable(this.orderByColumns);
    }

    @InputImport(name="other")
      private final @Nullable String other;

    public Optional<String> getOther() {
        return this.other == null ? Optional.empty() : Optional.ofNullable(this.other);
    }

    @InputImport(name="pattern")
      private final @Nullable String pattern;

    public Optional<String> getPattern() {
        return this.pattern == null ? Optional.empty() : Optional.ofNullable(this.pattern);
    }

    @InputImport(name="patternOption1")
      private final @Nullable String patternOption1;

    public Optional<String> getPatternOption1() {
        return this.patternOption1 == null ? Optional.empty() : Optional.ofNullable(this.patternOption1);
    }

    @InputImport(name="patternOption2")
      private final @Nullable String patternOption2;

    public Optional<String> getPatternOption2() {
        return this.patternOption2 == null ? Optional.empty() : Optional.ofNullable(this.patternOption2);
    }

    @InputImport(name="patternOptions")
      private final @Nullable String patternOptions;

    public Optional<String> getPatternOptions() {
        return this.patternOptions == null ? Optional.empty() : Optional.ofNullable(this.patternOptions);
    }

    @InputImport(name="period")
      private final @Nullable String period;

    public Optional<String> getPeriod() {
        return this.period == null ? Optional.empty() : Optional.ofNullable(this.period);
    }

    @InputImport(name="position")
      private final @Nullable String position;

    public Optional<String> getPosition() {
        return this.position == null ? Optional.empty() : Optional.ofNullable(this.position);
    }

    @InputImport(name="removeAllPunctuation")
      private final @Nullable String removeAllPunctuation;

    public Optional<String> getRemoveAllPunctuation() {
        return this.removeAllPunctuation == null ? Optional.empty() : Optional.ofNullable(this.removeAllPunctuation);
    }

    @InputImport(name="removeAllQuotes")
      private final @Nullable String removeAllQuotes;

    public Optional<String> getRemoveAllQuotes() {
        return this.removeAllQuotes == null ? Optional.empty() : Optional.ofNullable(this.removeAllQuotes);
    }

    @InputImport(name="removeAllWhitespace")
      private final @Nullable String removeAllWhitespace;

    public Optional<String> getRemoveAllWhitespace() {
        return this.removeAllWhitespace == null ? Optional.empty() : Optional.ofNullable(this.removeAllWhitespace);
    }

    @InputImport(name="removeCustomCharacters")
      private final @Nullable String removeCustomCharacters;

    public Optional<String> getRemoveCustomCharacters() {
        return this.removeCustomCharacters == null ? Optional.empty() : Optional.ofNullable(this.removeCustomCharacters);
    }

    @InputImport(name="removeCustomValue")
      private final @Nullable String removeCustomValue;

    public Optional<String> getRemoveCustomValue() {
        return this.removeCustomValue == null ? Optional.empty() : Optional.ofNullable(this.removeCustomValue);
    }

    @InputImport(name="removeLeadingAndTrailingPunctuation")
      private final @Nullable String removeLeadingAndTrailingPunctuation;

    public Optional<String> getRemoveLeadingAndTrailingPunctuation() {
        return this.removeLeadingAndTrailingPunctuation == null ? Optional.empty() : Optional.ofNullable(this.removeLeadingAndTrailingPunctuation);
    }

    @InputImport(name="removeLeadingAndTrailingQuotes")
      private final @Nullable String removeLeadingAndTrailingQuotes;

    public Optional<String> getRemoveLeadingAndTrailingQuotes() {
        return this.removeLeadingAndTrailingQuotes == null ? Optional.empty() : Optional.ofNullable(this.removeLeadingAndTrailingQuotes);
    }

    @InputImport(name="removeLeadingAndTrailingWhitespace")
      private final @Nullable String removeLeadingAndTrailingWhitespace;

    public Optional<String> getRemoveLeadingAndTrailingWhitespace() {
        return this.removeLeadingAndTrailingWhitespace == null ? Optional.empty() : Optional.ofNullable(this.removeLeadingAndTrailingWhitespace);
    }

    @InputImport(name="removeLetters")
      private final @Nullable String removeLetters;

    public Optional<String> getRemoveLetters() {
        return this.removeLetters == null ? Optional.empty() : Optional.ofNullable(this.removeLetters);
    }

    @InputImport(name="removeNumbers")
      private final @Nullable String removeNumbers;

    public Optional<String> getRemoveNumbers() {
        return this.removeNumbers == null ? Optional.empty() : Optional.ofNullable(this.removeNumbers);
    }

    @InputImport(name="removeSourceColumn")
      private final @Nullable String removeSourceColumn;

    public Optional<String> getRemoveSourceColumn() {
        return this.removeSourceColumn == null ? Optional.empty() : Optional.ofNullable(this.removeSourceColumn);
    }

    @InputImport(name="removeSpecialCharacters")
      private final @Nullable String removeSpecialCharacters;

    public Optional<String> getRemoveSpecialCharacters() {
        return this.removeSpecialCharacters == null ? Optional.empty() : Optional.ofNullable(this.removeSpecialCharacters);
    }

    @InputImport(name="rightColumns")
      private final @Nullable String rightColumns;

    public Optional<String> getRightColumns() {
        return this.rightColumns == null ? Optional.empty() : Optional.ofNullable(this.rightColumns);
    }

    @InputImport(name="sampleSize")
      private final @Nullable String sampleSize;

    public Optional<String> getSampleSize() {
        return this.sampleSize == null ? Optional.empty() : Optional.ofNullable(this.sampleSize);
    }

    @InputImport(name="sampleType")
      private final @Nullable String sampleType;

    public Optional<String> getSampleType() {
        return this.sampleType == null ? Optional.empty() : Optional.ofNullable(this.sampleType);
    }

    @InputImport(name="secondInput")
      private final @Nullable String secondInput;

    public Optional<String> getSecondInput() {
        return this.secondInput == null ? Optional.empty() : Optional.ofNullable(this.secondInput);
    }

    @InputImport(name="secondaryInputs")
      private final @Nullable List<RecipeSecondaryInput> secondaryInputs;

    public List<RecipeSecondaryInput> getSecondaryInputs() {
        return this.secondaryInputs == null ? List.of() : this.secondaryInputs;
    }

    @InputImport(name="sheetIndexes")
      private final @Nullable List<Integer> sheetIndexes;

    public List<Integer> getSheetIndexes() {
        return this.sheetIndexes == null ? List.of() : this.sheetIndexes;
    }

    @InputImport(name="sheetNames")
      private final @Nullable List<String> sheetNames;

    public List<String> getSheetNames() {
        return this.sheetNames == null ? List.of() : this.sheetNames;
    }

    @InputImport(name="sourceColumn")
      private final @Nullable String sourceColumn;

    public Optional<String> getSourceColumn() {
        return this.sourceColumn == null ? Optional.empty() : Optional.ofNullable(this.sourceColumn);
    }

    @InputImport(name="sourceColumn1")
      private final @Nullable String sourceColumn1;

    public Optional<String> getSourceColumn1() {
        return this.sourceColumn1 == null ? Optional.empty() : Optional.ofNullable(this.sourceColumn1);
    }

    @InputImport(name="sourceColumn2")
      private final @Nullable String sourceColumn2;

    public Optional<String> getSourceColumn2() {
        return this.sourceColumn2 == null ? Optional.empty() : Optional.ofNullable(this.sourceColumn2);
    }

    @InputImport(name="sourceColumns")
      private final @Nullable String sourceColumns;

    public Optional<String> getSourceColumns() {
        return this.sourceColumns == null ? Optional.empty() : Optional.ofNullable(this.sourceColumns);
    }

    @InputImport(name="startColumnIndex")
      private final @Nullable String startColumnIndex;

    public Optional<String> getStartColumnIndex() {
        return this.startColumnIndex == null ? Optional.empty() : Optional.ofNullable(this.startColumnIndex);
    }

    @InputImport(name="startPattern")
      private final @Nullable String startPattern;

    public Optional<String> getStartPattern() {
        return this.startPattern == null ? Optional.empty() : Optional.ofNullable(this.startPattern);
    }

    @InputImport(name="startPosition")
      private final @Nullable String startPosition;

    public Optional<String> getStartPosition() {
        return this.startPosition == null ? Optional.empty() : Optional.ofNullable(this.startPosition);
    }

    @InputImport(name="startValue")
      private final @Nullable String startValue;

    public Optional<String> getStartValue() {
        return this.startValue == null ? Optional.empty() : Optional.ofNullable(this.startValue);
    }

    @InputImport(name="stemmingMode")
      private final @Nullable String stemmingMode;

    public Optional<String> getStemmingMode() {
        return this.stemmingMode == null ? Optional.empty() : Optional.ofNullable(this.stemmingMode);
    }

    @InputImport(name="stepCount")
      private final @Nullable String stepCount;

    public Optional<String> getStepCount() {
        return this.stepCount == null ? Optional.empty() : Optional.ofNullable(this.stepCount);
    }

    @InputImport(name="stepIndex")
      private final @Nullable String stepIndex;

    public Optional<String> getStepIndex() {
        return this.stepIndex == null ? Optional.empty() : Optional.ofNullable(this.stepIndex);
    }

    @InputImport(name="stopWordsMode")
      private final @Nullable String stopWordsMode;

    public Optional<String> getStopWordsMode() {
        return this.stopWordsMode == null ? Optional.empty() : Optional.ofNullable(this.stopWordsMode);
    }

    @InputImport(name="strategy")
      private final @Nullable String strategy;

    public Optional<String> getStrategy() {
        return this.strategy == null ? Optional.empty() : Optional.ofNullable(this.strategy);
    }

    @InputImport(name="targetColumn")
      private final @Nullable String targetColumn;

    public Optional<String> getTargetColumn() {
        return this.targetColumn == null ? Optional.empty() : Optional.ofNullable(this.targetColumn);
    }

    @InputImport(name="targetColumnNames")
      private final @Nullable String targetColumnNames;

    public Optional<String> getTargetColumnNames() {
        return this.targetColumnNames == null ? Optional.empty() : Optional.ofNullable(this.targetColumnNames);
    }

    @InputImport(name="targetDateFormat")
      private final @Nullable String targetDateFormat;

    public Optional<String> getTargetDateFormat() {
        return this.targetDateFormat == null ? Optional.empty() : Optional.ofNullable(this.targetDateFormat);
    }

    @InputImport(name="targetIndex")
      private final @Nullable String targetIndex;

    public Optional<String> getTargetIndex() {
        return this.targetIndex == null ? Optional.empty() : Optional.ofNullable(this.targetIndex);
    }

    @InputImport(name="timeZone")
      private final @Nullable String timeZone;

    public Optional<String> getTimeZone() {
        return this.timeZone == null ? Optional.empty() : Optional.ofNullable(this.timeZone);
    }

    @InputImport(name="tokenizerPattern")
      private final @Nullable String tokenizerPattern;

    public Optional<String> getTokenizerPattern() {
        return this.tokenizerPattern == null ? Optional.empty() : Optional.ofNullable(this.tokenizerPattern);
    }

    @InputImport(name="trueString")
      private final @Nullable String trueString;

    public Optional<String> getTrueString() {
        return this.trueString == null ? Optional.empty() : Optional.ofNullable(this.trueString);
    }

    @InputImport(name="udfLang")
      private final @Nullable String udfLang;

    public Optional<String> getUdfLang() {
        return this.udfLang == null ? Optional.empty() : Optional.ofNullable(this.udfLang);
    }

    @InputImport(name="units")
      private final @Nullable String units;

    public Optional<String> getUnits() {
        return this.units == null ? Optional.empty() : Optional.ofNullable(this.units);
    }

    @InputImport(name="unpivotColumn")
      private final @Nullable String unpivotColumn;

    public Optional<String> getUnpivotColumn() {
        return this.unpivotColumn == null ? Optional.empty() : Optional.ofNullable(this.unpivotColumn);
    }

    @InputImport(name="upperBound")
      private final @Nullable String upperBound;

    public Optional<String> getUpperBound() {
        return this.upperBound == null ? Optional.empty() : Optional.ofNullable(this.upperBound);
    }

    @InputImport(name="useNewDataFrame")
      private final @Nullable String useNewDataFrame;

    public Optional<String> getUseNewDataFrame() {
        return this.useNewDataFrame == null ? Optional.empty() : Optional.ofNullable(this.useNewDataFrame);
    }

    @InputImport(name="value")
      private final @Nullable String value;

    public Optional<String> getValue() {
        return this.value == null ? Optional.empty() : Optional.ofNullable(this.value);
    }

    @InputImport(name="value1")
      private final @Nullable String value1;

    public Optional<String> getValue1() {
        return this.value1 == null ? Optional.empty() : Optional.ofNullable(this.value1);
    }

    @InputImport(name="value2")
      private final @Nullable String value2;

    public Optional<String> getValue2() {
        return this.value2 == null ? Optional.empty() : Optional.ofNullable(this.value2);
    }

    @InputImport(name="valueColumn")
      private final @Nullable String valueColumn;

    public Optional<String> getValueColumn() {
        return this.valueColumn == null ? Optional.empty() : Optional.ofNullable(this.valueColumn);
    }

    @InputImport(name="viewFrame")
      private final @Nullable String viewFrame;

    public Optional<String> getViewFrame() {
        return this.viewFrame == null ? Optional.empty() : Optional.ofNullable(this.viewFrame);
    }

    public RecipeParameters(
        @Nullable String aggregateFunction,
        @Nullable String base,
        @Nullable String caseStatement,
        @Nullable String categoryMap,
        @Nullable String charsToRemove,
        @Nullable String collapseConsecutiveWhitespace,
        @Nullable String columnDataType,
        @Nullable String columnRange,
        @Nullable String count,
        @Nullable String customCharacters,
        @Nullable String customStopWords,
        @Nullable String customValue,
        @Nullable String datasetsColumns,
        @Nullable String dateAddValue,
        @Nullable String dateTimeFormat,
        @Nullable String dateTimeParameters,
        @Nullable String deleteOtherRows,
        @Nullable String delimiter,
        @Nullable String endPattern,
        @Nullable String endPosition,
        @Nullable String endValue,
        @Nullable String expandContractions,
        @Nullable String exponent,
        @Nullable String falseString,
        @Nullable String groupByAggFunctionOptions,
        @Nullable String groupByColumns,
        @Nullable String hiddenColumns,
        @Nullable String ignoreCase,
        @Nullable String includeInSplit,
        @Nullable RecipeParametersInputProperties input,
        @Nullable String interval,
        @Nullable String isText,
        @Nullable String joinKeys,
        @Nullable String joinType,
        @Nullable String leftColumns,
        @Nullable String limit,
        @Nullable String lowerBound,
        @Nullable String mapType,
        @Nullable String modeType,
        @Nullable Boolean multiLine,
        @Nullable String numRows,
        @Nullable String numRowsAfter,
        @Nullable String numRowsBefore,
        @Nullable String orderByColumn,
        @Nullable String orderByColumns,
        @Nullable String other,
        @Nullable String pattern,
        @Nullable String patternOption1,
        @Nullable String patternOption2,
        @Nullable String patternOptions,
        @Nullable String period,
        @Nullable String position,
        @Nullable String removeAllPunctuation,
        @Nullable String removeAllQuotes,
        @Nullable String removeAllWhitespace,
        @Nullable String removeCustomCharacters,
        @Nullable String removeCustomValue,
        @Nullable String removeLeadingAndTrailingPunctuation,
        @Nullable String removeLeadingAndTrailingQuotes,
        @Nullable String removeLeadingAndTrailingWhitespace,
        @Nullable String removeLetters,
        @Nullable String removeNumbers,
        @Nullable String removeSourceColumn,
        @Nullable String removeSpecialCharacters,
        @Nullable String rightColumns,
        @Nullable String sampleSize,
        @Nullable String sampleType,
        @Nullable String secondInput,
        @Nullable List<RecipeSecondaryInput> secondaryInputs,
        @Nullable List<Integer> sheetIndexes,
        @Nullable List<String> sheetNames,
        @Nullable String sourceColumn,
        @Nullable String sourceColumn1,
        @Nullable String sourceColumn2,
        @Nullable String sourceColumns,
        @Nullable String startColumnIndex,
        @Nullable String startPattern,
        @Nullable String startPosition,
        @Nullable String startValue,
        @Nullable String stemmingMode,
        @Nullable String stepCount,
        @Nullable String stepIndex,
        @Nullable String stopWordsMode,
        @Nullable String strategy,
        @Nullable String targetColumn,
        @Nullable String targetColumnNames,
        @Nullable String targetDateFormat,
        @Nullable String targetIndex,
        @Nullable String timeZone,
        @Nullable String tokenizerPattern,
        @Nullable String trueString,
        @Nullable String udfLang,
        @Nullable String units,
        @Nullable String unpivotColumn,
        @Nullable String upperBound,
        @Nullable String useNewDataFrame,
        @Nullable String value,
        @Nullable String value1,
        @Nullable String value2,
        @Nullable String valueColumn,
        @Nullable String viewFrame) {
        this.aggregateFunction = aggregateFunction;
        this.base = base;
        this.caseStatement = caseStatement;
        this.categoryMap = categoryMap;
        this.charsToRemove = charsToRemove;
        this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
        this.columnDataType = columnDataType;
        this.columnRange = columnRange;
        this.count = count;
        this.customCharacters = customCharacters;
        this.customStopWords = customStopWords;
        this.customValue = customValue;
        this.datasetsColumns = datasetsColumns;
        this.dateAddValue = dateAddValue;
        this.dateTimeFormat = dateTimeFormat;
        this.dateTimeParameters = dateTimeParameters;
        this.deleteOtherRows = deleteOtherRows;
        this.delimiter = delimiter;
        this.endPattern = endPattern;
        this.endPosition = endPosition;
        this.endValue = endValue;
        this.expandContractions = expandContractions;
        this.exponent = exponent;
        this.falseString = falseString;
        this.groupByAggFunctionOptions = groupByAggFunctionOptions;
        this.groupByColumns = groupByColumns;
        this.hiddenColumns = hiddenColumns;
        this.ignoreCase = ignoreCase;
        this.includeInSplit = includeInSplit;
        this.input = input;
        this.interval = interval;
        this.isText = isText;
        this.joinKeys = joinKeys;
        this.joinType = joinType;
        this.leftColumns = leftColumns;
        this.limit = limit;
        this.lowerBound = lowerBound;
        this.mapType = mapType;
        this.modeType = modeType;
        this.multiLine = multiLine;
        this.numRows = numRows;
        this.numRowsAfter = numRowsAfter;
        this.numRowsBefore = numRowsBefore;
        this.orderByColumn = orderByColumn;
        this.orderByColumns = orderByColumns;
        this.other = other;
        this.pattern = pattern;
        this.patternOption1 = patternOption1;
        this.patternOption2 = patternOption2;
        this.patternOptions = patternOptions;
        this.period = period;
        this.position = position;
        this.removeAllPunctuation = removeAllPunctuation;
        this.removeAllQuotes = removeAllQuotes;
        this.removeAllWhitespace = removeAllWhitespace;
        this.removeCustomCharacters = removeCustomCharacters;
        this.removeCustomValue = removeCustomValue;
        this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
        this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
        this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
        this.removeLetters = removeLetters;
        this.removeNumbers = removeNumbers;
        this.removeSourceColumn = removeSourceColumn;
        this.removeSpecialCharacters = removeSpecialCharacters;
        this.rightColumns = rightColumns;
        this.sampleSize = sampleSize;
        this.sampleType = sampleType;
        this.secondInput = secondInput;
        this.secondaryInputs = secondaryInputs;
        this.sheetIndexes = sheetIndexes;
        this.sheetNames = sheetNames;
        this.sourceColumn = sourceColumn;
        this.sourceColumn1 = sourceColumn1;
        this.sourceColumn2 = sourceColumn2;
        this.sourceColumns = sourceColumns;
        this.startColumnIndex = startColumnIndex;
        this.startPattern = startPattern;
        this.startPosition = startPosition;
        this.startValue = startValue;
        this.stemmingMode = stemmingMode;
        this.stepCount = stepCount;
        this.stepIndex = stepIndex;
        this.stopWordsMode = stopWordsMode;
        this.strategy = strategy;
        this.targetColumn = targetColumn;
        this.targetColumnNames = targetColumnNames;
        this.targetDateFormat = targetDateFormat;
        this.targetIndex = targetIndex;
        this.timeZone = timeZone;
        this.tokenizerPattern = tokenizerPattern;
        this.trueString = trueString;
        this.udfLang = udfLang;
        this.units = units;
        this.unpivotColumn = unpivotColumn;
        this.upperBound = upperBound;
        this.useNewDataFrame = useNewDataFrame;
        this.value = value;
        this.value1 = value1;
        this.value2 = value2;
        this.valueColumn = valueColumn;
        this.viewFrame = viewFrame;
    }

    private RecipeParameters() {
        this.aggregateFunction = null;
        this.base = null;
        this.caseStatement = null;
        this.categoryMap = null;
        this.charsToRemove = null;
        this.collapseConsecutiveWhitespace = null;
        this.columnDataType = null;
        this.columnRange = null;
        this.count = null;
        this.customCharacters = null;
        this.customStopWords = null;
        this.customValue = null;
        this.datasetsColumns = null;
        this.dateAddValue = null;
        this.dateTimeFormat = null;
        this.dateTimeParameters = null;
        this.deleteOtherRows = null;
        this.delimiter = null;
        this.endPattern = null;
        this.endPosition = null;
        this.endValue = null;
        this.expandContractions = null;
        this.exponent = null;
        this.falseString = null;
        this.groupByAggFunctionOptions = null;
        this.groupByColumns = null;
        this.hiddenColumns = null;
        this.ignoreCase = null;
        this.includeInSplit = null;
        this.input = null;
        this.interval = null;
        this.isText = null;
        this.joinKeys = null;
        this.joinType = null;
        this.leftColumns = null;
        this.limit = null;
        this.lowerBound = null;
        this.mapType = null;
        this.modeType = null;
        this.multiLine = null;
        this.numRows = null;
        this.numRowsAfter = null;
        this.numRowsBefore = null;
        this.orderByColumn = null;
        this.orderByColumns = null;
        this.other = null;
        this.pattern = null;
        this.patternOption1 = null;
        this.patternOption2 = null;
        this.patternOptions = null;
        this.period = null;
        this.position = null;
        this.removeAllPunctuation = null;
        this.removeAllQuotes = null;
        this.removeAllWhitespace = null;
        this.removeCustomCharacters = null;
        this.removeCustomValue = null;
        this.removeLeadingAndTrailingPunctuation = null;
        this.removeLeadingAndTrailingQuotes = null;
        this.removeLeadingAndTrailingWhitespace = null;
        this.removeLetters = null;
        this.removeNumbers = null;
        this.removeSourceColumn = null;
        this.removeSpecialCharacters = null;
        this.rightColumns = null;
        this.sampleSize = null;
        this.sampleType = null;
        this.secondInput = null;
        this.secondaryInputs = List.of();
        this.sheetIndexes = List.of();
        this.sheetNames = List.of();
        this.sourceColumn = null;
        this.sourceColumn1 = null;
        this.sourceColumn2 = null;
        this.sourceColumns = null;
        this.startColumnIndex = null;
        this.startPattern = null;
        this.startPosition = null;
        this.startValue = null;
        this.stemmingMode = null;
        this.stepCount = null;
        this.stepIndex = null;
        this.stopWordsMode = null;
        this.strategy = null;
        this.targetColumn = null;
        this.targetColumnNames = null;
        this.targetDateFormat = null;
        this.targetIndex = null;
        this.timeZone = null;
        this.tokenizerPattern = null;
        this.trueString = null;
        this.udfLang = null;
        this.units = null;
        this.unpivotColumn = null;
        this.upperBound = null;
        this.useNewDataFrame = null;
        this.value = null;
        this.value1 = null;
        this.value2 = null;
        this.valueColumn = null;
        this.viewFrame = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecipeParameters defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String aggregateFunction;
        private @Nullable String base;
        private @Nullable String caseStatement;
        private @Nullable String categoryMap;
        private @Nullable String charsToRemove;
        private @Nullable String collapseConsecutiveWhitespace;
        private @Nullable String columnDataType;
        private @Nullable String columnRange;
        private @Nullable String count;
        private @Nullable String customCharacters;
        private @Nullable String customStopWords;
        private @Nullable String customValue;
        private @Nullable String datasetsColumns;
        private @Nullable String dateAddValue;
        private @Nullable String dateTimeFormat;
        private @Nullable String dateTimeParameters;
        private @Nullable String deleteOtherRows;
        private @Nullable String delimiter;
        private @Nullable String endPattern;
        private @Nullable String endPosition;
        private @Nullable String endValue;
        private @Nullable String expandContractions;
        private @Nullable String exponent;
        private @Nullable String falseString;
        private @Nullable String groupByAggFunctionOptions;
        private @Nullable String groupByColumns;
        private @Nullable String hiddenColumns;
        private @Nullable String ignoreCase;
        private @Nullable String includeInSplit;
        private @Nullable RecipeParametersInputProperties input;
        private @Nullable String interval;
        private @Nullable String isText;
        private @Nullable String joinKeys;
        private @Nullable String joinType;
        private @Nullable String leftColumns;
        private @Nullable String limit;
        private @Nullable String lowerBound;
        private @Nullable String mapType;
        private @Nullable String modeType;
        private @Nullable Boolean multiLine;
        private @Nullable String numRows;
        private @Nullable String numRowsAfter;
        private @Nullable String numRowsBefore;
        private @Nullable String orderByColumn;
        private @Nullable String orderByColumns;
        private @Nullable String other;
        private @Nullable String pattern;
        private @Nullable String patternOption1;
        private @Nullable String patternOption2;
        private @Nullable String patternOptions;
        private @Nullable String period;
        private @Nullable String position;
        private @Nullable String removeAllPunctuation;
        private @Nullable String removeAllQuotes;
        private @Nullable String removeAllWhitespace;
        private @Nullable String removeCustomCharacters;
        private @Nullable String removeCustomValue;
        private @Nullable String removeLeadingAndTrailingPunctuation;
        private @Nullable String removeLeadingAndTrailingQuotes;
        private @Nullable String removeLeadingAndTrailingWhitespace;
        private @Nullable String removeLetters;
        private @Nullable String removeNumbers;
        private @Nullable String removeSourceColumn;
        private @Nullable String removeSpecialCharacters;
        private @Nullable String rightColumns;
        private @Nullable String sampleSize;
        private @Nullable String sampleType;
        private @Nullable String secondInput;
        private @Nullable List<RecipeSecondaryInput> secondaryInputs;
        private @Nullable List<Integer> sheetIndexes;
        private @Nullable List<String> sheetNames;
        private @Nullable String sourceColumn;
        private @Nullable String sourceColumn1;
        private @Nullable String sourceColumn2;
        private @Nullable String sourceColumns;
        private @Nullable String startColumnIndex;
        private @Nullable String startPattern;
        private @Nullable String startPosition;
        private @Nullable String startValue;
        private @Nullable String stemmingMode;
        private @Nullable String stepCount;
        private @Nullable String stepIndex;
        private @Nullable String stopWordsMode;
        private @Nullable String strategy;
        private @Nullable String targetColumn;
        private @Nullable String targetColumnNames;
        private @Nullable String targetDateFormat;
        private @Nullable String targetIndex;
        private @Nullable String timeZone;
        private @Nullable String tokenizerPattern;
        private @Nullable String trueString;
        private @Nullable String udfLang;
        private @Nullable String units;
        private @Nullable String unpivotColumn;
        private @Nullable String upperBound;
        private @Nullable String useNewDataFrame;
        private @Nullable String value;
        private @Nullable String value1;
        private @Nullable String value2;
        private @Nullable String valueColumn;
        private @Nullable String viewFrame;

        public Builder() {
    	      // Empty
        }

        public Builder(RecipeParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregateFunction = defaults.aggregateFunction;
    	      this.base = defaults.base;
    	      this.caseStatement = defaults.caseStatement;
    	      this.categoryMap = defaults.categoryMap;
    	      this.charsToRemove = defaults.charsToRemove;
    	      this.collapseConsecutiveWhitespace = defaults.collapseConsecutiveWhitespace;
    	      this.columnDataType = defaults.columnDataType;
    	      this.columnRange = defaults.columnRange;
    	      this.count = defaults.count;
    	      this.customCharacters = defaults.customCharacters;
    	      this.customStopWords = defaults.customStopWords;
    	      this.customValue = defaults.customValue;
    	      this.datasetsColumns = defaults.datasetsColumns;
    	      this.dateAddValue = defaults.dateAddValue;
    	      this.dateTimeFormat = defaults.dateTimeFormat;
    	      this.dateTimeParameters = defaults.dateTimeParameters;
    	      this.deleteOtherRows = defaults.deleteOtherRows;
    	      this.delimiter = defaults.delimiter;
    	      this.endPattern = defaults.endPattern;
    	      this.endPosition = defaults.endPosition;
    	      this.endValue = defaults.endValue;
    	      this.expandContractions = defaults.expandContractions;
    	      this.exponent = defaults.exponent;
    	      this.falseString = defaults.falseString;
    	      this.groupByAggFunctionOptions = defaults.groupByAggFunctionOptions;
    	      this.groupByColumns = defaults.groupByColumns;
    	      this.hiddenColumns = defaults.hiddenColumns;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.includeInSplit = defaults.includeInSplit;
    	      this.input = defaults.input;
    	      this.interval = defaults.interval;
    	      this.isText = defaults.isText;
    	      this.joinKeys = defaults.joinKeys;
    	      this.joinType = defaults.joinType;
    	      this.leftColumns = defaults.leftColumns;
    	      this.limit = defaults.limit;
    	      this.lowerBound = defaults.lowerBound;
    	      this.mapType = defaults.mapType;
    	      this.modeType = defaults.modeType;
    	      this.multiLine = defaults.multiLine;
    	      this.numRows = defaults.numRows;
    	      this.numRowsAfter = defaults.numRowsAfter;
    	      this.numRowsBefore = defaults.numRowsBefore;
    	      this.orderByColumn = defaults.orderByColumn;
    	      this.orderByColumns = defaults.orderByColumns;
    	      this.other = defaults.other;
    	      this.pattern = defaults.pattern;
    	      this.patternOption1 = defaults.patternOption1;
    	      this.patternOption2 = defaults.patternOption2;
    	      this.patternOptions = defaults.patternOptions;
    	      this.period = defaults.period;
    	      this.position = defaults.position;
    	      this.removeAllPunctuation = defaults.removeAllPunctuation;
    	      this.removeAllQuotes = defaults.removeAllQuotes;
    	      this.removeAllWhitespace = defaults.removeAllWhitespace;
    	      this.removeCustomCharacters = defaults.removeCustomCharacters;
    	      this.removeCustomValue = defaults.removeCustomValue;
    	      this.removeLeadingAndTrailingPunctuation = defaults.removeLeadingAndTrailingPunctuation;
    	      this.removeLeadingAndTrailingQuotes = defaults.removeLeadingAndTrailingQuotes;
    	      this.removeLeadingAndTrailingWhitespace = defaults.removeLeadingAndTrailingWhitespace;
    	      this.removeLetters = defaults.removeLetters;
    	      this.removeNumbers = defaults.removeNumbers;
    	      this.removeSourceColumn = defaults.removeSourceColumn;
    	      this.removeSpecialCharacters = defaults.removeSpecialCharacters;
    	      this.rightColumns = defaults.rightColumns;
    	      this.sampleSize = defaults.sampleSize;
    	      this.sampleType = defaults.sampleType;
    	      this.secondInput = defaults.secondInput;
    	      this.secondaryInputs = defaults.secondaryInputs;
    	      this.sheetIndexes = defaults.sheetIndexes;
    	      this.sheetNames = defaults.sheetNames;
    	      this.sourceColumn = defaults.sourceColumn;
    	      this.sourceColumn1 = defaults.sourceColumn1;
    	      this.sourceColumn2 = defaults.sourceColumn2;
    	      this.sourceColumns = defaults.sourceColumns;
    	      this.startColumnIndex = defaults.startColumnIndex;
    	      this.startPattern = defaults.startPattern;
    	      this.startPosition = defaults.startPosition;
    	      this.startValue = defaults.startValue;
    	      this.stemmingMode = defaults.stemmingMode;
    	      this.stepCount = defaults.stepCount;
    	      this.stepIndex = defaults.stepIndex;
    	      this.stopWordsMode = defaults.stopWordsMode;
    	      this.strategy = defaults.strategy;
    	      this.targetColumn = defaults.targetColumn;
    	      this.targetColumnNames = defaults.targetColumnNames;
    	      this.targetDateFormat = defaults.targetDateFormat;
    	      this.targetIndex = defaults.targetIndex;
    	      this.timeZone = defaults.timeZone;
    	      this.tokenizerPattern = defaults.tokenizerPattern;
    	      this.trueString = defaults.trueString;
    	      this.udfLang = defaults.udfLang;
    	      this.units = defaults.units;
    	      this.unpivotColumn = defaults.unpivotColumn;
    	      this.upperBound = defaults.upperBound;
    	      this.useNewDataFrame = defaults.useNewDataFrame;
    	      this.value = defaults.value;
    	      this.value1 = defaults.value1;
    	      this.value2 = defaults.value2;
    	      this.valueColumn = defaults.valueColumn;
    	      this.viewFrame = defaults.viewFrame;
        }

        public Builder aggregateFunction(@Nullable String aggregateFunction) {
            this.aggregateFunction = aggregateFunction;
            return this;
        }

        public Builder base(@Nullable String base) {
            this.base = base;
            return this;
        }

        public Builder caseStatement(@Nullable String caseStatement) {
            this.caseStatement = caseStatement;
            return this;
        }

        public Builder categoryMap(@Nullable String categoryMap) {
            this.categoryMap = categoryMap;
            return this;
        }

        public Builder charsToRemove(@Nullable String charsToRemove) {
            this.charsToRemove = charsToRemove;
            return this;
        }

        public Builder collapseConsecutiveWhitespace(@Nullable String collapseConsecutiveWhitespace) {
            this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            return this;
        }

        public Builder columnDataType(@Nullable String columnDataType) {
            this.columnDataType = columnDataType;
            return this;
        }

        public Builder columnRange(@Nullable String columnRange) {
            this.columnRange = columnRange;
            return this;
        }

        public Builder count(@Nullable String count) {
            this.count = count;
            return this;
        }

        public Builder customCharacters(@Nullable String customCharacters) {
            this.customCharacters = customCharacters;
            return this;
        }

        public Builder customStopWords(@Nullable String customStopWords) {
            this.customStopWords = customStopWords;
            return this;
        }

        public Builder customValue(@Nullable String customValue) {
            this.customValue = customValue;
            return this;
        }

        public Builder datasetsColumns(@Nullable String datasetsColumns) {
            this.datasetsColumns = datasetsColumns;
            return this;
        }

        public Builder dateAddValue(@Nullable String dateAddValue) {
            this.dateAddValue = dateAddValue;
            return this;
        }

        public Builder dateTimeFormat(@Nullable String dateTimeFormat) {
            this.dateTimeFormat = dateTimeFormat;
            return this;
        }

        public Builder dateTimeParameters(@Nullable String dateTimeParameters) {
            this.dateTimeParameters = dateTimeParameters;
            return this;
        }

        public Builder deleteOtherRows(@Nullable String deleteOtherRows) {
            this.deleteOtherRows = deleteOtherRows;
            return this;
        }

        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }

        public Builder endPattern(@Nullable String endPattern) {
            this.endPattern = endPattern;
            return this;
        }

        public Builder endPosition(@Nullable String endPosition) {
            this.endPosition = endPosition;
            return this;
        }

        public Builder endValue(@Nullable String endValue) {
            this.endValue = endValue;
            return this;
        }

        public Builder expandContractions(@Nullable String expandContractions) {
            this.expandContractions = expandContractions;
            return this;
        }

        public Builder exponent(@Nullable String exponent) {
            this.exponent = exponent;
            return this;
        }

        public Builder falseString(@Nullable String falseString) {
            this.falseString = falseString;
            return this;
        }

        public Builder groupByAggFunctionOptions(@Nullable String groupByAggFunctionOptions) {
            this.groupByAggFunctionOptions = groupByAggFunctionOptions;
            return this;
        }

        public Builder groupByColumns(@Nullable String groupByColumns) {
            this.groupByColumns = groupByColumns;
            return this;
        }

        public Builder hiddenColumns(@Nullable String hiddenColumns) {
            this.hiddenColumns = hiddenColumns;
            return this;
        }

        public Builder ignoreCase(@Nullable String ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }

        public Builder includeInSplit(@Nullable String includeInSplit) {
            this.includeInSplit = includeInSplit;
            return this;
        }

        public Builder input(@Nullable RecipeParametersInputProperties input) {
            this.input = input;
            return this;
        }

        public Builder interval(@Nullable String interval) {
            this.interval = interval;
            return this;
        }

        public Builder isText(@Nullable String isText) {
            this.isText = isText;
            return this;
        }

        public Builder joinKeys(@Nullable String joinKeys) {
            this.joinKeys = joinKeys;
            return this;
        }

        public Builder joinType(@Nullable String joinType) {
            this.joinType = joinType;
            return this;
        }

        public Builder leftColumns(@Nullable String leftColumns) {
            this.leftColumns = leftColumns;
            return this;
        }

        public Builder limit(@Nullable String limit) {
            this.limit = limit;
            return this;
        }

        public Builder lowerBound(@Nullable String lowerBound) {
            this.lowerBound = lowerBound;
            return this;
        }

        public Builder mapType(@Nullable String mapType) {
            this.mapType = mapType;
            return this;
        }

        public Builder modeType(@Nullable String modeType) {
            this.modeType = modeType;
            return this;
        }

        public Builder multiLine(@Nullable Boolean multiLine) {
            this.multiLine = multiLine;
            return this;
        }

        public Builder numRows(@Nullable String numRows) {
            this.numRows = numRows;
            return this;
        }

        public Builder numRowsAfter(@Nullable String numRowsAfter) {
            this.numRowsAfter = numRowsAfter;
            return this;
        }

        public Builder numRowsBefore(@Nullable String numRowsBefore) {
            this.numRowsBefore = numRowsBefore;
            return this;
        }

        public Builder orderByColumn(@Nullable String orderByColumn) {
            this.orderByColumn = orderByColumn;
            return this;
        }

        public Builder orderByColumns(@Nullable String orderByColumns) {
            this.orderByColumns = orderByColumns;
            return this;
        }

        public Builder other(@Nullable String other) {
            this.other = other;
            return this;
        }

        public Builder pattern(@Nullable String pattern) {
            this.pattern = pattern;
            return this;
        }

        public Builder patternOption1(@Nullable String patternOption1) {
            this.patternOption1 = patternOption1;
            return this;
        }

        public Builder patternOption2(@Nullable String patternOption2) {
            this.patternOption2 = patternOption2;
            return this;
        }

        public Builder patternOptions(@Nullable String patternOptions) {
            this.patternOptions = patternOptions;
            return this;
        }

        public Builder period(@Nullable String period) {
            this.period = period;
            return this;
        }

        public Builder position(@Nullable String position) {
            this.position = position;
            return this;
        }

        public Builder removeAllPunctuation(@Nullable String removeAllPunctuation) {
            this.removeAllPunctuation = removeAllPunctuation;
            return this;
        }

        public Builder removeAllQuotes(@Nullable String removeAllQuotes) {
            this.removeAllQuotes = removeAllQuotes;
            return this;
        }

        public Builder removeAllWhitespace(@Nullable String removeAllWhitespace) {
            this.removeAllWhitespace = removeAllWhitespace;
            return this;
        }

        public Builder removeCustomCharacters(@Nullable String removeCustomCharacters) {
            this.removeCustomCharacters = removeCustomCharacters;
            return this;
        }

        public Builder removeCustomValue(@Nullable String removeCustomValue) {
            this.removeCustomValue = removeCustomValue;
            return this;
        }

        public Builder removeLeadingAndTrailingPunctuation(@Nullable String removeLeadingAndTrailingPunctuation) {
            this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            return this;
        }

        public Builder removeLeadingAndTrailingQuotes(@Nullable String removeLeadingAndTrailingQuotes) {
            this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            return this;
        }

        public Builder removeLeadingAndTrailingWhitespace(@Nullable String removeLeadingAndTrailingWhitespace) {
            this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            return this;
        }

        public Builder removeLetters(@Nullable String removeLetters) {
            this.removeLetters = removeLetters;
            return this;
        }

        public Builder removeNumbers(@Nullable String removeNumbers) {
            this.removeNumbers = removeNumbers;
            return this;
        }

        public Builder removeSourceColumn(@Nullable String removeSourceColumn) {
            this.removeSourceColumn = removeSourceColumn;
            return this;
        }

        public Builder removeSpecialCharacters(@Nullable String removeSpecialCharacters) {
            this.removeSpecialCharacters = removeSpecialCharacters;
            return this;
        }

        public Builder rightColumns(@Nullable String rightColumns) {
            this.rightColumns = rightColumns;
            return this;
        }

        public Builder sampleSize(@Nullable String sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }

        public Builder sampleType(@Nullable String sampleType) {
            this.sampleType = sampleType;
            return this;
        }

        public Builder secondInput(@Nullable String secondInput) {
            this.secondInput = secondInput;
            return this;
        }

        public Builder secondaryInputs(@Nullable List<RecipeSecondaryInput> secondaryInputs) {
            this.secondaryInputs = secondaryInputs;
            return this;
        }

        public Builder sheetIndexes(@Nullable List<Integer> sheetIndexes) {
            this.sheetIndexes = sheetIndexes;
            return this;
        }

        public Builder sheetNames(@Nullable List<String> sheetNames) {
            this.sheetNames = sheetNames;
            return this;
        }

        public Builder sourceColumn(@Nullable String sourceColumn) {
            this.sourceColumn = sourceColumn;
            return this;
        }

        public Builder sourceColumn1(@Nullable String sourceColumn1) {
            this.sourceColumn1 = sourceColumn1;
            return this;
        }

        public Builder sourceColumn2(@Nullable String sourceColumn2) {
            this.sourceColumn2 = sourceColumn2;
            return this;
        }

        public Builder sourceColumns(@Nullable String sourceColumns) {
            this.sourceColumns = sourceColumns;
            return this;
        }

        public Builder startColumnIndex(@Nullable String startColumnIndex) {
            this.startColumnIndex = startColumnIndex;
            return this;
        }

        public Builder startPattern(@Nullable String startPattern) {
            this.startPattern = startPattern;
            return this;
        }

        public Builder startPosition(@Nullable String startPosition) {
            this.startPosition = startPosition;
            return this;
        }

        public Builder startValue(@Nullable String startValue) {
            this.startValue = startValue;
            return this;
        }

        public Builder stemmingMode(@Nullable String stemmingMode) {
            this.stemmingMode = stemmingMode;
            return this;
        }

        public Builder stepCount(@Nullable String stepCount) {
            this.stepCount = stepCount;
            return this;
        }

        public Builder stepIndex(@Nullable String stepIndex) {
            this.stepIndex = stepIndex;
            return this;
        }

        public Builder stopWordsMode(@Nullable String stopWordsMode) {
            this.stopWordsMode = stopWordsMode;
            return this;
        }

        public Builder strategy(@Nullable String strategy) {
            this.strategy = strategy;
            return this;
        }

        public Builder targetColumn(@Nullable String targetColumn) {
            this.targetColumn = targetColumn;
            return this;
        }

        public Builder targetColumnNames(@Nullable String targetColumnNames) {
            this.targetColumnNames = targetColumnNames;
            return this;
        }

        public Builder targetDateFormat(@Nullable String targetDateFormat) {
            this.targetDateFormat = targetDateFormat;
            return this;
        }

        public Builder targetIndex(@Nullable String targetIndex) {
            this.targetIndex = targetIndex;
            return this;
        }

        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder tokenizerPattern(@Nullable String tokenizerPattern) {
            this.tokenizerPattern = tokenizerPattern;
            return this;
        }

        public Builder trueString(@Nullable String trueString) {
            this.trueString = trueString;
            return this;
        }

        public Builder udfLang(@Nullable String udfLang) {
            this.udfLang = udfLang;
            return this;
        }

        public Builder units(@Nullable String units) {
            this.units = units;
            return this;
        }

        public Builder unpivotColumn(@Nullable String unpivotColumn) {
            this.unpivotColumn = unpivotColumn;
            return this;
        }

        public Builder upperBound(@Nullable String upperBound) {
            this.upperBound = upperBound;
            return this;
        }

        public Builder useNewDataFrame(@Nullable String useNewDataFrame) {
            this.useNewDataFrame = useNewDataFrame;
            return this;
        }

        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }

        public Builder value1(@Nullable String value1) {
            this.value1 = value1;
            return this;
        }

        public Builder value2(@Nullable String value2) {
            this.value2 = value2;
            return this;
        }

        public Builder valueColumn(@Nullable String valueColumn) {
            this.valueColumn = valueColumn;
            return this;
        }

        public Builder viewFrame(@Nullable String viewFrame) {
            this.viewFrame = viewFrame;
            return this;
        }
        public RecipeParameters build() {
            return new RecipeParameters(aggregateFunction, base, caseStatement, categoryMap, charsToRemove, collapseConsecutiveWhitespace, columnDataType, columnRange, count, customCharacters, customStopWords, customValue, datasetsColumns, dateAddValue, dateTimeFormat, dateTimeParameters, deleteOtherRows, delimiter, endPattern, endPosition, endValue, expandContractions, exponent, falseString, groupByAggFunctionOptions, groupByColumns, hiddenColumns, ignoreCase, includeInSplit, input, interval, isText, joinKeys, joinType, leftColumns, limit, lowerBound, mapType, modeType, multiLine, numRows, numRowsAfter, numRowsBefore, orderByColumn, orderByColumns, other, pattern, patternOption1, patternOption2, patternOptions, period, position, removeAllPunctuation, removeAllQuotes, removeAllWhitespace, removeCustomCharacters, removeCustomValue, removeLeadingAndTrailingPunctuation, removeLeadingAndTrailingQuotes, removeLeadingAndTrailingWhitespace, removeLetters, removeNumbers, removeSourceColumn, removeSpecialCharacters, rightColumns, sampleSize, sampleType, secondInput, secondaryInputs, sheetIndexes, sheetNames, sourceColumn, sourceColumn1, sourceColumn2, sourceColumns, startColumnIndex, startPattern, startPosition, startValue, stemmingMode, stepCount, stepIndex, stopWordsMode, strategy, targetColumn, targetColumnNames, targetDateFormat, targetIndex, timeZone, tokenizerPattern, trueString, udfLang, units, unpivotColumn, upperBound, useNewDataFrame, value, value1, value2, valueColumn, viewFrame);
        }
    }
}
