// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.accessanalyzer;

import io.pulumi.awsnative.accessanalyzer.inputs.AnalyzerArchiveRuleArgs;
import io.pulumi.awsnative.accessanalyzer.inputs.AnalyzerTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AnalyzerArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnalyzerArgs Empty = new AnalyzerArgs();

    /**
     * Analyzer name
     * 
     */
    @Import(name="analyzerName")
      private final @Nullable Output<String> analyzerName;

    public Output<String> analyzerName() {
        return this.analyzerName == null ? Codegen.empty() : this.analyzerName;
    }

    @Import(name="archiveRules")
      private final @Nullable Output<List<AnalyzerArchiveRuleArgs>> archiveRules;

    public Output<List<AnalyzerArchiveRuleArgs>> archiveRules() {
        return this.archiveRules == null ? Codegen.empty() : this.archiveRules;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<AnalyzerTagArgs>> tags;

    public Output<List<AnalyzerTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The type of the analyzer, must be ACCOUNT or ORGANIZATION
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public AnalyzerArgs(
        @Nullable Output<String> analyzerName,
        @Nullable Output<List<AnalyzerArchiveRuleArgs>> archiveRules,
        @Nullable Output<List<AnalyzerTagArgs>> tags,
        Output<String> type) {
        this.analyzerName = analyzerName;
        this.archiveRules = archiveRules;
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private AnalyzerArgs() {
        this.analyzerName = Codegen.empty();
        this.archiveRules = Codegen.empty();
        this.tags = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyzerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> analyzerName;
        private @Nullable Output<List<AnalyzerArchiveRuleArgs>> archiveRules;
        private @Nullable Output<List<AnalyzerTagArgs>> tags;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyzerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyzerName = defaults.analyzerName;
    	      this.archiveRules = defaults.archiveRules;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder analyzerName(@Nullable Output<String> analyzerName) {
            this.analyzerName = analyzerName;
            return this;
        }
        public Builder analyzerName(@Nullable String analyzerName) {
            this.analyzerName = Codegen.ofNullable(analyzerName);
            return this;
        }
        public Builder archiveRules(@Nullable Output<List<AnalyzerArchiveRuleArgs>> archiveRules) {
            this.archiveRules = archiveRules;
            return this;
        }
        public Builder archiveRules(@Nullable List<AnalyzerArchiveRuleArgs> archiveRules) {
            this.archiveRules = Codegen.ofNullable(archiveRules);
            return this;
        }
        public Builder archiveRules(AnalyzerArchiveRuleArgs... archiveRules) {
            return archiveRules(List.of(archiveRules));
        }
        public Builder tags(@Nullable Output<List<AnalyzerTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<AnalyzerTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(AnalyzerTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public AnalyzerArgs build() {
            return new AnalyzerArgs(analyzerName, archiveRules, tags, type);
        }
    }
}
