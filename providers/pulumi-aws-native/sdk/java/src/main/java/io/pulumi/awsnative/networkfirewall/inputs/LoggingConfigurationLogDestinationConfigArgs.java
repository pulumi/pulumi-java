// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.networkfirewall.inputs;

import io.pulumi.awsnative.networkfirewall.enums.LoggingConfigurationLogDestinationConfigLogDestinationType;
import io.pulumi.awsnative.networkfirewall.enums.LoggingConfigurationLogDestinationConfigLogType;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.util.Objects;


public final class LoggingConfigurationLogDestinationConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoggingConfigurationLogDestinationConfigArgs Empty = new LoggingConfigurationLogDestinationConfigArgs();

    /**
     * A key-value pair to configure the logDestinations.
     * 
     */
    @Import(name="logDestination", required=true)
      private final Output<Object> logDestination;

    public Output<Object> getLogDestination() {
        return this.logDestination;
    }

    @Import(name="logDestinationType", required=true)
      private final Output<LoggingConfigurationLogDestinationConfigLogDestinationType> logDestinationType;

    public Output<LoggingConfigurationLogDestinationConfigLogDestinationType> getLogDestinationType() {
        return this.logDestinationType;
    }

    @Import(name="logType", required=true)
      private final Output<LoggingConfigurationLogDestinationConfigLogType> logType;

    public Output<LoggingConfigurationLogDestinationConfigLogType> getLogType() {
        return this.logType;
    }

    public LoggingConfigurationLogDestinationConfigArgs(
        Output<Object> logDestination,
        Output<LoggingConfigurationLogDestinationConfigLogDestinationType> logDestinationType,
        Output<LoggingConfigurationLogDestinationConfigLogType> logType) {
        this.logDestination = Objects.requireNonNull(logDestination, "expected parameter 'logDestination' to be non-null");
        this.logDestinationType = Objects.requireNonNull(logDestinationType, "expected parameter 'logDestinationType' to be non-null");
        this.logType = Objects.requireNonNull(logType, "expected parameter 'logType' to be non-null");
    }

    private LoggingConfigurationLogDestinationConfigArgs() {
        this.logDestination = Codegen.empty();
        this.logDestinationType = Codegen.empty();
        this.logType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoggingConfigurationLogDestinationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Object> logDestination;
        private Output<LoggingConfigurationLogDestinationConfigLogDestinationType> logDestinationType;
        private Output<LoggingConfigurationLogDestinationConfigLogType> logType;

        public Builder() {
    	      // Empty
        }

        public Builder(LoggingConfigurationLogDestinationConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logDestination = defaults.logDestination;
    	      this.logDestinationType = defaults.logDestinationType;
    	      this.logType = defaults.logType;
        }

        public Builder logDestination(Output<Object> logDestination) {
            this.logDestination = Objects.requireNonNull(logDestination);
            return this;
        }
        public Builder logDestination(Object logDestination) {
            this.logDestination = Output.of(Objects.requireNonNull(logDestination));
            return this;
        }
        public Builder logDestinationType(Output<LoggingConfigurationLogDestinationConfigLogDestinationType> logDestinationType) {
            this.logDestinationType = Objects.requireNonNull(logDestinationType);
            return this;
        }
        public Builder logDestinationType(LoggingConfigurationLogDestinationConfigLogDestinationType logDestinationType) {
            this.logDestinationType = Output.of(Objects.requireNonNull(logDestinationType));
            return this;
        }
        public Builder logType(Output<LoggingConfigurationLogDestinationConfigLogType> logType) {
            this.logType = Objects.requireNonNull(logType);
            return this;
        }
        public Builder logType(LoggingConfigurationLogDestinationConfigLogType logType) {
            this.logType = Output.of(Objects.requireNonNull(logType));
            return this;
        }        public LoggingConfigurationLogDestinationConfigArgs build() {
            return new LoggingConfigurationLogDestinationConfigArgs(logDestination, logDestinationType, logType);
        }
    }
}
