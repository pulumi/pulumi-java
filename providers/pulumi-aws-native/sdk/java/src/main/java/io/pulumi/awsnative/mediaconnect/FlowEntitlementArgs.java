// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.mediaconnect;

import io.pulumi.awsnative.mediaconnect.enums.FlowEntitlementEntitlementStatus;
import io.pulumi.awsnative.mediaconnect.inputs.FlowEntitlementEncryptionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FlowEntitlementArgs extends io.pulumi.resources.ResourceArgs {

    public static final FlowEntitlementArgs Empty = new FlowEntitlementArgs();

    /**
     * Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
     * 
     */
    @Import(name="dataTransferSubscriberFeePercent")
      private final @Nullable Output<Integer> dataTransferSubscriberFeePercent;

    public Output<Integer> dataTransferSubscriberFeePercent() {
        return this.dataTransferSubscriberFeePercent == null ? Codegen.empty() : this.dataTransferSubscriberFeePercent;
    }

    /**
     * A description of the entitlement.
     * 
     */
    @Import(name="description", required=true)
      private final Output<String> description;

    public Output<String> description() {
        return this.description;
    }

    /**
     * The type of encryption that will be used on the output that is associated with this entitlement.
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<FlowEntitlementEncryptionArgs> encryption;

    public Output<FlowEntitlementEncryptionArgs> encryption() {
        return this.encryption == null ? Codegen.empty() : this.encryption;
    }

    /**
     *  An indication of whether the entitlement is enabled.
     * 
     */
    @Import(name="entitlementStatus")
      private final @Nullable Output<FlowEntitlementEntitlementStatus> entitlementStatus;

    public Output<FlowEntitlementEntitlementStatus> entitlementStatus() {
        return this.entitlementStatus == null ? Codegen.empty() : this.entitlementStatus;
    }

    /**
     * The ARN of the flow.
     * 
     */
    @Import(name="flowArn", required=true)
      private final Output<String> flowArn;

    public Output<String> flowArn() {
        return this.flowArn;
    }

    /**
     * The name of the entitlement.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
     * 
     */
    @Import(name="subscribers", required=true)
      private final Output<List<String>> subscribers;

    public Output<List<String>> subscribers() {
        return this.subscribers;
    }

    public FlowEntitlementArgs(
        @Nullable Output<Integer> dataTransferSubscriberFeePercent,
        Output<String> description,
        @Nullable Output<FlowEntitlementEncryptionArgs> encryption,
        @Nullable Output<FlowEntitlementEntitlementStatus> entitlementStatus,
        Output<String> flowArn,
        @Nullable Output<String> name,
        Output<List<String>> subscribers) {
        this.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.encryption = encryption;
        this.entitlementStatus = entitlementStatus;
        this.flowArn = Objects.requireNonNull(flowArn, "expected parameter 'flowArn' to be non-null");
        this.name = name;
        this.subscribers = Objects.requireNonNull(subscribers, "expected parameter 'subscribers' to be non-null");
    }

    private FlowEntitlementArgs() {
        this.dataTransferSubscriberFeePercent = Codegen.empty();
        this.description = Codegen.empty();
        this.encryption = Codegen.empty();
        this.entitlementStatus = Codegen.empty();
        this.flowArn = Codegen.empty();
        this.name = Codegen.empty();
        this.subscribers = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowEntitlementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> dataTransferSubscriberFeePercent;
        private Output<String> description;
        private @Nullable Output<FlowEntitlementEncryptionArgs> encryption;
        private @Nullable Output<FlowEntitlementEntitlementStatus> entitlementStatus;
        private Output<String> flowArn;
        private @Nullable Output<String> name;
        private Output<List<String>> subscribers;

        public Builder() {
    	      // Empty
        }

        public Builder(FlowEntitlementArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataTransferSubscriberFeePercent = defaults.dataTransferSubscriberFeePercent;
    	      this.description = defaults.description;
    	      this.encryption = defaults.encryption;
    	      this.entitlementStatus = defaults.entitlementStatus;
    	      this.flowArn = defaults.flowArn;
    	      this.name = defaults.name;
    	      this.subscribers = defaults.subscribers;
        }

        public Builder dataTransferSubscriberFeePercent(@Nullable Output<Integer> dataTransferSubscriberFeePercent) {
            this.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
            return this;
        }
        public Builder dataTransferSubscriberFeePercent(@Nullable Integer dataTransferSubscriberFeePercent) {
            this.dataTransferSubscriberFeePercent = Codegen.ofNullable(dataTransferSubscriberFeePercent);
            return this;
        }
        public Builder description(Output<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder description(String description) {
            this.description = Output.of(Objects.requireNonNull(description));
            return this;
        }
        public Builder encryption(@Nullable Output<FlowEntitlementEncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }
        public Builder encryption(@Nullable FlowEntitlementEncryptionArgs encryption) {
            this.encryption = Codegen.ofNullable(encryption);
            return this;
        }
        public Builder entitlementStatus(@Nullable Output<FlowEntitlementEntitlementStatus> entitlementStatus) {
            this.entitlementStatus = entitlementStatus;
            return this;
        }
        public Builder entitlementStatus(@Nullable FlowEntitlementEntitlementStatus entitlementStatus) {
            this.entitlementStatus = Codegen.ofNullable(entitlementStatus);
            return this;
        }
        public Builder flowArn(Output<String> flowArn) {
            this.flowArn = Objects.requireNonNull(flowArn);
            return this;
        }
        public Builder flowArn(String flowArn) {
            this.flowArn = Output.of(Objects.requireNonNull(flowArn));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder subscribers(Output<List<String>> subscribers) {
            this.subscribers = Objects.requireNonNull(subscribers);
            return this;
        }
        public Builder subscribers(List<String> subscribers) {
            this.subscribers = Output.of(Objects.requireNonNull(subscribers));
            return this;
        }
        public Builder subscribers(String... subscribers) {
            return subscribers(List.of(subscribers));
        }        public FlowEntitlementArgs build() {
            return new FlowEntitlementArgs(dataTransferSubscriberFeePercent, description, encryption, entitlementStatus, flowArn, name, subscribers);
        }
    }
}
