// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3outposts.inputs;

import io.pulumi.awsnative.s3outposts.inputs.BucketFilterAndOperatorArgs;
import io.pulumi.awsnative.s3outposts.inputs.BucketFilterTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The container for the filter of the lifecycle rule.
 * 
 */
public final class BucketRuleFilterPropertiesArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketRuleFilterPropertiesArgs Empty = new BucketRuleFilterPropertiesArgs();

    /**
     * The container for the AND condition for the lifecycle rule. A combination of Prefix and 1 or more Tags OR a minimum of 2 or more tags.
     * 
     */
    @Import(name="andOperator")
      private final @Nullable Output<BucketFilterAndOperatorArgs> andOperator;

    public Output<BucketFilterAndOperatorArgs> andOperator() {
        return this.andOperator == null ? Codegen.empty() : this.andOperator;
    }

    /**
     * Object key prefix that identifies one or more objects to which this rule applies.
     * 
     */
    @Import(name="prefix")
      private final @Nullable Output<String> prefix;

    public Output<String> prefix() {
        return this.prefix == null ? Codegen.empty() : this.prefix;
    }

    /**
     * Specifies a tag used to identify a subset of objects for an Amazon S3Outposts bucket.
     * 
     */
    @Import(name="tag")
      private final @Nullable Output<BucketFilterTagArgs> tag;

    public Output<BucketFilterTagArgs> tag() {
        return this.tag == null ? Codegen.empty() : this.tag;
    }

    public BucketRuleFilterPropertiesArgs(
        @Nullable Output<BucketFilterAndOperatorArgs> andOperator,
        @Nullable Output<String> prefix,
        @Nullable Output<BucketFilterTagArgs> tag) {
        this.andOperator = andOperator;
        this.prefix = prefix;
        this.tag = tag;
    }

    private BucketRuleFilterPropertiesArgs() {
        this.andOperator = Codegen.empty();
        this.prefix = Codegen.empty();
        this.tag = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRuleFilterPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BucketFilterAndOperatorArgs> andOperator;
        private @Nullable Output<String> prefix;
        private @Nullable Output<BucketFilterTagArgs> tag;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRuleFilterPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.andOperator = defaults.andOperator;
    	      this.prefix = defaults.prefix;
    	      this.tag = defaults.tag;
        }

        public Builder andOperator(@Nullable Output<BucketFilterAndOperatorArgs> andOperator) {
            this.andOperator = andOperator;
            return this;
        }
        public Builder andOperator(@Nullable BucketFilterAndOperatorArgs andOperator) {
            this.andOperator = Codegen.ofNullable(andOperator);
            return this;
        }
        public Builder prefix(@Nullable Output<String> prefix) {
            this.prefix = prefix;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = Codegen.ofNullable(prefix);
            return this;
        }
        public Builder tag(@Nullable Output<BucketFilterTagArgs> tag) {
            this.tag = tag;
            return this;
        }
        public Builder tag(@Nullable BucketFilterTagArgs tag) {
            this.tag = Codegen.ofNullable(tag);
            return this;
        }        public BucketRuleFilterPropertiesArgs build() {
            return new BucketRuleFilterPropertiesArgs(andOperator, prefix, tag);
        }
    }
}
