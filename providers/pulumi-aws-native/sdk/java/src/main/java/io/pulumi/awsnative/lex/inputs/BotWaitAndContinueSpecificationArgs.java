// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lex.inputs;

import io.pulumi.awsnative.lex.inputs.BotResponseSpecificationArgs;
import io.pulumi.awsnative.lex.inputs.BotStillWaitingResponseSpecificationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The prompts that Amazon Lex uses while a bot is waiting for customer input.
 * 
 */
public final class BotWaitAndContinueSpecificationArgs extends io.pulumi.resources.ResourceArgs {

    public static final BotWaitAndContinueSpecificationArgs Empty = new BotWaitAndContinueSpecificationArgs();

    /**
     * The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
     * 
     */
    @InputImport(name="continueResponse", required=true)
        private final Input<BotResponseSpecificationArgs> continueResponse;

    public Input<BotResponseSpecificationArgs> getContinueResponse() {
        return this.continueResponse;
    }

    /**
     * Specifies whether the bot will wait for a user to respond.
     * 
     */
    @InputImport(name="isActive")
        private final @Nullable Input<Boolean> isActive;

    public Input<Boolean> getIsActive() {
        return this.isActive == null ? Input.empty() : this.isActive;
    }

    /**
     * The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
     * 
     */
    @InputImport(name="stillWaitingResponse")
        private final @Nullable Input<BotStillWaitingResponseSpecificationArgs> stillWaitingResponse;

    public Input<BotStillWaitingResponseSpecificationArgs> getStillWaitingResponse() {
        return this.stillWaitingResponse == null ? Input.empty() : this.stillWaitingResponse;
    }

    /**
     * The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
     * 
     */
    @InputImport(name="waitingResponse", required=true)
        private final Input<BotResponseSpecificationArgs> waitingResponse;

    public Input<BotResponseSpecificationArgs> getWaitingResponse() {
        return this.waitingResponse;
    }

    public BotWaitAndContinueSpecificationArgs(
        Input<BotResponseSpecificationArgs> continueResponse,
        @Nullable Input<Boolean> isActive,
        @Nullable Input<BotStillWaitingResponseSpecificationArgs> stillWaitingResponse,
        Input<BotResponseSpecificationArgs> waitingResponse) {
        this.continueResponse = Objects.requireNonNull(continueResponse, "expected parameter 'continueResponse' to be non-null");
        this.isActive = isActive;
        this.stillWaitingResponse = stillWaitingResponse;
        this.waitingResponse = Objects.requireNonNull(waitingResponse, "expected parameter 'waitingResponse' to be non-null");
    }

    private BotWaitAndContinueSpecificationArgs() {
        this.continueResponse = Input.empty();
        this.isActive = Input.empty();
        this.stillWaitingResponse = Input.empty();
        this.waitingResponse = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BotWaitAndContinueSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<BotResponseSpecificationArgs> continueResponse;
        private @Nullable Input<Boolean> isActive;
        private @Nullable Input<BotStillWaitingResponseSpecificationArgs> stillWaitingResponse;
        private Input<BotResponseSpecificationArgs> waitingResponse;

        public Builder() {
    	      // Empty
        }

        public Builder(BotWaitAndContinueSpecificationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.continueResponse = defaults.continueResponse;
    	      this.isActive = defaults.isActive;
    	      this.stillWaitingResponse = defaults.stillWaitingResponse;
    	      this.waitingResponse = defaults.waitingResponse;
        }

        public Builder setContinueResponse(Input<BotResponseSpecificationArgs> continueResponse) {
            this.continueResponse = Objects.requireNonNull(continueResponse);
            return this;
        }

        public Builder setContinueResponse(BotResponseSpecificationArgs continueResponse) {
            this.continueResponse = Input.of(Objects.requireNonNull(continueResponse));
            return this;
        }

        public Builder setIsActive(@Nullable Input<Boolean> isActive) {
            this.isActive = isActive;
            return this;
        }

        public Builder setIsActive(@Nullable Boolean isActive) {
            this.isActive = Input.ofNullable(isActive);
            return this;
        }

        public Builder setStillWaitingResponse(@Nullable Input<BotStillWaitingResponseSpecificationArgs> stillWaitingResponse) {
            this.stillWaitingResponse = stillWaitingResponse;
            return this;
        }

        public Builder setStillWaitingResponse(@Nullable BotStillWaitingResponseSpecificationArgs stillWaitingResponse) {
            this.stillWaitingResponse = Input.ofNullable(stillWaitingResponse);
            return this;
        }

        public Builder setWaitingResponse(Input<BotResponseSpecificationArgs> waitingResponse) {
            this.waitingResponse = Objects.requireNonNull(waitingResponse);
            return this;
        }

        public Builder setWaitingResponse(BotResponseSpecificationArgs waitingResponse) {
            this.waitingResponse = Input.of(Objects.requireNonNull(waitingResponse));
            return this;
        }
        public BotWaitAndContinueSpecificationArgs build() {
            return new BotWaitAndContinueSpecificationArgs(continueResponse, isActive, stillWaitingResponse, waitingResponse);
        }
    }
}
