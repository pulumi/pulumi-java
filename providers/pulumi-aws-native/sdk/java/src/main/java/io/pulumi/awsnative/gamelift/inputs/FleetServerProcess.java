// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.gamelift.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A set of instructions for launching server processes on each instance in a fleet. Each instruction set identifies the location of the server executable, optional launch parameters, and the number of server processes with this configuration to maintain concurrently on the instance. Server process configurations make up a fleet's RuntimeConfiguration.
 * 
 */
public final class FleetServerProcess extends io.pulumi.resources.InvokeArgs {

    public static final FleetServerProcess Empty = new FleetServerProcess();

    /**
     * The number of server processes that use this configuration to run concurrently on an instance.
     * 
     */
    @InputImport(name="concurrentExecutions", required=true)
        private final Integer concurrentExecutions;

    public Integer getConcurrentExecutions() {
        return this.concurrentExecutions;
    }

    /**
     * The location of the server executable in a custom game build or the name of the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:
     * 
     * Windows (for custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"
     * 
     * Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
     * 
     */
    @InputImport(name="launchPath", required=true)
        private final String launchPath;

    public String getLaunchPath() {
        return this.launchPath;
    }

    /**
     * An optional list of parameters to pass to the server executable or Realtime script on launch.
     * 
     */
    @InputImport(name="parameters")
        private final @Nullable String parameters;

    public Optional<String> getParameters() {
        return this.parameters == null ? Optional.empty() : Optional.ofNullable(this.parameters);
    }

    public FleetServerProcess(
        Integer concurrentExecutions,
        String launchPath,
        @Nullable String parameters) {
        this.concurrentExecutions = Objects.requireNonNull(concurrentExecutions, "expected parameter 'concurrentExecutions' to be non-null");
        this.launchPath = Objects.requireNonNull(launchPath, "expected parameter 'launchPath' to be non-null");
        this.parameters = parameters;
    }

    private FleetServerProcess() {
        this.concurrentExecutions = null;
        this.launchPath = null;
        this.parameters = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetServerProcess defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer concurrentExecutions;
        private String launchPath;
        private @Nullable String parameters;

        public Builder() {
    	      // Empty
        }

        public Builder(FleetServerProcess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concurrentExecutions = defaults.concurrentExecutions;
    	      this.launchPath = defaults.launchPath;
    	      this.parameters = defaults.parameters;
        }

        public Builder setConcurrentExecutions(Integer concurrentExecutions) {
            this.concurrentExecutions = Objects.requireNonNull(concurrentExecutions);
            return this;
        }

        public Builder setLaunchPath(String launchPath) {
            this.launchPath = Objects.requireNonNull(launchPath);
            return this;
        }

        public Builder setParameters(@Nullable String parameters) {
            this.parameters = parameters;
            return this;
        }
        public FleetServerProcess build() {
            return new FleetServerProcess(concurrentExecutions, launchPath, parameters);
        }
    }
}
