// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.nimblestudio.outputs;

import io.pulumi.awsnative.nimblestudio.outputs.StudioComponentActiveDirectoryComputerAttribute;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class StudioComponentActiveDirectoryConfiguration {
    /**
     * <p>A collection of custom attributes for an Active Directory computer.</p>
     * 
     */
    private final @Nullable List<StudioComponentActiveDirectoryComputerAttribute> computerAttributes;
    /**
     * <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this studio component.</p>
     * 
     */
    private final @Nullable String directoryId;
    /**
     * <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.</p>
     * 
     */
    private final @Nullable String organizationalUnitDistinguishedName;

    @OutputCustomType.Constructor({"computerAttributes","directoryId","organizationalUnitDistinguishedName"})
    private StudioComponentActiveDirectoryConfiguration(
        @Nullable List<StudioComponentActiveDirectoryComputerAttribute> computerAttributes,
        @Nullable String directoryId,
        @Nullable String organizationalUnitDistinguishedName) {
        this.computerAttributes = computerAttributes;
        this.directoryId = directoryId;
        this.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName;
    }

    /**
     * <p>A collection of custom attributes for an Active Directory computer.</p>
     * 
     */
    public List<StudioComponentActiveDirectoryComputerAttribute> getComputerAttributes() {
        return this.computerAttributes == null ? List.of() : this.computerAttributes;
    }
    /**
     * <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this studio component.</p>
     * 
     */
    public Optional<String> getDirectoryId() {
        return Optional.ofNullable(this.directoryId);
    }
    /**
     * <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.</p>
     * 
     */
    public Optional<String> getOrganizationalUnitDistinguishedName() {
        return Optional.ofNullable(this.organizationalUnitDistinguishedName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StudioComponentActiveDirectoryConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<StudioComponentActiveDirectoryComputerAttribute> computerAttributes;
        private @Nullable String directoryId;
        private @Nullable String organizationalUnitDistinguishedName;

        public Builder() {
    	      // Empty
        }

        public Builder(StudioComponentActiveDirectoryConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computerAttributes = defaults.computerAttributes;
    	      this.directoryId = defaults.directoryId;
    	      this.organizationalUnitDistinguishedName = defaults.organizationalUnitDistinguishedName;
        }

        public Builder setComputerAttributes(@Nullable List<StudioComponentActiveDirectoryComputerAttribute> computerAttributes) {
            this.computerAttributes = computerAttributes;
            return this;
        }

        public Builder setDirectoryId(@Nullable String directoryId) {
            this.directoryId = directoryId;
            return this;
        }

        public Builder setOrganizationalUnitDistinguishedName(@Nullable String organizationalUnitDistinguishedName) {
            this.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName;
            return this;
        }

        public StudioComponentActiveDirectoryConfiguration build() {
            return new StudioComponentActiveDirectoryConfiguration(computerAttributes, directoryId, organizationalUnitDistinguishedName);
        }
    }
}
