// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.wafv2.inputs;

import io.pulumi.awsnative.wafv2.inputs.RuleGroupRuleActionAllowProperties;
import io.pulumi.awsnative.wafv2.inputs.RuleGroupRuleActionBlockProperties;
import io.pulumi.awsnative.wafv2.inputs.RuleGroupRuleActionCaptchaProperties;
import io.pulumi.awsnative.wafv2.inputs.RuleGroupRuleActionCountProperties;
import io.pulumi.core.annotations.InputImport;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Action taken when Rule matches its condition.
 * 
 */
public final class RuleGroupRuleAction extends io.pulumi.resources.InvokeArgs {

    public static final RuleGroupRuleAction Empty = new RuleGroupRuleAction();

    /**
     * Allow traffic towards application.
     * 
     */
    @InputImport(name="allow")
      private final @Nullable RuleGroupRuleActionAllowProperties allow;

    public Optional<RuleGroupRuleActionAllowProperties> getAllow() {
        return this.allow == null ? Optional.empty() : Optional.ofNullable(this.allow);
    }

    /**
     * Block traffic towards application.
     * 
     */
    @InputImport(name="block")
      private final @Nullable RuleGroupRuleActionBlockProperties block;

    public Optional<RuleGroupRuleActionBlockProperties> getBlock() {
        return this.block == null ? Optional.empty() : Optional.ofNullable(this.block);
    }

    /**
     * Checks valid token exists with request.
     * 
     */
    @InputImport(name="captcha")
      private final @Nullable RuleGroupRuleActionCaptchaProperties captcha;

    public Optional<RuleGroupRuleActionCaptchaProperties> getCaptcha() {
        return this.captcha == null ? Optional.empty() : Optional.ofNullable(this.captcha);
    }

    /**
     * Count traffic towards application.
     * 
     */
    @InputImport(name="count")
      private final @Nullable RuleGroupRuleActionCountProperties count;

    public Optional<RuleGroupRuleActionCountProperties> getCount() {
        return this.count == null ? Optional.empty() : Optional.ofNullable(this.count);
    }

    public RuleGroupRuleAction(
        @Nullable RuleGroupRuleActionAllowProperties allow,
        @Nullable RuleGroupRuleActionBlockProperties block,
        @Nullable RuleGroupRuleActionCaptchaProperties captcha,
        @Nullable RuleGroupRuleActionCountProperties count) {
        this.allow = allow;
        this.block = block;
        this.captcha = captcha;
        this.count = count;
    }

    private RuleGroupRuleAction() {
        this.allow = null;
        this.block = null;
        this.captcha = null;
        this.count = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupRuleAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable RuleGroupRuleActionAllowProperties allow;
        private @Nullable RuleGroupRuleActionBlockProperties block;
        private @Nullable RuleGroupRuleActionCaptchaProperties captcha;
        private @Nullable RuleGroupRuleActionCountProperties count;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allow = defaults.allow;
    	      this.block = defaults.block;
    	      this.captcha = defaults.captcha;
    	      this.count = defaults.count;
        }

        public Builder allow(@Nullable RuleGroupRuleActionAllowProperties allow) {
            this.allow = allow;
            return this;
        }

        public Builder block(@Nullable RuleGroupRuleActionBlockProperties block) {
            this.block = block;
            return this;
        }

        public Builder captcha(@Nullable RuleGroupRuleActionCaptchaProperties captcha) {
            this.captcha = captcha;
            return this;
        }

        public Builder count(@Nullable RuleGroupRuleActionCountProperties count) {
            this.count = count;
            return this;
        }
        public RuleGroupRuleAction build() {
            return new RuleGroupRuleAction(allow, block, captcha, count);
        }
    }
}
