// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight.inputs;

import io.pulumi.awsnative.quicksight.inputs.ThemeDataColorPaletteArgs;
import io.pulumi.awsnative.quicksight.inputs.ThemeSheetStyleArgs;
import io.pulumi.awsnative.quicksight.inputs.ThemeTypographyArgs;
import io.pulumi.awsnative.quicksight.inputs.ThemeUIColorPaletteArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ThemeConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ThemeConfigurationArgs Empty = new ThemeConfigurationArgs();

    @InputImport(name="dataColorPalette")
    private final @Nullable Input<ThemeDataColorPaletteArgs> dataColorPalette;

    public Input<ThemeDataColorPaletteArgs> getDataColorPalette() {
        return this.dataColorPalette == null ? Input.empty() : this.dataColorPalette;
    }

    @InputImport(name="sheet")
    private final @Nullable Input<ThemeSheetStyleArgs> sheet;

    public Input<ThemeSheetStyleArgs> getSheet() {
        return this.sheet == null ? Input.empty() : this.sheet;
    }

    @InputImport(name="typography")
    private final @Nullable Input<ThemeTypographyArgs> typography;

    public Input<ThemeTypographyArgs> getTypography() {
        return this.typography == null ? Input.empty() : this.typography;
    }

    @InputImport(name="uIColorPalette")
    private final @Nullable Input<ThemeUIColorPaletteArgs> uIColorPalette;

    public Input<ThemeUIColorPaletteArgs> getUIColorPalette() {
        return this.uIColorPalette == null ? Input.empty() : this.uIColorPalette;
    }

    public ThemeConfigurationArgs(
        @Nullable Input<ThemeDataColorPaletteArgs> dataColorPalette,
        @Nullable Input<ThemeSheetStyleArgs> sheet,
        @Nullable Input<ThemeTypographyArgs> typography,
        @Nullable Input<ThemeUIColorPaletteArgs> uIColorPalette) {
        this.dataColorPalette = dataColorPalette;
        this.sheet = sheet;
        this.typography = typography;
        this.uIColorPalette = uIColorPalette;
    }

    private ThemeConfigurationArgs() {
        this.dataColorPalette = Input.empty();
        this.sheet = Input.empty();
        this.typography = Input.empty();
        this.uIColorPalette = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThemeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ThemeDataColorPaletteArgs> dataColorPalette;
        private @Nullable Input<ThemeSheetStyleArgs> sheet;
        private @Nullable Input<ThemeTypographyArgs> typography;
        private @Nullable Input<ThemeUIColorPaletteArgs> uIColorPalette;

        public Builder() {
    	      // Empty
        }

        public Builder(ThemeConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataColorPalette = defaults.dataColorPalette;
    	      this.sheet = defaults.sheet;
    	      this.typography = defaults.typography;
    	      this.uIColorPalette = defaults.uIColorPalette;
        }

        public Builder setDataColorPalette(@Nullable Input<ThemeDataColorPaletteArgs> dataColorPalette) {
            this.dataColorPalette = dataColorPalette;
            return this;
        }

        public Builder setDataColorPalette(@Nullable ThemeDataColorPaletteArgs dataColorPalette) {
            this.dataColorPalette = Input.ofNullable(dataColorPalette);
            return this;
        }

        public Builder setSheet(@Nullable Input<ThemeSheetStyleArgs> sheet) {
            this.sheet = sheet;
            return this;
        }

        public Builder setSheet(@Nullable ThemeSheetStyleArgs sheet) {
            this.sheet = Input.ofNullable(sheet);
            return this;
        }

        public Builder setTypography(@Nullable Input<ThemeTypographyArgs> typography) {
            this.typography = typography;
            return this;
        }

        public Builder setTypography(@Nullable ThemeTypographyArgs typography) {
            this.typography = Input.ofNullable(typography);
            return this;
        }

        public Builder setUIColorPalette(@Nullable Input<ThemeUIColorPaletteArgs> uIColorPalette) {
            this.uIColorPalette = uIColorPalette;
            return this;
        }

        public Builder setUIColorPalette(@Nullable ThemeUIColorPaletteArgs uIColorPalette) {
            this.uIColorPalette = Input.ofNullable(uIColorPalette);
            return this;
        }

        public ThemeConfigurationArgs build() {
            return new ThemeConfigurationArgs(dataColorPalette, sheet, typography, uIColorPalette);
        }
    }
}
