// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kinesisfirehose.inputs;

import io.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamRedshiftDestinationConfigurationS3BackupMode;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamCloudWatchLoggingOptionsArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamCopyCommandArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamProcessingConfigurationArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamRedshiftRetryOptionsArgs;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamS3DestinationConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeliveryStreamRedshiftDestinationConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeliveryStreamRedshiftDestinationConfigurationArgs Empty = new DeliveryStreamRedshiftDestinationConfigurationArgs();

    @Import(name="cloudWatchLoggingOptions")
      private final @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions;

    public Output<DeliveryStreamCloudWatchLoggingOptionsArgs> getCloudWatchLoggingOptions() {
        return this.cloudWatchLoggingOptions == null ? Output.empty() : this.cloudWatchLoggingOptions;
    }

    @Import(name="clusterJDBCURL", required=true)
      private final Output<String> clusterJDBCURL;

    public Output<String> getClusterJDBCURL() {
        return this.clusterJDBCURL;
    }

    @Import(name="copyCommand", required=true)
      private final Output<DeliveryStreamCopyCommandArgs> copyCommand;

    public Output<DeliveryStreamCopyCommandArgs> getCopyCommand() {
        return this.copyCommand;
    }

    @Import(name="password", required=true)
      private final Output<String> password;

    public Output<String> getPassword() {
        return this.password;
    }

    @Import(name="processingConfiguration")
      private final @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration;

    public Output<DeliveryStreamProcessingConfigurationArgs> getProcessingConfiguration() {
        return this.processingConfiguration == null ? Output.empty() : this.processingConfiguration;
    }

    @Import(name="retryOptions")
      private final @Nullable Output<DeliveryStreamRedshiftRetryOptionsArgs> retryOptions;

    public Output<DeliveryStreamRedshiftRetryOptionsArgs> getRetryOptions() {
        return this.retryOptions == null ? Output.empty() : this.retryOptions;
    }

    @Import(name="roleARN", required=true)
      private final Output<String> roleARN;

    public Output<String> getRoleARN() {
        return this.roleARN;
    }

    @Import(name="s3BackupConfiguration")
      private final @Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration;

    public Output<DeliveryStreamS3DestinationConfigurationArgs> getS3BackupConfiguration() {
        return this.s3BackupConfiguration == null ? Output.empty() : this.s3BackupConfiguration;
    }

    @Import(name="s3BackupMode")
      private final @Nullable Output<DeliveryStreamRedshiftDestinationConfigurationS3BackupMode> s3BackupMode;

    public Output<DeliveryStreamRedshiftDestinationConfigurationS3BackupMode> getS3BackupMode() {
        return this.s3BackupMode == null ? Output.empty() : this.s3BackupMode;
    }

    @Import(name="s3Configuration", required=true)
      private final Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration;

    public Output<DeliveryStreamS3DestinationConfigurationArgs> getS3Configuration() {
        return this.s3Configuration;
    }

    @Import(name="username", required=true)
      private final Output<String> username;

    public Output<String> getUsername() {
        return this.username;
    }

    public DeliveryStreamRedshiftDestinationConfigurationArgs(
        @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions,
        Output<String> clusterJDBCURL,
        Output<DeliveryStreamCopyCommandArgs> copyCommand,
        Output<String> password,
        @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration,
        @Nullable Output<DeliveryStreamRedshiftRetryOptionsArgs> retryOptions,
        Output<String> roleARN,
        @Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration,
        @Nullable Output<DeliveryStreamRedshiftDestinationConfigurationS3BackupMode> s3BackupMode,
        Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration,
        Output<String> username) {
        this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
        this.clusterJDBCURL = Objects.requireNonNull(clusterJDBCURL, "expected parameter 'clusterJDBCURL' to be non-null");
        this.copyCommand = Objects.requireNonNull(copyCommand, "expected parameter 'copyCommand' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.processingConfiguration = processingConfiguration;
        this.retryOptions = retryOptions;
        this.roleARN = Objects.requireNonNull(roleARN, "expected parameter 'roleARN' to be non-null");
        this.s3BackupConfiguration = s3BackupConfiguration;
        this.s3BackupMode = s3BackupMode;
        this.s3Configuration = Objects.requireNonNull(s3Configuration, "expected parameter 's3Configuration' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private DeliveryStreamRedshiftDestinationConfigurationArgs() {
        this.cloudWatchLoggingOptions = Output.empty();
        this.clusterJDBCURL = Output.empty();
        this.copyCommand = Output.empty();
        this.password = Output.empty();
        this.processingConfiguration = Output.empty();
        this.retryOptions = Output.empty();
        this.roleARN = Output.empty();
        this.s3BackupConfiguration = Output.empty();
        this.s3BackupMode = Output.empty();
        this.s3Configuration = Output.empty();
        this.username = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamRedshiftDestinationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions;
        private Output<String> clusterJDBCURL;
        private Output<DeliveryStreamCopyCommandArgs> copyCommand;
        private Output<String> password;
        private @Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration;
        private @Nullable Output<DeliveryStreamRedshiftRetryOptionsArgs> retryOptions;
        private Output<String> roleARN;
        private @Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration;
        private @Nullable Output<DeliveryStreamRedshiftDestinationConfigurationS3BackupMode> s3BackupMode;
        private Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration;
        private Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(DeliveryStreamRedshiftDestinationConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.clusterJDBCURL = defaults.clusterJDBCURL;
    	      this.copyCommand = defaults.copyCommand;
    	      this.password = defaults.password;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryOptions = defaults.retryOptions;
    	      this.roleARN = defaults.roleARN;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
    	      this.username = defaults.username;
        }

        public Builder cloudWatchLoggingOptions(@Nullable Output<DeliveryStreamCloudWatchLoggingOptionsArgs> cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }

        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptionsArgs cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = Output.ofNullable(cloudWatchLoggingOptions);
            return this;
        }

        public Builder clusterJDBCURL(Output<String> clusterJDBCURL) {
            this.clusterJDBCURL = Objects.requireNonNull(clusterJDBCURL);
            return this;
        }

        public Builder clusterJDBCURL(String clusterJDBCURL) {
            this.clusterJDBCURL = Output.of(Objects.requireNonNull(clusterJDBCURL));
            return this;
        }

        public Builder copyCommand(Output<DeliveryStreamCopyCommandArgs> copyCommand) {
            this.copyCommand = Objects.requireNonNull(copyCommand);
            return this;
        }

        public Builder copyCommand(DeliveryStreamCopyCommandArgs copyCommand) {
            this.copyCommand = Output.of(Objects.requireNonNull(copyCommand));
            return this;
        }

        public Builder password(Output<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder password(String password) {
            this.password = Output.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder processingConfiguration(@Nullable Output<DeliveryStreamProcessingConfigurationArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfigurationArgs processingConfiguration) {
            this.processingConfiguration = Output.ofNullable(processingConfiguration);
            return this;
        }

        public Builder retryOptions(@Nullable Output<DeliveryStreamRedshiftRetryOptionsArgs> retryOptions) {
            this.retryOptions = retryOptions;
            return this;
        }

        public Builder retryOptions(@Nullable DeliveryStreamRedshiftRetryOptionsArgs retryOptions) {
            this.retryOptions = Output.ofNullable(retryOptions);
            return this;
        }

        public Builder roleARN(Output<String> roleARN) {
            this.roleARN = Objects.requireNonNull(roleARN);
            return this;
        }

        public Builder roleARN(String roleARN) {
            this.roleARN = Output.of(Objects.requireNonNull(roleARN));
            return this;
        }

        public Builder s3BackupConfiguration(@Nullable Output<DeliveryStreamS3DestinationConfigurationArgs> s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }

        public Builder s3BackupConfiguration(@Nullable DeliveryStreamS3DestinationConfigurationArgs s3BackupConfiguration) {
            this.s3BackupConfiguration = Output.ofNullable(s3BackupConfiguration);
            return this;
        }

        public Builder s3BackupMode(@Nullable Output<DeliveryStreamRedshiftDestinationConfigurationS3BackupMode> s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }

        public Builder s3BackupMode(@Nullable DeliveryStreamRedshiftDestinationConfigurationS3BackupMode s3BackupMode) {
            this.s3BackupMode = Output.ofNullable(s3BackupMode);
            return this;
        }

        public Builder s3Configuration(Output<DeliveryStreamS3DestinationConfigurationArgs> s3Configuration) {
            this.s3Configuration = Objects.requireNonNull(s3Configuration);
            return this;
        }

        public Builder s3Configuration(DeliveryStreamS3DestinationConfigurationArgs s3Configuration) {
            this.s3Configuration = Output.of(Objects.requireNonNull(s3Configuration));
            return this;
        }

        public Builder username(Output<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder username(String username) {
            this.username = Output.of(Objects.requireNonNull(username));
            return this;
        }
        public DeliveryStreamRedshiftDestinationConfigurationArgs build() {
            return new DeliveryStreamRedshiftDestinationConfigurationArgs(cloudWatchLoggingOptions, clusterJDBCURL, copyCommand, password, processingConfiguration, retryOptions, roleARN, s3BackupConfiguration, s3BackupMode, s3Configuration, username);
        }
    }
}
