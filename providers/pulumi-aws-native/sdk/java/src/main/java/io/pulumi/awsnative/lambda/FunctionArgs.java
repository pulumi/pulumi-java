// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lambda;

import io.pulumi.awsnative.lambda.enums.FunctionArchitecturesItem;
import io.pulumi.awsnative.lambda.enums.FunctionPackageType;
import io.pulumi.awsnative.lambda.inputs.FunctionCodeArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionDeadLetterConfigArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionEnvironmentArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionFileSystemConfigArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionImageConfigArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionTagArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionTracingConfigArgs;
import io.pulumi.awsnative.lambda.inputs.FunctionVpcConfigArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FunctionArgs extends io.pulumi.resources.ResourceArgs {

    public static final FunctionArgs Empty = new FunctionArgs();

    @Import(name="architectures")
      private final @Nullable Output<List<FunctionArchitecturesItem>> architectures;

    public Output<List<FunctionArchitecturesItem>> architectures() {
        return this.architectures == null ? Codegen.empty() : this.architectures;
    }

    /**
     * The code for the function.
     * 
     */
    @Import(name="code", required=true)
      private final Output<FunctionCodeArgs> code;

    public Output<FunctionCodeArgs> code() {
        return this.code;
    }

    /**
     * A unique Arn for CodeSigningConfig resource
     * 
     */
    @Import(name="codeSigningConfigArn")
      private final @Nullable Output<String> codeSigningConfigArn;

    public Output<String> codeSigningConfigArn() {
        return this.codeSigningConfigArn == null ? Codegen.empty() : this.codeSigningConfigArn;
    }

    /**
     * A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
     * 
     */
    @Import(name="deadLetterConfig")
      private final @Nullable Output<FunctionDeadLetterConfigArgs> deadLetterConfig;

    public Output<FunctionDeadLetterConfigArgs> deadLetterConfig() {
        return this.deadLetterConfig == null ? Codegen.empty() : this.deadLetterConfig;
    }

    /**
     * A description of the function.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Environment variables that are accessible from function code during execution.
     * 
     */
    @Import(name="environment")
      private final @Nullable Output<FunctionEnvironmentArgs> environment;

    public Output<FunctionEnvironmentArgs> environment() {
        return this.environment == null ? Codegen.empty() : this.environment;
    }

    /**
     * Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
     * 
     */
    @Import(name="fileSystemConfigs")
      private final @Nullable Output<List<FunctionFileSystemConfigArgs>> fileSystemConfigs;

    public Output<List<FunctionFileSystemConfigArgs>> fileSystemConfigs() {
        return this.fileSystemConfigs == null ? Codegen.empty() : this.fileSystemConfigs;
    }

    /**
     * The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
     * 
     */
    @Import(name="functionName")
      private final @Nullable Output<String> functionName;

    public Output<String> functionName() {
        return this.functionName == null ? Codegen.empty() : this.functionName;
    }

    /**
     * The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
     * 
     */
    @Import(name="handler")
      private final @Nullable Output<String> handler;

    public Output<String> handler() {
        return this.handler == null ? Codegen.empty() : this.handler;
    }

    /**
     * ImageConfig
     * 
     */
    @Import(name="imageConfig")
      private final @Nullable Output<FunctionImageConfigArgs> imageConfig;

    public Output<FunctionImageConfigArgs> imageConfig() {
        return this.imageConfig == null ? Codegen.empty() : this.imageConfig;
    }

    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
     * 
     */
    @Import(name="kmsKeyArn")
      private final @Nullable Output<String> kmsKeyArn;

    public Output<String> kmsKeyArn() {
        return this.kmsKeyArn == null ? Codegen.empty() : this.kmsKeyArn;
    }

    /**
     * A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
     * 
     */
    @Import(name="layers")
      private final @Nullable Output<List<String>> layers;

    public Output<List<String>> layers() {
        return this.layers == null ? Codegen.empty() : this.layers;
    }

    /**
     * The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
     * 
     */
    @Import(name="memorySize")
      private final @Nullable Output<Integer> memorySize;

    public Output<Integer> memorySize() {
        return this.memorySize == null ? Codegen.empty() : this.memorySize;
    }

    /**
     * PackageType.
     * 
     */
    @Import(name="packageType")
      private final @Nullable Output<FunctionPackageType> packageType;

    public Output<FunctionPackageType> packageType() {
        return this.packageType == null ? Codegen.empty() : this.packageType;
    }

    /**
     * The number of simultaneous executions to reserve for the function.
     * 
     */
    @Import(name="reservedConcurrentExecutions")
      private final @Nullable Output<Integer> reservedConcurrentExecutions;

    public Output<Integer> reservedConcurrentExecutions() {
        return this.reservedConcurrentExecutions == null ? Codegen.empty() : this.reservedConcurrentExecutions;
    }

    /**
     * The Amazon Resource Name (ARN) of the function's execution role.
     * 
     */
    @Import(name="role", required=true)
      private final Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    /**
     * The identifier of the function's runtime.
     * 
     */
    @Import(name="runtime")
      private final @Nullable Output<String> runtime;

    public Output<String> runtime() {
        return this.runtime == null ? Codegen.empty() : this.runtime;
    }

    /**
     * A list of tags to apply to the function.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<FunctionTagArgs>> tags;

    public Output<List<FunctionTagArgs>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<Integer> timeout;

    public Output<Integer> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    /**
     * Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
     * 
     */
    @Import(name="tracingConfig")
      private final @Nullable Output<FunctionTracingConfigArgs> tracingConfig;

    public Output<FunctionTracingConfigArgs> tracingConfig() {
        return this.tracingConfig == null ? Codegen.empty() : this.tracingConfig;
    }

    /**
     * For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
     * 
     */
    @Import(name="vpcConfig")
      private final @Nullable Output<FunctionVpcConfigArgs> vpcConfig;

    public Output<FunctionVpcConfigArgs> vpcConfig() {
        return this.vpcConfig == null ? Codegen.empty() : this.vpcConfig;
    }

    public FunctionArgs(
        @Nullable Output<List<FunctionArchitecturesItem>> architectures,
        Output<FunctionCodeArgs> code,
        @Nullable Output<String> codeSigningConfigArn,
        @Nullable Output<FunctionDeadLetterConfigArgs> deadLetterConfig,
        @Nullable Output<String> description,
        @Nullable Output<FunctionEnvironmentArgs> environment,
        @Nullable Output<List<FunctionFileSystemConfigArgs>> fileSystemConfigs,
        @Nullable Output<String> functionName,
        @Nullable Output<String> handler,
        @Nullable Output<FunctionImageConfigArgs> imageConfig,
        @Nullable Output<String> kmsKeyArn,
        @Nullable Output<List<String>> layers,
        @Nullable Output<Integer> memorySize,
        @Nullable Output<FunctionPackageType> packageType,
        @Nullable Output<Integer> reservedConcurrentExecutions,
        Output<String> role,
        @Nullable Output<String> runtime,
        @Nullable Output<List<FunctionTagArgs>> tags,
        @Nullable Output<Integer> timeout,
        @Nullable Output<FunctionTracingConfigArgs> tracingConfig,
        @Nullable Output<FunctionVpcConfigArgs> vpcConfig) {
        this.architectures = architectures;
        this.code = Objects.requireNonNull(code, "expected parameter 'code' to be non-null");
        this.codeSigningConfigArn = codeSigningConfigArn;
        this.deadLetterConfig = deadLetterConfig;
        this.description = description;
        this.environment = environment;
        this.fileSystemConfigs = fileSystemConfigs;
        this.functionName = functionName;
        this.handler = handler;
        this.imageConfig = imageConfig;
        this.kmsKeyArn = kmsKeyArn;
        this.layers = layers;
        this.memorySize = memorySize;
        this.packageType = packageType;
        this.reservedConcurrentExecutions = reservedConcurrentExecutions;
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.runtime = runtime;
        this.tags = tags;
        this.timeout = timeout;
        this.tracingConfig = tracingConfig;
        this.vpcConfig = vpcConfig;
    }

    private FunctionArgs() {
        this.architectures = Codegen.empty();
        this.code = Codegen.empty();
        this.codeSigningConfigArn = Codegen.empty();
        this.deadLetterConfig = Codegen.empty();
        this.description = Codegen.empty();
        this.environment = Codegen.empty();
        this.fileSystemConfigs = Codegen.empty();
        this.functionName = Codegen.empty();
        this.handler = Codegen.empty();
        this.imageConfig = Codegen.empty();
        this.kmsKeyArn = Codegen.empty();
        this.layers = Codegen.empty();
        this.memorySize = Codegen.empty();
        this.packageType = Codegen.empty();
        this.reservedConcurrentExecutions = Codegen.empty();
        this.role = Codegen.empty();
        this.runtime = Codegen.empty();
        this.tags = Codegen.empty();
        this.timeout = Codegen.empty();
        this.tracingConfig = Codegen.empty();
        this.vpcConfig = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<FunctionArchitecturesItem>> architectures;
        private Output<FunctionCodeArgs> code;
        private @Nullable Output<String> codeSigningConfigArn;
        private @Nullable Output<FunctionDeadLetterConfigArgs> deadLetterConfig;
        private @Nullable Output<String> description;
        private @Nullable Output<FunctionEnvironmentArgs> environment;
        private @Nullable Output<List<FunctionFileSystemConfigArgs>> fileSystemConfigs;
        private @Nullable Output<String> functionName;
        private @Nullable Output<String> handler;
        private @Nullable Output<FunctionImageConfigArgs> imageConfig;
        private @Nullable Output<String> kmsKeyArn;
        private @Nullable Output<List<String>> layers;
        private @Nullable Output<Integer> memorySize;
        private @Nullable Output<FunctionPackageType> packageType;
        private @Nullable Output<Integer> reservedConcurrentExecutions;
        private Output<String> role;
        private @Nullable Output<String> runtime;
        private @Nullable Output<List<FunctionTagArgs>> tags;
        private @Nullable Output<Integer> timeout;
        private @Nullable Output<FunctionTracingConfigArgs> tracingConfig;
        private @Nullable Output<FunctionVpcConfigArgs> vpcConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(FunctionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architectures = defaults.architectures;
    	      this.code = defaults.code;
    	      this.codeSigningConfigArn = defaults.codeSigningConfigArn;
    	      this.deadLetterConfig = defaults.deadLetterConfig;
    	      this.description = defaults.description;
    	      this.environment = defaults.environment;
    	      this.fileSystemConfigs = defaults.fileSystemConfigs;
    	      this.functionName = defaults.functionName;
    	      this.handler = defaults.handler;
    	      this.imageConfig = defaults.imageConfig;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.layers = defaults.layers;
    	      this.memorySize = defaults.memorySize;
    	      this.packageType = defaults.packageType;
    	      this.reservedConcurrentExecutions = defaults.reservedConcurrentExecutions;
    	      this.role = defaults.role;
    	      this.runtime = defaults.runtime;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.tracingConfig = defaults.tracingConfig;
    	      this.vpcConfig = defaults.vpcConfig;
        }

        public Builder architectures(@Nullable Output<List<FunctionArchitecturesItem>> architectures) {
            this.architectures = architectures;
            return this;
        }
        public Builder architectures(@Nullable List<FunctionArchitecturesItem> architectures) {
            this.architectures = Codegen.ofNullable(architectures);
            return this;
        }
        public Builder architectures(FunctionArchitecturesItem... architectures) {
            return architectures(List.of(architectures));
        }
        public Builder code(Output<FunctionCodeArgs> code) {
            this.code = Objects.requireNonNull(code);
            return this;
        }
        public Builder code(FunctionCodeArgs code) {
            this.code = Output.of(Objects.requireNonNull(code));
            return this;
        }
        public Builder codeSigningConfigArn(@Nullable Output<String> codeSigningConfigArn) {
            this.codeSigningConfigArn = codeSigningConfigArn;
            return this;
        }
        public Builder codeSigningConfigArn(@Nullable String codeSigningConfigArn) {
            this.codeSigningConfigArn = Codegen.ofNullable(codeSigningConfigArn);
            return this;
        }
        public Builder deadLetterConfig(@Nullable Output<FunctionDeadLetterConfigArgs> deadLetterConfig) {
            this.deadLetterConfig = deadLetterConfig;
            return this;
        }
        public Builder deadLetterConfig(@Nullable FunctionDeadLetterConfigArgs deadLetterConfig) {
            this.deadLetterConfig = Codegen.ofNullable(deadLetterConfig);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder environment(@Nullable Output<FunctionEnvironmentArgs> environment) {
            this.environment = environment;
            return this;
        }
        public Builder environment(@Nullable FunctionEnvironmentArgs environment) {
            this.environment = Codegen.ofNullable(environment);
            return this;
        }
        public Builder fileSystemConfigs(@Nullable Output<List<FunctionFileSystemConfigArgs>> fileSystemConfigs) {
            this.fileSystemConfigs = fileSystemConfigs;
            return this;
        }
        public Builder fileSystemConfigs(@Nullable List<FunctionFileSystemConfigArgs> fileSystemConfigs) {
            this.fileSystemConfigs = Codegen.ofNullable(fileSystemConfigs);
            return this;
        }
        public Builder fileSystemConfigs(FunctionFileSystemConfigArgs... fileSystemConfigs) {
            return fileSystemConfigs(List.of(fileSystemConfigs));
        }
        public Builder functionName(@Nullable Output<String> functionName) {
            this.functionName = functionName;
            return this;
        }
        public Builder functionName(@Nullable String functionName) {
            this.functionName = Codegen.ofNullable(functionName);
            return this;
        }
        public Builder handler(@Nullable Output<String> handler) {
            this.handler = handler;
            return this;
        }
        public Builder handler(@Nullable String handler) {
            this.handler = Codegen.ofNullable(handler);
            return this;
        }
        public Builder imageConfig(@Nullable Output<FunctionImageConfigArgs> imageConfig) {
            this.imageConfig = imageConfig;
            return this;
        }
        public Builder imageConfig(@Nullable FunctionImageConfigArgs imageConfig) {
            this.imageConfig = Codegen.ofNullable(imageConfig);
            return this;
        }
        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }
        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Codegen.ofNullable(kmsKeyArn);
            return this;
        }
        public Builder layers(@Nullable Output<List<String>> layers) {
            this.layers = layers;
            return this;
        }
        public Builder layers(@Nullable List<String> layers) {
            this.layers = Codegen.ofNullable(layers);
            return this;
        }
        public Builder layers(String... layers) {
            return layers(List.of(layers));
        }
        public Builder memorySize(@Nullable Output<Integer> memorySize) {
            this.memorySize = memorySize;
            return this;
        }
        public Builder memorySize(@Nullable Integer memorySize) {
            this.memorySize = Codegen.ofNullable(memorySize);
            return this;
        }
        public Builder packageType(@Nullable Output<FunctionPackageType> packageType) {
            this.packageType = packageType;
            return this;
        }
        public Builder packageType(@Nullable FunctionPackageType packageType) {
            this.packageType = Codegen.ofNullable(packageType);
            return this;
        }
        public Builder reservedConcurrentExecutions(@Nullable Output<Integer> reservedConcurrentExecutions) {
            this.reservedConcurrentExecutions = reservedConcurrentExecutions;
            return this;
        }
        public Builder reservedConcurrentExecutions(@Nullable Integer reservedConcurrentExecutions) {
            this.reservedConcurrentExecutions = Codegen.ofNullable(reservedConcurrentExecutions);
            return this;
        }
        public Builder role(Output<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder role(String role) {
            this.role = Output.of(Objects.requireNonNull(role));
            return this;
        }
        public Builder runtime(@Nullable Output<String> runtime) {
            this.runtime = runtime;
            return this;
        }
        public Builder runtime(@Nullable String runtime) {
            this.runtime = Codegen.ofNullable(runtime);
            return this;
        }
        public Builder tags(@Nullable Output<List<FunctionTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<FunctionTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(FunctionTagArgs... tags) {
            return tags(List.of(tags));
        }
        public Builder timeout(@Nullable Output<Integer> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }
        public Builder tracingConfig(@Nullable Output<FunctionTracingConfigArgs> tracingConfig) {
            this.tracingConfig = tracingConfig;
            return this;
        }
        public Builder tracingConfig(@Nullable FunctionTracingConfigArgs tracingConfig) {
            this.tracingConfig = Codegen.ofNullable(tracingConfig);
            return this;
        }
        public Builder vpcConfig(@Nullable Output<FunctionVpcConfigArgs> vpcConfig) {
            this.vpcConfig = vpcConfig;
            return this;
        }
        public Builder vpcConfig(@Nullable FunctionVpcConfigArgs vpcConfig) {
            this.vpcConfig = Codegen.ofNullable(vpcConfig);
            return this;
        }        public FunctionArgs build() {
            return new FunctionArgs(architectures, code, codeSigningConfigArn, deadLetterConfig, description, environment, fileSystemConfigs, functionName, handler, imageConfig, kmsKeyArn, layers, memorySize, packageType, reservedConcurrentExecutions, role, runtime, tags, timeout, tracingConfig, vpcConfig);
        }
    }
}
