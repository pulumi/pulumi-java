// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.quicksight;

import io.pulumi.awsnative.quicksight.enums.DataSetImportMode;
import io.pulumi.awsnative.quicksight.inputs.DataSetColumnGroupArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetColumnLevelPermissionRuleArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetFieldFolderMapArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetIngestionWaitPolicyArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetLogicalTableMapArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetPhysicalTableMapArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetResourcePermissionArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetRowLevelPermissionDataSetArgs;
import io.pulumi.awsnative.quicksight.inputs.DataSetTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataSetArgs Empty = new DataSetArgs();

    @Import(name="awsAccountId")
      private final @Nullable Output<String> awsAccountId;

    public Output<String> getAwsAccountId() {
        return this.awsAccountId == null ? Output.empty() : this.awsAccountId;
    }

    /**
     * <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
     * 
     */
    @Import(name="columnGroups")
      private final @Nullable Output<List<DataSetColumnGroupArgs>> columnGroups;

    public Output<List<DataSetColumnGroupArgs>> getColumnGroups() {
        return this.columnGroups == null ? Output.empty() : this.columnGroups;
    }

    @Import(name="columnLevelPermissionRules")
      private final @Nullable Output<List<DataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules;

    public Output<List<DataSetColumnLevelPermissionRuleArgs>> getColumnLevelPermissionRules() {
        return this.columnLevelPermissionRules == null ? Output.empty() : this.columnLevelPermissionRules;
    }

    @Import(name="dataSetId")
      private final @Nullable Output<String> dataSetId;

    public Output<String> getDataSetId() {
        return this.dataSetId == null ? Output.empty() : this.dataSetId;
    }

    @Import(name="fieldFolders")
      private final @Nullable Output<DataSetFieldFolderMapArgs> fieldFolders;

    public Output<DataSetFieldFolderMapArgs> getFieldFolders() {
        return this.fieldFolders == null ? Output.empty() : this.fieldFolders;
    }

    @Import(name="importMode")
      private final @Nullable Output<DataSetImportMode> importMode;

    public Output<DataSetImportMode> getImportMode() {
        return this.importMode == null ? Output.empty() : this.importMode;
    }

    @Import(name="ingestionWaitPolicy")
      private final @Nullable Output<DataSetIngestionWaitPolicyArgs> ingestionWaitPolicy;

    public Output<DataSetIngestionWaitPolicyArgs> getIngestionWaitPolicy() {
        return this.ingestionWaitPolicy == null ? Output.empty() : this.ingestionWaitPolicy;
    }

    @Import(name="logicalTableMap")
      private final @Nullable Output<DataSetLogicalTableMapArgs> logicalTableMap;

    public Output<DataSetLogicalTableMapArgs> getLogicalTableMap() {
        return this.logicalTableMap == null ? Output.empty() : this.logicalTableMap;
    }

    /**
     * <p>The display name for the dataset.</p>
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * <p>A list of resource permissions on the dataset.</p>
     * 
     */
    @Import(name="permissions")
      private final @Nullable Output<List<DataSetResourcePermissionArgs>> permissions;

    public Output<List<DataSetResourcePermissionArgs>> getPermissions() {
        return this.permissions == null ? Output.empty() : this.permissions;
    }

    @Import(name="physicalTableMap")
      private final @Nullable Output<DataSetPhysicalTableMapArgs> physicalTableMap;

    public Output<DataSetPhysicalTableMapArgs> getPhysicalTableMap() {
        return this.physicalTableMap == null ? Output.empty() : this.physicalTableMap;
    }

    @Import(name="rowLevelPermissionDataSet")
      private final @Nullable Output<DataSetRowLevelPermissionDataSetArgs> rowLevelPermissionDataSet;

    public Output<DataSetRowLevelPermissionDataSetArgs> getRowLevelPermissionDataSet() {
        return this.rowLevelPermissionDataSet == null ? Output.empty() : this.rowLevelPermissionDataSet;
    }

    /**
     * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<DataSetTagArgs>> tags;

    public Output<List<DataSetTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public DataSetArgs(
        @Nullable Output<String> awsAccountId,
        @Nullable Output<List<DataSetColumnGroupArgs>> columnGroups,
        @Nullable Output<List<DataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules,
        @Nullable Output<String> dataSetId,
        @Nullable Output<DataSetFieldFolderMapArgs> fieldFolders,
        @Nullable Output<DataSetImportMode> importMode,
        @Nullable Output<DataSetIngestionWaitPolicyArgs> ingestionWaitPolicy,
        @Nullable Output<DataSetLogicalTableMapArgs> logicalTableMap,
        @Nullable Output<String> name,
        @Nullable Output<List<DataSetResourcePermissionArgs>> permissions,
        @Nullable Output<DataSetPhysicalTableMapArgs> physicalTableMap,
        @Nullable Output<DataSetRowLevelPermissionDataSetArgs> rowLevelPermissionDataSet,
        @Nullable Output<List<DataSetTagArgs>> tags) {
        this.awsAccountId = awsAccountId;
        this.columnGroups = columnGroups;
        this.columnLevelPermissionRules = columnLevelPermissionRules;
        this.dataSetId = dataSetId;
        this.fieldFolders = fieldFolders;
        this.importMode = importMode;
        this.ingestionWaitPolicy = ingestionWaitPolicy;
        this.logicalTableMap = logicalTableMap;
        this.name = name;
        this.permissions = permissions;
        this.physicalTableMap = physicalTableMap;
        this.rowLevelPermissionDataSet = rowLevelPermissionDataSet;
        this.tags = tags;
    }

    private DataSetArgs() {
        this.awsAccountId = Output.empty();
        this.columnGroups = Output.empty();
        this.columnLevelPermissionRules = Output.empty();
        this.dataSetId = Output.empty();
        this.fieldFolders = Output.empty();
        this.importMode = Output.empty();
        this.ingestionWaitPolicy = Output.empty();
        this.logicalTableMap = Output.empty();
        this.name = Output.empty();
        this.permissions = Output.empty();
        this.physicalTableMap = Output.empty();
        this.rowLevelPermissionDataSet = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> awsAccountId;
        private @Nullable Output<List<DataSetColumnGroupArgs>> columnGroups;
        private @Nullable Output<List<DataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules;
        private @Nullable Output<String> dataSetId;
        private @Nullable Output<DataSetFieldFolderMapArgs> fieldFolders;
        private @Nullable Output<DataSetImportMode> importMode;
        private @Nullable Output<DataSetIngestionWaitPolicyArgs> ingestionWaitPolicy;
        private @Nullable Output<DataSetLogicalTableMapArgs> logicalTableMap;
        private @Nullable Output<String> name;
        private @Nullable Output<List<DataSetResourcePermissionArgs>> permissions;
        private @Nullable Output<DataSetPhysicalTableMapArgs> physicalTableMap;
        private @Nullable Output<DataSetRowLevelPermissionDataSetArgs> rowLevelPermissionDataSet;
        private @Nullable Output<List<DataSetTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsAccountId = defaults.awsAccountId;
    	      this.columnGroups = defaults.columnGroups;
    	      this.columnLevelPermissionRules = defaults.columnLevelPermissionRules;
    	      this.dataSetId = defaults.dataSetId;
    	      this.fieldFolders = defaults.fieldFolders;
    	      this.importMode = defaults.importMode;
    	      this.ingestionWaitPolicy = defaults.ingestionWaitPolicy;
    	      this.logicalTableMap = defaults.logicalTableMap;
    	      this.name = defaults.name;
    	      this.permissions = defaults.permissions;
    	      this.physicalTableMap = defaults.physicalTableMap;
    	      this.rowLevelPermissionDataSet = defaults.rowLevelPermissionDataSet;
    	      this.tags = defaults.tags;
        }

        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            this.awsAccountId = awsAccountId;
            return this;
        }
        public Builder awsAccountId(@Nullable String awsAccountId) {
            this.awsAccountId = Output.ofNullable(awsAccountId);
            return this;
        }
        public Builder columnGroups(@Nullable Output<List<DataSetColumnGroupArgs>> columnGroups) {
            this.columnGroups = columnGroups;
            return this;
        }
        public Builder columnGroups(@Nullable List<DataSetColumnGroupArgs> columnGroups) {
            this.columnGroups = Output.ofNullable(columnGroups);
            return this;
        }
        public Builder columnGroups(DataSetColumnGroupArgs... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }
        public Builder columnLevelPermissionRules(@Nullable Output<List<DataSetColumnLevelPermissionRuleArgs>> columnLevelPermissionRules) {
            this.columnLevelPermissionRules = columnLevelPermissionRules;
            return this;
        }
        public Builder columnLevelPermissionRules(@Nullable List<DataSetColumnLevelPermissionRuleArgs> columnLevelPermissionRules) {
            this.columnLevelPermissionRules = Output.ofNullable(columnLevelPermissionRules);
            return this;
        }
        public Builder columnLevelPermissionRules(DataSetColumnLevelPermissionRuleArgs... columnLevelPermissionRules) {
            return columnLevelPermissionRules(List.of(columnLevelPermissionRules));
        }
        public Builder dataSetId(@Nullable Output<String> dataSetId) {
            this.dataSetId = dataSetId;
            return this;
        }
        public Builder dataSetId(@Nullable String dataSetId) {
            this.dataSetId = Output.ofNullable(dataSetId);
            return this;
        }
        public Builder fieldFolders(@Nullable Output<DataSetFieldFolderMapArgs> fieldFolders) {
            this.fieldFolders = fieldFolders;
            return this;
        }
        public Builder fieldFolders(@Nullable DataSetFieldFolderMapArgs fieldFolders) {
            this.fieldFolders = Output.ofNullable(fieldFolders);
            return this;
        }
        public Builder importMode(@Nullable Output<DataSetImportMode> importMode) {
            this.importMode = importMode;
            return this;
        }
        public Builder importMode(@Nullable DataSetImportMode importMode) {
            this.importMode = Output.ofNullable(importMode);
            return this;
        }
        public Builder ingestionWaitPolicy(@Nullable Output<DataSetIngestionWaitPolicyArgs> ingestionWaitPolicy) {
            this.ingestionWaitPolicy = ingestionWaitPolicy;
            return this;
        }
        public Builder ingestionWaitPolicy(@Nullable DataSetIngestionWaitPolicyArgs ingestionWaitPolicy) {
            this.ingestionWaitPolicy = Output.ofNullable(ingestionWaitPolicy);
            return this;
        }
        public Builder logicalTableMap(@Nullable Output<DataSetLogicalTableMapArgs> logicalTableMap) {
            this.logicalTableMap = logicalTableMap;
            return this;
        }
        public Builder logicalTableMap(@Nullable DataSetLogicalTableMapArgs logicalTableMap) {
            this.logicalTableMap = Output.ofNullable(logicalTableMap);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder permissions(@Nullable Output<List<DataSetResourcePermissionArgs>> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(@Nullable List<DataSetResourcePermissionArgs> permissions) {
            this.permissions = Output.ofNullable(permissions);
            return this;
        }
        public Builder permissions(DataSetResourcePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }
        public Builder physicalTableMap(@Nullable Output<DataSetPhysicalTableMapArgs> physicalTableMap) {
            this.physicalTableMap = physicalTableMap;
            return this;
        }
        public Builder physicalTableMap(@Nullable DataSetPhysicalTableMapArgs physicalTableMap) {
            this.physicalTableMap = Output.ofNullable(physicalTableMap);
            return this;
        }
        public Builder rowLevelPermissionDataSet(@Nullable Output<DataSetRowLevelPermissionDataSetArgs> rowLevelPermissionDataSet) {
            this.rowLevelPermissionDataSet = rowLevelPermissionDataSet;
            return this;
        }
        public Builder rowLevelPermissionDataSet(@Nullable DataSetRowLevelPermissionDataSetArgs rowLevelPermissionDataSet) {
            this.rowLevelPermissionDataSet = Output.ofNullable(rowLevelPermissionDataSet);
            return this;
        }
        public Builder tags(@Nullable Output<List<DataSetTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<DataSetTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(DataSetTagArgs... tags) {
            return tags(List.of(tags));
        }        public DataSetArgs build() {
            return new DataSetArgs(awsAccountId, columnGroups, columnLevelPermissionRules, dataSetId, fieldFolders, importMode, ingestionWaitPolicy, logicalTableMap, name, permissions, physicalTableMap, rowLevelPermissionDataSet, tags);
        }
    }
}
