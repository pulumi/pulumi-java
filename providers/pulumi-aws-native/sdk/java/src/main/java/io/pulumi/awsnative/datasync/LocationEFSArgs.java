// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.datasync;

import io.pulumi.awsnative.datasync.inputs.LocationEFSEc2ConfigArgs;
import io.pulumi.awsnative.datasync.inputs.LocationEFSTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocationEFSArgs extends io.pulumi.resources.ResourceArgs {

    public static final LocationEFSArgs Empty = new LocationEFSArgs();

    @Import(name="ec2Config", required=true)
      private final Output<LocationEFSEc2ConfigArgs> ec2Config;

    public Output<LocationEFSEc2ConfigArgs> getEc2Config() {
        return this.ec2Config;
    }

    /**
     * The Amazon Resource Name (ARN) for the Amazon EFS file system.
     * 
     */
    @Import(name="efsFilesystemArn", required=true)
      private final Output<String> efsFilesystemArn;

    public Output<String> getEfsFilesystemArn() {
        return this.efsFilesystemArn;
    }

    /**
     * A subdirectory in the location's path. This subdirectory in the EFS file system is used to read data from the EFS source location or write data to the EFS destination.
     * 
     */
    @Import(name="subdirectory")
      private final @Nullable Output<String> subdirectory;

    public Output<String> getSubdirectory() {
        return this.subdirectory == null ? Codegen.empty() : this.subdirectory;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<LocationEFSTagArgs>> tags;

    public Output<List<LocationEFSTagArgs>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public LocationEFSArgs(
        Output<LocationEFSEc2ConfigArgs> ec2Config,
        Output<String> efsFilesystemArn,
        @Nullable Output<String> subdirectory,
        @Nullable Output<List<LocationEFSTagArgs>> tags) {
        this.ec2Config = Objects.requireNonNull(ec2Config, "expected parameter 'ec2Config' to be non-null");
        this.efsFilesystemArn = Objects.requireNonNull(efsFilesystemArn, "expected parameter 'efsFilesystemArn' to be non-null");
        this.subdirectory = subdirectory;
        this.tags = tags;
    }

    private LocationEFSArgs() {
        this.ec2Config = Codegen.empty();
        this.efsFilesystemArn = Codegen.empty();
        this.subdirectory = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationEFSArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<LocationEFSEc2ConfigArgs> ec2Config;
        private Output<String> efsFilesystemArn;
        private @Nullable Output<String> subdirectory;
        private @Nullable Output<List<LocationEFSTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationEFSArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ec2Config = defaults.ec2Config;
    	      this.efsFilesystemArn = defaults.efsFilesystemArn;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
        }

        public Builder ec2Config(Output<LocationEFSEc2ConfigArgs> ec2Config) {
            this.ec2Config = Objects.requireNonNull(ec2Config);
            return this;
        }
        public Builder ec2Config(LocationEFSEc2ConfigArgs ec2Config) {
            this.ec2Config = Output.of(Objects.requireNonNull(ec2Config));
            return this;
        }
        public Builder efsFilesystemArn(Output<String> efsFilesystemArn) {
            this.efsFilesystemArn = Objects.requireNonNull(efsFilesystemArn);
            return this;
        }
        public Builder efsFilesystemArn(String efsFilesystemArn) {
            this.efsFilesystemArn = Output.of(Objects.requireNonNull(efsFilesystemArn));
            return this;
        }
        public Builder subdirectory(@Nullable Output<String> subdirectory) {
            this.subdirectory = subdirectory;
            return this;
        }
        public Builder subdirectory(@Nullable String subdirectory) {
            this.subdirectory = Codegen.ofNullable(subdirectory);
            return this;
        }
        public Builder tags(@Nullable Output<List<LocationEFSTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<LocationEFSTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(LocationEFSTagArgs... tags) {
            return tags(List.of(tags));
        }        public LocationEFSArgs build() {
            return new LocationEFSArgs(ec2Config, efsFilesystemArn, subdirectory, tags);
        }
    }
}
