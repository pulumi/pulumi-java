// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ssm;

import io.pulumi.awsnative.ssm.enums.AssociationComplianceSeverity;
import io.pulumi.awsnative.ssm.enums.AssociationSyncCompliance;
import io.pulumi.awsnative.ssm.inputs.AssociationInstanceAssociationOutputLocationArgs;
import io.pulumi.awsnative.ssm.inputs.AssociationTargetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AssociationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AssociationArgs Empty = new AssociationArgs();

    @InputImport(name="applyOnlyAtCronInterval")
    private final @Nullable Input<Boolean> applyOnlyAtCronInterval;

    public Input<Boolean> getApplyOnlyAtCronInterval() {
        return this.applyOnlyAtCronInterval == null ? Input.empty() : this.applyOnlyAtCronInterval;
    }

    /**
     * The name of the association.
     * 
     */
    @InputImport(name="associationName")
    private final @Nullable Input<String> associationName;

    public Input<String> getAssociationName() {
        return this.associationName == null ? Input.empty() : this.associationName;
    }

    @InputImport(name="automationTargetParameterName")
    private final @Nullable Input<String> automationTargetParameterName;

    public Input<String> getAutomationTargetParameterName() {
        return this.automationTargetParameterName == null ? Input.empty() : this.automationTargetParameterName;
    }

    @InputImport(name="calendarNames")
    private final @Nullable Input<List<String>> calendarNames;

    public Input<List<String>> getCalendarNames() {
        return this.calendarNames == null ? Input.empty() : this.calendarNames;
    }

    @InputImport(name="complianceSeverity")
    private final @Nullable Input<AssociationComplianceSeverity> complianceSeverity;

    public Input<AssociationComplianceSeverity> getComplianceSeverity() {
        return this.complianceSeverity == null ? Input.empty() : this.complianceSeverity;
    }

    /**
     * The version of the SSM document to associate with the target.
     * 
     */
    @InputImport(name="documentVersion")
    private final @Nullable Input<String> documentVersion;

    public Input<String> getDocumentVersion() {
        return this.documentVersion == null ? Input.empty() : this.documentVersion;
    }

    /**
     * The ID of the instance that the SSM document is associated with.
     * 
     */
    @InputImport(name="instanceId")
    private final @Nullable Input<String> instanceId;

    public Input<String> getInstanceId() {
        return this.instanceId == null ? Input.empty() : this.instanceId;
    }

    @InputImport(name="maxConcurrency")
    private final @Nullable Input<String> maxConcurrency;

    public Input<String> getMaxConcurrency() {
        return this.maxConcurrency == null ? Input.empty() : this.maxConcurrency;
    }

    @InputImport(name="maxErrors")
    private final @Nullable Input<String> maxErrors;

    public Input<String> getMaxErrors() {
        return this.maxErrors == null ? Input.empty() : this.maxErrors;
    }

    /**
     * The name of the SSM document.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="outputLocation")
    private final @Nullable Input<AssociationInstanceAssociationOutputLocationArgs> outputLocation;

    public Input<AssociationInstanceAssociationOutputLocationArgs> getOutputLocation() {
        return this.outputLocation == null ? Input.empty() : this.outputLocation;
    }

    /**
     * Parameter values that the SSM document uses at runtime.
     * 
     */
    @InputImport(name="parameters")
    private final @Nullable Input<Object> parameters;

    public Input<Object> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * A Cron or Rate expression that specifies when the association is applied to the target.
     * 
     */
    @InputImport(name="scheduleExpression")
    private final @Nullable Input<String> scheduleExpression;

    public Input<String> getScheduleExpression() {
        return this.scheduleExpression == null ? Input.empty() : this.scheduleExpression;
    }

    @InputImport(name="syncCompliance")
    private final @Nullable Input<AssociationSyncCompliance> syncCompliance;

    public Input<AssociationSyncCompliance> getSyncCompliance() {
        return this.syncCompliance == null ? Input.empty() : this.syncCompliance;
    }

    /**
     * The targets that the SSM document sends commands to.
     * 
     */
    @InputImport(name="targets")
    private final @Nullable Input<List<AssociationTargetArgs>> targets;

    public Input<List<AssociationTargetArgs>> getTargets() {
        return this.targets == null ? Input.empty() : this.targets;
    }

    @InputImport(name="waitForSuccessTimeoutSeconds")
    private final @Nullable Input<Integer> waitForSuccessTimeoutSeconds;

    public Input<Integer> getWaitForSuccessTimeoutSeconds() {
        return this.waitForSuccessTimeoutSeconds == null ? Input.empty() : this.waitForSuccessTimeoutSeconds;
    }

    public AssociationArgs(
        @Nullable Input<Boolean> applyOnlyAtCronInterval,
        @Nullable Input<String> associationName,
        @Nullable Input<String> automationTargetParameterName,
        @Nullable Input<List<String>> calendarNames,
        @Nullable Input<AssociationComplianceSeverity> complianceSeverity,
        @Nullable Input<String> documentVersion,
        @Nullable Input<String> instanceId,
        @Nullable Input<String> maxConcurrency,
        @Nullable Input<String> maxErrors,
        @Nullable Input<String> name,
        @Nullable Input<AssociationInstanceAssociationOutputLocationArgs> outputLocation,
        @Nullable Input<Object> parameters,
        @Nullable Input<String> scheduleExpression,
        @Nullable Input<AssociationSyncCompliance> syncCompliance,
        @Nullable Input<List<AssociationTargetArgs>> targets,
        @Nullable Input<Integer> waitForSuccessTimeoutSeconds) {
        this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
        this.associationName = associationName;
        this.automationTargetParameterName = automationTargetParameterName;
        this.calendarNames = calendarNames;
        this.complianceSeverity = complianceSeverity;
        this.documentVersion = documentVersion;
        this.instanceId = instanceId;
        this.maxConcurrency = maxConcurrency;
        this.maxErrors = maxErrors;
        this.name = name;
        this.outputLocation = outputLocation;
        this.parameters = parameters;
        this.scheduleExpression = scheduleExpression;
        this.syncCompliance = syncCompliance;
        this.targets = targets;
        this.waitForSuccessTimeoutSeconds = waitForSuccessTimeoutSeconds;
    }

    private AssociationArgs() {
        this.applyOnlyAtCronInterval = Input.empty();
        this.associationName = Input.empty();
        this.automationTargetParameterName = Input.empty();
        this.calendarNames = Input.empty();
        this.complianceSeverity = Input.empty();
        this.documentVersion = Input.empty();
        this.instanceId = Input.empty();
        this.maxConcurrency = Input.empty();
        this.maxErrors = Input.empty();
        this.name = Input.empty();
        this.outputLocation = Input.empty();
        this.parameters = Input.empty();
        this.scheduleExpression = Input.empty();
        this.syncCompliance = Input.empty();
        this.targets = Input.empty();
        this.waitForSuccessTimeoutSeconds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> applyOnlyAtCronInterval;
        private @Nullable Input<String> associationName;
        private @Nullable Input<String> automationTargetParameterName;
        private @Nullable Input<List<String>> calendarNames;
        private @Nullable Input<AssociationComplianceSeverity> complianceSeverity;
        private @Nullable Input<String> documentVersion;
        private @Nullable Input<String> instanceId;
        private @Nullable Input<String> maxConcurrency;
        private @Nullable Input<String> maxErrors;
        private @Nullable Input<String> name;
        private @Nullable Input<AssociationInstanceAssociationOutputLocationArgs> outputLocation;
        private @Nullable Input<Object> parameters;
        private @Nullable Input<String> scheduleExpression;
        private @Nullable Input<AssociationSyncCompliance> syncCompliance;
        private @Nullable Input<List<AssociationTargetArgs>> targets;
        private @Nullable Input<Integer> waitForSuccessTimeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(AssociationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyOnlyAtCronInterval = defaults.applyOnlyAtCronInterval;
    	      this.associationName = defaults.associationName;
    	      this.automationTargetParameterName = defaults.automationTargetParameterName;
    	      this.calendarNames = defaults.calendarNames;
    	      this.complianceSeverity = defaults.complianceSeverity;
    	      this.documentVersion = defaults.documentVersion;
    	      this.instanceId = defaults.instanceId;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.maxErrors = defaults.maxErrors;
    	      this.name = defaults.name;
    	      this.outputLocation = defaults.outputLocation;
    	      this.parameters = defaults.parameters;
    	      this.scheduleExpression = defaults.scheduleExpression;
    	      this.syncCompliance = defaults.syncCompliance;
    	      this.targets = defaults.targets;
    	      this.waitForSuccessTimeoutSeconds = defaults.waitForSuccessTimeoutSeconds;
        }

        public Builder setApplyOnlyAtCronInterval(@Nullable Input<Boolean> applyOnlyAtCronInterval) {
            this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
            return this;
        }

        public Builder setApplyOnlyAtCronInterval(@Nullable Boolean applyOnlyAtCronInterval) {
            this.applyOnlyAtCronInterval = Input.ofNullable(applyOnlyAtCronInterval);
            return this;
        }

        public Builder setAssociationName(@Nullable Input<String> associationName) {
            this.associationName = associationName;
            return this;
        }

        public Builder setAssociationName(@Nullable String associationName) {
            this.associationName = Input.ofNullable(associationName);
            return this;
        }

        public Builder setAutomationTargetParameterName(@Nullable Input<String> automationTargetParameterName) {
            this.automationTargetParameterName = automationTargetParameterName;
            return this;
        }

        public Builder setAutomationTargetParameterName(@Nullable String automationTargetParameterName) {
            this.automationTargetParameterName = Input.ofNullable(automationTargetParameterName);
            return this;
        }

        public Builder setCalendarNames(@Nullable Input<List<String>> calendarNames) {
            this.calendarNames = calendarNames;
            return this;
        }

        public Builder setCalendarNames(@Nullable List<String> calendarNames) {
            this.calendarNames = Input.ofNullable(calendarNames);
            return this;
        }

        public Builder setComplianceSeverity(@Nullable Input<AssociationComplianceSeverity> complianceSeverity) {
            this.complianceSeverity = complianceSeverity;
            return this;
        }

        public Builder setComplianceSeverity(@Nullable AssociationComplianceSeverity complianceSeverity) {
            this.complianceSeverity = Input.ofNullable(complianceSeverity);
            return this;
        }

        public Builder setDocumentVersion(@Nullable Input<String> documentVersion) {
            this.documentVersion = documentVersion;
            return this;
        }

        public Builder setDocumentVersion(@Nullable String documentVersion) {
            this.documentVersion = Input.ofNullable(documentVersion);
            return this;
        }

        public Builder setInstanceId(@Nullable Input<String> instanceId) {
            this.instanceId = instanceId;
            return this;
        }

        public Builder setInstanceId(@Nullable String instanceId) {
            this.instanceId = Input.ofNullable(instanceId);
            return this;
        }

        public Builder setMaxConcurrency(@Nullable Input<String> maxConcurrency) {
            this.maxConcurrency = maxConcurrency;
            return this;
        }

        public Builder setMaxConcurrency(@Nullable String maxConcurrency) {
            this.maxConcurrency = Input.ofNullable(maxConcurrency);
            return this;
        }

        public Builder setMaxErrors(@Nullable Input<String> maxErrors) {
            this.maxErrors = maxErrors;
            return this;
        }

        public Builder setMaxErrors(@Nullable String maxErrors) {
            this.maxErrors = Input.ofNullable(maxErrors);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOutputLocation(@Nullable Input<AssociationInstanceAssociationOutputLocationArgs> outputLocation) {
            this.outputLocation = outputLocation;
            return this;
        }

        public Builder setOutputLocation(@Nullable AssociationInstanceAssociationOutputLocationArgs outputLocation) {
            this.outputLocation = Input.ofNullable(outputLocation);
            return this;
        }

        public Builder setParameters(@Nullable Input<Object> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable Object parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setScheduleExpression(@Nullable Input<String> scheduleExpression) {
            this.scheduleExpression = scheduleExpression;
            return this;
        }

        public Builder setScheduleExpression(@Nullable String scheduleExpression) {
            this.scheduleExpression = Input.ofNullable(scheduleExpression);
            return this;
        }

        public Builder setSyncCompliance(@Nullable Input<AssociationSyncCompliance> syncCompliance) {
            this.syncCompliance = syncCompliance;
            return this;
        }

        public Builder setSyncCompliance(@Nullable AssociationSyncCompliance syncCompliance) {
            this.syncCompliance = Input.ofNullable(syncCompliance);
            return this;
        }

        public Builder setTargets(@Nullable Input<List<AssociationTargetArgs>> targets) {
            this.targets = targets;
            return this;
        }

        public Builder setTargets(@Nullable List<AssociationTargetArgs> targets) {
            this.targets = Input.ofNullable(targets);
            return this;
        }

        public Builder setWaitForSuccessTimeoutSeconds(@Nullable Input<Integer> waitForSuccessTimeoutSeconds) {
            this.waitForSuccessTimeoutSeconds = waitForSuccessTimeoutSeconds;
            return this;
        }

        public Builder setWaitForSuccessTimeoutSeconds(@Nullable Integer waitForSuccessTimeoutSeconds) {
            this.waitForSuccessTimeoutSeconds = Input.ofNullable(waitForSuccessTimeoutSeconds);
            return this;
        }

        public AssociationArgs build() {
            return new AssociationArgs(applyOnlyAtCronInterval, associationName, automationTargetParameterName, calendarNames, complianceSeverity, documentVersion, instanceId, maxConcurrency, maxErrors, name, outputLocation, parameters, scheduleExpression, syncCompliance, targets, waitForSuccessTimeoutSeconds);
        }
    }
}
