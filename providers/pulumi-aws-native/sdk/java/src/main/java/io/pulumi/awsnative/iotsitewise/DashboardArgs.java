// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iotsitewise;

import io.pulumi.awsnative.iotsitewise.inputs.DashboardTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DashboardArgs extends io.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    /**
     * The dashboard definition specified in a JSON literal.
     * 
     */
    @InputImport(name="dashboardDefinition", required=true)
      private final Input<String> dashboardDefinition;

    public Input<String> getDashboardDefinition() {
        return this.dashboardDefinition;
    }

    /**
     * A description for the dashboard.
     * 
     */
    @InputImport(name="dashboardDescription", required=true)
      private final Input<String> dashboardDescription;

    public Input<String> getDashboardDescription() {
        return this.dashboardDescription;
    }

    /**
     * A friendly name for the dashboard.
     * 
     */
    @InputImport(name="dashboardName")
      private final @Nullable Input<String> dashboardName;

    public Input<String> getDashboardName() {
        return this.dashboardName == null ? Input.empty() : this.dashboardName;
    }

    /**
     * The ID of the project in which to create the dashboard.
     * 
     */
    @InputImport(name="projectId")
      private final @Nullable Input<String> projectId;

    public Input<String> getProjectId() {
        return this.projectId == null ? Input.empty() : this.projectId;
    }

    /**
     * A list of key-value pairs that contain metadata for the dashboard.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<List<DashboardTagArgs>> tags;

    public Input<List<DashboardTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DashboardArgs(
        Input<String> dashboardDefinition,
        Input<String> dashboardDescription,
        @Nullable Input<String> dashboardName,
        @Nullable Input<String> projectId,
        @Nullable Input<List<DashboardTagArgs>> tags) {
        this.dashboardDefinition = Objects.requireNonNull(dashboardDefinition, "expected parameter 'dashboardDefinition' to be non-null");
        this.dashboardDescription = Objects.requireNonNull(dashboardDescription, "expected parameter 'dashboardDescription' to be non-null");
        this.dashboardName = dashboardName;
        this.projectId = projectId;
        this.tags = tags;
    }

    private DashboardArgs() {
        this.dashboardDefinition = Input.empty();
        this.dashboardDescription = Input.empty();
        this.dashboardName = Input.empty();
        this.projectId = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> dashboardDefinition;
        private Input<String> dashboardDescription;
        private @Nullable Input<String> dashboardName;
        private @Nullable Input<String> projectId;
        private @Nullable Input<List<DashboardTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dashboardDefinition = defaults.dashboardDefinition;
    	      this.dashboardDescription = defaults.dashboardDescription;
    	      this.dashboardName = defaults.dashboardName;
    	      this.projectId = defaults.projectId;
    	      this.tags = defaults.tags;
        }

        public Builder setDashboardDefinition(Input<String> dashboardDefinition) {
            this.dashboardDefinition = Objects.requireNonNull(dashboardDefinition);
            return this;
        }

        public Builder setDashboardDefinition(String dashboardDefinition) {
            this.dashboardDefinition = Input.of(Objects.requireNonNull(dashboardDefinition));
            return this;
        }

        public Builder setDashboardDescription(Input<String> dashboardDescription) {
            this.dashboardDescription = Objects.requireNonNull(dashboardDescription);
            return this;
        }

        public Builder setDashboardDescription(String dashboardDescription) {
            this.dashboardDescription = Input.of(Objects.requireNonNull(dashboardDescription));
            return this;
        }

        public Builder setDashboardName(@Nullable Input<String> dashboardName) {
            this.dashboardName = dashboardName;
            return this;
        }

        public Builder setDashboardName(@Nullable String dashboardName) {
            this.dashboardName = Input.ofNullable(dashboardName);
            return this;
        }

        public Builder setProjectId(@Nullable Input<String> projectId) {
            this.projectId = projectId;
            return this;
        }

        public Builder setProjectId(@Nullable String projectId) {
            this.projectId = Input.ofNullable(projectId);
            return this;
        }

        public Builder setTags(@Nullable Input<List<DashboardTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<DashboardTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public DashboardArgs build() {
            return new DashboardArgs(dashboardDefinition, dashboardDescription, dashboardName, projectId, tags);
        }
    }
}
