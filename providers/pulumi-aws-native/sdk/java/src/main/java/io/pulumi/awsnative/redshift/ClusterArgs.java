// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.redshift;

import io.pulumi.awsnative.redshift.inputs.ClusterEndpointArgs;
import io.pulumi.awsnative.redshift.inputs.ClusterLoggingPropertiesArgs;
import io.pulumi.awsnative.redshift.inputs.ClusterTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default value is True
     * 
     */
    @Import(name="allowVersionUpgrade")
      private final @Nullable Output<Boolean> allowVersionUpgrade;

    public Output<Boolean> getAllowVersionUpgrade() {
        return this.allowVersionUpgrade == null ? Output.empty() : this.allowVersionUpgrade;
    }

    /**
     * The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.
     * 
     * enabled - Use AQUA if it is available for the current Region and Amazon Redshift node type.
     * disabled - Don't use AQUA.
     * auto - Amazon Redshift determines whether to use AQUA.
     * 
     */
    @Import(name="aquaConfigurationStatus")
      private final @Nullable Output<String> aquaConfigurationStatus;

    public Output<String> getAquaConfigurationStatus() {
        return this.aquaConfigurationStatus == null ? Output.empty() : this.aquaConfigurationStatus;
    }

    /**
     * The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Default value is 1
     * 
     */
    @Import(name="automatedSnapshotRetentionPeriod")
      private final @Nullable Output<Integer> automatedSnapshotRetentionPeriod;

    public Output<Integer> getAutomatedSnapshotRetentionPeriod() {
        return this.automatedSnapshotRetentionPeriod == null ? Output.empty() : this.automatedSnapshotRetentionPeriod;
    }

    /**
     * The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Output.empty() : this.availabilityZone;
    }

    /**
     * The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
     * 
     */
    @Import(name="availabilityZoneRelocation")
      private final @Nullable Output<Boolean> availabilityZoneRelocation;

    public Output<Boolean> getAvailabilityZoneRelocation() {
        return this.availabilityZoneRelocation == null ? Output.empty() : this.availabilityZoneRelocation;
    }

    /**
     * The availability zone relocation status of the cluster
     * 
     */
    @Import(name="availabilityZoneRelocationStatus")
      private final @Nullable Output<String> availabilityZoneRelocationStatus;

    public Output<String> getAvailabilityZoneRelocationStatus() {
        return this.availabilityZoneRelocationStatus == null ? Output.empty() : this.availabilityZoneRelocationStatus;
    }

    /**
     * A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false , the resize type is elastic.
     * 
     */
    @Import(name="classic")
      private final @Nullable Output<Boolean> classic;

    public Output<Boolean> getClassic() {
        return this.classic == null ? Output.empty() : this.classic;
    }

    /**
     * A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
     * 
     */
    @Import(name="clusterIdentifier")
      private final @Nullable Output<String> clusterIdentifier;

    public Output<String> getClusterIdentifier() {
        return this.clusterIdentifier == null ? Output.empty() : this.clusterIdentifier;
    }

    /**
     * The name of the parameter group to be associated with this cluster.
     * 
     */
    @Import(name="clusterParameterGroupName")
      private final @Nullable Output<String> clusterParameterGroupName;

    public Output<String> getClusterParameterGroupName() {
        return this.clusterParameterGroupName == null ? Output.empty() : this.clusterParameterGroupName;
    }

    /**
     * A list of security groups to be associated with this cluster.
     * 
     */
    @Import(name="clusterSecurityGroups")
      private final @Nullable Output<List<String>> clusterSecurityGroups;

    public Output<List<String>> getClusterSecurityGroups() {
        return this.clusterSecurityGroups == null ? Output.empty() : this.clusterSecurityGroups;
    }

    /**
     * The name of a cluster subnet group to be associated with this cluster.
     * 
     */
    @Import(name="clusterSubnetGroupName")
      private final @Nullable Output<String> clusterSubnetGroupName;

    public Output<String> getClusterSubnetGroupName() {
        return this.clusterSubnetGroupName == null ? Output.empty() : this.clusterSubnetGroupName;
    }

    /**
     * The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required
     * 
     */
    @Import(name="clusterType", required=true)
      private final Output<String> clusterType;

    public Output<String> getClusterType() {
        return this.clusterType;
    }

    /**
     * The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected runs on all the nodes in the cluster.
     * 
     */
    @Import(name="clusterVersion")
      private final @Nullable Output<String> clusterVersion;

    public Output<String> getClusterVersion() {
        return this.clusterVersion == null ? Output.empty() : this.clusterVersion;
    }

    /**
     * The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.
     * 
     */
    @Import(name="dBName", required=true)
      private final Output<String> dBName;

    public Output<String> getDBName() {
        return this.dBName;
    }

    /**
     * A boolean indicating whether to enable the deferred maintenance window.
     * 
     */
    @Import(name="deferMaintenance")
      private final @Nullable Output<Boolean> deferMaintenance;

    public Output<Boolean> getDeferMaintenance() {
        return this.deferMaintenance == null ? Output.empty() : this.deferMaintenance;
    }

    /**
     * An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
     * 
     */
    @Import(name="deferMaintenanceDuration")
      private final @Nullable Output<Integer> deferMaintenanceDuration;

    public Output<Integer> getDeferMaintenanceDuration() {
        return this.deferMaintenanceDuration == null ? Output.empty() : this.deferMaintenanceDuration;
    }

    /**
     * A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
     * 
     */
    @Import(name="deferMaintenanceEndTime")
      private final @Nullable Output<String> deferMaintenanceEndTime;

    public Output<String> getDeferMaintenanceEndTime() {
        return this.deferMaintenanceEndTime == null ? Output.empty() : this.deferMaintenanceEndTime;
    }

    /**
     * A timestamp indicating the start time for the deferred maintenance window.
     * 
     */
    @Import(name="deferMaintenanceStartTime")
      private final @Nullable Output<String> deferMaintenanceStartTime;

    public Output<String> getDeferMaintenanceStartTime() {
        return this.deferMaintenanceStartTime == null ? Output.empty() : this.deferMaintenanceStartTime;
    }

    /**
     * The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference
     * 
     */
    @Import(name="destinationRegion")
      private final @Nullable Output<String> destinationRegion;

    public Output<String> getDestinationRegion() {
        return this.destinationRegion == null ? Output.empty() : this.destinationRegion;
    }

    /**
     * The Elastic IP (EIP) address for the cluster.
     * 
     */
    @Import(name="elasticIp")
      private final @Nullable Output<String> elasticIp;

    public Output<String> getElasticIp() {
        return this.elasticIp == null ? Output.empty() : this.elasticIp;
    }

    /**
     * If true, the data in the cluster is encrypted at rest.
     * 
     */
    @Import(name="encrypted")
      private final @Nullable Output<Boolean> encrypted;

    public Output<Boolean> getEncrypted() {
        return this.encrypted == null ? Output.empty() : this.encrypted;
    }

    @Import(name="endpoint")
      private final @Nullable Output<ClusterEndpointArgs> endpoint;

    public Output<ClusterEndpointArgs> getEndpoint() {
        return this.endpoint == null ? Output.empty() : this.endpoint;
    }

    /**
     * An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.
     * 
     * If this option is true , enhanced VPC routing is enabled.
     * 
     * Default: false
     * 
     */
    @Import(name="enhancedVpcRouting")
      private final @Nullable Output<Boolean> enhancedVpcRouting;

    public Output<Boolean> getEnhancedVpcRouting() {
        return this.enhancedVpcRouting == null ? Output.empty() : this.enhancedVpcRouting;
    }

    /**
     * Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM
     * 
     */
    @Import(name="hsmClientCertificateIdentifier")
      private final @Nullable Output<String> hsmClientCertificateIdentifier;

    public Output<String> getHsmClientCertificateIdentifier() {
        return this.hsmClientCertificateIdentifier == null ? Output.empty() : this.hsmClientCertificateIdentifier;
    }

    /**
     * Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
     * 
     */
    @Import(name="hsmConfigurationIdentifier")
      private final @Nullable Output<String> hsmConfigurationIdentifier;

    public Output<String> getHsmConfigurationIdentifier() {
        return this.hsmConfigurationIdentifier == null ? Output.empty() : this.hsmConfigurationIdentifier;
    }

    /**
     * A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request
     * 
     */
    @Import(name="iamRoles")
      private final @Nullable Output<List<String>> iamRoles;

    public Output<List<String>> getIamRoles() {
        return this.iamRoles == null ? Output.empty() : this.iamRoles;
    }

    /**
     * The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Output.empty() : this.kmsKeyId;
    }

    @Import(name="loggingProperties")
      private final @Nullable Output<ClusterLoggingPropertiesArgs> loggingProperties;

    public Output<ClusterLoggingPropertiesArgs> getLoggingProperties() {
        return this.loggingProperties == null ? Output.empty() : this.loggingProperties;
    }

    /**
     * The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
     * 
     */
    @Import(name="maintenanceTrackName")
      private final @Nullable Output<String> maintenanceTrackName;

    public Output<String> getMaintenanceTrackName() {
        return this.maintenanceTrackName == null ? Output.empty() : this.maintenanceTrackName;
    }

    /**
     * The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.
     * 
     * The value must be either -1 or an integer between 1 and 3,653.
     * 
     */
    @Import(name="manualSnapshotRetentionPeriod")
      private final @Nullable Output<Integer> manualSnapshotRetentionPeriod;

    public Output<Integer> getManualSnapshotRetentionPeriod() {
        return this.manualSnapshotRetentionPeriod == null ? Output.empty() : this.manualSnapshotRetentionPeriod;
    }

    /**
     * The password associated with the master user account for the cluster that is being created. Password must be between 8 and 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can be any printable ASCII character.
     * 
     */
    @Import(name="masterUserPassword", required=true)
      private final Output<String> masterUserPassword;

    public Output<String> getMasterUserPassword() {
        return this.masterUserPassword;
    }

    /**
     * The user name associated with the master user account for the cluster that is being created. The user name can't be PUBLIC and first character must be a letter.
     * 
     */
    @Import(name="masterUsername", required=true)
      private final Output<String> masterUsername;

    public Output<String> getMasterUsername() {
        return this.masterUsername;
    }

    /**
     * The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge
     * 
     */
    @Import(name="nodeType", required=true)
      private final Output<String> nodeType;

    public Output<String> getNodeType() {
        return this.nodeType;
    }

    /**
     * The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.
     * 
     */
    @Import(name="numberOfNodes")
      private final @Nullable Output<Integer> numberOfNodes;

    public Output<Integer> getNumberOfNodes() {
        return this.numberOfNodes == null ? Output.empty() : this.numberOfNodes;
    }

    @Import(name="ownerAccount")
      private final @Nullable Output<String> ownerAccount;

    public Output<String> getOwnerAccount() {
        return this.ownerAccount == null ? Output.empty() : this.ownerAccount;
    }

    /**
     * The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * The weekly time range (in UTC) during which automated cluster maintenance can occur.
     * 
     */
    @Import(name="preferredMaintenanceWindow")
      private final @Nullable Output<String> preferredMaintenanceWindow;

    public Output<String> getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Output.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * If true, the cluster can be accessed from a public network.
     * 
     */
    @Import(name="publiclyAccessible")
      private final @Nullable Output<Boolean> publiclyAccessible;

    public Output<Boolean> getPubliclyAccessible() {
        return this.publiclyAccessible == null ? Output.empty() : this.publiclyAccessible;
    }

    /**
     * The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster APIs
     * 
     */
    @Import(name="resourceAction")
      private final @Nullable Output<String> resourceAction;

    public Output<String> getResourceAction() {
        return this.resourceAction == null ? Output.empty() : this.resourceAction;
    }

    /**
     * The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.
     * 
     */
    @Import(name="revisionTarget")
      private final @Nullable Output<String> revisionTarget;

    public Output<String> getRevisionTarget() {
        return this.revisionTarget == null ? Output.empty() : this.revisionTarget;
    }

    /**
     * A boolean indicating if we want to rotate Encryption Keys.
     * 
     */
    @Import(name="rotateEncryptionKey")
      private final @Nullable Output<Boolean> rotateEncryptionKey;

    public Output<Boolean> getRotateEncryptionKey() {
        return this.rotateEncryptionKey == null ? Output.empty() : this.rotateEncryptionKey;
    }

    /**
     * The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
     * 
     */
    @Import(name="snapshotClusterIdentifier")
      private final @Nullable Output<String> snapshotClusterIdentifier;

    public Output<String> getSnapshotClusterIdentifier() {
        return this.snapshotClusterIdentifier == null ? Output.empty() : this.snapshotClusterIdentifier;
    }

    /**
     * The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
     * 
     */
    @Import(name="snapshotCopyGrantName")
      private final @Nullable Output<String> snapshotCopyGrantName;

    public Output<String> getSnapshotCopyGrantName() {
        return this.snapshotCopyGrantName == null ? Output.empty() : this.snapshotCopyGrantName;
    }

    /**
     * Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
     * 
     */
    @Import(name="snapshotCopyManual")
      private final @Nullable Output<Boolean> snapshotCopyManual;

    public Output<Boolean> getSnapshotCopyManual() {
        return this.snapshotCopyManual == null ? Output.empty() : this.snapshotCopyManual;
    }

    /**
     * The number of days to retain automated snapshots in the destination region after they are copied from the source region.
     * 
     *  Default is 7.
     * 
     *  Constraints: Must be at least 1 and no more than 35.
     * 
     */
    @Import(name="snapshotCopyRetentionPeriod")
      private final @Nullable Output<Integer> snapshotCopyRetentionPeriod;

    public Output<Integer> getSnapshotCopyRetentionPeriod() {
        return this.snapshotCopyRetentionPeriod == null ? Output.empty() : this.snapshotCopyRetentionPeriod;
    }

    /**
     * The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.
     * 
     */
    @Import(name="snapshotIdentifier")
      private final @Nullable Output<String> snapshotIdentifier;

    public Output<String> getSnapshotIdentifier() {
        return this.snapshotIdentifier == null ? Output.empty() : this.snapshotIdentifier;
    }

    /**
     * The list of tags for the cluster parameter group.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<ClusterTagArgs>> tags;

    public Output<List<ClusterTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
     * 
     */
    @Import(name="vpcSecurityGroupIds")
      private final @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Output<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Output.empty() : this.vpcSecurityGroupIds;
    }

    public ClusterArgs(
        @Nullable Output<Boolean> allowVersionUpgrade,
        @Nullable Output<String> aquaConfigurationStatus,
        @Nullable Output<Integer> automatedSnapshotRetentionPeriod,
        @Nullable Output<String> availabilityZone,
        @Nullable Output<Boolean> availabilityZoneRelocation,
        @Nullable Output<String> availabilityZoneRelocationStatus,
        @Nullable Output<Boolean> classic,
        @Nullable Output<String> clusterIdentifier,
        @Nullable Output<String> clusterParameterGroupName,
        @Nullable Output<List<String>> clusterSecurityGroups,
        @Nullable Output<String> clusterSubnetGroupName,
        Output<String> clusterType,
        @Nullable Output<String> clusterVersion,
        Output<String> dBName,
        @Nullable Output<Boolean> deferMaintenance,
        @Nullable Output<Integer> deferMaintenanceDuration,
        @Nullable Output<String> deferMaintenanceEndTime,
        @Nullable Output<String> deferMaintenanceStartTime,
        @Nullable Output<String> destinationRegion,
        @Nullable Output<String> elasticIp,
        @Nullable Output<Boolean> encrypted,
        @Nullable Output<ClusterEndpointArgs> endpoint,
        @Nullable Output<Boolean> enhancedVpcRouting,
        @Nullable Output<String> hsmClientCertificateIdentifier,
        @Nullable Output<String> hsmConfigurationIdentifier,
        @Nullable Output<List<String>> iamRoles,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<ClusterLoggingPropertiesArgs> loggingProperties,
        @Nullable Output<String> maintenanceTrackName,
        @Nullable Output<Integer> manualSnapshotRetentionPeriod,
        Output<String> masterUserPassword,
        Output<String> masterUsername,
        Output<String> nodeType,
        @Nullable Output<Integer> numberOfNodes,
        @Nullable Output<String> ownerAccount,
        @Nullable Output<Integer> port,
        @Nullable Output<String> preferredMaintenanceWindow,
        @Nullable Output<Boolean> publiclyAccessible,
        @Nullable Output<String> resourceAction,
        @Nullable Output<String> revisionTarget,
        @Nullable Output<Boolean> rotateEncryptionKey,
        @Nullable Output<String> snapshotClusterIdentifier,
        @Nullable Output<String> snapshotCopyGrantName,
        @Nullable Output<Boolean> snapshotCopyManual,
        @Nullable Output<Integer> snapshotCopyRetentionPeriod,
        @Nullable Output<String> snapshotIdentifier,
        @Nullable Output<List<ClusterTagArgs>> tags,
        @Nullable Output<List<String>> vpcSecurityGroupIds) {
        this.allowVersionUpgrade = allowVersionUpgrade;
        this.aquaConfigurationStatus = aquaConfigurationStatus;
        this.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
        this.availabilityZone = availabilityZone;
        this.availabilityZoneRelocation = availabilityZoneRelocation;
        this.availabilityZoneRelocationStatus = availabilityZoneRelocationStatus;
        this.classic = classic;
        this.clusterIdentifier = clusterIdentifier;
        this.clusterParameterGroupName = clusterParameterGroupName;
        this.clusterSecurityGroups = clusterSecurityGroups;
        this.clusterSubnetGroupName = clusterSubnetGroupName;
        this.clusterType = Objects.requireNonNull(clusterType, "expected parameter 'clusterType' to be non-null");
        this.clusterVersion = clusterVersion;
        this.dBName = Objects.requireNonNull(dBName, "expected parameter 'dBName' to be non-null");
        this.deferMaintenance = deferMaintenance;
        this.deferMaintenanceDuration = deferMaintenanceDuration;
        this.deferMaintenanceEndTime = deferMaintenanceEndTime;
        this.deferMaintenanceStartTime = deferMaintenanceStartTime;
        this.destinationRegion = destinationRegion;
        this.elasticIp = elasticIp;
        this.encrypted = encrypted;
        this.endpoint = endpoint;
        this.enhancedVpcRouting = enhancedVpcRouting;
        this.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier;
        this.hsmConfigurationIdentifier = hsmConfigurationIdentifier;
        this.iamRoles = iamRoles;
        this.kmsKeyId = kmsKeyId;
        this.loggingProperties = loggingProperties;
        this.maintenanceTrackName = maintenanceTrackName;
        this.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
        this.masterUserPassword = Objects.requireNonNull(masterUserPassword, "expected parameter 'masterUserPassword' to be non-null");
        this.masterUsername = Objects.requireNonNull(masterUsername, "expected parameter 'masterUsername' to be non-null");
        this.nodeType = Objects.requireNonNull(nodeType, "expected parameter 'nodeType' to be non-null");
        this.numberOfNodes = numberOfNodes;
        this.ownerAccount = ownerAccount;
        this.port = port;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.publiclyAccessible = publiclyAccessible;
        this.resourceAction = resourceAction;
        this.revisionTarget = revisionTarget;
        this.rotateEncryptionKey = rotateEncryptionKey;
        this.snapshotClusterIdentifier = snapshotClusterIdentifier;
        this.snapshotCopyGrantName = snapshotCopyGrantName;
        this.snapshotCopyManual = snapshotCopyManual;
        this.snapshotCopyRetentionPeriod = snapshotCopyRetentionPeriod;
        this.snapshotIdentifier = snapshotIdentifier;
        this.tags = tags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private ClusterArgs() {
        this.allowVersionUpgrade = Output.empty();
        this.aquaConfigurationStatus = Output.empty();
        this.automatedSnapshotRetentionPeriod = Output.empty();
        this.availabilityZone = Output.empty();
        this.availabilityZoneRelocation = Output.empty();
        this.availabilityZoneRelocationStatus = Output.empty();
        this.classic = Output.empty();
        this.clusterIdentifier = Output.empty();
        this.clusterParameterGroupName = Output.empty();
        this.clusterSecurityGroups = Output.empty();
        this.clusterSubnetGroupName = Output.empty();
        this.clusterType = Output.empty();
        this.clusterVersion = Output.empty();
        this.dBName = Output.empty();
        this.deferMaintenance = Output.empty();
        this.deferMaintenanceDuration = Output.empty();
        this.deferMaintenanceEndTime = Output.empty();
        this.deferMaintenanceStartTime = Output.empty();
        this.destinationRegion = Output.empty();
        this.elasticIp = Output.empty();
        this.encrypted = Output.empty();
        this.endpoint = Output.empty();
        this.enhancedVpcRouting = Output.empty();
        this.hsmClientCertificateIdentifier = Output.empty();
        this.hsmConfigurationIdentifier = Output.empty();
        this.iamRoles = Output.empty();
        this.kmsKeyId = Output.empty();
        this.loggingProperties = Output.empty();
        this.maintenanceTrackName = Output.empty();
        this.manualSnapshotRetentionPeriod = Output.empty();
        this.masterUserPassword = Output.empty();
        this.masterUsername = Output.empty();
        this.nodeType = Output.empty();
        this.numberOfNodes = Output.empty();
        this.ownerAccount = Output.empty();
        this.port = Output.empty();
        this.preferredMaintenanceWindow = Output.empty();
        this.publiclyAccessible = Output.empty();
        this.resourceAction = Output.empty();
        this.revisionTarget = Output.empty();
        this.rotateEncryptionKey = Output.empty();
        this.snapshotClusterIdentifier = Output.empty();
        this.snapshotCopyGrantName = Output.empty();
        this.snapshotCopyManual = Output.empty();
        this.snapshotCopyRetentionPeriod = Output.empty();
        this.snapshotIdentifier = Output.empty();
        this.tags = Output.empty();
        this.vpcSecurityGroupIds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowVersionUpgrade;
        private @Nullable Output<String> aquaConfigurationStatus;
        private @Nullable Output<Integer> automatedSnapshotRetentionPeriod;
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<Boolean> availabilityZoneRelocation;
        private @Nullable Output<String> availabilityZoneRelocationStatus;
        private @Nullable Output<Boolean> classic;
        private @Nullable Output<String> clusterIdentifier;
        private @Nullable Output<String> clusterParameterGroupName;
        private @Nullable Output<List<String>> clusterSecurityGroups;
        private @Nullable Output<String> clusterSubnetGroupName;
        private Output<String> clusterType;
        private @Nullable Output<String> clusterVersion;
        private Output<String> dBName;
        private @Nullable Output<Boolean> deferMaintenance;
        private @Nullable Output<Integer> deferMaintenanceDuration;
        private @Nullable Output<String> deferMaintenanceEndTime;
        private @Nullable Output<String> deferMaintenanceStartTime;
        private @Nullable Output<String> destinationRegion;
        private @Nullable Output<String> elasticIp;
        private @Nullable Output<Boolean> encrypted;
        private @Nullable Output<ClusterEndpointArgs> endpoint;
        private @Nullable Output<Boolean> enhancedVpcRouting;
        private @Nullable Output<String> hsmClientCertificateIdentifier;
        private @Nullable Output<String> hsmConfigurationIdentifier;
        private @Nullable Output<List<String>> iamRoles;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<ClusterLoggingPropertiesArgs> loggingProperties;
        private @Nullable Output<String> maintenanceTrackName;
        private @Nullable Output<Integer> manualSnapshotRetentionPeriod;
        private Output<String> masterUserPassword;
        private Output<String> masterUsername;
        private Output<String> nodeType;
        private @Nullable Output<Integer> numberOfNodes;
        private @Nullable Output<String> ownerAccount;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> preferredMaintenanceWindow;
        private @Nullable Output<Boolean> publiclyAccessible;
        private @Nullable Output<String> resourceAction;
        private @Nullable Output<String> revisionTarget;
        private @Nullable Output<Boolean> rotateEncryptionKey;
        private @Nullable Output<String> snapshotClusterIdentifier;
        private @Nullable Output<String> snapshotCopyGrantName;
        private @Nullable Output<Boolean> snapshotCopyManual;
        private @Nullable Output<Integer> snapshotCopyRetentionPeriod;
        private @Nullable Output<String> snapshotIdentifier;
        private @Nullable Output<List<ClusterTagArgs>> tags;
        private @Nullable Output<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowVersionUpgrade = defaults.allowVersionUpgrade;
    	      this.aquaConfigurationStatus = defaults.aquaConfigurationStatus;
    	      this.automatedSnapshotRetentionPeriod = defaults.automatedSnapshotRetentionPeriod;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.availabilityZoneRelocation = defaults.availabilityZoneRelocation;
    	      this.availabilityZoneRelocationStatus = defaults.availabilityZoneRelocationStatus;
    	      this.classic = defaults.classic;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterParameterGroupName = defaults.clusterParameterGroupName;
    	      this.clusterSecurityGroups = defaults.clusterSecurityGroups;
    	      this.clusterSubnetGroupName = defaults.clusterSubnetGroupName;
    	      this.clusterType = defaults.clusterType;
    	      this.clusterVersion = defaults.clusterVersion;
    	      this.dBName = defaults.dBName;
    	      this.deferMaintenance = defaults.deferMaintenance;
    	      this.deferMaintenanceDuration = defaults.deferMaintenanceDuration;
    	      this.deferMaintenanceEndTime = defaults.deferMaintenanceEndTime;
    	      this.deferMaintenanceStartTime = defaults.deferMaintenanceStartTime;
    	      this.destinationRegion = defaults.destinationRegion;
    	      this.elasticIp = defaults.elasticIp;
    	      this.encrypted = defaults.encrypted;
    	      this.endpoint = defaults.endpoint;
    	      this.enhancedVpcRouting = defaults.enhancedVpcRouting;
    	      this.hsmClientCertificateIdentifier = defaults.hsmClientCertificateIdentifier;
    	      this.hsmConfigurationIdentifier = defaults.hsmConfigurationIdentifier;
    	      this.iamRoles = defaults.iamRoles;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.loggingProperties = defaults.loggingProperties;
    	      this.maintenanceTrackName = defaults.maintenanceTrackName;
    	      this.manualSnapshotRetentionPeriod = defaults.manualSnapshotRetentionPeriod;
    	      this.masterUserPassword = defaults.masterUserPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.nodeType = defaults.nodeType;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.ownerAccount = defaults.ownerAccount;
    	      this.port = defaults.port;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.resourceAction = defaults.resourceAction;
    	      this.revisionTarget = defaults.revisionTarget;
    	      this.rotateEncryptionKey = defaults.rotateEncryptionKey;
    	      this.snapshotClusterIdentifier = defaults.snapshotClusterIdentifier;
    	      this.snapshotCopyGrantName = defaults.snapshotCopyGrantName;
    	      this.snapshotCopyManual = defaults.snapshotCopyManual;
    	      this.snapshotCopyRetentionPeriod = defaults.snapshotCopyRetentionPeriod;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.tags = defaults.tags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder allowVersionUpgrade(@Nullable Output<Boolean> allowVersionUpgrade) {
            this.allowVersionUpgrade = allowVersionUpgrade;
            return this;
        }

        public Builder allowVersionUpgrade(@Nullable Boolean allowVersionUpgrade) {
            this.allowVersionUpgrade = Output.ofNullable(allowVersionUpgrade);
            return this;
        }

        public Builder aquaConfigurationStatus(@Nullable Output<String> aquaConfigurationStatus) {
            this.aquaConfigurationStatus = aquaConfigurationStatus;
            return this;
        }

        public Builder aquaConfigurationStatus(@Nullable String aquaConfigurationStatus) {
            this.aquaConfigurationStatus = Output.ofNullable(aquaConfigurationStatus);
            return this;
        }

        public Builder automatedSnapshotRetentionPeriod(@Nullable Output<Integer> automatedSnapshotRetentionPeriod) {
            this.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
            return this;
        }

        public Builder automatedSnapshotRetentionPeriod(@Nullable Integer automatedSnapshotRetentionPeriod) {
            this.automatedSnapshotRetentionPeriod = Output.ofNullable(automatedSnapshotRetentionPeriod);
            return this;
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Output.ofNullable(availabilityZone);
            return this;
        }

        public Builder availabilityZoneRelocation(@Nullable Output<Boolean> availabilityZoneRelocation) {
            this.availabilityZoneRelocation = availabilityZoneRelocation;
            return this;
        }

        public Builder availabilityZoneRelocation(@Nullable Boolean availabilityZoneRelocation) {
            this.availabilityZoneRelocation = Output.ofNullable(availabilityZoneRelocation);
            return this;
        }

        public Builder availabilityZoneRelocationStatus(@Nullable Output<String> availabilityZoneRelocationStatus) {
            this.availabilityZoneRelocationStatus = availabilityZoneRelocationStatus;
            return this;
        }

        public Builder availabilityZoneRelocationStatus(@Nullable String availabilityZoneRelocationStatus) {
            this.availabilityZoneRelocationStatus = Output.ofNullable(availabilityZoneRelocationStatus);
            return this;
        }

        public Builder classic(@Nullable Output<Boolean> classic) {
            this.classic = classic;
            return this;
        }

        public Builder classic(@Nullable Boolean classic) {
            this.classic = Output.ofNullable(classic);
            return this;
        }

        public Builder clusterIdentifier(@Nullable Output<String> clusterIdentifier) {
            this.clusterIdentifier = clusterIdentifier;
            return this;
        }

        public Builder clusterIdentifier(@Nullable String clusterIdentifier) {
            this.clusterIdentifier = Output.ofNullable(clusterIdentifier);
            return this;
        }

        public Builder clusterParameterGroupName(@Nullable Output<String> clusterParameterGroupName) {
            this.clusterParameterGroupName = clusterParameterGroupName;
            return this;
        }

        public Builder clusterParameterGroupName(@Nullable String clusterParameterGroupName) {
            this.clusterParameterGroupName = Output.ofNullable(clusterParameterGroupName);
            return this;
        }

        public Builder clusterSecurityGroups(@Nullable Output<List<String>> clusterSecurityGroups) {
            this.clusterSecurityGroups = clusterSecurityGroups;
            return this;
        }

        public Builder clusterSecurityGroups(@Nullable List<String> clusterSecurityGroups) {
            this.clusterSecurityGroups = Output.ofNullable(clusterSecurityGroups);
            return this;
        }

        public Builder clusterSubnetGroupName(@Nullable Output<String> clusterSubnetGroupName) {
            this.clusterSubnetGroupName = clusterSubnetGroupName;
            return this;
        }

        public Builder clusterSubnetGroupName(@Nullable String clusterSubnetGroupName) {
            this.clusterSubnetGroupName = Output.ofNullable(clusterSubnetGroupName);
            return this;
        }

        public Builder clusterType(Output<String> clusterType) {
            this.clusterType = Objects.requireNonNull(clusterType);
            return this;
        }

        public Builder clusterType(String clusterType) {
            this.clusterType = Output.of(Objects.requireNonNull(clusterType));
            return this;
        }

        public Builder clusterVersion(@Nullable Output<String> clusterVersion) {
            this.clusterVersion = clusterVersion;
            return this;
        }

        public Builder clusterVersion(@Nullable String clusterVersion) {
            this.clusterVersion = Output.ofNullable(clusterVersion);
            return this;
        }

        public Builder dBName(Output<String> dBName) {
            this.dBName = Objects.requireNonNull(dBName);
            return this;
        }

        public Builder dBName(String dBName) {
            this.dBName = Output.of(Objects.requireNonNull(dBName));
            return this;
        }

        public Builder deferMaintenance(@Nullable Output<Boolean> deferMaintenance) {
            this.deferMaintenance = deferMaintenance;
            return this;
        }

        public Builder deferMaintenance(@Nullable Boolean deferMaintenance) {
            this.deferMaintenance = Output.ofNullable(deferMaintenance);
            return this;
        }

        public Builder deferMaintenanceDuration(@Nullable Output<Integer> deferMaintenanceDuration) {
            this.deferMaintenanceDuration = deferMaintenanceDuration;
            return this;
        }

        public Builder deferMaintenanceDuration(@Nullable Integer deferMaintenanceDuration) {
            this.deferMaintenanceDuration = Output.ofNullable(deferMaintenanceDuration);
            return this;
        }

        public Builder deferMaintenanceEndTime(@Nullable Output<String> deferMaintenanceEndTime) {
            this.deferMaintenanceEndTime = deferMaintenanceEndTime;
            return this;
        }

        public Builder deferMaintenanceEndTime(@Nullable String deferMaintenanceEndTime) {
            this.deferMaintenanceEndTime = Output.ofNullable(deferMaintenanceEndTime);
            return this;
        }

        public Builder deferMaintenanceStartTime(@Nullable Output<String> deferMaintenanceStartTime) {
            this.deferMaintenanceStartTime = deferMaintenanceStartTime;
            return this;
        }

        public Builder deferMaintenanceStartTime(@Nullable String deferMaintenanceStartTime) {
            this.deferMaintenanceStartTime = Output.ofNullable(deferMaintenanceStartTime);
            return this;
        }

        public Builder destinationRegion(@Nullable Output<String> destinationRegion) {
            this.destinationRegion = destinationRegion;
            return this;
        }

        public Builder destinationRegion(@Nullable String destinationRegion) {
            this.destinationRegion = Output.ofNullable(destinationRegion);
            return this;
        }

        public Builder elasticIp(@Nullable Output<String> elasticIp) {
            this.elasticIp = elasticIp;
            return this;
        }

        public Builder elasticIp(@Nullable String elasticIp) {
            this.elasticIp = Output.ofNullable(elasticIp);
            return this;
        }

        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }

        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Output.ofNullable(encrypted);
            return this;
        }

        public Builder endpoint(@Nullable Output<ClusterEndpointArgs> endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(@Nullable ClusterEndpointArgs endpoint) {
            this.endpoint = Output.ofNullable(endpoint);
            return this;
        }

        public Builder enhancedVpcRouting(@Nullable Output<Boolean> enhancedVpcRouting) {
            this.enhancedVpcRouting = enhancedVpcRouting;
            return this;
        }

        public Builder enhancedVpcRouting(@Nullable Boolean enhancedVpcRouting) {
            this.enhancedVpcRouting = Output.ofNullable(enhancedVpcRouting);
            return this;
        }

        public Builder hsmClientCertificateIdentifier(@Nullable Output<String> hsmClientCertificateIdentifier) {
            this.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier;
            return this;
        }

        public Builder hsmClientCertificateIdentifier(@Nullable String hsmClientCertificateIdentifier) {
            this.hsmClientCertificateIdentifier = Output.ofNullable(hsmClientCertificateIdentifier);
            return this;
        }

        public Builder hsmConfigurationIdentifier(@Nullable Output<String> hsmConfigurationIdentifier) {
            this.hsmConfigurationIdentifier = hsmConfigurationIdentifier;
            return this;
        }

        public Builder hsmConfigurationIdentifier(@Nullable String hsmConfigurationIdentifier) {
            this.hsmConfigurationIdentifier = Output.ofNullable(hsmConfigurationIdentifier);
            return this;
        }

        public Builder iamRoles(@Nullable Output<List<String>> iamRoles) {
            this.iamRoles = iamRoles;
            return this;
        }

        public Builder iamRoles(@Nullable List<String> iamRoles) {
            this.iamRoles = Output.ofNullable(iamRoles);
            return this;
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Output.ofNullable(kmsKeyId);
            return this;
        }

        public Builder loggingProperties(@Nullable Output<ClusterLoggingPropertiesArgs> loggingProperties) {
            this.loggingProperties = loggingProperties;
            return this;
        }

        public Builder loggingProperties(@Nullable ClusterLoggingPropertiesArgs loggingProperties) {
            this.loggingProperties = Output.ofNullable(loggingProperties);
            return this;
        }

        public Builder maintenanceTrackName(@Nullable Output<String> maintenanceTrackName) {
            this.maintenanceTrackName = maintenanceTrackName;
            return this;
        }

        public Builder maintenanceTrackName(@Nullable String maintenanceTrackName) {
            this.maintenanceTrackName = Output.ofNullable(maintenanceTrackName);
            return this;
        }

        public Builder manualSnapshotRetentionPeriod(@Nullable Output<Integer> manualSnapshotRetentionPeriod) {
            this.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
            return this;
        }

        public Builder manualSnapshotRetentionPeriod(@Nullable Integer manualSnapshotRetentionPeriod) {
            this.manualSnapshotRetentionPeriod = Output.ofNullable(manualSnapshotRetentionPeriod);
            return this;
        }

        public Builder masterUserPassword(Output<String> masterUserPassword) {
            this.masterUserPassword = Objects.requireNonNull(masterUserPassword);
            return this;
        }

        public Builder masterUserPassword(String masterUserPassword) {
            this.masterUserPassword = Output.of(Objects.requireNonNull(masterUserPassword));
            return this;
        }

        public Builder masterUsername(Output<String> masterUsername) {
            this.masterUsername = Objects.requireNonNull(masterUsername);
            return this;
        }

        public Builder masterUsername(String masterUsername) {
            this.masterUsername = Output.of(Objects.requireNonNull(masterUsername));
            return this;
        }

        public Builder nodeType(Output<String> nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }

        public Builder nodeType(String nodeType) {
            this.nodeType = Output.of(Objects.requireNonNull(nodeType));
            return this;
        }

        public Builder numberOfNodes(@Nullable Output<Integer> numberOfNodes) {
            this.numberOfNodes = numberOfNodes;
            return this;
        }

        public Builder numberOfNodes(@Nullable Integer numberOfNodes) {
            this.numberOfNodes = Output.ofNullable(numberOfNodes);
            return this;
        }

        public Builder ownerAccount(@Nullable Output<String> ownerAccount) {
            this.ownerAccount = ownerAccount;
            return this;
        }

        public Builder ownerAccount(@Nullable String ownerAccount) {
            this.ownerAccount = Output.ofNullable(ownerAccount);
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Output.ofNullable(preferredMaintenanceWindow);
            return this;
        }

        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Output.ofNullable(publiclyAccessible);
            return this;
        }

        public Builder resourceAction(@Nullable Output<String> resourceAction) {
            this.resourceAction = resourceAction;
            return this;
        }

        public Builder resourceAction(@Nullable String resourceAction) {
            this.resourceAction = Output.ofNullable(resourceAction);
            return this;
        }

        public Builder revisionTarget(@Nullable Output<String> revisionTarget) {
            this.revisionTarget = revisionTarget;
            return this;
        }

        public Builder revisionTarget(@Nullable String revisionTarget) {
            this.revisionTarget = Output.ofNullable(revisionTarget);
            return this;
        }

        public Builder rotateEncryptionKey(@Nullable Output<Boolean> rotateEncryptionKey) {
            this.rotateEncryptionKey = rotateEncryptionKey;
            return this;
        }

        public Builder rotateEncryptionKey(@Nullable Boolean rotateEncryptionKey) {
            this.rotateEncryptionKey = Output.ofNullable(rotateEncryptionKey);
            return this;
        }

        public Builder snapshotClusterIdentifier(@Nullable Output<String> snapshotClusterIdentifier) {
            this.snapshotClusterIdentifier = snapshotClusterIdentifier;
            return this;
        }

        public Builder snapshotClusterIdentifier(@Nullable String snapshotClusterIdentifier) {
            this.snapshotClusterIdentifier = Output.ofNullable(snapshotClusterIdentifier);
            return this;
        }

        public Builder snapshotCopyGrantName(@Nullable Output<String> snapshotCopyGrantName) {
            this.snapshotCopyGrantName = snapshotCopyGrantName;
            return this;
        }

        public Builder snapshotCopyGrantName(@Nullable String snapshotCopyGrantName) {
            this.snapshotCopyGrantName = Output.ofNullable(snapshotCopyGrantName);
            return this;
        }

        public Builder snapshotCopyManual(@Nullable Output<Boolean> snapshotCopyManual) {
            this.snapshotCopyManual = snapshotCopyManual;
            return this;
        }

        public Builder snapshotCopyManual(@Nullable Boolean snapshotCopyManual) {
            this.snapshotCopyManual = Output.ofNullable(snapshotCopyManual);
            return this;
        }

        public Builder snapshotCopyRetentionPeriod(@Nullable Output<Integer> snapshotCopyRetentionPeriod) {
            this.snapshotCopyRetentionPeriod = snapshotCopyRetentionPeriod;
            return this;
        }

        public Builder snapshotCopyRetentionPeriod(@Nullable Integer snapshotCopyRetentionPeriod) {
            this.snapshotCopyRetentionPeriod = Output.ofNullable(snapshotCopyRetentionPeriod);
            return this;
        }

        public Builder snapshotIdentifier(@Nullable Output<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }

        public Builder snapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Output.ofNullable(snapshotIdentifier);
            return this;
        }

        public Builder tags(@Nullable Output<List<ClusterTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<ClusterTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Output.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public ClusterArgs build() {
            return new ClusterArgs(allowVersionUpgrade, aquaConfigurationStatus, automatedSnapshotRetentionPeriod, availabilityZone, availabilityZoneRelocation, availabilityZoneRelocationStatus, classic, clusterIdentifier, clusterParameterGroupName, clusterSecurityGroups, clusterSubnetGroupName, clusterType, clusterVersion, dBName, deferMaintenance, deferMaintenanceDuration, deferMaintenanceEndTime, deferMaintenanceStartTime, destinationRegion, elasticIp, encrypted, endpoint, enhancedVpcRouting, hsmClientCertificateIdentifier, hsmConfigurationIdentifier, iamRoles, kmsKeyId, loggingProperties, maintenanceTrackName, manualSnapshotRetentionPeriod, masterUserPassword, masterUsername, nodeType, numberOfNodes, ownerAccount, port, preferredMaintenanceWindow, publiclyAccessible, resourceAction, revisionTarget, rotateEncryptionKey, snapshotClusterIdentifier, snapshotCopyGrantName, snapshotCopyManual, snapshotCopyRetentionPeriod, snapshotIdentifier, tags, vpcSecurityGroupIds);
        }
    }
}
