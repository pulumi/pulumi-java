// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.autoscaling;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LifecycleHookArgs extends io.pulumi.resources.ResourceArgs {

    public static final LifecycleHookArgs Empty = new LifecycleHookArgs();

    /**
     * The name of the Auto Scaling group for the lifecycle hook.
     * 
     */
    @Import(name="autoScalingGroupName", required=true)
      private final Output<String> autoScalingGroupName;

    public Output<String> getAutoScalingGroupName() {
        return this.autoScalingGroupName;
    }

    /**
     * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON (default).
     * 
     */
    @Import(name="defaultResult")
      private final @Nullable Output<String> defaultResult;

    public Output<String> getDefaultResult() {
        return this.defaultResult == null ? Output.empty() : this.defaultResult;
    }

    /**
     * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult property.
     * 
     */
    @Import(name="heartbeatTimeout")
      private final @Nullable Output<Integer> heartbeatTimeout;

    public Output<Integer> getHeartbeatTimeout() {
        return this.heartbeatTimeout == null ? Output.empty() : this.heartbeatTimeout;
    }

    /**
     * The name of the lifecycle hook.
     * 
     */
    @Import(name="lifecycleHookName")
      private final @Nullable Output<String> lifecycleHookName;

    public Output<String> getLifecycleHookName() {
        return this.lifecycleHookName == null ? Output.empty() : this.lifecycleHookName;
    }

    /**
     * The instance state to which you want to attach the lifecycle hook.
     * 
     */
    @Import(name="lifecycleTransition", required=true)
      private final Output<String> lifecycleTransition;

    public Output<String> getLifecycleTransition() {
        return this.lifecycleTransition;
    }

    /**
     * Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
     * 
     */
    @Import(name="notificationMetadata")
      private final @Nullable Output<String> notificationMetadata;

    public Output<String> getNotificationMetadata() {
        return this.notificationMetadata == null ? Output.empty() : this.notificationMetadata;
    }

    /**
     * The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic. The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
     * 
     */
    @Import(name="notificationTargetARN")
      private final @Nullable Output<String> notificationTargetARN;

    public Output<String> getNotificationTargetARN() {
        return this.notificationTargetARN == null ? Output.empty() : this.notificationTargetARN;
    }

    /**
     * The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
     * 
     */
    @Import(name="roleARN")
      private final @Nullable Output<String> roleARN;

    public Output<String> getRoleARN() {
        return this.roleARN == null ? Output.empty() : this.roleARN;
    }

    public LifecycleHookArgs(
        Output<String> autoScalingGroupName,
        @Nullable Output<String> defaultResult,
        @Nullable Output<Integer> heartbeatTimeout,
        @Nullable Output<String> lifecycleHookName,
        Output<String> lifecycleTransition,
        @Nullable Output<String> notificationMetadata,
        @Nullable Output<String> notificationTargetARN,
        @Nullable Output<String> roleARN) {
        this.autoScalingGroupName = Objects.requireNonNull(autoScalingGroupName, "expected parameter 'autoScalingGroupName' to be non-null");
        this.defaultResult = defaultResult;
        this.heartbeatTimeout = heartbeatTimeout;
        this.lifecycleHookName = lifecycleHookName;
        this.lifecycleTransition = Objects.requireNonNull(lifecycleTransition, "expected parameter 'lifecycleTransition' to be non-null");
        this.notificationMetadata = notificationMetadata;
        this.notificationTargetARN = notificationTargetARN;
        this.roleARN = roleARN;
    }

    private LifecycleHookArgs() {
        this.autoScalingGroupName = Output.empty();
        this.defaultResult = Output.empty();
        this.heartbeatTimeout = Output.empty();
        this.lifecycleHookName = Output.empty();
        this.lifecycleTransition = Output.empty();
        this.notificationMetadata = Output.empty();
        this.notificationTargetARN = Output.empty();
        this.roleARN = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecycleHookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> autoScalingGroupName;
        private @Nullable Output<String> defaultResult;
        private @Nullable Output<Integer> heartbeatTimeout;
        private @Nullable Output<String> lifecycleHookName;
        private Output<String> lifecycleTransition;
        private @Nullable Output<String> notificationMetadata;
        private @Nullable Output<String> notificationTargetARN;
        private @Nullable Output<String> roleARN;

        public Builder() {
    	      // Empty
        }

        public Builder(LifecycleHookArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingGroupName = defaults.autoScalingGroupName;
    	      this.defaultResult = defaults.defaultResult;
    	      this.heartbeatTimeout = defaults.heartbeatTimeout;
    	      this.lifecycleHookName = defaults.lifecycleHookName;
    	      this.lifecycleTransition = defaults.lifecycleTransition;
    	      this.notificationMetadata = defaults.notificationMetadata;
    	      this.notificationTargetARN = defaults.notificationTargetARN;
    	      this.roleARN = defaults.roleARN;
        }

        public Builder autoScalingGroupName(Output<String> autoScalingGroupName) {
            this.autoScalingGroupName = Objects.requireNonNull(autoScalingGroupName);
            return this;
        }
        public Builder autoScalingGroupName(String autoScalingGroupName) {
            this.autoScalingGroupName = Output.of(Objects.requireNonNull(autoScalingGroupName));
            return this;
        }
        public Builder defaultResult(@Nullable Output<String> defaultResult) {
            this.defaultResult = defaultResult;
            return this;
        }
        public Builder defaultResult(@Nullable String defaultResult) {
            this.defaultResult = Output.ofNullable(defaultResult);
            return this;
        }
        public Builder heartbeatTimeout(@Nullable Output<Integer> heartbeatTimeout) {
            this.heartbeatTimeout = heartbeatTimeout;
            return this;
        }
        public Builder heartbeatTimeout(@Nullable Integer heartbeatTimeout) {
            this.heartbeatTimeout = Output.ofNullable(heartbeatTimeout);
            return this;
        }
        public Builder lifecycleHookName(@Nullable Output<String> lifecycleHookName) {
            this.lifecycleHookName = lifecycleHookName;
            return this;
        }
        public Builder lifecycleHookName(@Nullable String lifecycleHookName) {
            this.lifecycleHookName = Output.ofNullable(lifecycleHookName);
            return this;
        }
        public Builder lifecycleTransition(Output<String> lifecycleTransition) {
            this.lifecycleTransition = Objects.requireNonNull(lifecycleTransition);
            return this;
        }
        public Builder lifecycleTransition(String lifecycleTransition) {
            this.lifecycleTransition = Output.of(Objects.requireNonNull(lifecycleTransition));
            return this;
        }
        public Builder notificationMetadata(@Nullable Output<String> notificationMetadata) {
            this.notificationMetadata = notificationMetadata;
            return this;
        }
        public Builder notificationMetadata(@Nullable String notificationMetadata) {
            this.notificationMetadata = Output.ofNullable(notificationMetadata);
            return this;
        }
        public Builder notificationTargetARN(@Nullable Output<String> notificationTargetARN) {
            this.notificationTargetARN = notificationTargetARN;
            return this;
        }
        public Builder notificationTargetARN(@Nullable String notificationTargetARN) {
            this.notificationTargetARN = Output.ofNullable(notificationTargetARN);
            return this;
        }
        public Builder roleARN(@Nullable Output<String> roleARN) {
            this.roleARN = roleARN;
            return this;
        }
        public Builder roleARN(@Nullable String roleARN) {
            this.roleARN = Output.ofNullable(roleARN);
            return this;
        }        public LifecycleHookArgs build() {
            return new LifecycleHookArgs(autoScalingGroupName, defaultResult, heartbeatTimeout, lifecycleHookName, lifecycleTransition, notificationMetadata, notificationTargetARN, roleARN);
        }
    }
}
