// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.sqs;

import io.pulumi.awsnative.sqs.inputs.QueueTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueueArgs extends io.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * For first-in-first-out (FIFO) queues, specifies whether to enable content-based deduplication. During the deduplication interval, Amazon SQS treats messages that are sent with identical content as duplicates and delivers only one copy of the message.
     * 
     */
    @InputImport(name="contentBasedDeduplication")
    private final @Nullable Input<Boolean> contentBasedDeduplication;

    public Input<Boolean> getContentBasedDeduplication() {
        return this.contentBasedDeduplication == null ? Input.empty() : this.contentBasedDeduplication;
    }

    /**
     * Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
     * 
     */
    @InputImport(name="deduplicationScope")
    private final @Nullable Input<String> deduplicationScope;

    public Input<String> getDeduplicationScope() {
        return this.deduplicationScope == null ? Input.empty() : this.deduplicationScope;
    }

    /**
     * The time in seconds for which the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900 (15 minutes). The default value is 0.
     * 
     */
    @InputImport(name="delaySeconds")
    private final @Nullable Input<Integer> delaySeconds;

    public Input<Integer> getDelaySeconds() {
        return this.delaySeconds == null ? Input.empty() : this.delaySeconds;
    }

    /**
     * If set to true, creates a FIFO queue. If you don't specify this property, Amazon SQS creates a standard queue.
     * 
     */
    @InputImport(name="fifoQueue")
    private final @Nullable Input<Boolean> fifoQueue;

    public Input<Boolean> getFifoQueue() {
        return this.fifoQueue == null ? Input.empty() : this.fifoQueue;
    }

    /**
     * Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
     * 
     */
    @InputImport(name="fifoThroughputLimit")
    private final @Nullable Input<String> fifoThroughputLimit;

    public Input<String> getFifoThroughputLimit() {
        return this.fifoThroughputLimit == null ? Input.empty() : this.fifoThroughputLimit;
    }

    /**
     * The length of time in seconds for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. The value must be an integer between 60 (1 minute) and 86,400 (24 hours). The default is 300 (5 minutes).
     * 
     */
    @InputImport(name="kmsDataKeyReusePeriodSeconds")
    private final @Nullable Input<Integer> kmsDataKeyReusePeriodSeconds;

    public Input<Integer> getKmsDataKeyReusePeriodSeconds() {
        return this.kmsDataKeyReusePeriodSeconds == null ? Input.empty() : this.kmsDataKeyReusePeriodSeconds;
    }

    /**
     * The ID of an AWS managed customer master key (CMK) for Amazon SQS or a custom CMK. To use the AWS managed CMK for Amazon SQS, specify the (default) alias alias/aws/sqs.
     * 
     */
    @InputImport(name="kmsMasterKeyId")
    private final @Nullable Input<String> kmsMasterKeyId;

    public Input<String> getKmsMasterKeyId() {
        return this.kmsMasterKeyId == null ? Input.empty() : this.kmsMasterKeyId;
    }

    /**
     * The limit of how many bytes that a message can contain before Amazon SQS rejects it. You can specify an integer value from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). The default value is 262,144 (256 KiB).
     * 
     */
    @InputImport(name="maximumMessageSize")
    private final @Nullable Input<Integer> maximumMessageSize;

    public Input<Integer> getMaximumMessageSize() {
        return this.maximumMessageSize == null ? Input.empty() : this.maximumMessageSize;
    }

    /**
     * The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1,209,600 seconds (14 days). The default value is 345,600 seconds (4 days).
     * 
     */
    @InputImport(name="messageRetentionPeriod")
    private final @Nullable Input<Integer> messageRetentionPeriod;

    public Input<Integer> getMessageRetentionPeriod() {
        return this.messageRetentionPeriod == null ? Input.empty() : this.messageRetentionPeriod;
    }

    /**
     * A name for the queue. To create a FIFO queue, the name of your FIFO queue must end with the .fifo suffix.
     * 
     */
    @InputImport(name="queueName")
    private final @Nullable Input<String> queueName;

    public Input<String> getQueueName() {
        return this.queueName == null ? Input.empty() : this.queueName;
    }

    /**
     * Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, rather than returning an empty response if a message isn't yet available. You can specify an integer from 1 to 20. Short polling is used as the default or when you specify 0 for this property.
     * 
     */
    @InputImport(name="receiveMessageWaitTimeSeconds")
    private final @Nullable Input<Integer> receiveMessageWaitTimeSeconds;

    public Input<Integer> getReceiveMessageWaitTimeSeconds() {
        return this.receiveMessageWaitTimeSeconds == null ? Input.empty() : this.receiveMessageWaitTimeSeconds;
    }

    /**
     * The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object.
     * 
     */
    @InputImport(name="redriveAllowPolicy")
    private final @Nullable Input<Object> redriveAllowPolicy;

    public Input<Object> getRedriveAllowPolicy() {
        return this.redriveAllowPolicy == null ? Input.empty() : this.redriveAllowPolicy;
    }

    /**
     * A string that includes the parameters for the dead-letter queue functionality (redrive policy) of the source queue.
     * 
     */
    @InputImport(name="redrivePolicy")
    private final @Nullable Input<Object> redrivePolicy;

    public Input<Object> getRedrivePolicy() {
        return this.redrivePolicy == null ? Input.empty() : this.redrivePolicy;
    }

    /**
     * The tags that you attach to this queue.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<QueueTagArgs>> tags;

    public Input<List<QueueTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The length of time during which a message will be unavailable after a message is delivered from the queue. This blocks other components from receiving the same message and gives the initial component time to process and delete the message from the queue. Values must be from 0 to 43,200 seconds (12 hours). If you don't specify a value, AWS CloudFormation uses the default value of 30 seconds.
     * 
     */
    @InputImport(name="visibilityTimeout")
    private final @Nullable Input<Integer> visibilityTimeout;

    public Input<Integer> getVisibilityTimeout() {
        return this.visibilityTimeout == null ? Input.empty() : this.visibilityTimeout;
    }

    public QueueArgs(
        @Nullable Input<Boolean> contentBasedDeduplication,
        @Nullable Input<String> deduplicationScope,
        @Nullable Input<Integer> delaySeconds,
        @Nullable Input<Boolean> fifoQueue,
        @Nullable Input<String> fifoThroughputLimit,
        @Nullable Input<Integer> kmsDataKeyReusePeriodSeconds,
        @Nullable Input<String> kmsMasterKeyId,
        @Nullable Input<Integer> maximumMessageSize,
        @Nullable Input<Integer> messageRetentionPeriod,
        @Nullable Input<String> queueName,
        @Nullable Input<Integer> receiveMessageWaitTimeSeconds,
        @Nullable Input<Object> redriveAllowPolicy,
        @Nullable Input<Object> redrivePolicy,
        @Nullable Input<List<QueueTagArgs>> tags,
        @Nullable Input<Integer> visibilityTimeout) {
        this.contentBasedDeduplication = contentBasedDeduplication;
        this.deduplicationScope = deduplicationScope;
        this.delaySeconds = delaySeconds;
        this.fifoQueue = fifoQueue;
        this.fifoThroughputLimit = fifoThroughputLimit;
        this.kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds;
        this.kmsMasterKeyId = kmsMasterKeyId;
        this.maximumMessageSize = maximumMessageSize;
        this.messageRetentionPeriod = messageRetentionPeriod;
        this.queueName = queueName;
        this.receiveMessageWaitTimeSeconds = receiveMessageWaitTimeSeconds;
        this.redriveAllowPolicy = redriveAllowPolicy;
        this.redrivePolicy = redrivePolicy;
        this.tags = tags;
        this.visibilityTimeout = visibilityTimeout;
    }

    private QueueArgs() {
        this.contentBasedDeduplication = Input.empty();
        this.deduplicationScope = Input.empty();
        this.delaySeconds = Input.empty();
        this.fifoQueue = Input.empty();
        this.fifoThroughputLimit = Input.empty();
        this.kmsDataKeyReusePeriodSeconds = Input.empty();
        this.kmsMasterKeyId = Input.empty();
        this.maximumMessageSize = Input.empty();
        this.messageRetentionPeriod = Input.empty();
        this.queueName = Input.empty();
        this.receiveMessageWaitTimeSeconds = Input.empty();
        this.redriveAllowPolicy = Input.empty();
        this.redrivePolicy = Input.empty();
        this.tags = Input.empty();
        this.visibilityTimeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> contentBasedDeduplication;
        private @Nullable Input<String> deduplicationScope;
        private @Nullable Input<Integer> delaySeconds;
        private @Nullable Input<Boolean> fifoQueue;
        private @Nullable Input<String> fifoThroughputLimit;
        private @Nullable Input<Integer> kmsDataKeyReusePeriodSeconds;
        private @Nullable Input<String> kmsMasterKeyId;
        private @Nullable Input<Integer> maximumMessageSize;
        private @Nullable Input<Integer> messageRetentionPeriod;
        private @Nullable Input<String> queueName;
        private @Nullable Input<Integer> receiveMessageWaitTimeSeconds;
        private @Nullable Input<Object> redriveAllowPolicy;
        private @Nullable Input<Object> redrivePolicy;
        private @Nullable Input<List<QueueTagArgs>> tags;
        private @Nullable Input<Integer> visibilityTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentBasedDeduplication = defaults.contentBasedDeduplication;
    	      this.deduplicationScope = defaults.deduplicationScope;
    	      this.delaySeconds = defaults.delaySeconds;
    	      this.fifoQueue = defaults.fifoQueue;
    	      this.fifoThroughputLimit = defaults.fifoThroughputLimit;
    	      this.kmsDataKeyReusePeriodSeconds = defaults.kmsDataKeyReusePeriodSeconds;
    	      this.kmsMasterKeyId = defaults.kmsMasterKeyId;
    	      this.maximumMessageSize = defaults.maximumMessageSize;
    	      this.messageRetentionPeriod = defaults.messageRetentionPeriod;
    	      this.queueName = defaults.queueName;
    	      this.receiveMessageWaitTimeSeconds = defaults.receiveMessageWaitTimeSeconds;
    	      this.redriveAllowPolicy = defaults.redriveAllowPolicy;
    	      this.redrivePolicy = defaults.redrivePolicy;
    	      this.tags = defaults.tags;
    	      this.visibilityTimeout = defaults.visibilityTimeout;
        }

        public Builder setContentBasedDeduplication(@Nullable Input<Boolean> contentBasedDeduplication) {
            this.contentBasedDeduplication = contentBasedDeduplication;
            return this;
        }

        public Builder setContentBasedDeduplication(@Nullable Boolean contentBasedDeduplication) {
            this.contentBasedDeduplication = Input.ofNullable(contentBasedDeduplication);
            return this;
        }

        public Builder setDeduplicationScope(@Nullable Input<String> deduplicationScope) {
            this.deduplicationScope = deduplicationScope;
            return this;
        }

        public Builder setDeduplicationScope(@Nullable String deduplicationScope) {
            this.deduplicationScope = Input.ofNullable(deduplicationScope);
            return this;
        }

        public Builder setDelaySeconds(@Nullable Input<Integer> delaySeconds) {
            this.delaySeconds = delaySeconds;
            return this;
        }

        public Builder setDelaySeconds(@Nullable Integer delaySeconds) {
            this.delaySeconds = Input.ofNullable(delaySeconds);
            return this;
        }

        public Builder setFifoQueue(@Nullable Input<Boolean> fifoQueue) {
            this.fifoQueue = fifoQueue;
            return this;
        }

        public Builder setFifoQueue(@Nullable Boolean fifoQueue) {
            this.fifoQueue = Input.ofNullable(fifoQueue);
            return this;
        }

        public Builder setFifoThroughputLimit(@Nullable Input<String> fifoThroughputLimit) {
            this.fifoThroughputLimit = fifoThroughputLimit;
            return this;
        }

        public Builder setFifoThroughputLimit(@Nullable String fifoThroughputLimit) {
            this.fifoThroughputLimit = Input.ofNullable(fifoThroughputLimit);
            return this;
        }

        public Builder setKmsDataKeyReusePeriodSeconds(@Nullable Input<Integer> kmsDataKeyReusePeriodSeconds) {
            this.kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds;
            return this;
        }

        public Builder setKmsDataKeyReusePeriodSeconds(@Nullable Integer kmsDataKeyReusePeriodSeconds) {
            this.kmsDataKeyReusePeriodSeconds = Input.ofNullable(kmsDataKeyReusePeriodSeconds);
            return this;
        }

        public Builder setKmsMasterKeyId(@Nullable Input<String> kmsMasterKeyId) {
            this.kmsMasterKeyId = kmsMasterKeyId;
            return this;
        }

        public Builder setKmsMasterKeyId(@Nullable String kmsMasterKeyId) {
            this.kmsMasterKeyId = Input.ofNullable(kmsMasterKeyId);
            return this;
        }

        public Builder setMaximumMessageSize(@Nullable Input<Integer> maximumMessageSize) {
            this.maximumMessageSize = maximumMessageSize;
            return this;
        }

        public Builder setMaximumMessageSize(@Nullable Integer maximumMessageSize) {
            this.maximumMessageSize = Input.ofNullable(maximumMessageSize);
            return this;
        }

        public Builder setMessageRetentionPeriod(@Nullable Input<Integer> messageRetentionPeriod) {
            this.messageRetentionPeriod = messageRetentionPeriod;
            return this;
        }

        public Builder setMessageRetentionPeriod(@Nullable Integer messageRetentionPeriod) {
            this.messageRetentionPeriod = Input.ofNullable(messageRetentionPeriod);
            return this;
        }

        public Builder setQueueName(@Nullable Input<String> queueName) {
            this.queueName = queueName;
            return this;
        }

        public Builder setQueueName(@Nullable String queueName) {
            this.queueName = Input.ofNullable(queueName);
            return this;
        }

        public Builder setReceiveMessageWaitTimeSeconds(@Nullable Input<Integer> receiveMessageWaitTimeSeconds) {
            this.receiveMessageWaitTimeSeconds = receiveMessageWaitTimeSeconds;
            return this;
        }

        public Builder setReceiveMessageWaitTimeSeconds(@Nullable Integer receiveMessageWaitTimeSeconds) {
            this.receiveMessageWaitTimeSeconds = Input.ofNullable(receiveMessageWaitTimeSeconds);
            return this;
        }

        public Builder setRedriveAllowPolicy(@Nullable Input<Object> redriveAllowPolicy) {
            this.redriveAllowPolicy = redriveAllowPolicy;
            return this;
        }

        public Builder setRedriveAllowPolicy(@Nullable Object redriveAllowPolicy) {
            this.redriveAllowPolicy = Input.ofNullable(redriveAllowPolicy);
            return this;
        }

        public Builder setRedrivePolicy(@Nullable Input<Object> redrivePolicy) {
            this.redrivePolicy = redrivePolicy;
            return this;
        }

        public Builder setRedrivePolicy(@Nullable Object redrivePolicy) {
            this.redrivePolicy = Input.ofNullable(redrivePolicy);
            return this;
        }

        public Builder setTags(@Nullable Input<List<QueueTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<QueueTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVisibilityTimeout(@Nullable Input<Integer> visibilityTimeout) {
            this.visibilityTimeout = visibilityTimeout;
            return this;
        }

        public Builder setVisibilityTimeout(@Nullable Integer visibilityTimeout) {
            this.visibilityTimeout = Input.ofNullable(visibilityTimeout);
            return this;
        }

        public QueueArgs build() {
            return new QueueArgs(contentBasedDeduplication, deduplicationScope, delaySeconds, fifoQueue, fifoThroughputLimit, kmsDataKeyReusePeriodSeconds, kmsMasterKeyId, maximumMessageSize, messageRetentionPeriod, queueName, receiveMessageWaitTimeSeconds, redriveAllowPolicy, redrivePolicy, tags, visibilityTimeout);
        }
    }
}
