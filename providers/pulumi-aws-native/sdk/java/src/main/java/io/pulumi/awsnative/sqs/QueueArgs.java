// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.sqs;

import io.pulumi.awsnative.sqs.inputs.QueueTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueueArgs extends io.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    @InputImport(name="contentBasedDeduplication")
    private final @Nullable Input<Boolean> contentBasedDeduplication;

    public Input<Boolean> getContentBasedDeduplication() {
        return this.contentBasedDeduplication == null ? Input.empty() : this.contentBasedDeduplication;
    }

    @InputImport(name="deduplicationScope")
    private final @Nullable Input<String> deduplicationScope;

    public Input<String> getDeduplicationScope() {
        return this.deduplicationScope == null ? Input.empty() : this.deduplicationScope;
    }

    @InputImport(name="delaySeconds")
    private final @Nullable Input<Integer> delaySeconds;

    public Input<Integer> getDelaySeconds() {
        return this.delaySeconds == null ? Input.empty() : this.delaySeconds;
    }

    @InputImport(name="fifoQueue")
    private final @Nullable Input<Boolean> fifoQueue;

    public Input<Boolean> getFifoQueue() {
        return this.fifoQueue == null ? Input.empty() : this.fifoQueue;
    }

    @InputImport(name="fifoThroughputLimit")
    private final @Nullable Input<String> fifoThroughputLimit;

    public Input<String> getFifoThroughputLimit() {
        return this.fifoThroughputLimit == null ? Input.empty() : this.fifoThroughputLimit;
    }

    @InputImport(name="kmsDataKeyReusePeriodSeconds")
    private final @Nullable Input<Integer> kmsDataKeyReusePeriodSeconds;

    public Input<Integer> getKmsDataKeyReusePeriodSeconds() {
        return this.kmsDataKeyReusePeriodSeconds == null ? Input.empty() : this.kmsDataKeyReusePeriodSeconds;
    }

    @InputImport(name="kmsMasterKeyId")
    private final @Nullable Input<String> kmsMasterKeyId;

    public Input<String> getKmsMasterKeyId() {
        return this.kmsMasterKeyId == null ? Input.empty() : this.kmsMasterKeyId;
    }

    @InputImport(name="maximumMessageSize")
    private final @Nullable Input<Integer> maximumMessageSize;

    public Input<Integer> getMaximumMessageSize() {
        return this.maximumMessageSize == null ? Input.empty() : this.maximumMessageSize;
    }

    @InputImport(name="messageRetentionPeriod")
    private final @Nullable Input<Integer> messageRetentionPeriod;

    public Input<Integer> getMessageRetentionPeriod() {
        return this.messageRetentionPeriod == null ? Input.empty() : this.messageRetentionPeriod;
    }

    @InputImport(name="queueName")
    private final @Nullable Input<String> queueName;

    public Input<String> getQueueName() {
        return this.queueName == null ? Input.empty() : this.queueName;
    }

    @InputImport(name="receiveMessageWaitTimeSeconds")
    private final @Nullable Input<Integer> receiveMessageWaitTimeSeconds;

    public Input<Integer> getReceiveMessageWaitTimeSeconds() {
        return this.receiveMessageWaitTimeSeconds == null ? Input.empty() : this.receiveMessageWaitTimeSeconds;
    }

    @InputImport(name="redriveAllowPolicy")
    private final @Nullable Input<Object> redriveAllowPolicy;

    public Input<Object> getRedriveAllowPolicy() {
        return this.redriveAllowPolicy == null ? Input.empty() : this.redriveAllowPolicy;
    }

    @InputImport(name="redrivePolicy")
    private final @Nullable Input<Object> redrivePolicy;

    public Input<Object> getRedrivePolicy() {
        return this.redrivePolicy == null ? Input.empty() : this.redrivePolicy;
    }

    @InputImport(name="tags")
    private final @Nullable Input<List<QueueTagArgs>> tags;

    public Input<List<QueueTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="visibilityTimeout")
    private final @Nullable Input<Integer> visibilityTimeout;

    public Input<Integer> getVisibilityTimeout() {
        return this.visibilityTimeout == null ? Input.empty() : this.visibilityTimeout;
    }

    public QueueArgs(
        @Nullable Input<Boolean> contentBasedDeduplication,
        @Nullable Input<String> deduplicationScope,
        @Nullable Input<Integer> delaySeconds,
        @Nullable Input<Boolean> fifoQueue,
        @Nullable Input<String> fifoThroughputLimit,
        @Nullable Input<Integer> kmsDataKeyReusePeriodSeconds,
        @Nullable Input<String> kmsMasterKeyId,
        @Nullable Input<Integer> maximumMessageSize,
        @Nullable Input<Integer> messageRetentionPeriod,
        @Nullable Input<String> queueName,
        @Nullable Input<Integer> receiveMessageWaitTimeSeconds,
        @Nullable Input<Object> redriveAllowPolicy,
        @Nullable Input<Object> redrivePolicy,
        @Nullable Input<List<QueueTagArgs>> tags,
        @Nullable Input<Integer> visibilityTimeout) {
        this.contentBasedDeduplication = contentBasedDeduplication;
        this.deduplicationScope = deduplicationScope;
        this.delaySeconds = delaySeconds;
        this.fifoQueue = fifoQueue;
        this.fifoThroughputLimit = fifoThroughputLimit;
        this.kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds;
        this.kmsMasterKeyId = kmsMasterKeyId;
        this.maximumMessageSize = maximumMessageSize;
        this.messageRetentionPeriod = messageRetentionPeriod;
        this.queueName = queueName;
        this.receiveMessageWaitTimeSeconds = receiveMessageWaitTimeSeconds;
        this.redriveAllowPolicy = redriveAllowPolicy;
        this.redrivePolicy = redrivePolicy;
        this.tags = tags;
        this.visibilityTimeout = visibilityTimeout;
    }

    private QueueArgs() {
        this.contentBasedDeduplication = Input.empty();
        this.deduplicationScope = Input.empty();
        this.delaySeconds = Input.empty();
        this.fifoQueue = Input.empty();
        this.fifoThroughputLimit = Input.empty();
        this.kmsDataKeyReusePeriodSeconds = Input.empty();
        this.kmsMasterKeyId = Input.empty();
        this.maximumMessageSize = Input.empty();
        this.messageRetentionPeriod = Input.empty();
        this.queueName = Input.empty();
        this.receiveMessageWaitTimeSeconds = Input.empty();
        this.redriveAllowPolicy = Input.empty();
        this.redrivePolicy = Input.empty();
        this.tags = Input.empty();
        this.visibilityTimeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> contentBasedDeduplication;
        private @Nullable Input<String> deduplicationScope;
        private @Nullable Input<Integer> delaySeconds;
        private @Nullable Input<Boolean> fifoQueue;
        private @Nullable Input<String> fifoThroughputLimit;
        private @Nullable Input<Integer> kmsDataKeyReusePeriodSeconds;
        private @Nullable Input<String> kmsMasterKeyId;
        private @Nullable Input<Integer> maximumMessageSize;
        private @Nullable Input<Integer> messageRetentionPeriod;
        private @Nullable Input<String> queueName;
        private @Nullable Input<Integer> receiveMessageWaitTimeSeconds;
        private @Nullable Input<Object> redriveAllowPolicy;
        private @Nullable Input<Object> redrivePolicy;
        private @Nullable Input<List<QueueTagArgs>> tags;
        private @Nullable Input<Integer> visibilityTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentBasedDeduplication = defaults.contentBasedDeduplication;
    	      this.deduplicationScope = defaults.deduplicationScope;
    	      this.delaySeconds = defaults.delaySeconds;
    	      this.fifoQueue = defaults.fifoQueue;
    	      this.fifoThroughputLimit = defaults.fifoThroughputLimit;
    	      this.kmsDataKeyReusePeriodSeconds = defaults.kmsDataKeyReusePeriodSeconds;
    	      this.kmsMasterKeyId = defaults.kmsMasterKeyId;
    	      this.maximumMessageSize = defaults.maximumMessageSize;
    	      this.messageRetentionPeriod = defaults.messageRetentionPeriod;
    	      this.queueName = defaults.queueName;
    	      this.receiveMessageWaitTimeSeconds = defaults.receiveMessageWaitTimeSeconds;
    	      this.redriveAllowPolicy = defaults.redriveAllowPolicy;
    	      this.redrivePolicy = defaults.redrivePolicy;
    	      this.tags = defaults.tags;
    	      this.visibilityTimeout = defaults.visibilityTimeout;
        }

        public Builder setContentBasedDeduplication(@Nullable Input<Boolean> contentBasedDeduplication) {
            this.contentBasedDeduplication = contentBasedDeduplication;
            return this;
        }

        public Builder setContentBasedDeduplication(@Nullable Boolean contentBasedDeduplication) {
            this.contentBasedDeduplication = Input.ofNullable(contentBasedDeduplication);
            return this;
        }

        public Builder setDeduplicationScope(@Nullable Input<String> deduplicationScope) {
            this.deduplicationScope = deduplicationScope;
            return this;
        }

        public Builder setDeduplicationScope(@Nullable String deduplicationScope) {
            this.deduplicationScope = Input.ofNullable(deduplicationScope);
            return this;
        }

        public Builder setDelaySeconds(@Nullable Input<Integer> delaySeconds) {
            this.delaySeconds = delaySeconds;
            return this;
        }

        public Builder setDelaySeconds(@Nullable Integer delaySeconds) {
            this.delaySeconds = Input.ofNullable(delaySeconds);
            return this;
        }

        public Builder setFifoQueue(@Nullable Input<Boolean> fifoQueue) {
            this.fifoQueue = fifoQueue;
            return this;
        }

        public Builder setFifoQueue(@Nullable Boolean fifoQueue) {
            this.fifoQueue = Input.ofNullable(fifoQueue);
            return this;
        }

        public Builder setFifoThroughputLimit(@Nullable Input<String> fifoThroughputLimit) {
            this.fifoThroughputLimit = fifoThroughputLimit;
            return this;
        }

        public Builder setFifoThroughputLimit(@Nullable String fifoThroughputLimit) {
            this.fifoThroughputLimit = Input.ofNullable(fifoThroughputLimit);
            return this;
        }

        public Builder setKmsDataKeyReusePeriodSeconds(@Nullable Input<Integer> kmsDataKeyReusePeriodSeconds) {
            this.kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds;
            return this;
        }

        public Builder setKmsDataKeyReusePeriodSeconds(@Nullable Integer kmsDataKeyReusePeriodSeconds) {
            this.kmsDataKeyReusePeriodSeconds = Input.ofNullable(kmsDataKeyReusePeriodSeconds);
            return this;
        }

        public Builder setKmsMasterKeyId(@Nullable Input<String> kmsMasterKeyId) {
            this.kmsMasterKeyId = kmsMasterKeyId;
            return this;
        }

        public Builder setKmsMasterKeyId(@Nullable String kmsMasterKeyId) {
            this.kmsMasterKeyId = Input.ofNullable(kmsMasterKeyId);
            return this;
        }

        public Builder setMaximumMessageSize(@Nullable Input<Integer> maximumMessageSize) {
            this.maximumMessageSize = maximumMessageSize;
            return this;
        }

        public Builder setMaximumMessageSize(@Nullable Integer maximumMessageSize) {
            this.maximumMessageSize = Input.ofNullable(maximumMessageSize);
            return this;
        }

        public Builder setMessageRetentionPeriod(@Nullable Input<Integer> messageRetentionPeriod) {
            this.messageRetentionPeriod = messageRetentionPeriod;
            return this;
        }

        public Builder setMessageRetentionPeriod(@Nullable Integer messageRetentionPeriod) {
            this.messageRetentionPeriod = Input.ofNullable(messageRetentionPeriod);
            return this;
        }

        public Builder setQueueName(@Nullable Input<String> queueName) {
            this.queueName = queueName;
            return this;
        }

        public Builder setQueueName(@Nullable String queueName) {
            this.queueName = Input.ofNullable(queueName);
            return this;
        }

        public Builder setReceiveMessageWaitTimeSeconds(@Nullable Input<Integer> receiveMessageWaitTimeSeconds) {
            this.receiveMessageWaitTimeSeconds = receiveMessageWaitTimeSeconds;
            return this;
        }

        public Builder setReceiveMessageWaitTimeSeconds(@Nullable Integer receiveMessageWaitTimeSeconds) {
            this.receiveMessageWaitTimeSeconds = Input.ofNullable(receiveMessageWaitTimeSeconds);
            return this;
        }

        public Builder setRedriveAllowPolicy(@Nullable Input<Object> redriveAllowPolicy) {
            this.redriveAllowPolicy = redriveAllowPolicy;
            return this;
        }

        public Builder setRedriveAllowPolicy(@Nullable Object redriveAllowPolicy) {
            this.redriveAllowPolicy = Input.ofNullable(redriveAllowPolicy);
            return this;
        }

        public Builder setRedrivePolicy(@Nullable Input<Object> redrivePolicy) {
            this.redrivePolicy = redrivePolicy;
            return this;
        }

        public Builder setRedrivePolicy(@Nullable Object redrivePolicy) {
            this.redrivePolicy = Input.ofNullable(redrivePolicy);
            return this;
        }

        public Builder setTags(@Nullable Input<List<QueueTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<QueueTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVisibilityTimeout(@Nullable Input<Integer> visibilityTimeout) {
            this.visibilityTimeout = visibilityTimeout;
            return this;
        }

        public Builder setVisibilityTimeout(@Nullable Integer visibilityTimeout) {
            this.visibilityTimeout = Input.ofNullable(visibilityTimeout);
            return this;
        }

        public QueueArgs build() {
            return new QueueArgs(contentBasedDeduplication, deduplicationScope, delaySeconds, fifoQueue, fifoThroughputLimit, kmsDataKeyReusePeriodSeconds, kmsMasterKeyId, maximumMessageSize, messageRetentionPeriod, queueName, receiveMessageWaitTimeSeconds, redriveAllowPolicy, redrivePolicy, tags, visibilityTimeout);
        }
    }
}
