// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.ivs.outputs;

import io.pulumi.awsnative.ivs.enums.ChannelLatencyMode;
import io.pulumi.awsnative.ivs.enums.ChannelType;
import io.pulumi.awsnative.ivs.outputs.ChannelTag;
import io.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetChannelResult {
    /**
     * Channel ARN is automatically generated on creation and assigned as the unique identifier.
     * 
     */
    private final @Nullable String arn;
    /**
     * Whether the channel is authorized.
     * 
     */
    private final @Nullable Boolean authorized;
    /**
     * Channel ingest endpoint, part of the definition of an ingest server, used when you set up streaming software.
     * 
     */
    private final @Nullable String ingestEndpoint;
    /**
     * Channel latency mode.
     * 
     */
    private final @Nullable ChannelLatencyMode latencyMode;
    /**
     * Channel
     * 
     */
    private final @Nullable String name;
    /**
     * Channel Playback URL.
     * 
     */
    private final @Nullable String playbackUrl;
    /**
     * Recording Configuration ARN. A value other than an empty string indicates that recording is enabled. Default: “” (recording is disabled).
     * 
     */
    private final @Nullable String recordingConfigurationArn;
    /**
     * A list of key-value pairs that contain metadata for the asset model.
     * 
     */
    private final @Nullable List<ChannelTag> tags;
    /**
     * Channel type, which determines the allowable resolution and bitrate. If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.
     * 
     */
    private final @Nullable ChannelType type;

    @CustomType.Constructor
    private GetChannelResult(
        @CustomType.Parameter("arn") @Nullable String arn,
        @CustomType.Parameter("authorized") @Nullable Boolean authorized,
        @CustomType.Parameter("ingestEndpoint") @Nullable String ingestEndpoint,
        @CustomType.Parameter("latencyMode") @Nullable ChannelLatencyMode latencyMode,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("playbackUrl") @Nullable String playbackUrl,
        @CustomType.Parameter("recordingConfigurationArn") @Nullable String recordingConfigurationArn,
        @CustomType.Parameter("tags") @Nullable List<ChannelTag> tags,
        @CustomType.Parameter("type") @Nullable ChannelType type) {
        this.arn = arn;
        this.authorized = authorized;
        this.ingestEndpoint = ingestEndpoint;
        this.latencyMode = latencyMode;
        this.name = name;
        this.playbackUrl = playbackUrl;
        this.recordingConfigurationArn = recordingConfigurationArn;
        this.tags = tags;
        this.type = type;
    }

    /**
     * Channel ARN is automatically generated on creation and assigned as the unique identifier.
     * 
    */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * Whether the channel is authorized.
     * 
    */
    public Optional<Boolean> authorized() {
        return Optional.ofNullable(this.authorized);
    }
    /**
     * Channel ingest endpoint, part of the definition of an ingest server, used when you set up streaming software.
     * 
    */
    public Optional<String> ingestEndpoint() {
        return Optional.ofNullable(this.ingestEndpoint);
    }
    /**
     * Channel latency mode.
     * 
    */
    public Optional<ChannelLatencyMode> latencyMode() {
        return Optional.ofNullable(this.latencyMode);
    }
    /**
     * Channel
     * 
    */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Channel Playback URL.
     * 
    */
    public Optional<String> playbackUrl() {
        return Optional.ofNullable(this.playbackUrl);
    }
    /**
     * Recording Configuration ARN. A value other than an empty string indicates that recording is enabled. Default: “” (recording is disabled).
     * 
    */
    public Optional<String> recordingConfigurationArn() {
        return Optional.ofNullable(this.recordingConfigurationArn);
    }
    /**
     * A list of key-value pairs that contain metadata for the asset model.
     * 
    */
    public List<ChannelTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * Channel type, which determines the allowable resolution and bitrate. If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.
     * 
    */
    public Optional<ChannelType> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetChannelResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String arn;
        private @Nullable Boolean authorized;
        private @Nullable String ingestEndpoint;
        private @Nullable ChannelLatencyMode latencyMode;
        private @Nullable String name;
        private @Nullable String playbackUrl;
        private @Nullable String recordingConfigurationArn;
        private @Nullable List<ChannelTag> tags;
        private @Nullable ChannelType type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetChannelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authorized = defaults.authorized;
    	      this.ingestEndpoint = defaults.ingestEndpoint;
    	      this.latencyMode = defaults.latencyMode;
    	      this.name = defaults.name;
    	      this.playbackUrl = defaults.playbackUrl;
    	      this.recordingConfigurationArn = defaults.recordingConfigurationArn;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        public Builder authorized(@Nullable Boolean authorized) {
            this.authorized = authorized;
            return this;
        }
        public Builder ingestEndpoint(@Nullable String ingestEndpoint) {
            this.ingestEndpoint = ingestEndpoint;
            return this;
        }
        public Builder latencyMode(@Nullable ChannelLatencyMode latencyMode) {
            this.latencyMode = latencyMode;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder playbackUrl(@Nullable String playbackUrl) {
            this.playbackUrl = playbackUrl;
            return this;
        }
        public Builder recordingConfigurationArn(@Nullable String recordingConfigurationArn) {
            this.recordingConfigurationArn = recordingConfigurationArn;
            return this;
        }
        public Builder tags(@Nullable List<ChannelTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(ChannelTag... tags) {
            return tags(List.of(tags));
        }
        public Builder type(@Nullable ChannelType type) {
            this.type = type;
            return this;
        }        public GetChannelResult build() {
            return new GetChannelResult(arn, authorized, ingestEndpoint, latencyMode, name, playbackUrl, recordingConfigurationArn, tags, type);
        }
    }
}
