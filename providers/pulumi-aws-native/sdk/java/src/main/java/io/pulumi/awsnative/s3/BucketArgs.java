// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3;

import io.pulumi.awsnative.s3.enums.BucketAccessControl;
import io.pulumi.awsnative.s3.inputs.BucketAccelerateConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketAnalyticsConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketCorsConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketEncryptionArgs;
import io.pulumi.awsnative.s3.inputs.BucketIntelligentTieringConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketInventoryConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketLifecycleConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketLoggingConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketMetricsConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketNotificationConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketObjectLockConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketOwnershipControlsArgs;
import io.pulumi.awsnative.s3.inputs.BucketPublicAccessBlockConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketReplicationConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketTagArgs;
import io.pulumi.awsnative.s3.inputs.BucketVersioningConfigurationArgs;
import io.pulumi.awsnative.s3.inputs.BucketWebsiteConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketArgs Empty = new BucketArgs();

    /**
     * Configuration for the transfer acceleration state.
     * 
     */
    @InputImport(name="accelerateConfiguration")
        private final @Nullable Input<BucketAccelerateConfigurationArgs> accelerateConfiguration;

    public Input<BucketAccelerateConfigurationArgs> getAccelerateConfiguration() {
        return this.accelerateConfiguration == null ? Input.empty() : this.accelerateConfiguration;
    }

    /**
     * A canned access control list (ACL) that grants predefined permissions to the bucket.
     * 
     */
    @InputImport(name="accessControl")
        private final @Nullable Input<BucketAccessControl> accessControl;

    public Input<BucketAccessControl> getAccessControl() {
        return this.accessControl == null ? Input.empty() : this.accessControl;
    }

    /**
     * The configuration and any analyses for the analytics filter of an Amazon S3 bucket.
     * 
     */
    @InputImport(name="analyticsConfigurations")
        private final @Nullable Input<List<BucketAnalyticsConfigurationArgs>> analyticsConfigurations;

    public Input<List<BucketAnalyticsConfigurationArgs>> getAnalyticsConfigurations() {
        return this.analyticsConfigurations == null ? Input.empty() : this.analyticsConfigurations;
    }

    @InputImport(name="bucketEncryption")
        private final @Nullable Input<BucketEncryptionArgs> bucketEncryption;

    public Input<BucketEncryptionArgs> getBucketEncryption() {
        return this.bucketEncryption == null ? Input.empty() : this.bucketEncryption;
    }

    /**
     * A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name.
     * 
     */
    @InputImport(name="bucketName")
        private final @Nullable Input<String> bucketName;

    public Input<String> getBucketName() {
        return this.bucketName == null ? Input.empty() : this.bucketName;
    }

    /**
     * Rules that define cross-origin resource sharing of objects in this bucket.
     * 
     */
    @InputImport(name="corsConfiguration")
        private final @Nullable Input<BucketCorsConfigurationArgs> corsConfiguration;

    public Input<BucketCorsConfigurationArgs> getCorsConfiguration() {
        return this.corsConfiguration == null ? Input.empty() : this.corsConfiguration;
    }

    /**
     * Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
     * 
     */
    @InputImport(name="intelligentTieringConfigurations")
        private final @Nullable Input<List<BucketIntelligentTieringConfigurationArgs>> intelligentTieringConfigurations;

    public Input<List<BucketIntelligentTieringConfigurationArgs>> getIntelligentTieringConfigurations() {
        return this.intelligentTieringConfigurations == null ? Input.empty() : this.intelligentTieringConfigurations;
    }

    /**
     * The inventory configuration for an Amazon S3 bucket.
     * 
     */
    @InputImport(name="inventoryConfigurations")
        private final @Nullable Input<List<BucketInventoryConfigurationArgs>> inventoryConfigurations;

    public Input<List<BucketInventoryConfigurationArgs>> getInventoryConfigurations() {
        return this.inventoryConfigurations == null ? Input.empty() : this.inventoryConfigurations;
    }

    /**
     * Rules that define how Amazon S3 manages objects during their lifetime.
     * 
     */
    @InputImport(name="lifecycleConfiguration")
        private final @Nullable Input<BucketLifecycleConfigurationArgs> lifecycleConfiguration;

    public Input<BucketLifecycleConfigurationArgs> getLifecycleConfiguration() {
        return this.lifecycleConfiguration == null ? Input.empty() : this.lifecycleConfiguration;
    }

    /**
     * Settings that define where logs are stored.
     * 
     */
    @InputImport(name="loggingConfiguration")
        private final @Nullable Input<BucketLoggingConfigurationArgs> loggingConfiguration;

    public Input<BucketLoggingConfigurationArgs> getLoggingConfiguration() {
        return this.loggingConfiguration == null ? Input.empty() : this.loggingConfiguration;
    }

    /**
     * Settings that define a metrics configuration for the CloudWatch request metrics from the bucket.
     * 
     */
    @InputImport(name="metricsConfigurations")
        private final @Nullable Input<List<BucketMetricsConfigurationArgs>> metricsConfigurations;

    public Input<List<BucketMetricsConfigurationArgs>> getMetricsConfigurations() {
        return this.metricsConfigurations == null ? Input.empty() : this.metricsConfigurations;
    }

    /**
     * Configuration that defines how Amazon S3 handles bucket notifications.
     * 
     */
    @InputImport(name="notificationConfiguration")
        private final @Nullable Input<BucketNotificationConfigurationArgs> notificationConfiguration;

    public Input<BucketNotificationConfigurationArgs> getNotificationConfiguration() {
        return this.notificationConfiguration == null ? Input.empty() : this.notificationConfiguration;
    }

    /**
     * Places an Object Lock configuration on the specified bucket.
     * 
     */
    @InputImport(name="objectLockConfiguration")
        private final @Nullable Input<BucketObjectLockConfigurationArgs> objectLockConfiguration;

    public Input<BucketObjectLockConfigurationArgs> getObjectLockConfiguration() {
        return this.objectLockConfiguration == null ? Input.empty() : this.objectLockConfiguration;
    }

    /**
     * Indicates whether this bucket has an Object Lock configuration enabled.
     * 
     */
    @InputImport(name="objectLockEnabled")
        private final @Nullable Input<Boolean> objectLockEnabled;

    public Input<Boolean> getObjectLockEnabled() {
        return this.objectLockEnabled == null ? Input.empty() : this.objectLockEnabled;
    }

    /**
     * Specifies the container element for object ownership rules.
     * 
     */
    @InputImport(name="ownershipControls")
        private final @Nullable Input<BucketOwnershipControlsArgs> ownershipControls;

    public Input<BucketOwnershipControlsArgs> getOwnershipControls() {
        return this.ownershipControls == null ? Input.empty() : this.ownershipControls;
    }

    @InputImport(name="publicAccessBlockConfiguration")
        private final @Nullable Input<BucketPublicAccessBlockConfigurationArgs> publicAccessBlockConfiguration;

    public Input<BucketPublicAccessBlockConfigurationArgs> getPublicAccessBlockConfiguration() {
        return this.publicAccessBlockConfiguration == null ? Input.empty() : this.publicAccessBlockConfiguration;
    }

    /**
     * Configuration for replicating objects in an S3 bucket.
     * 
     */
    @InputImport(name="replicationConfiguration")
        private final @Nullable Input<BucketReplicationConfigurationArgs> replicationConfiguration;

    public Input<BucketReplicationConfigurationArgs> getReplicationConfiguration() {
        return this.replicationConfiguration == null ? Input.empty() : this.replicationConfiguration;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this S3 bucket.
     * 
     */
    @InputImport(name="tags")
        private final @Nullable Input<List<BucketTagArgs>> tags;

    public Input<List<BucketTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="versioningConfiguration")
        private final @Nullable Input<BucketVersioningConfigurationArgs> versioningConfiguration;

    public Input<BucketVersioningConfigurationArgs> getVersioningConfiguration() {
        return this.versioningConfiguration == null ? Input.empty() : this.versioningConfiguration;
    }

    @InputImport(name="websiteConfiguration")
        private final @Nullable Input<BucketWebsiteConfigurationArgs> websiteConfiguration;

    public Input<BucketWebsiteConfigurationArgs> getWebsiteConfiguration() {
        return this.websiteConfiguration == null ? Input.empty() : this.websiteConfiguration;
    }

    public BucketArgs(
        @Nullable Input<BucketAccelerateConfigurationArgs> accelerateConfiguration,
        @Nullable Input<BucketAccessControl> accessControl,
        @Nullable Input<List<BucketAnalyticsConfigurationArgs>> analyticsConfigurations,
        @Nullable Input<BucketEncryptionArgs> bucketEncryption,
        @Nullable Input<String> bucketName,
        @Nullable Input<BucketCorsConfigurationArgs> corsConfiguration,
        @Nullable Input<List<BucketIntelligentTieringConfigurationArgs>> intelligentTieringConfigurations,
        @Nullable Input<List<BucketInventoryConfigurationArgs>> inventoryConfigurations,
        @Nullable Input<BucketLifecycleConfigurationArgs> lifecycleConfiguration,
        @Nullable Input<BucketLoggingConfigurationArgs> loggingConfiguration,
        @Nullable Input<List<BucketMetricsConfigurationArgs>> metricsConfigurations,
        @Nullable Input<BucketNotificationConfigurationArgs> notificationConfiguration,
        @Nullable Input<BucketObjectLockConfigurationArgs> objectLockConfiguration,
        @Nullable Input<Boolean> objectLockEnabled,
        @Nullable Input<BucketOwnershipControlsArgs> ownershipControls,
        @Nullable Input<BucketPublicAccessBlockConfigurationArgs> publicAccessBlockConfiguration,
        @Nullable Input<BucketReplicationConfigurationArgs> replicationConfiguration,
        @Nullable Input<List<BucketTagArgs>> tags,
        @Nullable Input<BucketVersioningConfigurationArgs> versioningConfiguration,
        @Nullable Input<BucketWebsiteConfigurationArgs> websiteConfiguration) {
        this.accelerateConfiguration = accelerateConfiguration;
        this.accessControl = accessControl;
        this.analyticsConfigurations = analyticsConfigurations;
        this.bucketEncryption = bucketEncryption;
        this.bucketName = bucketName;
        this.corsConfiguration = corsConfiguration;
        this.intelligentTieringConfigurations = intelligentTieringConfigurations;
        this.inventoryConfigurations = inventoryConfigurations;
        this.lifecycleConfiguration = lifecycleConfiguration;
        this.loggingConfiguration = loggingConfiguration;
        this.metricsConfigurations = metricsConfigurations;
        this.notificationConfiguration = notificationConfiguration;
        this.objectLockConfiguration = objectLockConfiguration;
        this.objectLockEnabled = objectLockEnabled;
        this.ownershipControls = ownershipControls;
        this.publicAccessBlockConfiguration = publicAccessBlockConfiguration;
        this.replicationConfiguration = replicationConfiguration;
        this.tags = tags;
        this.versioningConfiguration = versioningConfiguration;
        this.websiteConfiguration = websiteConfiguration;
    }

    private BucketArgs() {
        this.accelerateConfiguration = Input.empty();
        this.accessControl = Input.empty();
        this.analyticsConfigurations = Input.empty();
        this.bucketEncryption = Input.empty();
        this.bucketName = Input.empty();
        this.corsConfiguration = Input.empty();
        this.intelligentTieringConfigurations = Input.empty();
        this.inventoryConfigurations = Input.empty();
        this.lifecycleConfiguration = Input.empty();
        this.loggingConfiguration = Input.empty();
        this.metricsConfigurations = Input.empty();
        this.notificationConfiguration = Input.empty();
        this.objectLockConfiguration = Input.empty();
        this.objectLockEnabled = Input.empty();
        this.ownershipControls = Input.empty();
        this.publicAccessBlockConfiguration = Input.empty();
        this.replicationConfiguration = Input.empty();
        this.tags = Input.empty();
        this.versioningConfiguration = Input.empty();
        this.websiteConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<BucketAccelerateConfigurationArgs> accelerateConfiguration;
        private @Nullable Input<BucketAccessControl> accessControl;
        private @Nullable Input<List<BucketAnalyticsConfigurationArgs>> analyticsConfigurations;
        private @Nullable Input<BucketEncryptionArgs> bucketEncryption;
        private @Nullable Input<String> bucketName;
        private @Nullable Input<BucketCorsConfigurationArgs> corsConfiguration;
        private @Nullable Input<List<BucketIntelligentTieringConfigurationArgs>> intelligentTieringConfigurations;
        private @Nullable Input<List<BucketInventoryConfigurationArgs>> inventoryConfigurations;
        private @Nullable Input<BucketLifecycleConfigurationArgs> lifecycleConfiguration;
        private @Nullable Input<BucketLoggingConfigurationArgs> loggingConfiguration;
        private @Nullable Input<List<BucketMetricsConfigurationArgs>> metricsConfigurations;
        private @Nullable Input<BucketNotificationConfigurationArgs> notificationConfiguration;
        private @Nullable Input<BucketObjectLockConfigurationArgs> objectLockConfiguration;
        private @Nullable Input<Boolean> objectLockEnabled;
        private @Nullable Input<BucketOwnershipControlsArgs> ownershipControls;
        private @Nullable Input<BucketPublicAccessBlockConfigurationArgs> publicAccessBlockConfiguration;
        private @Nullable Input<BucketReplicationConfigurationArgs> replicationConfiguration;
        private @Nullable Input<List<BucketTagArgs>> tags;
        private @Nullable Input<BucketVersioningConfigurationArgs> versioningConfiguration;
        private @Nullable Input<BucketWebsiteConfigurationArgs> websiteConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerateConfiguration = defaults.accelerateConfiguration;
    	      this.accessControl = defaults.accessControl;
    	      this.analyticsConfigurations = defaults.analyticsConfigurations;
    	      this.bucketEncryption = defaults.bucketEncryption;
    	      this.bucketName = defaults.bucketName;
    	      this.corsConfiguration = defaults.corsConfiguration;
    	      this.intelligentTieringConfigurations = defaults.intelligentTieringConfigurations;
    	      this.inventoryConfigurations = defaults.inventoryConfigurations;
    	      this.lifecycleConfiguration = defaults.lifecycleConfiguration;
    	      this.loggingConfiguration = defaults.loggingConfiguration;
    	      this.metricsConfigurations = defaults.metricsConfigurations;
    	      this.notificationConfiguration = defaults.notificationConfiguration;
    	      this.objectLockConfiguration = defaults.objectLockConfiguration;
    	      this.objectLockEnabled = defaults.objectLockEnabled;
    	      this.ownershipControls = defaults.ownershipControls;
    	      this.publicAccessBlockConfiguration = defaults.publicAccessBlockConfiguration;
    	      this.replicationConfiguration = defaults.replicationConfiguration;
    	      this.tags = defaults.tags;
    	      this.versioningConfiguration = defaults.versioningConfiguration;
    	      this.websiteConfiguration = defaults.websiteConfiguration;
        }

        public Builder setAccelerateConfiguration(@Nullable Input<BucketAccelerateConfigurationArgs> accelerateConfiguration) {
            this.accelerateConfiguration = accelerateConfiguration;
            return this;
        }

        public Builder setAccelerateConfiguration(@Nullable BucketAccelerateConfigurationArgs accelerateConfiguration) {
            this.accelerateConfiguration = Input.ofNullable(accelerateConfiguration);
            return this;
        }

        public Builder setAccessControl(@Nullable Input<BucketAccessControl> accessControl) {
            this.accessControl = accessControl;
            return this;
        }

        public Builder setAccessControl(@Nullable BucketAccessControl accessControl) {
            this.accessControl = Input.ofNullable(accessControl);
            return this;
        }

        public Builder setAnalyticsConfigurations(@Nullable Input<List<BucketAnalyticsConfigurationArgs>> analyticsConfigurations) {
            this.analyticsConfigurations = analyticsConfigurations;
            return this;
        }

        public Builder setAnalyticsConfigurations(@Nullable List<BucketAnalyticsConfigurationArgs> analyticsConfigurations) {
            this.analyticsConfigurations = Input.ofNullable(analyticsConfigurations);
            return this;
        }

        public Builder setBucketEncryption(@Nullable Input<BucketEncryptionArgs> bucketEncryption) {
            this.bucketEncryption = bucketEncryption;
            return this;
        }

        public Builder setBucketEncryption(@Nullable BucketEncryptionArgs bucketEncryption) {
            this.bucketEncryption = Input.ofNullable(bucketEncryption);
            return this;
        }

        public Builder setBucketName(@Nullable Input<String> bucketName) {
            this.bucketName = bucketName;
            return this;
        }

        public Builder setBucketName(@Nullable String bucketName) {
            this.bucketName = Input.ofNullable(bucketName);
            return this;
        }

        public Builder setCorsConfiguration(@Nullable Input<BucketCorsConfigurationArgs> corsConfiguration) {
            this.corsConfiguration = corsConfiguration;
            return this;
        }

        public Builder setCorsConfiguration(@Nullable BucketCorsConfigurationArgs corsConfiguration) {
            this.corsConfiguration = Input.ofNullable(corsConfiguration);
            return this;
        }

        public Builder setIntelligentTieringConfigurations(@Nullable Input<List<BucketIntelligentTieringConfigurationArgs>> intelligentTieringConfigurations) {
            this.intelligentTieringConfigurations = intelligentTieringConfigurations;
            return this;
        }

        public Builder setIntelligentTieringConfigurations(@Nullable List<BucketIntelligentTieringConfigurationArgs> intelligentTieringConfigurations) {
            this.intelligentTieringConfigurations = Input.ofNullable(intelligentTieringConfigurations);
            return this;
        }

        public Builder setInventoryConfigurations(@Nullable Input<List<BucketInventoryConfigurationArgs>> inventoryConfigurations) {
            this.inventoryConfigurations = inventoryConfigurations;
            return this;
        }

        public Builder setInventoryConfigurations(@Nullable List<BucketInventoryConfigurationArgs> inventoryConfigurations) {
            this.inventoryConfigurations = Input.ofNullable(inventoryConfigurations);
            return this;
        }

        public Builder setLifecycleConfiguration(@Nullable Input<BucketLifecycleConfigurationArgs> lifecycleConfiguration) {
            this.lifecycleConfiguration = lifecycleConfiguration;
            return this;
        }

        public Builder setLifecycleConfiguration(@Nullable BucketLifecycleConfigurationArgs lifecycleConfiguration) {
            this.lifecycleConfiguration = Input.ofNullable(lifecycleConfiguration);
            return this;
        }

        public Builder setLoggingConfiguration(@Nullable Input<BucketLoggingConfigurationArgs> loggingConfiguration) {
            this.loggingConfiguration = loggingConfiguration;
            return this;
        }

        public Builder setLoggingConfiguration(@Nullable BucketLoggingConfigurationArgs loggingConfiguration) {
            this.loggingConfiguration = Input.ofNullable(loggingConfiguration);
            return this;
        }

        public Builder setMetricsConfigurations(@Nullable Input<List<BucketMetricsConfigurationArgs>> metricsConfigurations) {
            this.metricsConfigurations = metricsConfigurations;
            return this;
        }

        public Builder setMetricsConfigurations(@Nullable List<BucketMetricsConfigurationArgs> metricsConfigurations) {
            this.metricsConfigurations = Input.ofNullable(metricsConfigurations);
            return this;
        }

        public Builder setNotificationConfiguration(@Nullable Input<BucketNotificationConfigurationArgs> notificationConfiguration) {
            this.notificationConfiguration = notificationConfiguration;
            return this;
        }

        public Builder setNotificationConfiguration(@Nullable BucketNotificationConfigurationArgs notificationConfiguration) {
            this.notificationConfiguration = Input.ofNullable(notificationConfiguration);
            return this;
        }

        public Builder setObjectLockConfiguration(@Nullable Input<BucketObjectLockConfigurationArgs> objectLockConfiguration) {
            this.objectLockConfiguration = objectLockConfiguration;
            return this;
        }

        public Builder setObjectLockConfiguration(@Nullable BucketObjectLockConfigurationArgs objectLockConfiguration) {
            this.objectLockConfiguration = Input.ofNullable(objectLockConfiguration);
            return this;
        }

        public Builder setObjectLockEnabled(@Nullable Input<Boolean> objectLockEnabled) {
            this.objectLockEnabled = objectLockEnabled;
            return this;
        }

        public Builder setObjectLockEnabled(@Nullable Boolean objectLockEnabled) {
            this.objectLockEnabled = Input.ofNullable(objectLockEnabled);
            return this;
        }

        public Builder setOwnershipControls(@Nullable Input<BucketOwnershipControlsArgs> ownershipControls) {
            this.ownershipControls = ownershipControls;
            return this;
        }

        public Builder setOwnershipControls(@Nullable BucketOwnershipControlsArgs ownershipControls) {
            this.ownershipControls = Input.ofNullable(ownershipControls);
            return this;
        }

        public Builder setPublicAccessBlockConfiguration(@Nullable Input<BucketPublicAccessBlockConfigurationArgs> publicAccessBlockConfiguration) {
            this.publicAccessBlockConfiguration = publicAccessBlockConfiguration;
            return this;
        }

        public Builder setPublicAccessBlockConfiguration(@Nullable BucketPublicAccessBlockConfigurationArgs publicAccessBlockConfiguration) {
            this.publicAccessBlockConfiguration = Input.ofNullable(publicAccessBlockConfiguration);
            return this;
        }

        public Builder setReplicationConfiguration(@Nullable Input<BucketReplicationConfigurationArgs> replicationConfiguration) {
            this.replicationConfiguration = replicationConfiguration;
            return this;
        }

        public Builder setReplicationConfiguration(@Nullable BucketReplicationConfigurationArgs replicationConfiguration) {
            this.replicationConfiguration = Input.ofNullable(replicationConfiguration);
            return this;
        }

        public Builder setTags(@Nullable Input<List<BucketTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<BucketTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVersioningConfiguration(@Nullable Input<BucketVersioningConfigurationArgs> versioningConfiguration) {
            this.versioningConfiguration = versioningConfiguration;
            return this;
        }

        public Builder setVersioningConfiguration(@Nullable BucketVersioningConfigurationArgs versioningConfiguration) {
            this.versioningConfiguration = Input.ofNullable(versioningConfiguration);
            return this;
        }

        public Builder setWebsiteConfiguration(@Nullable Input<BucketWebsiteConfigurationArgs> websiteConfiguration) {
            this.websiteConfiguration = websiteConfiguration;
            return this;
        }

        public Builder setWebsiteConfiguration(@Nullable BucketWebsiteConfigurationArgs websiteConfiguration) {
            this.websiteConfiguration = Input.ofNullable(websiteConfiguration);
            return this;
        }
        public BucketArgs build() {
            return new BucketArgs(accelerateConfiguration, accessControl, analyticsConfigurations, bucketEncryption, bucketName, corsConfiguration, intelligentTieringConfigurations, inventoryConfigurations, lifecycleConfiguration, loggingConfiguration, metricsConfigurations, notificationConfiguration, objectLockConfiguration, objectLockEnabled, ownershipControls, publicAccessBlockConfiguration, replicationConfiguration, tags, versioningConfiguration, websiteConfiguration);
        }
    }
}
