// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.connect;

import io.pulumi.awsnative.connect.inputs.QuickConnectConfigArgs;
import io.pulumi.awsnative.connect.inputs.QuickConnectTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QuickConnectArgs extends io.pulumi.resources.ResourceArgs {

    public static final QuickConnectArgs Empty = new QuickConnectArgs();

    /**
     * The description of the quick connect.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The identifier of the Amazon Connect instance.
     * 
     */
    @Import(name="instanceArn", required=true)
      private final Output<String> instanceArn;

    public Output<String> getInstanceArn() {
        return this.instanceArn;
    }

    /**
     * The name of the quick connect.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Configuration settings for the quick connect.
     * 
     */
    @Import(name="quickConnectConfig", required=true)
      private final Output<QuickConnectConfigArgs> quickConnectConfig;

    public Output<QuickConnectConfigArgs> getQuickConnectConfig() {
        return this.quickConnectConfig;
    }

    /**
     * One or more tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<QuickConnectTagArgs>> tags;

    public Output<List<QuickConnectTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public QuickConnectArgs(
        @Nullable Output<String> description,
        Output<String> instanceArn,
        @Nullable Output<String> name,
        Output<QuickConnectConfigArgs> quickConnectConfig,
        @Nullable Output<List<QuickConnectTagArgs>> tags) {
        this.description = description;
        this.instanceArn = Objects.requireNonNull(instanceArn, "expected parameter 'instanceArn' to be non-null");
        this.name = name;
        this.quickConnectConfig = Objects.requireNonNull(quickConnectConfig, "expected parameter 'quickConnectConfig' to be non-null");
        this.tags = tags;
    }

    private QuickConnectArgs() {
        this.description = Output.empty();
        this.instanceArn = Output.empty();
        this.name = Output.empty();
        this.quickConnectConfig = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QuickConnectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> instanceArn;
        private @Nullable Output<String> name;
        private Output<QuickConnectConfigArgs> quickConnectConfig;
        private @Nullable Output<List<QuickConnectTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(QuickConnectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.instanceArn = defaults.instanceArn;
    	      this.name = defaults.name;
    	      this.quickConnectConfig = defaults.quickConnectConfig;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder instanceArn(Output<String> instanceArn) {
            this.instanceArn = Objects.requireNonNull(instanceArn);
            return this;
        }
        public Builder instanceArn(String instanceArn) {
            this.instanceArn = Output.of(Objects.requireNonNull(instanceArn));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder quickConnectConfig(Output<QuickConnectConfigArgs> quickConnectConfig) {
            this.quickConnectConfig = Objects.requireNonNull(quickConnectConfig);
            return this;
        }
        public Builder quickConnectConfig(QuickConnectConfigArgs quickConnectConfig) {
            this.quickConnectConfig = Output.of(Objects.requireNonNull(quickConnectConfig));
            return this;
        }
        public Builder tags(@Nullable Output<List<QuickConnectTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<QuickConnectTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(QuickConnectTagArgs... tags) {
            return tags(List.of(tags));
        }        public QuickConnectArgs build() {
            return new QuickConnectArgs(description, instanceArn, name, quickConnectConfig, tags);
        }
    }
}
