// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.mediapackage.outputs;

import io.pulumi.awsnative.mediapackage.enums.PackagingConfigurationStreamSelectionStreamOrder;
import io.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PackagingConfigurationStreamSelection {
    /**
     * The maximum video bitrate (bps) to include in output.
     * 
     */
    private final @Nullable Integer maxVideoBitsPerSecond;
    /**
     * The minimum video bitrate (bps) to include in output.
     * 
     */
    private final @Nullable Integer minVideoBitsPerSecond;
    /**
     * A directive that determines the order of streams in the output.
     * 
     */
    private final @Nullable PackagingConfigurationStreamSelectionStreamOrder streamOrder;

    @CustomType.Constructor
    private PackagingConfigurationStreamSelection(
        @CustomType.Parameter("maxVideoBitsPerSecond") @Nullable Integer maxVideoBitsPerSecond,
        @CustomType.Parameter("minVideoBitsPerSecond") @Nullable Integer minVideoBitsPerSecond,
        @CustomType.Parameter("streamOrder") @Nullable PackagingConfigurationStreamSelectionStreamOrder streamOrder) {
        this.maxVideoBitsPerSecond = maxVideoBitsPerSecond;
        this.minVideoBitsPerSecond = minVideoBitsPerSecond;
        this.streamOrder = streamOrder;
    }

    /**
     * The maximum video bitrate (bps) to include in output.
     * 
    */
    public Optional<Integer> getMaxVideoBitsPerSecond() {
        return Optional.ofNullable(this.maxVideoBitsPerSecond);
    }
    /**
     * The minimum video bitrate (bps) to include in output.
     * 
    */
    public Optional<Integer> getMinVideoBitsPerSecond() {
        return Optional.ofNullable(this.minVideoBitsPerSecond);
    }
    /**
     * A directive that determines the order of streams in the output.
     * 
    */
    public Optional<PackagingConfigurationStreamSelectionStreamOrder> getStreamOrder() {
        return Optional.ofNullable(this.streamOrder);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackagingConfigurationStreamSelection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer maxVideoBitsPerSecond;
        private @Nullable Integer minVideoBitsPerSecond;
        private @Nullable PackagingConfigurationStreamSelectionStreamOrder streamOrder;

        public Builder() {
    	      // Empty
        }

        public Builder(PackagingConfigurationStreamSelection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxVideoBitsPerSecond = defaults.maxVideoBitsPerSecond;
    	      this.minVideoBitsPerSecond = defaults.minVideoBitsPerSecond;
    	      this.streamOrder = defaults.streamOrder;
        }

        public Builder maxVideoBitsPerSecond(@Nullable Integer maxVideoBitsPerSecond) {
            this.maxVideoBitsPerSecond = maxVideoBitsPerSecond;
            return this;
        }

        public Builder minVideoBitsPerSecond(@Nullable Integer minVideoBitsPerSecond) {
            this.minVideoBitsPerSecond = minVideoBitsPerSecond;
            return this;
        }

        public Builder streamOrder(@Nullable PackagingConfigurationStreamSelectionStreamOrder streamOrder) {
            this.streamOrder = streamOrder;
            return this;
        }
        public PackagingConfigurationStreamSelection build() {
            return new PackagingConfigurationStreamSelection(maxVideoBitsPerSecond, minVideoBitsPerSecond, streamOrder);
        }
    }
}
