// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.kinesisfirehose.inputs;

import io.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamSplunkDestinationConfigurationHECEndpointType;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamCloudWatchLoggingOptions;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamProcessingConfiguration;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamS3DestinationConfiguration;
import io.pulumi.awsnative.kinesisfirehose.inputs.DeliveryStreamSplunkRetryOptions;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeliveryStreamSplunkDestinationConfiguration extends io.pulumi.resources.InvokeArgs {

    public static final DeliveryStreamSplunkDestinationConfiguration Empty = new DeliveryStreamSplunkDestinationConfiguration();

    @Import(name="cloudWatchLoggingOptions")
      private final @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;

    public Optional<DeliveryStreamCloudWatchLoggingOptions> getCloudWatchLoggingOptions() {
        return this.cloudWatchLoggingOptions == null ? Optional.empty() : Optional.ofNullable(this.cloudWatchLoggingOptions);
    }

    @Import(name="hECAcknowledgmentTimeoutInSeconds")
      private final @Nullable Integer hECAcknowledgmentTimeoutInSeconds;

    public Optional<Integer> getHECAcknowledgmentTimeoutInSeconds() {
        return this.hECAcknowledgmentTimeoutInSeconds == null ? Optional.empty() : Optional.ofNullable(this.hECAcknowledgmentTimeoutInSeconds);
    }

    @Import(name="hECEndpoint", required=true)
      private final String hECEndpoint;

    public String getHECEndpoint() {
        return this.hECEndpoint;
    }

    @Import(name="hECEndpointType", required=true)
      private final DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType;

    public DeliveryStreamSplunkDestinationConfigurationHECEndpointType getHECEndpointType() {
        return this.hECEndpointType;
    }

    @Import(name="hECToken", required=true)
      private final String hECToken;

    public String getHECToken() {
        return this.hECToken;
    }

    @Import(name="processingConfiguration")
      private final @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;

    public Optional<DeliveryStreamProcessingConfiguration> getProcessingConfiguration() {
        return this.processingConfiguration == null ? Optional.empty() : Optional.ofNullable(this.processingConfiguration);
    }

    @Import(name="retryOptions")
      private final @Nullable DeliveryStreamSplunkRetryOptions retryOptions;

    public Optional<DeliveryStreamSplunkRetryOptions> getRetryOptions() {
        return this.retryOptions == null ? Optional.empty() : Optional.ofNullable(this.retryOptions);
    }

    @Import(name="s3BackupMode")
      private final @Nullable String s3BackupMode;

    public Optional<String> getS3BackupMode() {
        return this.s3BackupMode == null ? Optional.empty() : Optional.ofNullable(this.s3BackupMode);
    }

    @Import(name="s3Configuration", required=true)
      private final DeliveryStreamS3DestinationConfiguration s3Configuration;

    public DeliveryStreamS3DestinationConfiguration getS3Configuration() {
        return this.s3Configuration;
    }

    public DeliveryStreamSplunkDestinationConfiguration(
        @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions,
        @Nullable Integer hECAcknowledgmentTimeoutInSeconds,
        String hECEndpoint,
        DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType,
        String hECToken,
        @Nullable DeliveryStreamProcessingConfiguration processingConfiguration,
        @Nullable DeliveryStreamSplunkRetryOptions retryOptions,
        @Nullable String s3BackupMode,
        DeliveryStreamS3DestinationConfiguration s3Configuration) {
        this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
        this.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
        this.hECEndpoint = Objects.requireNonNull(hECEndpoint, "expected parameter 'hECEndpoint' to be non-null");
        this.hECEndpointType = Objects.requireNonNull(hECEndpointType, "expected parameter 'hECEndpointType' to be non-null");
        this.hECToken = Objects.requireNonNull(hECToken, "expected parameter 'hECToken' to be non-null");
        this.processingConfiguration = processingConfiguration;
        this.retryOptions = retryOptions;
        this.s3BackupMode = s3BackupMode;
        this.s3Configuration = Objects.requireNonNull(s3Configuration, "expected parameter 's3Configuration' to be non-null");
    }

    private DeliveryStreamSplunkDestinationConfiguration() {
        this.cloudWatchLoggingOptions = null;
        this.hECAcknowledgmentTimeoutInSeconds = null;
        this.hECEndpoint = null;
        this.hECEndpointType = null;
        this.hECToken = null;
        this.processingConfiguration = null;
        this.retryOptions = null;
        this.s3BackupMode = null;
        this.s3Configuration = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamSplunkDestinationConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
        private @Nullable Integer hECAcknowledgmentTimeoutInSeconds;
        private String hECEndpoint;
        private DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType;
        private String hECToken;
        private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
        private @Nullable DeliveryStreamSplunkRetryOptions retryOptions;
        private @Nullable String s3BackupMode;
        private DeliveryStreamS3DestinationConfiguration s3Configuration;

        public Builder() {
    	      // Empty
        }

        public Builder(DeliveryStreamSplunkDestinationConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.hECAcknowledgmentTimeoutInSeconds = defaults.hECAcknowledgmentTimeoutInSeconds;
    	      this.hECEndpoint = defaults.hECEndpoint;
    	      this.hECEndpointType = defaults.hECEndpointType;
    	      this.hECToken = defaults.hECToken;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryOptions = defaults.retryOptions;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
        }

        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }
        public Builder hECAcknowledgmentTimeoutInSeconds(@Nullable Integer hECAcknowledgmentTimeoutInSeconds) {
            this.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds;
            return this;
        }
        public Builder hECEndpoint(String hECEndpoint) {
            this.hECEndpoint = Objects.requireNonNull(hECEndpoint);
            return this;
        }
        public Builder hECEndpointType(DeliveryStreamSplunkDestinationConfigurationHECEndpointType hECEndpointType) {
            this.hECEndpointType = Objects.requireNonNull(hECEndpointType);
            return this;
        }
        public Builder hECToken(String hECToken) {
            this.hECToken = Objects.requireNonNull(hECToken);
            return this;
        }
        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        public Builder retryOptions(@Nullable DeliveryStreamSplunkRetryOptions retryOptions) {
            this.retryOptions = retryOptions;
            return this;
        }
        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        public Builder s3Configuration(DeliveryStreamS3DestinationConfiguration s3Configuration) {
            this.s3Configuration = Objects.requireNonNull(s3Configuration);
            return this;
        }        public DeliveryStreamSplunkDestinationConfiguration build() {
            return new DeliveryStreamSplunkDestinationConfiguration(cloudWatchLoggingOptions, hECAcknowledgmentTimeoutInSeconds, hECEndpoint, hECEndpointType, hECToken, processingConfiguration, retryOptions, s3BackupMode, s3Configuration);
        }
    }
}
