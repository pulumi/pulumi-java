// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.databrew;

import io.pulumi.awsnative.databrew.inputs.RulesetRuleArgs;
import io.pulumi.awsnative.databrew.inputs.RulesetTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RulesetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RulesetArgs Empty = new RulesetArgs();

    /**
     * Description of the Ruleset
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Name of the Ruleset
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * List of the data quality rules in the ruleset
     * 
     */
    @InputImport(name="rules", required=true)
      private final Output<List<RulesetRuleArgs>> rules;

    public Output<List<RulesetRuleArgs>> getRules() {
        return this.rules;
    }

    @InputImport(name="tags")
      private final @Nullable Output<List<RulesetTagArgs>> tags;

    public Output<List<RulesetTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Arn of the target resource (dataset) to apply the ruleset to
     * 
     */
    @InputImport(name="targetArn", required=true)
      private final Output<String> targetArn;

    public Output<String> getTargetArn() {
        return this.targetArn;
    }

    public RulesetArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        Output<List<RulesetRuleArgs>> rules,
        @Nullable Output<List<RulesetTagArgs>> tags,
        Output<String> targetArn) {
        this.description = description;
        this.name = name;
        this.rules = Objects.requireNonNull(rules, "expected parameter 'rules' to be non-null");
        this.tags = tags;
        this.targetArn = Objects.requireNonNull(targetArn, "expected parameter 'targetArn' to be non-null");
    }

    private RulesetArgs() {
        this.description = Output.empty();
        this.name = Output.empty();
        this.rules = Output.empty();
        this.tags = Output.empty();
        this.targetArn = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private Output<List<RulesetRuleArgs>> rules;
        private @Nullable Output<List<RulesetTagArgs>> tags;
        private Output<String> targetArn;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.rules = defaults.rules;
    	      this.tags = defaults.tags;
    	      this.targetArn = defaults.targetArn;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder rules(Output<List<RulesetRuleArgs>> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }

        public Builder rules(List<RulesetRuleArgs> rules) {
            this.rules = Output.of(Objects.requireNonNull(rules));
            return this;
        }

        public Builder tags(@Nullable Output<List<RulesetTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<RulesetTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder targetArn(Output<String> targetArn) {
            this.targetArn = Objects.requireNonNull(targetArn);
            return this;
        }

        public Builder targetArn(String targetArn) {
            this.targetArn = Output.of(Objects.requireNonNull(targetArn));
            return this;
        }
        public RulesetArgs build() {
            return new RulesetArgs(description, name, rules, tags, targetArn);
        }
    }
}
