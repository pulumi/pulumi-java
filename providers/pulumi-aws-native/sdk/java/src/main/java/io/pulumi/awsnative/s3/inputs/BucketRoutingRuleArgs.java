// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3.inputs;

import io.pulumi.awsnative.s3.inputs.BucketRedirectRuleArgs;
import io.pulumi.awsnative.s3.inputs.BucketRoutingRuleConditionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the redirect behavior and when a redirect is applied.
 * 
 */
public final class BucketRoutingRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketRoutingRuleArgs Empty = new BucketRoutingRuleArgs();

    /**
     * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
     * 
     */
    @InputImport(name="redirectRule", required=true)
    private final Input<BucketRedirectRuleArgs> redirectRule;

    public Input<BucketRedirectRuleArgs> getRedirectRule() {
        return this.redirectRule;
    }

    @InputImport(name="routingRuleCondition")
    private final @Nullable Input<BucketRoutingRuleConditionArgs> routingRuleCondition;

    public Input<BucketRoutingRuleConditionArgs> getRoutingRuleCondition() {
        return this.routingRuleCondition == null ? Input.empty() : this.routingRuleCondition;
    }

    public BucketRoutingRuleArgs(
        Input<BucketRedirectRuleArgs> redirectRule,
        @Nullable Input<BucketRoutingRuleConditionArgs> routingRuleCondition) {
        this.redirectRule = Objects.requireNonNull(redirectRule, "expected parameter 'redirectRule' to be non-null");
        this.routingRuleCondition = routingRuleCondition;
    }

    private BucketRoutingRuleArgs() {
        this.redirectRule = Input.empty();
        this.routingRuleCondition = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<BucketRedirectRuleArgs> redirectRule;
        private @Nullable Input<BucketRoutingRuleConditionArgs> routingRuleCondition;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRoutingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.redirectRule = defaults.redirectRule;
    	      this.routingRuleCondition = defaults.routingRuleCondition;
        }

        public Builder setRedirectRule(Input<BucketRedirectRuleArgs> redirectRule) {
            this.redirectRule = Objects.requireNonNull(redirectRule);
            return this;
        }

        public Builder setRedirectRule(BucketRedirectRuleArgs redirectRule) {
            this.redirectRule = Input.of(Objects.requireNonNull(redirectRule));
            return this;
        }

        public Builder setRoutingRuleCondition(@Nullable Input<BucketRoutingRuleConditionArgs> routingRuleCondition) {
            this.routingRuleCondition = routingRuleCondition;
            return this;
        }

        public Builder setRoutingRuleCondition(@Nullable BucketRoutingRuleConditionArgs routingRuleCondition) {
            this.routingRuleCondition = Input.ofNullable(routingRuleCondition);
            return this;
        }

        public BucketRoutingRuleArgs build() {
            return new BucketRoutingRuleArgs(redirectRule, routingRuleCondition);
        }
    }
}
