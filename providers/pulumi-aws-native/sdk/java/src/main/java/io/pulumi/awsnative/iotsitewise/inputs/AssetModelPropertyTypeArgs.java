// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.iotsitewise.inputs;

import io.pulumi.awsnative.iotsitewise.enums.AssetModelTypeName;
import io.pulumi.awsnative.iotsitewise.inputs.AssetModelAttributeArgs;
import io.pulumi.awsnative.iotsitewise.inputs.AssetModelMetricArgs;
import io.pulumi.awsnative.iotsitewise.inputs.AssetModelTransformArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Contains a property type, which can be one of attribute, measurement, metric, or transform.
 * 
 */
public final class AssetModelPropertyTypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final AssetModelPropertyTypeArgs Empty = new AssetModelPropertyTypeArgs();

    @Import(name="attribute")
      private final @Nullable Output<AssetModelAttributeArgs> attribute;

    public Output<AssetModelAttributeArgs> getAttribute() {
        return this.attribute == null ? Output.empty() : this.attribute;
    }

    @Import(name="metric")
      private final @Nullable Output<AssetModelMetricArgs> metric;

    public Output<AssetModelMetricArgs> getMetric() {
        return this.metric == null ? Output.empty() : this.metric;
    }

    @Import(name="transform")
      private final @Nullable Output<AssetModelTransformArgs> transform;

    public Output<AssetModelTransformArgs> getTransform() {
        return this.transform == null ? Output.empty() : this.transform;
    }

    @Import(name="typeName", required=true)
      private final Output<AssetModelTypeName> typeName;

    public Output<AssetModelTypeName> getTypeName() {
        return this.typeName;
    }

    public AssetModelPropertyTypeArgs(
        @Nullable Output<AssetModelAttributeArgs> attribute,
        @Nullable Output<AssetModelMetricArgs> metric,
        @Nullable Output<AssetModelTransformArgs> transform,
        Output<AssetModelTypeName> typeName) {
        this.attribute = attribute;
        this.metric = metric;
        this.transform = transform;
        this.typeName = Objects.requireNonNull(typeName, "expected parameter 'typeName' to be non-null");
    }

    private AssetModelPropertyTypeArgs() {
        this.attribute = Output.empty();
        this.metric = Output.empty();
        this.transform = Output.empty();
        this.typeName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssetModelPropertyTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AssetModelAttributeArgs> attribute;
        private @Nullable Output<AssetModelMetricArgs> metric;
        private @Nullable Output<AssetModelTransformArgs> transform;
        private Output<AssetModelTypeName> typeName;

        public Builder() {
    	      // Empty
        }

        public Builder(AssetModelPropertyTypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attribute = defaults.attribute;
    	      this.metric = defaults.metric;
    	      this.transform = defaults.transform;
    	      this.typeName = defaults.typeName;
        }

        public Builder attribute(@Nullable Output<AssetModelAttributeArgs> attribute) {
            this.attribute = attribute;
            return this;
        }
        public Builder attribute(@Nullable AssetModelAttributeArgs attribute) {
            this.attribute = Output.ofNullable(attribute);
            return this;
        }
        public Builder metric(@Nullable Output<AssetModelMetricArgs> metric) {
            this.metric = metric;
            return this;
        }
        public Builder metric(@Nullable AssetModelMetricArgs metric) {
            this.metric = Output.ofNullable(metric);
            return this;
        }
        public Builder transform(@Nullable Output<AssetModelTransformArgs> transform) {
            this.transform = transform;
            return this;
        }
        public Builder transform(@Nullable AssetModelTransformArgs transform) {
            this.transform = Output.ofNullable(transform);
            return this;
        }
        public Builder typeName(Output<AssetModelTypeName> typeName) {
            this.typeName = Objects.requireNonNull(typeName);
            return this;
        }
        public Builder typeName(AssetModelTypeName typeName) {
            this.typeName = Output.of(Objects.requireNonNull(typeName));
            return this;
        }        public AssetModelPropertyTypeArgs build() {
            return new AssetModelPropertyTypeArgs(attribute, metric, transform, typeName);
        }
    }
}
