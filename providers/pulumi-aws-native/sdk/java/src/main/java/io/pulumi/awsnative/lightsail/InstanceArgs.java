// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail;

import io.pulumi.awsnative.lightsail.inputs.InstanceAddOnArgs;
import io.pulumi.awsnative.lightsail.inputs.InstanceHardwareArgs;
import io.pulumi.awsnative.lightsail.inputs.InstanceLocationArgs;
import io.pulumi.awsnative.lightsail.inputs.InstanceNetworkingArgs;
import io.pulumi.awsnative.lightsail.inputs.InstanceStateArgs;
import io.pulumi.awsnative.lightsail.inputs.InstanceTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * An array of objects representing the add-ons to enable for the new instance.
     * 
     */
    @Import(name="addOns")
      private final @Nullable Output<List<InstanceAddOnArgs>> addOns;

    public Output<List<InstanceAddOnArgs>> getAddOns() {
        return this.addOns == null ? Output.empty() : this.addOns;
    }

    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Output.empty() : this.availabilityZone;
    }

    /**
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation to return a list of available images (or blueprints ).
     * 
     */
    @Import(name="blueprintId", required=true)
      private final Output<String> blueprintId;

    public Output<String> getBlueprintId() {
        return this.blueprintId;
    }

    /**
     * The bundle of specification information for your virtual private server (or instance ), including the pricing plan (e.g., micro_1_0 ).
     * 
     */
    @Import(name="bundleId", required=true)
      private final Output<String> bundleId;

    public Output<String> getBundleId() {
        return this.bundleId;
    }

    @Import(name="hardware")
      private final @Nullable Output<InstanceHardwareArgs> hardware;

    public Output<InstanceHardwareArgs> getHardware() {
        return this.hardware == null ? Output.empty() : this.hardware;
    }

    /**
     * The names to use for your new Lightsail instance.
     * 
     */
    @Import(name="instanceName")
      private final @Nullable Output<String> instanceName;

    public Output<String> getInstanceName() {
        return this.instanceName == null ? Output.empty() : this.instanceName;
    }

    /**
     * The name of your key pair.
     * 
     */
    @Import(name="keyPairName")
      private final @Nullable Output<String> keyPairName;

    public Output<String> getKeyPairName() {
        return this.keyPairName == null ? Output.empty() : this.keyPairName;
    }

    @Import(name="location")
      private final @Nullable Output<InstanceLocationArgs> location;

    public Output<InstanceLocationArgs> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    @Import(name="networking")
      private final @Nullable Output<InstanceNetworkingArgs> networking;

    public Output<InstanceNetworkingArgs> getNetworking() {
        return this.networking == null ? Output.empty() : this.networking;
    }

    @Import(name="state")
      private final @Nullable Output<InstanceStateArgs> state;

    public Output<InstanceStateArgs> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<InstanceTagArgs>> tags;

    public Output<List<InstanceTagArgs>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
     * 
     */
    @Import(name="userData")
      private final @Nullable Output<String> userData;

    public Output<String> getUserData() {
        return this.userData == null ? Output.empty() : this.userData;
    }

    public InstanceArgs(
        @Nullable Output<List<InstanceAddOnArgs>> addOns,
        @Nullable Output<String> availabilityZone,
        Output<String> blueprintId,
        Output<String> bundleId,
        @Nullable Output<InstanceHardwareArgs> hardware,
        @Nullable Output<String> instanceName,
        @Nullable Output<String> keyPairName,
        @Nullable Output<InstanceLocationArgs> location,
        @Nullable Output<InstanceNetworkingArgs> networking,
        @Nullable Output<InstanceStateArgs> state,
        @Nullable Output<List<InstanceTagArgs>> tags,
        @Nullable Output<String> userData) {
        this.addOns = addOns;
        this.availabilityZone = availabilityZone;
        this.blueprintId = Objects.requireNonNull(blueprintId, "expected parameter 'blueprintId' to be non-null");
        this.bundleId = Objects.requireNonNull(bundleId, "expected parameter 'bundleId' to be non-null");
        this.hardware = hardware;
        this.instanceName = instanceName;
        this.keyPairName = keyPairName;
        this.location = location;
        this.networking = networking;
        this.state = state;
        this.tags = tags;
        this.userData = userData;
    }

    private InstanceArgs() {
        this.addOns = Output.empty();
        this.availabilityZone = Output.empty();
        this.blueprintId = Output.empty();
        this.bundleId = Output.empty();
        this.hardware = Output.empty();
        this.instanceName = Output.empty();
        this.keyPairName = Output.empty();
        this.location = Output.empty();
        this.networking = Output.empty();
        this.state = Output.empty();
        this.tags = Output.empty();
        this.userData = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<InstanceAddOnArgs>> addOns;
        private @Nullable Output<String> availabilityZone;
        private Output<String> blueprintId;
        private Output<String> bundleId;
        private @Nullable Output<InstanceHardwareArgs> hardware;
        private @Nullable Output<String> instanceName;
        private @Nullable Output<String> keyPairName;
        private @Nullable Output<InstanceLocationArgs> location;
        private @Nullable Output<InstanceNetworkingArgs> networking;
        private @Nullable Output<InstanceStateArgs> state;
        private @Nullable Output<List<InstanceTagArgs>> tags;
        private @Nullable Output<String> userData;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addOns = defaults.addOns;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.blueprintId = defaults.blueprintId;
    	      this.bundleId = defaults.bundleId;
    	      this.hardware = defaults.hardware;
    	      this.instanceName = defaults.instanceName;
    	      this.keyPairName = defaults.keyPairName;
    	      this.location = defaults.location;
    	      this.networking = defaults.networking;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.userData = defaults.userData;
        }

        public Builder addOns(@Nullable Output<List<InstanceAddOnArgs>> addOns) {
            this.addOns = addOns;
            return this;
        }

        public Builder addOns(@Nullable List<InstanceAddOnArgs> addOns) {
            this.addOns = Output.ofNullable(addOns);
            return this;
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Output.ofNullable(availabilityZone);
            return this;
        }

        public Builder blueprintId(Output<String> blueprintId) {
            this.blueprintId = Objects.requireNonNull(blueprintId);
            return this;
        }

        public Builder blueprintId(String blueprintId) {
            this.blueprintId = Output.of(Objects.requireNonNull(blueprintId));
            return this;
        }

        public Builder bundleId(Output<String> bundleId) {
            this.bundleId = Objects.requireNonNull(bundleId);
            return this;
        }

        public Builder bundleId(String bundleId) {
            this.bundleId = Output.of(Objects.requireNonNull(bundleId));
            return this;
        }

        public Builder hardware(@Nullable Output<InstanceHardwareArgs> hardware) {
            this.hardware = hardware;
            return this;
        }

        public Builder hardware(@Nullable InstanceHardwareArgs hardware) {
            this.hardware = Output.ofNullable(hardware);
            return this;
        }

        public Builder instanceName(@Nullable Output<String> instanceName) {
            this.instanceName = instanceName;
            return this;
        }

        public Builder instanceName(@Nullable String instanceName) {
            this.instanceName = Output.ofNullable(instanceName);
            return this;
        }

        public Builder keyPairName(@Nullable Output<String> keyPairName) {
            this.keyPairName = keyPairName;
            return this;
        }

        public Builder keyPairName(@Nullable String keyPairName) {
            this.keyPairName = Output.ofNullable(keyPairName);
            return this;
        }

        public Builder location(@Nullable Output<InstanceLocationArgs> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable InstanceLocationArgs location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder networking(@Nullable Output<InstanceNetworkingArgs> networking) {
            this.networking = networking;
            return this;
        }

        public Builder networking(@Nullable InstanceNetworkingArgs networking) {
            this.networking = Output.ofNullable(networking);
            return this;
        }

        public Builder state(@Nullable Output<InstanceStateArgs> state) {
            this.state = state;
            return this;
        }

        public Builder state(@Nullable InstanceStateArgs state) {
            this.state = Output.ofNullable(state);
            return this;
        }

        public Builder tags(@Nullable Output<List<InstanceTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<InstanceTagArgs> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder userData(@Nullable Output<String> userData) {
            this.userData = userData;
            return this;
        }

        public Builder userData(@Nullable String userData) {
            this.userData = Output.ofNullable(userData);
            return this;
        }
        public InstanceArgs build() {
            return new InstanceArgs(addOns, availabilityZone, blueprintId, bundleId, hardware, instanceName, keyPairName, location, networking, state, tags, userData);
        }
    }
}
