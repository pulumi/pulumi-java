// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.rum;

import io.pulumi.awsnative.rum.inputs.AppMonitorConfigurationArgs;
import io.pulumi.awsnative.rum.inputs.AppMonitorTagArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppMonitorArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppMonitorArgs Empty = new AppMonitorArgs();

    @InputImport(name="appMonitorConfiguration")
        private final @Nullable Input<AppMonitorConfigurationArgs> appMonitorConfiguration;

    public Input<AppMonitorConfigurationArgs> getAppMonitorConfiguration() {
        return this.appMonitorConfiguration == null ? Input.empty() : this.appMonitorConfiguration;
    }

    /**
     * Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
     * 
     */
    @InputImport(name="cwLogEnabled")
        private final @Nullable Input<Boolean> cwLogEnabled;

    public Input<Boolean> getCwLogEnabled() {
        return this.cwLogEnabled == null ? Input.empty() : this.cwLogEnabled;
    }

    /**
     * The top-level internet domain name for which your application has administrative authority.
     * 
     */
    @InputImport(name="domain", required=true)
        private final Input<String> domain;

    public Input<String> getDomain() {
        return this.domain;
    }

    /**
     * A name for the app monitor
     * 
     */
    @InputImport(name="name")
        private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="tags")
        private final @Nullable Input<List<AppMonitorTagArgs>> tags;

    public Input<List<AppMonitorTagArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public AppMonitorArgs(
        @Nullable Input<AppMonitorConfigurationArgs> appMonitorConfiguration,
        @Nullable Input<Boolean> cwLogEnabled,
        Input<String> domain,
        @Nullable Input<String> name,
        @Nullable Input<List<AppMonitorTagArgs>> tags) {
        this.appMonitorConfiguration = appMonitorConfiguration;
        this.cwLogEnabled = cwLogEnabled;
        this.domain = Objects.requireNonNull(domain, "expected parameter 'domain' to be non-null");
        this.name = name;
        this.tags = tags;
    }

    private AppMonitorArgs() {
        this.appMonitorConfiguration = Input.empty();
        this.cwLogEnabled = Input.empty();
        this.domain = Input.empty();
        this.name = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AppMonitorConfigurationArgs> appMonitorConfiguration;
        private @Nullable Input<Boolean> cwLogEnabled;
        private Input<String> domain;
        private @Nullable Input<String> name;
        private @Nullable Input<List<AppMonitorTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AppMonitorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appMonitorConfiguration = defaults.appMonitorConfiguration;
    	      this.cwLogEnabled = defaults.cwLogEnabled;
    	      this.domain = defaults.domain;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
        }

        public Builder setAppMonitorConfiguration(@Nullable Input<AppMonitorConfigurationArgs> appMonitorConfiguration) {
            this.appMonitorConfiguration = appMonitorConfiguration;
            return this;
        }

        public Builder setAppMonitorConfiguration(@Nullable AppMonitorConfigurationArgs appMonitorConfiguration) {
            this.appMonitorConfiguration = Input.ofNullable(appMonitorConfiguration);
            return this;
        }

        public Builder setCwLogEnabled(@Nullable Input<Boolean> cwLogEnabled) {
            this.cwLogEnabled = cwLogEnabled;
            return this;
        }

        public Builder setCwLogEnabled(@Nullable Boolean cwLogEnabled) {
            this.cwLogEnabled = Input.ofNullable(cwLogEnabled);
            return this;
        }

        public Builder setDomain(Input<String> domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }

        public Builder setDomain(String domain) {
            this.domain = Input.of(Objects.requireNonNull(domain));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setTags(@Nullable Input<List<AppMonitorTagArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<AppMonitorTagArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public AppMonitorArgs build() {
            return new AppMonitorArgs(appMonitorConfiguration, cwLogEnabled, domain, name, tags);
        }
    }
}
