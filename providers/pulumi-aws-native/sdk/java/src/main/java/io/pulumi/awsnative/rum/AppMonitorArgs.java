// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.rum;

import io.pulumi.awsnative.rum.inputs.AppMonitorConfigurationArgs;
import io.pulumi.awsnative.rum.inputs.AppMonitorTagArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppMonitorArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppMonitorArgs Empty = new AppMonitorArgs();

    @Import(name="appMonitorConfiguration")
      private final @Nullable Output<AppMonitorConfigurationArgs> appMonitorConfiguration;

    public Output<AppMonitorConfigurationArgs> getAppMonitorConfiguration() {
        return this.appMonitorConfiguration == null ? Codegen.empty() : this.appMonitorConfiguration;
    }

    /**
     * Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
     * 
     */
    @Import(name="cwLogEnabled")
      private final @Nullable Output<Boolean> cwLogEnabled;

    public Output<Boolean> getCwLogEnabled() {
        return this.cwLogEnabled == null ? Codegen.empty() : this.cwLogEnabled;
    }

    /**
     * The top-level internet domain name for which your application has administrative authority.
     * 
     */
    @Import(name="domain", required=true)
      private final Output<String> domain;

    public Output<String> getDomain() {
        return this.domain;
    }

    /**
     * A name for the app monitor
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="tags")
      private final @Nullable Output<List<AppMonitorTagArgs>> tags;

    public Output<List<AppMonitorTagArgs>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public AppMonitorArgs(
        @Nullable Output<AppMonitorConfigurationArgs> appMonitorConfiguration,
        @Nullable Output<Boolean> cwLogEnabled,
        Output<String> domain,
        @Nullable Output<String> name,
        @Nullable Output<List<AppMonitorTagArgs>> tags) {
        this.appMonitorConfiguration = appMonitorConfiguration;
        this.cwLogEnabled = cwLogEnabled;
        this.domain = Objects.requireNonNull(domain, "expected parameter 'domain' to be non-null");
        this.name = name;
        this.tags = tags;
    }

    private AppMonitorArgs() {
        this.appMonitorConfiguration = Codegen.empty();
        this.cwLogEnabled = Codegen.empty();
        this.domain = Codegen.empty();
        this.name = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AppMonitorConfigurationArgs> appMonitorConfiguration;
        private @Nullable Output<Boolean> cwLogEnabled;
        private Output<String> domain;
        private @Nullable Output<String> name;
        private @Nullable Output<List<AppMonitorTagArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AppMonitorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appMonitorConfiguration = defaults.appMonitorConfiguration;
    	      this.cwLogEnabled = defaults.cwLogEnabled;
    	      this.domain = defaults.domain;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
        }

        public Builder appMonitorConfiguration(@Nullable Output<AppMonitorConfigurationArgs> appMonitorConfiguration) {
            this.appMonitorConfiguration = appMonitorConfiguration;
            return this;
        }
        public Builder appMonitorConfiguration(@Nullable AppMonitorConfigurationArgs appMonitorConfiguration) {
            this.appMonitorConfiguration = Codegen.ofNullable(appMonitorConfiguration);
            return this;
        }
        public Builder cwLogEnabled(@Nullable Output<Boolean> cwLogEnabled) {
            this.cwLogEnabled = cwLogEnabled;
            return this;
        }
        public Builder cwLogEnabled(@Nullable Boolean cwLogEnabled) {
            this.cwLogEnabled = Codegen.ofNullable(cwLogEnabled);
            return this;
        }
        public Builder domain(Output<String> domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder domain(String domain) {
            this.domain = Output.of(Objects.requireNonNull(domain));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder tags(@Nullable Output<List<AppMonitorTagArgs>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<AppMonitorTagArgs> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tags(AppMonitorTagArgs... tags) {
            return tags(List.of(tags));
        }        public AppMonitorArgs build() {
            return new AppMonitorArgs(appMonitorConfiguration, cwLogEnabled, domain, name, tags);
        }
    }
}
