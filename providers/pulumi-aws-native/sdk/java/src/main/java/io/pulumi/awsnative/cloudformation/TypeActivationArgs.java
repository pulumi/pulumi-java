// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.cloudformation;

import io.pulumi.awsnative.cloudformation.enums.TypeActivationType;
import io.pulumi.awsnative.cloudformation.enums.TypeActivationVersionBump;
import io.pulumi.awsnative.cloudformation.inputs.TypeActivationLoggingConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TypeActivationArgs extends io.pulumi.resources.ResourceArgs {

    public static final TypeActivationArgs Empty = new TypeActivationArgs();

    @InputImport(name="autoUpdate")
    private final @Nullable Input<Boolean> autoUpdate;

    public Input<Boolean> getAutoUpdate() {
        return this.autoUpdate == null ? Input.empty() : this.autoUpdate;
    }

    @InputImport(name="executionRoleArn")
    private final @Nullable Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn == null ? Input.empty() : this.executionRoleArn;
    }

    @InputImport(name="loggingConfig")
    private final @Nullable Input<TypeActivationLoggingConfigArgs> loggingConfig;

    public Input<TypeActivationLoggingConfigArgs> getLoggingConfig() {
        return this.loggingConfig == null ? Input.empty() : this.loggingConfig;
    }

    @InputImport(name="majorVersion")
    private final @Nullable Input<String> majorVersion;

    public Input<String> getMajorVersion() {
        return this.majorVersion == null ? Input.empty() : this.majorVersion;
    }

    @InputImport(name="publicTypeArn")
    private final @Nullable Input<String> publicTypeArn;

    public Input<String> getPublicTypeArn() {
        return this.publicTypeArn == null ? Input.empty() : this.publicTypeArn;
    }

    @InputImport(name="publisherId")
    private final @Nullable Input<String> publisherId;

    public Input<String> getPublisherId() {
        return this.publisherId == null ? Input.empty() : this.publisherId;
    }

    @InputImport(name="type")
    private final @Nullable Input<TypeActivationType> type;

    public Input<TypeActivationType> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    @InputImport(name="typeName")
    private final @Nullable Input<String> typeName;

    public Input<String> getTypeName() {
        return this.typeName == null ? Input.empty() : this.typeName;
    }

    @InputImport(name="typeNameAlias")
    private final @Nullable Input<String> typeNameAlias;

    public Input<String> getTypeNameAlias() {
        return this.typeNameAlias == null ? Input.empty() : this.typeNameAlias;
    }

    @InputImport(name="versionBump")
    private final @Nullable Input<TypeActivationVersionBump> versionBump;

    public Input<TypeActivationVersionBump> getVersionBump() {
        return this.versionBump == null ? Input.empty() : this.versionBump;
    }

    public TypeActivationArgs(
        @Nullable Input<Boolean> autoUpdate,
        @Nullable Input<String> executionRoleArn,
        @Nullable Input<TypeActivationLoggingConfigArgs> loggingConfig,
        @Nullable Input<String> majorVersion,
        @Nullable Input<String> publicTypeArn,
        @Nullable Input<String> publisherId,
        @Nullable Input<TypeActivationType> type,
        @Nullable Input<String> typeName,
        @Nullable Input<String> typeNameAlias,
        @Nullable Input<TypeActivationVersionBump> versionBump) {
        this.autoUpdate = autoUpdate;
        this.executionRoleArn = executionRoleArn;
        this.loggingConfig = loggingConfig;
        this.majorVersion = majorVersion;
        this.publicTypeArn = publicTypeArn;
        this.publisherId = publisherId;
        this.type = type;
        this.typeName = typeName;
        this.typeNameAlias = typeNameAlias;
        this.versionBump = versionBump;
    }

    private TypeActivationArgs() {
        this.autoUpdate = Input.empty();
        this.executionRoleArn = Input.empty();
        this.loggingConfig = Input.empty();
        this.majorVersion = Input.empty();
        this.publicTypeArn = Input.empty();
        this.publisherId = Input.empty();
        this.type = Input.empty();
        this.typeName = Input.empty();
        this.typeNameAlias = Input.empty();
        this.versionBump = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeActivationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> autoUpdate;
        private @Nullable Input<String> executionRoleArn;
        private @Nullable Input<TypeActivationLoggingConfigArgs> loggingConfig;
        private @Nullable Input<String> majorVersion;
        private @Nullable Input<String> publicTypeArn;
        private @Nullable Input<String> publisherId;
        private @Nullable Input<TypeActivationType> type;
        private @Nullable Input<String> typeName;
        private @Nullable Input<String> typeNameAlias;
        private @Nullable Input<TypeActivationVersionBump> versionBump;

        public Builder() {
    	      // Empty
        }

        public Builder(TypeActivationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUpdate = defaults.autoUpdate;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.loggingConfig = defaults.loggingConfig;
    	      this.majorVersion = defaults.majorVersion;
    	      this.publicTypeArn = defaults.publicTypeArn;
    	      this.publisherId = defaults.publisherId;
    	      this.type = defaults.type;
    	      this.typeName = defaults.typeName;
    	      this.typeNameAlias = defaults.typeNameAlias;
    	      this.versionBump = defaults.versionBump;
        }

        public Builder setAutoUpdate(@Nullable Input<Boolean> autoUpdate) {
            this.autoUpdate = autoUpdate;
            return this;
        }

        public Builder setAutoUpdate(@Nullable Boolean autoUpdate) {
            this.autoUpdate = Input.ofNullable(autoUpdate);
            return this;
        }

        public Builder setExecutionRoleArn(@Nullable Input<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder setExecutionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Input.ofNullable(executionRoleArn);
            return this;
        }

        public Builder setLoggingConfig(@Nullable Input<TypeActivationLoggingConfigArgs> loggingConfig) {
            this.loggingConfig = loggingConfig;
            return this;
        }

        public Builder setLoggingConfig(@Nullable TypeActivationLoggingConfigArgs loggingConfig) {
            this.loggingConfig = Input.ofNullable(loggingConfig);
            return this;
        }

        public Builder setMajorVersion(@Nullable Input<String> majorVersion) {
            this.majorVersion = majorVersion;
            return this;
        }

        public Builder setMajorVersion(@Nullable String majorVersion) {
            this.majorVersion = Input.ofNullable(majorVersion);
            return this;
        }

        public Builder setPublicTypeArn(@Nullable Input<String> publicTypeArn) {
            this.publicTypeArn = publicTypeArn;
            return this;
        }

        public Builder setPublicTypeArn(@Nullable String publicTypeArn) {
            this.publicTypeArn = Input.ofNullable(publicTypeArn);
            return this;
        }

        public Builder setPublisherId(@Nullable Input<String> publisherId) {
            this.publisherId = publisherId;
            return this;
        }

        public Builder setPublisherId(@Nullable String publisherId) {
            this.publisherId = Input.ofNullable(publisherId);
            return this;
        }

        public Builder setType(@Nullable Input<TypeActivationType> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable TypeActivationType type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setTypeName(@Nullable Input<String> typeName) {
            this.typeName = typeName;
            return this;
        }

        public Builder setTypeName(@Nullable String typeName) {
            this.typeName = Input.ofNullable(typeName);
            return this;
        }

        public Builder setTypeNameAlias(@Nullable Input<String> typeNameAlias) {
            this.typeNameAlias = typeNameAlias;
            return this;
        }

        public Builder setTypeNameAlias(@Nullable String typeNameAlias) {
            this.typeNameAlias = Input.ofNullable(typeNameAlias);
            return this;
        }

        public Builder setVersionBump(@Nullable Input<TypeActivationVersionBump> versionBump) {
            this.versionBump = versionBump;
            return this;
        }

        public Builder setVersionBump(@Nullable TypeActivationVersionBump versionBump) {
            this.versionBump = Input.ofNullable(versionBump);
            return this;
        }

        public TypeActivationArgs build() {
            return new TypeActivationArgs(autoUpdate, executionRoleArn, loggingConfig, majorVersion, publicTypeArn, publisherId, type, typeName, typeNameAlias, versionBump);
        }
    }
}
