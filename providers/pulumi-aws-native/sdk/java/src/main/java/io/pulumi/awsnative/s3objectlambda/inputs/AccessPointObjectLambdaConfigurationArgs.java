// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3objectlambda.inputs;

import io.pulumi.awsnative.s3objectlambda.inputs.AccessPointTransformationConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
 * 
 */
public final class AccessPointObjectLambdaConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessPointObjectLambdaConfigurationArgs Empty = new AccessPointObjectLambdaConfigurationArgs();

    @Import(name="allowedFeatures")
      private final @Nullable Output<List<String>> allowedFeatures;

    public Output<List<String>> getAllowedFeatures() {
        return this.allowedFeatures == null ? Output.empty() : this.allowedFeatures;
    }

    @Import(name="cloudWatchMetricsEnabled")
      private final @Nullable Output<Boolean> cloudWatchMetricsEnabled;

    public Output<Boolean> getCloudWatchMetricsEnabled() {
        return this.cloudWatchMetricsEnabled == null ? Output.empty() : this.cloudWatchMetricsEnabled;
    }

    @Import(name="supportingAccessPoint", required=true)
      private final Output<String> supportingAccessPoint;

    public Output<String> getSupportingAccessPoint() {
        return this.supportingAccessPoint;
    }

    @Import(name="transformationConfigurations", required=true)
      private final Output<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations;

    public Output<List<AccessPointTransformationConfigurationArgs>> getTransformationConfigurations() {
        return this.transformationConfigurations;
    }

    public AccessPointObjectLambdaConfigurationArgs(
        @Nullable Output<List<String>> allowedFeatures,
        @Nullable Output<Boolean> cloudWatchMetricsEnabled,
        Output<String> supportingAccessPoint,
        Output<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations) {
        this.allowedFeatures = allowedFeatures;
        this.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
        this.supportingAccessPoint = Objects.requireNonNull(supportingAccessPoint, "expected parameter 'supportingAccessPoint' to be non-null");
        this.transformationConfigurations = Objects.requireNonNull(transformationConfigurations, "expected parameter 'transformationConfigurations' to be non-null");
    }

    private AccessPointObjectLambdaConfigurationArgs() {
        this.allowedFeatures = Output.empty();
        this.cloudWatchMetricsEnabled = Output.empty();
        this.supportingAccessPoint = Output.empty();
        this.transformationConfigurations = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessPointObjectLambdaConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> allowedFeatures;
        private @Nullable Output<Boolean> cloudWatchMetricsEnabled;
        private Output<String> supportingAccessPoint;
        private Output<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessPointObjectLambdaConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedFeatures = defaults.allowedFeatures;
    	      this.cloudWatchMetricsEnabled = defaults.cloudWatchMetricsEnabled;
    	      this.supportingAccessPoint = defaults.supportingAccessPoint;
    	      this.transformationConfigurations = defaults.transformationConfigurations;
        }

        public Builder allowedFeatures(@Nullable Output<List<String>> allowedFeatures) {
            this.allowedFeatures = allowedFeatures;
            return this;
        }

        public Builder allowedFeatures(@Nullable List<String> allowedFeatures) {
            this.allowedFeatures = Output.ofNullable(allowedFeatures);
            return this;
        }

        public Builder cloudWatchMetricsEnabled(@Nullable Output<Boolean> cloudWatchMetricsEnabled) {
            this.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
            return this;
        }

        public Builder cloudWatchMetricsEnabled(@Nullable Boolean cloudWatchMetricsEnabled) {
            this.cloudWatchMetricsEnabled = Output.ofNullable(cloudWatchMetricsEnabled);
            return this;
        }

        public Builder supportingAccessPoint(Output<String> supportingAccessPoint) {
            this.supportingAccessPoint = Objects.requireNonNull(supportingAccessPoint);
            return this;
        }

        public Builder supportingAccessPoint(String supportingAccessPoint) {
            this.supportingAccessPoint = Output.of(Objects.requireNonNull(supportingAccessPoint));
            return this;
        }

        public Builder transformationConfigurations(Output<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations) {
            this.transformationConfigurations = Objects.requireNonNull(transformationConfigurations);
            return this;
        }

        public Builder transformationConfigurations(List<AccessPointTransformationConfigurationArgs> transformationConfigurations) {
            this.transformationConfigurations = Output.of(Objects.requireNonNull(transformationConfigurations));
            return this;
        }
        public AccessPointObjectLambdaConfigurationArgs build() {
            return new AccessPointObjectLambdaConfigurationArgs(allowedFeatures, cloudWatchMetricsEnabled, supportingAccessPoint, transformationConfigurations);
        }
    }
}
