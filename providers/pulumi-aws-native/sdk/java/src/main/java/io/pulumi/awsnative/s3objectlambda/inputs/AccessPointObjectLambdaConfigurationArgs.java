// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.s3objectlambda.inputs;

import io.pulumi.awsnative.s3objectlambda.inputs.AccessPointTransformationConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
 * 
 */
public final class AccessPointObjectLambdaConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessPointObjectLambdaConfigurationArgs Empty = new AccessPointObjectLambdaConfigurationArgs();

    @InputImport(name="allowedFeatures")
      private final @Nullable Input<List<String>> allowedFeatures;

    public Input<List<String>> getAllowedFeatures() {
        return this.allowedFeatures == null ? Input.empty() : this.allowedFeatures;
    }

    @InputImport(name="cloudWatchMetricsEnabled")
      private final @Nullable Input<Boolean> cloudWatchMetricsEnabled;

    public Input<Boolean> getCloudWatchMetricsEnabled() {
        return this.cloudWatchMetricsEnabled == null ? Input.empty() : this.cloudWatchMetricsEnabled;
    }

    @InputImport(name="supportingAccessPoint", required=true)
      private final Input<String> supportingAccessPoint;

    public Input<String> getSupportingAccessPoint() {
        return this.supportingAccessPoint;
    }

    @InputImport(name="transformationConfigurations", required=true)
      private final Input<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations;

    public Input<List<AccessPointTransformationConfigurationArgs>> getTransformationConfigurations() {
        return this.transformationConfigurations;
    }

    public AccessPointObjectLambdaConfigurationArgs(
        @Nullable Input<List<String>> allowedFeatures,
        @Nullable Input<Boolean> cloudWatchMetricsEnabled,
        Input<String> supportingAccessPoint,
        Input<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations) {
        this.allowedFeatures = allowedFeatures;
        this.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
        this.supportingAccessPoint = Objects.requireNonNull(supportingAccessPoint, "expected parameter 'supportingAccessPoint' to be non-null");
        this.transformationConfigurations = Objects.requireNonNull(transformationConfigurations, "expected parameter 'transformationConfigurations' to be non-null");
    }

    private AccessPointObjectLambdaConfigurationArgs() {
        this.allowedFeatures = Input.empty();
        this.cloudWatchMetricsEnabled = Input.empty();
        this.supportingAccessPoint = Input.empty();
        this.transformationConfigurations = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessPointObjectLambdaConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> allowedFeatures;
        private @Nullable Input<Boolean> cloudWatchMetricsEnabled;
        private Input<String> supportingAccessPoint;
        private Input<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessPointObjectLambdaConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedFeatures = defaults.allowedFeatures;
    	      this.cloudWatchMetricsEnabled = defaults.cloudWatchMetricsEnabled;
    	      this.supportingAccessPoint = defaults.supportingAccessPoint;
    	      this.transformationConfigurations = defaults.transformationConfigurations;
        }

        public Builder setAllowedFeatures(@Nullable Input<List<String>> allowedFeatures) {
            this.allowedFeatures = allowedFeatures;
            return this;
        }

        public Builder setAllowedFeatures(@Nullable List<String> allowedFeatures) {
            this.allowedFeatures = Input.ofNullable(allowedFeatures);
            return this;
        }

        public Builder setCloudWatchMetricsEnabled(@Nullable Input<Boolean> cloudWatchMetricsEnabled) {
            this.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled;
            return this;
        }

        public Builder setCloudWatchMetricsEnabled(@Nullable Boolean cloudWatchMetricsEnabled) {
            this.cloudWatchMetricsEnabled = Input.ofNullable(cloudWatchMetricsEnabled);
            return this;
        }

        public Builder setSupportingAccessPoint(Input<String> supportingAccessPoint) {
            this.supportingAccessPoint = Objects.requireNonNull(supportingAccessPoint);
            return this;
        }

        public Builder setSupportingAccessPoint(String supportingAccessPoint) {
            this.supportingAccessPoint = Input.of(Objects.requireNonNull(supportingAccessPoint));
            return this;
        }

        public Builder setTransformationConfigurations(Input<List<AccessPointTransformationConfigurationArgs>> transformationConfigurations) {
            this.transformationConfigurations = Objects.requireNonNull(transformationConfigurations);
            return this;
        }

        public Builder setTransformationConfigurations(List<AccessPointTransformationConfigurationArgs> transformationConfigurations) {
            this.transformationConfigurations = Input.of(Objects.requireNonNull(transformationConfigurations));
            return this;
        }
        public AccessPointObjectLambdaConfigurationArgs build() {
            return new AccessPointObjectLambdaConfigurationArgs(allowedFeatures, cloudWatchMetricsEnabled, supportingAccessPoint, transformationConfigurations);
        }
    }
}
