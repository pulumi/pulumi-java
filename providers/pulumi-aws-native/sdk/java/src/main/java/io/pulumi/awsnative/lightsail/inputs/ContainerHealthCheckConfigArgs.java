// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.lightsail.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the health check configuration of an Amazon Lightsail container service.
 * 
 */
public final class ContainerHealthCheckConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerHealthCheckConfigArgs Empty = new ContainerHealthCheckConfigArgs();

    /**
     * The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
     * 
     */
    @Import(name="healthyThreshold")
      private final @Nullable Output<Integer> healthyThreshold;

    public Output<Integer> getHealthyThreshold() {
        return this.healthyThreshold == null ? Output.empty() : this.healthyThreshold;
    }

    /**
     * The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
     * 
     */
    @Import(name="intervalSeconds")
      private final @Nullable Output<Integer> intervalSeconds;

    public Output<Integer> getIntervalSeconds() {
        return this.intervalSeconds == null ? Output.empty() : this.intervalSeconds;
    }

    /**
     * The path on the container on which to perform the health check. The default value is /.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
     * 
     */
    @Import(name="successCodes")
      private final @Nullable Output<String> successCodes;

    public Output<String> getSuccessCodes() {
        return this.successCodes == null ? Output.empty() : this.successCodes;
    }

    /**
     * The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
     * 
     */
    @Import(name="timeoutSeconds")
      private final @Nullable Output<Integer> timeoutSeconds;

    public Output<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Output.empty() : this.timeoutSeconds;
    }

    /**
     * The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
     * 
     */
    @Import(name="unhealthyThreshold")
      private final @Nullable Output<Integer> unhealthyThreshold;

    public Output<Integer> getUnhealthyThreshold() {
        return this.unhealthyThreshold == null ? Output.empty() : this.unhealthyThreshold;
    }

    public ContainerHealthCheckConfigArgs(
        @Nullable Output<Integer> healthyThreshold,
        @Nullable Output<Integer> intervalSeconds,
        @Nullable Output<String> path,
        @Nullable Output<String> successCodes,
        @Nullable Output<Integer> timeoutSeconds,
        @Nullable Output<Integer> unhealthyThreshold) {
        this.healthyThreshold = healthyThreshold;
        this.intervalSeconds = intervalSeconds;
        this.path = path;
        this.successCodes = successCodes;
        this.timeoutSeconds = timeoutSeconds;
        this.unhealthyThreshold = unhealthyThreshold;
    }

    private ContainerHealthCheckConfigArgs() {
        this.healthyThreshold = Output.empty();
        this.intervalSeconds = Output.empty();
        this.path = Output.empty();
        this.successCodes = Output.empty();
        this.timeoutSeconds = Output.empty();
        this.unhealthyThreshold = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerHealthCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> healthyThreshold;
        private @Nullable Output<Integer> intervalSeconds;
        private @Nullable Output<String> path;
        private @Nullable Output<String> successCodes;
        private @Nullable Output<Integer> timeoutSeconds;
        private @Nullable Output<Integer> unhealthyThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerHealthCheckConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.intervalSeconds = defaults.intervalSeconds;
    	      this.path = defaults.path;
    	      this.successCodes = defaults.successCodes;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {
            this.healthyThreshold = Output.ofNullable(healthyThreshold);
            return this;
        }
        public Builder intervalSeconds(@Nullable Output<Integer> intervalSeconds) {
            this.intervalSeconds = intervalSeconds;
            return this;
        }
        public Builder intervalSeconds(@Nullable Integer intervalSeconds) {
            this.intervalSeconds = Output.ofNullable(intervalSeconds);
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }
        public Builder successCodes(@Nullable Output<String> successCodes) {
            this.successCodes = successCodes;
            return this;
        }
        public Builder successCodes(@Nullable String successCodes) {
            this.successCodes = Output.ofNullable(successCodes);
            return this;
        }
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Output.ofNullable(timeoutSeconds);
            return this;
        }
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {
            this.unhealthyThreshold = Output.ofNullable(unhealthyThreshold);
            return this;
        }        public ContainerHealthCheckConfigArgs build() {
            return new ContainerHealthCheckConfigArgs(healthyThreshold, intervalSeconds, path, successCodes, timeoutSeconds, unhealthyThreshold);
        }
    }
}
