// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.awsnative.macie;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomDataIdentifierArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomDataIdentifierArgs Empty = new CustomDataIdentifierArgs();

    /**
     * Description of custom data identifier.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Words to be ignored.
     * 
     */
    @Import(name="ignoreWords")
      private final @Nullable Output<List<String>> ignoreWords;

    public Output<List<String>> getIgnoreWords() {
        return this.ignoreWords == null ? Output.empty() : this.ignoreWords;
    }

    /**
     * Keywords to be matched against.
     * 
     */
    @Import(name="keywords")
      private final @Nullable Output<List<String>> keywords;

    public Output<List<String>> getKeywords() {
        return this.keywords == null ? Output.empty() : this.keywords;
    }

    /**
     * Maximum match distance.
     * 
     */
    @Import(name="maximumMatchDistance")
      private final @Nullable Output<Integer> maximumMatchDistance;

    public Output<Integer> getMaximumMatchDistance() {
        return this.maximumMatchDistance == null ? Output.empty() : this.maximumMatchDistance;
    }

    /**
     * Name of custom data identifier.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Regular expression for custom data identifier.
     * 
     */
    @Import(name="regex", required=true)
      private final Output<String> regex;

    public Output<String> getRegex() {
        return this.regex;
    }

    public CustomDataIdentifierArgs(
        @Nullable Output<String> description,
        @Nullable Output<List<String>> ignoreWords,
        @Nullable Output<List<String>> keywords,
        @Nullable Output<Integer> maximumMatchDistance,
        @Nullable Output<String> name,
        Output<String> regex) {
        this.description = description;
        this.ignoreWords = ignoreWords;
        this.keywords = keywords;
        this.maximumMatchDistance = maximumMatchDistance;
        this.name = name;
        this.regex = Objects.requireNonNull(regex, "expected parameter 'regex' to be non-null");
    }

    private CustomDataIdentifierArgs() {
        this.description = Output.empty();
        this.ignoreWords = Output.empty();
        this.keywords = Output.empty();
        this.maximumMatchDistance = Output.empty();
        this.name = Output.empty();
        this.regex = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomDataIdentifierArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<List<String>> ignoreWords;
        private @Nullable Output<List<String>> keywords;
        private @Nullable Output<Integer> maximumMatchDistance;
        private @Nullable Output<String> name;
        private Output<String> regex;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomDataIdentifierArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.ignoreWords = defaults.ignoreWords;
    	      this.keywords = defaults.keywords;
    	      this.maximumMatchDistance = defaults.maximumMatchDistance;
    	      this.name = defaults.name;
    	      this.regex = defaults.regex;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder ignoreWords(@Nullable Output<List<String>> ignoreWords) {
            this.ignoreWords = ignoreWords;
            return this;
        }

        public Builder ignoreWords(@Nullable List<String> ignoreWords) {
            this.ignoreWords = Output.ofNullable(ignoreWords);
            return this;
        }

        public Builder keywords(@Nullable Output<List<String>> keywords) {
            this.keywords = keywords;
            return this;
        }

        public Builder keywords(@Nullable List<String> keywords) {
            this.keywords = Output.ofNullable(keywords);
            return this;
        }

        public Builder maximumMatchDistance(@Nullable Output<Integer> maximumMatchDistance) {
            this.maximumMatchDistance = maximumMatchDistance;
            return this;
        }

        public Builder maximumMatchDistance(@Nullable Integer maximumMatchDistance) {
            this.maximumMatchDistance = Output.ofNullable(maximumMatchDistance);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder regex(Output<String> regex) {
            this.regex = Objects.requireNonNull(regex);
            return this;
        }

        public Builder regex(String regex) {
            this.regex = Output.of(Objects.requireNonNull(regex));
            return this;
        }
        public CustomDataIdentifierArgs build() {
            return new CustomDataIdentifierArgs(description, ignoreWords, keywords, maximumMatchDistance, name, regex);
        }
    }
}
