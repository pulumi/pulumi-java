// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.testing_v1.outputs.AppBundleResponse;
import io.pulumi.googlenative.testing_v1.outputs.FileReferenceResponse;
import io.pulumi.googlenative.testing_v1.outputs.ShardingOptionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class AndroidInstrumentationTestResponse {
    /**
     * The APK for the application under test.
     * 
     */
    private final FileReferenceResponse appApk;
    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    private final AppBundleResponse appBundle;
    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     * 
     */
    private final String appPackageId;
    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    private final String orchestratorOption;
    /**
     * The option to run tests in multiple shards in parallel.
     * 
     */
    private final ShardingOptionResponse shardingOption;
    /**
     * The APK containing the test code to be executed.
     * 
     */
    private final FileReferenceResponse testApk;
    /**
     * The java package for the test to be executed. The default value is determined by examining the application's manifest.
     * 
     */
    private final String testPackageId;
    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
     * 
     */
    private final String testRunnerClass;
    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     * 
     */
    private final List<String> testTargets;

    @OutputCustomType.Constructor
    private AndroidInstrumentationTestResponse(
        @OutputCustomType.Parameter("appApk") FileReferenceResponse appApk,
        @OutputCustomType.Parameter("appBundle") AppBundleResponse appBundle,
        @OutputCustomType.Parameter("appPackageId") String appPackageId,
        @OutputCustomType.Parameter("orchestratorOption") String orchestratorOption,
        @OutputCustomType.Parameter("shardingOption") ShardingOptionResponse shardingOption,
        @OutputCustomType.Parameter("testApk") FileReferenceResponse testApk,
        @OutputCustomType.Parameter("testPackageId") String testPackageId,
        @OutputCustomType.Parameter("testRunnerClass") String testRunnerClass,
        @OutputCustomType.Parameter("testTargets") List<String> testTargets) {
        this.appApk = appApk;
        this.appBundle = appBundle;
        this.appPackageId = appPackageId;
        this.orchestratorOption = orchestratorOption;
        this.shardingOption = shardingOption;
        this.testApk = testApk;
        this.testPackageId = testPackageId;
        this.testRunnerClass = testRunnerClass;
        this.testTargets = testTargets;
    }

    /**
     * The APK for the application under test.
     * 
    */
    public FileReferenceResponse getAppApk() {
        return this.appApk;
    }
    /**
     * A multi-apk app bundle for the application under test.
     * 
    */
    public AppBundleResponse getAppBundle() {
        return this.appBundle;
    }
    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     * 
    */
    public String getAppPackageId() {
        return this.appPackageId;
    }
    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
    */
    public String getOrchestratorOption() {
        return this.orchestratorOption;
    }
    /**
     * The option to run tests in multiple shards in parallel.
     * 
    */
    public ShardingOptionResponse getShardingOption() {
        return this.shardingOption;
    }
    /**
     * The APK containing the test code to be executed.
     * 
    */
    public FileReferenceResponse getTestApk() {
        return this.testApk;
    }
    /**
     * The java package for the test to be executed. The default value is determined by examining the application's manifest.
     * 
    */
    public String getTestPackageId() {
        return this.testPackageId;
    }
    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
     * 
    */
    public String getTestRunnerClass() {
        return this.testRunnerClass;
    }
    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     * 
    */
    public List<String> getTestTargets() {
        return this.testTargets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidInstrumentationTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileReferenceResponse appApk;
        private AppBundleResponse appBundle;
        private String appPackageId;
        private String orchestratorOption;
        private ShardingOptionResponse shardingOption;
        private FileReferenceResponse testApk;
        private String testPackageId;
        private String testRunnerClass;
        private List<String> testTargets;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidInstrumentationTestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appApk = defaults.appApk;
    	      this.appBundle = defaults.appBundle;
    	      this.appPackageId = defaults.appPackageId;
    	      this.orchestratorOption = defaults.orchestratorOption;
    	      this.shardingOption = defaults.shardingOption;
    	      this.testApk = defaults.testApk;
    	      this.testPackageId = defaults.testPackageId;
    	      this.testRunnerClass = defaults.testRunnerClass;
    	      this.testTargets = defaults.testTargets;
        }

        public Builder appApk(FileReferenceResponse appApk) {
            this.appApk = Objects.requireNonNull(appApk);
            return this;
        }

        public Builder appBundle(AppBundleResponse appBundle) {
            this.appBundle = Objects.requireNonNull(appBundle);
            return this;
        }

        public Builder appPackageId(String appPackageId) {
            this.appPackageId = Objects.requireNonNull(appPackageId);
            return this;
        }

        public Builder orchestratorOption(String orchestratorOption) {
            this.orchestratorOption = Objects.requireNonNull(orchestratorOption);
            return this;
        }

        public Builder shardingOption(ShardingOptionResponse shardingOption) {
            this.shardingOption = Objects.requireNonNull(shardingOption);
            return this;
        }

        public Builder testApk(FileReferenceResponse testApk) {
            this.testApk = Objects.requireNonNull(testApk);
            return this;
        }

        public Builder testPackageId(String testPackageId) {
            this.testPackageId = Objects.requireNonNull(testPackageId);
            return this;
        }

        public Builder testRunnerClass(String testRunnerClass) {
            this.testRunnerClass = Objects.requireNonNull(testRunnerClass);
            return this;
        }

        public Builder testTargets(List<String> testTargets) {
            this.testTargets = Objects.requireNonNull(testTargets);
            return this;
        }
        public AndroidInstrumentationTestResponse build() {
            return new AndroidInstrumentationTestResponse(appApk, appBundle, appPackageId, orchestratorOption, shardingOption, testApk, testPackageId, testRunnerClass, testTargets);
        }
    }
}
