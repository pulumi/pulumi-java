// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.compute_beta.enums.SSLHealthCheckPortSpecification;
import io.pulumi.googlenative.compute_beta.enums.SSLHealthCheckProxyHeader;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SSLHealthCheckArgs extends io.pulumi.resources.ResourceArgs {

    public static final SSLHealthCheckArgs Empty = new SSLHealthCheckArgs();

    /**
     * The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
     * 
     */
    @Import(name="portName")
      private final @Nullable Output<String> portName;

    public Output<String> getPortName() {
        return this.portName == null ? Output.empty() : this.portName;
    }

    /**
     * Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
     * 
     */
    @Import(name="portSpecification")
      private final @Nullable Output<SSLHealthCheckPortSpecification> portSpecification;

    public Output<SSLHealthCheckPortSpecification> getPortSpecification() {
        return this.portSpecification == null ? Output.empty() : this.portSpecification;
    }

    /**
     * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
     * 
     */
    @Import(name="proxyHeader")
      private final @Nullable Output<SSLHealthCheckProxyHeader> proxyHeader;

    public Output<SSLHealthCheckProxyHeader> getProxyHeader() {
        return this.proxyHeader == null ? Output.empty() : this.proxyHeader;
    }

    /**
     * The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
     * 
     */
    @Import(name="request")
      private final @Nullable Output<String> request;

    public Output<String> getRequest() {
        return this.request == null ? Output.empty() : this.request;
    }

    /**
     * The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
     * 
     */
    @Import(name="response")
      private final @Nullable Output<String> response;

    public Output<String> getResponse() {
        return this.response == null ? Output.empty() : this.response;
    }

    public SSLHealthCheckArgs(
        @Nullable Output<Integer> port,
        @Nullable Output<String> portName,
        @Nullable Output<SSLHealthCheckPortSpecification> portSpecification,
        @Nullable Output<SSLHealthCheckProxyHeader> proxyHeader,
        @Nullable Output<String> request,
        @Nullable Output<String> response) {
        this.port = port;
        this.portName = portName;
        this.portSpecification = portSpecification;
        this.proxyHeader = proxyHeader;
        this.request = request;
        this.response = response;
    }

    private SSLHealthCheckArgs() {
        this.port = Output.empty();
        this.portName = Output.empty();
        this.portSpecification = Output.empty();
        this.proxyHeader = Output.empty();
        this.request = Output.empty();
        this.response = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SSLHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> portName;
        private @Nullable Output<SSLHealthCheckPortSpecification> portSpecification;
        private @Nullable Output<SSLHealthCheckProxyHeader> proxyHeader;
        private @Nullable Output<String> request;
        private @Nullable Output<String> response;

        public Builder() {
    	      // Empty
        }

        public Builder(SSLHealthCheckArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.port = defaults.port;
    	      this.portName = defaults.portName;
    	      this.portSpecification = defaults.portSpecification;
    	      this.proxyHeader = defaults.proxyHeader;
    	      this.request = defaults.request;
    	      this.response = defaults.response;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }
        public Builder portName(@Nullable Output<String> portName) {
            this.portName = portName;
            return this;
        }
        public Builder portName(@Nullable String portName) {
            this.portName = Output.ofNullable(portName);
            return this;
        }
        public Builder portSpecification(@Nullable Output<SSLHealthCheckPortSpecification> portSpecification) {
            this.portSpecification = portSpecification;
            return this;
        }
        public Builder portSpecification(@Nullable SSLHealthCheckPortSpecification portSpecification) {
            this.portSpecification = Output.ofNullable(portSpecification);
            return this;
        }
        public Builder proxyHeader(@Nullable Output<SSLHealthCheckProxyHeader> proxyHeader) {
            this.proxyHeader = proxyHeader;
            return this;
        }
        public Builder proxyHeader(@Nullable SSLHealthCheckProxyHeader proxyHeader) {
            this.proxyHeader = Output.ofNullable(proxyHeader);
            return this;
        }
        public Builder request(@Nullable Output<String> request) {
            this.request = request;
            return this;
        }
        public Builder request(@Nullable String request) {
            this.request = Output.ofNullable(request);
            return this;
        }
        public Builder response(@Nullable Output<String> response) {
            this.response = response;
            return this;
        }
        public Builder response(@Nullable String response) {
            this.response = Output.ofNullable(response);
            return this;
        }        public SSLHealthCheckArgs build() {
            return new SSLHealthCheckArgs(port, portName, portSpecification, proxyHeader, request, response);
        }
    }
}
