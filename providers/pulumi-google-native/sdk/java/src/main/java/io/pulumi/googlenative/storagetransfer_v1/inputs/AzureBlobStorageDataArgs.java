// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storagetransfer_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.storagetransfer_v1.inputs.AzureCredentialsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob Storage blob's key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
 * 
 */
public final class AzureBlobStorageDataArgs extends io.pulumi.resources.ResourceArgs {

    public static final AzureBlobStorageDataArgs Empty = new AzureBlobStorageDataArgs();

    /**
     * Input only. Credentials used to authenticate API requests to Azure. For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
     * 
     */
    @Import(name="azureCredentials", required=true)
      private final Output<AzureCredentialsArgs> azureCredentials;

    public Output<AzureCredentialsArgs> getAzureCredentials() {
        return this.azureCredentials;
    }

    /**
     * The container to transfer from the Azure Storage account.
     * 
     */
    @Import(name="container", required=true)
      private final Output<String> container;

    public Output<String> getContainer() {
        return this.container;
    }

    /**
     * Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * The name of the Azure Storage account.
     * 
     */
    @Import(name="storageAccount", required=true)
      private final Output<String> storageAccount;

    public Output<String> getStorageAccount() {
        return this.storageAccount;
    }

    public AzureBlobStorageDataArgs(
        Output<AzureCredentialsArgs> azureCredentials,
        Output<String> container,
        @Nullable Output<String> path,
        Output<String> storageAccount) {
        this.azureCredentials = Objects.requireNonNull(azureCredentials, "expected parameter 'azureCredentials' to be non-null");
        this.container = Objects.requireNonNull(container, "expected parameter 'container' to be non-null");
        this.path = path;
        this.storageAccount = Objects.requireNonNull(storageAccount, "expected parameter 'storageAccount' to be non-null");
    }

    private AzureBlobStorageDataArgs() {
        this.azureCredentials = Output.empty();
        this.container = Output.empty();
        this.path = Output.empty();
        this.storageAccount = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureBlobStorageDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<AzureCredentialsArgs> azureCredentials;
        private Output<String> container;
        private @Nullable Output<String> path;
        private Output<String> storageAccount;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureBlobStorageDataArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureCredentials = defaults.azureCredentials;
    	      this.container = defaults.container;
    	      this.path = defaults.path;
    	      this.storageAccount = defaults.storageAccount;
        }

        public Builder azureCredentials(Output<AzureCredentialsArgs> azureCredentials) {
            this.azureCredentials = Objects.requireNonNull(azureCredentials);
            return this;
        }
        public Builder azureCredentials(AzureCredentialsArgs azureCredentials) {
            this.azureCredentials = Output.of(Objects.requireNonNull(azureCredentials));
            return this;
        }
        public Builder container(Output<String> container) {
            this.container = Objects.requireNonNull(container);
            return this;
        }
        public Builder container(String container) {
            this.container = Output.of(Objects.requireNonNull(container));
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }
        public Builder storageAccount(Output<String> storageAccount) {
            this.storageAccount = Objects.requireNonNull(storageAccount);
            return this;
        }
        public Builder storageAccount(String storageAccount) {
            this.storageAccount = Output.of(Objects.requireNonNull(storageAccount));
            return this;
        }        public AzureBlobStorageDataArgs build() {
            return new AzureBlobStorageDataArgs(azureCredentials, container, path, storageAccount);
        }
    }
}
