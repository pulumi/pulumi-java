// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebaseappcheck_v1beta;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DebugTokenArgs extends io.pulumi.resources.ResourceArgs {

    public static final DebugTokenArgs Empty = new DebugTokenArgs();

    @Import(name="appId", required=true)
      private final Output<String> appId;

    public Output<String> getAppId() {
        return this.appId;
    }

    /**
     * A human readable display name used to identify this debug token.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * The relative resource name of the debug token, in the format: ```projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id}```
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Input only. Immutable. The secret token itself. Must be provided during creation, and must be a UUID4, case insensitive. This field is immutable once set, and cannot be provided during an UpdateDebugToken request. You can, however, delete this debug token using DeleteDebugToken to revoke it. For security reasons, this field will never be populated in any response.
     * 
     */
    @Import(name="token", required=true)
      private final Output<String> token;

    public Output<String> getToken() {
        return this.token;
    }

    public DebugTokenArgs(
        Output<String> appId,
        Output<String> displayName,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<String> token) {
        this.appId = Objects.requireNonNull(appId, "expected parameter 'appId' to be non-null");
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.name = name;
        this.project = project;
        this.token = Objects.requireNonNull(token, "expected parameter 'token' to be non-null");
    }

    private DebugTokenArgs() {
        this.appId = Output.empty();
        this.displayName = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.token = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DebugTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> appId;
        private Output<String> displayName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<String> token;

        public Builder() {
    	      // Empty
        }

        public Builder(DebugTokenArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.token = defaults.token;
        }

        public Builder appId(Output<String> appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Output.of(Objects.requireNonNull(appId));
            return this;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder token(Output<String> token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }

        public Builder token(String token) {
            this.token = Output.of(Objects.requireNonNull(token));
            return this;
        }
        public DebugTokenArgs build() {
            return new DebugTokenArgs(appId, displayName, name, project, token);
        }
    }
}
