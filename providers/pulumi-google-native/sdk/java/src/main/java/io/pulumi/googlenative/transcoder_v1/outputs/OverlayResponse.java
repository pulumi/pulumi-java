// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.transcoder_v1.outputs.AnimationResponse;
import io.pulumi.googlenative.transcoder_v1.outputs.ImageResponse;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class OverlayResponse {
    /**
     * List of Animations. The list should be chronological, without any time overlap.
     * 
     */
    private final List<AnimationResponse> animations;
    /**
     * Image overlay.
     * 
     */
    private final ImageResponse image;

    @OutputCustomType.Constructor({"animations","image"})
    private OverlayResponse(
        List<AnimationResponse> animations,
        ImageResponse image) {
        this.animations = animations;
        this.image = image;
    }

    /**
     * List of Animations. The list should be chronological, without any time overlap.
     * 
    */
    public List<AnimationResponse> getAnimations() {
        return this.animations;
    }
    /**
     * Image overlay.
     * 
    */
    public ImageResponse getImage() {
        return this.image;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OverlayResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<AnimationResponse> animations;
        private ImageResponse image;

        public Builder() {
    	      // Empty
        }

        public Builder(OverlayResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.animations = defaults.animations;
    	      this.image = defaults.image;
        }

        public Builder setAnimations(List<AnimationResponse> animations) {
            this.animations = Objects.requireNonNull(animations);
            return this;
        }

        public Builder setImage(ImageResponse image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public OverlayResponse build() {
            return new OverlayResponse(animations, image);
        }
    }
}
