// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Location of the source in a Google Cloud Source Repository.
 * 
 */
public final class RepoSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final RepoSourceArgs Empty = new RepoSourceArgs();

    /**
     * Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="branchName")
      private final @Nullable Output<String> branchName;

    public Output<String> branchName() {
        return this.branchName == null ? Codegen.empty() : this.branchName;
    }

    /**
     * Explicit commit SHA to build.
     * 
     */
    @Import(name="commitSha")
      private final @Nullable Output<String> commitSha;

    public Output<String> commitSha() {
        return this.commitSha == null ? Codegen.empty() : this.commitSha;
    }

    /**
     * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
     * 
     */
    @Import(name="dir")
      private final @Nullable Output<String> dir;

    public Output<String> dir() {
        return this.dir == null ? Codegen.empty() : this.dir;
    }

    /**
     * Only trigger a build if the revision regex does NOT match the revision regex.
     * 
     */
    @Import(name="invertRegex")
      private final @Nullable Output<Boolean> invertRegex;

    public Output<Boolean> invertRegex() {
        return this.invertRegex == null ? Codegen.empty() : this.invertRegex;
    }

    /**
     * ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
     * 
     */
    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Name of the Cloud Source Repository.
     * 
     */
    @Import(name="repoName")
      private final @Nullable Output<String> repoName;

    public Output<String> repoName() {
        return this.repoName == null ? Codegen.empty() : this.repoName;
    }

    /**
     * Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
     * 
     */
    @Import(name="substitutions")
      private final @Nullable Output<Map<String,String>> substitutions;

    public Output<Map<String,String>> substitutions() {
        return this.substitutions == null ? Codegen.empty() : this.substitutions;
    }

    /**
     * Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="tagName")
      private final @Nullable Output<String> tagName;

    public Output<String> tagName() {
        return this.tagName == null ? Codegen.empty() : this.tagName;
    }

    public RepoSourceArgs(
        @Nullable Output<String> branchName,
        @Nullable Output<String> commitSha,
        @Nullable Output<String> dir,
        @Nullable Output<Boolean> invertRegex,
        @Nullable Output<String> project,
        @Nullable Output<String> repoName,
        @Nullable Output<Map<String,String>> substitutions,
        @Nullable Output<String> tagName) {
        this.branchName = branchName;
        this.commitSha = commitSha;
        this.dir = dir;
        this.invertRegex = invertRegex;
        this.project = project;
        this.repoName = repoName;
        this.substitutions = substitutions;
        this.tagName = tagName;
    }

    private RepoSourceArgs() {
        this.branchName = Codegen.empty();
        this.commitSha = Codegen.empty();
        this.dir = Codegen.empty();
        this.invertRegex = Codegen.empty();
        this.project = Codegen.empty();
        this.repoName = Codegen.empty();
        this.substitutions = Codegen.empty();
        this.tagName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepoSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> branchName;
        private @Nullable Output<String> commitSha;
        private @Nullable Output<String> dir;
        private @Nullable Output<Boolean> invertRegex;
        private @Nullable Output<String> project;
        private @Nullable Output<String> repoName;
        private @Nullable Output<Map<String,String>> substitutions;
        private @Nullable Output<String> tagName;

        public Builder() {
    	      // Empty
        }

        public Builder(RepoSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchName = defaults.branchName;
    	      this.commitSha = defaults.commitSha;
    	      this.dir = defaults.dir;
    	      this.invertRegex = defaults.invertRegex;
    	      this.project = defaults.project;
    	      this.repoName = defaults.repoName;
    	      this.substitutions = defaults.substitutions;
    	      this.tagName = defaults.tagName;
        }

        public Builder branchName(@Nullable Output<String> branchName) {
            this.branchName = branchName;
            return this;
        }
        public Builder branchName(@Nullable String branchName) {
            this.branchName = Codegen.ofNullable(branchName);
            return this;
        }
        public Builder commitSha(@Nullable Output<String> commitSha) {
            this.commitSha = commitSha;
            return this;
        }
        public Builder commitSha(@Nullable String commitSha) {
            this.commitSha = Codegen.ofNullable(commitSha);
            return this;
        }
        public Builder dir(@Nullable Output<String> dir) {
            this.dir = dir;
            return this;
        }
        public Builder dir(@Nullable String dir) {
            this.dir = Codegen.ofNullable(dir);
            return this;
        }
        public Builder invertRegex(@Nullable Output<Boolean> invertRegex) {
            this.invertRegex = invertRegex;
            return this;
        }
        public Builder invertRegex(@Nullable Boolean invertRegex) {
            this.invertRegex = Codegen.ofNullable(invertRegex);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder repoName(@Nullable Output<String> repoName) {
            this.repoName = repoName;
            return this;
        }
        public Builder repoName(@Nullable String repoName) {
            this.repoName = Codegen.ofNullable(repoName);
            return this;
        }
        public Builder substitutions(@Nullable Output<Map<String,String>> substitutions) {
            this.substitutions = substitutions;
            return this;
        }
        public Builder substitutions(@Nullable Map<String,String> substitutions) {
            this.substitutions = Codegen.ofNullable(substitutions);
            return this;
        }
        public Builder tagName(@Nullable Output<String> tagName) {
            this.tagName = tagName;
            return this;
        }
        public Builder tagName(@Nullable String tagName) {
            this.tagName = Codegen.ofNullable(tagName);
            return this;
        }        public RepoSourceArgs build() {
            return new RepoSourceArgs(branchName, commitSha, dir, invertRegex, project, repoName, substitutions, tagName);
        }
    }
}
