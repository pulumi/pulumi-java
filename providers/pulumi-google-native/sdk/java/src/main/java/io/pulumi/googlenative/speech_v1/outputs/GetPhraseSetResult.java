// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.speech_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.speech_v1.outputs.PhraseResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetPhraseSetResult {
    /**
     * Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
     * 
     */
    private final Double boost;
    /**
     * The resource name of the phrase set.
     * 
     */
    private final String name;
    /**
     * A list of word and phrases.
     * 
     */
    private final List<PhraseResponse> phrases;

    @OutputCustomType.Constructor
    private GetPhraseSetResult(
        @OutputCustomType.Parameter("boost") Double boost,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("phrases") List<PhraseResponse> phrases) {
        this.boost = boost;
        this.name = name;
        this.phrases = phrases;
    }

    /**
     * Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
     * 
    */
    public Double getBoost() {
        return this.boost;
    }
    /**
     * The resource name of the phrase set.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * A list of word and phrases.
     * 
    */
    public List<PhraseResponse> getPhrases() {
        return this.phrases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPhraseSetResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double boost;
        private String name;
        private List<PhraseResponse> phrases;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPhraseSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boost = defaults.boost;
    	      this.name = defaults.name;
    	      this.phrases = defaults.phrases;
        }

        public Builder setBoost(Double boost) {
            this.boost = Objects.requireNonNull(boost);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPhrases(List<PhraseResponse> phrases) {
            this.phrases = Objects.requireNonNull(phrases);
            return this;
        }
        public GetPhraseSetResult build() {
            return new GetPhraseSetResult(boost, name, phrases);
        }
    }
}
