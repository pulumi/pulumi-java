// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datamigration_v1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * SSL configuration information.
 * 
 */
public final class SslConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final SslConfigResponse Empty = new SslConfigResponse();

    /**
     * Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
     * 
     */
    @Import(name="caCertificate", required=true)
      private final String caCertificate;

    public String caCertificate() {
        return this.caCertificate;
    }

    /**
     * Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
     * 
     */
    @Import(name="clientCertificate", required=true)
      private final String clientCertificate;

    public String clientCertificate() {
        return this.clientCertificate;
    }

    /**
     * Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
     * 
     */
    @Import(name="clientKey", required=true)
      private final String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    /**
     * The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public SslConfigResponse(
        String caCertificate,
        String clientCertificate,
        String clientKey,
        String type) {
        this.caCertificate = Objects.requireNonNull(caCertificate, "expected parameter 'caCertificate' to be non-null");
        this.clientCertificate = Objects.requireNonNull(clientCertificate, "expected parameter 'clientCertificate' to be non-null");
        this.clientKey = Objects.requireNonNull(clientKey, "expected parameter 'clientKey' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SslConfigResponse() {
        this.caCertificate = null;
        this.clientCertificate = null;
        this.clientKey = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SslConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(SslConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.type = defaults.type;
        }

        public Builder caCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }
        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public SslConfigResponse build() {
            return new SslConfigResponse(caCertificate, clientCertificate, clientKey, type);
        }
    }
}
