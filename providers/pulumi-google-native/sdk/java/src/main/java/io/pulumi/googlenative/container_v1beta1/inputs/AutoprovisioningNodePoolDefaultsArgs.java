// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeManagementArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.ShieldedInstanceConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.UpgradeSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
 * 
 */
public final class AutoprovisioningNodePoolDefaultsArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutoprovisioningNodePoolDefaultsArgs Empty = new AutoprovisioningNodePoolDefaultsArgs();

    /**
     *  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
     * 
     */
    @Import(name="bootDiskKmsKey")
      private final @Nullable Output<String> bootDiskKmsKey;

    public Output<String> getBootDiskKmsKey() {
        return this.bootDiskKmsKey == null ? Output.empty() : this.bootDiskKmsKey;
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
     * 
     */
    @Import(name="diskSizeGb")
      private final @Nullable Output<Integer> diskSizeGb;

    public Output<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Output.empty() : this.diskSizeGb;
    }

    /**
     * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
     * 
     */
    @Import(name="diskType")
      private final @Nullable Output<String> diskType;

    public Output<String> getDiskType() {
        return this.diskType == null ? Output.empty() : this.diskType;
    }

    /**
     * The image type to use for NAP created node.
     * 
     */
    @Import(name="imageType")
      private final @Nullable Output<String> imageType;

    public Output<String> getImageType() {
        return this.imageType == null ? Output.empty() : this.imageType;
    }

    /**
     * NodeManagement configuration for this NodePool.
     * 
     */
    @Import(name="management")
      private final @Nullable Output<NodeManagementArgs> management;

    public Output<NodeManagementArgs> getManagement() {
        return this.management == null ? Output.empty() : this.management;
    }

    /**
     * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
     * 
     */
    @Import(name="minCpuPlatform")
      private final @Nullable Output<String> minCpuPlatform;

    public Output<String> getMinCpuPlatform() {
        return this.minCpuPlatform == null ? Output.empty() : this.minCpuPlatform;
    }

    /**
     * The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
     * 
     */
    @Import(name="oauthScopes")
      private final @Nullable Output<List<String>> oauthScopes;

    public Output<List<String>> getOauthScopes() {
        return this.oauthScopes == null ? Output.empty() : this.oauthScopes;
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
     * 
     */
    @Import(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount == null ? Output.empty() : this.serviceAccount;
    }

    /**
     * Shielded Instance options.
     * 
     */
    @Import(name="shieldedInstanceConfig")
      private final @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Output<ShieldedInstanceConfigArgs> getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Output.empty() : this.shieldedInstanceConfig;
    }

    /**
     * Upgrade settings control disruption and speed of the upgrade.
     * 
     */
    @Import(name="upgradeSettings")
      private final @Nullable Output<UpgradeSettingsArgs> upgradeSettings;

    public Output<UpgradeSettingsArgs> getUpgradeSettings() {
        return this.upgradeSettings == null ? Output.empty() : this.upgradeSettings;
    }

    public AutoprovisioningNodePoolDefaultsArgs(
        @Nullable Output<String> bootDiskKmsKey,
        @Nullable Output<Integer> diskSizeGb,
        @Nullable Output<String> diskType,
        @Nullable Output<String> imageType,
        @Nullable Output<NodeManagementArgs> management,
        @Nullable Output<String> minCpuPlatform,
        @Nullable Output<List<String>> oauthScopes,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig,
        @Nullable Output<UpgradeSettingsArgs> upgradeSettings) {
        this.bootDiskKmsKey = bootDiskKmsKey;
        this.diskSizeGb = diskSizeGb;
        this.diskType = diskType;
        this.imageType = imageType;
        this.management = management;
        this.minCpuPlatform = minCpuPlatform;
        this.oauthScopes = oauthScopes;
        this.serviceAccount = serviceAccount;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.upgradeSettings = upgradeSettings;
    }

    private AutoprovisioningNodePoolDefaultsArgs() {
        this.bootDiskKmsKey = Output.empty();
        this.diskSizeGb = Output.empty();
        this.diskType = Output.empty();
        this.imageType = Output.empty();
        this.management = Output.empty();
        this.minCpuPlatform = Output.empty();
        this.oauthScopes = Output.empty();
        this.serviceAccount = Output.empty();
        this.shieldedInstanceConfig = Output.empty();
        this.upgradeSettings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoprovisioningNodePoolDefaultsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> bootDiskKmsKey;
        private @Nullable Output<Integer> diskSizeGb;
        private @Nullable Output<String> diskType;
        private @Nullable Output<String> imageType;
        private @Nullable Output<NodeManagementArgs> management;
        private @Nullable Output<String> minCpuPlatform;
        private @Nullable Output<List<String>> oauthScopes;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig;
        private @Nullable Output<UpgradeSettingsArgs> upgradeSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoprovisioningNodePoolDefaultsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootDiskKmsKey = defaults.bootDiskKmsKey;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.imageType = defaults.imageType;
    	      this.management = defaults.management;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.upgradeSettings = defaults.upgradeSettings;
        }

        public Builder bootDiskKmsKey(@Nullable Output<String> bootDiskKmsKey) {
            this.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }

        public Builder bootDiskKmsKey(@Nullable String bootDiskKmsKey) {
            this.bootDiskKmsKey = Output.ofNullable(bootDiskKmsKey);
            return this;
        }

        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Output.ofNullable(diskSizeGb);
            return this;
        }

        public Builder diskType(@Nullable Output<String> diskType) {
            this.diskType = diskType;
            return this;
        }

        public Builder diskType(@Nullable String diskType) {
            this.diskType = Output.ofNullable(diskType);
            return this;
        }

        public Builder imageType(@Nullable Output<String> imageType) {
            this.imageType = imageType;
            return this;
        }

        public Builder imageType(@Nullable String imageType) {
            this.imageType = Output.ofNullable(imageType);
            return this;
        }

        public Builder management(@Nullable Output<NodeManagementArgs> management) {
            this.management = management;
            return this;
        }

        public Builder management(@Nullable NodeManagementArgs management) {
            this.management = Output.ofNullable(management);
            return this;
        }

        public Builder minCpuPlatform(@Nullable Output<String> minCpuPlatform) {
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }

        public Builder minCpuPlatform(@Nullable String minCpuPlatform) {
            this.minCpuPlatform = Output.ofNullable(minCpuPlatform);
            return this;
        }

        public Builder oauthScopes(@Nullable Output<List<String>> oauthScopes) {
            this.oauthScopes = oauthScopes;
            return this;
        }

        public Builder oauthScopes(@Nullable List<String> oauthScopes) {
            this.oauthScopes = Output.ofNullable(oauthScopes);
            return this;
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Output.ofNullable(serviceAccount);
            return this;
        }

        public Builder shieldedInstanceConfig(@Nullable Output<ShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder shieldedInstanceConfig(@Nullable ShieldedInstanceConfigArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Output.ofNullable(shieldedInstanceConfig);
            return this;
        }

        public Builder upgradeSettings(@Nullable Output<UpgradeSettingsArgs> upgradeSettings) {
            this.upgradeSettings = upgradeSettings;
            return this;
        }

        public Builder upgradeSettings(@Nullable UpgradeSettingsArgs upgradeSettings) {
            this.upgradeSettings = Output.ofNullable(upgradeSettings);
            return this;
        }
        public AutoprovisioningNodePoolDefaultsArgs build() {
            return new AutoprovisioningNodePoolDefaultsArgs(bootDiskKmsKey, diskSizeGb, diskType, imageType, management, minCpuPlatform, oauthScopes, serviceAccount, shieldedInstanceConfig, upgradeSettings);
        }
    }
}
