// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sqladmin_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.sqladmin_v1.outputs.DiskEncryptionConfigurationResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.DiskEncryptionStatusResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.InstanceFailoverReplicaResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.IpMappingResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.OnPremisesConfigurationResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.ReplicaConfigurationResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.SettingsResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.SqlOutOfDiskReportResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.SqlScheduledMaintenanceResponse;
import io.pulumi.googlenative.sqladmin_v1.outputs.SslCertResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetInstanceResult {
    private final String backendType;
    private final String connectionName;
    private final String createTime;
    private final String currentDiskSize;
    private final String databaseInstalledVersion;
    private final String databaseVersion;
    private final DiskEncryptionConfigurationResponse diskEncryptionConfiguration;
    private final DiskEncryptionStatusResponse diskEncryptionStatus;
    private final InstanceFailoverReplicaResponse failoverReplica;
    private final String gceZone;
    private final String instanceType;
    private final List<IpMappingResponse> ipAddresses;
    private final String kind;
    private final String masterInstanceName;
    private final String maxDiskSize;
    private final String name;
    private final OnPremisesConfigurationResponse onPremisesConfiguration;
    private final SqlOutOfDiskReportResponse outOfDiskReport;
    private final String project;
    private final String region;
    private final ReplicaConfigurationResponse replicaConfiguration;
    private final List<String> replicaNames;
    private final String rootPassword;
    private final Boolean satisfiesPzs;
    private final SqlScheduledMaintenanceResponse scheduledMaintenance;
    private final String secondaryGceZone;
    private final String selfLink;
    private final SslCertResponse serverCaCert;
    private final String serviceAccountEmailAddress;
    private final SettingsResponse settings;
    private final String state;
    private final List<String> suspensionReason;

    @OutputCustomType.Constructor({"backendType","connectionName","createTime","currentDiskSize","databaseInstalledVersion","databaseVersion","diskEncryptionConfiguration","diskEncryptionStatus","failoverReplica","gceZone","instanceType","ipAddresses","kind","masterInstanceName","maxDiskSize","name","onPremisesConfiguration","outOfDiskReport","project","region","replicaConfiguration","replicaNames","rootPassword","satisfiesPzs","scheduledMaintenance","secondaryGceZone","selfLink","serverCaCert","serviceAccountEmailAddress","settings","state","suspensionReason"})
    private GetInstanceResult(
        String backendType,
        String connectionName,
        String createTime,
        String currentDiskSize,
        String databaseInstalledVersion,
        String databaseVersion,
        DiskEncryptionConfigurationResponse diskEncryptionConfiguration,
        DiskEncryptionStatusResponse diskEncryptionStatus,
        InstanceFailoverReplicaResponse failoverReplica,
        String gceZone,
        String instanceType,
        List<IpMappingResponse> ipAddresses,
        String kind,
        String masterInstanceName,
        String maxDiskSize,
        String name,
        OnPremisesConfigurationResponse onPremisesConfiguration,
        SqlOutOfDiskReportResponse outOfDiskReport,
        String project,
        String region,
        ReplicaConfigurationResponse replicaConfiguration,
        List<String> replicaNames,
        String rootPassword,
        Boolean satisfiesPzs,
        SqlScheduledMaintenanceResponse scheduledMaintenance,
        String secondaryGceZone,
        String selfLink,
        SslCertResponse serverCaCert,
        String serviceAccountEmailAddress,
        SettingsResponse settings,
        String state,
        List<String> suspensionReason) {
        this.backendType = Objects.requireNonNull(backendType);
        this.connectionName = Objects.requireNonNull(connectionName);
        this.createTime = Objects.requireNonNull(createTime);
        this.currentDiskSize = Objects.requireNonNull(currentDiskSize);
        this.databaseInstalledVersion = Objects.requireNonNull(databaseInstalledVersion);
        this.databaseVersion = Objects.requireNonNull(databaseVersion);
        this.diskEncryptionConfiguration = Objects.requireNonNull(diskEncryptionConfiguration);
        this.diskEncryptionStatus = Objects.requireNonNull(diskEncryptionStatus);
        this.failoverReplica = Objects.requireNonNull(failoverReplica);
        this.gceZone = Objects.requireNonNull(gceZone);
        this.instanceType = Objects.requireNonNull(instanceType);
        this.ipAddresses = Objects.requireNonNull(ipAddresses);
        this.kind = Objects.requireNonNull(kind);
        this.masterInstanceName = Objects.requireNonNull(masterInstanceName);
        this.maxDiskSize = Objects.requireNonNull(maxDiskSize);
        this.name = Objects.requireNonNull(name);
        this.onPremisesConfiguration = Objects.requireNonNull(onPremisesConfiguration);
        this.outOfDiskReport = Objects.requireNonNull(outOfDiskReport);
        this.project = Objects.requireNonNull(project);
        this.region = Objects.requireNonNull(region);
        this.replicaConfiguration = Objects.requireNonNull(replicaConfiguration);
        this.replicaNames = Objects.requireNonNull(replicaNames);
        this.rootPassword = Objects.requireNonNull(rootPassword);
        this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
        this.scheduledMaintenance = Objects.requireNonNull(scheduledMaintenance);
        this.secondaryGceZone = Objects.requireNonNull(secondaryGceZone);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.serverCaCert = Objects.requireNonNull(serverCaCert);
        this.serviceAccountEmailAddress = Objects.requireNonNull(serviceAccountEmailAddress);
        this.settings = Objects.requireNonNull(settings);
        this.state = Objects.requireNonNull(state);
        this.suspensionReason = Objects.requireNonNull(suspensionReason);
    }

    public String getBackendType() {
        return this.backendType;
    }
    public String getConnectionName() {
        return this.connectionName;
    }
    public String getCreateTime() {
        return this.createTime;
    }
    public String getCurrentDiskSize() {
        return this.currentDiskSize;
    }
    public String getDatabaseInstalledVersion() {
        return this.databaseInstalledVersion;
    }
    public String getDatabaseVersion() {
        return this.databaseVersion;
    }
    public DiskEncryptionConfigurationResponse getDiskEncryptionConfiguration() {
        return this.diskEncryptionConfiguration;
    }
    public DiskEncryptionStatusResponse getDiskEncryptionStatus() {
        return this.diskEncryptionStatus;
    }
    public InstanceFailoverReplicaResponse getFailoverReplica() {
        return this.failoverReplica;
    }
    public String getGceZone() {
        return this.gceZone;
    }
    public String getInstanceType() {
        return this.instanceType;
    }
    public List<IpMappingResponse> getIpAddresses() {
        return this.ipAddresses;
    }
    public String getKind() {
        return this.kind;
    }
    public String getMasterInstanceName() {
        return this.masterInstanceName;
    }
    public String getMaxDiskSize() {
        return this.maxDiskSize;
    }
    public String getName() {
        return this.name;
    }
    public OnPremisesConfigurationResponse getOnPremisesConfiguration() {
        return this.onPremisesConfiguration;
    }
    public SqlOutOfDiskReportResponse getOutOfDiskReport() {
        return this.outOfDiskReport;
    }
    public String getProject() {
        return this.project;
    }
    public String getRegion() {
        return this.region;
    }
    public ReplicaConfigurationResponse getReplicaConfiguration() {
        return this.replicaConfiguration;
    }
    public List<String> getReplicaNames() {
        return this.replicaNames;
    }
    public String getRootPassword() {
        return this.rootPassword;
    }
    public Boolean getSatisfiesPzs() {
        return this.satisfiesPzs;
    }
    public SqlScheduledMaintenanceResponse getScheduledMaintenance() {
        return this.scheduledMaintenance;
    }
    public String getSecondaryGceZone() {
        return this.secondaryGceZone;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public SslCertResponse getServerCaCert() {
        return this.serverCaCert;
    }
    public String getServiceAccountEmailAddress() {
        return this.serviceAccountEmailAddress;
    }
    public SettingsResponse getSettings() {
        return this.settings;
    }
    public String getState() {
        return this.state;
    }
    public List<String> getSuspensionReason() {
        return this.suspensionReason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backendType;
        private String connectionName;
        private String createTime;
        private String currentDiskSize;
        private String databaseInstalledVersion;
        private String databaseVersion;
        private DiskEncryptionConfigurationResponse diskEncryptionConfiguration;
        private DiskEncryptionStatusResponse diskEncryptionStatus;
        private InstanceFailoverReplicaResponse failoverReplica;
        private String gceZone;
        private String instanceType;
        private List<IpMappingResponse> ipAddresses;
        private String kind;
        private String masterInstanceName;
        private String maxDiskSize;
        private String name;
        private OnPremisesConfigurationResponse onPremisesConfiguration;
        private SqlOutOfDiskReportResponse outOfDiskReport;
        private String project;
        private String region;
        private ReplicaConfigurationResponse replicaConfiguration;
        private List<String> replicaNames;
        private String rootPassword;
        private Boolean satisfiesPzs;
        private SqlScheduledMaintenanceResponse scheduledMaintenance;
        private String secondaryGceZone;
        private String selfLink;
        private SslCertResponse serverCaCert;
        private String serviceAccountEmailAddress;
        private SettingsResponse settings;
        private String state;
        private List<String> suspensionReason;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendType = defaults.backendType;
    	      this.connectionName = defaults.connectionName;
    	      this.createTime = defaults.createTime;
    	      this.currentDiskSize = defaults.currentDiskSize;
    	      this.databaseInstalledVersion = defaults.databaseInstalledVersion;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.diskEncryptionConfiguration = defaults.diskEncryptionConfiguration;
    	      this.diskEncryptionStatus = defaults.diskEncryptionStatus;
    	      this.failoverReplica = defaults.failoverReplica;
    	      this.gceZone = defaults.gceZone;
    	      this.instanceType = defaults.instanceType;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.kind = defaults.kind;
    	      this.masterInstanceName = defaults.masterInstanceName;
    	      this.maxDiskSize = defaults.maxDiskSize;
    	      this.name = defaults.name;
    	      this.onPremisesConfiguration = defaults.onPremisesConfiguration;
    	      this.outOfDiskReport = defaults.outOfDiskReport;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.replicaConfiguration = defaults.replicaConfiguration;
    	      this.replicaNames = defaults.replicaNames;
    	      this.rootPassword = defaults.rootPassword;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.scheduledMaintenance = defaults.scheduledMaintenance;
    	      this.secondaryGceZone = defaults.secondaryGceZone;
    	      this.selfLink = defaults.selfLink;
    	      this.serverCaCert = defaults.serverCaCert;
    	      this.serviceAccountEmailAddress = defaults.serviceAccountEmailAddress;
    	      this.settings = defaults.settings;
    	      this.state = defaults.state;
    	      this.suspensionReason = defaults.suspensionReason;
        }

        public Builder setBackendType(String backendType) {
            this.backendType = Objects.requireNonNull(backendType);
            return this;
        }

        public Builder setConnectionName(String connectionName) {
            this.connectionName = Objects.requireNonNull(connectionName);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCurrentDiskSize(String currentDiskSize) {
            this.currentDiskSize = Objects.requireNonNull(currentDiskSize);
            return this;
        }

        public Builder setDatabaseInstalledVersion(String databaseInstalledVersion) {
            this.databaseInstalledVersion = Objects.requireNonNull(databaseInstalledVersion);
            return this;
        }

        public Builder setDatabaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }

        public Builder setDiskEncryptionConfiguration(DiskEncryptionConfigurationResponse diskEncryptionConfiguration) {
            this.diskEncryptionConfiguration = Objects.requireNonNull(diskEncryptionConfiguration);
            return this;
        }

        public Builder setDiskEncryptionStatus(DiskEncryptionStatusResponse diskEncryptionStatus) {
            this.diskEncryptionStatus = Objects.requireNonNull(diskEncryptionStatus);
            return this;
        }

        public Builder setFailoverReplica(InstanceFailoverReplicaResponse failoverReplica) {
            this.failoverReplica = Objects.requireNonNull(failoverReplica);
            return this;
        }

        public Builder setGceZone(String gceZone) {
            this.gceZone = Objects.requireNonNull(gceZone);
            return this;
        }

        public Builder setInstanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }

        public Builder setIpAddresses(List<IpMappingResponse> ipAddresses) {
            this.ipAddresses = Objects.requireNonNull(ipAddresses);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setMasterInstanceName(String masterInstanceName) {
            this.masterInstanceName = Objects.requireNonNull(masterInstanceName);
            return this;
        }

        public Builder setMaxDiskSize(String maxDiskSize) {
            this.maxDiskSize = Objects.requireNonNull(maxDiskSize);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setOnPremisesConfiguration(OnPremisesConfigurationResponse onPremisesConfiguration) {
            this.onPremisesConfiguration = Objects.requireNonNull(onPremisesConfiguration);
            return this;
        }

        public Builder setOutOfDiskReport(SqlOutOfDiskReportResponse outOfDiskReport) {
            this.outOfDiskReport = Objects.requireNonNull(outOfDiskReport);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setRegion(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder setReplicaConfiguration(ReplicaConfigurationResponse replicaConfiguration) {
            this.replicaConfiguration = Objects.requireNonNull(replicaConfiguration);
            return this;
        }

        public Builder setReplicaNames(List<String> replicaNames) {
            this.replicaNames = Objects.requireNonNull(replicaNames);
            return this;
        }

        public Builder setRootPassword(String rootPassword) {
            this.rootPassword = Objects.requireNonNull(rootPassword);
            return this;
        }

        public Builder setSatisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }

        public Builder setScheduledMaintenance(SqlScheduledMaintenanceResponse scheduledMaintenance) {
            this.scheduledMaintenance = Objects.requireNonNull(scheduledMaintenance);
            return this;
        }

        public Builder setSecondaryGceZone(String secondaryGceZone) {
            this.secondaryGceZone = Objects.requireNonNull(secondaryGceZone);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setServerCaCert(SslCertResponse serverCaCert) {
            this.serverCaCert = Objects.requireNonNull(serverCaCert);
            return this;
        }

        public Builder setServiceAccountEmailAddress(String serviceAccountEmailAddress) {
            this.serviceAccountEmailAddress = Objects.requireNonNull(serviceAccountEmailAddress);
            return this;
        }

        public Builder setSettings(SettingsResponse settings) {
            this.settings = Objects.requireNonNull(settings);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setSuspensionReason(List<String> suspensionReason) {
            this.suspensionReason = Objects.requireNonNull(suspensionReason);
            return this;
        }

        public GetInstanceResult build() {
            return new GetInstanceResult(backendType, connectionName, createTime, currentDiskSize, databaseInstalledVersion, databaseVersion, diskEncryptionConfiguration, diskEncryptionStatus, failoverReplica, gceZone, instanceType, ipAddresses, kind, masterInstanceName, maxDiskSize, name, onPremisesConfiguration, outOfDiskReport, project, region, replicaConfiguration, replicaNames, rootPassword, satisfiesPzs, scheduledMaintenance, secondaryGceZone, selfLink, serverCaCert, serviceAccountEmailAddress, settings, state, suspensionReason);
        }
    }
}
