// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudsearch_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.cloudsearch_v1.inputs.DataSourceRestrictionArgs;
import io.pulumi.googlenative.cloudsearch_v1.inputs.FacetOptionsArgs;
import io.pulumi.googlenative.cloudsearch_v1.inputs.QueryInterpretationConfigArgs;
import io.pulumi.googlenative.cloudsearch_v1.inputs.ScoringConfigArgs;
import io.pulumi.googlenative.cloudsearch_v1.inputs.SortOptionsArgs;
import io.pulumi.googlenative.cloudsearch_v1.inputs.SourceConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SearchApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final SearchApplicationArgs Empty = new SearchApplicationArgs();

    /**
     * Retrictions applied to the configurations. The maximum number of elements is 10.
     * 
     */
    @Import(name="dataSourceRestrictions")
      private final @Nullable Output<List<DataSourceRestrictionArgs>> dataSourceRestrictions;

    public Output<List<DataSourceRestrictionArgs>> getDataSourceRestrictions() {
        return this.dataSourceRestrictions == null ? Output.empty() : this.dataSourceRestrictions;
    }

    /**
     * The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
     * 
     */
    @Import(name="defaultFacetOptions")
      private final @Nullable Output<List<FacetOptionsArgs>> defaultFacetOptions;

    public Output<List<FacetOptionsArgs>> getDefaultFacetOptions() {
        return this.defaultFacetOptions == null ? Output.empty() : this.defaultFacetOptions;
    }

    /**
     * The default options for sorting the search results
     * 
     */
    @Import(name="defaultSortOptions")
      private final @Nullable Output<SortOptionsArgs> defaultSortOptions;

    public Output<SortOptionsArgs> getDefaultSortOptions() {
        return this.defaultSortOptions == null ? Output.empty() : this.defaultSortOptions;
    }

    /**
     * Display name of the Search Application. The maximum length is 300 characters.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * Indicates whether audit logging is on/off for requests made for the search application in query APIs.
     * 
     */
    @Import(name="enableAuditLog")
      private final @Nullable Output<Boolean> enableAuditLog;

    public Output<Boolean> getEnableAuditLog() {
        return this.enableAuditLog == null ? Output.empty() : this.enableAuditLog;
    }

    /**
     * Name of the Search Application. Format: searchapplications/{application_id}.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The default options for query interpretation
     * 
     */
    @Import(name="queryInterpretationConfig")
      private final @Nullable Output<QueryInterpretationConfigArgs> queryInterpretationConfig;

    public Output<QueryInterpretationConfigArgs> getQueryInterpretationConfig() {
        return this.queryInterpretationConfig == null ? Output.empty() : this.queryInterpretationConfig;
    }

    /**
     * With each result we should return the URI for its thumbnail (when applicable)
     * 
     */
    @Import(name="returnResultThumbnailUrls")
      private final @Nullable Output<Boolean> returnResultThumbnailUrls;

    public Output<Boolean> getReturnResultThumbnailUrls() {
        return this.returnResultThumbnailUrls == null ? Output.empty() : this.returnResultThumbnailUrls;
    }

    /**
     * Configuration for ranking results.
     * 
     */
    @Import(name="scoringConfig")
      private final @Nullable Output<ScoringConfigArgs> scoringConfig;

    public Output<ScoringConfigArgs> getScoringConfig() {
        return this.scoringConfig == null ? Output.empty() : this.scoringConfig;
    }

    /**
     * Configuration for a sources specified in data_source_restrictions.
     * 
     */
    @Import(name="sourceConfig")
      private final @Nullable Output<List<SourceConfigArgs>> sourceConfig;

    public Output<List<SourceConfigArgs>> getSourceConfig() {
        return this.sourceConfig == null ? Output.empty() : this.sourceConfig;
    }

    public SearchApplicationArgs(
        @Nullable Output<List<DataSourceRestrictionArgs>> dataSourceRestrictions,
        @Nullable Output<List<FacetOptionsArgs>> defaultFacetOptions,
        @Nullable Output<SortOptionsArgs> defaultSortOptions,
        @Nullable Output<String> displayName,
        @Nullable Output<Boolean> enableAuditLog,
        @Nullable Output<String> name,
        @Nullable Output<QueryInterpretationConfigArgs> queryInterpretationConfig,
        @Nullable Output<Boolean> returnResultThumbnailUrls,
        @Nullable Output<ScoringConfigArgs> scoringConfig,
        @Nullable Output<List<SourceConfigArgs>> sourceConfig) {
        this.dataSourceRestrictions = dataSourceRestrictions;
        this.defaultFacetOptions = defaultFacetOptions;
        this.defaultSortOptions = defaultSortOptions;
        this.displayName = displayName;
        this.enableAuditLog = enableAuditLog;
        this.name = name;
        this.queryInterpretationConfig = queryInterpretationConfig;
        this.returnResultThumbnailUrls = returnResultThumbnailUrls;
        this.scoringConfig = scoringConfig;
        this.sourceConfig = sourceConfig;
    }

    private SearchApplicationArgs() {
        this.dataSourceRestrictions = Output.empty();
        this.defaultFacetOptions = Output.empty();
        this.defaultSortOptions = Output.empty();
        this.displayName = Output.empty();
        this.enableAuditLog = Output.empty();
        this.name = Output.empty();
        this.queryInterpretationConfig = Output.empty();
        this.returnResultThumbnailUrls = Output.empty();
        this.scoringConfig = Output.empty();
        this.sourceConfig = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SearchApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<DataSourceRestrictionArgs>> dataSourceRestrictions;
        private @Nullable Output<List<FacetOptionsArgs>> defaultFacetOptions;
        private @Nullable Output<SortOptionsArgs> defaultSortOptions;
        private @Nullable Output<String> displayName;
        private @Nullable Output<Boolean> enableAuditLog;
        private @Nullable Output<String> name;
        private @Nullable Output<QueryInterpretationConfigArgs> queryInterpretationConfig;
        private @Nullable Output<Boolean> returnResultThumbnailUrls;
        private @Nullable Output<ScoringConfigArgs> scoringConfig;
        private @Nullable Output<List<SourceConfigArgs>> sourceConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(SearchApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSourceRestrictions = defaults.dataSourceRestrictions;
    	      this.defaultFacetOptions = defaults.defaultFacetOptions;
    	      this.defaultSortOptions = defaults.defaultSortOptions;
    	      this.displayName = defaults.displayName;
    	      this.enableAuditLog = defaults.enableAuditLog;
    	      this.name = defaults.name;
    	      this.queryInterpretationConfig = defaults.queryInterpretationConfig;
    	      this.returnResultThumbnailUrls = defaults.returnResultThumbnailUrls;
    	      this.scoringConfig = defaults.scoringConfig;
    	      this.sourceConfig = defaults.sourceConfig;
        }

        public Builder dataSourceRestrictions(@Nullable Output<List<DataSourceRestrictionArgs>> dataSourceRestrictions) {
            this.dataSourceRestrictions = dataSourceRestrictions;
            return this;
        }

        public Builder dataSourceRestrictions(@Nullable List<DataSourceRestrictionArgs> dataSourceRestrictions) {
            this.dataSourceRestrictions = Output.ofNullable(dataSourceRestrictions);
            return this;
        }

        public Builder defaultFacetOptions(@Nullable Output<List<FacetOptionsArgs>> defaultFacetOptions) {
            this.defaultFacetOptions = defaultFacetOptions;
            return this;
        }

        public Builder defaultFacetOptions(@Nullable List<FacetOptionsArgs> defaultFacetOptions) {
            this.defaultFacetOptions = Output.ofNullable(defaultFacetOptions);
            return this;
        }

        public Builder defaultSortOptions(@Nullable Output<SortOptionsArgs> defaultSortOptions) {
            this.defaultSortOptions = defaultSortOptions;
            return this;
        }

        public Builder defaultSortOptions(@Nullable SortOptionsArgs defaultSortOptions) {
            this.defaultSortOptions = Output.ofNullable(defaultSortOptions);
            return this;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder enableAuditLog(@Nullable Output<Boolean> enableAuditLog) {
            this.enableAuditLog = enableAuditLog;
            return this;
        }

        public Builder enableAuditLog(@Nullable Boolean enableAuditLog) {
            this.enableAuditLog = Output.ofNullable(enableAuditLog);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder queryInterpretationConfig(@Nullable Output<QueryInterpretationConfigArgs> queryInterpretationConfig) {
            this.queryInterpretationConfig = queryInterpretationConfig;
            return this;
        }

        public Builder queryInterpretationConfig(@Nullable QueryInterpretationConfigArgs queryInterpretationConfig) {
            this.queryInterpretationConfig = Output.ofNullable(queryInterpretationConfig);
            return this;
        }

        public Builder returnResultThumbnailUrls(@Nullable Output<Boolean> returnResultThumbnailUrls) {
            this.returnResultThumbnailUrls = returnResultThumbnailUrls;
            return this;
        }

        public Builder returnResultThumbnailUrls(@Nullable Boolean returnResultThumbnailUrls) {
            this.returnResultThumbnailUrls = Output.ofNullable(returnResultThumbnailUrls);
            return this;
        }

        public Builder scoringConfig(@Nullable Output<ScoringConfigArgs> scoringConfig) {
            this.scoringConfig = scoringConfig;
            return this;
        }

        public Builder scoringConfig(@Nullable ScoringConfigArgs scoringConfig) {
            this.scoringConfig = Output.ofNullable(scoringConfig);
            return this;
        }

        public Builder sourceConfig(@Nullable Output<List<SourceConfigArgs>> sourceConfig) {
            this.sourceConfig = sourceConfig;
            return this;
        }

        public Builder sourceConfig(@Nullable List<SourceConfigArgs> sourceConfig) {
            this.sourceConfig = Output.ofNullable(sourceConfig);
            return this;
        }
        public SearchApplicationArgs build() {
            return new SearchApplicationArgs(dataSourceRestrictions, defaultFacetOptions, defaultSortOptions, displayName, enableAuditLog, name, queryInterpretationConfig, returnResultThumbnailUrls, scoringConfig, sourceConfig);
        }
    }
}
