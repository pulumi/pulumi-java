// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networkconnectivity_v1alpha1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * RouterAppliance represents a Router appliance which is specified by a VM URI and a NIC address.
 * 
 */
public final class RouterApplianceInstanceResponse extends io.pulumi.resources.InvokeArgs {

    public static final RouterApplianceInstanceResponse Empty = new RouterApplianceInstanceResponse();

    /**
     * The IP address of the network interface to use for peering.
     * 
     */
    @InputImport(name="ipAddress", required=true)
      private final String ipAddress;

    public String getIpAddress() {
        return this.ipAddress;
    }

    @InputImport(name="networkInterface", required=true)
      private final String networkInterface;

    public String getNetworkInterface() {
        return this.networkInterface;
    }

    /**
     * The URI of the virtual machine resource
     * 
     */
    @InputImport(name="virtualMachine", required=true)
      private final String virtualMachine;

    public String getVirtualMachine() {
        return this.virtualMachine;
    }

    public RouterApplianceInstanceResponse(
        String ipAddress,
        String networkInterface,
        String virtualMachine) {
        this.ipAddress = Objects.requireNonNull(ipAddress, "expected parameter 'ipAddress' to be non-null");
        this.networkInterface = Objects.requireNonNull(networkInterface, "expected parameter 'networkInterface' to be non-null");
        this.virtualMachine = Objects.requireNonNull(virtualMachine, "expected parameter 'virtualMachine' to be non-null");
    }

    private RouterApplianceInstanceResponse() {
        this.ipAddress = null;
        this.networkInterface = null;
        this.virtualMachine = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterApplianceInstanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String ipAddress;
        private String networkInterface;
        private String virtualMachine;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterApplianceInstanceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.networkInterface = defaults.networkInterface;
    	      this.virtualMachine = defaults.virtualMachine;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }

        public Builder networkInterface(String networkInterface) {
            this.networkInterface = Objects.requireNonNull(networkInterface);
            return this;
        }

        public Builder virtualMachine(String virtualMachine) {
            this.virtualMachine = Objects.requireNonNull(virtualMachine);
            return this;
        }
        public RouterApplianceInstanceResponse build() {
            return new RouterApplianceInstanceResponse(ipAddress, networkInterface, virtualMachine);
        }
    }
}
