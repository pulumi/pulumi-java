// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.genomics_v1alpha2.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.genomics_v1alpha2.outputs.DockerExecutorResponse;
import io.pulumi.googlenative.genomics_v1alpha2.outputs.PipelineParameterResponse;
import io.pulumi.googlenative.genomics_v1alpha2.outputs.PipelineResourcesResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetPipelineResult {
    /**
     * User-specified description.
     * 
     */
    private final String description;
    /**
     * Specifies the docker run information.
     * 
     */
    private final DockerExecutorResponse docker;
    /**
     * Input parameters of the pipeline.
     * 
     */
    private final List<PipelineParameterResponse> inputParameters;
    /**
     * A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
     * 
     */
    private final String name;
    /**
     * Output parameters of the pipeline.
     * 
     */
    private final List<PipelineParameterResponse> outputParameters;
    /**
     * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
     * 
     */
    private final String pipelineId;
    /**
     * The project in which to create the pipeline. The caller must have WRITE access.
     * 
     */
    private final String project;
    /**
     * Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
     * 
     */
    private final PipelineResourcesResponse resources;

    @OutputCustomType.Constructor
    private GetPipelineResult(
        @OutputCustomType.Parameter("description") String description,
        @OutputCustomType.Parameter("docker") DockerExecutorResponse docker,
        @OutputCustomType.Parameter("inputParameters") List<PipelineParameterResponse> inputParameters,
        @OutputCustomType.Parameter("name") String name,
        @OutputCustomType.Parameter("outputParameters") List<PipelineParameterResponse> outputParameters,
        @OutputCustomType.Parameter("pipelineId") String pipelineId,
        @OutputCustomType.Parameter("project") String project,
        @OutputCustomType.Parameter("resources") PipelineResourcesResponse resources) {
        this.description = description;
        this.docker = docker;
        this.inputParameters = inputParameters;
        this.name = name;
        this.outputParameters = outputParameters;
        this.pipelineId = pipelineId;
        this.project = project;
        this.resources = resources;
    }

    /**
     * User-specified description.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * Specifies the docker run information.
     * 
    */
    public DockerExecutorResponse getDocker() {
        return this.docker;
    }
    /**
     * Input parameters of the pipeline.
     * 
    */
    public List<PipelineParameterResponse> getInputParameters() {
        return this.inputParameters;
    }
    /**
     * A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Output parameters of the pipeline.
     * 
    */
    public List<PipelineParameterResponse> getOutputParameters() {
        return this.outputParameters;
    }
    /**
     * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
     * 
    */
    public String getPipelineId() {
        return this.pipelineId;
    }
    /**
     * The project in which to create the pipeline. The caller must have WRITE access.
     * 
    */
    public String getProject() {
        return this.project;
    }
    /**
     * Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
     * 
    */
    public PipelineResourcesResponse getResources() {
        return this.resources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private DockerExecutorResponse docker;
        private List<PipelineParameterResponse> inputParameters;
        private String name;
        private List<PipelineParameterResponse> outputParameters;
        private String pipelineId;
        private String project;
        private PipelineResourcesResponse resources;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPipelineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.docker = defaults.docker;
    	      this.inputParameters = defaults.inputParameters;
    	      this.name = defaults.name;
    	      this.outputParameters = defaults.outputParameters;
    	      this.pipelineId = defaults.pipelineId;
    	      this.project = defaults.project;
    	      this.resources = defaults.resources;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDocker(DockerExecutorResponse docker) {
            this.docker = Objects.requireNonNull(docker);
            return this;
        }

        public Builder setInputParameters(List<PipelineParameterResponse> inputParameters) {
            this.inputParameters = Objects.requireNonNull(inputParameters);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setOutputParameters(List<PipelineParameterResponse> outputParameters) {
            this.outputParameters = Objects.requireNonNull(outputParameters);
            return this;
        }

        public Builder setPipelineId(String pipelineId) {
            this.pipelineId = Objects.requireNonNull(pipelineId);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setResources(PipelineResourcesResponse resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public GetPipelineResult build() {
            return new GetPipelineResult(description, docker, inputParameters, name, outputParameters, pipelineId, project, resources);
        }
    }
}
