// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.dataflow_v1b3.enums.ExecutionStageSummaryKind;
import io.pulumi.googlenative.dataflow_v1b3.inputs.ComponentSourceArgs;
import io.pulumi.googlenative.dataflow_v1b3.inputs.ComponentTransformArgs;
import io.pulumi.googlenative.dataflow_v1b3.inputs.StageSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
 * 
 */
public final class ExecutionStageSummaryArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExecutionStageSummaryArgs Empty = new ExecutionStageSummaryArgs();

    /**
     * Collections produced and consumed by component transforms of this stage.
     * 
     */
    @InputImport(name="componentSource")
      private final @Nullable Input<List<ComponentSourceArgs>> componentSource;

    public Input<List<ComponentSourceArgs>> getComponentSource() {
        return this.componentSource == null ? Input.empty() : this.componentSource;
    }

    /**
     * Transforms that comprise this execution stage.
     * 
     */
    @InputImport(name="componentTransform")
      private final @Nullable Input<List<ComponentTransformArgs>> componentTransform;

    public Input<List<ComponentTransformArgs>> getComponentTransform() {
        return this.componentTransform == null ? Input.empty() : this.componentTransform;
    }

    /**
     * Dataflow service generated id for this stage.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Input sources for this stage.
     * 
     */
    @InputImport(name="inputSource")
      private final @Nullable Input<List<StageSourceArgs>> inputSource;

    public Input<List<StageSourceArgs>> getInputSource() {
        return this.inputSource == null ? Input.empty() : this.inputSource;
    }

    /**
     * Type of transform this stage is executing.
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Input<ExecutionStageSummaryKind> kind;

    public Input<ExecutionStageSummaryKind> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * Dataflow service generated name for this stage.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Output sources for this stage.
     * 
     */
    @InputImport(name="outputSource")
      private final @Nullable Input<List<StageSourceArgs>> outputSource;

    public Input<List<StageSourceArgs>> getOutputSource() {
        return this.outputSource == null ? Input.empty() : this.outputSource;
    }

    /**
     * Other stages that must complete before this stage can run.
     * 
     */
    @InputImport(name="prerequisiteStage")
      private final @Nullable Input<List<String>> prerequisiteStage;

    public Input<List<String>> getPrerequisiteStage() {
        return this.prerequisiteStage == null ? Input.empty() : this.prerequisiteStage;
    }

    public ExecutionStageSummaryArgs(
        @Nullable Input<List<ComponentSourceArgs>> componentSource,
        @Nullable Input<List<ComponentTransformArgs>> componentTransform,
        @Nullable Input<String> id,
        @Nullable Input<List<StageSourceArgs>> inputSource,
        @Nullable Input<ExecutionStageSummaryKind> kind,
        @Nullable Input<String> name,
        @Nullable Input<List<StageSourceArgs>> outputSource,
        @Nullable Input<List<String>> prerequisiteStage) {
        this.componentSource = componentSource;
        this.componentTransform = componentTransform;
        this.id = id;
        this.inputSource = inputSource;
        this.kind = kind;
        this.name = name;
        this.outputSource = outputSource;
        this.prerequisiteStage = prerequisiteStage;
    }

    private ExecutionStageSummaryArgs() {
        this.componentSource = Input.empty();
        this.componentTransform = Input.empty();
        this.id = Input.empty();
        this.inputSource = Input.empty();
        this.kind = Input.empty();
        this.name = Input.empty();
        this.outputSource = Input.empty();
        this.prerequisiteStage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionStageSummaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ComponentSourceArgs>> componentSource;
        private @Nullable Input<List<ComponentTransformArgs>> componentTransform;
        private @Nullable Input<String> id;
        private @Nullable Input<List<StageSourceArgs>> inputSource;
        private @Nullable Input<ExecutionStageSummaryKind> kind;
        private @Nullable Input<String> name;
        private @Nullable Input<List<StageSourceArgs>> outputSource;
        private @Nullable Input<List<String>> prerequisiteStage;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecutionStageSummaryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.componentSource = defaults.componentSource;
    	      this.componentTransform = defaults.componentTransform;
    	      this.id = defaults.id;
    	      this.inputSource = defaults.inputSource;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.outputSource = defaults.outputSource;
    	      this.prerequisiteStage = defaults.prerequisiteStage;
        }

        public Builder componentSource(@Nullable Input<List<ComponentSourceArgs>> componentSource) {
            this.componentSource = componentSource;
            return this;
        }

        public Builder componentSource(@Nullable List<ComponentSourceArgs> componentSource) {
            this.componentSource = Input.ofNullable(componentSource);
            return this;
        }

        public Builder componentTransform(@Nullable Input<List<ComponentTransformArgs>> componentTransform) {
            this.componentTransform = componentTransform;
            return this;
        }

        public Builder componentTransform(@Nullable List<ComponentTransformArgs> componentTransform) {
            this.componentTransform = Input.ofNullable(componentTransform);
            return this;
        }

        public Builder id(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder inputSource(@Nullable Input<List<StageSourceArgs>> inputSource) {
            this.inputSource = inputSource;
            return this;
        }

        public Builder inputSource(@Nullable List<StageSourceArgs> inputSource) {
            this.inputSource = Input.ofNullable(inputSource);
            return this;
        }

        public Builder kind(@Nullable Input<ExecutionStageSummaryKind> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable ExecutionStageSummaryKind kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder outputSource(@Nullable Input<List<StageSourceArgs>> outputSource) {
            this.outputSource = outputSource;
            return this;
        }

        public Builder outputSource(@Nullable List<StageSourceArgs> outputSource) {
            this.outputSource = Input.ofNullable(outputSource);
            return this;
        }

        public Builder prerequisiteStage(@Nullable Input<List<String>> prerequisiteStage) {
            this.prerequisiteStage = prerequisiteStage;
            return this;
        }

        public Builder prerequisiteStage(@Nullable List<String> prerequisiteStage) {
            this.prerequisiteStage = Input.ofNullable(prerequisiteStage);
            return this;
        }
        public ExecutionStageSummaryArgs build() {
            return new ExecutionStageSummaryArgs(componentSource, componentTransform, id, inputSource, kind, name, outputSource, prerequisiteStage);
        }
    }
}
