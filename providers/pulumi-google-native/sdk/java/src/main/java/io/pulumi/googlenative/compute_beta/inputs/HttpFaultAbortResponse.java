// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;


/**
 * Specification for how requests are aborted as part of fault injection.
 * 
 */
public final class HttpFaultAbortResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpFaultAbortResponse Empty = new HttpFaultAbortResponse();

    /**
     * The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
     * 
     */
    @InputImport(name="httpStatus", required=true)
    private final Integer httpStatus;

    public Integer getHttpStatus() {
        return this.httpStatus;
    }

    /**
     * The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
     * 
     */
    @InputImport(name="percentage", required=true)
    private final Double percentage;

    public Double getPercentage() {
        return this.percentage;
    }

    public HttpFaultAbortResponse(
        Integer httpStatus,
        Double percentage) {
        this.httpStatus = Objects.requireNonNull(httpStatus, "expected parameter 'httpStatus' to be non-null");
        this.percentage = Objects.requireNonNull(percentage, "expected parameter 'percentage' to be non-null");
    }

    private HttpFaultAbortResponse() {
        this.httpStatus = null;
        this.percentage = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpFaultAbortResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer httpStatus;
        private Double percentage;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpFaultAbortResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpStatus = defaults.httpStatus;
    	      this.percentage = defaults.percentage;
        }

        public Builder setHttpStatus(Integer httpStatus) {
            this.httpStatus = Objects.requireNonNull(httpStatus);
            return this;
        }

        public Builder setPercentage(Double percentage) {
            this.percentage = Objects.requireNonNull(percentage);
            return this;
        }

        public HttpFaultAbortResponse build() {
            return new HttpFaultAbortResponse(httpStatus, percentage);
        }
    }
}
