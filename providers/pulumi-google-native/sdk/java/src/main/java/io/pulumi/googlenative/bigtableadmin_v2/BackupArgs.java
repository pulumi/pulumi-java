// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigtableadmin_v2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackupArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackupArgs Empty = new BackupArgs();

    @InputImport(name="backupId", required=true)
      private final Output<String> backupId;

    public Output<String> getBackupId() {
        return this.backupId;
    }

    @InputImport(name="clusterId", required=true)
      private final Output<String> clusterId;

    public Output<String> getClusterId() {
        return this.clusterId;
    }

    /**
     * The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 30 days from the time the request is received. Once the `expire_time` has passed, Cloud Bigtable will delete the backup and free the resources used by the backup.
     * 
     */
    @InputImport(name="expireTime", required=true)
      private final Output<String> expireTime;

    public Output<String> getExpireTime() {
        return this.expireTime;
    }

    @InputImport(name="instanceId", required=true)
      private final Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId;
    }

    /**
     * A globally unique identifier for the backup which cannot be changed. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/ backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and 50 characters in length. The backup is stored in the cluster identified by the prefix of the backup name of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Immutable. Name of the table from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects/{project}/instances/{instance}/tables/{source_table}`.
     * 
     */
    @InputImport(name="sourceTable", required=true)
      private final Output<String> sourceTable;

    public Output<String> getSourceTable() {
        return this.sourceTable;
    }

    public BackupArgs(
        Output<String> backupId,
        Output<String> clusterId,
        Output<String> expireTime,
        Output<String> instanceId,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<String> sourceTable) {
        this.backupId = Objects.requireNonNull(backupId, "expected parameter 'backupId' to be non-null");
        this.clusterId = Objects.requireNonNull(clusterId, "expected parameter 'clusterId' to be non-null");
        this.expireTime = Objects.requireNonNull(expireTime, "expected parameter 'expireTime' to be non-null");
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
        this.name = name;
        this.project = project;
        this.sourceTable = Objects.requireNonNull(sourceTable, "expected parameter 'sourceTable' to be non-null");
    }

    private BackupArgs() {
        this.backupId = Output.empty();
        this.clusterId = Output.empty();
        this.expireTime = Output.empty();
        this.instanceId = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.sourceTable = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> backupId;
        private Output<String> clusterId;
        private Output<String> expireTime;
        private Output<String> instanceId;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<String> sourceTable;

        public Builder() {
    	      // Empty
        }

        public Builder(BackupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupId = defaults.backupId;
    	      this.clusterId = defaults.clusterId;
    	      this.expireTime = defaults.expireTime;
    	      this.instanceId = defaults.instanceId;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.sourceTable = defaults.sourceTable;
        }

        public Builder backupId(Output<String> backupId) {
            this.backupId = Objects.requireNonNull(backupId);
            return this;
        }

        public Builder backupId(String backupId) {
            this.backupId = Output.of(Objects.requireNonNull(backupId));
            return this;
        }

        public Builder clusterId(Output<String> clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }

        public Builder clusterId(String clusterId) {
            this.clusterId = Output.of(Objects.requireNonNull(clusterId));
            return this;
        }

        public Builder expireTime(Output<String> expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }

        public Builder expireTime(String expireTime) {
            this.expireTime = Output.of(Objects.requireNonNull(expireTime));
            return this;
        }

        public Builder instanceId(Output<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }

        public Builder instanceId(String instanceId) {
            this.instanceId = Output.of(Objects.requireNonNull(instanceId));
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder sourceTable(Output<String> sourceTable) {
            this.sourceTable = Objects.requireNonNull(sourceTable);
            return this;
        }

        public Builder sourceTable(String sourceTable) {
            this.sourceTable = Output.of(Objects.requireNonNull(sourceTable));
            return this;
        }
        public BackupArgs build() {
            return new BackupArgs(backupId, clusterId, expireTime, instanceId, name, project, sourceTable);
        }
    }
}
