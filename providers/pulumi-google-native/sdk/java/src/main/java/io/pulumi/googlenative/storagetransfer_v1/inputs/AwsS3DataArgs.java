// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storagetransfer_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.storagetransfer_v1.inputs.AwsAccessKeyArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object's name is the S3 object's key name.
 * 
 */
public final class AwsS3DataArgs extends io.pulumi.resources.ResourceArgs {

    public static final AwsS3DataArgs Empty = new AwsS3DataArgs();

    /**
     * Input only. AWS access key used to sign the API requests to the AWS S3 bucket. Permissions on the bucket must be granted to the access ID of the AWS access key. For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
     * 
     */
    @Import(name="awsAccessKey")
      private final @Nullable Output<AwsAccessKeyArgs> awsAccessKey;

    public Output<AwsAccessKeyArgs> awsAccessKey() {
        return this.awsAccessKey == null ? Codegen.empty() : this.awsAccessKey;
    }

    /**
     * S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
     * 
     */
    @Import(name="bucketName", required=true)
      private final Output<String> bucketName;

    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> path() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.
     * 
     */
    @Import(name="roleArn")
      private final @Nullable Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn == null ? Codegen.empty() : this.roleArn;
    }

    public AwsS3DataArgs(
        @Nullable Output<AwsAccessKeyArgs> awsAccessKey,
        Output<String> bucketName,
        @Nullable Output<String> path,
        @Nullable Output<String> roleArn) {
        this.awsAccessKey = awsAccessKey;
        this.bucketName = Objects.requireNonNull(bucketName, "expected parameter 'bucketName' to be non-null");
        this.path = path;
        this.roleArn = roleArn;
    }

    private AwsS3DataArgs() {
        this.awsAccessKey = Codegen.empty();
        this.bucketName = Codegen.empty();
        this.path = Codegen.empty();
        this.roleArn = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwsS3DataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AwsAccessKeyArgs> awsAccessKey;
        private Output<String> bucketName;
        private @Nullable Output<String> path;
        private @Nullable Output<String> roleArn;

        public Builder() {
    	      // Empty
        }

        public Builder(AwsS3DataArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsAccessKey = defaults.awsAccessKey;
    	      this.bucketName = defaults.bucketName;
    	      this.path = defaults.path;
    	      this.roleArn = defaults.roleArn;
        }

        public Builder awsAccessKey(@Nullable Output<AwsAccessKeyArgs> awsAccessKey) {
            this.awsAccessKey = awsAccessKey;
            return this;
        }
        public Builder awsAccessKey(@Nullable AwsAccessKeyArgs awsAccessKey) {
            this.awsAccessKey = Codegen.ofNullable(awsAccessKey);
            return this;
        }
        public Builder bucketName(Output<String> bucketName) {
            this.bucketName = Objects.requireNonNull(bucketName);
            return this;
        }
        public Builder bucketName(String bucketName) {
            this.bucketName = Output.of(Objects.requireNonNull(bucketName));
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder roleArn(@Nullable Output<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }
        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = Codegen.ofNullable(roleArn);
            return this;
        }        public AwsS3DataArgs build() {
            return new AwsS3DataArgs(awsAccessKey, bucketName, path, roleArn);
        }
    }
}
