// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class HttpRedirectActionResponse {
    private final String hostRedirect;
    private final Boolean httpsRedirect;
    private final String pathRedirect;
    private final String prefixRedirect;
    private final String redirectResponseCode;
    private final Boolean stripQuery;

    @OutputCustomType.Constructor({"hostRedirect","httpsRedirect","pathRedirect","prefixRedirect","redirectResponseCode","stripQuery"})
    private HttpRedirectActionResponse(
        String hostRedirect,
        Boolean httpsRedirect,
        String pathRedirect,
        String prefixRedirect,
        String redirectResponseCode,
        Boolean stripQuery) {
        this.hostRedirect = Objects.requireNonNull(hostRedirect);
        this.httpsRedirect = Objects.requireNonNull(httpsRedirect);
        this.pathRedirect = Objects.requireNonNull(pathRedirect);
        this.prefixRedirect = Objects.requireNonNull(prefixRedirect);
        this.redirectResponseCode = Objects.requireNonNull(redirectResponseCode);
        this.stripQuery = Objects.requireNonNull(stripQuery);
    }

    public String getHostRedirect() {
        return this.hostRedirect;
    }
    public Boolean getHttpsRedirect() {
        return this.httpsRedirect;
    }
    public String getPathRedirect() {
        return this.pathRedirect;
    }
    public String getPrefixRedirect() {
        return this.prefixRedirect;
    }
    public String getRedirectResponseCode() {
        return this.redirectResponseCode;
    }
    public Boolean getStripQuery() {
        return this.stripQuery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRedirectActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String hostRedirect;
        private Boolean httpsRedirect;
        private String pathRedirect;
        private String prefixRedirect;
        private String redirectResponseCode;
        private Boolean stripQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRedirectActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostRedirect = defaults.hostRedirect;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.pathRedirect = defaults.pathRedirect;
    	      this.prefixRedirect = defaults.prefixRedirect;
    	      this.redirectResponseCode = defaults.redirectResponseCode;
    	      this.stripQuery = defaults.stripQuery;
        }

        public Builder setHostRedirect(String hostRedirect) {
            this.hostRedirect = Objects.requireNonNull(hostRedirect);
            return this;
        }

        public Builder setHttpsRedirect(Boolean httpsRedirect) {
            this.httpsRedirect = Objects.requireNonNull(httpsRedirect);
            return this;
        }

        public Builder setPathRedirect(String pathRedirect) {
            this.pathRedirect = Objects.requireNonNull(pathRedirect);
            return this;
        }

        public Builder setPrefixRedirect(String prefixRedirect) {
            this.prefixRedirect = Objects.requireNonNull(prefixRedirect);
            return this;
        }

        public Builder setRedirectResponseCode(String redirectResponseCode) {
            this.redirectResponseCode = Objects.requireNonNull(redirectResponseCode);
            return this;
        }

        public Builder setStripQuery(Boolean stripQuery) {
            this.stripQuery = Objects.requireNonNull(stripQuery);
            return this;
        }

        public HttpRedirectActionResponse build() {
            return new HttpRedirectActionResponse(hostRedirect, httpsRedirect, pathRedirect, prefixRedirect, redirectResponseCode, stripQuery);
        }
    }
}
