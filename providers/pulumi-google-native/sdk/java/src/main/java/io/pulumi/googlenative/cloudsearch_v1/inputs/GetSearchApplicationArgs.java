// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudsearch_v1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSearchApplicationArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetSearchApplicationArgs Empty = new GetSearchApplicationArgs();

    @Import(name="debugOptionsEnableDebugging")
      private final @Nullable String debugOptionsEnableDebugging;

    public Optional<String> getDebugOptionsEnableDebugging() {
        return this.debugOptionsEnableDebugging == null ? Optional.empty() : Optional.ofNullable(this.debugOptionsEnableDebugging);
    }

    @Import(name="searchapplicationId", required=true)
      private final String searchapplicationId;

    public String getSearchapplicationId() {
        return this.searchapplicationId;
    }

    public GetSearchApplicationArgs(
        @Nullable String debugOptionsEnableDebugging,
        String searchapplicationId) {
        this.debugOptionsEnableDebugging = debugOptionsEnableDebugging;
        this.searchapplicationId = Objects.requireNonNull(searchapplicationId, "expected parameter 'searchapplicationId' to be non-null");
    }

    private GetSearchApplicationArgs() {
        this.debugOptionsEnableDebugging = null;
        this.searchapplicationId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSearchApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String debugOptionsEnableDebugging;
        private String searchapplicationId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSearchApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.debugOptionsEnableDebugging = defaults.debugOptionsEnableDebugging;
    	      this.searchapplicationId = defaults.searchapplicationId;
        }

        public Builder debugOptionsEnableDebugging(@Nullable String debugOptionsEnableDebugging) {
            this.debugOptionsEnableDebugging = debugOptionsEnableDebugging;
            return this;
        }

        public Builder searchapplicationId(String searchapplicationId) {
            this.searchapplicationId = Objects.requireNonNull(searchapplicationId);
            return this;
        }
        public GetSearchApplicationArgs build() {
            return new GetSearchApplicationArgs(debugOptionsEnableDebugging, searchapplicationId);
        }
    }
}
