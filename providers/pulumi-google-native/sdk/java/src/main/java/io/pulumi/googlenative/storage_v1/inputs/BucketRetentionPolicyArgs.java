// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storage_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
 * 
 */
public final class BucketRetentionPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketRetentionPolicyArgs Empty = new BucketRetentionPolicyArgs();

    /**
     * Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
     * 
     */
    @InputImport(name="effectiveTime")
      private final @Nullable Input<String> effectiveTime;

    public Input<String> getEffectiveTime() {
        return this.effectiveTime == null ? Input.empty() : this.effectiveTime;
    }

    /**
     * Once locked, an object retention policy cannot be modified.
     * 
     */
    @InputImport(name="isLocked")
      private final @Nullable Input<Boolean> isLocked;

    public Input<Boolean> getIsLocked() {
        return this.isLocked == null ? Input.empty() : this.isLocked;
    }

    /**
     * The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
     * 
     */
    @InputImport(name="retentionPeriod")
      private final @Nullable Input<String> retentionPeriod;

    public Input<String> getRetentionPeriod() {
        return this.retentionPeriod == null ? Input.empty() : this.retentionPeriod;
    }

    public BucketRetentionPolicyArgs(
        @Nullable Input<String> effectiveTime,
        @Nullable Input<Boolean> isLocked,
        @Nullable Input<String> retentionPeriod) {
        this.effectiveTime = effectiveTime;
        this.isLocked = isLocked;
        this.retentionPeriod = retentionPeriod;
    }

    private BucketRetentionPolicyArgs() {
        this.effectiveTime = Input.empty();
        this.isLocked = Input.empty();
        this.retentionPeriod = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRetentionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> effectiveTime;
        private @Nullable Input<Boolean> isLocked;
        private @Nullable Input<String> retentionPeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketRetentionPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.effectiveTime = defaults.effectiveTime;
    	      this.isLocked = defaults.isLocked;
    	      this.retentionPeriod = defaults.retentionPeriod;
        }

        public Builder effectiveTime(@Nullable Input<String> effectiveTime) {
            this.effectiveTime = effectiveTime;
            return this;
        }

        public Builder effectiveTime(@Nullable String effectiveTime) {
            this.effectiveTime = Input.ofNullable(effectiveTime);
            return this;
        }

        public Builder isLocked(@Nullable Input<Boolean> isLocked) {
            this.isLocked = isLocked;
            return this;
        }

        public Builder isLocked(@Nullable Boolean isLocked) {
            this.isLocked = Input.ofNullable(isLocked);
            return this;
        }

        public Builder retentionPeriod(@Nullable Input<String> retentionPeriod) {
            this.retentionPeriod = retentionPeriod;
            return this;
        }

        public Builder retentionPeriod(@Nullable String retentionPeriod) {
            this.retentionPeriod = Input.ofNullable(retentionPeriod);
            return this;
        }
        public BucketRetentionPolicyArgs build() {
            return new BucketRetentionPolicyArgs(effectiveTime, isLocked, retentionPeriod);
        }
    }
}
