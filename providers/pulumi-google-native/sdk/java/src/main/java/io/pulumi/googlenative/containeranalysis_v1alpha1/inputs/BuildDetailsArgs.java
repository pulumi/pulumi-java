// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.BuildProvenanceArgs;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.InTotoStatementArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Message encapsulating build provenance details.
 * 
 */
public final class BuildDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final BuildDetailsArgs Empty = new BuildDetailsArgs();

    /**
     * In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
     * 
     */
    @InputImport(name="intotoStatement")
      private final @Nullable Input<InTotoStatementArgs> intotoStatement;

    public Input<InTotoStatementArgs> getIntotoStatement() {
        return this.intotoStatement == null ? Input.empty() : this.intotoStatement;
    }

    /**
     * The actual provenance
     * 
     */
    @InputImport(name="provenance")
      private final @Nullable Input<BuildProvenanceArgs> provenance;

    public Input<BuildProvenanceArgs> getProvenance() {
        return this.provenance == null ? Input.empty() : this.provenance;
    }

    /**
     * Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
     * 
     */
    @InputImport(name="provenanceBytes")
      private final @Nullable Input<String> provenanceBytes;

    public Input<String> getProvenanceBytes() {
        return this.provenanceBytes == null ? Input.empty() : this.provenanceBytes;
    }

    public BuildDetailsArgs(
        @Nullable Input<InTotoStatementArgs> intotoStatement,
        @Nullable Input<BuildProvenanceArgs> provenance,
        @Nullable Input<String> provenanceBytes) {
        this.intotoStatement = intotoStatement;
        this.provenance = provenance;
        this.provenanceBytes = provenanceBytes;
    }

    private BuildDetailsArgs() {
        this.intotoStatement = Input.empty();
        this.provenance = Input.empty();
        this.provenanceBytes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<InTotoStatementArgs> intotoStatement;
        private @Nullable Input<BuildProvenanceArgs> provenance;
        private @Nullable Input<String> provenanceBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.intotoStatement = defaults.intotoStatement;
    	      this.provenance = defaults.provenance;
    	      this.provenanceBytes = defaults.provenanceBytes;
        }

        public Builder intotoStatement(@Nullable Input<InTotoStatementArgs> intotoStatement) {
            this.intotoStatement = intotoStatement;
            return this;
        }

        public Builder intotoStatement(@Nullable InTotoStatementArgs intotoStatement) {
            this.intotoStatement = Input.ofNullable(intotoStatement);
            return this;
        }

        public Builder provenance(@Nullable Input<BuildProvenanceArgs> provenance) {
            this.provenance = provenance;
            return this;
        }

        public Builder provenance(@Nullable BuildProvenanceArgs provenance) {
            this.provenance = Input.ofNullable(provenance);
            return this;
        }

        public Builder provenanceBytes(@Nullable Input<String> provenanceBytes) {
            this.provenanceBytes = provenanceBytes;
            return this;
        }

        public Builder provenanceBytes(@Nullable String provenanceBytes) {
            this.provenanceBytes = Input.ofNullable(provenanceBytes);
            return this;
        }
        public BuildDetailsArgs build() {
            return new BuildDetailsArgs(intotoStatement, provenance, provenanceBytes);
        }
    }
}
