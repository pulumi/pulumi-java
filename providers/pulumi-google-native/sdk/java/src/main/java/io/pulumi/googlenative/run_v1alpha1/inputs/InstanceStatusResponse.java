// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.run_v1alpha1.inputs.InstanceAttemptResultResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class InstanceStatusResponse extends io.pulumi.resources.InvokeArgs {

    public static final InstanceStatusResponse Empty = new InstanceStatusResponse();

    @InputImport(name="completionTime", required=true)
    private final String completionTime;

    public String getCompletionTime() {
        return this.completionTime;
    }

    @InputImport(name="failed", required=true)
    private final Integer failed;

    public Integer getFailed() {
        return this.failed;
    }

    @InputImport(name="index", required=true)
    private final Integer index;

    public Integer getIndex() {
        return this.index;
    }

    @InputImport(name="lastAttemptResult", required=true)
    private final InstanceAttemptResultResponse lastAttemptResult;

    public InstanceAttemptResultResponse getLastAttemptResult() {
        return this.lastAttemptResult;
    }

    @InputImport(name="lastExitCode", required=true)
    private final Integer lastExitCode;

    public Integer getLastExitCode() {
        return this.lastExitCode;
    }

    @InputImport(name="restarted", required=true)
    private final Integer restarted;

    public Integer getRestarted() {
        return this.restarted;
    }

    @InputImport(name="startTime", required=true)
    private final String startTime;

    public String getStartTime() {
        return this.startTime;
    }

    @InputImport(name="succeeded", required=true)
    private final Integer succeeded;

    public Integer getSucceeded() {
        return this.succeeded;
    }

    public InstanceStatusResponse(
        String completionTime,
        Integer failed,
        Integer index,
        InstanceAttemptResultResponse lastAttemptResult,
        Integer lastExitCode,
        Integer restarted,
        String startTime,
        Integer succeeded) {
        this.completionTime = Objects.requireNonNull(completionTime, "expected parameter 'completionTime' to be non-null");
        this.failed = Objects.requireNonNull(failed, "expected parameter 'failed' to be non-null");
        this.index = Objects.requireNonNull(index, "expected parameter 'index' to be non-null");
        this.lastAttemptResult = Objects.requireNonNull(lastAttemptResult, "expected parameter 'lastAttemptResult' to be non-null");
        this.lastExitCode = Objects.requireNonNull(lastExitCode, "expected parameter 'lastExitCode' to be non-null");
        this.restarted = Objects.requireNonNull(restarted, "expected parameter 'restarted' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.succeeded = Objects.requireNonNull(succeeded, "expected parameter 'succeeded' to be non-null");
    }

    private InstanceStatusResponse() {
        this.completionTime = null;
        this.failed = null;
        this.index = null;
        this.lastAttemptResult = null;
        this.lastExitCode = null;
        this.restarted = null;
        this.startTime = null;
        this.succeeded = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String completionTime;
        private Integer failed;
        private Integer index;
        private InstanceAttemptResultResponse lastAttemptResult;
        private Integer lastExitCode;
        private Integer restarted;
        private String startTime;
        private Integer succeeded;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completionTime = defaults.completionTime;
    	      this.failed = defaults.failed;
    	      this.index = defaults.index;
    	      this.lastAttemptResult = defaults.lastAttemptResult;
    	      this.lastExitCode = defaults.lastExitCode;
    	      this.restarted = defaults.restarted;
    	      this.startTime = defaults.startTime;
    	      this.succeeded = defaults.succeeded;
        }

        public Builder setCompletionTime(String completionTime) {
            this.completionTime = Objects.requireNonNull(completionTime);
            return this;
        }

        public Builder setFailed(Integer failed) {
            this.failed = Objects.requireNonNull(failed);
            return this;
        }

        public Builder setIndex(Integer index) {
            this.index = Objects.requireNonNull(index);
            return this;
        }

        public Builder setLastAttemptResult(InstanceAttemptResultResponse lastAttemptResult) {
            this.lastAttemptResult = Objects.requireNonNull(lastAttemptResult);
            return this;
        }

        public Builder setLastExitCode(Integer lastExitCode) {
            this.lastExitCode = Objects.requireNonNull(lastExitCode);
            return this;
        }

        public Builder setRestarted(Integer restarted) {
            this.restarted = Objects.requireNonNull(restarted);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setSucceeded(Integer succeeded) {
            this.succeeded = Objects.requireNonNull(succeeded);
            return this;
        }

        public InstanceStatusResponse build() {
            return new InstanceStatusResponse(completionTime, failed, index, lastAttemptResult, lastExitCode, restarted, startTime, succeeded);
        }
    }
}
