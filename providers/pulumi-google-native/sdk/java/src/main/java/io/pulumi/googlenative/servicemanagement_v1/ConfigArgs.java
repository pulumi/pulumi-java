// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.ApiArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.AuthenticationArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.BackendArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.BillingArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.ContextArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.ControlArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.CustomErrorArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.DocumentationArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.EndpointArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.EnumArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.HttpArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.LogDescriptorArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.LoggingArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.MetricDescriptorArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.MonitoredResourceDescriptorArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.MonitoringArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.QuotaArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.SystemParametersArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.TypeArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.UsageArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigArgs Empty = new ConfigArgs();

    /**
     * A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
     * 
     */
    @InputImport(name="apis")
    private final @Nullable Input<List<ApiArgs>> apis;

    public Input<List<ApiArgs>> getApis() {
        return this.apis == null ? Input.empty() : this.apis;
    }

    /**
     * Auth configuration.
     * 
     */
    @InputImport(name="authentication")
    private final @Nullable Input<AuthenticationArgs> authentication;

    public Input<AuthenticationArgs> getAuthentication() {
        return this.authentication == null ? Input.empty() : this.authentication;
    }

    /**
     * API backend configuration.
     * 
     */
    @InputImport(name="backend")
    private final @Nullable Input<BackendArgs> backend;

    public Input<BackendArgs> getBackend() {
        return this.backend == null ? Input.empty() : this.backend;
    }

    /**
     * Billing configuration.
     * 
     */
    @InputImport(name="billing")
    private final @Nullable Input<BillingArgs> billing;

    public Input<BillingArgs> getBilling() {
        return this.billing == null ? Input.empty() : this.billing;
    }

    /**
     * Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.
     * 
     */
    @InputImport(name="configVersion")
    private final @Nullable Input<Integer> configVersion;

    public Input<Integer> getConfigVersion() {
        return this.configVersion == null ? Input.empty() : this.configVersion;
    }

    /**
     * Context configuration.
     * 
     */
    @InputImport(name="context")
    private final @Nullable Input<ContextArgs> context;

    public Input<ContextArgs> getContext() {
        return this.context == null ? Input.empty() : this.context;
    }

    /**
     * Configuration for the service control plane.
     * 
     */
    @InputImport(name="control")
    private final @Nullable Input<ControlArgs> control;

    public Input<ControlArgs> getControl() {
        return this.control == null ? Input.empty() : this.control;
    }

    /**
     * Custom error configuration.
     * 
     */
    @InputImport(name="customError")
    private final @Nullable Input<CustomErrorArgs> customError;

    public Input<CustomErrorArgs> getCustomError() {
        return this.customError == null ? Input.empty() : this.customError;
    }

    /**
     * Additional API documentation.
     * 
     */
    @InputImport(name="documentation")
    private final @Nullable Input<DocumentationArgs> documentation;

    public Input<DocumentationArgs> getDocumentation() {
        return this.documentation == null ? Input.empty() : this.documentation;
    }

    /**
     * Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
     * 
     */
    @InputImport(name="endpoints")
    private final @Nullable Input<List<EndpointArgs>> endpoints;

    public Input<List<EndpointArgs>> getEndpoints() {
        return this.endpoints == null ? Input.empty() : this.endpoints;
    }

    /**
     * A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
     * 
     */
    @InputImport(name="enums")
    private final @Nullable Input<List<EnumArgs>> enums;

    public Input<List<EnumArgs>> getEnums() {
        return this.enums == null ? Input.empty() : this.enums;
    }

    /**
     * HTTP configuration.
     * 
     */
    @InputImport(name="http")
    private final @Nullable Input<HttpArgs> http;

    public Input<HttpArgs> getHttp() {
        return this.http == null ? Input.empty() : this.http;
    }

    /**
     * A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Logging configuration.
     * 
     */
    @InputImport(name="logging")
    private final @Nullable Input<LoggingArgs> logging;

    public Input<LoggingArgs> getLogging() {
        return this.logging == null ? Input.empty() : this.logging;
    }

    /**
     * Defines the logs used by this service.
     * 
     */
    @InputImport(name="logs")
    private final @Nullable Input<List<LogDescriptorArgs>> logs;

    public Input<List<LogDescriptorArgs>> getLogs() {
        return this.logs == null ? Input.empty() : this.logs;
    }

    /**
     * Defines the metrics used by this service.
     * 
     */
    @InputImport(name="metrics")
    private final @Nullable Input<List<MetricDescriptorArgs>> metrics;

    public Input<List<MetricDescriptorArgs>> getMetrics() {
        return this.metrics == null ? Input.empty() : this.metrics;
    }

    /**
     * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
     * 
     */
    @InputImport(name="monitoredResources")
    private final @Nullable Input<List<MonitoredResourceDescriptorArgs>> monitoredResources;

    public Input<List<MonitoredResourceDescriptorArgs>> getMonitoredResources() {
        return this.monitoredResources == null ? Input.empty() : this.monitoredResources;
    }

    /**
     * Monitoring configuration.
     * 
     */
    @InputImport(name="monitoring")
    private final @Nullable Input<MonitoringArgs> monitoring;

    public Input<MonitoringArgs> getMonitoring() {
        return this.monitoring == null ? Input.empty() : this.monitoring;
    }

    /**
     * The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The Google project that owns this service.
     * 
     */
    @InputImport(name="producerProjectId")
    private final @Nullable Input<String> producerProjectId;

    public Input<String> getProducerProjectId() {
        return this.producerProjectId == null ? Input.empty() : this.producerProjectId;
    }

    /**
     * Quota configuration.
     * 
     */
    @InputImport(name="quota")
    private final @Nullable Input<QuotaArgs> quota;

    public Input<QuotaArgs> getQuota() {
        return this.quota == null ? Input.empty() : this.quota;
    }

    @InputImport(name="serviceName", required=true)
    private final Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * System parameter configuration.
     * 
     */
    @InputImport(name="systemParameters")
    private final @Nullable Input<SystemParametersArgs> systemParameters;

    public Input<SystemParametersArgs> getSystemParameters() {
        return this.systemParameters == null ? Input.empty() : this.systemParameters;
    }

    /**
     * A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
     * 
     */
    @InputImport(name="systemTypes")
    private final @Nullable Input<List<TypeArgs>> systemTypes;

    public Input<List<TypeArgs>> getSystemTypes() {
        return this.systemTypes == null ? Input.empty() : this.systemTypes;
    }

    /**
     * The product title for this service, it is the name displayed in Google Cloud Console.
     * 
     */
    @InputImport(name="title")
    private final @Nullable Input<String> title;

    public Input<String> getTitle() {
        return this.title == null ? Input.empty() : this.title;
    }

    /**
     * A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
     * 
     */
    @InputImport(name="types")
    private final @Nullable Input<List<TypeArgs>> types;

    public Input<List<TypeArgs>> getTypes() {
        return this.types == null ? Input.empty() : this.types;
    }

    /**
     * Configuration controlling usage of this service.
     * 
     */
    @InputImport(name="usage")
    private final @Nullable Input<UsageArgs> usage;

    public Input<UsageArgs> getUsage() {
        return this.usage == null ? Input.empty() : this.usage;
    }

    public ConfigArgs(
        @Nullable Input<List<ApiArgs>> apis,
        @Nullable Input<AuthenticationArgs> authentication,
        @Nullable Input<BackendArgs> backend,
        @Nullable Input<BillingArgs> billing,
        @Nullable Input<Integer> configVersion,
        @Nullable Input<ContextArgs> context,
        @Nullable Input<ControlArgs> control,
        @Nullable Input<CustomErrorArgs> customError,
        @Nullable Input<DocumentationArgs> documentation,
        @Nullable Input<List<EndpointArgs>> endpoints,
        @Nullable Input<List<EnumArgs>> enums,
        @Nullable Input<HttpArgs> http,
        @Nullable Input<String> id,
        @Nullable Input<LoggingArgs> logging,
        @Nullable Input<List<LogDescriptorArgs>> logs,
        @Nullable Input<List<MetricDescriptorArgs>> metrics,
        @Nullable Input<List<MonitoredResourceDescriptorArgs>> monitoredResources,
        @Nullable Input<MonitoringArgs> monitoring,
        @Nullable Input<String> name,
        @Nullable Input<String> producerProjectId,
        @Nullable Input<QuotaArgs> quota,
        Input<String> serviceName,
        @Nullable Input<SystemParametersArgs> systemParameters,
        @Nullable Input<List<TypeArgs>> systemTypes,
        @Nullable Input<String> title,
        @Nullable Input<List<TypeArgs>> types,
        @Nullable Input<UsageArgs> usage) {
        this.apis = apis;
        this.authentication = authentication;
        this.backend = backend;
        this.billing = billing;
        this.configVersion = configVersion;
        this.context = context;
        this.control = control;
        this.customError = customError;
        this.documentation = documentation;
        this.endpoints = endpoints;
        this.enums = enums;
        this.http = http;
        this.id = id;
        this.logging = logging;
        this.logs = logs;
        this.metrics = metrics;
        this.monitoredResources = monitoredResources;
        this.monitoring = monitoring;
        this.name = name;
        this.producerProjectId = producerProjectId;
        this.quota = quota;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.systemParameters = systemParameters;
        this.systemTypes = systemTypes;
        this.title = title;
        this.types = types;
        this.usage = usage;
    }

    private ConfigArgs() {
        this.apis = Input.empty();
        this.authentication = Input.empty();
        this.backend = Input.empty();
        this.billing = Input.empty();
        this.configVersion = Input.empty();
        this.context = Input.empty();
        this.control = Input.empty();
        this.customError = Input.empty();
        this.documentation = Input.empty();
        this.endpoints = Input.empty();
        this.enums = Input.empty();
        this.http = Input.empty();
        this.id = Input.empty();
        this.logging = Input.empty();
        this.logs = Input.empty();
        this.metrics = Input.empty();
        this.monitoredResources = Input.empty();
        this.monitoring = Input.empty();
        this.name = Input.empty();
        this.producerProjectId = Input.empty();
        this.quota = Input.empty();
        this.serviceName = Input.empty();
        this.systemParameters = Input.empty();
        this.systemTypes = Input.empty();
        this.title = Input.empty();
        this.types = Input.empty();
        this.usage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ApiArgs>> apis;
        private @Nullable Input<AuthenticationArgs> authentication;
        private @Nullable Input<BackendArgs> backend;
        private @Nullable Input<BillingArgs> billing;
        private @Nullable Input<Integer> configVersion;
        private @Nullable Input<ContextArgs> context;
        private @Nullable Input<ControlArgs> control;
        private @Nullable Input<CustomErrorArgs> customError;
        private @Nullable Input<DocumentationArgs> documentation;
        private @Nullable Input<List<EndpointArgs>> endpoints;
        private @Nullable Input<List<EnumArgs>> enums;
        private @Nullable Input<HttpArgs> http;
        private @Nullable Input<String> id;
        private @Nullable Input<LoggingArgs> logging;
        private @Nullable Input<List<LogDescriptorArgs>> logs;
        private @Nullable Input<List<MetricDescriptorArgs>> metrics;
        private @Nullable Input<List<MonitoredResourceDescriptorArgs>> monitoredResources;
        private @Nullable Input<MonitoringArgs> monitoring;
        private @Nullable Input<String> name;
        private @Nullable Input<String> producerProjectId;
        private @Nullable Input<QuotaArgs> quota;
        private Input<String> serviceName;
        private @Nullable Input<SystemParametersArgs> systemParameters;
        private @Nullable Input<List<TypeArgs>> systemTypes;
        private @Nullable Input<String> title;
        private @Nullable Input<List<TypeArgs>> types;
        private @Nullable Input<UsageArgs> usage;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apis = defaults.apis;
    	      this.authentication = defaults.authentication;
    	      this.backend = defaults.backend;
    	      this.billing = defaults.billing;
    	      this.configVersion = defaults.configVersion;
    	      this.context = defaults.context;
    	      this.control = defaults.control;
    	      this.customError = defaults.customError;
    	      this.documentation = defaults.documentation;
    	      this.endpoints = defaults.endpoints;
    	      this.enums = defaults.enums;
    	      this.http = defaults.http;
    	      this.id = defaults.id;
    	      this.logging = defaults.logging;
    	      this.logs = defaults.logs;
    	      this.metrics = defaults.metrics;
    	      this.monitoredResources = defaults.monitoredResources;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.producerProjectId = defaults.producerProjectId;
    	      this.quota = defaults.quota;
    	      this.serviceName = defaults.serviceName;
    	      this.systemParameters = defaults.systemParameters;
    	      this.systemTypes = defaults.systemTypes;
    	      this.title = defaults.title;
    	      this.types = defaults.types;
    	      this.usage = defaults.usage;
        }

        public Builder setApis(@Nullable Input<List<ApiArgs>> apis) {
            this.apis = apis;
            return this;
        }

        public Builder setApis(@Nullable List<ApiArgs> apis) {
            this.apis = Input.ofNullable(apis);
            return this;
        }

        public Builder setAuthentication(@Nullable Input<AuthenticationArgs> authentication) {
            this.authentication = authentication;
            return this;
        }

        public Builder setAuthentication(@Nullable AuthenticationArgs authentication) {
            this.authentication = Input.ofNullable(authentication);
            return this;
        }

        public Builder setBackend(@Nullable Input<BackendArgs> backend) {
            this.backend = backend;
            return this;
        }

        public Builder setBackend(@Nullable BackendArgs backend) {
            this.backend = Input.ofNullable(backend);
            return this;
        }

        public Builder setBilling(@Nullable Input<BillingArgs> billing) {
            this.billing = billing;
            return this;
        }

        public Builder setBilling(@Nullable BillingArgs billing) {
            this.billing = Input.ofNullable(billing);
            return this;
        }

        public Builder setConfigVersion(@Nullable Input<Integer> configVersion) {
            this.configVersion = configVersion;
            return this;
        }

        public Builder setConfigVersion(@Nullable Integer configVersion) {
            this.configVersion = Input.ofNullable(configVersion);
            return this;
        }

        public Builder setContext(@Nullable Input<ContextArgs> context) {
            this.context = context;
            return this;
        }

        public Builder setContext(@Nullable ContextArgs context) {
            this.context = Input.ofNullable(context);
            return this;
        }

        public Builder setControl(@Nullable Input<ControlArgs> control) {
            this.control = control;
            return this;
        }

        public Builder setControl(@Nullable ControlArgs control) {
            this.control = Input.ofNullable(control);
            return this;
        }

        public Builder setCustomError(@Nullable Input<CustomErrorArgs> customError) {
            this.customError = customError;
            return this;
        }

        public Builder setCustomError(@Nullable CustomErrorArgs customError) {
            this.customError = Input.ofNullable(customError);
            return this;
        }

        public Builder setDocumentation(@Nullable Input<DocumentationArgs> documentation) {
            this.documentation = documentation;
            return this;
        }

        public Builder setDocumentation(@Nullable DocumentationArgs documentation) {
            this.documentation = Input.ofNullable(documentation);
            return this;
        }

        public Builder setEndpoints(@Nullable Input<List<EndpointArgs>> endpoints) {
            this.endpoints = endpoints;
            return this;
        }

        public Builder setEndpoints(@Nullable List<EndpointArgs> endpoints) {
            this.endpoints = Input.ofNullable(endpoints);
            return this;
        }

        public Builder setEnums(@Nullable Input<List<EnumArgs>> enums) {
            this.enums = enums;
            return this;
        }

        public Builder setEnums(@Nullable List<EnumArgs> enums) {
            this.enums = Input.ofNullable(enums);
            return this;
        }

        public Builder setHttp(@Nullable Input<HttpArgs> http) {
            this.http = http;
            return this;
        }

        public Builder setHttp(@Nullable HttpArgs http) {
            this.http = Input.ofNullable(http);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setLogging(@Nullable Input<LoggingArgs> logging) {
            this.logging = logging;
            return this;
        }

        public Builder setLogging(@Nullable LoggingArgs logging) {
            this.logging = Input.ofNullable(logging);
            return this;
        }

        public Builder setLogs(@Nullable Input<List<LogDescriptorArgs>> logs) {
            this.logs = logs;
            return this;
        }

        public Builder setLogs(@Nullable List<LogDescriptorArgs> logs) {
            this.logs = Input.ofNullable(logs);
            return this;
        }

        public Builder setMetrics(@Nullable Input<List<MetricDescriptorArgs>> metrics) {
            this.metrics = metrics;
            return this;
        }

        public Builder setMetrics(@Nullable List<MetricDescriptorArgs> metrics) {
            this.metrics = Input.ofNullable(metrics);
            return this;
        }

        public Builder setMonitoredResources(@Nullable Input<List<MonitoredResourceDescriptorArgs>> monitoredResources) {
            this.monitoredResources = monitoredResources;
            return this;
        }

        public Builder setMonitoredResources(@Nullable List<MonitoredResourceDescriptorArgs> monitoredResources) {
            this.monitoredResources = Input.ofNullable(monitoredResources);
            return this;
        }

        public Builder setMonitoring(@Nullable Input<MonitoringArgs> monitoring) {
            this.monitoring = monitoring;
            return this;
        }

        public Builder setMonitoring(@Nullable MonitoringArgs monitoring) {
            this.monitoring = Input.ofNullable(monitoring);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProducerProjectId(@Nullable Input<String> producerProjectId) {
            this.producerProjectId = producerProjectId;
            return this;
        }

        public Builder setProducerProjectId(@Nullable String producerProjectId) {
            this.producerProjectId = Input.ofNullable(producerProjectId);
            return this;
        }

        public Builder setQuota(@Nullable Input<QuotaArgs> quota) {
            this.quota = quota;
            return this;
        }

        public Builder setQuota(@Nullable QuotaArgs quota) {
            this.quota = Input.ofNullable(quota);
            return this;
        }

        public Builder setServiceName(Input<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }

        public Builder setServiceName(String serviceName) {
            this.serviceName = Input.of(Objects.requireNonNull(serviceName));
            return this;
        }

        public Builder setSystemParameters(@Nullable Input<SystemParametersArgs> systemParameters) {
            this.systemParameters = systemParameters;
            return this;
        }

        public Builder setSystemParameters(@Nullable SystemParametersArgs systemParameters) {
            this.systemParameters = Input.ofNullable(systemParameters);
            return this;
        }

        public Builder setSystemTypes(@Nullable Input<List<TypeArgs>> systemTypes) {
            this.systemTypes = systemTypes;
            return this;
        }

        public Builder setSystemTypes(@Nullable List<TypeArgs> systemTypes) {
            this.systemTypes = Input.ofNullable(systemTypes);
            return this;
        }

        public Builder setTitle(@Nullable Input<String> title) {
            this.title = title;
            return this;
        }

        public Builder setTitle(@Nullable String title) {
            this.title = Input.ofNullable(title);
            return this;
        }

        public Builder setTypes(@Nullable Input<List<TypeArgs>> types) {
            this.types = types;
            return this;
        }

        public Builder setTypes(@Nullable List<TypeArgs> types) {
            this.types = Input.ofNullable(types);
            return this;
        }

        public Builder setUsage(@Nullable Input<UsageArgs> usage) {
            this.usage = usage;
            return this;
        }

        public Builder setUsage(@Nullable UsageArgs usage) {
            this.usage = Input.ofNullable(usage);
            return this;
        }

        public ConfigArgs build() {
            return new ConfigArgs(apis, authentication, backend, billing, configVersion, context, control, customError, documentation, endpoints, enums, http, id, logging, logs, metrics, monitoredResources, monitoring, name, producerProjectId, quota, serviceName, systemParameters, systemTypes, title, types, usage);
        }
    }
}
