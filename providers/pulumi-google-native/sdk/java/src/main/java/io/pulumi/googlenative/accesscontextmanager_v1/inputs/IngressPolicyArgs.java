// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.accesscontextmanager_v1.inputs.IngressFromArgs;
import io.pulumi.googlenative.accesscontextmanager_v1.inputs.IngressToArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Policy for ingress into ServicePerimeter. IngressPolicies match requests based on `ingress_from` and `ingress_to` stanzas. For an ingress policy to match, both the `ingress_from` and `ingress_to` stanzas must be matched. If an IngressPolicy matches a request, the request is allowed through the perimeter boundary from outside the perimeter. For example, access from the internet can be allowed either based on an AccessLevel or, for traffic hosted on Google Cloud, the project of the source network. For access from private networks, using the project of the hosting network is required. Individual ingress policies can be limited by restricting which services and/or actions they match using the `ingress_to` field.
 * 
 */
public final class IngressPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final IngressPolicyArgs Empty = new IngressPolicyArgs();

    /**
     * Defines the conditions on the source of a request causing this IngressPolicy to apply.
     * 
     */
    @Import(name="ingressFrom")
      private final @Nullable Output<IngressFromArgs> ingressFrom;

    public Output<IngressFromArgs> getIngressFrom() {
        return this.ingressFrom == null ? Output.empty() : this.ingressFrom;
    }

    /**
     * Defines the conditions on the ApiOperation and request destination that cause this IngressPolicy to apply.
     * 
     */
    @Import(name="ingressTo")
      private final @Nullable Output<IngressToArgs> ingressTo;

    public Output<IngressToArgs> getIngressTo() {
        return this.ingressTo == null ? Output.empty() : this.ingressTo;
    }

    public IngressPolicyArgs(
        @Nullable Output<IngressFromArgs> ingressFrom,
        @Nullable Output<IngressToArgs> ingressTo) {
        this.ingressFrom = ingressFrom;
        this.ingressTo = ingressTo;
    }

    private IngressPolicyArgs() {
        this.ingressFrom = Output.empty();
        this.ingressTo = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IngressPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IngressFromArgs> ingressFrom;
        private @Nullable Output<IngressToArgs> ingressTo;

        public Builder() {
    	      // Empty
        }

        public Builder(IngressPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ingressFrom = defaults.ingressFrom;
    	      this.ingressTo = defaults.ingressTo;
        }

        public Builder ingressFrom(@Nullable Output<IngressFromArgs> ingressFrom) {
            this.ingressFrom = ingressFrom;
            return this;
        }

        public Builder ingressFrom(@Nullable IngressFromArgs ingressFrom) {
            this.ingressFrom = Output.ofNullable(ingressFrom);
            return this;
        }

        public Builder ingressTo(@Nullable Output<IngressToArgs> ingressTo) {
            this.ingressTo = ingressTo;
            return this;
        }

        public Builder ingressTo(@Nullable IngressToArgs ingressTo) {
            this.ingressTo = Output.ofNullable(ingressTo);
            return this;
        }
        public IngressPolicyArgs build() {
            return new IngressPolicyArgs(ingressFrom, ingressTo);
        }
    }
}
