// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Details for an outcome with a SKIPPED outcome summary.
 * 
 */
public final class SkippedDetailArgs extends io.pulumi.resources.ResourceArgs {

    public static final SkippedDetailArgs Empty = new SkippedDetailArgs();

    /**
     * If the App doesn't support the specific API level.
     * 
     */
    @Import(name="incompatibleAppVersion")
      private final @Nullable Output<Boolean> incompatibleAppVersion;

    public Output<Boolean> getIncompatibleAppVersion() {
        return this.incompatibleAppVersion == null ? Output.empty() : this.incompatibleAppVersion;
    }

    /**
     * If the App doesn't run on the specific architecture, for example, x86.
     * 
     */
    @Import(name="incompatibleArchitecture")
      private final @Nullable Output<Boolean> incompatibleArchitecture;

    public Output<Boolean> getIncompatibleArchitecture() {
        return this.incompatibleArchitecture == null ? Output.empty() : this.incompatibleArchitecture;
    }

    /**
     * If the requested OS version doesn't run on the specific device model.
     * 
     */
    @Import(name="incompatibleDevice")
      private final @Nullable Output<Boolean> incompatibleDevice;

    public Output<Boolean> getIncompatibleDevice() {
        return this.incompatibleDevice == null ? Output.empty() : this.incompatibleDevice;
    }

    public SkippedDetailArgs(
        @Nullable Output<Boolean> incompatibleAppVersion,
        @Nullable Output<Boolean> incompatibleArchitecture,
        @Nullable Output<Boolean> incompatibleDevice) {
        this.incompatibleAppVersion = incompatibleAppVersion;
        this.incompatibleArchitecture = incompatibleArchitecture;
        this.incompatibleDevice = incompatibleDevice;
    }

    private SkippedDetailArgs() {
        this.incompatibleAppVersion = Output.empty();
        this.incompatibleArchitecture = Output.empty();
        this.incompatibleDevice = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SkippedDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> incompatibleAppVersion;
        private @Nullable Output<Boolean> incompatibleArchitecture;
        private @Nullable Output<Boolean> incompatibleDevice;

        public Builder() {
    	      // Empty
        }

        public Builder(SkippedDetailArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.incompatibleAppVersion = defaults.incompatibleAppVersion;
    	      this.incompatibleArchitecture = defaults.incompatibleArchitecture;
    	      this.incompatibleDevice = defaults.incompatibleDevice;
        }

        public Builder incompatibleAppVersion(@Nullable Output<Boolean> incompatibleAppVersion) {
            this.incompatibleAppVersion = incompatibleAppVersion;
            return this;
        }

        public Builder incompatibleAppVersion(@Nullable Boolean incompatibleAppVersion) {
            this.incompatibleAppVersion = Output.ofNullable(incompatibleAppVersion);
            return this;
        }

        public Builder incompatibleArchitecture(@Nullable Output<Boolean> incompatibleArchitecture) {
            this.incompatibleArchitecture = incompatibleArchitecture;
            return this;
        }

        public Builder incompatibleArchitecture(@Nullable Boolean incompatibleArchitecture) {
            this.incompatibleArchitecture = Output.ofNullable(incompatibleArchitecture);
            return this;
        }

        public Builder incompatibleDevice(@Nullable Output<Boolean> incompatibleDevice) {
            this.incompatibleDevice = incompatibleDevice;
            return this;
        }

        public Builder incompatibleDevice(@Nullable Boolean incompatibleDevice) {
            this.incompatibleDevice = Output.ofNullable(incompatibleDevice);
            return this;
        }
        public SkippedDetailArgs build() {
            return new SkippedDetailArgs(incompatibleAppVersion, incompatibleArchitecture, incompatibleDevice);
        }
    }
}
