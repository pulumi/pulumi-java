// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.servicemanagement_v1.inputs.MetricRuleArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.QuotaLimitArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 # The metric rules bind all methods to the read_calls metric, # except for the UpdateBook and DeleteBook methods. These two methods # are mapped to the write_calls metric, with the UpdateBook method # consuming at twice rate as the DeleteBook method. metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64
 * 
 */
public final class QuotaArgs extends io.pulumi.resources.ResourceArgs {

    public static final QuotaArgs Empty = new QuotaArgs();

    /**
     * List of `QuotaLimit` definitions for the service.
     * 
     */
    @Import(name="limits")
      private final @Nullable Output<List<QuotaLimitArgs>> limits;

    public Output<List<QuotaLimitArgs>> getLimits() {
        return this.limits == null ? Codegen.empty() : this.limits;
    }

    /**
     * List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
     * 
     */
    @Import(name="metricRules")
      private final @Nullable Output<List<MetricRuleArgs>> metricRules;

    public Output<List<MetricRuleArgs>> getMetricRules() {
        return this.metricRules == null ? Codegen.empty() : this.metricRules;
    }

    public QuotaArgs(
        @Nullable Output<List<QuotaLimitArgs>> limits,
        @Nullable Output<List<MetricRuleArgs>> metricRules) {
        this.limits = limits;
        this.metricRules = metricRules;
    }

    private QuotaArgs() {
        this.limits = Codegen.empty();
        this.metricRules = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QuotaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<QuotaLimitArgs>> limits;
        private @Nullable Output<List<MetricRuleArgs>> metricRules;

        public Builder() {
    	      // Empty
        }

        public Builder(QuotaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.limits = defaults.limits;
    	      this.metricRules = defaults.metricRules;
        }

        public Builder limits(@Nullable Output<List<QuotaLimitArgs>> limits) {
            this.limits = limits;
            return this;
        }
        public Builder limits(@Nullable List<QuotaLimitArgs> limits) {
            this.limits = Codegen.ofNullable(limits);
            return this;
        }
        public Builder limits(QuotaLimitArgs... limits) {
            return limits(List.of(limits));
        }
        public Builder metricRules(@Nullable Output<List<MetricRuleArgs>> metricRules) {
            this.metricRules = metricRules;
            return this;
        }
        public Builder metricRules(@Nullable List<MetricRuleArgs> metricRules) {
            this.metricRules = Codegen.ofNullable(metricRules);
            return this;
        }
        public Builder metricRules(MetricRuleArgs... metricRules) {
            return metricRules(List.of(metricRules));
        }        public QuotaArgs build() {
            return new QuotaArgs(limits, metricRules);
        }
    }
}
