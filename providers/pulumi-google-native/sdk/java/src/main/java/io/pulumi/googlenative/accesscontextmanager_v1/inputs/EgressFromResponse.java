// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Defines the conditions under which an EgressPolicy matches a request. Conditions based on information about the source of the request. Note that if the destination of the request is also protected by a ServicePerimeter, then that ServicePerimeter must have an IngressPolicy which allows access in order for this request to succeed.
 * 
 */
public final class EgressFromResponse extends io.pulumi.resources.InvokeArgs {

    public static final EgressFromResponse Empty = new EgressFromResponse();

    /**
     * A list of identities that are allowed access through this [EgressPolicy]. Should be in the format of email address. The email address should represent individual user or service account only.
     * 
     */
    @InputImport(name="identities", required=true)
      private final List<String> identities;

    public List<String> getIdentities() {
        return this.identities;
    }

    /**
     * Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
     * 
     */
    @InputImport(name="identityType", required=true)
      private final String identityType;

    public String getIdentityType() {
        return this.identityType;
    }

    public EgressFromResponse(
        List<String> identities,
        String identityType) {
        this.identities = Objects.requireNonNull(identities, "expected parameter 'identities' to be non-null");
        this.identityType = Objects.requireNonNull(identityType, "expected parameter 'identityType' to be non-null");
    }

    private EgressFromResponse() {
        this.identities = List.of();
        this.identityType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EgressFromResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> identities;
        private String identityType;

        public Builder() {
    	      // Empty
        }

        public Builder(EgressFromResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identities = defaults.identities;
    	      this.identityType = defaults.identityType;
        }

        public Builder setIdentities(List<String> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }

        public Builder setIdentityType(String identityType) {
            this.identityType = Objects.requireNonNull(identityType);
            return this;
        }
        public EgressFromResponse build() {
            return new EgressFromResponse(identities, identityType);
        }
    }
}
