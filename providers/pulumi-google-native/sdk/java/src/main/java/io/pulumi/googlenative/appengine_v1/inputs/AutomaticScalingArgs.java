// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.appengine_v1.inputs.CpuUtilizationArgs;
import io.pulumi.googlenative.appengine_v1.inputs.DiskUtilizationArgs;
import io.pulumi.googlenative.appengine_v1.inputs.NetworkUtilizationArgs;
import io.pulumi.googlenative.appengine_v1.inputs.RequestUtilizationArgs;
import io.pulumi.googlenative.appengine_v1.inputs.StandardSchedulerSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Automatic scaling is based on request rate, response latencies, and other application metrics.
 * 
 */
public final class AutomaticScalingArgs extends io.pulumi.resources.ResourceArgs {

    public static final AutomaticScalingArgs Empty = new AutomaticScalingArgs();

    /**
     * The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
     * 
     */
    @Import(name="coolDownPeriod")
      private final @Nullable Output<String> coolDownPeriod;

    public Output<String> getCoolDownPeriod() {
        return this.coolDownPeriod == null ? Codegen.empty() : this.coolDownPeriod;
    }

    /**
     * Target scaling by CPU usage.
     * 
     */
    @Import(name="cpuUtilization")
      private final @Nullable Output<CpuUtilizationArgs> cpuUtilization;

    public Output<CpuUtilizationArgs> getCpuUtilization() {
        return this.cpuUtilization == null ? Codegen.empty() : this.cpuUtilization;
    }

    /**
     * Target scaling by disk usage.
     * 
     */
    @Import(name="diskUtilization")
      private final @Nullable Output<DiskUtilizationArgs> diskUtilization;

    public Output<DiskUtilizationArgs> getDiskUtilization() {
        return this.diskUtilization == null ? Codegen.empty() : this.diskUtilization;
    }

    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
     * 
     */
    @Import(name="maxConcurrentRequests")
      private final @Nullable Output<Integer> maxConcurrentRequests;

    public Output<Integer> getMaxConcurrentRequests() {
        return this.maxConcurrentRequests == null ? Codegen.empty() : this.maxConcurrentRequests;
    }

    /**
     * Maximum number of idle instances that should be maintained for this version.
     * 
     */
    @Import(name="maxIdleInstances")
      private final @Nullable Output<Integer> maxIdleInstances;

    public Output<Integer> getMaxIdleInstances() {
        return this.maxIdleInstances == null ? Codegen.empty() : this.maxIdleInstances;
    }

    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="maxPendingLatency")
      private final @Nullable Output<String> maxPendingLatency;

    public Output<String> getMaxPendingLatency() {
        return this.maxPendingLatency == null ? Codegen.empty() : this.maxPendingLatency;
    }

    /**
     * Maximum number of instances that should be started to handle requests for this version.
     * 
     */
    @Import(name="maxTotalInstances")
      private final @Nullable Output<Integer> maxTotalInstances;

    public Output<Integer> getMaxTotalInstances() {
        return this.maxTotalInstances == null ? Codegen.empty() : this.maxTotalInstances;
    }

    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    @Import(name="minIdleInstances")
      private final @Nullable Output<Integer> minIdleInstances;

    public Output<Integer> getMinIdleInstances() {
        return this.minIdleInstances == null ? Codegen.empty() : this.minIdleInstances;
    }

    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    @Import(name="minPendingLatency")
      private final @Nullable Output<String> minPendingLatency;

    public Output<String> getMinPendingLatency() {
        return this.minPendingLatency == null ? Codegen.empty() : this.minPendingLatency;
    }

    /**
     * Minimum number of running instances that should be maintained for this version.
     * 
     */
    @Import(name="minTotalInstances")
      private final @Nullable Output<Integer> minTotalInstances;

    public Output<Integer> getMinTotalInstances() {
        return this.minTotalInstances == null ? Codegen.empty() : this.minTotalInstances;
    }

    /**
     * Target scaling by network usage.
     * 
     */
    @Import(name="networkUtilization")
      private final @Nullable Output<NetworkUtilizationArgs> networkUtilization;

    public Output<NetworkUtilizationArgs> getNetworkUtilization() {
        return this.networkUtilization == null ? Codegen.empty() : this.networkUtilization;
    }

    /**
     * Target scaling by request utilization.
     * 
     */
    @Import(name="requestUtilization")
      private final @Nullable Output<RequestUtilizationArgs> requestUtilization;

    public Output<RequestUtilizationArgs> getRequestUtilization() {
        return this.requestUtilization == null ? Codegen.empty() : this.requestUtilization;
    }

    /**
     * Scheduler settings for standard environment.
     * 
     */
    @Import(name="standardSchedulerSettings")
      private final @Nullable Output<StandardSchedulerSettingsArgs> standardSchedulerSettings;

    public Output<StandardSchedulerSettingsArgs> getStandardSchedulerSettings() {
        return this.standardSchedulerSettings == null ? Codegen.empty() : this.standardSchedulerSettings;
    }

    public AutomaticScalingArgs(
        @Nullable Output<String> coolDownPeriod,
        @Nullable Output<CpuUtilizationArgs> cpuUtilization,
        @Nullable Output<DiskUtilizationArgs> diskUtilization,
        @Nullable Output<Integer> maxConcurrentRequests,
        @Nullable Output<Integer> maxIdleInstances,
        @Nullable Output<String> maxPendingLatency,
        @Nullable Output<Integer> maxTotalInstances,
        @Nullable Output<Integer> minIdleInstances,
        @Nullable Output<String> minPendingLatency,
        @Nullable Output<Integer> minTotalInstances,
        @Nullable Output<NetworkUtilizationArgs> networkUtilization,
        @Nullable Output<RequestUtilizationArgs> requestUtilization,
        @Nullable Output<StandardSchedulerSettingsArgs> standardSchedulerSettings) {
        this.coolDownPeriod = coolDownPeriod;
        this.cpuUtilization = cpuUtilization;
        this.diskUtilization = diskUtilization;
        this.maxConcurrentRequests = maxConcurrentRequests;
        this.maxIdleInstances = maxIdleInstances;
        this.maxPendingLatency = maxPendingLatency;
        this.maxTotalInstances = maxTotalInstances;
        this.minIdleInstances = minIdleInstances;
        this.minPendingLatency = minPendingLatency;
        this.minTotalInstances = minTotalInstances;
        this.networkUtilization = networkUtilization;
        this.requestUtilization = requestUtilization;
        this.standardSchedulerSettings = standardSchedulerSettings;
    }

    private AutomaticScalingArgs() {
        this.coolDownPeriod = Codegen.empty();
        this.cpuUtilization = Codegen.empty();
        this.diskUtilization = Codegen.empty();
        this.maxConcurrentRequests = Codegen.empty();
        this.maxIdleInstances = Codegen.empty();
        this.maxPendingLatency = Codegen.empty();
        this.maxTotalInstances = Codegen.empty();
        this.minIdleInstances = Codegen.empty();
        this.minPendingLatency = Codegen.empty();
        this.minTotalInstances = Codegen.empty();
        this.networkUtilization = Codegen.empty();
        this.requestUtilization = Codegen.empty();
        this.standardSchedulerSettings = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomaticScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> coolDownPeriod;
        private @Nullable Output<CpuUtilizationArgs> cpuUtilization;
        private @Nullable Output<DiskUtilizationArgs> diskUtilization;
        private @Nullable Output<Integer> maxConcurrentRequests;
        private @Nullable Output<Integer> maxIdleInstances;
        private @Nullable Output<String> maxPendingLatency;
        private @Nullable Output<Integer> maxTotalInstances;
        private @Nullable Output<Integer> minIdleInstances;
        private @Nullable Output<String> minPendingLatency;
        private @Nullable Output<Integer> minTotalInstances;
        private @Nullable Output<NetworkUtilizationArgs> networkUtilization;
        private @Nullable Output<RequestUtilizationArgs> requestUtilization;
        private @Nullable Output<StandardSchedulerSettingsArgs> standardSchedulerSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(AutomaticScalingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coolDownPeriod = defaults.coolDownPeriod;
    	      this.cpuUtilization = defaults.cpuUtilization;
    	      this.diskUtilization = defaults.diskUtilization;
    	      this.maxConcurrentRequests = defaults.maxConcurrentRequests;
    	      this.maxIdleInstances = defaults.maxIdleInstances;
    	      this.maxPendingLatency = defaults.maxPendingLatency;
    	      this.maxTotalInstances = defaults.maxTotalInstances;
    	      this.minIdleInstances = defaults.minIdleInstances;
    	      this.minPendingLatency = defaults.minPendingLatency;
    	      this.minTotalInstances = defaults.minTotalInstances;
    	      this.networkUtilization = defaults.networkUtilization;
    	      this.requestUtilization = defaults.requestUtilization;
    	      this.standardSchedulerSettings = defaults.standardSchedulerSettings;
        }

        public Builder coolDownPeriod(@Nullable Output<String> coolDownPeriod) {
            this.coolDownPeriod = coolDownPeriod;
            return this;
        }
        public Builder coolDownPeriod(@Nullable String coolDownPeriod) {
            this.coolDownPeriod = Codegen.ofNullable(coolDownPeriod);
            return this;
        }
        public Builder cpuUtilization(@Nullable Output<CpuUtilizationArgs> cpuUtilization) {
            this.cpuUtilization = cpuUtilization;
            return this;
        }
        public Builder cpuUtilization(@Nullable CpuUtilizationArgs cpuUtilization) {
            this.cpuUtilization = Codegen.ofNullable(cpuUtilization);
            return this;
        }
        public Builder diskUtilization(@Nullable Output<DiskUtilizationArgs> diskUtilization) {
            this.diskUtilization = diskUtilization;
            return this;
        }
        public Builder diskUtilization(@Nullable DiskUtilizationArgs diskUtilization) {
            this.diskUtilization = Codegen.ofNullable(diskUtilization);
            return this;
        }
        public Builder maxConcurrentRequests(@Nullable Output<Integer> maxConcurrentRequests) {
            this.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }
        public Builder maxConcurrentRequests(@Nullable Integer maxConcurrentRequests) {
            this.maxConcurrentRequests = Codegen.ofNullable(maxConcurrentRequests);
            return this;
        }
        public Builder maxIdleInstances(@Nullable Output<Integer> maxIdleInstances) {
            this.maxIdleInstances = maxIdleInstances;
            return this;
        }
        public Builder maxIdleInstances(@Nullable Integer maxIdleInstances) {
            this.maxIdleInstances = Codegen.ofNullable(maxIdleInstances);
            return this;
        }
        public Builder maxPendingLatency(@Nullable Output<String> maxPendingLatency) {
            this.maxPendingLatency = maxPendingLatency;
            return this;
        }
        public Builder maxPendingLatency(@Nullable String maxPendingLatency) {
            this.maxPendingLatency = Codegen.ofNullable(maxPendingLatency);
            return this;
        }
        public Builder maxTotalInstances(@Nullable Output<Integer> maxTotalInstances) {
            this.maxTotalInstances = maxTotalInstances;
            return this;
        }
        public Builder maxTotalInstances(@Nullable Integer maxTotalInstances) {
            this.maxTotalInstances = Codegen.ofNullable(maxTotalInstances);
            return this;
        }
        public Builder minIdleInstances(@Nullable Output<Integer> minIdleInstances) {
            this.minIdleInstances = minIdleInstances;
            return this;
        }
        public Builder minIdleInstances(@Nullable Integer minIdleInstances) {
            this.minIdleInstances = Codegen.ofNullable(minIdleInstances);
            return this;
        }
        public Builder minPendingLatency(@Nullable Output<String> minPendingLatency) {
            this.minPendingLatency = minPendingLatency;
            return this;
        }
        public Builder minPendingLatency(@Nullable String minPendingLatency) {
            this.minPendingLatency = Codegen.ofNullable(minPendingLatency);
            return this;
        }
        public Builder minTotalInstances(@Nullable Output<Integer> minTotalInstances) {
            this.minTotalInstances = minTotalInstances;
            return this;
        }
        public Builder minTotalInstances(@Nullable Integer minTotalInstances) {
            this.minTotalInstances = Codegen.ofNullable(minTotalInstances);
            return this;
        }
        public Builder networkUtilization(@Nullable Output<NetworkUtilizationArgs> networkUtilization) {
            this.networkUtilization = networkUtilization;
            return this;
        }
        public Builder networkUtilization(@Nullable NetworkUtilizationArgs networkUtilization) {
            this.networkUtilization = Codegen.ofNullable(networkUtilization);
            return this;
        }
        public Builder requestUtilization(@Nullable Output<RequestUtilizationArgs> requestUtilization) {
            this.requestUtilization = requestUtilization;
            return this;
        }
        public Builder requestUtilization(@Nullable RequestUtilizationArgs requestUtilization) {
            this.requestUtilization = Codegen.ofNullable(requestUtilization);
            return this;
        }
        public Builder standardSchedulerSettings(@Nullable Output<StandardSchedulerSettingsArgs> standardSchedulerSettings) {
            this.standardSchedulerSettings = standardSchedulerSettings;
            return this;
        }
        public Builder standardSchedulerSettings(@Nullable StandardSchedulerSettingsArgs standardSchedulerSettings) {
            this.standardSchedulerSettings = Codegen.ofNullable(standardSchedulerSettings);
            return this;
        }        public AutomaticScalingArgs build() {
            return new AutomaticScalingArgs(coolDownPeriod, cpuUtilization, diskUtilization, maxConcurrentRequests, maxIdleInstances, maxPendingLatency, maxTotalInstances, minIdleInstances, minPendingLatency, minTotalInstances, networkUtilization, requestUtilization, standardSchedulerSettings);
        }
    }
}
