// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.inputs.TestTargetsForShardArgs;
import java.util.List;
import java.util.Objects;


public final class ManualShardingArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManualShardingArgs Empty = new ManualShardingArgs();

    @InputImport(name="testTargetsForShard", required=true)
    private final Input<List<TestTargetsForShardArgs>> testTargetsForShard;

    public Input<List<TestTargetsForShardArgs>> getTestTargetsForShard() {
        return this.testTargetsForShard;
    }

    public ManualShardingArgs(Input<List<TestTargetsForShardArgs>> testTargetsForShard) {
        this.testTargetsForShard = Objects.requireNonNull(testTargetsForShard, "expected parameter 'testTargetsForShard' to be non-null");
    }

    private ManualShardingArgs() {
        this.testTargetsForShard = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManualShardingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<TestTargetsForShardArgs>> testTargetsForShard;

        public Builder() {
    	      // Empty
        }

        public Builder(ManualShardingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.testTargetsForShard = defaults.testTargetsForShard;
        }

        public Builder setTestTargetsForShard(Input<List<TestTargetsForShardArgs>> testTargetsForShard) {
            this.testTargetsForShard = Objects.requireNonNull(testTargetsForShard);
            return this;
        }

        public Builder setTestTargetsForShard(List<TestTargetsForShardArgs> testTargetsForShard) {
            this.testTargetsForShard = Input.of(Objects.requireNonNull(testTargetsForShard));
            return this;
        }

        public ManualShardingArgs build() {
            return new ManualShardingArgs(testTargetsForShard);
        }
    }
}
