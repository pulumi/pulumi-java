// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.BigtableColumnFamilyArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BigtableOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final BigtableOptionsArgs Empty = new BigtableOptionsArgs();

    /**
     * [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
     * 
     */
    @InputImport(name="columnFamilies")
      private final @Nullable Input<List<BigtableColumnFamilyArgs>> columnFamilies;

    public Input<List<BigtableColumnFamilyArgs>> getColumnFamilies() {
        return this.columnFamilies == null ? Input.empty() : this.columnFamilies;
    }

    /**
     * [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
     */
    @InputImport(name="ignoreUnspecifiedColumnFamilies")
      private final @Nullable Input<Boolean> ignoreUnspecifiedColumnFamilies;

    public Input<Boolean> getIgnoreUnspecifiedColumnFamilies() {
        return this.ignoreUnspecifiedColumnFamilies == null ? Input.empty() : this.ignoreUnspecifiedColumnFamilies;
    }

    /**
     * [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
     */
    @InputImport(name="readRowkeyAsString")
      private final @Nullable Input<Boolean> readRowkeyAsString;

    public Input<Boolean> getReadRowkeyAsString() {
        return this.readRowkeyAsString == null ? Input.empty() : this.readRowkeyAsString;
    }

    public BigtableOptionsArgs(
        @Nullable Input<List<BigtableColumnFamilyArgs>> columnFamilies,
        @Nullable Input<Boolean> ignoreUnspecifiedColumnFamilies,
        @Nullable Input<Boolean> readRowkeyAsString) {
        this.columnFamilies = columnFamilies;
        this.ignoreUnspecifiedColumnFamilies = ignoreUnspecifiedColumnFamilies;
        this.readRowkeyAsString = readRowkeyAsString;
    }

    private BigtableOptionsArgs() {
        this.columnFamilies = Input.empty();
        this.ignoreUnspecifiedColumnFamilies = Input.empty();
        this.readRowkeyAsString = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigtableOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<BigtableColumnFamilyArgs>> columnFamilies;
        private @Nullable Input<Boolean> ignoreUnspecifiedColumnFamilies;
        private @Nullable Input<Boolean> readRowkeyAsString;

        public Builder() {
    	      // Empty
        }

        public Builder(BigtableOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnFamilies = defaults.columnFamilies;
    	      this.ignoreUnspecifiedColumnFamilies = defaults.ignoreUnspecifiedColumnFamilies;
    	      this.readRowkeyAsString = defaults.readRowkeyAsString;
        }

        public Builder columnFamilies(@Nullable Input<List<BigtableColumnFamilyArgs>> columnFamilies) {
            this.columnFamilies = columnFamilies;
            return this;
        }

        public Builder columnFamilies(@Nullable List<BigtableColumnFamilyArgs> columnFamilies) {
            this.columnFamilies = Input.ofNullable(columnFamilies);
            return this;
        }

        public Builder ignoreUnspecifiedColumnFamilies(@Nullable Input<Boolean> ignoreUnspecifiedColumnFamilies) {
            this.ignoreUnspecifiedColumnFamilies = ignoreUnspecifiedColumnFamilies;
            return this;
        }

        public Builder ignoreUnspecifiedColumnFamilies(@Nullable Boolean ignoreUnspecifiedColumnFamilies) {
            this.ignoreUnspecifiedColumnFamilies = Input.ofNullable(ignoreUnspecifiedColumnFamilies);
            return this;
        }

        public Builder readRowkeyAsString(@Nullable Input<Boolean> readRowkeyAsString) {
            this.readRowkeyAsString = readRowkeyAsString;
            return this;
        }

        public Builder readRowkeyAsString(@Nullable Boolean readRowkeyAsString) {
            this.readRowkeyAsString = Input.ofNullable(readRowkeyAsString);
            return this;
        }
        public BigtableOptionsArgs build() {
            return new BigtableOptionsArgs(columnFamilies, ignoreUnspecifiedColumnFamilies, readRowkeyAsString);
        }
    }
}
