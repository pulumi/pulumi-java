// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.inputs.UrlMapTestHeaderArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Message for the expected URL mappings.
 * 
 */
public final class UrlMapTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final UrlMapTestArgs Empty = new UrlMapTestArgs();

    /**
     * Description of this test case.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
     * 
     */
    @InputImport(name="expectedOutputUrl")
      private final @Nullable Output<String> expectedOutputUrl;

    public Output<String> getExpectedOutputUrl() {
        return this.expectedOutputUrl == null ? Output.empty() : this.expectedOutputUrl;
    }

    /**
     * For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
     * 
     */
    @InputImport(name="expectedRedirectResponseCode")
      private final @Nullable Output<Integer> expectedRedirectResponseCode;

    public Output<Integer> getExpectedRedirectResponseCode() {
        return this.expectedRedirectResponseCode == null ? Output.empty() : this.expectedRedirectResponseCode;
    }

    /**
     * HTTP headers for this request. If headers contains a host header, then host must also match the header value.
     * 
     */
    @InputImport(name="headers")
      private final @Nullable Output<List<UrlMapTestHeaderArgs>> headers;

    public Output<List<UrlMapTestHeaderArgs>> getHeaders() {
        return this.headers == null ? Output.empty() : this.headers;
    }

    /**
     * Host portion of the URL. If headers contains a host header, then host must also match the header value.
     * 
     */
    @InputImport(name="host")
      private final @Nullable Output<String> host;

    public Output<String> getHost() {
        return this.host == null ? Output.empty() : this.host;
    }

    /**
     * Path portion of the URL.
     * 
     */
    @InputImport(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
     * 
     */
    @InputImport(name="service")
      private final @Nullable Output<String> service;

    public Output<String> getService() {
        return this.service == null ? Output.empty() : this.service;
    }

    public UrlMapTestArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> expectedOutputUrl,
        @Nullable Output<Integer> expectedRedirectResponseCode,
        @Nullable Output<List<UrlMapTestHeaderArgs>> headers,
        @Nullable Output<String> host,
        @Nullable Output<String> path,
        @Nullable Output<String> service) {
        this.description = description;
        this.expectedOutputUrl = expectedOutputUrl;
        this.expectedRedirectResponseCode = expectedRedirectResponseCode;
        this.headers = headers;
        this.host = host;
        this.path = path;
        this.service = service;
    }

    private UrlMapTestArgs() {
        this.description = Output.empty();
        this.expectedOutputUrl = Output.empty();
        this.expectedRedirectResponseCode = Output.empty();
        this.headers = Output.empty();
        this.host = Output.empty();
        this.path = Output.empty();
        this.service = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UrlMapTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> expectedOutputUrl;
        private @Nullable Output<Integer> expectedRedirectResponseCode;
        private @Nullable Output<List<UrlMapTestHeaderArgs>> headers;
        private @Nullable Output<String> host;
        private @Nullable Output<String> path;
        private @Nullable Output<String> service;

        public Builder() {
    	      // Empty
        }

        public Builder(UrlMapTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.expectedOutputUrl = defaults.expectedOutputUrl;
    	      this.expectedRedirectResponseCode = defaults.expectedRedirectResponseCode;
    	      this.headers = defaults.headers;
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.service = defaults.service;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder expectedOutputUrl(@Nullable Output<String> expectedOutputUrl) {
            this.expectedOutputUrl = expectedOutputUrl;
            return this;
        }

        public Builder expectedOutputUrl(@Nullable String expectedOutputUrl) {
            this.expectedOutputUrl = Output.ofNullable(expectedOutputUrl);
            return this;
        }

        public Builder expectedRedirectResponseCode(@Nullable Output<Integer> expectedRedirectResponseCode) {
            this.expectedRedirectResponseCode = expectedRedirectResponseCode;
            return this;
        }

        public Builder expectedRedirectResponseCode(@Nullable Integer expectedRedirectResponseCode) {
            this.expectedRedirectResponseCode = Output.ofNullable(expectedRedirectResponseCode);
            return this;
        }

        public Builder headers(@Nullable Output<List<UrlMapTestHeaderArgs>> headers) {
            this.headers = headers;
            return this;
        }

        public Builder headers(@Nullable List<UrlMapTestHeaderArgs> headers) {
            this.headers = Output.ofNullable(headers);
            return this;
        }

        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }

        public Builder host(@Nullable String host) {
            this.host = Output.ofNullable(host);
            return this;
        }

        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }

        public Builder service(@Nullable Output<String> service) {
            this.service = service;
            return this;
        }

        public Builder service(@Nullable String service) {
            this.service = Output.ofNullable(service);
            return this;
        }
        public UrlMapTestArgs build() {
            return new UrlMapTestArgs(description, expectedOutputUrl, expectedRedirectResponseCode, headers, host, path, service);
        }
    }
}
