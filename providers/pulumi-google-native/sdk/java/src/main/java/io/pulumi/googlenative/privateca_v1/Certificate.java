// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.googlenative.Utilities;
import io.pulumi.googlenative.privateca_v1.CertificateArgs;
import io.pulumi.googlenative.privateca_v1.outputs.CertificateConfigResponse;
import io.pulumi.googlenative.privateca_v1.outputs.CertificateDescriptionResponse;
import io.pulumi.googlenative.privateca_v1.outputs.RevocationDetailsResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Create a new Certificate in a given Project, Location from a particular CaPool.
 * Auto-naming is currently not supported for this resource.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 * 
 */
@ResourceType(type="google-native:privateca/v1:Certificate")
public class Certificate extends io.pulumi.resources.CustomResource {
    /**
     * A structured description of the issued X.509 certificate.
     * 
     */
    @OutputExport(name="certificateDescription", type=CertificateDescriptionResponse.class, parameters={})
    private Output<CertificateDescriptionResponse> certificateDescription;

    /**
     * @return A structured description of the issued X.509 certificate.
     * 
     */
    public Output<CertificateDescriptionResponse> getCertificateDescription() {
        return this.certificateDescription;
    }
    /**
     * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     * 
     */
    @OutputExport(name="certificateTemplate", type=String.class, parameters={})
    private Output<String> certificateTemplate;

    /**
     * @return Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     * 
     */
    public Output<String> getCertificateTemplate() {
        return this.certificateTemplate;
    }
    /**
     * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     * 
     */
    @OutputExport(name="config", type=CertificateConfigResponse.class, parameters={})
    private Output<CertificateConfigResponse> config;

    /**
     * @return Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     * 
     */
    public Output<CertificateConfigResponse> getConfig() {
        return this.config;
    }
    /**
     * The time at which this Certificate was created.
     * 
     */
    @OutputExport(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time at which this Certificate was created.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * The resource name of the issuing CertificateAuthority in the format `projects/*{@literal /}locations/*{@literal /}caPools/*{@literal /}certificateAuthorities/*`.
     * 
     */
    @OutputExport(name="issuerCertificateAuthority", type=String.class, parameters={})
    private Output<String> issuerCertificateAuthority;

    /**
     * @return The resource name of the issuing CertificateAuthority in the format `projects/*{@literal /}locations/*{@literal /}caPools/*{@literal /}certificateAuthorities/*`.
     * 
     */
    public Output<String> getIssuerCertificateAuthority() {
        return this.issuerCertificateAuthority;
    }
    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @OutputExport(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels with user-defined metadata.
     * 
     */
    public Output<Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     * 
     */
    @OutputExport(name="lifetime", type=String.class, parameters={})
    private Output<String> lifetime;

    /**
     * @return Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     * 
     */
    public Output<String> getLifetime() {
        return this.lifetime;
    }
    /**
     * The resource name for this Certificate in the format `projects/*{@literal /}locations/*{@literal /}caPools/*{@literal /}certificates/*`.
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name for this Certificate in the format `projects/*{@literal /}locations/*{@literal /}caPools/*{@literal /}certificates/*`.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The pem-encoded, signed X.509 certificate.
     * 
     */
    @OutputExport(name="pemCertificate", type=String.class, parameters={})
    private Output<String> pemCertificate;

    /**
     * @return The pem-encoded, signed X.509 certificate.
     * 
     */
    public Output<String> getPemCertificate() {
        return this.pemCertificate;
    }
    /**
     * The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
     * 
     */
    @OutputExport(name="pemCertificateChain", type=List.class, parameters={String.class})
    private Output<List<String>> pemCertificateChain;

    /**
     * @return The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
     * 
     */
    public Output<List<String>> getPemCertificateChain() {
        return this.pemCertificateChain;
    }
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    @OutputExport(name="pemCsr", type=String.class, parameters={})
    private Output<String> pemCsr;

    /**
     * @return Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    public Output<String> getPemCsr() {
        return this.pemCsr;
    }
    /**
     * Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
     * 
     */
    @OutputExport(name="revocationDetails", type=RevocationDetailsResponse.class, parameters={})
    private Output<RevocationDetailsResponse> revocationDetails;

    /**
     * @return Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
     * 
     */
    public Output<RevocationDetailsResponse> getRevocationDetails() {
        return this.revocationDetails;
    }
    /**
     * Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     * 
     */
    @OutputExport(name="subjectMode", type=String.class, parameters={})
    private Output<String> subjectMode;

    /**
     * @return Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     * 
     */
    public Output<String> getSubjectMode() {
        return this.subjectMode;
    }
    /**
     * The time at which this Certificate was updated.
     * 
     */
    @OutputExport(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The time at which this Certificate was updated.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certificate(String name, CertificateArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:privateca/v1:Certificate", name, args == null ? CertificateArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Certificate(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:privateca/v1:Certificate", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certificate get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Certificate(name, id, options);
    }
}
