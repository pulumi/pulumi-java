// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.apigee_v1.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDebugSessionResult {
    /**
     * Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
     * 
     */
    private final Integer count;
    /**
     * Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
     * 
     */
    private final String filter;
    /**
     * A unique ID for this DebugSession.
     * 
     */
    private final String name;
    /**
     * Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
     * 
     */
    private final String timeout;
    /**
     * Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
     * 
     */
    private final Integer tracesize;
    /**
     * Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
     * 
     */
    private final Integer validity;

    @CustomType.Constructor
    private GetDebugSessionResult(
        @CustomType.Parameter("count") Integer count,
        @CustomType.Parameter("filter") String filter,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("timeout") String timeout,
        @CustomType.Parameter("tracesize") Integer tracesize,
        @CustomType.Parameter("validity") Integer validity) {
        this.count = count;
        this.filter = filter;
        this.name = name;
        this.timeout = timeout;
        this.tracesize = tracesize;
        this.validity = validity;
    }

    /**
     * Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
     * 
    */
    public Integer getCount() {
        return this.count;
    }
    /**
     * Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
     * 
    */
    public String getFilter() {
        return this.filter;
    }
    /**
     * A unique ID for this DebugSession.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
     * 
    */
    public String getTimeout() {
        return this.timeout;
    }
    /**
     * Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
     * 
    */
    public Integer getTracesize() {
        return this.tracesize;
    }
    /**
     * Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
     * 
    */
    public Integer getValidity() {
        return this.validity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDebugSessionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer count;
        private String filter;
        private String name;
        private String timeout;
        private Integer tracesize;
        private Integer validity;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDebugSessionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.filter = defaults.filter;
    	      this.name = defaults.name;
    	      this.timeout = defaults.timeout;
    	      this.tracesize = defaults.tracesize;
    	      this.validity = defaults.validity;
        }

        public Builder count(Integer count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }

        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder tracesize(Integer tracesize) {
            this.tracesize = Objects.requireNonNull(tracesize);
            return this;
        }

        public Builder validity(Integer validity) {
            this.validity = Objects.requireNonNull(validity);
            return this;
        }
        public GetDebugSessionResult build() {
            return new GetDebugSessionResult(count, filter, name, timeout, tracesize, validity);
        }
    }
}
