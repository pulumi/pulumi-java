// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ml_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.ml_v1.outputs.GoogleCloudMlV1_Trial_ParameterResponse;
import io.pulumi.googlenative.ml_v1.outputs.GoogleCloudMlV1__MeasurementResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetTrialResult {
    private final String clientId;
    private final String endTime;
    private final GoogleCloudMlV1__MeasurementResponse finalMeasurement;
    private final String infeasibleReason;
    private final List<GoogleCloudMlV1__MeasurementResponse> measurements;
    private final String name;
    private final List<GoogleCloudMlV1_Trial_ParameterResponse> parameters;
    private final String startTime;
    private final String state;
    private final Boolean trialInfeasible;

    @OutputCustomType.Constructor({"clientId","endTime","finalMeasurement","infeasibleReason","measurements","name","parameters","startTime","state","trialInfeasible"})
    private GetTrialResult(
        String clientId,
        String endTime,
        GoogleCloudMlV1__MeasurementResponse finalMeasurement,
        String infeasibleReason,
        List<GoogleCloudMlV1__MeasurementResponse> measurements,
        String name,
        List<GoogleCloudMlV1_Trial_ParameterResponse> parameters,
        String startTime,
        String state,
        Boolean trialInfeasible) {
        this.clientId = Objects.requireNonNull(clientId);
        this.endTime = Objects.requireNonNull(endTime);
        this.finalMeasurement = Objects.requireNonNull(finalMeasurement);
        this.infeasibleReason = Objects.requireNonNull(infeasibleReason);
        this.measurements = Objects.requireNonNull(measurements);
        this.name = Objects.requireNonNull(name);
        this.parameters = Objects.requireNonNull(parameters);
        this.startTime = Objects.requireNonNull(startTime);
        this.state = Objects.requireNonNull(state);
        this.trialInfeasible = Objects.requireNonNull(trialInfeasible);
    }

    public String getClientId() {
        return this.clientId;
    }
    public String getEndTime() {
        return this.endTime;
    }
    public GoogleCloudMlV1__MeasurementResponse getFinalMeasurement() {
        return this.finalMeasurement;
    }
    public String getInfeasibleReason() {
        return this.infeasibleReason;
    }
    public List<GoogleCloudMlV1__MeasurementResponse> getMeasurements() {
        return this.measurements;
    }
    public String getName() {
        return this.name;
    }
    public List<GoogleCloudMlV1_Trial_ParameterResponse> getParameters() {
        return this.parameters;
    }
    public String getStartTime() {
        return this.startTime;
    }
    public String getState() {
        return this.state;
    }
    public Boolean getTrialInfeasible() {
        return this.trialInfeasible;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTrialResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clientId;
        private String endTime;
        private GoogleCloudMlV1__MeasurementResponse finalMeasurement;
        private String infeasibleReason;
        private List<GoogleCloudMlV1__MeasurementResponse> measurements;
        private String name;
        private List<GoogleCloudMlV1_Trial_ParameterResponse> parameters;
        private String startTime;
        private String state;
        private Boolean trialInfeasible;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTrialResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.endTime = defaults.endTime;
    	      this.finalMeasurement = defaults.finalMeasurement;
    	      this.infeasibleReason = defaults.infeasibleReason;
    	      this.measurements = defaults.measurements;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.startTime = defaults.startTime;
    	      this.state = defaults.state;
    	      this.trialInfeasible = defaults.trialInfeasible;
        }

        public Builder setClientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }

        public Builder setEndTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }

        public Builder setFinalMeasurement(GoogleCloudMlV1__MeasurementResponse finalMeasurement) {
            this.finalMeasurement = Objects.requireNonNull(finalMeasurement);
            return this;
        }

        public Builder setInfeasibleReason(String infeasibleReason) {
            this.infeasibleReason = Objects.requireNonNull(infeasibleReason);
            return this;
        }

        public Builder setMeasurements(List<GoogleCloudMlV1__MeasurementResponse> measurements) {
            this.measurements = Objects.requireNonNull(measurements);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setParameters(List<GoogleCloudMlV1_Trial_ParameterResponse> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setTrialInfeasible(Boolean trialInfeasible) {
            this.trialInfeasible = Objects.requireNonNull(trialInfeasible);
            return this;
        }

        public GetTrialResult build() {
            return new GetTrialResult(clientId, endTime, finalMeasurement, infeasibleReason, measurements, name, parameters, startTime, state, trialInfeasible);
        }
    }
}
