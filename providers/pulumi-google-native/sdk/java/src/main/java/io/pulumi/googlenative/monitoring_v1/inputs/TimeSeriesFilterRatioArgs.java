// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v1.inputs.AggregationArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.RatioPartArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.
 * 
 */
public final class TimeSeriesFilterRatioArgs extends io.pulumi.resources.ResourceArgs {

    public static final TimeSeriesFilterRatioArgs Empty = new TimeSeriesFilterRatioArgs();

    /**
     * The denominator of the ratio.
     * 
     */
    @InputImport(name="denominator")
      private final @Nullable Output<RatioPartArgs> denominator;

    public Output<RatioPartArgs> getDenominator() {
        return this.denominator == null ? Output.empty() : this.denominator;
    }

    /**
     * The numerator of the ratio.
     * 
     */
    @InputImport(name="numerator")
      private final @Nullable Output<RatioPartArgs> numerator;

    public Output<RatioPartArgs> getNumerator() {
        return this.numerator == null ? Output.empty() : this.numerator;
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @InputImport(name="pickTimeSeriesFilter")
      private final @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter;

    public Output<PickTimeSeriesFilterArgs> getPickTimeSeriesFilter() {
        return this.pickTimeSeriesFilter == null ? Output.empty() : this.pickTimeSeriesFilter;
    }

    /**
     * Apply a second aggregation after the ratio is computed.
     * 
     */
    @InputImport(name="secondaryAggregation")
      private final @Nullable Output<AggregationArgs> secondaryAggregation;

    public Output<AggregationArgs> getSecondaryAggregation() {
        return this.secondaryAggregation == null ? Output.empty() : this.secondaryAggregation;
    }

    public TimeSeriesFilterRatioArgs(
        @Nullable Output<RatioPartArgs> denominator,
        @Nullable Output<RatioPartArgs> numerator,
        @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter,
        @Nullable Output<AggregationArgs> secondaryAggregation) {
        this.denominator = denominator;
        this.numerator = numerator;
        this.pickTimeSeriesFilter = pickTimeSeriesFilter;
        this.secondaryAggregation = secondaryAggregation;
    }

    private TimeSeriesFilterRatioArgs() {
        this.denominator = Output.empty();
        this.numerator = Output.empty();
        this.pickTimeSeriesFilter = Output.empty();
        this.secondaryAggregation = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeSeriesFilterRatioArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RatioPartArgs> denominator;
        private @Nullable Output<RatioPartArgs> numerator;
        private @Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter;
        private @Nullable Output<AggregationArgs> secondaryAggregation;

        public Builder() {
    	      // Empty
        }

        public Builder(TimeSeriesFilterRatioArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.denominator = defaults.denominator;
    	      this.numerator = defaults.numerator;
    	      this.pickTimeSeriesFilter = defaults.pickTimeSeriesFilter;
    	      this.secondaryAggregation = defaults.secondaryAggregation;
        }

        public Builder denominator(@Nullable Output<RatioPartArgs> denominator) {
            this.denominator = denominator;
            return this;
        }

        public Builder denominator(@Nullable RatioPartArgs denominator) {
            this.denominator = Output.ofNullable(denominator);
            return this;
        }

        public Builder numerator(@Nullable Output<RatioPartArgs> numerator) {
            this.numerator = numerator;
            return this;
        }

        public Builder numerator(@Nullable RatioPartArgs numerator) {
            this.numerator = Output.ofNullable(numerator);
            return this;
        }

        public Builder pickTimeSeriesFilter(@Nullable Output<PickTimeSeriesFilterArgs> pickTimeSeriesFilter) {
            this.pickTimeSeriesFilter = pickTimeSeriesFilter;
            return this;
        }

        public Builder pickTimeSeriesFilter(@Nullable PickTimeSeriesFilterArgs pickTimeSeriesFilter) {
            this.pickTimeSeriesFilter = Output.ofNullable(pickTimeSeriesFilter);
            return this;
        }

        public Builder secondaryAggregation(@Nullable Output<AggregationArgs> secondaryAggregation) {
            this.secondaryAggregation = secondaryAggregation;
            return this;
        }

        public Builder secondaryAggregation(@Nullable AggregationArgs secondaryAggregation) {
            this.secondaryAggregation = Output.ofNullable(secondaryAggregation);
            return this;
        }
        public TimeSeriesFilterRatioArgs build() {
            return new TimeSeriesFilterRatioArgs(denominator, numerator, pickTimeSeriesFilter, secondaryAggregation);
        }
    }
}
