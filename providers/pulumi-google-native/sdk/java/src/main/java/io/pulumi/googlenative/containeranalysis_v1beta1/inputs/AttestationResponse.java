// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.GenericSignedAttestationResponse;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.PgpSignedAttestationResponse;
import java.util.Objects;


/**
 * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
 * 
 */
public final class AttestationResponse extends io.pulumi.resources.InvokeArgs {

    public static final AttestationResponse Empty = new AttestationResponse();

    @InputImport(name="genericSignedAttestation", required=true)
    private final GenericSignedAttestationResponse genericSignedAttestation;

    public GenericSignedAttestationResponse getGenericSignedAttestation() {
        return this.genericSignedAttestation;
    }

    /**
     * A PGP signed attestation.
     * 
     */
    @InputImport(name="pgpSignedAttestation", required=true)
    private final PgpSignedAttestationResponse pgpSignedAttestation;

    public PgpSignedAttestationResponse getPgpSignedAttestation() {
        return this.pgpSignedAttestation;
    }

    public AttestationResponse(
        GenericSignedAttestationResponse genericSignedAttestation,
        PgpSignedAttestationResponse pgpSignedAttestation) {
        this.genericSignedAttestation = Objects.requireNonNull(genericSignedAttestation, "expected parameter 'genericSignedAttestation' to be non-null");
        this.pgpSignedAttestation = Objects.requireNonNull(pgpSignedAttestation, "expected parameter 'pgpSignedAttestation' to be non-null");
    }

    private AttestationResponse() {
        this.genericSignedAttestation = null;
        this.pgpSignedAttestation = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AttestationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericSignedAttestationResponse genericSignedAttestation;
        private PgpSignedAttestationResponse pgpSignedAttestation;

        public Builder() {
    	      // Empty
        }

        public Builder(AttestationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.genericSignedAttestation = defaults.genericSignedAttestation;
    	      this.pgpSignedAttestation = defaults.pgpSignedAttestation;
        }

        public Builder setGenericSignedAttestation(GenericSignedAttestationResponse genericSignedAttestation) {
            this.genericSignedAttestation = Objects.requireNonNull(genericSignedAttestation);
            return this;
        }

        public Builder setPgpSignedAttestation(PgpSignedAttestationResponse pgpSignedAttestation) {
            this.pgpSignedAttestation = Objects.requireNonNull(pgpSignedAttestation);
            return this;
        }

        public AttestationResponse build() {
            return new AttestationResponse(genericSignedAttestation, pgpSignedAttestation);
        }
    }
}
