// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.inputs.HttpHeaderActionArgs;
import io.pulumi.googlenative.compute_v1.inputs.HttpRedirectActionArgs;
import io.pulumi.googlenative.compute_v1.inputs.HttpRouteActionArgs;
import io.pulumi.googlenative.compute_v1.inputs.HttpRouteRuleArgs;
import io.pulumi.googlenative.compute_v1.inputs.PathRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PathMatcherArgs extends io.pulumi.resources.ResourceArgs {

    public static final PathMatcherArgs Empty = new PathMatcherArgs();

    @InputImport(name="defaultRouteAction")
    private final @Nullable Input<HttpRouteActionArgs> defaultRouteAction;

    public Input<HttpRouteActionArgs> getDefaultRouteAction() {
        return this.defaultRouteAction == null ? Input.empty() : this.defaultRouteAction;
    }

    @InputImport(name="defaultService")
    private final @Nullable Input<String> defaultService;

    public Input<String> getDefaultService() {
        return this.defaultService == null ? Input.empty() : this.defaultService;
    }

    @InputImport(name="defaultUrlRedirect")
    private final @Nullable Input<HttpRedirectActionArgs> defaultUrlRedirect;

    public Input<HttpRedirectActionArgs> getDefaultUrlRedirect() {
        return this.defaultUrlRedirect == null ? Input.empty() : this.defaultUrlRedirect;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="headerAction")
    private final @Nullable Input<HttpHeaderActionArgs> headerAction;

    public Input<HttpHeaderActionArgs> getHeaderAction() {
        return this.headerAction == null ? Input.empty() : this.headerAction;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="pathRules")
    private final @Nullable Input<List<PathRuleArgs>> pathRules;

    public Input<List<PathRuleArgs>> getPathRules() {
        return this.pathRules == null ? Input.empty() : this.pathRules;
    }

    @InputImport(name="routeRules")
    private final @Nullable Input<List<HttpRouteRuleArgs>> routeRules;

    public Input<List<HttpRouteRuleArgs>> getRouteRules() {
        return this.routeRules == null ? Input.empty() : this.routeRules;
    }

    public PathMatcherArgs(
        @Nullable Input<HttpRouteActionArgs> defaultRouteAction,
        @Nullable Input<String> defaultService,
        @Nullable Input<HttpRedirectActionArgs> defaultUrlRedirect,
        @Nullable Input<String> description,
        @Nullable Input<HttpHeaderActionArgs> headerAction,
        @Nullable Input<String> name,
        @Nullable Input<List<PathRuleArgs>> pathRules,
        @Nullable Input<List<HttpRouteRuleArgs>> routeRules) {
        this.defaultRouteAction = defaultRouteAction;
        this.defaultService = defaultService;
        this.defaultUrlRedirect = defaultUrlRedirect;
        this.description = description;
        this.headerAction = headerAction;
        this.name = name;
        this.pathRules = pathRules;
        this.routeRules = routeRules;
    }

    private PathMatcherArgs() {
        this.defaultRouteAction = Input.empty();
        this.defaultService = Input.empty();
        this.defaultUrlRedirect = Input.empty();
        this.description = Input.empty();
        this.headerAction = Input.empty();
        this.name = Input.empty();
        this.pathRules = Input.empty();
        this.routeRules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PathMatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<HttpRouteActionArgs> defaultRouteAction;
        private @Nullable Input<String> defaultService;
        private @Nullable Input<HttpRedirectActionArgs> defaultUrlRedirect;
        private @Nullable Input<String> description;
        private @Nullable Input<HttpHeaderActionArgs> headerAction;
        private @Nullable Input<String> name;
        private @Nullable Input<List<PathRuleArgs>> pathRules;
        private @Nullable Input<List<HttpRouteRuleArgs>> routeRules;

        public Builder() {
    	      // Empty
        }

        public Builder(PathMatcherArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultRouteAction = defaults.defaultRouteAction;
    	      this.defaultService = defaults.defaultService;
    	      this.defaultUrlRedirect = defaults.defaultUrlRedirect;
    	      this.description = defaults.description;
    	      this.headerAction = defaults.headerAction;
    	      this.name = defaults.name;
    	      this.pathRules = defaults.pathRules;
    	      this.routeRules = defaults.routeRules;
        }

        public Builder setDefaultRouteAction(@Nullable Input<HttpRouteActionArgs> defaultRouteAction) {
            this.defaultRouteAction = defaultRouteAction;
            return this;
        }

        public Builder setDefaultRouteAction(@Nullable HttpRouteActionArgs defaultRouteAction) {
            this.defaultRouteAction = Input.ofNullable(defaultRouteAction);
            return this;
        }

        public Builder setDefaultService(@Nullable Input<String> defaultService) {
            this.defaultService = defaultService;
            return this;
        }

        public Builder setDefaultService(@Nullable String defaultService) {
            this.defaultService = Input.ofNullable(defaultService);
            return this;
        }

        public Builder setDefaultUrlRedirect(@Nullable Input<HttpRedirectActionArgs> defaultUrlRedirect) {
            this.defaultUrlRedirect = defaultUrlRedirect;
            return this;
        }

        public Builder setDefaultUrlRedirect(@Nullable HttpRedirectActionArgs defaultUrlRedirect) {
            this.defaultUrlRedirect = Input.ofNullable(defaultUrlRedirect);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setHeaderAction(@Nullable Input<HttpHeaderActionArgs> headerAction) {
            this.headerAction = headerAction;
            return this;
        }

        public Builder setHeaderAction(@Nullable HttpHeaderActionArgs headerAction) {
            this.headerAction = Input.ofNullable(headerAction);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPathRules(@Nullable Input<List<PathRuleArgs>> pathRules) {
            this.pathRules = pathRules;
            return this;
        }

        public Builder setPathRules(@Nullable List<PathRuleArgs> pathRules) {
            this.pathRules = Input.ofNullable(pathRules);
            return this;
        }

        public Builder setRouteRules(@Nullable Input<List<HttpRouteRuleArgs>> routeRules) {
            this.routeRules = routeRules;
            return this;
        }

        public Builder setRouteRules(@Nullable List<HttpRouteRuleArgs> routeRules) {
            this.routeRules = Input.ofNullable(routeRules);
            return this;
        }

        public PathMatcherArgs build() {
            return new PathMatcherArgs(defaultRouteAction, defaultService, defaultUrlRedirect, description, headerAction, name, pathRules, routeRules);
        }
    }
}
