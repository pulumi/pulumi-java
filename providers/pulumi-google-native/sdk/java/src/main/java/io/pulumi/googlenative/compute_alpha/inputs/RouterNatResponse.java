// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.inputs.RouterNatLogConfigResponse;
import io.pulumi.googlenative.compute_alpha.inputs.RouterNatRuleResponse;
import io.pulumi.googlenative.compute_alpha.inputs.RouterNatSubnetworkToNatResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RouterNatResponse extends io.pulumi.resources.InvokeArgs {

    public static final RouterNatResponse Empty = new RouterNatResponse();

    @InputImport(name="drainNatIps", required=true)
    private final List<String> drainNatIps;

    public List<String> getDrainNatIps() {
        return this.drainNatIps;
    }

    @InputImport(name="enableDynamicPortAllocation", required=true)
    private final Boolean enableDynamicPortAllocation;

    public Boolean getEnableDynamicPortAllocation() {
        return this.enableDynamicPortAllocation;
    }

    @InputImport(name="enableEndpointIndependentMapping", required=true)
    private final Boolean enableEndpointIndependentMapping;

    public Boolean getEnableEndpointIndependentMapping() {
        return this.enableEndpointIndependentMapping;
    }

    @InputImport(name="icmpIdleTimeoutSec", required=true)
    private final Integer icmpIdleTimeoutSec;

    public Integer getIcmpIdleTimeoutSec() {
        return this.icmpIdleTimeoutSec;
    }

    @InputImport(name="logConfig", required=true)
    private final RouterNatLogConfigResponse logConfig;

    public RouterNatLogConfigResponse getLogConfig() {
        return this.logConfig;
    }

    @InputImport(name="maxPortsPerVm", required=true)
    private final Integer maxPortsPerVm;

    public Integer getMaxPortsPerVm() {
        return this.maxPortsPerVm;
    }

    @InputImport(name="minPortsPerVm", required=true)
    private final Integer minPortsPerVm;

    public Integer getMinPortsPerVm() {
        return this.minPortsPerVm;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="natIpAllocateOption", required=true)
    private final String natIpAllocateOption;

    public String getNatIpAllocateOption() {
        return this.natIpAllocateOption;
    }

    @InputImport(name="natIps", required=true)
    private final List<String> natIps;

    public List<String> getNatIps() {
        return this.natIps;
    }

    @InputImport(name="rules", required=true)
    private final List<RouterNatRuleResponse> rules;

    public List<RouterNatRuleResponse> getRules() {
        return this.rules;
    }

    @InputImport(name="sourceSubnetworkIpRangesToNat", required=true)
    private final String sourceSubnetworkIpRangesToNat;

    public String getSourceSubnetworkIpRangesToNat() {
        return this.sourceSubnetworkIpRangesToNat;
    }

    @InputImport(name="subnetworks", required=true)
    private final List<RouterNatSubnetworkToNatResponse> subnetworks;

    public List<RouterNatSubnetworkToNatResponse> getSubnetworks() {
        return this.subnetworks;
    }

    @InputImport(name="tcpEstablishedIdleTimeoutSec", required=true)
    private final Integer tcpEstablishedIdleTimeoutSec;

    public Integer getTcpEstablishedIdleTimeoutSec() {
        return this.tcpEstablishedIdleTimeoutSec;
    }

    @InputImport(name="tcpTimeWaitTimeoutSec", required=true)
    private final Integer tcpTimeWaitTimeoutSec;

    public Integer getTcpTimeWaitTimeoutSec() {
        return this.tcpTimeWaitTimeoutSec;
    }

    @InputImport(name="tcpTransitoryIdleTimeoutSec", required=true)
    private final Integer tcpTransitoryIdleTimeoutSec;

    public Integer getTcpTransitoryIdleTimeoutSec() {
        return this.tcpTransitoryIdleTimeoutSec;
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    @InputImport(name="udpIdleTimeoutSec", required=true)
    private final Integer udpIdleTimeoutSec;

    public Integer getUdpIdleTimeoutSec() {
        return this.udpIdleTimeoutSec;
    }

    public RouterNatResponse(
        List<String> drainNatIps,
        Boolean enableDynamicPortAllocation,
        Boolean enableEndpointIndependentMapping,
        Integer icmpIdleTimeoutSec,
        RouterNatLogConfigResponse logConfig,
        Integer maxPortsPerVm,
        Integer minPortsPerVm,
        String name,
        String natIpAllocateOption,
        List<String> natIps,
        List<RouterNatRuleResponse> rules,
        String sourceSubnetworkIpRangesToNat,
        List<RouterNatSubnetworkToNatResponse> subnetworks,
        Integer tcpEstablishedIdleTimeoutSec,
        Integer tcpTimeWaitTimeoutSec,
        Integer tcpTransitoryIdleTimeoutSec,
        String type,
        Integer udpIdleTimeoutSec) {
        this.drainNatIps = Objects.requireNonNull(drainNatIps, "expected parameter 'drainNatIps' to be non-null");
        this.enableDynamicPortAllocation = Objects.requireNonNull(enableDynamicPortAllocation, "expected parameter 'enableDynamicPortAllocation' to be non-null");
        this.enableEndpointIndependentMapping = Objects.requireNonNull(enableEndpointIndependentMapping, "expected parameter 'enableEndpointIndependentMapping' to be non-null");
        this.icmpIdleTimeoutSec = Objects.requireNonNull(icmpIdleTimeoutSec, "expected parameter 'icmpIdleTimeoutSec' to be non-null");
        this.logConfig = Objects.requireNonNull(logConfig, "expected parameter 'logConfig' to be non-null");
        this.maxPortsPerVm = Objects.requireNonNull(maxPortsPerVm, "expected parameter 'maxPortsPerVm' to be non-null");
        this.minPortsPerVm = Objects.requireNonNull(minPortsPerVm, "expected parameter 'minPortsPerVm' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.natIpAllocateOption = Objects.requireNonNull(natIpAllocateOption, "expected parameter 'natIpAllocateOption' to be non-null");
        this.natIps = Objects.requireNonNull(natIps, "expected parameter 'natIps' to be non-null");
        this.rules = Objects.requireNonNull(rules, "expected parameter 'rules' to be non-null");
        this.sourceSubnetworkIpRangesToNat = Objects.requireNonNull(sourceSubnetworkIpRangesToNat, "expected parameter 'sourceSubnetworkIpRangesToNat' to be non-null");
        this.subnetworks = Objects.requireNonNull(subnetworks, "expected parameter 'subnetworks' to be non-null");
        this.tcpEstablishedIdleTimeoutSec = Objects.requireNonNull(tcpEstablishedIdleTimeoutSec, "expected parameter 'tcpEstablishedIdleTimeoutSec' to be non-null");
        this.tcpTimeWaitTimeoutSec = Objects.requireNonNull(tcpTimeWaitTimeoutSec, "expected parameter 'tcpTimeWaitTimeoutSec' to be non-null");
        this.tcpTransitoryIdleTimeoutSec = Objects.requireNonNull(tcpTransitoryIdleTimeoutSec, "expected parameter 'tcpTransitoryIdleTimeoutSec' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.udpIdleTimeoutSec = Objects.requireNonNull(udpIdleTimeoutSec, "expected parameter 'udpIdleTimeoutSec' to be non-null");
    }

    private RouterNatResponse() {
        this.drainNatIps = List.of();
        this.enableDynamicPortAllocation = null;
        this.enableEndpointIndependentMapping = null;
        this.icmpIdleTimeoutSec = null;
        this.logConfig = null;
        this.maxPortsPerVm = null;
        this.minPortsPerVm = null;
        this.name = null;
        this.natIpAllocateOption = null;
        this.natIps = List.of();
        this.rules = List.of();
        this.sourceSubnetworkIpRangesToNat = null;
        this.subnetworks = List.of();
        this.tcpEstablishedIdleTimeoutSec = null;
        this.tcpTimeWaitTimeoutSec = null;
        this.tcpTransitoryIdleTimeoutSec = null;
        this.type = null;
        this.udpIdleTimeoutSec = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterNatResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> drainNatIps;
        private Boolean enableDynamicPortAllocation;
        private Boolean enableEndpointIndependentMapping;
        private Integer icmpIdleTimeoutSec;
        private RouterNatLogConfigResponse logConfig;
        private Integer maxPortsPerVm;
        private Integer minPortsPerVm;
        private String name;
        private String natIpAllocateOption;
        private List<String> natIps;
        private List<RouterNatRuleResponse> rules;
        private String sourceSubnetworkIpRangesToNat;
        private List<RouterNatSubnetworkToNatResponse> subnetworks;
        private Integer tcpEstablishedIdleTimeoutSec;
        private Integer tcpTimeWaitTimeoutSec;
        private Integer tcpTransitoryIdleTimeoutSec;
        private String type;
        private Integer udpIdleTimeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterNatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.drainNatIps = defaults.drainNatIps;
    	      this.enableDynamicPortAllocation = defaults.enableDynamicPortAllocation;
    	      this.enableEndpointIndependentMapping = defaults.enableEndpointIndependentMapping;
    	      this.icmpIdleTimeoutSec = defaults.icmpIdleTimeoutSec;
    	      this.logConfig = defaults.logConfig;
    	      this.maxPortsPerVm = defaults.maxPortsPerVm;
    	      this.minPortsPerVm = defaults.minPortsPerVm;
    	      this.name = defaults.name;
    	      this.natIpAllocateOption = defaults.natIpAllocateOption;
    	      this.natIps = defaults.natIps;
    	      this.rules = defaults.rules;
    	      this.sourceSubnetworkIpRangesToNat = defaults.sourceSubnetworkIpRangesToNat;
    	      this.subnetworks = defaults.subnetworks;
    	      this.tcpEstablishedIdleTimeoutSec = defaults.tcpEstablishedIdleTimeoutSec;
    	      this.tcpTimeWaitTimeoutSec = defaults.tcpTimeWaitTimeoutSec;
    	      this.tcpTransitoryIdleTimeoutSec = defaults.tcpTransitoryIdleTimeoutSec;
    	      this.type = defaults.type;
    	      this.udpIdleTimeoutSec = defaults.udpIdleTimeoutSec;
        }

        public Builder setDrainNatIps(List<String> drainNatIps) {
            this.drainNatIps = Objects.requireNonNull(drainNatIps);
            return this;
        }

        public Builder setEnableDynamicPortAllocation(Boolean enableDynamicPortAllocation) {
            this.enableDynamicPortAllocation = Objects.requireNonNull(enableDynamicPortAllocation);
            return this;
        }

        public Builder setEnableEndpointIndependentMapping(Boolean enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = Objects.requireNonNull(enableEndpointIndependentMapping);
            return this;
        }

        public Builder setIcmpIdleTimeoutSec(Integer icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = Objects.requireNonNull(icmpIdleTimeoutSec);
            return this;
        }

        public Builder setLogConfig(RouterNatLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }

        public Builder setMaxPortsPerVm(Integer maxPortsPerVm) {
            this.maxPortsPerVm = Objects.requireNonNull(maxPortsPerVm);
            return this;
        }

        public Builder setMinPortsPerVm(Integer minPortsPerVm) {
            this.minPortsPerVm = Objects.requireNonNull(minPortsPerVm);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNatIpAllocateOption(String natIpAllocateOption) {
            this.natIpAllocateOption = Objects.requireNonNull(natIpAllocateOption);
            return this;
        }

        public Builder setNatIps(List<String> natIps) {
            this.natIps = Objects.requireNonNull(natIps);
            return this;
        }

        public Builder setRules(List<RouterNatRuleResponse> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }

        public Builder setSourceSubnetworkIpRangesToNat(String sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = Objects.requireNonNull(sourceSubnetworkIpRangesToNat);
            return this;
        }

        public Builder setSubnetworks(List<RouterNatSubnetworkToNatResponse> subnetworks) {
            this.subnetworks = Objects.requireNonNull(subnetworks);
            return this;
        }

        public Builder setTcpEstablishedIdleTimeoutSec(Integer tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = Objects.requireNonNull(tcpEstablishedIdleTimeoutSec);
            return this;
        }

        public Builder setTcpTimeWaitTimeoutSec(Integer tcpTimeWaitTimeoutSec) {
            this.tcpTimeWaitTimeoutSec = Objects.requireNonNull(tcpTimeWaitTimeoutSec);
            return this;
        }

        public Builder setTcpTransitoryIdleTimeoutSec(Integer tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = Objects.requireNonNull(tcpTransitoryIdleTimeoutSec);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUdpIdleTimeoutSec(Integer udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = Objects.requireNonNull(udpIdleTimeoutSec);
            return this;
        }

        public RouterNatResponse build() {
            return new RouterNatResponse(drainNatIps, enableDynamicPortAllocation, enableEndpointIndependentMapping, icmpIdleTimeoutSec, logConfig, maxPortsPerVm, minPortsPerVm, name, natIpAllocateOption, natIps, rules, sourceSubnetworkIpRangesToNat, subnetworks, tcpEstablishedIdleTimeoutSec, tcpTimeWaitTimeoutSec, tcpTransitoryIdleTimeoutSec, type, udpIdleTimeoutSec);
        }
    }
}
