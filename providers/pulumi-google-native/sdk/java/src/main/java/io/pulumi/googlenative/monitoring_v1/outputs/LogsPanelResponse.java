// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class LogsPanelResponse {
    /**
     * A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
     * 
     */
    private final String filter;
    /**
     * The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.
     * 
     */
    private final List<String> resourceNames;

    @OutputCustomType.Constructor
    private LogsPanelResponse(
        @OutputCustomType.Parameter("filter") String filter,
        @OutputCustomType.Parameter("resourceNames") List<String> resourceNames) {
        this.filter = filter;
        this.resourceNames = resourceNames;
    }

    /**
     * A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
     * 
    */
    public String getFilter() {
        return this.filter;
    }
    /**
     * The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.
     * 
    */
    public List<String> getResourceNames() {
        return this.resourceNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogsPanelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String filter;
        private List<String> resourceNames;

        public Builder() {
    	      // Empty
        }

        public Builder(LogsPanelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.resourceNames = defaults.resourceNames;
        }

        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder resourceNames(List<String> resourceNames) {
            this.resourceNames = Objects.requireNonNull(resourceNames);
            return this;
        }
        public LogsPanelResponse build() {
            return new LogsPanelResponse(filter, resourceNames);
        }
    }
}
