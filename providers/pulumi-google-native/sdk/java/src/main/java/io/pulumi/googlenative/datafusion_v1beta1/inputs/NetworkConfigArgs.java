// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datafusion_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Network configuration for a Data Fusion instance. These configurations are used for peering with the customer network. Configurations are optional when a public Data Fusion instance is to be created. However, providing these configurations allows several benefits, such as reduced network latency while accessing the customer resources from managed Data Fusion instance nodes, as well as access to the customer on-prem resources.
 * 
 */
public final class NetworkConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkConfigArgs Empty = new NetworkConfigArgs();

    /**
     * The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
     * 
     */
    @InputImport(name="ipAllocation")
      private final @Nullable Input<String> ipAllocation;

    public Input<String> getIpAllocation() {
        return this.ipAllocation == null ? Input.empty() : this.ipAllocation;
    }

    /**
     * Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
     * 
     */
    @InputImport(name="network")
      private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    public NetworkConfigArgs(
        @Nullable Input<String> ipAllocation,
        @Nullable Input<String> network) {
        this.ipAllocation = ipAllocation;
        this.network = network;
    }

    private NetworkConfigArgs() {
        this.ipAllocation = Input.empty();
        this.network = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> ipAllocation;
        private @Nullable Input<String> network;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAllocation = defaults.ipAllocation;
    	      this.network = defaults.network;
        }

        public Builder setIpAllocation(@Nullable Input<String> ipAllocation) {
            this.ipAllocation = ipAllocation;
            return this;
        }

        public Builder setIpAllocation(@Nullable String ipAllocation) {
            this.ipAllocation = Input.ofNullable(ipAllocation);
            return this;
        }

        public Builder setNetwork(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }
        public NetworkConfigArgs build() {
            return new NetworkConfigArgs(ipAllocation, network);
        }
    }
}
