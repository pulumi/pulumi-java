// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datalabeling_v1beta1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.datalabeling_v1beta1.inputs.GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EvaluationJobArgs extends io.pulumi.resources.ResourceArgs {

    public static final EvaluationJobArgs Empty = new EvaluationJobArgs();

    /**
     * Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: "projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}"
     * 
     */
    @InputImport(name="annotationSpecSet", required=true)
      private final Input<String> annotationSpecSet;

    public Input<String> getAnnotationSpecSet() {
        return this.annotationSpecSet;
    }

    /**
     * Description of the job. The description can be up to 25,000 characters long.
     * 
     */
    @InputImport(name="description", required=true)
      private final Input<String> description;

    public Input<String> getDescription() {
        return this.description;
    }

    /**
     * Configuration details for the evaluation job.
     * 
     */
    @InputImport(name="evaluationJobConfig", required=true)
      private final Input<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig;

    public Input<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> getEvaluationJobConfig() {
        return this.evaluationJobConfig;
    }

    /**
     * Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.
     * 
     */
    @InputImport(name="labelMissingGroundTruth", required=true)
      private final Input<Boolean> labelMissingGroundTruth;

    public Input<Boolean> getLabelMissingGroundTruth() {
        return this.labelMissingGroundTruth;
    }

    /**
     * The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: "projects/{project_id}/models/{model_name}/versions/{version_name}" There can only be one evaluation job per model version.
     * 
     */
    @InputImport(name="modelVersion", required=true)
      private final Input<String> modelVersion;

    public Input<String> getModelVersion() {
        return this.modelVersion;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
     * 
     */
    @InputImport(name="schedule", required=true)
      private final Input<String> schedule;

    public Input<String> getSchedule() {
        return this.schedule;
    }

    public EvaluationJobArgs(
        Input<String> annotationSpecSet,
        Input<String> description,
        Input<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig,
        Input<Boolean> labelMissingGroundTruth,
        Input<String> modelVersion,
        @Nullable Input<String> project,
        Input<String> schedule) {
        this.annotationSpecSet = Objects.requireNonNull(annotationSpecSet, "expected parameter 'annotationSpecSet' to be non-null");
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.evaluationJobConfig = Objects.requireNonNull(evaluationJobConfig, "expected parameter 'evaluationJobConfig' to be non-null");
        this.labelMissingGroundTruth = Objects.requireNonNull(labelMissingGroundTruth, "expected parameter 'labelMissingGroundTruth' to be non-null");
        this.modelVersion = Objects.requireNonNull(modelVersion, "expected parameter 'modelVersion' to be non-null");
        this.project = project;
        this.schedule = Objects.requireNonNull(schedule, "expected parameter 'schedule' to be non-null");
    }

    private EvaluationJobArgs() {
        this.annotationSpecSet = Input.empty();
        this.description = Input.empty();
        this.evaluationJobConfig = Input.empty();
        this.labelMissingGroundTruth = Input.empty();
        this.modelVersion = Input.empty();
        this.project = Input.empty();
        this.schedule = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EvaluationJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> annotationSpecSet;
        private Input<String> description;
        private Input<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig;
        private Input<Boolean> labelMissingGroundTruth;
        private Input<String> modelVersion;
        private @Nullable Input<String> project;
        private Input<String> schedule;

        public Builder() {
    	      // Empty
        }

        public Builder(EvaluationJobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotationSpecSet = defaults.annotationSpecSet;
    	      this.description = defaults.description;
    	      this.evaluationJobConfig = defaults.evaluationJobConfig;
    	      this.labelMissingGroundTruth = defaults.labelMissingGroundTruth;
    	      this.modelVersion = defaults.modelVersion;
    	      this.project = defaults.project;
    	      this.schedule = defaults.schedule;
        }

        public Builder setAnnotationSpecSet(Input<String> annotationSpecSet) {
            this.annotationSpecSet = Objects.requireNonNull(annotationSpecSet);
            return this;
        }

        public Builder setAnnotationSpecSet(String annotationSpecSet) {
            this.annotationSpecSet = Input.of(Objects.requireNonNull(annotationSpecSet));
            return this;
        }

        public Builder setDescription(Input<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Input.of(Objects.requireNonNull(description));
            return this;
        }

        public Builder setEvaluationJobConfig(Input<GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs> evaluationJobConfig) {
            this.evaluationJobConfig = Objects.requireNonNull(evaluationJobConfig);
            return this;
        }

        public Builder setEvaluationJobConfig(GoogleCloudDatalabelingV1beta1EvaluationJobConfigArgs evaluationJobConfig) {
            this.evaluationJobConfig = Input.of(Objects.requireNonNull(evaluationJobConfig));
            return this;
        }

        public Builder setLabelMissingGroundTruth(Input<Boolean> labelMissingGroundTruth) {
            this.labelMissingGroundTruth = Objects.requireNonNull(labelMissingGroundTruth);
            return this;
        }

        public Builder setLabelMissingGroundTruth(Boolean labelMissingGroundTruth) {
            this.labelMissingGroundTruth = Input.of(Objects.requireNonNull(labelMissingGroundTruth));
            return this;
        }

        public Builder setModelVersion(Input<String> modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }

        public Builder setModelVersion(String modelVersion) {
            this.modelVersion = Input.of(Objects.requireNonNull(modelVersion));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSchedule(Input<String> schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }

        public Builder setSchedule(String schedule) {
            this.schedule = Input.of(Objects.requireNonNull(schedule));
            return this;
        }
        public EvaluationJobArgs build() {
            return new EvaluationJobArgs(annotationSpecSet, description, evaluationJobConfig, labelMissingGroundTruth, modelVersion, project, schedule);
        }
    }
}
