// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storagetransfer_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.storagetransfer_v1.inputs.MetadataOptionsResponse;
import java.lang.Boolean;
import java.util.Objects;


/**
 * TransferOptions define the actions to be performed on objects in a transfer.
 * 
 */
public final class TransferOptionsResponse extends io.pulumi.resources.InvokeArgs {

    public static final TransferOptionsResponse Empty = new TransferOptionsResponse();

    /**
     * Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    @InputImport(name="deleteObjectsFromSourceAfterTransfer", required=true)
      private final Boolean deleteObjectsFromSourceAfterTransfer;

    public Boolean getDeleteObjectsFromSourceAfterTransfer() {
        return this.deleteObjectsFromSourceAfterTransfer;
    }

    /**
     * Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    @InputImport(name="deleteObjectsUniqueInSink", required=true)
      private final Boolean deleteObjectsUniqueInSink;

    public Boolean getDeleteObjectsUniqueInSink() {
        return this.deleteObjectsUniqueInSink;
    }

    /**
     * Represents the selected metadata options for a transfer job.
     * 
     */
    @InputImport(name="metadataOptions", required=true)
      private final MetadataOptionsResponse metadataOptions;

    public MetadataOptionsResponse getMetadataOptions() {
        return this.metadataOptions;
    }

    /**
     * When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    @InputImport(name="overwriteObjectsAlreadyExistingInSink", required=true)
      private final Boolean overwriteObjectsAlreadyExistingInSink;

    public Boolean getOverwriteObjectsAlreadyExistingInSink() {
        return this.overwriteObjectsAlreadyExistingInSink;
    }

    public TransferOptionsResponse(
        Boolean deleteObjectsFromSourceAfterTransfer,
        Boolean deleteObjectsUniqueInSink,
        MetadataOptionsResponse metadataOptions,
        Boolean overwriteObjectsAlreadyExistingInSink) {
        this.deleteObjectsFromSourceAfterTransfer = Objects.requireNonNull(deleteObjectsFromSourceAfterTransfer, "expected parameter 'deleteObjectsFromSourceAfterTransfer' to be non-null");
        this.deleteObjectsUniqueInSink = Objects.requireNonNull(deleteObjectsUniqueInSink, "expected parameter 'deleteObjectsUniqueInSink' to be non-null");
        this.metadataOptions = Objects.requireNonNull(metadataOptions, "expected parameter 'metadataOptions' to be non-null");
        this.overwriteObjectsAlreadyExistingInSink = Objects.requireNonNull(overwriteObjectsAlreadyExistingInSink, "expected parameter 'overwriteObjectsAlreadyExistingInSink' to be non-null");
    }

    private TransferOptionsResponse() {
        this.deleteObjectsFromSourceAfterTransfer = null;
        this.deleteObjectsUniqueInSink = null;
        this.metadataOptions = null;
        this.overwriteObjectsAlreadyExistingInSink = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean deleteObjectsFromSourceAfterTransfer;
        private Boolean deleteObjectsUniqueInSink;
        private MetadataOptionsResponse metadataOptions;
        private Boolean overwriteObjectsAlreadyExistingInSink;

        public Builder() {
    	      // Empty
        }

        public Builder(TransferOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteObjectsFromSourceAfterTransfer = defaults.deleteObjectsFromSourceAfterTransfer;
    	      this.deleteObjectsUniqueInSink = defaults.deleteObjectsUniqueInSink;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.overwriteObjectsAlreadyExistingInSink = defaults.overwriteObjectsAlreadyExistingInSink;
        }

        public Builder deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
            this.deleteObjectsFromSourceAfterTransfer = Objects.requireNonNull(deleteObjectsFromSourceAfterTransfer);
            return this;
        }

        public Builder deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
            this.deleteObjectsUniqueInSink = Objects.requireNonNull(deleteObjectsUniqueInSink);
            return this;
        }

        public Builder metadataOptions(MetadataOptionsResponse metadataOptions) {
            this.metadataOptions = Objects.requireNonNull(metadataOptions);
            return this;
        }

        public Builder overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
            this.overwriteObjectsAlreadyExistingInSink = Objects.requireNonNull(overwriteObjectsAlreadyExistingInSink);
            return this;
        }
        public TransferOptionsResponse build() {
            return new TransferOptionsResponse(deleteObjectsFromSourceAfterTransfer, deleteObjectsUniqueInSink, metadataOptions, overwriteObjectsAlreadyExistingInSink);
        }
    }
}
