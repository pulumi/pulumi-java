// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.UsageRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration controlling usage of a service.
 * 
 */
public final class UsageArgs extends io.pulumi.resources.ResourceArgs {

    public static final UsageArgs Empty = new UsageArgs();

    /**
     * The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
     * 
     */
    @InputImport(name="producerNotificationChannel")
      private final @Nullable Input<String> producerNotificationChannel;

    public Input<String> getProducerNotificationChannel() {
        return this.producerNotificationChannel == null ? Input.empty() : this.producerNotificationChannel;
    }

    /**
     * Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
     * 
     */
    @InputImport(name="requirements")
      private final @Nullable Input<List<String>> requirements;

    public Input<List<String>> getRequirements() {
        return this.requirements == null ? Input.empty() : this.requirements;
    }

    /**
     * A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
     * 
     */
    @InputImport(name="rules")
      private final @Nullable Input<List<UsageRuleArgs>> rules;

    public Input<List<UsageRuleArgs>> getRules() {
        return this.rules == null ? Input.empty() : this.rules;
    }

    public UsageArgs(
        @Nullable Input<String> producerNotificationChannel,
        @Nullable Input<List<String>> requirements,
        @Nullable Input<List<UsageRuleArgs>> rules) {
        this.producerNotificationChannel = producerNotificationChannel;
        this.requirements = requirements;
        this.rules = rules;
    }

    private UsageArgs() {
        this.producerNotificationChannel = Input.empty();
        this.requirements = Input.empty();
        this.rules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UsageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> producerNotificationChannel;
        private @Nullable Input<List<String>> requirements;
        private @Nullable Input<List<UsageRuleArgs>> rules;

        public Builder() {
    	      // Empty
        }

        public Builder(UsageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.producerNotificationChannel = defaults.producerNotificationChannel;
    	      this.requirements = defaults.requirements;
    	      this.rules = defaults.rules;
        }

        public Builder setProducerNotificationChannel(@Nullable Input<String> producerNotificationChannel) {
            this.producerNotificationChannel = producerNotificationChannel;
            return this;
        }

        public Builder setProducerNotificationChannel(@Nullable String producerNotificationChannel) {
            this.producerNotificationChannel = Input.ofNullable(producerNotificationChannel);
            return this;
        }

        public Builder setRequirements(@Nullable Input<List<String>> requirements) {
            this.requirements = requirements;
            return this;
        }

        public Builder setRequirements(@Nullable List<String> requirements) {
            this.requirements = Input.ofNullable(requirements);
            return this;
        }

        public Builder setRules(@Nullable Input<List<UsageRuleArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder setRules(@Nullable List<UsageRuleArgs> rules) {
            this.rules = Input.ofNullable(rules);
            return this;
        }
        public UsageArgs build() {
            return new UsageArgs(producerNotificationChannel, requirements, rules);
        }
    }
}
