// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.apigee_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResourcefileArgs extends io.pulumi.resources.ResourceArgs {

    public static final ResourcefileArgs Empty = new ResourcefileArgs();

    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     * 
     */
    @Import(name="contentType")
      private final @Nullable Output<String> contentType;

    public Output<String> getContentType() {
        return this.contentType == null ? Output.empty() : this.contentType;
    }

    /**
     * The HTTP request/response body as raw binary.
     * 
     */
    @Import(name="data")
      private final @Nullable Output<String> data;

    public Output<String> getData() {
        return this.data == null ? Output.empty() : this.data;
    }

    @Import(name="environmentId", required=true)
      private final Output<String> environmentId;

    public Output<String> getEnvironmentId() {
        return this.environmentId;
    }

    /**
     * Application specific response metadata. Must be set in the first response for streaming APIs.
     * 
     */
    @Import(name="extensions")
      private final @Nullable Output<List<Map<String,String>>> extensions;

    public Output<List<Map<String,String>>> getExtensions() {
        return this.extensions == null ? Output.empty() : this.extensions;
    }

    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="organizationId", required=true)
      private final Output<String> organizationId;

    public Output<String> getOrganizationId() {
        return this.organizationId;
    }

    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public ResourcefileArgs(
        @Nullable Output<String> contentType,
        @Nullable Output<String> data,
        Output<String> environmentId,
        @Nullable Output<List<Map<String,String>>> extensions,
        @Nullable Output<String> name,
        Output<String> organizationId,
        Output<String> type) {
        this.contentType = contentType;
        this.data = data;
        this.environmentId = Objects.requireNonNull(environmentId, "expected parameter 'environmentId' to be non-null");
        this.extensions = extensions;
        this.name = name;
        this.organizationId = Objects.requireNonNull(organizationId, "expected parameter 'organizationId' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ResourcefileArgs() {
        this.contentType = Output.empty();
        this.data = Output.empty();
        this.environmentId = Output.empty();
        this.extensions = Output.empty();
        this.name = Output.empty();
        this.organizationId = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourcefileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> contentType;
        private @Nullable Output<String> data;
        private Output<String> environmentId;
        private @Nullable Output<List<Map<String,String>>> extensions;
        private @Nullable Output<String> name;
        private Output<String> organizationId;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourcefileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.data = defaults.data;
    	      this.environmentId = defaults.environmentId;
    	      this.extensions = defaults.extensions;
    	      this.name = defaults.name;
    	      this.organizationId = defaults.organizationId;
    	      this.type = defaults.type;
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            this.contentType = contentType;
            return this;
        }
        public Builder contentType(@Nullable String contentType) {
            this.contentType = Output.ofNullable(contentType);
            return this;
        }
        public Builder data(@Nullable Output<String> data) {
            this.data = data;
            return this;
        }
        public Builder data(@Nullable String data) {
            this.data = Output.ofNullable(data);
            return this;
        }
        public Builder environmentId(Output<String> environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId);
            return this;
        }
        public Builder environmentId(String environmentId) {
            this.environmentId = Output.of(Objects.requireNonNull(environmentId));
            return this;
        }
        public Builder extensions(@Nullable Output<List<Map<String,String>>> extensions) {
            this.extensions = extensions;
            return this;
        }
        public Builder extensions(@Nullable List<Map<String,String>> extensions) {
            this.extensions = Output.ofNullable(extensions);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder organizationId(Output<String> organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        public Builder organizationId(String organizationId) {
            this.organizationId = Output.of(Objects.requireNonNull(organizationId));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ResourcefileArgs build() {
            return new ResourcefileArgs(contentType, data, environmentId, extensions, name, organizationId, type);
        }
    }
}
