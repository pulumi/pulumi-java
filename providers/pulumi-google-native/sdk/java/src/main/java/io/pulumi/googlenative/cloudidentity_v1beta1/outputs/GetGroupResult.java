// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudidentity_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudidentity_v1beta1.outputs.DynamicGroupMetadataResponse;
import io.pulumi.googlenative.cloudidentity_v1beta1.outputs.EntityKeyResponse;
import io.pulumi.googlenative.cloudidentity_v1beta1.outputs.PosixGroupResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetGroupResult {
    /**
     * Additional entity key aliases for a Group.
     * 
     */
    private final List<EntityKeyResponse> additionalGroupKeys;
    /**
     * The time when the `Group` was created.
     * 
     */
    private final String createTime;
    /**
     * An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
     * 
     */
    private final String description;
    /**
     * The display name of the `Group`.
     * 
     */
    private final String displayName;
    /**
     * Optional. Dynamic group metadata like queries and status.
     * 
     */
    private final DynamicGroupMetadataResponse dynamicGroupMetadata;
    /**
     * The `EntityKey` of the `Group`.
     * 
     */
    private final EntityKeyResponse groupKey;
    /**
     * One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.
     * 
     */
    private final String name;
    /**
     * Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source_id}` for external- identity-mapped groups or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with "C" (for example, 'C046psxkn').
     * 
     */
    private final String parent;
    /**
     * Optional. The POSIX groups associated with the `Group`.
     * 
     */
    private final List<PosixGroupResponse> posixGroups;
    /**
     * The time when the `Group` was last updated.
     * 
     */
    private final String updateTime;

    @OutputCustomType.Constructor({"additionalGroupKeys","createTime","description","displayName","dynamicGroupMetadata","groupKey","labels","name","parent","posixGroups","updateTime"})
    private GetGroupResult(
        List<EntityKeyResponse> additionalGroupKeys,
        String createTime,
        String description,
        String displayName,
        DynamicGroupMetadataResponse dynamicGroupMetadata,
        EntityKeyResponse groupKey,
        Map<String,String> labels,
        String name,
        String parent,
        List<PosixGroupResponse> posixGroups,
        String updateTime) {
        this.additionalGroupKeys = Objects.requireNonNull(additionalGroupKeys);
        this.createTime = Objects.requireNonNull(createTime);
        this.description = Objects.requireNonNull(description);
        this.displayName = Objects.requireNonNull(displayName);
        this.dynamicGroupMetadata = Objects.requireNonNull(dynamicGroupMetadata);
        this.groupKey = Objects.requireNonNull(groupKey);
        this.labels = Objects.requireNonNull(labels);
        this.name = Objects.requireNonNull(name);
        this.parent = Objects.requireNonNull(parent);
        this.posixGroups = Objects.requireNonNull(posixGroups);
        this.updateTime = Objects.requireNonNull(updateTime);
    }

    /**
     * Additional entity key aliases for a Group.
     * 
    */
    public List<EntityKeyResponse> getAdditionalGroupKeys() {
        return this.additionalGroupKeys;
    }
    /**
     * The time when the `Group` was created.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * The display name of the `Group`.
     * 
    */
    public String getDisplayName() {
        return this.displayName;
    }
    /**
     * Optional. Dynamic group metadata like queries and status.
     * 
    */
    public DynamicGroupMetadataResponse getDynamicGroupMetadata() {
        return this.dynamicGroupMetadata;
    }
    /**
     * The `EntityKey` of the `Group`.
     * 
    */
    public EntityKeyResponse getGroupKey() {
        return this.groupKey;
    }
    /**
     * One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source_id}` for external- identity-mapped groups or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with "C" (for example, 'C046psxkn').
     * 
    */
    public String getParent() {
        return this.parent;
    }
    /**
     * Optional. The POSIX groups associated with the `Group`.
     * 
    */
    public List<PosixGroupResponse> getPosixGroups() {
        return this.posixGroups;
    }
    /**
     * The time when the `Group` was last updated.
     * 
    */
    public String getUpdateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<EntityKeyResponse> additionalGroupKeys;
        private String createTime;
        private String description;
        private String displayName;
        private DynamicGroupMetadataResponse dynamicGroupMetadata;
        private EntityKeyResponse groupKey;
        private Map<String,String> labels;
        private String name;
        private String parent;
        private List<PosixGroupResponse> posixGroups;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalGroupKeys = defaults.additionalGroupKeys;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.dynamicGroupMetadata = defaults.dynamicGroupMetadata;
    	      this.groupKey = defaults.groupKey;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.posixGroups = defaults.posixGroups;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder setAdditionalGroupKeys(List<EntityKeyResponse> additionalGroupKeys) {
            this.additionalGroupKeys = Objects.requireNonNull(additionalGroupKeys);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setDynamicGroupMetadata(DynamicGroupMetadataResponse dynamicGroupMetadata) {
            this.dynamicGroupMetadata = Objects.requireNonNull(dynamicGroupMetadata);
            return this;
        }

        public Builder setGroupKey(EntityKeyResponse groupKey) {
            this.groupKey = Objects.requireNonNull(groupKey);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setParent(String parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }

        public Builder setPosixGroups(List<PosixGroupResponse> posixGroups) {
            this.posixGroups = Objects.requireNonNull(posixGroups);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetGroupResult build() {
            return new GetGroupResult(additionalGroupKeys, createTime, description, displayName, dynamicGroupMetadata, groupKey, labels, name, parent, posixGroups, updateTime);
        }
    }
}
