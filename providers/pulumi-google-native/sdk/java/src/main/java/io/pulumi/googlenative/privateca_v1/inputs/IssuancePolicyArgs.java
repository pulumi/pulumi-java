// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.privateca_v1.inputs.AllowedKeyTypeArgs;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateExtensionConstraintsArgs;
import io.pulumi.googlenative.privateca_v1.inputs.CertificateIdentityConstraintsArgs;
import io.pulumi.googlenative.privateca_v1.inputs.IssuanceModesArgs;
import io.pulumi.googlenative.privateca_v1.inputs.X509ParametersArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Defines controls over all certificate issuance within a CaPool.
 * 
 */
public final class IssuancePolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final IssuancePolicyArgs Empty = new IssuancePolicyArgs();

    /**
     * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    @InputImport(name="allowedIssuanceModes")
      private final @Nullable Input<IssuanceModesArgs> allowedIssuanceModes;

    public Input<IssuanceModesArgs> getAllowedIssuanceModes() {
        return this.allowedIssuanceModes == null ? Input.empty() : this.allowedIssuanceModes;
    }

    /**
     * Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
     * 
     */
    @InputImport(name="allowedKeyTypes")
      private final @Nullable Input<List<AllowedKeyTypeArgs>> allowedKeyTypes;

    public Input<List<AllowedKeyTypeArgs>> getAllowedKeyTypes() {
        return this.allowedKeyTypes == null ? Input.empty() : this.allowedKeyTypes;
    }

    /**
     * Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
     * 
     */
    @InputImport(name="baselineValues")
      private final @Nullable Input<X509ParametersArgs> baselineValues;

    public Input<X509ParametersArgs> getBaselineValues() {
        return this.baselineValues == null ? Input.empty() : this.baselineValues;
    }

    /**
     * Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
     * 
     */
    @InputImport(name="identityConstraints")
      private final @Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints;

    public Input<CertificateIdentityConstraintsArgs> getIdentityConstraints() {
        return this.identityConstraints == null ? Input.empty() : this.identityConstraints;
    }

    /**
     * Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    @InputImport(name="maximumLifetime")
      private final @Nullable Input<String> maximumLifetime;

    public Input<String> getMaximumLifetime() {
        return this.maximumLifetime == null ? Input.empty() : this.maximumLifetime;
    }

    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
     * 
     */
    @InputImport(name="passthroughExtensions")
      private final @Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions;

    public Input<CertificateExtensionConstraintsArgs> getPassthroughExtensions() {
        return this.passthroughExtensions == null ? Input.empty() : this.passthroughExtensions;
    }

    public IssuancePolicyArgs(
        @Nullable Input<IssuanceModesArgs> allowedIssuanceModes,
        @Nullable Input<List<AllowedKeyTypeArgs>> allowedKeyTypes,
        @Nullable Input<X509ParametersArgs> baselineValues,
        @Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints,
        @Nullable Input<String> maximumLifetime,
        @Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions) {
        this.allowedIssuanceModes = allowedIssuanceModes;
        this.allowedKeyTypes = allowedKeyTypes;
        this.baselineValues = baselineValues;
        this.identityConstraints = identityConstraints;
        this.maximumLifetime = maximumLifetime;
        this.passthroughExtensions = passthroughExtensions;
    }

    private IssuancePolicyArgs() {
        this.allowedIssuanceModes = Input.empty();
        this.allowedKeyTypes = Input.empty();
        this.baselineValues = Input.empty();
        this.identityConstraints = Input.empty();
        this.maximumLifetime = Input.empty();
        this.passthroughExtensions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IssuancePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<IssuanceModesArgs> allowedIssuanceModes;
        private @Nullable Input<List<AllowedKeyTypeArgs>> allowedKeyTypes;
        private @Nullable Input<X509ParametersArgs> baselineValues;
        private @Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints;
        private @Nullable Input<String> maximumLifetime;
        private @Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions;

        public Builder() {
    	      // Empty
        }

        public Builder(IssuancePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedIssuanceModes = defaults.allowedIssuanceModes;
    	      this.allowedKeyTypes = defaults.allowedKeyTypes;
    	      this.baselineValues = defaults.baselineValues;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.maximumLifetime = defaults.maximumLifetime;
    	      this.passthroughExtensions = defaults.passthroughExtensions;
        }

        public Builder setAllowedIssuanceModes(@Nullable Input<IssuanceModesArgs> allowedIssuanceModes) {
            this.allowedIssuanceModes = allowedIssuanceModes;
            return this;
        }

        public Builder setAllowedIssuanceModes(@Nullable IssuanceModesArgs allowedIssuanceModes) {
            this.allowedIssuanceModes = Input.ofNullable(allowedIssuanceModes);
            return this;
        }

        public Builder setAllowedKeyTypes(@Nullable Input<List<AllowedKeyTypeArgs>> allowedKeyTypes) {
            this.allowedKeyTypes = allowedKeyTypes;
            return this;
        }

        public Builder setAllowedKeyTypes(@Nullable List<AllowedKeyTypeArgs> allowedKeyTypes) {
            this.allowedKeyTypes = Input.ofNullable(allowedKeyTypes);
            return this;
        }

        public Builder setBaselineValues(@Nullable Input<X509ParametersArgs> baselineValues) {
            this.baselineValues = baselineValues;
            return this;
        }

        public Builder setBaselineValues(@Nullable X509ParametersArgs baselineValues) {
            this.baselineValues = Input.ofNullable(baselineValues);
            return this;
        }

        public Builder setIdentityConstraints(@Nullable Input<CertificateIdentityConstraintsArgs> identityConstraints) {
            this.identityConstraints = identityConstraints;
            return this;
        }

        public Builder setIdentityConstraints(@Nullable CertificateIdentityConstraintsArgs identityConstraints) {
            this.identityConstraints = Input.ofNullable(identityConstraints);
            return this;
        }

        public Builder setMaximumLifetime(@Nullable Input<String> maximumLifetime) {
            this.maximumLifetime = maximumLifetime;
            return this;
        }

        public Builder setMaximumLifetime(@Nullable String maximumLifetime) {
            this.maximumLifetime = Input.ofNullable(maximumLifetime);
            return this;
        }

        public Builder setPassthroughExtensions(@Nullable Input<CertificateExtensionConstraintsArgs> passthroughExtensions) {
            this.passthroughExtensions = passthroughExtensions;
            return this;
        }

        public Builder setPassthroughExtensions(@Nullable CertificateExtensionConstraintsArgs passthroughExtensions) {
            this.passthroughExtensions = Input.ofNullable(passthroughExtensions);
            return this;
        }
        public IssuancePolicyArgs build() {
            return new IssuancePolicyArgs(allowedIssuanceModes, allowedKeyTypes, baselineValues, identityConstraints, maximumLifetime, passthroughExtensions);
        }
    }
}
