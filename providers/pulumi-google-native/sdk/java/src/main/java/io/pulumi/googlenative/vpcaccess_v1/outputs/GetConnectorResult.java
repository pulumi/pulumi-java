// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vpcaccess_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.vpcaccess_v1.outputs.SubnetResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetConnectorResult {
    private final List<String> connectedProjects;
    private final String ipCidrRange;
    private final String machineType;
    private final Integer maxInstances;
    private final Integer maxThroughput;
    private final Integer minInstances;
    private final Integer minThroughput;
    private final String name;
    private final String network;
    private final String state;
    private final SubnetResponse subnet;

    @OutputCustomType.Constructor({"connectedProjects","ipCidrRange","machineType","maxInstances","maxThroughput","minInstances","minThroughput","name","network","state","subnet"})
    private GetConnectorResult(
        List<String> connectedProjects,
        String ipCidrRange,
        String machineType,
        Integer maxInstances,
        Integer maxThroughput,
        Integer minInstances,
        Integer minThroughput,
        String name,
        String network,
        String state,
        SubnetResponse subnet) {
        this.connectedProjects = Objects.requireNonNull(connectedProjects);
        this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
        this.machineType = Objects.requireNonNull(machineType);
        this.maxInstances = Objects.requireNonNull(maxInstances);
        this.maxThroughput = Objects.requireNonNull(maxThroughput);
        this.minInstances = Objects.requireNonNull(minInstances);
        this.minThroughput = Objects.requireNonNull(minThroughput);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.state = Objects.requireNonNull(state);
        this.subnet = Objects.requireNonNull(subnet);
    }

    public List<String> getConnectedProjects() {
        return this.connectedProjects;
    }
    public String getIpCidrRange() {
        return this.ipCidrRange;
    }
    public String getMachineType() {
        return this.machineType;
    }
    public Integer getMaxInstances() {
        return this.maxInstances;
    }
    public Integer getMaxThroughput() {
        return this.maxThroughput;
    }
    public Integer getMinInstances() {
        return this.minInstances;
    }
    public Integer getMinThroughput() {
        return this.minThroughput;
    }
    public String getName() {
        return this.name;
    }
    public String getNetwork() {
        return this.network;
    }
    public String getState() {
        return this.state;
    }
    public SubnetResponse getSubnet() {
        return this.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> connectedProjects;
        private String ipCidrRange;
        private String machineType;
        private Integer maxInstances;
        private Integer maxThroughput;
        private Integer minInstances;
        private Integer minThroughput;
        private String name;
        private String network;
        private String state;
        private SubnetResponse subnet;

        public Builder() {
    	      // Empty
        }

        public Builder(GetConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectedProjects = defaults.connectedProjects;
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.machineType = defaults.machineType;
    	      this.maxInstances = defaults.maxInstances;
    	      this.maxThroughput = defaults.maxThroughput;
    	      this.minInstances = defaults.minInstances;
    	      this.minThroughput = defaults.minThroughput;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.state = defaults.state;
    	      this.subnet = defaults.subnet;
        }

        public Builder setConnectedProjects(List<String> connectedProjects) {
            this.connectedProjects = Objects.requireNonNull(connectedProjects);
            return this;
        }

        public Builder setIpCidrRange(String ipCidrRange) {
            this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
            return this;
        }

        public Builder setMachineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder setMaxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }

        public Builder setMaxThroughput(Integer maxThroughput) {
            this.maxThroughput = Objects.requireNonNull(maxThroughput);
            return this;
        }

        public Builder setMinInstances(Integer minInstances) {
            this.minInstances = Objects.requireNonNull(minInstances);
            return this;
        }

        public Builder setMinThroughput(Integer minThroughput) {
            this.minThroughput = Objects.requireNonNull(minThroughput);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setSubnet(SubnetResponse subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }

        public GetConnectorResult build() {
            return new GetConnectorResult(connectedProjects, ipCidrRange, machineType, maxInstances, maxThroughput, minInstances, minThroughput, name, network, state, subnet);
        }
    }
}
