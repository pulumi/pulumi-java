// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.gameservices_v1beta.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The schedule of a recurring or one time event. The event's time span is specified by start_time and end_time. If the scheduled event's timespan is larger than the cron_spec + cron_job_duration, the event will be recurring. If only cron_spec + cron_job_duration are specified, the event is effective starting at the local time specified by cron_spec, and is recurring. ```start_time|-------[cron job]-------[cron job]-------[cron job]---|end_time cron job: cron spec start time + duration```
 * 
 */
public final class ScheduleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScheduleArgs Empty = new ScheduleArgs();

    /**
     * The duration for the cron job event. The duration of the event is effective after the cron job's start time.
     * 
     */
    @InputImport(name="cronJobDuration")
      private final @Nullable Input<String> cronJobDuration;

    public Input<String> getCronJobDuration() {
        return this.cronJobDuration == null ? Input.empty() : this.cronJobDuration;
    }

    /**
     * The cron definition of the scheduled event. See https://en.wikipedia.org/wiki/Cron. Cron spec specifies the local time as defined by the realm.
     * 
     */
    @InputImport(name="cronSpec")
      private final @Nullable Input<String> cronSpec;

    public Input<String> getCronSpec() {
        return this.cronSpec == null ? Input.empty() : this.cronSpec;
    }

    /**
     * The end time of the event.
     * 
     */
    @InputImport(name="endTime")
      private final @Nullable Input<String> endTime;

    public Input<String> getEndTime() {
        return this.endTime == null ? Input.empty() : this.endTime;
    }

    /**
     * The start time of the event.
     * 
     */
    @InputImport(name="startTime")
      private final @Nullable Input<String> startTime;

    public Input<String> getStartTime() {
        return this.startTime == null ? Input.empty() : this.startTime;
    }

    public ScheduleArgs(
        @Nullable Input<String> cronJobDuration,
        @Nullable Input<String> cronSpec,
        @Nullable Input<String> endTime,
        @Nullable Input<String> startTime) {
        this.cronJobDuration = cronJobDuration;
        this.cronSpec = cronSpec;
        this.endTime = endTime;
        this.startTime = startTime;
    }

    private ScheduleArgs() {
        this.cronJobDuration = Input.empty();
        this.cronSpec = Input.empty();
        this.endTime = Input.empty();
        this.startTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cronJobDuration;
        private @Nullable Input<String> cronSpec;
        private @Nullable Input<String> endTime;
        private @Nullable Input<String> startTime;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronJobDuration = defaults.cronJobDuration;
    	      this.cronSpec = defaults.cronSpec;
    	      this.endTime = defaults.endTime;
    	      this.startTime = defaults.startTime;
        }

        public Builder setCronJobDuration(@Nullable Input<String> cronJobDuration) {
            this.cronJobDuration = cronJobDuration;
            return this;
        }

        public Builder setCronJobDuration(@Nullable String cronJobDuration) {
            this.cronJobDuration = Input.ofNullable(cronJobDuration);
            return this;
        }

        public Builder setCronSpec(@Nullable Input<String> cronSpec) {
            this.cronSpec = cronSpec;
            return this;
        }

        public Builder setCronSpec(@Nullable String cronSpec) {
            this.cronSpec = Input.ofNullable(cronSpec);
            return this;
        }

        public Builder setEndTime(@Nullable Input<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder setEndTime(@Nullable String endTime) {
            this.endTime = Input.ofNullable(endTime);
            return this;
        }

        public Builder setStartTime(@Nullable Input<String> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder setStartTime(@Nullable String startTime) {
            this.startTime = Input.ofNullable(startTime);
            return this;
        }
        public ScheduleArgs build() {
            return new ScheduleArgs(cronJobDuration, cronSpec, endTime, startTime);
        }
    }
}
