// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.transcoder_v1.inputs.AudioMappingArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Audio stream resource.
 * 
 */
public final class AudioStreamArgs extends io.pulumi.resources.ResourceArgs {

    public static final AudioStreamArgs Empty = new AudioStreamArgs();

    /**
     * Audio bitrate in bits per second. Must be between 1 and 10,000,000.
     * 
     */
    @Import(name="bitrateBps", required=true)
      private final Output<Integer> bitrateBps;

    public Output<Integer> getBitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Number of audio channels. Must be between 1 and 6. The default is 2.
     * 
     */
    @Import(name="channelCount")
      private final @Nullable Output<Integer> channelCount;

    public Output<Integer> getChannelCount() {
        return this.channelCount == null ? Codegen.empty() : this.channelCount;
    }

    /**
     * A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
     * 
     */
    @Import(name="channelLayout")
      private final @Nullable Output<List<String>> channelLayout;

    public Output<List<String>> getChannelLayout() {
        return this.channelLayout == null ? Codegen.empty() : this.channelLayout;
    }

    /**
     * The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
     * 
     */
    @Import(name="codec")
      private final @Nullable Output<String> codec;

    public Output<String> getCodec() {
        return this.codec == null ? Codegen.empty() : this.codec;
    }

    /**
     * The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
     * 
     */
    @Import(name="mapping")
      private final @Nullable Output<List<AudioMappingArgs>> mapping;

    public Output<List<AudioMappingArgs>> getMapping() {
        return this.mapping == null ? Codegen.empty() : this.mapping;
    }

    /**
     * The audio sample rate in Hertz. The default is 48000 Hertz.
     * 
     */
    @Import(name="sampleRateHertz")
      private final @Nullable Output<Integer> sampleRateHertz;

    public Output<Integer> getSampleRateHertz() {
        return this.sampleRateHertz == null ? Codegen.empty() : this.sampleRateHertz;
    }

    public AudioStreamArgs(
        Output<Integer> bitrateBps,
        @Nullable Output<Integer> channelCount,
        @Nullable Output<List<String>> channelLayout,
        @Nullable Output<String> codec,
        @Nullable Output<List<AudioMappingArgs>> mapping,
        @Nullable Output<Integer> sampleRateHertz) {
        this.bitrateBps = Objects.requireNonNull(bitrateBps, "expected parameter 'bitrateBps' to be non-null");
        this.channelCount = channelCount;
        this.channelLayout = channelLayout;
        this.codec = codec;
        this.mapping = mapping;
        this.sampleRateHertz = sampleRateHertz;
    }

    private AudioStreamArgs() {
        this.bitrateBps = Codegen.empty();
        this.channelCount = Codegen.empty();
        this.channelLayout = Codegen.empty();
        this.codec = Codegen.empty();
        this.mapping = Codegen.empty();
        this.sampleRateHertz = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AudioStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> bitrateBps;
        private @Nullable Output<Integer> channelCount;
        private @Nullable Output<List<String>> channelLayout;
        private @Nullable Output<String> codec;
        private @Nullable Output<List<AudioMappingArgs>> mapping;
        private @Nullable Output<Integer> sampleRateHertz;

        public Builder() {
    	      // Empty
        }

        public Builder(AudioStreamArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitrateBps = defaults.bitrateBps;
    	      this.channelCount = defaults.channelCount;
    	      this.channelLayout = defaults.channelLayout;
    	      this.codec = defaults.codec;
    	      this.mapping = defaults.mapping;
    	      this.sampleRateHertz = defaults.sampleRateHertz;
        }

        public Builder bitrateBps(Output<Integer> bitrateBps) {
            this.bitrateBps = Objects.requireNonNull(bitrateBps);
            return this;
        }
        public Builder bitrateBps(Integer bitrateBps) {
            this.bitrateBps = Output.of(Objects.requireNonNull(bitrateBps));
            return this;
        }
        public Builder channelCount(@Nullable Output<Integer> channelCount) {
            this.channelCount = channelCount;
            return this;
        }
        public Builder channelCount(@Nullable Integer channelCount) {
            this.channelCount = Codegen.ofNullable(channelCount);
            return this;
        }
        public Builder channelLayout(@Nullable Output<List<String>> channelLayout) {
            this.channelLayout = channelLayout;
            return this;
        }
        public Builder channelLayout(@Nullable List<String> channelLayout) {
            this.channelLayout = Codegen.ofNullable(channelLayout);
            return this;
        }
        public Builder channelLayout(String... channelLayout) {
            return channelLayout(List.of(channelLayout));
        }
        public Builder codec(@Nullable Output<String> codec) {
            this.codec = codec;
            return this;
        }
        public Builder codec(@Nullable String codec) {
            this.codec = Codegen.ofNullable(codec);
            return this;
        }
        public Builder mapping(@Nullable Output<List<AudioMappingArgs>> mapping) {
            this.mapping = mapping;
            return this;
        }
        public Builder mapping(@Nullable List<AudioMappingArgs> mapping) {
            this.mapping = Codegen.ofNullable(mapping);
            return this;
        }
        public Builder mapping(AudioMappingArgs... mapping) {
            return mapping(List.of(mapping));
        }
        public Builder sampleRateHertz(@Nullable Output<Integer> sampleRateHertz) {
            this.sampleRateHertz = sampleRateHertz;
            return this;
        }
        public Builder sampleRateHertz(@Nullable Integer sampleRateHertz) {
            this.sampleRateHertz = Codegen.ofNullable(sampleRateHertz);
            return this;
        }        public AudioStreamArgs build() {
            return new AudioStreamArgs(bitrateBps, channelCount, channelLayout, codec, mapping, sampleRateHertz);
        }
    }
}
