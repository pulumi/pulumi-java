// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.inputs.SecurityPolicyRuleHttpHeaderActionArgs;
import io.pulumi.googlenative.compute_v1.inputs.SecurityPolicyRuleMatcherArgs;
import io.pulumi.googlenative.compute_v1.inputs.SecurityPolicyRuleRateLimitOptionsArgs;
import io.pulumi.googlenative.compute_v1.inputs.SecurityPolicyRuleRedirectOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
 * 
 */
public final class SecurityPolicyRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyRuleArgs Empty = new SecurityPolicyRuleArgs();

    /**
     * The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502). - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this.
     * 
     */
    @InputImport(name="action")
      private final @Nullable Output<String> action;

    public Output<String> getAction() {
        return this.action == null ? Output.empty() : this.action;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Optional, additional actions that are performed on headers.
     * 
     */
    @InputImport(name="headerAction")
      private final @Nullable Output<SecurityPolicyRuleHttpHeaderActionArgs> headerAction;

    public Output<SecurityPolicyRuleHttpHeaderActionArgs> getHeaderAction() {
        return this.headerAction == null ? Output.empty() : this.headerAction;
    }

    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
     * 
     */
    @InputImport(name="match")
      private final @Nullable Output<SecurityPolicyRuleMatcherArgs> match;

    public Output<SecurityPolicyRuleMatcherArgs> getMatch() {
        return this.match == null ? Output.empty() : this.match;
    }

    /**
     * If set to true, the specified action is not enforced.
     * 
     */
    @InputImport(name="preview")
      private final @Nullable Output<Boolean> preview;

    public Output<Boolean> getPreview() {
        return this.preview == null ? Output.empty() : this.preview;
    }

    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    @InputImport(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> getPriority() {
        return this.priority == null ? Output.empty() : this.priority;
    }

    /**
     * Must be specified if the action is "rate_based_ban" or "throttle". Cannot be specified for any other actions.
     * 
     */
    @InputImport(name="rateLimitOptions")
      private final @Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions;

    public Output<SecurityPolicyRuleRateLimitOptionsArgs> getRateLimitOptions() {
        return this.rateLimitOptions == null ? Output.empty() : this.rateLimitOptions;
    }

    /**
     * Parameters defining the redirect action. Cannot be specified for any other actions.
     * 
     */
    @InputImport(name="redirectOptions")
      private final @Nullable Output<SecurityPolicyRuleRedirectOptionsArgs> redirectOptions;

    public Output<SecurityPolicyRuleRedirectOptionsArgs> getRedirectOptions() {
        return this.redirectOptions == null ? Output.empty() : this.redirectOptions;
    }

    public SecurityPolicyRuleArgs(
        @Nullable Output<String> action,
        @Nullable Output<String> description,
        @Nullable Output<SecurityPolicyRuleHttpHeaderActionArgs> headerAction,
        @Nullable Output<SecurityPolicyRuleMatcherArgs> match,
        @Nullable Output<Boolean> preview,
        @Nullable Output<Integer> priority,
        @Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions,
        @Nullable Output<SecurityPolicyRuleRedirectOptionsArgs> redirectOptions) {
        this.action = action;
        this.description = description;
        this.headerAction = headerAction;
        this.match = match;
        this.preview = preview;
        this.priority = priority;
        this.rateLimitOptions = rateLimitOptions;
        this.redirectOptions = redirectOptions;
    }

    private SecurityPolicyRuleArgs() {
        this.action = Output.empty();
        this.description = Output.empty();
        this.headerAction = Output.empty();
        this.match = Output.empty();
        this.preview = Output.empty();
        this.priority = Output.empty();
        this.rateLimitOptions = Output.empty();
        this.redirectOptions = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<String> description;
        private @Nullable Output<SecurityPolicyRuleHttpHeaderActionArgs> headerAction;
        private @Nullable Output<SecurityPolicyRuleMatcherArgs> match;
        private @Nullable Output<Boolean> preview;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions;
        private @Nullable Output<SecurityPolicyRuleRedirectOptionsArgs> redirectOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityPolicyRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.headerAction = defaults.headerAction;
    	      this.match = defaults.match;
    	      this.preview = defaults.preview;
    	      this.priority = defaults.priority;
    	      this.rateLimitOptions = defaults.rateLimitOptions;
    	      this.redirectOptions = defaults.redirectOptions;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }

        public Builder action(@Nullable String action) {
            this.action = Output.ofNullable(action);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder headerAction(@Nullable Output<SecurityPolicyRuleHttpHeaderActionArgs> headerAction) {
            this.headerAction = headerAction;
            return this;
        }

        public Builder headerAction(@Nullable SecurityPolicyRuleHttpHeaderActionArgs headerAction) {
            this.headerAction = Output.ofNullable(headerAction);
            return this;
        }

        public Builder match(@Nullable Output<SecurityPolicyRuleMatcherArgs> match) {
            this.match = match;
            return this;
        }

        public Builder match(@Nullable SecurityPolicyRuleMatcherArgs match) {
            this.match = Output.ofNullable(match);
            return this;
        }

        public Builder preview(@Nullable Output<Boolean> preview) {
            this.preview = preview;
            return this;
        }

        public Builder preview(@Nullable Boolean preview) {
            this.preview = Output.ofNullable(preview);
            return this;
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            this.priority = Output.ofNullable(priority);
            return this;
        }

        public Builder rateLimitOptions(@Nullable Output<SecurityPolicyRuleRateLimitOptionsArgs> rateLimitOptions) {
            this.rateLimitOptions = rateLimitOptions;
            return this;
        }

        public Builder rateLimitOptions(@Nullable SecurityPolicyRuleRateLimitOptionsArgs rateLimitOptions) {
            this.rateLimitOptions = Output.ofNullable(rateLimitOptions);
            return this;
        }

        public Builder redirectOptions(@Nullable Output<SecurityPolicyRuleRedirectOptionsArgs> redirectOptions) {
            this.redirectOptions = redirectOptions;
            return this;
        }

        public Builder redirectOptions(@Nullable SecurityPolicyRuleRedirectOptionsArgs redirectOptions) {
            this.redirectOptions = Output.ofNullable(redirectOptions);
            return this;
        }
        public SecurityPolicyRuleArgs build() {
            return new SecurityPolicyRuleArgs(action, description, headerAction, match, preview, priority, rateLimitOptions, redirectOptions);
        }
    }
}
