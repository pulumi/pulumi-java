// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.memcache_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.googlenative.Utilities;
import io.pulumi.googlenative.memcache_v1.InstanceArgs;
import io.pulumi.googlenative.memcache_v1.outputs.InstanceMessageResponse;
import io.pulumi.googlenative.memcache_v1.outputs.MemcacheParametersResponse;
import io.pulumi.googlenative.memcache_v1.outputs.NodeConfigResponse;
import io.pulumi.googlenative.memcache_v1.outputs.NodeResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Creates a new Instance in a given location.
 * 
 */
@ResourceType(type="google-native:memcache/v1:Instance")
public class Instance extends io.pulumi.resources.CustomResource {
    /**
     * The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
     * 
     */
    @OutputExport(name="authorizedNetwork", type=String.class, parameters={})
    private Output<String> authorizedNetwork;

    /**
     * @return The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
     * 
     */
    public Output<String> getAuthorizedNetwork() {
        return this.authorizedNetwork;
    }
    /**
     * The time the instance was created.
     * 
     */
    @OutputExport(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time the instance was created.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * Endpoint for the Discovery API.
     * 
     */
    @OutputExport(name="discoveryEndpoint", type=String.class, parameters={})
    private Output<String> discoveryEndpoint;

    /**
     * @return Endpoint for the Discovery API.
     * 
     */
    public Output<String> getDiscoveryEndpoint() {
        return this.discoveryEndpoint;
    }
    /**
     * User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
     * 
     */
    @OutputExport(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * List of messages that describe the current state of the Memcached instance.
     * 
     */
    @OutputExport(name="instanceMessages", type=List.class, parameters={InstanceMessageResponse.class})
    private Output<List<InstanceMessageResponse>> instanceMessages;

    /**
     * @return List of messages that describe the current state of the Memcached instance.
     * 
     */
    public Output<List<InstanceMessageResponse>> getInstanceMessages() {
        return this.instanceMessages;
    }
    /**
     * Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     * 
     */
    @OutputExport(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     * 
     */
    public Output<Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
     * 
     */
    @OutputExport(name="memcacheFullVersion", type=String.class, parameters={})
    private Output<String> memcacheFullVersion;

    /**
     * @return The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
     * 
     */
    public Output<String> getMemcacheFullVersion() {
        return this.memcacheFullVersion;
    }
    /**
     * List of Memcached nodes. Refer to Node message for more details.
     * 
     */
    @OutputExport(name="memcacheNodes", type=List.class, parameters={NodeResponse.class})
    private Output<List<NodeResponse>> memcacheNodes;

    /**
     * @return List of Memcached nodes. Refer to Node message for more details.
     * 
     */
    public Output<List<NodeResponse>> getMemcacheNodes() {
        return this.memcacheNodes;
    }
    /**
     * The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
     * 
     */
    @OutputExport(name="memcacheVersion", type=String.class, parameters={})
    private Output<String> memcacheVersion;

    /**
     * @return The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
     * 
     */
    public Output<String> getMemcacheVersion() {
        return this.memcacheVersion;
    }
    /**
     * Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Configuration for Memcached nodes.
     * 
     */
    @OutputExport(name="nodeConfig", type=NodeConfigResponse.class, parameters={})
    private Output<NodeConfigResponse> nodeConfig;

    /**
     * @return Configuration for Memcached nodes.
     * 
     */
    public Output<NodeConfigResponse> getNodeConfig() {
        return this.nodeConfig;
    }
    /**
     * Number of nodes in the Memcached instance.
     * 
     */
    @OutputExport(name="nodeCount", type=Integer.class, parameters={})
    private Output<Integer> nodeCount;

    /**
     * @return Number of nodes in the Memcached instance.
     * 
     */
    public Output<Integer> getNodeCount() {
        return this.nodeCount;
    }
    /**
     * User defined parameters to apply to the memcached process on each node.
     * 
     */
    @OutputExport(name="parameters", type=MemcacheParametersResponse.class, parameters={})
    private Output<MemcacheParametersResponse> parameters;

    /**
     * @return User defined parameters to apply to the memcached process on each node.
     * 
     */
    public Output<MemcacheParametersResponse> getParameters() {
        return this.parameters;
    }
    /**
     * The state of this Memcached instance.
     * 
     */
    @OutputExport(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The state of this Memcached instance.
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * The time the instance was updated.
     * 
     */
    @OutputExport(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The time the instance was updated.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }
    /**
     * Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
     * 
     */
    @OutputExport(name="zones", type=List.class, parameters={String.class})
    private Output<List<String>> zones;

    /**
     * @return Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
     * 
     */
    public Output<List<String>> getZones() {
        return this.zones;
    }

    public interface BuilderApplicator {
        public void apply(InstanceArgs.Builder a);
    }
    private static io.pulumi.googlenative.memcache_v1.InstanceArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.googlenative.memcache_v1.InstanceArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Instance(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:memcache/v1:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:memcache/v1:Instance", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, options);
    }
}
