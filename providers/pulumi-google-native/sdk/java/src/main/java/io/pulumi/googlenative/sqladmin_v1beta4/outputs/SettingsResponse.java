// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sqladmin_v1beta4.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.BackupConfigurationResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.DatabaseFlagsResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.DenyMaintenancePeriodResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.InsightsConfigResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.IpConfigurationResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.LocationPreferenceResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.MaintenanceWindowResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.PasswordValidationPolicyResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.SqlActiveDirectoryConfigResponse;
import io.pulumi.googlenative.sqladmin_v1beta4.outputs.SqlServerAuditConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class SettingsResponse {
    /**
     * The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
     * 
     */
    private final String activationPolicy;
    /**
     * Active Directory configuration, relevant only for Cloud SQL for SQL Server.
     * 
     */
    private final SqlActiveDirectoryConfigResponse activeDirectoryConfig;
    /**
     * Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
     * 
     */
    private final String availabilityType;
    /**
     * The daily backup configuration for the instance.
     * 
     */
    private final BackupConfigurationResponse backupConfiguration;
    /**
     * The name of server Instance collation.
     * 
     */
    private final String collation;
    /**
     * Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
     * 
     */
    private final Boolean crashSafeReplicationEnabled;
    /**
     * The size of data disk, in GB. The data disk size minimum is 10GB.
     * 
     */
    private final String dataDiskSizeGb;
    /**
     * The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
     * 
     */
    private final String dataDiskType;
    /**
     * The database flags passed to the instance at startup.
     * 
     */
    private final List<DatabaseFlagsResponse> databaseFlags;
    /**
     * Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
     * 
     */
    private final Boolean databaseReplicationEnabled;
    /**
     * Deny maintenance periods
     * 
     */
    private final List<DenyMaintenancePeriodResponse> denyMaintenancePeriods;
    /**
     * Insights configuration, for now relevant only for Postgres.
     * 
     */
    private final InsightsConfigResponse insightsConfig;
    /**
     * The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
     * 
     */
    private final IpConfigurationResponse ipConfiguration;
    /**
     * This is always `sql#settings`.
     * 
     */
    private final String kind;
    /**
     * The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
     * 
     */
    private final LocationPreferenceResponse locationPreference;
    /**
     * The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
     * 
     */
    private final MaintenanceWindowResponse maintenanceWindow;
    /**
     * The local user password validation policy of the instance.
     * 
     */
    private final PasswordValidationPolicyResponse passwordValidationPolicy;
    /**
     * The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
     * 
     */
    private final String pricingPlan;
    /**
     * The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
     * 
     */
    private final String settingsVersion;
    /**
     * SQL Server specific audit configuration.
     * 
     */
    private final SqlServerAuditConfigResponse sqlServerAuditConfig;
    /**
     * Configuration to increase storage size automatically. The default value is true.
     * 
     */
    private final Boolean storageAutoResize;
    /**
     * The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    private final String storageAutoResizeLimit;
    /**
     * The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
     * 
     */
    private final String tier;
    /**
     * User-provided labels, represented as a dictionary where each label is a single key value pair.
     * 
     */
    private final Map<String,String> userLabels;

    @OutputCustomType.Constructor({"activationPolicy","activeDirectoryConfig","availabilityType","backupConfiguration","collation","crashSafeReplicationEnabled","dataDiskSizeGb","dataDiskType","databaseFlags","databaseReplicationEnabled","denyMaintenancePeriods","insightsConfig","ipConfiguration","kind","locationPreference","maintenanceWindow","passwordValidationPolicy","pricingPlan","settingsVersion","sqlServerAuditConfig","storageAutoResize","storageAutoResizeLimit","tier","userLabels"})
    private SettingsResponse(
        String activationPolicy,
        SqlActiveDirectoryConfigResponse activeDirectoryConfig,
        String availabilityType,
        BackupConfigurationResponse backupConfiguration,
        String collation,
        Boolean crashSafeReplicationEnabled,
        String dataDiskSizeGb,
        String dataDiskType,
        List<DatabaseFlagsResponse> databaseFlags,
        Boolean databaseReplicationEnabled,
        List<DenyMaintenancePeriodResponse> denyMaintenancePeriods,
        InsightsConfigResponse insightsConfig,
        IpConfigurationResponse ipConfiguration,
        String kind,
        LocationPreferenceResponse locationPreference,
        MaintenanceWindowResponse maintenanceWindow,
        PasswordValidationPolicyResponse passwordValidationPolicy,
        String pricingPlan,
        String settingsVersion,
        SqlServerAuditConfigResponse sqlServerAuditConfig,
        Boolean storageAutoResize,
        String storageAutoResizeLimit,
        String tier,
        Map<String,String> userLabels) {
        this.activationPolicy = Objects.requireNonNull(activationPolicy);
        this.activeDirectoryConfig = Objects.requireNonNull(activeDirectoryConfig);
        this.availabilityType = Objects.requireNonNull(availabilityType);
        this.backupConfiguration = Objects.requireNonNull(backupConfiguration);
        this.collation = Objects.requireNonNull(collation);
        this.crashSafeReplicationEnabled = Objects.requireNonNull(crashSafeReplicationEnabled);
        this.dataDiskSizeGb = Objects.requireNonNull(dataDiskSizeGb);
        this.dataDiskType = Objects.requireNonNull(dataDiskType);
        this.databaseFlags = Objects.requireNonNull(databaseFlags);
        this.databaseReplicationEnabled = Objects.requireNonNull(databaseReplicationEnabled);
        this.denyMaintenancePeriods = Objects.requireNonNull(denyMaintenancePeriods);
        this.insightsConfig = Objects.requireNonNull(insightsConfig);
        this.ipConfiguration = Objects.requireNonNull(ipConfiguration);
        this.kind = Objects.requireNonNull(kind);
        this.locationPreference = Objects.requireNonNull(locationPreference);
        this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow);
        this.passwordValidationPolicy = Objects.requireNonNull(passwordValidationPolicy);
        this.pricingPlan = Objects.requireNonNull(pricingPlan);
        this.settingsVersion = Objects.requireNonNull(settingsVersion);
        this.sqlServerAuditConfig = Objects.requireNonNull(sqlServerAuditConfig);
        this.storageAutoResize = Objects.requireNonNull(storageAutoResize);
        this.storageAutoResizeLimit = Objects.requireNonNull(storageAutoResizeLimit);
        this.tier = Objects.requireNonNull(tier);
        this.userLabels = Objects.requireNonNull(userLabels);
    }

    /**
     * The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
     * 
    */
    public String getActivationPolicy() {
        return this.activationPolicy;
    }
    /**
     * Active Directory configuration, relevant only for Cloud SQL for SQL Server.
     * 
    */
    public SqlActiveDirectoryConfigResponse getActiveDirectoryConfig() {
        return this.activeDirectoryConfig;
    }
    /**
     * Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
     * 
    */
    public String getAvailabilityType() {
        return this.availabilityType;
    }
    /**
     * The daily backup configuration for the instance.
     * 
    */
    public BackupConfigurationResponse getBackupConfiguration() {
        return this.backupConfiguration;
    }
    /**
     * The name of server Instance collation.
     * 
    */
    public String getCollation() {
        return this.collation;
    }
    /**
     * Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
     * 
    */
    public Boolean getCrashSafeReplicationEnabled() {
        return this.crashSafeReplicationEnabled;
    }
    /**
     * The size of data disk, in GB. The data disk size minimum is 10GB.
     * 
    */
    public String getDataDiskSizeGb() {
        return this.dataDiskSizeGb;
    }
    /**
     * The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
     * 
    */
    public String getDataDiskType() {
        return this.dataDiskType;
    }
    /**
     * The database flags passed to the instance at startup.
     * 
    */
    public List<DatabaseFlagsResponse> getDatabaseFlags() {
        return this.databaseFlags;
    }
    /**
     * Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
     * 
    */
    public Boolean getDatabaseReplicationEnabled() {
        return this.databaseReplicationEnabled;
    }
    /**
     * Deny maintenance periods
     * 
    */
    public List<DenyMaintenancePeriodResponse> getDenyMaintenancePeriods() {
        return this.denyMaintenancePeriods;
    }
    /**
     * Insights configuration, for now relevant only for Postgres.
     * 
    */
    public InsightsConfigResponse getInsightsConfig() {
        return this.insightsConfig;
    }
    /**
     * The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
     * 
    */
    public IpConfigurationResponse getIpConfiguration() {
        return this.ipConfiguration;
    }
    /**
     * This is always `sql#settings`.
     * 
    */
    public String getKind() {
        return this.kind;
    }
    /**
     * The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
     * 
    */
    public LocationPreferenceResponse getLocationPreference() {
        return this.locationPreference;
    }
    /**
     * The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
     * 
    */
    public MaintenanceWindowResponse getMaintenanceWindow() {
        return this.maintenanceWindow;
    }
    /**
     * The local user password validation policy of the instance.
     * 
    */
    public PasswordValidationPolicyResponse getPasswordValidationPolicy() {
        return this.passwordValidationPolicy;
    }
    /**
     * The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
     * 
    */
    public String getPricingPlan() {
        return this.pricingPlan;
    }
    /**
     * The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
     * 
    */
    public String getSettingsVersion() {
        return this.settingsVersion;
    }
    /**
     * SQL Server specific audit configuration.
     * 
    */
    public SqlServerAuditConfigResponse getSqlServerAuditConfig() {
        return this.sqlServerAuditConfig;
    }
    /**
     * Configuration to increase storage size automatically. The default value is true.
     * 
    */
    public Boolean getStorageAutoResize() {
        return this.storageAutoResize;
    }
    /**
     * The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
    */
    public String getStorageAutoResizeLimit() {
        return this.storageAutoResizeLimit;
    }
    /**
     * The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
     * 
    */
    public String getTier() {
        return this.tier;
    }
    /**
     * User-provided labels, represented as a dictionary where each label is a single key value pair.
     * 
    */
    public Map<String,String> getUserLabels() {
        return this.userLabels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String activationPolicy;
        private SqlActiveDirectoryConfigResponse activeDirectoryConfig;
        private String availabilityType;
        private BackupConfigurationResponse backupConfiguration;
        private String collation;
        private Boolean crashSafeReplicationEnabled;
        private String dataDiskSizeGb;
        private String dataDiskType;
        private List<DatabaseFlagsResponse> databaseFlags;
        private Boolean databaseReplicationEnabled;
        private List<DenyMaintenancePeriodResponse> denyMaintenancePeriods;
        private InsightsConfigResponse insightsConfig;
        private IpConfigurationResponse ipConfiguration;
        private String kind;
        private LocationPreferenceResponse locationPreference;
        private MaintenanceWindowResponse maintenanceWindow;
        private PasswordValidationPolicyResponse passwordValidationPolicy;
        private String pricingPlan;
        private String settingsVersion;
        private SqlServerAuditConfigResponse sqlServerAuditConfig;
        private Boolean storageAutoResize;
        private String storageAutoResizeLimit;
        private String tier;
        private Map<String,String> userLabels;

        public Builder() {
    	      // Empty
        }

        public Builder(SettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.activeDirectoryConfig = defaults.activeDirectoryConfig;
    	      this.availabilityType = defaults.availabilityType;
    	      this.backupConfiguration = defaults.backupConfiguration;
    	      this.collation = defaults.collation;
    	      this.crashSafeReplicationEnabled = defaults.crashSafeReplicationEnabled;
    	      this.dataDiskSizeGb = defaults.dataDiskSizeGb;
    	      this.dataDiskType = defaults.dataDiskType;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.databaseReplicationEnabled = defaults.databaseReplicationEnabled;
    	      this.denyMaintenancePeriods = defaults.denyMaintenancePeriods;
    	      this.insightsConfig = defaults.insightsConfig;
    	      this.ipConfiguration = defaults.ipConfiguration;
    	      this.kind = defaults.kind;
    	      this.locationPreference = defaults.locationPreference;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.passwordValidationPolicy = defaults.passwordValidationPolicy;
    	      this.pricingPlan = defaults.pricingPlan;
    	      this.settingsVersion = defaults.settingsVersion;
    	      this.sqlServerAuditConfig = defaults.sqlServerAuditConfig;
    	      this.storageAutoResize = defaults.storageAutoResize;
    	      this.storageAutoResizeLimit = defaults.storageAutoResizeLimit;
    	      this.tier = defaults.tier;
    	      this.userLabels = defaults.userLabels;
        }

        public Builder setActivationPolicy(String activationPolicy) {
            this.activationPolicy = Objects.requireNonNull(activationPolicy);
            return this;
        }

        public Builder setActiveDirectoryConfig(SqlActiveDirectoryConfigResponse activeDirectoryConfig) {
            this.activeDirectoryConfig = Objects.requireNonNull(activeDirectoryConfig);
            return this;
        }

        public Builder setAvailabilityType(String availabilityType) {
            this.availabilityType = Objects.requireNonNull(availabilityType);
            return this;
        }

        public Builder setBackupConfiguration(BackupConfigurationResponse backupConfiguration) {
            this.backupConfiguration = Objects.requireNonNull(backupConfiguration);
            return this;
        }

        public Builder setCollation(String collation) {
            this.collation = Objects.requireNonNull(collation);
            return this;
        }

        public Builder setCrashSafeReplicationEnabled(Boolean crashSafeReplicationEnabled) {
            this.crashSafeReplicationEnabled = Objects.requireNonNull(crashSafeReplicationEnabled);
            return this;
        }

        public Builder setDataDiskSizeGb(String dataDiskSizeGb) {
            this.dataDiskSizeGb = Objects.requireNonNull(dataDiskSizeGb);
            return this;
        }

        public Builder setDataDiskType(String dataDiskType) {
            this.dataDiskType = Objects.requireNonNull(dataDiskType);
            return this;
        }

        public Builder setDatabaseFlags(List<DatabaseFlagsResponse> databaseFlags) {
            this.databaseFlags = Objects.requireNonNull(databaseFlags);
            return this;
        }

        public Builder setDatabaseReplicationEnabled(Boolean databaseReplicationEnabled) {
            this.databaseReplicationEnabled = Objects.requireNonNull(databaseReplicationEnabled);
            return this;
        }

        public Builder setDenyMaintenancePeriods(List<DenyMaintenancePeriodResponse> denyMaintenancePeriods) {
            this.denyMaintenancePeriods = Objects.requireNonNull(denyMaintenancePeriods);
            return this;
        }

        public Builder setInsightsConfig(InsightsConfigResponse insightsConfig) {
            this.insightsConfig = Objects.requireNonNull(insightsConfig);
            return this;
        }

        public Builder setIpConfiguration(IpConfigurationResponse ipConfiguration) {
            this.ipConfiguration = Objects.requireNonNull(ipConfiguration);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLocationPreference(LocationPreferenceResponse locationPreference) {
            this.locationPreference = Objects.requireNonNull(locationPreference);
            return this;
        }

        public Builder setMaintenanceWindow(MaintenanceWindowResponse maintenanceWindow) {
            this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow);
            return this;
        }

        public Builder setPasswordValidationPolicy(PasswordValidationPolicyResponse passwordValidationPolicy) {
            this.passwordValidationPolicy = Objects.requireNonNull(passwordValidationPolicy);
            return this;
        }

        public Builder setPricingPlan(String pricingPlan) {
            this.pricingPlan = Objects.requireNonNull(pricingPlan);
            return this;
        }

        public Builder setSettingsVersion(String settingsVersion) {
            this.settingsVersion = Objects.requireNonNull(settingsVersion);
            return this;
        }

        public Builder setSqlServerAuditConfig(SqlServerAuditConfigResponse sqlServerAuditConfig) {
            this.sqlServerAuditConfig = Objects.requireNonNull(sqlServerAuditConfig);
            return this;
        }

        public Builder setStorageAutoResize(Boolean storageAutoResize) {
            this.storageAutoResize = Objects.requireNonNull(storageAutoResize);
            return this;
        }

        public Builder setStorageAutoResizeLimit(String storageAutoResizeLimit) {
            this.storageAutoResizeLimit = Objects.requireNonNull(storageAutoResizeLimit);
            return this;
        }

        public Builder setTier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }

        public Builder setUserLabels(Map<String,String> userLabels) {
            this.userLabels = Objects.requireNonNull(userLabels);
            return this;
        }
        public SettingsResponse build() {
            return new SettingsResponse(activationPolicy, activeDirectoryConfig, availabilityType, backupConfiguration, collation, crashSafeReplicationEnabled, dataDiskSizeGb, dataDiskType, databaseFlags, databaseReplicationEnabled, denyMaintenancePeriods, insightsConfig, ipConfiguration, kind, locationPreference, maintenanceWindow, passwordValidationPolicy, pricingPlan, settingsVersion, sqlServerAuditConfig, storageAutoResize, storageAutoResizeLimit, tier, userLabels);
        }
    }
}
