// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class FileContentBufferResponse extends io.pulumi.resources.InvokeArgs {

    public static final FileContentBufferResponse Empty = new FileContentBufferResponse();

    /**
     * The raw content in the secure keys file.
     * 
     */
    @InputImport(name="content", required=true)
      private final String content;

    public String getContent() {
        return this.content;
    }

    /**
     * The file type of source file.
     * 
     */
    @InputImport(name="fileType", required=true)
      private final String fileType;

    public String getFileType() {
        return this.fileType;
    }

    public FileContentBufferResponse(
        String content,
        String fileType) {
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.fileType = Objects.requireNonNull(fileType, "expected parameter 'fileType' to be non-null");
    }

    private FileContentBufferResponse() {
        this.content = null;
        this.fileType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileContentBufferResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String content;
        private String fileType;

        public Builder() {
    	      // Empty
        }

        public Builder(FileContentBufferResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.fileType = defaults.fileType;
        }

        public Builder setContent(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }

        public Builder setFileType(String fileType) {
            this.fileType = Objects.requireNonNull(fileType);
            return this;
        }
        public FileContentBufferResponse build() {
            return new FileContentBufferResponse(content, fileType);
        }
    }
}
