// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.websecurityscanner_v1beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanRunExecutionState;
import io.pulumi.googlenative.websecurityscanner_v1beta.enums.ScanRunResultState;
import io.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunErrorTraceArgs;
import io.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunWarningTraceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A ScanRun is a output-only resource representing an actual run of the scan. Next id: 12
 * 
 */
public final class ScanRunArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScanRunArgs Empty = new ScanRunArgs();

    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     * 
     */
    @InputImport(name="endTime")
      private final @Nullable Output<String> endTime;

    public Output<String> getEndTime() {
        return this.endTime == null ? Output.empty() : this.endTime;
    }

    /**
     * If result_state is an ERROR, this field provides the primary reason for scan's termination and more details, if such are available.
     * 
     */
    @InputImport(name="errorTrace")
      private final @Nullable Output<ScanRunErrorTraceArgs> errorTrace;

    public Output<ScanRunErrorTraceArgs> getErrorTrace() {
        return this.errorTrace == null ? Output.empty() : this.errorTrace;
    }

    /**
     * The execution state of the ScanRun.
     * 
     */
    @InputImport(name="executionState")
      private final @Nullable Output<ScanRunExecutionState> executionState;

    public Output<ScanRunExecutionState> getExecutionState() {
        return this.executionState == null ? Output.empty() : this.executionState;
    }

    /**
     * Whether the scan run has found any vulnerabilities.
     * 
     */
    @InputImport(name="hasVulnerabilities")
      private final @Nullable Output<Boolean> hasVulnerabilities;

    public Output<Boolean> getHasVulnerabilities() {
        return this.hasVulnerabilities == null ? Output.empty() : this.hasVulnerabilities;
    }

    /**
     * The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     * 
     */
    @InputImport(name="progressPercent")
      private final @Nullable Output<Integer> progressPercent;

    public Output<Integer> getProgressPercent() {
        return this.progressPercent == null ? Output.empty() : this.progressPercent;
    }

    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
     * 
     */
    @InputImport(name="resultState")
      private final @Nullable Output<ScanRunResultState> resultState;

    public Output<ScanRunResultState> getResultState() {
        return this.resultState == null ? Output.empty() : this.resultState;
    }

    /**
     * The time at which the ScanRun started.
     * 
     */
    @InputImport(name="startTime")
      private final @Nullable Output<String> startTime;

    public Output<String> getStartTime() {
        return this.startTime == null ? Output.empty() : this.startTime;
    }

    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     * 
     */
    @InputImport(name="urlsCrawledCount")
      private final @Nullable Output<String> urlsCrawledCount;

    public Output<String> getUrlsCrawledCount() {
        return this.urlsCrawledCount == null ? Output.empty() : this.urlsCrawledCount;
    }

    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     * 
     */
    @InputImport(name="urlsTestedCount")
      private final @Nullable Output<String> urlsTestedCount;

    public Output<String> getUrlsTestedCount() {
        return this.urlsTestedCount == null ? Output.empty() : this.urlsTestedCount;
    }

    /**
     * A list of warnings, if such are encountered during this scan run.
     * 
     */
    @InputImport(name="warningTraces")
      private final @Nullable Output<List<ScanRunWarningTraceArgs>> warningTraces;

    public Output<List<ScanRunWarningTraceArgs>> getWarningTraces() {
        return this.warningTraces == null ? Output.empty() : this.warningTraces;
    }

    public ScanRunArgs(
        @Nullable Output<String> endTime,
        @Nullable Output<ScanRunErrorTraceArgs> errorTrace,
        @Nullable Output<ScanRunExecutionState> executionState,
        @Nullable Output<Boolean> hasVulnerabilities,
        @Nullable Output<String> name,
        @Nullable Output<Integer> progressPercent,
        @Nullable Output<ScanRunResultState> resultState,
        @Nullable Output<String> startTime,
        @Nullable Output<String> urlsCrawledCount,
        @Nullable Output<String> urlsTestedCount,
        @Nullable Output<List<ScanRunWarningTraceArgs>> warningTraces) {
        this.endTime = endTime;
        this.errorTrace = errorTrace;
        this.executionState = executionState;
        this.hasVulnerabilities = hasVulnerabilities;
        this.name = name;
        this.progressPercent = progressPercent;
        this.resultState = resultState;
        this.startTime = startTime;
        this.urlsCrawledCount = urlsCrawledCount;
        this.urlsTestedCount = urlsTestedCount;
        this.warningTraces = warningTraces;
    }

    private ScanRunArgs() {
        this.endTime = Output.empty();
        this.errorTrace = Output.empty();
        this.executionState = Output.empty();
        this.hasVulnerabilities = Output.empty();
        this.name = Output.empty();
        this.progressPercent = Output.empty();
        this.resultState = Output.empty();
        this.startTime = Output.empty();
        this.urlsCrawledCount = Output.empty();
        this.urlsTestedCount = Output.empty();
        this.warningTraces = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScanRunArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> endTime;
        private @Nullable Output<ScanRunErrorTraceArgs> errorTrace;
        private @Nullable Output<ScanRunExecutionState> executionState;
        private @Nullable Output<Boolean> hasVulnerabilities;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> progressPercent;
        private @Nullable Output<ScanRunResultState> resultState;
        private @Nullable Output<String> startTime;
        private @Nullable Output<String> urlsCrawledCount;
        private @Nullable Output<String> urlsTestedCount;
        private @Nullable Output<List<ScanRunWarningTraceArgs>> warningTraces;

        public Builder() {
    	      // Empty
        }

        public Builder(ScanRunArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.errorTrace = defaults.errorTrace;
    	      this.executionState = defaults.executionState;
    	      this.hasVulnerabilities = defaults.hasVulnerabilities;
    	      this.name = defaults.name;
    	      this.progressPercent = defaults.progressPercent;
    	      this.resultState = defaults.resultState;
    	      this.startTime = defaults.startTime;
    	      this.urlsCrawledCount = defaults.urlsCrawledCount;
    	      this.urlsTestedCount = defaults.urlsTestedCount;
    	      this.warningTraces = defaults.warningTraces;
        }

        public Builder endTime(@Nullable Output<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(@Nullable String endTime) {
            this.endTime = Output.ofNullable(endTime);
            return this;
        }

        public Builder errorTrace(@Nullable Output<ScanRunErrorTraceArgs> errorTrace) {
            this.errorTrace = errorTrace;
            return this;
        }

        public Builder errorTrace(@Nullable ScanRunErrorTraceArgs errorTrace) {
            this.errorTrace = Output.ofNullable(errorTrace);
            return this;
        }

        public Builder executionState(@Nullable Output<ScanRunExecutionState> executionState) {
            this.executionState = executionState;
            return this;
        }

        public Builder executionState(@Nullable ScanRunExecutionState executionState) {
            this.executionState = Output.ofNullable(executionState);
            return this;
        }

        public Builder hasVulnerabilities(@Nullable Output<Boolean> hasVulnerabilities) {
            this.hasVulnerabilities = hasVulnerabilities;
            return this;
        }

        public Builder hasVulnerabilities(@Nullable Boolean hasVulnerabilities) {
            this.hasVulnerabilities = Output.ofNullable(hasVulnerabilities);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder progressPercent(@Nullable Output<Integer> progressPercent) {
            this.progressPercent = progressPercent;
            return this;
        }

        public Builder progressPercent(@Nullable Integer progressPercent) {
            this.progressPercent = Output.ofNullable(progressPercent);
            return this;
        }

        public Builder resultState(@Nullable Output<ScanRunResultState> resultState) {
            this.resultState = resultState;
            return this;
        }

        public Builder resultState(@Nullable ScanRunResultState resultState) {
            this.resultState = Output.ofNullable(resultState);
            return this;
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder startTime(@Nullable String startTime) {
            this.startTime = Output.ofNullable(startTime);
            return this;
        }

        public Builder urlsCrawledCount(@Nullable Output<String> urlsCrawledCount) {
            this.urlsCrawledCount = urlsCrawledCount;
            return this;
        }

        public Builder urlsCrawledCount(@Nullable String urlsCrawledCount) {
            this.urlsCrawledCount = Output.ofNullable(urlsCrawledCount);
            return this;
        }

        public Builder urlsTestedCount(@Nullable Output<String> urlsTestedCount) {
            this.urlsTestedCount = urlsTestedCount;
            return this;
        }

        public Builder urlsTestedCount(@Nullable String urlsTestedCount) {
            this.urlsTestedCount = Output.ofNullable(urlsTestedCount);
            return this;
        }

        public Builder warningTraces(@Nullable Output<List<ScanRunWarningTraceArgs>> warningTraces) {
            this.warningTraces = warningTraces;
            return this;
        }

        public Builder warningTraces(@Nullable List<ScanRunWarningTraceArgs> warningTraces) {
            this.warningTraces = Output.ofNullable(warningTraces);
            return this;
        }
        public ScanRunArgs build() {
            return new ScanRunArgs(endTime, errorTrace, executionState, hasVulnerabilities, name, progressPercent, resultState, startTime, urlsCrawledCount, urlsTestedCount, warningTraces);
        }
    }
}
