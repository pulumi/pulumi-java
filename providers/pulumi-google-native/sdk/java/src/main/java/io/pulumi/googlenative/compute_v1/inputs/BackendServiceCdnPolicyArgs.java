// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.enums.BackendServiceCdnPolicyCacheMode;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceCdnPolicyNegativeCachingPolicyArgs;
import io.pulumi.googlenative.compute_v1.inputs.CacheKeyPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackendServiceCdnPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackendServiceCdnPolicyArgs Empty = new BackendServiceCdnPolicyArgs();

    @InputImport(name="bypassCacheOnRequestHeaders")
    private final @Nullable Input<List<BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs>> bypassCacheOnRequestHeaders;

    public Input<List<BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs>> getBypassCacheOnRequestHeaders() {
        return this.bypassCacheOnRequestHeaders == null ? Input.empty() : this.bypassCacheOnRequestHeaders;
    }

    @InputImport(name="cacheKeyPolicy")
    private final @Nullable Input<CacheKeyPolicyArgs> cacheKeyPolicy;

    public Input<CacheKeyPolicyArgs> getCacheKeyPolicy() {
        return this.cacheKeyPolicy == null ? Input.empty() : this.cacheKeyPolicy;
    }

    @InputImport(name="cacheMode")
    private final @Nullable Input<BackendServiceCdnPolicyCacheMode> cacheMode;

    public Input<BackendServiceCdnPolicyCacheMode> getCacheMode() {
        return this.cacheMode == null ? Input.empty() : this.cacheMode;
    }

    @InputImport(name="clientTtl")
    private final @Nullable Input<Integer> clientTtl;

    public Input<Integer> getClientTtl() {
        return this.clientTtl == null ? Input.empty() : this.clientTtl;
    }

    @InputImport(name="defaultTtl")
    private final @Nullable Input<Integer> defaultTtl;

    public Input<Integer> getDefaultTtl() {
        return this.defaultTtl == null ? Input.empty() : this.defaultTtl;
    }

    @InputImport(name="maxTtl")
    private final @Nullable Input<Integer> maxTtl;

    public Input<Integer> getMaxTtl() {
        return this.maxTtl == null ? Input.empty() : this.maxTtl;
    }

    @InputImport(name="negativeCaching")
    private final @Nullable Input<Boolean> negativeCaching;

    public Input<Boolean> getNegativeCaching() {
        return this.negativeCaching == null ? Input.empty() : this.negativeCaching;
    }

    @InputImport(name="negativeCachingPolicy")
    private final @Nullable Input<List<BackendServiceCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicy;

    public Input<List<BackendServiceCdnPolicyNegativeCachingPolicyArgs>> getNegativeCachingPolicy() {
        return this.negativeCachingPolicy == null ? Input.empty() : this.negativeCachingPolicy;
    }

    @InputImport(name="requestCoalescing")
    private final @Nullable Input<Boolean> requestCoalescing;

    public Input<Boolean> getRequestCoalescing() {
        return this.requestCoalescing == null ? Input.empty() : this.requestCoalescing;
    }

    @InputImport(name="serveWhileStale")
    private final @Nullable Input<Integer> serveWhileStale;

    public Input<Integer> getServeWhileStale() {
        return this.serveWhileStale == null ? Input.empty() : this.serveWhileStale;
    }

    @InputImport(name="signedUrlCacheMaxAgeSec")
    private final @Nullable Input<String> signedUrlCacheMaxAgeSec;

    public Input<String> getSignedUrlCacheMaxAgeSec() {
        return this.signedUrlCacheMaxAgeSec == null ? Input.empty() : this.signedUrlCacheMaxAgeSec;
    }

    public BackendServiceCdnPolicyArgs(
        @Nullable Input<List<BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs>> bypassCacheOnRequestHeaders,
        @Nullable Input<CacheKeyPolicyArgs> cacheKeyPolicy,
        @Nullable Input<BackendServiceCdnPolicyCacheMode> cacheMode,
        @Nullable Input<Integer> clientTtl,
        @Nullable Input<Integer> defaultTtl,
        @Nullable Input<Integer> maxTtl,
        @Nullable Input<Boolean> negativeCaching,
        @Nullable Input<List<BackendServiceCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicy,
        @Nullable Input<Boolean> requestCoalescing,
        @Nullable Input<Integer> serveWhileStale,
        @Nullable Input<String> signedUrlCacheMaxAgeSec) {
        this.bypassCacheOnRequestHeaders = bypassCacheOnRequestHeaders;
        this.cacheKeyPolicy = cacheKeyPolicy;
        this.cacheMode = cacheMode;
        this.clientTtl = clientTtl;
        this.defaultTtl = defaultTtl;
        this.maxTtl = maxTtl;
        this.negativeCaching = negativeCaching;
        this.negativeCachingPolicy = negativeCachingPolicy;
        this.requestCoalescing = requestCoalescing;
        this.serveWhileStale = serveWhileStale;
        this.signedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
    }

    private BackendServiceCdnPolicyArgs() {
        this.bypassCacheOnRequestHeaders = Input.empty();
        this.cacheKeyPolicy = Input.empty();
        this.cacheMode = Input.empty();
        this.clientTtl = Input.empty();
        this.defaultTtl = Input.empty();
        this.maxTtl = Input.empty();
        this.negativeCaching = Input.empty();
        this.negativeCachingPolicy = Input.empty();
        this.requestCoalescing = Input.empty();
        this.serveWhileStale = Input.empty();
        this.signedUrlCacheMaxAgeSec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceCdnPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs>> bypassCacheOnRequestHeaders;
        private @Nullable Input<CacheKeyPolicyArgs> cacheKeyPolicy;
        private @Nullable Input<BackendServiceCdnPolicyCacheMode> cacheMode;
        private @Nullable Input<Integer> clientTtl;
        private @Nullable Input<Integer> defaultTtl;
        private @Nullable Input<Integer> maxTtl;
        private @Nullable Input<Boolean> negativeCaching;
        private @Nullable Input<List<BackendServiceCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicy;
        private @Nullable Input<Boolean> requestCoalescing;
        private @Nullable Input<Integer> serveWhileStale;
        private @Nullable Input<String> signedUrlCacheMaxAgeSec;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceCdnPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypassCacheOnRequestHeaders = defaults.bypassCacheOnRequestHeaders;
    	      this.cacheKeyPolicy = defaults.cacheKeyPolicy;
    	      this.cacheMode = defaults.cacheMode;
    	      this.clientTtl = defaults.clientTtl;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.maxTtl = defaults.maxTtl;
    	      this.negativeCaching = defaults.negativeCaching;
    	      this.negativeCachingPolicy = defaults.negativeCachingPolicy;
    	      this.requestCoalescing = defaults.requestCoalescing;
    	      this.serveWhileStale = defaults.serveWhileStale;
    	      this.signedUrlCacheMaxAgeSec = defaults.signedUrlCacheMaxAgeSec;
        }

        public Builder setBypassCacheOnRequestHeaders(@Nullable Input<List<BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs>> bypassCacheOnRequestHeaders) {
            this.bypassCacheOnRequestHeaders = bypassCacheOnRequestHeaders;
            return this;
        }

        public Builder setBypassCacheOnRequestHeaders(@Nullable List<BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs> bypassCacheOnRequestHeaders) {
            this.bypassCacheOnRequestHeaders = Input.ofNullable(bypassCacheOnRequestHeaders);
            return this;
        }

        public Builder setCacheKeyPolicy(@Nullable Input<CacheKeyPolicyArgs> cacheKeyPolicy) {
            this.cacheKeyPolicy = cacheKeyPolicy;
            return this;
        }

        public Builder setCacheKeyPolicy(@Nullable CacheKeyPolicyArgs cacheKeyPolicy) {
            this.cacheKeyPolicy = Input.ofNullable(cacheKeyPolicy);
            return this;
        }

        public Builder setCacheMode(@Nullable Input<BackendServiceCdnPolicyCacheMode> cacheMode) {
            this.cacheMode = cacheMode;
            return this;
        }

        public Builder setCacheMode(@Nullable BackendServiceCdnPolicyCacheMode cacheMode) {
            this.cacheMode = Input.ofNullable(cacheMode);
            return this;
        }

        public Builder setClientTtl(@Nullable Input<Integer> clientTtl) {
            this.clientTtl = clientTtl;
            return this;
        }

        public Builder setClientTtl(@Nullable Integer clientTtl) {
            this.clientTtl = Input.ofNullable(clientTtl);
            return this;
        }

        public Builder setDefaultTtl(@Nullable Input<Integer> defaultTtl) {
            this.defaultTtl = defaultTtl;
            return this;
        }

        public Builder setDefaultTtl(@Nullable Integer defaultTtl) {
            this.defaultTtl = Input.ofNullable(defaultTtl);
            return this;
        }

        public Builder setMaxTtl(@Nullable Input<Integer> maxTtl) {
            this.maxTtl = maxTtl;
            return this;
        }

        public Builder setMaxTtl(@Nullable Integer maxTtl) {
            this.maxTtl = Input.ofNullable(maxTtl);
            return this;
        }

        public Builder setNegativeCaching(@Nullable Input<Boolean> negativeCaching) {
            this.negativeCaching = negativeCaching;
            return this;
        }

        public Builder setNegativeCaching(@Nullable Boolean negativeCaching) {
            this.negativeCaching = Input.ofNullable(negativeCaching);
            return this;
        }

        public Builder setNegativeCachingPolicy(@Nullable Input<List<BackendServiceCdnPolicyNegativeCachingPolicyArgs>> negativeCachingPolicy) {
            this.negativeCachingPolicy = negativeCachingPolicy;
            return this;
        }

        public Builder setNegativeCachingPolicy(@Nullable List<BackendServiceCdnPolicyNegativeCachingPolicyArgs> negativeCachingPolicy) {
            this.negativeCachingPolicy = Input.ofNullable(negativeCachingPolicy);
            return this;
        }

        public Builder setRequestCoalescing(@Nullable Input<Boolean> requestCoalescing) {
            this.requestCoalescing = requestCoalescing;
            return this;
        }

        public Builder setRequestCoalescing(@Nullable Boolean requestCoalescing) {
            this.requestCoalescing = Input.ofNullable(requestCoalescing);
            return this;
        }

        public Builder setServeWhileStale(@Nullable Input<Integer> serveWhileStale) {
            this.serveWhileStale = serveWhileStale;
            return this;
        }

        public Builder setServeWhileStale(@Nullable Integer serveWhileStale) {
            this.serveWhileStale = Input.ofNullable(serveWhileStale);
            return this;
        }

        public Builder setSignedUrlCacheMaxAgeSec(@Nullable Input<String> signedUrlCacheMaxAgeSec) {
            this.signedUrlCacheMaxAgeSec = signedUrlCacheMaxAgeSec;
            return this;
        }

        public Builder setSignedUrlCacheMaxAgeSec(@Nullable String signedUrlCacheMaxAgeSec) {
            this.signedUrlCacheMaxAgeSec = Input.ofNullable(signedUrlCacheMaxAgeSec);
            return this;
        }

        public BackendServiceCdnPolicyArgs build() {
            return new BackendServiceCdnPolicyArgs(bypassCacheOnRequestHeaders, cacheKeyPolicy, cacheMode, clientTtl, defaultTtl, maxTtl, negativeCaching, negativeCachingPolicy, requestCoalescing, serveWhileStale, signedUrlCacheMaxAgeSec);
        }
    }
}
