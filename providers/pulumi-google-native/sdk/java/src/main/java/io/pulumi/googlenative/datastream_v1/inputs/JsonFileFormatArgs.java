// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datastream_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.datastream_v1.enums.JsonFileFormatCompression;
import io.pulumi.googlenative.datastream_v1.enums.JsonFileFormatSchemaFileFormat;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * JSON file format configuration.
 * 
 */
public final class JsonFileFormatArgs extends io.pulumi.resources.ResourceArgs {

    public static final JsonFileFormatArgs Empty = new JsonFileFormatArgs();

    /**
     * Compression of the loaded JSON file.
     * 
     */
    @Import(name="compression")
      private final @Nullable Output<JsonFileFormatCompression> compression;

    public Output<JsonFileFormatCompression> getCompression() {
        return this.compression == null ? Output.empty() : this.compression;
    }

    /**
     * The schema file format along JSON data files.
     * 
     */
    @Import(name="schemaFileFormat")
      private final @Nullable Output<JsonFileFormatSchemaFileFormat> schemaFileFormat;

    public Output<JsonFileFormatSchemaFileFormat> getSchemaFileFormat() {
        return this.schemaFileFormat == null ? Output.empty() : this.schemaFileFormat;
    }

    public JsonFileFormatArgs(
        @Nullable Output<JsonFileFormatCompression> compression,
        @Nullable Output<JsonFileFormatSchemaFileFormat> schemaFileFormat) {
        this.compression = compression;
        this.schemaFileFormat = schemaFileFormat;
    }

    private JsonFileFormatArgs() {
        this.compression = Output.empty();
        this.schemaFileFormat = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JsonFileFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<JsonFileFormatCompression> compression;
        private @Nullable Output<JsonFileFormatSchemaFileFormat> schemaFileFormat;

        public Builder() {
    	      // Empty
        }

        public Builder(JsonFileFormatArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compression = defaults.compression;
    	      this.schemaFileFormat = defaults.schemaFileFormat;
        }

        public Builder compression(@Nullable Output<JsonFileFormatCompression> compression) {
            this.compression = compression;
            return this;
        }

        public Builder compression(@Nullable JsonFileFormatCompression compression) {
            this.compression = Output.ofNullable(compression);
            return this;
        }

        public Builder schemaFileFormat(@Nullable Output<JsonFileFormatSchemaFileFormat> schemaFileFormat) {
            this.schemaFileFormat = schemaFileFormat;
            return this;
        }

        public Builder schemaFileFormat(@Nullable JsonFileFormatSchemaFileFormat schemaFileFormat) {
            this.schemaFileFormat = Output.ofNullable(schemaFileFormat);
            return this;
        }
        public JsonFileFormatArgs build() {
            return new JsonFileFormatArgs(compression, schemaFileFormat);
        }
    }
}
