// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import java.lang.String;
import java.util.Objects;


/**
 * A file or directory to install on the device before the test starts.
 * 
 */
public final class RegularFileArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegularFileArgs Empty = new RegularFileArgs();

    /**
     * The source file.
     * 
     */
    @Import(name="content", required=true)
      private final Output<FileReferenceArgs> content;

    public Output<FileReferenceArgs> getContent() {
        return this.content;
    }

    /**
     * Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
     * 
     */
    @Import(name="devicePath", required=true)
      private final Output<String> devicePath;

    public Output<String> getDevicePath() {
        return this.devicePath;
    }

    public RegularFileArgs(
        Output<FileReferenceArgs> content,
        Output<String> devicePath) {
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.devicePath = Objects.requireNonNull(devicePath, "expected parameter 'devicePath' to be non-null");
    }

    private RegularFileArgs() {
        this.content = Codegen.empty();
        this.devicePath = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegularFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<FileReferenceArgs> content;
        private Output<String> devicePath;

        public Builder() {
    	      // Empty
        }

        public Builder(RegularFileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.devicePath = defaults.devicePath;
        }

        public Builder content(Output<FileReferenceArgs> content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        public Builder content(FileReferenceArgs content) {
            this.content = Output.of(Objects.requireNonNull(content));
            return this;
        }
        public Builder devicePath(Output<String> devicePath) {
            this.devicePath = Objects.requireNonNull(devicePath);
            return this;
        }
        public Builder devicePath(String devicePath) {
            this.devicePath = Output.of(Objects.requireNonNull(devicePath));
            return this;
        }        public RegularFileArgs build() {
            return new RegularFileArgs(content, devicePath);
        }
    }
}
