// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.monitoring_v1.inputs.WidgetResponse;
import java.lang.Integer;
import java.util.Objects;


/**
 * A single tile in the mosaic. The placement and size of the tile are configurable.
 * 
 */
public final class TileResponse extends io.pulumi.resources.InvokeArgs {

    public static final TileResponse Empty = new TileResponse();

    /**
     * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
     * 
     */
    @Import(name="height", required=true)
      private final Integer height;

    public Integer getHeight() {
        return this.height;
    }

    /**
     * The informational widget contained in the tile. For example an XyChart.
     * 
     */
    @Import(name="widget", required=true)
      private final WidgetResponse widget;

    public WidgetResponse getWidget() {
        return this.widget;
    }

    /**
     * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
     * 
     */
    @Import(name="width", required=true)
      private final Integer width;

    public Integer getWidth() {
        return this.width;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.
     * 
     */
    @Import(name="xPos", required=true)
      private final Integer xPos;

    public Integer getXPos() {
        return this.xPos;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.
     * 
     */
    @Import(name="yPos", required=true)
      private final Integer yPos;

    public Integer getYPos() {
        return this.yPos;
    }

    public TileResponse(
        Integer height,
        WidgetResponse widget,
        Integer width,
        Integer xPos,
        Integer yPos) {
        this.height = Objects.requireNonNull(height, "expected parameter 'height' to be non-null");
        this.widget = Objects.requireNonNull(widget, "expected parameter 'widget' to be non-null");
        this.width = Objects.requireNonNull(width, "expected parameter 'width' to be non-null");
        this.xPos = Objects.requireNonNull(xPos, "expected parameter 'xPos' to be non-null");
        this.yPos = Objects.requireNonNull(yPos, "expected parameter 'yPos' to be non-null");
    }

    private TileResponse() {
        this.height = null;
        this.widget = null;
        this.width = null;
        this.xPos = null;
        this.yPos = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer height;
        private WidgetResponse widget;
        private Integer width;
        private Integer xPos;
        private Integer yPos;

        public Builder() {
    	      // Empty
        }

        public Builder(TileResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.widget = defaults.widget;
    	      this.width = defaults.width;
    	      this.xPos = defaults.xPos;
    	      this.yPos = defaults.yPos;
        }

        public Builder height(Integer height) {
            this.height = Objects.requireNonNull(height);
            return this;
        }

        public Builder widget(WidgetResponse widget) {
            this.widget = Objects.requireNonNull(widget);
            return this;
        }

        public Builder width(Integer width) {
            this.width = Objects.requireNonNull(width);
            return this;
        }

        public Builder xPos(Integer xPos) {
            this.xPos = Objects.requireNonNull(xPos);
            return this;
        }

        public Builder yPos(Integer yPos) {
            this.yPos = Objects.requireNonNull(yPos);
            return this;
        }
        public TileResponse build() {
            return new TileResponse(height, widget, width, xPos, yPos);
        }
    }
}
