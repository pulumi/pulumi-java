// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.run_v1alpha1.inputs.ContainerArgs;
import io.pulumi.googlenative.run_v1alpha1.inputs.VolumeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceSpecArgs Empty = new InstanceSpecArgs();

    @InputImport(name="activeDeadlineSeconds")
    private final @Nullable Input<String> activeDeadlineSeconds;

    public Input<String> getActiveDeadlineSeconds() {
        return this.activeDeadlineSeconds == null ? Input.empty() : this.activeDeadlineSeconds;
    }

    @InputImport(name="containers")
    private final @Nullable Input<List<ContainerArgs>> containers;

    public Input<List<ContainerArgs>> getContainers() {
        return this.containers == null ? Input.empty() : this.containers;
    }

    @InputImport(name="restartPolicy")
    private final @Nullable Input<String> restartPolicy;

    public Input<String> getRestartPolicy() {
        return this.restartPolicy == null ? Input.empty() : this.restartPolicy;
    }

    @InputImport(name="serviceAccountName")
    private final @Nullable Input<String> serviceAccountName;

    public Input<String> getServiceAccountName() {
        return this.serviceAccountName == null ? Input.empty() : this.serviceAccountName;
    }

    @InputImport(name="terminationGracePeriodSeconds")
    private final @Nullable Input<String> terminationGracePeriodSeconds;

    public Input<String> getTerminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds == null ? Input.empty() : this.terminationGracePeriodSeconds;
    }

    @InputImport(name="volumes")
    private final @Nullable Input<List<VolumeArgs>> volumes;

    public Input<List<VolumeArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public InstanceSpecArgs(
        @Nullable Input<String> activeDeadlineSeconds,
        @Nullable Input<List<ContainerArgs>> containers,
        @Nullable Input<String> restartPolicy,
        @Nullable Input<String> serviceAccountName,
        @Nullable Input<String> terminationGracePeriodSeconds,
        @Nullable Input<List<VolumeArgs>> volumes) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        this.containers = containers;
        this.restartPolicy = restartPolicy;
        this.serviceAccountName = serviceAccountName;
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        this.volumes = volumes;
    }

    private InstanceSpecArgs() {
        this.activeDeadlineSeconds = Input.empty();
        this.containers = Input.empty();
        this.restartPolicy = Input.empty();
        this.serviceAccountName = Input.empty();
        this.terminationGracePeriodSeconds = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> activeDeadlineSeconds;
        private @Nullable Input<List<ContainerArgs>> containers;
        private @Nullable Input<String> restartPolicy;
        private @Nullable Input<String> serviceAccountName;
        private @Nullable Input<String> terminationGracePeriodSeconds;
        private @Nullable Input<List<VolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeadlineSeconds = defaults.activeDeadlineSeconds;
    	      this.containers = defaults.containers;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder setActiveDeadlineSeconds(@Nullable Input<String> activeDeadlineSeconds) {
            this.activeDeadlineSeconds = activeDeadlineSeconds;
            return this;
        }

        public Builder setActiveDeadlineSeconds(@Nullable String activeDeadlineSeconds) {
            this.activeDeadlineSeconds = Input.ofNullable(activeDeadlineSeconds);
            return this;
        }

        public Builder setContainers(@Nullable Input<List<ContainerArgs>> containers) {
            this.containers = containers;
            return this;
        }

        public Builder setContainers(@Nullable List<ContainerArgs> containers) {
            this.containers = Input.ofNullable(containers);
            return this;
        }

        public Builder setRestartPolicy(@Nullable Input<String> restartPolicy) {
            this.restartPolicy = restartPolicy;
            return this;
        }

        public Builder setRestartPolicy(@Nullable String restartPolicy) {
            this.restartPolicy = Input.ofNullable(restartPolicy);
            return this;
        }

        public Builder setServiceAccountName(@Nullable Input<String> serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder setServiceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = Input.ofNullable(serviceAccountName);
            return this;
        }

        public Builder setTerminationGracePeriodSeconds(@Nullable Input<String> terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        public Builder setTerminationGracePeriodSeconds(@Nullable String terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = Input.ofNullable(terminationGracePeriodSeconds);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<VolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<VolumeArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }

        public InstanceSpecArgs build() {
            return new InstanceSpecArgs(activeDeadlineSeconds, containers, restartPolicy, serviceAccountName, terminationGracePeriodSeconds, volumes);
        }
    }
}
