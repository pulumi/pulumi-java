// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.dataflow_v1b3.inputs.RuntimeEnvironmentArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final TemplateArgs Empty = new TemplateArgs();

    /**
     * The runtime environment for the job.
     * 
     */
    @InputImport(name="environment")
      private final @Nullable Output<RuntimeEnvironmentArgs> environment;

    public Output<RuntimeEnvironmentArgs> getEnvironment() {
        return this.environment == null ? Output.empty() : this.environment;
    }

    /**
     * A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.
     * 
     */
    @InputImport(name="gcsPath", required=true)
      private final Output<String> gcsPath;

    public Output<String> getGcsPath() {
        return this.gcsPath;
    }

    /**
     * The job name to use for the created job.
     * 
     */
    @InputImport(name="jobName", required=true)
      private final Output<String> jobName;

    public Output<String> getJobName() {
        return this.jobName;
    }

    /**
     * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * The runtime parameters to pass to the job.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Output<Map<String,String>> parameters;

    public Output<Map<String,String>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    public TemplateArgs(
        @Nullable Output<RuntimeEnvironmentArgs> environment,
        Output<String> gcsPath,
        Output<String> jobName,
        @Nullable Output<String> location,
        @Nullable Output<Map<String,String>> parameters,
        @Nullable Output<String> project) {
        this.environment = environment;
        this.gcsPath = Objects.requireNonNull(gcsPath, "expected parameter 'gcsPath' to be non-null");
        this.jobName = Objects.requireNonNull(jobName, "expected parameter 'jobName' to be non-null");
        this.location = location;
        this.parameters = parameters;
        this.project = project;
    }

    private TemplateArgs() {
        this.environment = Output.empty();
        this.gcsPath = Output.empty();
        this.jobName = Output.empty();
        this.location = Output.empty();
        this.parameters = Output.empty();
        this.project = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<RuntimeEnvironmentArgs> environment;
        private Output<String> gcsPath;
        private Output<String> jobName;
        private @Nullable Output<String> location;
        private @Nullable Output<Map<String,String>> parameters;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(TemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.environment = defaults.environment;
    	      this.gcsPath = defaults.gcsPath;
    	      this.jobName = defaults.jobName;
    	      this.location = defaults.location;
    	      this.parameters = defaults.parameters;
    	      this.project = defaults.project;
        }

        public Builder environment(@Nullable Output<RuntimeEnvironmentArgs> environment) {
            this.environment = environment;
            return this;
        }

        public Builder environment(@Nullable RuntimeEnvironmentArgs environment) {
            this.environment = Output.ofNullable(environment);
            return this;
        }

        public Builder gcsPath(Output<String> gcsPath) {
            this.gcsPath = Objects.requireNonNull(gcsPath);
            return this;
        }

        public Builder gcsPath(String gcsPath) {
            this.gcsPath = Output.of(Objects.requireNonNull(gcsPath));
            return this;
        }

        public Builder jobName(Output<String> jobName) {
            this.jobName = Objects.requireNonNull(jobName);
            return this;
        }

        public Builder jobName(String jobName) {
            this.jobName = Output.of(Objects.requireNonNull(jobName));
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public TemplateArgs build() {
            return new TemplateArgs(environment, gcsPath, jobName, location, parameters, project);
        }
    }
}
