// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.WorkerSettingsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class TaskRunnerSettingsResponse {
    /**
     * Whether to also send taskrunner log info to stderr.
     * 
     */
    private final Boolean alsologtostderr;
    /**
     * The location on the worker for task-specific subdirectories.
     * 
     */
    private final String baseTaskDir;
    /**
     * The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
     * 
     */
    private final String baseUrl;
    /**
     * The file to store preprocessing commands in.
     * 
     */
    private final String commandlinesFileName;
    /**
     * Whether to continue taskrunner if an exception is hit.
     * 
     */
    private final Boolean continueOnException;
    /**
     * The API version of endpoint, e.g. "v1b3"
     * 
     */
    private final String dataflowApiVersion;
    /**
     * The command to launch the worker harness.
     * 
     */
    private final String harnessCommand;
    /**
     * The suggested backend language.
     * 
     */
    private final String languageHint;
    /**
     * The directory on the VM to store logs.
     * 
     */
    private final String logDir;
    /**
     * Whether to send taskrunner log info to Google Compute Engine VM serial console.
     * 
     */
    private final Boolean logToSerialconsole;
    /**
     * Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    private final String logUploadLocation;
    /**
     * The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
     * 
     */
    private final List<String> oauthScopes;
    /**
     * The settings to pass to the parallel worker harness.
     * 
     */
    private final WorkerSettingsResponse parallelWorkerSettings;
    /**
     * The streaming worker main class name.
     * 
     */
    private final String streamingWorkerMainClass;
    /**
     * The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
     * 
     */
    private final String taskGroup;
    /**
     * The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
     * 
     */
    private final String taskUser;
    /**
     * The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    private final String tempStoragePrefix;
    /**
     * The ID string of the VM.
     * 
     */
    private final String vmId;
    /**
     * The file to store the workflow in.
     * 
     */
    private final String workflowFileName;

    @OutputCustomType.Constructor({"alsologtostderr","baseTaskDir","baseUrl","commandlinesFileName","continueOnException","dataflowApiVersion","harnessCommand","languageHint","logDir","logToSerialconsole","logUploadLocation","oauthScopes","parallelWorkerSettings","streamingWorkerMainClass","taskGroup","taskUser","tempStoragePrefix","vmId","workflowFileName"})
    private TaskRunnerSettingsResponse(
        Boolean alsologtostderr,
        String baseTaskDir,
        String baseUrl,
        String commandlinesFileName,
        Boolean continueOnException,
        String dataflowApiVersion,
        String harnessCommand,
        String languageHint,
        String logDir,
        Boolean logToSerialconsole,
        String logUploadLocation,
        List<String> oauthScopes,
        WorkerSettingsResponse parallelWorkerSettings,
        String streamingWorkerMainClass,
        String taskGroup,
        String taskUser,
        String tempStoragePrefix,
        String vmId,
        String workflowFileName) {
        this.alsologtostderr = Objects.requireNonNull(alsologtostderr);
        this.baseTaskDir = Objects.requireNonNull(baseTaskDir);
        this.baseUrl = Objects.requireNonNull(baseUrl);
        this.commandlinesFileName = Objects.requireNonNull(commandlinesFileName);
        this.continueOnException = Objects.requireNonNull(continueOnException);
        this.dataflowApiVersion = Objects.requireNonNull(dataflowApiVersion);
        this.harnessCommand = Objects.requireNonNull(harnessCommand);
        this.languageHint = Objects.requireNonNull(languageHint);
        this.logDir = Objects.requireNonNull(logDir);
        this.logToSerialconsole = Objects.requireNonNull(logToSerialconsole);
        this.logUploadLocation = Objects.requireNonNull(logUploadLocation);
        this.oauthScopes = Objects.requireNonNull(oauthScopes);
        this.parallelWorkerSettings = Objects.requireNonNull(parallelWorkerSettings);
        this.streamingWorkerMainClass = Objects.requireNonNull(streamingWorkerMainClass);
        this.taskGroup = Objects.requireNonNull(taskGroup);
        this.taskUser = Objects.requireNonNull(taskUser);
        this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix);
        this.vmId = Objects.requireNonNull(vmId);
        this.workflowFileName = Objects.requireNonNull(workflowFileName);
    }

    /**
     * Whether to also send taskrunner log info to stderr.
     * 
     */
    public Boolean getAlsologtostderr() {
        return this.alsologtostderr;
    }
    /**
     * The location on the worker for task-specific subdirectories.
     * 
     */
    public String getBaseTaskDir() {
        return this.baseTaskDir;
    }
    /**
     * The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
     * 
     */
    public String getBaseUrl() {
        return this.baseUrl;
    }
    /**
     * The file to store preprocessing commands in.
     * 
     */
    public String getCommandlinesFileName() {
        return this.commandlinesFileName;
    }
    /**
     * Whether to continue taskrunner if an exception is hit.
     * 
     */
    public Boolean getContinueOnException() {
        return this.continueOnException;
    }
    /**
     * The API version of endpoint, e.g. "v1b3"
     * 
     */
    public String getDataflowApiVersion() {
        return this.dataflowApiVersion;
    }
    /**
     * The command to launch the worker harness.
     * 
     */
    public String getHarnessCommand() {
        return this.harnessCommand;
    }
    /**
     * The suggested backend language.
     * 
     */
    public String getLanguageHint() {
        return this.languageHint;
    }
    /**
     * The directory on the VM to store logs.
     * 
     */
    public String getLogDir() {
        return this.logDir;
    }
    /**
     * Whether to send taskrunner log info to Google Compute Engine VM serial console.
     * 
     */
    public Boolean getLogToSerialconsole() {
        return this.logToSerialconsole;
    }
    /**
     * Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    public String getLogUploadLocation() {
        return this.logUploadLocation;
    }
    /**
     * The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
     * 
     */
    public List<String> getOauthScopes() {
        return this.oauthScopes;
    }
    /**
     * The settings to pass to the parallel worker harness.
     * 
     */
    public WorkerSettingsResponse getParallelWorkerSettings() {
        return this.parallelWorkerSettings;
    }
    /**
     * The streaming worker main class name.
     * 
     */
    public String getStreamingWorkerMainClass() {
        return this.streamingWorkerMainClass;
    }
    /**
     * The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
     * 
     */
    public String getTaskGroup() {
        return this.taskGroup;
    }
    /**
     * The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
     * 
     */
    public String getTaskUser() {
        return this.taskUser;
    }
    /**
     * The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    public String getTempStoragePrefix() {
        return this.tempStoragePrefix;
    }
    /**
     * The ID string of the VM.
     * 
     */
    public String getVmId() {
        return this.vmId;
    }
    /**
     * The file to store the workflow in.
     * 
     */
    public String getWorkflowFileName() {
        return this.workflowFileName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskRunnerSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean alsologtostderr;
        private String baseTaskDir;
        private String baseUrl;
        private String commandlinesFileName;
        private Boolean continueOnException;
        private String dataflowApiVersion;
        private String harnessCommand;
        private String languageHint;
        private String logDir;
        private Boolean logToSerialconsole;
        private String logUploadLocation;
        private List<String> oauthScopes;
        private WorkerSettingsResponse parallelWorkerSettings;
        private String streamingWorkerMainClass;
        private String taskGroup;
        private String taskUser;
        private String tempStoragePrefix;
        private String vmId;
        private String workflowFileName;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskRunnerSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alsologtostderr = defaults.alsologtostderr;
    	      this.baseTaskDir = defaults.baseTaskDir;
    	      this.baseUrl = defaults.baseUrl;
    	      this.commandlinesFileName = defaults.commandlinesFileName;
    	      this.continueOnException = defaults.continueOnException;
    	      this.dataflowApiVersion = defaults.dataflowApiVersion;
    	      this.harnessCommand = defaults.harnessCommand;
    	      this.languageHint = defaults.languageHint;
    	      this.logDir = defaults.logDir;
    	      this.logToSerialconsole = defaults.logToSerialconsole;
    	      this.logUploadLocation = defaults.logUploadLocation;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.parallelWorkerSettings = defaults.parallelWorkerSettings;
    	      this.streamingWorkerMainClass = defaults.streamingWorkerMainClass;
    	      this.taskGroup = defaults.taskGroup;
    	      this.taskUser = defaults.taskUser;
    	      this.tempStoragePrefix = defaults.tempStoragePrefix;
    	      this.vmId = defaults.vmId;
    	      this.workflowFileName = defaults.workflowFileName;
        }

        public Builder setAlsologtostderr(Boolean alsologtostderr) {
            this.alsologtostderr = Objects.requireNonNull(alsologtostderr);
            return this;
        }

        public Builder setBaseTaskDir(String baseTaskDir) {
            this.baseTaskDir = Objects.requireNonNull(baseTaskDir);
            return this;
        }

        public Builder setBaseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }

        public Builder setCommandlinesFileName(String commandlinesFileName) {
            this.commandlinesFileName = Objects.requireNonNull(commandlinesFileName);
            return this;
        }

        public Builder setContinueOnException(Boolean continueOnException) {
            this.continueOnException = Objects.requireNonNull(continueOnException);
            return this;
        }

        public Builder setDataflowApiVersion(String dataflowApiVersion) {
            this.dataflowApiVersion = Objects.requireNonNull(dataflowApiVersion);
            return this;
        }

        public Builder setHarnessCommand(String harnessCommand) {
            this.harnessCommand = Objects.requireNonNull(harnessCommand);
            return this;
        }

        public Builder setLanguageHint(String languageHint) {
            this.languageHint = Objects.requireNonNull(languageHint);
            return this;
        }

        public Builder setLogDir(String logDir) {
            this.logDir = Objects.requireNonNull(logDir);
            return this;
        }

        public Builder setLogToSerialconsole(Boolean logToSerialconsole) {
            this.logToSerialconsole = Objects.requireNonNull(logToSerialconsole);
            return this;
        }

        public Builder setLogUploadLocation(String logUploadLocation) {
            this.logUploadLocation = Objects.requireNonNull(logUploadLocation);
            return this;
        }

        public Builder setOauthScopes(List<String> oauthScopes) {
            this.oauthScopes = Objects.requireNonNull(oauthScopes);
            return this;
        }

        public Builder setParallelWorkerSettings(WorkerSettingsResponse parallelWorkerSettings) {
            this.parallelWorkerSettings = Objects.requireNonNull(parallelWorkerSettings);
            return this;
        }

        public Builder setStreamingWorkerMainClass(String streamingWorkerMainClass) {
            this.streamingWorkerMainClass = Objects.requireNonNull(streamingWorkerMainClass);
            return this;
        }

        public Builder setTaskGroup(String taskGroup) {
            this.taskGroup = Objects.requireNonNull(taskGroup);
            return this;
        }

        public Builder setTaskUser(String taskUser) {
            this.taskUser = Objects.requireNonNull(taskUser);
            return this;
        }

        public Builder setTempStoragePrefix(String tempStoragePrefix) {
            this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix);
            return this;
        }

        public Builder setVmId(String vmId) {
            this.vmId = Objects.requireNonNull(vmId);
            return this;
        }

        public Builder setWorkflowFileName(String workflowFileName) {
            this.workflowFileName = Objects.requireNonNull(workflowFileName);
            return this;
        }
        public TaskRunnerSettingsResponse build() {
            return new TaskRunnerSettingsResponse(alsologtostderr, baseTaskDir, baseUrl, commandlinesFileName, continueOnException, dataflowApiVersion, harnessCommand, languageHint, logDir, logToSerialconsole, logUploadLocation, oauthScopes, parallelWorkerSettings, streamingWorkerMainClass, taskGroup, taskUser, tempStoragePrefix, vmId, workflowFileName);
        }
    }
}
