// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.AvroOptionsArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.BigtableOptionsArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.CsvOptionsArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.GoogleSheetsOptionsArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.HivePartitioningOptionsArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.ParquetOptionsArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.TableSchemaArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExternalDataConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExternalDataConfigurationArgs Empty = new ExternalDataConfigurationArgs();

    /**
     * Try to detect schema and format options automatically. Any option specified explicitly will be honored.
     * 
     */
    @InputImport(name="autodetect")
    private final @Nullable Input<Boolean> autodetect;

    public Input<Boolean> getAutodetect() {
        return this.autodetect == null ? Input.empty() : this.autodetect;
    }

    /**
     * Additional properties to set if sourceFormat is set to Avro.
     * 
     */
    @InputImport(name="avroOptions")
    private final @Nullable Input<AvroOptionsArgs> avroOptions;

    public Input<AvroOptionsArgs> getAvroOptions() {
        return this.avroOptions == null ? Input.empty() : this.avroOptions;
    }

    /**
     * [Optional] Additional options if sourceFormat is set to BIGTABLE.
     * 
     */
    @InputImport(name="bigtableOptions")
    private final @Nullable Input<BigtableOptionsArgs> bigtableOptions;

    public Input<BigtableOptionsArgs> getBigtableOptions() {
        return this.bigtableOptions == null ? Input.empty() : this.bigtableOptions;
    }

    /**
     * [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
     * 
     */
    @InputImport(name="compression")
    private final @Nullable Input<String> compression;

    public Input<String> getCompression() {
        return this.compression == null ? Input.empty() : this.compression;
    }

    /**
     * [Optional, Trusted Tester] Connection for external data source.
     * 
     */
    @InputImport(name="connectionId")
    private final @Nullable Input<String> connectionId;

    public Input<String> getConnectionId() {
        return this.connectionId == null ? Input.empty() : this.connectionId;
    }

    /**
     * Additional properties to set if sourceFormat is set to CSV.
     * 
     */
    @InputImport(name="csvOptions")
    private final @Nullable Input<CsvOptionsArgs> csvOptions;

    public Input<CsvOptionsArgs> getCsvOptions() {
        return this.csvOptions == null ? Input.empty() : this.csvOptions;
    }

    /**
     * [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
     * 
     */
    @InputImport(name="decimalTargetTypes")
    private final @Nullable Input<List<String>> decimalTargetTypes;

    public Input<List<String>> getDecimalTargetTypes() {
        return this.decimalTargetTypes == null ? Input.empty() : this.decimalTargetTypes;
    }

    /**
     * [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
     * 
     */
    @InputImport(name="googleSheetsOptions")
    private final @Nullable Input<GoogleSheetsOptionsArgs> googleSheetsOptions;

    public Input<GoogleSheetsOptionsArgs> getGoogleSheetsOptions() {
        return this.googleSheetsOptions == null ? Input.empty() : this.googleSheetsOptions;
    }

    /**
     * [Optional] Options to configure hive partitioning support.
     * 
     */
    @InputImport(name="hivePartitioningOptions")
    private final @Nullable Input<HivePartitioningOptionsArgs> hivePartitioningOptions;

    public Input<HivePartitioningOptionsArgs> getHivePartitioningOptions() {
        return this.hivePartitioningOptions == null ? Input.empty() : this.hivePartitioningOptions;
    }

    /**
     * [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
     * 
     */
    @InputImport(name="ignoreUnknownValues")
    private final @Nullable Input<Boolean> ignoreUnknownValues;

    public Input<Boolean> getIgnoreUnknownValues() {
        return this.ignoreUnknownValues == null ? Input.empty() : this.ignoreUnknownValues;
    }

    /**
     * [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
     * 
     */
    @InputImport(name="maxBadRecords")
    private final @Nullable Input<Integer> maxBadRecords;

    public Input<Integer> getMaxBadRecords() {
        return this.maxBadRecords == null ? Input.empty() : this.maxBadRecords;
    }

    /**
     * Additional properties to set if sourceFormat is set to Parquet.
     * 
     */
    @InputImport(name="parquetOptions")
    private final @Nullable Input<ParquetOptionsArgs> parquetOptions;

    public Input<ParquetOptionsArgs> getParquetOptions() {
        return this.parquetOptions == null ? Input.empty() : this.parquetOptions;
    }

    /**
     * [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
     * 
     */
    @InputImport(name="schema")
    private final @Nullable Input<TableSchemaArgs> schema;

    public Input<TableSchemaArgs> getSchema() {
        return this.schema == null ? Input.empty() : this.schema;
    }

    /**
     * [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
     * 
     */
    @InputImport(name="sourceFormat")
    private final @Nullable Input<String> sourceFormat;

    public Input<String> getSourceFormat() {
        return this.sourceFormat == null ? Input.empty() : this.sourceFormat;
    }

    /**
     * [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
     * 
     */
    @InputImport(name="sourceUris")
    private final @Nullable Input<List<String>> sourceUris;

    public Input<List<String>> getSourceUris() {
        return this.sourceUris == null ? Input.empty() : this.sourceUris;
    }

    public ExternalDataConfigurationArgs(
        @Nullable Input<Boolean> autodetect,
        @Nullable Input<AvroOptionsArgs> avroOptions,
        @Nullable Input<BigtableOptionsArgs> bigtableOptions,
        @Nullable Input<String> compression,
        @Nullable Input<String> connectionId,
        @Nullable Input<CsvOptionsArgs> csvOptions,
        @Nullable Input<List<String>> decimalTargetTypes,
        @Nullable Input<GoogleSheetsOptionsArgs> googleSheetsOptions,
        @Nullable Input<HivePartitioningOptionsArgs> hivePartitioningOptions,
        @Nullable Input<Boolean> ignoreUnknownValues,
        @Nullable Input<Integer> maxBadRecords,
        @Nullable Input<ParquetOptionsArgs> parquetOptions,
        @Nullable Input<TableSchemaArgs> schema,
        @Nullable Input<String> sourceFormat,
        @Nullable Input<List<String>> sourceUris) {
        this.autodetect = autodetect;
        this.avroOptions = avroOptions;
        this.bigtableOptions = bigtableOptions;
        this.compression = compression;
        this.connectionId = connectionId;
        this.csvOptions = csvOptions;
        this.decimalTargetTypes = decimalTargetTypes;
        this.googleSheetsOptions = googleSheetsOptions;
        this.hivePartitioningOptions = hivePartitioningOptions;
        this.ignoreUnknownValues = ignoreUnknownValues;
        this.maxBadRecords = maxBadRecords;
        this.parquetOptions = parquetOptions;
        this.schema = schema;
        this.sourceFormat = sourceFormat;
        this.sourceUris = sourceUris;
    }

    private ExternalDataConfigurationArgs() {
        this.autodetect = Input.empty();
        this.avroOptions = Input.empty();
        this.bigtableOptions = Input.empty();
        this.compression = Input.empty();
        this.connectionId = Input.empty();
        this.csvOptions = Input.empty();
        this.decimalTargetTypes = Input.empty();
        this.googleSheetsOptions = Input.empty();
        this.hivePartitioningOptions = Input.empty();
        this.ignoreUnknownValues = Input.empty();
        this.maxBadRecords = Input.empty();
        this.parquetOptions = Input.empty();
        this.schema = Input.empty();
        this.sourceFormat = Input.empty();
        this.sourceUris = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalDataConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> autodetect;
        private @Nullable Input<AvroOptionsArgs> avroOptions;
        private @Nullable Input<BigtableOptionsArgs> bigtableOptions;
        private @Nullable Input<String> compression;
        private @Nullable Input<String> connectionId;
        private @Nullable Input<CsvOptionsArgs> csvOptions;
        private @Nullable Input<List<String>> decimalTargetTypes;
        private @Nullable Input<GoogleSheetsOptionsArgs> googleSheetsOptions;
        private @Nullable Input<HivePartitioningOptionsArgs> hivePartitioningOptions;
        private @Nullable Input<Boolean> ignoreUnknownValues;
        private @Nullable Input<Integer> maxBadRecords;
        private @Nullable Input<ParquetOptionsArgs> parquetOptions;
        private @Nullable Input<TableSchemaArgs> schema;
        private @Nullable Input<String> sourceFormat;
        private @Nullable Input<List<String>> sourceUris;

        public Builder() {
    	      // Empty
        }

        public Builder(ExternalDataConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodetect = defaults.autodetect;
    	      this.avroOptions = defaults.avroOptions;
    	      this.bigtableOptions = defaults.bigtableOptions;
    	      this.compression = defaults.compression;
    	      this.connectionId = defaults.connectionId;
    	      this.csvOptions = defaults.csvOptions;
    	      this.decimalTargetTypes = defaults.decimalTargetTypes;
    	      this.googleSheetsOptions = defaults.googleSheetsOptions;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.parquetOptions = defaults.parquetOptions;
    	      this.schema = defaults.schema;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
        }

        public Builder setAutodetect(@Nullable Input<Boolean> autodetect) {
            this.autodetect = autodetect;
            return this;
        }

        public Builder setAutodetect(@Nullable Boolean autodetect) {
            this.autodetect = Input.ofNullable(autodetect);
            return this;
        }

        public Builder setAvroOptions(@Nullable Input<AvroOptionsArgs> avroOptions) {
            this.avroOptions = avroOptions;
            return this;
        }

        public Builder setAvroOptions(@Nullable AvroOptionsArgs avroOptions) {
            this.avroOptions = Input.ofNullable(avroOptions);
            return this;
        }

        public Builder setBigtableOptions(@Nullable Input<BigtableOptionsArgs> bigtableOptions) {
            this.bigtableOptions = bigtableOptions;
            return this;
        }

        public Builder setBigtableOptions(@Nullable BigtableOptionsArgs bigtableOptions) {
            this.bigtableOptions = Input.ofNullable(bigtableOptions);
            return this;
        }

        public Builder setCompression(@Nullable Input<String> compression) {
            this.compression = compression;
            return this;
        }

        public Builder setCompression(@Nullable String compression) {
            this.compression = Input.ofNullable(compression);
            return this;
        }

        public Builder setConnectionId(@Nullable Input<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder setConnectionId(@Nullable String connectionId) {
            this.connectionId = Input.ofNullable(connectionId);
            return this;
        }

        public Builder setCsvOptions(@Nullable Input<CsvOptionsArgs> csvOptions) {
            this.csvOptions = csvOptions;
            return this;
        }

        public Builder setCsvOptions(@Nullable CsvOptionsArgs csvOptions) {
            this.csvOptions = Input.ofNullable(csvOptions);
            return this;
        }

        public Builder setDecimalTargetTypes(@Nullable Input<List<String>> decimalTargetTypes) {
            this.decimalTargetTypes = decimalTargetTypes;
            return this;
        }

        public Builder setDecimalTargetTypes(@Nullable List<String> decimalTargetTypes) {
            this.decimalTargetTypes = Input.ofNullable(decimalTargetTypes);
            return this;
        }

        public Builder setGoogleSheetsOptions(@Nullable Input<GoogleSheetsOptionsArgs> googleSheetsOptions) {
            this.googleSheetsOptions = googleSheetsOptions;
            return this;
        }

        public Builder setGoogleSheetsOptions(@Nullable GoogleSheetsOptionsArgs googleSheetsOptions) {
            this.googleSheetsOptions = Input.ofNullable(googleSheetsOptions);
            return this;
        }

        public Builder setHivePartitioningOptions(@Nullable Input<HivePartitioningOptionsArgs> hivePartitioningOptions) {
            this.hivePartitioningOptions = hivePartitioningOptions;
            return this;
        }

        public Builder setHivePartitioningOptions(@Nullable HivePartitioningOptionsArgs hivePartitioningOptions) {
            this.hivePartitioningOptions = Input.ofNullable(hivePartitioningOptions);
            return this;
        }

        public Builder setIgnoreUnknownValues(@Nullable Input<Boolean> ignoreUnknownValues) {
            this.ignoreUnknownValues = ignoreUnknownValues;
            return this;
        }

        public Builder setIgnoreUnknownValues(@Nullable Boolean ignoreUnknownValues) {
            this.ignoreUnknownValues = Input.ofNullable(ignoreUnknownValues);
            return this;
        }

        public Builder setMaxBadRecords(@Nullable Input<Integer> maxBadRecords) {
            this.maxBadRecords = maxBadRecords;
            return this;
        }

        public Builder setMaxBadRecords(@Nullable Integer maxBadRecords) {
            this.maxBadRecords = Input.ofNullable(maxBadRecords);
            return this;
        }

        public Builder setParquetOptions(@Nullable Input<ParquetOptionsArgs> parquetOptions) {
            this.parquetOptions = parquetOptions;
            return this;
        }

        public Builder setParquetOptions(@Nullable ParquetOptionsArgs parquetOptions) {
            this.parquetOptions = Input.ofNullable(parquetOptions);
            return this;
        }

        public Builder setSchema(@Nullable Input<TableSchemaArgs> schema) {
            this.schema = schema;
            return this;
        }

        public Builder setSchema(@Nullable TableSchemaArgs schema) {
            this.schema = Input.ofNullable(schema);
            return this;
        }

        public Builder setSourceFormat(@Nullable Input<String> sourceFormat) {
            this.sourceFormat = sourceFormat;
            return this;
        }

        public Builder setSourceFormat(@Nullable String sourceFormat) {
            this.sourceFormat = Input.ofNullable(sourceFormat);
            return this;
        }

        public Builder setSourceUris(@Nullable Input<List<String>> sourceUris) {
            this.sourceUris = sourceUris;
            return this;
        }

        public Builder setSourceUris(@Nullable List<String> sourceUris) {
            this.sourceUris = Input.ofNullable(sourceUris);
            return this;
        }

        public ExternalDataConfigurationArgs build() {
            return new ExternalDataConfigurationArgs(autodetect, avroOptions, bigtableOptions, compression, connectionId, csvOptions, decimalTargetTypes, googleSheetsOptions, hivePartitioningOptions, ignoreUnknownValues, maxBadRecords, parquetOptions, schema, sourceFormat, sourceUris);
        }
    }
}
