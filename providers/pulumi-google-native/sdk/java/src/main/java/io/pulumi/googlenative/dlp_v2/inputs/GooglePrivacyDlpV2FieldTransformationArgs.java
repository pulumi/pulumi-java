// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dlp_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2FieldIdArgs;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2InfoTypeTransformationsArgs;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2PrimitiveTransformationArgs;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2RecordConditionArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The transformation to apply to the field.
 * 
 */
public final class GooglePrivacyDlpV2FieldTransformationArgs extends io.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2FieldTransformationArgs Empty = new GooglePrivacyDlpV2FieldTransformationArgs();

    /**
     * Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
     * 
     */
    @Import(name="condition")
      private final @Nullable Output<GooglePrivacyDlpV2RecordConditionArgs> condition;

    public Output<GooglePrivacyDlpV2RecordConditionArgs> getCondition() {
        return this.condition == null ? Codegen.empty() : this.condition;
    }

    /**
     * Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
     * 
     */
    @Import(name="fields", required=true)
      private final Output<List<GooglePrivacyDlpV2FieldIdArgs>> fields;

    public Output<List<GooglePrivacyDlpV2FieldIdArgs>> getFields() {
        return this.fields;
    }

    /**
     * Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
     * 
     */
    @Import(name="infoTypeTransformations")
      private final @Nullable Output<GooglePrivacyDlpV2InfoTypeTransformationsArgs> infoTypeTransformations;

    public Output<GooglePrivacyDlpV2InfoTypeTransformationsArgs> getInfoTypeTransformations() {
        return this.infoTypeTransformations == null ? Codegen.empty() : this.infoTypeTransformations;
    }

    /**
     * Apply the transformation to the entire field.
     * 
     */
    @Import(name="primitiveTransformation")
      private final @Nullable Output<GooglePrivacyDlpV2PrimitiveTransformationArgs> primitiveTransformation;

    public Output<GooglePrivacyDlpV2PrimitiveTransformationArgs> getPrimitiveTransformation() {
        return this.primitiveTransformation == null ? Codegen.empty() : this.primitiveTransformation;
    }

    public GooglePrivacyDlpV2FieldTransformationArgs(
        @Nullable Output<GooglePrivacyDlpV2RecordConditionArgs> condition,
        Output<List<GooglePrivacyDlpV2FieldIdArgs>> fields,
        @Nullable Output<GooglePrivacyDlpV2InfoTypeTransformationsArgs> infoTypeTransformations,
        @Nullable Output<GooglePrivacyDlpV2PrimitiveTransformationArgs> primitiveTransformation) {
        this.condition = condition;
        this.fields = Objects.requireNonNull(fields, "expected parameter 'fields' to be non-null");
        this.infoTypeTransformations = infoTypeTransformations;
        this.primitiveTransformation = primitiveTransformation;
    }

    private GooglePrivacyDlpV2FieldTransformationArgs() {
        this.condition = Codegen.empty();
        this.fields = Codegen.empty();
        this.infoTypeTransformations = Codegen.empty();
        this.primitiveTransformation = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2FieldTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<GooglePrivacyDlpV2RecordConditionArgs> condition;
        private Output<List<GooglePrivacyDlpV2FieldIdArgs>> fields;
        private @Nullable Output<GooglePrivacyDlpV2InfoTypeTransformationsArgs> infoTypeTransformations;
        private @Nullable Output<GooglePrivacyDlpV2PrimitiveTransformationArgs> primitiveTransformation;

        public Builder() {
    	      // Empty
        }

        public Builder(GooglePrivacyDlpV2FieldTransformationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.fields = defaults.fields;
    	      this.infoTypeTransformations = defaults.infoTypeTransformations;
    	      this.primitiveTransformation = defaults.primitiveTransformation;
        }

        public Builder condition(@Nullable Output<GooglePrivacyDlpV2RecordConditionArgs> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable GooglePrivacyDlpV2RecordConditionArgs condition) {
            this.condition = Codegen.ofNullable(condition);
            return this;
        }
        public Builder fields(Output<List<GooglePrivacyDlpV2FieldIdArgs>> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(List<GooglePrivacyDlpV2FieldIdArgs> fields) {
            this.fields = Output.of(Objects.requireNonNull(fields));
            return this;
        }
        public Builder fields(GooglePrivacyDlpV2FieldIdArgs... fields) {
            return fields(List.of(fields));
        }
        public Builder infoTypeTransformations(@Nullable Output<GooglePrivacyDlpV2InfoTypeTransformationsArgs> infoTypeTransformations) {
            this.infoTypeTransformations = infoTypeTransformations;
            return this;
        }
        public Builder infoTypeTransformations(@Nullable GooglePrivacyDlpV2InfoTypeTransformationsArgs infoTypeTransformations) {
            this.infoTypeTransformations = Codegen.ofNullable(infoTypeTransformations);
            return this;
        }
        public Builder primitiveTransformation(@Nullable Output<GooglePrivacyDlpV2PrimitiveTransformationArgs> primitiveTransformation) {
            this.primitiveTransformation = primitiveTransformation;
            return this;
        }
        public Builder primitiveTransformation(@Nullable GooglePrivacyDlpV2PrimitiveTransformationArgs primitiveTransformation) {
            this.primitiveTransformation = Codegen.ofNullable(primitiveTransformation);
            return this;
        }        public GooglePrivacyDlpV2FieldTransformationArgs build() {
            return new GooglePrivacyDlpV2FieldTransformationArgs(condition, fields, infoTypeTransformations, primitiveTransformation);
        }
    }
}
