// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.genomics_v1alpha2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class DockerExecutorArgs extends io.pulumi.resources.ResourceArgs {

    public static final DockerExecutorArgs Empty = new DockerExecutorArgs();

    @InputImport(name="cmd", required=true)
    private final Input<String> cmd;

    public Input<String> getCmd() {
        return this.cmd;
    }

    @InputImport(name="imageName", required=true)
    private final Input<String> imageName;

    public Input<String> getImageName() {
        return this.imageName;
    }

    public DockerExecutorArgs(
        Input<String> cmd,
        Input<String> imageName) {
        this.cmd = Objects.requireNonNull(cmd, "expected parameter 'cmd' to be non-null");
        this.imageName = Objects.requireNonNull(imageName, "expected parameter 'imageName' to be non-null");
    }

    private DockerExecutorArgs() {
        this.cmd = Input.empty();
        this.imageName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DockerExecutorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> cmd;
        private Input<String> imageName;

        public Builder() {
    	      // Empty
        }

        public Builder(DockerExecutorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cmd = defaults.cmd;
    	      this.imageName = defaults.imageName;
        }

        public Builder setCmd(Input<String> cmd) {
            this.cmd = Objects.requireNonNull(cmd);
            return this;
        }

        public Builder setCmd(String cmd) {
            this.cmd = Input.of(Objects.requireNonNull(cmd));
            return this;
        }

        public Builder setImageName(Input<String> imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }

        public Builder setImageName(String imageName) {
            this.imageName = Input.of(Objects.requireNonNull(imageName));
            return this;
        }

        public DockerExecutorArgs build() {
            return new DockerExecutorArgs(cmd, imageName);
        }
    }
}
