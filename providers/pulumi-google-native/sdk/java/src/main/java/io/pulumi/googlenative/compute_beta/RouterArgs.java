// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_beta.inputs.RouterBgpArgs;
import io.pulumi.googlenative.compute_beta.inputs.RouterBgpPeerArgs;
import io.pulumi.googlenative.compute_beta.inputs.RouterInterfaceArgs;
import io.pulumi.googlenative.compute_beta.inputs.RouterNatArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouterArgs Empty = new RouterArgs();

    /**
     * BGP information specific to this router.
     * 
     */
    @InputImport(name="bgp")
      private final @Nullable Input<RouterBgpArgs> bgp;

    public Input<RouterBgpArgs> getBgp() {
        return this.bgp == null ? Input.empty() : this.bgp;
    }

    /**
     * BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273.
     * 
     */
    @InputImport(name="bgpPeers")
      private final @Nullable Input<List<RouterBgpPeerArgs>> bgpPeers;

    public Input<List<RouterBgpPeerArgs>> getBgpPeers() {
        return this.bgpPeers == null ? Input.empty() : this.bgpPeers;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Indicates if a router is dedicated for use with encrypted VLAN attachments (interconnectAttachments). Not currently available publicly.
     * 
     */
    @InputImport(name="encryptedInterconnectRouter")
      private final @Nullable Input<Boolean> encryptedInterconnectRouter;

    public Input<Boolean> getEncryptedInterconnectRouter() {
        return this.encryptedInterconnectRouter == null ? Input.empty() : this.encryptedInterconnectRouter;
    }

    /**
     * Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both.
     * 
     */
    @InputImport(name="interfaces")
      private final @Nullable Input<List<RouterInterfaceArgs>> interfaces;

    public Input<List<RouterInterfaceArgs>> getInterfaces() {
        return this.interfaces == null ? Input.empty() : this.interfaces;
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A list of NAT services created in this router.
     * 
     */
    @InputImport(name="nats")
      private final @Nullable Input<List<RouterNatArgs>> nats;

    public Input<List<RouterNatArgs>> getNats() {
        return this.nats == null ? Input.empty() : this.nats;
    }

    /**
     * URI of the network to which this router belongs.
     * 
     */
    @InputImport(name="network")
      private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region", required=true)
      private final Input<String> region;

    public Input<String> getRegion() {
        return this.region;
    }

    @InputImport(name="requestId")
      private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    public RouterArgs(
        @Nullable Input<RouterBgpArgs> bgp,
        @Nullable Input<List<RouterBgpPeerArgs>> bgpPeers,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> encryptedInterconnectRouter,
        @Nullable Input<List<RouterInterfaceArgs>> interfaces,
        @Nullable Input<String> name,
        @Nullable Input<List<RouterNatArgs>> nats,
        @Nullable Input<String> network,
        @Nullable Input<String> project,
        Input<String> region,
        @Nullable Input<String> requestId) {
        this.bgp = bgp;
        this.bgpPeers = bgpPeers;
        this.description = description;
        this.encryptedInterconnectRouter = encryptedInterconnectRouter;
        this.interfaces = interfaces;
        this.name = name;
        this.nats = nats;
        this.network = network;
        this.project = project;
        this.region = Objects.requireNonNull(region, "expected parameter 'region' to be non-null");
        this.requestId = requestId;
    }

    private RouterArgs() {
        this.bgp = Input.empty();
        this.bgpPeers = Input.empty();
        this.description = Input.empty();
        this.encryptedInterconnectRouter = Input.empty();
        this.interfaces = Input.empty();
        this.name = Input.empty();
        this.nats = Input.empty();
        this.network = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.requestId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RouterBgpArgs> bgp;
        private @Nullable Input<List<RouterBgpPeerArgs>> bgpPeers;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> encryptedInterconnectRouter;
        private @Nullable Input<List<RouterInterfaceArgs>> interfaces;
        private @Nullable Input<String> name;
        private @Nullable Input<List<RouterNatArgs>> nats;
        private @Nullable Input<String> network;
        private @Nullable Input<String> project;
        private Input<String> region;
        private @Nullable Input<String> requestId;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgp = defaults.bgp;
    	      this.bgpPeers = defaults.bgpPeers;
    	      this.description = defaults.description;
    	      this.encryptedInterconnectRouter = defaults.encryptedInterconnectRouter;
    	      this.interfaces = defaults.interfaces;
    	      this.name = defaults.name;
    	      this.nats = defaults.nats;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.requestId = defaults.requestId;
        }

        public Builder bgp(@Nullable Input<RouterBgpArgs> bgp) {
            this.bgp = bgp;
            return this;
        }

        public Builder bgp(@Nullable RouterBgpArgs bgp) {
            this.bgp = Input.ofNullable(bgp);
            return this;
        }

        public Builder bgpPeers(@Nullable Input<List<RouterBgpPeerArgs>> bgpPeers) {
            this.bgpPeers = bgpPeers;
            return this;
        }

        public Builder bgpPeers(@Nullable List<RouterBgpPeerArgs> bgpPeers) {
            this.bgpPeers = Input.ofNullable(bgpPeers);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder encryptedInterconnectRouter(@Nullable Input<Boolean> encryptedInterconnectRouter) {
            this.encryptedInterconnectRouter = encryptedInterconnectRouter;
            return this;
        }

        public Builder encryptedInterconnectRouter(@Nullable Boolean encryptedInterconnectRouter) {
            this.encryptedInterconnectRouter = Input.ofNullable(encryptedInterconnectRouter);
            return this;
        }

        public Builder interfaces(@Nullable Input<List<RouterInterfaceArgs>> interfaces) {
            this.interfaces = interfaces;
            return this;
        }

        public Builder interfaces(@Nullable List<RouterInterfaceArgs> interfaces) {
            this.interfaces = Input.ofNullable(interfaces);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder nats(@Nullable Input<List<RouterNatArgs>> nats) {
            this.nats = nats;
            return this;
        }

        public Builder nats(@Nullable List<RouterNatArgs> nats) {
            this.nats = Input.ofNullable(nats);
            return this;
        }

        public Builder network(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder network(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder region(Input<String> region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder region(String region) {
            this.region = Input.of(Objects.requireNonNull(region));
            return this;
        }

        public Builder requestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }
        public RouterArgs build() {
            return new RouterArgs(bgp, bgpPeers, description, encryptedInterconnectRouter, interfaces, name, nats, network, project, region, requestId);
        }
    }
}
