// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.enums.ArgumentArgumentKind;
import io.pulumi.googlenative.bigquery_v2.enums.ArgumentMode;
import io.pulumi.googlenative.bigquery_v2.inputs.StandardSqlDataTypeArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ArgumentArgs extends io.pulumi.resources.ResourceArgs {

    public static final ArgumentArgs Empty = new ArgumentArgs();

    @InputImport(name="argumentKind")
    private final @Nullable Input<ArgumentArgumentKind> argumentKind;

    public Input<ArgumentArgumentKind> getArgumentKind() {
        return this.argumentKind == null ? Input.empty() : this.argumentKind;
    }

    @InputImport(name="dataType")
    private final @Nullable Input<StandardSqlDataTypeArgs> dataType;

    public Input<StandardSqlDataTypeArgs> getDataType() {
        return this.dataType == null ? Input.empty() : this.dataType;
    }

    @InputImport(name="mode")
    private final @Nullable Input<ArgumentMode> mode;

    public Input<ArgumentMode> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    public ArgumentArgs(
        @Nullable Input<ArgumentArgumentKind> argumentKind,
        @Nullable Input<StandardSqlDataTypeArgs> dataType,
        @Nullable Input<ArgumentMode> mode,
        @Nullable Input<String> name) {
        this.argumentKind = argumentKind;
        this.dataType = dataType;
        this.mode = mode;
        this.name = name;
    }

    private ArgumentArgs() {
        this.argumentKind = Input.empty();
        this.dataType = Input.empty();
        this.mode = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArgumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ArgumentArgumentKind> argumentKind;
        private @Nullable Input<StandardSqlDataTypeArgs> dataType;
        private @Nullable Input<ArgumentMode> mode;
        private @Nullable Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(ArgumentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.argumentKind = defaults.argumentKind;
    	      this.dataType = defaults.dataType;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
        }

        public Builder setArgumentKind(@Nullable Input<ArgumentArgumentKind> argumentKind) {
            this.argumentKind = argumentKind;
            return this;
        }

        public Builder setArgumentKind(@Nullable ArgumentArgumentKind argumentKind) {
            this.argumentKind = Input.ofNullable(argumentKind);
            return this;
        }

        public Builder setDataType(@Nullable Input<StandardSqlDataTypeArgs> dataType) {
            this.dataType = dataType;
            return this;
        }

        public Builder setDataType(@Nullable StandardSqlDataTypeArgs dataType) {
            this.dataType = Input.ofNullable(dataType);
            return this;
        }

        public Builder setMode(@Nullable Input<ArgumentMode> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable ArgumentMode mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public ArgumentArgs build() {
            return new ArgumentArgs(argumentKind, dataType, mode, name);
        }
    }
}
