// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudresourcemanager_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudresourcemanager_v1.enums.ProjectLifecycleState;
import io.pulumi.googlenative.cloudresourcemanager_v1.inputs.ResourceIdArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Creation time. Read-only.
     * 
     */
    @InputImport(name="createTime")
    private final @Nullable Input<String> createTime;

    public Input<String> getCreateTime() {
        return this.createTime == null ? Input.empty() : this.createTime;
    }

    /**
     * The labels associated with this Project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: a-z{0,62}. Label values must be between 0 and 63 characters long and must conform to the regular expression [a-z0-9_-]{0,63}. A label value can be empty. No more than 256 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: "environment" : "dev" Read-write.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The Project lifecycle state. Read-only.
     * 
     */
    @InputImport(name="lifecycleState")
    private final @Nullable Input<ProjectLifecycleState> lifecycleState;

    public Input<ProjectLifecycleState> getLifecycleState() {
        return this.lifecycleState == null ? Input.empty() : this.lifecycleState;
    }

    /**
     * The optional user-assigned display name of the Project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project` Read-write.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * An optional reference to a parent Resource. Supported parent types include "organization" and "folder". Once set, the parent cannot be cleared. The `parent` can be set on creation or using the `UpdateProject` method; the end user must have the `resourcemanager.projects.create` permission on the parent.
     * 
     */
    @InputImport(name="parent")
    private final @Nullable Input<ResourceIdArgs> parent;

    public Input<ResourceIdArgs> getParent() {
        return this.parent == null ? Input.empty() : this.parent;
    }

    /**
     * The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123` Read-only after creation.
     * 
     */
    @InputImport(name="projectId")
    private final @Nullable Input<String> projectId;

    public Input<String> getProjectId() {
        return this.projectId == null ? Input.empty() : this.projectId;
    }

    /**
     * The number uniquely identifying the project. Example: `415104041262` Read-only.
     * 
     */
    @InputImport(name="projectNumber")
    private final @Nullable Input<String> projectNumber;

    public Input<String> getProjectNumber() {
        return this.projectNumber == null ? Input.empty() : this.projectNumber;
    }

    public ProjectArgs(
        @Nullable Input<String> createTime,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<ProjectLifecycleState> lifecycleState,
        @Nullable Input<String> name,
        @Nullable Input<ResourceIdArgs> parent,
        @Nullable Input<String> projectId,
        @Nullable Input<String> projectNumber) {
        this.createTime = createTime;
        this.labels = labels;
        this.lifecycleState = lifecycleState;
        this.name = name;
        this.parent = parent;
        this.projectId = projectId;
        this.projectNumber = projectNumber;
    }

    private ProjectArgs() {
        this.createTime = Input.empty();
        this.labels = Input.empty();
        this.lifecycleState = Input.empty();
        this.name = Input.empty();
        this.parent = Input.empty();
        this.projectId = Input.empty();
        this.projectNumber = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createTime;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<ProjectLifecycleState> lifecycleState;
        private @Nullable Input<String> name;
        private @Nullable Input<ResourceIdArgs> parent;
        private @Nullable Input<String> projectId;
        private @Nullable Input<String> projectNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.labels = defaults.labels;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.projectId = defaults.projectId;
    	      this.projectNumber = defaults.projectNumber;
        }

        public Builder setCreateTime(@Nullable Input<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder setCreateTime(@Nullable String createTime) {
            this.createTime = Input.ofNullable(createTime);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLifecycleState(@Nullable Input<ProjectLifecycleState> lifecycleState) {
            this.lifecycleState = lifecycleState;
            return this;
        }

        public Builder setLifecycleState(@Nullable ProjectLifecycleState lifecycleState) {
            this.lifecycleState = Input.ofNullable(lifecycleState);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setParent(@Nullable Input<ResourceIdArgs> parent) {
            this.parent = parent;
            return this;
        }

        public Builder setParent(@Nullable ResourceIdArgs parent) {
            this.parent = Input.ofNullable(parent);
            return this;
        }

        public Builder setProjectId(@Nullable Input<String> projectId) {
            this.projectId = projectId;
            return this;
        }

        public Builder setProjectId(@Nullable String projectId) {
            this.projectId = Input.ofNullable(projectId);
            return this;
        }

        public Builder setProjectNumber(@Nullable Input<String> projectNumber) {
            this.projectNumber = projectNumber;
            return this;
        }

        public Builder setProjectNumber(@Nullable String projectNumber) {
            this.projectNumber = Input.ofNullable(projectNumber);
            return this;
        }

        public ProjectArgs build() {
            return new ProjectArgs(createTime, labels, lifecycleState, name, parent, projectId, projectNumber);
        }
    }
}
