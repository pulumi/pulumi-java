// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v3.enums.MetricThresholdComparison;
import io.pulumi.googlenative.monitoring_v3.inputs.AggregationArgs;
import io.pulumi.googlenative.monitoring_v3.inputs.TriggerArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricThresholdArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricThresholdArgs Empty = new MetricThresholdArgs();

    @InputImport(name="aggregations")
    private final @Nullable Input<List<AggregationArgs>> aggregations;

    public Input<List<AggregationArgs>> getAggregations() {
        return this.aggregations == null ? Input.empty() : this.aggregations;
    }

    @InputImport(name="comparison")
    private final @Nullable Input<MetricThresholdComparison> comparison;

    public Input<MetricThresholdComparison> getComparison() {
        return this.comparison == null ? Input.empty() : this.comparison;
    }

    @InputImport(name="denominatorAggregations")
    private final @Nullable Input<List<AggregationArgs>> denominatorAggregations;

    public Input<List<AggregationArgs>> getDenominatorAggregations() {
        return this.denominatorAggregations == null ? Input.empty() : this.denominatorAggregations;
    }

    @InputImport(name="denominatorFilter")
    private final @Nullable Input<String> denominatorFilter;

    public Input<String> getDenominatorFilter() {
        return this.denominatorFilter == null ? Input.empty() : this.denominatorFilter;
    }

    @InputImport(name="duration")
    private final @Nullable Input<String> duration;

    public Input<String> getDuration() {
        return this.duration == null ? Input.empty() : this.duration;
    }

    @InputImport(name="filter", required=true)
    private final Input<String> filter;

    public Input<String> getFilter() {
        return this.filter;
    }

    @InputImport(name="thresholdValue")
    private final @Nullable Input<Double> thresholdValue;

    public Input<Double> getThresholdValue() {
        return this.thresholdValue == null ? Input.empty() : this.thresholdValue;
    }

    @InputImport(name="trigger")
    private final @Nullable Input<TriggerArgs> trigger;

    public Input<TriggerArgs> getTrigger() {
        return this.trigger == null ? Input.empty() : this.trigger;
    }

    public MetricThresholdArgs(
        @Nullable Input<List<AggregationArgs>> aggregations,
        @Nullable Input<MetricThresholdComparison> comparison,
        @Nullable Input<List<AggregationArgs>> denominatorAggregations,
        @Nullable Input<String> denominatorFilter,
        @Nullable Input<String> duration,
        Input<String> filter,
        @Nullable Input<Double> thresholdValue,
        @Nullable Input<TriggerArgs> trigger) {
        this.aggregations = aggregations;
        this.comparison = comparison;
        this.denominatorAggregations = denominatorAggregations;
        this.denominatorFilter = denominatorFilter;
        this.duration = duration;
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.thresholdValue = thresholdValue;
        this.trigger = trigger;
    }

    private MetricThresholdArgs() {
        this.aggregations = Input.empty();
        this.comparison = Input.empty();
        this.denominatorAggregations = Input.empty();
        this.denominatorFilter = Input.empty();
        this.duration = Input.empty();
        this.filter = Input.empty();
        this.thresholdValue = Input.empty();
        this.trigger = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<AggregationArgs>> aggregations;
        private @Nullable Input<MetricThresholdComparison> comparison;
        private @Nullable Input<List<AggregationArgs>> denominatorAggregations;
        private @Nullable Input<String> denominatorFilter;
        private @Nullable Input<String> duration;
        private Input<String> filter;
        private @Nullable Input<Double> thresholdValue;
        private @Nullable Input<TriggerArgs> trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricThresholdArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregations = defaults.aggregations;
    	      this.comparison = defaults.comparison;
    	      this.denominatorAggregations = defaults.denominatorAggregations;
    	      this.denominatorFilter = defaults.denominatorFilter;
    	      this.duration = defaults.duration;
    	      this.filter = defaults.filter;
    	      this.thresholdValue = defaults.thresholdValue;
    	      this.trigger = defaults.trigger;
        }

        public Builder setAggregations(@Nullable Input<List<AggregationArgs>> aggregations) {
            this.aggregations = aggregations;
            return this;
        }

        public Builder setAggregations(@Nullable List<AggregationArgs> aggregations) {
            this.aggregations = Input.ofNullable(aggregations);
            return this;
        }

        public Builder setComparison(@Nullable Input<MetricThresholdComparison> comparison) {
            this.comparison = comparison;
            return this;
        }

        public Builder setComparison(@Nullable MetricThresholdComparison comparison) {
            this.comparison = Input.ofNullable(comparison);
            return this;
        }

        public Builder setDenominatorAggregations(@Nullable Input<List<AggregationArgs>> denominatorAggregations) {
            this.denominatorAggregations = denominatorAggregations;
            return this;
        }

        public Builder setDenominatorAggregations(@Nullable List<AggregationArgs> denominatorAggregations) {
            this.denominatorAggregations = Input.ofNullable(denominatorAggregations);
            return this;
        }

        public Builder setDenominatorFilter(@Nullable Input<String> denominatorFilter) {
            this.denominatorFilter = denominatorFilter;
            return this;
        }

        public Builder setDenominatorFilter(@Nullable String denominatorFilter) {
            this.denominatorFilter = Input.ofNullable(denominatorFilter);
            return this;
        }

        public Builder setDuration(@Nullable Input<String> duration) {
            this.duration = duration;
            return this;
        }

        public Builder setDuration(@Nullable String duration) {
            this.duration = Input.ofNullable(duration);
            return this;
        }

        public Builder setFilter(Input<String> filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder setFilter(String filter) {
            this.filter = Input.of(Objects.requireNonNull(filter));
            return this;
        }

        public Builder setThresholdValue(@Nullable Input<Double> thresholdValue) {
            this.thresholdValue = thresholdValue;
            return this;
        }

        public Builder setThresholdValue(@Nullable Double thresholdValue) {
            this.thresholdValue = Input.ofNullable(thresholdValue);
            return this;
        }

        public Builder setTrigger(@Nullable Input<TriggerArgs> trigger) {
            this.trigger = trigger;
            return this;
        }

        public Builder setTrigger(@Nullable TriggerArgs trigger) {
            this.trigger = Input.ofNullable(trigger);
            return this;
        }

        public MetricThresholdArgs build() {
            return new MetricThresholdArgs(aggregations, comparison, denominatorAggregations, denominatorFilter, duration, filter, thresholdValue, trigger);
        }
    }
}
