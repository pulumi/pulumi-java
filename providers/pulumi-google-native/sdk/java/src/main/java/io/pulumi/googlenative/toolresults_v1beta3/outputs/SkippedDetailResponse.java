// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.util.Objects;

@OutputCustomType
public final class SkippedDetailResponse {
    private final Boolean incompatibleAppVersion;
    private final Boolean incompatibleArchitecture;
    private final Boolean incompatibleDevice;

    @OutputCustomType.Constructor({"incompatibleAppVersion","incompatibleArchitecture","incompatibleDevice"})
    private SkippedDetailResponse(
        Boolean incompatibleAppVersion,
        Boolean incompatibleArchitecture,
        Boolean incompatibleDevice) {
        this.incompatibleAppVersion = Objects.requireNonNull(incompatibleAppVersion);
        this.incompatibleArchitecture = Objects.requireNonNull(incompatibleArchitecture);
        this.incompatibleDevice = Objects.requireNonNull(incompatibleDevice);
    }

    public Boolean getIncompatibleAppVersion() {
        return this.incompatibleAppVersion;
    }
    public Boolean getIncompatibleArchitecture() {
        return this.incompatibleArchitecture;
    }
    public Boolean getIncompatibleDevice() {
        return this.incompatibleDevice;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SkippedDetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean incompatibleAppVersion;
        private Boolean incompatibleArchitecture;
        private Boolean incompatibleDevice;

        public Builder() {
    	      // Empty
        }

        public Builder(SkippedDetailResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.incompatibleAppVersion = defaults.incompatibleAppVersion;
    	      this.incompatibleArchitecture = defaults.incompatibleArchitecture;
    	      this.incompatibleDevice = defaults.incompatibleDevice;
        }

        public Builder setIncompatibleAppVersion(Boolean incompatibleAppVersion) {
            this.incompatibleAppVersion = Objects.requireNonNull(incompatibleAppVersion);
            return this;
        }

        public Builder setIncompatibleArchitecture(Boolean incompatibleArchitecture) {
            this.incompatibleArchitecture = Objects.requireNonNull(incompatibleArchitecture);
            return this;
        }

        public Builder setIncompatibleDevice(Boolean incompatibleDevice) {
            this.incompatibleDevice = Objects.requireNonNull(incompatibleDevice);
            return this;
        }

        public SkippedDetailResponse build() {
            return new SkippedDetailResponse(incompatibleAppVersion, incompatibleArchitecture, incompatibleDevice);
        }
    }
}
