// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1beta2.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class JobSchedulingResponse {
    /**
     * Optional. Maximum number of times per hour a driver may be restarted as a result of driver terminating with non-zero code before job is reported failed.A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window.Maximum value is 10.
     * 
     */
    private final Integer maxFailuresPerHour;
    /**
     * Optional. Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240.
     * 
     */
    private final Integer maxFailuresTotal;

    @CustomType.Constructor
    private JobSchedulingResponse(
        @CustomType.Parameter("maxFailuresPerHour") Integer maxFailuresPerHour,
        @CustomType.Parameter("maxFailuresTotal") Integer maxFailuresTotal) {
        this.maxFailuresPerHour = maxFailuresPerHour;
        this.maxFailuresTotal = maxFailuresTotal;
    }

    /**
     * Optional. Maximum number of times per hour a driver may be restarted as a result of driver terminating with non-zero code before job is reported failed.A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window.Maximum value is 10.
     * 
    */
    public Integer getMaxFailuresPerHour() {
        return this.maxFailuresPerHour;
    }
    /**
     * Optional. Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240.
     * 
    */
    public Integer getMaxFailuresTotal() {
        return this.maxFailuresTotal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobSchedulingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer maxFailuresPerHour;
        private Integer maxFailuresTotal;

        public Builder() {
    	      // Empty
        }

        public Builder(JobSchedulingResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxFailuresPerHour = defaults.maxFailuresPerHour;
    	      this.maxFailuresTotal = defaults.maxFailuresTotal;
        }

        public Builder maxFailuresPerHour(Integer maxFailuresPerHour) {
            this.maxFailuresPerHour = Objects.requireNonNull(maxFailuresPerHour);
            return this;
        }

        public Builder maxFailuresTotal(Integer maxFailuresTotal) {
            this.maxFailuresTotal = Objects.requireNonNull(maxFailuresTotal);
            return this;
        }
        public JobSchedulingResponse build() {
            return new JobSchedulingResponse(maxFailuresPerHour, maxFailuresTotal);
        }
    }
}
