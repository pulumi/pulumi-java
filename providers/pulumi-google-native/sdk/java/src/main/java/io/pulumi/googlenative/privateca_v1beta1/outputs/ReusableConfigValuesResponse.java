// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1beta1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.privateca_v1beta1.outputs.CaOptionsResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.KeyUsageResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.ObjectIdResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.X509ExtensionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class ReusableConfigValuesResponse {
    private final List<X509ExtensionResponse> additionalExtensions;
    private final List<String> aiaOcspServers;
    private final CaOptionsResponse caOptions;
    private final KeyUsageResponse keyUsage;
    private final List<ObjectIdResponse> policyIds;

    @OutputCustomType.Constructor({"additionalExtensions","aiaOcspServers","caOptions","keyUsage","policyIds"})
    private ReusableConfigValuesResponse(
        List<X509ExtensionResponse> additionalExtensions,
        List<String> aiaOcspServers,
        CaOptionsResponse caOptions,
        KeyUsageResponse keyUsage,
        List<ObjectIdResponse> policyIds) {
        this.additionalExtensions = Objects.requireNonNull(additionalExtensions);
        this.aiaOcspServers = Objects.requireNonNull(aiaOcspServers);
        this.caOptions = Objects.requireNonNull(caOptions);
        this.keyUsage = Objects.requireNonNull(keyUsage);
        this.policyIds = Objects.requireNonNull(policyIds);
    }

    public List<X509ExtensionResponse> getAdditionalExtensions() {
        return this.additionalExtensions;
    }
    public List<String> getAiaOcspServers() {
        return this.aiaOcspServers;
    }
    public CaOptionsResponse getCaOptions() {
        return this.caOptions;
    }
    public KeyUsageResponse getKeyUsage() {
        return this.keyUsage;
    }
    public List<ObjectIdResponse> getPolicyIds() {
        return this.policyIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReusableConfigValuesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<X509ExtensionResponse> additionalExtensions;
        private List<String> aiaOcspServers;
        private CaOptionsResponse caOptions;
        private KeyUsageResponse keyUsage;
        private List<ObjectIdResponse> policyIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ReusableConfigValuesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalExtensions = defaults.additionalExtensions;
    	      this.aiaOcspServers = defaults.aiaOcspServers;
    	      this.caOptions = defaults.caOptions;
    	      this.keyUsage = defaults.keyUsage;
    	      this.policyIds = defaults.policyIds;
        }

        public Builder setAdditionalExtensions(List<X509ExtensionResponse> additionalExtensions) {
            this.additionalExtensions = Objects.requireNonNull(additionalExtensions);
            return this;
        }

        public Builder setAiaOcspServers(List<String> aiaOcspServers) {
            this.aiaOcspServers = Objects.requireNonNull(aiaOcspServers);
            return this;
        }

        public Builder setCaOptions(CaOptionsResponse caOptions) {
            this.caOptions = Objects.requireNonNull(caOptions);
            return this;
        }

        public Builder setKeyUsage(KeyUsageResponse keyUsage) {
            this.keyUsage = Objects.requireNonNull(keyUsage);
            return this;
        }

        public Builder setPolicyIds(List<ObjectIdResponse> policyIds) {
            this.policyIds = Objects.requireNonNull(policyIds);
            return this;
        }

        public ReusableConfigValuesResponse build() {
            return new ReusableConfigValuesResponse(additionalExtensions, aiaOcspServers, caOptions, keyUsage, policyIds);
        }
    }
}
