// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.PullRequestFilterArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.PushFilterArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
 * 
 */
public final class BitbucketServerTriggerConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final BitbucketServerTriggerConfigArgs Empty = new BitbucketServerTriggerConfigArgs();

    /**
     * The Bitbucket server config resource that this trigger config maps to.
     * 
     */
    @InputImport(name="bitbucketServerConfigResource", required=true)
      private final Input<String> bitbucketServerConfigResource;

    public Input<String> getBitbucketServerConfigResource() {
        return this.bitbucketServerConfigResource;
    }

    /**
     * Key of the project that the repo is in. For example: The key for http://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
     * 
     */
    @InputImport(name="projectKey", required=true)
      private final Input<String> projectKey;

    public Input<String> getProjectKey() {
        return this.projectKey;
    }

    /**
     * Filter to match changes in pull requests.
     * 
     */
    @InputImport(name="pullRequest")
      private final @Nullable Input<PullRequestFilterArgs> pullRequest;

    public Input<PullRequestFilterArgs> getPullRequest() {
        return this.pullRequest == null ? Input.empty() : this.pullRequest;
    }

    /**
     * Filter to match changes in refs like branches, tags.
     * 
     */
    @InputImport(name="push")
      private final @Nullable Input<PushFilterArgs> push;

    public Input<PushFilterArgs> getPush() {
        return this.push == null ? Input.empty() : this.push;
    }

    /**
     * Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in http://mybitbucket.server/projects/TEST/repos/test-repo.
     * 
     */
    @InputImport(name="repoSlug", required=true)
      private final Input<String> repoSlug;

    public Input<String> getRepoSlug() {
        return this.repoSlug;
    }

    public BitbucketServerTriggerConfigArgs(
        Input<String> bitbucketServerConfigResource,
        Input<String> projectKey,
        @Nullable Input<PullRequestFilterArgs> pullRequest,
        @Nullable Input<PushFilterArgs> push,
        Input<String> repoSlug) {
        this.bitbucketServerConfigResource = Objects.requireNonNull(bitbucketServerConfigResource, "expected parameter 'bitbucketServerConfigResource' to be non-null");
        this.projectKey = Objects.requireNonNull(projectKey, "expected parameter 'projectKey' to be non-null");
        this.pullRequest = pullRequest;
        this.push = push;
        this.repoSlug = Objects.requireNonNull(repoSlug, "expected parameter 'repoSlug' to be non-null");
    }

    private BitbucketServerTriggerConfigArgs() {
        this.bitbucketServerConfigResource = Input.empty();
        this.projectKey = Input.empty();
        this.pullRequest = Input.empty();
        this.push = Input.empty();
        this.repoSlug = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BitbucketServerTriggerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> bitbucketServerConfigResource;
        private Input<String> projectKey;
        private @Nullable Input<PullRequestFilterArgs> pullRequest;
        private @Nullable Input<PushFilterArgs> push;
        private Input<String> repoSlug;

        public Builder() {
    	      // Empty
        }

        public Builder(BitbucketServerTriggerConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitbucketServerConfigResource = defaults.bitbucketServerConfigResource;
    	      this.projectKey = defaults.projectKey;
    	      this.pullRequest = defaults.pullRequest;
    	      this.push = defaults.push;
    	      this.repoSlug = defaults.repoSlug;
        }

        public Builder bitbucketServerConfigResource(Input<String> bitbucketServerConfigResource) {
            this.bitbucketServerConfigResource = Objects.requireNonNull(bitbucketServerConfigResource);
            return this;
        }

        public Builder bitbucketServerConfigResource(String bitbucketServerConfigResource) {
            this.bitbucketServerConfigResource = Input.of(Objects.requireNonNull(bitbucketServerConfigResource));
            return this;
        }

        public Builder projectKey(Input<String> projectKey) {
            this.projectKey = Objects.requireNonNull(projectKey);
            return this;
        }

        public Builder projectKey(String projectKey) {
            this.projectKey = Input.of(Objects.requireNonNull(projectKey));
            return this;
        }

        public Builder pullRequest(@Nullable Input<PullRequestFilterArgs> pullRequest) {
            this.pullRequest = pullRequest;
            return this;
        }

        public Builder pullRequest(@Nullable PullRequestFilterArgs pullRequest) {
            this.pullRequest = Input.ofNullable(pullRequest);
            return this;
        }

        public Builder push(@Nullable Input<PushFilterArgs> push) {
            this.push = push;
            return this;
        }

        public Builder push(@Nullable PushFilterArgs push) {
            this.push = Input.ofNullable(push);
            return this;
        }

        public Builder repoSlug(Input<String> repoSlug) {
            this.repoSlug = Objects.requireNonNull(repoSlug);
            return this;
        }

        public Builder repoSlug(String repoSlug) {
            this.repoSlug = Input.of(Objects.requireNonNull(repoSlug));
            return this;
        }
        public BitbucketServerTriggerConfigArgs build() {
            return new BitbucketServerTriggerConfigArgs(bitbucketServerConfigResource, projectKey, pullRequest, push, repoSlug);
        }
    }
}
