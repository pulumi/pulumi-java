// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.BitbucketServerSecretsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BitbucketServerConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final BitbucketServerConfigArgs Empty = new BitbucketServerConfigArgs();

    @InputImport(name="apiKey", required=true)
    private final Input<String> apiKey;

    public Input<String> getApiKey() {
        return this.apiKey;
    }

    @InputImport(name="bitbucketServerConfigId")
    private final @Nullable Input<String> bitbucketServerConfigId;

    public Input<String> getBitbucketServerConfigId() {
        return this.bitbucketServerConfigId == null ? Input.empty() : this.bitbucketServerConfigId;
    }

    @InputImport(name="createTime")
    private final @Nullable Input<String> createTime;

    public Input<String> getCreateTime() {
        return this.createTime == null ? Input.empty() : this.createTime;
    }

    @InputImport(name="hostUri", required=true)
    private final Input<String> hostUri;

    public Input<String> getHostUri() {
        return this.hostUri;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="peeredNetwork")
    private final @Nullable Input<String> peeredNetwork;

    public Input<String> getPeeredNetwork() {
        return this.peeredNetwork == null ? Input.empty() : this.peeredNetwork;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="secrets", required=true)
    private final Input<BitbucketServerSecretsArgs> secrets;

    public Input<BitbucketServerSecretsArgs> getSecrets() {
        return this.secrets;
    }

    @InputImport(name="sslCa")
    private final @Nullable Input<String> sslCa;

    public Input<String> getSslCa() {
        return this.sslCa == null ? Input.empty() : this.sslCa;
    }

    @InputImport(name="username")
    private final @Nullable Input<String> username;

    public Input<String> getUsername() {
        return this.username == null ? Input.empty() : this.username;
    }

    public BitbucketServerConfigArgs(
        Input<String> apiKey,
        @Nullable Input<String> bitbucketServerConfigId,
        @Nullable Input<String> createTime,
        Input<String> hostUri,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> peeredNetwork,
        @Nullable Input<String> project,
        Input<BitbucketServerSecretsArgs> secrets,
        @Nullable Input<String> sslCa,
        @Nullable Input<String> username) {
        this.apiKey = Objects.requireNonNull(apiKey, "expected parameter 'apiKey' to be non-null");
        this.bitbucketServerConfigId = bitbucketServerConfigId;
        this.createTime = createTime;
        this.hostUri = Objects.requireNonNull(hostUri, "expected parameter 'hostUri' to be non-null");
        this.location = location;
        this.name = name;
        this.peeredNetwork = peeredNetwork;
        this.project = project;
        this.secrets = Objects.requireNonNull(secrets, "expected parameter 'secrets' to be non-null");
        this.sslCa = sslCa;
        this.username = username;
    }

    private BitbucketServerConfigArgs() {
        this.apiKey = Input.empty();
        this.bitbucketServerConfigId = Input.empty();
        this.createTime = Input.empty();
        this.hostUri = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.peeredNetwork = Input.empty();
        this.project = Input.empty();
        this.secrets = Input.empty();
        this.sslCa = Input.empty();
        this.username = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BitbucketServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> apiKey;
        private @Nullable Input<String> bitbucketServerConfigId;
        private @Nullable Input<String> createTime;
        private Input<String> hostUri;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> peeredNetwork;
        private @Nullable Input<String> project;
        private Input<BitbucketServerSecretsArgs> secrets;
        private @Nullable Input<String> sslCa;
        private @Nullable Input<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(BitbucketServerConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.bitbucketServerConfigId = defaults.bitbucketServerConfigId;
    	      this.createTime = defaults.createTime;
    	      this.hostUri = defaults.hostUri;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peeredNetwork = defaults.peeredNetwork;
    	      this.project = defaults.project;
    	      this.secrets = defaults.secrets;
    	      this.sslCa = defaults.sslCa;
    	      this.username = defaults.username;
        }

        public Builder setApiKey(Input<String> apiKey) {
            this.apiKey = Objects.requireNonNull(apiKey);
            return this;
        }

        public Builder setApiKey(String apiKey) {
            this.apiKey = Input.of(Objects.requireNonNull(apiKey));
            return this;
        }

        public Builder setBitbucketServerConfigId(@Nullable Input<String> bitbucketServerConfigId) {
            this.bitbucketServerConfigId = bitbucketServerConfigId;
            return this;
        }

        public Builder setBitbucketServerConfigId(@Nullable String bitbucketServerConfigId) {
            this.bitbucketServerConfigId = Input.ofNullable(bitbucketServerConfigId);
            return this;
        }

        public Builder setCreateTime(@Nullable Input<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder setCreateTime(@Nullable String createTime) {
            this.createTime = Input.ofNullable(createTime);
            return this;
        }

        public Builder setHostUri(Input<String> hostUri) {
            this.hostUri = Objects.requireNonNull(hostUri);
            return this;
        }

        public Builder setHostUri(String hostUri) {
            this.hostUri = Input.of(Objects.requireNonNull(hostUri));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPeeredNetwork(@Nullable Input<String> peeredNetwork) {
            this.peeredNetwork = peeredNetwork;
            return this;
        }

        public Builder setPeeredNetwork(@Nullable String peeredNetwork) {
            this.peeredNetwork = Input.ofNullable(peeredNetwork);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSecrets(Input<BitbucketServerSecretsArgs> secrets) {
            this.secrets = Objects.requireNonNull(secrets);
            return this;
        }

        public Builder setSecrets(BitbucketServerSecretsArgs secrets) {
            this.secrets = Input.of(Objects.requireNonNull(secrets));
            return this;
        }

        public Builder setSslCa(@Nullable Input<String> sslCa) {
            this.sslCa = sslCa;
            return this;
        }

        public Builder setSslCa(@Nullable String sslCa) {
            this.sslCa = Input.ofNullable(sslCa);
            return this;
        }

        public Builder setUsername(@Nullable Input<String> username) {
            this.username = username;
            return this;
        }

        public Builder setUsername(@Nullable String username) {
            this.username = Input.ofNullable(username);
            return this;
        }

        public BitbucketServerConfigArgs build() {
            return new BitbucketServerConfigArgs(apiKey, bitbucketServerConfigId, createTime, hostUri, location, name, peeredNetwork, project, secrets, sslCa, username);
        }
    }
}
