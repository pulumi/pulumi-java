// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.accesscontextmanager_v1.inputs.MethodSelectorResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Identification for an API Operation.
 * 
 */
public final class ApiOperationResponse extends io.pulumi.resources.InvokeArgs {

    public static final ApiOperationResponse Empty = new ApiOperationResponse();

    /**
     * API methods or permissions to allow. Method or permission must belong to the service specified by `service_name` field. A single MethodSelector entry with `*` specified for the `method` field will allow all methods AND permissions for the service specified in `service_name`.
     * 
     */
    @InputImport(name="methodSelectors", required=true)
      private final List<MethodSelectorResponse> methodSelectors;

    public List<MethodSelectorResponse> getMethodSelectors() {
        return this.methodSelectors;
    }

    /**
     * The name of the API whose methods or permissions the IngressPolicy or EgressPolicy want to allow. A single ApiOperation with `service_name` field set to `*` will allow all methods AND permissions for all services.
     * 
     */
    @InputImport(name="serviceName", required=true)
      private final String serviceName;

    public String getServiceName() {
        return this.serviceName;
    }

    public ApiOperationResponse(
        List<MethodSelectorResponse> methodSelectors,
        String serviceName) {
        this.methodSelectors = Objects.requireNonNull(methodSelectors, "expected parameter 'methodSelectors' to be non-null");
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
    }

    private ApiOperationResponse() {
        this.methodSelectors = List.of();
        this.serviceName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiOperationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<MethodSelectorResponse> methodSelectors;
        private String serviceName;

        public Builder() {
    	      // Empty
        }

        public Builder(ApiOperationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.methodSelectors = defaults.methodSelectors;
    	      this.serviceName = defaults.serviceName;
        }

        public Builder setMethodSelectors(List<MethodSelectorResponse> methodSelectors) {
            this.methodSelectors = Objects.requireNonNull(methodSelectors);
            return this;
        }

        public Builder setServiceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public ApiOperationResponse build() {
            return new ApiOperationResponse(methodSelectors, serviceName);
        }
    }
}
