// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v2;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.googlenative.Utilities;
import io.pulumi.googlenative.run_v2.ServiceArgs;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2BinaryAuthorizationResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2ConditionResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2RevisionTemplateResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2TrafficTargetResponse;
import io.pulumi.googlenative.run_v2.outputs.GoogleCloudRunOpV2TrafficTargetStatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Creates a new Service in a given project and location.
 * 
 */
@ResourceType(type="google-native:run/v2:Service")
public class Service extends io.pulumi.resources.CustomResource {
    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: http://kubernetes.io/docs/user-guide/annotations
     * 
     */
    @OutputExport(name="annotations", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> annotations;

    /**
     * @return Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: http://kubernetes.io/docs/user-guide/annotations
     * 
     */
    public Output<Map<String,String>> getAnnotations() {
        return this.annotations;
    }
    /**
     * Settings for the Binary Authorization feature.
     * 
     */
    @OutputExport(name="binaryAuthorization", type=GoogleCloudRunOpV2BinaryAuthorizationResponse.class, parameters={})
    private Output<GoogleCloudRunOpV2BinaryAuthorizationResponse> binaryAuthorization;

    /**
     * @return Settings for the Binary Authorization feature.
     * 
     */
    public Output<GoogleCloudRunOpV2BinaryAuthorizationResponse> getBinaryAuthorization() {
        return this.binaryAuthorization;
    }
    /**
     * Arbitrary identifier for the API client.
     * 
     */
    @OutputExport(name="client", type=String.class, parameters={})
    private Output<String> client;

    /**
     * @return Arbitrary identifier for the API client.
     * 
     */
    public Output<String> getClient() {
        return this.client;
    }
    /**
     * Arbitrary version identifier for the API client.
     * 
     */
    @OutputExport(name="clientVersion", type=String.class, parameters={})
    private Output<String> clientVersion;

    /**
     * @return Arbitrary version identifier for the API client.
     * 
     */
    public Output<String> getClientVersion() {
        return this.clientVersion;
    }
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    @OutputExport(name="conditions", type=List.class, parameters={GoogleCloudRunOpV2ConditionResponse.class})
    private Output<List<GoogleCloudRunOpV2ConditionResponse>> conditions;

    /**
     * @return The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<List<GoogleCloudRunOpV2ConditionResponse>> getConditions() {
        return this.conditions;
    }
    /**
     * The creation time.
     * 
     */
    @OutputExport(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The creation time.
     * 
     */
    public Output<String> getCreateTime() {
        return this.createTime;
    }
    /**
     * Email address of the authenticated creator.
     * 
     */
    @OutputExport(name="creator", type=String.class, parameters={})
    private Output<String> creator;

    /**
     * @return Email address of the authenticated creator.
     * 
     */
    public Output<String> getCreator() {
        return this.creator;
    }
    /**
     * The deletion time.
     * 
     */
    @OutputExport(name="deleteTime", type=String.class, parameters={})
    private Output<String> deleteTime;

    /**
     * @return The deletion time.
     * 
     */
    public Output<String> getDeleteTime() {
        return this.deleteTime;
    }
    /**
     * User-provided description of the Service.
     * 
     */
    @OutputExport(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return User-provided description of the Service.
     * 
     */
    public Output<String> getDescription() {
        return this.description;
    }
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    @OutputExport(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * For a deleted resource, the time after which it will be permamently deleted.
     * 
     */
    @OutputExport(name="expireTime", type=String.class, parameters={})
    private Output<String> expireTime;

    /**
     * @return For a deleted resource, the time after which it will be permamently deleted.
     * 
     */
    public Output<String> getExpireTime() {
        return this.expireTime;
    }
    /**
     * A number that monotonically increases every time the user modifies the desired state.
     * 
     */
    @OutputExport(name="generation", type=String.class, parameters={})
    private Output<String> generation;

    /**
     * @return A number that monotonically increases every time the user modifies the desired state.
     * 
     */
    public Output<String> getGeneration() {
        return this.generation;
    }
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * 
     */
    @OutputExport(name="ingress", type=String.class, parameters={})
    private Output<String> ingress;

    /**
     * @return Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * 
     */
    public Output<String> getIngress() {
        return this.ingress;
    }
    /**
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    @OutputExport(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    /**
     * @return Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    public Output<Map<String,String>> getLabels() {
        return this.labels;
    }
    /**
     * Email address of the last authenticated modifier.
     * 
     */
    @OutputExport(name="lastModifier", type=String.class, parameters={})
    private Output<String> lastModifier;

    /**
     * @return Email address of the last authenticated modifier.
     * 
     */
    public Output<String> getLastModifier() {
        return this.lastModifier;
    }
    /**
     * Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    @OutputExport(name="latestCreatedRevision", type=String.class, parameters={})
    private Output<String> latestCreatedRevision;

    /**
     * @return Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> getLatestCreatedRevision() {
        return this.latestCreatedRevision;
    }
    /**
     * Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    @OutputExport(name="latestReadyRevision", type=String.class, parameters={})
    private Output<String> latestReadyRevision;

    /**
     * @return Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> getLatestReadyRevision() {
        return this.latestReadyRevision;
    }
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](http://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     * 
     */
    @OutputExport(name="launchStage", type=String.class, parameters={})
    private Output<String> launchStage;

    /**
     * @return The launch stage as defined by [Google Cloud Platform Launch Stages](http://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     * 
     */
    public Output<String> getLaunchStage() {
        return this.launchStage;
    }
    /**
     * The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     * 
     */
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    @OutputExport(name="observedGeneration", type=String.class, parameters={})
    private Output<String> observedGeneration;

    /**
     * @return The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<String> getObservedGeneration() {
        return this.observedGeneration;
    }
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     * 
     */
    @OutputExport(name="reconciling", type=Boolean.class, parameters={})
    private Output<Boolean> reconciling;

    /**
     * @return Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     * 
     */
    public Output<Boolean> getReconciling() {
        return this.reconciling;
    }
    /**
     * The template used to create revisions for this Service.
     * 
     */
    @OutputExport(name="template", type=GoogleCloudRunOpV2RevisionTemplateResponse.class, parameters={})
    private Output<GoogleCloudRunOpV2RevisionTemplateResponse> template;

    /**
     * @return The template used to create revisions for this Service.
     * 
     */
    public Output<GoogleCloudRunOpV2RevisionTemplateResponse> getTemplate() {
        return this.template;
    }
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    @OutputExport(name="terminalCondition", type=GoogleCloudRunOpV2ConditionResponse.class, parameters={})
    private Output<GoogleCloudRunOpV2ConditionResponse> terminalCondition;

    /**
     * @return The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<GoogleCloudRunOpV2ConditionResponse> getTerminalCondition() {
        return this.terminalCondition;
    }
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     * 
     */
    @OutputExport(name="traffic", type=List.class, parameters={GoogleCloudRunOpV2TrafficTargetResponse.class})
    private Output<List<GoogleCloudRunOpV2TrafficTargetResponse>> traffic;

    /**
     * @return Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     * 
     */
    public Output<List<GoogleCloudRunOpV2TrafficTargetResponse>> getTraffic() {
        return this.traffic;
    }
    /**
     * Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    @OutputExport(name="trafficStatuses", type=List.class, parameters={GoogleCloudRunOpV2TrafficTargetStatusResponse.class})
    private Output<List<GoogleCloudRunOpV2TrafficTargetStatusResponse>> trafficStatuses;

    /**
     * @return Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Output<List<GoogleCloudRunOpV2TrafficTargetStatusResponse>> getTrafficStatuses() {
        return this.trafficStatuses;
    }
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    @OutputExport(name="uid", type=String.class, parameters={})
    private Output<String> uid;

    /**
     * @return Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    public Output<String> getUid() {
        return this.uid;
    }
    /**
     * The last-modified time.
     * 
     */
    @OutputExport(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The last-modified time.
     * 
     */
    public Output<String> getUpdateTime() {
        return this.updateTime;
    }
    /**
     * The main URI in which this Service is serving traffic.
     * 
     */
    @OutputExport(name="uri", type=String.class, parameters={})
    private Output<String> uri;

    /**
     * @return The main URI in which this Service is serving traffic.
     * 
     */
    public Output<String> getUri() {
        return this.uri;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:run/v2:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Service(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:run/v2:Service", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, options);
    }
}
