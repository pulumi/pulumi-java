// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2beta3;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudtasks_v2beta3.enums.QueueType;
import io.pulumi.googlenative.cloudtasks_v2beta3.inputs.AppEngineHttpQueueArgs;
import io.pulumi.googlenative.cloudtasks_v2beta3.inputs.RateLimitsArgs;
import io.pulumi.googlenative.cloudtasks_v2beta3.inputs.RetryConfigArgs;
import io.pulumi.googlenative.cloudtasks_v2beta3.inputs.StackdriverLoggingConfigArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueueArgs extends io.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * AppEngineHttpQueue settings apply only to App Engine tasks in this queue. Http tasks are not affected by this proto.
     * 
     */
    @Import(name="appEngineHttpQueue")
      private final @Nullable Output<AppEngineHttpQueueArgs> appEngineHttpQueue;

    public Output<AppEngineHttpQueueArgs> getAppEngineHttpQueue() {
        return this.appEngineHttpQueue == null ? Codegen.empty() : this.appEngineHttpQueue;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts. However they control task attempts in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc). The queue's actual dispatch rate is the result of: * Number of tasks in the queue * User-specified throttling: rate_limits, retry_config, and the queue's state. * System throttling due to `429` (Too Many Requests) or `503` (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic spikes.
     * 
     */
    @Import(name="rateLimits")
      private final @Nullable Output<RateLimitsArgs> rateLimits;

    public Output<RateLimitsArgs> getRateLimits() {
        return this.rateLimits == null ? Codegen.empty() : this.rateLimits;
    }

    /**
     * Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
     * 
     */
    @Import(name="retryConfig")
      private final @Nullable Output<RetryConfigArgs> retryConfig;

    public Output<RetryConfigArgs> getRetryConfig() {
        return this.retryConfig == null ? Codegen.empty() : this.retryConfig;
    }

    /**
     * Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/). If this field is unset, then no logs are written.
     * 
     */
    @Import(name="stackdriverLoggingConfig")
      private final @Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig;

    public Output<StackdriverLoggingConfigArgs> getStackdriverLoggingConfig() {
        return this.stackdriverLoggingConfig == null ? Codegen.empty() : this.stackdriverLoggingConfig;
    }

    /**
     * The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
     * 
     */
    @Import(name="taskTtl")
      private final @Nullable Output<String> taskTtl;

    public Output<String> getTaskTtl() {
        return this.taskTtl == null ? Codegen.empty() : this.taskTtl;
    }

    /**
     * The task tombstone time to live (TTL). After a task is deleted or executed, the task's tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can't be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
     * 
     */
    @Import(name="tombstoneTtl")
      private final @Nullable Output<String> tombstoneTtl;

    public Output<String> getTombstoneTtl() {
        return this.tombstoneTtl == null ? Codegen.empty() : this.tombstoneTtl;
    }

    /**
     * Immutable. The type of a queue (push or pull). `Queue.type` is an immutable property of the queue that is set at the queue creation time. When left unspecified, the default value of `PUSH` is selected.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<QueueType> type;

    public Output<QueueType> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public QueueArgs(
        @Nullable Output<AppEngineHttpQueueArgs> appEngineHttpQueue,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<RateLimitsArgs> rateLimits,
        @Nullable Output<RetryConfigArgs> retryConfig,
        @Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig,
        @Nullable Output<String> taskTtl,
        @Nullable Output<String> tombstoneTtl,
        @Nullable Output<QueueType> type) {
        this.appEngineHttpQueue = appEngineHttpQueue;
        this.location = location;
        this.name = name;
        this.project = project;
        this.rateLimits = rateLimits;
        this.retryConfig = retryConfig;
        this.stackdriverLoggingConfig = stackdriverLoggingConfig;
        this.taskTtl = taskTtl;
        this.tombstoneTtl = tombstoneTtl;
        this.type = type;
    }

    private QueueArgs() {
        this.appEngineHttpQueue = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.rateLimits = Codegen.empty();
        this.retryConfig = Codegen.empty();
        this.stackdriverLoggingConfig = Codegen.empty();
        this.taskTtl = Codegen.empty();
        this.tombstoneTtl = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AppEngineHttpQueueArgs> appEngineHttpQueue;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<RateLimitsArgs> rateLimits;
        private @Nullable Output<RetryConfigArgs> retryConfig;
        private @Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig;
        private @Nullable Output<String> taskTtl;
        private @Nullable Output<String> tombstoneTtl;
        private @Nullable Output<QueueType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineHttpQueue = defaults.appEngineHttpQueue;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rateLimits = defaults.rateLimits;
    	      this.retryConfig = defaults.retryConfig;
    	      this.stackdriverLoggingConfig = defaults.stackdriverLoggingConfig;
    	      this.taskTtl = defaults.taskTtl;
    	      this.tombstoneTtl = defaults.tombstoneTtl;
    	      this.type = defaults.type;
        }

        public Builder appEngineHttpQueue(@Nullable Output<AppEngineHttpQueueArgs> appEngineHttpQueue) {
            this.appEngineHttpQueue = appEngineHttpQueue;
            return this;
        }
        public Builder appEngineHttpQueue(@Nullable AppEngineHttpQueueArgs appEngineHttpQueue) {
            this.appEngineHttpQueue = Codegen.ofNullable(appEngineHttpQueue);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder rateLimits(@Nullable Output<RateLimitsArgs> rateLimits) {
            this.rateLimits = rateLimits;
            return this;
        }
        public Builder rateLimits(@Nullable RateLimitsArgs rateLimits) {
            this.rateLimits = Codegen.ofNullable(rateLimits);
            return this;
        }
        public Builder retryConfig(@Nullable Output<RetryConfigArgs> retryConfig) {
            this.retryConfig = retryConfig;
            return this;
        }
        public Builder retryConfig(@Nullable RetryConfigArgs retryConfig) {
            this.retryConfig = Codegen.ofNullable(retryConfig);
            return this;
        }
        public Builder stackdriverLoggingConfig(@Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig) {
            this.stackdriverLoggingConfig = stackdriverLoggingConfig;
            return this;
        }
        public Builder stackdriverLoggingConfig(@Nullable StackdriverLoggingConfigArgs stackdriverLoggingConfig) {
            this.stackdriverLoggingConfig = Codegen.ofNullable(stackdriverLoggingConfig);
            return this;
        }
        public Builder taskTtl(@Nullable Output<String> taskTtl) {
            this.taskTtl = taskTtl;
            return this;
        }
        public Builder taskTtl(@Nullable String taskTtl) {
            this.taskTtl = Codegen.ofNullable(taskTtl);
            return this;
        }
        public Builder tombstoneTtl(@Nullable Output<String> tombstoneTtl) {
            this.tombstoneTtl = tombstoneTtl;
            return this;
        }
        public Builder tombstoneTtl(@Nullable String tombstoneTtl) {
            this.tombstoneTtl = Codegen.ofNullable(tombstoneTtl);
            return this;
        }
        public Builder type(@Nullable Output<QueueType> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable QueueType type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public QueueArgs build() {
            return new QueueArgs(appEngineHttpQueue, location, name, project, rateLimits, retryConfig, stackdriverLoggingConfig, taskTtl, tombstoneTtl, type);
        }
    }
}
