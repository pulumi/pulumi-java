// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.inputs.HttpHeaderMatchResponse;
import io.pulumi.googlenative.compute_alpha.inputs.HttpQueryParameterMatchResponse;
import io.pulumi.googlenative.compute_alpha.inputs.MetadataFilterResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class HttpRouteRuleMatchResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpRouteRuleMatchResponse Empty = new HttpRouteRuleMatchResponse();

    @InputImport(name="fullPathMatch", required=true)
    private final String fullPathMatch;

    public String getFullPathMatch() {
        return this.fullPathMatch;
    }

    @InputImport(name="headerMatches", required=true)
    private final List<HttpHeaderMatchResponse> headerMatches;

    public List<HttpHeaderMatchResponse> getHeaderMatches() {
        return this.headerMatches;
    }

    @InputImport(name="ignoreCase", required=true)
    private final Boolean ignoreCase;

    public Boolean getIgnoreCase() {
        return this.ignoreCase;
    }

    @InputImport(name="metadataFilters", required=true)
    private final List<MetadataFilterResponse> metadataFilters;

    public List<MetadataFilterResponse> getMetadataFilters() {
        return this.metadataFilters;
    }

    @InputImport(name="prefixMatch", required=true)
    private final String prefixMatch;

    public String getPrefixMatch() {
        return this.prefixMatch;
    }

    @InputImport(name="queryParameterMatches", required=true)
    private final List<HttpQueryParameterMatchResponse> queryParameterMatches;

    public List<HttpQueryParameterMatchResponse> getQueryParameterMatches() {
        return this.queryParameterMatches;
    }

    @InputImport(name="regexMatch", required=true)
    private final String regexMatch;

    public String getRegexMatch() {
        return this.regexMatch;
    }

    public HttpRouteRuleMatchResponse(
        String fullPathMatch,
        List<HttpHeaderMatchResponse> headerMatches,
        Boolean ignoreCase,
        List<MetadataFilterResponse> metadataFilters,
        String prefixMatch,
        List<HttpQueryParameterMatchResponse> queryParameterMatches,
        String regexMatch) {
        this.fullPathMatch = Objects.requireNonNull(fullPathMatch, "expected parameter 'fullPathMatch' to be non-null");
        this.headerMatches = Objects.requireNonNull(headerMatches, "expected parameter 'headerMatches' to be non-null");
        this.ignoreCase = Objects.requireNonNull(ignoreCase, "expected parameter 'ignoreCase' to be non-null");
        this.metadataFilters = Objects.requireNonNull(metadataFilters, "expected parameter 'metadataFilters' to be non-null");
        this.prefixMatch = Objects.requireNonNull(prefixMatch, "expected parameter 'prefixMatch' to be non-null");
        this.queryParameterMatches = Objects.requireNonNull(queryParameterMatches, "expected parameter 'queryParameterMatches' to be non-null");
        this.regexMatch = Objects.requireNonNull(regexMatch, "expected parameter 'regexMatch' to be non-null");
    }

    private HttpRouteRuleMatchResponse() {
        this.fullPathMatch = null;
        this.headerMatches = List.of();
        this.ignoreCase = null;
        this.metadataFilters = List.of();
        this.prefixMatch = null;
        this.queryParameterMatches = List.of();
        this.regexMatch = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRuleMatchResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String fullPathMatch;
        private List<HttpHeaderMatchResponse> headerMatches;
        private Boolean ignoreCase;
        private List<MetadataFilterResponse> metadataFilters;
        private String prefixMatch;
        private List<HttpQueryParameterMatchResponse> queryParameterMatches;
        private String regexMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRouteRuleMatchResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fullPathMatch = defaults.fullPathMatch;
    	      this.headerMatches = defaults.headerMatches;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.metadataFilters = defaults.metadataFilters;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.queryParameterMatches = defaults.queryParameterMatches;
    	      this.regexMatch = defaults.regexMatch;
        }

        public Builder setFullPathMatch(String fullPathMatch) {
            this.fullPathMatch = Objects.requireNonNull(fullPathMatch);
            return this;
        }

        public Builder setHeaderMatches(List<HttpHeaderMatchResponse> headerMatches) {
            this.headerMatches = Objects.requireNonNull(headerMatches);
            return this;
        }

        public Builder setIgnoreCase(Boolean ignoreCase) {
            this.ignoreCase = Objects.requireNonNull(ignoreCase);
            return this;
        }

        public Builder setMetadataFilters(List<MetadataFilterResponse> metadataFilters) {
            this.metadataFilters = Objects.requireNonNull(metadataFilters);
            return this;
        }

        public Builder setPrefixMatch(String prefixMatch) {
            this.prefixMatch = Objects.requireNonNull(prefixMatch);
            return this;
        }

        public Builder setQueryParameterMatches(List<HttpQueryParameterMatchResponse> queryParameterMatches) {
            this.queryParameterMatches = Objects.requireNonNull(queryParameterMatches);
            return this;
        }

        public Builder setRegexMatch(String regexMatch) {
            this.regexMatch = Objects.requireNonNull(regexMatch);
            return this;
        }

        public HttpRouteRuleMatchResponse build() {
            return new HttpRouteRuleMatchResponse(fullPathMatch, headerMatches, ignoreCase, metadataFilters, prefixMatch, queryParameterMatches, regexMatch);
        }
    }
}
