// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dialogflow_v3.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.dialogflow_v3.inputs.GoogleCloudDialogflowCxV3FulfillmentArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow.
 * 
 */
public final class GoogleCloudDialogflowCxV3EventHandlerArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDialogflowCxV3EventHandlerArgs Empty = new GoogleCloudDialogflowCxV3EventHandlerArgs();

    /**
     * The name of the event to handle.
     * 
     */
    @Import(name="event", required=true)
      private final Output<String> event;

    public Output<String> getEvent() {
        return this.event;
    }

    /**
     * The target flow to transition to. Format: `projects//locations//agents//flows/`.
     * 
     */
    @Import(name="targetFlow")
      private final @Nullable Output<String> targetFlow;

    public Output<String> getTargetFlow() {
        return this.targetFlow == null ? Output.empty() : this.targetFlow;
    }

    /**
     * The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
     * 
     */
    @Import(name="targetPage")
      private final @Nullable Output<String> targetPage;

    public Output<String> getTargetPage() {
        return this.targetPage == null ? Output.empty() : this.targetPage;
    }

    /**
     * The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
     * 
     */
    @Import(name="triggerFulfillment")
      private final @Nullable Output<GoogleCloudDialogflowCxV3FulfillmentArgs> triggerFulfillment;

    public Output<GoogleCloudDialogflowCxV3FulfillmentArgs> getTriggerFulfillment() {
        return this.triggerFulfillment == null ? Output.empty() : this.triggerFulfillment;
    }

    public GoogleCloudDialogflowCxV3EventHandlerArgs(
        Output<String> event,
        @Nullable Output<String> targetFlow,
        @Nullable Output<String> targetPage,
        @Nullable Output<GoogleCloudDialogflowCxV3FulfillmentArgs> triggerFulfillment) {
        this.event = Objects.requireNonNull(event, "expected parameter 'event' to be non-null");
        this.targetFlow = targetFlow;
        this.targetPage = targetPage;
        this.triggerFulfillment = triggerFulfillment;
    }

    private GoogleCloudDialogflowCxV3EventHandlerArgs() {
        this.event = Output.empty();
        this.targetFlow = Output.empty();
        this.targetPage = Output.empty();
        this.triggerFulfillment = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudDialogflowCxV3EventHandlerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> event;
        private @Nullable Output<String> targetFlow;
        private @Nullable Output<String> targetPage;
        private @Nullable Output<GoogleCloudDialogflowCxV3FulfillmentArgs> triggerFulfillment;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudDialogflowCxV3EventHandlerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.event = defaults.event;
    	      this.targetFlow = defaults.targetFlow;
    	      this.targetPage = defaults.targetPage;
    	      this.triggerFulfillment = defaults.triggerFulfillment;
        }

        public Builder event(Output<String> event) {
            this.event = Objects.requireNonNull(event);
            return this;
        }

        public Builder event(String event) {
            this.event = Output.of(Objects.requireNonNull(event));
            return this;
        }

        public Builder targetFlow(@Nullable Output<String> targetFlow) {
            this.targetFlow = targetFlow;
            return this;
        }

        public Builder targetFlow(@Nullable String targetFlow) {
            this.targetFlow = Output.ofNullable(targetFlow);
            return this;
        }

        public Builder targetPage(@Nullable Output<String> targetPage) {
            this.targetPage = targetPage;
            return this;
        }

        public Builder targetPage(@Nullable String targetPage) {
            this.targetPage = Output.ofNullable(targetPage);
            return this;
        }

        public Builder triggerFulfillment(@Nullable Output<GoogleCloudDialogflowCxV3FulfillmentArgs> triggerFulfillment) {
            this.triggerFulfillment = triggerFulfillment;
            return this;
        }

        public Builder triggerFulfillment(@Nullable GoogleCloudDialogflowCxV3FulfillmentArgs triggerFulfillment) {
            this.triggerFulfillment = Output.ofNullable(triggerFulfillment);
            return this;
        }
        public GoogleCloudDialogflowCxV3EventHandlerArgs build() {
            return new GoogleCloudDialogflowCxV3EventHandlerArgs(event, targetFlow, targetPage, triggerFulfillment);
        }
    }
}
