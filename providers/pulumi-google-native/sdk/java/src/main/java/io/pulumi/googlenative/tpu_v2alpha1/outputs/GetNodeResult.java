// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.tpu_v2alpha1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.tpu_v2alpha1.outputs.AttachedDiskResponse;
import io.pulumi.googlenative.tpu_v2alpha1.outputs.NetworkConfigResponse;
import io.pulumi.googlenative.tpu_v2alpha1.outputs.NetworkEndpointResponse;
import io.pulumi.googlenative.tpu_v2alpha1.outputs.SchedulingConfigResponse;
import io.pulumi.googlenative.tpu_v2alpha1.outputs.ServiceAccountResponse;
import io.pulumi.googlenative.tpu_v2alpha1.outputs.SymptomResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetNodeResult {
    /**
     * The type of hardware accelerators associated with this node.
     * 
     */
    private final String acceleratorType;
    /**
     * The API version that created this Node.
     * 
     */
    private final String apiVersion;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     * 
     */
    private final String cidrBlock;
    /**
     * The time when the node was created.
     * 
     */
    private final String createTime;
    /**
     * The additional data disks for the Node.
     * 
     */
    private final List<AttachedDiskResponse> dataDisks;
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     * 
     */
    private final String description;
    /**
     * The health status of the TPU node.
     * 
     */
    private final String health;
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    private final String healthDescription;
    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    private final Map<String,String> labels;
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     * 
     */
    private final Map<String,String> metadata;
    /**
     * Immutable. The name of the TPU.
     * 
     */
    private final String name;
    /**
     * Network configurations for the TPU node.
     * 
     */
    private final NetworkConfigResponse networkConfig;
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     * 
     */
    private final List<NetworkEndpointResponse> networkEndpoints;
    /**
     * The runtime version running in the Node.
     * 
     */
    private final String runtimeVersion;
    /**
     * The scheduling options for this node.
     * 
     */
    private final SchedulingConfigResponse schedulingConfig;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     * 
     */
    private final ServiceAccountResponse serviceAccount;
    /**
     * The current state for the TPU Node.
     * 
     */
    private final String state;
    /**
     * The Symptoms that have occurred to the TPU Node.
     * 
     */
    private final List<SymptomResponse> symptoms;
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    private final List<String> tags;

    @OutputCustomType.Constructor({"acceleratorType","apiVersion","cidrBlock","createTime","dataDisks","description","health","healthDescription","labels","metadata","name","networkConfig","networkEndpoints","runtimeVersion","schedulingConfig","serviceAccount","state","symptoms","tags"})
    private GetNodeResult(
        String acceleratorType,
        String apiVersion,
        String cidrBlock,
        String createTime,
        List<AttachedDiskResponse> dataDisks,
        String description,
        String health,
        String healthDescription,
        Map<String,String> labels,
        Map<String,String> metadata,
        String name,
        NetworkConfigResponse networkConfig,
        List<NetworkEndpointResponse> networkEndpoints,
        String runtimeVersion,
        SchedulingConfigResponse schedulingConfig,
        ServiceAccountResponse serviceAccount,
        String state,
        List<SymptomResponse> symptoms,
        List<String> tags) {
        this.acceleratorType = Objects.requireNonNull(acceleratorType);
        this.apiVersion = Objects.requireNonNull(apiVersion);
        this.cidrBlock = Objects.requireNonNull(cidrBlock);
        this.createTime = Objects.requireNonNull(createTime);
        this.dataDisks = Objects.requireNonNull(dataDisks);
        this.description = Objects.requireNonNull(description);
        this.health = Objects.requireNonNull(health);
        this.healthDescription = Objects.requireNonNull(healthDescription);
        this.labels = Objects.requireNonNull(labels);
        this.metadata = Objects.requireNonNull(metadata);
        this.name = Objects.requireNonNull(name);
        this.networkConfig = Objects.requireNonNull(networkConfig);
        this.networkEndpoints = Objects.requireNonNull(networkEndpoints);
        this.runtimeVersion = Objects.requireNonNull(runtimeVersion);
        this.schedulingConfig = Objects.requireNonNull(schedulingConfig);
        this.serviceAccount = Objects.requireNonNull(serviceAccount);
        this.state = Objects.requireNonNull(state);
        this.symptoms = Objects.requireNonNull(symptoms);
        this.tags = Objects.requireNonNull(tags);
    }

    /**
     * The type of hardware accelerators associated with this node.
     * 
    */
    public String getAcceleratorType() {
        return this.acceleratorType;
    }
    /**
     * The API version that created this Node.
     * 
    */
    public String getApiVersion() {
        return this.apiVersion;
    }
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     * 
    */
    public String getCidrBlock() {
        return this.cidrBlock;
    }
    /**
     * The time when the node was created.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * The additional data disks for the Node.
     * 
    */
    public List<AttachedDiskResponse> getDataDisks() {
        return this.dataDisks;
    }
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * The health status of the TPU node.
     * 
    */
    public String getHealth() {
        return this.health;
    }
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
    */
    public String getHealthDescription() {
        return this.healthDescription;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     * 
    */
    public Map<String,String> getMetadata() {
        return this.metadata;
    }
    /**
     * Immutable. The name of the TPU.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Network configurations for the TPU node.
     * 
    */
    public NetworkConfigResponse getNetworkConfig() {
        return this.networkConfig;
    }
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     * 
    */
    public List<NetworkEndpointResponse> getNetworkEndpoints() {
        return this.networkEndpoints;
    }
    /**
     * The runtime version running in the Node.
     * 
    */
    public String getRuntimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * The scheduling options for this node.
     * 
    */
    public SchedulingConfigResponse getSchedulingConfig() {
        return this.schedulingConfig;
    }
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     * 
    */
    public ServiceAccountResponse getServiceAccount() {
        return this.serviceAccount;
    }
    /**
     * The current state for the TPU Node.
     * 
    */
    public String getState() {
        return this.state;
    }
    /**
     * The Symptoms that have occurred to the TPU Node.
     * 
    */
    public List<SymptomResponse> getSymptoms() {
        return this.symptoms;
    }
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
    */
    public List<String> getTags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String acceleratorType;
        private String apiVersion;
        private String cidrBlock;
        private String createTime;
        private List<AttachedDiskResponse> dataDisks;
        private String description;
        private String health;
        private String healthDescription;
        private Map<String,String> labels;
        private Map<String,String> metadata;
        private String name;
        private NetworkConfigResponse networkConfig;
        private List<NetworkEndpointResponse> networkEndpoints;
        private String runtimeVersion;
        private SchedulingConfigResponse schedulingConfig;
        private ServiceAccountResponse serviceAccount;
        private String state;
        private List<SymptomResponse> symptoms;
        private List<String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.apiVersion = defaults.apiVersion;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.createTime = defaults.createTime;
    	      this.dataDisks = defaults.dataDisks;
    	      this.description = defaults.description;
    	      this.health = defaults.health;
    	      this.healthDescription = defaults.healthDescription;
    	      this.labels = defaults.labels;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.networkEndpoints = defaults.networkEndpoints;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.schedulingConfig = defaults.schedulingConfig;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.state = defaults.state;
    	      this.symptoms = defaults.symptoms;
    	      this.tags = defaults.tags;
        }

        public Builder setAcceleratorType(String acceleratorType) {
            this.acceleratorType = Objects.requireNonNull(acceleratorType);
            return this;
        }

        public Builder setApiVersion(String apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }

        public Builder setCidrBlock(String cidrBlock) {
            this.cidrBlock = Objects.requireNonNull(cidrBlock);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDataDisks(List<AttachedDiskResponse> dataDisks) {
            this.dataDisks = Objects.requireNonNull(dataDisks);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setHealth(String health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }

        public Builder setHealthDescription(String healthDescription) {
            this.healthDescription = Objects.requireNonNull(healthDescription);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMetadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetworkConfig(NetworkConfigResponse networkConfig) {
            this.networkConfig = Objects.requireNonNull(networkConfig);
            return this;
        }

        public Builder setNetworkEndpoints(List<NetworkEndpointResponse> networkEndpoints) {
            this.networkEndpoints = Objects.requireNonNull(networkEndpoints);
            return this;
        }

        public Builder setRuntimeVersion(String runtimeVersion) {
            this.runtimeVersion = Objects.requireNonNull(runtimeVersion);
            return this;
        }

        public Builder setSchedulingConfig(SchedulingConfigResponse schedulingConfig) {
            this.schedulingConfig = Objects.requireNonNull(schedulingConfig);
            return this;
        }

        public Builder setServiceAccount(ServiceAccountResponse serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setSymptoms(List<SymptomResponse> symptoms) {
            this.symptoms = Objects.requireNonNull(symptoms);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetNodeResult build() {
            return new GetNodeResult(acceleratorType, apiVersion, cidrBlock, createTime, dataDisks, description, health, healthDescription, labels, metadata, name, networkConfig, networkEndpoints, runtimeVersion, schedulingConfig, serviceAccount, state, symptoms, tags);
        }
    }
}
