// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1.enums.VulnerabilityOccurrenceEffectiveSeverity;
import io.pulumi.googlenative.containeranalysis_v1.inputs.CVSSArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.PackageIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An occurrence of a severity vulnerability on a resource.
 * 
 */
public final class VulnerabilityOccurrenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final VulnerabilityOccurrenceArgs Empty = new VulnerabilityOccurrenceArgs();

    /**
     * The cvss v3 score for the vulnerability.
     * 
     */
    @Import(name="cvssv3")
      private final @Nullable Output<CVSSArgs> cvssv3;

    public Output<CVSSArgs> getCvssv3() {
        return this.cvssv3 == null ? Output.empty() : this.cvssv3;
    }

    /**
     * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @Import(name="effectiveSeverity")
      private final @Nullable Output<VulnerabilityOccurrenceEffectiveSeverity> effectiveSeverity;

    public Output<VulnerabilityOccurrenceEffectiveSeverity> getEffectiveSeverity() {
        return this.effectiveSeverity == null ? Output.empty() : this.effectiveSeverity;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @Import(name="packageIssue", required=true)
      private final Output<List<PackageIssueArgs>> packageIssue;

    public Output<List<PackageIssueArgs>> getPackageIssue() {
        return this.packageIssue;
    }

    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public VulnerabilityOccurrenceArgs(
        @Nullable Output<CVSSArgs> cvssv3,
        @Nullable Output<VulnerabilityOccurrenceEffectiveSeverity> effectiveSeverity,
        Output<List<PackageIssueArgs>> packageIssue,
        @Nullable Output<String> type) {
        this.cvssv3 = cvssv3;
        this.effectiveSeverity = effectiveSeverity;
        this.packageIssue = Objects.requireNonNull(packageIssue, "expected parameter 'packageIssue' to be non-null");
        this.type = type;
    }

    private VulnerabilityOccurrenceArgs() {
        this.cvssv3 = Output.empty();
        this.effectiveSeverity = Output.empty();
        this.packageIssue = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VulnerabilityOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CVSSArgs> cvssv3;
        private @Nullable Output<VulnerabilityOccurrenceEffectiveSeverity> effectiveSeverity;
        private Output<List<PackageIssueArgs>> packageIssue;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(VulnerabilityOccurrenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cvssv3 = defaults.cvssv3;
    	      this.effectiveSeverity = defaults.effectiveSeverity;
    	      this.packageIssue = defaults.packageIssue;
    	      this.type = defaults.type;
        }

        public Builder cvssv3(@Nullable Output<CVSSArgs> cvssv3) {
            this.cvssv3 = cvssv3;
            return this;
        }
        public Builder cvssv3(@Nullable CVSSArgs cvssv3) {
            this.cvssv3 = Output.ofNullable(cvssv3);
            return this;
        }
        public Builder effectiveSeverity(@Nullable Output<VulnerabilityOccurrenceEffectiveSeverity> effectiveSeverity) {
            this.effectiveSeverity = effectiveSeverity;
            return this;
        }
        public Builder effectiveSeverity(@Nullable VulnerabilityOccurrenceEffectiveSeverity effectiveSeverity) {
            this.effectiveSeverity = Output.ofNullable(effectiveSeverity);
            return this;
        }
        public Builder packageIssue(Output<List<PackageIssueArgs>> packageIssue) {
            this.packageIssue = Objects.requireNonNull(packageIssue);
            return this;
        }
        public Builder packageIssue(List<PackageIssueArgs> packageIssue) {
            this.packageIssue = Output.of(Objects.requireNonNull(packageIssue));
            return this;
        }
        public Builder packageIssue(PackageIssueArgs... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }        public VulnerabilityOccurrenceArgs build() {
            return new VulnerabilityOccurrenceArgs(cvssv3, effectiveSeverity, packageIssue, type);
        }
    }
}
