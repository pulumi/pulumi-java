// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigtableadmin_v2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
 * 
 */
public final class MultiClusterRoutingUseAnyResponse extends io.pulumi.resources.InvokeArgs {

    public static final MultiClusterRoutingUseAnyResponse Empty = new MultiClusterRoutingUseAnyResponse();

    /**
     * The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
     * 
     */
    @Import(name="clusterIds", required=true)
      private final List<String> clusterIds;

    public List<String> clusterIds() {
        return this.clusterIds;
    }

    public MultiClusterRoutingUseAnyResponse(List<String> clusterIds) {
        this.clusterIds = Objects.requireNonNull(clusterIds, "expected parameter 'clusterIds' to be non-null");
    }

    private MultiClusterRoutingUseAnyResponse() {
        this.clusterIds = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MultiClusterRoutingUseAnyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> clusterIds;

        public Builder() {
    	      // Empty
        }

        public Builder(MultiClusterRoutingUseAnyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterIds = defaults.clusterIds;
        }

        public Builder clusterIds(List<String> clusterIds) {
            this.clusterIds = Objects.requireNonNull(clusterIds);
            return this;
        }
        public Builder clusterIds(String... clusterIds) {
            return clusterIds(List.of(clusterIds));
        }        public MultiClusterRoutingUseAnyResponse build() {
            return new MultiClusterRoutingUseAnyResponse(clusterIds);
        }
    }
}
