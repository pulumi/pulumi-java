// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2beta2.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudtasks_v2beta2.outputs.AppEngineHttpTargetResponse;
import io.pulumi.googlenative.cloudtasks_v2beta2.outputs.PullTargetResponse;
import io.pulumi.googlenative.cloudtasks_v2beta2.outputs.QueueStatsResponse;
import io.pulumi.googlenative.cloudtasks_v2beta2.outputs.RateLimitsResponse;
import io.pulumi.googlenative.cloudtasks_v2beta2.outputs.RetryConfigResponse;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class GetQueueResult {
    private final AppEngineHttpTargetResponse appEngineHttpTarget;
    private final String name;
    private final PullTargetResponse pullTarget;
    private final String purgeTime;
    private final RateLimitsResponse rateLimits;
    private final RetryConfigResponse retryConfig;
    private final String state;
    private final QueueStatsResponse stats;
    private final String taskTtl;
    private final String tombstoneTtl;

    @OutputCustomType.Constructor({"appEngineHttpTarget","name","pullTarget","purgeTime","rateLimits","retryConfig","state","stats","taskTtl","tombstoneTtl"})
    private GetQueueResult(
        AppEngineHttpTargetResponse appEngineHttpTarget,
        String name,
        PullTargetResponse pullTarget,
        String purgeTime,
        RateLimitsResponse rateLimits,
        RetryConfigResponse retryConfig,
        String state,
        QueueStatsResponse stats,
        String taskTtl,
        String tombstoneTtl) {
        this.appEngineHttpTarget = Objects.requireNonNull(appEngineHttpTarget);
        this.name = Objects.requireNonNull(name);
        this.pullTarget = Objects.requireNonNull(pullTarget);
        this.purgeTime = Objects.requireNonNull(purgeTime);
        this.rateLimits = Objects.requireNonNull(rateLimits);
        this.retryConfig = Objects.requireNonNull(retryConfig);
        this.state = Objects.requireNonNull(state);
        this.stats = Objects.requireNonNull(stats);
        this.taskTtl = Objects.requireNonNull(taskTtl);
        this.tombstoneTtl = Objects.requireNonNull(tombstoneTtl);
    }

    public AppEngineHttpTargetResponse getAppEngineHttpTarget() {
        return this.appEngineHttpTarget;
    }
    public String getName() {
        return this.name;
    }
    public PullTargetResponse getPullTarget() {
        return this.pullTarget;
    }
    public String getPurgeTime() {
        return this.purgeTime;
    }
    public RateLimitsResponse getRateLimits() {
        return this.rateLimits;
    }
    public RetryConfigResponse getRetryConfig() {
        return this.retryConfig;
    }
    public String getState() {
        return this.state;
    }
    public QueueStatsResponse getStats() {
        return this.stats;
    }
    public String getTaskTtl() {
        return this.taskTtl;
    }
    public String getTombstoneTtl() {
        return this.tombstoneTtl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueueResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppEngineHttpTargetResponse appEngineHttpTarget;
        private String name;
        private PullTargetResponse pullTarget;
        private String purgeTime;
        private RateLimitsResponse rateLimits;
        private RetryConfigResponse retryConfig;
        private String state;
        private QueueStatsResponse stats;
        private String taskTtl;
        private String tombstoneTtl;

        public Builder() {
    	      // Empty
        }

        public Builder(GetQueueResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineHttpTarget = defaults.appEngineHttpTarget;
    	      this.name = defaults.name;
    	      this.pullTarget = defaults.pullTarget;
    	      this.purgeTime = defaults.purgeTime;
    	      this.rateLimits = defaults.rateLimits;
    	      this.retryConfig = defaults.retryConfig;
    	      this.state = defaults.state;
    	      this.stats = defaults.stats;
    	      this.taskTtl = defaults.taskTtl;
    	      this.tombstoneTtl = defaults.tombstoneTtl;
        }

        public Builder setAppEngineHttpTarget(AppEngineHttpTargetResponse appEngineHttpTarget) {
            this.appEngineHttpTarget = Objects.requireNonNull(appEngineHttpTarget);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPullTarget(PullTargetResponse pullTarget) {
            this.pullTarget = Objects.requireNonNull(pullTarget);
            return this;
        }

        public Builder setPurgeTime(String purgeTime) {
            this.purgeTime = Objects.requireNonNull(purgeTime);
            return this;
        }

        public Builder setRateLimits(RateLimitsResponse rateLimits) {
            this.rateLimits = Objects.requireNonNull(rateLimits);
            return this;
        }

        public Builder setRetryConfig(RetryConfigResponse retryConfig) {
            this.retryConfig = Objects.requireNonNull(retryConfig);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStats(QueueStatsResponse stats) {
            this.stats = Objects.requireNonNull(stats);
            return this;
        }

        public Builder setTaskTtl(String taskTtl) {
            this.taskTtl = Objects.requireNonNull(taskTtl);
            return this;
        }

        public Builder setTombstoneTtl(String tombstoneTtl) {
            this.tombstoneTtl = Objects.requireNonNull(tombstoneTtl);
            return this;
        }

        public GetQueueResult build() {
            return new GetQueueResult(appEngineHttpTarget, name, pullTarget, purgeTime, rateLimits, retryConfig, state, stats, taskTtl, tombstoneTtl);
        }
    }
}
