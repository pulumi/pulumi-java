// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1.inputs.BuilderConfigResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.MetadataResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.RecipeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class InTotoProvenanceResponse extends io.pulumi.resources.InvokeArgs {

    public static final InTotoProvenanceResponse Empty = new InTotoProvenanceResponse();

    /**
     * required
     * 
     */
    @Import(name="builderConfig", required=true)
      private final BuilderConfigResponse builderConfig;

    public BuilderConfigResponse builderConfig() {
        return this.builderConfig;
    }

    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    @Import(name="materials", required=true)
      private final List<String> materials;

    public List<String> materials() {
        return this.materials;
    }

    @Import(name="metadata", required=true)
      private final MetadataResponse metadata;

    public MetadataResponse metadata() {
        return this.metadata;
    }

    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
     */
    @Import(name="recipe", required=true)
      private final RecipeResponse recipe;

    public RecipeResponse recipe() {
        return this.recipe;
    }

    public InTotoProvenanceResponse(
        BuilderConfigResponse builderConfig,
        List<String> materials,
        MetadataResponse metadata,
        RecipeResponse recipe) {
        this.builderConfig = Objects.requireNonNull(builderConfig, "expected parameter 'builderConfig' to be non-null");
        this.materials = Objects.requireNonNull(materials, "expected parameter 'materials' to be non-null");
        this.metadata = Objects.requireNonNull(metadata, "expected parameter 'metadata' to be non-null");
        this.recipe = Objects.requireNonNull(recipe, "expected parameter 'recipe' to be non-null");
    }

    private InTotoProvenanceResponse() {
        this.builderConfig = null;
        this.materials = List.of();
        this.metadata = null;
        this.recipe = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InTotoProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuilderConfigResponse builderConfig;
        private List<String> materials;
        private MetadataResponse metadata;
        private RecipeResponse recipe;

        public Builder() {
    	      // Empty
        }

        public Builder(InTotoProvenanceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.builderConfig = defaults.builderConfig;
    	      this.materials = defaults.materials;
    	      this.metadata = defaults.metadata;
    	      this.recipe = defaults.recipe;
        }

        public Builder builderConfig(BuilderConfigResponse builderConfig) {
            this.builderConfig = Objects.requireNonNull(builderConfig);
            return this;
        }
        public Builder materials(List<String> materials) {
            this.materials = Objects.requireNonNull(materials);
            return this;
        }
        public Builder materials(String... materials) {
            return materials(List.of(materials));
        }
        public Builder metadata(MetadataResponse metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder recipe(RecipeResponse recipe) {
            this.recipe = Objects.requireNonNull(recipe);
            return this;
        }        public InTotoProvenanceResponse build() {
            return new InTotoProvenanceResponse(builderConfig, materials, metadata, recipe);
        }
    }
}
