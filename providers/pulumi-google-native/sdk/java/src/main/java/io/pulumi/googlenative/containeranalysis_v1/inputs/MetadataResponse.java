// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1.inputs.CompletenessResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class MetadataResponse extends io.pulumi.resources.InvokeArgs {

    public static final MetadataResponse Empty = new MetadataResponse();

    @InputImport(name="buildFinishedOn", required=true)
    private final String buildFinishedOn;

    public String getBuildFinishedOn() {
        return this.buildFinishedOn;
    }

    @InputImport(name="buildInvocationId", required=true)
    private final String buildInvocationId;

    public String getBuildInvocationId() {
        return this.buildInvocationId;
    }

    @InputImport(name="buildStartedOn", required=true)
    private final String buildStartedOn;

    public String getBuildStartedOn() {
        return this.buildStartedOn;
    }

    @InputImport(name="completeness", required=true)
    private final CompletenessResponse completeness;

    public CompletenessResponse getCompleteness() {
        return this.completeness;
    }

    @InputImport(name="reproducible", required=true)
    private final Boolean reproducible;

    public Boolean getReproducible() {
        return this.reproducible;
    }

    public MetadataResponse(
        String buildFinishedOn,
        String buildInvocationId,
        String buildStartedOn,
        CompletenessResponse completeness,
        Boolean reproducible) {
        this.buildFinishedOn = Objects.requireNonNull(buildFinishedOn, "expected parameter 'buildFinishedOn' to be non-null");
        this.buildInvocationId = Objects.requireNonNull(buildInvocationId, "expected parameter 'buildInvocationId' to be non-null");
        this.buildStartedOn = Objects.requireNonNull(buildStartedOn, "expected parameter 'buildStartedOn' to be non-null");
        this.completeness = Objects.requireNonNull(completeness, "expected parameter 'completeness' to be non-null");
        this.reproducible = Objects.requireNonNull(reproducible, "expected parameter 'reproducible' to be non-null");
    }

    private MetadataResponse() {
        this.buildFinishedOn = null;
        this.buildInvocationId = null;
        this.buildStartedOn = null;
        this.completeness = null;
        this.reproducible = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetadataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String buildFinishedOn;
        private String buildInvocationId;
        private String buildStartedOn;
        private CompletenessResponse completeness;
        private Boolean reproducible;

        public Builder() {
    	      // Empty
        }

        public Builder(MetadataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildFinishedOn = defaults.buildFinishedOn;
    	      this.buildInvocationId = defaults.buildInvocationId;
    	      this.buildStartedOn = defaults.buildStartedOn;
    	      this.completeness = defaults.completeness;
    	      this.reproducible = defaults.reproducible;
        }

        public Builder setBuildFinishedOn(String buildFinishedOn) {
            this.buildFinishedOn = Objects.requireNonNull(buildFinishedOn);
            return this;
        }

        public Builder setBuildInvocationId(String buildInvocationId) {
            this.buildInvocationId = Objects.requireNonNull(buildInvocationId);
            return this;
        }

        public Builder setBuildStartedOn(String buildStartedOn) {
            this.buildStartedOn = Objects.requireNonNull(buildStartedOn);
            return this;
        }

        public Builder setCompleteness(CompletenessResponse completeness) {
            this.completeness = Objects.requireNonNull(completeness);
            return this;
        }

        public Builder setReproducible(Boolean reproducible) {
            this.reproducible = Objects.requireNonNull(reproducible);
            return this;
        }

        public MetadataResponse build() {
            return new MetadataResponse(buildFinishedOn, buildInvocationId, buildStartedOn, completeness, reproducible);
        }
    }
}
