// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.notebooks_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.notebooks_v1.enums.VirtualMachineConfigNicType;
import io.pulumi.googlenative.notebooks_v1.inputs.ContainerImageArgs;
import io.pulumi.googlenative.notebooks_v1.inputs.EncryptionConfigArgs;
import io.pulumi.googlenative.notebooks_v1.inputs.LocalDiskArgs;
import io.pulumi.googlenative.notebooks_v1.inputs.RuntimeAcceleratorConfigArgs;
import io.pulumi.googlenative.notebooks_v1.inputs.RuntimeShieldedInstanceConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualMachineConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualMachineConfigArgs Empty = new VirtualMachineConfigArgs();

    @InputImport(name="acceleratorConfig")
    private final @Nullable Input<RuntimeAcceleratorConfigArgs> acceleratorConfig;

    public Input<RuntimeAcceleratorConfigArgs> getAcceleratorConfig() {
        return this.acceleratorConfig == null ? Input.empty() : this.acceleratorConfig;
    }

    @InputImport(name="containerImages")
    private final @Nullable Input<List<ContainerImageArgs>> containerImages;

    public Input<List<ContainerImageArgs>> getContainerImages() {
        return this.containerImages == null ? Input.empty() : this.containerImages;
    }

    @InputImport(name="dataDisk", required=true)
    private final Input<LocalDiskArgs> dataDisk;

    public Input<LocalDiskArgs> getDataDisk() {
        return this.dataDisk;
    }

    @InputImport(name="encryptionConfig")
    private final @Nullable Input<EncryptionConfigArgs> encryptionConfig;

    public Input<EncryptionConfigArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Input.empty() : this.encryptionConfig;
    }

    @InputImport(name="internalIpOnly")
    private final @Nullable Input<Boolean> internalIpOnly;

    public Input<Boolean> getInternalIpOnly() {
        return this.internalIpOnly == null ? Input.empty() : this.internalIpOnly;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="machineType", required=true)
    private final Input<String> machineType;

    public Input<String> getMachineType() {
        return this.machineType;
    }

    @InputImport(name="metadata")
    private final @Nullable Input<Map<String,String>> metadata;

    public Input<Map<String,String>> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    @InputImport(name="network")
    private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    @InputImport(name="nicType")
    private final @Nullable Input<VirtualMachineConfigNicType> nicType;

    public Input<VirtualMachineConfigNicType> getNicType() {
        return this.nicType == null ? Input.empty() : this.nicType;
    }

    @InputImport(name="shieldedInstanceConfig")
    private final @Nullable Input<RuntimeShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Input<RuntimeShieldedInstanceConfigArgs> getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Input.empty() : this.shieldedInstanceConfig;
    }

    @InputImport(name="subnet")
    private final @Nullable Input<String> subnet;

    public Input<String> getSubnet() {
        return this.subnet == null ? Input.empty() : this.subnet;
    }

    @InputImport(name="tags")
    private final @Nullable Input<List<String>> tags;

    public Input<List<String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public VirtualMachineConfigArgs(
        @Nullable Input<RuntimeAcceleratorConfigArgs> acceleratorConfig,
        @Nullable Input<List<ContainerImageArgs>> containerImages,
        Input<LocalDiskArgs> dataDisk,
        @Nullable Input<EncryptionConfigArgs> encryptionConfig,
        @Nullable Input<Boolean> internalIpOnly,
        @Nullable Input<Map<String,String>> labels,
        Input<String> machineType,
        @Nullable Input<Map<String,String>> metadata,
        @Nullable Input<String> network,
        @Nullable Input<VirtualMachineConfigNicType> nicType,
        @Nullable Input<RuntimeShieldedInstanceConfigArgs> shieldedInstanceConfig,
        @Nullable Input<String> subnet,
        @Nullable Input<List<String>> tags) {
        this.acceleratorConfig = acceleratorConfig;
        this.containerImages = containerImages;
        this.dataDisk = Objects.requireNonNull(dataDisk, "expected parameter 'dataDisk' to be non-null");
        this.encryptionConfig = encryptionConfig;
        this.internalIpOnly = internalIpOnly;
        this.labels = labels;
        this.machineType = Objects.requireNonNull(machineType, "expected parameter 'machineType' to be non-null");
        this.metadata = metadata;
        this.network = network;
        this.nicType = nicType;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.subnet = subnet;
        this.tags = tags;
    }

    private VirtualMachineConfigArgs() {
        this.acceleratorConfig = Input.empty();
        this.containerImages = Input.empty();
        this.dataDisk = Input.empty();
        this.encryptionConfig = Input.empty();
        this.internalIpOnly = Input.empty();
        this.labels = Input.empty();
        this.machineType = Input.empty();
        this.metadata = Input.empty();
        this.network = Input.empty();
        this.nicType = Input.empty();
        this.shieldedInstanceConfig = Input.empty();
        this.subnet = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RuntimeAcceleratorConfigArgs> acceleratorConfig;
        private @Nullable Input<List<ContainerImageArgs>> containerImages;
        private Input<LocalDiskArgs> dataDisk;
        private @Nullable Input<EncryptionConfigArgs> encryptionConfig;
        private @Nullable Input<Boolean> internalIpOnly;
        private @Nullable Input<Map<String,String>> labels;
        private Input<String> machineType;
        private @Nullable Input<Map<String,String>> metadata;
        private @Nullable Input<String> network;
        private @Nullable Input<VirtualMachineConfigNicType> nicType;
        private @Nullable Input<RuntimeShieldedInstanceConfigArgs> shieldedInstanceConfig;
        private @Nullable Input<String> subnet;
        private @Nullable Input<List<String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.containerImages = defaults.containerImages;
    	      this.dataDisk = defaults.dataDisk;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.internalIpOnly = defaults.internalIpOnly;
    	      this.labels = defaults.labels;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.nicType = defaults.nicType;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
        }

        public Builder setAcceleratorConfig(@Nullable Input<RuntimeAcceleratorConfigArgs> acceleratorConfig) {
            this.acceleratorConfig = acceleratorConfig;
            return this;
        }

        public Builder setAcceleratorConfig(@Nullable RuntimeAcceleratorConfigArgs acceleratorConfig) {
            this.acceleratorConfig = Input.ofNullable(acceleratorConfig);
            return this;
        }

        public Builder setContainerImages(@Nullable Input<List<ContainerImageArgs>> containerImages) {
            this.containerImages = containerImages;
            return this;
        }

        public Builder setContainerImages(@Nullable List<ContainerImageArgs> containerImages) {
            this.containerImages = Input.ofNullable(containerImages);
            return this;
        }

        public Builder setDataDisk(Input<LocalDiskArgs> dataDisk) {
            this.dataDisk = Objects.requireNonNull(dataDisk);
            return this;
        }

        public Builder setDataDisk(LocalDiskArgs dataDisk) {
            this.dataDisk = Input.of(Objects.requireNonNull(dataDisk));
            return this;
        }

        public Builder setEncryptionConfig(@Nullable Input<EncryptionConfigArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder setEncryptionConfig(@Nullable EncryptionConfigArgs encryptionConfig) {
            this.encryptionConfig = Input.ofNullable(encryptionConfig);
            return this;
        }

        public Builder setInternalIpOnly(@Nullable Input<Boolean> internalIpOnly) {
            this.internalIpOnly = internalIpOnly;
            return this;
        }

        public Builder setInternalIpOnly(@Nullable Boolean internalIpOnly) {
            this.internalIpOnly = Input.ofNullable(internalIpOnly);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMachineType(Input<String> machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder setMachineType(String machineType) {
            this.machineType = Input.of(Objects.requireNonNull(machineType));
            return this;
        }

        public Builder setMetadata(@Nullable Input<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable Map<String,String> metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setNetwork(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder setNicType(@Nullable Input<VirtualMachineConfigNicType> nicType) {
            this.nicType = nicType;
            return this;
        }

        public Builder setNicType(@Nullable VirtualMachineConfigNicType nicType) {
            this.nicType = Input.ofNullable(nicType);
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable Input<RuntimeShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable RuntimeShieldedInstanceConfigArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Input.ofNullable(shieldedInstanceConfig);
            return this;
        }

        public Builder setSubnet(@Nullable Input<String> subnet) {
            this.subnet = subnet;
            return this;
        }

        public Builder setSubnet(@Nullable String subnet) {
            this.subnet = Input.ofNullable(subnet);
            return this;
        }

        public Builder setTags(@Nullable Input<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public VirtualMachineConfigArgs build() {
            return new VirtualMachineConfigArgs(acceleratorConfig, containerImages, dataDisk, encryptionConfig, internalIpOnly, labels, machineType, metadata, network, nicType, shieldedInstanceConfig, subnet, tags);
        }
    }
}
