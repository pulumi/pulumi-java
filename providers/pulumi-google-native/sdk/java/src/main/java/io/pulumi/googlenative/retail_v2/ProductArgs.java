// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.retail_v2;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.retail_v2.enums.ProductAvailability;
import io.pulumi.googlenative.retail_v2.enums.ProductType;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2AudienceArgs;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2ColorInfoArgs;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2FulfillmentInfoArgs;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2ImageArgs;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2PriceInfoArgs;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2PromotionArgs;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2RatingArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProductArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProductArgs Empty = new ProductArgs();

    /**
     * Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer. For example: `{ "vendor": {"text": ["vendor123", "vendor456"]}, "lengths_cm": {"numbers":[2.3, 15.4]}, "heights_cm": {"numbers":[8.1, 6.4]} }`. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * Max entries count: 200. * The key must be a UTF-8 encoded string with a length limit of 128 characters. * For indexable attribute, the key must match the pattern: `a-zA-Z0-9*`. For example, `key0LikeThis` or `KEY_1_LIKE_THIS`. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed.
     * 
     */
    @InputImport(name="attributes")
    private final @Nullable Input<Map<String,String>> attributes;

    public Input<Map<String,String>> getAttributes() {
        return this.attributes == null ? Input.empty() : this.attributes;
    }

    /**
     * The target group associated with a given audience (e.g. male, veterans, car owners, musicians, etc.) of the product.
     * 
     */
    @InputImport(name="audience")
    private final @Nullable Input<GoogleCloudRetailV2AudienceArgs> audience;

    public Input<GoogleCloudRetailV2AudienceArgs> getAudience() {
        return this.audience == null ? Input.empty() : this.audience;
    }

    /**
     * The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).
     * 
     */
    @InputImport(name="availability")
    private final @Nullable Input<ProductAvailability> availability;

    public Input<ProductAvailability> getAvailability() {
        return this.availability == null ? Input.empty() : this.availability;
    }

    /**
     * The available quantity of the item.
     * 
     */
    @InputImport(name="availableQuantity")
    private final @Nullable Input<Integer> availableQuantity;

    public Input<Integer> getAvailableQuantity() {
        return this.availableQuantity == null ? Input.empty() : this.availableQuantity;
    }

    /**
     * The timestamp when this Product becomes available for SearchService.Search.
     * 
     */
    @InputImport(name="availableTime")
    private final @Nullable Input<String> availableTime;

    public Input<String> getAvailableTime() {
        return this.availableTime == null ? Input.empty() : this.availableTime;
    }

    @InputImport(name="branchId", required=true)
    private final Input<String> branchId;

    public Input<String> getBranchId() {
        return this.branchId;
    }

    /**
     * The brands of the product. A maximum of 30 brands are allowed. Each brand must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [brand](https://support.google.com/merchants/answer/6324351). Schema.org property [Product.brand](https://schema.org/brand).
     * 
     */
    @InputImport(name="brands")
    private final @Nullable Input<List<String>> brands;

    public Input<List<String>> getBrands() {
        return this.brands == null ? Input.empty() : this.brands;
    }

    @InputImport(name="catalogId", required=true)
    private final Input<String> catalogId;

    public Input<String> getCatalogId() {
        return this.catalogId;
    }

    /**
     * Product categories. This field is repeated for supporting one product belonging to several parallel categories. Strongly recommended using the full path for better search / recommendation quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, please replace it with other character(s). For example, if a shoes product belongs to both ["Shoes & Accessories" -> "Shoes"] and ["Sports & Fitness" -> "Athletic Clothing" -> "Shoes"], it could be represented as: "categories": [ "Shoes & Accessories > Shoes", "Sports & Fitness > Athletic Clothing > Shoes" ] Must be set for Type.PRIMARY Product otherwise an INVALID_ARGUMENT error is returned. At most 250 values are allowed per Product. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property google_product_category. Schema.org property [Product.category] (https://schema.org/category). [mc_google_product_category]: https://support.google.com/merchants/answer/6324436
     * 
     */
    @InputImport(name="categories")
    private final @Nullable Input<List<String>> categories;

    public Input<List<String>> getCategories() {
        return this.categories == null ? Input.empty() : this.categories;
    }

    /**
     * The id of the collection members when type is Type.COLLECTION. Non-existent product ids are allowed. The type of the members must be either Type.PRIMARY or Type.VARIANT otherwise and INVALID_ARGUMENT error is thrown. Should not set it for other types. A maximum of 1000 values are allowed. Otherwise, an INVALID_ARGUMENT error is return.
     * 
     */
    @InputImport(name="collectionMemberIds")
    private final @Nullable Input<List<String>> collectionMemberIds;

    public Input<List<String>> getCollectionMemberIds() {
        return this.collectionMemberIds == null ? Input.empty() : this.collectionMemberIds;
    }

    /**
     * The color of the product. Corresponding properties: Google Merchant Center property [color](https://support.google.com/merchants/answer/6324487). Schema.org property [Product.color](https://schema.org/color).
     * 
     */
    @InputImport(name="colorInfo")
    private final @Nullable Input<GoogleCloudRetailV2ColorInfoArgs> colorInfo;

    public Input<GoogleCloudRetailV2ColorInfoArgs> getColorInfo() {
        return this.colorInfo == null ? Input.empty() : this.colorInfo;
    }

    /**
     * The condition of the product. Strongly encouraged to use the standard values: "new", "refurbished", "used". A maximum of 1 value is allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [condition](https://support.google.com/merchants/answer/6324469). Schema.org property [Offer.itemCondition](https://schema.org/itemCondition).
     * 
     */
    @InputImport(name="conditions")
    private final @Nullable Input<List<String>> conditions;

    public Input<List<String>> getConditions() {
        return this.conditions == null ? Input.empty() : this.conditions;
    }

    /**
     * Product description. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [description](https://support.google.com/merchants/answer/6324468). Schema.org property [Product.description](https://schema.org/description).
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The timestamp when this product becomes unavailable for SearchService.Search. If it is set, the Product is not available for SearchService.Search after expire_time. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts. expire_time must be later than available_time and publish_time, otherwise an INVALID_ARGUMENT error is thrown. Corresponding properties: Google Merchant Center property [expiration_date](https://support.google.com/merchants/answer/6324499).
     * 
     */
    @InputImport(name="expireTime")
    private final @Nullable Input<String> expireTime;

    public Input<String> getExpireTime() {
        return this.expireTime == null ? Input.empty() : this.expireTime;
    }

    /**
     * Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods. All the elements must have distinct FulfillmentInfo.type. Otherwise, an INVALID_ARGUMENT error is returned.
     * 
     */
    @InputImport(name="fulfillmentInfo")
    private final @Nullable Input<List<GoogleCloudRetailV2FulfillmentInfoArgs>> fulfillmentInfo;

    public Input<List<GoogleCloudRetailV2FulfillmentInfoArgs>> getFulfillmentInfo() {
        return this.fulfillmentInfo == null ? Input.empty() : this.fulfillmentInfo;
    }

    /**
     * The Global Trade Item Number (GTIN) of the product. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. This field must be a Unigram. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [gtin](https://support.google.com/merchants/answer/6324461). Schema.org property [Product.isbn](https://schema.org/isbn), [Product.gtin8](https://schema.org/gtin8), [Product.gtin12](https://schema.org/gtin12), [Product.gtin13](https://schema.org/gtin13), or [Product.gtin14](https://schema.org/gtin14). If the value is not a valid GTIN, an INVALID_ARGUMENT error is returned.
     * 
     */
    @InputImport(name="gtin")
    private final @Nullable Input<String> gtin;

    public Input<String> getGtin() {
        return this.gtin == null ? Input.empty() : this.gtin;
    }

    /**
     * Immutable. Product identifier, which is the final component of name. For example, this field is "id_1", if name is `projects/*{@literal /}locations/global/catalogs/default_catalog/branches/default_branch/products/id_1`. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [id](https://support.google.com/merchants/answer/6324405). Schema.org property [Product.sku](https://schema.org/sku).
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * Product images for the product.Highly recommended to put the main image to the first. A maximum of 300 images are allowed. Corresponding properties: Google Merchant Center property [image_link](https://support.google.com/merchants/answer/6324350). Schema.org property [Product.image](https://schema.org/image).
     * 
     */
    @InputImport(name="images")
    private final @Nullable Input<List<GoogleCloudRetailV2ImageArgs>> images;

    public Input<List<GoogleCloudRetailV2ImageArgs>> getImages() {
        return this.images == null ? Input.empty() : this.images;
    }

    /**
     * Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). For product prediction, this field is ignored and the model automatically detects the text language. The Product can include text in different languages, but duplicating Products to provide text in multiple languages can result in degraded model performance. For product search this field is in use. It defaults to "en-US" if unset.
     * 
     */
    @InputImport(name="languageCode")
    private final @Nullable Input<String> languageCode;

    public Input<String> getLanguageCode() {
        return this.languageCode == null ? Input.empty() : this.languageCode;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The material of the product. For example, "leather", "wooden". A maximum of 20 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [material](https://support.google.com/merchants/answer/6324410). Schema.org property [Product.material](https://schema.org/material).
     * 
     */
    @InputImport(name="materials")
    private final @Nullable Input<List<String>> materials;

    public Input<List<String>> getMaterials() {
        return this.materials == null ? Input.empty() : this.materials;
    }

    /**
     * Immutable. Full resource name of the product, such as `projects/*{@literal /}locations/global/catalogs/default_catalog/branches/default_branch/products/product_id`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The pattern or graphic print of the product. For example, "striped", "polka dot", "paisley". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [pattern](https://support.google.com/merchants/answer/6324483). Schema.org property [Product.pattern](https://schema.org/pattern).
     * 
     */
    @InputImport(name="patterns")
    private final @Nullable Input<List<String>> patterns;

    public Input<List<String>> getPatterns() {
        return this.patterns == null ? Input.empty() : this.patterns;
    }

    /**
     * Product price and cost information. Corresponding properties: Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371).
     * 
     */
    @InputImport(name="priceInfo")
    private final @Nullable Input<GoogleCloudRetailV2PriceInfoArgs> priceInfo;

    public Input<GoogleCloudRetailV2PriceInfoArgs> getPriceInfo() {
        return this.priceInfo == null ? Input.empty() : this.priceInfo;
    }

    /**
     * Variant group identifier. Must be an id, with the same parent branch with this product. Otherwise, an error is thrown. For Type.PRIMARY Products, this field can only be empty or set to the same value as id. For VARIANT Products, this field cannot be empty. A maximum of 2,000 products are allowed to share the same Type.PRIMARY Product. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [item_group_id](https://support.google.com/merchants/answer/6324507). Schema.org property [Product.inProductGroupWithID](https://schema.org/inProductGroupWithID).
     * 
     */
    @InputImport(name="primaryProductId")
    private final @Nullable Input<String> primaryProductId;

    public Input<String> getPrimaryProductId() {
        return this.primaryProductId == null ? Input.empty() : this.primaryProductId;
    }

    @InputImport(name="productId", required=true)
    private final Input<String> productId;

    public Input<String> getProductId() {
        return this.productId;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The promotions applied to the product. A maximum of 10 values are allowed per Product. Only Promotion.promotion_id will be used, other fields will be ignored if set.
     * 
     */
    @InputImport(name="promotions")
    private final @Nullable Input<List<GoogleCloudRetailV2PromotionArgs>> promotions;

    public Input<List<GoogleCloudRetailV2PromotionArgs>> getPromotions() {
        return this.promotions == null ? Input.empty() : this.promotions;
    }

    /**
     * The timestamp when the product is published by the retailer for the first time, which indicates the freshness of the products. Note that this field is different from available_time, given it purely describes product freshness regardless of when it is available on search and recommendation.
     * 
     */
    @InputImport(name="publishTime")
    private final @Nullable Input<String> publishTime;

    public Input<String> getPublishTime() {
        return this.publishTime == null ? Input.empty() : this.publishTime;
    }

    /**
     * The rating of this product.
     * 
     */
    @InputImport(name="rating")
    private final @Nullable Input<GoogleCloudRetailV2RatingArgs> rating;

    public Input<GoogleCloudRetailV2RatingArgs> getRating() {
        return this.rating == null ? Input.empty() : this.rating;
    }

    /**
     * Indicates which fields in the Products are returned in SearchResponse. Supported fields for all types: * audience * availability * brands * color_info * conditions * gtin * materials * name * patterns * price_info * rating * sizes * title * uri Supported fields only for Type.PRIMARY and Type.COLLECTION: * categories * description * images Supported fields only for Type.VARIANT: * Only the first image in images To mark attributes as retrievable, include paths of the form "attributes.key" where "key" is the key of a custom attribute, as specified in attributes. For Type.PRIMARY and Type.COLLECTION, the following fields are always returned in SearchResponse by default: * name For Type.VARIANT, the following fields are always returned in by default: * name * color_info Maximum number of paths is 30. Otherwise, an INVALID_ARGUMENT error is returned. Note: Returning more fields in SearchResponse may increase response payload size and serving latency.
     * 
     */
    @InputImport(name="retrievableFields")
    private final @Nullable Input<String> retrievableFields;

    public Input<String> getRetrievableFields() {
        return this.retrievableFields == null ? Input.empty() : this.retrievableFields;
    }

    /**
     * The size of the product. To represent different size systems or size types, consider using this format: [[[size_system:]size_type:]size_value]. For example, in "US:MENS:M", "US" represents size system; "MENS" represents size type; "M" represents size value. In "GIRLS:27", size system is empty; "GIRLS" represents size type; "27" represents size value. In "32 inches", both size system and size type are empty, while size value is "32 inches". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [size](https://support.google.com/merchants/answer/6324492), [size_type](https://support.google.com/merchants/answer/6324497), and [size_system](https://support.google.com/merchants/answer/6324502). Schema.org property [Product.size](https://schema.org/size).
     * 
     */
    @InputImport(name="sizes")
    private final @Nullable Input<List<String>> sizes;

    public Input<List<String>> getSizes() {
        return this.sizes == null ? Input.empty() : this.sizes;
    }

    /**
     * Custom tags associated with the product. At most 250 values are allowed per Product. This value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This tag can be used for filtering recommendation results by passing the tag as part of the PredictRequest.filter. Corresponding properties: Google Merchant Center property [custom_label_0–4](https://support.google.com/merchants/answer/6324473).
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<String>> tags;

    public Input<List<String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Product title. This field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [title](https://support.google.com/merchants/answer/6324415). Schema.org property [Product.name](https://schema.org/name).
     * 
     */
    @InputImport(name="title", required=true)
    private final Input<String> title;

    public Input<String> getTitle() {
        return this.title;
    }

    /**
     * Input only. The TTL (time to live) of the product. If it is set, it must be a non-negative value, and expire_time is set as current timestamp plus ttl. The derived expire_time is returned in the output and ttl is left blank when retrieving the Product. If it is set, the product is not available for SearchService.Search after current timestamp plus ttl. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts.
     * 
     */
    @InputImport(name="ttl")
    private final @Nullable Input<String> ttl;

    public Input<String> getTtl() {
        return this.ttl == null ? Input.empty() : this.ttl;
    }

    /**
     * Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.
     * 
     */
    @InputImport(name="type")
    private final @Nullable Input<ProductType> type;

    public Input<ProductType> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * Canonical URL directly linking to the product detail page. It is strongly recommended to provide a valid uri for the product, otherwise the service performance could be significantly degraded. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [link](https://support.google.com/merchants/answer/6324416). Schema.org property [Offer.url](https://schema.org/url).
     * 
     */
    @InputImport(name="uri")
    private final @Nullable Input<String> uri;

    public Input<String> getUri() {
        return this.uri == null ? Input.empty() : this.uri;
    }

    public ProductArgs(
        @Nullable Input<Map<String,String>> attributes,
        @Nullable Input<GoogleCloudRetailV2AudienceArgs> audience,
        @Nullable Input<ProductAvailability> availability,
        @Nullable Input<Integer> availableQuantity,
        @Nullable Input<String> availableTime,
        Input<String> branchId,
        @Nullable Input<List<String>> brands,
        Input<String> catalogId,
        @Nullable Input<List<String>> categories,
        @Nullable Input<List<String>> collectionMemberIds,
        @Nullable Input<GoogleCloudRetailV2ColorInfoArgs> colorInfo,
        @Nullable Input<List<String>> conditions,
        @Nullable Input<String> description,
        @Nullable Input<String> expireTime,
        @Nullable Input<List<GoogleCloudRetailV2FulfillmentInfoArgs>> fulfillmentInfo,
        @Nullable Input<String> gtin,
        @Nullable Input<String> id,
        @Nullable Input<List<GoogleCloudRetailV2ImageArgs>> images,
        @Nullable Input<String> languageCode,
        @Nullable Input<String> location,
        @Nullable Input<List<String>> materials,
        @Nullable Input<String> name,
        @Nullable Input<List<String>> patterns,
        @Nullable Input<GoogleCloudRetailV2PriceInfoArgs> priceInfo,
        @Nullable Input<String> primaryProductId,
        Input<String> productId,
        @Nullable Input<String> project,
        @Nullable Input<List<GoogleCloudRetailV2PromotionArgs>> promotions,
        @Nullable Input<String> publishTime,
        @Nullable Input<GoogleCloudRetailV2RatingArgs> rating,
        @Nullable Input<String> retrievableFields,
        @Nullable Input<List<String>> sizes,
        @Nullable Input<List<String>> tags,
        Input<String> title,
        @Nullable Input<String> ttl,
        @Nullable Input<ProductType> type,
        @Nullable Input<String> uri) {
        this.attributes = attributes;
        this.audience = audience;
        this.availability = availability;
        this.availableQuantity = availableQuantity;
        this.availableTime = availableTime;
        this.branchId = Objects.requireNonNull(branchId, "expected parameter 'branchId' to be non-null");
        this.brands = brands;
        this.catalogId = Objects.requireNonNull(catalogId, "expected parameter 'catalogId' to be non-null");
        this.categories = categories;
        this.collectionMemberIds = collectionMemberIds;
        this.colorInfo = colorInfo;
        this.conditions = conditions;
        this.description = description;
        this.expireTime = expireTime;
        this.fulfillmentInfo = fulfillmentInfo;
        this.gtin = gtin;
        this.id = id;
        this.images = images;
        this.languageCode = languageCode;
        this.location = location;
        this.materials = materials;
        this.name = name;
        this.patterns = patterns;
        this.priceInfo = priceInfo;
        this.primaryProductId = primaryProductId;
        this.productId = Objects.requireNonNull(productId, "expected parameter 'productId' to be non-null");
        this.project = project;
        this.promotions = promotions;
        this.publishTime = publishTime;
        this.rating = rating;
        this.retrievableFields = retrievableFields;
        this.sizes = sizes;
        this.tags = tags;
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
        this.ttl = ttl;
        this.type = type;
        this.uri = uri;
    }

    private ProductArgs() {
        this.attributes = Input.empty();
        this.audience = Input.empty();
        this.availability = Input.empty();
        this.availableQuantity = Input.empty();
        this.availableTime = Input.empty();
        this.branchId = Input.empty();
        this.brands = Input.empty();
        this.catalogId = Input.empty();
        this.categories = Input.empty();
        this.collectionMemberIds = Input.empty();
        this.colorInfo = Input.empty();
        this.conditions = Input.empty();
        this.description = Input.empty();
        this.expireTime = Input.empty();
        this.fulfillmentInfo = Input.empty();
        this.gtin = Input.empty();
        this.id = Input.empty();
        this.images = Input.empty();
        this.languageCode = Input.empty();
        this.location = Input.empty();
        this.materials = Input.empty();
        this.name = Input.empty();
        this.patterns = Input.empty();
        this.priceInfo = Input.empty();
        this.primaryProductId = Input.empty();
        this.productId = Input.empty();
        this.project = Input.empty();
        this.promotions = Input.empty();
        this.publishTime = Input.empty();
        this.rating = Input.empty();
        this.retrievableFields = Input.empty();
        this.sizes = Input.empty();
        this.tags = Input.empty();
        this.title = Input.empty();
        this.ttl = Input.empty();
        this.type = Input.empty();
        this.uri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProductArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,String>> attributes;
        private @Nullable Input<GoogleCloudRetailV2AudienceArgs> audience;
        private @Nullable Input<ProductAvailability> availability;
        private @Nullable Input<Integer> availableQuantity;
        private @Nullable Input<String> availableTime;
        private Input<String> branchId;
        private @Nullable Input<List<String>> brands;
        private Input<String> catalogId;
        private @Nullable Input<List<String>> categories;
        private @Nullable Input<List<String>> collectionMemberIds;
        private @Nullable Input<GoogleCloudRetailV2ColorInfoArgs> colorInfo;
        private @Nullable Input<List<String>> conditions;
        private @Nullable Input<String> description;
        private @Nullable Input<String> expireTime;
        private @Nullable Input<List<GoogleCloudRetailV2FulfillmentInfoArgs>> fulfillmentInfo;
        private @Nullable Input<String> gtin;
        private @Nullable Input<String> id;
        private @Nullable Input<List<GoogleCloudRetailV2ImageArgs>> images;
        private @Nullable Input<String> languageCode;
        private @Nullable Input<String> location;
        private @Nullable Input<List<String>> materials;
        private @Nullable Input<String> name;
        private @Nullable Input<List<String>> patterns;
        private @Nullable Input<GoogleCloudRetailV2PriceInfoArgs> priceInfo;
        private @Nullable Input<String> primaryProductId;
        private Input<String> productId;
        private @Nullable Input<String> project;
        private @Nullable Input<List<GoogleCloudRetailV2PromotionArgs>> promotions;
        private @Nullable Input<String> publishTime;
        private @Nullable Input<GoogleCloudRetailV2RatingArgs> rating;
        private @Nullable Input<String> retrievableFields;
        private @Nullable Input<List<String>> sizes;
        private @Nullable Input<List<String>> tags;
        private Input<String> title;
        private @Nullable Input<String> ttl;
        private @Nullable Input<ProductType> type;
        private @Nullable Input<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(ProductArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.audience = defaults.audience;
    	      this.availability = defaults.availability;
    	      this.availableQuantity = defaults.availableQuantity;
    	      this.availableTime = defaults.availableTime;
    	      this.branchId = defaults.branchId;
    	      this.brands = defaults.brands;
    	      this.catalogId = defaults.catalogId;
    	      this.categories = defaults.categories;
    	      this.collectionMemberIds = defaults.collectionMemberIds;
    	      this.colorInfo = defaults.colorInfo;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.expireTime = defaults.expireTime;
    	      this.fulfillmentInfo = defaults.fulfillmentInfo;
    	      this.gtin = defaults.gtin;
    	      this.id = defaults.id;
    	      this.images = defaults.images;
    	      this.languageCode = defaults.languageCode;
    	      this.location = defaults.location;
    	      this.materials = defaults.materials;
    	      this.name = defaults.name;
    	      this.patterns = defaults.patterns;
    	      this.priceInfo = defaults.priceInfo;
    	      this.primaryProductId = defaults.primaryProductId;
    	      this.productId = defaults.productId;
    	      this.project = defaults.project;
    	      this.promotions = defaults.promotions;
    	      this.publishTime = defaults.publishTime;
    	      this.rating = defaults.rating;
    	      this.retrievableFields = defaults.retrievableFields;
    	      this.sizes = defaults.sizes;
    	      this.tags = defaults.tags;
    	      this.title = defaults.title;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        public Builder setAttributes(@Nullable Input<Map<String,String>> attributes) {
            this.attributes = attributes;
            return this;
        }

        public Builder setAttributes(@Nullable Map<String,String> attributes) {
            this.attributes = Input.ofNullable(attributes);
            return this;
        }

        public Builder setAudience(@Nullable Input<GoogleCloudRetailV2AudienceArgs> audience) {
            this.audience = audience;
            return this;
        }

        public Builder setAudience(@Nullable GoogleCloudRetailV2AudienceArgs audience) {
            this.audience = Input.ofNullable(audience);
            return this;
        }

        public Builder setAvailability(@Nullable Input<ProductAvailability> availability) {
            this.availability = availability;
            return this;
        }

        public Builder setAvailability(@Nullable ProductAvailability availability) {
            this.availability = Input.ofNullable(availability);
            return this;
        }

        public Builder setAvailableQuantity(@Nullable Input<Integer> availableQuantity) {
            this.availableQuantity = availableQuantity;
            return this;
        }

        public Builder setAvailableQuantity(@Nullable Integer availableQuantity) {
            this.availableQuantity = Input.ofNullable(availableQuantity);
            return this;
        }

        public Builder setAvailableTime(@Nullable Input<String> availableTime) {
            this.availableTime = availableTime;
            return this;
        }

        public Builder setAvailableTime(@Nullable String availableTime) {
            this.availableTime = Input.ofNullable(availableTime);
            return this;
        }

        public Builder setBranchId(Input<String> branchId) {
            this.branchId = Objects.requireNonNull(branchId);
            return this;
        }

        public Builder setBranchId(String branchId) {
            this.branchId = Input.of(Objects.requireNonNull(branchId));
            return this;
        }

        public Builder setBrands(@Nullable Input<List<String>> brands) {
            this.brands = brands;
            return this;
        }

        public Builder setBrands(@Nullable List<String> brands) {
            this.brands = Input.ofNullable(brands);
            return this;
        }

        public Builder setCatalogId(Input<String> catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }

        public Builder setCatalogId(String catalogId) {
            this.catalogId = Input.of(Objects.requireNonNull(catalogId));
            return this;
        }

        public Builder setCategories(@Nullable Input<List<String>> categories) {
            this.categories = categories;
            return this;
        }

        public Builder setCategories(@Nullable List<String> categories) {
            this.categories = Input.ofNullable(categories);
            return this;
        }

        public Builder setCollectionMemberIds(@Nullable Input<List<String>> collectionMemberIds) {
            this.collectionMemberIds = collectionMemberIds;
            return this;
        }

        public Builder setCollectionMemberIds(@Nullable List<String> collectionMemberIds) {
            this.collectionMemberIds = Input.ofNullable(collectionMemberIds);
            return this;
        }

        public Builder setColorInfo(@Nullable Input<GoogleCloudRetailV2ColorInfoArgs> colorInfo) {
            this.colorInfo = colorInfo;
            return this;
        }

        public Builder setColorInfo(@Nullable GoogleCloudRetailV2ColorInfoArgs colorInfo) {
            this.colorInfo = Input.ofNullable(colorInfo);
            return this;
        }

        public Builder setConditions(@Nullable Input<List<String>> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder setConditions(@Nullable List<String> conditions) {
            this.conditions = Input.ofNullable(conditions);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setExpireTime(@Nullable Input<String> expireTime) {
            this.expireTime = expireTime;
            return this;
        }

        public Builder setExpireTime(@Nullable String expireTime) {
            this.expireTime = Input.ofNullable(expireTime);
            return this;
        }

        public Builder setFulfillmentInfo(@Nullable Input<List<GoogleCloudRetailV2FulfillmentInfoArgs>> fulfillmentInfo) {
            this.fulfillmentInfo = fulfillmentInfo;
            return this;
        }

        public Builder setFulfillmentInfo(@Nullable List<GoogleCloudRetailV2FulfillmentInfoArgs> fulfillmentInfo) {
            this.fulfillmentInfo = Input.ofNullable(fulfillmentInfo);
            return this;
        }

        public Builder setGtin(@Nullable Input<String> gtin) {
            this.gtin = gtin;
            return this;
        }

        public Builder setGtin(@Nullable String gtin) {
            this.gtin = Input.ofNullable(gtin);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setImages(@Nullable Input<List<GoogleCloudRetailV2ImageArgs>> images) {
            this.images = images;
            return this;
        }

        public Builder setImages(@Nullable List<GoogleCloudRetailV2ImageArgs> images) {
            this.images = Input.ofNullable(images);
            return this;
        }

        public Builder setLanguageCode(@Nullable Input<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder setLanguageCode(@Nullable String languageCode) {
            this.languageCode = Input.ofNullable(languageCode);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMaterials(@Nullable Input<List<String>> materials) {
            this.materials = materials;
            return this;
        }

        public Builder setMaterials(@Nullable List<String> materials) {
            this.materials = Input.ofNullable(materials);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPatterns(@Nullable Input<List<String>> patterns) {
            this.patterns = patterns;
            return this;
        }

        public Builder setPatterns(@Nullable List<String> patterns) {
            this.patterns = Input.ofNullable(patterns);
            return this;
        }

        public Builder setPriceInfo(@Nullable Input<GoogleCloudRetailV2PriceInfoArgs> priceInfo) {
            this.priceInfo = priceInfo;
            return this;
        }

        public Builder setPriceInfo(@Nullable GoogleCloudRetailV2PriceInfoArgs priceInfo) {
            this.priceInfo = Input.ofNullable(priceInfo);
            return this;
        }

        public Builder setPrimaryProductId(@Nullable Input<String> primaryProductId) {
            this.primaryProductId = primaryProductId;
            return this;
        }

        public Builder setPrimaryProductId(@Nullable String primaryProductId) {
            this.primaryProductId = Input.ofNullable(primaryProductId);
            return this;
        }

        public Builder setProductId(Input<String> productId) {
            this.productId = Objects.requireNonNull(productId);
            return this;
        }

        public Builder setProductId(String productId) {
            this.productId = Input.of(Objects.requireNonNull(productId));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setPromotions(@Nullable Input<List<GoogleCloudRetailV2PromotionArgs>> promotions) {
            this.promotions = promotions;
            return this;
        }

        public Builder setPromotions(@Nullable List<GoogleCloudRetailV2PromotionArgs> promotions) {
            this.promotions = Input.ofNullable(promotions);
            return this;
        }

        public Builder setPublishTime(@Nullable Input<String> publishTime) {
            this.publishTime = publishTime;
            return this;
        }

        public Builder setPublishTime(@Nullable String publishTime) {
            this.publishTime = Input.ofNullable(publishTime);
            return this;
        }

        public Builder setRating(@Nullable Input<GoogleCloudRetailV2RatingArgs> rating) {
            this.rating = rating;
            return this;
        }

        public Builder setRating(@Nullable GoogleCloudRetailV2RatingArgs rating) {
            this.rating = Input.ofNullable(rating);
            return this;
        }

        public Builder setRetrievableFields(@Nullable Input<String> retrievableFields) {
            this.retrievableFields = retrievableFields;
            return this;
        }

        public Builder setRetrievableFields(@Nullable String retrievableFields) {
            this.retrievableFields = Input.ofNullable(retrievableFields);
            return this;
        }

        public Builder setSizes(@Nullable Input<List<String>> sizes) {
            this.sizes = sizes;
            return this;
        }

        public Builder setSizes(@Nullable List<String> sizes) {
            this.sizes = Input.ofNullable(sizes);
            return this;
        }

        public Builder setTags(@Nullable Input<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTitle(Input<String> title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Input.of(Objects.requireNonNull(title));
            return this;
        }

        public Builder setTtl(@Nullable Input<String> ttl) {
            this.ttl = ttl;
            return this;
        }

        public Builder setTtl(@Nullable String ttl) {
            this.ttl = Input.ofNullable(ttl);
            return this;
        }

        public Builder setType(@Nullable Input<ProductType> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable ProductType type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setUri(@Nullable Input<String> uri) {
            this.uri = uri;
            return this;
        }

        public Builder setUri(@Nullable String uri) {
            this.uri = Input.ofNullable(uri);
            return this;
        }

        public ProductArgs build() {
            return new ProductArgs(attributes, audience, availability, availableQuantity, availableTime, branchId, brands, catalogId, categories, collectionMemberIds, colorInfo, conditions, description, expireTime, fulfillmentInfo, gtin, id, images, languageCode, location, materials, name, patterns, priceInfo, primaryProductId, productId, project, promotions, publishTime, rating, retrievableFields, sizes, tags, title, ttl, type, uri);
        }
    }
}
