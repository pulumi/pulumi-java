// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sqladmin_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Deny maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
 * 
 */
public final class DenyMaintenancePeriodArgs extends io.pulumi.resources.ResourceArgs {

    public static final DenyMaintenancePeriodArgs Empty = new DenyMaintenancePeriodArgs();

    /**
     * "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     * 
     */
    @Import(name="endDate")
      private final @Nullable Output<String> endDate;

    public Output<String> getEndDate() {
        return this.endDate == null ? Output.empty() : this.endDate;
    }

    /**
     * "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     * 
     */
    @Import(name="startDate")
      private final @Nullable Output<String> startDate;

    public Output<String> getStartDate() {
        return this.startDate == null ? Output.empty() : this.startDate;
    }

    /**
     * Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
     * 
     */
    @Import(name="time")
      private final @Nullable Output<String> time;

    public Output<String> getTime() {
        return this.time == null ? Output.empty() : this.time;
    }

    public DenyMaintenancePeriodArgs(
        @Nullable Output<String> endDate,
        @Nullable Output<String> startDate,
        @Nullable Output<String> time) {
        this.endDate = endDate;
        this.startDate = startDate;
        this.time = time;
    }

    private DenyMaintenancePeriodArgs() {
        this.endDate = Output.empty();
        this.startDate = Output.empty();
        this.time = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DenyMaintenancePeriodArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> endDate;
        private @Nullable Output<String> startDate;
        private @Nullable Output<String> time;

        public Builder() {
    	      // Empty
        }

        public Builder(DenyMaintenancePeriodArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endDate = defaults.endDate;
    	      this.startDate = defaults.startDate;
    	      this.time = defaults.time;
        }

        public Builder endDate(@Nullable Output<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(@Nullable String endDate) {
            this.endDate = Output.ofNullable(endDate);
            return this;
        }

        public Builder startDate(@Nullable Output<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(@Nullable String startDate) {
            this.startDate = Output.ofNullable(startDate);
            return this;
        }

        public Builder time(@Nullable Output<String> time) {
            this.time = time;
            return this;
        }

        public Builder time(@Nullable String time) {
            this.time = Output.ofNullable(time);
            return this;
        }
        public DenyMaintenancePeriodArgs build() {
            return new DenyMaintenancePeriodArgs(endDate, startDate, time);
        }
    }
}
