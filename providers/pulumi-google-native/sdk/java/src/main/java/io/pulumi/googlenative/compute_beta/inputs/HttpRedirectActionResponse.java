// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class HttpRedirectActionResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpRedirectActionResponse Empty = new HttpRedirectActionResponse();

    @InputImport(name="hostRedirect", required=true)
    private final String hostRedirect;

    public String getHostRedirect() {
        return this.hostRedirect;
    }

    @InputImport(name="httpsRedirect", required=true)
    private final Boolean httpsRedirect;

    public Boolean getHttpsRedirect() {
        return this.httpsRedirect;
    }

    @InputImport(name="pathRedirect", required=true)
    private final String pathRedirect;

    public String getPathRedirect() {
        return this.pathRedirect;
    }

    @InputImport(name="prefixRedirect", required=true)
    private final String prefixRedirect;

    public String getPrefixRedirect() {
        return this.prefixRedirect;
    }

    @InputImport(name="redirectResponseCode", required=true)
    private final String redirectResponseCode;

    public String getRedirectResponseCode() {
        return this.redirectResponseCode;
    }

    @InputImport(name="stripQuery", required=true)
    private final Boolean stripQuery;

    public Boolean getStripQuery() {
        return this.stripQuery;
    }

    public HttpRedirectActionResponse(
        String hostRedirect,
        Boolean httpsRedirect,
        String pathRedirect,
        String prefixRedirect,
        String redirectResponseCode,
        Boolean stripQuery) {
        this.hostRedirect = Objects.requireNonNull(hostRedirect, "expected parameter 'hostRedirect' to be non-null");
        this.httpsRedirect = Objects.requireNonNull(httpsRedirect, "expected parameter 'httpsRedirect' to be non-null");
        this.pathRedirect = Objects.requireNonNull(pathRedirect, "expected parameter 'pathRedirect' to be non-null");
        this.prefixRedirect = Objects.requireNonNull(prefixRedirect, "expected parameter 'prefixRedirect' to be non-null");
        this.redirectResponseCode = Objects.requireNonNull(redirectResponseCode, "expected parameter 'redirectResponseCode' to be non-null");
        this.stripQuery = Objects.requireNonNull(stripQuery, "expected parameter 'stripQuery' to be non-null");
    }

    private HttpRedirectActionResponse() {
        this.hostRedirect = null;
        this.httpsRedirect = null;
        this.pathRedirect = null;
        this.prefixRedirect = null;
        this.redirectResponseCode = null;
        this.stripQuery = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRedirectActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String hostRedirect;
        private Boolean httpsRedirect;
        private String pathRedirect;
        private String prefixRedirect;
        private String redirectResponseCode;
        private Boolean stripQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpRedirectActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostRedirect = defaults.hostRedirect;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.pathRedirect = defaults.pathRedirect;
    	      this.prefixRedirect = defaults.prefixRedirect;
    	      this.redirectResponseCode = defaults.redirectResponseCode;
    	      this.stripQuery = defaults.stripQuery;
        }

        public Builder setHostRedirect(String hostRedirect) {
            this.hostRedirect = Objects.requireNonNull(hostRedirect);
            return this;
        }

        public Builder setHttpsRedirect(Boolean httpsRedirect) {
            this.httpsRedirect = Objects.requireNonNull(httpsRedirect);
            return this;
        }

        public Builder setPathRedirect(String pathRedirect) {
            this.pathRedirect = Objects.requireNonNull(pathRedirect);
            return this;
        }

        public Builder setPrefixRedirect(String prefixRedirect) {
            this.prefixRedirect = Objects.requireNonNull(prefixRedirect);
            return this;
        }

        public Builder setRedirectResponseCode(String redirectResponseCode) {
            this.redirectResponseCode = Objects.requireNonNull(redirectResponseCode);
            return this;
        }

        public Builder setStripQuery(Boolean stripQuery) {
            this.stripQuery = Objects.requireNonNull(stripQuery);
            return this;
        }

        public HttpRedirectActionResponse build() {
            return new HttpRedirectActionResponse(hostRedirect, httpsRedirect, pathRedirect, prefixRedirect, redirectResponseCode, stripQuery);
        }
    }
}
