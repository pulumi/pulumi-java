// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigqueryreservation_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigqueryreservation_v1.enums.CapacityCommitmentPlan;
import io.pulumi.googlenative.bigqueryreservation_v1.enums.CapacityCommitmentRenewalPlan;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CapacityCommitmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final CapacityCommitmentArgs Empty = new CapacityCommitmentArgs();

    @InputImport(name="capacityCommitmentId")
    private final @Nullable Input<String> capacityCommitmentId;

    public Input<String> getCapacityCommitmentId() {
        return this.capacityCommitmentId == null ? Input.empty() : this.capacityCommitmentId;
    }

    @InputImport(name="enforceSingleAdminProjectPerOrg")
    private final @Nullable Input<String> enforceSingleAdminProjectPerOrg;

    public Input<String> getEnforceSingleAdminProjectPerOrg() {
        return this.enforceSingleAdminProjectPerOrg == null ? Input.empty() : this.enforceSingleAdminProjectPerOrg;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Capacity commitment commitment plan.
     * 
     */
    @InputImport(name="plan")
    private final @Nullable Input<CapacityCommitmentPlan> plan;

    public Input<CapacityCommitmentPlan> getPlan() {
        return this.plan == null ? Input.empty() : this.plan;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
     * 
     */
    @InputImport(name="renewalPlan")
    private final @Nullable Input<CapacityCommitmentRenewalPlan> renewalPlan;

    public Input<CapacityCommitmentRenewalPlan> getRenewalPlan() {
        return this.renewalPlan == null ? Input.empty() : this.renewalPlan;
    }

    /**
     * Number of slots in this commitment.
     * 
     */
    @InputImport(name="slotCount")
    private final @Nullable Input<String> slotCount;

    public Input<String> getSlotCount() {
        return this.slotCount == null ? Input.empty() : this.slotCount;
    }

    public CapacityCommitmentArgs(
        @Nullable Input<String> capacityCommitmentId,
        @Nullable Input<String> enforceSingleAdminProjectPerOrg,
        @Nullable Input<String> location,
        @Nullable Input<CapacityCommitmentPlan> plan,
        @Nullable Input<String> project,
        @Nullable Input<CapacityCommitmentRenewalPlan> renewalPlan,
        @Nullable Input<String> slotCount) {
        this.capacityCommitmentId = capacityCommitmentId;
        this.enforceSingleAdminProjectPerOrg = enforceSingleAdminProjectPerOrg;
        this.location = location;
        this.plan = plan;
        this.project = project;
        this.renewalPlan = renewalPlan;
        this.slotCount = slotCount;
    }

    private CapacityCommitmentArgs() {
        this.capacityCommitmentId = Input.empty();
        this.enforceSingleAdminProjectPerOrg = Input.empty();
        this.location = Input.empty();
        this.plan = Input.empty();
        this.project = Input.empty();
        this.renewalPlan = Input.empty();
        this.slotCount = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CapacityCommitmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> capacityCommitmentId;
        private @Nullable Input<String> enforceSingleAdminProjectPerOrg;
        private @Nullable Input<String> location;
        private @Nullable Input<CapacityCommitmentPlan> plan;
        private @Nullable Input<String> project;
        private @Nullable Input<CapacityCommitmentRenewalPlan> renewalPlan;
        private @Nullable Input<String> slotCount;

        public Builder() {
    	      // Empty
        }

        public Builder(CapacityCommitmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityCommitmentId = defaults.capacityCommitmentId;
    	      this.enforceSingleAdminProjectPerOrg = defaults.enforceSingleAdminProjectPerOrg;
    	      this.location = defaults.location;
    	      this.plan = defaults.plan;
    	      this.project = defaults.project;
    	      this.renewalPlan = defaults.renewalPlan;
    	      this.slotCount = defaults.slotCount;
        }

        public Builder setCapacityCommitmentId(@Nullable Input<String> capacityCommitmentId) {
            this.capacityCommitmentId = capacityCommitmentId;
            return this;
        }

        public Builder setCapacityCommitmentId(@Nullable String capacityCommitmentId) {
            this.capacityCommitmentId = Input.ofNullable(capacityCommitmentId);
            return this;
        }

        public Builder setEnforceSingleAdminProjectPerOrg(@Nullable Input<String> enforceSingleAdminProjectPerOrg) {
            this.enforceSingleAdminProjectPerOrg = enforceSingleAdminProjectPerOrg;
            return this;
        }

        public Builder setEnforceSingleAdminProjectPerOrg(@Nullable String enforceSingleAdminProjectPerOrg) {
            this.enforceSingleAdminProjectPerOrg = Input.ofNullable(enforceSingleAdminProjectPerOrg);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setPlan(@Nullable Input<CapacityCommitmentPlan> plan) {
            this.plan = plan;
            return this;
        }

        public Builder setPlan(@Nullable CapacityCommitmentPlan plan) {
            this.plan = Input.ofNullable(plan);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRenewalPlan(@Nullable Input<CapacityCommitmentRenewalPlan> renewalPlan) {
            this.renewalPlan = renewalPlan;
            return this;
        }

        public Builder setRenewalPlan(@Nullable CapacityCommitmentRenewalPlan renewalPlan) {
            this.renewalPlan = Input.ofNullable(renewalPlan);
            return this;
        }

        public Builder setSlotCount(@Nullable Input<String> slotCount) {
            this.slotCount = slotCount;
            return this;
        }

        public Builder setSlotCount(@Nullable String slotCount) {
            this.slotCount = Input.ofNullable(slotCount);
            return this;
        }

        public CapacityCommitmentArgs build() {
            return new CapacityCommitmentArgs(capacityCommitmentId, enforceSingleAdminProjectPerOrg, location, plan, project, renewalPlan, slotCount);
        }
    }
}
