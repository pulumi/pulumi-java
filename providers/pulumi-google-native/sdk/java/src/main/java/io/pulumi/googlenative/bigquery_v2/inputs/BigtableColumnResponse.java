// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class BigtableColumnResponse extends io.pulumi.resources.InvokeArgs {

    public static final BigtableColumnResponse Empty = new BigtableColumnResponse();

    /**
     * [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
     * 
     */
    @Import(name="encoding", required=true)
      private final String encoding;

    public String getEncoding() {
        return this.encoding;
    }

    /**
     * [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
     * 
     */
    @Import(name="fieldName", required=true)
      private final String fieldName;

    public String getFieldName() {
        return this.fieldName;
    }

    /**
     * [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
     * 
     */
    @Import(name="onlyReadLatest", required=true)
      private final Boolean onlyReadLatest;

    public Boolean getOnlyReadLatest() {
        return this.onlyReadLatest;
    }

    /**
     * [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
     * 
     */
    @Import(name="qualifierEncoded", required=true)
      private final String qualifierEncoded;

    public String getQualifierEncoded() {
        return this.qualifierEncoded;
    }

    @Import(name="qualifierString", required=true)
      private final String qualifierString;

    public String getQualifierString() {
        return this.qualifierString;
    }

    /**
     * [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    public BigtableColumnResponse(
        String encoding,
        String fieldName,
        Boolean onlyReadLatest,
        String qualifierEncoded,
        String qualifierString,
        String type) {
        this.encoding = Objects.requireNonNull(encoding, "expected parameter 'encoding' to be non-null");
        this.fieldName = Objects.requireNonNull(fieldName, "expected parameter 'fieldName' to be non-null");
        this.onlyReadLatest = Objects.requireNonNull(onlyReadLatest, "expected parameter 'onlyReadLatest' to be non-null");
        this.qualifierEncoded = Objects.requireNonNull(qualifierEncoded, "expected parameter 'qualifierEncoded' to be non-null");
        this.qualifierString = Objects.requireNonNull(qualifierString, "expected parameter 'qualifierString' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private BigtableColumnResponse() {
        this.encoding = null;
        this.fieldName = null;
        this.onlyReadLatest = null;
        this.qualifierEncoded = null;
        this.qualifierString = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BigtableColumnResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String encoding;
        private String fieldName;
        private Boolean onlyReadLatest;
        private String qualifierEncoded;
        private String qualifierString;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(BigtableColumnResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.fieldName = defaults.fieldName;
    	      this.onlyReadLatest = defaults.onlyReadLatest;
    	      this.qualifierEncoded = defaults.qualifierEncoded;
    	      this.qualifierString = defaults.qualifierString;
    	      this.type = defaults.type;
        }

        public Builder encoding(String encoding) {
            this.encoding = Objects.requireNonNull(encoding);
            return this;
        }
        public Builder fieldName(String fieldName) {
            this.fieldName = Objects.requireNonNull(fieldName);
            return this;
        }
        public Builder onlyReadLatest(Boolean onlyReadLatest) {
            this.onlyReadLatest = Objects.requireNonNull(onlyReadLatest);
            return this;
        }
        public Builder qualifierEncoded(String qualifierEncoded) {
            this.qualifierEncoded = Objects.requireNonNull(qualifierEncoded);
            return this;
        }
        public Builder qualifierString(String qualifierString) {
            this.qualifierString = Objects.requireNonNull(qualifierString);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public BigtableColumnResponse build() {
            return new BigtableColumnResponse(encoding, fieldName, onlyReadLatest, qualifierEncoded, qualifierString, type);
        }
    }
}
