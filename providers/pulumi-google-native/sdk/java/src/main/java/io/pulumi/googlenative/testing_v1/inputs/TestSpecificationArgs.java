// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.testing_v1.inputs.AndroidInstrumentationTestArgs;
import io.pulumi.googlenative.testing_v1.inputs.AndroidRoboTestArgs;
import io.pulumi.googlenative.testing_v1.inputs.AndroidTestLoopArgs;
import io.pulumi.googlenative.testing_v1.inputs.IosTestLoopArgs;
import io.pulumi.googlenative.testing_v1.inputs.IosTestSetupArgs;
import io.pulumi.googlenative.testing_v1.inputs.IosXcTestArgs;
import io.pulumi.googlenative.testing_v1.inputs.TestSetupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A description of how to run the test.
 * 
 */
public final class TestSpecificationArgs extends io.pulumi.resources.ResourceArgs {

    public static final TestSpecificationArgs Empty = new TestSpecificationArgs();

    /**
     * An Android instrumentation test.
     * 
     */
    @Import(name="androidInstrumentationTest")
      private final @Nullable Output<AndroidInstrumentationTestArgs> androidInstrumentationTest;

    public Output<AndroidInstrumentationTestArgs> getAndroidInstrumentationTest() {
        return this.androidInstrumentationTest == null ? Output.empty() : this.androidInstrumentationTest;
    }

    /**
     * An Android robo test.
     * 
     */
    @Import(name="androidRoboTest")
      private final @Nullable Output<AndroidRoboTestArgs> androidRoboTest;

    public Output<AndroidRoboTestArgs> getAndroidRoboTest() {
        return this.androidRoboTest == null ? Output.empty() : this.androidRoboTest;
    }

    /**
     * An Android Application with a Test Loop.
     * 
     */
    @Import(name="androidTestLoop")
      private final @Nullable Output<AndroidTestLoopArgs> androidTestLoop;

    public Output<AndroidTestLoopArgs> getAndroidTestLoop() {
        return this.androidTestLoop == null ? Output.empty() : this.androidTestLoop;
    }

    /**
     * Disables performance metrics recording. May reduce test latency.
     * 
     */
    @Import(name="disablePerformanceMetrics")
      private final @Nullable Output<Boolean> disablePerformanceMetrics;

    public Output<Boolean> getDisablePerformanceMetrics() {
        return this.disablePerformanceMetrics == null ? Output.empty() : this.disablePerformanceMetrics;
    }

    /**
     * Disables video recording. May reduce test latency.
     * 
     */
    @Import(name="disableVideoRecording")
      private final @Nullable Output<Boolean> disableVideoRecording;

    public Output<Boolean> getDisableVideoRecording() {
        return this.disableVideoRecording == null ? Output.empty() : this.disableVideoRecording;
    }

    /**
     * An iOS application with a test loop.
     * 
     */
    @Import(name="iosTestLoop")
      private final @Nullable Output<IosTestLoopArgs> iosTestLoop;

    public Output<IosTestLoopArgs> getIosTestLoop() {
        return this.iosTestLoop == null ? Output.empty() : this.iosTestLoop;
    }

    /**
     * Test setup requirements for iOS.
     * 
     */
    @Import(name="iosTestSetup")
      private final @Nullable Output<IosTestSetupArgs> iosTestSetup;

    public Output<IosTestSetupArgs> getIosTestSetup() {
        return this.iosTestSetup == null ? Output.empty() : this.iosTestSetup;
    }

    /**
     * An iOS XCTest, via an .xctestrun file.
     * 
     */
    @Import(name="iosXcTest")
      private final @Nullable Output<IosXcTestArgs> iosXcTest;

    public Output<IosXcTestArgs> getIosXcTest() {
        return this.iosXcTest == null ? Output.empty() : this.iosXcTest;
    }

    /**
     * Test setup requirements for Android e.g. files to install, bootstrap scripts.
     * 
     */
    @Import(name="testSetup")
      private final @Nullable Output<TestSetupArgs> testSetup;

    public Output<TestSetupArgs> getTestSetup() {
        return this.testSetup == null ? Output.empty() : this.testSetup;
    }

    /**
     * Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
     * 
     */
    @Import(name="testTimeout")
      private final @Nullable Output<String> testTimeout;

    public Output<String> getTestTimeout() {
        return this.testTimeout == null ? Output.empty() : this.testTimeout;
    }

    public TestSpecificationArgs(
        @Nullable Output<AndroidInstrumentationTestArgs> androidInstrumentationTest,
        @Nullable Output<AndroidRoboTestArgs> androidRoboTest,
        @Nullable Output<AndroidTestLoopArgs> androidTestLoop,
        @Nullable Output<Boolean> disablePerformanceMetrics,
        @Nullable Output<Boolean> disableVideoRecording,
        @Nullable Output<IosTestLoopArgs> iosTestLoop,
        @Nullable Output<IosTestSetupArgs> iosTestSetup,
        @Nullable Output<IosXcTestArgs> iosXcTest,
        @Nullable Output<TestSetupArgs> testSetup,
        @Nullable Output<String> testTimeout) {
        this.androidInstrumentationTest = androidInstrumentationTest;
        this.androidRoboTest = androidRoboTest;
        this.androidTestLoop = androidTestLoop;
        this.disablePerformanceMetrics = disablePerformanceMetrics;
        this.disableVideoRecording = disableVideoRecording;
        this.iosTestLoop = iosTestLoop;
        this.iosTestSetup = iosTestSetup;
        this.iosXcTest = iosXcTest;
        this.testSetup = testSetup;
        this.testTimeout = testTimeout;
    }

    private TestSpecificationArgs() {
        this.androidInstrumentationTest = Output.empty();
        this.androidRoboTest = Output.empty();
        this.androidTestLoop = Output.empty();
        this.disablePerformanceMetrics = Output.empty();
        this.disableVideoRecording = Output.empty();
        this.iosTestLoop = Output.empty();
        this.iosTestSetup = Output.empty();
        this.iosXcTest = Output.empty();
        this.testSetup = Output.empty();
        this.testTimeout = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AndroidInstrumentationTestArgs> androidInstrumentationTest;
        private @Nullable Output<AndroidRoboTestArgs> androidRoboTest;
        private @Nullable Output<AndroidTestLoopArgs> androidTestLoop;
        private @Nullable Output<Boolean> disablePerformanceMetrics;
        private @Nullable Output<Boolean> disableVideoRecording;
        private @Nullable Output<IosTestLoopArgs> iosTestLoop;
        private @Nullable Output<IosTestSetupArgs> iosTestSetup;
        private @Nullable Output<IosXcTestArgs> iosXcTest;
        private @Nullable Output<TestSetupArgs> testSetup;
        private @Nullable Output<String> testTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(TestSpecificationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.androidInstrumentationTest = defaults.androidInstrumentationTest;
    	      this.androidRoboTest = defaults.androidRoboTest;
    	      this.androidTestLoop = defaults.androidTestLoop;
    	      this.disablePerformanceMetrics = defaults.disablePerformanceMetrics;
    	      this.disableVideoRecording = defaults.disableVideoRecording;
    	      this.iosTestLoop = defaults.iosTestLoop;
    	      this.iosTestSetup = defaults.iosTestSetup;
    	      this.iosXcTest = defaults.iosXcTest;
    	      this.testSetup = defaults.testSetup;
    	      this.testTimeout = defaults.testTimeout;
        }

        public Builder androidInstrumentationTest(@Nullable Output<AndroidInstrumentationTestArgs> androidInstrumentationTest) {
            this.androidInstrumentationTest = androidInstrumentationTest;
            return this;
        }

        public Builder androidInstrumentationTest(@Nullable AndroidInstrumentationTestArgs androidInstrumentationTest) {
            this.androidInstrumentationTest = Output.ofNullable(androidInstrumentationTest);
            return this;
        }

        public Builder androidRoboTest(@Nullable Output<AndroidRoboTestArgs> androidRoboTest) {
            this.androidRoboTest = androidRoboTest;
            return this;
        }

        public Builder androidRoboTest(@Nullable AndroidRoboTestArgs androidRoboTest) {
            this.androidRoboTest = Output.ofNullable(androidRoboTest);
            return this;
        }

        public Builder androidTestLoop(@Nullable Output<AndroidTestLoopArgs> androidTestLoop) {
            this.androidTestLoop = androidTestLoop;
            return this;
        }

        public Builder androidTestLoop(@Nullable AndroidTestLoopArgs androidTestLoop) {
            this.androidTestLoop = Output.ofNullable(androidTestLoop);
            return this;
        }

        public Builder disablePerformanceMetrics(@Nullable Output<Boolean> disablePerformanceMetrics) {
            this.disablePerformanceMetrics = disablePerformanceMetrics;
            return this;
        }

        public Builder disablePerformanceMetrics(@Nullable Boolean disablePerformanceMetrics) {
            this.disablePerformanceMetrics = Output.ofNullable(disablePerformanceMetrics);
            return this;
        }

        public Builder disableVideoRecording(@Nullable Output<Boolean> disableVideoRecording) {
            this.disableVideoRecording = disableVideoRecording;
            return this;
        }

        public Builder disableVideoRecording(@Nullable Boolean disableVideoRecording) {
            this.disableVideoRecording = Output.ofNullable(disableVideoRecording);
            return this;
        }

        public Builder iosTestLoop(@Nullable Output<IosTestLoopArgs> iosTestLoop) {
            this.iosTestLoop = iosTestLoop;
            return this;
        }

        public Builder iosTestLoop(@Nullable IosTestLoopArgs iosTestLoop) {
            this.iosTestLoop = Output.ofNullable(iosTestLoop);
            return this;
        }

        public Builder iosTestSetup(@Nullable Output<IosTestSetupArgs> iosTestSetup) {
            this.iosTestSetup = iosTestSetup;
            return this;
        }

        public Builder iosTestSetup(@Nullable IosTestSetupArgs iosTestSetup) {
            this.iosTestSetup = Output.ofNullable(iosTestSetup);
            return this;
        }

        public Builder iosXcTest(@Nullable Output<IosXcTestArgs> iosXcTest) {
            this.iosXcTest = iosXcTest;
            return this;
        }

        public Builder iosXcTest(@Nullable IosXcTestArgs iosXcTest) {
            this.iosXcTest = Output.ofNullable(iosXcTest);
            return this;
        }

        public Builder testSetup(@Nullable Output<TestSetupArgs> testSetup) {
            this.testSetup = testSetup;
            return this;
        }

        public Builder testSetup(@Nullable TestSetupArgs testSetup) {
            this.testSetup = Output.ofNullable(testSetup);
            return this;
        }

        public Builder testTimeout(@Nullable Output<String> testTimeout) {
            this.testTimeout = testTimeout;
            return this;
        }

        public Builder testTimeout(@Nullable String testTimeout) {
            this.testTimeout = Output.ofNullable(testTimeout);
            return this;
        }
        public TestSpecificationArgs build() {
            return new TestSpecificationArgs(androidInstrumentationTest, androidRoboTest, androidTestLoop, disablePerformanceMetrics, disableVideoRecording, iosTestLoop, iosTestSetup, iosXcTest, testSetup, testTimeout);
        }
    }
}
