// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Commitment for a particular license resource.
 * 
 */
public final class LicenseResourceCommitmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final LicenseResourceCommitmentArgs Empty = new LicenseResourceCommitmentArgs();

    /**
     * The number of licenses purchased.
     * 
     */
    @Import(name="amount")
      private final @Nullable Output<String> amount;

    public Output<String> amount() {
        return this.amount == null ? Codegen.empty() : this.amount;
    }

    /**
     * Specifies the core range of the instance for which this license applies.
     * 
     */
    @Import(name="coresPerLicense")
      private final @Nullable Output<String> coresPerLicense;

    public Output<String> coresPerLicense() {
        return this.coresPerLicense == null ? Codegen.empty() : this.coresPerLicense;
    }

    /**
     * Any applicable license URI.
     * 
     */
    @Import(name="license")
      private final @Nullable Output<String> license;

    public Output<String> license() {
        return this.license == null ? Codegen.empty() : this.license;
    }

    public LicenseResourceCommitmentArgs(
        @Nullable Output<String> amount,
        @Nullable Output<String> coresPerLicense,
        @Nullable Output<String> license) {
        this.amount = amount;
        this.coresPerLicense = coresPerLicense;
        this.license = license;
    }

    private LicenseResourceCommitmentArgs() {
        this.amount = Codegen.empty();
        this.coresPerLicense = Codegen.empty();
        this.license = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicenseResourceCommitmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> amount;
        private @Nullable Output<String> coresPerLicense;
        private @Nullable Output<String> license;

        public Builder() {
    	      // Empty
        }

        public Builder(LicenseResourceCommitmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.coresPerLicense = defaults.coresPerLicense;
    	      this.license = defaults.license;
        }

        public Builder amount(@Nullable Output<String> amount) {
            this.amount = amount;
            return this;
        }
        public Builder amount(@Nullable String amount) {
            this.amount = Codegen.ofNullable(amount);
            return this;
        }
        public Builder coresPerLicense(@Nullable Output<String> coresPerLicense) {
            this.coresPerLicense = coresPerLicense;
            return this;
        }
        public Builder coresPerLicense(@Nullable String coresPerLicense) {
            this.coresPerLicense = Codegen.ofNullable(coresPerLicense);
            return this;
        }
        public Builder license(@Nullable Output<String> license) {
            this.license = license;
            return this;
        }
        public Builder license(@Nullable String license) {
            this.license = Codegen.ofNullable(license);
            return this;
        }        public LicenseResourceCommitmentArgs build() {
            return new LicenseResourceCommitmentArgs(amount, coresPerLicense, license);
        }
    }
}
