// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.genomics_v1alpha2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.genomics_v1alpha2.inputs.DiskResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class PipelineResourcesResponse extends io.pulumi.resources.InvokeArgs {

    public static final PipelineResourcesResponse Empty = new PipelineResourcesResponse();

    @InputImport(name="acceleratorCount", required=true)
    private final String acceleratorCount;

    public String getAcceleratorCount() {
        return this.acceleratorCount;
    }

    @InputImport(name="acceleratorType", required=true)
    private final String acceleratorType;

    public String getAcceleratorType() {
        return this.acceleratorType;
    }

    @InputImport(name="bootDiskSizeGb", required=true)
    private final Integer bootDiskSizeGb;

    public Integer getBootDiskSizeGb() {
        return this.bootDiskSizeGb;
    }

    @InputImport(name="disks", required=true)
    private final List<DiskResponse> disks;

    public List<DiskResponse> getDisks() {
        return this.disks;
    }

    @InputImport(name="minimumCpuCores", required=true)
    private final Integer minimumCpuCores;

    public Integer getMinimumCpuCores() {
        return this.minimumCpuCores;
    }

    @InputImport(name="minimumRamGb", required=true)
    private final Double minimumRamGb;

    public Double getMinimumRamGb() {
        return this.minimumRamGb;
    }

    @InputImport(name="noAddress", required=true)
    private final Boolean noAddress;

    public Boolean getNoAddress() {
        return this.noAddress;
    }

    @InputImport(name="preemptible", required=true)
    private final Boolean preemptible;

    public Boolean getPreemptible() {
        return this.preemptible;
    }

    @InputImport(name="zones", required=true)
    private final List<String> zones;

    public List<String> getZones() {
        return this.zones;
    }

    public PipelineResourcesResponse(
        String acceleratorCount,
        String acceleratorType,
        Integer bootDiskSizeGb,
        List<DiskResponse> disks,
        Integer minimumCpuCores,
        Double minimumRamGb,
        Boolean noAddress,
        Boolean preemptible,
        List<String> zones) {
        this.acceleratorCount = Objects.requireNonNull(acceleratorCount, "expected parameter 'acceleratorCount' to be non-null");
        this.acceleratorType = Objects.requireNonNull(acceleratorType, "expected parameter 'acceleratorType' to be non-null");
        this.bootDiskSizeGb = Objects.requireNonNull(bootDiskSizeGb, "expected parameter 'bootDiskSizeGb' to be non-null");
        this.disks = Objects.requireNonNull(disks, "expected parameter 'disks' to be non-null");
        this.minimumCpuCores = Objects.requireNonNull(minimumCpuCores, "expected parameter 'minimumCpuCores' to be non-null");
        this.minimumRamGb = Objects.requireNonNull(minimumRamGb, "expected parameter 'minimumRamGb' to be non-null");
        this.noAddress = Objects.requireNonNull(noAddress, "expected parameter 'noAddress' to be non-null");
        this.preemptible = Objects.requireNonNull(preemptible, "expected parameter 'preemptible' to be non-null");
        this.zones = Objects.requireNonNull(zones, "expected parameter 'zones' to be non-null");
    }

    private PipelineResourcesResponse() {
        this.acceleratorCount = null;
        this.acceleratorType = null;
        this.bootDiskSizeGb = null;
        this.disks = List.of();
        this.minimumCpuCores = null;
        this.minimumRamGb = null;
        this.noAddress = null;
        this.preemptible = null;
        this.zones = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineResourcesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String acceleratorCount;
        private String acceleratorType;
        private Integer bootDiskSizeGb;
        private List<DiskResponse> disks;
        private Integer minimumCpuCores;
        private Double minimumRamGb;
        private Boolean noAddress;
        private Boolean preemptible;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineResourcesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorCount = defaults.acceleratorCount;
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.disks = defaults.disks;
    	      this.minimumCpuCores = defaults.minimumCpuCores;
    	      this.minimumRamGb = defaults.minimumRamGb;
    	      this.noAddress = defaults.noAddress;
    	      this.preemptible = defaults.preemptible;
    	      this.zones = defaults.zones;
        }

        public Builder setAcceleratorCount(String acceleratorCount) {
            this.acceleratorCount = Objects.requireNonNull(acceleratorCount);
            return this;
        }

        public Builder setAcceleratorType(String acceleratorType) {
            this.acceleratorType = Objects.requireNonNull(acceleratorType);
            return this;
        }

        public Builder setBootDiskSizeGb(Integer bootDiskSizeGb) {
            this.bootDiskSizeGb = Objects.requireNonNull(bootDiskSizeGb);
            return this;
        }

        public Builder setDisks(List<DiskResponse> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }

        public Builder setMinimumCpuCores(Integer minimumCpuCores) {
            this.minimumCpuCores = Objects.requireNonNull(minimumCpuCores);
            return this;
        }

        public Builder setMinimumRamGb(Double minimumRamGb) {
            this.minimumRamGb = Objects.requireNonNull(minimumRamGb);
            return this;
        }

        public Builder setNoAddress(Boolean noAddress) {
            this.noAddress = Objects.requireNonNull(noAddress);
            return this;
        }

        public Builder setPreemptible(Boolean preemptible) {
            this.preemptible = Objects.requireNonNull(preemptible);
            return this;
        }

        public Builder setZones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }

        public PipelineResourcesResponse build() {
            return new PipelineResourcesResponse(acceleratorCount, acceleratorType, bootDiskSizeGb, disks, minimumCpuCores, minimumRamGb, noAddress, preemptible, zones);
        }
    }
}
