// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.DocumentationRuleArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.PageArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DocumentationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DocumentationArgs Empty = new DocumentationArgs();

    @InputImport(name="documentationRootUrl")
    private final @Nullable Input<String> documentationRootUrl;

    public Input<String> getDocumentationRootUrl() {
        return this.documentationRootUrl == null ? Input.empty() : this.documentationRootUrl;
    }

    @InputImport(name="overview")
    private final @Nullable Input<String> overview;

    public Input<String> getOverview() {
        return this.overview == null ? Input.empty() : this.overview;
    }

    @InputImport(name="pages")
    private final @Nullable Input<List<PageArgs>> pages;

    public Input<List<PageArgs>> getPages() {
        return this.pages == null ? Input.empty() : this.pages;
    }

    @InputImport(name="rules")
    private final @Nullable Input<List<DocumentationRuleArgs>> rules;

    public Input<List<DocumentationRuleArgs>> getRules() {
        return this.rules == null ? Input.empty() : this.rules;
    }

    @InputImport(name="serviceRootUrl")
    private final @Nullable Input<String> serviceRootUrl;

    public Input<String> getServiceRootUrl() {
        return this.serviceRootUrl == null ? Input.empty() : this.serviceRootUrl;
    }

    @InputImport(name="summary")
    private final @Nullable Input<String> summary;

    public Input<String> getSummary() {
        return this.summary == null ? Input.empty() : this.summary;
    }

    public DocumentationArgs(
        @Nullable Input<String> documentationRootUrl,
        @Nullable Input<String> overview,
        @Nullable Input<List<PageArgs>> pages,
        @Nullable Input<List<DocumentationRuleArgs>> rules,
        @Nullable Input<String> serviceRootUrl,
        @Nullable Input<String> summary) {
        this.documentationRootUrl = documentationRootUrl;
        this.overview = overview;
        this.pages = pages;
        this.rules = rules;
        this.serviceRootUrl = serviceRootUrl;
        this.summary = summary;
    }

    private DocumentationArgs() {
        this.documentationRootUrl = Input.empty();
        this.overview = Input.empty();
        this.pages = Input.empty();
        this.rules = Input.empty();
        this.serviceRootUrl = Input.empty();
        this.summary = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> documentationRootUrl;
        private @Nullable Input<String> overview;
        private @Nullable Input<List<PageArgs>> pages;
        private @Nullable Input<List<DocumentationRuleArgs>> rules;
        private @Nullable Input<String> serviceRootUrl;
        private @Nullable Input<String> summary;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.documentationRootUrl = defaults.documentationRootUrl;
    	      this.overview = defaults.overview;
    	      this.pages = defaults.pages;
    	      this.rules = defaults.rules;
    	      this.serviceRootUrl = defaults.serviceRootUrl;
    	      this.summary = defaults.summary;
        }

        public Builder setDocumentationRootUrl(@Nullable Input<String> documentationRootUrl) {
            this.documentationRootUrl = documentationRootUrl;
            return this;
        }

        public Builder setDocumentationRootUrl(@Nullable String documentationRootUrl) {
            this.documentationRootUrl = Input.ofNullable(documentationRootUrl);
            return this;
        }

        public Builder setOverview(@Nullable Input<String> overview) {
            this.overview = overview;
            return this;
        }

        public Builder setOverview(@Nullable String overview) {
            this.overview = Input.ofNullable(overview);
            return this;
        }

        public Builder setPages(@Nullable Input<List<PageArgs>> pages) {
            this.pages = pages;
            return this;
        }

        public Builder setPages(@Nullable List<PageArgs> pages) {
            this.pages = Input.ofNullable(pages);
            return this;
        }

        public Builder setRules(@Nullable Input<List<DocumentationRuleArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder setRules(@Nullable List<DocumentationRuleArgs> rules) {
            this.rules = Input.ofNullable(rules);
            return this;
        }

        public Builder setServiceRootUrl(@Nullable Input<String> serviceRootUrl) {
            this.serviceRootUrl = serviceRootUrl;
            return this;
        }

        public Builder setServiceRootUrl(@Nullable String serviceRootUrl) {
            this.serviceRootUrl = Input.ofNullable(serviceRootUrl);
            return this;
        }

        public Builder setSummary(@Nullable Input<String> summary) {
            this.summary = summary;
            return this;
        }

        public Builder setSummary(@Nullable String summary) {
            this.summary = Input.ofNullable(summary);
            return this;
        }

        public DocumentationArgs build() {
            return new DocumentationArgs(documentationRootUrl, overview, pages, rules, serviceRootUrl, summary);
        }
    }
}
