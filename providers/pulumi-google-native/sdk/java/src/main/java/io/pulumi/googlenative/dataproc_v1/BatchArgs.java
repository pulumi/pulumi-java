// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.dataproc_v1.inputs.EnvironmentConfigArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.PySparkBatchArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.RuntimeConfigArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.SparkBatchArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.SparkRBatchArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.SparkSqlBatchArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BatchArgs extends io.pulumi.resources.ResourceArgs {

    public static final BatchArgs Empty = new BatchArgs();

    @Import(name="batchId")
      private final @Nullable Output<String> batchId;

    public Output<String> getBatchId() {
        return this.batchId == null ? Output.empty() : this.batchId;
    }

    /**
     * Optional. Environment configuration for the batch execution.
     * 
     */
    @Import(name="environmentConfig")
      private final @Nullable Output<EnvironmentConfigArgs> environmentConfig;

    public Output<EnvironmentConfigArgs> getEnvironmentConfig() {
        return this.environmentConfig == null ? Output.empty() : this.environmentConfig;
    }

    /**
     * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Output.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * Optional. PySpark batch config.
     * 
     */
    @Import(name="pysparkBatch")
      private final @Nullable Output<PySparkBatchArgs> pysparkBatch;

    public Output<PySparkBatchArgs> getPysparkBatch() {
        return this.pysparkBatch == null ? Output.empty() : this.pysparkBatch;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    /**
     * Optional. Runtime configuration for the batch execution.
     * 
     */
    @Import(name="runtimeConfig")
      private final @Nullable Output<RuntimeConfigArgs> runtimeConfig;

    public Output<RuntimeConfigArgs> getRuntimeConfig() {
        return this.runtimeConfig == null ? Output.empty() : this.runtimeConfig;
    }

    /**
     * Optional. Spark batch config.
     * 
     */
    @Import(name="sparkBatch")
      private final @Nullable Output<SparkBatchArgs> sparkBatch;

    public Output<SparkBatchArgs> getSparkBatch() {
        return this.sparkBatch == null ? Output.empty() : this.sparkBatch;
    }

    /**
     * Optional. SparkR batch config.
     * 
     */
    @Import(name="sparkRBatch")
      private final @Nullable Output<SparkRBatchArgs> sparkRBatch;

    public Output<SparkRBatchArgs> getSparkRBatch() {
        return this.sparkRBatch == null ? Output.empty() : this.sparkRBatch;
    }

    /**
     * Optional. SparkSql batch config.
     * 
     */
    @Import(name="sparkSqlBatch")
      private final @Nullable Output<SparkSqlBatchArgs> sparkSqlBatch;

    public Output<SparkSqlBatchArgs> getSparkSqlBatch() {
        return this.sparkSqlBatch == null ? Output.empty() : this.sparkSqlBatch;
    }

    public BatchArgs(
        @Nullable Output<String> batchId,
        @Nullable Output<EnvironmentConfigArgs> environmentConfig,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<String> project,
        @Nullable Output<PySparkBatchArgs> pysparkBatch,
        @Nullable Output<String> requestId,
        @Nullable Output<RuntimeConfigArgs> runtimeConfig,
        @Nullable Output<SparkBatchArgs> sparkBatch,
        @Nullable Output<SparkRBatchArgs> sparkRBatch,
        @Nullable Output<SparkSqlBatchArgs> sparkSqlBatch) {
        this.batchId = batchId;
        this.environmentConfig = environmentConfig;
        this.labels = labels;
        this.location = location;
        this.project = project;
        this.pysparkBatch = pysparkBatch;
        this.requestId = requestId;
        this.runtimeConfig = runtimeConfig;
        this.sparkBatch = sparkBatch;
        this.sparkRBatch = sparkRBatch;
        this.sparkSqlBatch = sparkSqlBatch;
    }

    private BatchArgs() {
        this.batchId = Output.empty();
        this.environmentConfig = Output.empty();
        this.labels = Output.empty();
        this.location = Output.empty();
        this.project = Output.empty();
        this.pysparkBatch = Output.empty();
        this.requestId = Output.empty();
        this.runtimeConfig = Output.empty();
        this.sparkBatch = Output.empty();
        this.sparkRBatch = Output.empty();
        this.sparkSqlBatch = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> batchId;
        private @Nullable Output<EnvironmentConfigArgs> environmentConfig;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;
        private @Nullable Output<PySparkBatchArgs> pysparkBatch;
        private @Nullable Output<String> requestId;
        private @Nullable Output<RuntimeConfigArgs> runtimeConfig;
        private @Nullable Output<SparkBatchArgs> sparkBatch;
        private @Nullable Output<SparkRBatchArgs> sparkRBatch;
        private @Nullable Output<SparkSqlBatchArgs> sparkSqlBatch;

        public Builder() {
    	      // Empty
        }

        public Builder(BatchArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchId = defaults.batchId;
    	      this.environmentConfig = defaults.environmentConfig;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.pysparkBatch = defaults.pysparkBatch;
    	      this.requestId = defaults.requestId;
    	      this.runtimeConfig = defaults.runtimeConfig;
    	      this.sparkBatch = defaults.sparkBatch;
    	      this.sparkRBatch = defaults.sparkRBatch;
    	      this.sparkSqlBatch = defaults.sparkSqlBatch;
        }

        public Builder batchId(@Nullable Output<String> batchId) {
            this.batchId = batchId;
            return this;
        }
        public Builder batchId(@Nullable String batchId) {
            this.batchId = Output.ofNullable(batchId);
            return this;
        }
        public Builder environmentConfig(@Nullable Output<EnvironmentConfigArgs> environmentConfig) {
            this.environmentConfig = environmentConfig;
            return this;
        }
        public Builder environmentConfig(@Nullable EnvironmentConfigArgs environmentConfig) {
            this.environmentConfig = Output.ofNullable(environmentConfig);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Output.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder pysparkBatch(@Nullable Output<PySparkBatchArgs> pysparkBatch) {
            this.pysparkBatch = pysparkBatch;
            return this;
        }
        public Builder pysparkBatch(@Nullable PySparkBatchArgs pysparkBatch) {
            this.pysparkBatch = Output.ofNullable(pysparkBatch);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }
        public Builder runtimeConfig(@Nullable Output<RuntimeConfigArgs> runtimeConfig) {
            this.runtimeConfig = runtimeConfig;
            return this;
        }
        public Builder runtimeConfig(@Nullable RuntimeConfigArgs runtimeConfig) {
            this.runtimeConfig = Output.ofNullable(runtimeConfig);
            return this;
        }
        public Builder sparkBatch(@Nullable Output<SparkBatchArgs> sparkBatch) {
            this.sparkBatch = sparkBatch;
            return this;
        }
        public Builder sparkBatch(@Nullable SparkBatchArgs sparkBatch) {
            this.sparkBatch = Output.ofNullable(sparkBatch);
            return this;
        }
        public Builder sparkRBatch(@Nullable Output<SparkRBatchArgs> sparkRBatch) {
            this.sparkRBatch = sparkRBatch;
            return this;
        }
        public Builder sparkRBatch(@Nullable SparkRBatchArgs sparkRBatch) {
            this.sparkRBatch = Output.ofNullable(sparkRBatch);
            return this;
        }
        public Builder sparkSqlBatch(@Nullable Output<SparkSqlBatchArgs> sparkSqlBatch) {
            this.sparkSqlBatch = sparkSqlBatch;
            return this;
        }
        public Builder sparkSqlBatch(@Nullable SparkSqlBatchArgs sparkSqlBatch) {
            this.sparkSqlBatch = Output.ofNullable(sparkSqlBatch);
            return this;
        }        public BatchArgs build() {
            return new BatchArgs(batchId, environmentConfig, labels, location, project, pysparkBatch, requestId, runtimeConfig, sparkBatch, sparkRBatch, sparkSqlBatch);
        }
    }
}
