// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.monitoring_v1.inputs.AggregationResponse;
import io.pulumi.googlenative.monitoring_v1.inputs.PickTimeSeriesFilterResponse;
import io.pulumi.googlenative.monitoring_v1.inputs.RatioPartResponse;
import java.util.Objects;


/**
 * A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.
 * 
 */
public final class TimeSeriesFilterRatioResponse extends io.pulumi.resources.InvokeArgs {

    public static final TimeSeriesFilterRatioResponse Empty = new TimeSeriesFilterRatioResponse();

    /**
     * The denominator of the ratio.
     * 
     */
    @Import(name="denominator", required=true)
      private final RatioPartResponse denominator;

    public RatioPartResponse getDenominator() {
        return this.denominator;
    }

    /**
     * The numerator of the ratio.
     * 
     */
    @Import(name="numerator", required=true)
      private final RatioPartResponse numerator;

    public RatioPartResponse getNumerator() {
        return this.numerator;
    }

    /**
     * Ranking based time series filter.
     * 
     */
    @Import(name="pickTimeSeriesFilter", required=true)
      private final PickTimeSeriesFilterResponse pickTimeSeriesFilter;

    public PickTimeSeriesFilterResponse getPickTimeSeriesFilter() {
        return this.pickTimeSeriesFilter;
    }

    /**
     * Apply a second aggregation after the ratio is computed.
     * 
     */
    @Import(name="secondaryAggregation", required=true)
      private final AggregationResponse secondaryAggregation;

    public AggregationResponse getSecondaryAggregation() {
        return this.secondaryAggregation;
    }

    public TimeSeriesFilterRatioResponse(
        RatioPartResponse denominator,
        RatioPartResponse numerator,
        PickTimeSeriesFilterResponse pickTimeSeriesFilter,
        AggregationResponse secondaryAggregation) {
        this.denominator = Objects.requireNonNull(denominator, "expected parameter 'denominator' to be non-null");
        this.numerator = Objects.requireNonNull(numerator, "expected parameter 'numerator' to be non-null");
        this.pickTimeSeriesFilter = Objects.requireNonNull(pickTimeSeriesFilter, "expected parameter 'pickTimeSeriesFilter' to be non-null");
        this.secondaryAggregation = Objects.requireNonNull(secondaryAggregation, "expected parameter 'secondaryAggregation' to be non-null");
    }

    private TimeSeriesFilterRatioResponse() {
        this.denominator = null;
        this.numerator = null;
        this.pickTimeSeriesFilter = null;
        this.secondaryAggregation = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimeSeriesFilterRatioResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RatioPartResponse denominator;
        private RatioPartResponse numerator;
        private PickTimeSeriesFilterResponse pickTimeSeriesFilter;
        private AggregationResponse secondaryAggregation;

        public Builder() {
    	      // Empty
        }

        public Builder(TimeSeriesFilterRatioResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.denominator = defaults.denominator;
    	      this.numerator = defaults.numerator;
    	      this.pickTimeSeriesFilter = defaults.pickTimeSeriesFilter;
    	      this.secondaryAggregation = defaults.secondaryAggregation;
        }

        public Builder denominator(RatioPartResponse denominator) {
            this.denominator = Objects.requireNonNull(denominator);
            return this;
        }

        public Builder numerator(RatioPartResponse numerator) {
            this.numerator = Objects.requireNonNull(numerator);
            return this;
        }

        public Builder pickTimeSeriesFilter(PickTimeSeriesFilterResponse pickTimeSeriesFilter) {
            this.pickTimeSeriesFilter = Objects.requireNonNull(pickTimeSeriesFilter);
            return this;
        }

        public Builder secondaryAggregation(AggregationResponse secondaryAggregation) {
            this.secondaryAggregation = Objects.requireNonNull(secondaryAggregation);
            return this;
        }
        public TimeSeriesFilterRatioResponse build() {
            return new TimeSeriesFilterRatioResponse(denominator, numerator, pickTimeSeriesFilter, secondaryAggregation);
        }
    }
}
