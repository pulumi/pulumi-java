// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.composer_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.composer_v1beta1.enums.EnvironmentConfigEnvironmentSize;
import io.pulumi.googlenative.composer_v1beta1.inputs.DatabaseConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.EncryptionConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.MaintenanceWindowArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.MasterAuthorizedNetworksConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.NodeConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.PrivateEnvironmentConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.SoftwareConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.WebServerConfigArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.WebServerNetworkAccessControlArgs;
import io.pulumi.googlenative.composer_v1beta1.inputs.WorkloadsConfigArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration information for an environment.
 * 
 */
public final class EnvironmentConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnvironmentConfigArgs Empty = new EnvironmentConfigArgs();

    /**
     * Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @InputImport(name="databaseConfig")
    private final @Nullable Input<DatabaseConfigArgs> databaseConfig;

    public Input<DatabaseConfigArgs> getDatabaseConfig() {
        return this.databaseConfig == null ? Input.empty() : this.databaseConfig;
    }

    /**
     * Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
     * 
     */
    @InputImport(name="encryptionConfig")
    private final @Nullable Input<EncryptionConfigArgs> encryptionConfig;

    public Input<EncryptionConfigArgs> getEncryptionConfig() {
        return this.encryptionConfig == null ? Input.empty() : this.encryptionConfig;
    }

    /**
     * Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @InputImport(name="environmentSize")
    private final @Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize;

    public Input<EnvironmentConfigEnvironmentSize> getEnvironmentSize() {
        return this.environmentSize == null ? Input.empty() : this.environmentSize;
    }

    /**
     * Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
     * 
     */
    @InputImport(name="maintenanceWindow")
    private final @Nullable Input<MaintenanceWindowArgs> maintenanceWindow;

    public Input<MaintenanceWindowArgs> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Input.empty() : this.maintenanceWindow;
    }

    /**
     * Optional. The configuration options for GKE clusters master authorized networks. By default master authorized networks feature is: - in case of private environment: enabled with no external networks allowlisted. - in case of public environment: disabled.
     * 
     */
    @InputImport(name="masterAuthorizedNetworksConfig")
    private final @Nullable Input<MasterAuthorizedNetworksConfigArgs> masterAuthorizedNetworksConfig;

    public Input<MasterAuthorizedNetworksConfigArgs> getMasterAuthorizedNetworksConfig() {
        return this.masterAuthorizedNetworksConfig == null ? Input.empty() : this.masterAuthorizedNetworksConfig;
    }

    /**
     * The configuration used for the Kubernetes Engine cluster.
     * 
     */
    @InputImport(name="nodeConfig")
    private final @Nullable Input<NodeConfigArgs> nodeConfig;

    public Input<NodeConfigArgs> getNodeConfig() {
        return this.nodeConfig == null ? Input.empty() : this.nodeConfig;
    }

    /**
     * The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @InputImport(name="nodeCount")
    private final @Nullable Input<Integer> nodeCount;

    public Input<Integer> getNodeCount() {
        return this.nodeCount == null ? Input.empty() : this.nodeCount;
    }

    /**
     * The configuration used for the Private IP Cloud Composer environment.
     * 
     */
    @InputImport(name="privateEnvironmentConfig")
    private final @Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig;

    public Input<PrivateEnvironmentConfigArgs> getPrivateEnvironmentConfig() {
        return this.privateEnvironmentConfig == null ? Input.empty() : this.privateEnvironmentConfig;
    }

    /**
     * The configuration settings for software inside the environment.
     * 
     */
    @InputImport(name="softwareConfig")
    private final @Nullable Input<SoftwareConfigArgs> softwareConfig;

    public Input<SoftwareConfigArgs> getSoftwareConfig() {
        return this.softwareConfig == null ? Input.empty() : this.softwareConfig;
    }

    /**
     * Optional. The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    @InputImport(name="webServerConfig")
    private final @Nullable Input<WebServerConfigArgs> webServerConfig;

    public Input<WebServerConfigArgs> getWebServerConfig() {
        return this.webServerConfig == null ? Input.empty() : this.webServerConfig;
    }

    /**
     * Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
     * 
     */
    @InputImport(name="webServerNetworkAccessControl")
    private final @Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl;

    public Input<WebServerNetworkAccessControlArgs> getWebServerNetworkAccessControl() {
        return this.webServerNetworkAccessControl == null ? Input.empty() : this.webServerNetworkAccessControl;
    }

    /**
     * Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    @InputImport(name="workloadsConfig")
    private final @Nullable Input<WorkloadsConfigArgs> workloadsConfig;

    public Input<WorkloadsConfigArgs> getWorkloadsConfig() {
        return this.workloadsConfig == null ? Input.empty() : this.workloadsConfig;
    }

    public EnvironmentConfigArgs(
        @Nullable Input<DatabaseConfigArgs> databaseConfig,
        @Nullable Input<EncryptionConfigArgs> encryptionConfig,
        @Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize,
        @Nullable Input<MaintenanceWindowArgs> maintenanceWindow,
        @Nullable Input<MasterAuthorizedNetworksConfigArgs> masterAuthorizedNetworksConfig,
        @Nullable Input<NodeConfigArgs> nodeConfig,
        @Nullable Input<Integer> nodeCount,
        @Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig,
        @Nullable Input<SoftwareConfigArgs> softwareConfig,
        @Nullable Input<WebServerConfigArgs> webServerConfig,
        @Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl,
        @Nullable Input<WorkloadsConfigArgs> workloadsConfig) {
        this.databaseConfig = databaseConfig;
        this.encryptionConfig = encryptionConfig;
        this.environmentSize = environmentSize;
        this.maintenanceWindow = maintenanceWindow;
        this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
        this.nodeConfig = nodeConfig;
        this.nodeCount = nodeCount;
        this.privateEnvironmentConfig = privateEnvironmentConfig;
        this.softwareConfig = softwareConfig;
        this.webServerConfig = webServerConfig;
        this.webServerNetworkAccessControl = webServerNetworkAccessControl;
        this.workloadsConfig = workloadsConfig;
    }

    private EnvironmentConfigArgs() {
        this.databaseConfig = Input.empty();
        this.encryptionConfig = Input.empty();
        this.environmentSize = Input.empty();
        this.maintenanceWindow = Input.empty();
        this.masterAuthorizedNetworksConfig = Input.empty();
        this.nodeConfig = Input.empty();
        this.nodeCount = Input.empty();
        this.privateEnvironmentConfig = Input.empty();
        this.softwareConfig = Input.empty();
        this.webServerConfig = Input.empty();
        this.webServerNetworkAccessControl = Input.empty();
        this.workloadsConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DatabaseConfigArgs> databaseConfig;
        private @Nullable Input<EncryptionConfigArgs> encryptionConfig;
        private @Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize;
        private @Nullable Input<MaintenanceWindowArgs> maintenanceWindow;
        private @Nullable Input<MasterAuthorizedNetworksConfigArgs> masterAuthorizedNetworksConfig;
        private @Nullable Input<NodeConfigArgs> nodeConfig;
        private @Nullable Input<Integer> nodeCount;
        private @Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig;
        private @Nullable Input<SoftwareConfigArgs> softwareConfig;
        private @Nullable Input<WebServerConfigArgs> webServerConfig;
        private @Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl;
        private @Nullable Input<WorkloadsConfigArgs> workloadsConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseConfig = defaults.databaseConfig;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.environmentSize = defaults.environmentSize;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.masterAuthorizedNetworksConfig = defaults.masterAuthorizedNetworksConfig;
    	      this.nodeConfig = defaults.nodeConfig;
    	      this.nodeCount = defaults.nodeCount;
    	      this.privateEnvironmentConfig = defaults.privateEnvironmentConfig;
    	      this.softwareConfig = defaults.softwareConfig;
    	      this.webServerConfig = defaults.webServerConfig;
    	      this.webServerNetworkAccessControl = defaults.webServerNetworkAccessControl;
    	      this.workloadsConfig = defaults.workloadsConfig;
        }

        public Builder setDatabaseConfig(@Nullable Input<DatabaseConfigArgs> databaseConfig) {
            this.databaseConfig = databaseConfig;
            return this;
        }

        public Builder setDatabaseConfig(@Nullable DatabaseConfigArgs databaseConfig) {
            this.databaseConfig = Input.ofNullable(databaseConfig);
            return this;
        }

        public Builder setEncryptionConfig(@Nullable Input<EncryptionConfigArgs> encryptionConfig) {
            this.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder setEncryptionConfig(@Nullable EncryptionConfigArgs encryptionConfig) {
            this.encryptionConfig = Input.ofNullable(encryptionConfig);
            return this;
        }

        public Builder setEnvironmentSize(@Nullable Input<EnvironmentConfigEnvironmentSize> environmentSize) {
            this.environmentSize = environmentSize;
            return this;
        }

        public Builder setEnvironmentSize(@Nullable EnvironmentConfigEnvironmentSize environmentSize) {
            this.environmentSize = Input.ofNullable(environmentSize);
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable Input<MaintenanceWindowArgs> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable MaintenanceWindowArgs maintenanceWindow) {
            this.maintenanceWindow = Input.ofNullable(maintenanceWindow);
            return this;
        }

        public Builder setMasterAuthorizedNetworksConfig(@Nullable Input<MasterAuthorizedNetworksConfigArgs> masterAuthorizedNetworksConfig) {
            this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            return this;
        }

        public Builder setMasterAuthorizedNetworksConfig(@Nullable MasterAuthorizedNetworksConfigArgs masterAuthorizedNetworksConfig) {
            this.masterAuthorizedNetworksConfig = Input.ofNullable(masterAuthorizedNetworksConfig);
            return this;
        }

        public Builder setNodeConfig(@Nullable Input<NodeConfigArgs> nodeConfig) {
            this.nodeConfig = nodeConfig;
            return this;
        }

        public Builder setNodeConfig(@Nullable NodeConfigArgs nodeConfig) {
            this.nodeConfig = Input.ofNullable(nodeConfig);
            return this;
        }

        public Builder setNodeCount(@Nullable Input<Integer> nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }

        public Builder setNodeCount(@Nullable Integer nodeCount) {
            this.nodeCount = Input.ofNullable(nodeCount);
            return this;
        }

        public Builder setPrivateEnvironmentConfig(@Nullable Input<PrivateEnvironmentConfigArgs> privateEnvironmentConfig) {
            this.privateEnvironmentConfig = privateEnvironmentConfig;
            return this;
        }

        public Builder setPrivateEnvironmentConfig(@Nullable PrivateEnvironmentConfigArgs privateEnvironmentConfig) {
            this.privateEnvironmentConfig = Input.ofNullable(privateEnvironmentConfig);
            return this;
        }

        public Builder setSoftwareConfig(@Nullable Input<SoftwareConfigArgs> softwareConfig) {
            this.softwareConfig = softwareConfig;
            return this;
        }

        public Builder setSoftwareConfig(@Nullable SoftwareConfigArgs softwareConfig) {
            this.softwareConfig = Input.ofNullable(softwareConfig);
            return this;
        }

        public Builder setWebServerConfig(@Nullable Input<WebServerConfigArgs> webServerConfig) {
            this.webServerConfig = webServerConfig;
            return this;
        }

        public Builder setWebServerConfig(@Nullable WebServerConfigArgs webServerConfig) {
            this.webServerConfig = Input.ofNullable(webServerConfig);
            return this;
        }

        public Builder setWebServerNetworkAccessControl(@Nullable Input<WebServerNetworkAccessControlArgs> webServerNetworkAccessControl) {
            this.webServerNetworkAccessControl = webServerNetworkAccessControl;
            return this;
        }

        public Builder setWebServerNetworkAccessControl(@Nullable WebServerNetworkAccessControlArgs webServerNetworkAccessControl) {
            this.webServerNetworkAccessControl = Input.ofNullable(webServerNetworkAccessControl);
            return this;
        }

        public Builder setWorkloadsConfig(@Nullable Input<WorkloadsConfigArgs> workloadsConfig) {
            this.workloadsConfig = workloadsConfig;
            return this;
        }

        public Builder setWorkloadsConfig(@Nullable WorkloadsConfigArgs workloadsConfig) {
            this.workloadsConfig = Input.ofNullable(workloadsConfig);
            return this;
        }

        public EnvironmentConfigArgs build() {
            return new EnvironmentConfigArgs(databaseConfig, encryptionConfig, environmentSize, maintenanceWindow, masterAuthorizedNetworksConfig, nodeConfig, nodeCount, privateEnvironmentConfig, softwareConfig, webServerConfig, webServerNetworkAccessControl, workloadsConfig);
        }
    }
}
