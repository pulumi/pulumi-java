// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dlp_v2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
 * 
 */
public final class GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse extends io.pulumi.resources.InvokeArgs {

    public static final GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse Empty = new GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse();

    /**
     * The resource name of the KMS CryptoKey to use for unwrapping.
     * 
     */
    @InputImport(name="cryptoKeyName", required=true)
    private final String cryptoKeyName;

    public String getCryptoKeyName() {
        return this.cryptoKeyName;
    }

    /**
     * The wrapped data crypto key.
     * 
     */
    @InputImport(name="wrappedKey", required=true)
    private final String wrappedKey;

    public String getWrappedKey() {
        return this.wrappedKey;
    }

    public GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse(
        String cryptoKeyName,
        String wrappedKey) {
        this.cryptoKeyName = Objects.requireNonNull(cryptoKeyName, "expected parameter 'cryptoKeyName' to be non-null");
        this.wrappedKey = Objects.requireNonNull(wrappedKey, "expected parameter 'wrappedKey' to be non-null");
    }

    private GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse() {
        this.cryptoKeyName = null;
        this.wrappedKey = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String cryptoKeyName;
        private String wrappedKey;

        public Builder() {
    	      // Empty
        }

        public Builder(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyName = defaults.cryptoKeyName;
    	      this.wrappedKey = defaults.wrappedKey;
        }

        public Builder setCryptoKeyName(String cryptoKeyName) {
            this.cryptoKeyName = Objects.requireNonNull(cryptoKeyName);
            return this;
        }

        public Builder setWrappedKey(String wrappedKey) {
            this.wrappedKey = Objects.requireNonNull(wrappedKey);
            return this;
        }

        public GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse build() {
            return new GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse(cryptoKeyName, wrappedKey);
        }
    }
}
