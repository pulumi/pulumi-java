// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
 * 
 */
public final class RedirectResponse extends io.pulumi.resources.InvokeArgs {

    public static final RedirectResponse Empty = new RedirectResponse();

    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     * 
     */
    @Import(name="glob", required=true)
      private final String glob;

    public String getGlob() {
        return this.glob;
    }

    /**
     * The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
     * 
     */
    @Import(name="location", required=true)
      private final String location;

    public String getLocation() {
        return this.location;
    }

    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     * 
     */
    @Import(name="regex", required=true)
      private final String regex;

    public String getRegex() {
        return this.regex;
    }

    /**
     * The status HTTP code to return in the response. It must be a valid 3xx status code.
     * 
     */
    @Import(name="statusCode", required=true)
      private final Integer statusCode;

    public Integer getStatusCode() {
        return this.statusCode;
    }

    public RedirectResponse(
        String glob,
        String location,
        String regex,
        Integer statusCode) {
        this.glob = Objects.requireNonNull(glob, "expected parameter 'glob' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.regex = Objects.requireNonNull(regex, "expected parameter 'regex' to be non-null");
        this.statusCode = Objects.requireNonNull(statusCode, "expected parameter 'statusCode' to be non-null");
    }

    private RedirectResponse() {
        this.glob = null;
        this.location = null;
        this.regex = null;
        this.statusCode = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RedirectResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String glob;
        private String location;
        private String regex;
        private Integer statusCode;

        public Builder() {
    	      // Empty
        }

        public Builder(RedirectResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.glob = defaults.glob;
    	      this.location = defaults.location;
    	      this.regex = defaults.regex;
    	      this.statusCode = defaults.statusCode;
        }

        public Builder glob(String glob) {
            this.glob = Objects.requireNonNull(glob);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder regex(String regex) {
            this.regex = Objects.requireNonNull(regex);
            return this;
        }
        public Builder statusCode(Integer statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }        public RedirectResponse build() {
            return new RedirectResponse(glob, location, regex, statusCode);
        }
    }
}
