// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.recommendationengine_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.recommendationengine_v1beta1.outputs.GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchyResponse;
import io.pulumi.googlenative.recommendationengine_v1beta1.outputs.GoogleCloudRecommendationengineV1beta1FeatureMapResponse;
import io.pulumi.googlenative.recommendationengine_v1beta1.outputs.GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetCatalogItemResult {
    /**
     * Catalog item categories. This field is repeated for supporting one catalog item belonging to several parallel category hierarchies. For example, if a shoes product belongs to both ["Shoes & Accessories" -> "Shoes"] and ["Sports & Fitness" -> "Athletic Clothing" -> "Shoes"], it could be represented as: "categoryHierarchies": [ { "categories": ["Shoes & Accessories", "Shoes"]}, { "categories": ["Sports & Fitness", "Athletic Clothing", "Shoes"] } ]
     * 
     */
    private final List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchyResponse> categoryHierarchies;
    /**
     * Optional. Catalog item description. UTF-8 encoded string with a length limit of 5 KiB.
     * 
     */
    private final String description;
    /**
     * Optional. Highly encouraged. Extra catalog item attributes to be included in the recommendation model. For example, for retail products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the item attributes here.
     * 
     */
    private final GoogleCloudRecommendationengineV1beta1FeatureMapResponse itemAttributes;
    /**
     * Optional. Variant group identifier for prediction results. UTF-8 encoded string with a length limit of 128 bytes. This field must be enabled before it can be used. [Learn more](/recommendations-ai/docs/catalog#item-group-id).
     * 
     */
    private final String itemGroupId;
    /**
     * Optional. Metadata specific to retail products.
     * 
     */
    private final GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse productMetadata;
    /**
     * Optional. Filtering tags associated with the catalog item. Each tag should be a UTF-8 encoded string with a length limit of 1 KiB. This tag can be used for filtering recommendation results by passing the tag as part of the predict request filter.
     * 
     */
    private final List<String> tags;
    /**
     * Catalog item title. UTF-8 encoded string with a length limit of 1 KiB.
     * 
     */
    private final String title;

    @OutputCustomType.Constructor({"categoryHierarchies","description","itemAttributes","itemGroupId","productMetadata","tags","title"})
    private GetCatalogItemResult(
        List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchyResponse> categoryHierarchies,
        String description,
        GoogleCloudRecommendationengineV1beta1FeatureMapResponse itemAttributes,
        String itemGroupId,
        GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse productMetadata,
        List<String> tags,
        String title) {
        this.categoryHierarchies = Objects.requireNonNull(categoryHierarchies);
        this.description = Objects.requireNonNull(description);
        this.itemAttributes = Objects.requireNonNull(itemAttributes);
        this.itemGroupId = Objects.requireNonNull(itemGroupId);
        this.productMetadata = Objects.requireNonNull(productMetadata);
        this.tags = Objects.requireNonNull(tags);
        this.title = Objects.requireNonNull(title);
    }

    /**
     * Catalog item categories. This field is repeated for supporting one catalog item belonging to several parallel category hierarchies. For example, if a shoes product belongs to both ["Shoes & Accessories" -> "Shoes"] and ["Sports & Fitness" -> "Athletic Clothing" -> "Shoes"], it could be represented as: "categoryHierarchies": [ { "categories": ["Shoes & Accessories", "Shoes"]}, { "categories": ["Sports & Fitness", "Athletic Clothing", "Shoes"] } ]
     * 
    */
    public List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchyResponse> getCategoryHierarchies() {
        return this.categoryHierarchies;
    }
    /**
     * Optional. Catalog item description. UTF-8 encoded string with a length limit of 5 KiB.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * Optional. Highly encouraged. Extra catalog item attributes to be included in the recommendation model. For example, for retail products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the item attributes here.
     * 
    */
    public GoogleCloudRecommendationengineV1beta1FeatureMapResponse getItemAttributes() {
        return this.itemAttributes;
    }
    /**
     * Optional. Variant group identifier for prediction results. UTF-8 encoded string with a length limit of 128 bytes. This field must be enabled before it can be used. [Learn more](/recommendations-ai/docs/catalog#item-group-id).
     * 
    */
    public String getItemGroupId() {
        return this.itemGroupId;
    }
    /**
     * Optional. Metadata specific to retail products.
     * 
    */
    public GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse getProductMetadata() {
        return this.productMetadata;
    }
    /**
     * Optional. Filtering tags associated with the catalog item. Each tag should be a UTF-8 encoded string with a length limit of 1 KiB. This tag can be used for filtering recommendation results by passing the tag as part of the predict request filter.
     * 
    */
    public List<String> getTags() {
        return this.tags;
    }
    /**
     * Catalog item title. UTF-8 encoded string with a length limit of 1 KiB.
     * 
    */
    public String getTitle() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogItemResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchyResponse> categoryHierarchies;
        private String description;
        private GoogleCloudRecommendationengineV1beta1FeatureMapResponse itemAttributes;
        private String itemGroupId;
        private GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse productMetadata;
        private List<String> tags;
        private String title;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCatalogItemResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryHierarchies = defaults.categoryHierarchies;
    	      this.description = defaults.description;
    	      this.itemAttributes = defaults.itemAttributes;
    	      this.itemGroupId = defaults.itemGroupId;
    	      this.productMetadata = defaults.productMetadata;
    	      this.tags = defaults.tags;
    	      this.title = defaults.title;
        }

        public Builder setCategoryHierarchies(List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchyResponse> categoryHierarchies) {
            this.categoryHierarchies = Objects.requireNonNull(categoryHierarchies);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setItemAttributes(GoogleCloudRecommendationengineV1beta1FeatureMapResponse itemAttributes) {
            this.itemAttributes = Objects.requireNonNull(itemAttributes);
            return this;
        }

        public Builder setItemGroupId(String itemGroupId) {
            this.itemGroupId = Objects.requireNonNull(itemGroupId);
            return this;
        }

        public Builder setProductMetadata(GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse productMetadata) {
            this.productMetadata = Objects.requireNonNull(productMetadata);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        public GetCatalogItemResult build() {
            return new GetCatalogItemResult(categoryHierarchies, description, itemAttributes, itemGroupId, productMetadata, tags, title);
        }
    }
}
