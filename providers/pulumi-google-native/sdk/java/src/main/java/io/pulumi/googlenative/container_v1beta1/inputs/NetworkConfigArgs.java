// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.container_v1beta1.enums.NetworkConfigDatapathProvider;
import io.pulumi.googlenative.container_v1beta1.enums.NetworkConfigPrivateIpv6GoogleAccess;
import io.pulumi.googlenative.container_v1beta1.inputs.DNSConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.DefaultSnatStatusArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.ServiceExternalIPsConfigArgs;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * NetworkConfig reports the relative names of network & subnetwork.
 * 
 */
public final class NetworkConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkConfigArgs Empty = new NetworkConfigArgs();

    /**
     * The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
     * 
     */
    @Import(name="datapathProvider")
      private final @Nullable Output<NetworkConfigDatapathProvider> datapathProvider;

    public Output<NetworkConfigDatapathProvider> getDatapathProvider() {
        return this.datapathProvider == null ? Output.empty() : this.datapathProvider;
    }

    /**
     * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
     * 
     */
    @Import(name="defaultSnatStatus")
      private final @Nullable Output<DefaultSnatStatusArgs> defaultSnatStatus;

    public Output<DefaultSnatStatusArgs> getDefaultSnatStatus() {
        return this.defaultSnatStatus == null ? Output.empty() : this.defaultSnatStatus;
    }

    /**
     * DNSConfig contains clusterDNS config for this cluster.
     * 
     */
    @Import(name="dnsConfig")
      private final @Nullable Output<DNSConfigArgs> dnsConfig;

    public Output<DNSConfigArgs> getDnsConfig() {
        return this.dnsConfig == null ? Output.empty() : this.dnsConfig;
    }

    /**
     * Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
     * 
     */
    @Import(name="enableIntraNodeVisibility")
      private final @Nullable Output<Boolean> enableIntraNodeVisibility;

    public Output<Boolean> getEnableIntraNodeVisibility() {
        return this.enableIntraNodeVisibility == null ? Output.empty() : this.enableIntraNodeVisibility;
    }

    /**
     * Whether L4ILB Subsetting is enabled for this cluster.
     * 
     */
    @Import(name="enableL4ilbSubsetting")
      private final @Nullable Output<Boolean> enableL4ilbSubsetting;

    public Output<Boolean> getEnableL4ilbSubsetting() {
        return this.enableL4ilbSubsetting == null ? Output.empty() : this.enableL4ilbSubsetting;
    }

    /**
     * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
     * 
     */
    @Import(name="privateIpv6GoogleAccess")
      private final @Nullable Output<NetworkConfigPrivateIpv6GoogleAccess> privateIpv6GoogleAccess;

    public Output<NetworkConfigPrivateIpv6GoogleAccess> getPrivateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess == null ? Output.empty() : this.privateIpv6GoogleAccess;
    }

    /**
     * ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
     * 
     */
    @Import(name="serviceExternalIpsConfig")
      private final @Nullable Output<ServiceExternalIPsConfigArgs> serviceExternalIpsConfig;

    public Output<ServiceExternalIPsConfigArgs> getServiceExternalIpsConfig() {
        return this.serviceExternalIpsConfig == null ? Output.empty() : this.serviceExternalIpsConfig;
    }

    public NetworkConfigArgs(
        @Nullable Output<NetworkConfigDatapathProvider> datapathProvider,
        @Nullable Output<DefaultSnatStatusArgs> defaultSnatStatus,
        @Nullable Output<DNSConfigArgs> dnsConfig,
        @Nullable Output<Boolean> enableIntraNodeVisibility,
        @Nullable Output<Boolean> enableL4ilbSubsetting,
        @Nullable Output<NetworkConfigPrivateIpv6GoogleAccess> privateIpv6GoogleAccess,
        @Nullable Output<ServiceExternalIPsConfigArgs> serviceExternalIpsConfig) {
        this.datapathProvider = datapathProvider;
        this.defaultSnatStatus = defaultSnatStatus;
        this.dnsConfig = dnsConfig;
        this.enableIntraNodeVisibility = enableIntraNodeVisibility;
        this.enableL4ilbSubsetting = enableL4ilbSubsetting;
        this.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
        this.serviceExternalIpsConfig = serviceExternalIpsConfig;
    }

    private NetworkConfigArgs() {
        this.datapathProvider = Output.empty();
        this.defaultSnatStatus = Output.empty();
        this.dnsConfig = Output.empty();
        this.enableIntraNodeVisibility = Output.empty();
        this.enableL4ilbSubsetting = Output.empty();
        this.privateIpv6GoogleAccess = Output.empty();
        this.serviceExternalIpsConfig = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<NetworkConfigDatapathProvider> datapathProvider;
        private @Nullable Output<DefaultSnatStatusArgs> defaultSnatStatus;
        private @Nullable Output<DNSConfigArgs> dnsConfig;
        private @Nullable Output<Boolean> enableIntraNodeVisibility;
        private @Nullable Output<Boolean> enableL4ilbSubsetting;
        private @Nullable Output<NetworkConfigPrivateIpv6GoogleAccess> privateIpv6GoogleAccess;
        private @Nullable Output<ServiceExternalIPsConfigArgs> serviceExternalIpsConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datapathProvider = defaults.datapathProvider;
    	      this.defaultSnatStatus = defaults.defaultSnatStatus;
    	      this.dnsConfig = defaults.dnsConfig;
    	      this.enableIntraNodeVisibility = defaults.enableIntraNodeVisibility;
    	      this.enableL4ilbSubsetting = defaults.enableL4ilbSubsetting;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.serviceExternalIpsConfig = defaults.serviceExternalIpsConfig;
        }

        public Builder datapathProvider(@Nullable Output<NetworkConfigDatapathProvider> datapathProvider) {
            this.datapathProvider = datapathProvider;
            return this;
        }

        public Builder datapathProvider(@Nullable NetworkConfigDatapathProvider datapathProvider) {
            this.datapathProvider = Output.ofNullable(datapathProvider);
            return this;
        }

        public Builder defaultSnatStatus(@Nullable Output<DefaultSnatStatusArgs> defaultSnatStatus) {
            this.defaultSnatStatus = defaultSnatStatus;
            return this;
        }

        public Builder defaultSnatStatus(@Nullable DefaultSnatStatusArgs defaultSnatStatus) {
            this.defaultSnatStatus = Output.ofNullable(defaultSnatStatus);
            return this;
        }

        public Builder dnsConfig(@Nullable Output<DNSConfigArgs> dnsConfig) {
            this.dnsConfig = dnsConfig;
            return this;
        }

        public Builder dnsConfig(@Nullable DNSConfigArgs dnsConfig) {
            this.dnsConfig = Output.ofNullable(dnsConfig);
            return this;
        }

        public Builder enableIntraNodeVisibility(@Nullable Output<Boolean> enableIntraNodeVisibility) {
            this.enableIntraNodeVisibility = enableIntraNodeVisibility;
            return this;
        }

        public Builder enableIntraNodeVisibility(@Nullable Boolean enableIntraNodeVisibility) {
            this.enableIntraNodeVisibility = Output.ofNullable(enableIntraNodeVisibility);
            return this;
        }

        public Builder enableL4ilbSubsetting(@Nullable Output<Boolean> enableL4ilbSubsetting) {
            this.enableL4ilbSubsetting = enableL4ilbSubsetting;
            return this;
        }

        public Builder enableL4ilbSubsetting(@Nullable Boolean enableL4ilbSubsetting) {
            this.enableL4ilbSubsetting = Output.ofNullable(enableL4ilbSubsetting);
            return this;
        }

        public Builder privateIpv6GoogleAccess(@Nullable Output<NetworkConfigPrivateIpv6GoogleAccess> privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            return this;
        }

        public Builder privateIpv6GoogleAccess(@Nullable NetworkConfigPrivateIpv6GoogleAccess privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Output.ofNullable(privateIpv6GoogleAccess);
            return this;
        }

        public Builder serviceExternalIpsConfig(@Nullable Output<ServiceExternalIPsConfigArgs> serviceExternalIpsConfig) {
            this.serviceExternalIpsConfig = serviceExternalIpsConfig;
            return this;
        }

        public Builder serviceExternalIpsConfig(@Nullable ServiceExternalIPsConfigArgs serviceExternalIpsConfig) {
            this.serviceExternalIpsConfig = Output.ofNullable(serviceExternalIpsConfig);
            return this;
        }
        public NetworkConfigArgs build() {
            return new NetworkConfigArgs(datapathProvider, defaultSnatStatus, dnsConfig, enableIntraNodeVisibility, enableL4ilbSubsetting, privateIpv6GoogleAccess, serviceExternalIpsConfig);
        }
    }
}
