// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudasset_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Contains query options.
 * 
 */
public final class OptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final OptionsArgs Empty = new OptionsArgs();

    /**
     * Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
     * 
     */
    @InputImport(name="analyzeServiceAccountImpersonation")
      private final @Nullable Input<Boolean> analyzeServiceAccountImpersonation;

    public Input<Boolean> getAnalyzeServiceAccountImpersonation() {
        return this.analyzeServiceAccountImpersonation == null ? Input.empty() : this.analyzeServiceAccountImpersonation;
    }

    /**
     * Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. If true, the default max expansion per group is 1000 for AssetService.AnalyzeIamPolicy][]. Default is false.
     * 
     */
    @InputImport(name="expandGroups")
      private final @Nullable Input<Boolean> expandGroups;

    public Input<Boolean> getExpandGroups() {
        return this.expandGroups == null ? Input.empty() : this.expandGroups;
    }

    /**
     * Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. If true, the default max expansion per resource is 1000 for AssetService.AnalyzeIamPolicy][] and 100000 for AssetService.AnalyzeIamPolicyLongrunning][]. Default is false.
     * 
     */
    @InputImport(name="expandResources")
      private final @Nullable Input<Boolean> expandResources;

    public Input<Boolean> getExpandResources() {
        return this.expandResources == null ? Input.empty() : this.expandResources;
    }

    /**
     * Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
     * 
     */
    @InputImport(name="expandRoles")
      private final @Nullable Input<Boolean> expandRoles;

    public Input<Boolean> getExpandRoles() {
        return this.expandRoles == null ? Input.empty() : this.expandRoles;
    }

    /**
     * Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
     * 
     */
    @InputImport(name="outputGroupEdges")
      private final @Nullable Input<Boolean> outputGroupEdges;

    public Input<Boolean> getOutputGroupEdges() {
        return this.outputGroupEdges == null ? Input.empty() : this.outputGroupEdges;
    }

    /**
     * Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
     * 
     */
    @InputImport(name="outputResourceEdges")
      private final @Nullable Input<Boolean> outputResourceEdges;

    public Input<Boolean> getOutputResourceEdges() {
        return this.outputResourceEdges == null ? Input.empty() : this.outputResourceEdges;
    }

    public OptionsArgs(
        @Nullable Input<Boolean> analyzeServiceAccountImpersonation,
        @Nullable Input<Boolean> expandGroups,
        @Nullable Input<Boolean> expandResources,
        @Nullable Input<Boolean> expandRoles,
        @Nullable Input<Boolean> outputGroupEdges,
        @Nullable Input<Boolean> outputResourceEdges) {
        this.analyzeServiceAccountImpersonation = analyzeServiceAccountImpersonation;
        this.expandGroups = expandGroups;
        this.expandResources = expandResources;
        this.expandRoles = expandRoles;
        this.outputGroupEdges = outputGroupEdges;
        this.outputResourceEdges = outputResourceEdges;
    }

    private OptionsArgs() {
        this.analyzeServiceAccountImpersonation = Input.empty();
        this.expandGroups = Input.empty();
        this.expandResources = Input.empty();
        this.expandRoles = Input.empty();
        this.outputGroupEdges = Input.empty();
        this.outputResourceEdges = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> analyzeServiceAccountImpersonation;
        private @Nullable Input<Boolean> expandGroups;
        private @Nullable Input<Boolean> expandResources;
        private @Nullable Input<Boolean> expandRoles;
        private @Nullable Input<Boolean> outputGroupEdges;
        private @Nullable Input<Boolean> outputResourceEdges;

        public Builder() {
    	      // Empty
        }

        public Builder(OptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyzeServiceAccountImpersonation = defaults.analyzeServiceAccountImpersonation;
    	      this.expandGroups = defaults.expandGroups;
    	      this.expandResources = defaults.expandResources;
    	      this.expandRoles = defaults.expandRoles;
    	      this.outputGroupEdges = defaults.outputGroupEdges;
    	      this.outputResourceEdges = defaults.outputResourceEdges;
        }

        public Builder setAnalyzeServiceAccountImpersonation(@Nullable Input<Boolean> analyzeServiceAccountImpersonation) {
            this.analyzeServiceAccountImpersonation = analyzeServiceAccountImpersonation;
            return this;
        }

        public Builder setAnalyzeServiceAccountImpersonation(@Nullable Boolean analyzeServiceAccountImpersonation) {
            this.analyzeServiceAccountImpersonation = Input.ofNullable(analyzeServiceAccountImpersonation);
            return this;
        }

        public Builder setExpandGroups(@Nullable Input<Boolean> expandGroups) {
            this.expandGroups = expandGroups;
            return this;
        }

        public Builder setExpandGroups(@Nullable Boolean expandGroups) {
            this.expandGroups = Input.ofNullable(expandGroups);
            return this;
        }

        public Builder setExpandResources(@Nullable Input<Boolean> expandResources) {
            this.expandResources = expandResources;
            return this;
        }

        public Builder setExpandResources(@Nullable Boolean expandResources) {
            this.expandResources = Input.ofNullable(expandResources);
            return this;
        }

        public Builder setExpandRoles(@Nullable Input<Boolean> expandRoles) {
            this.expandRoles = expandRoles;
            return this;
        }

        public Builder setExpandRoles(@Nullable Boolean expandRoles) {
            this.expandRoles = Input.ofNullable(expandRoles);
            return this;
        }

        public Builder setOutputGroupEdges(@Nullable Input<Boolean> outputGroupEdges) {
            this.outputGroupEdges = outputGroupEdges;
            return this;
        }

        public Builder setOutputGroupEdges(@Nullable Boolean outputGroupEdges) {
            this.outputGroupEdges = Input.ofNullable(outputGroupEdges);
            return this;
        }

        public Builder setOutputResourceEdges(@Nullable Input<Boolean> outputResourceEdges) {
            this.outputResourceEdges = outputResourceEdges;
            return this;
        }

        public Builder setOutputResourceEdges(@Nullable Boolean outputResourceEdges) {
            this.outputResourceEdges = Input.ofNullable(outputResourceEdges);
            return this;
        }
        public OptionsArgs build() {
            return new OptionsArgs(analyzeServiceAccountImpersonation, expandGroups, expandResources, expandRoles, outputGroupEdges, outputResourceEdges);
        }
    }
}
