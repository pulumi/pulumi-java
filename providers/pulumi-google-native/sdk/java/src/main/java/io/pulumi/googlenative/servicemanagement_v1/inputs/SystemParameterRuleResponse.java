// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.SystemParameterResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Define a system parameter rule mapping system parameter definitions to methods.
 * 
 */
public final class SystemParameterRuleResponse extends io.pulumi.resources.InvokeArgs {

    public static final SystemParameterRuleResponse Empty = new SystemParameterRuleResponse();

    /**
     * Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
     * 
     */
    @InputImport(name="parameters", required=true)
    private final List<SystemParameterResponse> parameters;

    public List<SystemParameterResponse> getParameters() {
        return this.parameters;
    }

    /**
     * Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
     * 
     */
    @InputImport(name="selector", required=true)
    private final String selector;

    public String getSelector() {
        return this.selector;
    }

    public SystemParameterRuleResponse(
        List<SystemParameterResponse> parameters,
        String selector) {
        this.parameters = Objects.requireNonNull(parameters, "expected parameter 'parameters' to be non-null");
        this.selector = Objects.requireNonNull(selector, "expected parameter 'selector' to be non-null");
    }

    private SystemParameterRuleResponse() {
        this.parameters = List.of();
        this.selector = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SystemParameterRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<SystemParameterResponse> parameters;
        private String selector;

        public Builder() {
    	      // Empty
        }

        public Builder(SystemParameterRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.parameters = defaults.parameters;
    	      this.selector = defaults.selector;
        }

        public Builder setParameters(List<SystemParameterResponse> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }

        public Builder setSelector(String selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }

        public SystemParameterRuleResponse build() {
            return new SystemParameterRuleResponse(parameters, selector);
        }
    }
}
