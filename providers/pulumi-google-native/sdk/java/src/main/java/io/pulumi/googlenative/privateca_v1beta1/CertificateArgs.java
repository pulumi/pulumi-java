// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1beta1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.privateca_v1beta1.inputs.CertificateConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    @Import(name="certificateAuthorityId", required=true)
      private final Output<String> certificateAuthorityId;

    public Output<String> getCertificateAuthorityId() {
        return this.certificateAuthorityId;
    }

    @Import(name="certificateId")
      private final @Nullable Output<String> certificateId;

    public Output<String> getCertificateId() {
        return this.certificateId == null ? Codegen.empty() : this.certificateId;
    }

    /**
     * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     * 
     */
    @Import(name="config")
      private final @Nullable Output<CertificateConfigArgs> config;

    public Output<CertificateConfigArgs> getConfig() {
        return this.config == null ? Codegen.empty() : this.config;
    }

    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     * 
     */
    @Import(name="lifetime", required=true)
      private final Output<String> lifetime;

    public Output<String> getLifetime() {
        return this.lifetime;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     * 
     */
    @Import(name="pemCsr")
      private final @Nullable Output<String> pemCsr;

    public Output<String> getPemCsr() {
        return this.pemCsr == null ? Codegen.empty() : this.pemCsr;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    public CertificateArgs(
        Output<String> certificateAuthorityId,
        @Nullable Output<String> certificateId,
        @Nullable Output<CertificateConfigArgs> config,
        @Nullable Output<Map<String,String>> labels,
        Output<String> lifetime,
        @Nullable Output<String> location,
        @Nullable Output<String> pemCsr,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId) {
        this.certificateAuthorityId = Objects.requireNonNull(certificateAuthorityId, "expected parameter 'certificateAuthorityId' to be non-null");
        this.certificateId = certificateId;
        this.config = config;
        this.labels = labels;
        this.lifetime = Objects.requireNonNull(lifetime, "expected parameter 'lifetime' to be non-null");
        this.location = location;
        this.pemCsr = pemCsr;
        this.project = project;
        this.requestId = requestId;
    }

    private CertificateArgs() {
        this.certificateAuthorityId = Codegen.empty();
        this.certificateId = Codegen.empty();
        this.config = Codegen.empty();
        this.labels = Codegen.empty();
        this.lifetime = Codegen.empty();
        this.location = Codegen.empty();
        this.pemCsr = Codegen.empty();
        this.project = Codegen.empty();
        this.requestId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> certificateAuthorityId;
        private @Nullable Output<String> certificateId;
        private @Nullable Output<CertificateConfigArgs> config;
        private @Nullable Output<Map<String,String>> labels;
        private Output<String> lifetime;
        private @Nullable Output<String> location;
        private @Nullable Output<String> pemCsr;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.certificateId = defaults.certificateId;
    	      this.config = defaults.config;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.pemCsr = defaults.pemCsr;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
        }

        public Builder certificateAuthorityId(Output<String> certificateAuthorityId) {
            this.certificateAuthorityId = Objects.requireNonNull(certificateAuthorityId);
            return this;
        }
        public Builder certificateAuthorityId(String certificateAuthorityId) {
            this.certificateAuthorityId = Output.of(Objects.requireNonNull(certificateAuthorityId));
            return this;
        }
        public Builder certificateId(@Nullable Output<String> certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = Codegen.ofNullable(certificateId);
            return this;
        }
        public Builder config(@Nullable Output<CertificateConfigArgs> config) {
            this.config = config;
            return this;
        }
        public Builder config(@Nullable CertificateConfigArgs config) {
            this.config = Codegen.ofNullable(config);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder lifetime(Output<String> lifetime) {
            this.lifetime = Objects.requireNonNull(lifetime);
            return this;
        }
        public Builder lifetime(String lifetime) {
            this.lifetime = Output.of(Objects.requireNonNull(lifetime));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder pemCsr(@Nullable Output<String> pemCsr) {
            this.pemCsr = pemCsr;
            return this;
        }
        public Builder pemCsr(@Nullable String pemCsr) {
            this.pemCsr = Codegen.ofNullable(pemCsr);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }        public CertificateArgs build() {
            return new CertificateArgs(certificateAuthorityId, certificateId, config, labels, lifetime, location, pemCsr, project, requestId);
        }
    }
}
