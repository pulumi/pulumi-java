// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Defines a SDK harness container for executing Dataflow pipelines.
 * 
 */
public final class SdkHarnessContainerImageResponse extends io.pulumi.resources.InvokeArgs {

    public static final SdkHarnessContainerImageResponse Empty = new SdkHarnessContainerImageResponse();

    /**
     * A docker container image that resides in Google Container Registry.
     * 
     */
    @InputImport(name="containerImage", required=true)
      private final String containerImage;

    public String getContainerImage() {
        return this.containerImage;
    }

    /**
     * Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
     * 
     */
    @InputImport(name="environmentId", required=true)
      private final String environmentId;

    public String getEnvironmentId() {
        return this.environmentId;
    }

    /**
     * If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
     * 
     */
    @InputImport(name="useSingleCorePerContainer", required=true)
      private final Boolean useSingleCorePerContainer;

    public Boolean getUseSingleCorePerContainer() {
        return this.useSingleCorePerContainer;
    }

    public SdkHarnessContainerImageResponse(
        String containerImage,
        String environmentId,
        Boolean useSingleCorePerContainer) {
        this.containerImage = Objects.requireNonNull(containerImage, "expected parameter 'containerImage' to be non-null");
        this.environmentId = Objects.requireNonNull(environmentId, "expected parameter 'environmentId' to be non-null");
        this.useSingleCorePerContainer = Objects.requireNonNull(useSingleCorePerContainer, "expected parameter 'useSingleCorePerContainer' to be non-null");
    }

    private SdkHarnessContainerImageResponse() {
        this.containerImage = null;
        this.environmentId = null;
        this.useSingleCorePerContainer = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SdkHarnessContainerImageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String containerImage;
        private String environmentId;
        private Boolean useSingleCorePerContainer;

        public Builder() {
    	      // Empty
        }

        public Builder(SdkHarnessContainerImageResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerImage = defaults.containerImage;
    	      this.environmentId = defaults.environmentId;
    	      this.useSingleCorePerContainer = defaults.useSingleCorePerContainer;
        }

        public Builder setContainerImage(String containerImage) {
            this.containerImage = Objects.requireNonNull(containerImage);
            return this;
        }

        public Builder setEnvironmentId(String environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId);
            return this;
        }

        public Builder setUseSingleCorePerContainer(Boolean useSingleCorePerContainer) {
            this.useSingleCorePerContainer = Objects.requireNonNull(useSingleCorePerContainer);
            return this;
        }
        public SdkHarnessContainerImageResponse build() {
            return new SdkHarnessContainerImageResponse(containerImage, environmentId, useSingleCorePerContainer);
        }
    }
}
