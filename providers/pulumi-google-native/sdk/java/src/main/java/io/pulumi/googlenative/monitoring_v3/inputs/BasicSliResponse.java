// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v3.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v3.inputs.AvailabilityCriteriaResponse;
import io.pulumi.googlenative.monitoring_v3.inputs.LatencyCriteriaResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BasicSliResponse extends io.pulumi.resources.InvokeArgs {

    public static final BasicSliResponse Empty = new BasicSliResponse();

    @InputImport(name="availability", required=true)
    private final AvailabilityCriteriaResponse availability;

    public AvailabilityCriteriaResponse getAvailability() {
        return this.availability;
    }

    @InputImport(name="latency", required=true)
    private final LatencyCriteriaResponse latency;

    public LatencyCriteriaResponse getLatency() {
        return this.latency;
    }

    @InputImport(name="location", required=true)
    private final List<String> location;

    public List<String> getLocation() {
        return this.location;
    }

    @InputImport(name="method", required=true)
    private final List<String> method;

    public List<String> getMethod() {
        return this.method;
    }

    @InputImport(name="version", required=true)
    private final List<String> version;

    public List<String> getVersion() {
        return this.version;
    }

    public BasicSliResponse(
        AvailabilityCriteriaResponse availability,
        LatencyCriteriaResponse latency,
        List<String> location,
        List<String> method,
        List<String> version) {
        this.availability = Objects.requireNonNull(availability, "expected parameter 'availability' to be non-null");
        this.latency = Objects.requireNonNull(latency, "expected parameter 'latency' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.method = Objects.requireNonNull(method, "expected parameter 'method' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private BasicSliResponse() {
        this.availability = null;
        this.latency = null;
        this.location = List.of();
        this.method = List.of();
        this.version = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BasicSliResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AvailabilityCriteriaResponse availability;
        private LatencyCriteriaResponse latency;
        private List<String> location;
        private List<String> method;
        private List<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(BasicSliResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.latency = defaults.latency;
    	      this.location = defaults.location;
    	      this.method = defaults.method;
    	      this.version = defaults.version;
        }

        public Builder setAvailability(AvailabilityCriteriaResponse availability) {
            this.availability = Objects.requireNonNull(availability);
            return this;
        }

        public Builder setLatency(LatencyCriteriaResponse latency) {
            this.latency = Objects.requireNonNull(latency);
            return this;
        }

        public Builder setLocation(List<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setMethod(List<String> method) {
            this.method = Objects.requireNonNull(method);
            return this;
        }

        public Builder setVersion(List<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public BasicSliResponse build() {
            return new BasicSliResponse(availability, latency, location, method, version);
        }
    }
}
