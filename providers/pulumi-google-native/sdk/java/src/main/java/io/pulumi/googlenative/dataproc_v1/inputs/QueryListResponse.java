// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A list of queries to run on a cluster.
 * 
 */
public final class QueryListResponse extends io.pulumi.resources.InvokeArgs {

    public static final QueryListResponse Empty = new QueryListResponse();

    /**
     * The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": [ "query1", "query2", "query3;query4", ] } }
     * 
     */
    @InputImport(name="queries", required=true)
    private final List<String> queries;

    public List<String> getQueries() {
        return this.queries;
    }

    public QueryListResponse(List<String> queries) {
        this.queries = Objects.requireNonNull(queries, "expected parameter 'queries' to be non-null");
    }

    private QueryListResponse() {
        this.queries = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueryListResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> queries;

        public Builder() {
    	      // Empty
        }

        public Builder(QueryListResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.queries = defaults.queries;
        }

        public Builder setQueries(List<String> queries) {
            this.queries = Objects.requireNonNull(queries);
            return this;
        }

        public QueryListResponse build() {
            return new QueryListResponse(queries);
        }
    }
}
