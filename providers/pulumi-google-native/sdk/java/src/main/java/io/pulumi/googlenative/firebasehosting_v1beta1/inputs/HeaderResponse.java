// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
 * 
 */
public final class HeaderResponse extends io.pulumi.resources.InvokeArgs {

    public static final HeaderResponse Empty = new HeaderResponse();

    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     * 
     */
    @InputImport(name="glob", required=true)
    private final String glob;

    public String getGlob() {
        return this.glob;
    }

    /**
     * The additional headers to add to the response.
     * 
     */
    @InputImport(name="headers", required=true)
    private final Map<String,String> headers;

    public Map<String,String> getHeaders() {
        return this.headers;
    }

    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     * 
     */
    @InputImport(name="regex", required=true)
    private final String regex;

    public String getRegex() {
        return this.regex;
    }

    public HeaderResponse(
        String glob,
        Map<String,String> headers,
        String regex) {
        this.glob = Objects.requireNonNull(glob, "expected parameter 'glob' to be non-null");
        this.headers = Objects.requireNonNull(headers, "expected parameter 'headers' to be non-null");
        this.regex = Objects.requireNonNull(regex, "expected parameter 'regex' to be non-null");
    }

    private HeaderResponse() {
        this.glob = null;
        this.headers = Map.of();
        this.regex = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HeaderResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String glob;
        private Map<String,String> headers;
        private String regex;

        public Builder() {
    	      // Empty
        }

        public Builder(HeaderResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.glob = defaults.glob;
    	      this.headers = defaults.headers;
    	      this.regex = defaults.regex;
        }

        public Builder setGlob(String glob) {
            this.glob = Objects.requireNonNull(glob);
            return this;
        }

        public Builder setHeaders(Map<String,String> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }

        public Builder setRegex(String regex) {
            this.regex = Objects.requireNonNull(regex);
            return this;
        }

        public HeaderResponse build() {
            return new HeaderResponse(glob, headers, regex);
        }
    }
}
