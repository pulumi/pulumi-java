// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.PoolOptionResponse;
import io.pulumi.googlenative.cloudbuild_v1.inputs.VolumeResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BuildOptionsResponse extends io.pulumi.resources.InvokeArgs {

    public static final BuildOptionsResponse Empty = new BuildOptionsResponse();

    @InputImport(name="diskSizeGb", required=true)
    private final String diskSizeGb;

    public String getDiskSizeGb() {
        return this.diskSizeGb;
    }

    @InputImport(name="dynamicSubstitutions", required=true)
    private final Boolean dynamicSubstitutions;

    public Boolean getDynamicSubstitutions() {
        return this.dynamicSubstitutions;
    }

    @InputImport(name="env", required=true)
    private final List<String> env;

    public List<String> getEnv() {
        return this.env;
    }

    @InputImport(name="logStreamingOption", required=true)
    private final String logStreamingOption;

    public String getLogStreamingOption() {
        return this.logStreamingOption;
    }

    @InputImport(name="logging", required=true)
    private final String logging;

    public String getLogging() {
        return this.logging;
    }

    @InputImport(name="machineType", required=true)
    private final String machineType;

    public String getMachineType() {
        return this.machineType;
    }

    @InputImport(name="pool", required=true)
    private final PoolOptionResponse pool;

    public PoolOptionResponse getPool() {
        return this.pool;
    }

    @InputImport(name="requestedVerifyOption", required=true)
    private final String requestedVerifyOption;

    public String getRequestedVerifyOption() {
        return this.requestedVerifyOption;
    }

    @InputImport(name="secretEnv", required=true)
    private final List<String> secretEnv;

    public List<String> getSecretEnv() {
        return this.secretEnv;
    }

    @InputImport(name="sourceProvenanceHash", required=true)
    private final List<String> sourceProvenanceHash;

    public List<String> getSourceProvenanceHash() {
        return this.sourceProvenanceHash;
    }

    @InputImport(name="substitutionOption", required=true)
    private final String substitutionOption;

    public String getSubstitutionOption() {
        return this.substitutionOption;
    }

    @InputImport(name="volumes", required=true)
    private final List<VolumeResponse> volumes;

    public List<VolumeResponse> getVolumes() {
        return this.volumes;
    }

    @InputImport(name="workerPool", required=true)
    private final String workerPool;

    public String getWorkerPool() {
        return this.workerPool;
    }

    public BuildOptionsResponse(
        String diskSizeGb,
        Boolean dynamicSubstitutions,
        List<String> env,
        String logStreamingOption,
        String logging,
        String machineType,
        PoolOptionResponse pool,
        String requestedVerifyOption,
        List<String> secretEnv,
        List<String> sourceProvenanceHash,
        String substitutionOption,
        List<VolumeResponse> volumes,
        String workerPool) {
        this.diskSizeGb = Objects.requireNonNull(diskSizeGb, "expected parameter 'diskSizeGb' to be non-null");
        this.dynamicSubstitutions = Objects.requireNonNull(dynamicSubstitutions, "expected parameter 'dynamicSubstitutions' to be non-null");
        this.env = Objects.requireNonNull(env, "expected parameter 'env' to be non-null");
        this.logStreamingOption = Objects.requireNonNull(logStreamingOption, "expected parameter 'logStreamingOption' to be non-null");
        this.logging = Objects.requireNonNull(logging, "expected parameter 'logging' to be non-null");
        this.machineType = Objects.requireNonNull(machineType, "expected parameter 'machineType' to be non-null");
        this.pool = Objects.requireNonNull(pool, "expected parameter 'pool' to be non-null");
        this.requestedVerifyOption = Objects.requireNonNull(requestedVerifyOption, "expected parameter 'requestedVerifyOption' to be non-null");
        this.secretEnv = Objects.requireNonNull(secretEnv, "expected parameter 'secretEnv' to be non-null");
        this.sourceProvenanceHash = Objects.requireNonNull(sourceProvenanceHash, "expected parameter 'sourceProvenanceHash' to be non-null");
        this.substitutionOption = Objects.requireNonNull(substitutionOption, "expected parameter 'substitutionOption' to be non-null");
        this.volumes = Objects.requireNonNull(volumes, "expected parameter 'volumes' to be non-null");
        this.workerPool = Objects.requireNonNull(workerPool, "expected parameter 'workerPool' to be non-null");
    }

    private BuildOptionsResponse() {
        this.diskSizeGb = null;
        this.dynamicSubstitutions = null;
        this.env = List.of();
        this.logStreamingOption = null;
        this.logging = null;
        this.machineType = null;
        this.pool = null;
        this.requestedVerifyOption = null;
        this.secretEnv = List.of();
        this.sourceProvenanceHash = List.of();
        this.substitutionOption = null;
        this.volumes = List.of();
        this.workerPool = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String diskSizeGb;
        private Boolean dynamicSubstitutions;
        private List<String> env;
        private String logStreamingOption;
        private String logging;
        private String machineType;
        private PoolOptionResponse pool;
        private String requestedVerifyOption;
        private List<String> secretEnv;
        private List<String> sourceProvenanceHash;
        private String substitutionOption;
        private List<VolumeResponse> volumes;
        private String workerPool;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.dynamicSubstitutions = defaults.dynamicSubstitutions;
    	      this.env = defaults.env;
    	      this.logStreamingOption = defaults.logStreamingOption;
    	      this.logging = defaults.logging;
    	      this.machineType = defaults.machineType;
    	      this.pool = defaults.pool;
    	      this.requestedVerifyOption = defaults.requestedVerifyOption;
    	      this.secretEnv = defaults.secretEnv;
    	      this.sourceProvenanceHash = defaults.sourceProvenanceHash;
    	      this.substitutionOption = defaults.substitutionOption;
    	      this.volumes = defaults.volumes;
    	      this.workerPool = defaults.workerPool;
        }

        public Builder setDiskSizeGb(String diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }

        public Builder setDynamicSubstitutions(Boolean dynamicSubstitutions) {
            this.dynamicSubstitutions = Objects.requireNonNull(dynamicSubstitutions);
            return this;
        }

        public Builder setEnv(List<String> env) {
            this.env = Objects.requireNonNull(env);
            return this;
        }

        public Builder setLogStreamingOption(String logStreamingOption) {
            this.logStreamingOption = Objects.requireNonNull(logStreamingOption);
            return this;
        }

        public Builder setLogging(String logging) {
            this.logging = Objects.requireNonNull(logging);
            return this;
        }

        public Builder setMachineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder setPool(PoolOptionResponse pool) {
            this.pool = Objects.requireNonNull(pool);
            return this;
        }

        public Builder setRequestedVerifyOption(String requestedVerifyOption) {
            this.requestedVerifyOption = Objects.requireNonNull(requestedVerifyOption);
            return this;
        }

        public Builder setSecretEnv(List<String> secretEnv) {
            this.secretEnv = Objects.requireNonNull(secretEnv);
            return this;
        }

        public Builder setSourceProvenanceHash(List<String> sourceProvenanceHash) {
            this.sourceProvenanceHash = Objects.requireNonNull(sourceProvenanceHash);
            return this;
        }

        public Builder setSubstitutionOption(String substitutionOption) {
            this.substitutionOption = Objects.requireNonNull(substitutionOption);
            return this;
        }

        public Builder setVolumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }

        public Builder setWorkerPool(String workerPool) {
            this.workerPool = Objects.requireNonNull(workerPool);
            return this;
        }

        public BuildOptionsResponse build() {
            return new BuildOptionsResponse(diskSizeGb, dynamicSubstitutions, env, logStreamingOption, logging, machineType, pool, requestedVerifyOption, secretEnv, sourceProvenanceHash, substitutionOption, volumes, workerPool);
        }
    }
}
