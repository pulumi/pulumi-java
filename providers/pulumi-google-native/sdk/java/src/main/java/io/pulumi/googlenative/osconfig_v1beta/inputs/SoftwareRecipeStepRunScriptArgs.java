// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.osconfig_v1beta.enums.SoftwareRecipeStepRunScriptInterpreter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Runs a script through an interpreter.
 * 
 */
public final class SoftwareRecipeStepRunScriptArgs extends io.pulumi.resources.ResourceArgs {

    public static final SoftwareRecipeStepRunScriptArgs Empty = new SoftwareRecipeStepRunScriptArgs();

    /**
     * Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
     * 
     */
    @Import(name="allowedExitCodes")
      private final @Nullable Output<List<Integer>> allowedExitCodes;

    public Output<List<Integer>> getAllowedExitCodes() {
        return this.allowedExitCodes == null ? Codegen.empty() : this.allowedExitCodes;
    }

    /**
     * The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](<https://en.wikipedia.org/wiki/Shebang_\(Unix\)>).
     * 
     */
    @Import(name="interpreter")
      private final @Nullable Output<SoftwareRecipeStepRunScriptInterpreter> interpreter;

    public Output<SoftwareRecipeStepRunScriptInterpreter> getInterpreter() {
        return this.interpreter == null ? Codegen.empty() : this.interpreter;
    }

    /**
     * The shell script to be executed.
     * 
     */
    @Import(name="script", required=true)
      private final Output<String> script;

    public Output<String> getScript() {
        return this.script;
    }

    public SoftwareRecipeStepRunScriptArgs(
        @Nullable Output<List<Integer>> allowedExitCodes,
        @Nullable Output<SoftwareRecipeStepRunScriptInterpreter> interpreter,
        Output<String> script) {
        this.allowedExitCodes = allowedExitCodes;
        this.interpreter = interpreter;
        this.script = Objects.requireNonNull(script, "expected parameter 'script' to be non-null");
    }

    private SoftwareRecipeStepRunScriptArgs() {
        this.allowedExitCodes = Codegen.empty();
        this.interpreter = Codegen.empty();
        this.script = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SoftwareRecipeStepRunScriptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Integer>> allowedExitCodes;
        private @Nullable Output<SoftwareRecipeStepRunScriptInterpreter> interpreter;
        private Output<String> script;

        public Builder() {
    	      // Empty
        }

        public Builder(SoftwareRecipeStepRunScriptArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedExitCodes = defaults.allowedExitCodes;
    	      this.interpreter = defaults.interpreter;
    	      this.script = defaults.script;
        }

        public Builder allowedExitCodes(@Nullable Output<List<Integer>> allowedExitCodes) {
            this.allowedExitCodes = allowedExitCodes;
            return this;
        }
        public Builder allowedExitCodes(@Nullable List<Integer> allowedExitCodes) {
            this.allowedExitCodes = Codegen.ofNullable(allowedExitCodes);
            return this;
        }
        public Builder allowedExitCodes(Integer... allowedExitCodes) {
            return allowedExitCodes(List.of(allowedExitCodes));
        }
        public Builder interpreter(@Nullable Output<SoftwareRecipeStepRunScriptInterpreter> interpreter) {
            this.interpreter = interpreter;
            return this;
        }
        public Builder interpreter(@Nullable SoftwareRecipeStepRunScriptInterpreter interpreter) {
            this.interpreter = Codegen.ofNullable(interpreter);
            return this;
        }
        public Builder script(Output<String> script) {
            this.script = Objects.requireNonNull(script);
            return this;
        }
        public Builder script(String script) {
            this.script = Output.of(Objects.requireNonNull(script));
            return this;
        }        public SoftwareRecipeStepRunScriptArgs build() {
            return new SoftwareRecipeStepRunScriptArgs(allowedExitCodes, interpreter, script);
        }
    }
}
