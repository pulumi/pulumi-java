// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.jobs_v4.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.jobs_v4.outputs.ApplicationInfoResponse;
import io.pulumi.googlenative.jobs_v4.outputs.CompensationInfoResponse;
import io.pulumi.googlenative.jobs_v4.outputs.JobDerivedInfoResponse;
import io.pulumi.googlenative.jobs_v4.outputs.ProcessingOptionsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetJobResult {
    /**
     * Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses "1600 Amphitheatre Parkway, Mountain View, CA, USA" and "London, UK" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
     * 
     */
    private final List<String> addresses;
    /**
     * Job application information.
     * 
     */
    private final ApplicationInfoResponse applicationInfo;
    /**
     * The resource name of the company listing the job. The format is "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}". For example, "projects/foo/tenants/bar/companies/baz".
     * 
     */
    private final String company;
    /**
     * Display name of the company listing the job.
     * 
     */
    private final String companyDisplayName;
    /**
     * Job compensation information (a.k.a. "pay rate") i.e., the compensation that will paid to the employee.
     * 
     */
    private final CompensationInfoResponse compensationInfo;
    /**
     * A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
     * 
     */
    private final Map<String,String> customAttributes;
    /**
     * The desired education degrees for the job, such as Bachelors, Masters.
     * 
     */
    private final List<String> degreeTypes;
    /**
     * The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
     * 
     */
    private final String department;
    /**
     * Derived details about the job posting.
     * 
     */
    private final JobDerivedInfoResponse derivedInfo;
    /**
     * The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
     * 
     */
    private final String description;
    /**
     * The employment type(s) of a job, for example, full time or part time.
     * 
     */
    private final List<String> employmentTypes;
    /**
     * A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
     * 
     */
    private final String incentives;
    /**
     * The benefits included with the job.
     * 
     */
    private final List<String> jobBenefits;
    /**
     * The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    private final String jobEndTime;
    /**
     * The experience level associated with the job, such as "Entry Level".
     * 
     */
    private final String jobLevel;
    /**
     * The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    private final String jobStartTime;
    /**
     * The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external" target="_blank" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.
     * 
     */
    private final String languageCode;
    /**
     * Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For example, "projects/foo/tenants/bar/jobs/baz". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
     * 
     */
    private final String name;
    /**
     * The timestamp when this job posting was created.
     * 
     */
    private final String postingCreateTime;
    /**
     * Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.
     * 
     */
    private final String postingExpireTime;
    /**
     * The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
     * 
     */
    private final String postingPublishTime;
    /**
     * The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
     * 
     */
    private final String postingRegion;
    /**
     * The timestamp when this job posting was last updated.
     * 
     */
    private final String postingUpdateTime;
    /**
     * Options for job processing.
     * 
     */
    private final ProcessingOptionsResponse processingOptions;
    /**
     * A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
     * 
     */
    private final Integer promotionValue;
    /**
     * A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    private final String qualifications;
    /**
     * The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.
     * 
     */
    private final String requisitionId;
    /**
     * A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    private final String responsibilities;
    /**
     * The title of the job, such as "Software Engineer" The maximum number of allowed characters is 500.
     * 
     */
    private final String title;

    @OutputCustomType.Constructor({"addresses","applicationInfo","company","companyDisplayName","compensationInfo","customAttributes","degreeTypes","department","derivedInfo","description","employmentTypes","incentives","jobBenefits","jobEndTime","jobLevel","jobStartTime","languageCode","name","postingCreateTime","postingExpireTime","postingPublishTime","postingRegion","postingUpdateTime","processingOptions","promotionValue","qualifications","requisitionId","responsibilities","title"})
    private GetJobResult(
        List<String> addresses,
        ApplicationInfoResponse applicationInfo,
        String company,
        String companyDisplayName,
        CompensationInfoResponse compensationInfo,
        Map<String,String> customAttributes,
        List<String> degreeTypes,
        String department,
        JobDerivedInfoResponse derivedInfo,
        String description,
        List<String> employmentTypes,
        String incentives,
        List<String> jobBenefits,
        String jobEndTime,
        String jobLevel,
        String jobStartTime,
        String languageCode,
        String name,
        String postingCreateTime,
        String postingExpireTime,
        String postingPublishTime,
        String postingRegion,
        String postingUpdateTime,
        ProcessingOptionsResponse processingOptions,
        Integer promotionValue,
        String qualifications,
        String requisitionId,
        String responsibilities,
        String title) {
        this.addresses = Objects.requireNonNull(addresses);
        this.applicationInfo = Objects.requireNonNull(applicationInfo);
        this.company = Objects.requireNonNull(company);
        this.companyDisplayName = Objects.requireNonNull(companyDisplayName);
        this.compensationInfo = Objects.requireNonNull(compensationInfo);
        this.customAttributes = Objects.requireNonNull(customAttributes);
        this.degreeTypes = Objects.requireNonNull(degreeTypes);
        this.department = Objects.requireNonNull(department);
        this.derivedInfo = Objects.requireNonNull(derivedInfo);
        this.description = Objects.requireNonNull(description);
        this.employmentTypes = Objects.requireNonNull(employmentTypes);
        this.incentives = Objects.requireNonNull(incentives);
        this.jobBenefits = Objects.requireNonNull(jobBenefits);
        this.jobEndTime = Objects.requireNonNull(jobEndTime);
        this.jobLevel = Objects.requireNonNull(jobLevel);
        this.jobStartTime = Objects.requireNonNull(jobStartTime);
        this.languageCode = Objects.requireNonNull(languageCode);
        this.name = Objects.requireNonNull(name);
        this.postingCreateTime = Objects.requireNonNull(postingCreateTime);
        this.postingExpireTime = Objects.requireNonNull(postingExpireTime);
        this.postingPublishTime = Objects.requireNonNull(postingPublishTime);
        this.postingRegion = Objects.requireNonNull(postingRegion);
        this.postingUpdateTime = Objects.requireNonNull(postingUpdateTime);
        this.processingOptions = Objects.requireNonNull(processingOptions);
        this.promotionValue = Objects.requireNonNull(promotionValue);
        this.qualifications = Objects.requireNonNull(qualifications);
        this.requisitionId = Objects.requireNonNull(requisitionId);
        this.responsibilities = Objects.requireNonNull(responsibilities);
        this.title = Objects.requireNonNull(title);
    }

    /**
     * Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses "1600 Amphitheatre Parkway, Mountain View, CA, USA" and "London, UK" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
     * 
     */
    public List<String> getAddresses() {
        return this.addresses;
    }
    /**
     * Job application information.
     * 
     */
    public ApplicationInfoResponse getApplicationInfo() {
        return this.applicationInfo;
    }
    /**
     * The resource name of the company listing the job. The format is "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}". For example, "projects/foo/tenants/bar/companies/baz".
     * 
     */
    public String getCompany() {
        return this.company;
    }
    /**
     * Display name of the company listing the job.
     * 
     */
    public String getCompanyDisplayName() {
        return this.companyDisplayName;
    }
    /**
     * Job compensation information (a.k.a. "pay rate") i.e., the compensation that will paid to the employee.
     * 
     */
    public CompensationInfoResponse getCompensationInfo() {
        return this.compensationInfo;
    }
    /**
     * A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
     * 
     */
    public Map<String,String> getCustomAttributes() {
        return this.customAttributes;
    }
    /**
     * The desired education degrees for the job, such as Bachelors, Masters.
     * 
     */
    public List<String> getDegreeTypes() {
        return this.degreeTypes;
    }
    /**
     * The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
     * 
     */
    public String getDepartment() {
        return this.department;
    }
    /**
     * Derived details about the job posting.
     * 
     */
    public JobDerivedInfoResponse getDerivedInfo() {
        return this.derivedInfo;
    }
    /**
     * The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
     * 
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * The employment type(s) of a job, for example, full time or part time.
     * 
     */
    public List<String> getEmploymentTypes() {
        return this.employmentTypes;
    }
    /**
     * A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
     * 
     */
    public String getIncentives() {
        return this.incentives;
    }
    /**
     * The benefits included with the job.
     * 
     */
    public List<String> getJobBenefits() {
        return this.jobBenefits;
    }
    /**
     * The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    public String getJobEndTime() {
        return this.jobEndTime;
    }
    /**
     * The experience level associated with the job, such as "Entry Level".
     * 
     */
    public String getJobLevel() {
        return this.jobLevel;
    }
    /**
     * The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
     * 
     */
    public String getJobStartTime() {
        return this.jobStartTime;
    }
    /**
     * The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external" target="_blank" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.
     * 
     */
    public String getLanguageCode() {
        return this.languageCode;
    }
    /**
     * Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For example, "projects/foo/tenants/bar/jobs/baz". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The timestamp when this job posting was created.
     * 
     */
    public String getPostingCreateTime() {
        return this.postingCreateTime;
    }
    /**
     * Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.
     * 
     */
    public String getPostingExpireTime() {
        return this.postingExpireTime;
    }
    /**
     * The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
     * 
     */
    public String getPostingPublishTime() {
        return this.postingPublishTime;
    }
    /**
     * The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
     * 
     */
    public String getPostingRegion() {
        return this.postingRegion;
    }
    /**
     * The timestamp when this job posting was last updated.
     * 
     */
    public String getPostingUpdateTime() {
        return this.postingUpdateTime;
    }
    /**
     * Options for job processing.
     * 
     */
    public ProcessingOptionsResponse getProcessingOptions() {
        return this.processingOptions;
    }
    /**
     * A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
     * 
     */
    public Integer getPromotionValue() {
        return this.promotionValue;
    }
    /**
     * A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    public String getQualifications() {
        return this.qualifications;
    }
    /**
     * The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.
     * 
     */
    public String getRequisitionId() {
        return this.requisitionId;
    }
    /**
     * A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
     * 
     */
    public String getResponsibilities() {
        return this.responsibilities;
    }
    /**
     * The title of the job, such as "Software Engineer" The maximum number of allowed characters is 500.
     * 
     */
    public String getTitle() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> addresses;
        private ApplicationInfoResponse applicationInfo;
        private String company;
        private String companyDisplayName;
        private CompensationInfoResponse compensationInfo;
        private Map<String,String> customAttributes;
        private List<String> degreeTypes;
        private String department;
        private JobDerivedInfoResponse derivedInfo;
        private String description;
        private List<String> employmentTypes;
        private String incentives;
        private List<String> jobBenefits;
        private String jobEndTime;
        private String jobLevel;
        private String jobStartTime;
        private String languageCode;
        private String name;
        private String postingCreateTime;
        private String postingExpireTime;
        private String postingPublishTime;
        private String postingRegion;
        private String postingUpdateTime;
        private ProcessingOptionsResponse processingOptions;
        private Integer promotionValue;
        private String qualifications;
        private String requisitionId;
        private String responsibilities;
        private String title;

        public Builder() {
    	      // Empty
        }

        public Builder(GetJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addresses = defaults.addresses;
    	      this.applicationInfo = defaults.applicationInfo;
    	      this.company = defaults.company;
    	      this.companyDisplayName = defaults.companyDisplayName;
    	      this.compensationInfo = defaults.compensationInfo;
    	      this.customAttributes = defaults.customAttributes;
    	      this.degreeTypes = defaults.degreeTypes;
    	      this.department = defaults.department;
    	      this.derivedInfo = defaults.derivedInfo;
    	      this.description = defaults.description;
    	      this.employmentTypes = defaults.employmentTypes;
    	      this.incentives = defaults.incentives;
    	      this.jobBenefits = defaults.jobBenefits;
    	      this.jobEndTime = defaults.jobEndTime;
    	      this.jobLevel = defaults.jobLevel;
    	      this.jobStartTime = defaults.jobStartTime;
    	      this.languageCode = defaults.languageCode;
    	      this.name = defaults.name;
    	      this.postingCreateTime = defaults.postingCreateTime;
    	      this.postingExpireTime = defaults.postingExpireTime;
    	      this.postingPublishTime = defaults.postingPublishTime;
    	      this.postingRegion = defaults.postingRegion;
    	      this.postingUpdateTime = defaults.postingUpdateTime;
    	      this.processingOptions = defaults.processingOptions;
    	      this.promotionValue = defaults.promotionValue;
    	      this.qualifications = defaults.qualifications;
    	      this.requisitionId = defaults.requisitionId;
    	      this.responsibilities = defaults.responsibilities;
    	      this.title = defaults.title;
        }

        public Builder setAddresses(List<String> addresses) {
            this.addresses = Objects.requireNonNull(addresses);
            return this;
        }

        public Builder setApplicationInfo(ApplicationInfoResponse applicationInfo) {
            this.applicationInfo = Objects.requireNonNull(applicationInfo);
            return this;
        }

        public Builder setCompany(String company) {
            this.company = Objects.requireNonNull(company);
            return this;
        }

        public Builder setCompanyDisplayName(String companyDisplayName) {
            this.companyDisplayName = Objects.requireNonNull(companyDisplayName);
            return this;
        }

        public Builder setCompensationInfo(CompensationInfoResponse compensationInfo) {
            this.compensationInfo = Objects.requireNonNull(compensationInfo);
            return this;
        }

        public Builder setCustomAttributes(Map<String,String> customAttributes) {
            this.customAttributes = Objects.requireNonNull(customAttributes);
            return this;
        }

        public Builder setDegreeTypes(List<String> degreeTypes) {
            this.degreeTypes = Objects.requireNonNull(degreeTypes);
            return this;
        }

        public Builder setDepartment(String department) {
            this.department = Objects.requireNonNull(department);
            return this;
        }

        public Builder setDerivedInfo(JobDerivedInfoResponse derivedInfo) {
            this.derivedInfo = Objects.requireNonNull(derivedInfo);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEmploymentTypes(List<String> employmentTypes) {
            this.employmentTypes = Objects.requireNonNull(employmentTypes);
            return this;
        }

        public Builder setIncentives(String incentives) {
            this.incentives = Objects.requireNonNull(incentives);
            return this;
        }

        public Builder setJobBenefits(List<String> jobBenefits) {
            this.jobBenefits = Objects.requireNonNull(jobBenefits);
            return this;
        }

        public Builder setJobEndTime(String jobEndTime) {
            this.jobEndTime = Objects.requireNonNull(jobEndTime);
            return this;
        }

        public Builder setJobLevel(String jobLevel) {
            this.jobLevel = Objects.requireNonNull(jobLevel);
            return this;
        }

        public Builder setJobStartTime(String jobStartTime) {
            this.jobStartTime = Objects.requireNonNull(jobStartTime);
            return this;
        }

        public Builder setLanguageCode(String languageCode) {
            this.languageCode = Objects.requireNonNull(languageCode);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPostingCreateTime(String postingCreateTime) {
            this.postingCreateTime = Objects.requireNonNull(postingCreateTime);
            return this;
        }

        public Builder setPostingExpireTime(String postingExpireTime) {
            this.postingExpireTime = Objects.requireNonNull(postingExpireTime);
            return this;
        }

        public Builder setPostingPublishTime(String postingPublishTime) {
            this.postingPublishTime = Objects.requireNonNull(postingPublishTime);
            return this;
        }

        public Builder setPostingRegion(String postingRegion) {
            this.postingRegion = Objects.requireNonNull(postingRegion);
            return this;
        }

        public Builder setPostingUpdateTime(String postingUpdateTime) {
            this.postingUpdateTime = Objects.requireNonNull(postingUpdateTime);
            return this;
        }

        public Builder setProcessingOptions(ProcessingOptionsResponse processingOptions) {
            this.processingOptions = Objects.requireNonNull(processingOptions);
            return this;
        }

        public Builder setPromotionValue(Integer promotionValue) {
            this.promotionValue = Objects.requireNonNull(promotionValue);
            return this;
        }

        public Builder setQualifications(String qualifications) {
            this.qualifications = Objects.requireNonNull(qualifications);
            return this;
        }

        public Builder setRequisitionId(String requisitionId) {
            this.requisitionId = Objects.requireNonNull(requisitionId);
            return this;
        }

        public Builder setResponsibilities(String responsibilities) {
            this.responsibilities = Objects.requireNonNull(responsibilities);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public GetJobResult build() {
            return new GetJobResult(addresses, applicationInfo, company, companyDisplayName, compensationInfo, customAttributes, degreeTypes, department, derivedInfo, description, employmentTypes, incentives, jobBenefits, jobEndTime, jobLevel, jobStartTime, languageCode, name, postingCreateTime, postingExpireTime, postingPublishTime, postingRegion, postingUpdateTime, processingOptions, promotionValue, qualifications, requisitionId, responsibilities, title);
        }
    }
}
