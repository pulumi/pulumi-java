// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class H264CodecSettingsResponse {
    private final Boolean allowOpenGop;
    private final Double aqStrength;
    private final Integer bFrameCount;
    private final Boolean bPyramid;
    private final Integer bitrateBps;
    private final Integer crfLevel;
    private final Boolean enableTwoPass;
    private final String entropyCoder;
    private final Double frameRate;
    private final String gopDuration;
    private final Integer gopFrameCount;
    private final Integer heightPixels;
    private final String pixelFormat;
    private final String preset;
    private final String profile;
    private final String rateControlMode;
    private final String tune;
    private final Integer vbvFullnessBits;
    private final Integer vbvSizeBits;
    private final Integer widthPixels;

    @OutputCustomType.Constructor({"allowOpenGop","aqStrength","bFrameCount","bPyramid","bitrateBps","crfLevel","enableTwoPass","entropyCoder","frameRate","gopDuration","gopFrameCount","heightPixels","pixelFormat","preset","profile","rateControlMode","tune","vbvFullnessBits","vbvSizeBits","widthPixels"})
    private H264CodecSettingsResponse(
        Boolean allowOpenGop,
        Double aqStrength,
        Integer bFrameCount,
        Boolean bPyramid,
        Integer bitrateBps,
        Integer crfLevel,
        Boolean enableTwoPass,
        String entropyCoder,
        Double frameRate,
        String gopDuration,
        Integer gopFrameCount,
        Integer heightPixels,
        String pixelFormat,
        String preset,
        String profile,
        String rateControlMode,
        String tune,
        Integer vbvFullnessBits,
        Integer vbvSizeBits,
        Integer widthPixels) {
        this.allowOpenGop = Objects.requireNonNull(allowOpenGop);
        this.aqStrength = Objects.requireNonNull(aqStrength);
        this.bFrameCount = Objects.requireNonNull(bFrameCount);
        this.bPyramid = Objects.requireNonNull(bPyramid);
        this.bitrateBps = Objects.requireNonNull(bitrateBps);
        this.crfLevel = Objects.requireNonNull(crfLevel);
        this.enableTwoPass = Objects.requireNonNull(enableTwoPass);
        this.entropyCoder = Objects.requireNonNull(entropyCoder);
        this.frameRate = Objects.requireNonNull(frameRate);
        this.gopDuration = Objects.requireNonNull(gopDuration);
        this.gopFrameCount = Objects.requireNonNull(gopFrameCount);
        this.heightPixels = Objects.requireNonNull(heightPixels);
        this.pixelFormat = Objects.requireNonNull(pixelFormat);
        this.preset = Objects.requireNonNull(preset);
        this.profile = Objects.requireNonNull(profile);
        this.rateControlMode = Objects.requireNonNull(rateControlMode);
        this.tune = Objects.requireNonNull(tune);
        this.vbvFullnessBits = Objects.requireNonNull(vbvFullnessBits);
        this.vbvSizeBits = Objects.requireNonNull(vbvSizeBits);
        this.widthPixels = Objects.requireNonNull(widthPixels);
    }

    public Boolean getAllowOpenGop() {
        return this.allowOpenGop;
    }
    public Double getAqStrength() {
        return this.aqStrength;
    }
    public Integer getBFrameCount() {
        return this.bFrameCount;
    }
    public Boolean getBPyramid() {
        return this.bPyramid;
    }
    public Integer getBitrateBps() {
        return this.bitrateBps;
    }
    public Integer getCrfLevel() {
        return this.crfLevel;
    }
    public Boolean getEnableTwoPass() {
        return this.enableTwoPass;
    }
    public String getEntropyCoder() {
        return this.entropyCoder;
    }
    public Double getFrameRate() {
        return this.frameRate;
    }
    public String getGopDuration() {
        return this.gopDuration;
    }
    public Integer getGopFrameCount() {
        return this.gopFrameCount;
    }
    public Integer getHeightPixels() {
        return this.heightPixels;
    }
    public String getPixelFormat() {
        return this.pixelFormat;
    }
    public String getPreset() {
        return this.preset;
    }
    public String getProfile() {
        return this.profile;
    }
    public String getRateControlMode() {
        return this.rateControlMode;
    }
    public String getTune() {
        return this.tune;
    }
    public Integer getVbvFullnessBits() {
        return this.vbvFullnessBits;
    }
    public Integer getVbvSizeBits() {
        return this.vbvSizeBits;
    }
    public Integer getWidthPixels() {
        return this.widthPixels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(H264CodecSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowOpenGop;
        private Double aqStrength;
        private Integer bFrameCount;
        private Boolean bPyramid;
        private Integer bitrateBps;
        private Integer crfLevel;
        private Boolean enableTwoPass;
        private String entropyCoder;
        private Double frameRate;
        private String gopDuration;
        private Integer gopFrameCount;
        private Integer heightPixels;
        private String pixelFormat;
        private String preset;
        private String profile;
        private String rateControlMode;
        private String tune;
        private Integer vbvFullnessBits;
        private Integer vbvSizeBits;
        private Integer widthPixels;

        public Builder() {
    	      // Empty
        }

        public Builder(H264CodecSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowOpenGop = defaults.allowOpenGop;
    	      this.aqStrength = defaults.aqStrength;
    	      this.bFrameCount = defaults.bFrameCount;
    	      this.bPyramid = defaults.bPyramid;
    	      this.bitrateBps = defaults.bitrateBps;
    	      this.crfLevel = defaults.crfLevel;
    	      this.enableTwoPass = defaults.enableTwoPass;
    	      this.entropyCoder = defaults.entropyCoder;
    	      this.frameRate = defaults.frameRate;
    	      this.gopDuration = defaults.gopDuration;
    	      this.gopFrameCount = defaults.gopFrameCount;
    	      this.heightPixels = defaults.heightPixels;
    	      this.pixelFormat = defaults.pixelFormat;
    	      this.preset = defaults.preset;
    	      this.profile = defaults.profile;
    	      this.rateControlMode = defaults.rateControlMode;
    	      this.tune = defaults.tune;
    	      this.vbvFullnessBits = defaults.vbvFullnessBits;
    	      this.vbvSizeBits = defaults.vbvSizeBits;
    	      this.widthPixels = defaults.widthPixels;
        }

        public Builder setAllowOpenGop(Boolean allowOpenGop) {
            this.allowOpenGop = Objects.requireNonNull(allowOpenGop);
            return this;
        }

        public Builder setAqStrength(Double aqStrength) {
            this.aqStrength = Objects.requireNonNull(aqStrength);
            return this;
        }

        public Builder setBFrameCount(Integer bFrameCount) {
            this.bFrameCount = Objects.requireNonNull(bFrameCount);
            return this;
        }

        public Builder setBPyramid(Boolean bPyramid) {
            this.bPyramid = Objects.requireNonNull(bPyramid);
            return this;
        }

        public Builder setBitrateBps(Integer bitrateBps) {
            this.bitrateBps = Objects.requireNonNull(bitrateBps);
            return this;
        }

        public Builder setCrfLevel(Integer crfLevel) {
            this.crfLevel = Objects.requireNonNull(crfLevel);
            return this;
        }

        public Builder setEnableTwoPass(Boolean enableTwoPass) {
            this.enableTwoPass = Objects.requireNonNull(enableTwoPass);
            return this;
        }

        public Builder setEntropyCoder(String entropyCoder) {
            this.entropyCoder = Objects.requireNonNull(entropyCoder);
            return this;
        }

        public Builder setFrameRate(Double frameRate) {
            this.frameRate = Objects.requireNonNull(frameRate);
            return this;
        }

        public Builder setGopDuration(String gopDuration) {
            this.gopDuration = Objects.requireNonNull(gopDuration);
            return this;
        }

        public Builder setGopFrameCount(Integer gopFrameCount) {
            this.gopFrameCount = Objects.requireNonNull(gopFrameCount);
            return this;
        }

        public Builder setHeightPixels(Integer heightPixels) {
            this.heightPixels = Objects.requireNonNull(heightPixels);
            return this;
        }

        public Builder setPixelFormat(String pixelFormat) {
            this.pixelFormat = Objects.requireNonNull(pixelFormat);
            return this;
        }

        public Builder setPreset(String preset) {
            this.preset = Objects.requireNonNull(preset);
            return this;
        }

        public Builder setProfile(String profile) {
            this.profile = Objects.requireNonNull(profile);
            return this;
        }

        public Builder setRateControlMode(String rateControlMode) {
            this.rateControlMode = Objects.requireNonNull(rateControlMode);
            return this;
        }

        public Builder setTune(String tune) {
            this.tune = Objects.requireNonNull(tune);
            return this;
        }

        public Builder setVbvFullnessBits(Integer vbvFullnessBits) {
            this.vbvFullnessBits = Objects.requireNonNull(vbvFullnessBits);
            return this;
        }

        public Builder setVbvSizeBits(Integer vbvSizeBits) {
            this.vbvSizeBits = Objects.requireNonNull(vbvSizeBits);
            return this;
        }

        public Builder setWidthPixels(Integer widthPixels) {
            this.widthPixels = Objects.requireNonNull(widthPixels);
            return this;
        }

        public H264CodecSettingsResponse build() {
            return new H264CodecSettingsResponse(allowOpenGop, aqStrength, bFrameCount, bPyramid, bitrateBps, crfLevel, enableTwoPass, entropyCoder, frameRate, gopDuration, gopFrameCount, heightPixels, pixelFormat, preset, profile, rateControlMode, tune, vbvFullnessBits, vbvSizeBits, widthPixels);
        }
    }
}
