// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.BitbucketServerRepositoryIdResponse;
import io.pulumi.googlenative.cloudbuild_v1.inputs.BitbucketServerSecretsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BitbucketServerConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final BitbucketServerConfigResponse Empty = new BitbucketServerConfigResponse();

    @InputImport(name="apiKey", required=true)
    private final String apiKey;

    public String getApiKey() {
        return this.apiKey;
    }

    @InputImport(name="connectedRepositories", required=true)
    private final List<BitbucketServerRepositoryIdResponse> connectedRepositories;

    public List<BitbucketServerRepositoryIdResponse> getConnectedRepositories() {
        return this.connectedRepositories;
    }

    @InputImport(name="createTime", required=true)
    private final String createTime;

    public String getCreateTime() {
        return this.createTime;
    }

    @InputImport(name="hostUri", required=true)
    private final String hostUri;

    public String getHostUri() {
        return this.hostUri;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="peeredNetwork", required=true)
    private final String peeredNetwork;

    public String getPeeredNetwork() {
        return this.peeredNetwork;
    }

    @InputImport(name="secrets", required=true)
    private final BitbucketServerSecretsResponse secrets;

    public BitbucketServerSecretsResponse getSecrets() {
        return this.secrets;
    }

    @InputImport(name="sslCa", required=true)
    private final String sslCa;

    public String getSslCa() {
        return this.sslCa;
    }

    @InputImport(name="username", required=true)
    private final String username;

    public String getUsername() {
        return this.username;
    }

    @InputImport(name="webhookKey", required=true)
    private final String webhookKey;

    public String getWebhookKey() {
        return this.webhookKey;
    }

    public BitbucketServerConfigResponse(
        String apiKey,
        List<BitbucketServerRepositoryIdResponse> connectedRepositories,
        String createTime,
        String hostUri,
        String name,
        String peeredNetwork,
        BitbucketServerSecretsResponse secrets,
        String sslCa,
        String username,
        String webhookKey) {
        this.apiKey = Objects.requireNonNull(apiKey, "expected parameter 'apiKey' to be non-null");
        this.connectedRepositories = Objects.requireNonNull(connectedRepositories, "expected parameter 'connectedRepositories' to be non-null");
        this.createTime = Objects.requireNonNull(createTime, "expected parameter 'createTime' to be non-null");
        this.hostUri = Objects.requireNonNull(hostUri, "expected parameter 'hostUri' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.peeredNetwork = Objects.requireNonNull(peeredNetwork, "expected parameter 'peeredNetwork' to be non-null");
        this.secrets = Objects.requireNonNull(secrets, "expected parameter 'secrets' to be non-null");
        this.sslCa = Objects.requireNonNull(sslCa, "expected parameter 'sslCa' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
        this.webhookKey = Objects.requireNonNull(webhookKey, "expected parameter 'webhookKey' to be non-null");
    }

    private BitbucketServerConfigResponse() {
        this.apiKey = null;
        this.connectedRepositories = List.of();
        this.createTime = null;
        this.hostUri = null;
        this.name = null;
        this.peeredNetwork = null;
        this.secrets = null;
        this.sslCa = null;
        this.username = null;
        this.webhookKey = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BitbucketServerConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String apiKey;
        private List<BitbucketServerRepositoryIdResponse> connectedRepositories;
        private String createTime;
        private String hostUri;
        private String name;
        private String peeredNetwork;
        private BitbucketServerSecretsResponse secrets;
        private String sslCa;
        private String username;
        private String webhookKey;

        public Builder() {
    	      // Empty
        }

        public Builder(BitbucketServerConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.connectedRepositories = defaults.connectedRepositories;
    	      this.createTime = defaults.createTime;
    	      this.hostUri = defaults.hostUri;
    	      this.name = defaults.name;
    	      this.peeredNetwork = defaults.peeredNetwork;
    	      this.secrets = defaults.secrets;
    	      this.sslCa = defaults.sslCa;
    	      this.username = defaults.username;
    	      this.webhookKey = defaults.webhookKey;
        }

        public Builder setApiKey(String apiKey) {
            this.apiKey = Objects.requireNonNull(apiKey);
            return this;
        }

        public Builder setConnectedRepositories(List<BitbucketServerRepositoryIdResponse> connectedRepositories) {
            this.connectedRepositories = Objects.requireNonNull(connectedRepositories);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setHostUri(String hostUri) {
            this.hostUri = Objects.requireNonNull(hostUri);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPeeredNetwork(String peeredNetwork) {
            this.peeredNetwork = Objects.requireNonNull(peeredNetwork);
            return this;
        }

        public Builder setSecrets(BitbucketServerSecretsResponse secrets) {
            this.secrets = Objects.requireNonNull(secrets);
            return this;
        }

        public Builder setSslCa(String sslCa) {
            this.sslCa = Objects.requireNonNull(sslCa);
            return this;
        }

        public Builder setUsername(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder setWebhookKey(String webhookKey) {
            this.webhookKey = Objects.requireNonNull(webhookKey);
            return this;
        }

        public BitbucketServerConfigResponse build() {
            return new BitbucketServerConfigResponse(apiKey, connectedRepositories, createTime, hostUri, name, peeredNetwork, secrets, sslCa, username, webhookKey);
        }
    }
}
