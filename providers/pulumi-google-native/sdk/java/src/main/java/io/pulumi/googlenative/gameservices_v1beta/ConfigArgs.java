// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.gameservices_v1beta;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.gameservices_v1beta.inputs.FleetConfigArgs;
import io.pulumi.googlenative.gameservices_v1beta.inputs.ScalingConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigArgs Empty = new ConfigArgs();

    @InputImport(name="configId", required=true)
      private final Input<String> configId;

    public Input<String> getConfigId() {
        return this.configId;
    }

    /**
     * The description of the game server config.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
     * 
     */
    @InputImport(name="fleetConfigs")
      private final @Nullable Input<List<FleetConfigArgs>> fleetConfigs;

    public Input<List<FleetConfigArgs>> getFleetConfigs() {
        return this.fleetConfigs == null ? Input.empty() : this.fleetConfigs;
    }

    @InputImport(name="gameServerDeploymentId", required=true)
      private final Input<String> gameServerDeploymentId;

    public Input<String> getGameServerDeploymentId() {
        return this.gameServerDeploymentId;
    }

    /**
     * The labels associated with this game server config. Each label is a key-value pair.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The autoscaling settings.
     * 
     */
    @InputImport(name="scalingConfigs")
      private final @Nullable Input<List<ScalingConfigArgs>> scalingConfigs;

    public Input<List<ScalingConfigArgs>> getScalingConfigs() {
        return this.scalingConfigs == null ? Input.empty() : this.scalingConfigs;
    }

    public ConfigArgs(
        Input<String> configId,
        @Nullable Input<String> description,
        @Nullable Input<List<FleetConfigArgs>> fleetConfigs,
        Input<String> gameServerDeploymentId,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<List<ScalingConfigArgs>> scalingConfigs) {
        this.configId = Objects.requireNonNull(configId, "expected parameter 'configId' to be non-null");
        this.description = description;
        this.fleetConfigs = fleetConfigs;
        this.gameServerDeploymentId = Objects.requireNonNull(gameServerDeploymentId, "expected parameter 'gameServerDeploymentId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.project = project;
        this.scalingConfigs = scalingConfigs;
    }

    private ConfigArgs() {
        this.configId = Input.empty();
        this.description = Input.empty();
        this.fleetConfigs = Input.empty();
        this.gameServerDeploymentId = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.scalingConfigs = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> configId;
        private @Nullable Input<String> description;
        private @Nullable Input<List<FleetConfigArgs>> fleetConfigs;
        private Input<String> gameServerDeploymentId;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<List<ScalingConfigArgs>> scalingConfigs;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configId = defaults.configId;
    	      this.description = defaults.description;
    	      this.fleetConfigs = defaults.fleetConfigs;
    	      this.gameServerDeploymentId = defaults.gameServerDeploymentId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.scalingConfigs = defaults.scalingConfigs;
        }

        public Builder configId(Input<String> configId) {
            this.configId = Objects.requireNonNull(configId);
            return this;
        }

        public Builder configId(String configId) {
            this.configId = Input.of(Objects.requireNonNull(configId));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder fleetConfigs(@Nullable Input<List<FleetConfigArgs>> fleetConfigs) {
            this.fleetConfigs = fleetConfigs;
            return this;
        }

        public Builder fleetConfigs(@Nullable List<FleetConfigArgs> fleetConfigs) {
            this.fleetConfigs = Input.ofNullable(fleetConfigs);
            return this;
        }

        public Builder gameServerDeploymentId(Input<String> gameServerDeploymentId) {
            this.gameServerDeploymentId = Objects.requireNonNull(gameServerDeploymentId);
            return this;
        }

        public Builder gameServerDeploymentId(String gameServerDeploymentId) {
            this.gameServerDeploymentId = Input.of(Objects.requireNonNull(gameServerDeploymentId));
            return this;
        }

        public Builder labels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder location(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder scalingConfigs(@Nullable Input<List<ScalingConfigArgs>> scalingConfigs) {
            this.scalingConfigs = scalingConfigs;
            return this;
        }

        public Builder scalingConfigs(@Nullable List<ScalingConfigArgs> scalingConfigs) {
            this.scalingConfigs = Input.ofNullable(scalingConfigs);
            return this;
        }
        public ConfigArgs build() {
            return new ConfigArgs(configId, description, fleetConfigs, gameServerDeploymentId, labels, location, name, project, scalingConfigs);
        }
    }
}
