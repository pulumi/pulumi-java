// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.clouddeploy_v1.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.clouddeploy_v1.outputs.BuildArtifactResponse;
import io.pulumi.googlenative.clouddeploy_v1.outputs.DeliveryPipelineResponse;
import io.pulumi.googlenative.clouddeploy_v1.outputs.TargetResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetReleaseResult {
    /**
     * User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
     */
    private final Map<String,String> annotations;
    /**
     * List of artifacts to pass through to Skaffold command.
     * 
     */
    private final List<BuildArtifactResponse> buildArtifacts;
    /**
     * Time at which the `Release` was created.
     * 
     */
    private final String createTime;
    /**
     * Snapshot of the parent pipeline taken at release creation time.
     * 
     */
    private final DeliveryPipelineResponse deliveryPipelineSnapshot;
    /**
     * Description of the `Release`. Max length is 255 characters.
     * 
     */
    private final String description;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    private final String etag;
    /**
     * Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     * 
     */
    private final Map<String,String> labels;
    /**
     * Optional. Name of the `Release`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/a-z{0,62}.
     * 
     */
    private final String name;
    /**
     * Time at which the render completed.
     * 
     */
    private final String renderEndTime;
    /**
     * Time at which the render began.
     * 
     */
    private final String renderStartTime;
    /**
     * Current state of the render operation.
     * 
     */
    private final String renderState;
    /**
     * Filepath of the Skaffold config inside of the config URI.
     * 
     */
    private final String skaffoldConfigPath;
    /**
     * Cloud Storage URI of tar.gz archive containing Skaffold configuration.
     * 
     */
    private final String skaffoldConfigUri;
    /**
     * The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Google Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
     * 
     */
    private final String skaffoldVersion;
    /**
     * Map from target ID to the target artifacts created during the render operation.
     * 
     */
    private final Map<String,String> targetArtifacts;
    /**
     * Map from target ID to details of the render operation for that target.
     * 
     */
    private final Map<String,String> targetRenders;
    /**
     * Snapshot of the targets taken at release creation time.
     * 
     */
    private final List<TargetResponse> targetSnapshots;
    /**
     * Unique identifier of the `Release`.
     * 
     */
    private final String uid;

    @CustomType.Constructor
    private GetReleaseResult(
        @CustomType.Parameter("annotations") Map<String,String> annotations,
        @CustomType.Parameter("buildArtifacts") List<BuildArtifactResponse> buildArtifacts,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("deliveryPipelineSnapshot") DeliveryPipelineResponse deliveryPipelineSnapshot,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("renderEndTime") String renderEndTime,
        @CustomType.Parameter("renderStartTime") String renderStartTime,
        @CustomType.Parameter("renderState") String renderState,
        @CustomType.Parameter("skaffoldConfigPath") String skaffoldConfigPath,
        @CustomType.Parameter("skaffoldConfigUri") String skaffoldConfigUri,
        @CustomType.Parameter("skaffoldVersion") String skaffoldVersion,
        @CustomType.Parameter("targetArtifacts") Map<String,String> targetArtifacts,
        @CustomType.Parameter("targetRenders") Map<String,String> targetRenders,
        @CustomType.Parameter("targetSnapshots") List<TargetResponse> targetSnapshots,
        @CustomType.Parameter("uid") String uid) {
        this.annotations = annotations;
        this.buildArtifacts = buildArtifacts;
        this.createTime = createTime;
        this.deliveryPipelineSnapshot = deliveryPipelineSnapshot;
        this.description = description;
        this.etag = etag;
        this.labels = labels;
        this.name = name;
        this.renderEndTime = renderEndTime;
        this.renderStartTime = renderStartTime;
        this.renderState = renderState;
        this.skaffoldConfigPath = skaffoldConfigPath;
        this.skaffoldConfigUri = skaffoldConfigUri;
        this.skaffoldVersion = skaffoldVersion;
        this.targetArtifacts = targetArtifacts;
        this.targetRenders = targetRenders;
        this.targetSnapshots = targetSnapshots;
        this.uid = uid;
    }

    /**
     * User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
    */
    public Map<String,String> getAnnotations() {
        return this.annotations;
    }
    /**
     * List of artifacts to pass through to Skaffold command.
     * 
    */
    public List<BuildArtifactResponse> getBuildArtifacts() {
        return this.buildArtifacts;
    }
    /**
     * Time at which the `Release` was created.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * Snapshot of the parent pipeline taken at release creation time.
     * 
    */
    public DeliveryPipelineResponse getDeliveryPipelineSnapshot() {
        return this.deliveryPipelineSnapshot;
    }
    /**
     * Description of the `Release`. Max length is 255 characters.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * Optional. Name of the `Release`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/a-z{0,62}.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Time at which the render completed.
     * 
    */
    public String getRenderEndTime() {
        return this.renderEndTime;
    }
    /**
     * Time at which the render began.
     * 
    */
    public String getRenderStartTime() {
        return this.renderStartTime;
    }
    /**
     * Current state of the render operation.
     * 
    */
    public String getRenderState() {
        return this.renderState;
    }
    /**
     * Filepath of the Skaffold config inside of the config URI.
     * 
    */
    public String getSkaffoldConfigPath() {
        return this.skaffoldConfigPath;
    }
    /**
     * Cloud Storage URI of tar.gz archive containing Skaffold configuration.
     * 
    */
    public String getSkaffoldConfigUri() {
        return this.skaffoldConfigUri;
    }
    /**
     * The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Google Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
     * 
    */
    public String getSkaffoldVersion() {
        return this.skaffoldVersion;
    }
    /**
     * Map from target ID to the target artifacts created during the render operation.
     * 
    */
    public Map<String,String> getTargetArtifacts() {
        return this.targetArtifacts;
    }
    /**
     * Map from target ID to details of the render operation for that target.
     * 
    */
    public Map<String,String> getTargetRenders() {
        return this.targetRenders;
    }
    /**
     * Snapshot of the targets taken at release creation time.
     * 
    */
    public List<TargetResponse> getTargetSnapshots() {
        return this.targetSnapshots;
    }
    /**
     * Unique identifier of the `Release`.
     * 
    */
    public String getUid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReleaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> annotations;
        private List<BuildArtifactResponse> buildArtifacts;
        private String createTime;
        private DeliveryPipelineResponse deliveryPipelineSnapshot;
        private String description;
        private String etag;
        private Map<String,String> labels;
        private String name;
        private String renderEndTime;
        private String renderStartTime;
        private String renderState;
        private String skaffoldConfigPath;
        private String skaffoldConfigUri;
        private String skaffoldVersion;
        private Map<String,String> targetArtifacts;
        private Map<String,String> targetRenders;
        private List<TargetResponse> targetSnapshots;
        private String uid;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReleaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.buildArtifacts = defaults.buildArtifacts;
    	      this.createTime = defaults.createTime;
    	      this.deliveryPipelineSnapshot = defaults.deliveryPipelineSnapshot;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.renderEndTime = defaults.renderEndTime;
    	      this.renderStartTime = defaults.renderStartTime;
    	      this.renderState = defaults.renderState;
    	      this.skaffoldConfigPath = defaults.skaffoldConfigPath;
    	      this.skaffoldConfigUri = defaults.skaffoldConfigUri;
    	      this.skaffoldVersion = defaults.skaffoldVersion;
    	      this.targetArtifacts = defaults.targetArtifacts;
    	      this.targetRenders = defaults.targetRenders;
    	      this.targetSnapshots = defaults.targetSnapshots;
    	      this.uid = defaults.uid;
        }

        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        public Builder buildArtifacts(List<BuildArtifactResponse> buildArtifacts) {
            this.buildArtifacts = Objects.requireNonNull(buildArtifacts);
            return this;
        }
        public Builder buildArtifacts(BuildArtifactResponse... buildArtifacts) {
            return buildArtifacts(List.of(buildArtifacts));
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder deliveryPipelineSnapshot(DeliveryPipelineResponse deliveryPipelineSnapshot) {
            this.deliveryPipelineSnapshot = Objects.requireNonNull(deliveryPipelineSnapshot);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder renderEndTime(String renderEndTime) {
            this.renderEndTime = Objects.requireNonNull(renderEndTime);
            return this;
        }
        public Builder renderStartTime(String renderStartTime) {
            this.renderStartTime = Objects.requireNonNull(renderStartTime);
            return this;
        }
        public Builder renderState(String renderState) {
            this.renderState = Objects.requireNonNull(renderState);
            return this;
        }
        public Builder skaffoldConfigPath(String skaffoldConfigPath) {
            this.skaffoldConfigPath = Objects.requireNonNull(skaffoldConfigPath);
            return this;
        }
        public Builder skaffoldConfigUri(String skaffoldConfigUri) {
            this.skaffoldConfigUri = Objects.requireNonNull(skaffoldConfigUri);
            return this;
        }
        public Builder skaffoldVersion(String skaffoldVersion) {
            this.skaffoldVersion = Objects.requireNonNull(skaffoldVersion);
            return this;
        }
        public Builder targetArtifacts(Map<String,String> targetArtifacts) {
            this.targetArtifacts = Objects.requireNonNull(targetArtifacts);
            return this;
        }
        public Builder targetRenders(Map<String,String> targetRenders) {
            this.targetRenders = Objects.requireNonNull(targetRenders);
            return this;
        }
        public Builder targetSnapshots(List<TargetResponse> targetSnapshots) {
            this.targetSnapshots = Objects.requireNonNull(targetSnapshots);
            return this;
        }
        public Builder targetSnapshots(TargetResponse... targetSnapshots) {
            return targetSnapshots(List.of(targetSnapshots));
        }
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }        public GetReleaseResult build() {
            return new GetReleaseResult(annotations, buildArtifacts, createTime, deliveryPipelineSnapshot, description, etag, labels, name, renderEndTime, renderStartTime, renderState, skaffoldConfigPath, skaffoldConfigUri, skaffoldVersion, targetArtifacts, targetRenders, targetSnapshots, uid);
        }
    }
}
