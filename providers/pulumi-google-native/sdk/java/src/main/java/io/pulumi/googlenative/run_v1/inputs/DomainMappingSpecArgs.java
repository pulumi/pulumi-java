// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.run_v1.enums.DomainMappingSpecCertificateMode;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The desired state of the Domain Mapping.
 * 
 */
public final class DomainMappingSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainMappingSpecArgs Empty = new DomainMappingSpecArgs();

    /**
     * The mode of the certificate.
     * 
     */
    @InputImport(name="certificateMode")
      private final @Nullable Input<DomainMappingSpecCertificateMode> certificateMode;

    public Input<DomainMappingSpecCertificateMode> getCertificateMode() {
        return this.certificateMode == null ? Input.empty() : this.certificateMode;
    }

    /**
     * If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
     * 
     */
    @InputImport(name="forceOverride")
      private final @Nullable Input<Boolean> forceOverride;

    public Input<Boolean> getForceOverride() {
        return this.forceOverride == null ? Input.empty() : this.forceOverride;
    }

    /**
     * The name of the Knative Route that this DomainMapping applies to. The route must exist.
     * 
     */
    @InputImport(name="routeName")
      private final @Nullable Input<String> routeName;

    public Input<String> getRouteName() {
        return this.routeName == null ? Input.empty() : this.routeName;
    }

    public DomainMappingSpecArgs(
        @Nullable Input<DomainMappingSpecCertificateMode> certificateMode,
        @Nullable Input<Boolean> forceOverride,
        @Nullable Input<String> routeName) {
        this.certificateMode = certificateMode;
        this.forceOverride = forceOverride;
        this.routeName = routeName;
    }

    private DomainMappingSpecArgs() {
        this.certificateMode = Input.empty();
        this.forceOverride = Input.empty();
        this.routeName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainMappingSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DomainMappingSpecCertificateMode> certificateMode;
        private @Nullable Input<Boolean> forceOverride;
        private @Nullable Input<String> routeName;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainMappingSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateMode = defaults.certificateMode;
    	      this.forceOverride = defaults.forceOverride;
    	      this.routeName = defaults.routeName;
        }

        public Builder setCertificateMode(@Nullable Input<DomainMappingSpecCertificateMode> certificateMode) {
            this.certificateMode = certificateMode;
            return this;
        }

        public Builder setCertificateMode(@Nullable DomainMappingSpecCertificateMode certificateMode) {
            this.certificateMode = Input.ofNullable(certificateMode);
            return this;
        }

        public Builder setForceOverride(@Nullable Input<Boolean> forceOverride) {
            this.forceOverride = forceOverride;
            return this;
        }

        public Builder setForceOverride(@Nullable Boolean forceOverride) {
            this.forceOverride = Input.ofNullable(forceOverride);
            return this;
        }

        public Builder setRouteName(@Nullable Input<String> routeName) {
            this.routeName = routeName;
            return this;
        }

        public Builder setRouteName(@Nullable String routeName) {
            this.routeName = Input.ofNullable(routeName);
            return this;
        }
        public DomainMappingSpecArgs build() {
            return new DomainMappingSpecArgs(certificateMode, forceOverride, routeName);
        }
    }
}
