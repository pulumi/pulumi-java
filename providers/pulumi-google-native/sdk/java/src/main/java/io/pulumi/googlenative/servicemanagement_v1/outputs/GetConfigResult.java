// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.servicemanagement_v1.outputs.ApiResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.AuthenticationResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.BackendResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.BillingResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.ContextResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.ControlResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.CustomErrorResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.DocumentationResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.EndpointResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.EnumResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.HttpResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.LogDescriptorResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.LoggingResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.MetricDescriptorResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.MonitoredResourceDescriptorResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.MonitoringResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.QuotaResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.SourceInfoResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.SystemParametersResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.TypeResponse;
import io.pulumi.googlenative.servicemanagement_v1.outputs.UsageResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetConfigResult {
    private final List<ApiResponse> apis;
    private final AuthenticationResponse authentication;
    private final BackendResponse backend;
    private final BillingResponse billing;
    private final Integer configVersion;
    private final ContextResponse context;
    private final ControlResponse control;
    private final CustomErrorResponse customError;
    private final DocumentationResponse documentation;
    private final List<EndpointResponse> endpoints;
    private final List<EnumResponse> enums;
    private final HttpResponse http;
    private final LoggingResponse logging;
    private final List<LogDescriptorResponse> logs;
    private final List<MetricDescriptorResponse> metrics;
    private final List<MonitoredResourceDescriptorResponse> monitoredResources;
    private final MonitoringResponse monitoring;
    private final String name;
    private final String producerProjectId;
    private final QuotaResponse quota;
    private final SourceInfoResponse sourceInfo;
    private final SystemParametersResponse systemParameters;
    private final List<TypeResponse> systemTypes;
    private final String title;
    private final List<TypeResponse> types;
    private final UsageResponse usage;

    @OutputCustomType.Constructor({"apis","authentication","backend","billing","configVersion","context","control","customError","documentation","endpoints","enums","http","logging","logs","metrics","monitoredResources","monitoring","name","producerProjectId","quota","sourceInfo","systemParameters","systemTypes","title","types","usage"})
    private GetConfigResult(
        List<ApiResponse> apis,
        AuthenticationResponse authentication,
        BackendResponse backend,
        BillingResponse billing,
        Integer configVersion,
        ContextResponse context,
        ControlResponse control,
        CustomErrorResponse customError,
        DocumentationResponse documentation,
        List<EndpointResponse> endpoints,
        List<EnumResponse> enums,
        HttpResponse http,
        LoggingResponse logging,
        List<LogDescriptorResponse> logs,
        List<MetricDescriptorResponse> metrics,
        List<MonitoredResourceDescriptorResponse> monitoredResources,
        MonitoringResponse monitoring,
        String name,
        String producerProjectId,
        QuotaResponse quota,
        SourceInfoResponse sourceInfo,
        SystemParametersResponse systemParameters,
        List<TypeResponse> systemTypes,
        String title,
        List<TypeResponse> types,
        UsageResponse usage) {
        this.apis = Objects.requireNonNull(apis);
        this.authentication = Objects.requireNonNull(authentication);
        this.backend = Objects.requireNonNull(backend);
        this.billing = Objects.requireNonNull(billing);
        this.configVersion = Objects.requireNonNull(configVersion);
        this.context = Objects.requireNonNull(context);
        this.control = Objects.requireNonNull(control);
        this.customError = Objects.requireNonNull(customError);
        this.documentation = Objects.requireNonNull(documentation);
        this.endpoints = Objects.requireNonNull(endpoints);
        this.enums = Objects.requireNonNull(enums);
        this.http = Objects.requireNonNull(http);
        this.logging = Objects.requireNonNull(logging);
        this.logs = Objects.requireNonNull(logs);
        this.metrics = Objects.requireNonNull(metrics);
        this.monitoredResources = Objects.requireNonNull(monitoredResources);
        this.monitoring = Objects.requireNonNull(monitoring);
        this.name = Objects.requireNonNull(name);
        this.producerProjectId = Objects.requireNonNull(producerProjectId);
        this.quota = Objects.requireNonNull(quota);
        this.sourceInfo = Objects.requireNonNull(sourceInfo);
        this.systemParameters = Objects.requireNonNull(systemParameters);
        this.systemTypes = Objects.requireNonNull(systemTypes);
        this.title = Objects.requireNonNull(title);
        this.types = Objects.requireNonNull(types);
        this.usage = Objects.requireNonNull(usage);
    }

    public List<ApiResponse> getApis() {
        return this.apis;
    }
    public AuthenticationResponse getAuthentication() {
        return this.authentication;
    }
    public BackendResponse getBackend() {
        return this.backend;
    }
    public BillingResponse getBilling() {
        return this.billing;
    }
    public Integer getConfigVersion() {
        return this.configVersion;
    }
    public ContextResponse getContext() {
        return this.context;
    }
    public ControlResponse getControl() {
        return this.control;
    }
    public CustomErrorResponse getCustomError() {
        return this.customError;
    }
    public DocumentationResponse getDocumentation() {
        return this.documentation;
    }
    public List<EndpointResponse> getEndpoints() {
        return this.endpoints;
    }
    public List<EnumResponse> getEnums() {
        return this.enums;
    }
    public HttpResponse getHttp() {
        return this.http;
    }
    public LoggingResponse getLogging() {
        return this.logging;
    }
    public List<LogDescriptorResponse> getLogs() {
        return this.logs;
    }
    public List<MetricDescriptorResponse> getMetrics() {
        return this.metrics;
    }
    public List<MonitoredResourceDescriptorResponse> getMonitoredResources() {
        return this.monitoredResources;
    }
    public MonitoringResponse getMonitoring() {
        return this.monitoring;
    }
    public String getName() {
        return this.name;
    }
    public String getProducerProjectId() {
        return this.producerProjectId;
    }
    public QuotaResponse getQuota() {
        return this.quota;
    }
    public SourceInfoResponse getSourceInfo() {
        return this.sourceInfo;
    }
    public SystemParametersResponse getSystemParameters() {
        return this.systemParameters;
    }
    public List<TypeResponse> getSystemTypes() {
        return this.systemTypes;
    }
    public String getTitle() {
        return this.title;
    }
    public List<TypeResponse> getTypes() {
        return this.types;
    }
    public UsageResponse getUsage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ApiResponse> apis;
        private AuthenticationResponse authentication;
        private BackendResponse backend;
        private BillingResponse billing;
        private Integer configVersion;
        private ContextResponse context;
        private ControlResponse control;
        private CustomErrorResponse customError;
        private DocumentationResponse documentation;
        private List<EndpointResponse> endpoints;
        private List<EnumResponse> enums;
        private HttpResponse http;
        private LoggingResponse logging;
        private List<LogDescriptorResponse> logs;
        private List<MetricDescriptorResponse> metrics;
        private List<MonitoredResourceDescriptorResponse> monitoredResources;
        private MonitoringResponse monitoring;
        private String name;
        private String producerProjectId;
        private QuotaResponse quota;
        private SourceInfoResponse sourceInfo;
        private SystemParametersResponse systemParameters;
        private List<TypeResponse> systemTypes;
        private String title;
        private List<TypeResponse> types;
        private UsageResponse usage;

        public Builder() {
    	      // Empty
        }

        public Builder(GetConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apis = defaults.apis;
    	      this.authentication = defaults.authentication;
    	      this.backend = defaults.backend;
    	      this.billing = defaults.billing;
    	      this.configVersion = defaults.configVersion;
    	      this.context = defaults.context;
    	      this.control = defaults.control;
    	      this.customError = defaults.customError;
    	      this.documentation = defaults.documentation;
    	      this.endpoints = defaults.endpoints;
    	      this.enums = defaults.enums;
    	      this.http = defaults.http;
    	      this.logging = defaults.logging;
    	      this.logs = defaults.logs;
    	      this.metrics = defaults.metrics;
    	      this.monitoredResources = defaults.monitoredResources;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.producerProjectId = defaults.producerProjectId;
    	      this.quota = defaults.quota;
    	      this.sourceInfo = defaults.sourceInfo;
    	      this.systemParameters = defaults.systemParameters;
    	      this.systemTypes = defaults.systemTypes;
    	      this.title = defaults.title;
    	      this.types = defaults.types;
    	      this.usage = defaults.usage;
        }

        public Builder setApis(List<ApiResponse> apis) {
            this.apis = Objects.requireNonNull(apis);
            return this;
        }

        public Builder setAuthentication(AuthenticationResponse authentication) {
            this.authentication = Objects.requireNonNull(authentication);
            return this;
        }

        public Builder setBackend(BackendResponse backend) {
            this.backend = Objects.requireNonNull(backend);
            return this;
        }

        public Builder setBilling(BillingResponse billing) {
            this.billing = Objects.requireNonNull(billing);
            return this;
        }

        public Builder setConfigVersion(Integer configVersion) {
            this.configVersion = Objects.requireNonNull(configVersion);
            return this;
        }

        public Builder setContext(ContextResponse context) {
            this.context = Objects.requireNonNull(context);
            return this;
        }

        public Builder setControl(ControlResponse control) {
            this.control = Objects.requireNonNull(control);
            return this;
        }

        public Builder setCustomError(CustomErrorResponse customError) {
            this.customError = Objects.requireNonNull(customError);
            return this;
        }

        public Builder setDocumentation(DocumentationResponse documentation) {
            this.documentation = Objects.requireNonNull(documentation);
            return this;
        }

        public Builder setEndpoints(List<EndpointResponse> endpoints) {
            this.endpoints = Objects.requireNonNull(endpoints);
            return this;
        }

        public Builder setEnums(List<EnumResponse> enums) {
            this.enums = Objects.requireNonNull(enums);
            return this;
        }

        public Builder setHttp(HttpResponse http) {
            this.http = Objects.requireNonNull(http);
            return this;
        }

        public Builder setLogging(LoggingResponse logging) {
            this.logging = Objects.requireNonNull(logging);
            return this;
        }

        public Builder setLogs(List<LogDescriptorResponse> logs) {
            this.logs = Objects.requireNonNull(logs);
            return this;
        }

        public Builder setMetrics(List<MetricDescriptorResponse> metrics) {
            this.metrics = Objects.requireNonNull(metrics);
            return this;
        }

        public Builder setMonitoredResources(List<MonitoredResourceDescriptorResponse> monitoredResources) {
            this.monitoredResources = Objects.requireNonNull(monitoredResources);
            return this;
        }

        public Builder setMonitoring(MonitoringResponse monitoring) {
            this.monitoring = Objects.requireNonNull(monitoring);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProducerProjectId(String producerProjectId) {
            this.producerProjectId = Objects.requireNonNull(producerProjectId);
            return this;
        }

        public Builder setQuota(QuotaResponse quota) {
            this.quota = Objects.requireNonNull(quota);
            return this;
        }

        public Builder setSourceInfo(SourceInfoResponse sourceInfo) {
            this.sourceInfo = Objects.requireNonNull(sourceInfo);
            return this;
        }

        public Builder setSystemParameters(SystemParametersResponse systemParameters) {
            this.systemParameters = Objects.requireNonNull(systemParameters);
            return this;
        }

        public Builder setSystemTypes(List<TypeResponse> systemTypes) {
            this.systemTypes = Objects.requireNonNull(systemTypes);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public Builder setTypes(List<TypeResponse> types) {
            this.types = Objects.requireNonNull(types);
            return this;
        }

        public Builder setUsage(UsageResponse usage) {
            this.usage = Objects.requireNonNull(usage);
            return this;
        }

        public GetConfigResult build() {
            return new GetConfigResult(apis, authentication, backend, billing, configVersion, context, control, customError, documentation, endpoints, enums, http, logging, logs, metrics, monitoredResources, monitoring, name, producerProjectId, quota, sourceInfo, systemParameters, systemTypes, title, types, usage);
        }
    }
}
