// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudsearch_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.cloudsearch_v1.inputs.ValueArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ValueFilterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ValueFilterArgs Empty = new ValueFilterArgs();

    /**
     * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     * 
     */
    @Import(name="operatorName")
      private final @Nullable Output<String> operatorName;

    public Output<String> getOperatorName() {
        return this.operatorName == null ? Output.empty() : this.operatorName;
    }

    /**
     * The value to be compared with.
     * 
     */
    @Import(name="value")
      private final @Nullable Output<ValueArgs> value;

    public Output<ValueArgs> getValue() {
        return this.value == null ? Output.empty() : this.value;
    }

    public ValueFilterArgs(
        @Nullable Output<String> operatorName,
        @Nullable Output<ValueArgs> value) {
        this.operatorName = operatorName;
        this.value = value;
    }

    private ValueFilterArgs() {
        this.operatorName = Output.empty();
        this.value = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ValueFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> operatorName;
        private @Nullable Output<ValueArgs> value;

        public Builder() {
    	      // Empty
        }

        public Builder(ValueFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operatorName = defaults.operatorName;
    	      this.value = defaults.value;
        }

        public Builder operatorName(@Nullable Output<String> operatorName) {
            this.operatorName = operatorName;
            return this;
        }

        public Builder operatorName(@Nullable String operatorName) {
            this.operatorName = Output.ofNullable(operatorName);
            return this;
        }

        public Builder value(@Nullable Output<ValueArgs> value) {
            this.value = value;
            return this;
        }

        public Builder value(@Nullable ValueArgs value) {
            this.value = Output.ofNullable(value);
            return this;
        }
        public ValueFilterArgs build() {
            return new ValueFilterArgs(operatorName, value);
        }
    }
}
