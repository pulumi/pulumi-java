// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1alpha1.enums.VulnerabilityDetailsEffectiveSeverity;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.PackageIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Used by Occurrence to point to where the vulnerability exists and how to fix it.
 * 
 */
public final class VulnerabilityDetailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final VulnerabilityDetailsArgs Empty = new VulnerabilityDetailsArgs();

    /**
     * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
     * 
     */
    @InputImport(name="effectiveSeverity")
    private final @Nullable Input<VulnerabilityDetailsEffectiveSeverity> effectiveSeverity;

    public Input<VulnerabilityDetailsEffectiveSeverity> getEffectiveSeverity() {
        return this.effectiveSeverity == null ? Input.empty() : this.effectiveSeverity;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @InputImport(name="packageIssue")
    private final @Nullable Input<List<PackageIssueArgs>> packageIssue;

    public Input<List<PackageIssueArgs>> getPackageIssue() {
        return this.packageIssue == null ? Input.empty() : this.packageIssue;
    }

    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
     * 
     */
    @InputImport(name="type")
    private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public VulnerabilityDetailsArgs(
        @Nullable Input<VulnerabilityDetailsEffectiveSeverity> effectiveSeverity,
        @Nullable Input<List<PackageIssueArgs>> packageIssue,
        @Nullable Input<String> type) {
        this.effectiveSeverity = effectiveSeverity;
        this.packageIssue = packageIssue;
        this.type = type;
    }

    private VulnerabilityDetailsArgs() {
        this.effectiveSeverity = Input.empty();
        this.packageIssue = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VulnerabilityDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<VulnerabilityDetailsEffectiveSeverity> effectiveSeverity;
        private @Nullable Input<List<PackageIssueArgs>> packageIssue;
        private @Nullable Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(VulnerabilityDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.effectiveSeverity = defaults.effectiveSeverity;
    	      this.packageIssue = defaults.packageIssue;
    	      this.type = defaults.type;
        }

        public Builder setEffectiveSeverity(@Nullable Input<VulnerabilityDetailsEffectiveSeverity> effectiveSeverity) {
            this.effectiveSeverity = effectiveSeverity;
            return this;
        }

        public Builder setEffectiveSeverity(@Nullable VulnerabilityDetailsEffectiveSeverity effectiveSeverity) {
            this.effectiveSeverity = Input.ofNullable(effectiveSeverity);
            return this;
        }

        public Builder setPackageIssue(@Nullable Input<List<PackageIssueArgs>> packageIssue) {
            this.packageIssue = packageIssue;
            return this;
        }

        public Builder setPackageIssue(@Nullable List<PackageIssueArgs> packageIssue) {
            this.packageIssue = Input.ofNullable(packageIssue);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public VulnerabilityDetailsArgs build() {
            return new VulnerabilityDetailsArgs(effectiveSeverity, packageIssue, type);
        }
    }
}
