// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dns_v1.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.dns_v1.outputs.PolicyAlternativeNameServerConfigResponse;
import io.pulumi.googlenative.dns_v1.outputs.PolicyNetworkResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPolicyResult {
    /**
     * Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
     * 
     */
    private final PolicyAlternativeNameServerConfigResponse alternativeNameServerConfig;
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
     * 
     */
    private final String description;
    /**
     * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
     * 
     */
    private final Boolean enableInboundForwarding;
    /**
     * Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
     * 
     */
    private final Boolean enableLogging;
    private final String kind;
    /**
     * User-assigned name for this policy.
     * 
     */
    private final String name;
    /**
     * List of network names specifying networks to which this policy is applied.
     * 
     */
    private final List<PolicyNetworkResponse> networks;

    @CustomType.Constructor
    private GetPolicyResult(
        @CustomType.Parameter("alternativeNameServerConfig") PolicyAlternativeNameServerConfigResponse alternativeNameServerConfig,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enableInboundForwarding") Boolean enableInboundForwarding,
        @CustomType.Parameter("enableLogging") Boolean enableLogging,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networks") List<PolicyNetworkResponse> networks) {
        this.alternativeNameServerConfig = alternativeNameServerConfig;
        this.description = description;
        this.enableInboundForwarding = enableInboundForwarding;
        this.enableLogging = enableLogging;
        this.kind = kind;
        this.name = name;
        this.networks = networks;
    }

    /**
     * Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
     * 
    */
    public PolicyAlternativeNameServerConfigResponse getAlternativeNameServerConfig() {
        return this.alternativeNameServerConfig;
    }
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
     * 
    */
    public Boolean getEnableInboundForwarding() {
        return this.enableInboundForwarding;
    }
    /**
     * Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
     * 
    */
    public Boolean getEnableLogging() {
        return this.enableLogging;
    }
    public String getKind() {
        return this.kind;
    }
    /**
     * User-assigned name for this policy.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * List of network names specifying networks to which this policy is applied.
     * 
    */
    public List<PolicyNetworkResponse> getNetworks() {
        return this.networks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyAlternativeNameServerConfigResponse alternativeNameServerConfig;
        private String description;
        private Boolean enableInboundForwarding;
        private Boolean enableLogging;
        private String kind;
        private String name;
        private List<PolicyNetworkResponse> networks;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeNameServerConfig = defaults.alternativeNameServerConfig;
    	      this.description = defaults.description;
    	      this.enableInboundForwarding = defaults.enableInboundForwarding;
    	      this.enableLogging = defaults.enableLogging;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
        }

        public Builder alternativeNameServerConfig(PolicyAlternativeNameServerConfigResponse alternativeNameServerConfig) {
            this.alternativeNameServerConfig = Objects.requireNonNull(alternativeNameServerConfig);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enableInboundForwarding(Boolean enableInboundForwarding) {
            this.enableInboundForwarding = Objects.requireNonNull(enableInboundForwarding);
            return this;
        }
        public Builder enableLogging(Boolean enableLogging) {
            this.enableLogging = Objects.requireNonNull(enableLogging);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networks(List<PolicyNetworkResponse> networks) {
            this.networks = Objects.requireNonNull(networks);
            return this;
        }
        public Builder networks(PolicyNetworkResponse... networks) {
            return networks(List.of(networks));
        }        public GetPolicyResult build() {
            return new GetPolicyResult(alternativeNameServerConfig, description, enableInboundForwarding, enableLogging, kind, name, networks);
        }
    }
}
