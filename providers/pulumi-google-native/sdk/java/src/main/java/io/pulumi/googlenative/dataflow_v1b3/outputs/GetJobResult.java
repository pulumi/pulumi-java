// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.EnvironmentResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.ExecutionStageStateResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.JobMetadataResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.PipelineDescriptionResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.StepResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetJobResult {
    /**
     * The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.
     * 
     */
    private final String clientRequestId;
    /**
     * The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.
     * 
     */
    private final String createTime;
    /**
     * If this is specified, the job's initial state is populated from the given snapshot.
     * 
     */
    private final String createdFromSnapshotId;
    /**
     * The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
     * 
     */
    private final String currentState;
    /**
     * The timestamp associated with the current state.
     * 
     */
    private final String currentStateTime;
    /**
     * The environment for the job.
     * 
     */
    private final EnvironmentResponse environment;
    /**
     * This field is populated by the Dataflow service to support filtering jobs by the metadata values provided here. Populated for ListJobs and all GetJob views SUMMARY and higher.
     * 
     */
    private final JobMetadataResponse jobMetadata;
    /**
     * User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp: [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.
     * 
     */
    private final String location;
    /**
     * The user-specified Cloud Dataflow job name. Only one Job with a given name may exist in a project at any given time. If a caller attempts to create a Job with the same name as an already-existing Job, the attempt returns the existing Job. The name must match the regular expression `[a-z]([-a-z0-9]{0,38}[a-z0-9])?`
     * 
     */
    private final String name;
    /**
     * Preliminary field: The format of this data may change at any time. A description of the user pipeline and stages through which it is executed. Created by Cloud Dataflow service. Only retrieved with JOB_VIEW_DESCRIPTION or JOB_VIEW_ALL.
     * 
     */
    private final PipelineDescriptionResponse pipelineDescription;
    /**
     * The ID of the Cloud Platform project that the job belongs to.
     * 
     */
    private final String project;
    /**
     * If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.
     * 
     */
    private final String replaceJobId;
    /**
     * If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.
     * 
     */
    private final String replacedByJobId;
    /**
     * The job's requested state. `UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING` states, by setting requested_state. `UpdateJob` may also be used to directly set a job's requested state to `JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the job if it has not already reached a terminal state.
     * 
     */
    private final String requestedState;
    /**
     * Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
     * 
     */
    private final Boolean satisfiesPzs;
    /**
     * This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
     * 
     */
    private final List<ExecutionStageStateResponse> stageStates;
    /**
     * The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.
     * 
     */
    private final String startTime;
    /**
     * Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.
     * 
     */
    private final List<StepResponse> steps;
    /**
     * The Cloud Storage location where the steps are stored.
     * 
     */
    private final String stepsLocation;
    /**
     * A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    private final List<String> tempFiles;
    /**
     * The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.
     * 
     */
    private final Map<String,String> transformNameMapping;
    /**
     * The type of Cloud Dataflow job.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"clientRequestId","createTime","createdFromSnapshotId","currentState","currentStateTime","environment","jobMetadata","labels","location","name","pipelineDescription","project","replaceJobId","replacedByJobId","requestedState","satisfiesPzs","stageStates","startTime","steps","stepsLocation","tempFiles","transformNameMapping","type"})
    private GetJobResult(
        String clientRequestId,
        String createTime,
        String createdFromSnapshotId,
        String currentState,
        String currentStateTime,
        EnvironmentResponse environment,
        JobMetadataResponse jobMetadata,
        Map<String,String> labels,
        String location,
        String name,
        PipelineDescriptionResponse pipelineDescription,
        String project,
        String replaceJobId,
        String replacedByJobId,
        String requestedState,
        Boolean satisfiesPzs,
        List<ExecutionStageStateResponse> stageStates,
        String startTime,
        List<StepResponse> steps,
        String stepsLocation,
        List<String> tempFiles,
        Map<String,String> transformNameMapping,
        String type) {
        this.clientRequestId = Objects.requireNonNull(clientRequestId);
        this.createTime = Objects.requireNonNull(createTime);
        this.createdFromSnapshotId = Objects.requireNonNull(createdFromSnapshotId);
        this.currentState = Objects.requireNonNull(currentState);
        this.currentStateTime = Objects.requireNonNull(currentStateTime);
        this.environment = Objects.requireNonNull(environment);
        this.jobMetadata = Objects.requireNonNull(jobMetadata);
        this.labels = Objects.requireNonNull(labels);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.pipelineDescription = Objects.requireNonNull(pipelineDescription);
        this.project = Objects.requireNonNull(project);
        this.replaceJobId = Objects.requireNonNull(replaceJobId);
        this.replacedByJobId = Objects.requireNonNull(replacedByJobId);
        this.requestedState = Objects.requireNonNull(requestedState);
        this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
        this.stageStates = Objects.requireNonNull(stageStates);
        this.startTime = Objects.requireNonNull(startTime);
        this.steps = Objects.requireNonNull(steps);
        this.stepsLocation = Objects.requireNonNull(stepsLocation);
        this.tempFiles = Objects.requireNonNull(tempFiles);
        this.transformNameMapping = Objects.requireNonNull(transformNameMapping);
        this.type = Objects.requireNonNull(type);
    }

    /**
     * The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.
     * 
     */
    public String getClientRequestId() {
        return this.clientRequestId;
    }
    /**
     * The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.
     * 
     */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * If this is specified, the job's initial state is populated from the given snapshot.
     * 
     */
    public String getCreatedFromSnapshotId() {
        return this.createdFromSnapshotId;
    }
    /**
     * The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
     * 
     */
    public String getCurrentState() {
        return this.currentState;
    }
    /**
     * The timestamp associated with the current state.
     * 
     */
    public String getCurrentStateTime() {
        return this.currentStateTime;
    }
    /**
     * The environment for the job.
     * 
     */
    public EnvironmentResponse getEnvironment() {
        return this.environment;
    }
    /**
     * This field is populated by the Dataflow service to support filtering jobs by the metadata values provided here. Populated for ListJobs and all GetJob views SUMMARY and higher.
     * 
     */
    public JobMetadataResponse getJobMetadata() {
        return this.jobMetadata;
    }
    /**
     * User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp: [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.
     * 
     */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.
     * 
     */
    public String getLocation() {
        return this.location;
    }
    /**
     * The user-specified Cloud Dataflow job name. Only one Job with a given name may exist in a project at any given time. If a caller attempts to create a Job with the same name as an already-existing Job, the attempt returns the existing Job. The name must match the regular expression `[a-z]([-a-z0-9]{0,38}[a-z0-9])?`
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * Preliminary field: The format of this data may change at any time. A description of the user pipeline and stages through which it is executed. Created by Cloud Dataflow service. Only retrieved with JOB_VIEW_DESCRIPTION or JOB_VIEW_ALL.
     * 
     */
    public PipelineDescriptionResponse getPipelineDescription() {
        return this.pipelineDescription;
    }
    /**
     * The ID of the Cloud Platform project that the job belongs to.
     * 
     */
    public String getProject() {
        return this.project;
    }
    /**
     * If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.
     * 
     */
    public String getReplaceJobId() {
        return this.replaceJobId;
    }
    /**
     * If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.
     * 
     */
    public String getReplacedByJobId() {
        return this.replacedByJobId;
    }
    /**
     * The job's requested state. `UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING` states, by setting requested_state. `UpdateJob` may also be used to directly set a job's requested state to `JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the job if it has not already reached a terminal state.
     * 
     */
    public String getRequestedState() {
        return this.requestedState;
    }
    /**
     * Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
     * 
     */
    public Boolean getSatisfiesPzs() {
        return this.satisfiesPzs;
    }
    /**
     * This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
     * 
     */
    public List<ExecutionStageStateResponse> getStageStates() {
        return this.stageStates;
    }
    /**
     * The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.
     * 
     */
    public String getStartTime() {
        return this.startTime;
    }
    /**
     * Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.
     * 
     */
    public List<StepResponse> getSteps() {
        return this.steps;
    }
    /**
     * The Cloud Storage location where the steps are stored.
     * 
     */
    public String getStepsLocation() {
        return this.stepsLocation;
    }
    /**
     * A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    public List<String> getTempFiles() {
        return this.tempFiles;
    }
    /**
     * The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.
     * 
     */
    public Map<String,String> getTransformNameMapping() {
        return this.transformNameMapping;
    }
    /**
     * The type of Cloud Dataflow job.
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clientRequestId;
        private String createTime;
        private String createdFromSnapshotId;
        private String currentState;
        private String currentStateTime;
        private EnvironmentResponse environment;
        private JobMetadataResponse jobMetadata;
        private Map<String,String> labels;
        private String location;
        private String name;
        private PipelineDescriptionResponse pipelineDescription;
        private String project;
        private String replaceJobId;
        private String replacedByJobId;
        private String requestedState;
        private Boolean satisfiesPzs;
        private List<ExecutionStageStateResponse> stageStates;
        private String startTime;
        private List<StepResponse> steps;
        private String stepsLocation;
        private List<String> tempFiles;
        private Map<String,String> transformNameMapping;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientRequestId = defaults.clientRequestId;
    	      this.createTime = defaults.createTime;
    	      this.createdFromSnapshotId = defaults.createdFromSnapshotId;
    	      this.currentState = defaults.currentState;
    	      this.currentStateTime = defaults.currentStateTime;
    	      this.environment = defaults.environment;
    	      this.jobMetadata = defaults.jobMetadata;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pipelineDescription = defaults.pipelineDescription;
    	      this.project = defaults.project;
    	      this.replaceJobId = defaults.replaceJobId;
    	      this.replacedByJobId = defaults.replacedByJobId;
    	      this.requestedState = defaults.requestedState;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.stageStates = defaults.stageStates;
    	      this.startTime = defaults.startTime;
    	      this.steps = defaults.steps;
    	      this.stepsLocation = defaults.stepsLocation;
    	      this.tempFiles = defaults.tempFiles;
    	      this.transformNameMapping = defaults.transformNameMapping;
    	      this.type = defaults.type;
        }

        public Builder setClientRequestId(String clientRequestId) {
            this.clientRequestId = Objects.requireNonNull(clientRequestId);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCreatedFromSnapshotId(String createdFromSnapshotId) {
            this.createdFromSnapshotId = Objects.requireNonNull(createdFromSnapshotId);
            return this;
        }

        public Builder setCurrentState(String currentState) {
            this.currentState = Objects.requireNonNull(currentState);
            return this;
        }

        public Builder setCurrentStateTime(String currentStateTime) {
            this.currentStateTime = Objects.requireNonNull(currentStateTime);
            return this;
        }

        public Builder setEnvironment(EnvironmentResponse environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }

        public Builder setJobMetadata(JobMetadataResponse jobMetadata) {
            this.jobMetadata = Objects.requireNonNull(jobMetadata);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPipelineDescription(PipelineDescriptionResponse pipelineDescription) {
            this.pipelineDescription = Objects.requireNonNull(pipelineDescription);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setReplaceJobId(String replaceJobId) {
            this.replaceJobId = Objects.requireNonNull(replaceJobId);
            return this;
        }

        public Builder setReplacedByJobId(String replacedByJobId) {
            this.replacedByJobId = Objects.requireNonNull(replacedByJobId);
            return this;
        }

        public Builder setRequestedState(String requestedState) {
            this.requestedState = Objects.requireNonNull(requestedState);
            return this;
        }

        public Builder setSatisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }

        public Builder setStageStates(List<ExecutionStageStateResponse> stageStates) {
            this.stageStates = Objects.requireNonNull(stageStates);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setSteps(List<StepResponse> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }

        public Builder setStepsLocation(String stepsLocation) {
            this.stepsLocation = Objects.requireNonNull(stepsLocation);
            return this;
        }

        public Builder setTempFiles(List<String> tempFiles) {
            this.tempFiles = Objects.requireNonNull(tempFiles);
            return this;
        }

        public Builder setTransformNameMapping(Map<String,String> transformNameMapping) {
            this.transformNameMapping = Objects.requireNonNull(transformNameMapping);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public GetJobResult build() {
            return new GetJobResult(clientRequestId, createTime, createdFromSnapshotId, currentState, currentStateTime, environment, jobMetadata, labels, location, name, pipelineDescription, project, replaceJobId, replacedByJobId, requestedState, satisfiesPzs, stageStates, startTime, steps, stepsLocation, tempFiles, transformNameMapping, type);
        }
    }
}
