// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networkmanagement_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.networkmanagement_v1.outputs.AbortInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.CloudSQLInstanceInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.DeliverInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.DropInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.EndpointInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.FirewallInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.ForwardInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.ForwardingRuleInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.GKEMasterInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.InstanceInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.LoadBalancerInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.NetworkInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.RouteInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.VpnGatewayInfoResponse;
import io.pulumi.googlenative.networkmanagement_v1.outputs.VpnTunnelInfoResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class StepResponse {
    private final AbortInfoResponse abort;
    private final Boolean causesDrop;
    private final CloudSQLInstanceInfoResponse cloudSqlInstance;
    private final DeliverInfoResponse deliver;
    private final String description;
    private final DropInfoResponse drop;
    private final EndpointInfoResponse endpoint;
    private final FirewallInfoResponse firewall;
    private final ForwardInfoResponse forward;
    private final ForwardingRuleInfoResponse forwardingRule;
    private final GKEMasterInfoResponse gkeMaster;
    private final InstanceInfoResponse instance;
    private final LoadBalancerInfoResponse loadBalancer;
    private final NetworkInfoResponse network;
    private final String project;
    private final RouteInfoResponse route;
    private final String state;
    private final VpnGatewayInfoResponse vpnGateway;
    private final VpnTunnelInfoResponse vpnTunnel;

    @OutputCustomType.Constructor({"abort","causesDrop","cloudSqlInstance","deliver","description","drop","endpoint","firewall","forward","forwardingRule","gkeMaster","instance","loadBalancer","network","project","route","state","vpnGateway","vpnTunnel"})
    private StepResponse(
        AbortInfoResponse abort,
        Boolean causesDrop,
        CloudSQLInstanceInfoResponse cloudSqlInstance,
        DeliverInfoResponse deliver,
        String description,
        DropInfoResponse drop,
        EndpointInfoResponse endpoint,
        FirewallInfoResponse firewall,
        ForwardInfoResponse forward,
        ForwardingRuleInfoResponse forwardingRule,
        GKEMasterInfoResponse gkeMaster,
        InstanceInfoResponse instance,
        LoadBalancerInfoResponse loadBalancer,
        NetworkInfoResponse network,
        String project,
        RouteInfoResponse route,
        String state,
        VpnGatewayInfoResponse vpnGateway,
        VpnTunnelInfoResponse vpnTunnel) {
        this.abort = Objects.requireNonNull(abort);
        this.causesDrop = Objects.requireNonNull(causesDrop);
        this.cloudSqlInstance = Objects.requireNonNull(cloudSqlInstance);
        this.deliver = Objects.requireNonNull(deliver);
        this.description = Objects.requireNonNull(description);
        this.drop = Objects.requireNonNull(drop);
        this.endpoint = Objects.requireNonNull(endpoint);
        this.firewall = Objects.requireNonNull(firewall);
        this.forward = Objects.requireNonNull(forward);
        this.forwardingRule = Objects.requireNonNull(forwardingRule);
        this.gkeMaster = Objects.requireNonNull(gkeMaster);
        this.instance = Objects.requireNonNull(instance);
        this.loadBalancer = Objects.requireNonNull(loadBalancer);
        this.network = Objects.requireNonNull(network);
        this.project = Objects.requireNonNull(project);
        this.route = Objects.requireNonNull(route);
        this.state = Objects.requireNonNull(state);
        this.vpnGateway = Objects.requireNonNull(vpnGateway);
        this.vpnTunnel = Objects.requireNonNull(vpnTunnel);
    }

    public AbortInfoResponse getAbort() {
        return this.abort;
    }
    public Boolean getCausesDrop() {
        return this.causesDrop;
    }
    public CloudSQLInstanceInfoResponse getCloudSqlInstance() {
        return this.cloudSqlInstance;
    }
    public DeliverInfoResponse getDeliver() {
        return this.deliver;
    }
    public String getDescription() {
        return this.description;
    }
    public DropInfoResponse getDrop() {
        return this.drop;
    }
    public EndpointInfoResponse getEndpoint() {
        return this.endpoint;
    }
    public FirewallInfoResponse getFirewall() {
        return this.firewall;
    }
    public ForwardInfoResponse getForward() {
        return this.forward;
    }
    public ForwardingRuleInfoResponse getForwardingRule() {
        return this.forwardingRule;
    }
    public GKEMasterInfoResponse getGkeMaster() {
        return this.gkeMaster;
    }
    public InstanceInfoResponse getInstance() {
        return this.instance;
    }
    public LoadBalancerInfoResponse getLoadBalancer() {
        return this.loadBalancer;
    }
    public NetworkInfoResponse getNetwork() {
        return this.network;
    }
    public String getProject() {
        return this.project;
    }
    public RouteInfoResponse getRoute() {
        return this.route;
    }
    public String getState() {
        return this.state;
    }
    public VpnGatewayInfoResponse getVpnGateway() {
        return this.vpnGateway;
    }
    public VpnTunnelInfoResponse getVpnTunnel() {
        return this.vpnTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AbortInfoResponse abort;
        private Boolean causesDrop;
        private CloudSQLInstanceInfoResponse cloudSqlInstance;
        private DeliverInfoResponse deliver;
        private String description;
        private DropInfoResponse drop;
        private EndpointInfoResponse endpoint;
        private FirewallInfoResponse firewall;
        private ForwardInfoResponse forward;
        private ForwardingRuleInfoResponse forwardingRule;
        private GKEMasterInfoResponse gkeMaster;
        private InstanceInfoResponse instance;
        private LoadBalancerInfoResponse loadBalancer;
        private NetworkInfoResponse network;
        private String project;
        private RouteInfoResponse route;
        private String state;
        private VpnGatewayInfoResponse vpnGateway;
        private VpnTunnelInfoResponse vpnTunnel;

        public Builder() {
    	      // Empty
        }

        public Builder(StepResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abort = defaults.abort;
    	      this.causesDrop = defaults.causesDrop;
    	      this.cloudSqlInstance = defaults.cloudSqlInstance;
    	      this.deliver = defaults.deliver;
    	      this.description = defaults.description;
    	      this.drop = defaults.drop;
    	      this.endpoint = defaults.endpoint;
    	      this.firewall = defaults.firewall;
    	      this.forward = defaults.forward;
    	      this.forwardingRule = defaults.forwardingRule;
    	      this.gkeMaster = defaults.gkeMaster;
    	      this.instance = defaults.instance;
    	      this.loadBalancer = defaults.loadBalancer;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.route = defaults.route;
    	      this.state = defaults.state;
    	      this.vpnGateway = defaults.vpnGateway;
    	      this.vpnTunnel = defaults.vpnTunnel;
        }

        public Builder setAbort(AbortInfoResponse abort) {
            this.abort = Objects.requireNonNull(abort);
            return this;
        }

        public Builder setCausesDrop(Boolean causesDrop) {
            this.causesDrop = Objects.requireNonNull(causesDrop);
            return this;
        }

        public Builder setCloudSqlInstance(CloudSQLInstanceInfoResponse cloudSqlInstance) {
            this.cloudSqlInstance = Objects.requireNonNull(cloudSqlInstance);
            return this;
        }

        public Builder setDeliver(DeliverInfoResponse deliver) {
            this.deliver = Objects.requireNonNull(deliver);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDrop(DropInfoResponse drop) {
            this.drop = Objects.requireNonNull(drop);
            return this;
        }

        public Builder setEndpoint(EndpointInfoResponse endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }

        public Builder setFirewall(FirewallInfoResponse firewall) {
            this.firewall = Objects.requireNonNull(firewall);
            return this;
        }

        public Builder setForward(ForwardInfoResponse forward) {
            this.forward = Objects.requireNonNull(forward);
            return this;
        }

        public Builder setForwardingRule(ForwardingRuleInfoResponse forwardingRule) {
            this.forwardingRule = Objects.requireNonNull(forwardingRule);
            return this;
        }

        public Builder setGkeMaster(GKEMasterInfoResponse gkeMaster) {
            this.gkeMaster = Objects.requireNonNull(gkeMaster);
            return this;
        }

        public Builder setInstance(InstanceInfoResponse instance) {
            this.instance = Objects.requireNonNull(instance);
            return this;
        }

        public Builder setLoadBalancer(LoadBalancerInfoResponse loadBalancer) {
            this.loadBalancer = Objects.requireNonNull(loadBalancer);
            return this;
        }

        public Builder setNetwork(NetworkInfoResponse network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setRoute(RouteInfoResponse route) {
            this.route = Objects.requireNonNull(route);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setVpnGateway(VpnGatewayInfoResponse vpnGateway) {
            this.vpnGateway = Objects.requireNonNull(vpnGateway);
            return this;
        }

        public Builder setVpnTunnel(VpnTunnelInfoResponse vpnTunnel) {
            this.vpnTunnel = Objects.requireNonNull(vpnTunnel);
            return this;
        }

        public StepResponse build() {
            return new StepResponse(abort, causesDrop, cloudSqlInstance, deliver, description, drop, endpoint, firewall, forward, forwardingRule, gkeMaster, instance, loadBalancer, network, project, route, state, vpnGateway, vpnTunnel);
        }
    }
}
