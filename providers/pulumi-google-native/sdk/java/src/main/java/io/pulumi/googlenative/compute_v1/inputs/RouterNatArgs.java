// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.enums.RouterNatNatIpAllocateOption;
import io.pulumi.googlenative.compute_v1.enums.RouterNatSourceSubnetworkIpRangesToNat;
import io.pulumi.googlenative.compute_v1.inputs.RouterNatLogConfigArgs;
import io.pulumi.googlenative.compute_v1.inputs.RouterNatRuleArgs;
import io.pulumi.googlenative.compute_v1.inputs.RouterNatSubnetworkToNatArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouterNatArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouterNatArgs Empty = new RouterNatArgs();

    @InputImport(name="drainNatIps")
    private final @Nullable Input<List<String>> drainNatIps;

    public Input<List<String>> getDrainNatIps() {
        return this.drainNatIps == null ? Input.empty() : this.drainNatIps;
    }

    @InputImport(name="enableDynamicPortAllocation")
    private final @Nullable Input<Boolean> enableDynamicPortAllocation;

    public Input<Boolean> getEnableDynamicPortAllocation() {
        return this.enableDynamicPortAllocation == null ? Input.empty() : this.enableDynamicPortAllocation;
    }

    @InputImport(name="enableEndpointIndependentMapping")
    private final @Nullable Input<Boolean> enableEndpointIndependentMapping;

    public Input<Boolean> getEnableEndpointIndependentMapping() {
        return this.enableEndpointIndependentMapping == null ? Input.empty() : this.enableEndpointIndependentMapping;
    }

    @InputImport(name="icmpIdleTimeoutSec")
    private final @Nullable Input<Integer> icmpIdleTimeoutSec;

    public Input<Integer> getIcmpIdleTimeoutSec() {
        return this.icmpIdleTimeoutSec == null ? Input.empty() : this.icmpIdleTimeoutSec;
    }

    @InputImport(name="logConfig")
    private final @Nullable Input<RouterNatLogConfigArgs> logConfig;

    public Input<RouterNatLogConfigArgs> getLogConfig() {
        return this.logConfig == null ? Input.empty() : this.logConfig;
    }

    @InputImport(name="maxPortsPerVm")
    private final @Nullable Input<Integer> maxPortsPerVm;

    public Input<Integer> getMaxPortsPerVm() {
        return this.maxPortsPerVm == null ? Input.empty() : this.maxPortsPerVm;
    }

    @InputImport(name="minPortsPerVm")
    private final @Nullable Input<Integer> minPortsPerVm;

    public Input<Integer> getMinPortsPerVm() {
        return this.minPortsPerVm == null ? Input.empty() : this.minPortsPerVm;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="natIpAllocateOption")
    private final @Nullable Input<RouterNatNatIpAllocateOption> natIpAllocateOption;

    public Input<RouterNatNatIpAllocateOption> getNatIpAllocateOption() {
        return this.natIpAllocateOption == null ? Input.empty() : this.natIpAllocateOption;
    }

    @InputImport(name="natIps")
    private final @Nullable Input<List<String>> natIps;

    public Input<List<String>> getNatIps() {
        return this.natIps == null ? Input.empty() : this.natIps;
    }

    @InputImport(name="rules")
    private final @Nullable Input<List<RouterNatRuleArgs>> rules;

    public Input<List<RouterNatRuleArgs>> getRules() {
        return this.rules == null ? Input.empty() : this.rules;
    }

    @InputImport(name="sourceSubnetworkIpRangesToNat")
    private final @Nullable Input<RouterNatSourceSubnetworkIpRangesToNat> sourceSubnetworkIpRangesToNat;

    public Input<RouterNatSourceSubnetworkIpRangesToNat> getSourceSubnetworkIpRangesToNat() {
        return this.sourceSubnetworkIpRangesToNat == null ? Input.empty() : this.sourceSubnetworkIpRangesToNat;
    }

    @InputImport(name="subnetworks")
    private final @Nullable Input<List<RouterNatSubnetworkToNatArgs>> subnetworks;

    public Input<List<RouterNatSubnetworkToNatArgs>> getSubnetworks() {
        return this.subnetworks == null ? Input.empty() : this.subnetworks;
    }

    @InputImport(name="tcpEstablishedIdleTimeoutSec")
    private final @Nullable Input<Integer> tcpEstablishedIdleTimeoutSec;

    public Input<Integer> getTcpEstablishedIdleTimeoutSec() {
        return this.tcpEstablishedIdleTimeoutSec == null ? Input.empty() : this.tcpEstablishedIdleTimeoutSec;
    }

    @InputImport(name="tcpTimeWaitTimeoutSec")
    private final @Nullable Input<Integer> tcpTimeWaitTimeoutSec;

    public Input<Integer> getTcpTimeWaitTimeoutSec() {
        return this.tcpTimeWaitTimeoutSec == null ? Input.empty() : this.tcpTimeWaitTimeoutSec;
    }

    @InputImport(name="tcpTransitoryIdleTimeoutSec")
    private final @Nullable Input<Integer> tcpTransitoryIdleTimeoutSec;

    public Input<Integer> getTcpTransitoryIdleTimeoutSec() {
        return this.tcpTransitoryIdleTimeoutSec == null ? Input.empty() : this.tcpTransitoryIdleTimeoutSec;
    }

    @InputImport(name="udpIdleTimeoutSec")
    private final @Nullable Input<Integer> udpIdleTimeoutSec;

    public Input<Integer> getUdpIdleTimeoutSec() {
        return this.udpIdleTimeoutSec == null ? Input.empty() : this.udpIdleTimeoutSec;
    }

    public RouterNatArgs(
        @Nullable Input<List<String>> drainNatIps,
        @Nullable Input<Boolean> enableDynamicPortAllocation,
        @Nullable Input<Boolean> enableEndpointIndependentMapping,
        @Nullable Input<Integer> icmpIdleTimeoutSec,
        @Nullable Input<RouterNatLogConfigArgs> logConfig,
        @Nullable Input<Integer> maxPortsPerVm,
        @Nullable Input<Integer> minPortsPerVm,
        @Nullable Input<String> name,
        @Nullable Input<RouterNatNatIpAllocateOption> natIpAllocateOption,
        @Nullable Input<List<String>> natIps,
        @Nullable Input<List<RouterNatRuleArgs>> rules,
        @Nullable Input<RouterNatSourceSubnetworkIpRangesToNat> sourceSubnetworkIpRangesToNat,
        @Nullable Input<List<RouterNatSubnetworkToNatArgs>> subnetworks,
        @Nullable Input<Integer> tcpEstablishedIdleTimeoutSec,
        @Nullable Input<Integer> tcpTimeWaitTimeoutSec,
        @Nullable Input<Integer> tcpTransitoryIdleTimeoutSec,
        @Nullable Input<Integer> udpIdleTimeoutSec) {
        this.drainNatIps = drainNatIps;
        this.enableDynamicPortAllocation = enableDynamicPortAllocation;
        this.enableEndpointIndependentMapping = enableEndpointIndependentMapping;
        this.icmpIdleTimeoutSec = icmpIdleTimeoutSec;
        this.logConfig = logConfig;
        this.maxPortsPerVm = maxPortsPerVm;
        this.minPortsPerVm = minPortsPerVm;
        this.name = name;
        this.natIpAllocateOption = natIpAllocateOption;
        this.natIps = natIps;
        this.rules = rules;
        this.sourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
        this.subnetworks = subnetworks;
        this.tcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
        this.tcpTimeWaitTimeoutSec = tcpTimeWaitTimeoutSec;
        this.tcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
        this.udpIdleTimeoutSec = udpIdleTimeoutSec;
    }

    private RouterNatArgs() {
        this.drainNatIps = Input.empty();
        this.enableDynamicPortAllocation = Input.empty();
        this.enableEndpointIndependentMapping = Input.empty();
        this.icmpIdleTimeoutSec = Input.empty();
        this.logConfig = Input.empty();
        this.maxPortsPerVm = Input.empty();
        this.minPortsPerVm = Input.empty();
        this.name = Input.empty();
        this.natIpAllocateOption = Input.empty();
        this.natIps = Input.empty();
        this.rules = Input.empty();
        this.sourceSubnetworkIpRangesToNat = Input.empty();
        this.subnetworks = Input.empty();
        this.tcpEstablishedIdleTimeoutSec = Input.empty();
        this.tcpTimeWaitTimeoutSec = Input.empty();
        this.tcpTransitoryIdleTimeoutSec = Input.empty();
        this.udpIdleTimeoutSec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterNatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> drainNatIps;
        private @Nullable Input<Boolean> enableDynamicPortAllocation;
        private @Nullable Input<Boolean> enableEndpointIndependentMapping;
        private @Nullable Input<Integer> icmpIdleTimeoutSec;
        private @Nullable Input<RouterNatLogConfigArgs> logConfig;
        private @Nullable Input<Integer> maxPortsPerVm;
        private @Nullable Input<Integer> minPortsPerVm;
        private @Nullable Input<String> name;
        private @Nullable Input<RouterNatNatIpAllocateOption> natIpAllocateOption;
        private @Nullable Input<List<String>> natIps;
        private @Nullable Input<List<RouterNatRuleArgs>> rules;
        private @Nullable Input<RouterNatSourceSubnetworkIpRangesToNat> sourceSubnetworkIpRangesToNat;
        private @Nullable Input<List<RouterNatSubnetworkToNatArgs>> subnetworks;
        private @Nullable Input<Integer> tcpEstablishedIdleTimeoutSec;
        private @Nullable Input<Integer> tcpTimeWaitTimeoutSec;
        private @Nullable Input<Integer> tcpTransitoryIdleTimeoutSec;
        private @Nullable Input<Integer> udpIdleTimeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterNatArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.drainNatIps = defaults.drainNatIps;
    	      this.enableDynamicPortAllocation = defaults.enableDynamicPortAllocation;
    	      this.enableEndpointIndependentMapping = defaults.enableEndpointIndependentMapping;
    	      this.icmpIdleTimeoutSec = defaults.icmpIdleTimeoutSec;
    	      this.logConfig = defaults.logConfig;
    	      this.maxPortsPerVm = defaults.maxPortsPerVm;
    	      this.minPortsPerVm = defaults.minPortsPerVm;
    	      this.name = defaults.name;
    	      this.natIpAllocateOption = defaults.natIpAllocateOption;
    	      this.natIps = defaults.natIps;
    	      this.rules = defaults.rules;
    	      this.sourceSubnetworkIpRangesToNat = defaults.sourceSubnetworkIpRangesToNat;
    	      this.subnetworks = defaults.subnetworks;
    	      this.tcpEstablishedIdleTimeoutSec = defaults.tcpEstablishedIdleTimeoutSec;
    	      this.tcpTimeWaitTimeoutSec = defaults.tcpTimeWaitTimeoutSec;
    	      this.tcpTransitoryIdleTimeoutSec = defaults.tcpTransitoryIdleTimeoutSec;
    	      this.udpIdleTimeoutSec = defaults.udpIdleTimeoutSec;
        }

        public Builder setDrainNatIps(@Nullable Input<List<String>> drainNatIps) {
            this.drainNatIps = drainNatIps;
            return this;
        }

        public Builder setDrainNatIps(@Nullable List<String> drainNatIps) {
            this.drainNatIps = Input.ofNullable(drainNatIps);
            return this;
        }

        public Builder setEnableDynamicPortAllocation(@Nullable Input<Boolean> enableDynamicPortAllocation) {
            this.enableDynamicPortAllocation = enableDynamicPortAllocation;
            return this;
        }

        public Builder setEnableDynamicPortAllocation(@Nullable Boolean enableDynamicPortAllocation) {
            this.enableDynamicPortAllocation = Input.ofNullable(enableDynamicPortAllocation);
            return this;
        }

        public Builder setEnableEndpointIndependentMapping(@Nullable Input<Boolean> enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = enableEndpointIndependentMapping;
            return this;
        }

        public Builder setEnableEndpointIndependentMapping(@Nullable Boolean enableEndpointIndependentMapping) {
            this.enableEndpointIndependentMapping = Input.ofNullable(enableEndpointIndependentMapping);
            return this;
        }

        public Builder setIcmpIdleTimeoutSec(@Nullable Input<Integer> icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = icmpIdleTimeoutSec;
            return this;
        }

        public Builder setIcmpIdleTimeoutSec(@Nullable Integer icmpIdleTimeoutSec) {
            this.icmpIdleTimeoutSec = Input.ofNullable(icmpIdleTimeoutSec);
            return this;
        }

        public Builder setLogConfig(@Nullable Input<RouterNatLogConfigArgs> logConfig) {
            this.logConfig = logConfig;
            return this;
        }

        public Builder setLogConfig(@Nullable RouterNatLogConfigArgs logConfig) {
            this.logConfig = Input.ofNullable(logConfig);
            return this;
        }

        public Builder setMaxPortsPerVm(@Nullable Input<Integer> maxPortsPerVm) {
            this.maxPortsPerVm = maxPortsPerVm;
            return this;
        }

        public Builder setMaxPortsPerVm(@Nullable Integer maxPortsPerVm) {
            this.maxPortsPerVm = Input.ofNullable(maxPortsPerVm);
            return this;
        }

        public Builder setMinPortsPerVm(@Nullable Input<Integer> minPortsPerVm) {
            this.minPortsPerVm = minPortsPerVm;
            return this;
        }

        public Builder setMinPortsPerVm(@Nullable Integer minPortsPerVm) {
            this.minPortsPerVm = Input.ofNullable(minPortsPerVm);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNatIpAllocateOption(@Nullable Input<RouterNatNatIpAllocateOption> natIpAllocateOption) {
            this.natIpAllocateOption = natIpAllocateOption;
            return this;
        }

        public Builder setNatIpAllocateOption(@Nullable RouterNatNatIpAllocateOption natIpAllocateOption) {
            this.natIpAllocateOption = Input.ofNullable(natIpAllocateOption);
            return this;
        }

        public Builder setNatIps(@Nullable Input<List<String>> natIps) {
            this.natIps = natIps;
            return this;
        }

        public Builder setNatIps(@Nullable List<String> natIps) {
            this.natIps = Input.ofNullable(natIps);
            return this;
        }

        public Builder setRules(@Nullable Input<List<RouterNatRuleArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder setRules(@Nullable List<RouterNatRuleArgs> rules) {
            this.rules = Input.ofNullable(rules);
            return this;
        }

        public Builder setSourceSubnetworkIpRangesToNat(@Nullable Input<RouterNatSourceSubnetworkIpRangesToNat> sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = sourceSubnetworkIpRangesToNat;
            return this;
        }

        public Builder setSourceSubnetworkIpRangesToNat(@Nullable RouterNatSourceSubnetworkIpRangesToNat sourceSubnetworkIpRangesToNat) {
            this.sourceSubnetworkIpRangesToNat = Input.ofNullable(sourceSubnetworkIpRangesToNat);
            return this;
        }

        public Builder setSubnetworks(@Nullable Input<List<RouterNatSubnetworkToNatArgs>> subnetworks) {
            this.subnetworks = subnetworks;
            return this;
        }

        public Builder setSubnetworks(@Nullable List<RouterNatSubnetworkToNatArgs> subnetworks) {
            this.subnetworks = Input.ofNullable(subnetworks);
            return this;
        }

        public Builder setTcpEstablishedIdleTimeoutSec(@Nullable Input<Integer> tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = tcpEstablishedIdleTimeoutSec;
            return this;
        }

        public Builder setTcpEstablishedIdleTimeoutSec(@Nullable Integer tcpEstablishedIdleTimeoutSec) {
            this.tcpEstablishedIdleTimeoutSec = Input.ofNullable(tcpEstablishedIdleTimeoutSec);
            return this;
        }

        public Builder setTcpTimeWaitTimeoutSec(@Nullable Input<Integer> tcpTimeWaitTimeoutSec) {
            this.tcpTimeWaitTimeoutSec = tcpTimeWaitTimeoutSec;
            return this;
        }

        public Builder setTcpTimeWaitTimeoutSec(@Nullable Integer tcpTimeWaitTimeoutSec) {
            this.tcpTimeWaitTimeoutSec = Input.ofNullable(tcpTimeWaitTimeoutSec);
            return this;
        }

        public Builder setTcpTransitoryIdleTimeoutSec(@Nullable Input<Integer> tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = tcpTransitoryIdleTimeoutSec;
            return this;
        }

        public Builder setTcpTransitoryIdleTimeoutSec(@Nullable Integer tcpTransitoryIdleTimeoutSec) {
            this.tcpTransitoryIdleTimeoutSec = Input.ofNullable(tcpTransitoryIdleTimeoutSec);
            return this;
        }

        public Builder setUdpIdleTimeoutSec(@Nullable Input<Integer> udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = udpIdleTimeoutSec;
            return this;
        }

        public Builder setUdpIdleTimeoutSec(@Nullable Integer udpIdleTimeoutSec) {
            this.udpIdleTimeoutSec = Input.ofNullable(udpIdleTimeoutSec);
            return this;
        }

        public RouterNatArgs build() {
            return new RouterNatArgs(drainNatIps, enableDynamicPortAllocation, enableEndpointIndependentMapping, icmpIdleTimeoutSec, logConfig, maxPortsPerVm, minPortsPerVm, name, natIpAllocateOption, natIps, rules, sourceSubnetworkIpRangesToNat, subnetworks, tcpEstablishedIdleTimeoutSec, tcpTimeWaitTimeoutSec, tcpTransitoryIdleTimeoutSec, udpIdleTimeoutSec);
        }
    }
}
