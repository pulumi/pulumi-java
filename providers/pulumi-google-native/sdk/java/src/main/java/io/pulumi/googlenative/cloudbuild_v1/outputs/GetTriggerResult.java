// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudbuild_v1.outputs.ApprovalConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.BitbucketServerTriggerConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.BuildResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitFileSourceResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitHubEventsConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitRepoSourceResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.PubsubConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.RepoSourceResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.WebhookConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetTriggerResult {
    private final ApprovalConfigResponse approvalConfig;
    private final Boolean autodetect;
    private final BitbucketServerTriggerConfigResponse bitbucketServerTriggerConfig;
    private final BuildResponse build;
    private final String createTime;
    private final String description;
    private final Boolean disabled;
    private final String eventType;
    private final String filename;
    private final String filter;
    private final GitFileSourceResponse gitFileSource;
    private final GitHubEventsConfigResponse github;
    private final List<String> ignoredFiles;
    private final List<String> includedFiles;
    private final String name;
    private final PubsubConfigResponse pubsubConfig;
    private final String resourceName;
    private final String serviceAccount;
    private final GitRepoSourceResponse sourceToBuild;
    private final Map<String,String> substitutions;
    private final List<String> tags;
    private final RepoSourceResponse triggerTemplate;
    private final WebhookConfigResponse webhookConfig;

    @OutputCustomType.Constructor({"approvalConfig","autodetect","bitbucketServerTriggerConfig","build","createTime","description","disabled","eventType","filename","filter","gitFileSource","github","ignoredFiles","includedFiles","name","pubsubConfig","resourceName","serviceAccount","sourceToBuild","substitutions","tags","triggerTemplate","webhookConfig"})
    private GetTriggerResult(
        ApprovalConfigResponse approvalConfig,
        Boolean autodetect,
        BitbucketServerTriggerConfigResponse bitbucketServerTriggerConfig,
        BuildResponse build,
        String createTime,
        String description,
        Boolean disabled,
        String eventType,
        String filename,
        String filter,
        GitFileSourceResponse gitFileSource,
        GitHubEventsConfigResponse github,
        List<String> ignoredFiles,
        List<String> includedFiles,
        String name,
        PubsubConfigResponse pubsubConfig,
        String resourceName,
        String serviceAccount,
        GitRepoSourceResponse sourceToBuild,
        Map<String,String> substitutions,
        List<String> tags,
        RepoSourceResponse triggerTemplate,
        WebhookConfigResponse webhookConfig) {
        this.approvalConfig = Objects.requireNonNull(approvalConfig);
        this.autodetect = Objects.requireNonNull(autodetect);
        this.bitbucketServerTriggerConfig = Objects.requireNonNull(bitbucketServerTriggerConfig);
        this.build = Objects.requireNonNull(build);
        this.createTime = Objects.requireNonNull(createTime);
        this.description = Objects.requireNonNull(description);
        this.disabled = Objects.requireNonNull(disabled);
        this.eventType = Objects.requireNonNull(eventType);
        this.filename = Objects.requireNonNull(filename);
        this.filter = Objects.requireNonNull(filter);
        this.gitFileSource = Objects.requireNonNull(gitFileSource);
        this.github = Objects.requireNonNull(github);
        this.ignoredFiles = Objects.requireNonNull(ignoredFiles);
        this.includedFiles = Objects.requireNonNull(includedFiles);
        this.name = Objects.requireNonNull(name);
        this.pubsubConfig = Objects.requireNonNull(pubsubConfig);
        this.resourceName = Objects.requireNonNull(resourceName);
        this.serviceAccount = Objects.requireNonNull(serviceAccount);
        this.sourceToBuild = Objects.requireNonNull(sourceToBuild);
        this.substitutions = Objects.requireNonNull(substitutions);
        this.tags = Objects.requireNonNull(tags);
        this.triggerTemplate = Objects.requireNonNull(triggerTemplate);
        this.webhookConfig = Objects.requireNonNull(webhookConfig);
    }

    public ApprovalConfigResponse getApprovalConfig() {
        return this.approvalConfig;
    }
    public Boolean getAutodetect() {
        return this.autodetect;
    }
    public BitbucketServerTriggerConfigResponse getBitbucketServerTriggerConfig() {
        return this.bitbucketServerTriggerConfig;
    }
    public BuildResponse getBuild() {
        return this.build;
    }
    public String getCreateTime() {
        return this.createTime;
    }
    public String getDescription() {
        return this.description;
    }
    public Boolean getDisabled() {
        return this.disabled;
    }
    public String getEventType() {
        return this.eventType;
    }
    public String getFilename() {
        return this.filename;
    }
    public String getFilter() {
        return this.filter;
    }
    public GitFileSourceResponse getGitFileSource() {
        return this.gitFileSource;
    }
    public GitHubEventsConfigResponse getGithub() {
        return this.github;
    }
    public List<String> getIgnoredFiles() {
        return this.ignoredFiles;
    }
    public List<String> getIncludedFiles() {
        return this.includedFiles;
    }
    public String getName() {
        return this.name;
    }
    public PubsubConfigResponse getPubsubConfig() {
        return this.pubsubConfig;
    }
    public String getPropResourceName() {
        return this.resourceName;
    }
    public String getServiceAccount() {
        return this.serviceAccount;
    }
    public GitRepoSourceResponse getSourceToBuild() {
        return this.sourceToBuild;
    }
    public Map<String,String> getSubstitutions() {
        return this.substitutions;
    }
    public List<String> getTags() {
        return this.tags;
    }
    public RepoSourceResponse getTriggerTemplate() {
        return this.triggerTemplate;
    }
    public WebhookConfigResponse getWebhookConfig() {
        return this.webhookConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApprovalConfigResponse approvalConfig;
        private Boolean autodetect;
        private BitbucketServerTriggerConfigResponse bitbucketServerTriggerConfig;
        private BuildResponse build;
        private String createTime;
        private String description;
        private Boolean disabled;
        private String eventType;
        private String filename;
        private String filter;
        private GitFileSourceResponse gitFileSource;
        private GitHubEventsConfigResponse github;
        private List<String> ignoredFiles;
        private List<String> includedFiles;
        private String name;
        private PubsubConfigResponse pubsubConfig;
        private String resourceName;
        private String serviceAccount;
        private GitRepoSourceResponse sourceToBuild;
        private Map<String,String> substitutions;
        private List<String> tags;
        private RepoSourceResponse triggerTemplate;
        private WebhookConfigResponse webhookConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTriggerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalConfig = defaults.approvalConfig;
    	      this.autodetect = defaults.autodetect;
    	      this.bitbucketServerTriggerConfig = defaults.bitbucketServerTriggerConfig;
    	      this.build = defaults.build;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.eventType = defaults.eventType;
    	      this.filename = defaults.filename;
    	      this.filter = defaults.filter;
    	      this.gitFileSource = defaults.gitFileSource;
    	      this.github = defaults.github;
    	      this.ignoredFiles = defaults.ignoredFiles;
    	      this.includedFiles = defaults.includedFiles;
    	      this.name = defaults.name;
    	      this.pubsubConfig = defaults.pubsubConfig;
    	      this.resourceName = defaults.resourceName;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.sourceToBuild = defaults.sourceToBuild;
    	      this.substitutions = defaults.substitutions;
    	      this.tags = defaults.tags;
    	      this.triggerTemplate = defaults.triggerTemplate;
    	      this.webhookConfig = defaults.webhookConfig;
        }

        public Builder setApprovalConfig(ApprovalConfigResponse approvalConfig) {
            this.approvalConfig = Objects.requireNonNull(approvalConfig);
            return this;
        }

        public Builder setAutodetect(Boolean autodetect) {
            this.autodetect = Objects.requireNonNull(autodetect);
            return this;
        }

        public Builder setBitbucketServerTriggerConfig(BitbucketServerTriggerConfigResponse bitbucketServerTriggerConfig) {
            this.bitbucketServerTriggerConfig = Objects.requireNonNull(bitbucketServerTriggerConfig);
            return this;
        }

        public Builder setBuild(BuildResponse build) {
            this.build = Objects.requireNonNull(build);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDisabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }

        public Builder setEventType(String eventType) {
            this.eventType = Objects.requireNonNull(eventType);
            return this;
        }

        public Builder setFilename(String filename) {
            this.filename = Objects.requireNonNull(filename);
            return this;
        }

        public Builder setFilter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder setGitFileSource(GitFileSourceResponse gitFileSource) {
            this.gitFileSource = Objects.requireNonNull(gitFileSource);
            return this;
        }

        public Builder setGithub(GitHubEventsConfigResponse github) {
            this.github = Objects.requireNonNull(github);
            return this;
        }

        public Builder setIgnoredFiles(List<String> ignoredFiles) {
            this.ignoredFiles = Objects.requireNonNull(ignoredFiles);
            return this;
        }

        public Builder setIncludedFiles(List<String> includedFiles) {
            this.includedFiles = Objects.requireNonNull(includedFiles);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPubsubConfig(PubsubConfigResponse pubsubConfig) {
            this.pubsubConfig = Objects.requireNonNull(pubsubConfig);
            return this;
        }

        public Builder setResourceName(String resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }

        public Builder setServiceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setSourceToBuild(GitRepoSourceResponse sourceToBuild) {
            this.sourceToBuild = Objects.requireNonNull(sourceToBuild);
            return this;
        }

        public Builder setSubstitutions(Map<String,String> substitutions) {
            this.substitutions = Objects.requireNonNull(substitutions);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setTriggerTemplate(RepoSourceResponse triggerTemplate) {
            this.triggerTemplate = Objects.requireNonNull(triggerTemplate);
            return this;
        }

        public Builder setWebhookConfig(WebhookConfigResponse webhookConfig) {
            this.webhookConfig = Objects.requireNonNull(webhookConfig);
            return this;
        }

        public GetTriggerResult build() {
            return new GetTriggerResult(approvalConfig, autodetect, bitbucketServerTriggerConfig, build, createTime, description, disabled, eventType, filename, filter, gitFileSource, github, ignoredFiles, includedFiles, name, pubsubConfig, resourceName, serviceAccount, sourceToBuild, substitutions, tags, triggerTemplate, webhookConfig);
        }
    }
}
