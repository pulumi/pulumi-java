// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.enums.SchedulingInstanceTerminationAction;
import io.pulumi.googlenative.compute_alpha.enums.SchedulingMaintenanceInterval;
import io.pulumi.googlenative.compute_alpha.enums.SchedulingOnHostMaintenance;
import io.pulumi.googlenative.compute_alpha.enums.SchedulingProvisioningModel;
import io.pulumi.googlenative.compute_alpha.inputs.DurationArgs;
import io.pulumi.googlenative.compute_alpha.inputs.SchedulingNodeAffinityArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Sets the scheduling options for an Instance. NextID: 21
 * 
 */
public final class SchedulingArgs extends io.pulumi.resources.ResourceArgs {

    public static final SchedulingArgs Empty = new SchedulingArgs();

    /**
     * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
     * 
     */
    @InputImport(name="automaticRestart")
    private final @Nullable Input<Boolean> automaticRestart;

    public Input<Boolean> getAutomaticRestart() {
        return this.automaticRestart == null ? Input.empty() : this.automaticRestart;
    }

    /**
     * Specifies the availability domain (AD), which this instance should be scheduled on. The AD belongs to the spread GroupPlacementPolicy resource policy that has been assigned to the instance. Specify a value between 1-max count of availability domains in your GroupPlacementPolicy. See go/placement-policy-extension for more details.
     * 
     */
    @InputImport(name="availabilityDomain")
    private final @Nullable Input<Integer> availabilityDomain;

    public Input<Integer> getAvailabilityDomain() {
        return this.availabilityDomain == null ? Input.empty() : this.availabilityDomain;
    }

    /**
     * Current number of vCPUs available for VM. 0 or unset means default vCPUs of the current machine type.
     * 
     */
    @InputImport(name="currentCpus")
    private final @Nullable Input<Integer> currentCpus;

    public Input<Integer> getCurrentCpus() {
        return this.currentCpus == null ? Input.empty() : this.currentCpus;
    }

    /**
     * Current amount of memory (in MB) available for VM. 0 or unset means default amount of memory of the current machine type.
     * 
     */
    @InputImport(name="currentMemoryMb")
    private final @Nullable Input<String> currentMemoryMb;

    public Input<String> getCurrentMemoryMb() {
        return this.currentMemoryMb == null ? Input.empty() : this.currentMemoryMb;
    }

    /**
     * Specify the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     * 
     */
    @InputImport(name="hostErrorTimeoutSeconds")
    private final @Nullable Input<Integer> hostErrorTimeoutSeconds;

    public Input<Integer> getHostErrorTimeoutSeconds() {
        return this.hostErrorTimeoutSeconds == null ? Input.empty() : this.hostErrorTimeoutSeconds;
    }

    /**
     * Specifies the termination action for the instance.
     * 
     */
    @InputImport(name="instanceTerminationAction")
    private final @Nullable Input<SchedulingInstanceTerminationAction> instanceTerminationAction;

    public Input<SchedulingInstanceTerminationAction> getInstanceTerminationAction() {
        return this.instanceTerminationAction == null ? Input.empty() : this.instanceTerminationAction;
    }

    /**
     * Defines whether the instance is tolerant of higher cpu latency. This can only be set during instance creation, or when the instance is not currently running. It must not be set if the preemptible option is also set.
     * 
     */
    @InputImport(name="latencyTolerant")
    private final @Nullable Input<Boolean> latencyTolerant;

    public Input<Boolean> getLatencyTolerant() {
        return this.latencyTolerant == null ? Input.empty() : this.latencyTolerant;
    }

    /**
     * An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
     * 
     */
    @InputImport(name="locationHint")
    private final @Nullable Input<String> locationHint;

    public Input<String> getLocationHint() {
        return this.locationHint == null ? Input.empty() : this.locationHint;
    }

    /**
     * Specifies the number of hours after VM instance creation where the VM won't be scheduled for maintenance.
     * 
     */
    @InputImport(name="maintenanceFreezeDurationHours")
    private final @Nullable Input<Integer> maintenanceFreezeDurationHours;

    public Input<Integer> getMaintenanceFreezeDurationHours() {
        return this.maintenanceFreezeDurationHours == null ? Input.empty() : this.maintenanceFreezeDurationHours;
    }

    /**
     * For more information about maintenance intervals, see Setting maintenance intervals.
     * 
     */
    @InputImport(name="maintenanceInterval")
    private final @Nullable Input<SchedulingMaintenanceInterval> maintenanceInterval;

    public Input<SchedulingMaintenanceInterval> getMaintenanceInterval() {
        return this.maintenanceInterval == null ? Input.empty() : this.maintenanceInterval;
    }

    /**
     * Specifies the max run duration for the given instance. If specified, the instance termination action will be performed at the end of the run duration.
     * 
     */
    @InputImport(name="maxRunDuration")
    private final @Nullable Input<DurationArgs> maxRunDuration;

    public Input<DurationArgs> getMaxRunDuration() {
        return this.maxRunDuration == null ? Input.empty() : this.maxRunDuration;
    }

    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
     * 
     */
    @InputImport(name="minNodeCpus")
    private final @Nullable Input<Integer> minNodeCpus;

    public Input<Integer> getMinNodeCpus() {
        return this.minNodeCpus == null ? Input.empty() : this.minNodeCpus;
    }

    /**
     * A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
     * 
     */
    @InputImport(name="nodeAffinities")
    private final @Nullable Input<List<SchedulingNodeAffinityArgs>> nodeAffinities;

    public Input<List<SchedulingNodeAffinityArgs>> getNodeAffinities() {
        return this.nodeAffinities == null ? Input.empty() : this.nodeAffinities;
    }

    /**
     * Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM availability policies.
     * 
     */
    @InputImport(name="onHostMaintenance")
    private final @Nullable Input<SchedulingOnHostMaintenance> onHostMaintenance;

    public Input<SchedulingOnHostMaintenance> getOnHostMaintenance() {
        return this.onHostMaintenance == null ? Input.empty() : this.onHostMaintenance;
    }

    /**
     * Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
     * 
     */
    @InputImport(name="preemptible")
    private final @Nullable Input<Boolean> preemptible;

    public Input<Boolean> getPreemptible() {
        return this.preemptible == null ? Input.empty() : this.preemptible;
    }

    /**
     * Specifies the provisioning model of the instance.
     * 
     */
    @InputImport(name="provisioningModel")
    private final @Nullable Input<SchedulingProvisioningModel> provisioningModel;

    public Input<SchedulingProvisioningModel> getProvisioningModel() {
        return this.provisioningModel == null ? Input.empty() : this.provisioningModel;
    }

    /**
     * Specifies the timestamp, when the instance will be terminated, in RFC3339 text format. If specified, the instance termination action will be performed at the termination time.
     * 
     */
    @InputImport(name="terminationTime")
    private final @Nullable Input<String> terminationTime;

    public Input<String> getTerminationTime() {
        return this.terminationTime == null ? Input.empty() : this.terminationTime;
    }

    public SchedulingArgs(
        @Nullable Input<Boolean> automaticRestart,
        @Nullable Input<Integer> availabilityDomain,
        @Nullable Input<Integer> currentCpus,
        @Nullable Input<String> currentMemoryMb,
        @Nullable Input<Integer> hostErrorTimeoutSeconds,
        @Nullable Input<SchedulingInstanceTerminationAction> instanceTerminationAction,
        @Nullable Input<Boolean> latencyTolerant,
        @Nullable Input<String> locationHint,
        @Nullable Input<Integer> maintenanceFreezeDurationHours,
        @Nullable Input<SchedulingMaintenanceInterval> maintenanceInterval,
        @Nullable Input<DurationArgs> maxRunDuration,
        @Nullable Input<Integer> minNodeCpus,
        @Nullable Input<List<SchedulingNodeAffinityArgs>> nodeAffinities,
        @Nullable Input<SchedulingOnHostMaintenance> onHostMaintenance,
        @Nullable Input<Boolean> preemptible,
        @Nullable Input<SchedulingProvisioningModel> provisioningModel,
        @Nullable Input<String> terminationTime) {
        this.automaticRestart = automaticRestart;
        this.availabilityDomain = availabilityDomain;
        this.currentCpus = currentCpus;
        this.currentMemoryMb = currentMemoryMb;
        this.hostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
        this.instanceTerminationAction = instanceTerminationAction;
        this.latencyTolerant = latencyTolerant;
        this.locationHint = locationHint;
        this.maintenanceFreezeDurationHours = maintenanceFreezeDurationHours;
        this.maintenanceInterval = maintenanceInterval;
        this.maxRunDuration = maxRunDuration;
        this.minNodeCpus = minNodeCpus;
        this.nodeAffinities = nodeAffinities;
        this.onHostMaintenance = onHostMaintenance;
        this.preemptible = preemptible;
        this.provisioningModel = provisioningModel;
        this.terminationTime = terminationTime;
    }

    private SchedulingArgs() {
        this.automaticRestart = Input.empty();
        this.availabilityDomain = Input.empty();
        this.currentCpus = Input.empty();
        this.currentMemoryMb = Input.empty();
        this.hostErrorTimeoutSeconds = Input.empty();
        this.instanceTerminationAction = Input.empty();
        this.latencyTolerant = Input.empty();
        this.locationHint = Input.empty();
        this.maintenanceFreezeDurationHours = Input.empty();
        this.maintenanceInterval = Input.empty();
        this.maxRunDuration = Input.empty();
        this.minNodeCpus = Input.empty();
        this.nodeAffinities = Input.empty();
        this.onHostMaintenance = Input.empty();
        this.preemptible = Input.empty();
        this.provisioningModel = Input.empty();
        this.terminationTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchedulingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> automaticRestart;
        private @Nullable Input<Integer> availabilityDomain;
        private @Nullable Input<Integer> currentCpus;
        private @Nullable Input<String> currentMemoryMb;
        private @Nullable Input<Integer> hostErrorTimeoutSeconds;
        private @Nullable Input<SchedulingInstanceTerminationAction> instanceTerminationAction;
        private @Nullable Input<Boolean> latencyTolerant;
        private @Nullable Input<String> locationHint;
        private @Nullable Input<Integer> maintenanceFreezeDurationHours;
        private @Nullable Input<SchedulingMaintenanceInterval> maintenanceInterval;
        private @Nullable Input<DurationArgs> maxRunDuration;
        private @Nullable Input<Integer> minNodeCpus;
        private @Nullable Input<List<SchedulingNodeAffinityArgs>> nodeAffinities;
        private @Nullable Input<SchedulingOnHostMaintenance> onHostMaintenance;
        private @Nullable Input<Boolean> preemptible;
        private @Nullable Input<SchedulingProvisioningModel> provisioningModel;
        private @Nullable Input<String> terminationTime;

        public Builder() {
    	      // Empty
        }

        public Builder(SchedulingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticRestart = defaults.automaticRestart;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.currentCpus = defaults.currentCpus;
    	      this.currentMemoryMb = defaults.currentMemoryMb;
    	      this.hostErrorTimeoutSeconds = defaults.hostErrorTimeoutSeconds;
    	      this.instanceTerminationAction = defaults.instanceTerminationAction;
    	      this.latencyTolerant = defaults.latencyTolerant;
    	      this.locationHint = defaults.locationHint;
    	      this.maintenanceFreezeDurationHours = defaults.maintenanceFreezeDurationHours;
    	      this.maintenanceInterval = defaults.maintenanceInterval;
    	      this.maxRunDuration = defaults.maxRunDuration;
    	      this.minNodeCpus = defaults.minNodeCpus;
    	      this.nodeAffinities = defaults.nodeAffinities;
    	      this.onHostMaintenance = defaults.onHostMaintenance;
    	      this.preemptible = defaults.preemptible;
    	      this.provisioningModel = defaults.provisioningModel;
    	      this.terminationTime = defaults.terminationTime;
        }

        public Builder setAutomaticRestart(@Nullable Input<Boolean> automaticRestart) {
            this.automaticRestart = automaticRestart;
            return this;
        }

        public Builder setAutomaticRestart(@Nullable Boolean automaticRestart) {
            this.automaticRestart = Input.ofNullable(automaticRestart);
            return this;
        }

        public Builder setAvailabilityDomain(@Nullable Input<Integer> availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }

        public Builder setAvailabilityDomain(@Nullable Integer availabilityDomain) {
            this.availabilityDomain = Input.ofNullable(availabilityDomain);
            return this;
        }

        public Builder setCurrentCpus(@Nullable Input<Integer> currentCpus) {
            this.currentCpus = currentCpus;
            return this;
        }

        public Builder setCurrentCpus(@Nullable Integer currentCpus) {
            this.currentCpus = Input.ofNullable(currentCpus);
            return this;
        }

        public Builder setCurrentMemoryMb(@Nullable Input<String> currentMemoryMb) {
            this.currentMemoryMb = currentMemoryMb;
            return this;
        }

        public Builder setCurrentMemoryMb(@Nullable String currentMemoryMb) {
            this.currentMemoryMb = Input.ofNullable(currentMemoryMb);
            return this;
        }

        public Builder setHostErrorTimeoutSeconds(@Nullable Input<Integer> hostErrorTimeoutSeconds) {
            this.hostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
            return this;
        }

        public Builder setHostErrorTimeoutSeconds(@Nullable Integer hostErrorTimeoutSeconds) {
            this.hostErrorTimeoutSeconds = Input.ofNullable(hostErrorTimeoutSeconds);
            return this;
        }

        public Builder setInstanceTerminationAction(@Nullable Input<SchedulingInstanceTerminationAction> instanceTerminationAction) {
            this.instanceTerminationAction = instanceTerminationAction;
            return this;
        }

        public Builder setInstanceTerminationAction(@Nullable SchedulingInstanceTerminationAction instanceTerminationAction) {
            this.instanceTerminationAction = Input.ofNullable(instanceTerminationAction);
            return this;
        }

        public Builder setLatencyTolerant(@Nullable Input<Boolean> latencyTolerant) {
            this.latencyTolerant = latencyTolerant;
            return this;
        }

        public Builder setLatencyTolerant(@Nullable Boolean latencyTolerant) {
            this.latencyTolerant = Input.ofNullable(latencyTolerant);
            return this;
        }

        public Builder setLocationHint(@Nullable Input<String> locationHint) {
            this.locationHint = locationHint;
            return this;
        }

        public Builder setLocationHint(@Nullable String locationHint) {
            this.locationHint = Input.ofNullable(locationHint);
            return this;
        }

        public Builder setMaintenanceFreezeDurationHours(@Nullable Input<Integer> maintenanceFreezeDurationHours) {
            this.maintenanceFreezeDurationHours = maintenanceFreezeDurationHours;
            return this;
        }

        public Builder setMaintenanceFreezeDurationHours(@Nullable Integer maintenanceFreezeDurationHours) {
            this.maintenanceFreezeDurationHours = Input.ofNullable(maintenanceFreezeDurationHours);
            return this;
        }

        public Builder setMaintenanceInterval(@Nullable Input<SchedulingMaintenanceInterval> maintenanceInterval) {
            this.maintenanceInterval = maintenanceInterval;
            return this;
        }

        public Builder setMaintenanceInterval(@Nullable SchedulingMaintenanceInterval maintenanceInterval) {
            this.maintenanceInterval = Input.ofNullable(maintenanceInterval);
            return this;
        }

        public Builder setMaxRunDuration(@Nullable Input<DurationArgs> maxRunDuration) {
            this.maxRunDuration = maxRunDuration;
            return this;
        }

        public Builder setMaxRunDuration(@Nullable DurationArgs maxRunDuration) {
            this.maxRunDuration = Input.ofNullable(maxRunDuration);
            return this;
        }

        public Builder setMinNodeCpus(@Nullable Input<Integer> minNodeCpus) {
            this.minNodeCpus = minNodeCpus;
            return this;
        }

        public Builder setMinNodeCpus(@Nullable Integer minNodeCpus) {
            this.minNodeCpus = Input.ofNullable(minNodeCpus);
            return this;
        }

        public Builder setNodeAffinities(@Nullable Input<List<SchedulingNodeAffinityArgs>> nodeAffinities) {
            this.nodeAffinities = nodeAffinities;
            return this;
        }

        public Builder setNodeAffinities(@Nullable List<SchedulingNodeAffinityArgs> nodeAffinities) {
            this.nodeAffinities = Input.ofNullable(nodeAffinities);
            return this;
        }

        public Builder setOnHostMaintenance(@Nullable Input<SchedulingOnHostMaintenance> onHostMaintenance) {
            this.onHostMaintenance = onHostMaintenance;
            return this;
        }

        public Builder setOnHostMaintenance(@Nullable SchedulingOnHostMaintenance onHostMaintenance) {
            this.onHostMaintenance = Input.ofNullable(onHostMaintenance);
            return this;
        }

        public Builder setPreemptible(@Nullable Input<Boolean> preemptible) {
            this.preemptible = preemptible;
            return this;
        }

        public Builder setPreemptible(@Nullable Boolean preemptible) {
            this.preemptible = Input.ofNullable(preemptible);
            return this;
        }

        public Builder setProvisioningModel(@Nullable Input<SchedulingProvisioningModel> provisioningModel) {
            this.provisioningModel = provisioningModel;
            return this;
        }

        public Builder setProvisioningModel(@Nullable SchedulingProvisioningModel provisioningModel) {
            this.provisioningModel = Input.ofNullable(provisioningModel);
            return this;
        }

        public Builder setTerminationTime(@Nullable Input<String> terminationTime) {
            this.terminationTime = terminationTime;
            return this;
        }

        public Builder setTerminationTime(@Nullable String terminationTime) {
            this.terminationTime = Input.ofNullable(terminationTime);
            return this;
        }

        public SchedulingArgs build() {
            return new SchedulingArgs(automaticRestart, availabilityDomain, currentCpus, currentMemoryMb, hostErrorTimeoutSeconds, instanceTerminationAction, latencyTolerant, locationHint, maintenanceFreezeDurationHours, maintenanceInterval, maxRunDuration, minNodeCpus, nodeAffinities, onHostMaintenance, preemptible, provisioningModel, terminationTime);
        }
    }
}
