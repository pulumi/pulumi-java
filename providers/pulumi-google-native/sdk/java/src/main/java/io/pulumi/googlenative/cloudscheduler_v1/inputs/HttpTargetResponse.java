// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudscheduler_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudscheduler_v1.inputs.OAuthTokenResponse;
import io.pulumi.googlenative.cloudscheduler_v1.inputs.OidcTokenResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class HttpTargetResponse extends io.pulumi.resources.InvokeArgs {

    public static final HttpTargetResponse Empty = new HttpTargetResponse();

    @InputImport(name="body", required=true)
    private final String body;

    public String getBody() {
        return this.body;
    }

    @InputImport(name="headers", required=true)
    private final Map<String,String> headers;

    public Map<String,String> getHeaders() {
        return this.headers;
    }

    @InputImport(name="httpMethod", required=true)
    private final String httpMethod;

    public String getHttpMethod() {
        return this.httpMethod;
    }

    @InputImport(name="oauthToken", required=true)
    private final OAuthTokenResponse oauthToken;

    public OAuthTokenResponse getOauthToken() {
        return this.oauthToken;
    }

    @InputImport(name="oidcToken", required=true)
    private final OidcTokenResponse oidcToken;

    public OidcTokenResponse getOidcToken() {
        return this.oidcToken;
    }

    @InputImport(name="uri", required=true)
    private final String uri;

    public String getUri() {
        return this.uri;
    }

    public HttpTargetResponse(
        String body,
        Map<String,String> headers,
        String httpMethod,
        OAuthTokenResponse oauthToken,
        OidcTokenResponse oidcToken,
        String uri) {
        this.body = Objects.requireNonNull(body, "expected parameter 'body' to be non-null");
        this.headers = Objects.requireNonNull(headers, "expected parameter 'headers' to be non-null");
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.oauthToken = Objects.requireNonNull(oauthToken, "expected parameter 'oauthToken' to be non-null");
        this.oidcToken = Objects.requireNonNull(oidcToken, "expected parameter 'oidcToken' to be non-null");
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
    }

    private HttpTargetResponse() {
        this.body = null;
        this.headers = Map.of();
        this.httpMethod = null;
        this.oauthToken = null;
        this.oidcToken = null;
        this.uri = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpTargetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String body;
        private Map<String,String> headers;
        private String httpMethod;
        private OAuthTokenResponse oauthToken;
        private OidcTokenResponse oidcToken;
        private String uri;

        public Builder() {
    	      // Empty
        }

        public Builder(HttpTargetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.headers = defaults.headers;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oidcToken = defaults.oidcToken;
    	      this.uri = defaults.uri;
        }

        public Builder setBody(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }

        public Builder setHeaders(Map<String,String> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }

        public Builder setHttpMethod(String httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }

        public Builder setOauthToken(OAuthTokenResponse oauthToken) {
            this.oauthToken = Objects.requireNonNull(oauthToken);
            return this;
        }

        public Builder setOidcToken(OidcTokenResponse oidcToken) {
            this.oidcToken = Objects.requireNonNull(oidcToken);
            return this;
        }

        public Builder setUri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }

        public HttpTargetResponse build() {
            return new HttpTargetResponse(body, headers, httpMethod, oauthToken, oidcToken, uri);
        }
    }
}
