// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.composer_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.composer_v1.inputs.IPAllocationPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NodeConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final NodeConfigArgs Empty = new NodeConfigArgs();

    @InputImport(name="diskSizeGb")
    private final @Nullable Input<Integer> diskSizeGb;

    public Input<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Input.empty() : this.diskSizeGb;
    }

    @InputImport(name="ipAllocationPolicy")
    private final @Nullable Input<IPAllocationPolicyArgs> ipAllocationPolicy;

    public Input<IPAllocationPolicyArgs> getIpAllocationPolicy() {
        return this.ipAllocationPolicy == null ? Input.empty() : this.ipAllocationPolicy;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="machineType")
    private final @Nullable Input<String> machineType;

    public Input<String> getMachineType() {
        return this.machineType == null ? Input.empty() : this.machineType;
    }

    @InputImport(name="network")
    private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    @InputImport(name="oauthScopes")
    private final @Nullable Input<List<String>> oauthScopes;

    public Input<List<String>> getOauthScopes() {
        return this.oauthScopes == null ? Input.empty() : this.oauthScopes;
    }

    @InputImport(name="serviceAccount")
    private final @Nullable Input<String> serviceAccount;

    public Input<String> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    @InputImport(name="subnetwork")
    private final @Nullable Input<String> subnetwork;

    public Input<String> getSubnetwork() {
        return this.subnetwork == null ? Input.empty() : this.subnetwork;
    }

    @InputImport(name="tags")
    private final @Nullable Input<List<String>> tags;

    public Input<List<String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public NodeConfigArgs(
        @Nullable Input<Integer> diskSizeGb,
        @Nullable Input<IPAllocationPolicyArgs> ipAllocationPolicy,
        @Nullable Input<String> location,
        @Nullable Input<String> machineType,
        @Nullable Input<String> network,
        @Nullable Input<List<String>> oauthScopes,
        @Nullable Input<String> serviceAccount,
        @Nullable Input<String> subnetwork,
        @Nullable Input<List<String>> tags) {
        this.diskSizeGb = diskSizeGb;
        this.ipAllocationPolicy = ipAllocationPolicy;
        this.location = location;
        this.machineType = machineType;
        this.network = network;
        this.oauthScopes = oauthScopes;
        this.serviceAccount = serviceAccount;
        this.subnetwork = subnetwork;
        this.tags = tags;
    }

    private NodeConfigArgs() {
        this.diskSizeGb = Input.empty();
        this.ipAllocationPolicy = Input.empty();
        this.location = Input.empty();
        this.machineType = Input.empty();
        this.network = Input.empty();
        this.oauthScopes = Input.empty();
        this.serviceAccount = Input.empty();
        this.subnetwork = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> diskSizeGb;
        private @Nullable Input<IPAllocationPolicyArgs> ipAllocationPolicy;
        private @Nullable Input<String> location;
        private @Nullable Input<String> machineType;
        private @Nullable Input<String> network;
        private @Nullable Input<List<String>> oauthScopes;
        private @Nullable Input<String> serviceAccount;
        private @Nullable Input<String> subnetwork;
        private @Nullable Input<List<String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.ipAllocationPolicy = defaults.ipAllocationPolicy;
    	      this.location = defaults.location;
    	      this.machineType = defaults.machineType;
    	      this.network = defaults.network;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tags = defaults.tags;
        }

        public Builder setDiskSizeGb(@Nullable Input<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder setDiskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Input.ofNullable(diskSizeGb);
            return this;
        }

        public Builder setIpAllocationPolicy(@Nullable Input<IPAllocationPolicyArgs> ipAllocationPolicy) {
            this.ipAllocationPolicy = ipAllocationPolicy;
            return this;
        }

        public Builder setIpAllocationPolicy(@Nullable IPAllocationPolicyArgs ipAllocationPolicy) {
            this.ipAllocationPolicy = Input.ofNullable(ipAllocationPolicy);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setMachineType(@Nullable Input<String> machineType) {
            this.machineType = machineType;
            return this;
        }

        public Builder setMachineType(@Nullable String machineType) {
            this.machineType = Input.ofNullable(machineType);
            return this;
        }

        public Builder setNetwork(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder setOauthScopes(@Nullable Input<List<String>> oauthScopes) {
            this.oauthScopes = oauthScopes;
            return this;
        }

        public Builder setOauthScopes(@Nullable List<String> oauthScopes) {
            this.oauthScopes = Input.ofNullable(oauthScopes);
            return this;
        }

        public Builder setServiceAccount(@Nullable Input<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder setServiceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder setSubnetwork(@Nullable Input<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder setSubnetwork(@Nullable String subnetwork) {
            this.subnetwork = Input.ofNullable(subnetwork);
            return this;
        }

        public Builder setTags(@Nullable Input<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public NodeConfigArgs build() {
            return new NodeConfigArgs(diskSizeGb, ipAllocationPolicy, location, machineType, network, oauthScopes, serviceAccount, subnetwork, tags);
        }
    }
}
