// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.osconfig_v1beta.outputs.SoftwareRecipeArtifactResponse;
import io.pulumi.googlenative.osconfig_v1beta.outputs.SoftwareRecipeStepResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class SoftwareRecipeResponse {
    /**
     * Resources available to be used in the steps in the recipe.
     * 
     */
    private final List<SoftwareRecipeArtifactResponse> artifacts;
    /**
     * Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     * 
     */
    private final String desiredState;
    /**
     * Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
     * 
     */
    private final List<SoftwareRecipeStepResponse> installSteps;
    /**
     * Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
     * 
     */
    private final String name;
    /**
     * Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
     * 
     */
    private final List<SoftwareRecipeStepResponse> updateSteps;
    /**
     * The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     * 
     */
    private final String version;

    @OutputCustomType.Constructor({"artifacts","desiredState","installSteps","name","updateSteps","version"})
    private SoftwareRecipeResponse(
        List<SoftwareRecipeArtifactResponse> artifacts,
        String desiredState,
        List<SoftwareRecipeStepResponse> installSteps,
        String name,
        List<SoftwareRecipeStepResponse> updateSteps,
        String version) {
        this.artifacts = Objects.requireNonNull(artifacts);
        this.desiredState = Objects.requireNonNull(desiredState);
        this.installSteps = Objects.requireNonNull(installSteps);
        this.name = Objects.requireNonNull(name);
        this.updateSteps = Objects.requireNonNull(updateSteps);
        this.version = Objects.requireNonNull(version);
    }

    /**
     * Resources available to be used in the steps in the recipe.
     * 
    */
    public List<SoftwareRecipeArtifactResponse> getArtifacts() {
        return this.artifacts;
    }
    /**
     * Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     * 
    */
    public String getDesiredState() {
        return this.desiredState;
    }
    /**
     * Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
     * 
    */
    public List<SoftwareRecipeStepResponse> getInstallSteps() {
        return this.installSteps;
    }
    /**
     * Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
     * 
    */
    public List<SoftwareRecipeStepResponse> getUpdateSteps() {
        return this.updateSteps;
    }
    /**
     * The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     * 
    */
    public String getVersion() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SoftwareRecipeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<SoftwareRecipeArtifactResponse> artifacts;
        private String desiredState;
        private List<SoftwareRecipeStepResponse> installSteps;
        private String name;
        private List<SoftwareRecipeStepResponse> updateSteps;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(SoftwareRecipeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.desiredState = defaults.desiredState;
    	      this.installSteps = defaults.installSteps;
    	      this.name = defaults.name;
    	      this.updateSteps = defaults.updateSteps;
    	      this.version = defaults.version;
        }

        public Builder setArtifacts(List<SoftwareRecipeArtifactResponse> artifacts) {
            this.artifacts = Objects.requireNonNull(artifacts);
            return this;
        }

        public Builder setDesiredState(String desiredState) {
            this.desiredState = Objects.requireNonNull(desiredState);
            return this;
        }

        public Builder setInstallSteps(List<SoftwareRecipeStepResponse> installSteps) {
            this.installSteps = Objects.requireNonNull(installSteps);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setUpdateSteps(List<SoftwareRecipeStepResponse> updateSteps) {
            this.updateSteps = Objects.requireNonNull(updateSteps);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public SoftwareRecipeResponse build() {
            return new SoftwareRecipeResponse(artifacts, desiredState, installSteps, name, updateSteps, version);
        }
    }
}
