// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.jobs_v4;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TenantArgs extends io.pulumi.resources.ResourceArgs {

    public static final TenantArgs Empty = new TenantArgs();

    /**
     * Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255.
     * 
     */
    @InputImport(name="externalId", required=true)
      private final Output<String> externalId;

    public Output<String> getExternalId() {
        return this.externalId;
    }

    /**
     * Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is "projects/{project_id}/tenants/{tenant_id}", for example, "projects/foo/tenants/bar".
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    public TenantArgs(
        Output<String> externalId,
        @Nullable Output<String> name,
        @Nullable Output<String> project) {
        this.externalId = Objects.requireNonNull(externalId, "expected parameter 'externalId' to be non-null");
        this.name = name;
        this.project = project;
    }

    private TenantArgs() {
        this.externalId = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TenantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> externalId;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(TenantArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalId = defaults.externalId;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
        }

        public Builder externalId(Output<String> externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = Output.of(Objects.requireNonNull(externalId));
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public TenantArgs build() {
            return new TenantArgs(externalId, name, project);
        }
    }
}
