// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.servicemanagement_v1.enums.TypeSyntax;
import io.pulumi.googlenative.servicemanagement_v1.inputs.FieldArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.OptionArgs;
import io.pulumi.googlenative.servicemanagement_v1.inputs.SourceContextArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A protocol buffer message type.
 * 
 */
public final class TypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final TypeArgs Empty = new TypeArgs();

    /**
     * The list of fields.
     * 
     */
    @Import(name="fields")
      private final @Nullable Output<List<FieldArgs>> fields;

    public Output<List<FieldArgs>> getFields() {
        return this.fields == null ? Codegen.empty() : this.fields;
    }

    /**
     * The fully qualified message name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The list of types appearing in `oneof` definitions in this type.
     * 
     */
    @Import(name="oneofs")
      private final @Nullable Output<List<String>> oneofs;

    public Output<List<String>> getOneofs() {
        return this.oneofs == null ? Codegen.empty() : this.oneofs;
    }

    /**
     * The protocol buffer options.
     * 
     */
    @Import(name="options")
      private final @Nullable Output<List<OptionArgs>> options;

    public Output<List<OptionArgs>> getOptions() {
        return this.options == null ? Codegen.empty() : this.options;
    }

    /**
     * The source context.
     * 
     */
    @Import(name="sourceContext")
      private final @Nullable Output<SourceContextArgs> sourceContext;

    public Output<SourceContextArgs> getSourceContext() {
        return this.sourceContext == null ? Codegen.empty() : this.sourceContext;
    }

    /**
     * The source syntax.
     * 
     */
    @Import(name="syntax")
      private final @Nullable Output<TypeSyntax> syntax;

    public Output<TypeSyntax> getSyntax() {
        return this.syntax == null ? Codegen.empty() : this.syntax;
    }

    public TypeArgs(
        @Nullable Output<List<FieldArgs>> fields,
        @Nullable Output<String> name,
        @Nullable Output<List<String>> oneofs,
        @Nullable Output<List<OptionArgs>> options,
        @Nullable Output<SourceContextArgs> sourceContext,
        @Nullable Output<TypeSyntax> syntax) {
        this.fields = fields;
        this.name = name;
        this.oneofs = oneofs;
        this.options = options;
        this.sourceContext = sourceContext;
        this.syntax = syntax;
    }

    private TypeArgs() {
        this.fields = Codegen.empty();
        this.name = Codegen.empty();
        this.oneofs = Codegen.empty();
        this.options = Codegen.empty();
        this.sourceContext = Codegen.empty();
        this.syntax = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<FieldArgs>> fields;
        private @Nullable Output<String> name;
        private @Nullable Output<List<String>> oneofs;
        private @Nullable Output<List<OptionArgs>> options;
        private @Nullable Output<SourceContextArgs> sourceContext;
        private @Nullable Output<TypeSyntax> syntax;

        public Builder() {
    	      // Empty
        }

        public Builder(TypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.oneofs = defaults.oneofs;
    	      this.options = defaults.options;
    	      this.sourceContext = defaults.sourceContext;
    	      this.syntax = defaults.syntax;
        }

        public Builder fields(@Nullable Output<List<FieldArgs>> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(@Nullable List<FieldArgs> fields) {
            this.fields = Codegen.ofNullable(fields);
            return this;
        }
        public Builder fields(FieldArgs... fields) {
            return fields(List.of(fields));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder oneofs(@Nullable Output<List<String>> oneofs) {
            this.oneofs = oneofs;
            return this;
        }
        public Builder oneofs(@Nullable List<String> oneofs) {
            this.oneofs = Codegen.ofNullable(oneofs);
            return this;
        }
        public Builder oneofs(String... oneofs) {
            return oneofs(List.of(oneofs));
        }
        public Builder options(@Nullable Output<List<OptionArgs>> options) {
            this.options = options;
            return this;
        }
        public Builder options(@Nullable List<OptionArgs> options) {
            this.options = Codegen.ofNullable(options);
            return this;
        }
        public Builder options(OptionArgs... options) {
            return options(List.of(options));
        }
        public Builder sourceContext(@Nullable Output<SourceContextArgs> sourceContext) {
            this.sourceContext = sourceContext;
            return this;
        }
        public Builder sourceContext(@Nullable SourceContextArgs sourceContext) {
            this.sourceContext = Codegen.ofNullable(sourceContext);
            return this;
        }
        public Builder syntax(@Nullable Output<TypeSyntax> syntax) {
            this.syntax = syntax;
            return this;
        }
        public Builder syntax(@Nullable TypeSyntax syntax) {
            this.syntax = Codegen.ofNullable(syntax);
            return this;
        }        public TypeArgs build() {
            return new TypeArgs(fields, name, oneofs, options, sourceContext, syntax);
        }
    }
}
