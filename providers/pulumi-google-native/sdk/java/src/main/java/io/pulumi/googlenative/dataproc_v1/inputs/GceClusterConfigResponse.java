// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.dataproc_v1.inputs.ConfidentialInstanceConfigResponse;
import io.pulumi.googlenative.dataproc_v1.inputs.NodeGroupAffinityResponse;
import io.pulumi.googlenative.dataproc_v1.inputs.ReservationAffinityResponse;
import io.pulumi.googlenative.dataproc_v1.inputs.ShieldedInstanceConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class GceClusterConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final GceClusterConfigResponse Empty = new GceClusterConfigResponse();

    @InputImport(name="confidentialInstanceConfig", required=true)
    private final ConfidentialInstanceConfigResponse confidentialInstanceConfig;

    public ConfidentialInstanceConfigResponse getConfidentialInstanceConfig() {
        return this.confidentialInstanceConfig;
    }

    @InputImport(name="internalIpOnly", required=true)
    private final Boolean internalIpOnly;

    public Boolean getInternalIpOnly() {
        return this.internalIpOnly;
    }

    @InputImport(name="metadata", required=true)
    private final Map<String,String> metadata;

    public Map<String,String> getMetadata() {
        return this.metadata;
    }

    @InputImport(name="networkUri", required=true)
    private final String networkUri;

    public String getNetworkUri() {
        return this.networkUri;
    }

    @InputImport(name="nodeGroupAffinity", required=true)
    private final NodeGroupAffinityResponse nodeGroupAffinity;

    public NodeGroupAffinityResponse getNodeGroupAffinity() {
        return this.nodeGroupAffinity;
    }

    @InputImport(name="privateIpv6GoogleAccess", required=true)
    private final String privateIpv6GoogleAccess;

    public String getPrivateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }

    @InputImport(name="reservationAffinity", required=true)
    private final ReservationAffinityResponse reservationAffinity;

    public ReservationAffinityResponse getReservationAffinity() {
        return this.reservationAffinity;
    }

    @InputImport(name="serviceAccount", required=true)
    private final String serviceAccount;

    public String getServiceAccount() {
        return this.serviceAccount;
    }

    @InputImport(name="serviceAccountScopes", required=true)
    private final List<String> serviceAccountScopes;

    public List<String> getServiceAccountScopes() {
        return this.serviceAccountScopes;
    }

    @InputImport(name="shieldedInstanceConfig", required=true)
    private final ShieldedInstanceConfigResponse shieldedInstanceConfig;

    public ShieldedInstanceConfigResponse getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }

    @InputImport(name="subnetworkUri", required=true)
    private final String subnetworkUri;

    public String getSubnetworkUri() {
        return this.subnetworkUri;
    }

    @InputImport(name="tags", required=true)
    private final List<String> tags;

    public List<String> getTags() {
        return this.tags;
    }

    @InputImport(name="zoneUri", required=true)
    private final String zoneUri;

    public String getZoneUri() {
        return this.zoneUri;
    }

    public GceClusterConfigResponse(
        ConfidentialInstanceConfigResponse confidentialInstanceConfig,
        Boolean internalIpOnly,
        Map<String,String> metadata,
        String networkUri,
        NodeGroupAffinityResponse nodeGroupAffinity,
        String privateIpv6GoogleAccess,
        ReservationAffinityResponse reservationAffinity,
        String serviceAccount,
        List<String> serviceAccountScopes,
        ShieldedInstanceConfigResponse shieldedInstanceConfig,
        String subnetworkUri,
        List<String> tags,
        String zoneUri) {
        this.confidentialInstanceConfig = Objects.requireNonNull(confidentialInstanceConfig, "expected parameter 'confidentialInstanceConfig' to be non-null");
        this.internalIpOnly = Objects.requireNonNull(internalIpOnly, "expected parameter 'internalIpOnly' to be non-null");
        this.metadata = Objects.requireNonNull(metadata, "expected parameter 'metadata' to be non-null");
        this.networkUri = Objects.requireNonNull(networkUri, "expected parameter 'networkUri' to be non-null");
        this.nodeGroupAffinity = Objects.requireNonNull(nodeGroupAffinity, "expected parameter 'nodeGroupAffinity' to be non-null");
        this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess, "expected parameter 'privateIpv6GoogleAccess' to be non-null");
        this.reservationAffinity = Objects.requireNonNull(reservationAffinity, "expected parameter 'reservationAffinity' to be non-null");
        this.serviceAccount = Objects.requireNonNull(serviceAccount, "expected parameter 'serviceAccount' to be non-null");
        this.serviceAccountScopes = Objects.requireNonNull(serviceAccountScopes, "expected parameter 'serviceAccountScopes' to be non-null");
        this.shieldedInstanceConfig = Objects.requireNonNull(shieldedInstanceConfig, "expected parameter 'shieldedInstanceConfig' to be non-null");
        this.subnetworkUri = Objects.requireNonNull(subnetworkUri, "expected parameter 'subnetworkUri' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.zoneUri = Objects.requireNonNull(zoneUri, "expected parameter 'zoneUri' to be non-null");
    }

    private GceClusterConfigResponse() {
        this.confidentialInstanceConfig = null;
        this.internalIpOnly = null;
        this.metadata = Map.of();
        this.networkUri = null;
        this.nodeGroupAffinity = null;
        this.privateIpv6GoogleAccess = null;
        this.reservationAffinity = null;
        this.serviceAccount = null;
        this.serviceAccountScopes = List.of();
        this.shieldedInstanceConfig = null;
        this.subnetworkUri = null;
        this.tags = List.of();
        this.zoneUri = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GceClusterConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfidentialInstanceConfigResponse confidentialInstanceConfig;
        private Boolean internalIpOnly;
        private Map<String,String> metadata;
        private String networkUri;
        private NodeGroupAffinityResponse nodeGroupAffinity;
        private String privateIpv6GoogleAccess;
        private ReservationAffinityResponse reservationAffinity;
        private String serviceAccount;
        private List<String> serviceAccountScopes;
        private ShieldedInstanceConfigResponse shieldedInstanceConfig;
        private String subnetworkUri;
        private List<String> tags;
        private String zoneUri;

        public Builder() {
    	      // Empty
        }

        public Builder(GceClusterConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.confidentialInstanceConfig = defaults.confidentialInstanceConfig;
    	      this.internalIpOnly = defaults.internalIpOnly;
    	      this.metadata = defaults.metadata;
    	      this.networkUri = defaults.networkUri;
    	      this.nodeGroupAffinity = defaults.nodeGroupAffinity;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountScopes = defaults.serviceAccountScopes;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.subnetworkUri = defaults.subnetworkUri;
    	      this.tags = defaults.tags;
    	      this.zoneUri = defaults.zoneUri;
        }

        public Builder setConfidentialInstanceConfig(ConfidentialInstanceConfigResponse confidentialInstanceConfig) {
            this.confidentialInstanceConfig = Objects.requireNonNull(confidentialInstanceConfig);
            return this;
        }

        public Builder setInternalIpOnly(Boolean internalIpOnly) {
            this.internalIpOnly = Objects.requireNonNull(internalIpOnly);
            return this;
        }

        public Builder setMetadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setNetworkUri(String networkUri) {
            this.networkUri = Objects.requireNonNull(networkUri);
            return this;
        }

        public Builder setNodeGroupAffinity(NodeGroupAffinityResponse nodeGroupAffinity) {
            this.nodeGroupAffinity = Objects.requireNonNull(nodeGroupAffinity);
            return this;
        }

        public Builder setPrivateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
            return this;
        }

        public Builder setReservationAffinity(ReservationAffinityResponse reservationAffinity) {
            this.reservationAffinity = Objects.requireNonNull(reservationAffinity);
            return this;
        }

        public Builder setServiceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setServiceAccountScopes(List<String> serviceAccountScopes) {
            this.serviceAccountScopes = Objects.requireNonNull(serviceAccountScopes);
            return this;
        }

        public Builder setShieldedInstanceConfig(ShieldedInstanceConfigResponse shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Objects.requireNonNull(shieldedInstanceConfig);
            return this;
        }

        public Builder setSubnetworkUri(String subnetworkUri) {
            this.subnetworkUri = Objects.requireNonNull(subnetworkUri);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setZoneUri(String zoneUri) {
            this.zoneUri = Objects.requireNonNull(zoneUri);
            return this;
        }

        public GceClusterConfigResponse build() {
            return new GceClusterConfigResponse(confidentialInstanceConfig, internalIpOnly, metadata, networkUri, nodeGroupAffinity, privateIpv6GoogleAccess, reservationAffinity, serviceAccount, serviceAccountScopes, shieldedInstanceConfig, subnetworkUri, tags, zoneUri);
        }
    }
}
