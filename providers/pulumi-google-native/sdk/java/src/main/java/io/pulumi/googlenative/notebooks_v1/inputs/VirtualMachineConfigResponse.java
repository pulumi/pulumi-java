// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.notebooks_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.notebooks_v1.inputs.ContainerImageResponse;
import io.pulumi.googlenative.notebooks_v1.inputs.EncryptionConfigResponse;
import io.pulumi.googlenative.notebooks_v1.inputs.LocalDiskResponse;
import io.pulumi.googlenative.notebooks_v1.inputs.RuntimeAcceleratorConfigResponse;
import io.pulumi.googlenative.notebooks_v1.inputs.RuntimeShieldedInstanceConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class VirtualMachineConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final VirtualMachineConfigResponse Empty = new VirtualMachineConfigResponse();

    @InputImport(name="acceleratorConfig", required=true)
    private final RuntimeAcceleratorConfigResponse acceleratorConfig;

    public RuntimeAcceleratorConfigResponse getAcceleratorConfig() {
        return this.acceleratorConfig;
    }

    @InputImport(name="containerImages", required=true)
    private final List<ContainerImageResponse> containerImages;

    public List<ContainerImageResponse> getContainerImages() {
        return this.containerImages;
    }

    @InputImport(name="dataDisk", required=true)
    private final LocalDiskResponse dataDisk;

    public LocalDiskResponse getDataDisk() {
        return this.dataDisk;
    }

    @InputImport(name="encryptionConfig", required=true)
    private final EncryptionConfigResponse encryptionConfig;

    public EncryptionConfigResponse getEncryptionConfig() {
        return this.encryptionConfig;
    }

    @InputImport(name="guestAttributes", required=true)
    private final Map<String,String> guestAttributes;

    public Map<String,String> getGuestAttributes() {
        return this.guestAttributes;
    }

    @InputImport(name="internalIpOnly", required=true)
    private final Boolean internalIpOnly;

    public Boolean getInternalIpOnly() {
        return this.internalIpOnly;
    }

    @InputImport(name="labels", required=true)
    private final Map<String,String> labels;

    public Map<String,String> getLabels() {
        return this.labels;
    }

    @InputImport(name="machineType", required=true)
    private final String machineType;

    public String getMachineType() {
        return this.machineType;
    }

    @InputImport(name="metadata", required=true)
    private final Map<String,String> metadata;

    public Map<String,String> getMetadata() {
        return this.metadata;
    }

    @InputImport(name="network", required=true)
    private final String network;

    public String getNetwork() {
        return this.network;
    }

    @InputImport(name="nicType", required=true)
    private final String nicType;

    public String getNicType() {
        return this.nicType;
    }

    @InputImport(name="shieldedInstanceConfig", required=true)
    private final RuntimeShieldedInstanceConfigResponse shieldedInstanceConfig;

    public RuntimeShieldedInstanceConfigResponse getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }

    @InputImport(name="subnet", required=true)
    private final String subnet;

    public String getSubnet() {
        return this.subnet;
    }

    @InputImport(name="tags", required=true)
    private final List<String> tags;

    public List<String> getTags() {
        return this.tags;
    }

    @InputImport(name="zone", required=true)
    private final String zone;

    public String getZone() {
        return this.zone;
    }

    public VirtualMachineConfigResponse(
        RuntimeAcceleratorConfigResponse acceleratorConfig,
        List<ContainerImageResponse> containerImages,
        LocalDiskResponse dataDisk,
        EncryptionConfigResponse encryptionConfig,
        Map<String,String> guestAttributes,
        Boolean internalIpOnly,
        Map<String,String> labels,
        String machineType,
        Map<String,String> metadata,
        String network,
        String nicType,
        RuntimeShieldedInstanceConfigResponse shieldedInstanceConfig,
        String subnet,
        List<String> tags,
        String zone) {
        this.acceleratorConfig = Objects.requireNonNull(acceleratorConfig, "expected parameter 'acceleratorConfig' to be non-null");
        this.containerImages = Objects.requireNonNull(containerImages, "expected parameter 'containerImages' to be non-null");
        this.dataDisk = Objects.requireNonNull(dataDisk, "expected parameter 'dataDisk' to be non-null");
        this.encryptionConfig = Objects.requireNonNull(encryptionConfig, "expected parameter 'encryptionConfig' to be non-null");
        this.guestAttributes = Objects.requireNonNull(guestAttributes, "expected parameter 'guestAttributes' to be non-null");
        this.internalIpOnly = Objects.requireNonNull(internalIpOnly, "expected parameter 'internalIpOnly' to be non-null");
        this.labels = Objects.requireNonNull(labels, "expected parameter 'labels' to be non-null");
        this.machineType = Objects.requireNonNull(machineType, "expected parameter 'machineType' to be non-null");
        this.metadata = Objects.requireNonNull(metadata, "expected parameter 'metadata' to be non-null");
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.nicType = Objects.requireNonNull(nicType, "expected parameter 'nicType' to be non-null");
        this.shieldedInstanceConfig = Objects.requireNonNull(shieldedInstanceConfig, "expected parameter 'shieldedInstanceConfig' to be non-null");
        this.subnet = Objects.requireNonNull(subnet, "expected parameter 'subnet' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.zone = Objects.requireNonNull(zone, "expected parameter 'zone' to be non-null");
    }

    private VirtualMachineConfigResponse() {
        this.acceleratorConfig = null;
        this.containerImages = List.of();
        this.dataDisk = null;
        this.encryptionConfig = null;
        this.guestAttributes = Map.of();
        this.internalIpOnly = null;
        this.labels = Map.of();
        this.machineType = null;
        this.metadata = Map.of();
        this.network = null;
        this.nicType = null;
        this.shieldedInstanceConfig = null;
        this.subnet = null;
        this.tags = List.of();
        this.zone = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuntimeAcceleratorConfigResponse acceleratorConfig;
        private List<ContainerImageResponse> containerImages;
        private LocalDiskResponse dataDisk;
        private EncryptionConfigResponse encryptionConfig;
        private Map<String,String> guestAttributes;
        private Boolean internalIpOnly;
        private Map<String,String> labels;
        private String machineType;
        private Map<String,String> metadata;
        private String network;
        private String nicType;
        private RuntimeShieldedInstanceConfigResponse shieldedInstanceConfig;
        private String subnet;
        private List<String> tags;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.containerImages = defaults.containerImages;
    	      this.dataDisk = defaults.dataDisk;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.guestAttributes = defaults.guestAttributes;
    	      this.internalIpOnly = defaults.internalIpOnly;
    	      this.labels = defaults.labels;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.network = defaults.network;
    	      this.nicType = defaults.nicType;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
    	      this.zone = defaults.zone;
        }

        public Builder setAcceleratorConfig(RuntimeAcceleratorConfigResponse acceleratorConfig) {
            this.acceleratorConfig = Objects.requireNonNull(acceleratorConfig);
            return this;
        }

        public Builder setContainerImages(List<ContainerImageResponse> containerImages) {
            this.containerImages = Objects.requireNonNull(containerImages);
            return this;
        }

        public Builder setDataDisk(LocalDiskResponse dataDisk) {
            this.dataDisk = Objects.requireNonNull(dataDisk);
            return this;
        }

        public Builder setEncryptionConfig(EncryptionConfigResponse encryptionConfig) {
            this.encryptionConfig = Objects.requireNonNull(encryptionConfig);
            return this;
        }

        public Builder setGuestAttributes(Map<String,String> guestAttributes) {
            this.guestAttributes = Objects.requireNonNull(guestAttributes);
            return this;
        }

        public Builder setInternalIpOnly(Boolean internalIpOnly) {
            this.internalIpOnly = Objects.requireNonNull(internalIpOnly);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setMachineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }

        public Builder setMetadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setNicType(String nicType) {
            this.nicType = Objects.requireNonNull(nicType);
            return this;
        }

        public Builder setShieldedInstanceConfig(RuntimeShieldedInstanceConfigResponse shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Objects.requireNonNull(shieldedInstanceConfig);
            return this;
        }

        public Builder setSubnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setZone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }

        public VirtualMachineConfigResponse build() {
            return new VirtualMachineConfigResponse(acceleratorConfig, containerImages, dataDisk, encryptionConfig, guestAttributes, internalIpOnly, labels, machineType, metadata, network, nicType, shieldedInstanceConfig, subnet, tags, zone);
        }
    }
}
