// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.run_v1alpha1.inputs.InstanceStatusResponse;
import io.pulumi.googlenative.run_v1alpha1.inputs.JobConditionResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class JobStatusResponse extends io.pulumi.resources.InvokeArgs {

    public static final JobStatusResponse Empty = new JobStatusResponse();

    @InputImport(name="active", required=true)
    private final Integer active;

    public Integer getActive() {
        return this.active;
    }

    @InputImport(name="completionTime", required=true)
    private final String completionTime;

    public String getCompletionTime() {
        return this.completionTime;
    }

    @InputImport(name="conditions", required=true)
    private final List<JobConditionResponse> conditions;

    public List<JobConditionResponse> getConditions() {
        return this.conditions;
    }

    @InputImport(name="failed", required=true)
    private final Integer failed;

    public Integer getFailed() {
        return this.failed;
    }

    @InputImport(name="imageDigest", required=true)
    private final String imageDigest;

    public String getImageDigest() {
        return this.imageDigest;
    }

    @InputImport(name="instances", required=true)
    private final List<InstanceStatusResponse> instances;

    public List<InstanceStatusResponse> getInstances() {
        return this.instances;
    }

    @InputImport(name="observedGeneration", required=true)
    private final Integer observedGeneration;

    public Integer getObservedGeneration() {
        return this.observedGeneration;
    }

    @InputImport(name="startTime", required=true)
    private final String startTime;

    public String getStartTime() {
        return this.startTime;
    }

    @InputImport(name="succeeded", required=true)
    private final Integer succeeded;

    public Integer getSucceeded() {
        return this.succeeded;
    }

    public JobStatusResponse(
        Integer active,
        String completionTime,
        List<JobConditionResponse> conditions,
        Integer failed,
        String imageDigest,
        List<InstanceStatusResponse> instances,
        Integer observedGeneration,
        String startTime,
        Integer succeeded) {
        this.active = Objects.requireNonNull(active, "expected parameter 'active' to be non-null");
        this.completionTime = Objects.requireNonNull(completionTime, "expected parameter 'completionTime' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.failed = Objects.requireNonNull(failed, "expected parameter 'failed' to be non-null");
        this.imageDigest = Objects.requireNonNull(imageDigest, "expected parameter 'imageDigest' to be non-null");
        this.instances = Objects.requireNonNull(instances, "expected parameter 'instances' to be non-null");
        this.observedGeneration = Objects.requireNonNull(observedGeneration, "expected parameter 'observedGeneration' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.succeeded = Objects.requireNonNull(succeeded, "expected parameter 'succeeded' to be non-null");
    }

    private JobStatusResponse() {
        this.active = null;
        this.completionTime = null;
        this.conditions = List.of();
        this.failed = null;
        this.imageDigest = null;
        this.instances = List.of();
        this.observedGeneration = null;
        this.startTime = null;
        this.succeeded = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer active;
        private String completionTime;
        private List<JobConditionResponse> conditions;
        private Integer failed;
        private String imageDigest;
        private List<InstanceStatusResponse> instances;
        private Integer observedGeneration;
        private String startTime;
        private Integer succeeded;

        public Builder() {
    	      // Empty
        }

        public Builder(JobStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.completionTime = defaults.completionTime;
    	      this.conditions = defaults.conditions;
    	      this.failed = defaults.failed;
    	      this.imageDigest = defaults.imageDigest;
    	      this.instances = defaults.instances;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.startTime = defaults.startTime;
    	      this.succeeded = defaults.succeeded;
        }

        public Builder setActive(Integer active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }

        public Builder setCompletionTime(String completionTime) {
            this.completionTime = Objects.requireNonNull(completionTime);
            return this;
        }

        public Builder setConditions(List<JobConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setFailed(Integer failed) {
            this.failed = Objects.requireNonNull(failed);
            return this;
        }

        public Builder setImageDigest(String imageDigest) {
            this.imageDigest = Objects.requireNonNull(imageDigest);
            return this;
        }

        public Builder setInstances(List<InstanceStatusResponse> instances) {
            this.instances = Objects.requireNonNull(instances);
            return this;
        }

        public Builder setObservedGeneration(Integer observedGeneration) {
            this.observedGeneration = Objects.requireNonNull(observedGeneration);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setSucceeded(Integer succeeded) {
            this.succeeded = Objects.requireNonNull(succeeded);
            return this;
        }

        public JobStatusResponse build() {
            return new JobStatusResponse(active, completionTime, conditions, failed, imageDigest, instances, observedGeneration, startTime, succeeded);
        }
    }
}
