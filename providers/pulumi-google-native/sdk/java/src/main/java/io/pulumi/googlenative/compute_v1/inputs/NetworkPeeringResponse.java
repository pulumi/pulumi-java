// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class NetworkPeeringResponse extends io.pulumi.resources.InvokeArgs {

    public static final NetworkPeeringResponse Empty = new NetworkPeeringResponse();

    @InputImport(name="autoCreateRoutes", required=true)
    private final Boolean autoCreateRoutes;

    public Boolean getAutoCreateRoutes() {
        return this.autoCreateRoutes;
    }

    @InputImport(name="exchangeSubnetRoutes", required=true)
    private final Boolean exchangeSubnetRoutes;

    public Boolean getExchangeSubnetRoutes() {
        return this.exchangeSubnetRoutes;
    }

    @InputImport(name="exportCustomRoutes", required=true)
    private final Boolean exportCustomRoutes;

    public Boolean getExportCustomRoutes() {
        return this.exportCustomRoutes;
    }

    @InputImport(name="exportSubnetRoutesWithPublicIp", required=true)
    private final Boolean exportSubnetRoutesWithPublicIp;

    public Boolean getExportSubnetRoutesWithPublicIp() {
        return this.exportSubnetRoutesWithPublicIp;
    }

    @InputImport(name="importCustomRoutes", required=true)
    private final Boolean importCustomRoutes;

    public Boolean getImportCustomRoutes() {
        return this.importCustomRoutes;
    }

    @InputImport(name="importSubnetRoutesWithPublicIp", required=true)
    private final Boolean importSubnetRoutesWithPublicIp;

    public Boolean getImportSubnetRoutesWithPublicIp() {
        return this.importSubnetRoutesWithPublicIp;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="network", required=true)
    private final String network;

    public String getNetwork() {
        return this.network;
    }

    @InputImport(name="peerMtu", required=true)
    private final Integer peerMtu;

    public Integer getPeerMtu() {
        return this.peerMtu;
    }

    @InputImport(name="state", required=true)
    private final String state;

    public String getState() {
        return this.state;
    }

    @InputImport(name="stateDetails", required=true)
    private final String stateDetails;

    public String getStateDetails() {
        return this.stateDetails;
    }

    public NetworkPeeringResponse(
        Boolean autoCreateRoutes,
        Boolean exchangeSubnetRoutes,
        Boolean exportCustomRoutes,
        Boolean exportSubnetRoutesWithPublicIp,
        Boolean importCustomRoutes,
        Boolean importSubnetRoutesWithPublicIp,
        String name,
        String network,
        Integer peerMtu,
        String state,
        String stateDetails) {
        this.autoCreateRoutes = Objects.requireNonNull(autoCreateRoutes, "expected parameter 'autoCreateRoutes' to be non-null");
        this.exchangeSubnetRoutes = Objects.requireNonNull(exchangeSubnetRoutes, "expected parameter 'exchangeSubnetRoutes' to be non-null");
        this.exportCustomRoutes = Objects.requireNonNull(exportCustomRoutes, "expected parameter 'exportCustomRoutes' to be non-null");
        this.exportSubnetRoutesWithPublicIp = Objects.requireNonNull(exportSubnetRoutesWithPublicIp, "expected parameter 'exportSubnetRoutesWithPublicIp' to be non-null");
        this.importCustomRoutes = Objects.requireNonNull(importCustomRoutes, "expected parameter 'importCustomRoutes' to be non-null");
        this.importSubnetRoutesWithPublicIp = Objects.requireNonNull(importSubnetRoutesWithPublicIp, "expected parameter 'importSubnetRoutesWithPublicIp' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.network = Objects.requireNonNull(network, "expected parameter 'network' to be non-null");
        this.peerMtu = Objects.requireNonNull(peerMtu, "expected parameter 'peerMtu' to be non-null");
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
        this.stateDetails = Objects.requireNonNull(stateDetails, "expected parameter 'stateDetails' to be non-null");
    }

    private NetworkPeeringResponse() {
        this.autoCreateRoutes = null;
        this.exchangeSubnetRoutes = null;
        this.exportCustomRoutes = null;
        this.exportSubnetRoutesWithPublicIp = null;
        this.importCustomRoutes = null;
        this.importSubnetRoutesWithPublicIp = null;
        this.name = null;
        this.network = null;
        this.peerMtu = null;
        this.state = null;
        this.stateDetails = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkPeeringResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean autoCreateRoutes;
        private Boolean exchangeSubnetRoutes;
        private Boolean exportCustomRoutes;
        private Boolean exportSubnetRoutesWithPublicIp;
        private Boolean importCustomRoutes;
        private Boolean importSubnetRoutesWithPublicIp;
        private String name;
        private String network;
        private Integer peerMtu;
        private String state;
        private String stateDetails;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkPeeringResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoCreateRoutes = defaults.autoCreateRoutes;
    	      this.exchangeSubnetRoutes = defaults.exchangeSubnetRoutes;
    	      this.exportCustomRoutes = defaults.exportCustomRoutes;
    	      this.exportSubnetRoutesWithPublicIp = defaults.exportSubnetRoutesWithPublicIp;
    	      this.importCustomRoutes = defaults.importCustomRoutes;
    	      this.importSubnetRoutesWithPublicIp = defaults.importSubnetRoutesWithPublicIp;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.peerMtu = defaults.peerMtu;
    	      this.state = defaults.state;
    	      this.stateDetails = defaults.stateDetails;
        }

        public Builder setAutoCreateRoutes(Boolean autoCreateRoutes) {
            this.autoCreateRoutes = Objects.requireNonNull(autoCreateRoutes);
            return this;
        }

        public Builder setExchangeSubnetRoutes(Boolean exchangeSubnetRoutes) {
            this.exchangeSubnetRoutes = Objects.requireNonNull(exchangeSubnetRoutes);
            return this;
        }

        public Builder setExportCustomRoutes(Boolean exportCustomRoutes) {
            this.exportCustomRoutes = Objects.requireNonNull(exportCustomRoutes);
            return this;
        }

        public Builder setExportSubnetRoutesWithPublicIp(Boolean exportSubnetRoutesWithPublicIp) {
            this.exportSubnetRoutesWithPublicIp = Objects.requireNonNull(exportSubnetRoutesWithPublicIp);
            return this;
        }

        public Builder setImportCustomRoutes(Boolean importCustomRoutes) {
            this.importCustomRoutes = Objects.requireNonNull(importCustomRoutes);
            return this;
        }

        public Builder setImportSubnetRoutesWithPublicIp(Boolean importSubnetRoutesWithPublicIp) {
            this.importSubnetRoutesWithPublicIp = Objects.requireNonNull(importSubnetRoutesWithPublicIp);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setPeerMtu(Integer peerMtu) {
            this.peerMtu = Objects.requireNonNull(peerMtu);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStateDetails(String stateDetails) {
            this.stateDetails = Objects.requireNonNull(stateDetails);
            return this;
        }

        public NetworkPeeringResponse build() {
            return new NetworkPeeringResponse(autoCreateRoutes, exchangeSubnetRoutes, exportCustomRoutes, exportSubnetRoutesWithPublicIp, importCustomRoutes, importSubnetRoutesWithPublicIp, name, network, peerMtu, state, stateDetails);
        }
    }
}
