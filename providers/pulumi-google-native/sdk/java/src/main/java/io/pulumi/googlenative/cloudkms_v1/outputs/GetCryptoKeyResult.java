// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudkms_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudkms_v1.outputs.CryptoKeyVersionResponse;
import io.pulumi.googlenative.cloudkms_v1.outputs.CryptoKeyVersionTemplateResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetCryptoKeyResult {
    private final String createTime;
    private final String cryptoKeyBackend;
    private final String destroyScheduledDuration;
    private final Boolean importOnly;
    private final Map<String,String> labels;
    private final String name;
    private final String nextRotationTime;
    private final CryptoKeyVersionResponse primary;
    private final String purpose;
    private final String rotationPeriod;
    private final CryptoKeyVersionTemplateResponse versionTemplate;

    @OutputCustomType.Constructor({"createTime","cryptoKeyBackend","destroyScheduledDuration","importOnly","labels","name","nextRotationTime","primary","purpose","rotationPeriod","versionTemplate"})
    private GetCryptoKeyResult(
        String createTime,
        String cryptoKeyBackend,
        String destroyScheduledDuration,
        Boolean importOnly,
        Map<String,String> labels,
        String name,
        String nextRotationTime,
        CryptoKeyVersionResponse primary,
        String purpose,
        String rotationPeriod,
        CryptoKeyVersionTemplateResponse versionTemplate) {
        this.createTime = Objects.requireNonNull(createTime);
        this.cryptoKeyBackend = Objects.requireNonNull(cryptoKeyBackend);
        this.destroyScheduledDuration = Objects.requireNonNull(destroyScheduledDuration);
        this.importOnly = Objects.requireNonNull(importOnly);
        this.labels = Objects.requireNonNull(labels);
        this.name = Objects.requireNonNull(name);
        this.nextRotationTime = Objects.requireNonNull(nextRotationTime);
        this.primary = Objects.requireNonNull(primary);
        this.purpose = Objects.requireNonNull(purpose);
        this.rotationPeriod = Objects.requireNonNull(rotationPeriod);
        this.versionTemplate = Objects.requireNonNull(versionTemplate);
    }

    public String getCreateTime() {
        return this.createTime;
    }
    public String getCryptoKeyBackend() {
        return this.cryptoKeyBackend;
    }
    public String getDestroyScheduledDuration() {
        return this.destroyScheduledDuration;
    }
    public Boolean getImportOnly() {
        return this.importOnly;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public String getName() {
        return this.name;
    }
    public String getNextRotationTime() {
        return this.nextRotationTime;
    }
    public CryptoKeyVersionResponse getPrimary() {
        return this.primary;
    }
    public String getPurpose() {
        return this.purpose;
    }
    public String getRotationPeriod() {
        return this.rotationPeriod;
    }
    public CryptoKeyVersionTemplateResponse getVersionTemplate() {
        return this.versionTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoKeyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String cryptoKeyBackend;
        private String destroyScheduledDuration;
        private Boolean importOnly;
        private Map<String,String> labels;
        private String name;
        private String nextRotationTime;
        private CryptoKeyVersionResponse primary;
        private String purpose;
        private String rotationPeriod;
        private CryptoKeyVersionTemplateResponse versionTemplate;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCryptoKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.cryptoKeyBackend = defaults.cryptoKeyBackend;
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.importOnly = defaults.importOnly;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.nextRotationTime = defaults.nextRotationTime;
    	      this.primary = defaults.primary;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.versionTemplate = defaults.versionTemplate;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCryptoKeyBackend(String cryptoKeyBackend) {
            this.cryptoKeyBackend = Objects.requireNonNull(cryptoKeyBackend);
            return this;
        }

        public Builder setDestroyScheduledDuration(String destroyScheduledDuration) {
            this.destroyScheduledDuration = Objects.requireNonNull(destroyScheduledDuration);
            return this;
        }

        public Builder setImportOnly(Boolean importOnly) {
            this.importOnly = Objects.requireNonNull(importOnly);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNextRotationTime(String nextRotationTime) {
            this.nextRotationTime = Objects.requireNonNull(nextRotationTime);
            return this;
        }

        public Builder setPrimary(CryptoKeyVersionResponse primary) {
            this.primary = Objects.requireNonNull(primary);
            return this;
        }

        public Builder setPurpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }

        public Builder setRotationPeriod(String rotationPeriod) {
            this.rotationPeriod = Objects.requireNonNull(rotationPeriod);
            return this;
        }

        public Builder setVersionTemplate(CryptoKeyVersionTemplateResponse versionTemplate) {
            this.versionTemplate = Objects.requireNonNull(versionTemplate);
            return this;
        }

        public GetCryptoKeyResult build() {
            return new GetCryptoKeyResult(createTime, cryptoKeyBackend, destroyScheduledDuration, importOnly, labels, name, nextRotationTime, primary, purpose, rotationPeriod, versionTemplate);
        }
    }
}
