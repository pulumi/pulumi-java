// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1beta1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.container_v1beta1.inputs.MaxPodsConstraintResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeConfigResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeManagementResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeNetworkConfigResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.NodePoolAutoscalingResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.PlacementPolicyResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.StatusConditionResponse;
import io.pulumi.googlenative.container_v1beta1.inputs.UpgradeSettingsResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload. These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available.
 * 
 */
public final class NodePoolResponse extends io.pulumi.resources.InvokeArgs {

    public static final NodePoolResponse Empty = new NodePoolResponse();

    /**
     * Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
     * 
     */
    @Import(name="autoscaling", required=true)
      private final NodePoolAutoscalingResponse autoscaling;

    public NodePoolAutoscalingResponse getAutoscaling() {
        return this.autoscaling;
    }

    /**
     * Which conditions caused the current node pool state.
     * 
     */
    @Import(name="conditions", required=true)
      private final List<StatusConditionResponse> conditions;

    public List<StatusConditionResponse> getConditions() {
        return this.conditions;
    }

    /**
     * The node configuration of the pool.
     * 
     */
    @Import(name="config", required=true)
      private final NodeConfigResponse config;

    public NodeConfigResponse getConfig() {
        return this.config;
    }

    /**
     * The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
     * 
     */
    @Import(name="initialNodeCount", required=true)
      private final Integer initialNodeCount;

    public Integer getInitialNodeCount() {
        return this.initialNodeCount;
    }

    /**
     * [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool.
     * 
     */
    @Import(name="instanceGroupUrls", required=true)
      private final List<String> instanceGroupUrls;

    public List<String> getInstanceGroupUrls() {
        return this.instanceGroupUrls;
    }

    /**
     * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
     * 
     */
    @Import(name="locations", required=true)
      private final List<String> locations;

    public List<String> getLocations() {
        return this.locations;
    }

    /**
     * NodeManagement configuration for this NodePool.
     * 
     */
    @Import(name="management", required=true)
      private final NodeManagementResponse management;

    public NodeManagementResponse getManagement() {
        return this.management;
    }

    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Import(name="maxPodsConstraint", required=true)
      private final MaxPodsConstraintResponse maxPodsConstraint;

    public MaxPodsConstraintResponse getMaxPodsConstraint() {
        return this.maxPodsConstraint;
    }

    /**
     * The name of the node pool.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     * 
     */
    @Import(name="networkConfig", required=true)
      private final NodeNetworkConfigResponse networkConfig;

    public NodeNetworkConfigResponse getNetworkConfig() {
        return this.networkConfig;
    }

    /**
     * Specifies the node placement policy.
     * 
     */
    @Import(name="placementPolicy", required=true)
      private final PlacementPolicyResponse placementPolicy;

    public PlacementPolicyResponse getPlacementPolicy() {
        return this.placementPolicy;
    }

    /**
     * [Output only] The pod CIDR block size per node in this node pool.
     * 
     */
    @Import(name="podIpv4CidrSize", required=true)
      private final Integer podIpv4CidrSize;

    public Integer getPodIpv4CidrSize() {
        return this.podIpv4CidrSize;
    }

    /**
     * [Output only] Server-defined URL for the resource.
     * 
     */
    @Import(name="selfLink", required=true)
      private final String selfLink;

    public String getSelfLink() {
        return this.selfLink;
    }

    /**
     * [Output only] The status of the nodes in this pool instance.
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String getStatus() {
        return this.status;
    }

    /**
     * Upgrade settings control disruption and speed of the upgrade.
     * 
     */
    @Import(name="upgradeSettings", required=true)
      private final UpgradeSettingsResponse upgradeSettings;

    public UpgradeSettingsResponse getUpgradeSettings() {
        return this.upgradeSettings;
    }

    /**
     * The version of the Kubernetes of this node.
     * 
     */
    @Import(name="version", required=true)
      private final String version;

    public String getVersion() {
        return this.version;
    }

    public NodePoolResponse(
        NodePoolAutoscalingResponse autoscaling,
        List<StatusConditionResponse> conditions,
        NodeConfigResponse config,
        Integer initialNodeCount,
        List<String> instanceGroupUrls,
        List<String> locations,
        NodeManagementResponse management,
        MaxPodsConstraintResponse maxPodsConstraint,
        String name,
        NodeNetworkConfigResponse networkConfig,
        PlacementPolicyResponse placementPolicy,
        Integer podIpv4CidrSize,
        String selfLink,
        String status,
        UpgradeSettingsResponse upgradeSettings,
        String version) {
        this.autoscaling = Objects.requireNonNull(autoscaling, "expected parameter 'autoscaling' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.config = Objects.requireNonNull(config, "expected parameter 'config' to be non-null");
        this.initialNodeCount = Objects.requireNonNull(initialNodeCount, "expected parameter 'initialNodeCount' to be non-null");
        this.instanceGroupUrls = Objects.requireNonNull(instanceGroupUrls, "expected parameter 'instanceGroupUrls' to be non-null");
        this.locations = Objects.requireNonNull(locations, "expected parameter 'locations' to be non-null");
        this.management = Objects.requireNonNull(management, "expected parameter 'management' to be non-null");
        this.maxPodsConstraint = Objects.requireNonNull(maxPodsConstraint, "expected parameter 'maxPodsConstraint' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.networkConfig = Objects.requireNonNull(networkConfig, "expected parameter 'networkConfig' to be non-null");
        this.placementPolicy = Objects.requireNonNull(placementPolicy, "expected parameter 'placementPolicy' to be non-null");
        this.podIpv4CidrSize = Objects.requireNonNull(podIpv4CidrSize, "expected parameter 'podIpv4CidrSize' to be non-null");
        this.selfLink = Objects.requireNonNull(selfLink, "expected parameter 'selfLink' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.upgradeSettings = Objects.requireNonNull(upgradeSettings, "expected parameter 'upgradeSettings' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private NodePoolResponse() {
        this.autoscaling = null;
        this.conditions = List.of();
        this.config = null;
        this.initialNodeCount = null;
        this.instanceGroupUrls = List.of();
        this.locations = List.of();
        this.management = null;
        this.maxPodsConstraint = null;
        this.name = null;
        this.networkConfig = null;
        this.placementPolicy = null;
        this.podIpv4CidrSize = null;
        this.selfLink = null;
        this.status = null;
        this.upgradeSettings = null;
        this.version = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolAutoscalingResponse autoscaling;
        private List<StatusConditionResponse> conditions;
        private NodeConfigResponse config;
        private Integer initialNodeCount;
        private List<String> instanceGroupUrls;
        private List<String> locations;
        private NodeManagementResponse management;
        private MaxPodsConstraintResponse maxPodsConstraint;
        private String name;
        private NodeNetworkConfigResponse networkConfig;
        private PlacementPolicyResponse placementPolicy;
        private Integer podIpv4CidrSize;
        private String selfLink;
        private String status;
        private UpgradeSettingsResponse upgradeSettings;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(NodePoolResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscaling = defaults.autoscaling;
    	      this.conditions = defaults.conditions;
    	      this.config = defaults.config;
    	      this.initialNodeCount = defaults.initialNodeCount;
    	      this.instanceGroupUrls = defaults.instanceGroupUrls;
    	      this.locations = defaults.locations;
    	      this.management = defaults.management;
    	      this.maxPodsConstraint = defaults.maxPodsConstraint;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.placementPolicy = defaults.placementPolicy;
    	      this.podIpv4CidrSize = defaults.podIpv4CidrSize;
    	      this.selfLink = defaults.selfLink;
    	      this.status = defaults.status;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.version = defaults.version;
        }

        public Builder autoscaling(NodePoolAutoscalingResponse autoscaling) {
            this.autoscaling = Objects.requireNonNull(autoscaling);
            return this;
        }
        public Builder conditions(List<StatusConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(StatusConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder config(NodeConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        public Builder initialNodeCount(Integer initialNodeCount) {
            this.initialNodeCount = Objects.requireNonNull(initialNodeCount);
            return this;
        }
        public Builder instanceGroupUrls(List<String> instanceGroupUrls) {
            this.instanceGroupUrls = Objects.requireNonNull(instanceGroupUrls);
            return this;
        }
        public Builder instanceGroupUrls(String... instanceGroupUrls) {
            return instanceGroupUrls(List.of(instanceGroupUrls));
        }
        public Builder locations(List<String> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder management(NodeManagementResponse management) {
            this.management = Objects.requireNonNull(management);
            return this;
        }
        public Builder maxPodsConstraint(MaxPodsConstraintResponse maxPodsConstraint) {
            this.maxPodsConstraint = Objects.requireNonNull(maxPodsConstraint);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkConfig(NodeNetworkConfigResponse networkConfig) {
            this.networkConfig = Objects.requireNonNull(networkConfig);
            return this;
        }
        public Builder placementPolicy(PlacementPolicyResponse placementPolicy) {
            this.placementPolicy = Objects.requireNonNull(placementPolicy);
            return this;
        }
        public Builder podIpv4CidrSize(Integer podIpv4CidrSize) {
            this.podIpv4CidrSize = Objects.requireNonNull(podIpv4CidrSize);
            return this;
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder upgradeSettings(UpgradeSettingsResponse upgradeSettings) {
            this.upgradeSettings = Objects.requireNonNull(upgradeSettings);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public NodePoolResponse build() {
            return new NodePoolResponse(autoscaling, conditions, config, initialNodeCount, instanceGroupUrls, locations, management, maxPodsConstraint, name, networkConfig, placementPolicy, podIpv4CidrSize, selfLink, status, upgradeSettings, version);
        }
    }
}
