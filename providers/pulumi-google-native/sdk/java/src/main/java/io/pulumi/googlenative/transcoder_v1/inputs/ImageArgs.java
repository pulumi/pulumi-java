// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.transcoder_v1.inputs.NormalizedCoordinateArgs;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Overlaid jpeg image.
 * 
 */
public final class ImageArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
     * 
     */
    @InputImport(name="alpha")
      private final @Nullable Output<Double> alpha;

    public Output<Double> getAlpha() {
        return this.alpha == null ? Output.empty() : this.alpha;
    }

    /**
     * Normalized image resolution, based on output video resolution. Valid values: `0.0`â€“`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
     * 
     */
    @InputImport(name="resolution")
      private final @Nullable Output<NormalizedCoordinateArgs> resolution;

    public Output<NormalizedCoordinateArgs> getResolution() {
        return this.resolution == null ? Output.empty() : this.resolution;
    }

    /**
     * URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
     * 
     */
    @InputImport(name="uri", required=true)
      private final Output<String> uri;

    public Output<String> getUri() {
        return this.uri;
    }

    public ImageArgs(
        @Nullable Output<Double> alpha,
        @Nullable Output<NormalizedCoordinateArgs> resolution,
        Output<String> uri) {
        this.alpha = alpha;
        this.resolution = resolution;
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
    }

    private ImageArgs() {
        this.alpha = Output.empty();
        this.resolution = Output.empty();
        this.uri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Double> alpha;
        private @Nullable Output<NormalizedCoordinateArgs> resolution;
        private Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alpha = defaults.alpha;
    	      this.resolution = defaults.resolution;
    	      this.uri = defaults.uri;
        }

        public Builder alpha(@Nullable Output<Double> alpha) {
            this.alpha = alpha;
            return this;
        }

        public Builder alpha(@Nullable Double alpha) {
            this.alpha = Output.ofNullable(alpha);
            return this;
        }

        public Builder resolution(@Nullable Output<NormalizedCoordinateArgs> resolution) {
            this.resolution = resolution;
            return this;
        }

        public Builder resolution(@Nullable NormalizedCoordinateArgs resolution) {
            this.resolution = Output.ofNullable(resolution);
            return this;
        }

        public Builder uri(Output<String> uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }

        public Builder uri(String uri) {
            this.uri = Output.of(Objects.requireNonNull(uri));
            return this;
        }
        public ImageArgs build() {
            return new ImageArgs(alpha, resolution, uri);
        }
    }
}
