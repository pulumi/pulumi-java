// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.toolresults_v1beta3.enums.HistoryTestPlatform;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HistoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final HistoryArgs Empty = new HistoryArgs();

    /**
     * A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName == null ? Output.empty() : this.displayName;
    }

    /**
     * A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
     * 
     */
    @Import(name="historyId")
      private final @Nullable Output<String> historyId;

    public Output<String> getHistoryId() {
        return this.historyId == null ? Output.empty() : this.historyId;
    }

    /**
     * A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> getRequestId() {
        return this.requestId == null ? Output.empty() : this.requestId;
    }

    /**
     * The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
     * 
     */
    @Import(name="testPlatform")
      private final @Nullable Output<HistoryTestPlatform> testPlatform;

    public Output<HistoryTestPlatform> getTestPlatform() {
        return this.testPlatform == null ? Output.empty() : this.testPlatform;
    }

    public HistoryArgs(
        @Nullable Output<String> displayName,
        @Nullable Output<String> historyId,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<String> requestId,
        @Nullable Output<HistoryTestPlatform> testPlatform) {
        this.displayName = displayName;
        this.historyId = historyId;
        this.name = name;
        this.project = project;
        this.requestId = requestId;
        this.testPlatform = testPlatform;
    }

    private HistoryArgs() {
        this.displayName = Output.empty();
        this.historyId = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.requestId = Output.empty();
        this.testPlatform = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HistoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> historyId;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<String> requestId;
        private @Nullable Output<HistoryTestPlatform> testPlatform;

        public Builder() {
    	      // Empty
        }

        public Builder(HistoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.historyId = defaults.historyId;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.requestId = defaults.requestId;
    	      this.testPlatform = defaults.testPlatform;
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = Output.ofNullable(displayName);
            return this;
        }

        public Builder historyId(@Nullable Output<String> historyId) {
            this.historyId = historyId;
            return this;
        }

        public Builder historyId(@Nullable String historyId) {
            this.historyId = Output.ofNullable(historyId);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(@Nullable String requestId) {
            this.requestId = Output.ofNullable(requestId);
            return this;
        }

        public Builder testPlatform(@Nullable Output<HistoryTestPlatform> testPlatform) {
            this.testPlatform = testPlatform;
            return this;
        }

        public Builder testPlatform(@Nullable HistoryTestPlatform testPlatform) {
            this.testPlatform = Output.ofNullable(testPlatform);
            return this;
        }
        public HistoryArgs build() {
            return new HistoryArgs(displayName, historyId, name, project, requestId, testPlatform);
        }
    }
}
