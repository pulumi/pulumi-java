// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1beta1.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A PublicKey describes a public key.
 * 
 */
public final class PublicKeyResponse extends io.pulumi.resources.InvokeArgs {

    public static final PublicKeyResponse Empty = new PublicKeyResponse();

    /**
     * A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
     * 
     */
    @Import(name="key", required=true)
      private final String key;

    public String key() {
        return this.key;
    }

    /**
     * Optional. The type of public key. If specified, it must match the public key used for the`key` field.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public PublicKeyResponse(
        String key,
        String type) {
        this.key = Objects.requireNonNull(key, "expected parameter 'key' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private PublicKeyResponse() {
        this.key = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PublicKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String key;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(PublicKeyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.key = defaults.key;
    	      this.type = defaults.type;
        }

        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public PublicKeyResponse build() {
            return new PublicKeyResponse(key, type);
        }
    }
}
