// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.container_v1beta1.inputs.PrivateClusterMasterGlobalAccessConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration options for private clusters.
 * 
 */
public final class PrivateClusterConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final PrivateClusterConfigArgs Empty = new PrivateClusterConfigArgs();

    /**
     * Whether the master's internal IP address is used as the cluster endpoint.
     * 
     */
    @InputImport(name="enablePrivateEndpoint")
      private final @Nullable Output<Boolean> enablePrivateEndpoint;

    public Output<Boolean> getEnablePrivateEndpoint() {
        return this.enablePrivateEndpoint == null ? Output.empty() : this.enablePrivateEndpoint;
    }

    /**
     * Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
     * 
     */
    @InputImport(name="enablePrivateNodes")
      private final @Nullable Output<Boolean> enablePrivateNodes;

    public Output<Boolean> getEnablePrivateNodes() {
        return this.enablePrivateNodes == null ? Output.empty() : this.enablePrivateNodes;
    }

    /**
     * Controls master global access settings.
     * 
     */
    @InputImport(name="masterGlobalAccessConfig")
      private final @Nullable Output<PrivateClusterMasterGlobalAccessConfigArgs> masterGlobalAccessConfig;

    public Output<PrivateClusterMasterGlobalAccessConfigArgs> getMasterGlobalAccessConfig() {
        return this.masterGlobalAccessConfig == null ? Output.empty() : this.masterGlobalAccessConfig;
    }

    /**
     * The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
     * 
     */
    @InputImport(name="masterIpv4CidrBlock")
      private final @Nullable Output<String> masterIpv4CidrBlock;

    public Output<String> getMasterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock == null ? Output.empty() : this.masterIpv4CidrBlock;
    }

    public PrivateClusterConfigArgs(
        @Nullable Output<Boolean> enablePrivateEndpoint,
        @Nullable Output<Boolean> enablePrivateNodes,
        @Nullable Output<PrivateClusterMasterGlobalAccessConfigArgs> masterGlobalAccessConfig,
        @Nullable Output<String> masterIpv4CidrBlock) {
        this.enablePrivateEndpoint = enablePrivateEndpoint;
        this.enablePrivateNodes = enablePrivateNodes;
        this.masterGlobalAccessConfig = masterGlobalAccessConfig;
        this.masterIpv4CidrBlock = masterIpv4CidrBlock;
    }

    private PrivateClusterConfigArgs() {
        this.enablePrivateEndpoint = Output.empty();
        this.enablePrivateNodes = Output.empty();
        this.masterGlobalAccessConfig = Output.empty();
        this.masterIpv4CidrBlock = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateClusterConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> enablePrivateEndpoint;
        private @Nullable Output<Boolean> enablePrivateNodes;
        private @Nullable Output<PrivateClusterMasterGlobalAccessConfigArgs> masterGlobalAccessConfig;
        private @Nullable Output<String> masterIpv4CidrBlock;

        public Builder() {
    	      // Empty
        }

        public Builder(PrivateClusterConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enablePrivateEndpoint = defaults.enablePrivateEndpoint;
    	      this.enablePrivateNodes = defaults.enablePrivateNodes;
    	      this.masterGlobalAccessConfig = defaults.masterGlobalAccessConfig;
    	      this.masterIpv4CidrBlock = defaults.masterIpv4CidrBlock;
        }

        public Builder enablePrivateEndpoint(@Nullable Output<Boolean> enablePrivateEndpoint) {
            this.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }

        public Builder enablePrivateEndpoint(@Nullable Boolean enablePrivateEndpoint) {
            this.enablePrivateEndpoint = Output.ofNullable(enablePrivateEndpoint);
            return this;
        }

        public Builder enablePrivateNodes(@Nullable Output<Boolean> enablePrivateNodes) {
            this.enablePrivateNodes = enablePrivateNodes;
            return this;
        }

        public Builder enablePrivateNodes(@Nullable Boolean enablePrivateNodes) {
            this.enablePrivateNodes = Output.ofNullable(enablePrivateNodes);
            return this;
        }

        public Builder masterGlobalAccessConfig(@Nullable Output<PrivateClusterMasterGlobalAccessConfigArgs> masterGlobalAccessConfig) {
            this.masterGlobalAccessConfig = masterGlobalAccessConfig;
            return this;
        }

        public Builder masterGlobalAccessConfig(@Nullable PrivateClusterMasterGlobalAccessConfigArgs masterGlobalAccessConfig) {
            this.masterGlobalAccessConfig = Output.ofNullable(masterGlobalAccessConfig);
            return this;
        }

        public Builder masterIpv4CidrBlock(@Nullable Output<String> masterIpv4CidrBlock) {
            this.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }

        public Builder masterIpv4CidrBlock(@Nullable String masterIpv4CidrBlock) {
            this.masterIpv4CidrBlock = Output.ofNullable(masterIpv4CidrBlock);
            return this;
        }
        public PrivateClusterConfigArgs build() {
            return new PrivateClusterConfigArgs(enablePrivateEndpoint, enablePrivateNodes, masterGlobalAccessConfig, masterIpv4CidrBlock);
        }
    }
}
