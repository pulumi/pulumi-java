// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudtasks_v2.enums.TaskResponseView;
import io.pulumi.googlenative.cloudtasks_v2.inputs.AppEngineHttpRequestArgs;
import io.pulumi.googlenative.cloudtasks_v2.inputs.HttpRequestArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskArgs Empty = new TaskArgs();

    @InputImport(name="appEngineHttpRequest")
    private final @Nullable Input<AppEngineHttpRequestArgs> appEngineHttpRequest;

    public Input<AppEngineHttpRequestArgs> getAppEngineHttpRequest() {
        return this.appEngineHttpRequest == null ? Input.empty() : this.appEngineHttpRequest;
    }

    @InputImport(name="dispatchDeadline")
    private final @Nullable Input<String> dispatchDeadline;

    public Input<String> getDispatchDeadline() {
        return this.dispatchDeadline == null ? Input.empty() : this.dispatchDeadline;
    }

    @InputImport(name="httpRequest")
    private final @Nullable Input<HttpRequestArgs> httpRequest;

    public Input<HttpRequestArgs> getHttpRequest() {
        return this.httpRequest == null ? Input.empty() : this.httpRequest;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="queueId", required=true)
    private final Input<String> queueId;

    public Input<String> getQueueId() {
        return this.queueId;
    }

    @InputImport(name="responseView")
    private final @Nullable Input<TaskResponseView> responseView;

    public Input<TaskResponseView> getResponseView() {
        return this.responseView == null ? Input.empty() : this.responseView;
    }

    @InputImport(name="scheduleTime")
    private final @Nullable Input<String> scheduleTime;

    public Input<String> getScheduleTime() {
        return this.scheduleTime == null ? Input.empty() : this.scheduleTime;
    }

    public TaskArgs(
        @Nullable Input<AppEngineHttpRequestArgs> appEngineHttpRequest,
        @Nullable Input<String> dispatchDeadline,
        @Nullable Input<HttpRequestArgs> httpRequest,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        Input<String> queueId,
        @Nullable Input<TaskResponseView> responseView,
        @Nullable Input<String> scheduleTime) {
        this.appEngineHttpRequest = appEngineHttpRequest;
        this.dispatchDeadline = dispatchDeadline;
        this.httpRequest = httpRequest;
        this.location = location;
        this.name = name;
        this.project = project;
        this.queueId = Objects.requireNonNull(queueId, "expected parameter 'queueId' to be non-null");
        this.responseView = responseView;
        this.scheduleTime = scheduleTime;
    }

    private TaskArgs() {
        this.appEngineHttpRequest = Input.empty();
        this.dispatchDeadline = Input.empty();
        this.httpRequest = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.queueId = Input.empty();
        this.responseView = Input.empty();
        this.scheduleTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AppEngineHttpRequestArgs> appEngineHttpRequest;
        private @Nullable Input<String> dispatchDeadline;
        private @Nullable Input<HttpRequestArgs> httpRequest;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private Input<String> queueId;
        private @Nullable Input<TaskResponseView> responseView;
        private @Nullable Input<String> scheduleTime;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineHttpRequest = defaults.appEngineHttpRequest;
    	      this.dispatchDeadline = defaults.dispatchDeadline;
    	      this.httpRequest = defaults.httpRequest;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.queueId = defaults.queueId;
    	      this.responseView = defaults.responseView;
    	      this.scheduleTime = defaults.scheduleTime;
        }

        public Builder setAppEngineHttpRequest(@Nullable Input<AppEngineHttpRequestArgs> appEngineHttpRequest) {
            this.appEngineHttpRequest = appEngineHttpRequest;
            return this;
        }

        public Builder setAppEngineHttpRequest(@Nullable AppEngineHttpRequestArgs appEngineHttpRequest) {
            this.appEngineHttpRequest = Input.ofNullable(appEngineHttpRequest);
            return this;
        }

        public Builder setDispatchDeadline(@Nullable Input<String> dispatchDeadline) {
            this.dispatchDeadline = dispatchDeadline;
            return this;
        }

        public Builder setDispatchDeadline(@Nullable String dispatchDeadline) {
            this.dispatchDeadline = Input.ofNullable(dispatchDeadline);
            return this;
        }

        public Builder setHttpRequest(@Nullable Input<HttpRequestArgs> httpRequest) {
            this.httpRequest = httpRequest;
            return this;
        }

        public Builder setHttpRequest(@Nullable HttpRequestArgs httpRequest) {
            this.httpRequest = Input.ofNullable(httpRequest);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setQueueId(Input<String> queueId) {
            this.queueId = Objects.requireNonNull(queueId);
            return this;
        }

        public Builder setQueueId(String queueId) {
            this.queueId = Input.of(Objects.requireNonNull(queueId));
            return this;
        }

        public Builder setResponseView(@Nullable Input<TaskResponseView> responseView) {
            this.responseView = responseView;
            return this;
        }

        public Builder setResponseView(@Nullable TaskResponseView responseView) {
            this.responseView = Input.ofNullable(responseView);
            return this;
        }

        public Builder setScheduleTime(@Nullable Input<String> scheduleTime) {
            this.scheduleTime = scheduleTime;
            return this;
        }

        public Builder setScheduleTime(@Nullable String scheduleTime) {
            this.scheduleTime = Input.ofNullable(scheduleTime);
            return this;
        }

        public TaskArgs build() {
            return new TaskArgs(appEngineHttpRequest, dispatchDeadline, httpRequest, location, name, project, queueId, responseView, scheduleTime);
        }
    }
}
