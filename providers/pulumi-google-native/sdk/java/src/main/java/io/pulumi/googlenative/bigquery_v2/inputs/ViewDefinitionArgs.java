// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.UserDefinedFunctionResourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ViewDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ViewDefinitionArgs Empty = new ViewDefinitionArgs();

    /**
     * [Required] A query that BigQuery executes when the view is referenced.
     * 
     */
    @InputImport(name="query")
      private final @Nullable Input<String> query;

    public Input<String> getQuery() {
        return this.query == null ? Input.empty() : this.query;
    }

    /**
     * True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
     * 
     */
    @InputImport(name="useExplicitColumnNames")
      private final @Nullable Input<Boolean> useExplicitColumnNames;

    public Input<Boolean> getUseExplicitColumnNames() {
        return this.useExplicitColumnNames == null ? Input.empty() : this.useExplicitColumnNames;
    }

    /**
     * Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
     * 
     */
    @InputImport(name="useLegacySql")
      private final @Nullable Input<Boolean> useLegacySql;

    public Input<Boolean> getUseLegacySql() {
        return this.useLegacySql == null ? Input.empty() : this.useLegacySql;
    }

    /**
     * Describes user-defined function resources used in the query.
     * 
     */
    @InputImport(name="userDefinedFunctionResources")
      private final @Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources;

    public Input<List<UserDefinedFunctionResourceArgs>> getUserDefinedFunctionResources() {
        return this.userDefinedFunctionResources == null ? Input.empty() : this.userDefinedFunctionResources;
    }

    public ViewDefinitionArgs(
        @Nullable Input<String> query,
        @Nullable Input<Boolean> useExplicitColumnNames,
        @Nullable Input<Boolean> useLegacySql,
        @Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources) {
        this.query = query;
        this.useExplicitColumnNames = useExplicitColumnNames;
        this.useLegacySql = useLegacySql;
        this.userDefinedFunctionResources = userDefinedFunctionResources;
    }

    private ViewDefinitionArgs() {
        this.query = Input.empty();
        this.useExplicitColumnNames = Input.empty();
        this.useLegacySql = Input.empty();
        this.userDefinedFunctionResources = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ViewDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> query;
        private @Nullable Input<Boolean> useExplicitColumnNames;
        private @Nullable Input<Boolean> useLegacySql;
        private @Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources;

        public Builder() {
    	      // Empty
        }

        public Builder(ViewDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.query = defaults.query;
    	      this.useExplicitColumnNames = defaults.useExplicitColumnNames;
    	      this.useLegacySql = defaults.useLegacySql;
    	      this.userDefinedFunctionResources = defaults.userDefinedFunctionResources;
        }

        public Builder setQuery(@Nullable Input<String> query) {
            this.query = query;
            return this;
        }

        public Builder setQuery(@Nullable String query) {
            this.query = Input.ofNullable(query);
            return this;
        }

        public Builder setUseExplicitColumnNames(@Nullable Input<Boolean> useExplicitColumnNames) {
            this.useExplicitColumnNames = useExplicitColumnNames;
            return this;
        }

        public Builder setUseExplicitColumnNames(@Nullable Boolean useExplicitColumnNames) {
            this.useExplicitColumnNames = Input.ofNullable(useExplicitColumnNames);
            return this;
        }

        public Builder setUseLegacySql(@Nullable Input<Boolean> useLegacySql) {
            this.useLegacySql = useLegacySql;
            return this;
        }

        public Builder setUseLegacySql(@Nullable Boolean useLegacySql) {
            this.useLegacySql = Input.ofNullable(useLegacySql);
            return this;
        }

        public Builder setUserDefinedFunctionResources(@Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = userDefinedFunctionResources;
            return this;
        }

        public Builder setUserDefinedFunctionResources(@Nullable List<UserDefinedFunctionResourceArgs> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = Input.ofNullable(userDefinedFunctionResources);
            return this;
        }
        public ViewDefinitionArgs build() {
            return new ViewDefinitionArgs(query, useExplicitColumnNames, useLegacySql, userDefinedFunctionResources);
        }
    }
}
