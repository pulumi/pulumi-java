// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.deploymentmanager_v2beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.deploymentmanager_v2beta.inputs.DiagnosticArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PollingOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PollingOptionsArgs Empty = new PollingOptionsArgs();

    /**
     * An array of diagnostics to be collected by Deployment Manager, these diagnostics will be displayed to the user.
     * 
     */
    @Import(name="diagnostics")
      private final @Nullable Output<List<DiagnosticArgs>> diagnostics;

    public Output<List<DiagnosticArgs>> getDiagnostics() {
        return this.diagnostics == null ? Codegen.empty() : this.diagnostics;
    }

    /**
     * JsonPath expression that determines if the request failed.
     * 
     */
    @Import(name="failCondition")
      private final @Nullable Output<String> failCondition;

    public Output<String> getFailCondition() {
        return this.failCondition == null ? Codegen.empty() : this.failCondition;
    }

    /**
     * JsonPath expression that determines if the request is completed.
     * 
     */
    @Import(name="finishCondition")
      private final @Nullable Output<String> finishCondition;

    public Output<String> getFinishCondition() {
        return this.finishCondition == null ? Codegen.empty() : this.finishCondition;
    }

    /**
     * JsonPath expression that evaluates to string, it indicates where to poll.
     * 
     */
    @Import(name="pollingLink")
      private final @Nullable Output<String> pollingLink;

    public Output<String> getPollingLink() {
        return this.pollingLink == null ? Codegen.empty() : this.pollingLink;
    }

    /**
     * JsonPath expression, after polling is completed, indicates where to fetch the resource.
     * 
     */
    @Import(name="targetLink")
      private final @Nullable Output<String> targetLink;

    public Output<String> getTargetLink() {
        return this.targetLink == null ? Codegen.empty() : this.targetLink;
    }

    public PollingOptionsArgs(
        @Nullable Output<List<DiagnosticArgs>> diagnostics,
        @Nullable Output<String> failCondition,
        @Nullable Output<String> finishCondition,
        @Nullable Output<String> pollingLink,
        @Nullable Output<String> targetLink) {
        this.diagnostics = diagnostics;
        this.failCondition = failCondition;
        this.finishCondition = finishCondition;
        this.pollingLink = pollingLink;
        this.targetLink = targetLink;
    }

    private PollingOptionsArgs() {
        this.diagnostics = Codegen.empty();
        this.failCondition = Codegen.empty();
        this.finishCondition = Codegen.empty();
        this.pollingLink = Codegen.empty();
        this.targetLink = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PollingOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<DiagnosticArgs>> diagnostics;
        private @Nullable Output<String> failCondition;
        private @Nullable Output<String> finishCondition;
        private @Nullable Output<String> pollingLink;
        private @Nullable Output<String> targetLink;

        public Builder() {
    	      // Empty
        }

        public Builder(PollingOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diagnostics = defaults.diagnostics;
    	      this.failCondition = defaults.failCondition;
    	      this.finishCondition = defaults.finishCondition;
    	      this.pollingLink = defaults.pollingLink;
    	      this.targetLink = defaults.targetLink;
        }

        public Builder diagnostics(@Nullable Output<List<DiagnosticArgs>> diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }
        public Builder diagnostics(@Nullable List<DiagnosticArgs> diagnostics) {
            this.diagnostics = Codegen.ofNullable(diagnostics);
            return this;
        }
        public Builder diagnostics(DiagnosticArgs... diagnostics) {
            return diagnostics(List.of(diagnostics));
        }
        public Builder failCondition(@Nullable Output<String> failCondition) {
            this.failCondition = failCondition;
            return this;
        }
        public Builder failCondition(@Nullable String failCondition) {
            this.failCondition = Codegen.ofNullable(failCondition);
            return this;
        }
        public Builder finishCondition(@Nullable Output<String> finishCondition) {
            this.finishCondition = finishCondition;
            return this;
        }
        public Builder finishCondition(@Nullable String finishCondition) {
            this.finishCondition = Codegen.ofNullable(finishCondition);
            return this;
        }
        public Builder pollingLink(@Nullable Output<String> pollingLink) {
            this.pollingLink = pollingLink;
            return this;
        }
        public Builder pollingLink(@Nullable String pollingLink) {
            this.pollingLink = Codegen.ofNullable(pollingLink);
            return this;
        }
        public Builder targetLink(@Nullable Output<String> targetLink) {
            this.targetLink = targetLink;
            return this;
        }
        public Builder targetLink(@Nullable String targetLink) {
            this.targetLink = Codegen.ofNullable(targetLink);
            return this;
        }        public PollingOptionsArgs build() {
            return new PollingOptionsArgs(diagnostics, failCondition, finishCondition, pollingLink, targetLink);
        }
    }
}
