// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudscheduler_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudscheduler_v1beta1.outputs.AppEngineHttpTargetResponse;
import io.pulumi.googlenative.cloudscheduler_v1beta1.outputs.HttpTargetResponse;
import io.pulumi.googlenative.cloudscheduler_v1beta1.outputs.PubsubTargetResponse;
import io.pulumi.googlenative.cloudscheduler_v1beta1.outputs.RetryConfigResponse;
import io.pulumi.googlenative.cloudscheduler_v1beta1.outputs.StatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class GetJobResult {
    /**
     * App Engine HTTP target.
     * 
     */
    private final AppEngineHttpTargetResponse appEngineHttpTarget;
    /**
     * The deadline for job attempts. If the request handler does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in execution logs. Cloud Scheduler will retry the job according to the RetryConfig. The allowed duration for this deadline is: * For HTTP targets, between 15 seconds and 30 minutes. * For App Engine HTTP targets, between 15 seconds and 24 hours 15 seconds. * For PubSub targets, this field is ignored.
     * 
     */
    private final String attemptDeadline;
    /**
     * Optionally caller-specified in CreateJob or UpdateJob. A human-readable description for the job. This string must not contain more than 500 characters.
     * 
     */
    private final String description;
    /**
     * HTTP target.
     * 
     */
    private final HttpTargetResponse httpTarget;
    /**
     * The time the last job attempt started.
     * 
     */
    private final String lastAttemptTime;
    /**
     * Immutable. This field is used to manage the legacy App Engine Cron jobs using the Cloud Scheduler API. If the field is set to true, the job will be considered a legacy job. Note that App Engine Cron jobs have fewer features than Cloud Scheduler jobs, e.g., are only limited to App Engine targets.
     * 
     */
    private final Boolean legacyAppEngineCron;
    /**
     * Optionally caller-specified in CreateJob, after which it becomes output only. The job name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the job's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
     * 
     */
    private final String name;
    /**
     * Pub/Sub target.
     * 
     */
    private final PubsubTargetResponse pubsubTarget;
    /**
     * Settings that determine the retry behavior.
     * 
     */
    private final RetryConfigResponse retryConfig;
    /**
     * Required, except when used with UpdateJob. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](http://en.wikipedia.org/wiki/Cron#Overview) * English-like [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules) As a general rule, execution `n + 1` of a job will not begin until execution `n` has finished. Cloud Scheduler will never allow two simultaneously outstanding executions. For example, this implies that if the `n+1`th execution is scheduled to run at 16:00 but the `n`th execution takes until 16:15, the `n+1`th execution will not start until `16:15`. A scheduled start time will be delayed if the previous execution has not ended when its scheduled time occurs. If retry_count > 0 and a job attempt fails, the job will be tried a total of retry_count times, with exponential backoff, until the next scheduled start time.
     * 
     */
    private final String schedule;
    /**
     * The next time the job is scheduled. Note that this may be a retry of a previously failed attempt or the next execution time according to the schedule.
     * 
     */
    private final String scheduleTime;
    /**
     * State of the job.
     * 
     */
    private final String state;
    /**
     * The response from the target for the last attempted execution.
     * 
     */
    private final StatusResponse status;
    /**
     * Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
     * 
     */
    private final String timeZone;
    /**
     * The creation time of the job.
     * 
     */
    private final String userUpdateTime;

    @OutputCustomType.Constructor({"appEngineHttpTarget","attemptDeadline","description","httpTarget","lastAttemptTime","legacyAppEngineCron","name","pubsubTarget","retryConfig","schedule","scheduleTime","state","status","timeZone","userUpdateTime"})
    private GetJobResult(
        AppEngineHttpTargetResponse appEngineHttpTarget,
        String attemptDeadline,
        String description,
        HttpTargetResponse httpTarget,
        String lastAttemptTime,
        Boolean legacyAppEngineCron,
        String name,
        PubsubTargetResponse pubsubTarget,
        RetryConfigResponse retryConfig,
        String schedule,
        String scheduleTime,
        String state,
        StatusResponse status,
        String timeZone,
        String userUpdateTime) {
        this.appEngineHttpTarget = Objects.requireNonNull(appEngineHttpTarget);
        this.attemptDeadline = Objects.requireNonNull(attemptDeadline);
        this.description = Objects.requireNonNull(description);
        this.httpTarget = Objects.requireNonNull(httpTarget);
        this.lastAttemptTime = Objects.requireNonNull(lastAttemptTime);
        this.legacyAppEngineCron = Objects.requireNonNull(legacyAppEngineCron);
        this.name = Objects.requireNonNull(name);
        this.pubsubTarget = Objects.requireNonNull(pubsubTarget);
        this.retryConfig = Objects.requireNonNull(retryConfig);
        this.schedule = Objects.requireNonNull(schedule);
        this.scheduleTime = Objects.requireNonNull(scheduleTime);
        this.state = Objects.requireNonNull(state);
        this.status = Objects.requireNonNull(status);
        this.timeZone = Objects.requireNonNull(timeZone);
        this.userUpdateTime = Objects.requireNonNull(userUpdateTime);
    }

    /**
     * App Engine HTTP target.
     * 
    */
    public AppEngineHttpTargetResponse getAppEngineHttpTarget() {
        return this.appEngineHttpTarget;
    }
    /**
     * The deadline for job attempts. If the request handler does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in execution logs. Cloud Scheduler will retry the job according to the RetryConfig. The allowed duration for this deadline is: * For HTTP targets, between 15 seconds and 30 minutes. * For App Engine HTTP targets, between 15 seconds and 24 hours 15 seconds. * For PubSub targets, this field is ignored.
     * 
    */
    public String getAttemptDeadline() {
        return this.attemptDeadline;
    }
    /**
     * Optionally caller-specified in CreateJob or UpdateJob. A human-readable description for the job. This string must not contain more than 500 characters.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * HTTP target.
     * 
    */
    public HttpTargetResponse getHttpTarget() {
        return this.httpTarget;
    }
    /**
     * The time the last job attempt started.
     * 
    */
    public String getLastAttemptTime() {
        return this.lastAttemptTime;
    }
    /**
     * Immutable. This field is used to manage the legacy App Engine Cron jobs using the Cloud Scheduler API. If the field is set to true, the job will be considered a legacy job. Note that App Engine Cron jobs have fewer features than Cloud Scheduler jobs, e.g., are only limited to App Engine targets.
     * 
    */
    public Boolean getLegacyAppEngineCron() {
        return this.legacyAppEngineCron;
    }
    /**
     * Optionally caller-specified in CreateJob, after which it becomes output only. The job name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the job's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Pub/Sub target.
     * 
    */
    public PubsubTargetResponse getPubsubTarget() {
        return this.pubsubTarget;
    }
    /**
     * Settings that determine the retry behavior.
     * 
    */
    public RetryConfigResponse getRetryConfig() {
        return this.retryConfig;
    }
    /**
     * Required, except when used with UpdateJob. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](http://en.wikipedia.org/wiki/Cron#Overview) * English-like [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules) As a general rule, execution `n + 1` of a job will not begin until execution `n` has finished. Cloud Scheduler will never allow two simultaneously outstanding executions. For example, this implies that if the `n+1`th execution is scheduled to run at 16:00 but the `n`th execution takes until 16:15, the `n+1`th execution will not start until `16:15`. A scheduled start time will be delayed if the previous execution has not ended when its scheduled time occurs. If retry_count > 0 and a job attempt fails, the job will be tried a total of retry_count times, with exponential backoff, until the next scheduled start time.
     * 
    */
    public String getSchedule() {
        return this.schedule;
    }
    /**
     * The next time the job is scheduled. Note that this may be a retry of a previously failed attempt or the next execution time according to the schedule.
     * 
    */
    public String getScheduleTime() {
        return this.scheduleTime;
    }
    /**
     * State of the job.
     * 
    */
    public String getState() {
        return this.state;
    }
    /**
     * The response from the target for the last attempted execution.
     * 
    */
    public StatusResponse getStatus() {
        return this.status;
    }
    /**
     * Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
     * 
    */
    public String getTimeZone() {
        return this.timeZone;
    }
    /**
     * The creation time of the job.
     * 
    */
    public String getUserUpdateTime() {
        return this.userUpdateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppEngineHttpTargetResponse appEngineHttpTarget;
        private String attemptDeadline;
        private String description;
        private HttpTargetResponse httpTarget;
        private String lastAttemptTime;
        private Boolean legacyAppEngineCron;
        private String name;
        private PubsubTargetResponse pubsubTarget;
        private RetryConfigResponse retryConfig;
        private String schedule;
        private String scheduleTime;
        private String state;
        private StatusResponse status;
        private String timeZone;
        private String userUpdateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineHttpTarget = defaults.appEngineHttpTarget;
    	      this.attemptDeadline = defaults.attemptDeadline;
    	      this.description = defaults.description;
    	      this.httpTarget = defaults.httpTarget;
    	      this.lastAttemptTime = defaults.lastAttemptTime;
    	      this.legacyAppEngineCron = defaults.legacyAppEngineCron;
    	      this.name = defaults.name;
    	      this.pubsubTarget = defaults.pubsubTarget;
    	      this.retryConfig = defaults.retryConfig;
    	      this.schedule = defaults.schedule;
    	      this.scheduleTime = defaults.scheduleTime;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeZone = defaults.timeZone;
    	      this.userUpdateTime = defaults.userUpdateTime;
        }

        public Builder setAppEngineHttpTarget(AppEngineHttpTargetResponse appEngineHttpTarget) {
            this.appEngineHttpTarget = Objects.requireNonNull(appEngineHttpTarget);
            return this;
        }

        public Builder setAttemptDeadline(String attemptDeadline) {
            this.attemptDeadline = Objects.requireNonNull(attemptDeadline);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setHttpTarget(HttpTargetResponse httpTarget) {
            this.httpTarget = Objects.requireNonNull(httpTarget);
            return this;
        }

        public Builder setLastAttemptTime(String lastAttemptTime) {
            this.lastAttemptTime = Objects.requireNonNull(lastAttemptTime);
            return this;
        }

        public Builder setLegacyAppEngineCron(Boolean legacyAppEngineCron) {
            this.legacyAppEngineCron = Objects.requireNonNull(legacyAppEngineCron);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPubsubTarget(PubsubTargetResponse pubsubTarget) {
            this.pubsubTarget = Objects.requireNonNull(pubsubTarget);
            return this;
        }

        public Builder setRetryConfig(RetryConfigResponse retryConfig) {
            this.retryConfig = Objects.requireNonNull(retryConfig);
            return this;
        }

        public Builder setSchedule(String schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }

        public Builder setScheduleTime(String scheduleTime) {
            this.scheduleTime = Objects.requireNonNull(scheduleTime);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setStatus(StatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTimeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }

        public Builder setUserUpdateTime(String userUpdateTime) {
            this.userUpdateTime = Objects.requireNonNull(userUpdateTime);
            return this;
        }
        public GetJobResult build() {
            return new GetJobResult(appEngineHttpTarget, attemptDeadline, description, httpTarget, lastAttemptTime, legacyAppEngineCron, name, pubsubTarget, retryConfig, schedule, scheduleTime, state, status, timeZone, userUpdateTime);
        }
    }
}
