// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.domains_v1alpha2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class PostalAddressResponse extends io.pulumi.resources.InvokeArgs {

    public static final PostalAddressResponse Empty = new PostalAddressResponse();

    @InputImport(name="addressLines", required=true)
    private final List<String> addressLines;

    public List<String> getAddressLines() {
        return this.addressLines;
    }

    @InputImport(name="administrativeArea", required=true)
    private final String administrativeArea;

    public String getAdministrativeArea() {
        return this.administrativeArea;
    }

    @InputImport(name="languageCode", required=true)
    private final String languageCode;

    public String getLanguageCode() {
        return this.languageCode;
    }

    @InputImport(name="locality", required=true)
    private final String locality;

    public String getLocality() {
        return this.locality;
    }

    @InputImport(name="organization", required=true)
    private final String organization;

    public String getOrganization() {
        return this.organization;
    }

    @InputImport(name="postalCode", required=true)
    private final String postalCode;

    public String getPostalCode() {
        return this.postalCode;
    }

    @InputImport(name="recipients", required=true)
    private final List<String> recipients;

    public List<String> getRecipients() {
        return this.recipients;
    }

    @InputImport(name="regionCode", required=true)
    private final String regionCode;

    public String getRegionCode() {
        return this.regionCode;
    }

    @InputImport(name="revision", required=true)
    private final Integer revision;

    public Integer getRevision() {
        return this.revision;
    }

    @InputImport(name="sortingCode", required=true)
    private final String sortingCode;

    public String getSortingCode() {
        return this.sortingCode;
    }

    @InputImport(name="sublocality", required=true)
    private final String sublocality;

    public String getSublocality() {
        return this.sublocality;
    }

    public PostalAddressResponse(
        List<String> addressLines,
        String administrativeArea,
        String languageCode,
        String locality,
        String organization,
        String postalCode,
        List<String> recipients,
        String regionCode,
        Integer revision,
        String sortingCode,
        String sublocality) {
        this.addressLines = Objects.requireNonNull(addressLines, "expected parameter 'addressLines' to be non-null");
        this.administrativeArea = Objects.requireNonNull(administrativeArea, "expected parameter 'administrativeArea' to be non-null");
        this.languageCode = Objects.requireNonNull(languageCode, "expected parameter 'languageCode' to be non-null");
        this.locality = Objects.requireNonNull(locality, "expected parameter 'locality' to be non-null");
        this.organization = Objects.requireNonNull(organization, "expected parameter 'organization' to be non-null");
        this.postalCode = Objects.requireNonNull(postalCode, "expected parameter 'postalCode' to be non-null");
        this.recipients = Objects.requireNonNull(recipients, "expected parameter 'recipients' to be non-null");
        this.regionCode = Objects.requireNonNull(regionCode, "expected parameter 'regionCode' to be non-null");
        this.revision = Objects.requireNonNull(revision, "expected parameter 'revision' to be non-null");
        this.sortingCode = Objects.requireNonNull(sortingCode, "expected parameter 'sortingCode' to be non-null");
        this.sublocality = Objects.requireNonNull(sublocality, "expected parameter 'sublocality' to be non-null");
    }

    private PostalAddressResponse() {
        this.addressLines = List.of();
        this.administrativeArea = null;
        this.languageCode = null;
        this.locality = null;
        this.organization = null;
        this.postalCode = null;
        this.recipients = List.of();
        this.regionCode = null;
        this.revision = null;
        this.sortingCode = null;
        this.sublocality = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PostalAddressResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> addressLines;
        private String administrativeArea;
        private String languageCode;
        private String locality;
        private String organization;
        private String postalCode;
        private List<String> recipients;
        private String regionCode;
        private Integer revision;
        private String sortingCode;
        private String sublocality;

        public Builder() {
    	      // Empty
        }

        public Builder(PostalAddressResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressLines = defaults.addressLines;
    	      this.administrativeArea = defaults.administrativeArea;
    	      this.languageCode = defaults.languageCode;
    	      this.locality = defaults.locality;
    	      this.organization = defaults.organization;
    	      this.postalCode = defaults.postalCode;
    	      this.recipients = defaults.recipients;
    	      this.regionCode = defaults.regionCode;
    	      this.revision = defaults.revision;
    	      this.sortingCode = defaults.sortingCode;
    	      this.sublocality = defaults.sublocality;
        }

        public Builder setAddressLines(List<String> addressLines) {
            this.addressLines = Objects.requireNonNull(addressLines);
            return this;
        }

        public Builder setAdministrativeArea(String administrativeArea) {
            this.administrativeArea = Objects.requireNonNull(administrativeArea);
            return this;
        }

        public Builder setLanguageCode(String languageCode) {
            this.languageCode = Objects.requireNonNull(languageCode);
            return this;
        }

        public Builder setLocality(String locality) {
            this.locality = Objects.requireNonNull(locality);
            return this;
        }

        public Builder setOrganization(String organization) {
            this.organization = Objects.requireNonNull(organization);
            return this;
        }

        public Builder setPostalCode(String postalCode) {
            this.postalCode = Objects.requireNonNull(postalCode);
            return this;
        }

        public Builder setRecipients(List<String> recipients) {
            this.recipients = Objects.requireNonNull(recipients);
            return this;
        }

        public Builder setRegionCode(String regionCode) {
            this.regionCode = Objects.requireNonNull(regionCode);
            return this;
        }

        public Builder setRevision(Integer revision) {
            this.revision = Objects.requireNonNull(revision);
            return this;
        }

        public Builder setSortingCode(String sortingCode) {
            this.sortingCode = Objects.requireNonNull(sortingCode);
            return this;
        }

        public Builder setSublocality(String sublocality) {
            this.sublocality = Objects.requireNonNull(sublocality);
            return this;
        }

        public PostalAddressResponse build() {
            return new PostalAddressResponse(addressLines, administrativeArea, languageCode, locality, organization, postalCode, recipients, regionCode, revision, sortingCode, sublocality);
        }
    }
}
