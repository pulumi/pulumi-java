// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_beta.outputs.SubnetworkLogConfigResponse;
import io.pulumi.googlenative.compute_beta.outputs.SubnetworkSecondaryRangeResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetSubnetworkResult {
    private final Boolean allowSubnetCidrRoutesOverlap;
    private final String creationTimestamp;
    private final String description;
    private final Boolean enableFlowLogs;
    private final String externalIpv6Prefix;
    private final String fingerprint;
    private final String gatewayAddress;
    private final String ipCidrRange;
    private final String ipv6AccessType;
    private final String ipv6CidrRange;
    private final String kind;
    private final SubnetworkLogConfigResponse logConfig;
    private final String name;
    private final String network;
    private final Boolean privateIpGoogleAccess;
    private final String privateIpv6GoogleAccess;
    private final String purpose;
    private final String region;
    private final String role;
    private final List<SubnetworkSecondaryRangeResponse> secondaryIpRanges;
    private final String selfLink;
    private final String stackType;
    private final String state;

    @OutputCustomType.Constructor({"allowSubnetCidrRoutesOverlap","creationTimestamp","description","enableFlowLogs","externalIpv6Prefix","fingerprint","gatewayAddress","ipCidrRange","ipv6AccessType","ipv6CidrRange","kind","logConfig","name","network","privateIpGoogleAccess","privateIpv6GoogleAccess","purpose","region","role","secondaryIpRanges","selfLink","stackType","state"})
    private GetSubnetworkResult(
        Boolean allowSubnetCidrRoutesOverlap,
        String creationTimestamp,
        String description,
        Boolean enableFlowLogs,
        String externalIpv6Prefix,
        String fingerprint,
        String gatewayAddress,
        String ipCidrRange,
        String ipv6AccessType,
        String ipv6CidrRange,
        String kind,
        SubnetworkLogConfigResponse logConfig,
        String name,
        String network,
        Boolean privateIpGoogleAccess,
        String privateIpv6GoogleAccess,
        String purpose,
        String region,
        String role,
        List<SubnetworkSecondaryRangeResponse> secondaryIpRanges,
        String selfLink,
        String stackType,
        String state) {
        this.allowSubnetCidrRoutesOverlap = Objects.requireNonNull(allowSubnetCidrRoutesOverlap);
        this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
        this.description = Objects.requireNonNull(description);
        this.enableFlowLogs = Objects.requireNonNull(enableFlowLogs);
        this.externalIpv6Prefix = Objects.requireNonNull(externalIpv6Prefix);
        this.fingerprint = Objects.requireNonNull(fingerprint);
        this.gatewayAddress = Objects.requireNonNull(gatewayAddress);
        this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
        this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
        this.ipv6CidrRange = Objects.requireNonNull(ipv6CidrRange);
        this.kind = Objects.requireNonNull(kind);
        this.logConfig = Objects.requireNonNull(logConfig);
        this.name = Objects.requireNonNull(name);
        this.network = Objects.requireNonNull(network);
        this.privateIpGoogleAccess = Objects.requireNonNull(privateIpGoogleAccess);
        this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
        this.purpose = Objects.requireNonNull(purpose);
        this.region = Objects.requireNonNull(region);
        this.role = Objects.requireNonNull(role);
        this.secondaryIpRanges = Objects.requireNonNull(secondaryIpRanges);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.stackType = Objects.requireNonNull(stackType);
        this.state = Objects.requireNonNull(state);
    }

    public Boolean getAllowSubnetCidrRoutesOverlap() {
        return this.allowSubnetCidrRoutesOverlap;
    }
    public String getCreationTimestamp() {
        return this.creationTimestamp;
    }
    public String getDescription() {
        return this.description;
    }
    public Boolean getEnableFlowLogs() {
        return this.enableFlowLogs;
    }
    public String getExternalIpv6Prefix() {
        return this.externalIpv6Prefix;
    }
    public String getFingerprint() {
        return this.fingerprint;
    }
    public String getGatewayAddress() {
        return this.gatewayAddress;
    }
    public String getIpCidrRange() {
        return this.ipCidrRange;
    }
    public String getIpv6AccessType() {
        return this.ipv6AccessType;
    }
    public String getIpv6CidrRange() {
        return this.ipv6CidrRange;
    }
    public String getKind() {
        return this.kind;
    }
    public SubnetworkLogConfigResponse getLogConfig() {
        return this.logConfig;
    }
    public String getName() {
        return this.name;
    }
    public String getNetwork() {
        return this.network;
    }
    public Boolean getPrivateIpGoogleAccess() {
        return this.privateIpGoogleAccess;
    }
    public String getPrivateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }
    public String getPurpose() {
        return this.purpose;
    }
    public String getRegion() {
        return this.region;
    }
    public String getRole() {
        return this.role;
    }
    public List<SubnetworkSecondaryRangeResponse> getSecondaryIpRanges() {
        return this.secondaryIpRanges;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public String getStackType() {
        return this.stackType;
    }
    public String getState() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetworkResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowSubnetCidrRoutesOverlap;
        private String creationTimestamp;
        private String description;
        private Boolean enableFlowLogs;
        private String externalIpv6Prefix;
        private String fingerprint;
        private String gatewayAddress;
        private String ipCidrRange;
        private String ipv6AccessType;
        private String ipv6CidrRange;
        private String kind;
        private SubnetworkLogConfigResponse logConfig;
        private String name;
        private String network;
        private Boolean privateIpGoogleAccess;
        private String privateIpv6GoogleAccess;
        private String purpose;
        private String region;
        private String role;
        private List<SubnetworkSecondaryRangeResponse> secondaryIpRanges;
        private String selfLink;
        private String stackType;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSubnetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowSubnetCidrRoutesOverlap = defaults.allowSubnetCidrRoutesOverlap;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.enableFlowLogs = defaults.enableFlowLogs;
    	      this.externalIpv6Prefix = defaults.externalIpv6Prefix;
    	      this.fingerprint = defaults.fingerprint;
    	      this.gatewayAddress = defaults.gatewayAddress;
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.ipv6CidrRange = defaults.ipv6CidrRange;
    	      this.kind = defaults.kind;
    	      this.logConfig = defaults.logConfig;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.privateIpGoogleAccess = defaults.privateIpGoogleAccess;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.purpose = defaults.purpose;
    	      this.region = defaults.region;
    	      this.role = defaults.role;
    	      this.secondaryIpRanges = defaults.secondaryIpRanges;
    	      this.selfLink = defaults.selfLink;
    	      this.stackType = defaults.stackType;
    	      this.state = defaults.state;
        }

        public Builder setAllowSubnetCidrRoutesOverlap(Boolean allowSubnetCidrRoutesOverlap) {
            this.allowSubnetCidrRoutesOverlap = Objects.requireNonNull(allowSubnetCidrRoutesOverlap);
            return this;
        }

        public Builder setCreationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEnableFlowLogs(Boolean enableFlowLogs) {
            this.enableFlowLogs = Objects.requireNonNull(enableFlowLogs);
            return this;
        }

        public Builder setExternalIpv6Prefix(String externalIpv6Prefix) {
            this.externalIpv6Prefix = Objects.requireNonNull(externalIpv6Prefix);
            return this;
        }

        public Builder setFingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }

        public Builder setGatewayAddress(String gatewayAddress) {
            this.gatewayAddress = Objects.requireNonNull(gatewayAddress);
            return this;
        }

        public Builder setIpCidrRange(String ipCidrRange) {
            this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
            return this;
        }

        public Builder setIpv6AccessType(String ipv6AccessType) {
            this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
            return this;
        }

        public Builder setIpv6CidrRange(String ipv6CidrRange) {
            this.ipv6CidrRange = Objects.requireNonNull(ipv6CidrRange);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLogConfig(SubnetworkLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNetwork(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }

        public Builder setPrivateIpGoogleAccess(Boolean privateIpGoogleAccess) {
            this.privateIpGoogleAccess = Objects.requireNonNull(privateIpGoogleAccess);
            return this;
        }

        public Builder setPrivateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
            return this;
        }

        public Builder setPurpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }

        public Builder setRegion(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder setRole(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }

        public Builder setSecondaryIpRanges(List<SubnetworkSecondaryRangeResponse> secondaryIpRanges) {
            this.secondaryIpRanges = Objects.requireNonNull(secondaryIpRanges);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setStackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public GetSubnetworkResult build() {
            return new GetSubnetworkResult(allowSubnetCidrRoutesOverlap, creationTimestamp, description, enableFlowLogs, externalIpv6Prefix, fingerprint, gatewayAddress, ipCidrRange, ipv6AccessType, ipv6CidrRange, kind, logConfig, name, network, privateIpGoogleAccess, privateIpv6GoogleAccess, purpose, region, role, secondaryIpRanges, selfLink, stackType, state);
        }
    }
}
