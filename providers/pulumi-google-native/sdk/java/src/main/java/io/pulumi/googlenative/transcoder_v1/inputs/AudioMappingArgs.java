// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
 * 
 */
public final class AudioMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final AudioMappingArgs Empty = new AudioMappingArgs();

    /**
     * The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
     * 
     */
    @InputImport(name="atomKey", required=true)
      private final Output<String> atomKey;

    public Output<String> getAtomKey() {
        return this.atomKey;
    }

    /**
     * Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
     * 
     */
    @InputImport(name="gainDb")
      private final @Nullable Output<Double> gainDb;

    public Output<Double> getGainDb() {
        return this.gainDb == null ? Output.empty() : this.gainDb;
    }

    /**
     * The zero-based index of the channel in the input audio stream.
     * 
     */
    @InputImport(name="inputChannel", required=true)
      private final Output<Integer> inputChannel;

    public Output<Integer> getInputChannel() {
        return this.inputChannel;
    }

    /**
     * The `Input.key` that identifies the input file.
     * 
     */
    @InputImport(name="inputKey", required=true)
      private final Output<String> inputKey;

    public Output<String> getInputKey() {
        return this.inputKey;
    }

    /**
     * The zero-based index of the track in the input file.
     * 
     */
    @InputImport(name="inputTrack", required=true)
      private final Output<Integer> inputTrack;

    public Output<Integer> getInputTrack() {
        return this.inputTrack;
    }

    /**
     * The zero-based index of the channel in the output audio stream.
     * 
     */
    @InputImport(name="outputChannel", required=true)
      private final Output<Integer> outputChannel;

    public Output<Integer> getOutputChannel() {
        return this.outputChannel;
    }

    public AudioMappingArgs(
        Output<String> atomKey,
        @Nullable Output<Double> gainDb,
        Output<Integer> inputChannel,
        Output<String> inputKey,
        Output<Integer> inputTrack,
        Output<Integer> outputChannel) {
        this.atomKey = Objects.requireNonNull(atomKey, "expected parameter 'atomKey' to be non-null");
        this.gainDb = gainDb;
        this.inputChannel = Objects.requireNonNull(inputChannel, "expected parameter 'inputChannel' to be non-null");
        this.inputKey = Objects.requireNonNull(inputKey, "expected parameter 'inputKey' to be non-null");
        this.inputTrack = Objects.requireNonNull(inputTrack, "expected parameter 'inputTrack' to be non-null");
        this.outputChannel = Objects.requireNonNull(outputChannel, "expected parameter 'outputChannel' to be non-null");
    }

    private AudioMappingArgs() {
        this.atomKey = Output.empty();
        this.gainDb = Output.empty();
        this.inputChannel = Output.empty();
        this.inputKey = Output.empty();
        this.inputTrack = Output.empty();
        this.outputChannel = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AudioMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> atomKey;
        private @Nullable Output<Double> gainDb;
        private Output<Integer> inputChannel;
        private Output<String> inputKey;
        private Output<Integer> inputTrack;
        private Output<Integer> outputChannel;

        public Builder() {
    	      // Empty
        }

        public Builder(AudioMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atomKey = defaults.atomKey;
    	      this.gainDb = defaults.gainDb;
    	      this.inputChannel = defaults.inputChannel;
    	      this.inputKey = defaults.inputKey;
    	      this.inputTrack = defaults.inputTrack;
    	      this.outputChannel = defaults.outputChannel;
        }

        public Builder atomKey(Output<String> atomKey) {
            this.atomKey = Objects.requireNonNull(atomKey);
            return this;
        }

        public Builder atomKey(String atomKey) {
            this.atomKey = Output.of(Objects.requireNonNull(atomKey));
            return this;
        }

        public Builder gainDb(@Nullable Output<Double> gainDb) {
            this.gainDb = gainDb;
            return this;
        }

        public Builder gainDb(@Nullable Double gainDb) {
            this.gainDb = Output.ofNullable(gainDb);
            return this;
        }

        public Builder inputChannel(Output<Integer> inputChannel) {
            this.inputChannel = Objects.requireNonNull(inputChannel);
            return this;
        }

        public Builder inputChannel(Integer inputChannel) {
            this.inputChannel = Output.of(Objects.requireNonNull(inputChannel));
            return this;
        }

        public Builder inputKey(Output<String> inputKey) {
            this.inputKey = Objects.requireNonNull(inputKey);
            return this;
        }

        public Builder inputKey(String inputKey) {
            this.inputKey = Output.of(Objects.requireNonNull(inputKey));
            return this;
        }

        public Builder inputTrack(Output<Integer> inputTrack) {
            this.inputTrack = Objects.requireNonNull(inputTrack);
            return this;
        }

        public Builder inputTrack(Integer inputTrack) {
            this.inputTrack = Output.of(Objects.requireNonNull(inputTrack));
            return this;
        }

        public Builder outputChannel(Output<Integer> outputChannel) {
            this.outputChannel = Objects.requireNonNull(outputChannel);
            return this;
        }

        public Builder outputChannel(Integer outputChannel) {
            this.outputChannel = Output.of(Objects.requireNonNull(outputChannel));
            return this;
        }
        public AudioMappingArgs build() {
            return new AudioMappingArgs(atomKey, gainDb, inputChannel, inputKey, inputTrack, outputChannel);
        }
    }
}
