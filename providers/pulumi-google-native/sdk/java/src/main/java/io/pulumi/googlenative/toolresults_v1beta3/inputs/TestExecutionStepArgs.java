// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.TestIssueArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.TestSuiteOverviewArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.TestTimingArgs;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.ToolExecutionArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TestExecutionStepArgs extends io.pulumi.resources.ResourceArgs {

    public static final TestExecutionStepArgs Empty = new TestExecutionStepArgs();

    @InputImport(name="testIssues")
    private final @Nullable Input<List<TestIssueArgs>> testIssues;

    public Input<List<TestIssueArgs>> getTestIssues() {
        return this.testIssues == null ? Input.empty() : this.testIssues;
    }

    @InputImport(name="testSuiteOverviews")
    private final @Nullable Input<List<TestSuiteOverviewArgs>> testSuiteOverviews;

    public Input<List<TestSuiteOverviewArgs>> getTestSuiteOverviews() {
        return this.testSuiteOverviews == null ? Input.empty() : this.testSuiteOverviews;
    }

    @InputImport(name="testTiming")
    private final @Nullable Input<TestTimingArgs> testTiming;

    public Input<TestTimingArgs> getTestTiming() {
        return this.testTiming == null ? Input.empty() : this.testTiming;
    }

    @InputImport(name="toolExecution")
    private final @Nullable Input<ToolExecutionArgs> toolExecution;

    public Input<ToolExecutionArgs> getToolExecution() {
        return this.toolExecution == null ? Input.empty() : this.toolExecution;
    }

    public TestExecutionStepArgs(
        @Nullable Input<List<TestIssueArgs>> testIssues,
        @Nullable Input<List<TestSuiteOverviewArgs>> testSuiteOverviews,
        @Nullable Input<TestTimingArgs> testTiming,
        @Nullable Input<ToolExecutionArgs> toolExecution) {
        this.testIssues = testIssues;
        this.testSuiteOverviews = testSuiteOverviews;
        this.testTiming = testTiming;
        this.toolExecution = toolExecution;
    }

    private TestExecutionStepArgs() {
        this.testIssues = Input.empty();
        this.testSuiteOverviews = Input.empty();
        this.testTiming = Input.empty();
        this.toolExecution = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestExecutionStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<TestIssueArgs>> testIssues;
        private @Nullable Input<List<TestSuiteOverviewArgs>> testSuiteOverviews;
        private @Nullable Input<TestTimingArgs> testTiming;
        private @Nullable Input<ToolExecutionArgs> toolExecution;

        public Builder() {
    	      // Empty
        }

        public Builder(TestExecutionStepArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.testIssues = defaults.testIssues;
    	      this.testSuiteOverviews = defaults.testSuiteOverviews;
    	      this.testTiming = defaults.testTiming;
    	      this.toolExecution = defaults.toolExecution;
        }

        public Builder setTestIssues(@Nullable Input<List<TestIssueArgs>> testIssues) {
            this.testIssues = testIssues;
            return this;
        }

        public Builder setTestIssues(@Nullable List<TestIssueArgs> testIssues) {
            this.testIssues = Input.ofNullable(testIssues);
            return this;
        }

        public Builder setTestSuiteOverviews(@Nullable Input<List<TestSuiteOverviewArgs>> testSuiteOverviews) {
            this.testSuiteOverviews = testSuiteOverviews;
            return this;
        }

        public Builder setTestSuiteOverviews(@Nullable List<TestSuiteOverviewArgs> testSuiteOverviews) {
            this.testSuiteOverviews = Input.ofNullable(testSuiteOverviews);
            return this;
        }

        public Builder setTestTiming(@Nullable Input<TestTimingArgs> testTiming) {
            this.testTiming = testTiming;
            return this;
        }

        public Builder setTestTiming(@Nullable TestTimingArgs testTiming) {
            this.testTiming = Input.ofNullable(testTiming);
            return this;
        }

        public Builder setToolExecution(@Nullable Input<ToolExecutionArgs> toolExecution) {
            this.toolExecution = toolExecution;
            return this;
        }

        public Builder setToolExecution(@Nullable ToolExecutionArgs toolExecution) {
            this.toolExecution = Input.ofNullable(toolExecution);
            return this;
        }

        public TestExecutionStepArgs build() {
            return new TestExecutionStepArgs(testIssues, testSuiteOverviews, testTiming, toolExecution);
        }
    }
}
