// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RateLimitsArgs extends io.pulumi.resources.ResourceArgs {

    public static final RateLimitsArgs Empty = new RateLimitsArgs();

    @InputImport(name="maxConcurrentDispatches")
    private final @Nullable Input<Integer> maxConcurrentDispatches;

    public Input<Integer> getMaxConcurrentDispatches() {
        return this.maxConcurrentDispatches == null ? Input.empty() : this.maxConcurrentDispatches;
    }

    @InputImport(name="maxDispatchesPerSecond")
    private final @Nullable Input<Double> maxDispatchesPerSecond;

    public Input<Double> getMaxDispatchesPerSecond() {
        return this.maxDispatchesPerSecond == null ? Input.empty() : this.maxDispatchesPerSecond;
    }

    public RateLimitsArgs(
        @Nullable Input<Integer> maxConcurrentDispatches,
        @Nullable Input<Double> maxDispatchesPerSecond) {
        this.maxConcurrentDispatches = maxConcurrentDispatches;
        this.maxDispatchesPerSecond = maxDispatchesPerSecond;
    }

    private RateLimitsArgs() {
        this.maxConcurrentDispatches = Input.empty();
        this.maxDispatchesPerSecond = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RateLimitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxConcurrentDispatches;
        private @Nullable Input<Double> maxDispatchesPerSecond;

        public Builder() {
    	      // Empty
        }

        public Builder(RateLimitsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxConcurrentDispatches = defaults.maxConcurrentDispatches;
    	      this.maxDispatchesPerSecond = defaults.maxDispatchesPerSecond;
        }

        public Builder setMaxConcurrentDispatches(@Nullable Input<Integer> maxConcurrentDispatches) {
            this.maxConcurrentDispatches = maxConcurrentDispatches;
            return this;
        }

        public Builder setMaxConcurrentDispatches(@Nullable Integer maxConcurrentDispatches) {
            this.maxConcurrentDispatches = Input.ofNullable(maxConcurrentDispatches);
            return this;
        }

        public Builder setMaxDispatchesPerSecond(@Nullable Input<Double> maxDispatchesPerSecond) {
            this.maxDispatchesPerSecond = maxDispatchesPerSecond;
            return this;
        }

        public Builder setMaxDispatchesPerSecond(@Nullable Double maxDispatchesPerSecond) {
            this.maxDispatchesPerSecond = Input.ofNullable(maxDispatchesPerSecond);
            return this;
        }

        public RateLimitsArgs build() {
            return new RateLimitsArgs(maxConcurrentDispatches, maxDispatchesPerSecond);
        }
    }
}
