// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dialogflow_v2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.dialogflow_v2.enums.ConversationConversationStage;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConversationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConversationArgs Empty = new ConversationArgs();

    @Import(name="conversationId")
      private final @Nullable Output<String> conversationId;

    public Output<String> getConversationId() {
        return this.conversationId == null ? Codegen.empty() : this.conversationId;
    }

    /**
     * The Conversation Profile to be used to configure this Conversation. This field cannot be updated. Format: `projects//locations//conversationProfiles/`.
     * 
     */
    @Import(name="conversationProfile", required=true)
      private final Output<String> conversationProfile;

    public Output<String> getConversationProfile() {
        return this.conversationProfile;
    }

    /**
     * The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE.
     * 
     */
    @Import(name="conversationStage")
      private final @Nullable Output<ConversationConversationStage> conversationStage;

    public Output<ConversationConversationStage> getConversationStage() {
        return this.conversationStage == null ? Codegen.empty() : this.conversationStage;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    public ConversationArgs(
        @Nullable Output<String> conversationId,
        Output<String> conversationProfile,
        @Nullable Output<ConversationConversationStage> conversationStage,
        @Nullable Output<String> location,
        @Nullable Output<String> project) {
        this.conversationId = conversationId;
        this.conversationProfile = Objects.requireNonNull(conversationProfile, "expected parameter 'conversationProfile' to be non-null");
        this.conversationStage = conversationStage;
        this.location = location;
        this.project = project;
    }

    private ConversationArgs() {
        this.conversationId = Codegen.empty();
        this.conversationProfile = Codegen.empty();
        this.conversationStage = Codegen.empty();
        this.location = Codegen.empty();
        this.project = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConversationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> conversationId;
        private Output<String> conversationProfile;
        private @Nullable Output<ConversationConversationStage> conversationStage;
        private @Nullable Output<String> location;
        private @Nullable Output<String> project;

        public Builder() {
    	      // Empty
        }

        public Builder(ConversationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conversationId = defaults.conversationId;
    	      this.conversationProfile = defaults.conversationProfile;
    	      this.conversationStage = defaults.conversationStage;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
        }

        public Builder conversationId(@Nullable Output<String> conversationId) {
            this.conversationId = conversationId;
            return this;
        }
        public Builder conversationId(@Nullable String conversationId) {
            this.conversationId = Codegen.ofNullable(conversationId);
            return this;
        }
        public Builder conversationProfile(Output<String> conversationProfile) {
            this.conversationProfile = Objects.requireNonNull(conversationProfile);
            return this;
        }
        public Builder conversationProfile(String conversationProfile) {
            this.conversationProfile = Output.of(Objects.requireNonNull(conversationProfile));
            return this;
        }
        public Builder conversationStage(@Nullable Output<ConversationConversationStage> conversationStage) {
            this.conversationStage = conversationStage;
            return this;
        }
        public Builder conversationStage(@Nullable ConversationConversationStage conversationStage) {
            this.conversationStage = Codegen.ofNullable(conversationStage);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }        public ConversationArgs build() {
            return new ConversationArgs(conversationId, conversationProfile, conversationStage, location, project);
        }
    }
}
