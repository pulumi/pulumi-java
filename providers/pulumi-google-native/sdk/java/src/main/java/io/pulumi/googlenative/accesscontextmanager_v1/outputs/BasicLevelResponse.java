// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.accesscontextmanager_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.accesscontextmanager_v1.outputs.ConditionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class BasicLevelResponse {
    /**
     * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
     * 
     */
    private final String combiningFunction;
    /**
     * A list of requirements for the `AccessLevel` to be granted.
     * 
     */
    private final List<ConditionResponse> conditions;

    @OutputCustomType.Constructor({"combiningFunction","conditions"})
    private BasicLevelResponse(
        String combiningFunction,
        List<ConditionResponse> conditions) {
        this.combiningFunction = combiningFunction;
        this.conditions = conditions;
    }

    /**
     * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
     * 
    */
    public String getCombiningFunction() {
        return this.combiningFunction;
    }
    /**
     * A list of requirements for the `AccessLevel` to be granted.
     * 
    */
    public List<ConditionResponse> getConditions() {
        return this.conditions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BasicLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String combiningFunction;
        private List<ConditionResponse> conditions;

        public Builder() {
    	      // Empty
        }

        public Builder(BasicLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.combiningFunction = defaults.combiningFunction;
    	      this.conditions = defaults.conditions;
        }

        public Builder setCombiningFunction(String combiningFunction) {
            this.combiningFunction = Objects.requireNonNull(combiningFunction);
            return this;
        }

        public Builder setConditions(List<ConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public BasicLevelResponse build() {
            return new BasicLevelResponse(combiningFunction, conditions);
        }
    }
}
