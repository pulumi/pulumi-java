// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.transcoder_v1.inputs.SegmentSettingsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Multiplexing settings for output stream.
 * 
 */
public final class MuxStreamArgs extends io.pulumi.resources.ResourceArgs {

    public static final MuxStreamArgs Empty = new MuxStreamArgs();

    /**
     * The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt`
     * 
     */
    @Import(name="container")
      private final @Nullable Output<String> container;

    public Output<String> getContainer() {
        return this.container == null ? Codegen.empty() : this.container;
    }

    /**
     * List of `ElementaryStream.key`s multiplexed in this stream.
     * 
     */
    @Import(name="elementaryStreams")
      private final @Nullable Output<List<String>> elementaryStreams;

    public Output<List<String>> getElementaryStreams() {
        return this.elementaryStreams == null ? Codegen.empty() : this.elementaryStreams;
    }

    /**
     * The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
     * 
     */
    @Import(name="fileName")
      private final @Nullable Output<String> fileName;

    public Output<String> getFileName() {
        return this.fileName == null ? Codegen.empty() : this.fileName;
    }

    /**
     * A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `.m3u8` extension suffix.
     * 
     */
    @Import(name="key")
      private final @Nullable Output<String> key;

    public Output<String> getKey() {
        return this.key == null ? Codegen.empty() : this.key;
    }

    /**
     * Segment settings for `ts`, `fmp4` and `vtt`.
     * 
     */
    @Import(name="segmentSettings")
      private final @Nullable Output<SegmentSettingsArgs> segmentSettings;

    public Output<SegmentSettingsArgs> getSegmentSettings() {
        return this.segmentSettings == null ? Codegen.empty() : this.segmentSettings;
    }

    public MuxStreamArgs(
        @Nullable Output<String> container,
        @Nullable Output<List<String>> elementaryStreams,
        @Nullable Output<String> fileName,
        @Nullable Output<String> key,
        @Nullable Output<SegmentSettingsArgs> segmentSettings) {
        this.container = container;
        this.elementaryStreams = elementaryStreams;
        this.fileName = fileName;
        this.key = key;
        this.segmentSettings = segmentSettings;
    }

    private MuxStreamArgs() {
        this.container = Codegen.empty();
        this.elementaryStreams = Codegen.empty();
        this.fileName = Codegen.empty();
        this.key = Codegen.empty();
        this.segmentSettings = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MuxStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> container;
        private @Nullable Output<List<String>> elementaryStreams;
        private @Nullable Output<String> fileName;
        private @Nullable Output<String> key;
        private @Nullable Output<SegmentSettingsArgs> segmentSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(MuxStreamArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.container = defaults.container;
    	      this.elementaryStreams = defaults.elementaryStreams;
    	      this.fileName = defaults.fileName;
    	      this.key = defaults.key;
    	      this.segmentSettings = defaults.segmentSettings;
        }

        public Builder container(@Nullable Output<String> container) {
            this.container = container;
            return this;
        }
        public Builder container(@Nullable String container) {
            this.container = Codegen.ofNullable(container);
            return this;
        }
        public Builder elementaryStreams(@Nullable Output<List<String>> elementaryStreams) {
            this.elementaryStreams = elementaryStreams;
            return this;
        }
        public Builder elementaryStreams(@Nullable List<String> elementaryStreams) {
            this.elementaryStreams = Codegen.ofNullable(elementaryStreams);
            return this;
        }
        public Builder elementaryStreams(String... elementaryStreams) {
            return elementaryStreams(List.of(elementaryStreams));
        }
        public Builder fileName(@Nullable Output<String> fileName) {
            this.fileName = fileName;
            return this;
        }
        public Builder fileName(@Nullable String fileName) {
            this.fileName = Codegen.ofNullable(fileName);
            return this;
        }
        public Builder key(@Nullable Output<String> key) {
            this.key = key;
            return this;
        }
        public Builder key(@Nullable String key) {
            this.key = Codegen.ofNullable(key);
            return this;
        }
        public Builder segmentSettings(@Nullable Output<SegmentSettingsArgs> segmentSettings) {
            this.segmentSettings = segmentSettings;
            return this;
        }
        public Builder segmentSettings(@Nullable SegmentSettingsArgs segmentSettings) {
            this.segmentSettings = Codegen.ofNullable(segmentSettings);
            return this;
        }        public MuxStreamArgs build() {
            return new MuxStreamArgs(container, elementaryStreams, fileName, key, segmentSettings);
        }
    }
}
