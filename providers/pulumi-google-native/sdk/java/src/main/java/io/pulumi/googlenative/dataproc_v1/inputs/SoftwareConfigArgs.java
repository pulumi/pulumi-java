// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.dataproc_v1.enums.SoftwareConfigOptionalComponentsItem;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies the selection and config of software inside the cluster.
 * 
 */
public final class SoftwareConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final SoftwareConfigArgs Empty = new SoftwareConfigArgs();

    /**
     * Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
     * 
     */
    @InputImport(name="imageVersion")
      private final @Nullable Output<String> imageVersion;

    public Output<String> getImageVersion() {
        return this.imageVersion == null ? Output.empty() : this.imageVersion;
    }

    /**
     * Optional. The set of components to activate on the cluster.
     * 
     */
    @InputImport(name="optionalComponents")
      private final @Nullable Output<List<SoftwareConfigOptionalComponentsItem>> optionalComponents;

    public Output<List<SoftwareConfigOptionalComponentsItem>> getOptionalComponents() {
        return this.optionalComponents == null ? Output.empty() : this.optionalComponents;
    }

    /**
     * Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
     * 
     */
    @InputImport(name="properties")
      private final @Nullable Output<Map<String,String>> properties;

    public Output<Map<String,String>> getProperties() {
        return this.properties == null ? Output.empty() : this.properties;
    }

    public SoftwareConfigArgs(
        @Nullable Output<String> imageVersion,
        @Nullable Output<List<SoftwareConfigOptionalComponentsItem>> optionalComponents,
        @Nullable Output<Map<String,String>> properties) {
        this.imageVersion = imageVersion;
        this.optionalComponents = optionalComponents;
        this.properties = properties;
    }

    private SoftwareConfigArgs() {
        this.imageVersion = Output.empty();
        this.optionalComponents = Output.empty();
        this.properties = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SoftwareConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> imageVersion;
        private @Nullable Output<List<SoftwareConfigOptionalComponentsItem>> optionalComponents;
        private @Nullable Output<Map<String,String>> properties;

        public Builder() {
    	      // Empty
        }

        public Builder(SoftwareConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imageVersion = defaults.imageVersion;
    	      this.optionalComponents = defaults.optionalComponents;
    	      this.properties = defaults.properties;
        }

        public Builder imageVersion(@Nullable Output<String> imageVersion) {
            this.imageVersion = imageVersion;
            return this;
        }

        public Builder imageVersion(@Nullable String imageVersion) {
            this.imageVersion = Output.ofNullable(imageVersion);
            return this;
        }

        public Builder optionalComponents(@Nullable Output<List<SoftwareConfigOptionalComponentsItem>> optionalComponents) {
            this.optionalComponents = optionalComponents;
            return this;
        }

        public Builder optionalComponents(@Nullable List<SoftwareConfigOptionalComponentsItem> optionalComponents) {
            this.optionalComponents = Output.ofNullable(optionalComponents);
            return this;
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = Output.ofNullable(properties);
            return this;
        }
        public SoftwareConfigArgs build() {
            return new SoftwareConfigArgs(imageVersion, optionalComponents, properties);
        }
    }
}
