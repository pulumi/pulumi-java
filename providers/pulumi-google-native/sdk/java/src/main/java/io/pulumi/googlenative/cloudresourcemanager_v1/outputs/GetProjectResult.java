// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudresourcemanager_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudresourcemanager_v1.outputs.ResourceIdResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetProjectResult {
    /**
     * Creation time. Read-only.
     * 
     */
    private final String createTime;
    /**
     * The labels associated with this Project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: a-z{0,62}. Label values must be between 0 and 63 characters long and must conform to the regular expression [a-z0-9_-]{0,63}. A label value can be empty. No more than 256 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: "environment" : "dev" Read-write.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The Project lifecycle state. Read-only.
     * 
     */
    private final String lifecycleState;
    /**
     * The optional user-assigned display name of the Project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project` Read-write.
     * 
     */
    private final String name;
    /**
     * An optional reference to a parent Resource. Supported parent types include "organization" and "folder". Once set, the parent cannot be cleared. The `parent` can be set on creation or using the `UpdateProject` method; the end user must have the `resourcemanager.projects.create` permission on the parent.
     * 
     */
    private final ResourceIdResponse parent;
    /**
     * The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123` Read-only after creation.
     * 
     */
    private final String projectId;
    /**
     * The number uniquely identifying the project. Example: `415104041262` Read-only.
     * 
     */
    private final String projectNumber;

    @OutputCustomType.Constructor({"createTime","labels","lifecycleState","name","parent","projectId","projectNumber"})
    private GetProjectResult(
        String createTime,
        Map<String,String> labels,
        String lifecycleState,
        String name,
        ResourceIdResponse parent,
        String projectId,
        String projectNumber) {
        this.createTime = Objects.requireNonNull(createTime);
        this.labels = Objects.requireNonNull(labels);
        this.lifecycleState = Objects.requireNonNull(lifecycleState);
        this.name = Objects.requireNonNull(name);
        this.parent = Objects.requireNonNull(parent);
        this.projectId = Objects.requireNonNull(projectId);
        this.projectNumber = Objects.requireNonNull(projectNumber);
    }

    /**
     * Creation time. Read-only.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * The labels associated with this Project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: a-z{0,62}. Label values must be between 0 and 63 characters long and must conform to the regular expression [a-z0-9_-]{0,63}. A label value can be empty. No more than 256 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: "environment" : "dev" Read-write.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The Project lifecycle state. Read-only.
     * 
    */
    public String getLifecycleState() {
        return this.lifecycleState;
    }
    /**
     * The optional user-assigned display name of the Project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project` Read-write.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * An optional reference to a parent Resource. Supported parent types include "organization" and "folder". Once set, the parent cannot be cleared. The `parent` can be set on creation or using the `UpdateProject` method; the end user must have the `resourcemanager.projects.create` permission on the parent.
     * 
    */
    public ResourceIdResponse getParent() {
        return this.parent;
    }
    /**
     * The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123` Read-only after creation.
     * 
    */
    public String getProjectId() {
        return this.projectId;
    }
    /**
     * The number uniquely identifying the project. Example: `415104041262` Read-only.
     * 
    */
    public String getProjectNumber() {
        return this.projectNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private Map<String,String> labels;
        private String lifecycleState;
        private String name;
        private ResourceIdResponse parent;
        private String projectId;
        private String projectNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.labels = defaults.labels;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.projectId = defaults.projectId;
    	      this.projectNumber = defaults.projectNumber;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLifecycleState(String lifecycleState) {
            this.lifecycleState = Objects.requireNonNull(lifecycleState);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setParent(ResourceIdResponse parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }

        public Builder setProjectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }

        public Builder setProjectNumber(String projectNumber) {
            this.projectNumber = Objects.requireNonNull(projectNumber);
            return this;
        }
        public GetProjectResult build() {
            return new GetProjectResult(createTime, labels, lifecycleState, name, parent, projectId, projectNumber);
        }
    }
}
