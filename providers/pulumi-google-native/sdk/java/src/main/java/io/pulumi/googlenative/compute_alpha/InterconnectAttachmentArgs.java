// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.enums.InterconnectAttachmentBandwidth;
import io.pulumi.googlenative.compute_alpha.enums.InterconnectAttachmentEdgeAvailabilityDomain;
import io.pulumi.googlenative.compute_alpha.enums.InterconnectAttachmentEncryption;
import io.pulumi.googlenative.compute_alpha.enums.InterconnectAttachmentStackType;
import io.pulumi.googlenative.compute_alpha.enums.InterconnectAttachmentType;
import io.pulumi.googlenative.compute_alpha.inputs.InterconnectAttachmentPartnerMetadataArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InterconnectAttachmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final InterconnectAttachmentArgs Empty = new InterconnectAttachmentArgs();

    @InputImport(name="adminEnabled")
    private final @Nullable Input<Boolean> adminEnabled;

    public Input<Boolean> getAdminEnabled() {
        return this.adminEnabled == null ? Input.empty() : this.adminEnabled;
    }

    @InputImport(name="bandwidth")
    private final @Nullable Input<InterconnectAttachmentBandwidth> bandwidth;

    public Input<InterconnectAttachmentBandwidth> getBandwidth() {
        return this.bandwidth == null ? Input.empty() : this.bandwidth;
    }

    @InputImport(name="candidateIpv6Subnets")
    private final @Nullable Input<List<String>> candidateIpv6Subnets;

    public Input<List<String>> getCandidateIpv6Subnets() {
        return this.candidateIpv6Subnets == null ? Input.empty() : this.candidateIpv6Subnets;
    }

    @InputImport(name="candidateSubnets")
    private final @Nullable Input<List<String>> candidateSubnets;

    public Input<List<String>> getCandidateSubnets() {
        return this.candidateSubnets == null ? Input.empty() : this.candidateSubnets;
    }

    @InputImport(name="cloudRouterIpv6InterfaceId")
    private final @Nullable Input<String> cloudRouterIpv6InterfaceId;

    public Input<String> getCloudRouterIpv6InterfaceId() {
        return this.cloudRouterIpv6InterfaceId == null ? Input.empty() : this.cloudRouterIpv6InterfaceId;
    }

    @InputImport(name="customerRouterIpv6InterfaceId")
    private final @Nullable Input<String> customerRouterIpv6InterfaceId;

    public Input<String> getCustomerRouterIpv6InterfaceId() {
        return this.customerRouterIpv6InterfaceId == null ? Input.empty() : this.customerRouterIpv6InterfaceId;
    }

    @InputImport(name="dataplaneVersion")
    private final @Nullable Input<Integer> dataplaneVersion;

    public Input<Integer> getDataplaneVersion() {
        return this.dataplaneVersion == null ? Input.empty() : this.dataplaneVersion;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="edgeAvailabilityDomain")
    private final @Nullable Input<InterconnectAttachmentEdgeAvailabilityDomain> edgeAvailabilityDomain;

    public Input<InterconnectAttachmentEdgeAvailabilityDomain> getEdgeAvailabilityDomain() {
        return this.edgeAvailabilityDomain == null ? Input.empty() : this.edgeAvailabilityDomain;
    }

    @InputImport(name="encryption")
    private final @Nullable Input<InterconnectAttachmentEncryption> encryption;

    public Input<InterconnectAttachmentEncryption> getEncryption() {
        return this.encryption == null ? Input.empty() : this.encryption;
    }

    @InputImport(name="interconnect")
    private final @Nullable Input<String> interconnect;

    public Input<String> getInterconnect() {
        return this.interconnect == null ? Input.empty() : this.interconnect;
    }

    @InputImport(name="ipsecInternalAddresses")
    private final @Nullable Input<List<String>> ipsecInternalAddresses;

    public Input<List<String>> getIpsecInternalAddresses() {
        return this.ipsecInternalAddresses == null ? Input.empty() : this.ipsecInternalAddresses;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="mtu")
    private final @Nullable Input<Integer> mtu;

    public Input<Integer> getMtu() {
        return this.mtu == null ? Input.empty() : this.mtu;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="pairingKey")
    private final @Nullable Input<String> pairingKey;

    public Input<String> getPairingKey() {
        return this.pairingKey == null ? Input.empty() : this.pairingKey;
    }

    @InputImport(name="partnerAsn")
    private final @Nullable Input<String> partnerAsn;

    public Input<String> getPartnerAsn() {
        return this.partnerAsn == null ? Input.empty() : this.partnerAsn;
    }

    @InputImport(name="partnerMetadata")
    private final @Nullable Input<InterconnectAttachmentPartnerMetadataArgs> partnerMetadata;

    public Input<InterconnectAttachmentPartnerMetadataArgs> getPartnerMetadata() {
        return this.partnerMetadata == null ? Input.empty() : this.partnerMetadata;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="region", required=true)
    private final Input<String> region;

    public Input<String> getRegion() {
        return this.region;
    }

    @InputImport(name="requestId")
    private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    @InputImport(name="router")
    private final @Nullable Input<String> router;

    public Input<String> getRouter() {
        return this.router == null ? Input.empty() : this.router;
    }

    @InputImport(name="stackType")
    private final @Nullable Input<InterconnectAttachmentStackType> stackType;

    public Input<InterconnectAttachmentStackType> getStackType() {
        return this.stackType == null ? Input.empty() : this.stackType;
    }

    @InputImport(name="type")
    private final @Nullable Input<InterconnectAttachmentType> type;

    public Input<InterconnectAttachmentType> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    @InputImport(name="validateOnly")
    private final @Nullable Input<String> validateOnly;

    public Input<String> getValidateOnly() {
        return this.validateOnly == null ? Input.empty() : this.validateOnly;
    }

    @InputImport(name="vlanTag8021q")
    private final @Nullable Input<Integer> vlanTag8021q;

    public Input<Integer> getVlanTag8021q() {
        return this.vlanTag8021q == null ? Input.empty() : this.vlanTag8021q;
    }

    public InterconnectAttachmentArgs(
        @Nullable Input<Boolean> adminEnabled,
        @Nullable Input<InterconnectAttachmentBandwidth> bandwidth,
        @Nullable Input<List<String>> candidateIpv6Subnets,
        @Nullable Input<List<String>> candidateSubnets,
        @Nullable Input<String> cloudRouterIpv6InterfaceId,
        @Nullable Input<String> customerRouterIpv6InterfaceId,
        @Nullable Input<Integer> dataplaneVersion,
        @Nullable Input<String> description,
        @Nullable Input<InterconnectAttachmentEdgeAvailabilityDomain> edgeAvailabilityDomain,
        @Nullable Input<InterconnectAttachmentEncryption> encryption,
        @Nullable Input<String> interconnect,
        @Nullable Input<List<String>> ipsecInternalAddresses,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<Integer> mtu,
        @Nullable Input<String> name,
        @Nullable Input<String> pairingKey,
        @Nullable Input<String> partnerAsn,
        @Nullable Input<InterconnectAttachmentPartnerMetadataArgs> partnerMetadata,
        @Nullable Input<String> project,
        Input<String> region,
        @Nullable Input<String> requestId,
        @Nullable Input<String> router,
        @Nullable Input<InterconnectAttachmentStackType> stackType,
        @Nullable Input<InterconnectAttachmentType> type,
        @Nullable Input<String> validateOnly,
        @Nullable Input<Integer> vlanTag8021q) {
        this.adminEnabled = adminEnabled;
        this.bandwidth = bandwidth;
        this.candidateIpv6Subnets = candidateIpv6Subnets;
        this.candidateSubnets = candidateSubnets;
        this.cloudRouterIpv6InterfaceId = cloudRouterIpv6InterfaceId;
        this.customerRouterIpv6InterfaceId = customerRouterIpv6InterfaceId;
        this.dataplaneVersion = dataplaneVersion;
        this.description = description;
        this.edgeAvailabilityDomain = edgeAvailabilityDomain;
        this.encryption = encryption;
        this.interconnect = interconnect;
        this.ipsecInternalAddresses = ipsecInternalAddresses;
        this.labels = labels;
        this.mtu = mtu;
        this.name = name;
        this.pairingKey = pairingKey;
        this.partnerAsn = partnerAsn;
        this.partnerMetadata = partnerMetadata;
        this.project = project;
        this.region = Objects.requireNonNull(region, "expected parameter 'region' to be non-null");
        this.requestId = requestId;
        this.router = router;
        this.stackType = stackType;
        this.type = type;
        this.validateOnly = validateOnly;
        this.vlanTag8021q = vlanTag8021q;
    }

    private InterconnectAttachmentArgs() {
        this.adminEnabled = Input.empty();
        this.bandwidth = Input.empty();
        this.candidateIpv6Subnets = Input.empty();
        this.candidateSubnets = Input.empty();
        this.cloudRouterIpv6InterfaceId = Input.empty();
        this.customerRouterIpv6InterfaceId = Input.empty();
        this.dataplaneVersion = Input.empty();
        this.description = Input.empty();
        this.edgeAvailabilityDomain = Input.empty();
        this.encryption = Input.empty();
        this.interconnect = Input.empty();
        this.ipsecInternalAddresses = Input.empty();
        this.labels = Input.empty();
        this.mtu = Input.empty();
        this.name = Input.empty();
        this.pairingKey = Input.empty();
        this.partnerAsn = Input.empty();
        this.partnerMetadata = Input.empty();
        this.project = Input.empty();
        this.region = Input.empty();
        this.requestId = Input.empty();
        this.router = Input.empty();
        this.stackType = Input.empty();
        this.type = Input.empty();
        this.validateOnly = Input.empty();
        this.vlanTag8021q = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InterconnectAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> adminEnabled;
        private @Nullable Input<InterconnectAttachmentBandwidth> bandwidth;
        private @Nullable Input<List<String>> candidateIpv6Subnets;
        private @Nullable Input<List<String>> candidateSubnets;
        private @Nullable Input<String> cloudRouterIpv6InterfaceId;
        private @Nullable Input<String> customerRouterIpv6InterfaceId;
        private @Nullable Input<Integer> dataplaneVersion;
        private @Nullable Input<String> description;
        private @Nullable Input<InterconnectAttachmentEdgeAvailabilityDomain> edgeAvailabilityDomain;
        private @Nullable Input<InterconnectAttachmentEncryption> encryption;
        private @Nullable Input<String> interconnect;
        private @Nullable Input<List<String>> ipsecInternalAddresses;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<Integer> mtu;
        private @Nullable Input<String> name;
        private @Nullable Input<String> pairingKey;
        private @Nullable Input<String> partnerAsn;
        private @Nullable Input<InterconnectAttachmentPartnerMetadataArgs> partnerMetadata;
        private @Nullable Input<String> project;
        private Input<String> region;
        private @Nullable Input<String> requestId;
        private @Nullable Input<String> router;
        private @Nullable Input<InterconnectAttachmentStackType> stackType;
        private @Nullable Input<InterconnectAttachmentType> type;
        private @Nullable Input<String> validateOnly;
        private @Nullable Input<Integer> vlanTag8021q;

        public Builder() {
    	      // Empty
        }

        public Builder(InterconnectAttachmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminEnabled = defaults.adminEnabled;
    	      this.bandwidth = defaults.bandwidth;
    	      this.candidateIpv6Subnets = defaults.candidateIpv6Subnets;
    	      this.candidateSubnets = defaults.candidateSubnets;
    	      this.cloudRouterIpv6InterfaceId = defaults.cloudRouterIpv6InterfaceId;
    	      this.customerRouterIpv6InterfaceId = defaults.customerRouterIpv6InterfaceId;
    	      this.dataplaneVersion = defaults.dataplaneVersion;
    	      this.description = defaults.description;
    	      this.edgeAvailabilityDomain = defaults.edgeAvailabilityDomain;
    	      this.encryption = defaults.encryption;
    	      this.interconnect = defaults.interconnect;
    	      this.ipsecInternalAddresses = defaults.ipsecInternalAddresses;
    	      this.labels = defaults.labels;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.pairingKey = defaults.pairingKey;
    	      this.partnerAsn = defaults.partnerAsn;
    	      this.partnerMetadata = defaults.partnerMetadata;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.requestId = defaults.requestId;
    	      this.router = defaults.router;
    	      this.stackType = defaults.stackType;
    	      this.type = defaults.type;
    	      this.validateOnly = defaults.validateOnly;
    	      this.vlanTag8021q = defaults.vlanTag8021q;
        }

        public Builder setAdminEnabled(@Nullable Input<Boolean> adminEnabled) {
            this.adminEnabled = adminEnabled;
            return this;
        }

        public Builder setAdminEnabled(@Nullable Boolean adminEnabled) {
            this.adminEnabled = Input.ofNullable(adminEnabled);
            return this;
        }

        public Builder setBandwidth(@Nullable Input<InterconnectAttachmentBandwidth> bandwidth) {
            this.bandwidth = bandwidth;
            return this;
        }

        public Builder setBandwidth(@Nullable InterconnectAttachmentBandwidth bandwidth) {
            this.bandwidth = Input.ofNullable(bandwidth);
            return this;
        }

        public Builder setCandidateIpv6Subnets(@Nullable Input<List<String>> candidateIpv6Subnets) {
            this.candidateIpv6Subnets = candidateIpv6Subnets;
            return this;
        }

        public Builder setCandidateIpv6Subnets(@Nullable List<String> candidateIpv6Subnets) {
            this.candidateIpv6Subnets = Input.ofNullable(candidateIpv6Subnets);
            return this;
        }

        public Builder setCandidateSubnets(@Nullable Input<List<String>> candidateSubnets) {
            this.candidateSubnets = candidateSubnets;
            return this;
        }

        public Builder setCandidateSubnets(@Nullable List<String> candidateSubnets) {
            this.candidateSubnets = Input.ofNullable(candidateSubnets);
            return this;
        }

        public Builder setCloudRouterIpv6InterfaceId(@Nullable Input<String> cloudRouterIpv6InterfaceId) {
            this.cloudRouterIpv6InterfaceId = cloudRouterIpv6InterfaceId;
            return this;
        }

        public Builder setCloudRouterIpv6InterfaceId(@Nullable String cloudRouterIpv6InterfaceId) {
            this.cloudRouterIpv6InterfaceId = Input.ofNullable(cloudRouterIpv6InterfaceId);
            return this;
        }

        public Builder setCustomerRouterIpv6InterfaceId(@Nullable Input<String> customerRouterIpv6InterfaceId) {
            this.customerRouterIpv6InterfaceId = customerRouterIpv6InterfaceId;
            return this;
        }

        public Builder setCustomerRouterIpv6InterfaceId(@Nullable String customerRouterIpv6InterfaceId) {
            this.customerRouterIpv6InterfaceId = Input.ofNullable(customerRouterIpv6InterfaceId);
            return this;
        }

        public Builder setDataplaneVersion(@Nullable Input<Integer> dataplaneVersion) {
            this.dataplaneVersion = dataplaneVersion;
            return this;
        }

        public Builder setDataplaneVersion(@Nullable Integer dataplaneVersion) {
            this.dataplaneVersion = Input.ofNullable(dataplaneVersion);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEdgeAvailabilityDomain(@Nullable Input<InterconnectAttachmentEdgeAvailabilityDomain> edgeAvailabilityDomain) {
            this.edgeAvailabilityDomain = edgeAvailabilityDomain;
            return this;
        }

        public Builder setEdgeAvailabilityDomain(@Nullable InterconnectAttachmentEdgeAvailabilityDomain edgeAvailabilityDomain) {
            this.edgeAvailabilityDomain = Input.ofNullable(edgeAvailabilityDomain);
            return this;
        }

        public Builder setEncryption(@Nullable Input<InterconnectAttachmentEncryption> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder setEncryption(@Nullable InterconnectAttachmentEncryption encryption) {
            this.encryption = Input.ofNullable(encryption);
            return this;
        }

        public Builder setInterconnect(@Nullable Input<String> interconnect) {
            this.interconnect = interconnect;
            return this;
        }

        public Builder setInterconnect(@Nullable String interconnect) {
            this.interconnect = Input.ofNullable(interconnect);
            return this;
        }

        public Builder setIpsecInternalAddresses(@Nullable Input<List<String>> ipsecInternalAddresses) {
            this.ipsecInternalAddresses = ipsecInternalAddresses;
            return this;
        }

        public Builder setIpsecInternalAddresses(@Nullable List<String> ipsecInternalAddresses) {
            this.ipsecInternalAddresses = Input.ofNullable(ipsecInternalAddresses);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setMtu(@Nullable Input<Integer> mtu) {
            this.mtu = mtu;
            return this;
        }

        public Builder setMtu(@Nullable Integer mtu) {
            this.mtu = Input.ofNullable(mtu);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPairingKey(@Nullable Input<String> pairingKey) {
            this.pairingKey = pairingKey;
            return this;
        }

        public Builder setPairingKey(@Nullable String pairingKey) {
            this.pairingKey = Input.ofNullable(pairingKey);
            return this;
        }

        public Builder setPartnerAsn(@Nullable Input<String> partnerAsn) {
            this.partnerAsn = partnerAsn;
            return this;
        }

        public Builder setPartnerAsn(@Nullable String partnerAsn) {
            this.partnerAsn = Input.ofNullable(partnerAsn);
            return this;
        }

        public Builder setPartnerMetadata(@Nullable Input<InterconnectAttachmentPartnerMetadataArgs> partnerMetadata) {
            this.partnerMetadata = partnerMetadata;
            return this;
        }

        public Builder setPartnerMetadata(@Nullable InterconnectAttachmentPartnerMetadataArgs partnerMetadata) {
            this.partnerMetadata = Input.ofNullable(partnerMetadata);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRegion(Input<String> region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder setRegion(String region) {
            this.region = Input.of(Objects.requireNonNull(region));
            return this;
        }

        public Builder setRequestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder setRequestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public Builder setRouter(@Nullable Input<String> router) {
            this.router = router;
            return this;
        }

        public Builder setRouter(@Nullable String router) {
            this.router = Input.ofNullable(router);
            return this;
        }

        public Builder setStackType(@Nullable Input<InterconnectAttachmentStackType> stackType) {
            this.stackType = stackType;
            return this;
        }

        public Builder setStackType(@Nullable InterconnectAttachmentStackType stackType) {
            this.stackType = Input.ofNullable(stackType);
            return this;
        }

        public Builder setType(@Nullable Input<InterconnectAttachmentType> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable InterconnectAttachmentType type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setValidateOnly(@Nullable Input<String> validateOnly) {
            this.validateOnly = validateOnly;
            return this;
        }

        public Builder setValidateOnly(@Nullable String validateOnly) {
            this.validateOnly = Input.ofNullable(validateOnly);
            return this;
        }

        public Builder setVlanTag8021q(@Nullable Input<Integer> vlanTag8021q) {
            this.vlanTag8021q = vlanTag8021q;
            return this;
        }

        public Builder setVlanTag8021q(@Nullable Integer vlanTag8021q) {
            this.vlanTag8021q = Input.ofNullable(vlanTag8021q);
            return this;
        }

        public InterconnectAttachmentArgs build() {
            return new InterconnectAttachmentArgs(adminEnabled, bandwidth, candidateIpv6Subnets, candidateSubnets, cloudRouterIpv6InterfaceId, customerRouterIpv6InterfaceId, dataplaneVersion, description, edgeAvailabilityDomain, encryption, interconnect, ipsecInternalAddresses, labels, mtu, name, pairingKey, partnerAsn, partnerMetadata, project, region, requestId, router, stackType, type, validateOnly, vlanTag8021q);
        }
    }
}
