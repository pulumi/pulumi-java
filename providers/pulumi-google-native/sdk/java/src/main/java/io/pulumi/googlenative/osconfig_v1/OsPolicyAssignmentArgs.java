// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.osconfig_v1.inputs.OSPolicyArgs;
import io.pulumi.googlenative.osconfig_v1.inputs.OSPolicyAssignmentInstanceFilterArgs;
import io.pulumi.googlenative.osconfig_v1.inputs.OSPolicyAssignmentRolloutArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OsPolicyAssignmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final OsPolicyAssignmentArgs Empty = new OsPolicyAssignmentArgs();

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="etag")
    private final @Nullable Input<String> etag;

    public Input<String> getEtag() {
        return this.etag == null ? Input.empty() : this.etag;
    }

    @InputImport(name="instanceFilter", required=true)
    private final Input<OSPolicyAssignmentInstanceFilterArgs> instanceFilter;

    public Input<OSPolicyAssignmentInstanceFilterArgs> getInstanceFilter() {
        return this.instanceFilter;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="osPolicies", required=true)
    private final Input<List<OSPolicyArgs>> osPolicies;

    public Input<List<OSPolicyArgs>> getOsPolicies() {
        return this.osPolicies;
    }

    @InputImport(name="osPolicyAssignmentId", required=true)
    private final Input<String> osPolicyAssignmentId;

    public Input<String> getOsPolicyAssignmentId() {
        return this.osPolicyAssignmentId;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="rollout", required=true)
    private final Input<OSPolicyAssignmentRolloutArgs> rollout;

    public Input<OSPolicyAssignmentRolloutArgs> getRollout() {
        return this.rollout;
    }

    public OsPolicyAssignmentArgs(
        @Nullable Input<String> description,
        @Nullable Input<String> etag,
        Input<OSPolicyAssignmentInstanceFilterArgs> instanceFilter,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        Input<List<OSPolicyArgs>> osPolicies,
        Input<String> osPolicyAssignmentId,
        @Nullable Input<String> project,
        Input<OSPolicyAssignmentRolloutArgs> rollout) {
        this.description = description;
        this.etag = etag;
        this.instanceFilter = Objects.requireNonNull(instanceFilter, "expected parameter 'instanceFilter' to be non-null");
        this.location = location;
        this.name = name;
        this.osPolicies = Objects.requireNonNull(osPolicies, "expected parameter 'osPolicies' to be non-null");
        this.osPolicyAssignmentId = Objects.requireNonNull(osPolicyAssignmentId, "expected parameter 'osPolicyAssignmentId' to be non-null");
        this.project = project;
        this.rollout = Objects.requireNonNull(rollout, "expected parameter 'rollout' to be non-null");
    }

    private OsPolicyAssignmentArgs() {
        this.description = Input.empty();
        this.etag = Input.empty();
        this.instanceFilter = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.osPolicies = Input.empty();
        this.osPolicyAssignmentId = Input.empty();
        this.project = Input.empty();
        this.rollout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OsPolicyAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<String> etag;
        private Input<OSPolicyAssignmentInstanceFilterArgs> instanceFilter;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private Input<List<OSPolicyArgs>> osPolicies;
        private Input<String> osPolicyAssignmentId;
        private @Nullable Input<String> project;
        private Input<OSPolicyAssignmentRolloutArgs> rollout;

        public Builder() {
    	      // Empty
        }

        public Builder(OsPolicyAssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.instanceFilter = defaults.instanceFilter;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.osPolicies = defaults.osPolicies;
    	      this.osPolicyAssignmentId = defaults.osPolicyAssignmentId;
    	      this.project = defaults.project;
    	      this.rollout = defaults.rollout;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEtag(@Nullable Input<String> etag) {
            this.etag = etag;
            return this;
        }

        public Builder setEtag(@Nullable String etag) {
            this.etag = Input.ofNullable(etag);
            return this;
        }

        public Builder setInstanceFilter(Input<OSPolicyAssignmentInstanceFilterArgs> instanceFilter) {
            this.instanceFilter = Objects.requireNonNull(instanceFilter);
            return this;
        }

        public Builder setInstanceFilter(OSPolicyAssignmentInstanceFilterArgs instanceFilter) {
            this.instanceFilter = Input.of(Objects.requireNonNull(instanceFilter));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOsPolicies(Input<List<OSPolicyArgs>> osPolicies) {
            this.osPolicies = Objects.requireNonNull(osPolicies);
            return this;
        }

        public Builder setOsPolicies(List<OSPolicyArgs> osPolicies) {
            this.osPolicies = Input.of(Objects.requireNonNull(osPolicies));
            return this;
        }

        public Builder setOsPolicyAssignmentId(Input<String> osPolicyAssignmentId) {
            this.osPolicyAssignmentId = Objects.requireNonNull(osPolicyAssignmentId);
            return this;
        }

        public Builder setOsPolicyAssignmentId(String osPolicyAssignmentId) {
            this.osPolicyAssignmentId = Input.of(Objects.requireNonNull(osPolicyAssignmentId));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRollout(Input<OSPolicyAssignmentRolloutArgs> rollout) {
            this.rollout = Objects.requireNonNull(rollout);
            return this;
        }

        public Builder setRollout(OSPolicyAssignmentRolloutArgs rollout) {
            this.rollout = Input.of(Objects.requireNonNull(rollout));
            return this;
        }

        public OsPolicyAssignmentArgs build() {
            return new OsPolicyAssignmentArgs(description, etag, instanceFilter, location, name, osPolicies, osPolicyAssignmentId, project, rollout);
        }
    }
}
