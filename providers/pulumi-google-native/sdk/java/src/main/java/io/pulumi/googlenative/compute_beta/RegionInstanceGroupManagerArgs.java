// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.compute_beta.enums.RegionInstanceGroupManagerFailoverAction;
import io.pulumi.googlenative.compute_beta.inputs.DistributionPolicyArgs;
import io.pulumi.googlenative.compute_beta.inputs.InstanceGroupManagerAutoHealingPolicyArgs;
import io.pulumi.googlenative.compute_beta.inputs.InstanceGroupManagerUpdatePolicyArgs;
import io.pulumi.googlenative.compute_beta.inputs.InstanceGroupManagerVersionArgs;
import io.pulumi.googlenative.compute_beta.inputs.NamedPortArgs;
import io.pulumi.googlenative.compute_beta.inputs.StatefulPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegionInstanceGroupManagerArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegionInstanceGroupManagerArgs Empty = new RegionInstanceGroupManagerArgs();

    /**
     * The autohealing policy for this managed instance group. You can specify only one value.
     * 
     */
    @Import(name="autoHealingPolicies")
      private final @Nullable Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies;

    public Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies() {
        return this.autoHealingPolicies == null ? Codegen.empty() : this.autoHealingPolicies;
    }

    /**
     * The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
     * 
     */
    @Import(name="baseInstanceName")
      private final @Nullable Output<String> baseInstanceName;

    public Output<String> baseInstanceName() {
        return this.baseInstanceName == null ? Codegen.empty() : this.baseInstanceName;
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
     * 
     */
    @Import(name="distributionPolicy")
      private final @Nullable Output<DistributionPolicyArgs> distributionPolicy;

    public Output<DistributionPolicyArgs> distributionPolicy() {
        return this.distributionPolicy == null ? Codegen.empty() : this.distributionPolicy;
    }

    /**
     * The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER.
     * 
     */
    @Import(name="failoverAction")
      private final @Nullable Output<RegionInstanceGroupManagerFailoverAction> failoverAction;

    public Output<RegionInstanceGroupManagerFailoverAction> failoverAction() {
        return this.failoverAction == null ? Codegen.empty() : this.failoverAction;
    }

    /**
     * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
     * 
     */
    @Import(name="instanceTemplate")
      private final @Nullable Output<String> instanceTemplate;

    public Output<String> instanceTemplate() {
        return this.instanceTemplate == null ? Codegen.empty() : this.instanceTemplate;
    }

    /**
     * The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Named ports configured for the Instance Groups complementary to this Instance Group Manager.
     * 
     */
    @Import(name="namedPorts")
      private final @Nullable Output<List<NamedPortArgs>> namedPorts;

    public Output<List<NamedPortArgs>> namedPorts() {
        return this.namedPorts == null ? Codegen.empty() : this.namedPorts;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="region", required=true)
      private final Output<String> region;

    public Output<String> region() {
        return this.region;
    }

    @Import(name="requestId")
      private final @Nullable Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId == null ? Codegen.empty() : this.requestId;
    }

    /**
     * The service account to be used as credentials for all operations performed by the managed instance group on instances. The service accounts needs all permissions required to create and delete instances. By default, the service account {projectNumber}@cloudservices.gserviceaccount.com is used.
     * 
     */
    @Import(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> serviceAccount() {
        return this.serviceAccount == null ? Codegen.empty() : this.serviceAccount;
    }

    /**
     * Stateful configuration for this Instanced Group Manager
     * 
     */
    @Import(name="statefulPolicy")
      private final @Nullable Output<StatefulPolicyArgs> statefulPolicy;

    public Output<StatefulPolicyArgs> statefulPolicy() {
        return this.statefulPolicy == null ? Codegen.empty() : this.statefulPolicy;
    }

    /**
     * The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
     * 
     */
    @Import(name="targetPools")
      private final @Nullable Output<List<String>> targetPools;

    public Output<List<String>> targetPools() {
        return this.targetPools == null ? Codegen.empty() : this.targetPools;
    }

    /**
     * The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
     * 
     */
    @Import(name="targetSize")
      private final @Nullable Output<Integer> targetSize;

    public Output<Integer> targetSize() {
        return this.targetSize == null ? Codegen.empty() : this.targetSize;
    }

    /**
     * The update policy for this managed instance group.
     * 
     */
    @Import(name="updatePolicy")
      private final @Nullable Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy;

    public Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy() {
        return this.updatePolicy == null ? Codegen.empty() : this.updatePolicy;
    }

    /**
     * Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
     * 
     */
    @Import(name="versions")
      private final @Nullable Output<List<InstanceGroupManagerVersionArgs>> versions;

    public Output<List<InstanceGroupManagerVersionArgs>> versions() {
        return this.versions == null ? Codegen.empty() : this.versions;
    }

    public RegionInstanceGroupManagerArgs(
        @Nullable Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies,
        @Nullable Output<String> baseInstanceName,
        @Nullable Output<String> description,
        @Nullable Output<DistributionPolicyArgs> distributionPolicy,
        @Nullable Output<RegionInstanceGroupManagerFailoverAction> failoverAction,
        @Nullable Output<String> instanceTemplate,
        @Nullable Output<String> name,
        @Nullable Output<List<NamedPortArgs>> namedPorts,
        @Nullable Output<String> project,
        Output<String> region,
        @Nullable Output<String> requestId,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<StatefulPolicyArgs> statefulPolicy,
        @Nullable Output<List<String>> targetPools,
        @Nullable Output<Integer> targetSize,
        @Nullable Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy,
        @Nullable Output<List<InstanceGroupManagerVersionArgs>> versions) {
        this.autoHealingPolicies = autoHealingPolicies;
        this.baseInstanceName = baseInstanceName;
        this.description = description;
        this.distributionPolicy = distributionPolicy;
        this.failoverAction = failoverAction;
        this.instanceTemplate = instanceTemplate;
        this.name = name;
        this.namedPorts = namedPorts;
        this.project = project;
        this.region = Objects.requireNonNull(region, "expected parameter 'region' to be non-null");
        this.requestId = requestId;
        this.serviceAccount = serviceAccount;
        this.statefulPolicy = statefulPolicy;
        this.targetPools = targetPools;
        this.targetSize = targetSize;
        this.updatePolicy = updatePolicy;
        this.versions = versions;
    }

    private RegionInstanceGroupManagerArgs() {
        this.autoHealingPolicies = Codegen.empty();
        this.baseInstanceName = Codegen.empty();
        this.description = Codegen.empty();
        this.distributionPolicy = Codegen.empty();
        this.failoverAction = Codegen.empty();
        this.instanceTemplate = Codegen.empty();
        this.name = Codegen.empty();
        this.namedPorts = Codegen.empty();
        this.project = Codegen.empty();
        this.region = Codegen.empty();
        this.requestId = Codegen.empty();
        this.serviceAccount = Codegen.empty();
        this.statefulPolicy = Codegen.empty();
        this.targetPools = Codegen.empty();
        this.targetSize = Codegen.empty();
        this.updatePolicy = Codegen.empty();
        this.versions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionInstanceGroupManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies;
        private @Nullable Output<String> baseInstanceName;
        private @Nullable Output<String> description;
        private @Nullable Output<DistributionPolicyArgs> distributionPolicy;
        private @Nullable Output<RegionInstanceGroupManagerFailoverAction> failoverAction;
        private @Nullable Output<String> instanceTemplate;
        private @Nullable Output<String> name;
        private @Nullable Output<List<NamedPortArgs>> namedPorts;
        private @Nullable Output<String> project;
        private Output<String> region;
        private @Nullable Output<String> requestId;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<StatefulPolicyArgs> statefulPolicy;
        private @Nullable Output<List<String>> targetPools;
        private @Nullable Output<Integer> targetSize;
        private @Nullable Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy;
        private @Nullable Output<List<InstanceGroupManagerVersionArgs>> versions;

        public Builder() {
    	      // Empty
        }

        public Builder(RegionInstanceGroupManagerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoHealingPolicies = defaults.autoHealingPolicies;
    	      this.baseInstanceName = defaults.baseInstanceName;
    	      this.description = defaults.description;
    	      this.distributionPolicy = defaults.distributionPolicy;
    	      this.failoverAction = defaults.failoverAction;
    	      this.instanceTemplate = defaults.instanceTemplate;
    	      this.name = defaults.name;
    	      this.namedPorts = defaults.namedPorts;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.requestId = defaults.requestId;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.statefulPolicy = defaults.statefulPolicy;
    	      this.targetPools = defaults.targetPools;
    	      this.targetSize = defaults.targetSize;
    	      this.updatePolicy = defaults.updatePolicy;
    	      this.versions = defaults.versions;
        }

        public Builder autoHealingPolicies(@Nullable Output<List<InstanceGroupManagerAutoHealingPolicyArgs>> autoHealingPolicies) {
            this.autoHealingPolicies = autoHealingPolicies;
            return this;
        }
        public Builder autoHealingPolicies(@Nullable List<InstanceGroupManagerAutoHealingPolicyArgs> autoHealingPolicies) {
            this.autoHealingPolicies = Codegen.ofNullable(autoHealingPolicies);
            return this;
        }
        public Builder autoHealingPolicies(InstanceGroupManagerAutoHealingPolicyArgs... autoHealingPolicies) {
            return autoHealingPolicies(List.of(autoHealingPolicies));
        }
        public Builder baseInstanceName(@Nullable Output<String> baseInstanceName) {
            this.baseInstanceName = baseInstanceName;
            return this;
        }
        public Builder baseInstanceName(@Nullable String baseInstanceName) {
            this.baseInstanceName = Codegen.ofNullable(baseInstanceName);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder distributionPolicy(@Nullable Output<DistributionPolicyArgs> distributionPolicy) {
            this.distributionPolicy = distributionPolicy;
            return this;
        }
        public Builder distributionPolicy(@Nullable DistributionPolicyArgs distributionPolicy) {
            this.distributionPolicy = Codegen.ofNullable(distributionPolicy);
            return this;
        }
        public Builder failoverAction(@Nullable Output<RegionInstanceGroupManagerFailoverAction> failoverAction) {
            this.failoverAction = failoverAction;
            return this;
        }
        public Builder failoverAction(@Nullable RegionInstanceGroupManagerFailoverAction failoverAction) {
            this.failoverAction = Codegen.ofNullable(failoverAction);
            return this;
        }
        public Builder instanceTemplate(@Nullable Output<String> instanceTemplate) {
            this.instanceTemplate = instanceTemplate;
            return this;
        }
        public Builder instanceTemplate(@Nullable String instanceTemplate) {
            this.instanceTemplate = Codegen.ofNullable(instanceTemplate);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder namedPorts(@Nullable Output<List<NamedPortArgs>> namedPorts) {
            this.namedPorts = namedPorts;
            return this;
        }
        public Builder namedPorts(@Nullable List<NamedPortArgs> namedPorts) {
            this.namedPorts = Codegen.ofNullable(namedPorts);
            return this;
        }
        public Builder namedPorts(NamedPortArgs... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder region(Output<String> region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder region(String region) {
            this.region = Output.of(Objects.requireNonNull(region));
            return this;
        }
        public Builder requestId(@Nullable Output<String> requestId) {
            this.requestId = requestId;
            return this;
        }
        public Builder requestId(@Nullable String requestId) {
            this.requestId = Codegen.ofNullable(requestId);
            return this;
        }
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }
        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Codegen.ofNullable(serviceAccount);
            return this;
        }
        public Builder statefulPolicy(@Nullable Output<StatefulPolicyArgs> statefulPolicy) {
            this.statefulPolicy = statefulPolicy;
            return this;
        }
        public Builder statefulPolicy(@Nullable StatefulPolicyArgs statefulPolicy) {
            this.statefulPolicy = Codegen.ofNullable(statefulPolicy);
            return this;
        }
        public Builder targetPools(@Nullable Output<List<String>> targetPools) {
            this.targetPools = targetPools;
            return this;
        }
        public Builder targetPools(@Nullable List<String> targetPools) {
            this.targetPools = Codegen.ofNullable(targetPools);
            return this;
        }
        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }
        public Builder targetSize(@Nullable Output<Integer> targetSize) {
            this.targetSize = targetSize;
            return this;
        }
        public Builder targetSize(@Nullable Integer targetSize) {
            this.targetSize = Codegen.ofNullable(targetSize);
            return this;
        }
        public Builder updatePolicy(@Nullable Output<InstanceGroupManagerUpdatePolicyArgs> updatePolicy) {
            this.updatePolicy = updatePolicy;
            return this;
        }
        public Builder updatePolicy(@Nullable InstanceGroupManagerUpdatePolicyArgs updatePolicy) {
            this.updatePolicy = Codegen.ofNullable(updatePolicy);
            return this;
        }
        public Builder versions(@Nullable Output<List<InstanceGroupManagerVersionArgs>> versions) {
            this.versions = versions;
            return this;
        }
        public Builder versions(@Nullable List<InstanceGroupManagerVersionArgs> versions) {
            this.versions = Codegen.ofNullable(versions);
            return this;
        }
        public Builder versions(InstanceGroupManagerVersionArgs... versions) {
            return versions(List.of(versions));
        }        public RegionInstanceGroupManagerArgs build() {
            return new RegionInstanceGroupManagerArgs(autoHealingPolicies, baseInstanceName, description, distributionPolicy, failoverAction, instanceTemplate, name, namedPorts, project, region, requestId, serviceAccount, statefulPolicy, targetPools, targetSize, updatePolicy, versions);
        }
    }
}
