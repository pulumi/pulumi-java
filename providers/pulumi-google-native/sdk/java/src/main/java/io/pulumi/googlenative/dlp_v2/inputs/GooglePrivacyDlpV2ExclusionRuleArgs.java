// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dlp_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.dlp_v2.enums.GooglePrivacyDlpV2ExclusionRuleMatchingType;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2DictionaryArgs;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2ExcludeInfoTypesArgs;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2RegexArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
 * 
 */
public final class GooglePrivacyDlpV2ExclusionRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2ExclusionRuleArgs Empty = new GooglePrivacyDlpV2ExclusionRuleArgs();

    /**
     * Dictionary which defines the rule.
     * 
     */
    @Import(name="dictionary")
      private final @Nullable Output<GooglePrivacyDlpV2DictionaryArgs> dictionary;

    public Output<GooglePrivacyDlpV2DictionaryArgs> getDictionary() {
        return this.dictionary == null ? Codegen.empty() : this.dictionary;
    }

    /**
     * Set of infoTypes for which findings would affect this rule.
     * 
     */
    @Import(name="excludeInfoTypes")
      private final @Nullable Output<GooglePrivacyDlpV2ExcludeInfoTypesArgs> excludeInfoTypes;

    public Output<GooglePrivacyDlpV2ExcludeInfoTypesArgs> getExcludeInfoTypes() {
        return this.excludeInfoTypes == null ? Codegen.empty() : this.excludeInfoTypes;
    }

    /**
     * How the rule is applied, see MatchingType documentation for details.
     * 
     */
    @Import(name="matchingType")
      private final @Nullable Output<GooglePrivacyDlpV2ExclusionRuleMatchingType> matchingType;

    public Output<GooglePrivacyDlpV2ExclusionRuleMatchingType> getMatchingType() {
        return this.matchingType == null ? Codegen.empty() : this.matchingType;
    }

    /**
     * Regular expression which defines the rule.
     * 
     */
    @Import(name="regex")
      private final @Nullable Output<GooglePrivacyDlpV2RegexArgs> regex;

    public Output<GooglePrivacyDlpV2RegexArgs> getRegex() {
        return this.regex == null ? Codegen.empty() : this.regex;
    }

    public GooglePrivacyDlpV2ExclusionRuleArgs(
        @Nullable Output<GooglePrivacyDlpV2DictionaryArgs> dictionary,
        @Nullable Output<GooglePrivacyDlpV2ExcludeInfoTypesArgs> excludeInfoTypes,
        @Nullable Output<GooglePrivacyDlpV2ExclusionRuleMatchingType> matchingType,
        @Nullable Output<GooglePrivacyDlpV2RegexArgs> regex) {
        this.dictionary = dictionary;
        this.excludeInfoTypes = excludeInfoTypes;
        this.matchingType = matchingType;
        this.regex = regex;
    }

    private GooglePrivacyDlpV2ExclusionRuleArgs() {
        this.dictionary = Codegen.empty();
        this.excludeInfoTypes = Codegen.empty();
        this.matchingType = Codegen.empty();
        this.regex = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2ExclusionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<GooglePrivacyDlpV2DictionaryArgs> dictionary;
        private @Nullable Output<GooglePrivacyDlpV2ExcludeInfoTypesArgs> excludeInfoTypes;
        private @Nullable Output<GooglePrivacyDlpV2ExclusionRuleMatchingType> matchingType;
        private @Nullable Output<GooglePrivacyDlpV2RegexArgs> regex;

        public Builder() {
    	      // Empty
        }

        public Builder(GooglePrivacyDlpV2ExclusionRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dictionary = defaults.dictionary;
    	      this.excludeInfoTypes = defaults.excludeInfoTypes;
    	      this.matchingType = defaults.matchingType;
    	      this.regex = defaults.regex;
        }

        public Builder dictionary(@Nullable Output<GooglePrivacyDlpV2DictionaryArgs> dictionary) {
            this.dictionary = dictionary;
            return this;
        }
        public Builder dictionary(@Nullable GooglePrivacyDlpV2DictionaryArgs dictionary) {
            this.dictionary = Codegen.ofNullable(dictionary);
            return this;
        }
        public Builder excludeInfoTypes(@Nullable Output<GooglePrivacyDlpV2ExcludeInfoTypesArgs> excludeInfoTypes) {
            this.excludeInfoTypes = excludeInfoTypes;
            return this;
        }
        public Builder excludeInfoTypes(@Nullable GooglePrivacyDlpV2ExcludeInfoTypesArgs excludeInfoTypes) {
            this.excludeInfoTypes = Codegen.ofNullable(excludeInfoTypes);
            return this;
        }
        public Builder matchingType(@Nullable Output<GooglePrivacyDlpV2ExclusionRuleMatchingType> matchingType) {
            this.matchingType = matchingType;
            return this;
        }
        public Builder matchingType(@Nullable GooglePrivacyDlpV2ExclusionRuleMatchingType matchingType) {
            this.matchingType = Codegen.ofNullable(matchingType);
            return this;
        }
        public Builder regex(@Nullable Output<GooglePrivacyDlpV2RegexArgs> regex) {
            this.regex = regex;
            return this;
        }
        public Builder regex(@Nullable GooglePrivacyDlpV2RegexArgs regex) {
            this.regex = Codegen.ofNullable(regex);
            return this;
        }        public GooglePrivacyDlpV2ExclusionRuleArgs build() {
            return new GooglePrivacyDlpV2ExclusionRuleArgs(dictionary, excludeInfoTypes, matchingType, regex);
        }
    }
}
