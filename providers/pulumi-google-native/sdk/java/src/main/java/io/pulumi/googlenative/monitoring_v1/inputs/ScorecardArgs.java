// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v1.inputs.GaugeViewArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.SparkChartViewArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.ThresholdArgs;
import io.pulumi.googlenative.monitoring_v1.inputs.TimeSeriesQueryArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScorecardArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScorecardArgs Empty = new ScorecardArgs();

    @InputImport(name="gaugeView")
    private final @Nullable Input<GaugeViewArgs> gaugeView;

    public Input<GaugeViewArgs> getGaugeView() {
        return this.gaugeView == null ? Input.empty() : this.gaugeView;
    }

    @InputImport(name="sparkChartView")
    private final @Nullable Input<SparkChartViewArgs> sparkChartView;

    public Input<SparkChartViewArgs> getSparkChartView() {
        return this.sparkChartView == null ? Input.empty() : this.sparkChartView;
    }

    @InputImport(name="thresholds")
    private final @Nullable Input<List<ThresholdArgs>> thresholds;

    public Input<List<ThresholdArgs>> getThresholds() {
        return this.thresholds == null ? Input.empty() : this.thresholds;
    }

    @InputImport(name="timeSeriesQuery", required=true)
    private final Input<TimeSeriesQueryArgs> timeSeriesQuery;

    public Input<TimeSeriesQueryArgs> getTimeSeriesQuery() {
        return this.timeSeriesQuery;
    }

    public ScorecardArgs(
        @Nullable Input<GaugeViewArgs> gaugeView,
        @Nullable Input<SparkChartViewArgs> sparkChartView,
        @Nullable Input<List<ThresholdArgs>> thresholds,
        Input<TimeSeriesQueryArgs> timeSeriesQuery) {
        this.gaugeView = gaugeView;
        this.sparkChartView = sparkChartView;
        this.thresholds = thresholds;
        this.timeSeriesQuery = Objects.requireNonNull(timeSeriesQuery, "expected parameter 'timeSeriesQuery' to be non-null");
    }

    private ScorecardArgs() {
        this.gaugeView = Input.empty();
        this.sparkChartView = Input.empty();
        this.thresholds = Input.empty();
        this.timeSeriesQuery = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScorecardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<GaugeViewArgs> gaugeView;
        private @Nullable Input<SparkChartViewArgs> sparkChartView;
        private @Nullable Input<List<ThresholdArgs>> thresholds;
        private Input<TimeSeriesQueryArgs> timeSeriesQuery;

        public Builder() {
    	      // Empty
        }

        public Builder(ScorecardArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gaugeView = defaults.gaugeView;
    	      this.sparkChartView = defaults.sparkChartView;
    	      this.thresholds = defaults.thresholds;
    	      this.timeSeriesQuery = defaults.timeSeriesQuery;
        }

        public Builder setGaugeView(@Nullable Input<GaugeViewArgs> gaugeView) {
            this.gaugeView = gaugeView;
            return this;
        }

        public Builder setGaugeView(@Nullable GaugeViewArgs gaugeView) {
            this.gaugeView = Input.ofNullable(gaugeView);
            return this;
        }

        public Builder setSparkChartView(@Nullable Input<SparkChartViewArgs> sparkChartView) {
            this.sparkChartView = sparkChartView;
            return this;
        }

        public Builder setSparkChartView(@Nullable SparkChartViewArgs sparkChartView) {
            this.sparkChartView = Input.ofNullable(sparkChartView);
            return this;
        }

        public Builder setThresholds(@Nullable Input<List<ThresholdArgs>> thresholds) {
            this.thresholds = thresholds;
            return this;
        }

        public Builder setThresholds(@Nullable List<ThresholdArgs> thresholds) {
            this.thresholds = Input.ofNullable(thresholds);
            return this;
        }

        public Builder setTimeSeriesQuery(Input<TimeSeriesQueryArgs> timeSeriesQuery) {
            this.timeSeriesQuery = Objects.requireNonNull(timeSeriesQuery);
            return this;
        }

        public Builder setTimeSeriesQuery(TimeSeriesQueryArgs timeSeriesQuery) {
            this.timeSeriesQuery = Input.of(Objects.requireNonNull(timeSeriesQuery));
            return this;
        }

        public ScorecardArgs build() {
            return new ScorecardArgs(gaugeView, sparkChartView, thresholds, timeSeriesQuery);
        }
    }
}
