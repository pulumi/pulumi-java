// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudkms_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.cloudkms_v1.enums.CryptoKeyVersionState;
import io.pulumi.googlenative.cloudkms_v1.inputs.ExternalProtectionLevelOptionsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CryptoKeyVersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final CryptoKeyVersionArgs Empty = new CryptoKeyVersionArgs();

    @InputImport(name="cryptoKeyId", required=true)
    private final Input<String> cryptoKeyId;

    public Input<String> getCryptoKeyId() {
        return this.cryptoKeyId;
    }

    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     * 
     */
    @InputImport(name="externalProtectionLevelOptions")
    private final @Nullable Input<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions;

    public Input<ExternalProtectionLevelOptionsArgs> getExternalProtectionLevelOptions() {
        return this.externalProtectionLevelOptions == null ? Input.empty() : this.externalProtectionLevelOptions;
    }

    @InputImport(name="keyRingId", required=true)
    private final Input<String> keyRingId;

    public Input<String> getKeyRingId() {
        return this.keyRingId;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The current state of the CryptoKeyVersion.
     * 
     */
    @InputImport(name="state")
    private final @Nullable Input<CryptoKeyVersionState> state;

    public Input<CryptoKeyVersionState> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    public CryptoKeyVersionArgs(
        Input<String> cryptoKeyId,
        @Nullable Input<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions,
        Input<String> keyRingId,
        @Nullable Input<String> location,
        @Nullable Input<String> project,
        @Nullable Input<CryptoKeyVersionState> state) {
        this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
        this.externalProtectionLevelOptions = externalProtectionLevelOptions;
        this.keyRingId = Objects.requireNonNull(keyRingId, "expected parameter 'keyRingId' to be non-null");
        this.location = location;
        this.project = project;
        this.state = state;
    }

    private CryptoKeyVersionArgs() {
        this.cryptoKeyId = Input.empty();
        this.externalProtectionLevelOptions = Input.empty();
        this.keyRingId = Input.empty();
        this.location = Input.empty();
        this.project = Input.empty();
        this.state = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CryptoKeyVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> cryptoKeyId;
        private @Nullable Input<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions;
        private Input<String> keyRingId;
        private @Nullable Input<String> location;
        private @Nullable Input<String> project;
        private @Nullable Input<CryptoKeyVersionState> state;

        public Builder() {
    	      // Empty
        }

        public Builder(CryptoKeyVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyId = defaults.cryptoKeyId;
    	      this.externalProtectionLevelOptions = defaults.externalProtectionLevelOptions;
    	      this.keyRingId = defaults.keyRingId;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
        }

        public Builder setCryptoKeyId(Input<String> cryptoKeyId) {
            this.cryptoKeyId = Objects.requireNonNull(cryptoKeyId);
            return this;
        }

        public Builder setCryptoKeyId(String cryptoKeyId) {
            this.cryptoKeyId = Input.of(Objects.requireNonNull(cryptoKeyId));
            return this;
        }

        public Builder setExternalProtectionLevelOptions(@Nullable Input<ExternalProtectionLevelOptionsArgs> externalProtectionLevelOptions) {
            this.externalProtectionLevelOptions = externalProtectionLevelOptions;
            return this;
        }

        public Builder setExternalProtectionLevelOptions(@Nullable ExternalProtectionLevelOptionsArgs externalProtectionLevelOptions) {
            this.externalProtectionLevelOptions = Input.ofNullable(externalProtectionLevelOptions);
            return this;
        }

        public Builder setKeyRingId(Input<String> keyRingId) {
            this.keyRingId = Objects.requireNonNull(keyRingId);
            return this;
        }

        public Builder setKeyRingId(String keyRingId) {
            this.keyRingId = Input.of(Objects.requireNonNull(keyRingId));
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setState(@Nullable Input<CryptoKeyVersionState> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable CryptoKeyVersionState state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public CryptoKeyVersionArgs build() {
            return new CryptoKeyVersionArgs(cryptoKeyId, externalProtectionLevelOptions, keyRingId, location, project, state);
        }
    }
}
