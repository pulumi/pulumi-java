// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.VolumeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A step in the build pipeline.
 * 
 */
public final class BuildStepArgs extends io.pulumi.resources.ResourceArgs {

    public static final BuildStepArgs Empty = new BuildStepArgs();

    /**
     * A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
     * 
     */
    @InputImport(name="args")
    private final @Nullable Input<List<String>> args;

    public Input<List<String>> getArgs() {
        return this.args == null ? Input.empty() : this.args;
    }

    /**
     * Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
     * 
     */
    @InputImport(name="dir")
    private final @Nullable Input<String> dir;

    public Input<String> getDir() {
        return this.dir == null ? Input.empty() : this.dir;
    }

    /**
     * Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
     * 
     */
    @InputImport(name="entrypoint")
    private final @Nullable Input<String> entrypoint;

    public Input<String> getEntrypoint() {
        return this.entrypoint == null ? Input.empty() : this.entrypoint;
    }

    /**
     * A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     * 
     */
    @InputImport(name="env")
    private final @Nullable Input<List<String>> env;

    public Input<List<String>> getEnv() {
        return this.env == null ? Input.empty() : this.env;
    }

    /**
     * Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
     * 
     */
    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
     * 
     */
    @InputImport(name="script")
    private final @Nullable Input<String> script;

    public Input<String> getScript() {
        return this.script == null ? Input.empty() : this.script;
    }

    /**
     * A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
     * 
     */
    @InputImport(name="secretEnv")
    private final @Nullable Input<List<String>> secretEnv;

    public Input<List<String>> getSecretEnv() {
        return this.secretEnv == null ? Input.empty() : this.secretEnv;
    }

    /**
     * Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
     * 
     */
    @InputImport(name="timeout")
    private final @Nullable Input<String> timeout;

    public Input<String> getTimeout() {
        return this.timeout == null ? Input.empty() : this.timeout;
    }

    /**
     * List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
     * 
     */
    @InputImport(name="volumes")
    private final @Nullable Input<List<VolumeArgs>> volumes;

    public Input<List<VolumeArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    /**
     * The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
     * 
     */
    @InputImport(name="waitFor")
    private final @Nullable Input<List<String>> waitFor;

    public Input<List<String>> getWaitFor() {
        return this.waitFor == null ? Input.empty() : this.waitFor;
    }

    public BuildStepArgs(
        @Nullable Input<List<String>> args,
        @Nullable Input<String> dir,
        @Nullable Input<String> entrypoint,
        @Nullable Input<List<String>> env,
        @Nullable Input<String> id,
        Input<String> name,
        @Nullable Input<String> script,
        @Nullable Input<List<String>> secretEnv,
        @Nullable Input<String> timeout,
        @Nullable Input<List<VolumeArgs>> volumes,
        @Nullable Input<List<String>> waitFor) {
        this.args = args;
        this.dir = dir;
        this.entrypoint = entrypoint;
        this.env = env;
        this.id = id;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.script = script;
        this.secretEnv = secretEnv;
        this.timeout = timeout;
        this.volumes = volumes;
        this.waitFor = waitFor;
    }

    private BuildStepArgs() {
        this.args = Input.empty();
        this.dir = Input.empty();
        this.entrypoint = Input.empty();
        this.env = Input.empty();
        this.id = Input.empty();
        this.name = Input.empty();
        this.script = Input.empty();
        this.secretEnv = Input.empty();
        this.timeout = Input.empty();
        this.volumes = Input.empty();
        this.waitFor = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> args;
        private @Nullable Input<String> dir;
        private @Nullable Input<String> entrypoint;
        private @Nullable Input<List<String>> env;
        private @Nullable Input<String> id;
        private Input<String> name;
        private @Nullable Input<String> script;
        private @Nullable Input<List<String>> secretEnv;
        private @Nullable Input<String> timeout;
        private @Nullable Input<List<VolumeArgs>> volumes;
        private @Nullable Input<List<String>> waitFor;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildStepArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.dir = defaults.dir;
    	      this.entrypoint = defaults.entrypoint;
    	      this.env = defaults.env;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.script = defaults.script;
    	      this.secretEnv = defaults.secretEnv;
    	      this.timeout = defaults.timeout;
    	      this.volumes = defaults.volumes;
    	      this.waitFor = defaults.waitFor;
        }

        public Builder setArgs(@Nullable Input<List<String>> args) {
            this.args = args;
            return this;
        }

        public Builder setArgs(@Nullable List<String> args) {
            this.args = Input.ofNullable(args);
            return this;
        }

        public Builder setDir(@Nullable Input<String> dir) {
            this.dir = dir;
            return this;
        }

        public Builder setDir(@Nullable String dir) {
            this.dir = Input.ofNullable(dir);
            return this;
        }

        public Builder setEntrypoint(@Nullable Input<String> entrypoint) {
            this.entrypoint = entrypoint;
            return this;
        }

        public Builder setEntrypoint(@Nullable String entrypoint) {
            this.entrypoint = Input.ofNullable(entrypoint);
            return this;
        }

        public Builder setEnv(@Nullable Input<List<String>> env) {
            this.env = env;
            return this;
        }

        public Builder setEnv(@Nullable List<String> env) {
            this.env = Input.ofNullable(env);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setScript(@Nullable Input<String> script) {
            this.script = script;
            return this;
        }

        public Builder setScript(@Nullable String script) {
            this.script = Input.ofNullable(script);
            return this;
        }

        public Builder setSecretEnv(@Nullable Input<List<String>> secretEnv) {
            this.secretEnv = secretEnv;
            return this;
        }

        public Builder setSecretEnv(@Nullable List<String> secretEnv) {
            this.secretEnv = Input.ofNullable(secretEnv);
            return this;
        }

        public Builder setTimeout(@Nullable Input<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder setTimeout(@Nullable String timeout) {
            this.timeout = Input.ofNullable(timeout);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<VolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<VolumeArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }

        public Builder setWaitFor(@Nullable Input<List<String>> waitFor) {
            this.waitFor = waitFor;
            return this;
        }

        public Builder setWaitFor(@Nullable List<String> waitFor) {
            this.waitFor = Input.ofNullable(waitFor);
            return this;
        }

        public BuildStepArgs build() {
            return new BuildStepArgs(args, dir, entrypoint, env, id, name, script, secretEnv, timeout, volumes, waitFor);
        }
    }
}
