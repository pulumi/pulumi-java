// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1.inputs.CVSSResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.PackageIssueResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.RelatedUrlResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An occurrence of a severity vulnerability on a resource.
 * 
 */
public final class VulnerabilityOccurrenceResponse extends io.pulumi.resources.InvokeArgs {

    public static final VulnerabilityOccurrenceResponse Empty = new VulnerabilityOccurrenceResponse();

    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    @InputImport(name="cvssScore", required=true)
    private final Double cvssScore;

    public Double getCvssScore() {
        return this.cvssScore;
    }

    /**
     * The cvss v3 score for the vulnerability.
     * 
     */
    @InputImport(name="cvssv3", required=true)
    private final CVSSResponse cvssv3;

    public CVSSResponse getCvssv3() {
        return this.cvssv3;
    }

    /**
     * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    @InputImport(name="effectiveSeverity", required=true)
    private final String effectiveSeverity;

    public String getEffectiveSeverity() {
        return this.effectiveSeverity;
    }

    /**
     * Whether at least one of the affected packages has a fix available.
     * 
     */
    @InputImport(name="fixAvailable", required=true)
    private final Boolean fixAvailable;

    public Boolean getFixAvailable() {
        return this.fixAvailable;
    }

    /**
     * A detailed description of this vulnerability.
     * 
     */
    @InputImport(name="longDescription", required=true)
    private final String longDescription;

    public String getLongDescription() {
        return this.longDescription;
    }

    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    @InputImport(name="packageIssue", required=true)
    private final List<PackageIssueResponse> packageIssue;

    public List<PackageIssueResponse> getPackageIssue() {
        return this.packageIssue;
    }

    /**
     * URLs related to this vulnerability.
     * 
     */
    @InputImport(name="relatedUrls", required=true)
    private final List<RelatedUrlResponse> relatedUrls;

    public List<RelatedUrlResponse> getRelatedUrls() {
        return this.relatedUrls;
    }

    /**
     * The note provider assigned severity of this vulnerability.
     * 
     */
    @InputImport(name="severity", required=true)
    private final String severity;

    public String getSeverity() {
        return this.severity;
    }

    /**
     * A one sentence description of this vulnerability.
     * 
     */
    @InputImport(name="shortDescription", required=true)
    private final String shortDescription;

    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public VulnerabilityOccurrenceResponse(
        Double cvssScore,
        CVSSResponse cvssv3,
        String effectiveSeverity,
        Boolean fixAvailable,
        String longDescription,
        List<PackageIssueResponse> packageIssue,
        List<RelatedUrlResponse> relatedUrls,
        String severity,
        String shortDescription,
        String type) {
        this.cvssScore = Objects.requireNonNull(cvssScore, "expected parameter 'cvssScore' to be non-null");
        this.cvssv3 = Objects.requireNonNull(cvssv3, "expected parameter 'cvssv3' to be non-null");
        this.effectiveSeverity = Objects.requireNonNull(effectiveSeverity, "expected parameter 'effectiveSeverity' to be non-null");
        this.fixAvailable = Objects.requireNonNull(fixAvailable, "expected parameter 'fixAvailable' to be non-null");
        this.longDescription = Objects.requireNonNull(longDescription, "expected parameter 'longDescription' to be non-null");
        this.packageIssue = Objects.requireNonNull(packageIssue, "expected parameter 'packageIssue' to be non-null");
        this.relatedUrls = Objects.requireNonNull(relatedUrls, "expected parameter 'relatedUrls' to be non-null");
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.shortDescription = Objects.requireNonNull(shortDescription, "expected parameter 'shortDescription' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private VulnerabilityOccurrenceResponse() {
        this.cvssScore = null;
        this.cvssv3 = null;
        this.effectiveSeverity = null;
        this.fixAvailable = null;
        this.longDescription = null;
        this.packageIssue = List.of();
        this.relatedUrls = List.of();
        this.severity = null;
        this.shortDescription = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VulnerabilityOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double cvssScore;
        private CVSSResponse cvssv3;
        private String effectiveSeverity;
        private Boolean fixAvailable;
        private String longDescription;
        private List<PackageIssueResponse> packageIssue;
        private List<RelatedUrlResponse> relatedUrls;
        private String severity;
        private String shortDescription;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(VulnerabilityOccurrenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cvssScore = defaults.cvssScore;
    	      this.cvssv3 = defaults.cvssv3;
    	      this.effectiveSeverity = defaults.effectiveSeverity;
    	      this.fixAvailable = defaults.fixAvailable;
    	      this.longDescription = defaults.longDescription;
    	      this.packageIssue = defaults.packageIssue;
    	      this.relatedUrls = defaults.relatedUrls;
    	      this.severity = defaults.severity;
    	      this.shortDescription = defaults.shortDescription;
    	      this.type = defaults.type;
        }

        public Builder setCvssScore(Double cvssScore) {
            this.cvssScore = Objects.requireNonNull(cvssScore);
            return this;
        }

        public Builder setCvssv3(CVSSResponse cvssv3) {
            this.cvssv3 = Objects.requireNonNull(cvssv3);
            return this;
        }

        public Builder setEffectiveSeverity(String effectiveSeverity) {
            this.effectiveSeverity = Objects.requireNonNull(effectiveSeverity);
            return this;
        }

        public Builder setFixAvailable(Boolean fixAvailable) {
            this.fixAvailable = Objects.requireNonNull(fixAvailable);
            return this;
        }

        public Builder setLongDescription(String longDescription) {
            this.longDescription = Objects.requireNonNull(longDescription);
            return this;
        }

        public Builder setPackageIssue(List<PackageIssueResponse> packageIssue) {
            this.packageIssue = Objects.requireNonNull(packageIssue);
            return this;
        }

        public Builder setRelatedUrls(List<RelatedUrlResponse> relatedUrls) {
            this.relatedUrls = Objects.requireNonNull(relatedUrls);
            return this;
        }

        public Builder setSeverity(String severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }

        public Builder setShortDescription(String shortDescription) {
            this.shortDescription = Objects.requireNonNull(shortDescription);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public VulnerabilityOccurrenceResponse build() {
            return new VulnerabilityOccurrenceResponse(cvssScore, cvssv3, effectiveSeverity, fixAvailable, longDescription, packageIssue, relatedUrls, severity, shortDescription, type);
        }
    }
}
