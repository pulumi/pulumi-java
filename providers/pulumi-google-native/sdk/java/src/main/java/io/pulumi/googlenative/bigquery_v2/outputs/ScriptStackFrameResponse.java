// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class ScriptStackFrameResponse {
    /**
     * One-based end column.
     * 
     */
    private final Integer endColumn;
    /**
     * One-based end line.
     * 
     */
    private final Integer endLine;
    /**
     * Name of the active procedure, empty if in a top-level script.
     * 
     */
    private final String procedureId;
    /**
     * One-based start column.
     * 
     */
    private final Integer startColumn;
    /**
     * One-based start line.
     * 
     */
    private final Integer startLine;
    /**
     * Text of the current statement/expression.
     * 
     */
    private final String text;

    @OutputCustomType.Constructor({"endColumn","endLine","procedureId","startColumn","startLine","text"})
    private ScriptStackFrameResponse(
        Integer endColumn,
        Integer endLine,
        String procedureId,
        Integer startColumn,
        Integer startLine,
        String text) {
        this.endColumn = Objects.requireNonNull(endColumn);
        this.endLine = Objects.requireNonNull(endLine);
        this.procedureId = Objects.requireNonNull(procedureId);
        this.startColumn = Objects.requireNonNull(startColumn);
        this.startLine = Objects.requireNonNull(startLine);
        this.text = Objects.requireNonNull(text);
    }

    /**
     * One-based end column.
     * 
     */
    public Integer getEndColumn() {
        return this.endColumn;
    }
    /**
     * One-based end line.
     * 
     */
    public Integer getEndLine() {
        return this.endLine;
    }
    /**
     * Name of the active procedure, empty if in a top-level script.
     * 
     */
    public String getProcedureId() {
        return this.procedureId;
    }
    /**
     * One-based start column.
     * 
     */
    public Integer getStartColumn() {
        return this.startColumn;
    }
    /**
     * One-based start line.
     * 
     */
    public Integer getStartLine() {
        return this.startLine;
    }
    /**
     * Text of the current statement/expression.
     * 
     */
    public String getText() {
        return this.text;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScriptStackFrameResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer endColumn;
        private Integer endLine;
        private String procedureId;
        private Integer startColumn;
        private Integer startLine;
        private String text;

        public Builder() {
    	      // Empty
        }

        public Builder(ScriptStackFrameResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endColumn = defaults.endColumn;
    	      this.endLine = defaults.endLine;
    	      this.procedureId = defaults.procedureId;
    	      this.startColumn = defaults.startColumn;
    	      this.startLine = defaults.startLine;
    	      this.text = defaults.text;
        }

        public Builder setEndColumn(Integer endColumn) {
            this.endColumn = Objects.requireNonNull(endColumn);
            return this;
        }

        public Builder setEndLine(Integer endLine) {
            this.endLine = Objects.requireNonNull(endLine);
            return this;
        }

        public Builder setProcedureId(String procedureId) {
            this.procedureId = Objects.requireNonNull(procedureId);
            return this;
        }

        public Builder setStartColumn(Integer startColumn) {
            this.startColumn = Objects.requireNonNull(startColumn);
            return this;
        }

        public Builder setStartLine(Integer startLine) {
            this.startLine = Objects.requireNonNull(startLine);
            return this;
        }

        public Builder setText(String text) {
            this.text = Objects.requireNonNull(text);
            return this;
        }

        public ScriptStackFrameResponse build() {
            return new ScriptStackFrameResponse(endColumn, endLine, procedureId, startColumn, startLine, text);
        }
    }
}
