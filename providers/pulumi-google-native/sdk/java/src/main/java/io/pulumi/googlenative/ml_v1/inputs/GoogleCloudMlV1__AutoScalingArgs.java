// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ml_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.ml_v1.inputs.GoogleCloudMlV1__MetricSpecArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Options for automatically scaling a model.
 * 
 */
public final class GoogleCloudMlV1__AutoScalingArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__AutoScalingArgs Empty = new GoogleCloudMlV1__AutoScalingArgs();

    /**
     * The maximum number of nodes to scale this model under load. The actual value will depend on resource quota and availability.
     * 
     */
    @InputImport(name="maxNodes")
    private final @Nullable Input<Integer> maxNodes;

    public Input<Integer> getMaxNodes() {
        return this.maxNodes == null ? Input.empty() : this.maxNodes;
    }

    /**
     * MetricSpec contains the specifications to use to calculate the desired nodes count.
     * 
     */
    @InputImport(name="metrics")
    private final @Nullable Input<List<GoogleCloudMlV1__MetricSpecArgs>> metrics;

    public Input<List<GoogleCloudMlV1__MetricSpecArgs>> getMetrics() {
        return this.metrics == null ? Input.empty() : this.metrics;
    }

    /**
     * Optional. The minimum number of nodes to allocate for this model. These nodes are always up, starting from the time the model is deployed. Therefore, the cost of operating this model will be at least `rate` * `min_nodes` * number of hours since last billing cycle, where `rate` is the cost per node-hour as documented in the [pricing guide](/ml-engine/docs/pricing), even if no predictions are performed. There is additional cost for each prediction performed. Unlike manual scaling, if the load gets too heavy for the nodes that are up, the service will automatically add nodes to handle the increased load as well as scale back as traffic drops, always maintaining at least `min_nodes`. You will be charged for the time in which additional nodes are used. If `min_nodes` is not specified and AutoScaling is used with a [legacy (MLS1) machine type](/ml-engine/docs/machine-types-online-prediction), `min_nodes` defaults to 0, in which case, when traffic to a model stops (and after a cool-down period), nodes will be shut down and no charges will be incurred until traffic to the model resumes. If `min_nodes` is not specified and AutoScaling is used with a [Compute Engine (N1) machine type](/ml-engine/docs/machine-types-online-prediction), `min_nodes` defaults to 1. `min_nodes` must be at least 1 for use with a Compute Engine machine type. You can set `min_nodes` when creating the model version, and you can also update `min_nodes` for an existing version: update_body.json: { 'autoScaling': { 'minNodes': 5 } } HTTP request: PATCH https://ml.googleapis.com/v1/{name=projects/*{@literal /}models/*{@literal /}versions/*}?update_mask=autoScaling.minNodes -d @./update_body.json
     * 
     */
    @InputImport(name="minNodes")
    private final @Nullable Input<Integer> minNodes;

    public Input<Integer> getMinNodes() {
        return this.minNodes == null ? Input.empty() : this.minNodes;
    }

    public GoogleCloudMlV1__AutoScalingArgs(
        @Nullable Input<Integer> maxNodes,
        @Nullable Input<List<GoogleCloudMlV1__MetricSpecArgs>> metrics,
        @Nullable Input<Integer> minNodes) {
        this.maxNodes = maxNodes;
        this.metrics = metrics;
        this.minNodes = minNodes;
    }

    private GoogleCloudMlV1__AutoScalingArgs() {
        this.maxNodes = Input.empty();
        this.metrics = Input.empty();
        this.minNodes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudMlV1__AutoScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxNodes;
        private @Nullable Input<List<GoogleCloudMlV1__MetricSpecArgs>> metrics;
        private @Nullable Input<Integer> minNodes;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudMlV1__AutoScalingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxNodes = defaults.maxNodes;
    	      this.metrics = defaults.metrics;
    	      this.minNodes = defaults.minNodes;
        }

        public Builder setMaxNodes(@Nullable Input<Integer> maxNodes) {
            this.maxNodes = maxNodes;
            return this;
        }

        public Builder setMaxNodes(@Nullable Integer maxNodes) {
            this.maxNodes = Input.ofNullable(maxNodes);
            return this;
        }

        public Builder setMetrics(@Nullable Input<List<GoogleCloudMlV1__MetricSpecArgs>> metrics) {
            this.metrics = metrics;
            return this;
        }

        public Builder setMetrics(@Nullable List<GoogleCloudMlV1__MetricSpecArgs> metrics) {
            this.metrics = Input.ofNullable(metrics);
            return this;
        }

        public Builder setMinNodes(@Nullable Input<Integer> minNodes) {
            this.minNodes = minNodes;
            return this;
        }

        public Builder setMinNodes(@Nullable Integer minNodes) {
            this.minNodes = Input.ofNullable(minNodes);
            return this;
        }

        public GoogleCloudMlV1__AutoScalingArgs build() {
            return new GoogleCloudMlV1__AutoScalingArgs(maxNodes, metrics, minNodes);
        }
    }
}
