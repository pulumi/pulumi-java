// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1beta1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFhirArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetFhirArgs Empty = new GetFhirArgs();

    @InputImport(name="datasetId", required=true)
      private final String datasetId;

    public String getDatasetId() {
        return this.datasetId;
    }

    @InputImport(name="fhirId", required=true)
      private final String fhirId;

    public String getFhirId() {
        return this.fhirId;
    }

    @InputImport(name="fhirId1", required=true)
      private final String fhirId1;

    public String getFhirId1() {
        return this.fhirId1;
    }

    @InputImport(name="fhirStoreId", required=true)
      private final String fhirStoreId;

    public String getFhirStoreId() {
        return this.fhirStoreId;
    }

    @InputImport(name="location", required=true)
      private final String location;

    public String getLocation() {
        return this.location;
    }

    @InputImport(name="project")
      private final @Nullable String project;

    public Optional<String> getProject() {
        return this.project == null ? Optional.empty() : Optional.ofNullable(this.project);
    }

    public GetFhirArgs(
        String datasetId,
        String fhirId,
        String fhirId1,
        String fhirStoreId,
        String location,
        @Nullable String project) {
        this.datasetId = Objects.requireNonNull(datasetId, "expected parameter 'datasetId' to be non-null");
        this.fhirId = Objects.requireNonNull(fhirId, "expected parameter 'fhirId' to be non-null");
        this.fhirId1 = Objects.requireNonNull(fhirId1, "expected parameter 'fhirId1' to be non-null");
        this.fhirStoreId = Objects.requireNonNull(fhirStoreId, "expected parameter 'fhirStoreId' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.project = project;
    }

    private GetFhirArgs() {
        this.datasetId = null;
        this.fhirId = null;
        this.fhirId1 = null;
        this.fhirStoreId = null;
        this.location = null;
        this.project = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFhirArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String datasetId;
        private String fhirId;
        private String fhirId1;
        private String fhirStoreId;
        private String location;
        private @Nullable String project;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFhirArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetId = defaults.datasetId;
    	      this.fhirId = defaults.fhirId;
    	      this.fhirId1 = defaults.fhirId1;
    	      this.fhirStoreId = defaults.fhirStoreId;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
        }

        public Builder datasetId(String datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }

        public Builder fhirId(String fhirId) {
            this.fhirId = Objects.requireNonNull(fhirId);
            return this;
        }

        public Builder fhirId1(String fhirId1) {
            this.fhirId1 = Objects.requireNonNull(fhirId1);
            return this;
        }

        public Builder fhirStoreId(String fhirStoreId) {
            this.fhirStoreId = Objects.requireNonNull(fhirStoreId);
            return this;
        }

        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        public GetFhirArgs build() {
            return new GetFhirArgs(datasetId, fhirId, fhirId1, fhirStoreId, location, project);
        }
    }
}
