// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.websecurityscanner_v1beta.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunErrorTraceResponse;
import io.pulumi.googlenative.websecurityscanner_v1beta.inputs.ScanRunWarningTraceResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ScanRunResponse extends io.pulumi.resources.InvokeArgs {

    public static final ScanRunResponse Empty = new ScanRunResponse();

    @InputImport(name="endTime", required=true)
    private final String endTime;

    public String getEndTime() {
        return this.endTime;
    }

    @InputImport(name="errorTrace", required=true)
    private final ScanRunErrorTraceResponse errorTrace;

    public ScanRunErrorTraceResponse getErrorTrace() {
        return this.errorTrace;
    }

    @InputImport(name="executionState", required=true)
    private final String executionState;

    public String getExecutionState() {
        return this.executionState;
    }

    @InputImport(name="hasVulnerabilities", required=true)
    private final Boolean hasVulnerabilities;

    public Boolean getHasVulnerabilities() {
        return this.hasVulnerabilities;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="progressPercent", required=true)
    private final Integer progressPercent;

    public Integer getProgressPercent() {
        return this.progressPercent;
    }

    @InputImport(name="resultState", required=true)
    private final String resultState;

    public String getResultState() {
        return this.resultState;
    }

    @InputImport(name="startTime", required=true)
    private final String startTime;

    public String getStartTime() {
        return this.startTime;
    }

    @InputImport(name="urlsCrawledCount", required=true)
    private final String urlsCrawledCount;

    public String getUrlsCrawledCount() {
        return this.urlsCrawledCount;
    }

    @InputImport(name="urlsTestedCount", required=true)
    private final String urlsTestedCount;

    public String getUrlsTestedCount() {
        return this.urlsTestedCount;
    }

    @InputImport(name="warningTraces", required=true)
    private final List<ScanRunWarningTraceResponse> warningTraces;

    public List<ScanRunWarningTraceResponse> getWarningTraces() {
        return this.warningTraces;
    }

    public ScanRunResponse(
        String endTime,
        ScanRunErrorTraceResponse errorTrace,
        String executionState,
        Boolean hasVulnerabilities,
        String name,
        Integer progressPercent,
        String resultState,
        String startTime,
        String urlsCrawledCount,
        String urlsTestedCount,
        List<ScanRunWarningTraceResponse> warningTraces) {
        this.endTime = Objects.requireNonNull(endTime, "expected parameter 'endTime' to be non-null");
        this.errorTrace = Objects.requireNonNull(errorTrace, "expected parameter 'errorTrace' to be non-null");
        this.executionState = Objects.requireNonNull(executionState, "expected parameter 'executionState' to be non-null");
        this.hasVulnerabilities = Objects.requireNonNull(hasVulnerabilities, "expected parameter 'hasVulnerabilities' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.progressPercent = Objects.requireNonNull(progressPercent, "expected parameter 'progressPercent' to be non-null");
        this.resultState = Objects.requireNonNull(resultState, "expected parameter 'resultState' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.urlsCrawledCount = Objects.requireNonNull(urlsCrawledCount, "expected parameter 'urlsCrawledCount' to be non-null");
        this.urlsTestedCount = Objects.requireNonNull(urlsTestedCount, "expected parameter 'urlsTestedCount' to be non-null");
        this.warningTraces = Objects.requireNonNull(warningTraces, "expected parameter 'warningTraces' to be non-null");
    }

    private ScanRunResponse() {
        this.endTime = null;
        this.errorTrace = null;
        this.executionState = null;
        this.hasVulnerabilities = null;
        this.name = null;
        this.progressPercent = null;
        this.resultState = null;
        this.startTime = null;
        this.urlsCrawledCount = null;
        this.urlsTestedCount = null;
        this.warningTraces = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScanRunResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String endTime;
        private ScanRunErrorTraceResponse errorTrace;
        private String executionState;
        private Boolean hasVulnerabilities;
        private String name;
        private Integer progressPercent;
        private String resultState;
        private String startTime;
        private String urlsCrawledCount;
        private String urlsTestedCount;
        private List<ScanRunWarningTraceResponse> warningTraces;

        public Builder() {
    	      // Empty
        }

        public Builder(ScanRunResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.errorTrace = defaults.errorTrace;
    	      this.executionState = defaults.executionState;
    	      this.hasVulnerabilities = defaults.hasVulnerabilities;
    	      this.name = defaults.name;
    	      this.progressPercent = defaults.progressPercent;
    	      this.resultState = defaults.resultState;
    	      this.startTime = defaults.startTime;
    	      this.urlsCrawledCount = defaults.urlsCrawledCount;
    	      this.urlsTestedCount = defaults.urlsTestedCount;
    	      this.warningTraces = defaults.warningTraces;
        }

        public Builder setEndTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }

        public Builder setErrorTrace(ScanRunErrorTraceResponse errorTrace) {
            this.errorTrace = Objects.requireNonNull(errorTrace);
            return this;
        }

        public Builder setExecutionState(String executionState) {
            this.executionState = Objects.requireNonNull(executionState);
            return this;
        }

        public Builder setHasVulnerabilities(Boolean hasVulnerabilities) {
            this.hasVulnerabilities = Objects.requireNonNull(hasVulnerabilities);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setProgressPercent(Integer progressPercent) {
            this.progressPercent = Objects.requireNonNull(progressPercent);
            return this;
        }

        public Builder setResultState(String resultState) {
            this.resultState = Objects.requireNonNull(resultState);
            return this;
        }

        public Builder setStartTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder setUrlsCrawledCount(String urlsCrawledCount) {
            this.urlsCrawledCount = Objects.requireNonNull(urlsCrawledCount);
            return this;
        }

        public Builder setUrlsTestedCount(String urlsTestedCount) {
            this.urlsTestedCount = Objects.requireNonNull(urlsTestedCount);
            return this;
        }

        public Builder setWarningTraces(List<ScanRunWarningTraceResponse> warningTraces) {
            this.warningTraces = Objects.requireNonNull(warningTraces);
            return this;
        }

        public ScanRunResponse build() {
            return new ScanRunResponse(endTime, errorTrace, executionState, hasVulnerabilities, name, progressPercent, resultState, startTime, urlsCrawledCount, urlsTestedCount, warningTraces);
        }
    }
}
