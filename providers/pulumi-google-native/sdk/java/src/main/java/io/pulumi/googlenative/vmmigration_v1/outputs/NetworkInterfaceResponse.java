// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.vmmigration_v1.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class NetworkInterfaceResponse {
    /**
     * The external IP to define in the NIC.
     * 
     */
    private final String externalIp;
    /**
     * The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     * 
     */
    private final String internalIp;
    /**
     * The network to connect the NIC to.
     * 
     */
    private final String network;
    /**
     * The subnetwork to connect the NIC to.
     * 
     */
    private final String subnetwork;

    @CustomType.Constructor
    private NetworkInterfaceResponse(
        @CustomType.Parameter("externalIp") String externalIp,
        @CustomType.Parameter("internalIp") String internalIp,
        @CustomType.Parameter("network") String network,
        @CustomType.Parameter("subnetwork") String subnetwork) {
        this.externalIp = externalIp;
        this.internalIp = internalIp;
        this.network = network;
        this.subnetwork = subnetwork;
    }

    /**
     * The external IP to define in the NIC.
     * 
    */
    public String externalIp() {
        return this.externalIp;
    }
    /**
     * The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     * 
    */
    public String internalIp() {
        return this.internalIp;
    }
    /**
     * The network to connect the NIC to.
     * 
    */
    public String network() {
        return this.network;
    }
    /**
     * The subnetwork to connect the NIC to.
     * 
    */
    public String subnetwork() {
        return this.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String externalIp;
        private String internalIp;
        private String network;
        private String subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalIp = defaults.externalIp;
    	      this.internalIp = defaults.internalIp;
    	      this.network = defaults.network;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder externalIp(String externalIp) {
            this.externalIp = Objects.requireNonNull(externalIp);
            return this;
        }
        public Builder internalIp(String internalIp) {
            this.internalIp = Objects.requireNonNull(internalIp);
            return this;
        }
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder subnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }        public NetworkInterfaceResponse build() {
            return new NetworkInterfaceResponse(externalIp, internalIp, network, subnetwork);
        }
    }
}
