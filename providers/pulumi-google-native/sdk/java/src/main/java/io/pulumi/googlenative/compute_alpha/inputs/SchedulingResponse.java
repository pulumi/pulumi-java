// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.inputs.DurationResponse;
import io.pulumi.googlenative.compute_alpha.inputs.SchedulingNodeAffinityResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SchedulingResponse extends io.pulumi.resources.InvokeArgs {

    public static final SchedulingResponse Empty = new SchedulingResponse();

    @InputImport(name="automaticRestart", required=true)
    private final Boolean automaticRestart;

    public Boolean getAutomaticRestart() {
        return this.automaticRestart;
    }

    @InputImport(name="availabilityDomain", required=true)
    private final Integer availabilityDomain;

    public Integer getAvailabilityDomain() {
        return this.availabilityDomain;
    }

    @InputImport(name="currentCpus", required=true)
    private final Integer currentCpus;

    public Integer getCurrentCpus() {
        return this.currentCpus;
    }

    @InputImport(name="currentMemoryMb", required=true)
    private final String currentMemoryMb;

    public String getCurrentMemoryMb() {
        return this.currentMemoryMb;
    }

    @InputImport(name="hostErrorTimeoutSeconds", required=true)
    private final Integer hostErrorTimeoutSeconds;

    public Integer getHostErrorTimeoutSeconds() {
        return this.hostErrorTimeoutSeconds;
    }

    @InputImport(name="instanceTerminationAction", required=true)
    private final String instanceTerminationAction;

    public String getInstanceTerminationAction() {
        return this.instanceTerminationAction;
    }

    @InputImport(name="latencyTolerant", required=true)
    private final Boolean latencyTolerant;

    public Boolean getLatencyTolerant() {
        return this.latencyTolerant;
    }

    @InputImport(name="locationHint", required=true)
    private final String locationHint;

    public String getLocationHint() {
        return this.locationHint;
    }

    @InputImport(name="maintenanceFreezeDurationHours", required=true)
    private final Integer maintenanceFreezeDurationHours;

    public Integer getMaintenanceFreezeDurationHours() {
        return this.maintenanceFreezeDurationHours;
    }

    @InputImport(name="maintenanceInterval", required=true)
    private final String maintenanceInterval;

    public String getMaintenanceInterval() {
        return this.maintenanceInterval;
    }

    @InputImport(name="maxRunDuration", required=true)
    private final DurationResponse maxRunDuration;

    public DurationResponse getMaxRunDuration() {
        return this.maxRunDuration;
    }

    @InputImport(name="minNodeCpus", required=true)
    private final Integer minNodeCpus;

    public Integer getMinNodeCpus() {
        return this.minNodeCpus;
    }

    @InputImport(name="nodeAffinities", required=true)
    private final List<SchedulingNodeAffinityResponse> nodeAffinities;

    public List<SchedulingNodeAffinityResponse> getNodeAffinities() {
        return this.nodeAffinities;
    }

    @InputImport(name="onHostMaintenance", required=true)
    private final String onHostMaintenance;

    public String getOnHostMaintenance() {
        return this.onHostMaintenance;
    }

    @InputImport(name="preemptible", required=true)
    private final Boolean preemptible;

    public Boolean getPreemptible() {
        return this.preemptible;
    }

    @InputImport(name="provisioningModel", required=true)
    private final String provisioningModel;

    public String getProvisioningModel() {
        return this.provisioningModel;
    }

    @InputImport(name="terminationTime", required=true)
    private final String terminationTime;

    public String getTerminationTime() {
        return this.terminationTime;
    }

    public SchedulingResponse(
        Boolean automaticRestart,
        Integer availabilityDomain,
        Integer currentCpus,
        String currentMemoryMb,
        Integer hostErrorTimeoutSeconds,
        String instanceTerminationAction,
        Boolean latencyTolerant,
        String locationHint,
        Integer maintenanceFreezeDurationHours,
        String maintenanceInterval,
        DurationResponse maxRunDuration,
        Integer minNodeCpus,
        List<SchedulingNodeAffinityResponse> nodeAffinities,
        String onHostMaintenance,
        Boolean preemptible,
        String provisioningModel,
        String terminationTime) {
        this.automaticRestart = Objects.requireNonNull(automaticRestart, "expected parameter 'automaticRestart' to be non-null");
        this.availabilityDomain = Objects.requireNonNull(availabilityDomain, "expected parameter 'availabilityDomain' to be non-null");
        this.currentCpus = Objects.requireNonNull(currentCpus, "expected parameter 'currentCpus' to be non-null");
        this.currentMemoryMb = Objects.requireNonNull(currentMemoryMb, "expected parameter 'currentMemoryMb' to be non-null");
        this.hostErrorTimeoutSeconds = Objects.requireNonNull(hostErrorTimeoutSeconds, "expected parameter 'hostErrorTimeoutSeconds' to be non-null");
        this.instanceTerminationAction = Objects.requireNonNull(instanceTerminationAction, "expected parameter 'instanceTerminationAction' to be non-null");
        this.latencyTolerant = Objects.requireNonNull(latencyTolerant, "expected parameter 'latencyTolerant' to be non-null");
        this.locationHint = Objects.requireNonNull(locationHint, "expected parameter 'locationHint' to be non-null");
        this.maintenanceFreezeDurationHours = Objects.requireNonNull(maintenanceFreezeDurationHours, "expected parameter 'maintenanceFreezeDurationHours' to be non-null");
        this.maintenanceInterval = Objects.requireNonNull(maintenanceInterval, "expected parameter 'maintenanceInterval' to be non-null");
        this.maxRunDuration = Objects.requireNonNull(maxRunDuration, "expected parameter 'maxRunDuration' to be non-null");
        this.minNodeCpus = Objects.requireNonNull(minNodeCpus, "expected parameter 'minNodeCpus' to be non-null");
        this.nodeAffinities = Objects.requireNonNull(nodeAffinities, "expected parameter 'nodeAffinities' to be non-null");
        this.onHostMaintenance = Objects.requireNonNull(onHostMaintenance, "expected parameter 'onHostMaintenance' to be non-null");
        this.preemptible = Objects.requireNonNull(preemptible, "expected parameter 'preemptible' to be non-null");
        this.provisioningModel = Objects.requireNonNull(provisioningModel, "expected parameter 'provisioningModel' to be non-null");
        this.terminationTime = Objects.requireNonNull(terminationTime, "expected parameter 'terminationTime' to be non-null");
    }

    private SchedulingResponse() {
        this.automaticRestart = null;
        this.availabilityDomain = null;
        this.currentCpus = null;
        this.currentMemoryMb = null;
        this.hostErrorTimeoutSeconds = null;
        this.instanceTerminationAction = null;
        this.latencyTolerant = null;
        this.locationHint = null;
        this.maintenanceFreezeDurationHours = null;
        this.maintenanceInterval = null;
        this.maxRunDuration = null;
        this.minNodeCpus = null;
        this.nodeAffinities = List.of();
        this.onHostMaintenance = null;
        this.preemptible = null;
        this.provisioningModel = null;
        this.terminationTime = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchedulingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean automaticRestart;
        private Integer availabilityDomain;
        private Integer currentCpus;
        private String currentMemoryMb;
        private Integer hostErrorTimeoutSeconds;
        private String instanceTerminationAction;
        private Boolean latencyTolerant;
        private String locationHint;
        private Integer maintenanceFreezeDurationHours;
        private String maintenanceInterval;
        private DurationResponse maxRunDuration;
        private Integer minNodeCpus;
        private List<SchedulingNodeAffinityResponse> nodeAffinities;
        private String onHostMaintenance;
        private Boolean preemptible;
        private String provisioningModel;
        private String terminationTime;

        public Builder() {
    	      // Empty
        }

        public Builder(SchedulingResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticRestart = defaults.automaticRestart;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.currentCpus = defaults.currentCpus;
    	      this.currentMemoryMb = defaults.currentMemoryMb;
    	      this.hostErrorTimeoutSeconds = defaults.hostErrorTimeoutSeconds;
    	      this.instanceTerminationAction = defaults.instanceTerminationAction;
    	      this.latencyTolerant = defaults.latencyTolerant;
    	      this.locationHint = defaults.locationHint;
    	      this.maintenanceFreezeDurationHours = defaults.maintenanceFreezeDurationHours;
    	      this.maintenanceInterval = defaults.maintenanceInterval;
    	      this.maxRunDuration = defaults.maxRunDuration;
    	      this.minNodeCpus = defaults.minNodeCpus;
    	      this.nodeAffinities = defaults.nodeAffinities;
    	      this.onHostMaintenance = defaults.onHostMaintenance;
    	      this.preemptible = defaults.preemptible;
    	      this.provisioningModel = defaults.provisioningModel;
    	      this.terminationTime = defaults.terminationTime;
        }

        public Builder setAutomaticRestart(Boolean automaticRestart) {
            this.automaticRestart = Objects.requireNonNull(automaticRestart);
            return this;
        }

        public Builder setAvailabilityDomain(Integer availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }

        public Builder setCurrentCpus(Integer currentCpus) {
            this.currentCpus = Objects.requireNonNull(currentCpus);
            return this;
        }

        public Builder setCurrentMemoryMb(String currentMemoryMb) {
            this.currentMemoryMb = Objects.requireNonNull(currentMemoryMb);
            return this;
        }

        public Builder setHostErrorTimeoutSeconds(Integer hostErrorTimeoutSeconds) {
            this.hostErrorTimeoutSeconds = Objects.requireNonNull(hostErrorTimeoutSeconds);
            return this;
        }

        public Builder setInstanceTerminationAction(String instanceTerminationAction) {
            this.instanceTerminationAction = Objects.requireNonNull(instanceTerminationAction);
            return this;
        }

        public Builder setLatencyTolerant(Boolean latencyTolerant) {
            this.latencyTolerant = Objects.requireNonNull(latencyTolerant);
            return this;
        }

        public Builder setLocationHint(String locationHint) {
            this.locationHint = Objects.requireNonNull(locationHint);
            return this;
        }

        public Builder setMaintenanceFreezeDurationHours(Integer maintenanceFreezeDurationHours) {
            this.maintenanceFreezeDurationHours = Objects.requireNonNull(maintenanceFreezeDurationHours);
            return this;
        }

        public Builder setMaintenanceInterval(String maintenanceInterval) {
            this.maintenanceInterval = Objects.requireNonNull(maintenanceInterval);
            return this;
        }

        public Builder setMaxRunDuration(DurationResponse maxRunDuration) {
            this.maxRunDuration = Objects.requireNonNull(maxRunDuration);
            return this;
        }

        public Builder setMinNodeCpus(Integer minNodeCpus) {
            this.minNodeCpus = Objects.requireNonNull(minNodeCpus);
            return this;
        }

        public Builder setNodeAffinities(List<SchedulingNodeAffinityResponse> nodeAffinities) {
            this.nodeAffinities = Objects.requireNonNull(nodeAffinities);
            return this;
        }

        public Builder setOnHostMaintenance(String onHostMaintenance) {
            this.onHostMaintenance = Objects.requireNonNull(onHostMaintenance);
            return this;
        }

        public Builder setPreemptible(Boolean preemptible) {
            this.preemptible = Objects.requireNonNull(preemptible);
            return this;
        }

        public Builder setProvisioningModel(String provisioningModel) {
            this.provisioningModel = Objects.requireNonNull(provisioningModel);
            return this;
        }

        public Builder setTerminationTime(String terminationTime) {
            this.terminationTime = Objects.requireNonNull(terminationTime);
            return this;
        }

        public SchedulingResponse build() {
            return new SchedulingResponse(automaticRestart, availabilityDomain, currentCpus, currentMemoryMb, hostErrorTimeoutSeconds, instanceTerminationAction, latencyTolerant, locationHint, maintenanceFreezeDurationHours, maintenanceInterval, maxRunDuration, minNodeCpus, nodeAffinities, onHostMaintenance, preemptible, provisioningModel, terminationTime);
        }
    }
}
