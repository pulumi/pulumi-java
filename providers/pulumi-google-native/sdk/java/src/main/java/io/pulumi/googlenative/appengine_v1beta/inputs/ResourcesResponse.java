// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1beta.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.appengine_v1beta.inputs.VolumeResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Machine resources for a version.
 * 
 */
public final class ResourcesResponse extends io.pulumi.resources.InvokeArgs {

    public static final ResourcesResponse Empty = new ResourcesResponse();

    /**
     * Number of CPU cores needed.
     * 
     */
    @Import(name="cpu", required=true)
      private final Double cpu;

    public Double getCpu() {
        return this.cpu;
    }

    /**
     * Disk size (GB) needed.
     * 
     */
    @Import(name="diskGb", required=true)
      private final Double diskGb;

    public Double getDiskGb() {
        return this.diskGb;
    }

    /**
     * The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
     * 
     */
    @Import(name="kmsKeyReference", required=true)
      private final String kmsKeyReference;

    public String getKmsKeyReference() {
        return this.kmsKeyReference;
    }

    /**
     * Memory (GB) needed.
     * 
     */
    @Import(name="memoryGb", required=true)
      private final Double memoryGb;

    public Double getMemoryGb() {
        return this.memoryGb;
    }

    /**
     * User specified volumes.
     * 
     */
    @Import(name="volumes", required=true)
      private final List<VolumeResponse> volumes;

    public List<VolumeResponse> getVolumes() {
        return this.volumes;
    }

    public ResourcesResponse(
        Double cpu,
        Double diskGb,
        String kmsKeyReference,
        Double memoryGb,
        List<VolumeResponse> volumes) {
        this.cpu = Objects.requireNonNull(cpu, "expected parameter 'cpu' to be non-null");
        this.diskGb = Objects.requireNonNull(diskGb, "expected parameter 'diskGb' to be non-null");
        this.kmsKeyReference = Objects.requireNonNull(kmsKeyReference, "expected parameter 'kmsKeyReference' to be non-null");
        this.memoryGb = Objects.requireNonNull(memoryGb, "expected parameter 'memoryGb' to be non-null");
        this.volumes = Objects.requireNonNull(volumes, "expected parameter 'volumes' to be non-null");
    }

    private ResourcesResponse() {
        this.cpu = null;
        this.diskGb = null;
        this.kmsKeyReference = null;
        this.memoryGb = null;
        this.volumes = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourcesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double cpu;
        private Double diskGb;
        private String kmsKeyReference;
        private Double memoryGb;
        private List<VolumeResponse> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourcesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpu = defaults.cpu;
    	      this.diskGb = defaults.diskGb;
    	      this.kmsKeyReference = defaults.kmsKeyReference;
    	      this.memoryGb = defaults.memoryGb;
    	      this.volumes = defaults.volumes;
        }

        public Builder cpu(Double cpu) {
            this.cpu = Objects.requireNonNull(cpu);
            return this;
        }
        public Builder diskGb(Double diskGb) {
            this.diskGb = Objects.requireNonNull(diskGb);
            return this;
        }
        public Builder kmsKeyReference(String kmsKeyReference) {
            this.kmsKeyReference = Objects.requireNonNull(kmsKeyReference);
            return this;
        }
        public Builder memoryGb(Double memoryGb) {
            this.memoryGb = Objects.requireNonNull(memoryGb);
            return this;
        }
        public Builder volumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }        public ResourcesResponse build() {
            return new ResourcesResponse(cpu, diskGb, kmsKeyReference, memoryGb, volumes);
        }
    }
}
