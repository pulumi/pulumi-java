// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1beta.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Allows autoscaling based on Stackdriver metrics.
 * 
 */
public final class CustomMetricResponse extends io.pulumi.resources.InvokeArgs {

    public static final CustomMetricResponse Empty = new CustomMetricResponse();

    /**
     * Allows filtering on the metric's fields.
     * 
     */
    @InputImport(name="filter", required=true)
      private final String filter;

    public String getFilter() {
        return this.filter;
    }

    /**
     * The name of the metric.
     * 
     */
    @InputImport(name="metricName", required=true)
      private final String metricName;

    public String getMetricName() {
        return this.metricName;
    }

    /**
     * May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
     * 
     */
    @InputImport(name="singleInstanceAssignment", required=true)
      private final Double singleInstanceAssignment;

    public Double getSingleInstanceAssignment() {
        return this.singleInstanceAssignment;
    }

    /**
     * The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
     * 
     */
    @InputImport(name="targetType", required=true)
      private final String targetType;

    public String getTargetType() {
        return this.targetType;
    }

    /**
     * The target value for the metric.
     * 
     */
    @InputImport(name="targetUtilization", required=true)
      private final Double targetUtilization;

    public Double getTargetUtilization() {
        return this.targetUtilization;
    }

    public CustomMetricResponse(
        String filter,
        String metricName,
        Double singleInstanceAssignment,
        String targetType,
        Double targetUtilization) {
        this.filter = Objects.requireNonNull(filter, "expected parameter 'filter' to be non-null");
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.singleInstanceAssignment = Objects.requireNonNull(singleInstanceAssignment, "expected parameter 'singleInstanceAssignment' to be non-null");
        this.targetType = Objects.requireNonNull(targetType, "expected parameter 'targetType' to be non-null");
        this.targetUtilization = Objects.requireNonNull(targetUtilization, "expected parameter 'targetUtilization' to be non-null");
    }

    private CustomMetricResponse() {
        this.filter = null;
        this.metricName = null;
        this.singleInstanceAssignment = null;
        this.targetType = null;
        this.targetUtilization = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomMetricResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String filter;
        private String metricName;
        private Double singleInstanceAssignment;
        private String targetType;
        private Double targetUtilization;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomMetricResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.metricName = defaults.metricName;
    	      this.singleInstanceAssignment = defaults.singleInstanceAssignment;
    	      this.targetType = defaults.targetType;
    	      this.targetUtilization = defaults.targetUtilization;
        }

        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }

        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }

        public Builder singleInstanceAssignment(Double singleInstanceAssignment) {
            this.singleInstanceAssignment = Objects.requireNonNull(singleInstanceAssignment);
            return this;
        }

        public Builder targetType(String targetType) {
            this.targetType = Objects.requireNonNull(targetType);
            return this;
        }

        public Builder targetUtilization(Double targetUtilization) {
            this.targetUtilization = Objects.requireNonNull(targetUtilization);
            return this;
        }
        public CustomMetricResponse build() {
            return new CustomMetricResponse(filter, metricName, singleInstanceAssignment, targetType, targetUtilization);
        }
    }
}
