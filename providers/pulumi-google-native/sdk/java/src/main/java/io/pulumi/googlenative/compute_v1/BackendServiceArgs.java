// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.enums.BackendServiceLoadBalancingScheme;
import io.pulumi.googlenative.compute_v1.enums.BackendServiceLocalityLbPolicy;
import io.pulumi.googlenative.compute_v1.enums.BackendServiceProtocol;
import io.pulumi.googlenative.compute_v1.enums.BackendServiceSessionAffinity;
import io.pulumi.googlenative.compute_v1.inputs.BackendArgs;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceCdnPolicyArgs;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceConnectionTrackingPolicyArgs;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceFailoverPolicyArgs;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceIAPArgs;
import io.pulumi.googlenative.compute_v1.inputs.BackendServiceLogConfigArgs;
import io.pulumi.googlenative.compute_v1.inputs.CircuitBreakersArgs;
import io.pulumi.googlenative.compute_v1.inputs.ConnectionDrainingArgs;
import io.pulumi.googlenative.compute_v1.inputs.ConsistentHashLoadBalancerSettingsArgs;
import io.pulumi.googlenative.compute_v1.inputs.DurationArgs;
import io.pulumi.googlenative.compute_v1.inputs.OutlierDetectionArgs;
import io.pulumi.googlenative.compute_v1.inputs.SecuritySettingsArgs;
import io.pulumi.googlenative.compute_v1.inputs.SubsettingArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BackendServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackendServiceArgs Empty = new BackendServiceArgs();

    @InputImport(name="affinityCookieTtlSec")
    private final @Nullable Input<Integer> affinityCookieTtlSec;

    public Input<Integer> getAffinityCookieTtlSec() {
        return this.affinityCookieTtlSec == null ? Input.empty() : this.affinityCookieTtlSec;
    }

    @InputImport(name="backends")
    private final @Nullable Input<List<BackendArgs>> backends;

    public Input<List<BackendArgs>> getBackends() {
        return this.backends == null ? Input.empty() : this.backends;
    }

    @InputImport(name="cdnPolicy")
    private final @Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy;

    public Input<BackendServiceCdnPolicyArgs> getCdnPolicy() {
        return this.cdnPolicy == null ? Input.empty() : this.cdnPolicy;
    }

    @InputImport(name="circuitBreakers")
    private final @Nullable Input<CircuitBreakersArgs> circuitBreakers;

    public Input<CircuitBreakersArgs> getCircuitBreakers() {
        return this.circuitBreakers == null ? Input.empty() : this.circuitBreakers;
    }

    @InputImport(name="connectionDraining")
    private final @Nullable Input<ConnectionDrainingArgs> connectionDraining;

    public Input<ConnectionDrainingArgs> getConnectionDraining() {
        return this.connectionDraining == null ? Input.empty() : this.connectionDraining;
    }

    @InputImport(name="connectionTrackingPolicy")
    private final @Nullable Input<BackendServiceConnectionTrackingPolicyArgs> connectionTrackingPolicy;

    public Input<BackendServiceConnectionTrackingPolicyArgs> getConnectionTrackingPolicy() {
        return this.connectionTrackingPolicy == null ? Input.empty() : this.connectionTrackingPolicy;
    }

    @InputImport(name="consistentHash")
    private final @Nullable Input<ConsistentHashLoadBalancerSettingsArgs> consistentHash;

    public Input<ConsistentHashLoadBalancerSettingsArgs> getConsistentHash() {
        return this.consistentHash == null ? Input.empty() : this.consistentHash;
    }

    @InputImport(name="customRequestHeaders")
    private final @Nullable Input<List<String>> customRequestHeaders;

    public Input<List<String>> getCustomRequestHeaders() {
        return this.customRequestHeaders == null ? Input.empty() : this.customRequestHeaders;
    }

    @InputImport(name="customResponseHeaders")
    private final @Nullable Input<List<String>> customResponseHeaders;

    public Input<List<String>> getCustomResponseHeaders() {
        return this.customResponseHeaders == null ? Input.empty() : this.customResponseHeaders;
    }

    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    @InputImport(name="enableCDN")
    private final @Nullable Input<Boolean> enableCDN;

    public Input<Boolean> getEnableCDN() {
        return this.enableCDN == null ? Input.empty() : this.enableCDN;
    }

    @InputImport(name="failoverPolicy")
    private final @Nullable Input<BackendServiceFailoverPolicyArgs> failoverPolicy;

    public Input<BackendServiceFailoverPolicyArgs> getFailoverPolicy() {
        return this.failoverPolicy == null ? Input.empty() : this.failoverPolicy;
    }

    @InputImport(name="healthChecks")
    private final @Nullable Input<List<String>> healthChecks;

    public Input<List<String>> getHealthChecks() {
        return this.healthChecks == null ? Input.empty() : this.healthChecks;
    }

    @InputImport(name="iap")
    private final @Nullable Input<BackendServiceIAPArgs> iap;

    public Input<BackendServiceIAPArgs> getIap() {
        return this.iap == null ? Input.empty() : this.iap;
    }

    @InputImport(name="loadBalancingScheme")
    private final @Nullable Input<BackendServiceLoadBalancingScheme> loadBalancingScheme;

    public Input<BackendServiceLoadBalancingScheme> getLoadBalancingScheme() {
        return this.loadBalancingScheme == null ? Input.empty() : this.loadBalancingScheme;
    }

    @InputImport(name="localityLbPolicy")
    private final @Nullable Input<BackendServiceLocalityLbPolicy> localityLbPolicy;

    public Input<BackendServiceLocalityLbPolicy> getLocalityLbPolicy() {
        return this.localityLbPolicy == null ? Input.empty() : this.localityLbPolicy;
    }

    @InputImport(name="logConfig")
    private final @Nullable Input<BackendServiceLogConfigArgs> logConfig;

    public Input<BackendServiceLogConfigArgs> getLogConfig() {
        return this.logConfig == null ? Input.empty() : this.logConfig;
    }

    @InputImport(name="maxStreamDuration")
    private final @Nullable Input<DurationArgs> maxStreamDuration;

    public Input<DurationArgs> getMaxStreamDuration() {
        return this.maxStreamDuration == null ? Input.empty() : this.maxStreamDuration;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="network")
    private final @Nullable Input<String> network;

    public Input<String> getNetwork() {
        return this.network == null ? Input.empty() : this.network;
    }

    @InputImport(name="outlierDetection")
    private final @Nullable Input<OutlierDetectionArgs> outlierDetection;

    public Input<OutlierDetectionArgs> getOutlierDetection() {
        return this.outlierDetection == null ? Input.empty() : this.outlierDetection;
    }

    @InputImport(name="portName")
    private final @Nullable Input<String> portName;

    public Input<String> getPortName() {
        return this.portName == null ? Input.empty() : this.portName;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="protocol")
    private final @Nullable Input<BackendServiceProtocol> protocol;

    public Input<BackendServiceProtocol> getProtocol() {
        return this.protocol == null ? Input.empty() : this.protocol;
    }

    @InputImport(name="requestId")
    private final @Nullable Input<String> requestId;

    public Input<String> getRequestId() {
        return this.requestId == null ? Input.empty() : this.requestId;
    }

    @InputImport(name="securitySettings")
    private final @Nullable Input<SecuritySettingsArgs> securitySettings;

    public Input<SecuritySettingsArgs> getSecuritySettings() {
        return this.securitySettings == null ? Input.empty() : this.securitySettings;
    }

    @InputImport(name="sessionAffinity")
    private final @Nullable Input<BackendServiceSessionAffinity> sessionAffinity;

    public Input<BackendServiceSessionAffinity> getSessionAffinity() {
        return this.sessionAffinity == null ? Input.empty() : this.sessionAffinity;
    }

    @InputImport(name="subsetting")
    private final @Nullable Input<SubsettingArgs> subsetting;

    public Input<SubsettingArgs> getSubsetting() {
        return this.subsetting == null ? Input.empty() : this.subsetting;
    }

    @InputImport(name="timeoutSec")
    private final @Nullable Input<Integer> timeoutSec;

    public Input<Integer> getTimeoutSec() {
        return this.timeoutSec == null ? Input.empty() : this.timeoutSec;
    }

    public BackendServiceArgs(
        @Nullable Input<Integer> affinityCookieTtlSec,
        @Nullable Input<List<BackendArgs>> backends,
        @Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy,
        @Nullable Input<CircuitBreakersArgs> circuitBreakers,
        @Nullable Input<ConnectionDrainingArgs> connectionDraining,
        @Nullable Input<BackendServiceConnectionTrackingPolicyArgs> connectionTrackingPolicy,
        @Nullable Input<ConsistentHashLoadBalancerSettingsArgs> consistentHash,
        @Nullable Input<List<String>> customRequestHeaders,
        @Nullable Input<List<String>> customResponseHeaders,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> enableCDN,
        @Nullable Input<BackendServiceFailoverPolicyArgs> failoverPolicy,
        @Nullable Input<List<String>> healthChecks,
        @Nullable Input<BackendServiceIAPArgs> iap,
        @Nullable Input<BackendServiceLoadBalancingScheme> loadBalancingScheme,
        @Nullable Input<BackendServiceLocalityLbPolicy> localityLbPolicy,
        @Nullable Input<BackendServiceLogConfigArgs> logConfig,
        @Nullable Input<DurationArgs> maxStreamDuration,
        @Nullable Input<String> name,
        @Nullable Input<String> network,
        @Nullable Input<OutlierDetectionArgs> outlierDetection,
        @Nullable Input<String> portName,
        @Nullable Input<String> project,
        @Nullable Input<BackendServiceProtocol> protocol,
        @Nullable Input<String> requestId,
        @Nullable Input<SecuritySettingsArgs> securitySettings,
        @Nullable Input<BackendServiceSessionAffinity> sessionAffinity,
        @Nullable Input<SubsettingArgs> subsetting,
        @Nullable Input<Integer> timeoutSec) {
        this.affinityCookieTtlSec = affinityCookieTtlSec;
        this.backends = backends;
        this.cdnPolicy = cdnPolicy;
        this.circuitBreakers = circuitBreakers;
        this.connectionDraining = connectionDraining;
        this.connectionTrackingPolicy = connectionTrackingPolicy;
        this.consistentHash = consistentHash;
        this.customRequestHeaders = customRequestHeaders;
        this.customResponseHeaders = customResponseHeaders;
        this.description = description;
        this.enableCDN = enableCDN;
        this.failoverPolicy = failoverPolicy;
        this.healthChecks = healthChecks;
        this.iap = iap;
        this.loadBalancingScheme = loadBalancingScheme;
        this.localityLbPolicy = localityLbPolicy;
        this.logConfig = logConfig;
        this.maxStreamDuration = maxStreamDuration;
        this.name = name;
        this.network = network;
        this.outlierDetection = outlierDetection;
        this.portName = portName;
        this.project = project;
        this.protocol = protocol;
        this.requestId = requestId;
        this.securitySettings = securitySettings;
        this.sessionAffinity = sessionAffinity;
        this.subsetting = subsetting;
        this.timeoutSec = timeoutSec;
    }

    private BackendServiceArgs() {
        this.affinityCookieTtlSec = Input.empty();
        this.backends = Input.empty();
        this.cdnPolicy = Input.empty();
        this.circuitBreakers = Input.empty();
        this.connectionDraining = Input.empty();
        this.connectionTrackingPolicy = Input.empty();
        this.consistentHash = Input.empty();
        this.customRequestHeaders = Input.empty();
        this.customResponseHeaders = Input.empty();
        this.description = Input.empty();
        this.enableCDN = Input.empty();
        this.failoverPolicy = Input.empty();
        this.healthChecks = Input.empty();
        this.iap = Input.empty();
        this.loadBalancingScheme = Input.empty();
        this.localityLbPolicy = Input.empty();
        this.logConfig = Input.empty();
        this.maxStreamDuration = Input.empty();
        this.name = Input.empty();
        this.network = Input.empty();
        this.outlierDetection = Input.empty();
        this.portName = Input.empty();
        this.project = Input.empty();
        this.protocol = Input.empty();
        this.requestId = Input.empty();
        this.securitySettings = Input.empty();
        this.sessionAffinity = Input.empty();
        this.subsetting = Input.empty();
        this.timeoutSec = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> affinityCookieTtlSec;
        private @Nullable Input<List<BackendArgs>> backends;
        private @Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy;
        private @Nullable Input<CircuitBreakersArgs> circuitBreakers;
        private @Nullable Input<ConnectionDrainingArgs> connectionDraining;
        private @Nullable Input<BackendServiceConnectionTrackingPolicyArgs> connectionTrackingPolicy;
        private @Nullable Input<ConsistentHashLoadBalancerSettingsArgs> consistentHash;
        private @Nullable Input<List<String>> customRequestHeaders;
        private @Nullable Input<List<String>> customResponseHeaders;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> enableCDN;
        private @Nullable Input<BackendServiceFailoverPolicyArgs> failoverPolicy;
        private @Nullable Input<List<String>> healthChecks;
        private @Nullable Input<BackendServiceIAPArgs> iap;
        private @Nullable Input<BackendServiceLoadBalancingScheme> loadBalancingScheme;
        private @Nullable Input<BackendServiceLocalityLbPolicy> localityLbPolicy;
        private @Nullable Input<BackendServiceLogConfigArgs> logConfig;
        private @Nullable Input<DurationArgs> maxStreamDuration;
        private @Nullable Input<String> name;
        private @Nullable Input<String> network;
        private @Nullable Input<OutlierDetectionArgs> outlierDetection;
        private @Nullable Input<String> portName;
        private @Nullable Input<String> project;
        private @Nullable Input<BackendServiceProtocol> protocol;
        private @Nullable Input<String> requestId;
        private @Nullable Input<SecuritySettingsArgs> securitySettings;
        private @Nullable Input<BackendServiceSessionAffinity> sessionAffinity;
        private @Nullable Input<SubsettingArgs> subsetting;
        private @Nullable Input<Integer> timeoutSec;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieTtlSec = defaults.affinityCookieTtlSec;
    	      this.backends = defaults.backends;
    	      this.cdnPolicy = defaults.cdnPolicy;
    	      this.circuitBreakers = defaults.circuitBreakers;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.connectionTrackingPolicy = defaults.connectionTrackingPolicy;
    	      this.consistentHash = defaults.consistentHash;
    	      this.customRequestHeaders = defaults.customRequestHeaders;
    	      this.customResponseHeaders = defaults.customResponseHeaders;
    	      this.description = defaults.description;
    	      this.enableCDN = defaults.enableCDN;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.healthChecks = defaults.healthChecks;
    	      this.iap = defaults.iap;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.localityLbPolicy = defaults.localityLbPolicy;
    	      this.logConfig = defaults.logConfig;
    	      this.maxStreamDuration = defaults.maxStreamDuration;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.portName = defaults.portName;
    	      this.project = defaults.project;
    	      this.protocol = defaults.protocol;
    	      this.requestId = defaults.requestId;
    	      this.securitySettings = defaults.securitySettings;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.subsetting = defaults.subsetting;
    	      this.timeoutSec = defaults.timeoutSec;
        }

        public Builder setAffinityCookieTtlSec(@Nullable Input<Integer> affinityCookieTtlSec) {
            this.affinityCookieTtlSec = affinityCookieTtlSec;
            return this;
        }

        public Builder setAffinityCookieTtlSec(@Nullable Integer affinityCookieTtlSec) {
            this.affinityCookieTtlSec = Input.ofNullable(affinityCookieTtlSec);
            return this;
        }

        public Builder setBackends(@Nullable Input<List<BackendArgs>> backends) {
            this.backends = backends;
            return this;
        }

        public Builder setBackends(@Nullable List<BackendArgs> backends) {
            this.backends = Input.ofNullable(backends);
            return this;
        }

        public Builder setCdnPolicy(@Nullable Input<BackendServiceCdnPolicyArgs> cdnPolicy) {
            this.cdnPolicy = cdnPolicy;
            return this;
        }

        public Builder setCdnPolicy(@Nullable BackendServiceCdnPolicyArgs cdnPolicy) {
            this.cdnPolicy = Input.ofNullable(cdnPolicy);
            return this;
        }

        public Builder setCircuitBreakers(@Nullable Input<CircuitBreakersArgs> circuitBreakers) {
            this.circuitBreakers = circuitBreakers;
            return this;
        }

        public Builder setCircuitBreakers(@Nullable CircuitBreakersArgs circuitBreakers) {
            this.circuitBreakers = Input.ofNullable(circuitBreakers);
            return this;
        }

        public Builder setConnectionDraining(@Nullable Input<ConnectionDrainingArgs> connectionDraining) {
            this.connectionDraining = connectionDraining;
            return this;
        }

        public Builder setConnectionDraining(@Nullable ConnectionDrainingArgs connectionDraining) {
            this.connectionDraining = Input.ofNullable(connectionDraining);
            return this;
        }

        public Builder setConnectionTrackingPolicy(@Nullable Input<BackendServiceConnectionTrackingPolicyArgs> connectionTrackingPolicy) {
            this.connectionTrackingPolicy = connectionTrackingPolicy;
            return this;
        }

        public Builder setConnectionTrackingPolicy(@Nullable BackendServiceConnectionTrackingPolicyArgs connectionTrackingPolicy) {
            this.connectionTrackingPolicy = Input.ofNullable(connectionTrackingPolicy);
            return this;
        }

        public Builder setConsistentHash(@Nullable Input<ConsistentHashLoadBalancerSettingsArgs> consistentHash) {
            this.consistentHash = consistentHash;
            return this;
        }

        public Builder setConsistentHash(@Nullable ConsistentHashLoadBalancerSettingsArgs consistentHash) {
            this.consistentHash = Input.ofNullable(consistentHash);
            return this;
        }

        public Builder setCustomRequestHeaders(@Nullable Input<List<String>> customRequestHeaders) {
            this.customRequestHeaders = customRequestHeaders;
            return this;
        }

        public Builder setCustomRequestHeaders(@Nullable List<String> customRequestHeaders) {
            this.customRequestHeaders = Input.ofNullable(customRequestHeaders);
            return this;
        }

        public Builder setCustomResponseHeaders(@Nullable Input<List<String>> customResponseHeaders) {
            this.customResponseHeaders = customResponseHeaders;
            return this;
        }

        public Builder setCustomResponseHeaders(@Nullable List<String> customResponseHeaders) {
            this.customResponseHeaders = Input.ofNullable(customResponseHeaders);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEnableCDN(@Nullable Input<Boolean> enableCDN) {
            this.enableCDN = enableCDN;
            return this;
        }

        public Builder setEnableCDN(@Nullable Boolean enableCDN) {
            this.enableCDN = Input.ofNullable(enableCDN);
            return this;
        }

        public Builder setFailoverPolicy(@Nullable Input<BackendServiceFailoverPolicyArgs> failoverPolicy) {
            this.failoverPolicy = failoverPolicy;
            return this;
        }

        public Builder setFailoverPolicy(@Nullable BackendServiceFailoverPolicyArgs failoverPolicy) {
            this.failoverPolicy = Input.ofNullable(failoverPolicy);
            return this;
        }

        public Builder setHealthChecks(@Nullable Input<List<String>> healthChecks) {
            this.healthChecks = healthChecks;
            return this;
        }

        public Builder setHealthChecks(@Nullable List<String> healthChecks) {
            this.healthChecks = Input.ofNullable(healthChecks);
            return this;
        }

        public Builder setIap(@Nullable Input<BackendServiceIAPArgs> iap) {
            this.iap = iap;
            return this;
        }

        public Builder setIap(@Nullable BackendServiceIAPArgs iap) {
            this.iap = Input.ofNullable(iap);
            return this;
        }

        public Builder setLoadBalancingScheme(@Nullable Input<BackendServiceLoadBalancingScheme> loadBalancingScheme) {
            this.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        public Builder setLoadBalancingScheme(@Nullable BackendServiceLoadBalancingScheme loadBalancingScheme) {
            this.loadBalancingScheme = Input.ofNullable(loadBalancingScheme);
            return this;
        }

        public Builder setLocalityLbPolicy(@Nullable Input<BackendServiceLocalityLbPolicy> localityLbPolicy) {
            this.localityLbPolicy = localityLbPolicy;
            return this;
        }

        public Builder setLocalityLbPolicy(@Nullable BackendServiceLocalityLbPolicy localityLbPolicy) {
            this.localityLbPolicy = Input.ofNullable(localityLbPolicy);
            return this;
        }

        public Builder setLogConfig(@Nullable Input<BackendServiceLogConfigArgs> logConfig) {
            this.logConfig = logConfig;
            return this;
        }

        public Builder setLogConfig(@Nullable BackendServiceLogConfigArgs logConfig) {
            this.logConfig = Input.ofNullable(logConfig);
            return this;
        }

        public Builder setMaxStreamDuration(@Nullable Input<DurationArgs> maxStreamDuration) {
            this.maxStreamDuration = maxStreamDuration;
            return this;
        }

        public Builder setMaxStreamDuration(@Nullable DurationArgs maxStreamDuration) {
            this.maxStreamDuration = Input.ofNullable(maxStreamDuration);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNetwork(@Nullable Input<String> network) {
            this.network = network;
            return this;
        }

        public Builder setNetwork(@Nullable String network) {
            this.network = Input.ofNullable(network);
            return this;
        }

        public Builder setOutlierDetection(@Nullable Input<OutlierDetectionArgs> outlierDetection) {
            this.outlierDetection = outlierDetection;
            return this;
        }

        public Builder setOutlierDetection(@Nullable OutlierDetectionArgs outlierDetection) {
            this.outlierDetection = Input.ofNullable(outlierDetection);
            return this;
        }

        public Builder setPortName(@Nullable Input<String> portName) {
            this.portName = portName;
            return this;
        }

        public Builder setPortName(@Nullable String portName) {
            this.portName = Input.ofNullable(portName);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setProtocol(@Nullable Input<BackendServiceProtocol> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setProtocol(@Nullable BackendServiceProtocol protocol) {
            this.protocol = Input.ofNullable(protocol);
            return this;
        }

        public Builder setRequestId(@Nullable Input<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder setRequestId(@Nullable String requestId) {
            this.requestId = Input.ofNullable(requestId);
            return this;
        }

        public Builder setSecuritySettings(@Nullable Input<SecuritySettingsArgs> securitySettings) {
            this.securitySettings = securitySettings;
            return this;
        }

        public Builder setSecuritySettings(@Nullable SecuritySettingsArgs securitySettings) {
            this.securitySettings = Input.ofNullable(securitySettings);
            return this;
        }

        public Builder setSessionAffinity(@Nullable Input<BackendServiceSessionAffinity> sessionAffinity) {
            this.sessionAffinity = sessionAffinity;
            return this;
        }

        public Builder setSessionAffinity(@Nullable BackendServiceSessionAffinity sessionAffinity) {
            this.sessionAffinity = Input.ofNullable(sessionAffinity);
            return this;
        }

        public Builder setSubsetting(@Nullable Input<SubsettingArgs> subsetting) {
            this.subsetting = subsetting;
            return this;
        }

        public Builder setSubsetting(@Nullable SubsettingArgs subsetting) {
            this.subsetting = Input.ofNullable(subsetting);
            return this;
        }

        public Builder setTimeoutSec(@Nullable Input<Integer> timeoutSec) {
            this.timeoutSec = timeoutSec;
            return this;
        }

        public Builder setTimeoutSec(@Nullable Integer timeoutSec) {
            this.timeoutSec = Input.ofNullable(timeoutSec);
            return this;
        }

        public BackendServiceArgs build() {
            return new BackendServiceArgs(affinityCookieTtlSec, backends, cdnPolicy, circuitBreakers, connectionDraining, connectionTrackingPolicy, consistentHash, customRequestHeaders, customResponseHeaders, description, enableCDN, failoverPolicy, healthChecks, iap, loadBalancingScheme, localityLbPolicy, logConfig, maxStreamDuration, name, network, outlierDetection, portName, project, protocol, requestId, securitySettings, sessionAffinity, subsetting, timeoutSec);
        }
    }
}
