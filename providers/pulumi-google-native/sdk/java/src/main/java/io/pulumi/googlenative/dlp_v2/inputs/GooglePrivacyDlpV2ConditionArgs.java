// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dlp_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.dlp_v2.enums.GooglePrivacyDlpV2ConditionOperator;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2FieldIdArgs;
import io.pulumi.googlenative.dlp_v2.inputs.GooglePrivacyDlpV2ValueArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
 * 
 */
public final class GooglePrivacyDlpV2ConditionArgs extends io.pulumi.resources.ResourceArgs {

    public static final GooglePrivacyDlpV2ConditionArgs Empty = new GooglePrivacyDlpV2ConditionArgs();

    /**
     * Field within the record this condition is evaluated against.
     * 
     */
    @Import(name="field", required=true)
      private final Output<GooglePrivacyDlpV2FieldIdArgs> field;

    public Output<GooglePrivacyDlpV2FieldIdArgs> getField() {
        return this.field;
    }

    /**
     * Operator used to compare the field or infoType to the value.
     * 
     */
    @Import(name="operator", required=true)
      private final Output<GooglePrivacyDlpV2ConditionOperator> operator;

    public Output<GooglePrivacyDlpV2ConditionOperator> getOperator() {
        return this.operator;
    }

    /**
     * Value to compare against. [Mandatory, except for `EXISTS` tests.]
     * 
     */
    @Import(name="value")
      private final @Nullable Output<GooglePrivacyDlpV2ValueArgs> value;

    public Output<GooglePrivacyDlpV2ValueArgs> getValue() {
        return this.value == null ? Output.empty() : this.value;
    }

    public GooglePrivacyDlpV2ConditionArgs(
        Output<GooglePrivacyDlpV2FieldIdArgs> field,
        Output<GooglePrivacyDlpV2ConditionOperator> operator,
        @Nullable Output<GooglePrivacyDlpV2ValueArgs> value) {
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.value = value;
    }

    private GooglePrivacyDlpV2ConditionArgs() {
        this.field = Output.empty();
        this.operator = Output.empty();
        this.value = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2ConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<GooglePrivacyDlpV2FieldIdArgs> field;
        private Output<GooglePrivacyDlpV2ConditionOperator> operator;
        private @Nullable Output<GooglePrivacyDlpV2ValueArgs> value;

        public Builder() {
    	      // Empty
        }

        public Builder(GooglePrivacyDlpV2ConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.field = defaults.field;
    	      this.operator = defaults.operator;
    	      this.value = defaults.value;
        }

        public Builder field(Output<GooglePrivacyDlpV2FieldIdArgs> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        public Builder field(GooglePrivacyDlpV2FieldIdArgs field) {
            this.field = Output.of(Objects.requireNonNull(field));
            return this;
        }
        public Builder operator(Output<GooglePrivacyDlpV2ConditionOperator> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder operator(GooglePrivacyDlpV2ConditionOperator operator) {
            this.operator = Output.of(Objects.requireNonNull(operator));
            return this;
        }
        public Builder value(@Nullable Output<GooglePrivacyDlpV2ValueArgs> value) {
            this.value = value;
            return this;
        }
        public Builder value(@Nullable GooglePrivacyDlpV2ValueArgs value) {
            this.value = Output.ofNullable(value);
            return this;
        }        public GooglePrivacyDlpV2ConditionArgs build() {
            return new GooglePrivacyDlpV2ConditionArgs(field, operator, value);
        }
    }
}
