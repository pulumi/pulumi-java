// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetVpnTunnelResult {
    private final String creationTimestamp;
    private final String description;
    private final String detailedStatus;
    private final Integer ikeVersion;
    private final String kind;
    private final List<String> localTrafficSelector;
    private final String name;
    private final String peerExternalGateway;
    private final Integer peerExternalGatewayInterface;
    private final String peerGcpGateway;
    private final String peerIp;
    private final String region;
    private final List<String> remoteTrafficSelector;
    private final String router;
    private final String selfLink;
    private final String sharedSecret;
    private final String sharedSecretHash;
    private final String status;
    private final String targetVpnGateway;
    private final String vpnGateway;
    private final Integer vpnGatewayInterface;

    @OutputCustomType.Constructor({"creationTimestamp","description","detailedStatus","ikeVersion","kind","localTrafficSelector","name","peerExternalGateway","peerExternalGatewayInterface","peerGcpGateway","peerIp","region","remoteTrafficSelector","router","selfLink","sharedSecret","sharedSecretHash","status","targetVpnGateway","vpnGateway","vpnGatewayInterface"})
    private GetVpnTunnelResult(
        String creationTimestamp,
        String description,
        String detailedStatus,
        Integer ikeVersion,
        String kind,
        List<String> localTrafficSelector,
        String name,
        String peerExternalGateway,
        Integer peerExternalGatewayInterface,
        String peerGcpGateway,
        String peerIp,
        String region,
        List<String> remoteTrafficSelector,
        String router,
        String selfLink,
        String sharedSecret,
        String sharedSecretHash,
        String status,
        String targetVpnGateway,
        String vpnGateway,
        Integer vpnGatewayInterface) {
        this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
        this.description = Objects.requireNonNull(description);
        this.detailedStatus = Objects.requireNonNull(detailedStatus);
        this.ikeVersion = Objects.requireNonNull(ikeVersion);
        this.kind = Objects.requireNonNull(kind);
        this.localTrafficSelector = Objects.requireNonNull(localTrafficSelector);
        this.name = Objects.requireNonNull(name);
        this.peerExternalGateway = Objects.requireNonNull(peerExternalGateway);
        this.peerExternalGatewayInterface = Objects.requireNonNull(peerExternalGatewayInterface);
        this.peerGcpGateway = Objects.requireNonNull(peerGcpGateway);
        this.peerIp = Objects.requireNonNull(peerIp);
        this.region = Objects.requireNonNull(region);
        this.remoteTrafficSelector = Objects.requireNonNull(remoteTrafficSelector);
        this.router = Objects.requireNonNull(router);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.sharedSecret = Objects.requireNonNull(sharedSecret);
        this.sharedSecretHash = Objects.requireNonNull(sharedSecretHash);
        this.status = Objects.requireNonNull(status);
        this.targetVpnGateway = Objects.requireNonNull(targetVpnGateway);
        this.vpnGateway = Objects.requireNonNull(vpnGateway);
        this.vpnGatewayInterface = Objects.requireNonNull(vpnGatewayInterface);
    }

    public String getCreationTimestamp() {
        return this.creationTimestamp;
    }
    public String getDescription() {
        return this.description;
    }
    public String getDetailedStatus() {
        return this.detailedStatus;
    }
    public Integer getIkeVersion() {
        return this.ikeVersion;
    }
    public String getKind() {
        return this.kind;
    }
    public List<String> getLocalTrafficSelector() {
        return this.localTrafficSelector;
    }
    public String getName() {
        return this.name;
    }
    public String getPeerExternalGateway() {
        return this.peerExternalGateway;
    }
    public Integer getPeerExternalGatewayInterface() {
        return this.peerExternalGatewayInterface;
    }
    public String getPeerGcpGateway() {
        return this.peerGcpGateway;
    }
    public String getPeerIp() {
        return this.peerIp;
    }
    public String getRegion() {
        return this.region;
    }
    public List<String> getRemoteTrafficSelector() {
        return this.remoteTrafficSelector;
    }
    public String getRouter() {
        return this.router;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public String getSharedSecret() {
        return this.sharedSecret;
    }
    public String getSharedSecretHash() {
        return this.sharedSecretHash;
    }
    public String getStatus() {
        return this.status;
    }
    public String getTargetVpnGateway() {
        return this.targetVpnGateway;
    }
    public String getVpnGateway() {
        return this.vpnGateway;
    }
    public Integer getVpnGatewayInterface() {
        return this.vpnGatewayInterface;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnTunnelResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String creationTimestamp;
        private String description;
        private String detailedStatus;
        private Integer ikeVersion;
        private String kind;
        private List<String> localTrafficSelector;
        private String name;
        private String peerExternalGateway;
        private Integer peerExternalGatewayInterface;
        private String peerGcpGateway;
        private String peerIp;
        private String region;
        private List<String> remoteTrafficSelector;
        private String router;
        private String selfLink;
        private String sharedSecret;
        private String sharedSecretHash;
        private String status;
        private String targetVpnGateway;
        private String vpnGateway;
        private Integer vpnGatewayInterface;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVpnTunnelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.detailedStatus = defaults.detailedStatus;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.kind = defaults.kind;
    	      this.localTrafficSelector = defaults.localTrafficSelector;
    	      this.name = defaults.name;
    	      this.peerExternalGateway = defaults.peerExternalGateway;
    	      this.peerExternalGatewayInterface = defaults.peerExternalGatewayInterface;
    	      this.peerGcpGateway = defaults.peerGcpGateway;
    	      this.peerIp = defaults.peerIp;
    	      this.region = defaults.region;
    	      this.remoteTrafficSelector = defaults.remoteTrafficSelector;
    	      this.router = defaults.router;
    	      this.selfLink = defaults.selfLink;
    	      this.sharedSecret = defaults.sharedSecret;
    	      this.sharedSecretHash = defaults.sharedSecretHash;
    	      this.status = defaults.status;
    	      this.targetVpnGateway = defaults.targetVpnGateway;
    	      this.vpnGateway = defaults.vpnGateway;
    	      this.vpnGatewayInterface = defaults.vpnGatewayInterface;
        }

        public Builder setCreationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDetailedStatus(String detailedStatus) {
            this.detailedStatus = Objects.requireNonNull(detailedStatus);
            return this;
        }

        public Builder setIkeVersion(Integer ikeVersion) {
            this.ikeVersion = Objects.requireNonNull(ikeVersion);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLocalTrafficSelector(List<String> localTrafficSelector) {
            this.localTrafficSelector = Objects.requireNonNull(localTrafficSelector);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPeerExternalGateway(String peerExternalGateway) {
            this.peerExternalGateway = Objects.requireNonNull(peerExternalGateway);
            return this;
        }

        public Builder setPeerExternalGatewayInterface(Integer peerExternalGatewayInterface) {
            this.peerExternalGatewayInterface = Objects.requireNonNull(peerExternalGatewayInterface);
            return this;
        }

        public Builder setPeerGcpGateway(String peerGcpGateway) {
            this.peerGcpGateway = Objects.requireNonNull(peerGcpGateway);
            return this;
        }

        public Builder setPeerIp(String peerIp) {
            this.peerIp = Objects.requireNonNull(peerIp);
            return this;
        }

        public Builder setRegion(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }

        public Builder setRemoteTrafficSelector(List<String> remoteTrafficSelector) {
            this.remoteTrafficSelector = Objects.requireNonNull(remoteTrafficSelector);
            return this;
        }

        public Builder setRouter(String router) {
            this.router = Objects.requireNonNull(router);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setSharedSecret(String sharedSecret) {
            this.sharedSecret = Objects.requireNonNull(sharedSecret);
            return this;
        }

        public Builder setSharedSecretHash(String sharedSecretHash) {
            this.sharedSecretHash = Objects.requireNonNull(sharedSecretHash);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTargetVpnGateway(String targetVpnGateway) {
            this.targetVpnGateway = Objects.requireNonNull(targetVpnGateway);
            return this;
        }

        public Builder setVpnGateway(String vpnGateway) {
            this.vpnGateway = Objects.requireNonNull(vpnGateway);
            return this;
        }

        public Builder setVpnGatewayInterface(Integer vpnGatewayInterface) {
            this.vpnGatewayInterface = Objects.requireNonNull(vpnGatewayInterface);
            return this;
        }

        public GetVpnTunnelResult build() {
            return new GetVpnTunnelResult(creationTimestamp, description, detailedStatus, ikeVersion, kind, localTrafficSelector, name, peerExternalGateway, peerExternalGatewayInterface, peerGcpGateway, peerIp, region, remoteTrafficSelector, router, selfLink, sharedSecret, sharedSecretHash, status, targetVpnGateway, vpnGateway, vpnGatewayInterface);
        }
    }
}
