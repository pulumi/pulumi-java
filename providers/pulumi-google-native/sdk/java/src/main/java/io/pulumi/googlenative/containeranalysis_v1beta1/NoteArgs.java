// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1beta1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.AuthorityArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.BasisArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.BuildArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.DeployableArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.DiscoveryArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.DocumentNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.FileNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.InTotoArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.PackageArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.PackageInfoNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.RelatedUrlArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.RelationshipNoteArgs;
import io.pulumi.googlenative.containeranalysis_v1beta1.inputs.VulnerabilityArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NoteArgs extends io.pulumi.resources.ResourceArgs {

    public static final NoteArgs Empty = new NoteArgs();

    @InputImport(name="attestationAuthority")
    private final @Nullable Input<AuthorityArgs> attestationAuthority;

    public Input<AuthorityArgs> getAttestationAuthority() {
        return this.attestationAuthority == null ? Input.empty() : this.attestationAuthority;
    }

    @InputImport(name="baseImage")
    private final @Nullable Input<BasisArgs> baseImage;

    public Input<BasisArgs> getBaseImage() {
        return this.baseImage == null ? Input.empty() : this.baseImage;
    }

    @InputImport(name="build")
    private final @Nullable Input<BuildArgs> build;

    public Input<BuildArgs> getBuild() {
        return this.build == null ? Input.empty() : this.build;
    }

    @InputImport(name="deployable")
    private final @Nullable Input<DeployableArgs> deployable;

    public Input<DeployableArgs> getDeployable() {
        return this.deployable == null ? Input.empty() : this.deployable;
    }

    @InputImport(name="discovery")
    private final @Nullable Input<DiscoveryArgs> discovery;

    public Input<DiscoveryArgs> getDiscovery() {
        return this.discovery == null ? Input.empty() : this.discovery;
    }

    @InputImport(name="expirationTime")
    private final @Nullable Input<String> expirationTime;

    public Input<String> getExpirationTime() {
        return this.expirationTime == null ? Input.empty() : this.expirationTime;
    }

    @InputImport(name="intoto")
    private final @Nullable Input<InTotoArgs> intoto;

    public Input<InTotoArgs> getIntoto() {
        return this.intoto == null ? Input.empty() : this.intoto;
    }

    @InputImport(name="longDescription")
    private final @Nullable Input<String> longDescription;

    public Input<String> getLongDescription() {
        return this.longDescription == null ? Input.empty() : this.longDescription;
    }

    @InputImport(name="noteId", required=true)
    private final Input<String> noteId;

    public Input<String> getNoteId() {
        return this.noteId;
    }

    @InputImport(name="package")
    private final @Nullable Input<PackageArgs> $package;

    public Input<PackageArgs> get$package() {
        return this.$package == null ? Input.empty() : this.$package;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="relatedNoteNames")
    private final @Nullable Input<List<String>> relatedNoteNames;

    public Input<List<String>> getRelatedNoteNames() {
        return this.relatedNoteNames == null ? Input.empty() : this.relatedNoteNames;
    }

    @InputImport(name="relatedUrl")
    private final @Nullable Input<List<RelatedUrlArgs>> relatedUrl;

    public Input<List<RelatedUrlArgs>> getRelatedUrl() {
        return this.relatedUrl == null ? Input.empty() : this.relatedUrl;
    }

    @InputImport(name="sbom")
    private final @Nullable Input<DocumentNoteArgs> sbom;

    public Input<DocumentNoteArgs> getSbom() {
        return this.sbom == null ? Input.empty() : this.sbom;
    }

    @InputImport(name="shortDescription")
    private final @Nullable Input<String> shortDescription;

    public Input<String> getShortDescription() {
        return this.shortDescription == null ? Input.empty() : this.shortDescription;
    }

    @InputImport(name="spdxFile")
    private final @Nullable Input<FileNoteArgs> spdxFile;

    public Input<FileNoteArgs> getSpdxFile() {
        return this.spdxFile == null ? Input.empty() : this.spdxFile;
    }

    @InputImport(name="spdxPackage")
    private final @Nullable Input<PackageInfoNoteArgs> spdxPackage;

    public Input<PackageInfoNoteArgs> getSpdxPackage() {
        return this.spdxPackage == null ? Input.empty() : this.spdxPackage;
    }

    @InputImport(name="spdxRelationship")
    private final @Nullable Input<RelationshipNoteArgs> spdxRelationship;

    public Input<RelationshipNoteArgs> getSpdxRelationship() {
        return this.spdxRelationship == null ? Input.empty() : this.spdxRelationship;
    }

    @InputImport(name="vulnerability")
    private final @Nullable Input<VulnerabilityArgs> vulnerability;

    public Input<VulnerabilityArgs> getVulnerability() {
        return this.vulnerability == null ? Input.empty() : this.vulnerability;
    }

    public NoteArgs(
        @Nullable Input<AuthorityArgs> attestationAuthority,
        @Nullable Input<BasisArgs> baseImage,
        @Nullable Input<BuildArgs> build,
        @Nullable Input<DeployableArgs> deployable,
        @Nullable Input<DiscoveryArgs> discovery,
        @Nullable Input<String> expirationTime,
        @Nullable Input<InTotoArgs> intoto,
        @Nullable Input<String> longDescription,
        Input<String> noteId,
        @Nullable Input<PackageArgs> $package,
        @Nullable Input<String> project,
        @Nullable Input<List<String>> relatedNoteNames,
        @Nullable Input<List<RelatedUrlArgs>> relatedUrl,
        @Nullable Input<DocumentNoteArgs> sbom,
        @Nullable Input<String> shortDescription,
        @Nullable Input<FileNoteArgs> spdxFile,
        @Nullable Input<PackageInfoNoteArgs> spdxPackage,
        @Nullable Input<RelationshipNoteArgs> spdxRelationship,
        @Nullable Input<VulnerabilityArgs> vulnerability) {
        this.attestationAuthority = attestationAuthority;
        this.baseImage = baseImage;
        this.build = build;
        this.deployable = deployable;
        this.discovery = discovery;
        this.expirationTime = expirationTime;
        this.intoto = intoto;
        this.longDescription = longDescription;
        this.noteId = Objects.requireNonNull(noteId, "expected parameter 'noteId' to be non-null");
        this.$package = $package;
        this.project = project;
        this.relatedNoteNames = relatedNoteNames;
        this.relatedUrl = relatedUrl;
        this.sbom = sbom;
        this.shortDescription = shortDescription;
        this.spdxFile = spdxFile;
        this.spdxPackage = spdxPackage;
        this.spdxRelationship = spdxRelationship;
        this.vulnerability = vulnerability;
    }

    private NoteArgs() {
        this.attestationAuthority = Input.empty();
        this.baseImage = Input.empty();
        this.build = Input.empty();
        this.deployable = Input.empty();
        this.discovery = Input.empty();
        this.expirationTime = Input.empty();
        this.intoto = Input.empty();
        this.longDescription = Input.empty();
        this.noteId = Input.empty();
        this.$package = Input.empty();
        this.project = Input.empty();
        this.relatedNoteNames = Input.empty();
        this.relatedUrl = Input.empty();
        this.sbom = Input.empty();
        this.shortDescription = Input.empty();
        this.spdxFile = Input.empty();
        this.spdxPackage = Input.empty();
        this.spdxRelationship = Input.empty();
        this.vulnerability = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AuthorityArgs> attestationAuthority;
        private @Nullable Input<BasisArgs> baseImage;
        private @Nullable Input<BuildArgs> build;
        private @Nullable Input<DeployableArgs> deployable;
        private @Nullable Input<DiscoveryArgs> discovery;
        private @Nullable Input<String> expirationTime;
        private @Nullable Input<InTotoArgs> intoto;
        private @Nullable Input<String> longDescription;
        private Input<String> noteId;
        private @Nullable Input<PackageArgs> $package;
        private @Nullable Input<String> project;
        private @Nullable Input<List<String>> relatedNoteNames;
        private @Nullable Input<List<RelatedUrlArgs>> relatedUrl;
        private @Nullable Input<DocumentNoteArgs> sbom;
        private @Nullable Input<String> shortDescription;
        private @Nullable Input<FileNoteArgs> spdxFile;
        private @Nullable Input<PackageInfoNoteArgs> spdxPackage;
        private @Nullable Input<RelationshipNoteArgs> spdxRelationship;
        private @Nullable Input<VulnerabilityArgs> vulnerability;

        public Builder() {
    	      // Empty
        }

        public Builder(NoteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestationAuthority = defaults.attestationAuthority;
    	      this.baseImage = defaults.baseImage;
    	      this.build = defaults.build;
    	      this.deployable = defaults.deployable;
    	      this.discovery = defaults.discovery;
    	      this.expirationTime = defaults.expirationTime;
    	      this.intoto = defaults.intoto;
    	      this.longDescription = defaults.longDescription;
    	      this.noteId = defaults.noteId;
    	      this.$package = defaults.$package;
    	      this.project = defaults.project;
    	      this.relatedNoteNames = defaults.relatedNoteNames;
    	      this.relatedUrl = defaults.relatedUrl;
    	      this.sbom = defaults.sbom;
    	      this.shortDescription = defaults.shortDescription;
    	      this.spdxFile = defaults.spdxFile;
    	      this.spdxPackage = defaults.spdxPackage;
    	      this.spdxRelationship = defaults.spdxRelationship;
    	      this.vulnerability = defaults.vulnerability;
        }

        public Builder setAttestationAuthority(@Nullable Input<AuthorityArgs> attestationAuthority) {
            this.attestationAuthority = attestationAuthority;
            return this;
        }

        public Builder setAttestationAuthority(@Nullable AuthorityArgs attestationAuthority) {
            this.attestationAuthority = Input.ofNullable(attestationAuthority);
            return this;
        }

        public Builder setBaseImage(@Nullable Input<BasisArgs> baseImage) {
            this.baseImage = baseImage;
            return this;
        }

        public Builder setBaseImage(@Nullable BasisArgs baseImage) {
            this.baseImage = Input.ofNullable(baseImage);
            return this;
        }

        public Builder setBuild(@Nullable Input<BuildArgs> build) {
            this.build = build;
            return this;
        }

        public Builder setBuild(@Nullable BuildArgs build) {
            this.build = Input.ofNullable(build);
            return this;
        }

        public Builder setDeployable(@Nullable Input<DeployableArgs> deployable) {
            this.deployable = deployable;
            return this;
        }

        public Builder setDeployable(@Nullable DeployableArgs deployable) {
            this.deployable = Input.ofNullable(deployable);
            return this;
        }

        public Builder setDiscovery(@Nullable Input<DiscoveryArgs> discovery) {
            this.discovery = discovery;
            return this;
        }

        public Builder setDiscovery(@Nullable DiscoveryArgs discovery) {
            this.discovery = Input.ofNullable(discovery);
            return this;
        }

        public Builder setExpirationTime(@Nullable Input<String> expirationTime) {
            this.expirationTime = expirationTime;
            return this;
        }

        public Builder setExpirationTime(@Nullable String expirationTime) {
            this.expirationTime = Input.ofNullable(expirationTime);
            return this;
        }

        public Builder setIntoto(@Nullable Input<InTotoArgs> intoto) {
            this.intoto = intoto;
            return this;
        }

        public Builder setIntoto(@Nullable InTotoArgs intoto) {
            this.intoto = Input.ofNullable(intoto);
            return this;
        }

        public Builder setLongDescription(@Nullable Input<String> longDescription) {
            this.longDescription = longDescription;
            return this;
        }

        public Builder setLongDescription(@Nullable String longDescription) {
            this.longDescription = Input.ofNullable(longDescription);
            return this;
        }

        public Builder setNoteId(Input<String> noteId) {
            this.noteId = Objects.requireNonNull(noteId);
            return this;
        }

        public Builder setNoteId(String noteId) {
            this.noteId = Input.of(Objects.requireNonNull(noteId));
            return this;
        }

        public Builder set$package(@Nullable Input<PackageArgs> $package) {
            this.$package = $package;
            return this;
        }

        public Builder set$package(@Nullable PackageArgs $package) {
            this.$package = Input.ofNullable($package);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setRelatedNoteNames(@Nullable Input<List<String>> relatedNoteNames) {
            this.relatedNoteNames = relatedNoteNames;
            return this;
        }

        public Builder setRelatedNoteNames(@Nullable List<String> relatedNoteNames) {
            this.relatedNoteNames = Input.ofNullable(relatedNoteNames);
            return this;
        }

        public Builder setRelatedUrl(@Nullable Input<List<RelatedUrlArgs>> relatedUrl) {
            this.relatedUrl = relatedUrl;
            return this;
        }

        public Builder setRelatedUrl(@Nullable List<RelatedUrlArgs> relatedUrl) {
            this.relatedUrl = Input.ofNullable(relatedUrl);
            return this;
        }

        public Builder setSbom(@Nullable Input<DocumentNoteArgs> sbom) {
            this.sbom = sbom;
            return this;
        }

        public Builder setSbom(@Nullable DocumentNoteArgs sbom) {
            this.sbom = Input.ofNullable(sbom);
            return this;
        }

        public Builder setShortDescription(@Nullable Input<String> shortDescription) {
            this.shortDescription = shortDescription;
            return this;
        }

        public Builder setShortDescription(@Nullable String shortDescription) {
            this.shortDescription = Input.ofNullable(shortDescription);
            return this;
        }

        public Builder setSpdxFile(@Nullable Input<FileNoteArgs> spdxFile) {
            this.spdxFile = spdxFile;
            return this;
        }

        public Builder setSpdxFile(@Nullable FileNoteArgs spdxFile) {
            this.spdxFile = Input.ofNullable(spdxFile);
            return this;
        }

        public Builder setSpdxPackage(@Nullable Input<PackageInfoNoteArgs> spdxPackage) {
            this.spdxPackage = spdxPackage;
            return this;
        }

        public Builder setSpdxPackage(@Nullable PackageInfoNoteArgs spdxPackage) {
            this.spdxPackage = Input.ofNullable(spdxPackage);
            return this;
        }

        public Builder setSpdxRelationship(@Nullable Input<RelationshipNoteArgs> spdxRelationship) {
            this.spdxRelationship = spdxRelationship;
            return this;
        }

        public Builder setSpdxRelationship(@Nullable RelationshipNoteArgs spdxRelationship) {
            this.spdxRelationship = Input.ofNullable(spdxRelationship);
            return this;
        }

        public Builder setVulnerability(@Nullable Input<VulnerabilityArgs> vulnerability) {
            this.vulnerability = vulnerability;
            return this;
        }

        public Builder setVulnerability(@Nullable VulnerabilityArgs vulnerability) {
            this.vulnerability = Input.ofNullable(vulnerability);
            return this;
        }

        public NoteArgs build() {
            return new NoteArgs(attestationAuthority, baseImage, build, deployable, discovery, expirationTime, intoto, longDescription, noteId, $package, project, relatedNoteNames, relatedUrl, sbom, shortDescription, spdxFile, spdxPackage, spdxRelationship, vulnerability);
        }
    }
}
