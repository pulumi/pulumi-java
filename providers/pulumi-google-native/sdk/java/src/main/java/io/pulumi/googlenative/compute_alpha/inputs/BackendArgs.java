// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.compute_alpha.enums.BackendBalancingMode;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Message containing information of one individual backend.
 * 
 */
public final class BackendArgs extends io.pulumi.resources.ResourceArgs {

    public static final BackendArgs Empty = new BackendArgs();

    /**
     * Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
     * 
     */
    @Import(name="balancingMode")
      private final @Nullable Output<BackendBalancingMode> balancingMode;

    public Output<BackendBalancingMode> getBalancingMode() {
        return this.balancingMode == null ? Output.empty() : this.balancingMode;
    }

    /**
     * A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
     * 
     */
    @Import(name="capacityScaler")
      private final @Nullable Output<Double> capacityScaler;

    public Output<Double> getCapacityScaler() {
        return this.capacityScaler == null ? Output.empty() : this.capacityScaler;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
     * 
     */
    @Import(name="failover")
      private final @Nullable Output<Boolean> failover;

    public Output<Boolean> getFailover() {
        return this.failover == null ? Output.empty() : this.failover;
    }

    /**
     * The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
     * 
     */
    @Import(name="group")
      private final @Nullable Output<String> group;

    public Output<String> getGroup() {
        return this.group == null ? Output.empty() : this.group;
    }

    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
     * 
     */
    @Import(name="maxConnections")
      private final @Nullable Output<Integer> maxConnections;

    public Output<Integer> getMaxConnections() {
        return this.maxConnections == null ? Output.empty() : this.maxConnections;
    }

    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
     * 
     */
    @Import(name="maxConnectionsPerEndpoint")
      private final @Nullable Output<Integer> maxConnectionsPerEndpoint;

    public Output<Integer> getMaxConnectionsPerEndpoint() {
        return this.maxConnectionsPerEndpoint == null ? Output.empty() : this.maxConnectionsPerEndpoint;
    }

    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
     * 
     */
    @Import(name="maxConnectionsPerInstance")
      private final @Nullable Output<Integer> maxConnectionsPerInstance;

    public Output<Integer> getMaxConnectionsPerInstance() {
        return this.maxConnectionsPerInstance == null ? Output.empty() : this.maxConnectionsPerInstance;
    }

    /**
     * Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
     * 
     */
    @Import(name="maxRate")
      private final @Nullable Output<Integer> maxRate;

    public Output<Integer> getMaxRate() {
        return this.maxRate == null ? Output.empty() : this.maxRate;
    }

    /**
     * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
     * 
     */
    @Import(name="maxRatePerEndpoint")
      private final @Nullable Output<Double> maxRatePerEndpoint;

    public Output<Double> getMaxRatePerEndpoint() {
        return this.maxRatePerEndpoint == null ? Output.empty() : this.maxRatePerEndpoint;
    }

    /**
     * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
     * 
     */
    @Import(name="maxRatePerInstance")
      private final @Nullable Output<Double> maxRatePerInstance;

    public Output<Double> getMaxRatePerInstance() {
        return this.maxRatePerInstance == null ? Output.empty() : this.maxRatePerInstance;
    }

    /**
     * Optional parameter to define a target capacity for the UTILIZATIONbalancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
     * 
     */
    @Import(name="maxUtilization")
      private final @Nullable Output<Double> maxUtilization;

    public Output<Double> getMaxUtilization() {
        return this.maxUtilization == null ? Output.empty() : this.maxUtilization;
    }

    public BackendArgs(
        @Nullable Output<BackendBalancingMode> balancingMode,
        @Nullable Output<Double> capacityScaler,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> failover,
        @Nullable Output<String> group,
        @Nullable Output<Integer> maxConnections,
        @Nullable Output<Integer> maxConnectionsPerEndpoint,
        @Nullable Output<Integer> maxConnectionsPerInstance,
        @Nullable Output<Integer> maxRate,
        @Nullable Output<Double> maxRatePerEndpoint,
        @Nullable Output<Double> maxRatePerInstance,
        @Nullable Output<Double> maxUtilization) {
        this.balancingMode = balancingMode;
        this.capacityScaler = capacityScaler;
        this.description = description;
        this.failover = failover;
        this.group = group;
        this.maxConnections = maxConnections;
        this.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
        this.maxConnectionsPerInstance = maxConnectionsPerInstance;
        this.maxRate = maxRate;
        this.maxRatePerEndpoint = maxRatePerEndpoint;
        this.maxRatePerInstance = maxRatePerInstance;
        this.maxUtilization = maxUtilization;
    }

    private BackendArgs() {
        this.balancingMode = Output.empty();
        this.capacityScaler = Output.empty();
        this.description = Output.empty();
        this.failover = Output.empty();
        this.group = Output.empty();
        this.maxConnections = Output.empty();
        this.maxConnectionsPerEndpoint = Output.empty();
        this.maxConnectionsPerInstance = Output.empty();
        this.maxRate = Output.empty();
        this.maxRatePerEndpoint = Output.empty();
        this.maxRatePerInstance = Output.empty();
        this.maxUtilization = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BackendBalancingMode> balancingMode;
        private @Nullable Output<Double> capacityScaler;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> failover;
        private @Nullable Output<String> group;
        private @Nullable Output<Integer> maxConnections;
        private @Nullable Output<Integer> maxConnectionsPerEndpoint;
        private @Nullable Output<Integer> maxConnectionsPerInstance;
        private @Nullable Output<Integer> maxRate;
        private @Nullable Output<Double> maxRatePerEndpoint;
        private @Nullable Output<Double> maxRatePerInstance;
        private @Nullable Output<Double> maxUtilization;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balancingMode = defaults.balancingMode;
    	      this.capacityScaler = defaults.capacityScaler;
    	      this.description = defaults.description;
    	      this.failover = defaults.failover;
    	      this.group = defaults.group;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxConnectionsPerEndpoint = defaults.maxConnectionsPerEndpoint;
    	      this.maxConnectionsPerInstance = defaults.maxConnectionsPerInstance;
    	      this.maxRate = defaults.maxRate;
    	      this.maxRatePerEndpoint = defaults.maxRatePerEndpoint;
    	      this.maxRatePerInstance = defaults.maxRatePerInstance;
    	      this.maxUtilization = defaults.maxUtilization;
        }

        public Builder balancingMode(@Nullable Output<BackendBalancingMode> balancingMode) {
            this.balancingMode = balancingMode;
            return this;
        }
        public Builder balancingMode(@Nullable BackendBalancingMode balancingMode) {
            this.balancingMode = Output.ofNullable(balancingMode);
            return this;
        }
        public Builder capacityScaler(@Nullable Output<Double> capacityScaler) {
            this.capacityScaler = capacityScaler;
            return this;
        }
        public Builder capacityScaler(@Nullable Double capacityScaler) {
            this.capacityScaler = Output.ofNullable(capacityScaler);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder failover(@Nullable Output<Boolean> failover) {
            this.failover = failover;
            return this;
        }
        public Builder failover(@Nullable Boolean failover) {
            this.failover = Output.ofNullable(failover);
            return this;
        }
        public Builder group(@Nullable Output<String> group) {
            this.group = group;
            return this;
        }
        public Builder group(@Nullable String group) {
            this.group = Output.ofNullable(group);
            return this;
        }
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            this.maxConnections = maxConnections;
            return this;
        }
        public Builder maxConnections(@Nullable Integer maxConnections) {
            this.maxConnections = Output.ofNullable(maxConnections);
            return this;
        }
        public Builder maxConnectionsPerEndpoint(@Nullable Output<Integer> maxConnectionsPerEndpoint) {
            this.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            return this;
        }
        public Builder maxConnectionsPerEndpoint(@Nullable Integer maxConnectionsPerEndpoint) {
            this.maxConnectionsPerEndpoint = Output.ofNullable(maxConnectionsPerEndpoint);
            return this;
        }
        public Builder maxConnectionsPerInstance(@Nullable Output<Integer> maxConnectionsPerInstance) {
            this.maxConnectionsPerInstance = maxConnectionsPerInstance;
            return this;
        }
        public Builder maxConnectionsPerInstance(@Nullable Integer maxConnectionsPerInstance) {
            this.maxConnectionsPerInstance = Output.ofNullable(maxConnectionsPerInstance);
            return this;
        }
        public Builder maxRate(@Nullable Output<Integer> maxRate) {
            this.maxRate = maxRate;
            return this;
        }
        public Builder maxRate(@Nullable Integer maxRate) {
            this.maxRate = Output.ofNullable(maxRate);
            return this;
        }
        public Builder maxRatePerEndpoint(@Nullable Output<Double> maxRatePerEndpoint) {
            this.maxRatePerEndpoint = maxRatePerEndpoint;
            return this;
        }
        public Builder maxRatePerEndpoint(@Nullable Double maxRatePerEndpoint) {
            this.maxRatePerEndpoint = Output.ofNullable(maxRatePerEndpoint);
            return this;
        }
        public Builder maxRatePerInstance(@Nullable Output<Double> maxRatePerInstance) {
            this.maxRatePerInstance = maxRatePerInstance;
            return this;
        }
        public Builder maxRatePerInstance(@Nullable Double maxRatePerInstance) {
            this.maxRatePerInstance = Output.ofNullable(maxRatePerInstance);
            return this;
        }
        public Builder maxUtilization(@Nullable Output<Double> maxUtilization) {
            this.maxUtilization = maxUtilization;
            return this;
        }
        public Builder maxUtilization(@Nullable Double maxUtilization) {
            this.maxUtilization = Output.ofNullable(maxUtilization);
            return this;
        }        public BackendArgs build() {
            return new BackendArgs(balancingMode, capacityScaler, description, failover, group, maxConnections, maxConnectionsPerEndpoint, maxConnectionsPerInstance, maxRate, maxRatePerEndpoint, maxRatePerInstance, maxUtilization);
        }
    }
}
