// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.StandardSqlFieldArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A table type
 * 
 */
public final class StandardSqlTableTypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final StandardSqlTableTypeArgs Empty = new StandardSqlTableTypeArgs();

    /**
     * The columns in this table type
     * 
     */
    @InputImport(name="columns")
      private final @Nullable Input<List<StandardSqlFieldArgs>> columns;

    public Input<List<StandardSqlFieldArgs>> getColumns() {
        return this.columns == null ? Input.empty() : this.columns;
    }

    public StandardSqlTableTypeArgs(@Nullable Input<List<StandardSqlFieldArgs>> columns) {
        this.columns = columns;
    }

    private StandardSqlTableTypeArgs() {
        this.columns = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardSqlTableTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<StandardSqlFieldArgs>> columns;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardSqlTableTypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
        }

        public Builder setColumns(@Nullable Input<List<StandardSqlFieldArgs>> columns) {
            this.columns = columns;
            return this;
        }

        public Builder setColumns(@Nullable List<StandardSqlFieldArgs> columns) {
            this.columns = Input.ofNullable(columns);
            return this;
        }
        public StandardSqlTableTypeArgs build() {
            return new StandardSqlTableTypeArgs(columns);
        }
    }
}
