// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.transcoder_v1.inputs.AudioResponse;
import io.pulumi.googlenative.transcoder_v1.inputs.ColorResponse;
import io.pulumi.googlenative.transcoder_v1.inputs.CropResponse;
import io.pulumi.googlenative.transcoder_v1.inputs.DeblockResponse;
import io.pulumi.googlenative.transcoder_v1.inputs.DenoiseResponse;
import io.pulumi.googlenative.transcoder_v1.inputs.PadResponse;
import java.util.Objects;


public final class PreprocessingConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final PreprocessingConfigResponse Empty = new PreprocessingConfigResponse();

    @InputImport(name="audio", required=true)
    private final AudioResponse audio;

    public AudioResponse getAudio() {
        return this.audio;
    }

    @InputImport(name="color", required=true)
    private final ColorResponse color;

    public ColorResponse getColor() {
        return this.color;
    }

    @InputImport(name="crop", required=true)
    private final CropResponse crop;

    public CropResponse getCrop() {
        return this.crop;
    }

    @InputImport(name="deblock", required=true)
    private final DeblockResponse deblock;

    public DeblockResponse getDeblock() {
        return this.deblock;
    }

    @InputImport(name="denoise", required=true)
    private final DenoiseResponse denoise;

    public DenoiseResponse getDenoise() {
        return this.denoise;
    }

    @InputImport(name="pad", required=true)
    private final PadResponse pad;

    public PadResponse getPad() {
        return this.pad;
    }

    public PreprocessingConfigResponse(
        AudioResponse audio,
        ColorResponse color,
        CropResponse crop,
        DeblockResponse deblock,
        DenoiseResponse denoise,
        PadResponse pad) {
        this.audio = Objects.requireNonNull(audio, "expected parameter 'audio' to be non-null");
        this.color = Objects.requireNonNull(color, "expected parameter 'color' to be non-null");
        this.crop = Objects.requireNonNull(crop, "expected parameter 'crop' to be non-null");
        this.deblock = Objects.requireNonNull(deblock, "expected parameter 'deblock' to be non-null");
        this.denoise = Objects.requireNonNull(denoise, "expected parameter 'denoise' to be non-null");
        this.pad = Objects.requireNonNull(pad, "expected parameter 'pad' to be non-null");
    }

    private PreprocessingConfigResponse() {
        this.audio = null;
        this.color = null;
        this.crop = null;
        this.deblock = null;
        this.denoise = null;
        this.pad = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreprocessingConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AudioResponse audio;
        private ColorResponse color;
        private CropResponse crop;
        private DeblockResponse deblock;
        private DenoiseResponse denoise;
        private PadResponse pad;

        public Builder() {
    	      // Empty
        }

        public Builder(PreprocessingConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audio = defaults.audio;
    	      this.color = defaults.color;
    	      this.crop = defaults.crop;
    	      this.deblock = defaults.deblock;
    	      this.denoise = defaults.denoise;
    	      this.pad = defaults.pad;
        }

        public Builder setAudio(AudioResponse audio) {
            this.audio = Objects.requireNonNull(audio);
            return this;
        }

        public Builder setColor(ColorResponse color) {
            this.color = Objects.requireNonNull(color);
            return this;
        }

        public Builder setCrop(CropResponse crop) {
            this.crop = Objects.requireNonNull(crop);
            return this;
        }

        public Builder setDeblock(DeblockResponse deblock) {
            this.deblock = Objects.requireNonNull(deblock);
            return this;
        }

        public Builder setDenoise(DenoiseResponse denoise) {
            this.denoise = Objects.requireNonNull(denoise);
            return this;
        }

        public Builder setPad(PadResponse pad) {
            this.pad = Objects.requireNonNull(pad);
            return this;
        }

        public PreprocessingConfigResponse build() {
            return new PreprocessingConfigResponse(audio, color, crop, deblock, denoise, pad);
        }
    }
}
