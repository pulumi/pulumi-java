// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import io.pulumi.googlenative.Utilities;
import io.pulumi.googlenative.cloudbuild_v1.TriggerArgs;
import io.pulumi.googlenative.cloudbuild_v1.outputs.ApprovalConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.BitbucketServerTriggerConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.BuildResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitFileSourceResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitHubEventsConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.GitRepoSourceResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.PubsubConfigResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.RepoSourceResponse;
import io.pulumi.googlenative.cloudbuild_v1.outputs.WebhookConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

@ResourceType(type="google-native:cloudbuild/v1:Trigger")
public class Trigger extends io.pulumi.resources.CustomResource {
    @OutputExport(name="approvalConfig", type=ApprovalConfigResponse.class, parameters={})
    private Output<ApprovalConfigResponse> approvalConfig;

    public Output<ApprovalConfigResponse> getApprovalConfig() {
        return this.approvalConfig;
    }
    @OutputExport(name="autodetect", type=Boolean.class, parameters={})
    private Output<Boolean> autodetect;

    public Output<Boolean> getAutodetect() {
        return this.autodetect;
    }
    @OutputExport(name="bitbucketServerTriggerConfig", type=BitbucketServerTriggerConfigResponse.class, parameters={})
    private Output<BitbucketServerTriggerConfigResponse> bitbucketServerTriggerConfig;

    public Output<BitbucketServerTriggerConfigResponse> getBitbucketServerTriggerConfig() {
        return this.bitbucketServerTriggerConfig;
    }
    @OutputExport(name="build", type=BuildResponse.class, parameters={})
    private Output<BuildResponse> build;

    public Output<BuildResponse> getBuild() {
        return this.build;
    }
    @OutputExport(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    public Output<String> getCreateTime() {
        return this.createTime;
    }
    @OutputExport(name="description", type=String.class, parameters={})
    private Output<String> description;

    public Output<String> getDescription() {
        return this.description;
    }
    @OutputExport(name="disabled", type=Boolean.class, parameters={})
    private Output<Boolean> disabled;

    public Output<Boolean> getDisabled() {
        return this.disabled;
    }
    @OutputExport(name="eventType", type=String.class, parameters={})
    private Output<String> eventType;

    public Output<String> getEventType() {
        return this.eventType;
    }
    @OutputExport(name="filename", type=String.class, parameters={})
    private Output<String> filename;

    public Output<String> getFilename() {
        return this.filename;
    }
    @OutputExport(name="filter", type=String.class, parameters={})
    private Output<String> filter;

    public Output<String> getFilter() {
        return this.filter;
    }
    @OutputExport(name="gitFileSource", type=GitFileSourceResponse.class, parameters={})
    private Output<GitFileSourceResponse> gitFileSource;

    public Output<GitFileSourceResponse> getGitFileSource() {
        return this.gitFileSource;
    }
    @OutputExport(name="github", type=GitHubEventsConfigResponse.class, parameters={})
    private Output<GitHubEventsConfigResponse> github;

    public Output<GitHubEventsConfigResponse> getGithub() {
        return this.github;
    }
    @OutputExport(name="ignoredFiles", type=List.class, parameters={String.class})
    private Output<List<String>> ignoredFiles;

    public Output<List<String>> getIgnoredFiles() {
        return this.ignoredFiles;
    }
    @OutputExport(name="includedFiles", type=List.class, parameters={String.class})
    private Output<List<String>> includedFiles;

    public Output<List<String>> getIncludedFiles() {
        return this.includedFiles;
    }
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> getName() {
        return this.name;
    }
    @OutputExport(name="pubsubConfig", type=PubsubConfigResponse.class, parameters={})
    private Output<PubsubConfigResponse> pubsubConfig;

    public Output<PubsubConfigResponse> getPubsubConfig() {
        return this.pubsubConfig;
    }
    @OutputExport(name="resourceName", type=String.class, parameters={})
    private Output<String> resourceName;

    public Output<String> getPropResourceName() {
        return this.resourceName;
    }
    @OutputExport(name="serviceAccount", type=String.class, parameters={})
    private Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount;
    }
    @OutputExport(name="sourceToBuild", type=GitRepoSourceResponse.class, parameters={})
    private Output<GitRepoSourceResponse> sourceToBuild;

    public Output<GitRepoSourceResponse> getSourceToBuild() {
        return this.sourceToBuild;
    }
    @OutputExport(name="substitutions", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> substitutions;

    public Output<Map<String,String>> getSubstitutions() {
        return this.substitutions;
    }
    @OutputExport(name="tags", type=List.class, parameters={String.class})
    private Output<List<String>> tags;

    public Output<List<String>> getTags() {
        return this.tags;
    }
    @OutputExport(name="triggerTemplate", type=RepoSourceResponse.class, parameters={})
    private Output<RepoSourceResponse> triggerTemplate;

    public Output<RepoSourceResponse> getTriggerTemplate() {
        return this.triggerTemplate;
    }
    @OutputExport(name="webhookConfig", type=WebhookConfigResponse.class, parameters={})
    private Output<WebhookConfigResponse> webhookConfig;

    public Output<WebhookConfigResponse> getWebhookConfig() {
        return this.webhookConfig;
    }

    public Trigger(String name, TriggerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:cloudbuild/v1:Trigger", name, args == null ? TriggerArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Trigger(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:cloudbuild/v1:Trigger", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    public static Trigger get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Trigger(name, id, options);
    }
}
