// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataproc_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.dataproc_v1.inputs.OrderedJobArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.TemplateParameterArgs;
import io.pulumi.googlenative.dataproc_v1.inputs.WorkflowTemplatePlacementArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkflowTemplateArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkflowTemplateArgs Empty = new WorkflowTemplateArgs();

    @InputImport(name="dagTimeout")
    private final @Nullable Input<String> dagTimeout;

    public Input<String> getDagTimeout() {
        return this.dagTimeout == null ? Input.empty() : this.dagTimeout;
    }

    @InputImport(name="id")
    private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="jobs", required=true)
    private final Input<List<OrderedJobArgs>> jobs;

    public Input<List<OrderedJobArgs>> getJobs() {
        return this.jobs;
    }

    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="parameters")
    private final @Nullable Input<List<TemplateParameterArgs>> parameters;

    public Input<List<TemplateParameterArgs>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    @InputImport(name="placement", required=true)
    private final Input<WorkflowTemplatePlacementArgs> placement;

    public Input<WorkflowTemplatePlacementArgs> getPlacement() {
        return this.placement;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="version")
    private final @Nullable Input<Integer> version;

    public Input<Integer> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public WorkflowTemplateArgs(
        @Nullable Input<String> dagTimeout,
        @Nullable Input<String> id,
        Input<List<OrderedJobArgs>> jobs,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<List<TemplateParameterArgs>> parameters,
        Input<WorkflowTemplatePlacementArgs> placement,
        @Nullable Input<String> project,
        @Nullable Input<Integer> version) {
        this.dagTimeout = dagTimeout;
        this.id = id;
        this.jobs = Objects.requireNonNull(jobs, "expected parameter 'jobs' to be non-null");
        this.labels = labels;
        this.location = location;
        this.parameters = parameters;
        this.placement = Objects.requireNonNull(placement, "expected parameter 'placement' to be non-null");
        this.project = project;
        this.version = version;
    }

    private WorkflowTemplateArgs() {
        this.dagTimeout = Input.empty();
        this.id = Input.empty();
        this.jobs = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.parameters = Input.empty();
        this.placement = Input.empty();
        this.project = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> dagTimeout;
        private @Nullable Input<String> id;
        private Input<List<OrderedJobArgs>> jobs;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<List<TemplateParameterArgs>> parameters;
        private Input<WorkflowTemplatePlacementArgs> placement;
        private @Nullable Input<String> project;
        private @Nullable Input<Integer> version;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkflowTemplateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dagTimeout = defaults.dagTimeout;
    	      this.id = defaults.id;
    	      this.jobs = defaults.jobs;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.parameters = defaults.parameters;
    	      this.placement = defaults.placement;
    	      this.project = defaults.project;
    	      this.version = defaults.version;
        }

        public Builder setDagTimeout(@Nullable Input<String> dagTimeout) {
            this.dagTimeout = dagTimeout;
            return this;
        }

        public Builder setDagTimeout(@Nullable String dagTimeout) {
            this.dagTimeout = Input.ofNullable(dagTimeout);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setJobs(Input<List<OrderedJobArgs>> jobs) {
            this.jobs = Objects.requireNonNull(jobs);
            return this;
        }

        public Builder setJobs(List<OrderedJobArgs> jobs) {
            this.jobs = Input.of(Objects.requireNonNull(jobs));
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setParameters(@Nullable Input<List<TemplateParameterArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable List<TemplateParameterArgs> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setPlacement(Input<WorkflowTemplatePlacementArgs> placement) {
            this.placement = Objects.requireNonNull(placement);
            return this;
        }

        public Builder setPlacement(WorkflowTemplatePlacementArgs placement) {
            this.placement = Input.of(Objects.requireNonNull(placement));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setVersion(@Nullable Input<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable Integer version) {
            this.version = Input.ofNullable(version);
            return this;
        }

        public WorkflowTemplateArgs build() {
            return new WorkflowTemplateArgs(dagTimeout, id, jobs, labels, location, parameters, placement, project, version);
        }
    }
}
