// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomerEncryptionKeyArgs extends io.pulumi.resources.ResourceArgs {

    public static final CustomerEncryptionKeyArgs Empty = new CustomerEncryptionKeyArgs();

    /**
     * The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key
     * 
     */
    @InputImport(name="kmsKeyName")
    private final @Nullable Input<String> kmsKeyName;

    public Input<String> getKmsKeyName() {
        return this.kmsKeyName == null ? Input.empty() : this.kmsKeyName;
    }

    /**
     * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount": "name@project_id.iam.gserviceaccount.com/
     * 
     */
    @InputImport(name="kmsKeyServiceAccount")
    private final @Nullable Input<String> kmsKeyServiceAccount;

    public Input<String> getKmsKeyServiceAccount() {
        return this.kmsKeyServiceAccount == null ? Input.empty() : this.kmsKeyServiceAccount;
    }

    /**
     * Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0="
     * 
     */
    @InputImport(name="rawKey")
    private final @Nullable Input<String> rawKey;

    public Input<String> getRawKey() {
        return this.rawKey == null ? Input.empty() : this.rawKey;
    }

    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
     * 
     */
    @InputImport(name="rsaEncryptedKey")
    private final @Nullable Input<String> rsaEncryptedKey;

    public Input<String> getRsaEncryptedKey() {
        return this.rsaEncryptedKey == null ? Input.empty() : this.rsaEncryptedKey;
    }

    public CustomerEncryptionKeyArgs(
        @Nullable Input<String> kmsKeyName,
        @Nullable Input<String> kmsKeyServiceAccount,
        @Nullable Input<String> rawKey,
        @Nullable Input<String> rsaEncryptedKey) {
        this.kmsKeyName = kmsKeyName;
        this.kmsKeyServiceAccount = kmsKeyServiceAccount;
        this.rawKey = rawKey;
        this.rsaEncryptedKey = rsaEncryptedKey;
    }

    private CustomerEncryptionKeyArgs() {
        this.kmsKeyName = Input.empty();
        this.kmsKeyServiceAccount = Input.empty();
        this.rawKey = Input.empty();
        this.rsaEncryptedKey = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomerEncryptionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> kmsKeyName;
        private @Nullable Input<String> kmsKeyServiceAccount;
        private @Nullable Input<String> rawKey;
        private @Nullable Input<String> rsaEncryptedKey;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomerEncryptionKeyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.kmsKeyServiceAccount = defaults.kmsKeyServiceAccount;
    	      this.rawKey = defaults.rawKey;
    	      this.rsaEncryptedKey = defaults.rsaEncryptedKey;
        }

        public Builder setKmsKeyName(@Nullable Input<String> kmsKeyName) {
            this.kmsKeyName = kmsKeyName;
            return this;
        }

        public Builder setKmsKeyName(@Nullable String kmsKeyName) {
            this.kmsKeyName = Input.ofNullable(kmsKeyName);
            return this;
        }

        public Builder setKmsKeyServiceAccount(@Nullable Input<String> kmsKeyServiceAccount) {
            this.kmsKeyServiceAccount = kmsKeyServiceAccount;
            return this;
        }

        public Builder setKmsKeyServiceAccount(@Nullable String kmsKeyServiceAccount) {
            this.kmsKeyServiceAccount = Input.ofNullable(kmsKeyServiceAccount);
            return this;
        }

        public Builder setRawKey(@Nullable Input<String> rawKey) {
            this.rawKey = rawKey;
            return this;
        }

        public Builder setRawKey(@Nullable String rawKey) {
            this.rawKey = Input.ofNullable(rawKey);
            return this;
        }

        public Builder setRsaEncryptedKey(@Nullable Input<String> rsaEncryptedKey) {
            this.rsaEncryptedKey = rsaEncryptedKey;
            return this;
        }

        public Builder setRsaEncryptedKey(@Nullable String rsaEncryptedKey) {
            this.rsaEncryptedKey = Input.ofNullable(rsaEncryptedKey);
            return this;
        }

        public CustomerEncryptionKeyArgs build() {
            return new CustomerEncryptionKeyArgs(kmsKeyName, kmsKeyServiceAccount, rawKey, rsaEncryptedKey);
        }
    }
}
