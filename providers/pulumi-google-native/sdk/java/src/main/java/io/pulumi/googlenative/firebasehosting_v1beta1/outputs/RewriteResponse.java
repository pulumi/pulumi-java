// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebasehosting_v1beta1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.firebasehosting_v1beta1.outputs.CloudRunRewriteResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class RewriteResponse {
    /**
     * The request will be forwarded to Firebase Dynamic Links.
     * 
     */
    private final Boolean dynamicLinks;
    /**
     * The function to proxy requests to. Must match the exported function name exactly.
     * 
     */
    private final String function;
    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     * 
     */
    private final String glob;
    /**
     * The URL path to rewrite the request to.
     * 
     */
    private final String path;
    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     * 
     */
    private final String regex;
    /**
     * The request will be forwarded to Cloud Run.
     * 
     */
    private final CloudRunRewriteResponse run;

    @OutputCustomType.Constructor({"dynamicLinks","function","glob","path","regex","run"})
    private RewriteResponse(
        Boolean dynamicLinks,
        String function,
        String glob,
        String path,
        String regex,
        CloudRunRewriteResponse run) {
        this.dynamicLinks = Objects.requireNonNull(dynamicLinks);
        this.function = Objects.requireNonNull(function);
        this.glob = Objects.requireNonNull(glob);
        this.path = Objects.requireNonNull(path);
        this.regex = Objects.requireNonNull(regex);
        this.run = Objects.requireNonNull(run);
    }

    /**
     * The request will be forwarded to Firebase Dynamic Links.
     * 
     */
    public Boolean getDynamicLinks() {
        return this.dynamicLinks;
    }
    /**
     * The function to proxy requests to. Must match the exported function name exactly.
     * 
     */
    public String getFunction() {
        return this.function;
    }
    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     * 
     */
    public String getGlob() {
        return this.glob;
    }
    /**
     * The URL path to rewrite the request to.
     * 
     */
    public String getPath() {
        return this.path;
    }
    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     * 
     */
    public String getRegex() {
        return this.regex;
    }
    /**
     * The request will be forwarded to Cloud Run.
     * 
     */
    public CloudRunRewriteResponse getRun() {
        return this.run;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RewriteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean dynamicLinks;
        private String function;
        private String glob;
        private String path;
        private String regex;
        private CloudRunRewriteResponse run;

        public Builder() {
    	      // Empty
        }

        public Builder(RewriteResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dynamicLinks = defaults.dynamicLinks;
    	      this.function = defaults.function;
    	      this.glob = defaults.glob;
    	      this.path = defaults.path;
    	      this.regex = defaults.regex;
    	      this.run = defaults.run;
        }

        public Builder setDynamicLinks(Boolean dynamicLinks) {
            this.dynamicLinks = Objects.requireNonNull(dynamicLinks);
            return this;
        }

        public Builder setFunction(String function) {
            this.function = Objects.requireNonNull(function);
            return this;
        }

        public Builder setGlob(String glob) {
            this.glob = Objects.requireNonNull(glob);
            return this;
        }

        public Builder setPath(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setRegex(String regex) {
            this.regex = Objects.requireNonNull(regex);
            return this;
        }

        public Builder setRun(CloudRunRewriteResponse run) {
            this.run = Objects.requireNonNull(run);
            return this;
        }

        public RewriteResponse build() {
            return new RewriteResponse(dynamicLinks, function, glob, path, regex, run);
        }
    }
}
