// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.firebasehosting_v1beta1.inputs.ActingUserResponse;
import io.pulumi.googlenative.firebasehosting_v1beta1.inputs.ServingConfigResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class VersionResponse extends io.pulumi.resources.InvokeArgs {

    public static final VersionResponse Empty = new VersionResponse();

    @InputImport(name="config", required=true)
    private final ServingConfigResponse config;

    public ServingConfigResponse getConfig() {
        return this.config;
    }

    @InputImport(name="createTime", required=true)
    private final String createTime;

    public String getCreateTime() {
        return this.createTime;
    }

    @InputImport(name="createUser", required=true)
    private final ActingUserResponse createUser;

    public ActingUserResponse getCreateUser() {
        return this.createUser;
    }

    @InputImport(name="deleteTime", required=true)
    private final String deleteTime;

    public String getDeleteTime() {
        return this.deleteTime;
    }

    @InputImport(name="deleteUser", required=true)
    private final ActingUserResponse deleteUser;

    public ActingUserResponse getDeleteUser() {
        return this.deleteUser;
    }

    @InputImport(name="fileCount", required=true)
    private final String fileCount;

    public String getFileCount() {
        return this.fileCount;
    }

    @InputImport(name="finalizeTime", required=true)
    private final String finalizeTime;

    public String getFinalizeTime() {
        return this.finalizeTime;
    }

    @InputImport(name="finalizeUser", required=true)
    private final ActingUserResponse finalizeUser;

    public ActingUserResponse getFinalizeUser() {
        return this.finalizeUser;
    }

    @InputImport(name="labels", required=true)
    private final Map<String,String> labels;

    public Map<String,String> getLabels() {
        return this.labels;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="status", required=true)
    private final String status;

    public String getStatus() {
        return this.status;
    }

    @InputImport(name="versionBytes", required=true)
    private final String versionBytes;

    public String getVersionBytes() {
        return this.versionBytes;
    }

    public VersionResponse(
        ServingConfigResponse config,
        String createTime,
        ActingUserResponse createUser,
        String deleteTime,
        ActingUserResponse deleteUser,
        String fileCount,
        String finalizeTime,
        ActingUserResponse finalizeUser,
        Map<String,String> labels,
        String name,
        String status,
        String versionBytes) {
        this.config = Objects.requireNonNull(config, "expected parameter 'config' to be non-null");
        this.createTime = Objects.requireNonNull(createTime, "expected parameter 'createTime' to be non-null");
        this.createUser = Objects.requireNonNull(createUser, "expected parameter 'createUser' to be non-null");
        this.deleteTime = Objects.requireNonNull(deleteTime, "expected parameter 'deleteTime' to be non-null");
        this.deleteUser = Objects.requireNonNull(deleteUser, "expected parameter 'deleteUser' to be non-null");
        this.fileCount = Objects.requireNonNull(fileCount, "expected parameter 'fileCount' to be non-null");
        this.finalizeTime = Objects.requireNonNull(finalizeTime, "expected parameter 'finalizeTime' to be non-null");
        this.finalizeUser = Objects.requireNonNull(finalizeUser, "expected parameter 'finalizeUser' to be non-null");
        this.labels = Objects.requireNonNull(labels, "expected parameter 'labels' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.versionBytes = Objects.requireNonNull(versionBytes, "expected parameter 'versionBytes' to be non-null");
    }

    private VersionResponse() {
        this.config = null;
        this.createTime = null;
        this.createUser = null;
        this.deleteTime = null;
        this.deleteUser = null;
        this.fileCount = null;
        this.finalizeTime = null;
        this.finalizeUser = null;
        this.labels = Map.of();
        this.name = null;
        this.status = null;
        this.versionBytes = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VersionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServingConfigResponse config;
        private String createTime;
        private ActingUserResponse createUser;
        private String deleteTime;
        private ActingUserResponse deleteUser;
        private String fileCount;
        private String finalizeTime;
        private ActingUserResponse finalizeUser;
        private Map<String,String> labels;
        private String name;
        private String status;
        private String versionBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(VersionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.createUser = defaults.createUser;
    	      this.deleteTime = defaults.deleteTime;
    	      this.deleteUser = defaults.deleteUser;
    	      this.fileCount = defaults.fileCount;
    	      this.finalizeTime = defaults.finalizeTime;
    	      this.finalizeUser = defaults.finalizeUser;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.versionBytes = defaults.versionBytes;
        }

        public Builder setConfig(ServingConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setCreateUser(ActingUserResponse createUser) {
            this.createUser = Objects.requireNonNull(createUser);
            return this;
        }

        public Builder setDeleteTime(String deleteTime) {
            this.deleteTime = Objects.requireNonNull(deleteTime);
            return this;
        }

        public Builder setDeleteUser(ActingUserResponse deleteUser) {
            this.deleteUser = Objects.requireNonNull(deleteUser);
            return this;
        }

        public Builder setFileCount(String fileCount) {
            this.fileCount = Objects.requireNonNull(fileCount);
            return this;
        }

        public Builder setFinalizeTime(String finalizeTime) {
            this.finalizeTime = Objects.requireNonNull(finalizeTime);
            return this;
        }

        public Builder setFinalizeUser(ActingUserResponse finalizeUser) {
            this.finalizeUser = Objects.requireNonNull(finalizeUser);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setVersionBytes(String versionBytes) {
            this.versionBytes = Objects.requireNonNull(versionBytes);
            return this;
        }

        public VersionResponse build() {
            return new VersionResponse(config, createTime, createUser, deleteTime, deleteUser, fileCount, finalizeTime, finalizeUser, labels, name, status, versionBytes);
        }
    }
}
