// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1alpha1.enums.VersionKind;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
 * 
 */
public final class VersionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VersionArgs Empty = new VersionArgs();

    /**
     * Used to correct mistakes in the version numbering scheme.
     * 
     */
    @Import(name="epoch")
      private final @Nullable Output<Integer> epoch;

    public Output<Integer> getEpoch() {
        return this.epoch == null ? Output.empty() : this.epoch;
    }

    /**
     * Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
     * 
     */
    @Import(name="inclusive")
      private final @Nullable Output<Boolean> inclusive;

    public Output<Boolean> getInclusive() {
        return this.inclusive == null ? Output.empty() : this.inclusive;
    }

    /**
     * Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<VersionKind> kind;

    public Output<VersionKind> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The main part of the version name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The iteration of the package build from the above version.
     * 
     */
    @Import(name="revision")
      private final @Nullable Output<String> revision;

    public Output<String> getRevision() {
        return this.revision == null ? Output.empty() : this.revision;
    }

    public VersionArgs(
        @Nullable Output<Integer> epoch,
        @Nullable Output<Boolean> inclusive,
        @Nullable Output<VersionKind> kind,
        @Nullable Output<String> name,
        @Nullable Output<String> revision) {
        this.epoch = epoch;
        this.inclusive = inclusive;
        this.kind = kind;
        this.name = name;
        this.revision = revision;
    }

    private VersionArgs() {
        this.epoch = Output.empty();
        this.inclusive = Output.empty();
        this.kind = Output.empty();
        this.name = Output.empty();
        this.revision = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> epoch;
        private @Nullable Output<Boolean> inclusive;
        private @Nullable Output<VersionKind> kind;
        private @Nullable Output<String> name;
        private @Nullable Output<String> revision;

        public Builder() {
    	      // Empty
        }

        public Builder(VersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.epoch = defaults.epoch;
    	      this.inclusive = defaults.inclusive;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.revision = defaults.revision;
        }

        public Builder epoch(@Nullable Output<Integer> epoch) {
            this.epoch = epoch;
            return this;
        }
        public Builder epoch(@Nullable Integer epoch) {
            this.epoch = Output.ofNullable(epoch);
            return this;
        }
        public Builder inclusive(@Nullable Output<Boolean> inclusive) {
            this.inclusive = inclusive;
            return this;
        }
        public Builder inclusive(@Nullable Boolean inclusive) {
            this.inclusive = Output.ofNullable(inclusive);
            return this;
        }
        public Builder kind(@Nullable Output<VersionKind> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable VersionKind kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder revision(@Nullable Output<String> revision) {
            this.revision = revision;
            return this;
        }
        public Builder revision(@Nullable String revision) {
            this.revision = Output.ofNullable(revision);
            return this;
        }        public VersionArgs build() {
            return new VersionArgs(epoch, inclusive, kind, name, revision);
        }
    }
}
