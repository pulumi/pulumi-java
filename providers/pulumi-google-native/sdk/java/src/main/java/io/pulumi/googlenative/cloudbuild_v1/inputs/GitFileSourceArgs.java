// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.cloudbuild_v1.enums.GitFileSourceRepoType;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * GitFileSource describes a file within a (possibly remote) code repository.
 * 
 */
public final class GitFileSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final GitFileSourceArgs Empty = new GitFileSourceArgs();

    /**
     * The path of the file, with the repo root as the root of the path.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * See RepoType above.
     * 
     */
    @Import(name="repoType")
      private final @Nullable Output<GitFileSourceRepoType> repoType;

    public Output<GitFileSourceRepoType> getRepoType() {
        return this.repoType == null ? Output.empty() : this.repoType;
    }

    /**
     * The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
     * 
     */
    @Import(name="revision")
      private final @Nullable Output<String> revision;

    public Output<String> getRevision() {
        return this.revision == null ? Output.empty() : this.revision;
    }

    /**
     * The URI of the repo (optional). If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
     * 
     */
    @Import(name="uri")
      private final @Nullable Output<String> uri;

    public Output<String> getUri() {
        return this.uri == null ? Output.empty() : this.uri;
    }

    public GitFileSourceArgs(
        @Nullable Output<String> path,
        @Nullable Output<GitFileSourceRepoType> repoType,
        @Nullable Output<String> revision,
        @Nullable Output<String> uri) {
        this.path = path;
        this.repoType = repoType;
        this.revision = revision;
        this.uri = uri;
    }

    private GitFileSourceArgs() {
        this.path = Output.empty();
        this.repoType = Output.empty();
        this.revision = Output.empty();
        this.uri = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitFileSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> path;
        private @Nullable Output<GitFileSourceRepoType> repoType;
        private @Nullable Output<String> revision;
        private @Nullable Output<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(GitFileSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.path = defaults.path;
    	      this.repoType = defaults.repoType;
    	      this.revision = defaults.revision;
    	      this.uri = defaults.uri;
        }

        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }

        public Builder repoType(@Nullable Output<GitFileSourceRepoType> repoType) {
            this.repoType = repoType;
            return this;
        }

        public Builder repoType(@Nullable GitFileSourceRepoType repoType) {
            this.repoType = Output.ofNullable(repoType);
            return this;
        }

        public Builder revision(@Nullable Output<String> revision) {
            this.revision = revision;
            return this;
        }

        public Builder revision(@Nullable String revision) {
            this.revision = Output.ofNullable(revision);
            return this;
        }

        public Builder uri(@Nullable Output<String> uri) {
            this.uri = uri;
            return this;
        }

        public Builder uri(@Nullable String uri) {
            this.uri = Output.ofNullable(uri);
            return this;
        }
        public GitFileSourceArgs build() {
            return new GitFileSourceArgs(path, repoType, revision, uri);
        }
    }
}
