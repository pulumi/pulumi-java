// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storage_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.storage_v1.inputs.BucketAccessControlArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketAutoclassArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketBillingArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketCorsItemArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketCustomPlacementConfigArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketEncryptionArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketIamConfigurationArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketLifecycleArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketLoggingArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketOwnerArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketRetentionPolicyArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketVersioningArgs;
import io.pulumi.googlenative.storage_v1.inputs.BucketWebsiteArgs;
import io.pulumi.googlenative.storage_v1.inputs.ObjectAccessControlArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketArgs Empty = new BucketArgs();

    /**
     * Access controls on the bucket.
     * 
     */
    @InputImport(name="acl")
      private final @Nullable Input<List<BucketAccessControlArgs>> acl;

    public Input<List<BucketAccessControlArgs>> getAcl() {
        return this.acl == null ? Input.empty() : this.acl;
    }

    /**
     * The bucket's Autoclass configuration.
     * 
     */
    @InputImport(name="autoclass")
      private final @Nullable Input<BucketAutoclassArgs> autoclass;

    public Input<BucketAutoclassArgs> getAutoclass() {
        return this.autoclass == null ? Input.empty() : this.autoclass;
    }

    /**
     * The bucket's billing configuration.
     * 
     */
    @InputImport(name="billing")
      private final @Nullable Input<BucketBillingArgs> billing;

    public Input<BucketBillingArgs> getBilling() {
        return this.billing == null ? Input.empty() : this.billing;
    }

    /**
     * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
     * 
     */
    @InputImport(name="cors")
      private final @Nullable Input<List<BucketCorsItemArgs>> cors;

    public Input<List<BucketCorsItemArgs>> getCors() {
        return this.cors == null ? Input.empty() : this.cors;
    }

    /**
     * The bucket's custom placement configuration for Custom Dual Regions.
     * 
     */
    @InputImport(name="customPlacementConfig")
      private final @Nullable Input<BucketCustomPlacementConfigArgs> customPlacementConfig;

    public Input<BucketCustomPlacementConfigArgs> getCustomPlacementConfig() {
        return this.customPlacementConfig == null ? Input.empty() : this.customPlacementConfig;
    }

    /**
     * The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
     * 
     */
    @InputImport(name="defaultEventBasedHold")
      private final @Nullable Input<Boolean> defaultEventBasedHold;

    public Input<Boolean> getDefaultEventBasedHold() {
        return this.defaultEventBasedHold == null ? Input.empty() : this.defaultEventBasedHold;
    }

    /**
     * Default access controls to apply to new objects when no ACL is provided.
     * 
     */
    @InputImport(name="defaultObjectAcl")
      private final @Nullable Input<List<ObjectAccessControlArgs>> defaultObjectAcl;

    public Input<List<ObjectAccessControlArgs>> getDefaultObjectAcl() {
        return this.defaultObjectAcl == null ? Input.empty() : this.defaultObjectAcl;
    }

    /**
     * Encryption configuration for a bucket.
     * 
     */
    @InputImport(name="encryption")
      private final @Nullable Input<BucketEncryptionArgs> encryption;

    public Input<BucketEncryptionArgs> getEncryption() {
        return this.encryption == null ? Input.empty() : this.encryption;
    }

    /**
     * HTTP 1.1 Entity tag for the bucket.
     * 
     */
    @InputImport(name="etag")
      private final @Nullable Input<String> etag;

    public Input<String> getEtag() {
        return this.etag == null ? Input.empty() : this.etag;
    }

    /**
     * The bucket's IAM configuration.
     * 
     */
    @InputImport(name="iamConfiguration")
      private final @Nullable Input<BucketIamConfigurationArgs> iamConfiguration;

    public Input<BucketIamConfigurationArgs> getIamConfiguration() {
        return this.iamConfiguration == null ? Input.empty() : this.iamConfiguration;
    }

    /**
     * The ID of the bucket. For buckets, the id and name properties are the same.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    /**
     * The kind of item this is. For buckets, this is always storage#bucket.
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * User-provided labels, in key/value pairs.
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The bucket's lifecycle configuration. See lifecycle management for more information.
     * 
     */
    @InputImport(name="lifecycle")
      private final @Nullable Input<BucketLifecycleArgs> lifecycle;

    public Input<BucketLifecycleArgs> getLifecycle() {
        return this.lifecycle == null ? Input.empty() : this.lifecycle;
    }

    /**
     * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The type of the bucket location.
     * 
     */
    @InputImport(name="locationType")
      private final @Nullable Input<String> locationType;

    public Input<String> getLocationType() {
        return this.locationType == null ? Input.empty() : this.locationType;
    }

    /**
     * The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
     * 
     */
    @InputImport(name="logging")
      private final @Nullable Input<BucketLoggingArgs> logging;

    public Input<BucketLoggingArgs> getLogging() {
        return this.logging == null ? Input.empty() : this.logging;
    }

    /**
     * The metadata generation of this bucket.
     * 
     */
    @InputImport(name="metageneration")
      private final @Nullable Input<String> metageneration;

    public Input<String> getMetageneration() {
        return this.metageneration == null ? Input.empty() : this.metageneration;
    }

    /**
     * The name of the bucket.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The owner of the bucket. This is always the project team's owner group.
     * 
     */
    @InputImport(name="owner")
      private final @Nullable Input<BucketOwnerArgs> owner;

    public Input<BucketOwnerArgs> getOwner() {
        return this.owner == null ? Input.empty() : this.owner;
    }

    @InputImport(name="predefinedAcl")
      private final @Nullable Input<String> predefinedAcl;

    public Input<String> getPredefinedAcl() {
        return this.predefinedAcl == null ? Input.empty() : this.predefinedAcl;
    }

    @InputImport(name="predefinedDefaultObjectAcl")
      private final @Nullable Input<String> predefinedDefaultObjectAcl;

    public Input<String> getPredefinedDefaultObjectAcl() {
        return this.predefinedDefaultObjectAcl == null ? Input.empty() : this.predefinedDefaultObjectAcl;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The project number of the project the bucket belongs to.
     * 
     */
    @InputImport(name="projectNumber")
      private final @Nullable Input<String> projectNumber;

    public Input<String> getProjectNumber() {
        return this.projectNumber == null ? Input.empty() : this.projectNumber;
    }

    @InputImport(name="projection")
      private final @Nullable Input<String> projection;

    public Input<String> getProjection() {
        return this.projection == null ? Input.empty() : this.projection;
    }

    @InputImport(name="provisionalUserProject")
      private final @Nullable Input<String> provisionalUserProject;

    public Input<String> getProvisionalUserProject() {
        return this.provisionalUserProject == null ? Input.empty() : this.provisionalUserProject;
    }

    /**
     * The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     * 
     */
    @InputImport(name="retentionPolicy")
      private final @Nullable Input<BucketRetentionPolicyArgs> retentionPolicy;

    public Input<BucketRetentionPolicyArgs> getRetentionPolicy() {
        return this.retentionPolicy == null ? Input.empty() : this.retentionPolicy;
    }

    /**
     * The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
     * 
     */
    @InputImport(name="rpo")
      private final @Nullable Input<String> rpo;

    public Input<String> getRpo() {
        return this.rpo == null ? Input.empty() : this.rpo;
    }

    /**
     * Reserved for future use.
     * 
     */
    @InputImport(name="satisfiesPZS")
      private final @Nullable Input<Boolean> satisfiesPZS;

    public Input<Boolean> getSatisfiesPZS() {
        return this.satisfiesPZS == null ? Input.empty() : this.satisfiesPZS;
    }

    /**
     * The URI of this bucket.
     * 
     */
    @InputImport(name="selfLink")
      private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    /**
     * The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
     * 
     */
    @InputImport(name="storageClass")
      private final @Nullable Input<String> storageClass;

    public Input<String> getStorageClass() {
        return this.storageClass == null ? Input.empty() : this.storageClass;
    }

    /**
     * The creation time of the bucket in RFC 3339 format.
     * 
     */
    @InputImport(name="timeCreated")
      private final @Nullable Input<String> timeCreated;

    public Input<String> getTimeCreated() {
        return this.timeCreated == null ? Input.empty() : this.timeCreated;
    }

    /**
     * The modification time of the bucket in RFC 3339 format.
     * 
     */
    @InputImport(name="updated")
      private final @Nullable Input<String> updated;

    public Input<String> getUpdated() {
        return this.updated == null ? Input.empty() : this.updated;
    }

    @InputImport(name="userProject")
      private final @Nullable Input<String> userProject;

    public Input<String> getUserProject() {
        return this.userProject == null ? Input.empty() : this.userProject;
    }

    /**
     * The bucket's versioning configuration.
     * 
     */
    @InputImport(name="versioning")
      private final @Nullable Input<BucketVersioningArgs> versioning;

    public Input<BucketVersioningArgs> getVersioning() {
        return this.versioning == null ? Input.empty() : this.versioning;
    }

    /**
     * The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
     * 
     */
    @InputImport(name="website")
      private final @Nullable Input<BucketWebsiteArgs> website;

    public Input<BucketWebsiteArgs> getWebsite() {
        return this.website == null ? Input.empty() : this.website;
    }

    public BucketArgs(
        @Nullable Input<List<BucketAccessControlArgs>> acl,
        @Nullable Input<BucketAutoclassArgs> autoclass,
        @Nullable Input<BucketBillingArgs> billing,
        @Nullable Input<List<BucketCorsItemArgs>> cors,
        @Nullable Input<BucketCustomPlacementConfigArgs> customPlacementConfig,
        @Nullable Input<Boolean> defaultEventBasedHold,
        @Nullable Input<List<ObjectAccessControlArgs>> defaultObjectAcl,
        @Nullable Input<BucketEncryptionArgs> encryption,
        @Nullable Input<String> etag,
        @Nullable Input<BucketIamConfigurationArgs> iamConfiguration,
        @Nullable Input<String> id,
        @Nullable Input<String> kind,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<BucketLifecycleArgs> lifecycle,
        @Nullable Input<String> location,
        @Nullable Input<String> locationType,
        @Nullable Input<BucketLoggingArgs> logging,
        @Nullable Input<String> metageneration,
        @Nullable Input<String> name,
        @Nullable Input<BucketOwnerArgs> owner,
        @Nullable Input<String> predefinedAcl,
        @Nullable Input<String> predefinedDefaultObjectAcl,
        @Nullable Input<String> project,
        @Nullable Input<String> projectNumber,
        @Nullable Input<String> projection,
        @Nullable Input<String> provisionalUserProject,
        @Nullable Input<BucketRetentionPolicyArgs> retentionPolicy,
        @Nullable Input<String> rpo,
        @Nullable Input<Boolean> satisfiesPZS,
        @Nullable Input<String> selfLink,
        @Nullable Input<String> storageClass,
        @Nullable Input<String> timeCreated,
        @Nullable Input<String> updated,
        @Nullable Input<String> userProject,
        @Nullable Input<BucketVersioningArgs> versioning,
        @Nullable Input<BucketWebsiteArgs> website) {
        this.acl = acl;
        this.autoclass = autoclass;
        this.billing = billing;
        this.cors = cors;
        this.customPlacementConfig = customPlacementConfig;
        this.defaultEventBasedHold = defaultEventBasedHold;
        this.defaultObjectAcl = defaultObjectAcl;
        this.encryption = encryption;
        this.etag = etag;
        this.iamConfiguration = iamConfiguration;
        this.id = id;
        this.kind = kind;
        this.labels = labels;
        this.lifecycle = lifecycle;
        this.location = location;
        this.locationType = locationType;
        this.logging = logging;
        this.metageneration = metageneration;
        this.name = name;
        this.owner = owner;
        this.predefinedAcl = predefinedAcl;
        this.predefinedDefaultObjectAcl = predefinedDefaultObjectAcl;
        this.project = project;
        this.projectNumber = projectNumber;
        this.projection = projection;
        this.provisionalUserProject = provisionalUserProject;
        this.retentionPolicy = retentionPolicy;
        this.rpo = rpo;
        this.satisfiesPZS = satisfiesPZS;
        this.selfLink = selfLink;
        this.storageClass = storageClass;
        this.timeCreated = timeCreated;
        this.updated = updated;
        this.userProject = userProject;
        this.versioning = versioning;
        this.website = website;
    }

    private BucketArgs() {
        this.acl = Input.empty();
        this.autoclass = Input.empty();
        this.billing = Input.empty();
        this.cors = Input.empty();
        this.customPlacementConfig = Input.empty();
        this.defaultEventBasedHold = Input.empty();
        this.defaultObjectAcl = Input.empty();
        this.encryption = Input.empty();
        this.etag = Input.empty();
        this.iamConfiguration = Input.empty();
        this.id = Input.empty();
        this.kind = Input.empty();
        this.labels = Input.empty();
        this.lifecycle = Input.empty();
        this.location = Input.empty();
        this.locationType = Input.empty();
        this.logging = Input.empty();
        this.metageneration = Input.empty();
        this.name = Input.empty();
        this.owner = Input.empty();
        this.predefinedAcl = Input.empty();
        this.predefinedDefaultObjectAcl = Input.empty();
        this.project = Input.empty();
        this.projectNumber = Input.empty();
        this.projection = Input.empty();
        this.provisionalUserProject = Input.empty();
        this.retentionPolicy = Input.empty();
        this.rpo = Input.empty();
        this.satisfiesPZS = Input.empty();
        this.selfLink = Input.empty();
        this.storageClass = Input.empty();
        this.timeCreated = Input.empty();
        this.updated = Input.empty();
        this.userProject = Input.empty();
        this.versioning = Input.empty();
        this.website = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<BucketAccessControlArgs>> acl;
        private @Nullable Input<BucketAutoclassArgs> autoclass;
        private @Nullable Input<BucketBillingArgs> billing;
        private @Nullable Input<List<BucketCorsItemArgs>> cors;
        private @Nullable Input<BucketCustomPlacementConfigArgs> customPlacementConfig;
        private @Nullable Input<Boolean> defaultEventBasedHold;
        private @Nullable Input<List<ObjectAccessControlArgs>> defaultObjectAcl;
        private @Nullable Input<BucketEncryptionArgs> encryption;
        private @Nullable Input<String> etag;
        private @Nullable Input<BucketIamConfigurationArgs> iamConfiguration;
        private @Nullable Input<String> id;
        private @Nullable Input<String> kind;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<BucketLifecycleArgs> lifecycle;
        private @Nullable Input<String> location;
        private @Nullable Input<String> locationType;
        private @Nullable Input<BucketLoggingArgs> logging;
        private @Nullable Input<String> metageneration;
        private @Nullable Input<String> name;
        private @Nullable Input<BucketOwnerArgs> owner;
        private @Nullable Input<String> predefinedAcl;
        private @Nullable Input<String> predefinedDefaultObjectAcl;
        private @Nullable Input<String> project;
        private @Nullable Input<String> projectNumber;
        private @Nullable Input<String> projection;
        private @Nullable Input<String> provisionalUserProject;
        private @Nullable Input<BucketRetentionPolicyArgs> retentionPolicy;
        private @Nullable Input<String> rpo;
        private @Nullable Input<Boolean> satisfiesPZS;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<String> storageClass;
        private @Nullable Input<String> timeCreated;
        private @Nullable Input<String> updated;
        private @Nullable Input<String> userProject;
        private @Nullable Input<BucketVersioningArgs> versioning;
        private @Nullable Input<BucketWebsiteArgs> website;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.autoclass = defaults.autoclass;
    	      this.billing = defaults.billing;
    	      this.cors = defaults.cors;
    	      this.customPlacementConfig = defaults.customPlacementConfig;
    	      this.defaultEventBasedHold = defaults.defaultEventBasedHold;
    	      this.defaultObjectAcl = defaults.defaultObjectAcl;
    	      this.encryption = defaults.encryption;
    	      this.etag = defaults.etag;
    	      this.iamConfiguration = defaults.iamConfiguration;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.labels = defaults.labels;
    	      this.lifecycle = defaults.lifecycle;
    	      this.location = defaults.location;
    	      this.locationType = defaults.locationType;
    	      this.logging = defaults.logging;
    	      this.metageneration = defaults.metageneration;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.predefinedAcl = defaults.predefinedAcl;
    	      this.predefinedDefaultObjectAcl = defaults.predefinedDefaultObjectAcl;
    	      this.project = defaults.project;
    	      this.projectNumber = defaults.projectNumber;
    	      this.projection = defaults.projection;
    	      this.provisionalUserProject = defaults.provisionalUserProject;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.rpo = defaults.rpo;
    	      this.satisfiesPZS = defaults.satisfiesPZS;
    	      this.selfLink = defaults.selfLink;
    	      this.storageClass = defaults.storageClass;
    	      this.timeCreated = defaults.timeCreated;
    	      this.updated = defaults.updated;
    	      this.userProject = defaults.userProject;
    	      this.versioning = defaults.versioning;
    	      this.website = defaults.website;
        }

        public Builder setAcl(@Nullable Input<List<BucketAccessControlArgs>> acl) {
            this.acl = acl;
            return this;
        }

        public Builder setAcl(@Nullable List<BucketAccessControlArgs> acl) {
            this.acl = Input.ofNullable(acl);
            return this;
        }

        public Builder setAutoclass(@Nullable Input<BucketAutoclassArgs> autoclass) {
            this.autoclass = autoclass;
            return this;
        }

        public Builder setAutoclass(@Nullable BucketAutoclassArgs autoclass) {
            this.autoclass = Input.ofNullable(autoclass);
            return this;
        }

        public Builder setBilling(@Nullable Input<BucketBillingArgs> billing) {
            this.billing = billing;
            return this;
        }

        public Builder setBilling(@Nullable BucketBillingArgs billing) {
            this.billing = Input.ofNullable(billing);
            return this;
        }

        public Builder setCors(@Nullable Input<List<BucketCorsItemArgs>> cors) {
            this.cors = cors;
            return this;
        }

        public Builder setCors(@Nullable List<BucketCorsItemArgs> cors) {
            this.cors = Input.ofNullable(cors);
            return this;
        }

        public Builder setCustomPlacementConfig(@Nullable Input<BucketCustomPlacementConfigArgs> customPlacementConfig) {
            this.customPlacementConfig = customPlacementConfig;
            return this;
        }

        public Builder setCustomPlacementConfig(@Nullable BucketCustomPlacementConfigArgs customPlacementConfig) {
            this.customPlacementConfig = Input.ofNullable(customPlacementConfig);
            return this;
        }

        public Builder setDefaultEventBasedHold(@Nullable Input<Boolean> defaultEventBasedHold) {
            this.defaultEventBasedHold = defaultEventBasedHold;
            return this;
        }

        public Builder setDefaultEventBasedHold(@Nullable Boolean defaultEventBasedHold) {
            this.defaultEventBasedHold = Input.ofNullable(defaultEventBasedHold);
            return this;
        }

        public Builder setDefaultObjectAcl(@Nullable Input<List<ObjectAccessControlArgs>> defaultObjectAcl) {
            this.defaultObjectAcl = defaultObjectAcl;
            return this;
        }

        public Builder setDefaultObjectAcl(@Nullable List<ObjectAccessControlArgs> defaultObjectAcl) {
            this.defaultObjectAcl = Input.ofNullable(defaultObjectAcl);
            return this;
        }

        public Builder setEncryption(@Nullable Input<BucketEncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }

        public Builder setEncryption(@Nullable BucketEncryptionArgs encryption) {
            this.encryption = Input.ofNullable(encryption);
            return this;
        }

        public Builder setEtag(@Nullable Input<String> etag) {
            this.etag = etag;
            return this;
        }

        public Builder setEtag(@Nullable String etag) {
            this.etag = Input.ofNullable(etag);
            return this;
        }

        public Builder setIamConfiguration(@Nullable Input<BucketIamConfigurationArgs> iamConfiguration) {
            this.iamConfiguration = iamConfiguration;
            return this;
        }

        public Builder setIamConfiguration(@Nullable BucketIamConfigurationArgs iamConfiguration) {
            this.iamConfiguration = Input.ofNullable(iamConfiguration);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setKind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLifecycle(@Nullable Input<BucketLifecycleArgs> lifecycle) {
            this.lifecycle = lifecycle;
            return this;
        }

        public Builder setLifecycle(@Nullable BucketLifecycleArgs lifecycle) {
            this.lifecycle = Input.ofNullable(lifecycle);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setLocationType(@Nullable Input<String> locationType) {
            this.locationType = locationType;
            return this;
        }

        public Builder setLocationType(@Nullable String locationType) {
            this.locationType = Input.ofNullable(locationType);
            return this;
        }

        public Builder setLogging(@Nullable Input<BucketLoggingArgs> logging) {
            this.logging = logging;
            return this;
        }

        public Builder setLogging(@Nullable BucketLoggingArgs logging) {
            this.logging = Input.ofNullable(logging);
            return this;
        }

        public Builder setMetageneration(@Nullable Input<String> metageneration) {
            this.metageneration = metageneration;
            return this;
        }

        public Builder setMetageneration(@Nullable String metageneration) {
            this.metageneration = Input.ofNullable(metageneration);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOwner(@Nullable Input<BucketOwnerArgs> owner) {
            this.owner = owner;
            return this;
        }

        public Builder setOwner(@Nullable BucketOwnerArgs owner) {
            this.owner = Input.ofNullable(owner);
            return this;
        }

        public Builder setPredefinedAcl(@Nullable Input<String> predefinedAcl) {
            this.predefinedAcl = predefinedAcl;
            return this;
        }

        public Builder setPredefinedAcl(@Nullable String predefinedAcl) {
            this.predefinedAcl = Input.ofNullable(predefinedAcl);
            return this;
        }

        public Builder setPredefinedDefaultObjectAcl(@Nullable Input<String> predefinedDefaultObjectAcl) {
            this.predefinedDefaultObjectAcl = predefinedDefaultObjectAcl;
            return this;
        }

        public Builder setPredefinedDefaultObjectAcl(@Nullable String predefinedDefaultObjectAcl) {
            this.predefinedDefaultObjectAcl = Input.ofNullable(predefinedDefaultObjectAcl);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setProjectNumber(@Nullable Input<String> projectNumber) {
            this.projectNumber = projectNumber;
            return this;
        }

        public Builder setProjectNumber(@Nullable String projectNumber) {
            this.projectNumber = Input.ofNullable(projectNumber);
            return this;
        }

        public Builder setProjection(@Nullable Input<String> projection) {
            this.projection = projection;
            return this;
        }

        public Builder setProjection(@Nullable String projection) {
            this.projection = Input.ofNullable(projection);
            return this;
        }

        public Builder setProvisionalUserProject(@Nullable Input<String> provisionalUserProject) {
            this.provisionalUserProject = provisionalUserProject;
            return this;
        }

        public Builder setProvisionalUserProject(@Nullable String provisionalUserProject) {
            this.provisionalUserProject = Input.ofNullable(provisionalUserProject);
            return this;
        }

        public Builder setRetentionPolicy(@Nullable Input<BucketRetentionPolicyArgs> retentionPolicy) {
            this.retentionPolicy = retentionPolicy;
            return this;
        }

        public Builder setRetentionPolicy(@Nullable BucketRetentionPolicyArgs retentionPolicy) {
            this.retentionPolicy = Input.ofNullable(retentionPolicy);
            return this;
        }

        public Builder setRpo(@Nullable Input<String> rpo) {
            this.rpo = rpo;
            return this;
        }

        public Builder setRpo(@Nullable String rpo) {
            this.rpo = Input.ofNullable(rpo);
            return this;
        }

        public Builder setSatisfiesPZS(@Nullable Input<Boolean> satisfiesPZS) {
            this.satisfiesPZS = satisfiesPZS;
            return this;
        }

        public Builder setSatisfiesPZS(@Nullable Boolean satisfiesPZS) {
            this.satisfiesPZS = Input.ofNullable(satisfiesPZS);
            return this;
        }

        public Builder setSelfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder setSelfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder setStorageClass(@Nullable Input<String> storageClass) {
            this.storageClass = storageClass;
            return this;
        }

        public Builder setStorageClass(@Nullable String storageClass) {
            this.storageClass = Input.ofNullable(storageClass);
            return this;
        }

        public Builder setTimeCreated(@Nullable Input<String> timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }

        public Builder setTimeCreated(@Nullable String timeCreated) {
            this.timeCreated = Input.ofNullable(timeCreated);
            return this;
        }

        public Builder setUpdated(@Nullable Input<String> updated) {
            this.updated = updated;
            return this;
        }

        public Builder setUpdated(@Nullable String updated) {
            this.updated = Input.ofNullable(updated);
            return this;
        }

        public Builder setUserProject(@Nullable Input<String> userProject) {
            this.userProject = userProject;
            return this;
        }

        public Builder setUserProject(@Nullable String userProject) {
            this.userProject = Input.ofNullable(userProject);
            return this;
        }

        public Builder setVersioning(@Nullable Input<BucketVersioningArgs> versioning) {
            this.versioning = versioning;
            return this;
        }

        public Builder setVersioning(@Nullable BucketVersioningArgs versioning) {
            this.versioning = Input.ofNullable(versioning);
            return this;
        }

        public Builder setWebsite(@Nullable Input<BucketWebsiteArgs> website) {
            this.website = website;
            return this;
        }

        public Builder setWebsite(@Nullable BucketWebsiteArgs website) {
            this.website = Input.ofNullable(website);
            return this;
        }
        public BucketArgs build() {
            return new BucketArgs(acl, autoclass, billing, cors, customPlacementConfig, defaultEventBasedHold, defaultObjectAcl, encryption, etag, iamConfiguration, id, kind, labels, lifecycle, location, locationType, logging, metageneration, name, owner, predefinedAcl, predefinedDefaultObjectAcl, project, projectNumber, projection, provisionalUserProject, retentionPolicy, rpo, satisfiesPZS, selfLink, storageClass, timeCreated, updated, userProject, versioning, website);
        }
    }
}
