// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_alpha.enums.NetworkInterfaceSubInterfaceIpAllocationMode;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkInterfaceSubInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceSubInterfaceArgs Empty = new NetworkInterfaceSubInterfaceArgs();

    /**
     * An IPv4 internal IP address to assign to the instance for this subinterface. If specified, ip_allocation_mode should be set to ALLOCATE_IP.
     * 
     */
    @InputImport(name="ipAddress")
      private final @Nullable Input<String> ipAddress;

    public Input<String> getIpAddress() {
        return this.ipAddress == null ? Input.empty() : this.ipAddress;
    }

    @InputImport(name="ipAllocationMode")
      private final @Nullable Input<NetworkInterfaceSubInterfaceIpAllocationMode> ipAllocationMode;

    public Input<NetworkInterfaceSubInterfaceIpAllocationMode> getIpAllocationMode() {
        return this.ipAllocationMode == null ? Input.empty() : this.ipAllocationMode;
    }

    /**
     * If specified, this subnetwork must belong to the same network as that of the network interface. If not specified the subnet of network interface will be used. If you specify this property, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
     * 
     */
    @InputImport(name="subnetwork")
      private final @Nullable Input<String> subnetwork;

    public Input<String> getSubnetwork() {
        return this.subnetwork == null ? Input.empty() : this.subnetwork;
    }

    /**
     * VLAN tag. Should match the VLAN(s) supported by the subnetwork to which this subinterface is connecting.
     * 
     */
    @InputImport(name="vlan")
      private final @Nullable Input<Integer> vlan;

    public Input<Integer> getVlan() {
        return this.vlan == null ? Input.empty() : this.vlan;
    }

    public NetworkInterfaceSubInterfaceArgs(
        @Nullable Input<String> ipAddress,
        @Nullable Input<NetworkInterfaceSubInterfaceIpAllocationMode> ipAllocationMode,
        @Nullable Input<String> subnetwork,
        @Nullable Input<Integer> vlan) {
        this.ipAddress = ipAddress;
        this.ipAllocationMode = ipAllocationMode;
        this.subnetwork = subnetwork;
        this.vlan = vlan;
    }

    private NetworkInterfaceSubInterfaceArgs() {
        this.ipAddress = Input.empty();
        this.ipAllocationMode = Input.empty();
        this.subnetwork = Input.empty();
        this.vlan = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceSubInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> ipAddress;
        private @Nullable Input<NetworkInterfaceSubInterfaceIpAllocationMode> ipAllocationMode;
        private @Nullable Input<String> subnetwork;
        private @Nullable Input<Integer> vlan;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceSubInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipAllocationMode = defaults.ipAllocationMode;
    	      this.subnetwork = defaults.subnetwork;
    	      this.vlan = defaults.vlan;
        }

        public Builder setIpAddress(@Nullable Input<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder setIpAddress(@Nullable String ipAddress) {
            this.ipAddress = Input.ofNullable(ipAddress);
            return this;
        }

        public Builder setIpAllocationMode(@Nullable Input<NetworkInterfaceSubInterfaceIpAllocationMode> ipAllocationMode) {
            this.ipAllocationMode = ipAllocationMode;
            return this;
        }

        public Builder setIpAllocationMode(@Nullable NetworkInterfaceSubInterfaceIpAllocationMode ipAllocationMode) {
            this.ipAllocationMode = Input.ofNullable(ipAllocationMode);
            return this;
        }

        public Builder setSubnetwork(@Nullable Input<String> subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }

        public Builder setSubnetwork(@Nullable String subnetwork) {
            this.subnetwork = Input.ofNullable(subnetwork);
            return this;
        }

        public Builder setVlan(@Nullable Input<Integer> vlan) {
            this.vlan = vlan;
            return this;
        }

        public Builder setVlan(@Nullable Integer vlan) {
            this.vlan = Input.ofNullable(vlan);
            return this;
        }
        public NetworkInterfaceSubInterfaceArgs build() {
            return new NetworkInterfaceSubInterfaceArgs(ipAddress, ipAllocationMode, subnetwork, vlan);
        }
    }
}
