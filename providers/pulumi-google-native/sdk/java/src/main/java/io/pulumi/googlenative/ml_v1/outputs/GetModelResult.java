// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ml_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.ml_v1.outputs.GoogleCloudMlV1__VersionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetModelResult {
    /**
     * The default version of the model. This version will be used to handle prediction requests that do not specify a version. You can change the default version by calling projects.models.versions.setDefault.
     * 
     */
    private final GoogleCloudMlV1__VersionResponse defaultVersion;
    /**
     * Optional. The description specified for the model when it was created.
     * 
     */
    private final String description;
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.
     * 
     */
    private final String etag;
    /**
     * Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The name specified for the model when it was created. The model name must be unique within the project it is created in.
     * 
     */
    private final String name;
    /**
     * Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.
     * 
     */
    private final Boolean onlinePredictionConsoleLogging;
    /**
     * Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.
     * 
     */
    private final Boolean onlinePredictionLogging;
    /**
     * Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.
     * 
     */
    private final List<String> regions;

    @OutputCustomType.Constructor({"defaultVersion","description","etag","labels","name","onlinePredictionConsoleLogging","onlinePredictionLogging","regions"})
    private GetModelResult(
        GoogleCloudMlV1__VersionResponse defaultVersion,
        String description,
        String etag,
        Map<String,String> labels,
        String name,
        Boolean onlinePredictionConsoleLogging,
        Boolean onlinePredictionLogging,
        List<String> regions) {
        this.defaultVersion = Objects.requireNonNull(defaultVersion);
        this.description = Objects.requireNonNull(description);
        this.etag = Objects.requireNonNull(etag);
        this.labels = Objects.requireNonNull(labels);
        this.name = Objects.requireNonNull(name);
        this.onlinePredictionConsoleLogging = Objects.requireNonNull(onlinePredictionConsoleLogging);
        this.onlinePredictionLogging = Objects.requireNonNull(onlinePredictionLogging);
        this.regions = Objects.requireNonNull(regions);
    }

    /**
     * The default version of the model. This version will be used to handle prediction requests that do not specify a version. You can change the default version by calling projects.models.versions.setDefault.
     * 
    */
    public GoogleCloudMlV1__VersionResponse getDefaultVersion() {
        return this.defaultVersion;
    }
    /**
     * Optional. The description specified for the model when it was created.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.
     * 
    */
    public String getEtag() {
        return this.etag;
    }
    /**
     * Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.
     * 
    */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The name specified for the model when it was created. The model name must be unique within the project it is created in.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.
     * 
    */
    public Boolean getOnlinePredictionConsoleLogging() {
        return this.onlinePredictionConsoleLogging;
    }
    /**
     * Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.
     * 
    */
    public Boolean getOnlinePredictionLogging() {
        return this.onlinePredictionLogging;
    }
    /**
     * Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.
     * 
    */
    public List<String> getRegions() {
        return this.regions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleCloudMlV1__VersionResponse defaultVersion;
        private String description;
        private String etag;
        private Map<String,String> labels;
        private String name;
        private Boolean onlinePredictionConsoleLogging;
        private Boolean onlinePredictionLogging;
        private List<String> regions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetModelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultVersion = defaults.defaultVersion;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.onlinePredictionConsoleLogging = defaults.onlinePredictionConsoleLogging;
    	      this.onlinePredictionLogging = defaults.onlinePredictionLogging;
    	      this.regions = defaults.regions;
        }

        public Builder setDefaultVersion(GoogleCloudMlV1__VersionResponse defaultVersion) {
            this.defaultVersion = Objects.requireNonNull(defaultVersion);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setOnlinePredictionConsoleLogging(Boolean onlinePredictionConsoleLogging) {
            this.onlinePredictionConsoleLogging = Objects.requireNonNull(onlinePredictionConsoleLogging);
            return this;
        }

        public Builder setOnlinePredictionLogging(Boolean onlinePredictionLogging) {
            this.onlinePredictionLogging = Objects.requireNonNull(onlinePredictionLogging);
            return this;
        }

        public Builder setRegions(List<String> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }
        public GetModelResult build() {
            return new GetModelResult(defaultVersion, description, etag, labels, name, onlinePredictionConsoleLogging, onlinePredictionLogging, regions);
        }
    }
}
