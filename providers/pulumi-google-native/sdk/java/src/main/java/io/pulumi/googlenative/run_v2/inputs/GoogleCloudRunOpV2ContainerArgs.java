// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2ContainerPortArgs;
import io.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2EnvVarArgs;
import io.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2ResourceRequirementsArgs;
import io.pulumi.googlenative.run_v2.inputs.GoogleCloudRunOpV2VolumeMountArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 * 
 */
public final class GoogleCloudRunOpV2ContainerArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudRunOpV2ContainerArgs Empty = new GoogleCloudRunOpV2ContainerArgs();

    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @InputImport(name="args")
    private final @Nullable Input<List<String>> args;

    public Input<List<String>> getArgs() {
        return this.args == null ? Input.empty() : this.args;
    }

    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @InputImport(name="command")
    private final @Nullable Input<List<String>> command;

    public Input<List<String>> getCommand() {
        return this.command == null ? Input.empty() : this.command;
    }

    /**
     * List of environment variables to set in the container.
     * 
     */
    @InputImport(name="env")
    private final @Nullable Input<List<GoogleCloudRunOpV2EnvVarArgs>> env;

    public Input<List<GoogleCloudRunOpV2EnvVarArgs>> getEnv() {
        return this.env == null ? Input.empty() : this.env;
    }

    /**
     * URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    @InputImport(name="image", required=true)
    private final Input<String> image;

    public Input<String> getImage() {
        return this.image;
    }

    /**
     * Name of the container specified as a DNS_LABEL.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     * 
     */
    @InputImport(name="ports")
    private final @Nullable Input<List<GoogleCloudRunOpV2ContainerPortArgs>> ports;

    public Input<List<GoogleCloudRunOpV2ContainerPortArgs>> getPorts() {
        return this.ports == null ? Input.empty() : this.ports;
    }

    /**
     * Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * 
     */
    @InputImport(name="resources")
    private final @Nullable Input<GoogleCloudRunOpV2ResourceRequirementsArgs> resources;

    public Input<GoogleCloudRunOpV2ResourceRequirementsArgs> getResources() {
        return this.resources == null ? Input.empty() : this.resources;
    }

    /**
     * Volume to mount into the container's filesystem.
     * 
     */
    @InputImport(name="volumeMounts")
    private final @Nullable Input<List<GoogleCloudRunOpV2VolumeMountArgs>> volumeMounts;

    public Input<List<GoogleCloudRunOpV2VolumeMountArgs>> getVolumeMounts() {
        return this.volumeMounts == null ? Input.empty() : this.volumeMounts;
    }

    public GoogleCloudRunOpV2ContainerArgs(
        @Nullable Input<List<String>> args,
        @Nullable Input<List<String>> command,
        @Nullable Input<List<GoogleCloudRunOpV2EnvVarArgs>> env,
        Input<String> image,
        @Nullable Input<String> name,
        @Nullable Input<List<GoogleCloudRunOpV2ContainerPortArgs>> ports,
        @Nullable Input<GoogleCloudRunOpV2ResourceRequirementsArgs> resources,
        @Nullable Input<List<GoogleCloudRunOpV2VolumeMountArgs>> volumeMounts) {
        this.args = args;
        this.command = command;
        this.env = env;
        this.image = Objects.requireNonNull(image, "expected parameter 'image' to be non-null");
        this.name = name;
        this.ports = ports;
        this.resources = resources;
        this.volumeMounts = volumeMounts;
    }

    private GoogleCloudRunOpV2ContainerArgs() {
        this.args = Input.empty();
        this.command = Input.empty();
        this.env = Input.empty();
        this.image = Input.empty();
        this.name = Input.empty();
        this.ports = Input.empty();
        this.resources = Input.empty();
        this.volumeMounts = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRunOpV2ContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> args;
        private @Nullable Input<List<String>> command;
        private @Nullable Input<List<GoogleCloudRunOpV2EnvVarArgs>> env;
        private Input<String> image;
        private @Nullable Input<String> name;
        private @Nullable Input<List<GoogleCloudRunOpV2ContainerPortArgs>> ports;
        private @Nullable Input<GoogleCloudRunOpV2ResourceRequirementsArgs> resources;
        private @Nullable Input<List<GoogleCloudRunOpV2VolumeMountArgs>> volumeMounts;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRunOpV2ContainerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.command = defaults.command;
    	      this.env = defaults.env;
    	      this.image = defaults.image;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.resources = defaults.resources;
    	      this.volumeMounts = defaults.volumeMounts;
        }

        public Builder setArgs(@Nullable Input<List<String>> args) {
            this.args = args;
            return this;
        }

        public Builder setArgs(@Nullable List<String> args) {
            this.args = Input.ofNullable(args);
            return this;
        }

        public Builder setCommand(@Nullable Input<List<String>> command) {
            this.command = command;
            return this;
        }

        public Builder setCommand(@Nullable List<String> command) {
            this.command = Input.ofNullable(command);
            return this;
        }

        public Builder setEnv(@Nullable Input<List<GoogleCloudRunOpV2EnvVarArgs>> env) {
            this.env = env;
            return this;
        }

        public Builder setEnv(@Nullable List<GoogleCloudRunOpV2EnvVarArgs> env) {
            this.env = Input.ofNullable(env);
            return this;
        }

        public Builder setImage(Input<String> image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }

        public Builder setImage(String image) {
            this.image = Input.of(Objects.requireNonNull(image));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPorts(@Nullable Input<List<GoogleCloudRunOpV2ContainerPortArgs>> ports) {
            this.ports = ports;
            return this;
        }

        public Builder setPorts(@Nullable List<GoogleCloudRunOpV2ContainerPortArgs> ports) {
            this.ports = Input.ofNullable(ports);
            return this;
        }

        public Builder setResources(@Nullable Input<GoogleCloudRunOpV2ResourceRequirementsArgs> resources) {
            this.resources = resources;
            return this;
        }

        public Builder setResources(@Nullable GoogleCloudRunOpV2ResourceRequirementsArgs resources) {
            this.resources = Input.ofNullable(resources);
            return this;
        }

        public Builder setVolumeMounts(@Nullable Input<List<GoogleCloudRunOpV2VolumeMountArgs>> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }

        public Builder setVolumeMounts(@Nullable List<GoogleCloudRunOpV2VolumeMountArgs> volumeMounts) {
            this.volumeMounts = Input.ofNullable(volumeMounts);
            return this;
        }

        public GoogleCloudRunOpV2ContainerArgs build() {
            return new GoogleCloudRunOpV2ContainerArgs(args, command, env, image, name, ports, resources, volumeMounts);
        }
    }
}
