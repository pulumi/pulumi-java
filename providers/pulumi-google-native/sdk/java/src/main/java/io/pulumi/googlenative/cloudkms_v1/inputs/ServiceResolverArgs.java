// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudkms_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudkms_v1.inputs.CertificateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceResolverArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceResolverArgs Empty = new ServiceResolverArgs();

    @InputImport(name="endpointFilter")
    private final @Nullable Input<String> endpointFilter;

    public Input<String> getEndpointFilter() {
        return this.endpointFilter == null ? Input.empty() : this.endpointFilter;
    }

    @InputImport(name="hostname", required=true)
    private final Input<String> hostname;

    public Input<String> getHostname() {
        return this.hostname;
    }

    @InputImport(name="serverCertificates", required=true)
    private final Input<List<CertificateArgs>> serverCertificates;

    public Input<List<CertificateArgs>> getServerCertificates() {
        return this.serverCertificates;
    }

    @InputImport(name="serviceDirectoryService", required=true)
    private final Input<String> serviceDirectoryService;

    public Input<String> getServiceDirectoryService() {
        return this.serviceDirectoryService;
    }

    public ServiceResolverArgs(
        @Nullable Input<String> endpointFilter,
        Input<String> hostname,
        Input<List<CertificateArgs>> serverCertificates,
        Input<String> serviceDirectoryService) {
        this.endpointFilter = endpointFilter;
        this.hostname = Objects.requireNonNull(hostname, "expected parameter 'hostname' to be non-null");
        this.serverCertificates = Objects.requireNonNull(serverCertificates, "expected parameter 'serverCertificates' to be non-null");
        this.serviceDirectoryService = Objects.requireNonNull(serviceDirectoryService, "expected parameter 'serviceDirectoryService' to be non-null");
    }

    private ServiceResolverArgs() {
        this.endpointFilter = Input.empty();
        this.hostname = Input.empty();
        this.serverCertificates = Input.empty();
        this.serviceDirectoryService = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> endpointFilter;
        private Input<String> hostname;
        private Input<List<CertificateArgs>> serverCertificates;
        private Input<String> serviceDirectoryService;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceResolverArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointFilter = defaults.endpointFilter;
    	      this.hostname = defaults.hostname;
    	      this.serverCertificates = defaults.serverCertificates;
    	      this.serviceDirectoryService = defaults.serviceDirectoryService;
        }

        public Builder setEndpointFilter(@Nullable Input<String> endpointFilter) {
            this.endpointFilter = endpointFilter;
            return this;
        }

        public Builder setEndpointFilter(@Nullable String endpointFilter) {
            this.endpointFilter = Input.ofNullable(endpointFilter);
            return this;
        }

        public Builder setHostname(Input<String> hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }

        public Builder setHostname(String hostname) {
            this.hostname = Input.of(Objects.requireNonNull(hostname));
            return this;
        }

        public Builder setServerCertificates(Input<List<CertificateArgs>> serverCertificates) {
            this.serverCertificates = Objects.requireNonNull(serverCertificates);
            return this;
        }

        public Builder setServerCertificates(List<CertificateArgs> serverCertificates) {
            this.serverCertificates = Input.of(Objects.requireNonNull(serverCertificates));
            return this;
        }

        public Builder setServiceDirectoryService(Input<String> serviceDirectoryService) {
            this.serviceDirectoryService = Objects.requireNonNull(serviceDirectoryService);
            return this;
        }

        public Builder setServiceDirectoryService(String serviceDirectoryService) {
            this.serviceDirectoryService = Input.of(Objects.requireNonNull(serviceDirectoryService));
            return this;
        }

        public ServiceResolverArgs build() {
            return new ServiceResolverArgs(endpointFilter, hostname, serverCertificates, serviceDirectoryService);
        }
    }
}
