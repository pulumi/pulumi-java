// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datalabeling_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for how human labeling task should be done.
 * 
 */
public final class GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs Empty = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs();

    /**
     * Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
     * 
     */
    @InputImport(name="annotatedDatasetDescription")
    private final @Nullable Input<String> annotatedDatasetDescription;

    public Input<String> getAnnotatedDatasetDescription() {
        return this.annotatedDatasetDescription == null ? Input.empty() : this.annotatedDatasetDescription;
    }

    /**
     * A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
     * 
     */
    @InputImport(name="annotatedDatasetDisplayName", required=true)
    private final Input<String> annotatedDatasetDisplayName;

    public Input<String> getAnnotatedDatasetDisplayName() {
        return this.annotatedDatasetDisplayName;
    }

    /**
     * Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
     * 
     */
    @InputImport(name="contributorEmails")
    private final @Nullable Input<List<String>> contributorEmails;

    public Input<List<String>> getContributorEmails() {
        return this.contributorEmails == null ? Input.empty() : this.contributorEmails;
    }

    /**
     * Instruction resource name.
     * 
     */
    @InputImport(name="instruction", required=true)
    private final Input<String> instruction;

    public Input<String> getInstruction() {
        return this.instruction;
    }

    /**
     * Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
     * 
     */
    @InputImport(name="labelGroup")
    private final @Nullable Input<String> labelGroup;

    public Input<String> getLabelGroup() {
        return this.labelGroup == null ? Input.empty() : this.labelGroup;
    }

    /**
     * Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
     * 
     */
    @InputImport(name="languageCode")
    private final @Nullable Input<String> languageCode;

    public Input<String> getLanguageCode() {
        return this.languageCode == null ? Input.empty() : this.languageCode;
    }

    /**
     * Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
     * 
     */
    @InputImport(name="questionDuration")
    private final @Nullable Input<String> questionDuration;

    public Input<String> getQuestionDuration() {
        return this.questionDuration == null ? Input.empty() : this.questionDuration;
    }

    /**
     * Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
     * 
     */
    @InputImport(name="replicaCount")
    private final @Nullable Input<Integer> replicaCount;

    public Input<Integer> getReplicaCount() {
        return this.replicaCount == null ? Input.empty() : this.replicaCount;
    }

    /**
     * Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
     * 
     */
    @InputImport(name="userEmailAddress")
    private final @Nullable Input<String> userEmailAddress;

    public Input<String> getUserEmailAddress() {
        return this.userEmailAddress == null ? Input.empty() : this.userEmailAddress;
    }

    public GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs(
        @Nullable Input<String> annotatedDatasetDescription,
        Input<String> annotatedDatasetDisplayName,
        @Nullable Input<List<String>> contributorEmails,
        Input<String> instruction,
        @Nullable Input<String> labelGroup,
        @Nullable Input<String> languageCode,
        @Nullable Input<String> questionDuration,
        @Nullable Input<Integer> replicaCount,
        @Nullable Input<String> userEmailAddress) {
        this.annotatedDatasetDescription = annotatedDatasetDescription;
        this.annotatedDatasetDisplayName = Objects.requireNonNull(annotatedDatasetDisplayName, "expected parameter 'annotatedDatasetDisplayName' to be non-null");
        this.contributorEmails = contributorEmails;
        this.instruction = Objects.requireNonNull(instruction, "expected parameter 'instruction' to be non-null");
        this.labelGroup = labelGroup;
        this.languageCode = languageCode;
        this.questionDuration = questionDuration;
        this.replicaCount = replicaCount;
        this.userEmailAddress = userEmailAddress;
    }

    private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs() {
        this.annotatedDatasetDescription = Input.empty();
        this.annotatedDatasetDisplayName = Input.empty();
        this.contributorEmails = Input.empty();
        this.instruction = Input.empty();
        this.labelGroup = Input.empty();
        this.languageCode = Input.empty();
        this.questionDuration = Input.empty();
        this.replicaCount = Input.empty();
        this.userEmailAddress = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> annotatedDatasetDescription;
        private Input<String> annotatedDatasetDisplayName;
        private @Nullable Input<List<String>> contributorEmails;
        private Input<String> instruction;
        private @Nullable Input<String> labelGroup;
        private @Nullable Input<String> languageCode;
        private @Nullable Input<String> questionDuration;
        private @Nullable Input<Integer> replicaCount;
        private @Nullable Input<String> userEmailAddress;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotatedDatasetDescription = defaults.annotatedDatasetDescription;
    	      this.annotatedDatasetDisplayName = defaults.annotatedDatasetDisplayName;
    	      this.contributorEmails = defaults.contributorEmails;
    	      this.instruction = defaults.instruction;
    	      this.labelGroup = defaults.labelGroup;
    	      this.languageCode = defaults.languageCode;
    	      this.questionDuration = defaults.questionDuration;
    	      this.replicaCount = defaults.replicaCount;
    	      this.userEmailAddress = defaults.userEmailAddress;
        }

        public Builder setAnnotatedDatasetDescription(@Nullable Input<String> annotatedDatasetDescription) {
            this.annotatedDatasetDescription = annotatedDatasetDescription;
            return this;
        }

        public Builder setAnnotatedDatasetDescription(@Nullable String annotatedDatasetDescription) {
            this.annotatedDatasetDescription = Input.ofNullable(annotatedDatasetDescription);
            return this;
        }

        public Builder setAnnotatedDatasetDisplayName(Input<String> annotatedDatasetDisplayName) {
            this.annotatedDatasetDisplayName = Objects.requireNonNull(annotatedDatasetDisplayName);
            return this;
        }

        public Builder setAnnotatedDatasetDisplayName(String annotatedDatasetDisplayName) {
            this.annotatedDatasetDisplayName = Input.of(Objects.requireNonNull(annotatedDatasetDisplayName));
            return this;
        }

        public Builder setContributorEmails(@Nullable Input<List<String>> contributorEmails) {
            this.contributorEmails = contributorEmails;
            return this;
        }

        public Builder setContributorEmails(@Nullable List<String> contributorEmails) {
            this.contributorEmails = Input.ofNullable(contributorEmails);
            return this;
        }

        public Builder setInstruction(Input<String> instruction) {
            this.instruction = Objects.requireNonNull(instruction);
            return this;
        }

        public Builder setInstruction(String instruction) {
            this.instruction = Input.of(Objects.requireNonNull(instruction));
            return this;
        }

        public Builder setLabelGroup(@Nullable Input<String> labelGroup) {
            this.labelGroup = labelGroup;
            return this;
        }

        public Builder setLabelGroup(@Nullable String labelGroup) {
            this.labelGroup = Input.ofNullable(labelGroup);
            return this;
        }

        public Builder setLanguageCode(@Nullable Input<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder setLanguageCode(@Nullable String languageCode) {
            this.languageCode = Input.ofNullable(languageCode);
            return this;
        }

        public Builder setQuestionDuration(@Nullable Input<String> questionDuration) {
            this.questionDuration = questionDuration;
            return this;
        }

        public Builder setQuestionDuration(@Nullable String questionDuration) {
            this.questionDuration = Input.ofNullable(questionDuration);
            return this;
        }

        public Builder setReplicaCount(@Nullable Input<Integer> replicaCount) {
            this.replicaCount = replicaCount;
            return this;
        }

        public Builder setReplicaCount(@Nullable Integer replicaCount) {
            this.replicaCount = Input.ofNullable(replicaCount);
            return this;
        }

        public Builder setUserEmailAddress(@Nullable Input<String> userEmailAddress) {
            this.userEmailAddress = userEmailAddress;
            return this;
        }

        public Builder setUserEmailAddress(@Nullable String userEmailAddress) {
            this.userEmailAddress = Input.ofNullable(userEmailAddress);
            return this;
        }

        public GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs build() {
            return new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs(annotatedDatasetDescription, annotatedDatasetDisplayName, contributorEmails, instruction, labelGroup, languageCode, questionDuration, replicaCount, userEmailAddress);
        }
    }
}
