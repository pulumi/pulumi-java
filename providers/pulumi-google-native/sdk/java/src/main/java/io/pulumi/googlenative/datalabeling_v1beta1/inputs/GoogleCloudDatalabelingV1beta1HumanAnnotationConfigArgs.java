// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datalabeling_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for how human labeling task should be done.
 * 
 */
public final class GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs Empty = new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs();

    /**
     * Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
     * 
     */
    @Import(name="annotatedDatasetDescription")
      private final @Nullable Output<String> annotatedDatasetDescription;

    public Output<String> getAnnotatedDatasetDescription() {
        return this.annotatedDatasetDescription == null ? Output.empty() : this.annotatedDatasetDescription;
    }

    /**
     * A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
     * 
     */
    @Import(name="annotatedDatasetDisplayName", required=true)
      private final Output<String> annotatedDatasetDisplayName;

    public Output<String> getAnnotatedDatasetDisplayName() {
        return this.annotatedDatasetDisplayName;
    }

    /**
     * Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
     * 
     */
    @Import(name="contributorEmails")
      private final @Nullable Output<List<String>> contributorEmails;

    public Output<List<String>> getContributorEmails() {
        return this.contributorEmails == null ? Output.empty() : this.contributorEmails;
    }

    /**
     * Instruction resource name.
     * 
     */
    @Import(name="instruction", required=true)
      private final Output<String> instruction;

    public Output<String> getInstruction() {
        return this.instruction;
    }

    /**
     * Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\d_-]{0,128}`.
     * 
     */
    @Import(name="labelGroup")
      private final @Nullable Output<String> labelGroup;

    public Output<String> getLabelGroup() {
        return this.labelGroup == null ? Output.empty() : this.labelGroup;
    }

    /**
     * Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
     * 
     */
    @Import(name="languageCode")
      private final @Nullable Output<String> languageCode;

    public Output<String> getLanguageCode() {
        return this.languageCode == null ? Output.empty() : this.languageCode;
    }

    /**
     * Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
     * 
     */
    @Import(name="questionDuration")
      private final @Nullable Output<String> questionDuration;

    public Output<String> getQuestionDuration() {
        return this.questionDuration == null ? Output.empty() : this.questionDuration;
    }

    /**
     * Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
     * 
     */
    @Import(name="replicaCount")
      private final @Nullable Output<Integer> replicaCount;

    public Output<Integer> getReplicaCount() {
        return this.replicaCount == null ? Output.empty() : this.replicaCount;
    }

    /**
     * Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
     * 
     */
    @Import(name="userEmailAddress")
      private final @Nullable Output<String> userEmailAddress;

    public Output<String> getUserEmailAddress() {
        return this.userEmailAddress == null ? Output.empty() : this.userEmailAddress;
    }

    public GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs(
        @Nullable Output<String> annotatedDatasetDescription,
        Output<String> annotatedDatasetDisplayName,
        @Nullable Output<List<String>> contributorEmails,
        Output<String> instruction,
        @Nullable Output<String> labelGroup,
        @Nullable Output<String> languageCode,
        @Nullable Output<String> questionDuration,
        @Nullable Output<Integer> replicaCount,
        @Nullable Output<String> userEmailAddress) {
        this.annotatedDatasetDescription = annotatedDatasetDescription;
        this.annotatedDatasetDisplayName = Objects.requireNonNull(annotatedDatasetDisplayName, "expected parameter 'annotatedDatasetDisplayName' to be non-null");
        this.contributorEmails = contributorEmails;
        this.instruction = Objects.requireNonNull(instruction, "expected parameter 'instruction' to be non-null");
        this.labelGroup = labelGroup;
        this.languageCode = languageCode;
        this.questionDuration = questionDuration;
        this.replicaCount = replicaCount;
        this.userEmailAddress = userEmailAddress;
    }

    private GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs() {
        this.annotatedDatasetDescription = Output.empty();
        this.annotatedDatasetDisplayName = Output.empty();
        this.contributorEmails = Output.empty();
        this.instruction = Output.empty();
        this.labelGroup = Output.empty();
        this.languageCode = Output.empty();
        this.questionDuration = Output.empty();
        this.replicaCount = Output.empty();
        this.userEmailAddress = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> annotatedDatasetDescription;
        private Output<String> annotatedDatasetDisplayName;
        private @Nullable Output<List<String>> contributorEmails;
        private Output<String> instruction;
        private @Nullable Output<String> labelGroup;
        private @Nullable Output<String> languageCode;
        private @Nullable Output<String> questionDuration;
        private @Nullable Output<Integer> replicaCount;
        private @Nullable Output<String> userEmailAddress;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotatedDatasetDescription = defaults.annotatedDatasetDescription;
    	      this.annotatedDatasetDisplayName = defaults.annotatedDatasetDisplayName;
    	      this.contributorEmails = defaults.contributorEmails;
    	      this.instruction = defaults.instruction;
    	      this.labelGroup = defaults.labelGroup;
    	      this.languageCode = defaults.languageCode;
    	      this.questionDuration = defaults.questionDuration;
    	      this.replicaCount = defaults.replicaCount;
    	      this.userEmailAddress = defaults.userEmailAddress;
        }

        public Builder annotatedDatasetDescription(@Nullable Output<String> annotatedDatasetDescription) {
            this.annotatedDatasetDescription = annotatedDatasetDescription;
            return this;
        }
        public Builder annotatedDatasetDescription(@Nullable String annotatedDatasetDescription) {
            this.annotatedDatasetDescription = Output.ofNullable(annotatedDatasetDescription);
            return this;
        }
        public Builder annotatedDatasetDisplayName(Output<String> annotatedDatasetDisplayName) {
            this.annotatedDatasetDisplayName = Objects.requireNonNull(annotatedDatasetDisplayName);
            return this;
        }
        public Builder annotatedDatasetDisplayName(String annotatedDatasetDisplayName) {
            this.annotatedDatasetDisplayName = Output.of(Objects.requireNonNull(annotatedDatasetDisplayName));
            return this;
        }
        public Builder contributorEmails(@Nullable Output<List<String>> contributorEmails) {
            this.contributorEmails = contributorEmails;
            return this;
        }
        public Builder contributorEmails(@Nullable List<String> contributorEmails) {
            this.contributorEmails = Output.ofNullable(contributorEmails);
            return this;
        }
        public Builder contributorEmails(String... contributorEmails) {
            return contributorEmails(List.of(contributorEmails));
        }
        public Builder instruction(Output<String> instruction) {
            this.instruction = Objects.requireNonNull(instruction);
            return this;
        }
        public Builder instruction(String instruction) {
            this.instruction = Output.of(Objects.requireNonNull(instruction));
            return this;
        }
        public Builder labelGroup(@Nullable Output<String> labelGroup) {
            this.labelGroup = labelGroup;
            return this;
        }
        public Builder labelGroup(@Nullable String labelGroup) {
            this.labelGroup = Output.ofNullable(labelGroup);
            return this;
        }
        public Builder languageCode(@Nullable Output<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }
        public Builder languageCode(@Nullable String languageCode) {
            this.languageCode = Output.ofNullable(languageCode);
            return this;
        }
        public Builder questionDuration(@Nullable Output<String> questionDuration) {
            this.questionDuration = questionDuration;
            return this;
        }
        public Builder questionDuration(@Nullable String questionDuration) {
            this.questionDuration = Output.ofNullable(questionDuration);
            return this;
        }
        public Builder replicaCount(@Nullable Output<Integer> replicaCount) {
            this.replicaCount = replicaCount;
            return this;
        }
        public Builder replicaCount(@Nullable Integer replicaCount) {
            this.replicaCount = Output.ofNullable(replicaCount);
            return this;
        }
        public Builder userEmailAddress(@Nullable Output<String> userEmailAddress) {
            this.userEmailAddress = userEmailAddress;
            return this;
        }
        public Builder userEmailAddress(@Nullable String userEmailAddress) {
            this.userEmailAddress = Output.ofNullable(userEmailAddress);
            return this;
        }        public GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs build() {
            return new GoogleCloudDatalabelingV1beta1HumanAnnotationConfigArgs(annotatedDatasetDescription, annotatedDatasetDisplayName, contributorEmails, instruction, labelGroup, languageCode, questionDuration, replicaCount, userEmailAddress);
        }
    }
}
