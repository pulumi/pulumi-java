// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebasehosting_v1beta1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class DomainRedirectResponse extends io.pulumi.resources.InvokeArgs {

    public static final DomainRedirectResponse Empty = new DomainRedirectResponse();

    @InputImport(name="domainName", required=true)
    private final String domainName;

    public String getDomainName() {
        return this.domainName;
    }

    @InputImport(name="type", required=true)
    private final String type;

    public String getType() {
        return this.type;
    }

    public DomainRedirectResponse(
        String domainName,
        String type) {
        this.domainName = Objects.requireNonNull(domainName, "expected parameter 'domainName' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DomainRedirectResponse() {
        this.domainName = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainRedirectResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String domainName;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainRedirectResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.type = defaults.type;
        }

        public Builder setDomainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public DomainRedirectResponse build() {
            return new DomainRedirectResponse(domainName, type);
        }
    }
}
