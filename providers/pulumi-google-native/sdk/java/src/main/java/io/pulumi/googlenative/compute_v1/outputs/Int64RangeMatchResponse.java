// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class Int64RangeMatchResponse {
    /**
     * The end of the range (exclusive) in signed long integer format.
     * 
     */
    private final String rangeEnd;
    /**
     * The start of the range (inclusive) in signed long integer format.
     * 
     */
    private final String rangeStart;

    @OutputCustomType.Constructor({"rangeEnd","rangeStart"})
    private Int64RangeMatchResponse(
        String rangeEnd,
        String rangeStart) {
        this.rangeEnd = Objects.requireNonNull(rangeEnd);
        this.rangeStart = Objects.requireNonNull(rangeStart);
    }

    /**
     * The end of the range (exclusive) in signed long integer format.
     * 
     */
    public String getRangeEnd() {
        return this.rangeEnd;
    }
    /**
     * The start of the range (inclusive) in signed long integer format.
     * 
     */
    public String getRangeStart() {
        return this.rangeStart;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Int64RangeMatchResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String rangeEnd;
        private String rangeStart;

        public Builder() {
    	      // Empty
        }

        public Builder(Int64RangeMatchResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.rangeEnd = defaults.rangeEnd;
    	      this.rangeStart = defaults.rangeStart;
        }

        public Builder setRangeEnd(String rangeEnd) {
            this.rangeEnd = Objects.requireNonNull(rangeEnd);
            return this;
        }

        public Builder setRangeStart(String rangeStart) {
            this.rangeStart = Objects.requireNonNull(rangeStart);
            return this;
        }

        public Int64RangeMatchResponse build() {
            return new Int64RangeMatchResponse(rangeEnd, rangeStart);
        }
    }
}
