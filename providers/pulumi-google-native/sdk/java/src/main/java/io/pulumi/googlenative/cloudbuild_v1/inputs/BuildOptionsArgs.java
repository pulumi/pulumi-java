// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudbuild_v1.enums.BuildOptionsLogStreamingOption;
import io.pulumi.googlenative.cloudbuild_v1.enums.BuildOptionsLogging;
import io.pulumi.googlenative.cloudbuild_v1.enums.BuildOptionsMachineType;
import io.pulumi.googlenative.cloudbuild_v1.enums.BuildOptionsRequestedVerifyOption;
import io.pulumi.googlenative.cloudbuild_v1.enums.BuildOptionsSourceProvenanceHashItem;
import io.pulumi.googlenative.cloudbuild_v1.enums.BuildOptionsSubstitutionOption;
import io.pulumi.googlenative.cloudbuild_v1.inputs.PoolOptionArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.VolumeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Optional arguments to enable specific features of builds.
 * 
 */
public final class BuildOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final BuildOptionsArgs Empty = new BuildOptionsArgs();

    /**
     * Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
     * 
     */
    @Import(name="diskSizeGb")
      private final @Nullable Output<String> diskSizeGb;

    public Output<String> getDiskSizeGb() {
        return this.diskSizeGb == null ? Codegen.empty() : this.diskSizeGb;
    }

    /**
     * Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    @Import(name="dynamicSubstitutions")
      private final @Nullable Output<Boolean> dynamicSubstitutions;

    public Output<Boolean> getDynamicSubstitutions() {
        return this.dynamicSubstitutions == null ? Codegen.empty() : this.dynamicSubstitutions;
    }

    /**
     * A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     * 
     */
    @Import(name="env")
      private final @Nullable Output<List<String>> env;

    public Output<List<String>> getEnv() {
        return this.env == null ? Codegen.empty() : this.env;
    }

    /**
     * Option to define build log streaming behavior to Google Cloud Storage.
     * 
     */
    @Import(name="logStreamingOption")
      private final @Nullable Output<BuildOptionsLogStreamingOption> logStreamingOption;

    public Output<BuildOptionsLogStreamingOption> getLogStreamingOption() {
        return this.logStreamingOption == null ? Codegen.empty() : this.logStreamingOption;
    }

    /**
     * Option to specify the logging mode, which determines if and where build logs are stored.
     * 
     */
    @Import(name="logging")
      private final @Nullable Output<BuildOptionsLogging> logging;

    public Output<BuildOptionsLogging> getLogging() {
        return this.logging == null ? Codegen.empty() : this.logging;
    }

    /**
     * Compute Engine machine type on which to run the build.
     * 
     */
    @Import(name="machineType")
      private final @Nullable Output<BuildOptionsMachineType> machineType;

    public Output<BuildOptionsMachineType> getMachineType() {
        return this.machineType == null ? Codegen.empty() : this.machineType;
    }

    /**
     * Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
     * 
     */
    @Import(name="pool")
      private final @Nullable Output<PoolOptionArgs> pool;

    public Output<PoolOptionArgs> getPool() {
        return this.pool == null ? Codegen.empty() : this.pool;
    }

    /**
     * Requested verifiability options.
     * 
     */
    @Import(name="requestedVerifyOption")
      private final @Nullable Output<BuildOptionsRequestedVerifyOption> requestedVerifyOption;

    public Output<BuildOptionsRequestedVerifyOption> getRequestedVerifyOption() {
        return this.requestedVerifyOption == null ? Codegen.empty() : this.requestedVerifyOption;
    }

    /**
     * A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
     * 
     */
    @Import(name="secretEnv")
      private final @Nullable Output<List<String>> secretEnv;

    public Output<List<String>> getSecretEnv() {
        return this.secretEnv == null ? Codegen.empty() : this.secretEnv;
    }

    /**
     * Requested hash for SourceProvenance.
     * 
     */
    @Import(name="sourceProvenanceHash")
      private final @Nullable Output<List<BuildOptionsSourceProvenanceHashItem>> sourceProvenanceHash;

    public Output<List<BuildOptionsSourceProvenanceHashItem>> getSourceProvenanceHash() {
        return this.sourceProvenanceHash == null ? Codegen.empty() : this.sourceProvenanceHash;
    }

    /**
     * Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
     * 
     */
    @Import(name="substitutionOption")
      private final @Nullable Output<BuildOptionsSubstitutionOption> substitutionOption;

    public Output<BuildOptionsSubstitutionOption> getSubstitutionOption() {
        return this.substitutionOption == null ? Codegen.empty() : this.substitutionOption;
    }

    /**
     * Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
     * 
     */
    @Import(name="volumes")
      private final @Nullable Output<List<VolumeArgs>> volumes;

    public Output<List<VolumeArgs>> getVolumes() {
        return this.volumes == null ? Codegen.empty() : this.volumes;
    }

    /**
     * This field deprecated; please use `pool.name` instead.
     * 
     */
    @Import(name="workerPool")
      private final @Nullable Output<String> workerPool;

    public Output<String> getWorkerPool() {
        return this.workerPool == null ? Codegen.empty() : this.workerPool;
    }

    public BuildOptionsArgs(
        @Nullable Output<String> diskSizeGb,
        @Nullable Output<Boolean> dynamicSubstitutions,
        @Nullable Output<List<String>> env,
        @Nullable Output<BuildOptionsLogStreamingOption> logStreamingOption,
        @Nullable Output<BuildOptionsLogging> logging,
        @Nullable Output<BuildOptionsMachineType> machineType,
        @Nullable Output<PoolOptionArgs> pool,
        @Nullable Output<BuildOptionsRequestedVerifyOption> requestedVerifyOption,
        @Nullable Output<List<String>> secretEnv,
        @Nullable Output<List<BuildOptionsSourceProvenanceHashItem>> sourceProvenanceHash,
        @Nullable Output<BuildOptionsSubstitutionOption> substitutionOption,
        @Nullable Output<List<VolumeArgs>> volumes,
        @Nullable Output<String> workerPool) {
        this.diskSizeGb = diskSizeGb;
        this.dynamicSubstitutions = dynamicSubstitutions;
        this.env = env;
        this.logStreamingOption = logStreamingOption;
        this.logging = logging;
        this.machineType = machineType;
        this.pool = pool;
        this.requestedVerifyOption = requestedVerifyOption;
        this.secretEnv = secretEnv;
        this.sourceProvenanceHash = sourceProvenanceHash;
        this.substitutionOption = substitutionOption;
        this.volumes = volumes;
        this.workerPool = workerPool;
    }

    private BuildOptionsArgs() {
        this.diskSizeGb = Codegen.empty();
        this.dynamicSubstitutions = Codegen.empty();
        this.env = Codegen.empty();
        this.logStreamingOption = Codegen.empty();
        this.logging = Codegen.empty();
        this.machineType = Codegen.empty();
        this.pool = Codegen.empty();
        this.requestedVerifyOption = Codegen.empty();
        this.secretEnv = Codegen.empty();
        this.sourceProvenanceHash = Codegen.empty();
        this.substitutionOption = Codegen.empty();
        this.volumes = Codegen.empty();
        this.workerPool = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> diskSizeGb;
        private @Nullable Output<Boolean> dynamicSubstitutions;
        private @Nullable Output<List<String>> env;
        private @Nullable Output<BuildOptionsLogStreamingOption> logStreamingOption;
        private @Nullable Output<BuildOptionsLogging> logging;
        private @Nullable Output<BuildOptionsMachineType> machineType;
        private @Nullable Output<PoolOptionArgs> pool;
        private @Nullable Output<BuildOptionsRequestedVerifyOption> requestedVerifyOption;
        private @Nullable Output<List<String>> secretEnv;
        private @Nullable Output<List<BuildOptionsSourceProvenanceHashItem>> sourceProvenanceHash;
        private @Nullable Output<BuildOptionsSubstitutionOption> substitutionOption;
        private @Nullable Output<List<VolumeArgs>> volumes;
        private @Nullable Output<String> workerPool;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.dynamicSubstitutions = defaults.dynamicSubstitutions;
    	      this.env = defaults.env;
    	      this.logStreamingOption = defaults.logStreamingOption;
    	      this.logging = defaults.logging;
    	      this.machineType = defaults.machineType;
    	      this.pool = defaults.pool;
    	      this.requestedVerifyOption = defaults.requestedVerifyOption;
    	      this.secretEnv = defaults.secretEnv;
    	      this.sourceProvenanceHash = defaults.sourceProvenanceHash;
    	      this.substitutionOption = defaults.substitutionOption;
    	      this.volumes = defaults.volumes;
    	      this.workerPool = defaults.workerPool;
        }

        public Builder diskSizeGb(@Nullable Output<String> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        public Builder diskSizeGb(@Nullable String diskSizeGb) {
            this.diskSizeGb = Codegen.ofNullable(diskSizeGb);
            return this;
        }
        public Builder dynamicSubstitutions(@Nullable Output<Boolean> dynamicSubstitutions) {
            this.dynamicSubstitutions = dynamicSubstitutions;
            return this;
        }
        public Builder dynamicSubstitutions(@Nullable Boolean dynamicSubstitutions) {
            this.dynamicSubstitutions = Codegen.ofNullable(dynamicSubstitutions);
            return this;
        }
        public Builder env(@Nullable Output<List<String>> env) {
            this.env = env;
            return this;
        }
        public Builder env(@Nullable List<String> env) {
            this.env = Codegen.ofNullable(env);
            return this;
        }
        public Builder env(String... env) {
            return env(List.of(env));
        }
        public Builder logStreamingOption(@Nullable Output<BuildOptionsLogStreamingOption> logStreamingOption) {
            this.logStreamingOption = logStreamingOption;
            return this;
        }
        public Builder logStreamingOption(@Nullable BuildOptionsLogStreamingOption logStreamingOption) {
            this.logStreamingOption = Codegen.ofNullable(logStreamingOption);
            return this;
        }
        public Builder logging(@Nullable Output<BuildOptionsLogging> logging) {
            this.logging = logging;
            return this;
        }
        public Builder logging(@Nullable BuildOptionsLogging logging) {
            this.logging = Codegen.ofNullable(logging);
            return this;
        }
        public Builder machineType(@Nullable Output<BuildOptionsMachineType> machineType) {
            this.machineType = machineType;
            return this;
        }
        public Builder machineType(@Nullable BuildOptionsMachineType machineType) {
            this.machineType = Codegen.ofNullable(machineType);
            return this;
        }
        public Builder pool(@Nullable Output<PoolOptionArgs> pool) {
            this.pool = pool;
            return this;
        }
        public Builder pool(@Nullable PoolOptionArgs pool) {
            this.pool = Codegen.ofNullable(pool);
            return this;
        }
        public Builder requestedVerifyOption(@Nullable Output<BuildOptionsRequestedVerifyOption> requestedVerifyOption) {
            this.requestedVerifyOption = requestedVerifyOption;
            return this;
        }
        public Builder requestedVerifyOption(@Nullable BuildOptionsRequestedVerifyOption requestedVerifyOption) {
            this.requestedVerifyOption = Codegen.ofNullable(requestedVerifyOption);
            return this;
        }
        public Builder secretEnv(@Nullable Output<List<String>> secretEnv) {
            this.secretEnv = secretEnv;
            return this;
        }
        public Builder secretEnv(@Nullable List<String> secretEnv) {
            this.secretEnv = Codegen.ofNullable(secretEnv);
            return this;
        }
        public Builder secretEnv(String... secretEnv) {
            return secretEnv(List.of(secretEnv));
        }
        public Builder sourceProvenanceHash(@Nullable Output<List<BuildOptionsSourceProvenanceHashItem>> sourceProvenanceHash) {
            this.sourceProvenanceHash = sourceProvenanceHash;
            return this;
        }
        public Builder sourceProvenanceHash(@Nullable List<BuildOptionsSourceProvenanceHashItem> sourceProvenanceHash) {
            this.sourceProvenanceHash = Codegen.ofNullable(sourceProvenanceHash);
            return this;
        }
        public Builder sourceProvenanceHash(BuildOptionsSourceProvenanceHashItem... sourceProvenanceHash) {
            return sourceProvenanceHash(List.of(sourceProvenanceHash));
        }
        public Builder substitutionOption(@Nullable Output<BuildOptionsSubstitutionOption> substitutionOption) {
            this.substitutionOption = substitutionOption;
            return this;
        }
        public Builder substitutionOption(@Nullable BuildOptionsSubstitutionOption substitutionOption) {
            this.substitutionOption = Codegen.ofNullable(substitutionOption);
            return this;
        }
        public Builder volumes(@Nullable Output<List<VolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(@Nullable List<VolumeArgs> volumes) {
            this.volumes = Codegen.ofNullable(volumes);
            return this;
        }
        public Builder volumes(VolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }
        public Builder workerPool(@Nullable Output<String> workerPool) {
            this.workerPool = workerPool;
            return this;
        }
        public Builder workerPool(@Nullable String workerPool) {
            this.workerPool = Codegen.ofNullable(workerPool);
            return this;
        }        public BuildOptionsArgs build() {
            return new BuildOptionsArgs(diskSizeGb, dynamicSubstitutions, env, logStreamingOption, logging, machineType, pool, requestedVerifyOption, secretEnv, sourceProvenanceHash, substitutionOption, volumes, workerPool);
        }
    }
}
