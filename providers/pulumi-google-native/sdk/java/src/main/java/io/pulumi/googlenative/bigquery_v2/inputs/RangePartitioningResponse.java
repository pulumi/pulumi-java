// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.bigquery_v2.inputs.RangePartitioningRangeResponse;
import java.lang.String;
import java.util.Objects;


public final class RangePartitioningResponse extends io.pulumi.resources.InvokeArgs {

    public static final RangePartitioningResponse Empty = new RangePartitioningResponse();

    /**
     * [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
     * 
     */
    @Import(name="field", required=true)
      private final String field;

    public String field() {
        return this.field;
    }

    /**
     * [TrustedTester] [Required] Defines the ranges for range partitioning.
     * 
     */
    @Import(name="range", required=true)
      private final RangePartitioningRangeResponse range;

    public RangePartitioningRangeResponse range() {
        return this.range;
    }

    public RangePartitioningResponse(
        String field,
        RangePartitioningRangeResponse range) {
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.range = Objects.requireNonNull(range, "expected parameter 'range' to be non-null");
    }

    private RangePartitioningResponse() {
        this.field = null;
        this.range = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RangePartitioningResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String field;
        private RangePartitioningRangeResponse range;

        public Builder() {
    	      // Empty
        }

        public Builder(RangePartitioningResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.field = defaults.field;
    	      this.range = defaults.range;
        }

        public Builder field(String field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        public Builder range(RangePartitioningRangeResponse range) {
            this.range = Objects.requireNonNull(range);
            return this;
        }        public RangePartitioningResponse build() {
            return new RangePartitioningResponse(field, range);
        }
    }
}
