// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudtasks_v2.inputs.AppEngineRoutingArgs;
import io.pulumi.googlenative.cloudtasks_v2.inputs.RateLimitsArgs;
import io.pulumi.googlenative.cloudtasks_v2.inputs.RetryConfigArgs;
import io.pulumi.googlenative.cloudtasks_v2.inputs.StackdriverLoggingConfigArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueueArgs extends io.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * Overrides for task-level app_engine_routing. These settings apply only to App Engine tasks in this queue. Http tasks are not affected. If set, `app_engine_routing_override` is used for all App Engine tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
     * 
     */
    @Import(name="appEngineRoutingOverride")
      private final @Nullable Output<AppEngineRoutingArgs> appEngineRoutingOverride;

    public Output<AppEngineRoutingArgs> appEngineRoutingOverride() {
        return this.appEngineRoutingOverride == null ? Codegen.empty() : this.appEngineRoutingOverride;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts. However they control task attempts in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc). The queue's actual dispatch rate is the result of: * Number of tasks in the queue * User-specified throttling: rate_limits, retry_config, and the queue's state. * System throttling due to `429` (Too Many Requests) or `503` (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic spikes.
     * 
     */
    @Import(name="rateLimits")
      private final @Nullable Output<RateLimitsArgs> rateLimits;

    public Output<RateLimitsArgs> rateLimits() {
        return this.rateLimits == null ? Codegen.empty() : this.rateLimits;
    }

    /**
     * Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
     * 
     */
    @Import(name="retryConfig")
      private final @Nullable Output<RetryConfigArgs> retryConfig;

    public Output<RetryConfigArgs> retryConfig() {
        return this.retryConfig == null ? Codegen.empty() : this.retryConfig;
    }

    /**
     * Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/). If this field is unset, then no logs are written.
     * 
     */
    @Import(name="stackdriverLoggingConfig")
      private final @Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig;

    public Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig() {
        return this.stackdriverLoggingConfig == null ? Codegen.empty() : this.stackdriverLoggingConfig;
    }

    public QueueArgs(
        @Nullable Output<AppEngineRoutingArgs> appEngineRoutingOverride,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<RateLimitsArgs> rateLimits,
        @Nullable Output<RetryConfigArgs> retryConfig,
        @Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig) {
        this.appEngineRoutingOverride = appEngineRoutingOverride;
        this.location = location;
        this.name = name;
        this.project = project;
        this.rateLimits = rateLimits;
        this.retryConfig = retryConfig;
        this.stackdriverLoggingConfig = stackdriverLoggingConfig;
    }

    private QueueArgs() {
        this.appEngineRoutingOverride = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.rateLimits = Codegen.empty();
        this.retryConfig = Codegen.empty();
        this.stackdriverLoggingConfig = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AppEngineRoutingArgs> appEngineRoutingOverride;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<RateLimitsArgs> rateLimits;
        private @Nullable Output<RetryConfigArgs> retryConfig;
        private @Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineRoutingOverride = defaults.appEngineRoutingOverride;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rateLimits = defaults.rateLimits;
    	      this.retryConfig = defaults.retryConfig;
    	      this.stackdriverLoggingConfig = defaults.stackdriverLoggingConfig;
        }

        public Builder appEngineRoutingOverride(@Nullable Output<AppEngineRoutingArgs> appEngineRoutingOverride) {
            this.appEngineRoutingOverride = appEngineRoutingOverride;
            return this;
        }
        public Builder appEngineRoutingOverride(@Nullable AppEngineRoutingArgs appEngineRoutingOverride) {
            this.appEngineRoutingOverride = Codegen.ofNullable(appEngineRoutingOverride);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder rateLimits(@Nullable Output<RateLimitsArgs> rateLimits) {
            this.rateLimits = rateLimits;
            return this;
        }
        public Builder rateLimits(@Nullable RateLimitsArgs rateLimits) {
            this.rateLimits = Codegen.ofNullable(rateLimits);
            return this;
        }
        public Builder retryConfig(@Nullable Output<RetryConfigArgs> retryConfig) {
            this.retryConfig = retryConfig;
            return this;
        }
        public Builder retryConfig(@Nullable RetryConfigArgs retryConfig) {
            this.retryConfig = Codegen.ofNullable(retryConfig);
            return this;
        }
        public Builder stackdriverLoggingConfig(@Nullable Output<StackdriverLoggingConfigArgs> stackdriverLoggingConfig) {
            this.stackdriverLoggingConfig = stackdriverLoggingConfig;
            return this;
        }
        public Builder stackdriverLoggingConfig(@Nullable StackdriverLoggingConfigArgs stackdriverLoggingConfig) {
            this.stackdriverLoggingConfig = Codegen.ofNullable(stackdriverLoggingConfig);
            return this;
        }        public QueueArgs build() {
            return new QueueArgs(appEngineRoutingOverride, location, name, project, rateLimits, retryConfig, stackdriverLoggingConfig);
        }
    }
}
