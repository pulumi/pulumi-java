// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.tpu_v1;

import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.internal.annotations.OutputExport;
import io.pulumi.core.internal.annotations.ResourceType;
import io.pulumi.googlenative.Utilities;
import io.pulumi.googlenative.tpu_v1.NodeArgs;
import io.pulumi.googlenative.tpu_v1.outputs.NetworkEndpointResponse;
import io.pulumi.googlenative.tpu_v1.outputs.SchedulingConfigResponse;
import io.pulumi.googlenative.tpu_v1.outputs.SymptomResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

@ResourceType(type="google-native:tpu/v1:Node")
public class Node extends io.pulumi.resources.CustomResource {
    @OutputExport(name="acceleratorType", type=String.class, parameters={})
    private Output<String> acceleratorType;

    public Output<String> getAcceleratorType() {
        return this.acceleratorType;
    }
    @OutputExport(name="apiVersion", type=String.class, parameters={})
    private Output<String> apiVersion;

    public Output<String> getApiVersion() {
        return this.apiVersion;
    }
    @OutputExport(name="cidrBlock", type=String.class, parameters={})
    private Output<String> cidrBlock;

    public Output<String> getCidrBlock() {
        return this.cidrBlock;
    }
    @OutputExport(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    public Output<String> getCreateTime() {
        return this.createTime;
    }
    @OutputExport(name="description", type=String.class, parameters={})
    private Output<String> description;

    public Output<String> getDescription() {
        return this.description;
    }
    @OutputExport(name="health", type=String.class, parameters={})
    private Output<String> health;

    public Output<String> getHealth() {
        return this.health;
    }
    @OutputExport(name="healthDescription", type=String.class, parameters={})
    private Output<String> healthDescription;

    public Output<String> getHealthDescription() {
        return this.healthDescription;
    }
    @OutputExport(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> labels;

    public Output<Map<String,String>> getLabels() {
        return this.labels;
    }
    @OutputExport(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> getName() {
        return this.name;
    }
    @OutputExport(name="network", type=String.class, parameters={})
    private Output<String> network;

    public Output<String> getNetwork() {
        return this.network;
    }
    @OutputExport(name="networkEndpoints", type=List.class, parameters={NetworkEndpointResponse.class})
    private Output<List<NetworkEndpointResponse>> networkEndpoints;

    public Output<List<NetworkEndpointResponse>> getNetworkEndpoints() {
        return this.networkEndpoints;
    }
    @OutputExport(name="schedulingConfig", type=SchedulingConfigResponse.class, parameters={})
    private Output<SchedulingConfigResponse> schedulingConfig;

    public Output<SchedulingConfigResponse> getSchedulingConfig() {
        return this.schedulingConfig;
    }
    @OutputExport(name="serviceAccount", type=String.class, parameters={})
    private Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount;
    }
    @OutputExport(name="state", type=String.class, parameters={})
    private Output<String> state;

    public Output<String> getState() {
        return this.state;
    }
    @OutputExport(name="symptoms", type=List.class, parameters={SymptomResponse.class})
    private Output<List<SymptomResponse>> symptoms;

    public Output<List<SymptomResponse>> getSymptoms() {
        return this.symptoms;
    }
    @OutputExport(name="tensorflowVersion", type=String.class, parameters={})
    private Output<String> tensorflowVersion;

    public Output<String> getTensorflowVersion() {
        return this.tensorflowVersion;
    }
    @OutputExport(name="useServiceNetworking", type=Boolean.class, parameters={})
    private Output<Boolean> useServiceNetworking;

    public Output<Boolean> getUseServiceNetworking() {
        return this.useServiceNetworking;
    }

    public Node(String name, NodeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:tpu/v1:Node", name, args == null ? NodeArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private Node(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("google-native:tpu/v1:Node", name, null, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    public static Node get(String name, Input<String> id, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Node(name, id, options);
    }
}
