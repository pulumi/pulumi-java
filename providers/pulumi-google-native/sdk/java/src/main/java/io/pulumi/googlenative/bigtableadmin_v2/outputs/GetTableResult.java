// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigtableadmin_v2.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.bigtableadmin_v2.outputs.RestoreInfoResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetTableResult {
    /**
     * Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
     * 
     */
    private final Map<String,String> clusterStates;
    /**
     * The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
     * 
     */
    private final Map<String,String> columnFamilies;
    /**
     * Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
     * 
     */
    private final String granularity;
    /**
     * The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
     * 
     */
    private final String name;
    /**
     * If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
     * 
     */
    private final RestoreInfoResponse restoreInfo;

    @OutputCustomType.Constructor({"clusterStates","columnFamilies","granularity","name","restoreInfo"})
    private GetTableResult(
        Map<String,String> clusterStates,
        Map<String,String> columnFamilies,
        String granularity,
        String name,
        RestoreInfoResponse restoreInfo) {
        this.clusterStates = Objects.requireNonNull(clusterStates);
        this.columnFamilies = Objects.requireNonNull(columnFamilies);
        this.granularity = Objects.requireNonNull(granularity);
        this.name = Objects.requireNonNull(name);
        this.restoreInfo = Objects.requireNonNull(restoreInfo);
    }

    /**
     * Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
     * 
     */
    public Map<String,String> getClusterStates() {
        return this.clusterStates;
    }
    /**
     * The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
     * 
     */
    public Map<String,String> getColumnFamilies() {
        return this.columnFamilies;
    }
    /**
     * Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
     * 
     */
    public String getGranularity() {
        return this.granularity;
    }
    /**
     * The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
     * 
     */
    public RestoreInfoResponse getRestoreInfo() {
        return this.restoreInfo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> clusterStates;
        private Map<String,String> columnFamilies;
        private String granularity;
        private String name;
        private RestoreInfoResponse restoreInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterStates = defaults.clusterStates;
    	      this.columnFamilies = defaults.columnFamilies;
    	      this.granularity = defaults.granularity;
    	      this.name = defaults.name;
    	      this.restoreInfo = defaults.restoreInfo;
        }

        public Builder setClusterStates(Map<String,String> clusterStates) {
            this.clusterStates = Objects.requireNonNull(clusterStates);
            return this;
        }

        public Builder setColumnFamilies(Map<String,String> columnFamilies) {
            this.columnFamilies = Objects.requireNonNull(columnFamilies);
            return this;
        }

        public Builder setGranularity(String granularity) {
            this.granularity = Objects.requireNonNull(granularity);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRestoreInfo(RestoreInfoResponse restoreInfo) {
            this.restoreInfo = Objects.requireNonNull(restoreInfo);
            return this;
        }

        public GetTableResult build() {
            return new GetTableResult(clusterStates, columnFamilies, granularity, name, restoreInfo);
        }
    }
}
