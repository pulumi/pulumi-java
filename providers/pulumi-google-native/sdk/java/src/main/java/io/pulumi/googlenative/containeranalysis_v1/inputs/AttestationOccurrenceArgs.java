// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1.inputs.JwtArgs;
import io.pulumi.googlenative.containeranalysis_v1.inputs.SignatureArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
 * 
 */
public final class AttestationOccurrenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final AttestationOccurrenceArgs Empty = new AttestationOccurrenceArgs();

    /**
     * One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
     * 
     */
    @InputImport(name="jwts")
    private final @Nullable Input<List<JwtArgs>> jwts;

    public Input<List<JwtArgs>> getJwts() {
        return this.jwts == null ? Input.empty() : this.jwts;
    }

    /**
     * The serialized payload that is verified by one or more `signatures`.
     * 
     */
    @InputImport(name="serializedPayload", required=true)
    private final Input<String> serializedPayload;

    public Input<String> getSerializedPayload() {
        return this.serializedPayload;
    }

    /**
     * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
     * 
     */
    @InputImport(name="signatures")
    private final @Nullable Input<List<SignatureArgs>> signatures;

    public Input<List<SignatureArgs>> getSignatures() {
        return this.signatures == null ? Input.empty() : this.signatures;
    }

    public AttestationOccurrenceArgs(
        @Nullable Input<List<JwtArgs>> jwts,
        Input<String> serializedPayload,
        @Nullable Input<List<SignatureArgs>> signatures) {
        this.jwts = jwts;
        this.serializedPayload = Objects.requireNonNull(serializedPayload, "expected parameter 'serializedPayload' to be non-null");
        this.signatures = signatures;
    }

    private AttestationOccurrenceArgs() {
        this.jwts = Input.empty();
        this.serializedPayload = Input.empty();
        this.signatures = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AttestationOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<JwtArgs>> jwts;
        private Input<String> serializedPayload;
        private @Nullable Input<List<SignatureArgs>> signatures;

        public Builder() {
    	      // Empty
        }

        public Builder(AttestationOccurrenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.jwts = defaults.jwts;
    	      this.serializedPayload = defaults.serializedPayload;
    	      this.signatures = defaults.signatures;
        }

        public Builder setJwts(@Nullable Input<List<JwtArgs>> jwts) {
            this.jwts = jwts;
            return this;
        }

        public Builder setJwts(@Nullable List<JwtArgs> jwts) {
            this.jwts = Input.ofNullable(jwts);
            return this;
        }

        public Builder setSerializedPayload(Input<String> serializedPayload) {
            this.serializedPayload = Objects.requireNonNull(serializedPayload);
            return this;
        }

        public Builder setSerializedPayload(String serializedPayload) {
            this.serializedPayload = Input.of(Objects.requireNonNull(serializedPayload));
            return this;
        }

        public Builder setSignatures(@Nullable Input<List<SignatureArgs>> signatures) {
            this.signatures = signatures;
            return this;
        }

        public Builder setSignatures(@Nullable List<SignatureArgs> signatures) {
            this.signatures = Input.ofNullable(signatures);
            return this;
        }

        public AttestationOccurrenceArgs build() {
            return new AttestationOccurrenceArgs(jwts, serializedPayload, signatures);
        }
    }
}
