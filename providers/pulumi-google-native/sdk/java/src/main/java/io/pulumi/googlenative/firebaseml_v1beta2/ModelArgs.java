// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebaseml_v1beta2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.firebaseml_v1beta2.inputs.ModelStateArgs;
import io.pulumi.googlenative.firebaseml_v1beta2.inputs.TfLiteModelArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ModelArgs extends io.pulumi.resources.ResourceArgs {

    public static final ModelArgs Empty = new ModelArgs();

    /**
     * The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    /**
     * State common to all model types. Includes publishing and validation information.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<ModelStateArgs> state;

    public Output<ModelStateArgs> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    /**
     * User defined tags which can be used to group/filter models during listing
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A TFLite Model
     * 
     */
    @Import(name="tfliteModel")
      private final @Nullable Output<TfLiteModelArgs> tfliteModel;

    public Output<TfLiteModelArgs> getTfliteModel() {
        return this.tfliteModel == null ? Output.empty() : this.tfliteModel;
    }

    public ModelArgs(
        Output<String> displayName,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        @Nullable Output<ModelStateArgs> state,
        @Nullable Output<List<String>> tags,
        @Nullable Output<TfLiteModelArgs> tfliteModel) {
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.name = name;
        this.project = project;
        this.state = state;
        this.tags = tags;
        this.tfliteModel = tfliteModel;
    }

    private ModelArgs() {
        this.displayName = Output.empty();
        this.name = Output.empty();
        this.project = Output.empty();
        this.state = Output.empty();
        this.tags = Output.empty();
        this.tfliteModel = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> displayName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private @Nullable Output<ModelStateArgs> state;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<TfLiteModelArgs> tfliteModel;

        public Builder() {
    	      // Empty
        }

        public Builder(ModelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.tfliteModel = defaults.tfliteModel;
        }

        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }
        public Builder state(@Nullable Output<ModelStateArgs> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable ModelStateArgs state) {
            this.state = Output.ofNullable(state);
            return this;
        }
        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder tfliteModel(@Nullable Output<TfLiteModelArgs> tfliteModel) {
            this.tfliteModel = tfliteModel;
            return this;
        }
        public Builder tfliteModel(@Nullable TfLiteModelArgs tfliteModel) {
            this.tfliteModel = Output.ofNullable(tfliteModel);
            return this;
        }        public ModelArgs build() {
            return new ModelArgs(displayName, name, project, state, tags, tfliteModel);
        }
    }
}
