// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.compute_v1.outputs.CustomerEncryptionKeyResponse;
import io.pulumi.googlenative.compute_v1.outputs.DeprecationStatusResponse;
import io.pulumi.googlenative.compute_v1.outputs.GuestOsFeatureResponse;
import io.pulumi.googlenative.compute_v1.outputs.ImageRawDiskResponse;
import io.pulumi.googlenative.compute_v1.outputs.InitialStateConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetImageResult {
    private final String archiveSizeBytes;
    private final String creationTimestamp;
    private final DeprecationStatusResponse deprecated;
    private final String description;
    private final String diskSizeGb;
    private final String family;
    private final List<GuestOsFeatureResponse> guestOsFeatures;
    private final CustomerEncryptionKeyResponse imageEncryptionKey;
    private final String kind;
    private final String labelFingerprint;
    private final Map<String,String> labels;
    private final List<String> licenseCodes;
    private final List<String> licenses;
    private final String name;
    private final ImageRawDiskResponse rawDisk;
    private final Boolean satisfiesPzs;
    private final String selfLink;
    private final InitialStateConfigResponse shieldedInstanceInitialState;
    private final String sourceDisk;
    private final CustomerEncryptionKeyResponse sourceDiskEncryptionKey;
    private final String sourceDiskId;
    private final String sourceImage;
    private final CustomerEncryptionKeyResponse sourceImageEncryptionKey;
    private final String sourceImageId;
    private final String sourceSnapshot;
    private final CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey;
    private final String sourceSnapshotId;
    private final String sourceType;
    private final String status;
    private final List<String> storageLocations;

    @OutputCustomType.Constructor({"archiveSizeBytes","creationTimestamp","deprecated","description","diskSizeGb","family","guestOsFeatures","imageEncryptionKey","kind","labelFingerprint","labels","licenseCodes","licenses","name","rawDisk","satisfiesPzs","selfLink","shieldedInstanceInitialState","sourceDisk","sourceDiskEncryptionKey","sourceDiskId","sourceImage","sourceImageEncryptionKey","sourceImageId","sourceSnapshot","sourceSnapshotEncryptionKey","sourceSnapshotId","sourceType","status","storageLocations"})
    private GetImageResult(
        String archiveSizeBytes,
        String creationTimestamp,
        DeprecationStatusResponse deprecated,
        String description,
        String diskSizeGb,
        String family,
        List<GuestOsFeatureResponse> guestOsFeatures,
        CustomerEncryptionKeyResponse imageEncryptionKey,
        String kind,
        String labelFingerprint,
        Map<String,String> labels,
        List<String> licenseCodes,
        List<String> licenses,
        String name,
        ImageRawDiskResponse rawDisk,
        Boolean satisfiesPzs,
        String selfLink,
        InitialStateConfigResponse shieldedInstanceInitialState,
        String sourceDisk,
        CustomerEncryptionKeyResponse sourceDiskEncryptionKey,
        String sourceDiskId,
        String sourceImage,
        CustomerEncryptionKeyResponse sourceImageEncryptionKey,
        String sourceImageId,
        String sourceSnapshot,
        CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey,
        String sourceSnapshotId,
        String sourceType,
        String status,
        List<String> storageLocations) {
        this.archiveSizeBytes = Objects.requireNonNull(archiveSizeBytes);
        this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
        this.deprecated = Objects.requireNonNull(deprecated);
        this.description = Objects.requireNonNull(description);
        this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
        this.family = Objects.requireNonNull(family);
        this.guestOsFeatures = Objects.requireNonNull(guestOsFeatures);
        this.imageEncryptionKey = Objects.requireNonNull(imageEncryptionKey);
        this.kind = Objects.requireNonNull(kind);
        this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
        this.labels = Objects.requireNonNull(labels);
        this.licenseCodes = Objects.requireNonNull(licenseCodes);
        this.licenses = Objects.requireNonNull(licenses);
        this.name = Objects.requireNonNull(name);
        this.rawDisk = Objects.requireNonNull(rawDisk);
        this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.shieldedInstanceInitialState = Objects.requireNonNull(shieldedInstanceInitialState);
        this.sourceDisk = Objects.requireNonNull(sourceDisk);
        this.sourceDiskEncryptionKey = Objects.requireNonNull(sourceDiskEncryptionKey);
        this.sourceDiskId = Objects.requireNonNull(sourceDiskId);
        this.sourceImage = Objects.requireNonNull(sourceImage);
        this.sourceImageEncryptionKey = Objects.requireNonNull(sourceImageEncryptionKey);
        this.sourceImageId = Objects.requireNonNull(sourceImageId);
        this.sourceSnapshot = Objects.requireNonNull(sourceSnapshot);
        this.sourceSnapshotEncryptionKey = Objects.requireNonNull(sourceSnapshotEncryptionKey);
        this.sourceSnapshotId = Objects.requireNonNull(sourceSnapshotId);
        this.sourceType = Objects.requireNonNull(sourceType);
        this.status = Objects.requireNonNull(status);
        this.storageLocations = Objects.requireNonNull(storageLocations);
    }

    public String getArchiveSizeBytes() {
        return this.archiveSizeBytes;
    }
    public String getCreationTimestamp() {
        return this.creationTimestamp;
    }
    public DeprecationStatusResponse getDeprecated() {
        return this.deprecated;
    }
    public String getDescription() {
        return this.description;
    }
    public String getDiskSizeGb() {
        return this.diskSizeGb;
    }
    public String getFamily() {
        return this.family;
    }
    public List<GuestOsFeatureResponse> getGuestOsFeatures() {
        return this.guestOsFeatures;
    }
    public CustomerEncryptionKeyResponse getImageEncryptionKey() {
        return this.imageEncryptionKey;
    }
    public String getKind() {
        return this.kind;
    }
    public String getLabelFingerprint() {
        return this.labelFingerprint;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public List<String> getLicenseCodes() {
        return this.licenseCodes;
    }
    public List<String> getLicenses() {
        return this.licenses;
    }
    public String getName() {
        return this.name;
    }
    public ImageRawDiskResponse getRawDisk() {
        return this.rawDisk;
    }
    public Boolean getSatisfiesPzs() {
        return this.satisfiesPzs;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public InitialStateConfigResponse getShieldedInstanceInitialState() {
        return this.shieldedInstanceInitialState;
    }
    public String getSourceDisk() {
        return this.sourceDisk;
    }
    public CustomerEncryptionKeyResponse getSourceDiskEncryptionKey() {
        return this.sourceDiskEncryptionKey;
    }
    public String getSourceDiskId() {
        return this.sourceDiskId;
    }
    public String getSourceImage() {
        return this.sourceImage;
    }
    public CustomerEncryptionKeyResponse getSourceImageEncryptionKey() {
        return this.sourceImageEncryptionKey;
    }
    public String getSourceImageId() {
        return this.sourceImageId;
    }
    public String getSourceSnapshot() {
        return this.sourceSnapshot;
    }
    public CustomerEncryptionKeyResponse getSourceSnapshotEncryptionKey() {
        return this.sourceSnapshotEncryptionKey;
    }
    public String getSourceSnapshotId() {
        return this.sourceSnapshotId;
    }
    public String getSourceType() {
        return this.sourceType;
    }
    public String getStatus() {
        return this.status;
    }
    public List<String> getStorageLocations() {
        return this.storageLocations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String archiveSizeBytes;
        private String creationTimestamp;
        private DeprecationStatusResponse deprecated;
        private String description;
        private String diskSizeGb;
        private String family;
        private List<GuestOsFeatureResponse> guestOsFeatures;
        private CustomerEncryptionKeyResponse imageEncryptionKey;
        private String kind;
        private String labelFingerprint;
        private Map<String,String> labels;
        private List<String> licenseCodes;
        private List<String> licenses;
        private String name;
        private ImageRawDiskResponse rawDisk;
        private Boolean satisfiesPzs;
        private String selfLink;
        private InitialStateConfigResponse shieldedInstanceInitialState;
        private String sourceDisk;
        private CustomerEncryptionKeyResponse sourceDiskEncryptionKey;
        private String sourceDiskId;
        private String sourceImage;
        private CustomerEncryptionKeyResponse sourceImageEncryptionKey;
        private String sourceImageId;
        private String sourceSnapshot;
        private CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey;
        private String sourceSnapshotId;
        private String sourceType;
        private String status;
        private List<String> storageLocations;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveSizeBytes = defaults.archiveSizeBytes;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.deprecated = defaults.deprecated;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.family = defaults.family;
    	      this.guestOsFeatures = defaults.guestOsFeatures;
    	      this.imageEncryptionKey = defaults.imageEncryptionKey;
    	      this.kind = defaults.kind;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.licenseCodes = defaults.licenseCodes;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.rawDisk = defaults.rawDisk;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.selfLink = defaults.selfLink;
    	      this.shieldedInstanceInitialState = defaults.shieldedInstanceInitialState;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskEncryptionKey = defaults.sourceDiskEncryptionKey;
    	      this.sourceDiskId = defaults.sourceDiskId;
    	      this.sourceImage = defaults.sourceImage;
    	      this.sourceImageEncryptionKey = defaults.sourceImageEncryptionKey;
    	      this.sourceImageId = defaults.sourceImageId;
    	      this.sourceSnapshot = defaults.sourceSnapshot;
    	      this.sourceSnapshotEncryptionKey = defaults.sourceSnapshotEncryptionKey;
    	      this.sourceSnapshotId = defaults.sourceSnapshotId;
    	      this.sourceType = defaults.sourceType;
    	      this.status = defaults.status;
    	      this.storageLocations = defaults.storageLocations;
        }

        public Builder setArchiveSizeBytes(String archiveSizeBytes) {
            this.archiveSizeBytes = Objects.requireNonNull(archiveSizeBytes);
            return this;
        }

        public Builder setCreationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }

        public Builder setDeprecated(DeprecationStatusResponse deprecated) {
            this.deprecated = Objects.requireNonNull(deprecated);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDiskSizeGb(String diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }

        public Builder setFamily(String family) {
            this.family = Objects.requireNonNull(family);
            return this;
        }

        public Builder setGuestOsFeatures(List<GuestOsFeatureResponse> guestOsFeatures) {
            this.guestOsFeatures = Objects.requireNonNull(guestOsFeatures);
            return this;
        }

        public Builder setImageEncryptionKey(CustomerEncryptionKeyResponse imageEncryptionKey) {
            this.imageEncryptionKey = Objects.requireNonNull(imageEncryptionKey);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLabelFingerprint(String labelFingerprint) {
            this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLicenseCodes(List<String> licenseCodes) {
            this.licenseCodes = Objects.requireNonNull(licenseCodes);
            return this;
        }

        public Builder setLicenses(List<String> licenses) {
            this.licenses = Objects.requireNonNull(licenses);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRawDisk(ImageRawDiskResponse rawDisk) {
            this.rawDisk = Objects.requireNonNull(rawDisk);
            return this;
        }

        public Builder setSatisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setShieldedInstanceInitialState(InitialStateConfigResponse shieldedInstanceInitialState) {
            this.shieldedInstanceInitialState = Objects.requireNonNull(shieldedInstanceInitialState);
            return this;
        }

        public Builder setSourceDisk(String sourceDisk) {
            this.sourceDisk = Objects.requireNonNull(sourceDisk);
            return this;
        }

        public Builder setSourceDiskEncryptionKey(CustomerEncryptionKeyResponse sourceDiskEncryptionKey) {
            this.sourceDiskEncryptionKey = Objects.requireNonNull(sourceDiskEncryptionKey);
            return this;
        }

        public Builder setSourceDiskId(String sourceDiskId) {
            this.sourceDiskId = Objects.requireNonNull(sourceDiskId);
            return this;
        }

        public Builder setSourceImage(String sourceImage) {
            this.sourceImage = Objects.requireNonNull(sourceImage);
            return this;
        }

        public Builder setSourceImageEncryptionKey(CustomerEncryptionKeyResponse sourceImageEncryptionKey) {
            this.sourceImageEncryptionKey = Objects.requireNonNull(sourceImageEncryptionKey);
            return this;
        }

        public Builder setSourceImageId(String sourceImageId) {
            this.sourceImageId = Objects.requireNonNull(sourceImageId);
            return this;
        }

        public Builder setSourceSnapshot(String sourceSnapshot) {
            this.sourceSnapshot = Objects.requireNonNull(sourceSnapshot);
            return this;
        }

        public Builder setSourceSnapshotEncryptionKey(CustomerEncryptionKeyResponse sourceSnapshotEncryptionKey) {
            this.sourceSnapshotEncryptionKey = Objects.requireNonNull(sourceSnapshotEncryptionKey);
            return this;
        }

        public Builder setSourceSnapshotId(String sourceSnapshotId) {
            this.sourceSnapshotId = Objects.requireNonNull(sourceSnapshotId);
            return this;
        }

        public Builder setSourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setStorageLocations(List<String> storageLocations) {
            this.storageLocations = Objects.requireNonNull(storageLocations);
            return this;
        }

        public GetImageResult build() {
            return new GetImageResult(archiveSizeBytes, creationTimestamp, deprecated, description, diskSizeGb, family, guestOsFeatures, imageEncryptionKey, kind, labelFingerprint, labels, licenseCodes, licenses, name, rawDisk, satisfiesPzs, selfLink, shieldedInstanceInitialState, sourceDisk, sourceDiskEncryptionKey, sourceDiskId, sourceImage, sourceImageEncryptionKey, sourceImageId, sourceSnapshot, sourceSnapshotEncryptionKey, sourceSnapshotId, sourceType, status, storageLocations);
        }
    }
}
