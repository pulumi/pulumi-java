// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.apigee_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AliasArgs extends io.pulumi.resources.ResourceArgs {

    public static final AliasArgs Empty = new AliasArgs();

    @InputImport(name="alias")
      private final @Nullable Output<String> alias;

    public Output<String> getAlias() {
        return this.alias == null ? Output.empty() : this.alias;
    }

    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     * 
     */
    @InputImport(name="contentType")
      private final @Nullable Output<String> contentType;

    public Output<String> getContentType() {
        return this.contentType == null ? Output.empty() : this.contentType;
    }

    /**
     * The HTTP request/response body as raw binary.
     * 
     */
    @InputImport(name="data")
      private final @Nullable Output<String> data;

    public Output<String> getData() {
        return this.data == null ? Output.empty() : this.data;
    }

    @InputImport(name="environmentId", required=true)
      private final Output<String> environmentId;

    public Output<String> getEnvironmentId() {
        return this.environmentId;
    }

    /**
     * Application specific response metadata. Must be set in the first response for streaming APIs.
     * 
     */
    @InputImport(name="extensions")
      private final @Nullable Output<List<Map<String,String>>> extensions;

    public Output<List<Map<String,String>>> getExtensions() {
        return this.extensions == null ? Output.empty() : this.extensions;
    }

    @InputImport(name="format", required=true)
      private final Output<String> format;

    public Output<String> getFormat() {
        return this.format;
    }

    @InputImport(name="ignoreExpiryValidation")
      private final @Nullable Output<String> ignoreExpiryValidation;

    public Output<String> getIgnoreExpiryValidation() {
        return this.ignoreExpiryValidation == null ? Output.empty() : this.ignoreExpiryValidation;
    }

    @InputImport(name="ignoreNewlineValidation")
      private final @Nullable Output<String> ignoreNewlineValidation;

    public Output<String> getIgnoreNewlineValidation() {
        return this.ignoreNewlineValidation == null ? Output.empty() : this.ignoreNewlineValidation;
    }

    @InputImport(name="keystoreId", required=true)
      private final Output<String> keystoreId;

    public Output<String> getKeystoreId() {
        return this.keystoreId;
    }

    @InputImport(name="organizationId", required=true)
      private final Output<String> organizationId;

    public Output<String> getOrganizationId() {
        return this.organizationId;
    }

    public AliasArgs(
        @Nullable Output<String> alias,
        @Nullable Output<String> contentType,
        @Nullable Output<String> data,
        Output<String> environmentId,
        @Nullable Output<List<Map<String,String>>> extensions,
        Output<String> format,
        @Nullable Output<String> ignoreExpiryValidation,
        @Nullable Output<String> ignoreNewlineValidation,
        Output<String> keystoreId,
        Output<String> organizationId) {
        this.alias = alias;
        this.contentType = contentType;
        this.data = data;
        this.environmentId = Objects.requireNonNull(environmentId, "expected parameter 'environmentId' to be non-null");
        this.extensions = extensions;
        this.format = Objects.requireNonNull(format, "expected parameter 'format' to be non-null");
        this.ignoreExpiryValidation = ignoreExpiryValidation;
        this.ignoreNewlineValidation = ignoreNewlineValidation;
        this.keystoreId = Objects.requireNonNull(keystoreId, "expected parameter 'keystoreId' to be non-null");
        this.organizationId = Objects.requireNonNull(organizationId, "expected parameter 'organizationId' to be non-null");
    }

    private AliasArgs() {
        this.alias = Output.empty();
        this.contentType = Output.empty();
        this.data = Output.empty();
        this.environmentId = Output.empty();
        this.extensions = Output.empty();
        this.format = Output.empty();
        this.ignoreExpiryValidation = Output.empty();
        this.ignoreNewlineValidation = Output.empty();
        this.keystoreId = Output.empty();
        this.organizationId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> alias;
        private @Nullable Output<String> contentType;
        private @Nullable Output<String> data;
        private Output<String> environmentId;
        private @Nullable Output<List<Map<String,String>>> extensions;
        private Output<String> format;
        private @Nullable Output<String> ignoreExpiryValidation;
        private @Nullable Output<String> ignoreNewlineValidation;
        private Output<String> keystoreId;
        private Output<String> organizationId;

        public Builder() {
    	      // Empty
        }

        public Builder(AliasArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.contentType = defaults.contentType;
    	      this.data = defaults.data;
    	      this.environmentId = defaults.environmentId;
    	      this.extensions = defaults.extensions;
    	      this.format = defaults.format;
    	      this.ignoreExpiryValidation = defaults.ignoreExpiryValidation;
    	      this.ignoreNewlineValidation = defaults.ignoreNewlineValidation;
    	      this.keystoreId = defaults.keystoreId;
    	      this.organizationId = defaults.organizationId;
        }

        public Builder alias(@Nullable Output<String> alias) {
            this.alias = alias;
            return this;
        }

        public Builder alias(@Nullable String alias) {
            this.alias = Output.ofNullable(alias);
            return this;
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder contentType(@Nullable String contentType) {
            this.contentType = Output.ofNullable(contentType);
            return this;
        }

        public Builder data(@Nullable Output<String> data) {
            this.data = data;
            return this;
        }

        public Builder data(@Nullable String data) {
            this.data = Output.ofNullable(data);
            return this;
        }

        public Builder environmentId(Output<String> environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId);
            return this;
        }

        public Builder environmentId(String environmentId) {
            this.environmentId = Output.of(Objects.requireNonNull(environmentId));
            return this;
        }

        public Builder extensions(@Nullable Output<List<Map<String,String>>> extensions) {
            this.extensions = extensions;
            return this;
        }

        public Builder extensions(@Nullable List<Map<String,String>> extensions) {
            this.extensions = Output.ofNullable(extensions);
            return this;
        }

        public Builder format(Output<String> format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }

        public Builder format(String format) {
            this.format = Output.of(Objects.requireNonNull(format));
            return this;
        }

        public Builder ignoreExpiryValidation(@Nullable Output<String> ignoreExpiryValidation) {
            this.ignoreExpiryValidation = ignoreExpiryValidation;
            return this;
        }

        public Builder ignoreExpiryValidation(@Nullable String ignoreExpiryValidation) {
            this.ignoreExpiryValidation = Output.ofNullable(ignoreExpiryValidation);
            return this;
        }

        public Builder ignoreNewlineValidation(@Nullable Output<String> ignoreNewlineValidation) {
            this.ignoreNewlineValidation = ignoreNewlineValidation;
            return this;
        }

        public Builder ignoreNewlineValidation(@Nullable String ignoreNewlineValidation) {
            this.ignoreNewlineValidation = Output.ofNullable(ignoreNewlineValidation);
            return this;
        }

        public Builder keystoreId(Output<String> keystoreId) {
            this.keystoreId = Objects.requireNonNull(keystoreId);
            return this;
        }

        public Builder keystoreId(String keystoreId) {
            this.keystoreId = Output.of(Objects.requireNonNull(keystoreId));
            return this;
        }

        public Builder organizationId(Output<String> organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Output.of(Objects.requireNonNull(organizationId));
            return this;
        }
        public AliasArgs build() {
            return new AliasArgs(alias, contentType, data, environmentId, extensions, format, ignoreExpiryValidation, ignoreNewlineValidation, keystoreId, organizationId);
        }
    }
}
