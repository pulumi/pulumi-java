// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datacatalog_v1beta1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyTagArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyTagArgs Empty = new PolicyTagArgs();

    /**
     * Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Resource name of this policy tag's parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.
     * 
     */
    @Import(name="parentPolicyTag")
      private final @Nullable Output<String> parentPolicyTag;

    public Output<String> parentPolicyTag() {
        return this.parentPolicyTag == null ? Codegen.empty() : this.parentPolicyTag;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="taxonomyId", required=true)
      private final Output<String> taxonomyId;

    public Output<String> taxonomyId() {
        return this.taxonomyId;
    }

    public PolicyTagArgs(
        @Nullable Output<String> description,
        Output<String> displayName,
        @Nullable Output<String> location,
        @Nullable Output<String> parentPolicyTag,
        @Nullable Output<String> project,
        Output<String> taxonomyId) {
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.location = location;
        this.parentPolicyTag = parentPolicyTag;
        this.project = project;
        this.taxonomyId = Objects.requireNonNull(taxonomyId, "expected parameter 'taxonomyId' to be non-null");
    }

    private PolicyTagArgs() {
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.location = Codegen.empty();
        this.parentPolicyTag = Codegen.empty();
        this.project = Codegen.empty();
        this.taxonomyId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyTagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> parentPolicyTag;
        private @Nullable Output<String> project;
        private Output<String> taxonomyId;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyTagArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.location = defaults.location;
    	      this.parentPolicyTag = defaults.parentPolicyTag;
    	      this.project = defaults.project;
    	      this.taxonomyId = defaults.taxonomyId;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder parentPolicyTag(@Nullable Output<String> parentPolicyTag) {
            this.parentPolicyTag = parentPolicyTag;
            return this;
        }
        public Builder parentPolicyTag(@Nullable String parentPolicyTag) {
            this.parentPolicyTag = Codegen.ofNullable(parentPolicyTag);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder taxonomyId(Output<String> taxonomyId) {
            this.taxonomyId = Objects.requireNonNull(taxonomyId);
            return this;
        }
        public Builder taxonomyId(String taxonomyId) {
            this.taxonomyId = Output.of(Objects.requireNonNull(taxonomyId));
            return this;
        }        public PolicyTagArgs build() {
            return new PolicyTagArgs(description, displayName, location, parentPolicyTag, project, taxonomyId);
        }
    }
}
