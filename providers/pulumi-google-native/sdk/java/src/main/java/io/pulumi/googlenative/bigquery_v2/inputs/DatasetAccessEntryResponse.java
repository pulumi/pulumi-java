// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetReferenceResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DatasetAccessEntryResponse extends io.pulumi.resources.InvokeArgs {

    public static final DatasetAccessEntryResponse Empty = new DatasetAccessEntryResponse();

    /**
     * [Required] The dataset this entry applies to.
     * 
     */
    @InputImport(name="dataset", required=true)
    private final DatasetReferenceResponse dataset;

    public DatasetReferenceResponse getDataset() {
        return this.dataset;
    }

    @InputImport(name="targetTypes", required=true)
    private final List<String> targetTypes;

    public List<String> getTargetTypes() {
        return this.targetTypes;
    }

    public DatasetAccessEntryResponse(
        DatasetReferenceResponse dataset,
        List<String> targetTypes) {
        this.dataset = Objects.requireNonNull(dataset, "expected parameter 'dataset' to be non-null");
        this.targetTypes = Objects.requireNonNull(targetTypes, "expected parameter 'targetTypes' to be non-null");
    }

    private DatasetAccessEntryResponse() {
        this.dataset = null;
        this.targetTypes = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetAccessEntryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetReferenceResponse dataset;
        private List<String> targetTypes;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetAccessEntryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.targetTypes = defaults.targetTypes;
        }

        public Builder setDataset(DatasetReferenceResponse dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }

        public Builder setTargetTypes(List<String> targetTypes) {
            this.targetTypes = Objects.requireNonNull(targetTypes);
            return this;
        }

        public DatasetAccessEntryResponse build() {
            return new DatasetAccessEntryResponse(dataset, targetTypes);
        }
    }
}
