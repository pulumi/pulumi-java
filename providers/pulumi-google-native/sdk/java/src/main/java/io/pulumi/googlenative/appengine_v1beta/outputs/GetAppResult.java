// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.appengine_v1beta.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.appengine_v1beta.outputs.FeatureSettingsResponse;
import io.pulumi.googlenative.appengine_v1beta.outputs.IdentityAwareProxyResponse;
import io.pulumi.googlenative.appengine_v1beta.outputs.UrlDispatchRuleResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetAppResult {
    private final String authDomain;
    private final String codeBucket;
    private final String databaseType;
    private final String defaultBucket;
    private final String defaultCookieExpiration;
    private final String defaultHostname;
    private final List<UrlDispatchRuleResponse> dispatchRules;
    private final FeatureSettingsResponse featureSettings;
    private final String gcrDomain;
    private final IdentityAwareProxyResponse iap;
    private final String location;
    private final String name;
    private final String serviceAccount;
    private final String servingStatus;

    @OutputCustomType.Constructor({"authDomain","codeBucket","databaseType","defaultBucket","defaultCookieExpiration","defaultHostname","dispatchRules","featureSettings","gcrDomain","iap","location","name","serviceAccount","servingStatus"})
    private GetAppResult(
        String authDomain,
        String codeBucket,
        String databaseType,
        String defaultBucket,
        String defaultCookieExpiration,
        String defaultHostname,
        List<UrlDispatchRuleResponse> dispatchRules,
        FeatureSettingsResponse featureSettings,
        String gcrDomain,
        IdentityAwareProxyResponse iap,
        String location,
        String name,
        String serviceAccount,
        String servingStatus) {
        this.authDomain = Objects.requireNonNull(authDomain);
        this.codeBucket = Objects.requireNonNull(codeBucket);
        this.databaseType = Objects.requireNonNull(databaseType);
        this.defaultBucket = Objects.requireNonNull(defaultBucket);
        this.defaultCookieExpiration = Objects.requireNonNull(defaultCookieExpiration);
        this.defaultHostname = Objects.requireNonNull(defaultHostname);
        this.dispatchRules = Objects.requireNonNull(dispatchRules);
        this.featureSettings = Objects.requireNonNull(featureSettings);
        this.gcrDomain = Objects.requireNonNull(gcrDomain);
        this.iap = Objects.requireNonNull(iap);
        this.location = Objects.requireNonNull(location);
        this.name = Objects.requireNonNull(name);
        this.serviceAccount = Objects.requireNonNull(serviceAccount);
        this.servingStatus = Objects.requireNonNull(servingStatus);
    }

    public String getAuthDomain() {
        return this.authDomain;
    }
    public String getCodeBucket() {
        return this.codeBucket;
    }
    public String getDatabaseType() {
        return this.databaseType;
    }
    public String getDefaultBucket() {
        return this.defaultBucket;
    }
    public String getDefaultCookieExpiration() {
        return this.defaultCookieExpiration;
    }
    public String getDefaultHostname() {
        return this.defaultHostname;
    }
    public List<UrlDispatchRuleResponse> getDispatchRules() {
        return this.dispatchRules;
    }
    public FeatureSettingsResponse getFeatureSettings() {
        return this.featureSettings;
    }
    public String getGcrDomain() {
        return this.gcrDomain;
    }
    public IdentityAwareProxyResponse getIap() {
        return this.iap;
    }
    public String getLocation() {
        return this.location;
    }
    public String getName() {
        return this.name;
    }
    public String getServiceAccount() {
        return this.serviceAccount;
    }
    public String getServingStatus() {
        return this.servingStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String authDomain;
        private String codeBucket;
        private String databaseType;
        private String defaultBucket;
        private String defaultCookieExpiration;
        private String defaultHostname;
        private List<UrlDispatchRuleResponse> dispatchRules;
        private FeatureSettingsResponse featureSettings;
        private String gcrDomain;
        private IdentityAwareProxyResponse iap;
        private String location;
        private String name;
        private String serviceAccount;
        private String servingStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authDomain = defaults.authDomain;
    	      this.codeBucket = defaults.codeBucket;
    	      this.databaseType = defaults.databaseType;
    	      this.defaultBucket = defaults.defaultBucket;
    	      this.defaultCookieExpiration = defaults.defaultCookieExpiration;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.dispatchRules = defaults.dispatchRules;
    	      this.featureSettings = defaults.featureSettings;
    	      this.gcrDomain = defaults.gcrDomain;
    	      this.iap = defaults.iap;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.servingStatus = defaults.servingStatus;
        }

        public Builder setAuthDomain(String authDomain) {
            this.authDomain = Objects.requireNonNull(authDomain);
            return this;
        }

        public Builder setCodeBucket(String codeBucket) {
            this.codeBucket = Objects.requireNonNull(codeBucket);
            return this;
        }

        public Builder setDatabaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }

        public Builder setDefaultBucket(String defaultBucket) {
            this.defaultBucket = Objects.requireNonNull(defaultBucket);
            return this;
        }

        public Builder setDefaultCookieExpiration(String defaultCookieExpiration) {
            this.defaultCookieExpiration = Objects.requireNonNull(defaultCookieExpiration);
            return this;
        }

        public Builder setDefaultHostname(String defaultHostname) {
            this.defaultHostname = Objects.requireNonNull(defaultHostname);
            return this;
        }

        public Builder setDispatchRules(List<UrlDispatchRuleResponse> dispatchRules) {
            this.dispatchRules = Objects.requireNonNull(dispatchRules);
            return this;
        }

        public Builder setFeatureSettings(FeatureSettingsResponse featureSettings) {
            this.featureSettings = Objects.requireNonNull(featureSettings);
            return this;
        }

        public Builder setGcrDomain(String gcrDomain) {
            this.gcrDomain = Objects.requireNonNull(gcrDomain);
            return this;
        }

        public Builder setIap(IdentityAwareProxyResponse iap) {
            this.iap = Objects.requireNonNull(iap);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setServiceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setServingStatus(String servingStatus) {
            this.servingStatus = Objects.requireNonNull(servingStatus);
            return this;
        }

        public GetAppResult build() {
            return new GetAppResult(authDomain, codeBucket, databaseType, defaultBucket, defaultCookieExpiration, defaultHostname, dispatchRules, featureSettings, gcrDomain, iap, location, name, serviceAccount, servingStatus);
        }
    }
}
