// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.containeranalysis_v1.outputs.BuilderConfigResponse;
import io.pulumi.googlenative.containeranalysis_v1.outputs.MetadataResponse;
import io.pulumi.googlenative.containeranalysis_v1.outputs.RecipeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class InTotoProvenanceResponse {
    /**
     * required
     * 
     */
    private final BuilderConfigResponse builderConfig;
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
     */
    private final List<String> materials;
    private final MetadataResponse metadata;
    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
     */
    private final RecipeResponse recipe;

    @OutputCustomType.Constructor
    private InTotoProvenanceResponse(
        @OutputCustomType.Parameter("builderConfig") BuilderConfigResponse builderConfig,
        @OutputCustomType.Parameter("materials") List<String> materials,
        @OutputCustomType.Parameter("metadata") MetadataResponse metadata,
        @OutputCustomType.Parameter("recipe") RecipeResponse recipe) {
        this.builderConfig = builderConfig;
        this.materials = materials;
        this.metadata = metadata;
        this.recipe = recipe;
    }

    /**
     * required
     * 
    */
    public BuilderConfigResponse getBuilderConfig() {
        return this.builderConfig;
    }
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     * 
    */
    public List<String> getMaterials() {
        return this.materials;
    }
    public MetadataResponse getMetadata() {
        return this.metadata;
    }
    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     * 
    */
    public RecipeResponse getRecipe() {
        return this.recipe;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InTotoProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuilderConfigResponse builderConfig;
        private List<String> materials;
        private MetadataResponse metadata;
        private RecipeResponse recipe;

        public Builder() {
    	      // Empty
        }

        public Builder(InTotoProvenanceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.builderConfig = defaults.builderConfig;
    	      this.materials = defaults.materials;
    	      this.metadata = defaults.metadata;
    	      this.recipe = defaults.recipe;
        }

        public Builder setBuilderConfig(BuilderConfigResponse builderConfig) {
            this.builderConfig = Objects.requireNonNull(builderConfig);
            return this;
        }

        public Builder setMaterials(List<String> materials) {
            this.materials = Objects.requireNonNull(materials);
            return this;
        }

        public Builder setMetadata(MetadataResponse metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setRecipe(RecipeResponse recipe) {
            this.recipe = Objects.requireNonNull(recipe);
            return this;
        }
        public InTotoProvenanceResponse build() {
            return new InTotoProvenanceResponse(builderConfig, materials, metadata, recipe);
        }
    }
}
