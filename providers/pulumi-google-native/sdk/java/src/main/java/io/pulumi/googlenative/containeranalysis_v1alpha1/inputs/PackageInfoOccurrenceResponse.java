// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.LicenseResponse;
import java.lang.String;
import java.util.Objects;


public final class PackageInfoOccurrenceResponse extends io.pulumi.resources.InvokeArgs {

    public static final PackageInfoOccurrenceResponse Empty = new PackageInfoOccurrenceResponse();

    @InputImport(name="comment", required=true)
    private final String comment;

    public String getComment() {
        return this.comment;
    }

    @InputImport(name="filename", required=true)
    private final String filename;

    public String getFilename() {
        return this.filename;
    }

    @InputImport(name="homePage", required=true)
    private final String homePage;

    public String getHomePage() {
        return this.homePage;
    }

    @InputImport(name="licenseConcluded", required=true)
    private final LicenseResponse licenseConcluded;

    public LicenseResponse getLicenseConcluded() {
        return this.licenseConcluded;
    }

    @InputImport(name="packageType", required=true)
    private final String packageType;

    public String getPackageType() {
        return this.packageType;
    }

    @InputImport(name="sourceInfo", required=true)
    private final String sourceInfo;

    public String getSourceInfo() {
        return this.sourceInfo;
    }

    @InputImport(name="summaryDescription", required=true)
    private final String summaryDescription;

    public String getSummaryDescription() {
        return this.summaryDescription;
    }

    @InputImport(name="title", required=true)
    private final String title;

    public String getTitle() {
        return this.title;
    }

    @InputImport(name="version", required=true)
    private final String version;

    public String getVersion() {
        return this.version;
    }

    public PackageInfoOccurrenceResponse(
        String comment,
        String filename,
        String homePage,
        LicenseResponse licenseConcluded,
        String packageType,
        String sourceInfo,
        String summaryDescription,
        String title,
        String version) {
        this.comment = Objects.requireNonNull(comment, "expected parameter 'comment' to be non-null");
        this.filename = Objects.requireNonNull(filename, "expected parameter 'filename' to be non-null");
        this.homePage = Objects.requireNonNull(homePage, "expected parameter 'homePage' to be non-null");
        this.licenseConcluded = Objects.requireNonNull(licenseConcluded, "expected parameter 'licenseConcluded' to be non-null");
        this.packageType = Objects.requireNonNull(packageType, "expected parameter 'packageType' to be non-null");
        this.sourceInfo = Objects.requireNonNull(sourceInfo, "expected parameter 'sourceInfo' to be non-null");
        this.summaryDescription = Objects.requireNonNull(summaryDescription, "expected parameter 'summaryDescription' to be non-null");
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private PackageInfoOccurrenceResponse() {
        this.comment = null;
        this.filename = null;
        this.homePage = null;
        this.licenseConcluded = null;
        this.packageType = null;
        this.sourceInfo = null;
        this.summaryDescription = null;
        this.title = null;
        this.version = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackageInfoOccurrenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String comment;
        private String filename;
        private String homePage;
        private LicenseResponse licenseConcluded;
        private String packageType;
        private String sourceInfo;
        private String summaryDescription;
        private String title;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(PackageInfoOccurrenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.filename = defaults.filename;
    	      this.homePage = defaults.homePage;
    	      this.licenseConcluded = defaults.licenseConcluded;
    	      this.packageType = defaults.packageType;
    	      this.sourceInfo = defaults.sourceInfo;
    	      this.summaryDescription = defaults.summaryDescription;
    	      this.title = defaults.title;
    	      this.version = defaults.version;
        }

        public Builder setComment(String comment) {
            this.comment = Objects.requireNonNull(comment);
            return this;
        }

        public Builder setFilename(String filename) {
            this.filename = Objects.requireNonNull(filename);
            return this;
        }

        public Builder setHomePage(String homePage) {
            this.homePage = Objects.requireNonNull(homePage);
            return this;
        }

        public Builder setLicenseConcluded(LicenseResponse licenseConcluded) {
            this.licenseConcluded = Objects.requireNonNull(licenseConcluded);
            return this;
        }

        public Builder setPackageType(String packageType) {
            this.packageType = Objects.requireNonNull(packageType);
            return this;
        }

        public Builder setSourceInfo(String sourceInfo) {
            this.sourceInfo = Objects.requireNonNull(sourceInfo);
            return this;
        }

        public Builder setSummaryDescription(String summaryDescription) {
            this.summaryDescription = Objects.requireNonNull(summaryDescription);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public PackageInfoOccurrenceResponse build() {
            return new PackageInfoOccurrenceResponse(comment, filename, homePage, licenseConcluded, packageType, sourceInfo, summaryDescription, title, version);
        }
    }
}
