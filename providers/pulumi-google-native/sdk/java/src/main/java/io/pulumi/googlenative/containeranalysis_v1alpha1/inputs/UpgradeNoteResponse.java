// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.UpgradeDistributionResponse;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.VersionResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
 * 
 */
public final class UpgradeNoteResponse extends io.pulumi.resources.InvokeArgs {

    public static final UpgradeNoteResponse Empty = new UpgradeNoteResponse();

    /**
     * Metadata about the upgrade for each specific operating system.
     * 
     */
    @Import(name="distributions", required=true)
      private final List<UpgradeDistributionResponse> distributions;

    public List<UpgradeDistributionResponse> getDistributions() {
        return this.distributions;
    }

    /**
     * Required - The package this Upgrade is for.
     * 
     */
    @Import(name="package", required=true)
      private final String $package;

    public String get$package() {
        return this.$package;
    }

    /**
     * Required - The version of the package in machine + human readable form.
     * 
     */
    @Import(name="version", required=true)
      private final VersionResponse version;

    public VersionResponse getVersion() {
        return this.version;
    }

    public UpgradeNoteResponse(
        List<UpgradeDistributionResponse> distributions,
        String $package,
        VersionResponse version) {
        this.distributions = Objects.requireNonNull(distributions, "expected parameter 'distributions' to be non-null");
        this.$package = Objects.requireNonNull($package, "expected parameter '$package' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private UpgradeNoteResponse() {
        this.distributions = List.of();
        this.$package = null;
        this.version = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpgradeNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<UpgradeDistributionResponse> distributions;
        private String $package;
        private VersionResponse version;

        public Builder() {
    	      // Empty
        }

        public Builder(UpgradeNoteResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributions = defaults.distributions;
    	      this.$package = defaults.$package;
    	      this.version = defaults.version;
        }

        public Builder distributions(List<UpgradeDistributionResponse> distributions) {
            this.distributions = Objects.requireNonNull(distributions);
            return this;
        }

        public Builder $package(String $package) {
            this.$package = Objects.requireNonNull($package);
            return this;
        }

        public Builder version(VersionResponse version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public UpgradeNoteResponse build() {
            return new UpgradeNoteResponse(distributions, $package, version);
        }
    }
}
