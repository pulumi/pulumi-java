// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call.
 * 
 */
public final class MetricRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricRuleArgs Empty = new MetricRuleArgs();

    /**
     * Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    @Import(name="metricCosts")
      private final @Nullable Output<Map<String,String>> metricCosts;

    public Output<Map<String,String>> getMetricCosts() {
        return this.metricCosts == null ? Output.empty() : this.metricCosts;
    }

    /**
     * Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<String> selector;

    public Output<String> getSelector() {
        return this.selector == null ? Output.empty() : this.selector;
    }

    public MetricRuleArgs(
        @Nullable Output<Map<String,String>> metricCosts,
        @Nullable Output<String> selector) {
        this.metricCosts = metricCosts;
        this.selector = selector;
    }

    private MetricRuleArgs() {
        this.metricCosts = Output.empty();
        this.selector = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> metricCosts;
        private @Nullable Output<String> selector;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricCosts = defaults.metricCosts;
    	      this.selector = defaults.selector;
        }

        public Builder metricCosts(@Nullable Output<Map<String,String>> metricCosts) {
            this.metricCosts = metricCosts;
            return this;
        }
        public Builder metricCosts(@Nullable Map<String,String> metricCosts) {
            this.metricCosts = Output.ofNullable(metricCosts);
            return this;
        }
        public Builder selector(@Nullable Output<String> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable String selector) {
            this.selector = Output.ofNullable(selector);
            return this;
        }        public MetricRuleArgs build() {
            return new MetricRuleArgs(metricCosts, selector);
        }
    }
}
