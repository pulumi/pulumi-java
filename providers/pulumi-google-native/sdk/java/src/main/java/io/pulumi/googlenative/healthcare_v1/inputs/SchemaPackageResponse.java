// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.healthcare_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.healthcare_v1.inputs.Hl7SchemaConfigResponse;
import io.pulumi.googlenative.healthcare_v1.inputs.Hl7TypesConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SchemaPackageResponse extends io.pulumi.resources.InvokeArgs {

    public static final SchemaPackageResponse Empty = new SchemaPackageResponse();

    @InputImport(name="ignoreMinOccurs", required=true)
    private final Boolean ignoreMinOccurs;

    public Boolean getIgnoreMinOccurs() {
        return this.ignoreMinOccurs;
    }

    @InputImport(name="schemas", required=true)
    private final List<Hl7SchemaConfigResponse> schemas;

    public List<Hl7SchemaConfigResponse> getSchemas() {
        return this.schemas;
    }

    @InputImport(name="schematizedParsingType", required=true)
    private final String schematizedParsingType;

    public String getSchematizedParsingType() {
        return this.schematizedParsingType;
    }

    @InputImport(name="types", required=true)
    private final List<Hl7TypesConfigResponse> types;

    public List<Hl7TypesConfigResponse> getTypes() {
        return this.types;
    }

    @InputImport(name="unexpectedSegmentHandling", required=true)
    private final String unexpectedSegmentHandling;

    public String getUnexpectedSegmentHandling() {
        return this.unexpectedSegmentHandling;
    }

    public SchemaPackageResponse(
        Boolean ignoreMinOccurs,
        List<Hl7SchemaConfigResponse> schemas,
        String schematizedParsingType,
        List<Hl7TypesConfigResponse> types,
        String unexpectedSegmentHandling) {
        this.ignoreMinOccurs = Objects.requireNonNull(ignoreMinOccurs, "expected parameter 'ignoreMinOccurs' to be non-null");
        this.schemas = Objects.requireNonNull(schemas, "expected parameter 'schemas' to be non-null");
        this.schematizedParsingType = Objects.requireNonNull(schematizedParsingType, "expected parameter 'schematizedParsingType' to be non-null");
        this.types = Objects.requireNonNull(types, "expected parameter 'types' to be non-null");
        this.unexpectedSegmentHandling = Objects.requireNonNull(unexpectedSegmentHandling, "expected parameter 'unexpectedSegmentHandling' to be non-null");
    }

    private SchemaPackageResponse() {
        this.ignoreMinOccurs = null;
        this.schemas = List.of();
        this.schematizedParsingType = null;
        this.types = List.of();
        this.unexpectedSegmentHandling = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaPackageResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean ignoreMinOccurs;
        private List<Hl7SchemaConfigResponse> schemas;
        private String schematizedParsingType;
        private List<Hl7TypesConfigResponse> types;
        private String unexpectedSegmentHandling;

        public Builder() {
    	      // Empty
        }

        public Builder(SchemaPackageResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreMinOccurs = defaults.ignoreMinOccurs;
    	      this.schemas = defaults.schemas;
    	      this.schematizedParsingType = defaults.schematizedParsingType;
    	      this.types = defaults.types;
    	      this.unexpectedSegmentHandling = defaults.unexpectedSegmentHandling;
        }

        public Builder setIgnoreMinOccurs(Boolean ignoreMinOccurs) {
            this.ignoreMinOccurs = Objects.requireNonNull(ignoreMinOccurs);
            return this;
        }

        public Builder setSchemas(List<Hl7SchemaConfigResponse> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }

        public Builder setSchematizedParsingType(String schematizedParsingType) {
            this.schematizedParsingType = Objects.requireNonNull(schematizedParsingType);
            return this;
        }

        public Builder setTypes(List<Hl7TypesConfigResponse> types) {
            this.types = Objects.requireNonNull(types);
            return this;
        }

        public Builder setUnexpectedSegmentHandling(String unexpectedSegmentHandling) {
            this.unexpectedSegmentHandling = Objects.requireNonNull(unexpectedSegmentHandling);
            return this;
        }

        public SchemaPackageResponse build() {
            return new SchemaPackageResponse(ignoreMinOccurs, schemas, schematizedParsingType, types, unexpectedSegmentHandling);
        }
    }
}
