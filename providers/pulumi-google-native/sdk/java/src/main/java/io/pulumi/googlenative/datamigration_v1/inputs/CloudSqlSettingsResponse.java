// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.datamigration_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.datamigration_v1.inputs.SqlIpConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class CloudSqlSettingsResponse extends io.pulumi.resources.InvokeArgs {

    public static final CloudSqlSettingsResponse Empty = new CloudSqlSettingsResponse();

    @InputImport(name="activationPolicy", required=true)
    private final String activationPolicy;

    public String getActivationPolicy() {
        return this.activationPolicy;
    }

    @InputImport(name="autoStorageIncrease", required=true)
    private final Boolean autoStorageIncrease;

    public Boolean getAutoStorageIncrease() {
        return this.autoStorageIncrease;
    }

    @InputImport(name="cmekKeyName", required=true)
    private final String cmekKeyName;

    public String getCmekKeyName() {
        return this.cmekKeyName;
    }

    @InputImport(name="collation", required=true)
    private final String collation;

    public String getCollation() {
        return this.collation;
    }

    @InputImport(name="dataDiskSizeGb", required=true)
    private final String dataDiskSizeGb;

    public String getDataDiskSizeGb() {
        return this.dataDiskSizeGb;
    }

    @InputImport(name="dataDiskType", required=true)
    private final String dataDiskType;

    public String getDataDiskType() {
        return this.dataDiskType;
    }

    @InputImport(name="databaseFlags", required=true)
    private final Map<String,String> databaseFlags;

    public Map<String,String> getDatabaseFlags() {
        return this.databaseFlags;
    }

    @InputImport(name="databaseVersion", required=true)
    private final String databaseVersion;

    public String getDatabaseVersion() {
        return this.databaseVersion;
    }

    @InputImport(name="ipConfig", required=true)
    private final SqlIpConfigResponse ipConfig;

    public SqlIpConfigResponse getIpConfig() {
        return this.ipConfig;
    }

    @InputImport(name="rootPassword", required=true)
    private final String rootPassword;

    public String getRootPassword() {
        return this.rootPassword;
    }

    @InputImport(name="rootPasswordSet", required=true)
    private final Boolean rootPasswordSet;

    public Boolean getRootPasswordSet() {
        return this.rootPasswordSet;
    }

    @InputImport(name="sourceId", required=true)
    private final String sourceId;

    public String getSourceId() {
        return this.sourceId;
    }

    @InputImport(name="storageAutoResizeLimit", required=true)
    private final String storageAutoResizeLimit;

    public String getStorageAutoResizeLimit() {
        return this.storageAutoResizeLimit;
    }

    @InputImport(name="tier", required=true)
    private final String tier;

    public String getTier() {
        return this.tier;
    }

    @InputImport(name="userLabels", required=true)
    private final Map<String,String> userLabels;

    public Map<String,String> getUserLabels() {
        return this.userLabels;
    }

    @InputImport(name="zone", required=true)
    private final String zone;

    public String getZone() {
        return this.zone;
    }

    public CloudSqlSettingsResponse(
        String activationPolicy,
        Boolean autoStorageIncrease,
        String cmekKeyName,
        String collation,
        String dataDiskSizeGb,
        String dataDiskType,
        Map<String,String> databaseFlags,
        String databaseVersion,
        SqlIpConfigResponse ipConfig,
        String rootPassword,
        Boolean rootPasswordSet,
        String sourceId,
        String storageAutoResizeLimit,
        String tier,
        Map<String,String> userLabels,
        String zone) {
        this.activationPolicy = Objects.requireNonNull(activationPolicy, "expected parameter 'activationPolicy' to be non-null");
        this.autoStorageIncrease = Objects.requireNonNull(autoStorageIncrease, "expected parameter 'autoStorageIncrease' to be non-null");
        this.cmekKeyName = Objects.requireNonNull(cmekKeyName, "expected parameter 'cmekKeyName' to be non-null");
        this.collation = Objects.requireNonNull(collation, "expected parameter 'collation' to be non-null");
        this.dataDiskSizeGb = Objects.requireNonNull(dataDiskSizeGb, "expected parameter 'dataDiskSizeGb' to be non-null");
        this.dataDiskType = Objects.requireNonNull(dataDiskType, "expected parameter 'dataDiskType' to be non-null");
        this.databaseFlags = Objects.requireNonNull(databaseFlags, "expected parameter 'databaseFlags' to be non-null");
        this.databaseVersion = Objects.requireNonNull(databaseVersion, "expected parameter 'databaseVersion' to be non-null");
        this.ipConfig = Objects.requireNonNull(ipConfig, "expected parameter 'ipConfig' to be non-null");
        this.rootPassword = Objects.requireNonNull(rootPassword, "expected parameter 'rootPassword' to be non-null");
        this.rootPasswordSet = Objects.requireNonNull(rootPasswordSet, "expected parameter 'rootPasswordSet' to be non-null");
        this.sourceId = Objects.requireNonNull(sourceId, "expected parameter 'sourceId' to be non-null");
        this.storageAutoResizeLimit = Objects.requireNonNull(storageAutoResizeLimit, "expected parameter 'storageAutoResizeLimit' to be non-null");
        this.tier = Objects.requireNonNull(tier, "expected parameter 'tier' to be non-null");
        this.userLabels = Objects.requireNonNull(userLabels, "expected parameter 'userLabels' to be non-null");
        this.zone = Objects.requireNonNull(zone, "expected parameter 'zone' to be non-null");
    }

    private CloudSqlSettingsResponse() {
        this.activationPolicy = null;
        this.autoStorageIncrease = null;
        this.cmekKeyName = null;
        this.collation = null;
        this.dataDiskSizeGb = null;
        this.dataDiskType = null;
        this.databaseFlags = Map.of();
        this.databaseVersion = null;
        this.ipConfig = null;
        this.rootPassword = null;
        this.rootPasswordSet = null;
        this.sourceId = null;
        this.storageAutoResizeLimit = null;
        this.tier = null;
        this.userLabels = Map.of();
        this.zone = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudSqlSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String activationPolicy;
        private Boolean autoStorageIncrease;
        private String cmekKeyName;
        private String collation;
        private String dataDiskSizeGb;
        private String dataDiskType;
        private Map<String,String> databaseFlags;
        private String databaseVersion;
        private SqlIpConfigResponse ipConfig;
        private String rootPassword;
        private Boolean rootPasswordSet;
        private String sourceId;
        private String storageAutoResizeLimit;
        private String tier;
        private Map<String,String> userLabels;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(CloudSqlSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.autoStorageIncrease = defaults.autoStorageIncrease;
    	      this.cmekKeyName = defaults.cmekKeyName;
    	      this.collation = defaults.collation;
    	      this.dataDiskSizeGb = defaults.dataDiskSizeGb;
    	      this.dataDiskType = defaults.dataDiskType;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.ipConfig = defaults.ipConfig;
    	      this.rootPassword = defaults.rootPassword;
    	      this.rootPasswordSet = defaults.rootPasswordSet;
    	      this.sourceId = defaults.sourceId;
    	      this.storageAutoResizeLimit = defaults.storageAutoResizeLimit;
    	      this.tier = defaults.tier;
    	      this.userLabels = defaults.userLabels;
    	      this.zone = defaults.zone;
        }

        public Builder setActivationPolicy(String activationPolicy) {
            this.activationPolicy = Objects.requireNonNull(activationPolicy);
            return this;
        }

        public Builder setAutoStorageIncrease(Boolean autoStorageIncrease) {
            this.autoStorageIncrease = Objects.requireNonNull(autoStorageIncrease);
            return this;
        }

        public Builder setCmekKeyName(String cmekKeyName) {
            this.cmekKeyName = Objects.requireNonNull(cmekKeyName);
            return this;
        }

        public Builder setCollation(String collation) {
            this.collation = Objects.requireNonNull(collation);
            return this;
        }

        public Builder setDataDiskSizeGb(String dataDiskSizeGb) {
            this.dataDiskSizeGb = Objects.requireNonNull(dataDiskSizeGb);
            return this;
        }

        public Builder setDataDiskType(String dataDiskType) {
            this.dataDiskType = Objects.requireNonNull(dataDiskType);
            return this;
        }

        public Builder setDatabaseFlags(Map<String,String> databaseFlags) {
            this.databaseFlags = Objects.requireNonNull(databaseFlags);
            return this;
        }

        public Builder setDatabaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }

        public Builder setIpConfig(SqlIpConfigResponse ipConfig) {
            this.ipConfig = Objects.requireNonNull(ipConfig);
            return this;
        }

        public Builder setRootPassword(String rootPassword) {
            this.rootPassword = Objects.requireNonNull(rootPassword);
            return this;
        }

        public Builder setRootPasswordSet(Boolean rootPasswordSet) {
            this.rootPasswordSet = Objects.requireNonNull(rootPasswordSet);
            return this;
        }

        public Builder setSourceId(String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId);
            return this;
        }

        public Builder setStorageAutoResizeLimit(String storageAutoResizeLimit) {
            this.storageAutoResizeLimit = Objects.requireNonNull(storageAutoResizeLimit);
            return this;
        }

        public Builder setTier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }

        public Builder setUserLabels(Map<String,String> userLabels) {
            this.userLabels = Objects.requireNonNull(userLabels);
            return this;
        }

        public Builder setZone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }

        public CloudSqlSettingsResponse build() {
            return new CloudSqlSettingsResponse(activationPolicy, autoStorageIncrease, cmekKeyName, collation, dataDiskSizeGb, dataDiskType, databaseFlags, databaseVersion, ipConfig, rootPassword, rootPasswordSet, sourceId, storageAutoResizeLimit, tier, userLabels, zone);
        }
    }
}
