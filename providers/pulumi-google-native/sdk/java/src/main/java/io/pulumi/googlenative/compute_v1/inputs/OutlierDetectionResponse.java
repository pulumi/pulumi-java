// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.compute_v1.inputs.DurationResponse;
import java.lang.Integer;
import java.util.Objects;


/**
 * Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
 * 
 */
public final class OutlierDetectionResponse extends io.pulumi.resources.InvokeArgs {

    public static final OutlierDetectionResponse Empty = new OutlierDetectionResponse();

    /**
     * The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
     * 
     */
    @InputImport(name="baseEjectionTime", required=true)
      private final DurationResponse baseEjectionTime;

    public DurationResponse getBaseEjectionTime() {
        return this.baseEjectionTime;
    }

    /**
     * Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
     * 
     */
    @InputImport(name="consecutiveErrors", required=true)
      private final Integer consecutiveErrors;

    public Integer getConsecutiveErrors() {
        return this.consecutiveErrors;
    }

    /**
     * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
     * 
     */
    @InputImport(name="consecutiveGatewayFailure", required=true)
      private final Integer consecutiveGatewayFailure;

    public Integer getConsecutiveGatewayFailure() {
        return this.consecutiveGatewayFailure;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
     * 
     */
    @InputImport(name="enforcingConsecutiveErrors", required=true)
      private final Integer enforcingConsecutiveErrors;

    public Integer getEnforcingConsecutiveErrors() {
        return this.enforcingConsecutiveErrors;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    @InputImport(name="enforcingConsecutiveGatewayFailure", required=true)
      private final Integer enforcingConsecutiveGatewayFailure;

    public Integer getEnforcingConsecutiveGatewayFailure() {
        return this.enforcingConsecutiveGatewayFailure;
    }

    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
     * 
     */
    @InputImport(name="enforcingSuccessRate", required=true)
      private final Integer enforcingSuccessRate;

    public Integer getEnforcingSuccessRate() {
        return this.enforcingSuccessRate;
    }

    /**
     * Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
     * 
     */
    @InputImport(name="interval", required=true)
      private final DurationResponse interval;

    public DurationResponse getInterval() {
        return this.interval;
    }

    /**
     * Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
     * 
     */
    @InputImport(name="maxEjectionPercent", required=true)
      private final Integer maxEjectionPercent;

    public Integer getMaxEjectionPercent() {
        return this.maxEjectionPercent;
    }

    /**
     * The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
     * 
     */
    @InputImport(name="successRateMinimumHosts", required=true)
      private final Integer successRateMinimumHosts;

    public Integer getSuccessRateMinimumHosts() {
        return this.successRateMinimumHosts;
    }

    /**
     * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
     * 
     */
    @InputImport(name="successRateRequestVolume", required=true)
      private final Integer successRateRequestVolume;

    public Integer getSuccessRateRequestVolume() {
        return this.successRateRequestVolume;
    }

    /**
     * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
     * 
     */
    @InputImport(name="successRateStdevFactor", required=true)
      private final Integer successRateStdevFactor;

    public Integer getSuccessRateStdevFactor() {
        return this.successRateStdevFactor;
    }

    public OutlierDetectionResponse(
        DurationResponse baseEjectionTime,
        Integer consecutiveErrors,
        Integer consecutiveGatewayFailure,
        Integer enforcingConsecutiveErrors,
        Integer enforcingConsecutiveGatewayFailure,
        Integer enforcingSuccessRate,
        DurationResponse interval,
        Integer maxEjectionPercent,
        Integer successRateMinimumHosts,
        Integer successRateRequestVolume,
        Integer successRateStdevFactor) {
        this.baseEjectionTime = Objects.requireNonNull(baseEjectionTime, "expected parameter 'baseEjectionTime' to be non-null");
        this.consecutiveErrors = Objects.requireNonNull(consecutiveErrors, "expected parameter 'consecutiveErrors' to be non-null");
        this.consecutiveGatewayFailure = Objects.requireNonNull(consecutiveGatewayFailure, "expected parameter 'consecutiveGatewayFailure' to be non-null");
        this.enforcingConsecutiveErrors = Objects.requireNonNull(enforcingConsecutiveErrors, "expected parameter 'enforcingConsecutiveErrors' to be non-null");
        this.enforcingConsecutiveGatewayFailure = Objects.requireNonNull(enforcingConsecutiveGatewayFailure, "expected parameter 'enforcingConsecutiveGatewayFailure' to be non-null");
        this.enforcingSuccessRate = Objects.requireNonNull(enforcingSuccessRate, "expected parameter 'enforcingSuccessRate' to be non-null");
        this.interval = Objects.requireNonNull(interval, "expected parameter 'interval' to be non-null");
        this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent, "expected parameter 'maxEjectionPercent' to be non-null");
        this.successRateMinimumHosts = Objects.requireNonNull(successRateMinimumHosts, "expected parameter 'successRateMinimumHosts' to be non-null");
        this.successRateRequestVolume = Objects.requireNonNull(successRateRequestVolume, "expected parameter 'successRateRequestVolume' to be non-null");
        this.successRateStdevFactor = Objects.requireNonNull(successRateStdevFactor, "expected parameter 'successRateStdevFactor' to be non-null");
    }

    private OutlierDetectionResponse() {
        this.baseEjectionTime = null;
        this.consecutiveErrors = null;
        this.consecutiveGatewayFailure = null;
        this.enforcingConsecutiveErrors = null;
        this.enforcingConsecutiveGatewayFailure = null;
        this.enforcingSuccessRate = null;
        this.interval = null;
        this.maxEjectionPercent = null;
        this.successRateMinimumHosts = null;
        this.successRateRequestVolume = null;
        this.successRateStdevFactor = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OutlierDetectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DurationResponse baseEjectionTime;
        private Integer consecutiveErrors;
        private Integer consecutiveGatewayFailure;
        private Integer enforcingConsecutiveErrors;
        private Integer enforcingConsecutiveGatewayFailure;
        private Integer enforcingSuccessRate;
        private DurationResponse interval;
        private Integer maxEjectionPercent;
        private Integer successRateMinimumHosts;
        private Integer successRateRequestVolume;
        private Integer successRateStdevFactor;

        public Builder() {
    	      // Empty
        }

        public Builder(OutlierDetectionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionTime = defaults.baseEjectionTime;
    	      this.consecutiveErrors = defaults.consecutiveErrors;
    	      this.consecutiveGatewayFailure = defaults.consecutiveGatewayFailure;
    	      this.enforcingConsecutiveErrors = defaults.enforcingConsecutiveErrors;
    	      this.enforcingConsecutiveGatewayFailure = defaults.enforcingConsecutiveGatewayFailure;
    	      this.enforcingSuccessRate = defaults.enforcingSuccessRate;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.successRateMinimumHosts = defaults.successRateMinimumHosts;
    	      this.successRateRequestVolume = defaults.successRateRequestVolume;
    	      this.successRateStdevFactor = defaults.successRateStdevFactor;
        }

        public Builder baseEjectionTime(DurationResponse baseEjectionTime) {
            this.baseEjectionTime = Objects.requireNonNull(baseEjectionTime);
            return this;
        }

        public Builder consecutiveErrors(Integer consecutiveErrors) {
            this.consecutiveErrors = Objects.requireNonNull(consecutiveErrors);
            return this;
        }

        public Builder consecutiveGatewayFailure(Integer consecutiveGatewayFailure) {
            this.consecutiveGatewayFailure = Objects.requireNonNull(consecutiveGatewayFailure);
            return this;
        }

        public Builder enforcingConsecutiveErrors(Integer enforcingConsecutiveErrors) {
            this.enforcingConsecutiveErrors = Objects.requireNonNull(enforcingConsecutiveErrors);
            return this;
        }

        public Builder enforcingConsecutiveGatewayFailure(Integer enforcingConsecutiveGatewayFailure) {
            this.enforcingConsecutiveGatewayFailure = Objects.requireNonNull(enforcingConsecutiveGatewayFailure);
            return this;
        }

        public Builder enforcingSuccessRate(Integer enforcingSuccessRate) {
            this.enforcingSuccessRate = Objects.requireNonNull(enforcingSuccessRate);
            return this;
        }

        public Builder interval(DurationResponse interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder maxEjectionPercent(Integer maxEjectionPercent) {
            this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent);
            return this;
        }

        public Builder successRateMinimumHosts(Integer successRateMinimumHosts) {
            this.successRateMinimumHosts = Objects.requireNonNull(successRateMinimumHosts);
            return this;
        }

        public Builder successRateRequestVolume(Integer successRateRequestVolume) {
            this.successRateRequestVolume = Objects.requireNonNull(successRateRequestVolume);
            return this;
        }

        public Builder successRateStdevFactor(Integer successRateStdevFactor) {
            this.successRateStdevFactor = Objects.requireNonNull(successRateStdevFactor);
            return this;
        }
        public OutlierDetectionResponse build() {
            return new OutlierDetectionResponse(baseEjectionTime, consecutiveErrors, consecutiveGatewayFailure, enforcingConsecutiveErrors, enforcingConsecutiveGatewayFailure, enforcingSuccessRate, interval, maxEjectionPercent, successRateMinimumHosts, successRateRequestVolume, successRateStdevFactor);
        }
    }
}
