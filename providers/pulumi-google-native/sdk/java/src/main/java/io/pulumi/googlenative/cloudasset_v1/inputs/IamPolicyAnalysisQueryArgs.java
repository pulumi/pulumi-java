// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudasset_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudasset_v1.inputs.AccessSelectorArgs;
import io.pulumi.googlenative.cloudasset_v1.inputs.ConditionContextArgs;
import io.pulumi.googlenative.cloudasset_v1.inputs.IdentitySelectorArgs;
import io.pulumi.googlenative.cloudasset_v1.inputs.OptionsArgs;
import io.pulumi.googlenative.cloudasset_v1.inputs.ResourceSelectorArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IamPolicyAnalysisQueryArgs extends io.pulumi.resources.ResourceArgs {

    public static final IamPolicyAnalysisQueryArgs Empty = new IamPolicyAnalysisQueryArgs();

    @InputImport(name="accessSelector")
    private final @Nullable Input<AccessSelectorArgs> accessSelector;

    public Input<AccessSelectorArgs> getAccessSelector() {
        return this.accessSelector == null ? Input.empty() : this.accessSelector;
    }

    @InputImport(name="conditionContext")
    private final @Nullable Input<ConditionContextArgs> conditionContext;

    public Input<ConditionContextArgs> getConditionContext() {
        return this.conditionContext == null ? Input.empty() : this.conditionContext;
    }

    @InputImport(name="identitySelector")
    private final @Nullable Input<IdentitySelectorArgs> identitySelector;

    public Input<IdentitySelectorArgs> getIdentitySelector() {
        return this.identitySelector == null ? Input.empty() : this.identitySelector;
    }

    @InputImport(name="options")
    private final @Nullable Input<OptionsArgs> options;

    public Input<OptionsArgs> getOptions() {
        return this.options == null ? Input.empty() : this.options;
    }

    @InputImport(name="resourceSelector")
    private final @Nullable Input<ResourceSelectorArgs> resourceSelector;

    public Input<ResourceSelectorArgs> getResourceSelector() {
        return this.resourceSelector == null ? Input.empty() : this.resourceSelector;
    }

    @InputImport(name="scope", required=true)
    private final Input<String> scope;

    public Input<String> getScope() {
        return this.scope;
    }

    public IamPolicyAnalysisQueryArgs(
        @Nullable Input<AccessSelectorArgs> accessSelector,
        @Nullable Input<ConditionContextArgs> conditionContext,
        @Nullable Input<IdentitySelectorArgs> identitySelector,
        @Nullable Input<OptionsArgs> options,
        @Nullable Input<ResourceSelectorArgs> resourceSelector,
        Input<String> scope) {
        this.accessSelector = accessSelector;
        this.conditionContext = conditionContext;
        this.identitySelector = identitySelector;
        this.options = options;
        this.resourceSelector = resourceSelector;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
    }

    private IamPolicyAnalysisQueryArgs() {
        this.accessSelector = Input.empty();
        this.conditionContext = Input.empty();
        this.identitySelector = Input.empty();
        this.options = Input.empty();
        this.resourceSelector = Input.empty();
        this.scope = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IamPolicyAnalysisQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AccessSelectorArgs> accessSelector;
        private @Nullable Input<ConditionContextArgs> conditionContext;
        private @Nullable Input<IdentitySelectorArgs> identitySelector;
        private @Nullable Input<OptionsArgs> options;
        private @Nullable Input<ResourceSelectorArgs> resourceSelector;
        private Input<String> scope;

        public Builder() {
    	      // Empty
        }

        public Builder(IamPolicyAnalysisQueryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessSelector = defaults.accessSelector;
    	      this.conditionContext = defaults.conditionContext;
    	      this.identitySelector = defaults.identitySelector;
    	      this.options = defaults.options;
    	      this.resourceSelector = defaults.resourceSelector;
    	      this.scope = defaults.scope;
        }

        public Builder setAccessSelector(@Nullable Input<AccessSelectorArgs> accessSelector) {
            this.accessSelector = accessSelector;
            return this;
        }

        public Builder setAccessSelector(@Nullable AccessSelectorArgs accessSelector) {
            this.accessSelector = Input.ofNullable(accessSelector);
            return this;
        }

        public Builder setConditionContext(@Nullable Input<ConditionContextArgs> conditionContext) {
            this.conditionContext = conditionContext;
            return this;
        }

        public Builder setConditionContext(@Nullable ConditionContextArgs conditionContext) {
            this.conditionContext = Input.ofNullable(conditionContext);
            return this;
        }

        public Builder setIdentitySelector(@Nullable Input<IdentitySelectorArgs> identitySelector) {
            this.identitySelector = identitySelector;
            return this;
        }

        public Builder setIdentitySelector(@Nullable IdentitySelectorArgs identitySelector) {
            this.identitySelector = Input.ofNullable(identitySelector);
            return this;
        }

        public Builder setOptions(@Nullable Input<OptionsArgs> options) {
            this.options = options;
            return this;
        }

        public Builder setOptions(@Nullable OptionsArgs options) {
            this.options = Input.ofNullable(options);
            return this;
        }

        public Builder setResourceSelector(@Nullable Input<ResourceSelectorArgs> resourceSelector) {
            this.resourceSelector = resourceSelector;
            return this;
        }

        public Builder setResourceSelector(@Nullable ResourceSelectorArgs resourceSelector) {
            this.resourceSelector = Input.ofNullable(resourceSelector);
            return this;
        }

        public Builder setScope(Input<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Input.of(Objects.requireNonNull(scope));
            return this;
        }

        public IamPolicyAnalysisQueryArgs build() {
            return new IamPolicyAnalysisQueryArgs(accessSelector, conditionContext, identitySelector, options, resourceSelector, scope);
        }
    }
}
