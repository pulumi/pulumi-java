// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.container_v1.inputs.CloudRunConfigResponse;
import io.pulumi.googlenative.container_v1.inputs.ConfigConnectorConfigResponse;
import io.pulumi.googlenative.container_v1.inputs.DnsCacheConfigResponse;
import io.pulumi.googlenative.container_v1.inputs.GcePersistentDiskCsiDriverConfigResponse;
import io.pulumi.googlenative.container_v1.inputs.GcpFilestoreCsiDriverConfigResponse;
import io.pulumi.googlenative.container_v1.inputs.HorizontalPodAutoscalingResponse;
import io.pulumi.googlenative.container_v1.inputs.HttpLoadBalancingResponse;
import io.pulumi.googlenative.container_v1.inputs.KubernetesDashboardResponse;
import io.pulumi.googlenative.container_v1.inputs.NetworkPolicyConfigResponse;
import java.util.Objects;


/**
 * Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
 * 
 */
public final class AddonsConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final AddonsConfigResponse Empty = new AddonsConfigResponse();

    /**
     * Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
     * 
     */
    @Import(name="cloudRunConfig", required=true)
      private final CloudRunConfigResponse cloudRunConfig;

    public CloudRunConfigResponse cloudRunConfig() {
        return this.cloudRunConfig;
    }

    /**
     * Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
     * 
     */
    @Import(name="configConnectorConfig", required=true)
      private final ConfigConnectorConfigResponse configConnectorConfig;

    public ConfigConnectorConfigResponse configConnectorConfig() {
        return this.configConnectorConfig;
    }

    /**
     * Configuration for NodeLocalDNS, a dns cache running on cluster nodes
     * 
     */
    @Import(name="dnsCacheConfig", required=true)
      private final DnsCacheConfigResponse dnsCacheConfig;

    public DnsCacheConfigResponse dnsCacheConfig() {
        return this.dnsCacheConfig;
    }

    /**
     * Configuration for the Compute Engine Persistent Disk CSI driver.
     * 
     */
    @Import(name="gcePersistentDiskCsiDriverConfig", required=true)
      private final GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig;

    public GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig() {
        return this.gcePersistentDiskCsiDriverConfig;
    }

    /**
     * Configuration for the GCP Filestore CSI driver.
     * 
     */
    @Import(name="gcpFilestoreCsiDriverConfig", required=true)
      private final GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig;

    public GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig() {
        return this.gcpFilestoreCsiDriverConfig;
    }

    /**
     * Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
     * 
     */
    @Import(name="horizontalPodAutoscaling", required=true)
      private final HorizontalPodAutoscalingResponse horizontalPodAutoscaling;

    public HorizontalPodAutoscalingResponse horizontalPodAutoscaling() {
        return this.horizontalPodAutoscaling;
    }

    /**
     * Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
     * 
     */
    @Import(name="httpLoadBalancing", required=true)
      private final HttpLoadBalancingResponse httpLoadBalancing;

    public HttpLoadBalancingResponse httpLoadBalancing() {
        return this.httpLoadBalancing;
    }

    /**
     * Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
     * 
     */
    @Import(name="kubernetesDashboard", required=true)
      private final KubernetesDashboardResponse kubernetesDashboard;

    public KubernetesDashboardResponse kubernetesDashboard() {
        return this.kubernetesDashboard;
    }

    /**
     * Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
     * 
     */
    @Import(name="networkPolicyConfig", required=true)
      private final NetworkPolicyConfigResponse networkPolicyConfig;

    public NetworkPolicyConfigResponse networkPolicyConfig() {
        return this.networkPolicyConfig;
    }

    public AddonsConfigResponse(
        CloudRunConfigResponse cloudRunConfig,
        ConfigConnectorConfigResponse configConnectorConfig,
        DnsCacheConfigResponse dnsCacheConfig,
        GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig,
        GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig,
        HorizontalPodAutoscalingResponse horizontalPodAutoscaling,
        HttpLoadBalancingResponse httpLoadBalancing,
        KubernetesDashboardResponse kubernetesDashboard,
        NetworkPolicyConfigResponse networkPolicyConfig) {
        this.cloudRunConfig = Objects.requireNonNull(cloudRunConfig, "expected parameter 'cloudRunConfig' to be non-null");
        this.configConnectorConfig = Objects.requireNonNull(configConnectorConfig, "expected parameter 'configConnectorConfig' to be non-null");
        this.dnsCacheConfig = Objects.requireNonNull(dnsCacheConfig, "expected parameter 'dnsCacheConfig' to be non-null");
        this.gcePersistentDiskCsiDriverConfig = Objects.requireNonNull(gcePersistentDiskCsiDriverConfig, "expected parameter 'gcePersistentDiskCsiDriverConfig' to be non-null");
        this.gcpFilestoreCsiDriverConfig = Objects.requireNonNull(gcpFilestoreCsiDriverConfig, "expected parameter 'gcpFilestoreCsiDriverConfig' to be non-null");
        this.horizontalPodAutoscaling = Objects.requireNonNull(horizontalPodAutoscaling, "expected parameter 'horizontalPodAutoscaling' to be non-null");
        this.httpLoadBalancing = Objects.requireNonNull(httpLoadBalancing, "expected parameter 'httpLoadBalancing' to be non-null");
        this.kubernetesDashboard = Objects.requireNonNull(kubernetesDashboard, "expected parameter 'kubernetesDashboard' to be non-null");
        this.networkPolicyConfig = Objects.requireNonNull(networkPolicyConfig, "expected parameter 'networkPolicyConfig' to be non-null");
    }

    private AddonsConfigResponse() {
        this.cloudRunConfig = null;
        this.configConnectorConfig = null;
        this.dnsCacheConfig = null;
        this.gcePersistentDiskCsiDriverConfig = null;
        this.gcpFilestoreCsiDriverConfig = null;
        this.horizontalPodAutoscaling = null;
        this.httpLoadBalancing = null;
        this.kubernetesDashboard = null;
        this.networkPolicyConfig = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AddonsConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudRunConfigResponse cloudRunConfig;
        private ConfigConnectorConfigResponse configConnectorConfig;
        private DnsCacheConfigResponse dnsCacheConfig;
        private GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig;
        private GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig;
        private HorizontalPodAutoscalingResponse horizontalPodAutoscaling;
        private HttpLoadBalancingResponse httpLoadBalancing;
        private KubernetesDashboardResponse kubernetesDashboard;
        private NetworkPolicyConfigResponse networkPolicyConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(AddonsConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudRunConfig = defaults.cloudRunConfig;
    	      this.configConnectorConfig = defaults.configConnectorConfig;
    	      this.dnsCacheConfig = defaults.dnsCacheConfig;
    	      this.gcePersistentDiskCsiDriverConfig = defaults.gcePersistentDiskCsiDriverConfig;
    	      this.gcpFilestoreCsiDriverConfig = defaults.gcpFilestoreCsiDriverConfig;
    	      this.horizontalPodAutoscaling = defaults.horizontalPodAutoscaling;
    	      this.httpLoadBalancing = defaults.httpLoadBalancing;
    	      this.kubernetesDashboard = defaults.kubernetesDashboard;
    	      this.networkPolicyConfig = defaults.networkPolicyConfig;
        }

        public Builder cloudRunConfig(CloudRunConfigResponse cloudRunConfig) {
            this.cloudRunConfig = Objects.requireNonNull(cloudRunConfig);
            return this;
        }
        public Builder configConnectorConfig(ConfigConnectorConfigResponse configConnectorConfig) {
            this.configConnectorConfig = Objects.requireNonNull(configConnectorConfig);
            return this;
        }
        public Builder dnsCacheConfig(DnsCacheConfigResponse dnsCacheConfig) {
            this.dnsCacheConfig = Objects.requireNonNull(dnsCacheConfig);
            return this;
        }
        public Builder gcePersistentDiskCsiDriverConfig(GcePersistentDiskCsiDriverConfigResponse gcePersistentDiskCsiDriverConfig) {
            this.gcePersistentDiskCsiDriverConfig = Objects.requireNonNull(gcePersistentDiskCsiDriverConfig);
            return this;
        }
        public Builder gcpFilestoreCsiDriverConfig(GcpFilestoreCsiDriverConfigResponse gcpFilestoreCsiDriverConfig) {
            this.gcpFilestoreCsiDriverConfig = Objects.requireNonNull(gcpFilestoreCsiDriverConfig);
            return this;
        }
        public Builder horizontalPodAutoscaling(HorizontalPodAutoscalingResponse horizontalPodAutoscaling) {
            this.horizontalPodAutoscaling = Objects.requireNonNull(horizontalPodAutoscaling);
            return this;
        }
        public Builder httpLoadBalancing(HttpLoadBalancingResponse httpLoadBalancing) {
            this.httpLoadBalancing = Objects.requireNonNull(httpLoadBalancing);
            return this;
        }
        public Builder kubernetesDashboard(KubernetesDashboardResponse kubernetesDashboard) {
            this.kubernetesDashboard = Objects.requireNonNull(kubernetesDashboard);
            return this;
        }
        public Builder networkPolicyConfig(NetworkPolicyConfigResponse networkPolicyConfig) {
            this.networkPolicyConfig = Objects.requireNonNull(networkPolicyConfig);
            return this;
        }        public AddonsConfigResponse build() {
            return new AddonsConfigResponse(cloudRunConfig, configConnectorConfig, dnsCacheConfig, gcePersistentDiskCsiDriverConfig, gcpFilestoreCsiDriverConfig, horizontalPodAutoscaling, httpLoadBalancing, kubernetesDashboard, networkPolicyConfig);
        }
    }
}
