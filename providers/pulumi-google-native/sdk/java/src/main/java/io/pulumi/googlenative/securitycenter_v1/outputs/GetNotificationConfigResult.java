// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.securitycenter_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.securitycenter_v1.outputs.StreamingConfigResponse;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class GetNotificationConfigResult {
    /**
     * The description of the notification config (max of 1024 characters).
     * 
     */
    private final String description;
    /**
     * The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
     * 
     */
    private final String name;
    /**
     * The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
     * 
     */
    private final String pubsubTopic;
    /**
     * The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
     * 
     */
    private final String serviceAccount;
    /**
     * The config for triggering streaming-based notifications.
     * 
     */
    private final StreamingConfigResponse streamingConfig;

    @OutputCustomType.Constructor({"description","name","pubsubTopic","serviceAccount","streamingConfig"})
    private GetNotificationConfigResult(
        String description,
        String name,
        String pubsubTopic,
        String serviceAccount,
        StreamingConfigResponse streamingConfig) {
        this.description = Objects.requireNonNull(description);
        this.name = Objects.requireNonNull(name);
        this.pubsubTopic = Objects.requireNonNull(pubsubTopic);
        this.serviceAccount = Objects.requireNonNull(serviceAccount);
        this.streamingConfig = Objects.requireNonNull(streamingConfig);
    }

    /**
     * The description of the notification config (max of 1024 characters).
     * 
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
     * 
     */
    public String getPubsubTopic() {
        return this.pubsubTopic;
    }
    /**
     * The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
     * 
     */
    public String getServiceAccount() {
        return this.serviceAccount;
    }
    /**
     * The config for triggering streaming-based notifications.
     * 
     */
    public StreamingConfigResponse getStreamingConfig() {
        return this.streamingConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNotificationConfigResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String name;
        private String pubsubTopic;
        private String serviceAccount;
        private StreamingConfigResponse streamingConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNotificationConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.pubsubTopic = defaults.pubsubTopic;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.streamingConfig = defaults.streamingConfig;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPubsubTopic(String pubsubTopic) {
            this.pubsubTopic = Objects.requireNonNull(pubsubTopic);
            return this;
        }

        public Builder setServiceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }

        public Builder setStreamingConfig(StreamingConfigResponse streamingConfig) {
            this.streamingConfig = Objects.requireNonNull(streamingConfig);
            return this;
        }
        public GetNotificationConfigResult build() {
            return new GetNotificationConfigResult(description, name, pubsubTopic, serviceAccount, streamingConfig);
        }
    }
}
