// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_alpha.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class RouterBgpPeerBfdResponse extends io.pulumi.resources.InvokeArgs {

    public static final RouterBgpPeerBfdResponse Empty = new RouterBgpPeerBfdResponse();

    /**
     * The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
     * 
     */
    @InputImport(name="minReceiveInterval", required=true)
      private final Integer minReceiveInterval;

    public Integer getMinReceiveInterval() {
        return this.minReceiveInterval;
    }

    /**
     * The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
     * 
     */
    @InputImport(name="minTransmitInterval", required=true)
      private final Integer minTransmitInterval;

    public Integer getMinTransmitInterval() {
        return this.minTransmitInterval;
    }

    /**
     * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
     * 
     */
    @InputImport(name="mode", required=true)
      private final String mode;

    public String getMode() {
        return this.mode;
    }

    /**
     * The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5.
     * 
     */
    @InputImport(name="multiplier", required=true)
      private final Integer multiplier;

    public Integer getMultiplier() {
        return this.multiplier;
    }

    /**
     * The BFD packet mode for this BGP peer. If set to CONTROL_AND_ECHO, BFD echo mode is enabled for this BGP peer. In this mode, if the peer router also has BFD echo mode enabled, BFD echo packets will be sent to the other router. If the peer router does not have BFD echo mode enabled, only control packets will be sent. If set to CONTROL_ONLY, BFD echo mode is disabled for this BGP peer. If this router and the peer router have a multihop connection, this should be set to CONTROL_ONLY as BFD echo mode is only supported on singlehop connections. The default is CONTROL_AND_ECHO.
     * 
     */
    @InputImport(name="packetMode", required=true)
      private final String packetMode;

    public String getPacketMode() {
        return this.packetMode;
    }

    /**
     * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
     * 
     */
    @InputImport(name="sessionInitializationMode", required=true)
      private final String sessionInitializationMode;

    public String getSessionInitializationMode() {
        return this.sessionInitializationMode;
    }

    /**
     * The minimum interval, in milliseconds, between BFD control packets transmitted to and received from the peer router when BFD echo mode is enabled on both routers. The actual transmit and receive intervals are negotiated between the two routers and are equal to the greater of this value and the corresponding interval on the other router. If set, this value must be between 1000 and 30000. The default is 5000.
     * 
     */
    @InputImport(name="slowTimerInterval", required=true)
      private final Integer slowTimerInterval;

    public Integer getSlowTimerInterval() {
        return this.slowTimerInterval;
    }

    public RouterBgpPeerBfdResponse(
        Integer minReceiveInterval,
        Integer minTransmitInterval,
        String mode,
        Integer multiplier,
        String packetMode,
        String sessionInitializationMode,
        Integer slowTimerInterval) {
        this.minReceiveInterval = Objects.requireNonNull(minReceiveInterval, "expected parameter 'minReceiveInterval' to be non-null");
        this.minTransmitInterval = Objects.requireNonNull(minTransmitInterval, "expected parameter 'minTransmitInterval' to be non-null");
        this.mode = Objects.requireNonNull(mode, "expected parameter 'mode' to be non-null");
        this.multiplier = Objects.requireNonNull(multiplier, "expected parameter 'multiplier' to be non-null");
        this.packetMode = Objects.requireNonNull(packetMode, "expected parameter 'packetMode' to be non-null");
        this.sessionInitializationMode = Objects.requireNonNull(sessionInitializationMode, "expected parameter 'sessionInitializationMode' to be non-null");
        this.slowTimerInterval = Objects.requireNonNull(slowTimerInterval, "expected parameter 'slowTimerInterval' to be non-null");
    }

    private RouterBgpPeerBfdResponse() {
        this.minReceiveInterval = null;
        this.minTransmitInterval = null;
        this.mode = null;
        this.multiplier = null;
        this.packetMode = null;
        this.sessionInitializationMode = null;
        this.slowTimerInterval = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterBgpPeerBfdResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer minReceiveInterval;
        private Integer minTransmitInterval;
        private String mode;
        private Integer multiplier;
        private String packetMode;
        private String sessionInitializationMode;
        private Integer slowTimerInterval;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterBgpPeerBfdResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.minReceiveInterval = defaults.minReceiveInterval;
    	      this.minTransmitInterval = defaults.minTransmitInterval;
    	      this.mode = defaults.mode;
    	      this.multiplier = defaults.multiplier;
    	      this.packetMode = defaults.packetMode;
    	      this.sessionInitializationMode = defaults.sessionInitializationMode;
    	      this.slowTimerInterval = defaults.slowTimerInterval;
        }

        public Builder setMinReceiveInterval(Integer minReceiveInterval) {
            this.minReceiveInterval = Objects.requireNonNull(minReceiveInterval);
            return this;
        }

        public Builder setMinTransmitInterval(Integer minTransmitInterval) {
            this.minTransmitInterval = Objects.requireNonNull(minTransmitInterval);
            return this;
        }

        public Builder setMode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }

        public Builder setMultiplier(Integer multiplier) {
            this.multiplier = Objects.requireNonNull(multiplier);
            return this;
        }

        public Builder setPacketMode(String packetMode) {
            this.packetMode = Objects.requireNonNull(packetMode);
            return this;
        }

        public Builder setSessionInitializationMode(String sessionInitializationMode) {
            this.sessionInitializationMode = Objects.requireNonNull(sessionInitializationMode);
            return this;
        }

        public Builder setSlowTimerInterval(Integer slowTimerInterval) {
            this.slowTimerInterval = Objects.requireNonNull(slowTimerInterval);
            return this;
        }
        public RouterBgpPeerBfdResponse build() {
            return new RouterBgpPeerBfdResponse(minReceiveInterval, minTransmitInterval, mode, multiplier, packetMode, sessionInitializationMode, slowTimerInterval);
        }
    }
}
