// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * VP9 codec settings.
 * 
 */
public final class Vp9CodecSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final Vp9CodecSettingsArgs Empty = new Vp9CodecSettingsArgs();

    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
     * 
     */
    @Import(name="bitrateBps", required=true)
      private final Output<Integer> bitrateBps;

    public Output<Integer> getBitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. *Note*: This field is not supported.
     * 
     */
    @Import(name="crfLevel")
      private final @Nullable Output<Integer> crfLevel;

    public Output<Integer> getCrfLevel() {
        return this.crfLevel == null ? Output.empty() : this.crfLevel;
    }

    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    @Import(name="frameRate", required=true)
      private final Output<Double> frameRate;

    public Output<Double> getFrameRate() {
        return this.frameRate;
    }

    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    @Import(name="gopDuration")
      private final @Nullable Output<String> gopDuration;

    public Output<String> getGopDuration() {
        return this.gopDuration == null ? Output.empty() : this.gopDuration;
    }

    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    @Import(name="gopFrameCount")
      private final @Nullable Output<Integer> gopFrameCount;

    public Output<Integer> getGopFrameCount() {
        return this.gopFrameCount == null ? Output.empty() : this.gopFrameCount;
    }

    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    @Import(name="heightPixels")
      private final @Nullable Output<Integer> heightPixels;

    public Output<Integer> getHeightPixels() {
        return this.heightPixels == null ? Output.empty() : this.heightPixels;
    }

    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    @Import(name="pixelFormat")
      private final @Nullable Output<String> pixelFormat;

    public Output<String> getPixelFormat() {
        return this.pixelFormat == null ? Output.empty() : this.pixelFormat;
    }

    /**
     * Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
     * 
     */
    @Import(name="profile")
      private final @Nullable Output<String> profile;

    public Output<String> getProfile() {
        return this.profile == null ? Output.empty() : this.profile;
    }

    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
     * 
     */
    @Import(name="rateControlMode")
      private final @Nullable Output<String> rateControlMode;

    public Output<String> getRateControlMode() {
        return this.rateControlMode == null ? Output.empty() : this.rateControlMode;
    }

    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    @Import(name="widthPixels")
      private final @Nullable Output<Integer> widthPixels;

    public Output<Integer> getWidthPixels() {
        return this.widthPixels == null ? Output.empty() : this.widthPixels;
    }

    public Vp9CodecSettingsArgs(
        Output<Integer> bitrateBps,
        @Nullable Output<Integer> crfLevel,
        Output<Double> frameRate,
        @Nullable Output<String> gopDuration,
        @Nullable Output<Integer> gopFrameCount,
        @Nullable Output<Integer> heightPixels,
        @Nullable Output<String> pixelFormat,
        @Nullable Output<String> profile,
        @Nullable Output<String> rateControlMode,
        @Nullable Output<Integer> widthPixels) {
        this.bitrateBps = Objects.requireNonNull(bitrateBps, "expected parameter 'bitrateBps' to be non-null");
        this.crfLevel = crfLevel;
        this.frameRate = Objects.requireNonNull(frameRate, "expected parameter 'frameRate' to be non-null");
        this.gopDuration = gopDuration;
        this.gopFrameCount = gopFrameCount;
        this.heightPixels = heightPixels;
        this.pixelFormat = pixelFormat;
        this.profile = profile;
        this.rateControlMode = rateControlMode;
        this.widthPixels = widthPixels;
    }

    private Vp9CodecSettingsArgs() {
        this.bitrateBps = Output.empty();
        this.crfLevel = Output.empty();
        this.frameRate = Output.empty();
        this.gopDuration = Output.empty();
        this.gopFrameCount = Output.empty();
        this.heightPixels = Output.empty();
        this.pixelFormat = Output.empty();
        this.profile = Output.empty();
        this.rateControlMode = Output.empty();
        this.widthPixels = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Vp9CodecSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> bitrateBps;
        private @Nullable Output<Integer> crfLevel;
        private Output<Double> frameRate;
        private @Nullable Output<String> gopDuration;
        private @Nullable Output<Integer> gopFrameCount;
        private @Nullable Output<Integer> heightPixels;
        private @Nullable Output<String> pixelFormat;
        private @Nullable Output<String> profile;
        private @Nullable Output<String> rateControlMode;
        private @Nullable Output<Integer> widthPixels;

        public Builder() {
    	      // Empty
        }

        public Builder(Vp9CodecSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitrateBps = defaults.bitrateBps;
    	      this.crfLevel = defaults.crfLevel;
    	      this.frameRate = defaults.frameRate;
    	      this.gopDuration = defaults.gopDuration;
    	      this.gopFrameCount = defaults.gopFrameCount;
    	      this.heightPixels = defaults.heightPixels;
    	      this.pixelFormat = defaults.pixelFormat;
    	      this.profile = defaults.profile;
    	      this.rateControlMode = defaults.rateControlMode;
    	      this.widthPixels = defaults.widthPixels;
        }

        public Builder bitrateBps(Output<Integer> bitrateBps) {
            this.bitrateBps = Objects.requireNonNull(bitrateBps);
            return this;
        }

        public Builder bitrateBps(Integer bitrateBps) {
            this.bitrateBps = Output.of(Objects.requireNonNull(bitrateBps));
            return this;
        }

        public Builder crfLevel(@Nullable Output<Integer> crfLevel) {
            this.crfLevel = crfLevel;
            return this;
        }

        public Builder crfLevel(@Nullable Integer crfLevel) {
            this.crfLevel = Output.ofNullable(crfLevel);
            return this;
        }

        public Builder frameRate(Output<Double> frameRate) {
            this.frameRate = Objects.requireNonNull(frameRate);
            return this;
        }

        public Builder frameRate(Double frameRate) {
            this.frameRate = Output.of(Objects.requireNonNull(frameRate));
            return this;
        }

        public Builder gopDuration(@Nullable Output<String> gopDuration) {
            this.gopDuration = gopDuration;
            return this;
        }

        public Builder gopDuration(@Nullable String gopDuration) {
            this.gopDuration = Output.ofNullable(gopDuration);
            return this;
        }

        public Builder gopFrameCount(@Nullable Output<Integer> gopFrameCount) {
            this.gopFrameCount = gopFrameCount;
            return this;
        }

        public Builder gopFrameCount(@Nullable Integer gopFrameCount) {
            this.gopFrameCount = Output.ofNullable(gopFrameCount);
            return this;
        }

        public Builder heightPixels(@Nullable Output<Integer> heightPixels) {
            this.heightPixels = heightPixels;
            return this;
        }

        public Builder heightPixels(@Nullable Integer heightPixels) {
            this.heightPixels = Output.ofNullable(heightPixels);
            return this;
        }

        public Builder pixelFormat(@Nullable Output<String> pixelFormat) {
            this.pixelFormat = pixelFormat;
            return this;
        }

        public Builder pixelFormat(@Nullable String pixelFormat) {
            this.pixelFormat = Output.ofNullable(pixelFormat);
            return this;
        }

        public Builder profile(@Nullable Output<String> profile) {
            this.profile = profile;
            return this;
        }

        public Builder profile(@Nullable String profile) {
            this.profile = Output.ofNullable(profile);
            return this;
        }

        public Builder rateControlMode(@Nullable Output<String> rateControlMode) {
            this.rateControlMode = rateControlMode;
            return this;
        }

        public Builder rateControlMode(@Nullable String rateControlMode) {
            this.rateControlMode = Output.ofNullable(rateControlMode);
            return this;
        }

        public Builder widthPixels(@Nullable Output<Integer> widthPixels) {
            this.widthPixels = widthPixels;
            return this;
        }

        public Builder widthPixels(@Nullable Integer widthPixels) {
            this.widthPixels = Output.ofNullable(widthPixels);
            return this;
        }
        public Vp9CodecSettingsArgs build() {
            return new Vp9CodecSettingsArgs(bitrateBps, crfLevel, frameRate, gopDuration, gopFrameCount, heightPixels, pixelFormat, profile, rateControlMode, widthPixels);
        }
    }
}
