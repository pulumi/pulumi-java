// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.privateca_v1.inputs.ExprResponse;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Describes constraints on a Certificate's Subject and SubjectAltNames.
 * 
 */
public final class CertificateIdentityConstraintsResponse extends io.pulumi.resources.InvokeArgs {

    public static final CertificateIdentityConstraintsResponse Empty = new CertificateIdentityConstraintsResponse();

    /**
     * If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
     * 
     */
    @Import(name="allowSubjectAltNamesPassthrough", required=true)
      private final Boolean allowSubjectAltNamesPassthrough;

    public Boolean getAllowSubjectAltNamesPassthrough() {
        return this.allowSubjectAltNamesPassthrough;
    }

    /**
     * If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
     * 
     */
    @Import(name="allowSubjectPassthrough", required=true)
      private final Boolean allowSubjectPassthrough;

    public Boolean getAllowSubjectPassthrough() {
        return this.allowSubjectPassthrough;
    }

    /**
     * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
     * 
     */
    @Import(name="celExpression", required=true)
      private final ExprResponse celExpression;

    public ExprResponse getCelExpression() {
        return this.celExpression;
    }

    public CertificateIdentityConstraintsResponse(
        Boolean allowSubjectAltNamesPassthrough,
        Boolean allowSubjectPassthrough,
        ExprResponse celExpression) {
        this.allowSubjectAltNamesPassthrough = Objects.requireNonNull(allowSubjectAltNamesPassthrough, "expected parameter 'allowSubjectAltNamesPassthrough' to be non-null");
        this.allowSubjectPassthrough = Objects.requireNonNull(allowSubjectPassthrough, "expected parameter 'allowSubjectPassthrough' to be non-null");
        this.celExpression = Objects.requireNonNull(celExpression, "expected parameter 'celExpression' to be non-null");
    }

    private CertificateIdentityConstraintsResponse() {
        this.allowSubjectAltNamesPassthrough = null;
        this.allowSubjectPassthrough = null;
        this.celExpression = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateIdentityConstraintsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowSubjectAltNamesPassthrough;
        private Boolean allowSubjectPassthrough;
        private ExprResponse celExpression;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateIdentityConstraintsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowSubjectAltNamesPassthrough = defaults.allowSubjectAltNamesPassthrough;
    	      this.allowSubjectPassthrough = defaults.allowSubjectPassthrough;
    	      this.celExpression = defaults.celExpression;
        }

        public Builder allowSubjectAltNamesPassthrough(Boolean allowSubjectAltNamesPassthrough) {
            this.allowSubjectAltNamesPassthrough = Objects.requireNonNull(allowSubjectAltNamesPassthrough);
            return this;
        }
        public Builder allowSubjectPassthrough(Boolean allowSubjectPassthrough) {
            this.allowSubjectPassthrough = Objects.requireNonNull(allowSubjectPassthrough);
            return this;
        }
        public Builder celExpression(ExprResponse celExpression) {
            this.celExpression = Objects.requireNonNull(celExpression);
            return this;
        }        public CertificateIdentityConstraintsResponse build() {
            return new CertificateIdentityConstraintsResponse(allowSubjectAltNamesPassthrough, allowSubjectPassthrough, celExpression);
        }
    }
}
