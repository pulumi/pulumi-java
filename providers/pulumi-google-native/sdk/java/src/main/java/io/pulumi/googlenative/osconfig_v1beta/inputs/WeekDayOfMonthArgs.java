// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.osconfig_v1beta.enums.WeekDayOfMonthDayOfWeek;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents one week day in a month. An example is "the 4th Sunday".
 * 
 */
public final class WeekDayOfMonthArgs extends io.pulumi.resources.ResourceArgs {

    public static final WeekDayOfMonthArgs Empty = new WeekDayOfMonthArgs();

    /**
     * A day of the week.
     * 
     */
    @Import(name="dayOfWeek", required=true)
      private final Output<WeekDayOfMonthDayOfWeek> dayOfWeek;

    public Output<WeekDayOfMonthDayOfWeek> getDayOfWeek() {
        return this.dayOfWeek;
    }

    /**
     * Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
     * 
     */
    @Import(name="dayOffset")
      private final @Nullable Output<Integer> dayOffset;

    public Output<Integer> getDayOffset() {
        return this.dayOffset == null ? Output.empty() : this.dayOffset;
    }

    /**
     * Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
     * 
     */
    @Import(name="weekOrdinal", required=true)
      private final Output<Integer> weekOrdinal;

    public Output<Integer> getWeekOrdinal() {
        return this.weekOrdinal;
    }

    public WeekDayOfMonthArgs(
        Output<WeekDayOfMonthDayOfWeek> dayOfWeek,
        @Nullable Output<Integer> dayOffset,
        Output<Integer> weekOrdinal) {
        this.dayOfWeek = Objects.requireNonNull(dayOfWeek, "expected parameter 'dayOfWeek' to be non-null");
        this.dayOffset = dayOffset;
        this.weekOrdinal = Objects.requireNonNull(weekOrdinal, "expected parameter 'weekOrdinal' to be non-null");
    }

    private WeekDayOfMonthArgs() {
        this.dayOfWeek = Output.empty();
        this.dayOffset = Output.empty();
        this.weekOrdinal = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WeekDayOfMonthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<WeekDayOfMonthDayOfWeek> dayOfWeek;
        private @Nullable Output<Integer> dayOffset;
        private Output<Integer> weekOrdinal;

        public Builder() {
    	      // Empty
        }

        public Builder(WeekDayOfMonthArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dayOfWeek = defaults.dayOfWeek;
    	      this.dayOffset = defaults.dayOffset;
    	      this.weekOrdinal = defaults.weekOrdinal;
        }

        public Builder dayOfWeek(Output<WeekDayOfMonthDayOfWeek> dayOfWeek) {
            this.dayOfWeek = Objects.requireNonNull(dayOfWeek);
            return this;
        }
        public Builder dayOfWeek(WeekDayOfMonthDayOfWeek dayOfWeek) {
            this.dayOfWeek = Output.of(Objects.requireNonNull(dayOfWeek));
            return this;
        }
        public Builder dayOffset(@Nullable Output<Integer> dayOffset) {
            this.dayOffset = dayOffset;
            return this;
        }
        public Builder dayOffset(@Nullable Integer dayOffset) {
            this.dayOffset = Output.ofNullable(dayOffset);
            return this;
        }
        public Builder weekOrdinal(Output<Integer> weekOrdinal) {
            this.weekOrdinal = Objects.requireNonNull(weekOrdinal);
            return this;
        }
        public Builder weekOrdinal(Integer weekOrdinal) {
            this.weekOrdinal = Output.of(Objects.requireNonNull(weekOrdinal));
            return this;
        }        public WeekDayOfMonthArgs build() {
            return new WeekDayOfMonthArgs(dayOfWeek, dayOffset, weekOrdinal);
        }
    }
}
