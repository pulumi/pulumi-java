// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.testing_v1.outputs.ClientInfoResponse;
import io.pulumi.googlenative.testing_v1.outputs.EnvironmentMatrixResponse;
import io.pulumi.googlenative.testing_v1.outputs.ResultStorageResponse;
import io.pulumi.googlenative.testing_v1.outputs.TestExecutionResponse;
import io.pulumi.googlenative.testing_v1.outputs.TestSpecificationResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetTestMatrixResult {
    /**
     * Information about the client which invoked the test.
     * 
     */
    private final ClientInfoResponse clientInfo;
    /**
     * The devices the tests are being executed on.
     * 
     */
    private final EnvironmentMatrixResponse environmentMatrix;
    /**
     * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     * 
     */
    private final Boolean failFast;
    /**
     * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     * 
     */
    private final Integer flakyTestAttempts;
    /**
     * Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
     * 
     */
    private final String invalidMatrixDetails;
    /**
     * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
     * 
     */
    private final String outcomeSummary;
    /**
     * The cloud project that owns the test matrix.
     * 
     */
    private final String project;
    /**
     * Where the results for the matrix are written.
     * 
     */
    private final ResultStorageResponse resultStorage;
    /**
     * Indicates the current progress of the test matrix.
     * 
     */
    private final String state;
    /**
     * The list of test executions that the service creates for this matrix.
     * 
     */
    private final List<TestExecutionResponse> testExecutions;
    /**
     * Unique id set by the service.
     * 
     */
    private final String testMatrixId;
    /**
     * How to run the test.
     * 
     */
    private final TestSpecificationResponse testSpecification;
    /**
     * The time this test matrix was initially created.
     * 
     */
    private final String timestamp;

    @OutputCustomType.Constructor
    private GetTestMatrixResult(
        @OutputCustomType.Parameter("clientInfo") ClientInfoResponse clientInfo,
        @OutputCustomType.Parameter("environmentMatrix") EnvironmentMatrixResponse environmentMatrix,
        @OutputCustomType.Parameter("failFast") Boolean failFast,
        @OutputCustomType.Parameter("flakyTestAttempts") Integer flakyTestAttempts,
        @OutputCustomType.Parameter("invalidMatrixDetails") String invalidMatrixDetails,
        @OutputCustomType.Parameter("outcomeSummary") String outcomeSummary,
        @OutputCustomType.Parameter("project") String project,
        @OutputCustomType.Parameter("resultStorage") ResultStorageResponse resultStorage,
        @OutputCustomType.Parameter("state") String state,
        @OutputCustomType.Parameter("testExecutions") List<TestExecutionResponse> testExecutions,
        @OutputCustomType.Parameter("testMatrixId") String testMatrixId,
        @OutputCustomType.Parameter("testSpecification") TestSpecificationResponse testSpecification,
        @OutputCustomType.Parameter("timestamp") String timestamp) {
        this.clientInfo = clientInfo;
        this.environmentMatrix = environmentMatrix;
        this.failFast = failFast;
        this.flakyTestAttempts = flakyTestAttempts;
        this.invalidMatrixDetails = invalidMatrixDetails;
        this.outcomeSummary = outcomeSummary;
        this.project = project;
        this.resultStorage = resultStorage;
        this.state = state;
        this.testExecutions = testExecutions;
        this.testMatrixId = testMatrixId;
        this.testSpecification = testSpecification;
        this.timestamp = timestamp;
    }

    /**
     * Information about the client which invoked the test.
     * 
    */
    public ClientInfoResponse getClientInfo() {
        return this.clientInfo;
    }
    /**
     * The devices the tests are being executed on.
     * 
    */
    public EnvironmentMatrixResponse getEnvironmentMatrix() {
        return this.environmentMatrix;
    }
    /**
     * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     * 
    */
    public Boolean getFailFast() {
        return this.failFast;
    }
    /**
     * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     * 
    */
    public Integer getFlakyTestAttempts() {
        return this.flakyTestAttempts;
    }
    /**
     * Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
     * 
    */
    public String getInvalidMatrixDetails() {
        return this.invalidMatrixDetails;
    }
    /**
     * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
     * 
    */
    public String getOutcomeSummary() {
        return this.outcomeSummary;
    }
    /**
     * The cloud project that owns the test matrix.
     * 
    */
    public String getProject() {
        return this.project;
    }
    /**
     * Where the results for the matrix are written.
     * 
    */
    public ResultStorageResponse getResultStorage() {
        return this.resultStorage;
    }
    /**
     * Indicates the current progress of the test matrix.
     * 
    */
    public String getState() {
        return this.state;
    }
    /**
     * The list of test executions that the service creates for this matrix.
     * 
    */
    public List<TestExecutionResponse> getTestExecutions() {
        return this.testExecutions;
    }
    /**
     * Unique id set by the service.
     * 
    */
    public String getTestMatrixId() {
        return this.testMatrixId;
    }
    /**
     * How to run the test.
     * 
    */
    public TestSpecificationResponse getTestSpecification() {
        return this.testSpecification;
    }
    /**
     * The time this test matrix was initially created.
     * 
    */
    public String getTimestamp() {
        return this.timestamp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTestMatrixResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientInfoResponse clientInfo;
        private EnvironmentMatrixResponse environmentMatrix;
        private Boolean failFast;
        private Integer flakyTestAttempts;
        private String invalidMatrixDetails;
        private String outcomeSummary;
        private String project;
        private ResultStorageResponse resultStorage;
        private String state;
        private List<TestExecutionResponse> testExecutions;
        private String testMatrixId;
        private TestSpecificationResponse testSpecification;
        private String timestamp;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTestMatrixResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientInfo = defaults.clientInfo;
    	      this.environmentMatrix = defaults.environmentMatrix;
    	      this.failFast = defaults.failFast;
    	      this.flakyTestAttempts = defaults.flakyTestAttempts;
    	      this.invalidMatrixDetails = defaults.invalidMatrixDetails;
    	      this.outcomeSummary = defaults.outcomeSummary;
    	      this.project = defaults.project;
    	      this.resultStorage = defaults.resultStorage;
    	      this.state = defaults.state;
    	      this.testExecutions = defaults.testExecutions;
    	      this.testMatrixId = defaults.testMatrixId;
    	      this.testSpecification = defaults.testSpecification;
    	      this.timestamp = defaults.timestamp;
        }

        public Builder setClientInfo(ClientInfoResponse clientInfo) {
            this.clientInfo = Objects.requireNonNull(clientInfo);
            return this;
        }

        public Builder setEnvironmentMatrix(EnvironmentMatrixResponse environmentMatrix) {
            this.environmentMatrix = Objects.requireNonNull(environmentMatrix);
            return this;
        }

        public Builder setFailFast(Boolean failFast) {
            this.failFast = Objects.requireNonNull(failFast);
            return this;
        }

        public Builder setFlakyTestAttempts(Integer flakyTestAttempts) {
            this.flakyTestAttempts = Objects.requireNonNull(flakyTestAttempts);
            return this;
        }

        public Builder setInvalidMatrixDetails(String invalidMatrixDetails) {
            this.invalidMatrixDetails = Objects.requireNonNull(invalidMatrixDetails);
            return this;
        }

        public Builder setOutcomeSummary(String outcomeSummary) {
            this.outcomeSummary = Objects.requireNonNull(outcomeSummary);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setResultStorage(ResultStorageResponse resultStorage) {
            this.resultStorage = Objects.requireNonNull(resultStorage);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setTestExecutions(List<TestExecutionResponse> testExecutions) {
            this.testExecutions = Objects.requireNonNull(testExecutions);
            return this;
        }

        public Builder setTestMatrixId(String testMatrixId) {
            this.testMatrixId = Objects.requireNonNull(testMatrixId);
            return this;
        }

        public Builder setTestSpecification(TestSpecificationResponse testSpecification) {
            this.testSpecification = Objects.requireNonNull(testSpecification);
            return this;
        }

        public Builder setTimestamp(String timestamp) {
            this.timestamp = Objects.requireNonNull(timestamp);
            return this;
        }
        public GetTestMatrixResult build() {
            return new GetTestMatrixResult(clientInfo, environmentMatrix, failFast, flakyTestAttempts, invalidMatrixDetails, outcomeSummary, project, resultStorage, state, testExecutions, testMatrixId, testSpecification, timestamp);
        }
    }
}
