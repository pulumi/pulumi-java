// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetAccessItemArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetReferenceArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetTagsItemArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.EncryptionConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatasetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DatasetArgs Empty = new DatasetArgs();

    /**
     * [Optional] An array of objects that define dataset access for one or more entities. You can set this property when inserting or updating a dataset in order to control who is allowed to access the data. If unspecified at dataset creation time, BigQuery adds default dataset access for the following entities: access.specialGroup: projectReaders; access.role: READER; access.specialGroup: projectWriters; access.role: WRITER; access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail: [dataset creator email]; access.role: OWNER;
     * 
     */
    @InputImport(name="access")
    private final @Nullable Input<List<DatasetAccessItemArgs>> access;

    public Input<List<DatasetAccessItemArgs>> getAccess() {
        return this.access == null ? Input.empty() : this.access;
    }

    /**
     * [Required] A reference that identifies the dataset.
     * 
     */
    @InputImport(name="datasetReference")
    private final @Nullable Input<DatasetReferenceArgs> datasetReference;

    public Input<DatasetReferenceArgs> getDatasetReference() {
        return this.datasetReference == null ? Input.empty() : this.datasetReference;
    }

    @InputImport(name="defaultEncryptionConfiguration")
    private final @Nullable Input<EncryptionConfigurationArgs> defaultEncryptionConfiguration;

    public Input<EncryptionConfigurationArgs> getDefaultEncryptionConfiguration() {
        return this.defaultEncryptionConfiguration == null ? Input.empty() : this.defaultEncryptionConfiguration;
    }

    /**
     * [Optional] The default partition expiration for all partitioned tables in the dataset, in milliseconds. Once this property is set, all newly-created partitioned tables in the dataset will have an expirationMs property in the timePartitioning settings set to this value, and changing the value will only affect new tables, not existing ones. The storage in a partition will have an expiration time of its partition time plus this value. Setting this property overrides the use of defaultTableExpirationMs for partitioned tables: only one of defaultTableExpirationMs and defaultPartitionExpirationMs will be used for any new partitioned table. If you provide an explicit timePartitioning.expirationMs when creating or updating a partitioned table, that value takes precedence over the default partition expiration time indicated by this property.
     * 
     */
    @InputImport(name="defaultPartitionExpirationMs")
    private final @Nullable Input<String> defaultPartitionExpirationMs;

    public Input<String> getDefaultPartitionExpirationMs() {
        return this.defaultPartitionExpirationMs == null ? Input.empty() : this.defaultPartitionExpirationMs;
    }

    /**
     * [Optional] The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour). Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property.
     * 
     */
    @InputImport(name="defaultTableExpirationMs")
    private final @Nullable Input<String> defaultTableExpirationMs;

    public Input<String> getDefaultTableExpirationMs() {
        return this.defaultTableExpirationMs == null ? Input.empty() : this.defaultTableExpirationMs;
    }

    /**
     * [Optional] A user-friendly description of the dataset.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * [Optional] A descriptive name for the dataset.
     * 
     */
    @InputImport(name="friendlyName")
    private final @Nullable Input<String> friendlyName;

    public Input<String> getFriendlyName() {
        return this.friendlyName == null ? Input.empty() : this.friendlyName;
    }

    /**
     * [Optional] Indicates if table names are case insensitive in the dataset.
     * 
     */
    @InputImport(name="isCaseInsensitive")
    private final @Nullable Input<Boolean> isCaseInsensitive;

    public Input<Boolean> getIsCaseInsensitive() {
        return this.isCaseInsensitive == null ? Input.empty() : this.isCaseInsensitive;
    }

    /**
     * The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See Creating and Updating Dataset Labels for more information.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * The geographic location where the dataset should reside. The default value is US. See details at https://cloud.google.com/bigquery/docs/locations.
     * 
     */
    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * [Optional]The tags associated with this dataset. Tag keys are globally unique.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<DatasetTagsItemArgs>> tags;

    public Input<List<DatasetTagsItemArgs>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DatasetArgs(
        @Nullable Input<List<DatasetAccessItemArgs>> access,
        @Nullable Input<DatasetReferenceArgs> datasetReference,
        @Nullable Input<EncryptionConfigurationArgs> defaultEncryptionConfiguration,
        @Nullable Input<String> defaultPartitionExpirationMs,
        @Nullable Input<String> defaultTableExpirationMs,
        @Nullable Input<String> description,
        @Nullable Input<String> friendlyName,
        @Nullable Input<Boolean> isCaseInsensitive,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> project,
        @Nullable Input<List<DatasetTagsItemArgs>> tags) {
        this.access = access;
        this.datasetReference = datasetReference;
        this.defaultEncryptionConfiguration = defaultEncryptionConfiguration;
        this.defaultPartitionExpirationMs = defaultPartitionExpirationMs;
        this.defaultTableExpirationMs = defaultTableExpirationMs;
        this.description = description;
        this.friendlyName = friendlyName;
        this.isCaseInsensitive = isCaseInsensitive;
        this.labels = labels;
        this.location = location;
        this.project = project;
        this.tags = tags;
    }

    private DatasetArgs() {
        this.access = Input.empty();
        this.datasetReference = Input.empty();
        this.defaultEncryptionConfiguration = Input.empty();
        this.defaultPartitionExpirationMs = Input.empty();
        this.defaultTableExpirationMs = Input.empty();
        this.description = Input.empty();
        this.friendlyName = Input.empty();
        this.isCaseInsensitive = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.project = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<DatasetAccessItemArgs>> access;
        private @Nullable Input<DatasetReferenceArgs> datasetReference;
        private @Nullable Input<EncryptionConfigurationArgs> defaultEncryptionConfiguration;
        private @Nullable Input<String> defaultPartitionExpirationMs;
        private @Nullable Input<String> defaultTableExpirationMs;
        private @Nullable Input<String> description;
        private @Nullable Input<String> friendlyName;
        private @Nullable Input<Boolean> isCaseInsensitive;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> project;
        private @Nullable Input<List<DatasetTagsItemArgs>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.datasetReference = defaults.datasetReference;
    	      this.defaultEncryptionConfiguration = defaults.defaultEncryptionConfiguration;
    	      this.defaultPartitionExpirationMs = defaults.defaultPartitionExpirationMs;
    	      this.defaultTableExpirationMs = defaults.defaultTableExpirationMs;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.isCaseInsensitive = defaults.isCaseInsensitive;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.tags = defaults.tags;
        }

        public Builder setAccess(@Nullable Input<List<DatasetAccessItemArgs>> access) {
            this.access = access;
            return this;
        }

        public Builder setAccess(@Nullable List<DatasetAccessItemArgs> access) {
            this.access = Input.ofNullable(access);
            return this;
        }

        public Builder setDatasetReference(@Nullable Input<DatasetReferenceArgs> datasetReference) {
            this.datasetReference = datasetReference;
            return this;
        }

        public Builder setDatasetReference(@Nullable DatasetReferenceArgs datasetReference) {
            this.datasetReference = Input.ofNullable(datasetReference);
            return this;
        }

        public Builder setDefaultEncryptionConfiguration(@Nullable Input<EncryptionConfigurationArgs> defaultEncryptionConfiguration) {
            this.defaultEncryptionConfiguration = defaultEncryptionConfiguration;
            return this;
        }

        public Builder setDefaultEncryptionConfiguration(@Nullable EncryptionConfigurationArgs defaultEncryptionConfiguration) {
            this.defaultEncryptionConfiguration = Input.ofNullable(defaultEncryptionConfiguration);
            return this;
        }

        public Builder setDefaultPartitionExpirationMs(@Nullable Input<String> defaultPartitionExpirationMs) {
            this.defaultPartitionExpirationMs = defaultPartitionExpirationMs;
            return this;
        }

        public Builder setDefaultPartitionExpirationMs(@Nullable String defaultPartitionExpirationMs) {
            this.defaultPartitionExpirationMs = Input.ofNullable(defaultPartitionExpirationMs);
            return this;
        }

        public Builder setDefaultTableExpirationMs(@Nullable Input<String> defaultTableExpirationMs) {
            this.defaultTableExpirationMs = defaultTableExpirationMs;
            return this;
        }

        public Builder setDefaultTableExpirationMs(@Nullable String defaultTableExpirationMs) {
            this.defaultTableExpirationMs = Input.ofNullable(defaultTableExpirationMs);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setFriendlyName(@Nullable Input<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder setFriendlyName(@Nullable String friendlyName) {
            this.friendlyName = Input.ofNullable(friendlyName);
            return this;
        }

        public Builder setIsCaseInsensitive(@Nullable Input<Boolean> isCaseInsensitive) {
            this.isCaseInsensitive = isCaseInsensitive;
            return this;
        }

        public Builder setIsCaseInsensitive(@Nullable Boolean isCaseInsensitive) {
            this.isCaseInsensitive = Input.ofNullable(isCaseInsensitive);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setTags(@Nullable Input<List<DatasetTagsItemArgs>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<DatasetTagsItemArgs> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public DatasetArgs build() {
            return new DatasetArgs(access, datasetReference, defaultEncryptionConfiguration, defaultPartitionExpirationMs, defaultTableExpirationMs, description, friendlyName, isCaseInsensitive, labels, location, project, tags);
        }
    }
}
