// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
 * 
 */
public final class IosXcTestResponse extends io.pulumi.resources.InvokeArgs {

    public static final IosXcTestResponse Empty = new IosXcTestResponse();

    /**
     * The bundle id for the application under test.
     * 
     */
    @InputImport(name="appBundleId", required=true)
      private final String appBundleId;

    public String getAppBundleId() {
        return this.appBundleId;
    }

    /**
     * The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
     * 
     */
    @InputImport(name="testSpecialEntitlements", required=true)
      private final Boolean testSpecialEntitlements;

    public Boolean getTestSpecialEntitlements() {
        return this.testSpecialEntitlements;
    }

    /**
     * The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
     * 
     */
    @InputImport(name="testsZip", required=true)
      private final FileReferenceResponse testsZip;

    public FileReferenceResponse getTestsZip() {
        return this.testsZip;
    }

    /**
     * The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
     * 
     */
    @InputImport(name="xcodeVersion", required=true)
      private final String xcodeVersion;

    public String getXcodeVersion() {
        return this.xcodeVersion;
    }

    /**
     * An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
     * 
     */
    @InputImport(name="xctestrun", required=true)
      private final FileReferenceResponse xctestrun;

    public FileReferenceResponse getXctestrun() {
        return this.xctestrun;
    }

    public IosXcTestResponse(
        String appBundleId,
        Boolean testSpecialEntitlements,
        FileReferenceResponse testsZip,
        String xcodeVersion,
        FileReferenceResponse xctestrun) {
        this.appBundleId = Objects.requireNonNull(appBundleId, "expected parameter 'appBundleId' to be non-null");
        this.testSpecialEntitlements = Objects.requireNonNull(testSpecialEntitlements, "expected parameter 'testSpecialEntitlements' to be non-null");
        this.testsZip = Objects.requireNonNull(testsZip, "expected parameter 'testsZip' to be non-null");
        this.xcodeVersion = Objects.requireNonNull(xcodeVersion, "expected parameter 'xcodeVersion' to be non-null");
        this.xctestrun = Objects.requireNonNull(xctestrun, "expected parameter 'xctestrun' to be non-null");
    }

    private IosXcTestResponse() {
        this.appBundleId = null;
        this.testSpecialEntitlements = null;
        this.testsZip = null;
        this.xcodeVersion = null;
        this.xctestrun = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IosXcTestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appBundleId;
        private Boolean testSpecialEntitlements;
        private FileReferenceResponse testsZip;
        private String xcodeVersion;
        private FileReferenceResponse xctestrun;

        public Builder() {
    	      // Empty
        }

        public Builder(IosXcTestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appBundleId = defaults.appBundleId;
    	      this.testSpecialEntitlements = defaults.testSpecialEntitlements;
    	      this.testsZip = defaults.testsZip;
    	      this.xcodeVersion = defaults.xcodeVersion;
    	      this.xctestrun = defaults.xctestrun;
        }

        public Builder appBundleId(String appBundleId) {
            this.appBundleId = Objects.requireNonNull(appBundleId);
            return this;
        }

        public Builder testSpecialEntitlements(Boolean testSpecialEntitlements) {
            this.testSpecialEntitlements = Objects.requireNonNull(testSpecialEntitlements);
            return this;
        }

        public Builder testsZip(FileReferenceResponse testsZip) {
            this.testsZip = Objects.requireNonNull(testsZip);
            return this;
        }

        public Builder xcodeVersion(String xcodeVersion) {
            this.xcodeVersion = Objects.requireNonNull(xcodeVersion);
            return this;
        }

        public Builder xctestrun(FileReferenceResponse xctestrun) {
            this.xctestrun = Objects.requireNonNull(xctestrun);
            return this;
        }
        public IosXcTestResponse build() {
            return new IosXcTestResponse(appBundleId, testSpecialEntitlements, testsZip, xcodeVersion, xctestrun);
        }
    }
}
