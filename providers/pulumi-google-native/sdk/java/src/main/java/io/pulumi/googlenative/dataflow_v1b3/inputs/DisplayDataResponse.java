// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Data provided with a pipeline or transform to provide descriptive info.
 * 
 */
public final class DisplayDataResponse extends io.pulumi.resources.InvokeArgs {

    public static final DisplayDataResponse Empty = new DisplayDataResponse();

    /**
     * Contains value if the data is of a boolean type.
     * 
     */
    @InputImport(name="boolValue", required=true)
      private final Boolean boolValue;

    public Boolean getBoolValue() {
        return this.boolValue;
    }

    /**
     * Contains value if the data is of duration type.
     * 
     */
    @InputImport(name="durationValue", required=true)
      private final String durationValue;

    public String getDurationValue() {
        return this.durationValue;
    }

    /**
     * Contains value if the data is of float type.
     * 
     */
    @InputImport(name="floatValue", required=true)
      private final Double floatValue;

    public Double getFloatValue() {
        return this.floatValue;
    }

    /**
     * Contains value if the data is of int64 type.
     * 
     */
    @InputImport(name="int64Value", required=true)
      private final String int64Value;

    public String getInt64Value() {
        return this.int64Value;
    }

    /**
     * Contains value if the data is of java class type.
     * 
     */
    @InputImport(name="javaClassValue", required=true)
      private final String javaClassValue;

    public String getJavaClassValue() {
        return this.javaClassValue;
    }

    /**
     * The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
     * 
     */
    @InputImport(name="key", required=true)
      private final String key;

    public String getKey() {
        return this.key;
    }

    /**
     * An optional label to display in a dax UI for the element.
     * 
     */
    @InputImport(name="label", required=true)
      private final String label;

    public String getLabel() {
        return this.label;
    }

    /**
     * The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
     * 
     */
    @InputImport(name="namespace", required=true)
      private final String namespace;

    public String getNamespace() {
        return this.namespace;
    }

    /**
     * A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
     * 
     */
    @InputImport(name="shortStrValue", required=true)
      private final String shortStrValue;

    public String getShortStrValue() {
        return this.shortStrValue;
    }

    /**
     * Contains value if the data is of string type.
     * 
     */
    @InputImport(name="strValue", required=true)
      private final String strValue;

    public String getStrValue() {
        return this.strValue;
    }

    /**
     * Contains value if the data is of timestamp type.
     * 
     */
    @InputImport(name="timestampValue", required=true)
      private final String timestampValue;

    public String getTimestampValue() {
        return this.timestampValue;
    }

    /**
     * An optional full URL.
     * 
     */
    @InputImport(name="url", required=true)
      private final String url;

    public String getUrl() {
        return this.url;
    }

    public DisplayDataResponse(
        Boolean boolValue,
        String durationValue,
        Double floatValue,
        String int64Value,
        String javaClassValue,
        String key,
        String label,
        String namespace,
        String shortStrValue,
        String strValue,
        String timestampValue,
        String url) {
        this.boolValue = Objects.requireNonNull(boolValue, "expected parameter 'boolValue' to be non-null");
        this.durationValue = Objects.requireNonNull(durationValue, "expected parameter 'durationValue' to be non-null");
        this.floatValue = Objects.requireNonNull(floatValue, "expected parameter 'floatValue' to be non-null");
        this.int64Value = Objects.requireNonNull(int64Value, "expected parameter 'int64Value' to be non-null");
        this.javaClassValue = Objects.requireNonNull(javaClassValue, "expected parameter 'javaClassValue' to be non-null");
        this.key = Objects.requireNonNull(key, "expected parameter 'key' to be non-null");
        this.label = Objects.requireNonNull(label, "expected parameter 'label' to be non-null");
        this.namespace = Objects.requireNonNull(namespace, "expected parameter 'namespace' to be non-null");
        this.shortStrValue = Objects.requireNonNull(shortStrValue, "expected parameter 'shortStrValue' to be non-null");
        this.strValue = Objects.requireNonNull(strValue, "expected parameter 'strValue' to be non-null");
        this.timestampValue = Objects.requireNonNull(timestampValue, "expected parameter 'timestampValue' to be non-null");
        this.url = Objects.requireNonNull(url, "expected parameter 'url' to be non-null");
    }

    private DisplayDataResponse() {
        this.boolValue = null;
        this.durationValue = null;
        this.floatValue = null;
        this.int64Value = null;
        this.javaClassValue = null;
        this.key = null;
        this.label = null;
        this.namespace = null;
        this.shortStrValue = null;
        this.strValue = null;
        this.timestampValue = null;
        this.url = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DisplayDataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean boolValue;
        private String durationValue;
        private Double floatValue;
        private String int64Value;
        private String javaClassValue;
        private String key;
        private String label;
        private String namespace;
        private String shortStrValue;
        private String strValue;
        private String timestampValue;
        private String url;

        public Builder() {
    	      // Empty
        }

        public Builder(DisplayDataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boolValue = defaults.boolValue;
    	      this.durationValue = defaults.durationValue;
    	      this.floatValue = defaults.floatValue;
    	      this.int64Value = defaults.int64Value;
    	      this.javaClassValue = defaults.javaClassValue;
    	      this.key = defaults.key;
    	      this.label = defaults.label;
    	      this.namespace = defaults.namespace;
    	      this.shortStrValue = defaults.shortStrValue;
    	      this.strValue = defaults.strValue;
    	      this.timestampValue = defaults.timestampValue;
    	      this.url = defaults.url;
        }

        public Builder boolValue(Boolean boolValue) {
            this.boolValue = Objects.requireNonNull(boolValue);
            return this;
        }

        public Builder durationValue(String durationValue) {
            this.durationValue = Objects.requireNonNull(durationValue);
            return this;
        }

        public Builder floatValue(Double floatValue) {
            this.floatValue = Objects.requireNonNull(floatValue);
            return this;
        }

        public Builder int64Value(String int64Value) {
            this.int64Value = Objects.requireNonNull(int64Value);
            return this;
        }

        public Builder javaClassValue(String javaClassValue) {
            this.javaClassValue = Objects.requireNonNull(javaClassValue);
            return this;
        }

        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }

        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }

        public Builder shortStrValue(String shortStrValue) {
            this.shortStrValue = Objects.requireNonNull(shortStrValue);
            return this;
        }

        public Builder strValue(String strValue) {
            this.strValue = Objects.requireNonNull(strValue);
            return this;
        }

        public Builder timestampValue(String timestampValue) {
            this.timestampValue = Objects.requireNonNull(timestampValue);
            return this;
        }

        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public DisplayDataResponse build() {
            return new DisplayDataResponse(boolValue, durationValue, floatValue, int64Value, javaClassValue, key, label, namespace, shortStrValue, strValue, timestampValue, url);
        }
    }
}
