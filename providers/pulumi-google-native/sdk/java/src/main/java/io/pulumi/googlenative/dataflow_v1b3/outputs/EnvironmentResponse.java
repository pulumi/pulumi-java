// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.DebugOptionsResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.WorkerPoolResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class EnvironmentResponse {
    /**
     * The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
     * 
     */
    private final String clusterManagerApiService;
    /**
     * The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
     * 
     */
    private final String dataset;
    /**
     * Any debugging options to be supplied to the job.
     * 
     */
    private final DebugOptionsResponse debugOptions;
    /**
     * The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
     * 
     */
    private final List<String> experiments;
    /**
     * Which Flexible Resource Scheduling mode to run in.
     * 
     */
    private final String flexResourceSchedulingGoal;
    /**
     * Experimental settings.
     * 
     */
    private final Map<String,String> internalExperiments;
    /**
     * The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
     * 
     */
    private final Map<String,String> sdkPipelineOptions;
    /**
     * Identity to run virtual machines as. Defaults to the default account.
     * 
     */
    private final String serviceAccountEmail;
    /**
     * If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
     * 
     */
    private final String serviceKmsKeyName;
    /**
     * The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
     * 
     */
    private final List<String> serviceOptions;
    /**
     * The shuffle mode used for the job.
     * 
     */
    private final String shuffleMode;
    /**
     * The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
     */
    private final String tempStoragePrefix;
    /**
     * A description of the process that generated the request.
     * 
     */
    private final Map<String,String> userAgent;
    /**
     * A structure describing which components and their versions of the service are required in order to run the job.
     * 
     */
    private final Map<String,String> version;
    /**
     * The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
     * 
     */
    private final List<WorkerPoolResponse> workerPools;
    /**
     * The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
     * 
     */
    private final String workerRegion;
    /**
     * The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
     * 
     */
    private final String workerZone;

    @OutputCustomType.Constructor
    private EnvironmentResponse(
        @OutputCustomType.Parameter("clusterManagerApiService") String clusterManagerApiService,
        @OutputCustomType.Parameter("dataset") String dataset,
        @OutputCustomType.Parameter("debugOptions") DebugOptionsResponse debugOptions,
        @OutputCustomType.Parameter("experiments") List<String> experiments,
        @OutputCustomType.Parameter("flexResourceSchedulingGoal") String flexResourceSchedulingGoal,
        @OutputCustomType.Parameter("internalExperiments") Map<String,String> internalExperiments,
        @OutputCustomType.Parameter("sdkPipelineOptions") Map<String,String> sdkPipelineOptions,
        @OutputCustomType.Parameter("serviceAccountEmail") String serviceAccountEmail,
        @OutputCustomType.Parameter("serviceKmsKeyName") String serviceKmsKeyName,
        @OutputCustomType.Parameter("serviceOptions") List<String> serviceOptions,
        @OutputCustomType.Parameter("shuffleMode") String shuffleMode,
        @OutputCustomType.Parameter("tempStoragePrefix") String tempStoragePrefix,
        @OutputCustomType.Parameter("userAgent") Map<String,String> userAgent,
        @OutputCustomType.Parameter("version") Map<String,String> version,
        @OutputCustomType.Parameter("workerPools") List<WorkerPoolResponse> workerPools,
        @OutputCustomType.Parameter("workerRegion") String workerRegion,
        @OutputCustomType.Parameter("workerZone") String workerZone) {
        this.clusterManagerApiService = clusterManagerApiService;
        this.dataset = dataset;
        this.debugOptions = debugOptions;
        this.experiments = experiments;
        this.flexResourceSchedulingGoal = flexResourceSchedulingGoal;
        this.internalExperiments = internalExperiments;
        this.sdkPipelineOptions = sdkPipelineOptions;
        this.serviceAccountEmail = serviceAccountEmail;
        this.serviceKmsKeyName = serviceKmsKeyName;
        this.serviceOptions = serviceOptions;
        this.shuffleMode = shuffleMode;
        this.tempStoragePrefix = tempStoragePrefix;
        this.userAgent = userAgent;
        this.version = version;
        this.workerPools = workerPools;
        this.workerRegion = workerRegion;
        this.workerZone = workerZone;
    }

    /**
     * The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
     * 
    */
    public String getClusterManagerApiService() {
        return this.clusterManagerApiService;
    }
    /**
     * The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
     * 
    */
    public String getDataset() {
        return this.dataset;
    }
    /**
     * Any debugging options to be supplied to the job.
     * 
    */
    public DebugOptionsResponse getDebugOptions() {
        return this.debugOptions;
    }
    /**
     * The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
     * 
    */
    public List<String> getExperiments() {
        return this.experiments;
    }
    /**
     * Which Flexible Resource Scheduling mode to run in.
     * 
    */
    public String getFlexResourceSchedulingGoal() {
        return this.flexResourceSchedulingGoal;
    }
    /**
     * Experimental settings.
     * 
    */
    public Map<String,String> getInternalExperiments() {
        return this.internalExperiments;
    }
    /**
     * The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
     * 
    */
    public Map<String,String> getSdkPipelineOptions() {
        return this.sdkPipelineOptions;
    }
    /**
     * Identity to run virtual machines as. Defaults to the default account.
     * 
    */
    public String getServiceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
     * 
    */
    public String getServiceKmsKeyName() {
        return this.serviceKmsKeyName;
    }
    /**
     * The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
     * 
    */
    public List<String> getServiceOptions() {
        return this.serviceOptions;
    }
    /**
     * The shuffle mode used for the job.
     * 
    */
    public String getShuffleMode() {
        return this.shuffleMode;
    }
    /**
     * The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     * 
    */
    public String getTempStoragePrefix() {
        return this.tempStoragePrefix;
    }
    /**
     * A description of the process that generated the request.
     * 
    */
    public Map<String,String> getUserAgent() {
        return this.userAgent;
    }
    /**
     * A structure describing which components and their versions of the service are required in order to run the job.
     * 
    */
    public Map<String,String> getVersion() {
        return this.version;
    }
    /**
     * The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
     * 
    */
    public List<WorkerPoolResponse> getWorkerPools() {
        return this.workerPools;
    }
    /**
     * The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
     * 
    */
    public String getWorkerRegion() {
        return this.workerRegion;
    }
    /**
     * The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
     * 
    */
    public String getWorkerZone() {
        return this.workerZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clusterManagerApiService;
        private String dataset;
        private DebugOptionsResponse debugOptions;
        private List<String> experiments;
        private String flexResourceSchedulingGoal;
        private Map<String,String> internalExperiments;
        private Map<String,String> sdkPipelineOptions;
        private String serviceAccountEmail;
        private String serviceKmsKeyName;
        private List<String> serviceOptions;
        private String shuffleMode;
        private String tempStoragePrefix;
        private Map<String,String> userAgent;
        private Map<String,String> version;
        private List<WorkerPoolResponse> workerPools;
        private String workerRegion;
        private String workerZone;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterManagerApiService = defaults.clusterManagerApiService;
    	      this.dataset = defaults.dataset;
    	      this.debugOptions = defaults.debugOptions;
    	      this.experiments = defaults.experiments;
    	      this.flexResourceSchedulingGoal = defaults.flexResourceSchedulingGoal;
    	      this.internalExperiments = defaults.internalExperiments;
    	      this.sdkPipelineOptions = defaults.sdkPipelineOptions;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.serviceKmsKeyName = defaults.serviceKmsKeyName;
    	      this.serviceOptions = defaults.serviceOptions;
    	      this.shuffleMode = defaults.shuffleMode;
    	      this.tempStoragePrefix = defaults.tempStoragePrefix;
    	      this.userAgent = defaults.userAgent;
    	      this.version = defaults.version;
    	      this.workerPools = defaults.workerPools;
    	      this.workerRegion = defaults.workerRegion;
    	      this.workerZone = defaults.workerZone;
        }

        public Builder clusterManagerApiService(String clusterManagerApiService) {
            this.clusterManagerApiService = Objects.requireNonNull(clusterManagerApiService);
            return this;
        }

        public Builder dataset(String dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }

        public Builder debugOptions(DebugOptionsResponse debugOptions) {
            this.debugOptions = Objects.requireNonNull(debugOptions);
            return this;
        }

        public Builder experiments(List<String> experiments) {
            this.experiments = Objects.requireNonNull(experiments);
            return this;
        }

        public Builder flexResourceSchedulingGoal(String flexResourceSchedulingGoal) {
            this.flexResourceSchedulingGoal = Objects.requireNonNull(flexResourceSchedulingGoal);
            return this;
        }

        public Builder internalExperiments(Map<String,String> internalExperiments) {
            this.internalExperiments = Objects.requireNonNull(internalExperiments);
            return this;
        }

        public Builder sdkPipelineOptions(Map<String,String> sdkPipelineOptions) {
            this.sdkPipelineOptions = Objects.requireNonNull(sdkPipelineOptions);
            return this;
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }

        public Builder serviceKmsKeyName(String serviceKmsKeyName) {
            this.serviceKmsKeyName = Objects.requireNonNull(serviceKmsKeyName);
            return this;
        }

        public Builder serviceOptions(List<String> serviceOptions) {
            this.serviceOptions = Objects.requireNonNull(serviceOptions);
            return this;
        }

        public Builder shuffleMode(String shuffleMode) {
            this.shuffleMode = Objects.requireNonNull(shuffleMode);
            return this;
        }

        public Builder tempStoragePrefix(String tempStoragePrefix) {
            this.tempStoragePrefix = Objects.requireNonNull(tempStoragePrefix);
            return this;
        }

        public Builder userAgent(Map<String,String> userAgent) {
            this.userAgent = Objects.requireNonNull(userAgent);
            return this;
        }

        public Builder version(Map<String,String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder workerPools(List<WorkerPoolResponse> workerPools) {
            this.workerPools = Objects.requireNonNull(workerPools);
            return this;
        }

        public Builder workerRegion(String workerRegion) {
            this.workerRegion = Objects.requireNonNull(workerRegion);
            return this;
        }

        public Builder workerZone(String workerZone) {
            this.workerZone = Objects.requireNonNull(workerZone);
            return this;
        }
        public EnvironmentResponse build() {
            return new EnvironmentResponse(clusterManagerApiService, dataset, debugOptions, experiments, flexResourceSchedulingGoal, internalExperiments, sdkPipelineOptions, serviceAccountEmail, serviceKmsKeyName, serviceOptions, shuffleMode, tempStoragePrefix, userAgent, version, workerPools, workerRegion, workerZone);
        }
    }
}
