// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.firebasehosting_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class CertDnsChallengeResponse {
    /**
     * The domain name upon which the DNS challenge must be satisfied.
     * 
     */
    private final String domainName;
    /**
     * The value that must be present as a TXT record on the domain name to satisfy the challenge.
     * 
     */
    private final String token;

    @OutputCustomType.Constructor({"domainName","token"})
    private CertDnsChallengeResponse(
        String domainName,
        String token) {
        this.domainName = Objects.requireNonNull(domainName);
        this.token = Objects.requireNonNull(token);
    }

    /**
     * The domain name upon which the DNS challenge must be satisfied.
     * 
     */
    public String getDomainName() {
        return this.domainName;
    }
    /**
     * The value that must be present as a TXT record on the domain name to satisfy the challenge.
     * 
     */
    public String getToken() {
        return this.token;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertDnsChallengeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String domainName;
        private String token;

        public Builder() {
    	      // Empty
        }

        public Builder(CertDnsChallengeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.token = defaults.token;
        }

        public Builder setDomainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }

        public Builder setToken(String token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }

        public CertDnsChallengeResponse build() {
            return new CertDnsChallengeResponse(domainName, token);
        }
    }
}
