// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.pubsublite_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


/**
 * The settings for this topic's Reservation usage.
 * 
 */
public final class ReservationConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final ReservationConfigResponse Empty = new ReservationConfigResponse();

    /**
     * The Reservation to use for this topic's throughput capacity. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
     * 
     */
    @InputImport(name="throughputReservation", required=true)
    private final String throughputReservation;

    public String getThroughputReservation() {
        return this.throughputReservation;
    }

    public ReservationConfigResponse(String throughputReservation) {
        this.throughputReservation = Objects.requireNonNull(throughputReservation, "expected parameter 'throughputReservation' to be non-null");
    }

    private ReservationConfigResponse() {
        this.throughputReservation = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReservationConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String throughputReservation;

        public Builder() {
    	      // Empty
        }

        public Builder(ReservationConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.throughputReservation = defaults.throughputReservation;
        }

        public Builder setThroughputReservation(String throughputReservation) {
            this.throughputReservation = Objects.requireNonNull(throughputReservation);
            return this;
        }

        public ReservationConfigResponse build() {
            return new ReservationConfigResponse(throughputReservation);
        }
    }
}
