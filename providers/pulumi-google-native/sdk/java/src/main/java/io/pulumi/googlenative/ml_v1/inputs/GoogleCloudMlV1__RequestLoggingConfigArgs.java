// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.ml_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration for logging request-response pairs to a BigQuery table. Online prediction requests to a model version and the responses to these requests are converted to raw strings and saved to the specified BigQuery table. Logging is constrained by [BigQuery quotas and limits](/bigquery/quotas). If your project exceeds BigQuery quotas or limits, AI Platform Prediction does not log request-response pairs, but it continues to serve predictions. If you are using [continuous evaluation](/ml-engine/docs/continuous-evaluation/), you do not need to specify this configuration manually. Setting up continuous evaluation automatically enables logging of request-response pairs.
 * 
 */
public final class GoogleCloudMlV1__RequestLoggingConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final GoogleCloudMlV1__RequestLoggingConfigArgs Empty = new GoogleCloudMlV1__RequestLoggingConfigArgs();

    /**
     * Fully qualified BigQuery table name in the following format: " project_id.dataset_name.table_name" The specified table must already exist, and the "Cloud ML Service Agent" for your project must have permission to write to it. The table must have the following [schema](/bigquery/docs/schemas): Field nameType Mode model STRING REQUIRED model_version STRING REQUIRED time TIMESTAMP REQUIRED raw_data STRING REQUIRED raw_prediction STRING NULLABLE groundtruth STRING NULLABLE
     * 
     */
    @InputImport(name="bigqueryTableName", required=true)
      private final Input<String> bigqueryTableName;

    public Input<String> getBigqueryTableName() {
        return this.bigqueryTableName;
    }

    /**
     * Percentage of requests to be logged, expressed as a fraction from 0 to 1. For example, if you want to log 10% of requests, enter `0.1`. The sampling window is the lifetime of the model version. Defaults to 0.
     * 
     */
    @InputImport(name="samplingPercentage")
      private final @Nullable Input<Double> samplingPercentage;

    public Input<Double> getSamplingPercentage() {
        return this.samplingPercentage == null ? Input.empty() : this.samplingPercentage;
    }

    public GoogleCloudMlV1__RequestLoggingConfigArgs(
        Input<String> bigqueryTableName,
        @Nullable Input<Double> samplingPercentage) {
        this.bigqueryTableName = Objects.requireNonNull(bigqueryTableName, "expected parameter 'bigqueryTableName' to be non-null");
        this.samplingPercentage = samplingPercentage;
    }

    private GoogleCloudMlV1__RequestLoggingConfigArgs() {
        this.bigqueryTableName = Input.empty();
        this.samplingPercentage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudMlV1__RequestLoggingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> bigqueryTableName;
        private @Nullable Input<Double> samplingPercentage;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudMlV1__RequestLoggingConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigqueryTableName = defaults.bigqueryTableName;
    	      this.samplingPercentage = defaults.samplingPercentage;
        }

        public Builder bigqueryTableName(Input<String> bigqueryTableName) {
            this.bigqueryTableName = Objects.requireNonNull(bigqueryTableName);
            return this;
        }

        public Builder bigqueryTableName(String bigqueryTableName) {
            this.bigqueryTableName = Input.of(Objects.requireNonNull(bigqueryTableName));
            return this;
        }

        public Builder samplingPercentage(@Nullable Input<Double> samplingPercentage) {
            this.samplingPercentage = samplingPercentage;
            return this;
        }

        public Builder samplingPercentage(@Nullable Double samplingPercentage) {
            this.samplingPercentage = Input.ofNullable(samplingPercentage);
            return this;
        }
        public GoogleCloudMlV1__RequestLoggingConfigArgs build() {
            return new GoogleCloudMlV1__RequestLoggingConfigArgs(bigqueryTableName, samplingPercentage);
        }
    }
}
