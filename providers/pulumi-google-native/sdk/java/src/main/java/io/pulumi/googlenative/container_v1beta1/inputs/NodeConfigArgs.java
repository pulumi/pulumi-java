// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.container_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.container_v1beta1.inputs.AcceleratorConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.AdvancedMachineFeaturesArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.EphemeralStorageConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.GcfsConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.LinuxNodeConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeKubeletConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.NodeTaintArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.ReservationAffinityArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.SandboxConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.ShieldedInstanceConfigArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.VirtualNICArgs;
import io.pulumi.googlenative.container_v1beta1.inputs.WorkloadMetadataConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Parameters that describe the nodes in a cluster.
 * 
 */
public final class NodeConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final NodeConfigArgs Empty = new NodeConfigArgs();

    /**
     * A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
     * 
     */
    @InputImport(name="accelerators")
    private final @Nullable Input<List<AcceleratorConfigArgs>> accelerators;

    public Input<List<AcceleratorConfigArgs>> getAccelerators() {
        return this.accelerators == null ? Input.empty() : this.accelerators;
    }

    /**
     * Advanced features for the Compute Engine VM.
     * 
     */
    @InputImport(name="advancedMachineFeatures")
    private final @Nullable Input<AdvancedMachineFeaturesArgs> advancedMachineFeatures;

    public Input<AdvancedMachineFeaturesArgs> getAdvancedMachineFeatures() {
        return this.advancedMachineFeatures == null ? Input.empty() : this.advancedMachineFeatures;
    }

    /**
     *  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
     * 
     */
    @InputImport(name="bootDiskKmsKey")
    private final @Nullable Input<String> bootDiskKmsKey;

    public Input<String> getBootDiskKmsKey() {
        return this.bootDiskKmsKey == null ? Input.empty() : this.bootDiskKmsKey;
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
     * 
     */
    @InputImport(name="diskSizeGb")
    private final @Nullable Input<Integer> diskSizeGb;

    public Input<Integer> getDiskSizeGb() {
        return this.diskSizeGb == null ? Input.empty() : this.diskSizeGb;
    }

    /**
     * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
     * 
     */
    @InputImport(name="diskType")
    private final @Nullable Input<String> diskType;

    public Input<String> getDiskType() {
        return this.diskType == null ? Input.empty() : this.diskType;
    }

    /**
     * Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    @InputImport(name="ephemeralStorageConfig")
    private final @Nullable Input<EphemeralStorageConfigArgs> ephemeralStorageConfig;

    public Input<EphemeralStorageConfigArgs> getEphemeralStorageConfig() {
        return this.ephemeralStorageConfig == null ? Input.empty() : this.ephemeralStorageConfig;
    }

    /**
     * GCFS (Google Container File System) configs.
     * 
     */
    @InputImport(name="gcfsConfig")
    private final @Nullable Input<GcfsConfigArgs> gcfsConfig;

    public Input<GcfsConfigArgs> getGcfsConfig() {
        return this.gcfsConfig == null ? Input.empty() : this.gcfsConfig;
    }

    /**
     * Enable or disable gvnic on the node pool.
     * 
     */
    @InputImport(name="gvnic")
    private final @Nullable Input<VirtualNICArgs> gvnic;

    public Input<VirtualNICArgs> getGvnic() {
        return this.gvnic == null ? Input.empty() : this.gvnic;
    }

    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    @InputImport(name="imageType")
    private final @Nullable Input<String> imageType;

    public Input<String> getImageType() {
        return this.imageType == null ? Input.empty() : this.imageType;
    }

    /**
     * Node kubelet configs.
     * 
     */
    @InputImport(name="kubeletConfig")
    private final @Nullable Input<NodeKubeletConfigArgs> kubeletConfig;

    public Input<NodeKubeletConfigArgs> getKubeletConfig() {
        return this.kubeletConfig == null ? Input.empty() : this.kubeletConfig;
    }

    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * Parameters that can be configured on Linux nodes.
     * 
     */
    @InputImport(name="linuxNodeConfig")
    private final @Nullable Input<LinuxNodeConfigArgs> linuxNodeConfig;

    public Input<LinuxNodeConfigArgs> getLinuxNodeConfig() {
        return this.linuxNodeConfig == null ? Input.empty() : this.linuxNodeConfig;
    }

    /**
     * The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
     * 
     */
    @InputImport(name="localSsdCount")
    private final @Nullable Input<Integer> localSsdCount;

    public Input<Integer> getLocalSsdCount() {
        return this.localSsdCount == null ? Input.empty() : this.localSsdCount;
    }

    /**
     * The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.
     * 
     */
    @InputImport(name="machineType")
    private final @Nullable Input<String> machineType;

    public Input<String> getMachineType() {
        return this.machineType == null ? Input.empty() : this.machineType;
    }

    /**
     * The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-oslogin" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
     * 
     */
    @InputImport(name="metadata")
    private final @Nullable Input<Map<String,String>> metadata;

    public Input<Map<String,String>> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    /**
     * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
     * 
     */
    @InputImport(name="minCpuPlatform")
    private final @Nullable Input<String> minCpuPlatform;

    public Input<String> getMinCpuPlatform() {
        return this.minCpuPlatform == null ? Input.empty() : this.minCpuPlatform;
    }

    /**
     * Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
     * 
     */
    @InputImport(name="nodeGroup")
    private final @Nullable Input<String> nodeGroup;

    public Input<String> getNodeGroup() {
        return this.nodeGroup == null ? Input.empty() : this.nodeGroup;
    }

    /**
     * The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
     * 
     */
    @InputImport(name="oauthScopes")
    private final @Nullable Input<List<String>> oauthScopes;

    public Input<List<String>> getOauthScopes() {
        return this.oauthScopes == null ? Input.empty() : this.oauthScopes;
    }

    /**
     * Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more inforamtion about preemptible VM instances.
     * 
     */
    @InputImport(name="preemptible")
    private final @Nullable Input<Boolean> preemptible;

    public Input<Boolean> getPreemptible() {
        return this.preemptible == null ? Input.empty() : this.preemptible;
    }

    /**
     * The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
     * 
     */
    @InputImport(name="reservationAffinity")
    private final @Nullable Input<ReservationAffinityArgs> reservationAffinity;

    public Input<ReservationAffinityArgs> getReservationAffinity() {
        return this.reservationAffinity == null ? Input.empty() : this.reservationAffinity;
    }

    /**
     * Sandbox configuration for this node.
     * 
     */
    @InputImport(name="sandboxConfig")
    private final @Nullable Input<SandboxConfigArgs> sandboxConfig;

    public Input<SandboxConfigArgs> getSandboxConfig() {
        return this.sandboxConfig == null ? Input.empty() : this.sandboxConfig;
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
     * 
     */
    @InputImport(name="serviceAccount")
    private final @Nullable Input<String> serviceAccount;

    public Input<String> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    /**
     * Shielded Instance options.
     * 
     */
    @InputImport(name="shieldedInstanceConfig")
    private final @Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig;

    public Input<ShieldedInstanceConfigArgs> getShieldedInstanceConfig() {
        return this.shieldedInstanceConfig == null ? Input.empty() : this.shieldedInstanceConfig;
    }

    /**
     * Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
     * 
     */
    @InputImport(name="spot")
    private final @Nullable Input<Boolean> spot;

    public Input<Boolean> getSpot() {
        return this.spot == null ? Input.empty() : this.spot;
    }

    /**
     * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<List<String>> tags;

    public Input<List<String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
     * 
     */
    @InputImport(name="taints")
    private final @Nullable Input<List<NodeTaintArgs>> taints;

    public Input<List<NodeTaintArgs>> getTaints() {
        return this.taints == null ? Input.empty() : this.taints;
    }

    /**
     * The workload metadata configuration for this node.
     * 
     */
    @InputImport(name="workloadMetadataConfig")
    private final @Nullable Input<WorkloadMetadataConfigArgs> workloadMetadataConfig;

    public Input<WorkloadMetadataConfigArgs> getWorkloadMetadataConfig() {
        return this.workloadMetadataConfig == null ? Input.empty() : this.workloadMetadataConfig;
    }

    public NodeConfigArgs(
        @Nullable Input<List<AcceleratorConfigArgs>> accelerators,
        @Nullable Input<AdvancedMachineFeaturesArgs> advancedMachineFeatures,
        @Nullable Input<String> bootDiskKmsKey,
        @Nullable Input<Integer> diskSizeGb,
        @Nullable Input<String> diskType,
        @Nullable Input<EphemeralStorageConfigArgs> ephemeralStorageConfig,
        @Nullable Input<GcfsConfigArgs> gcfsConfig,
        @Nullable Input<VirtualNICArgs> gvnic,
        @Nullable Input<String> imageType,
        @Nullable Input<NodeKubeletConfigArgs> kubeletConfig,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<LinuxNodeConfigArgs> linuxNodeConfig,
        @Nullable Input<Integer> localSsdCount,
        @Nullable Input<String> machineType,
        @Nullable Input<Map<String,String>> metadata,
        @Nullable Input<String> minCpuPlatform,
        @Nullable Input<String> nodeGroup,
        @Nullable Input<List<String>> oauthScopes,
        @Nullable Input<Boolean> preemptible,
        @Nullable Input<ReservationAffinityArgs> reservationAffinity,
        @Nullable Input<SandboxConfigArgs> sandboxConfig,
        @Nullable Input<String> serviceAccount,
        @Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig,
        @Nullable Input<Boolean> spot,
        @Nullable Input<List<String>> tags,
        @Nullable Input<List<NodeTaintArgs>> taints,
        @Nullable Input<WorkloadMetadataConfigArgs> workloadMetadataConfig) {
        this.accelerators = accelerators;
        this.advancedMachineFeatures = advancedMachineFeatures;
        this.bootDiskKmsKey = bootDiskKmsKey;
        this.diskSizeGb = diskSizeGb;
        this.diskType = diskType;
        this.ephemeralStorageConfig = ephemeralStorageConfig;
        this.gcfsConfig = gcfsConfig;
        this.gvnic = gvnic;
        this.imageType = imageType;
        this.kubeletConfig = kubeletConfig;
        this.labels = labels;
        this.linuxNodeConfig = linuxNodeConfig;
        this.localSsdCount = localSsdCount;
        this.machineType = machineType;
        this.metadata = metadata;
        this.minCpuPlatform = minCpuPlatform;
        this.nodeGroup = nodeGroup;
        this.oauthScopes = oauthScopes;
        this.preemptible = preemptible;
        this.reservationAffinity = reservationAffinity;
        this.sandboxConfig = sandboxConfig;
        this.serviceAccount = serviceAccount;
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        this.spot = spot;
        this.tags = tags;
        this.taints = taints;
        this.workloadMetadataConfig = workloadMetadataConfig;
    }

    private NodeConfigArgs() {
        this.accelerators = Input.empty();
        this.advancedMachineFeatures = Input.empty();
        this.bootDiskKmsKey = Input.empty();
        this.diskSizeGb = Input.empty();
        this.diskType = Input.empty();
        this.ephemeralStorageConfig = Input.empty();
        this.gcfsConfig = Input.empty();
        this.gvnic = Input.empty();
        this.imageType = Input.empty();
        this.kubeletConfig = Input.empty();
        this.labels = Input.empty();
        this.linuxNodeConfig = Input.empty();
        this.localSsdCount = Input.empty();
        this.machineType = Input.empty();
        this.metadata = Input.empty();
        this.minCpuPlatform = Input.empty();
        this.nodeGroup = Input.empty();
        this.oauthScopes = Input.empty();
        this.preemptible = Input.empty();
        this.reservationAffinity = Input.empty();
        this.sandboxConfig = Input.empty();
        this.serviceAccount = Input.empty();
        this.shieldedInstanceConfig = Input.empty();
        this.spot = Input.empty();
        this.tags = Input.empty();
        this.taints = Input.empty();
        this.workloadMetadataConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<AcceleratorConfigArgs>> accelerators;
        private @Nullable Input<AdvancedMachineFeaturesArgs> advancedMachineFeatures;
        private @Nullable Input<String> bootDiskKmsKey;
        private @Nullable Input<Integer> diskSizeGb;
        private @Nullable Input<String> diskType;
        private @Nullable Input<EphemeralStorageConfigArgs> ephemeralStorageConfig;
        private @Nullable Input<GcfsConfigArgs> gcfsConfig;
        private @Nullable Input<VirtualNICArgs> gvnic;
        private @Nullable Input<String> imageType;
        private @Nullable Input<NodeKubeletConfigArgs> kubeletConfig;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<LinuxNodeConfigArgs> linuxNodeConfig;
        private @Nullable Input<Integer> localSsdCount;
        private @Nullable Input<String> machineType;
        private @Nullable Input<Map<String,String>> metadata;
        private @Nullable Input<String> minCpuPlatform;
        private @Nullable Input<String> nodeGroup;
        private @Nullable Input<List<String>> oauthScopes;
        private @Nullable Input<Boolean> preemptible;
        private @Nullable Input<ReservationAffinityArgs> reservationAffinity;
        private @Nullable Input<SandboxConfigArgs> sandboxConfig;
        private @Nullable Input<String> serviceAccount;
        private @Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig;
        private @Nullable Input<Boolean> spot;
        private @Nullable Input<List<String>> tags;
        private @Nullable Input<List<NodeTaintArgs>> taints;
        private @Nullable Input<WorkloadMetadataConfigArgs> workloadMetadataConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.advancedMachineFeatures = defaults.advancedMachineFeatures;
    	      this.bootDiskKmsKey = defaults.bootDiskKmsKey;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.ephemeralStorageConfig = defaults.ephemeralStorageConfig;
    	      this.gcfsConfig = defaults.gcfsConfig;
    	      this.gvnic = defaults.gvnic;
    	      this.imageType = defaults.imageType;
    	      this.kubeletConfig = defaults.kubeletConfig;
    	      this.labels = defaults.labels;
    	      this.linuxNodeConfig = defaults.linuxNodeConfig;
    	      this.localSsdCount = defaults.localSsdCount;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.nodeGroup = defaults.nodeGroup;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.preemptible = defaults.preemptible;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.sandboxConfig = defaults.sandboxConfig;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.spot = defaults.spot;
    	      this.tags = defaults.tags;
    	      this.taints = defaults.taints;
    	      this.workloadMetadataConfig = defaults.workloadMetadataConfig;
        }

        public Builder setAccelerators(@Nullable Input<List<AcceleratorConfigArgs>> accelerators) {
            this.accelerators = accelerators;
            return this;
        }

        public Builder setAccelerators(@Nullable List<AcceleratorConfigArgs> accelerators) {
            this.accelerators = Input.ofNullable(accelerators);
            return this;
        }

        public Builder setAdvancedMachineFeatures(@Nullable Input<AdvancedMachineFeaturesArgs> advancedMachineFeatures) {
            this.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }

        public Builder setAdvancedMachineFeatures(@Nullable AdvancedMachineFeaturesArgs advancedMachineFeatures) {
            this.advancedMachineFeatures = Input.ofNullable(advancedMachineFeatures);
            return this;
        }

        public Builder setBootDiskKmsKey(@Nullable Input<String> bootDiskKmsKey) {
            this.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }

        public Builder setBootDiskKmsKey(@Nullable String bootDiskKmsKey) {
            this.bootDiskKmsKey = Input.ofNullable(bootDiskKmsKey);
            return this;
        }

        public Builder setDiskSizeGb(@Nullable Input<Integer> diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }

        public Builder setDiskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = Input.ofNullable(diskSizeGb);
            return this;
        }

        public Builder setDiskType(@Nullable Input<String> diskType) {
            this.diskType = diskType;
            return this;
        }

        public Builder setDiskType(@Nullable String diskType) {
            this.diskType = Input.ofNullable(diskType);
            return this;
        }

        public Builder setEphemeralStorageConfig(@Nullable Input<EphemeralStorageConfigArgs> ephemeralStorageConfig) {
            this.ephemeralStorageConfig = ephemeralStorageConfig;
            return this;
        }

        public Builder setEphemeralStorageConfig(@Nullable EphemeralStorageConfigArgs ephemeralStorageConfig) {
            this.ephemeralStorageConfig = Input.ofNullable(ephemeralStorageConfig);
            return this;
        }

        public Builder setGcfsConfig(@Nullable Input<GcfsConfigArgs> gcfsConfig) {
            this.gcfsConfig = gcfsConfig;
            return this;
        }

        public Builder setGcfsConfig(@Nullable GcfsConfigArgs gcfsConfig) {
            this.gcfsConfig = Input.ofNullable(gcfsConfig);
            return this;
        }

        public Builder setGvnic(@Nullable Input<VirtualNICArgs> gvnic) {
            this.gvnic = gvnic;
            return this;
        }

        public Builder setGvnic(@Nullable VirtualNICArgs gvnic) {
            this.gvnic = Input.ofNullable(gvnic);
            return this;
        }

        public Builder setImageType(@Nullable Input<String> imageType) {
            this.imageType = imageType;
            return this;
        }

        public Builder setImageType(@Nullable String imageType) {
            this.imageType = Input.ofNullable(imageType);
            return this;
        }

        public Builder setKubeletConfig(@Nullable Input<NodeKubeletConfigArgs> kubeletConfig) {
            this.kubeletConfig = kubeletConfig;
            return this;
        }

        public Builder setKubeletConfig(@Nullable NodeKubeletConfigArgs kubeletConfig) {
            this.kubeletConfig = Input.ofNullable(kubeletConfig);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLinuxNodeConfig(@Nullable Input<LinuxNodeConfigArgs> linuxNodeConfig) {
            this.linuxNodeConfig = linuxNodeConfig;
            return this;
        }

        public Builder setLinuxNodeConfig(@Nullable LinuxNodeConfigArgs linuxNodeConfig) {
            this.linuxNodeConfig = Input.ofNullable(linuxNodeConfig);
            return this;
        }

        public Builder setLocalSsdCount(@Nullable Input<Integer> localSsdCount) {
            this.localSsdCount = localSsdCount;
            return this;
        }

        public Builder setLocalSsdCount(@Nullable Integer localSsdCount) {
            this.localSsdCount = Input.ofNullable(localSsdCount);
            return this;
        }

        public Builder setMachineType(@Nullable Input<String> machineType) {
            this.machineType = machineType;
            return this;
        }

        public Builder setMachineType(@Nullable String machineType) {
            this.machineType = Input.ofNullable(machineType);
            return this;
        }

        public Builder setMetadata(@Nullable Input<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable Map<String,String> metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public Builder setMinCpuPlatform(@Nullable Input<String> minCpuPlatform) {
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }

        public Builder setMinCpuPlatform(@Nullable String minCpuPlatform) {
            this.minCpuPlatform = Input.ofNullable(minCpuPlatform);
            return this;
        }

        public Builder setNodeGroup(@Nullable Input<String> nodeGroup) {
            this.nodeGroup = nodeGroup;
            return this;
        }

        public Builder setNodeGroup(@Nullable String nodeGroup) {
            this.nodeGroup = Input.ofNullable(nodeGroup);
            return this;
        }

        public Builder setOauthScopes(@Nullable Input<List<String>> oauthScopes) {
            this.oauthScopes = oauthScopes;
            return this;
        }

        public Builder setOauthScopes(@Nullable List<String> oauthScopes) {
            this.oauthScopes = Input.ofNullable(oauthScopes);
            return this;
        }

        public Builder setPreemptible(@Nullable Input<Boolean> preemptible) {
            this.preemptible = preemptible;
            return this;
        }

        public Builder setPreemptible(@Nullable Boolean preemptible) {
            this.preemptible = Input.ofNullable(preemptible);
            return this;
        }

        public Builder setReservationAffinity(@Nullable Input<ReservationAffinityArgs> reservationAffinity) {
            this.reservationAffinity = reservationAffinity;
            return this;
        }

        public Builder setReservationAffinity(@Nullable ReservationAffinityArgs reservationAffinity) {
            this.reservationAffinity = Input.ofNullable(reservationAffinity);
            return this;
        }

        public Builder setSandboxConfig(@Nullable Input<SandboxConfigArgs> sandboxConfig) {
            this.sandboxConfig = sandboxConfig;
            return this;
        }

        public Builder setSandboxConfig(@Nullable SandboxConfigArgs sandboxConfig) {
            this.sandboxConfig = Input.ofNullable(sandboxConfig);
            return this;
        }

        public Builder setServiceAccount(@Nullable Input<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder setServiceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable Input<ShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        public Builder setShieldedInstanceConfig(@Nullable ShieldedInstanceConfigArgs shieldedInstanceConfig) {
            this.shieldedInstanceConfig = Input.ofNullable(shieldedInstanceConfig);
            return this;
        }

        public Builder setSpot(@Nullable Input<Boolean> spot) {
            this.spot = spot;
            return this;
        }

        public Builder setSpot(@Nullable Boolean spot) {
            this.spot = Input.ofNullable(spot);
            return this;
        }

        public Builder setTags(@Nullable Input<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable List<String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTaints(@Nullable Input<List<NodeTaintArgs>> taints) {
            this.taints = taints;
            return this;
        }

        public Builder setTaints(@Nullable List<NodeTaintArgs> taints) {
            this.taints = Input.ofNullable(taints);
            return this;
        }

        public Builder setWorkloadMetadataConfig(@Nullable Input<WorkloadMetadataConfigArgs> workloadMetadataConfig) {
            this.workloadMetadataConfig = workloadMetadataConfig;
            return this;
        }

        public Builder setWorkloadMetadataConfig(@Nullable WorkloadMetadataConfigArgs workloadMetadataConfig) {
            this.workloadMetadataConfig = Input.ofNullable(workloadMetadataConfig);
            return this;
        }

        public NodeConfigArgs build() {
            return new NodeConfigArgs(accelerators, advancedMachineFeatures, bootDiskKmsKey, diskSizeGb, diskType, ephemeralStorageConfig, gcfsConfig, gvnic, imageType, kubeletConfig, labels, linuxNodeConfig, localSsdCount, machineType, metadata, minCpuPlatform, nodeGroup, oauthScopes, preemptible, reservationAffinity, sandboxConfig, serviceAccount, shieldedInstanceConfig, spot, tags, taints, workloadMetadataConfig);
        }
    }
}
