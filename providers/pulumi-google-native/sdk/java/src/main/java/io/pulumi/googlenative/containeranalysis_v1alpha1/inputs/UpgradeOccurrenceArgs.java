// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.UpgradeDistributionArgs;
import io.pulumi.googlenative.containeranalysis_v1alpha1.inputs.VersionArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
 * 
 */
public final class UpgradeOccurrenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final UpgradeOccurrenceArgs Empty = new UpgradeOccurrenceArgs();

    /**
     * Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     * 
     */
    @InputImport(name="distribution")
      private final @Nullable Input<UpgradeDistributionArgs> distribution;

    public Input<UpgradeDistributionArgs> getDistribution() {
        return this.distribution == null ? Input.empty() : this.distribution;
    }

    /**
     * Required - The package this Upgrade is for.
     * 
     */
    @InputImport(name="package")
      private final @Nullable Input<String> $package;

    public Input<String> get$package() {
        return this.$package == null ? Input.empty() : this.$package;
    }

    /**
     * Required - The version of the package in a machine + human readable form.
     * 
     */
    @InputImport(name="parsedVersion")
      private final @Nullable Input<VersionArgs> parsedVersion;

    public Input<VersionArgs> getParsedVersion() {
        return this.parsedVersion == null ? Input.empty() : this.parsedVersion;
    }

    public UpgradeOccurrenceArgs(
        @Nullable Input<UpgradeDistributionArgs> distribution,
        @Nullable Input<String> $package,
        @Nullable Input<VersionArgs> parsedVersion) {
        this.distribution = distribution;
        this.$package = $package;
        this.parsedVersion = parsedVersion;
    }

    private UpgradeOccurrenceArgs() {
        this.distribution = Input.empty();
        this.$package = Input.empty();
        this.parsedVersion = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpgradeOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<UpgradeDistributionArgs> distribution;
        private @Nullable Input<String> $package;
        private @Nullable Input<VersionArgs> parsedVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(UpgradeOccurrenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distribution = defaults.distribution;
    	      this.$package = defaults.$package;
    	      this.parsedVersion = defaults.parsedVersion;
        }

        public Builder distribution(@Nullable Input<UpgradeDistributionArgs> distribution) {
            this.distribution = distribution;
            return this;
        }

        public Builder distribution(@Nullable UpgradeDistributionArgs distribution) {
            this.distribution = Input.ofNullable(distribution);
            return this;
        }

        public Builder $package(@Nullable Input<String> $package) {
            this.$package = $package;
            return this;
        }

        public Builder $package(@Nullable String $package) {
            this.$package = Input.ofNullable($package);
            return this;
        }

        public Builder parsedVersion(@Nullable Input<VersionArgs> parsedVersion) {
            this.parsedVersion = parsedVersion;
            return this;
        }

        public Builder parsedVersion(@Nullable VersionArgs parsedVersion) {
            this.parsedVersion = Input.ofNullable(parsedVersion);
            return this;
        }
        public UpgradeOccurrenceArgs build() {
            return new UpgradeOccurrenceArgs(distribution, $package, parsedVersion);
        }
    }
}
