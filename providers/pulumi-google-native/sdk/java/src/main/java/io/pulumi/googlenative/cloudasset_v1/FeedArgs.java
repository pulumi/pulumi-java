// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudasset_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudasset_v1.enums.FeedContentType;
import io.pulumi.googlenative.cloudasset_v1.inputs.ExprArgs;
import io.pulumi.googlenative.cloudasset_v1.inputs.FeedOutputConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FeedArgs extends io.pulumi.resources.ResourceArgs {

    public static final FeedArgs Empty = new FeedArgs();

    @InputImport(name="assetNames")
    private final @Nullable Input<List<String>> assetNames;

    public Input<List<String>> getAssetNames() {
        return this.assetNames == null ? Input.empty() : this.assetNames;
    }

    @InputImport(name="assetTypes")
    private final @Nullable Input<List<String>> assetTypes;

    public Input<List<String>> getAssetTypes() {
        return this.assetTypes == null ? Input.empty() : this.assetTypes;
    }

    @InputImport(name="condition")
    private final @Nullable Input<ExprArgs> condition;

    public Input<ExprArgs> getCondition() {
        return this.condition == null ? Input.empty() : this.condition;
    }

    @InputImport(name="contentType")
    private final @Nullable Input<FeedContentType> contentType;

    public Input<FeedContentType> getContentType() {
        return this.contentType == null ? Input.empty() : this.contentType;
    }

    @InputImport(name="feedId", required=true)
    private final Input<String> feedId;

    public Input<String> getFeedId() {
        return this.feedId;
    }

    @InputImport(name="feedOutputConfig", required=true)
    private final Input<FeedOutputConfigArgs> feedOutputConfig;

    public Input<FeedOutputConfigArgs> getFeedOutputConfig() {
        return this.feedOutputConfig;
    }

    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="relationshipTypes")
    private final @Nullable Input<List<String>> relationshipTypes;

    public Input<List<String>> getRelationshipTypes() {
        return this.relationshipTypes == null ? Input.empty() : this.relationshipTypes;
    }

    @InputImport(name="v1Id", required=true)
    private final Input<String> v1Id;

    public Input<String> getV1Id() {
        return this.v1Id;
    }

    @InputImport(name="v1Id1", required=true)
    private final Input<String> v1Id1;

    public Input<String> getV1Id1() {
        return this.v1Id1;
    }

    public FeedArgs(
        @Nullable Input<List<String>> assetNames,
        @Nullable Input<List<String>> assetTypes,
        @Nullable Input<ExprArgs> condition,
        @Nullable Input<FeedContentType> contentType,
        Input<String> feedId,
        Input<FeedOutputConfigArgs> feedOutputConfig,
        Input<String> name,
        @Nullable Input<List<String>> relationshipTypes,
        Input<String> v1Id,
        Input<String> v1Id1) {
        this.assetNames = assetNames;
        this.assetTypes = assetTypes;
        this.condition = condition;
        this.contentType = contentType;
        this.feedId = Objects.requireNonNull(feedId, "expected parameter 'feedId' to be non-null");
        this.feedOutputConfig = Objects.requireNonNull(feedOutputConfig, "expected parameter 'feedOutputConfig' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.relationshipTypes = relationshipTypes;
        this.v1Id = Objects.requireNonNull(v1Id, "expected parameter 'v1Id' to be non-null");
        this.v1Id1 = Objects.requireNonNull(v1Id1, "expected parameter 'v1Id1' to be non-null");
    }

    private FeedArgs() {
        this.assetNames = Input.empty();
        this.assetTypes = Input.empty();
        this.condition = Input.empty();
        this.contentType = Input.empty();
        this.feedId = Input.empty();
        this.feedOutputConfig = Input.empty();
        this.name = Input.empty();
        this.relationshipTypes = Input.empty();
        this.v1Id = Input.empty();
        this.v1Id1 = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> assetNames;
        private @Nullable Input<List<String>> assetTypes;
        private @Nullable Input<ExprArgs> condition;
        private @Nullable Input<FeedContentType> contentType;
        private Input<String> feedId;
        private Input<FeedOutputConfigArgs> feedOutputConfig;
        private Input<String> name;
        private @Nullable Input<List<String>> relationshipTypes;
        private Input<String> v1Id;
        private Input<String> v1Id1;

        public Builder() {
    	      // Empty
        }

        public Builder(FeedArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetNames = defaults.assetNames;
    	      this.assetTypes = defaults.assetTypes;
    	      this.condition = defaults.condition;
    	      this.contentType = defaults.contentType;
    	      this.feedId = defaults.feedId;
    	      this.feedOutputConfig = defaults.feedOutputConfig;
    	      this.name = defaults.name;
    	      this.relationshipTypes = defaults.relationshipTypes;
    	      this.v1Id = defaults.v1Id;
    	      this.v1Id1 = defaults.v1Id1;
        }

        public Builder setAssetNames(@Nullable Input<List<String>> assetNames) {
            this.assetNames = assetNames;
            return this;
        }

        public Builder setAssetNames(@Nullable List<String> assetNames) {
            this.assetNames = Input.ofNullable(assetNames);
            return this;
        }

        public Builder setAssetTypes(@Nullable Input<List<String>> assetTypes) {
            this.assetTypes = assetTypes;
            return this;
        }

        public Builder setAssetTypes(@Nullable List<String> assetTypes) {
            this.assetTypes = Input.ofNullable(assetTypes);
            return this;
        }

        public Builder setCondition(@Nullable Input<ExprArgs> condition) {
            this.condition = condition;
            return this;
        }

        public Builder setCondition(@Nullable ExprArgs condition) {
            this.condition = Input.ofNullable(condition);
            return this;
        }

        public Builder setContentType(@Nullable Input<FeedContentType> contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder setContentType(@Nullable FeedContentType contentType) {
            this.contentType = Input.ofNullable(contentType);
            return this;
        }

        public Builder setFeedId(Input<String> feedId) {
            this.feedId = Objects.requireNonNull(feedId);
            return this;
        }

        public Builder setFeedId(String feedId) {
            this.feedId = Input.of(Objects.requireNonNull(feedId));
            return this;
        }

        public Builder setFeedOutputConfig(Input<FeedOutputConfigArgs> feedOutputConfig) {
            this.feedOutputConfig = Objects.requireNonNull(feedOutputConfig);
            return this;
        }

        public Builder setFeedOutputConfig(FeedOutputConfigArgs feedOutputConfig) {
            this.feedOutputConfig = Input.of(Objects.requireNonNull(feedOutputConfig));
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setRelationshipTypes(@Nullable Input<List<String>> relationshipTypes) {
            this.relationshipTypes = relationshipTypes;
            return this;
        }

        public Builder setRelationshipTypes(@Nullable List<String> relationshipTypes) {
            this.relationshipTypes = Input.ofNullable(relationshipTypes);
            return this;
        }

        public Builder setV1Id(Input<String> v1Id) {
            this.v1Id = Objects.requireNonNull(v1Id);
            return this;
        }

        public Builder setV1Id(String v1Id) {
            this.v1Id = Input.of(Objects.requireNonNull(v1Id));
            return this;
        }

        public Builder setV1Id1(Input<String> v1Id1) {
            this.v1Id1 = Objects.requireNonNull(v1Id1);
            return this;
        }

        public Builder setV1Id1(String v1Id1) {
            this.v1Id1 = Input.of(Objects.requireNonNull(v1Id1));
            return this;
        }

        public FeedArgs build() {
            return new FeedArgs(assetNames, assetTypes, condition, contentType, feedId, feedOutputConfig, name, relationshipTypes, v1Id, v1Id1);
        }
    }
}
