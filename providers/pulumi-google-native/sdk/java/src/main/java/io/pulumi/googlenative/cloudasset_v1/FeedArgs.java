// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudasset_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudasset_v1.enums.FeedContentType;
import io.pulumi.googlenative.cloudasset_v1.inputs.ExprArgs;
import io.pulumi.googlenative.cloudasset_v1.inputs.FeedOutputConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FeedArgs extends io.pulumi.resources.ResourceArgs {

    public static final FeedArgs Empty = new FeedArgs();

    /**
     * A list of the full names of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more info.
     * 
     */
    @Import(name="assetNames")
      private final @Nullable Output<List<String>> assetNames;

    public Output<List<String>> getAssetNames() {
        return this.assetNames == null ? Codegen.empty() : this.assetNames;
    }

    /**
     * A list of types of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `"compute.googleapis.com/Disk"` See [this topic](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for a list of all supported asset types.
     * 
     */
    @Import(name="assetTypes")
      private final @Nullable Output<List<String>> assetTypes;

    public Output<List<String>> getAssetTypes() {
        return this.assetTypes == null ? Codegen.empty() : this.assetTypes;
    }

    /**
     * A condition which determines whether an asset update should be published. If specified, an asset will be returned only when the expression evaluates to true. When set, `expression` field in the `Expr` must be a valid [CEL expression] (https://github.com/google/cel-spec) on a TemporalAsset with name `temporal_asset`. Example: a Feed with expression ("temporal_asset.deleted == true") will only publish Asset deletions. Other fields of `Expr` are optional. See our [user guide](https://cloud.google.com/asset-inventory/docs/monitoring-asset-changes-with-condition) for detailed instructions.
     * 
     */
    @Import(name="condition")
      private final @Nullable Output<ExprArgs> condition;

    public Output<ExprArgs> getCondition() {
        return this.condition == null ? Codegen.empty() : this.condition;
    }

    /**
     * Asset content type. If not specified, no content but the asset name and type will be returned.
     * 
     */
    @Import(name="contentType")
      private final @Nullable Output<FeedContentType> contentType;

    public Output<FeedContentType> getContentType() {
        return this.contentType == null ? Codegen.empty() : this.contentType;
    }

    /**
     * This is the client-assigned asset feed identifier and it needs to be unique under a specific parent project/folder/organization.
     * 
     */
    @Import(name="feedId", required=true)
      private final Output<String> feedId;

    public Output<String> getFeedId() {
        return this.feedId;
    }

    /**
     * Feed output configuration defining where the asset updates are published to.
     * 
     */
    @Import(name="feedOutputConfig", required=true)
      private final Output<FeedOutputConfigArgs> feedOutputConfig;

    public Output<FeedOutputConfigArgs> getFeedOutputConfig() {
        return this.feedOutputConfig;
    }

    /**
     * The format will be projects/{project_number}/feeds/{client-assigned_feed_identifier} or folders/{folder_number}/feeds/{client-assigned_feed_identifier} or organizations/{organization_number}/feeds/{client-assigned_feed_identifier} The client-assigned feed identifier must be unique within the parent project/folder/organization.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * A list of relationship types to output, for example: `INSTANCE_TO_INSTANCEGROUP`. This field should only be specified if content_type=RELATIONSHIP. * If specified: it outputs specified relationship updates on the [asset_names] or the [asset_types]. It returns an error if any of the [relationship_types] doesn't belong to the supported relationship types of the [asset_names] or [asset_types], or any of the [asset_names] or the [asset_types] doesn't belong to the source types of the [relationship_types]. * Otherwise: it outputs the supported relationships of the types of [asset_names] and [asset_types] or returns an error if any of the [asset_names] or the [asset_types] has no replationship support. See [Introduction to Cloud Asset Inventory](https://cloud.google.com/asset-inventory/docs/overview) for all supported asset types and relationship types.
     * 
     */
    @Import(name="relationshipTypes")
      private final @Nullable Output<List<String>> relationshipTypes;

    public Output<List<String>> getRelationshipTypes() {
        return this.relationshipTypes == null ? Codegen.empty() : this.relationshipTypes;
    }

    @Import(name="v1Id", required=true)
      private final Output<String> v1Id;

    public Output<String> getV1Id() {
        return this.v1Id;
    }

    @Import(name="v1Id1", required=true)
      private final Output<String> v1Id1;

    public Output<String> getV1Id1() {
        return this.v1Id1;
    }

    public FeedArgs(
        @Nullable Output<List<String>> assetNames,
        @Nullable Output<List<String>> assetTypes,
        @Nullable Output<ExprArgs> condition,
        @Nullable Output<FeedContentType> contentType,
        Output<String> feedId,
        Output<FeedOutputConfigArgs> feedOutputConfig,
        Output<String> name,
        @Nullable Output<List<String>> relationshipTypes,
        Output<String> v1Id,
        Output<String> v1Id1) {
        this.assetNames = assetNames;
        this.assetTypes = assetTypes;
        this.condition = condition;
        this.contentType = contentType;
        this.feedId = Objects.requireNonNull(feedId, "expected parameter 'feedId' to be non-null");
        this.feedOutputConfig = Objects.requireNonNull(feedOutputConfig, "expected parameter 'feedOutputConfig' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.relationshipTypes = relationshipTypes;
        this.v1Id = Objects.requireNonNull(v1Id, "expected parameter 'v1Id' to be non-null");
        this.v1Id1 = Objects.requireNonNull(v1Id1, "expected parameter 'v1Id1' to be non-null");
    }

    private FeedArgs() {
        this.assetNames = Codegen.empty();
        this.assetTypes = Codegen.empty();
        this.condition = Codegen.empty();
        this.contentType = Codegen.empty();
        this.feedId = Codegen.empty();
        this.feedOutputConfig = Codegen.empty();
        this.name = Codegen.empty();
        this.relationshipTypes = Codegen.empty();
        this.v1Id = Codegen.empty();
        this.v1Id1 = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> assetNames;
        private @Nullable Output<List<String>> assetTypes;
        private @Nullable Output<ExprArgs> condition;
        private @Nullable Output<FeedContentType> contentType;
        private Output<String> feedId;
        private Output<FeedOutputConfigArgs> feedOutputConfig;
        private Output<String> name;
        private @Nullable Output<List<String>> relationshipTypes;
        private Output<String> v1Id;
        private Output<String> v1Id1;

        public Builder() {
    	      // Empty
        }

        public Builder(FeedArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetNames = defaults.assetNames;
    	      this.assetTypes = defaults.assetTypes;
    	      this.condition = defaults.condition;
    	      this.contentType = defaults.contentType;
    	      this.feedId = defaults.feedId;
    	      this.feedOutputConfig = defaults.feedOutputConfig;
    	      this.name = defaults.name;
    	      this.relationshipTypes = defaults.relationshipTypes;
    	      this.v1Id = defaults.v1Id;
    	      this.v1Id1 = defaults.v1Id1;
        }

        public Builder assetNames(@Nullable Output<List<String>> assetNames) {
            this.assetNames = assetNames;
            return this;
        }
        public Builder assetNames(@Nullable List<String> assetNames) {
            this.assetNames = Codegen.ofNullable(assetNames);
            return this;
        }
        public Builder assetNames(String... assetNames) {
            return assetNames(List.of(assetNames));
        }
        public Builder assetTypes(@Nullable Output<List<String>> assetTypes) {
            this.assetTypes = assetTypes;
            return this;
        }
        public Builder assetTypes(@Nullable List<String> assetTypes) {
            this.assetTypes = Codegen.ofNullable(assetTypes);
            return this;
        }
        public Builder assetTypes(String... assetTypes) {
            return assetTypes(List.of(assetTypes));
        }
        public Builder condition(@Nullable Output<ExprArgs> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable ExprArgs condition) {
            this.condition = Codegen.ofNullable(condition);
            return this;
        }
        public Builder contentType(@Nullable Output<FeedContentType> contentType) {
            this.contentType = contentType;
            return this;
        }
        public Builder contentType(@Nullable FeedContentType contentType) {
            this.contentType = Codegen.ofNullable(contentType);
            return this;
        }
        public Builder feedId(Output<String> feedId) {
            this.feedId = Objects.requireNonNull(feedId);
            return this;
        }
        public Builder feedId(String feedId) {
            this.feedId = Output.of(Objects.requireNonNull(feedId));
            return this;
        }
        public Builder feedOutputConfig(Output<FeedOutputConfigArgs> feedOutputConfig) {
            this.feedOutputConfig = Objects.requireNonNull(feedOutputConfig);
            return this;
        }
        public Builder feedOutputConfig(FeedOutputConfigArgs feedOutputConfig) {
            this.feedOutputConfig = Output.of(Objects.requireNonNull(feedOutputConfig));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder relationshipTypes(@Nullable Output<List<String>> relationshipTypes) {
            this.relationshipTypes = relationshipTypes;
            return this;
        }
        public Builder relationshipTypes(@Nullable List<String> relationshipTypes) {
            this.relationshipTypes = Codegen.ofNullable(relationshipTypes);
            return this;
        }
        public Builder relationshipTypes(String... relationshipTypes) {
            return relationshipTypes(List.of(relationshipTypes));
        }
        public Builder v1Id(Output<String> v1Id) {
            this.v1Id = Objects.requireNonNull(v1Id);
            return this;
        }
        public Builder v1Id(String v1Id) {
            this.v1Id = Output.of(Objects.requireNonNull(v1Id));
            return this;
        }
        public Builder v1Id1(Output<String> v1Id1) {
            this.v1Id1 = Objects.requireNonNull(v1Id1);
            return this;
        }
        public Builder v1Id1(String v1Id1) {
            this.v1Id1 = Output.of(Objects.requireNonNull(v1Id1));
            return this;
        }        public FeedArgs build() {
            return new FeedArgs(assetNames, assetTypes, condition, contentType, feedId, feedOutputConfig, name, relationshipTypes, v1Id, v1Id1);
        }
    }
}
