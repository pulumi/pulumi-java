// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1alpha1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.run_v1alpha1.inputs.OwnerReferenceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 * 
 */
public final class ObjectMetaArgs extends io.pulumi.resources.ResourceArgs {

    public static final ObjectMetaArgs Empty = new ObjectMetaArgs();

    /**
     * (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     * 
     */
    @InputImport(name="annotations")
      private final @Nullable Input<Map<String,String>> annotations;

    public Input<Map<String,String>> getAnnotations() {
        return this.annotations == null ? Input.empty() : this.annotations;
    }

    /**
     * (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
     * 
     */
    @InputImport(name="clusterName")
      private final @Nullable Input<String> clusterName;

    public Input<String> getClusterName() {
        return this.clusterName == null ? Input.empty() : this.clusterName;
    }

    /**
     * (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
     * 
     */
    @InputImport(name="creationTimestamp")
      private final @Nullable Input<String> creationTimestamp;

    public Input<String> getCreationTimestamp() {
        return this.creationTimestamp == null ? Input.empty() : this.creationTimestamp;
    }

    /**
     * (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     * 
     */
    @InputImport(name="deletionGracePeriodSeconds")
      private final @Nullable Input<Integer> deletionGracePeriodSeconds;

    public Input<Integer> getDeletionGracePeriodSeconds() {
        return this.deletionGracePeriodSeconds == null ? Input.empty() : this.deletionGracePeriodSeconds;
    }

    /**
     * (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
     * 
     */
    @InputImport(name="deletionTimestamp")
      private final @Nullable Input<String> deletionTimestamp;

    public Input<String> getDeletionTimestamp() {
        return this.deletionTimestamp == null ? Input.empty() : this.deletionTimestamp;
    }

    /**
     * (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
     * 
     */
    @InputImport(name="finalizers")
      private final @Nullable Input<List<String>> finalizers;

    public Input<List<String>> getFinalizers() {
        return this.finalizers == null ? Input.empty() : this.finalizers;
    }

    /**
     * (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
     * 
     */
    @InputImport(name="generateName")
      private final @Nullable Input<String> generateName;

    public Input<String> getGenerateName() {
        return this.generateName == null ? Input.empty() : this.generateName;
    }

    /**
     * (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
     * 
     */
    @InputImport(name="generation")
      private final @Nullable Input<Integer> generation;

    public Input<Integer> getGeneration() {
        return this.generation == null ? Input.empty() : this.generation;
    }

    /**
     * (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
     * 
     */
    @InputImport(name="labels")
      private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
     * 
     */
    @InputImport(name="namespace")
      private final @Nullable Input<String> namespace;

    public Input<String> getNamespace() {
        return this.namespace == null ? Input.empty() : this.namespace;
    }

    /**
     * (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
     * 
     */
    @InputImport(name="ownerReferences")
      private final @Nullable Input<List<OwnerReferenceArgs>> ownerReferences;

    public Input<List<OwnerReferenceArgs>> getOwnerReferences() {
        return this.ownerReferences == null ? Input.empty() : this.ownerReferences;
    }

    /**
     * Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     * 
     */
    @InputImport(name="resourceVersion")
      private final @Nullable Input<String> resourceVersion;

    public Input<String> getResourceVersion() {
        return this.resourceVersion == null ? Input.empty() : this.resourceVersion;
    }

    /**
     * (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
     * 
     */
    @InputImport(name="selfLink")
      private final @Nullable Input<String> selfLink;

    public Input<String> getSelfLink() {
        return this.selfLink == null ? Input.empty() : this.selfLink;
    }

    /**
     * (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * 
     */
    @InputImport(name="uid")
      private final @Nullable Input<String> uid;

    public Input<String> getUid() {
        return this.uid == null ? Input.empty() : this.uid;
    }

    public ObjectMetaArgs(
        @Nullable Input<Map<String,String>> annotations,
        @Nullable Input<String> clusterName,
        @Nullable Input<String> creationTimestamp,
        @Nullable Input<Integer> deletionGracePeriodSeconds,
        @Nullable Input<String> deletionTimestamp,
        @Nullable Input<List<String>> finalizers,
        @Nullable Input<String> generateName,
        @Nullable Input<Integer> generation,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> name,
        @Nullable Input<String> namespace,
        @Nullable Input<List<OwnerReferenceArgs>> ownerReferences,
        @Nullable Input<String> resourceVersion,
        @Nullable Input<String> selfLink,
        @Nullable Input<String> uid) {
        this.annotations = annotations;
        this.clusterName = clusterName;
        this.creationTimestamp = creationTimestamp;
        this.deletionGracePeriodSeconds = deletionGracePeriodSeconds;
        this.deletionTimestamp = deletionTimestamp;
        this.finalizers = finalizers;
        this.generateName = generateName;
        this.generation = generation;
        this.labels = labels;
        this.name = name;
        this.namespace = namespace;
        this.ownerReferences = ownerReferences;
        this.resourceVersion = resourceVersion;
        this.selfLink = selfLink;
        this.uid = uid;
    }

    private ObjectMetaArgs() {
        this.annotations = Input.empty();
        this.clusterName = Input.empty();
        this.creationTimestamp = Input.empty();
        this.deletionGracePeriodSeconds = Input.empty();
        this.deletionTimestamp = Input.empty();
        this.finalizers = Input.empty();
        this.generateName = Input.empty();
        this.generation = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.namespace = Input.empty();
        this.ownerReferences = Input.empty();
        this.resourceVersion = Input.empty();
        this.selfLink = Input.empty();
        this.uid = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectMetaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,String>> annotations;
        private @Nullable Input<String> clusterName;
        private @Nullable Input<String> creationTimestamp;
        private @Nullable Input<Integer> deletionGracePeriodSeconds;
        private @Nullable Input<String> deletionTimestamp;
        private @Nullable Input<List<String>> finalizers;
        private @Nullable Input<String> generateName;
        private @Nullable Input<Integer> generation;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namespace;
        private @Nullable Input<List<OwnerReferenceArgs>> ownerReferences;
        private @Nullable Input<String> resourceVersion;
        private @Nullable Input<String> selfLink;
        private @Nullable Input<String> uid;

        public Builder() {
    	      // Empty
        }

        public Builder(ObjectMetaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.clusterName = defaults.clusterName;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.deletionGracePeriodSeconds = defaults.deletionGracePeriodSeconds;
    	      this.deletionTimestamp = defaults.deletionTimestamp;
    	      this.finalizers = defaults.finalizers;
    	      this.generateName = defaults.generateName;
    	      this.generation = defaults.generation;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.ownerReferences = defaults.ownerReferences;
    	      this.resourceVersion = defaults.resourceVersion;
    	      this.selfLink = defaults.selfLink;
    	      this.uid = defaults.uid;
        }

        public Builder setAnnotations(@Nullable Input<Map<String,String>> annotations) {
            this.annotations = annotations;
            return this;
        }

        public Builder setAnnotations(@Nullable Map<String,String> annotations) {
            this.annotations = Input.ofNullable(annotations);
            return this;
        }

        public Builder setClusterName(@Nullable Input<String> clusterName) {
            this.clusterName = clusterName;
            return this;
        }

        public Builder setClusterName(@Nullable String clusterName) {
            this.clusterName = Input.ofNullable(clusterName);
            return this;
        }

        public Builder setCreationTimestamp(@Nullable Input<String> creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
            return this;
        }

        public Builder setCreationTimestamp(@Nullable String creationTimestamp) {
            this.creationTimestamp = Input.ofNullable(creationTimestamp);
            return this;
        }

        public Builder setDeletionGracePeriodSeconds(@Nullable Input<Integer> deletionGracePeriodSeconds) {
            this.deletionGracePeriodSeconds = deletionGracePeriodSeconds;
            return this;
        }

        public Builder setDeletionGracePeriodSeconds(@Nullable Integer deletionGracePeriodSeconds) {
            this.deletionGracePeriodSeconds = Input.ofNullable(deletionGracePeriodSeconds);
            return this;
        }

        public Builder setDeletionTimestamp(@Nullable Input<String> deletionTimestamp) {
            this.deletionTimestamp = deletionTimestamp;
            return this;
        }

        public Builder setDeletionTimestamp(@Nullable String deletionTimestamp) {
            this.deletionTimestamp = Input.ofNullable(deletionTimestamp);
            return this;
        }

        public Builder setFinalizers(@Nullable Input<List<String>> finalizers) {
            this.finalizers = finalizers;
            return this;
        }

        public Builder setFinalizers(@Nullable List<String> finalizers) {
            this.finalizers = Input.ofNullable(finalizers);
            return this;
        }

        public Builder setGenerateName(@Nullable Input<String> generateName) {
            this.generateName = generateName;
            return this;
        }

        public Builder setGenerateName(@Nullable String generateName) {
            this.generateName = Input.ofNullable(generateName);
            return this;
        }

        public Builder setGeneration(@Nullable Input<Integer> generation) {
            this.generation = generation;
            return this;
        }

        public Builder setGeneration(@Nullable Integer generation) {
            this.generation = Input.ofNullable(generation);
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamespace(@Nullable Input<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder setNamespace(@Nullable String namespace) {
            this.namespace = Input.ofNullable(namespace);
            return this;
        }

        public Builder setOwnerReferences(@Nullable Input<List<OwnerReferenceArgs>> ownerReferences) {
            this.ownerReferences = ownerReferences;
            return this;
        }

        public Builder setOwnerReferences(@Nullable List<OwnerReferenceArgs> ownerReferences) {
            this.ownerReferences = Input.ofNullable(ownerReferences);
            return this;
        }

        public Builder setResourceVersion(@Nullable Input<String> resourceVersion) {
            this.resourceVersion = resourceVersion;
            return this;
        }

        public Builder setResourceVersion(@Nullable String resourceVersion) {
            this.resourceVersion = Input.ofNullable(resourceVersion);
            return this;
        }

        public Builder setSelfLink(@Nullable Input<String> selfLink) {
            this.selfLink = selfLink;
            return this;
        }

        public Builder setSelfLink(@Nullable String selfLink) {
            this.selfLink = Input.ofNullable(selfLink);
            return this;
        }

        public Builder setUid(@Nullable Input<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder setUid(@Nullable String uid) {
            this.uid = Input.ofNullable(uid);
            return this;
        }
        public ObjectMetaArgs build() {
            return new ObjectMetaArgs(annotations, clusterName, creationTimestamp, deletionGracePeriodSeconds, deletionTimestamp, finalizers, generateName, generation, labels, name, namespace, ownerReferences, resourceVersion, selfLink, uid);
        }
    }
}
