// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dialogflow_v3beta1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.dialogflow_v3beta1.enums.ExperimentState;
import io.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs;
import io.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1ExperimentResultArgs;
import io.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1RolloutConfigArgs;
import io.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1RolloutStateArgs;
import io.pulumi.googlenative.dialogflow_v3beta1.inputs.GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExperimentArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExperimentArgs Empty = new ExperimentArgs();

    @InputImport(name="agentId", required=true)
    private final Input<String> agentId;

    public Input<String> getAgentId() {
        return this.agentId;
    }

    /**
     * Creation time of this experiment.
     * 
     */
    @InputImport(name="createTime")
    private final @Nullable Input<String> createTime;

    public Input<String> getCreateTime() {
        return this.createTime == null ? Input.empty() : this.createTime;
    }

    /**
     * The definition of the experiment.
     * 
     */
    @InputImport(name="definition")
    private final @Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs> definition;

    public Input<GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs> getDefinition() {
        return this.definition == null ? Input.empty() : this.definition;
    }

    /**
     * The human-readable description of the experiment.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
     * 
     */
    @InputImport(name="displayName", required=true)
    private final Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName;
    }

    /**
     * End time of this experiment.
     * 
     */
    @InputImport(name="endTime")
    private final @Nullable Input<String> endTime;

    public Input<String> getEndTime() {
        return this.endTime == null ? Input.empty() : this.endTime;
    }

    @InputImport(name="environmentId", required=true)
    private final Input<String> environmentId;

    public Input<String> getEnvironmentId() {
        return this.environmentId;
    }

    /**
     * Maximum number of days to run the experiment. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
     * 
     */
    @InputImport(name="experimentLength")
    private final @Nullable Input<String> experimentLength;

    public Input<String> getExperimentLength() {
        return this.experimentLength == null ? Input.empty() : this.experimentLength;
    }

    /**
     * Last update time of this experiment.
     * 
     */
    @InputImport(name="lastUpdateTime")
    private final @Nullable Input<String> lastUpdateTime;

    public Input<String> getLastUpdateTime() {
        return this.lastUpdateTime == null ? Input.empty() : this.lastUpdateTime;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the experiment. Format: projects//locations//agents//environments//experiments/..
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Inference result of the experiment.
     * 
     */
    @InputImport(name="result")
    private final @Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentResultArgs> result;

    public Input<GoogleCloudDialogflowCxV3beta1ExperimentResultArgs> getResult() {
        return this.result == null ? Input.empty() : this.result;
    }

    /**
     * The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.
     * 
     */
    @InputImport(name="rolloutConfig")
    private final @Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutConfigArgs> rolloutConfig;

    public Input<GoogleCloudDialogflowCxV3beta1RolloutConfigArgs> getRolloutConfig() {
        return this.rolloutConfig == null ? Input.empty() : this.rolloutConfig;
    }

    /**
     * The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
     * 
     */
    @InputImport(name="rolloutFailureReason")
    private final @Nullable Input<String> rolloutFailureReason;

    public Input<String> getRolloutFailureReason() {
        return this.rolloutFailureReason == null ? Input.empty() : this.rolloutFailureReason;
    }

    /**
     * State of the auto rollout process.
     * 
     */
    @InputImport(name="rolloutState")
    private final @Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutStateArgs> rolloutState;

    public Input<GoogleCloudDialogflowCxV3beta1RolloutStateArgs> getRolloutState() {
        return this.rolloutState == null ? Input.empty() : this.rolloutState;
    }

    /**
     * Start time of this experiment.
     * 
     */
    @InputImport(name="startTime")
    private final @Nullable Input<String> startTime;

    public Input<String> getStartTime() {
        return this.startTime == null ? Input.empty() : this.startTime;
    }

    /**
     * The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or RUNNING->DONE.
     * 
     */
    @InputImport(name="state")
    private final @Nullable Input<ExperimentState> state;

    public Input<ExperimentState> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    /**
     * The history of updates to the experiment variants.
     * 
     */
    @InputImport(name="variantsHistory")
    private final @Nullable Input<List<GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs>> variantsHistory;

    public Input<List<GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs>> getVariantsHistory() {
        return this.variantsHistory == null ? Input.empty() : this.variantsHistory;
    }

    public ExperimentArgs(
        Input<String> agentId,
        @Nullable Input<String> createTime,
        @Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs> definition,
        @Nullable Input<String> description,
        Input<String> displayName,
        @Nullable Input<String> endTime,
        Input<String> environmentId,
        @Nullable Input<String> experimentLength,
        @Nullable Input<String> lastUpdateTime,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentResultArgs> result,
        @Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutConfigArgs> rolloutConfig,
        @Nullable Input<String> rolloutFailureReason,
        @Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutStateArgs> rolloutState,
        @Nullable Input<String> startTime,
        @Nullable Input<ExperimentState> state,
        @Nullable Input<List<GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs>> variantsHistory) {
        this.agentId = Objects.requireNonNull(agentId, "expected parameter 'agentId' to be non-null");
        this.createTime = createTime;
        this.definition = definition;
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.endTime = endTime;
        this.environmentId = Objects.requireNonNull(environmentId, "expected parameter 'environmentId' to be non-null");
        this.experimentLength = experimentLength;
        this.lastUpdateTime = lastUpdateTime;
        this.location = location;
        this.name = name;
        this.project = project;
        this.result = result;
        this.rolloutConfig = rolloutConfig;
        this.rolloutFailureReason = rolloutFailureReason;
        this.rolloutState = rolloutState;
        this.startTime = startTime;
        this.state = state;
        this.variantsHistory = variantsHistory;
    }

    private ExperimentArgs() {
        this.agentId = Input.empty();
        this.createTime = Input.empty();
        this.definition = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.endTime = Input.empty();
        this.environmentId = Input.empty();
        this.experimentLength = Input.empty();
        this.lastUpdateTime = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.result = Input.empty();
        this.rolloutConfig = Input.empty();
        this.rolloutFailureReason = Input.empty();
        this.rolloutState = Input.empty();
        this.startTime = Input.empty();
        this.state = Input.empty();
        this.variantsHistory = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExperimentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> agentId;
        private @Nullable Input<String> createTime;
        private @Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs> definition;
        private @Nullable Input<String> description;
        private Input<String> displayName;
        private @Nullable Input<String> endTime;
        private Input<String> environmentId;
        private @Nullable Input<String> experimentLength;
        private @Nullable Input<String> lastUpdateTime;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentResultArgs> result;
        private @Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutConfigArgs> rolloutConfig;
        private @Nullable Input<String> rolloutFailureReason;
        private @Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutStateArgs> rolloutState;
        private @Nullable Input<String> startTime;
        private @Nullable Input<ExperimentState> state;
        private @Nullable Input<List<GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs>> variantsHistory;

        public Builder() {
    	      // Empty
        }

        public Builder(ExperimentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentId = defaults.agentId;
    	      this.createTime = defaults.createTime;
    	      this.definition = defaults.definition;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endTime = defaults.endTime;
    	      this.environmentId = defaults.environmentId;
    	      this.experimentLength = defaults.experimentLength;
    	      this.lastUpdateTime = defaults.lastUpdateTime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.result = defaults.result;
    	      this.rolloutConfig = defaults.rolloutConfig;
    	      this.rolloutFailureReason = defaults.rolloutFailureReason;
    	      this.rolloutState = defaults.rolloutState;
    	      this.startTime = defaults.startTime;
    	      this.state = defaults.state;
    	      this.variantsHistory = defaults.variantsHistory;
        }

        public Builder setAgentId(Input<String> agentId) {
            this.agentId = Objects.requireNonNull(agentId);
            return this;
        }

        public Builder setAgentId(String agentId) {
            this.agentId = Input.of(Objects.requireNonNull(agentId));
            return this;
        }

        public Builder setCreateTime(@Nullable Input<String> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder setCreateTime(@Nullable String createTime) {
            this.createTime = Input.ofNullable(createTime);
            return this;
        }

        public Builder setDefinition(@Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs> definition) {
            this.definition = definition;
            return this;
        }

        public Builder setDefinition(@Nullable GoogleCloudDialogflowCxV3beta1ExperimentDefinitionArgs definition) {
            this.definition = Input.ofNullable(definition);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(Input<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }

        public Builder setDisplayName(String displayName) {
            this.displayName = Input.of(Objects.requireNonNull(displayName));
            return this;
        }

        public Builder setEndTime(@Nullable Input<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder setEndTime(@Nullable String endTime) {
            this.endTime = Input.ofNullable(endTime);
            return this;
        }

        public Builder setEnvironmentId(Input<String> environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId);
            return this;
        }

        public Builder setEnvironmentId(String environmentId) {
            this.environmentId = Input.of(Objects.requireNonNull(environmentId));
            return this;
        }

        public Builder setExperimentLength(@Nullable Input<String> experimentLength) {
            this.experimentLength = experimentLength;
            return this;
        }

        public Builder setExperimentLength(@Nullable String experimentLength) {
            this.experimentLength = Input.ofNullable(experimentLength);
            return this;
        }

        public Builder setLastUpdateTime(@Nullable Input<String> lastUpdateTime) {
            this.lastUpdateTime = lastUpdateTime;
            return this;
        }

        public Builder setLastUpdateTime(@Nullable String lastUpdateTime) {
            this.lastUpdateTime = Input.ofNullable(lastUpdateTime);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setResult(@Nullable Input<GoogleCloudDialogflowCxV3beta1ExperimentResultArgs> result) {
            this.result = result;
            return this;
        }

        public Builder setResult(@Nullable GoogleCloudDialogflowCxV3beta1ExperimentResultArgs result) {
            this.result = Input.ofNullable(result);
            return this;
        }

        public Builder setRolloutConfig(@Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutConfigArgs> rolloutConfig) {
            this.rolloutConfig = rolloutConfig;
            return this;
        }

        public Builder setRolloutConfig(@Nullable GoogleCloudDialogflowCxV3beta1RolloutConfigArgs rolloutConfig) {
            this.rolloutConfig = Input.ofNullable(rolloutConfig);
            return this;
        }

        public Builder setRolloutFailureReason(@Nullable Input<String> rolloutFailureReason) {
            this.rolloutFailureReason = rolloutFailureReason;
            return this;
        }

        public Builder setRolloutFailureReason(@Nullable String rolloutFailureReason) {
            this.rolloutFailureReason = Input.ofNullable(rolloutFailureReason);
            return this;
        }

        public Builder setRolloutState(@Nullable Input<GoogleCloudDialogflowCxV3beta1RolloutStateArgs> rolloutState) {
            this.rolloutState = rolloutState;
            return this;
        }

        public Builder setRolloutState(@Nullable GoogleCloudDialogflowCxV3beta1RolloutStateArgs rolloutState) {
            this.rolloutState = Input.ofNullable(rolloutState);
            return this;
        }

        public Builder setStartTime(@Nullable Input<String> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder setStartTime(@Nullable String startTime) {
            this.startTime = Input.ofNullable(startTime);
            return this;
        }

        public Builder setState(@Nullable Input<ExperimentState> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable ExperimentState state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder setVariantsHistory(@Nullable Input<List<GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs>> variantsHistory) {
            this.variantsHistory = variantsHistory;
            return this;
        }

        public Builder setVariantsHistory(@Nullable List<GoogleCloudDialogflowCxV3beta1VariantsHistoryArgs> variantsHistory) {
            this.variantsHistory = Input.ofNullable(variantsHistory);
            return this;
        }

        public ExperimentArgs build() {
            return new ExperimentArgs(agentId, createTime, definition, description, displayName, endTime, environmentId, experimentLength, lastUpdateTime, location, name, project, result, rolloutConfig, rolloutFailureReason, rolloutState, startTime, state, variantsHistory);
        }
    }
}
