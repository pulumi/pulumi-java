// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.containeranalysis_v1.inputs.UpgradeDistributionResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.VersionResponse;
import io.pulumi.googlenative.containeranalysis_v1.inputs.WindowsUpdateResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
 * 
 */
public final class UpgradeNoteResponse extends io.pulumi.resources.InvokeArgs {

    public static final UpgradeNoteResponse Empty = new UpgradeNoteResponse();

    /**
     * Metadata about the upgrade for each specific operating system.
     * 
     */
    @Import(name="distributions", required=true)
      private final List<UpgradeDistributionResponse> distributions;

    public List<UpgradeDistributionResponse> distributions() {
        return this.distributions;
    }

    /**
     * Required for non-Windows OS. The package this Upgrade is for.
     * 
     */
    @Import(name="package", required=true)
      private final String package_;

    public String package_() {
        return this.package_;
    }

    /**
     * Required for non-Windows OS. The version of the package in machine + human readable form.
     * 
     */
    @Import(name="version", required=true)
      private final VersionResponse version;

    public VersionResponse version() {
        return this.version;
    }

    /**
     * Required for Windows OS. Represents the metadata about the Windows update.
     * 
     */
    @Import(name="windowsUpdate", required=true)
      private final WindowsUpdateResponse windowsUpdate;

    public WindowsUpdateResponse windowsUpdate() {
        return this.windowsUpdate;
    }

    public UpgradeNoteResponse(
        List<UpgradeDistributionResponse> distributions,
        String package_,
        VersionResponse version,
        WindowsUpdateResponse windowsUpdate) {
        this.distributions = Objects.requireNonNull(distributions, "expected parameter 'distributions' to be non-null");
        this.package_ = Objects.requireNonNull(package_, "expected parameter 'package_' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.windowsUpdate = Objects.requireNonNull(windowsUpdate, "expected parameter 'windowsUpdate' to be non-null");
    }

    private UpgradeNoteResponse() {
        this.distributions = List.of();
        this.package_ = null;
        this.version = null;
        this.windowsUpdate = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpgradeNoteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<UpgradeDistributionResponse> distributions;
        private String package_;
        private VersionResponse version;
        private WindowsUpdateResponse windowsUpdate;

        public Builder() {
    	      // Empty
        }

        public Builder(UpgradeNoteResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributions = defaults.distributions;
    	      this.package_ = defaults.package_;
    	      this.version = defaults.version;
    	      this.windowsUpdate = defaults.windowsUpdate;
        }

        public Builder distributions(List<UpgradeDistributionResponse> distributions) {
            this.distributions = Objects.requireNonNull(distributions);
            return this;
        }
        public Builder distributions(UpgradeDistributionResponse... distributions) {
            return distributions(List.of(distributions));
        }
        public Builder package_(String package_) {
            this.package_ = Objects.requireNonNull(package_);
            return this;
        }
        public Builder version(VersionResponse version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder windowsUpdate(WindowsUpdateResponse windowsUpdate) {
            this.windowsUpdate = Objects.requireNonNull(windowsUpdate);
            return this;
        }        public UpgradeNoteResponse build() {
            return new UpgradeNoteResponse(distributions, package_, version, windowsUpdate);
        }
    }
}
