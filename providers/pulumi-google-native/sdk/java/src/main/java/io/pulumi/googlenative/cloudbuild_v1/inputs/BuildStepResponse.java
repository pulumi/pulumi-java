// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.TimeSpanResponse;
import io.pulumi.googlenative.cloudbuild_v1.inputs.VolumeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BuildStepResponse extends io.pulumi.resources.InvokeArgs {

    public static final BuildStepResponse Empty = new BuildStepResponse();

    @InputImport(name="args", required=true)
    private final List<String> args;

    public List<String> getArgs() {
        return this.args;
    }

    @InputImport(name="dir", required=true)
    private final String dir;

    public String getDir() {
        return this.dir;
    }

    @InputImport(name="entrypoint", required=true)
    private final String entrypoint;

    public String getEntrypoint() {
        return this.entrypoint;
    }

    @InputImport(name="env", required=true)
    private final List<String> env;

    public List<String> getEnv() {
        return this.env;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="pullTiming", required=true)
    private final TimeSpanResponse pullTiming;

    public TimeSpanResponse getPullTiming() {
        return this.pullTiming;
    }

    @InputImport(name="script", required=true)
    private final String script;

    public String getScript() {
        return this.script;
    }

    @InputImport(name="secretEnv", required=true)
    private final List<String> secretEnv;

    public List<String> getSecretEnv() {
        return this.secretEnv;
    }

    @InputImport(name="status", required=true)
    private final String status;

    public String getStatus() {
        return this.status;
    }

    @InputImport(name="timeout", required=true)
    private final String timeout;

    public String getTimeout() {
        return this.timeout;
    }

    @InputImport(name="timing", required=true)
    private final TimeSpanResponse timing;

    public TimeSpanResponse getTiming() {
        return this.timing;
    }

    @InputImport(name="volumes", required=true)
    private final List<VolumeResponse> volumes;

    public List<VolumeResponse> getVolumes() {
        return this.volumes;
    }

    @InputImport(name="waitFor", required=true)
    private final List<String> waitFor;

    public List<String> getWaitFor() {
        return this.waitFor;
    }

    public BuildStepResponse(
        List<String> args,
        String dir,
        String entrypoint,
        List<String> env,
        String name,
        TimeSpanResponse pullTiming,
        String script,
        List<String> secretEnv,
        String status,
        String timeout,
        TimeSpanResponse timing,
        List<VolumeResponse> volumes,
        List<String> waitFor) {
        this.args = Objects.requireNonNull(args, "expected parameter 'args' to be non-null");
        this.dir = Objects.requireNonNull(dir, "expected parameter 'dir' to be non-null");
        this.entrypoint = Objects.requireNonNull(entrypoint, "expected parameter 'entrypoint' to be non-null");
        this.env = Objects.requireNonNull(env, "expected parameter 'env' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.pullTiming = Objects.requireNonNull(pullTiming, "expected parameter 'pullTiming' to be non-null");
        this.script = Objects.requireNonNull(script, "expected parameter 'script' to be non-null");
        this.secretEnv = Objects.requireNonNull(secretEnv, "expected parameter 'secretEnv' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.timeout = Objects.requireNonNull(timeout, "expected parameter 'timeout' to be non-null");
        this.timing = Objects.requireNonNull(timing, "expected parameter 'timing' to be non-null");
        this.volumes = Objects.requireNonNull(volumes, "expected parameter 'volumes' to be non-null");
        this.waitFor = Objects.requireNonNull(waitFor, "expected parameter 'waitFor' to be non-null");
    }

    private BuildStepResponse() {
        this.args = List.of();
        this.dir = null;
        this.entrypoint = null;
        this.env = List.of();
        this.name = null;
        this.pullTiming = null;
        this.script = null;
        this.secretEnv = List.of();
        this.status = null;
        this.timeout = null;
        this.timing = null;
        this.volumes = List.of();
        this.waitFor = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildStepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> args;
        private String dir;
        private String entrypoint;
        private List<String> env;
        private String name;
        private TimeSpanResponse pullTiming;
        private String script;
        private List<String> secretEnv;
        private String status;
        private String timeout;
        private TimeSpanResponse timing;
        private List<VolumeResponse> volumes;
        private List<String> waitFor;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildStepResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.dir = defaults.dir;
    	      this.entrypoint = defaults.entrypoint;
    	      this.env = defaults.env;
    	      this.name = defaults.name;
    	      this.pullTiming = defaults.pullTiming;
    	      this.script = defaults.script;
    	      this.secretEnv = defaults.secretEnv;
    	      this.status = defaults.status;
    	      this.timeout = defaults.timeout;
    	      this.timing = defaults.timing;
    	      this.volumes = defaults.volumes;
    	      this.waitFor = defaults.waitFor;
        }

        public Builder setArgs(List<String> args) {
            this.args = Objects.requireNonNull(args);
            return this;
        }

        public Builder setDir(String dir) {
            this.dir = Objects.requireNonNull(dir);
            return this;
        }

        public Builder setEntrypoint(String entrypoint) {
            this.entrypoint = Objects.requireNonNull(entrypoint);
            return this;
        }

        public Builder setEnv(List<String> env) {
            this.env = Objects.requireNonNull(env);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPullTiming(TimeSpanResponse pullTiming) {
            this.pullTiming = Objects.requireNonNull(pullTiming);
            return this;
        }

        public Builder setScript(String script) {
            this.script = Objects.requireNonNull(script);
            return this;
        }

        public Builder setSecretEnv(List<String> secretEnv) {
            this.secretEnv = Objects.requireNonNull(secretEnv);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTimeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder setTiming(TimeSpanResponse timing) {
            this.timing = Objects.requireNonNull(timing);
            return this;
        }

        public Builder setVolumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }

        public Builder setWaitFor(List<String> waitFor) {
            this.waitFor = Objects.requireNonNull(waitFor);
            return this;
        }

        public BuildStepResponse build() {
            return new BuildStepResponse(args, dir, entrypoint, env, name, pullTiming, script, secretEnv, status, timeout, timing, volumes, waitFor);
        }
    }
}
