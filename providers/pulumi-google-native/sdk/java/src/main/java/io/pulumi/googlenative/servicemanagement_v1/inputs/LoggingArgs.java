// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.LoggingDestinationArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
 * 
 */
public final class LoggingArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoggingArgs Empty = new LoggingArgs();

    /**
     * Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
     * 
     */
    @InputImport(name="consumerDestinations")
      private final @Nullable Input<List<LoggingDestinationArgs>> consumerDestinations;

    public Input<List<LoggingDestinationArgs>> getConsumerDestinations() {
        return this.consumerDestinations == null ? Input.empty() : this.consumerDestinations;
    }

    /**
     * Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
     * 
     */
    @InputImport(name="producerDestinations")
      private final @Nullable Input<List<LoggingDestinationArgs>> producerDestinations;

    public Input<List<LoggingDestinationArgs>> getProducerDestinations() {
        return this.producerDestinations == null ? Input.empty() : this.producerDestinations;
    }

    public LoggingArgs(
        @Nullable Input<List<LoggingDestinationArgs>> consumerDestinations,
        @Nullable Input<List<LoggingDestinationArgs>> producerDestinations) {
        this.consumerDestinations = consumerDestinations;
        this.producerDestinations = producerDestinations;
    }

    private LoggingArgs() {
        this.consumerDestinations = Input.empty();
        this.producerDestinations = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<LoggingDestinationArgs>> consumerDestinations;
        private @Nullable Input<List<LoggingDestinationArgs>> producerDestinations;

        public Builder() {
    	      // Empty
        }

        public Builder(LoggingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerDestinations = defaults.consumerDestinations;
    	      this.producerDestinations = defaults.producerDestinations;
        }

        public Builder consumerDestinations(@Nullable Input<List<LoggingDestinationArgs>> consumerDestinations) {
            this.consumerDestinations = consumerDestinations;
            return this;
        }

        public Builder consumerDestinations(@Nullable List<LoggingDestinationArgs> consumerDestinations) {
            this.consumerDestinations = Input.ofNullable(consumerDestinations);
            return this;
        }

        public Builder producerDestinations(@Nullable Input<List<LoggingDestinationArgs>> producerDestinations) {
            this.producerDestinations = producerDestinations;
            return this;
        }

        public Builder producerDestinations(@Nullable List<LoggingDestinationArgs> producerDestinations) {
            this.producerDestinations = Input.ofNullable(producerDestinations);
            return this;
        }
        public LoggingArgs build() {
            return new LoggingArgs(consumerDestinations, producerDestinations);
        }
    }
}
