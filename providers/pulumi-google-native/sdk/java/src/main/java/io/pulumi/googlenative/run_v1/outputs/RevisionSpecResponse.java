// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.run_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.run_v1.outputs.ContainerResponse;
import io.pulumi.googlenative.run_v1.outputs.LocalObjectReferenceResponse;
import io.pulumi.googlenative.run_v1.outputs.VolumeResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class RevisionSpecResponse {
    private final Integer containerConcurrency;
    private final List<ContainerResponse> containers;
    private final Boolean enableServiceLinks;
    private final List<LocalObjectReferenceResponse> imagePullSecrets;
    private final String serviceAccountName;
    private final Integer timeoutSeconds;
    private final List<VolumeResponse> volumes;

    @OutputCustomType.Constructor({"containerConcurrency","containers","enableServiceLinks","imagePullSecrets","serviceAccountName","timeoutSeconds","volumes"})
    private RevisionSpecResponse(
        Integer containerConcurrency,
        List<ContainerResponse> containers,
        Boolean enableServiceLinks,
        List<LocalObjectReferenceResponse> imagePullSecrets,
        String serviceAccountName,
        Integer timeoutSeconds,
        List<VolumeResponse> volumes) {
        this.containerConcurrency = Objects.requireNonNull(containerConcurrency);
        this.containers = Objects.requireNonNull(containers);
        this.enableServiceLinks = Objects.requireNonNull(enableServiceLinks);
        this.imagePullSecrets = Objects.requireNonNull(imagePullSecrets);
        this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
        this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds);
        this.volumes = Objects.requireNonNull(volumes);
    }

    public Integer getContainerConcurrency() {
        return this.containerConcurrency;
    }
    public List<ContainerResponse> getContainers() {
        return this.containers;
    }
    public Boolean getEnableServiceLinks() {
        return this.enableServiceLinks;
    }
    public List<LocalObjectReferenceResponse> getImagePullSecrets() {
        return this.imagePullSecrets;
    }
    public String getServiceAccountName() {
        return this.serviceAccountName;
    }
    public Integer getTimeoutSeconds() {
        return this.timeoutSeconds;
    }
    public List<VolumeResponse> getVolumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RevisionSpecResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer containerConcurrency;
        private List<ContainerResponse> containers;
        private Boolean enableServiceLinks;
        private List<LocalObjectReferenceResponse> imagePullSecrets;
        private String serviceAccountName;
        private Integer timeoutSeconds;
        private List<VolumeResponse> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(RevisionSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerConcurrency = defaults.containerConcurrency;
    	      this.containers = defaults.containers;
    	      this.enableServiceLinks = defaults.enableServiceLinks;
    	      this.imagePullSecrets = defaults.imagePullSecrets;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.volumes = defaults.volumes;
        }

        public Builder setContainerConcurrency(Integer containerConcurrency) {
            this.containerConcurrency = Objects.requireNonNull(containerConcurrency);
            return this;
        }

        public Builder setContainers(List<ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }

        public Builder setEnableServiceLinks(Boolean enableServiceLinks) {
            this.enableServiceLinks = Objects.requireNonNull(enableServiceLinks);
            return this;
        }

        public Builder setImagePullSecrets(List<LocalObjectReferenceResponse> imagePullSecrets) {
            this.imagePullSecrets = Objects.requireNonNull(imagePullSecrets);
            return this;
        }

        public Builder setServiceAccountName(String serviceAccountName) {
            this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
            return this;
        }

        public Builder setTimeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds);
            return this;
        }

        public Builder setVolumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }

        public RevisionSpecResponse build() {
            return new RevisionSpecResponse(containerConcurrency, containers, enableServiceLinks, imagePullSecrets, serviceAccountName, timeoutSeconds, volumes);
        }
    }
}
