// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.toolresults_v1beta3.enums.TestIssueCategory;
import io.pulumi.googlenative.toolresults_v1beta3.enums.TestIssueSeverity;
import io.pulumi.googlenative.toolresults_v1beta3.enums.TestIssueType;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.AnyArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * An issue detected occurring during a test execution.
 * 
 */
public final class TestIssueArgs extends io.pulumi.resources.ResourceArgs {

    public static final TestIssueArgs Empty = new TestIssueArgs();

    /**
     * Category of issue. Required.
     * 
     */
    @InputImport(name="category")
    private final @Nullable Input<TestIssueCategory> category;

    public Input<TestIssueCategory> getCategory() {
        return this.category == null ? Input.empty() : this.category;
    }

    /**
     * A brief human-readable message describing the issue. Required.
     * 
     */
    @InputImport(name="errorMessage")
    private final @Nullable Input<String> errorMessage;

    public Input<String> getErrorMessage() {
        return this.errorMessage == null ? Input.empty() : this.errorMessage;
    }

    /**
     * Severity of issue. Required.
     * 
     */
    @InputImport(name="severity")
    private final @Nullable Input<TestIssueSeverity> severity;

    public Input<TestIssueSeverity> getSeverity() {
        return this.severity == null ? Input.empty() : this.severity;
    }

    /**
     * Type of issue. Required.
     * 
     */
    @InputImport(name="type")
    private final @Nullable Input<TestIssueType> type;

    public Input<TestIssueType> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * Warning message with additional details of the issue. Should always be a message from com.google.devtools.toolresults.v1.warnings
     * 
     */
    @InputImport(name="warning")
    private final @Nullable Input<AnyArgs> warning;

    public Input<AnyArgs> getWarning() {
        return this.warning == null ? Input.empty() : this.warning;
    }

    public TestIssueArgs(
        @Nullable Input<TestIssueCategory> category,
        @Nullable Input<String> errorMessage,
        @Nullable Input<TestIssueSeverity> severity,
        @Nullable Input<TestIssueType> type,
        @Nullable Input<AnyArgs> warning) {
        this.category = category;
        this.errorMessage = errorMessage;
        this.severity = severity;
        this.type = type;
        this.warning = warning;
    }

    private TestIssueArgs() {
        this.category = Input.empty();
        this.errorMessage = Input.empty();
        this.severity = Input.empty();
        this.type = Input.empty();
        this.warning = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestIssueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<TestIssueCategory> category;
        private @Nullable Input<String> errorMessage;
        private @Nullable Input<TestIssueSeverity> severity;
        private @Nullable Input<TestIssueType> type;
        private @Nullable Input<AnyArgs> warning;

        public Builder() {
    	      // Empty
        }

        public Builder(TestIssueArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.errorMessage = defaults.errorMessage;
    	      this.severity = defaults.severity;
    	      this.type = defaults.type;
    	      this.warning = defaults.warning;
        }

        public Builder setCategory(@Nullable Input<TestIssueCategory> category) {
            this.category = category;
            return this;
        }

        public Builder setCategory(@Nullable TestIssueCategory category) {
            this.category = Input.ofNullable(category);
            return this;
        }

        public Builder setErrorMessage(@Nullable Input<String> errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }

        public Builder setErrorMessage(@Nullable String errorMessage) {
            this.errorMessage = Input.ofNullable(errorMessage);
            return this;
        }

        public Builder setSeverity(@Nullable Input<TestIssueSeverity> severity) {
            this.severity = severity;
            return this;
        }

        public Builder setSeverity(@Nullable TestIssueSeverity severity) {
            this.severity = Input.ofNullable(severity);
            return this;
        }

        public Builder setType(@Nullable Input<TestIssueType> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable TestIssueType type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setWarning(@Nullable Input<AnyArgs> warning) {
            this.warning = warning;
            return this;
        }

        public Builder setWarning(@Nullable AnyArgs warning) {
            this.warning = Input.ofNullable(warning);
            return this;
        }

        public TestIssueArgs build() {
            return new TestIssueArgs(category, errorMessage, severity, type, warning);
        }
    }
}
