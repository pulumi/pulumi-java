// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.cloudbuild_v1.inputs.GitHubEnterpriseSecretsArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GithubEnterpriseConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final GithubEnterpriseConfigArgs Empty = new GithubEnterpriseConfigArgs();

    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     * 
     */
    @Import(name="appId", required=true)
      private final Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }

    /**
     * Name to display for this config.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    @Import(name="gheConfigId")
      private final @Nullable Output<String> gheConfigId;

    public Output<String> gheConfigId() {
        return this.gheConfigId == null ? Codegen.empty() : this.gheConfigId;
    }

    /**
     * The URL of the github enterprise host the configuration is for.
     * 
     */
    @Import(name="hostUrl")
      private final @Nullable Output<String> hostUrl;

    public Output<String> hostUrl() {
        return this.hostUrl == null ? Codegen.empty() : this.hostUrl;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    @Import(name="peeredNetwork")
      private final @Nullable Output<String> peeredNetwork;

    public Output<String> peeredNetwork() {
        return this.peeredNetwork == null ? Codegen.empty() : this.peeredNetwork;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    @Import(name="projectId")
      private final @Nullable Output<String> projectId;

    public Output<String> projectId() {
        return this.projectId == null ? Codegen.empty() : this.projectId;
    }

    /**
     * Names of secrets in Secret Manager.
     * 
     */
    @Import(name="secrets")
      private final @Nullable Output<GitHubEnterpriseSecretsArgs> secrets;

    public Output<GitHubEnterpriseSecretsArgs> secrets() {
        return this.secrets == null ? Codegen.empty() : this.secrets;
    }

    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    @Import(name="sslCa")
      private final @Nullable Output<String> sslCa;

    public Output<String> sslCa() {
        return this.sslCa == null ? Codegen.empty() : this.sslCa;
    }

    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     * 
     */
    @Import(name="webhookKey")
      private final @Nullable Output<String> webhookKey;

    public Output<String> webhookKey() {
        return this.webhookKey == null ? Codegen.empty() : this.webhookKey;
    }

    public GithubEnterpriseConfigArgs(
        Output<String> appId,
        @Nullable Output<String> displayName,
        @Nullable Output<String> gheConfigId,
        @Nullable Output<String> hostUrl,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> peeredNetwork,
        @Nullable Output<String> project,
        @Nullable Output<String> projectId,
        @Nullable Output<GitHubEnterpriseSecretsArgs> secrets,
        @Nullable Output<String> sslCa,
        @Nullable Output<String> webhookKey) {
        this.appId = Objects.requireNonNull(appId, "expected parameter 'appId' to be non-null");
        this.displayName = displayName;
        this.gheConfigId = gheConfigId;
        this.hostUrl = hostUrl;
        this.location = location;
        this.name = name;
        this.peeredNetwork = peeredNetwork;
        this.project = project;
        this.projectId = projectId;
        this.secrets = secrets;
        this.sslCa = sslCa;
        this.webhookKey = webhookKey;
    }

    private GithubEnterpriseConfigArgs() {
        this.appId = Codegen.empty();
        this.displayName = Codegen.empty();
        this.gheConfigId = Codegen.empty();
        this.hostUrl = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.peeredNetwork = Codegen.empty();
        this.project = Codegen.empty();
        this.projectId = Codegen.empty();
        this.secrets = Codegen.empty();
        this.sslCa = Codegen.empty();
        this.webhookKey = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GithubEnterpriseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> appId;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> gheConfigId;
        private @Nullable Output<String> hostUrl;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> peeredNetwork;
        private @Nullable Output<String> project;
        private @Nullable Output<String> projectId;
        private @Nullable Output<GitHubEnterpriseSecretsArgs> secrets;
        private @Nullable Output<String> sslCa;
        private @Nullable Output<String> webhookKey;

        public Builder() {
    	      // Empty
        }

        public Builder(GithubEnterpriseConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.displayName = defaults.displayName;
    	      this.gheConfigId = defaults.gheConfigId;
    	      this.hostUrl = defaults.hostUrl;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peeredNetwork = defaults.peeredNetwork;
    	      this.project = defaults.project;
    	      this.projectId = defaults.projectId;
    	      this.secrets = defaults.secrets;
    	      this.sslCa = defaults.sslCa;
    	      this.webhookKey = defaults.webhookKey;
        }

        public Builder appId(Output<String> appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }
        public Builder appId(String appId) {
            this.appId = Output.of(Objects.requireNonNull(appId));
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder gheConfigId(@Nullable Output<String> gheConfigId) {
            this.gheConfigId = gheConfigId;
            return this;
        }
        public Builder gheConfigId(@Nullable String gheConfigId) {
            this.gheConfigId = Codegen.ofNullable(gheConfigId);
            return this;
        }
        public Builder hostUrl(@Nullable Output<String> hostUrl) {
            this.hostUrl = hostUrl;
            return this;
        }
        public Builder hostUrl(@Nullable String hostUrl) {
            this.hostUrl = Codegen.ofNullable(hostUrl);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder peeredNetwork(@Nullable Output<String> peeredNetwork) {
            this.peeredNetwork = peeredNetwork;
            return this;
        }
        public Builder peeredNetwork(@Nullable String peeredNetwork) {
            this.peeredNetwork = Codegen.ofNullable(peeredNetwork);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder projectId(@Nullable Output<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        public Builder projectId(@Nullable String projectId) {
            this.projectId = Codegen.ofNullable(projectId);
            return this;
        }
        public Builder secrets(@Nullable Output<GitHubEnterpriseSecretsArgs> secrets) {
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(@Nullable GitHubEnterpriseSecretsArgs secrets) {
            this.secrets = Codegen.ofNullable(secrets);
            return this;
        }
        public Builder sslCa(@Nullable Output<String> sslCa) {
            this.sslCa = sslCa;
            return this;
        }
        public Builder sslCa(@Nullable String sslCa) {
            this.sslCa = Codegen.ofNullable(sslCa);
            return this;
        }
        public Builder webhookKey(@Nullable Output<String> webhookKey) {
            this.webhookKey = webhookKey;
            return this;
        }
        public Builder webhookKey(@Nullable String webhookKey) {
            this.webhookKey = Codegen.ofNullable(webhookKey);
            return this;
        }        public GithubEnterpriseConfigArgs build() {
            return new GithubEnterpriseConfigArgs(appId, displayName, gheConfigId, hostUrl, location, name, peeredNetwork, project, projectId, secrets, sslCa, webhookKey);
        }
    }
}
