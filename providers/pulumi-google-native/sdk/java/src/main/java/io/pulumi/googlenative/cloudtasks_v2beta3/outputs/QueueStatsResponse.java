// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2beta3.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class QueueStatsResponse {
    private final String concurrentDispatchesCount;
    private final Double effectiveExecutionRate;
    private final String executedLastMinuteCount;
    private final String oldestEstimatedArrivalTime;
    private final String tasksCount;

    @OutputCustomType.Constructor({"concurrentDispatchesCount","effectiveExecutionRate","executedLastMinuteCount","oldestEstimatedArrivalTime","tasksCount"})
    private QueueStatsResponse(
        String concurrentDispatchesCount,
        Double effectiveExecutionRate,
        String executedLastMinuteCount,
        String oldestEstimatedArrivalTime,
        String tasksCount) {
        this.concurrentDispatchesCount = Objects.requireNonNull(concurrentDispatchesCount);
        this.effectiveExecutionRate = Objects.requireNonNull(effectiveExecutionRate);
        this.executedLastMinuteCount = Objects.requireNonNull(executedLastMinuteCount);
        this.oldestEstimatedArrivalTime = Objects.requireNonNull(oldestEstimatedArrivalTime);
        this.tasksCount = Objects.requireNonNull(tasksCount);
    }

    public String getConcurrentDispatchesCount() {
        return this.concurrentDispatchesCount;
    }
    public Double getEffectiveExecutionRate() {
        return this.effectiveExecutionRate;
    }
    public String getExecutedLastMinuteCount() {
        return this.executedLastMinuteCount;
    }
    public String getOldestEstimatedArrivalTime() {
        return this.oldestEstimatedArrivalTime;
    }
    public String getTasksCount() {
        return this.tasksCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueStatsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String concurrentDispatchesCount;
        private Double effectiveExecutionRate;
        private String executedLastMinuteCount;
        private String oldestEstimatedArrivalTime;
        private String tasksCount;

        public Builder() {
    	      // Empty
        }

        public Builder(QueueStatsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concurrentDispatchesCount = defaults.concurrentDispatchesCount;
    	      this.effectiveExecutionRate = defaults.effectiveExecutionRate;
    	      this.executedLastMinuteCount = defaults.executedLastMinuteCount;
    	      this.oldestEstimatedArrivalTime = defaults.oldestEstimatedArrivalTime;
    	      this.tasksCount = defaults.tasksCount;
        }

        public Builder setConcurrentDispatchesCount(String concurrentDispatchesCount) {
            this.concurrentDispatchesCount = Objects.requireNonNull(concurrentDispatchesCount);
            return this;
        }

        public Builder setEffectiveExecutionRate(Double effectiveExecutionRate) {
            this.effectiveExecutionRate = Objects.requireNonNull(effectiveExecutionRate);
            return this;
        }

        public Builder setExecutedLastMinuteCount(String executedLastMinuteCount) {
            this.executedLastMinuteCount = Objects.requireNonNull(executedLastMinuteCount);
            return this;
        }

        public Builder setOldestEstimatedArrivalTime(String oldestEstimatedArrivalTime) {
            this.oldestEstimatedArrivalTime = Objects.requireNonNull(oldestEstimatedArrivalTime);
            return this;
        }

        public Builder setTasksCount(String tasksCount) {
            this.tasksCount = Objects.requireNonNull(tasksCount);
            return this;
        }

        public QueueStatsResponse build() {
            return new QueueStatsResponse(concurrentDispatchesCount, effectiveExecutionRate, executedLastMinuteCount, oldestEstimatedArrivalTime, tasksCount);
        }
    }
}
