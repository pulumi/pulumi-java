// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dataflow_v1b3.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.googlenative.dataflow_v1b3.outputs.ComponentSourceResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.ComponentTransformResponse;
import io.pulumi.googlenative.dataflow_v1b3.outputs.StageSourceResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ExecutionStageSummaryResponse {
    /**
     * Collections produced and consumed by component transforms of this stage.
     * 
     */
    private final List<ComponentSourceResponse> componentSource;
    /**
     * Transforms that comprise this execution stage.
     * 
     */
    private final List<ComponentTransformResponse> componentTransform;
    /**
     * Input sources for this stage.
     * 
     */
    private final List<StageSourceResponse> inputSource;
    /**
     * Type of transform this stage is executing.
     * 
     */
    private final String kind;
    /**
     * Dataflow service generated name for this stage.
     * 
     */
    private final String name;
    /**
     * Output sources for this stage.
     * 
     */
    private final List<StageSourceResponse> outputSource;
    /**
     * Other stages that must complete before this stage can run.
     * 
     */
    private final List<String> prerequisiteStage;

    @CustomType.Constructor
    private ExecutionStageSummaryResponse(
        @CustomType.Parameter("componentSource") List<ComponentSourceResponse> componentSource,
        @CustomType.Parameter("componentTransform") List<ComponentTransformResponse> componentTransform,
        @CustomType.Parameter("inputSource") List<StageSourceResponse> inputSource,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("outputSource") List<StageSourceResponse> outputSource,
        @CustomType.Parameter("prerequisiteStage") List<String> prerequisiteStage) {
        this.componentSource = componentSource;
        this.componentTransform = componentTransform;
        this.inputSource = inputSource;
        this.kind = kind;
        this.name = name;
        this.outputSource = outputSource;
        this.prerequisiteStage = prerequisiteStage;
    }

    /**
     * Collections produced and consumed by component transforms of this stage.
     * 
    */
    public List<ComponentSourceResponse> getComponentSource() {
        return this.componentSource;
    }
    /**
     * Transforms that comprise this execution stage.
     * 
    */
    public List<ComponentTransformResponse> getComponentTransform() {
        return this.componentTransform;
    }
    /**
     * Input sources for this stage.
     * 
    */
    public List<StageSourceResponse> getInputSource() {
        return this.inputSource;
    }
    /**
     * Type of transform this stage is executing.
     * 
    */
    public String getKind() {
        return this.kind;
    }
    /**
     * Dataflow service generated name for this stage.
     * 
    */
    public String getName() {
        return this.name;
    }
    /**
     * Output sources for this stage.
     * 
    */
    public List<StageSourceResponse> getOutputSource() {
        return this.outputSource;
    }
    /**
     * Other stages that must complete before this stage can run.
     * 
    */
    public List<String> getPrerequisiteStage() {
        return this.prerequisiteStage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionStageSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<ComponentSourceResponse> componentSource;
        private List<ComponentTransformResponse> componentTransform;
        private List<StageSourceResponse> inputSource;
        private String kind;
        private String name;
        private List<StageSourceResponse> outputSource;
        private List<String> prerequisiteStage;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecutionStageSummaryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.componentSource = defaults.componentSource;
    	      this.componentTransform = defaults.componentTransform;
    	      this.inputSource = defaults.inputSource;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.outputSource = defaults.outputSource;
    	      this.prerequisiteStage = defaults.prerequisiteStage;
        }

        public Builder componentSource(List<ComponentSourceResponse> componentSource) {
            this.componentSource = Objects.requireNonNull(componentSource);
            return this;
        }
        public Builder componentSource(ComponentSourceResponse... componentSource) {
            return componentSource(List.of(componentSource));
        }
        public Builder componentTransform(List<ComponentTransformResponse> componentTransform) {
            this.componentTransform = Objects.requireNonNull(componentTransform);
            return this;
        }
        public Builder componentTransform(ComponentTransformResponse... componentTransform) {
            return componentTransform(List.of(componentTransform));
        }
        public Builder inputSource(List<StageSourceResponse> inputSource) {
            this.inputSource = Objects.requireNonNull(inputSource);
            return this;
        }
        public Builder inputSource(StageSourceResponse... inputSource) {
            return inputSource(List.of(inputSource));
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder outputSource(List<StageSourceResponse> outputSource) {
            this.outputSource = Objects.requireNonNull(outputSource);
            return this;
        }
        public Builder outputSource(StageSourceResponse... outputSource) {
            return outputSource(List.of(outputSource));
        }
        public Builder prerequisiteStage(List<String> prerequisiteStage) {
            this.prerequisiteStage = Objects.requireNonNull(prerequisiteStage);
            return this;
        }
        public Builder prerequisiteStage(String... prerequisiteStage) {
            return prerequisiteStage(List.of(prerequisiteStage));
        }        public ExecutionStageSummaryResponse build() {
            return new ExecutionStageSummaryResponse(componentSource, componentTransform, inputSource, kind, name, outputSource, prerequisiteStage);
        }
    }
}
