// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.privateca_v1beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.privateca_v1beta1.outputs.AccessUrlsResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.CertificateAuthorityPolicyResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.CertificateConfigResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.CertificateDescriptionResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.IssuingOptionsResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.KeyVersionSpecResponse;
import io.pulumi.googlenative.privateca_v1beta1.outputs.SubordinateConfigResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetCertificateAuthorityResult {
    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     * 
     */
    private final AccessUrlsResponse accessUrls;
    /**
     * A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
     * 
     */
    private final List<CertificateDescriptionResponse> caCertificateDescriptions;
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     * 
     */
    private final CertificateAuthorityPolicyResponse certificatePolicy;
    /**
     * Immutable. The config used to create a self-signed X.509 certificate or CSR.
     * 
     */
    private final CertificateConfigResponse config;
    /**
     * The time at which this CertificateAuthority was created.
     * 
     */
    private final String createTime;
    /**
     * The time at which this CertificateAuthority will be deleted, if scheduled for deletion.
     * 
     */
    private final String deleteTime;
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     * 
     */
    private final String gcsBucket;
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     * 
     */
    private final IssuingOptionsResponse issuingOptions;
    /**
     * Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     * 
     */
    private final KeyVersionSpecResponse keySpec;
    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    private final Map<String,String> labels;
    /**
     * The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     * 
     */
    private final String lifetime;
    /**
     * The resource name for this CertificateAuthority in the format `projects/*{@literal /}locations/*{@literal /}certificateAuthorities/*`.
     * 
     */
    private final String name;
    /**
     * This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
     * 
     */
    private final List<String> pemCaCertificates;
    /**
     * The State for this CertificateAuthority.
     * 
     */
    private final String state;
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     * 
     */
    private final SubordinateConfigResponse subordinateConfig;
    /**
     * Immutable. The Tier of this CertificateAuthority.
     * 
     */
    private final String tier;
    /**
     * Immutable. The Type of this CertificateAuthority.
     * 
     */
    private final String type;
    /**
     * The time at which this CertificateAuthority was updated.
     * 
     */
    private final String updateTime;

    @OutputCustomType.Constructor({"accessUrls","caCertificateDescriptions","certificatePolicy","config","createTime","deleteTime","gcsBucket","issuingOptions","keySpec","labels","lifetime","name","pemCaCertificates","state","subordinateConfig","tier","type","updateTime"})
    private GetCertificateAuthorityResult(
        AccessUrlsResponse accessUrls,
        List<CertificateDescriptionResponse> caCertificateDescriptions,
        CertificateAuthorityPolicyResponse certificatePolicy,
        CertificateConfigResponse config,
        String createTime,
        String deleteTime,
        String gcsBucket,
        IssuingOptionsResponse issuingOptions,
        KeyVersionSpecResponse keySpec,
        Map<String,String> labels,
        String lifetime,
        String name,
        List<String> pemCaCertificates,
        String state,
        SubordinateConfigResponse subordinateConfig,
        String tier,
        String type,
        String updateTime) {
        this.accessUrls = Objects.requireNonNull(accessUrls);
        this.caCertificateDescriptions = Objects.requireNonNull(caCertificateDescriptions);
        this.certificatePolicy = Objects.requireNonNull(certificatePolicy);
        this.config = Objects.requireNonNull(config);
        this.createTime = Objects.requireNonNull(createTime);
        this.deleteTime = Objects.requireNonNull(deleteTime);
        this.gcsBucket = Objects.requireNonNull(gcsBucket);
        this.issuingOptions = Objects.requireNonNull(issuingOptions);
        this.keySpec = Objects.requireNonNull(keySpec);
        this.labels = Objects.requireNonNull(labels);
        this.lifetime = Objects.requireNonNull(lifetime);
        this.name = Objects.requireNonNull(name);
        this.pemCaCertificates = Objects.requireNonNull(pemCaCertificates);
        this.state = Objects.requireNonNull(state);
        this.subordinateConfig = Objects.requireNonNull(subordinateConfig);
        this.tier = Objects.requireNonNull(tier);
        this.type = Objects.requireNonNull(type);
        this.updateTime = Objects.requireNonNull(updateTime);
    }

    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     * 
     */
    public AccessUrlsResponse getAccessUrls() {
        return this.accessUrls;
    }
    /**
     * A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
     * 
     */
    public List<CertificateDescriptionResponse> getCaCertificateDescriptions() {
        return this.caCertificateDescriptions;
    }
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     * 
     */
    public CertificateAuthorityPolicyResponse getCertificatePolicy() {
        return this.certificatePolicy;
    }
    /**
     * Immutable. The config used to create a self-signed X.509 certificate or CSR.
     * 
     */
    public CertificateConfigResponse getConfig() {
        return this.config;
    }
    /**
     * The time at which this CertificateAuthority was created.
     * 
     */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * The time at which this CertificateAuthority will be deleted, if scheduled for deletion.
     * 
     */
    public String getDeleteTime() {
        return this.deleteTime;
    }
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     * 
     */
    public String getGcsBucket() {
        return this.gcsBucket;
    }
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     * 
     */
    public IssuingOptionsResponse getIssuingOptions() {
        return this.issuingOptions;
    }
    /**
     * Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     * 
     */
    public KeyVersionSpecResponse getKeySpec() {
        return this.keySpec;
    }
    /**
     * Optional. Labels with user-defined metadata.
     * 
     */
    public Map<String,String> getLabels() {
        return this.labels;
    }
    /**
     * The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     * 
     */
    public String getLifetime() {
        return this.lifetime;
    }
    /**
     * The resource name for this CertificateAuthority in the format `projects/*{@literal /}locations/*{@literal /}certificateAuthorities/*`.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
     * 
     */
    public List<String> getPemCaCertificates() {
        return this.pemCaCertificates;
    }
    /**
     * The State for this CertificateAuthority.
     * 
     */
    public String getState() {
        return this.state;
    }
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     * 
     */
    public SubordinateConfigResponse getSubordinateConfig() {
        return this.subordinateConfig;
    }
    /**
     * Immutable. The Tier of this CertificateAuthority.
     * 
     */
    public String getTier() {
        return this.tier;
    }
    /**
     * Immutable. The Type of this CertificateAuthority.
     * 
     */
    public String getType() {
        return this.type;
    }
    /**
     * The time at which this CertificateAuthority was updated.
     * 
     */
    public String getUpdateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateAuthorityResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessUrlsResponse accessUrls;
        private List<CertificateDescriptionResponse> caCertificateDescriptions;
        private CertificateAuthorityPolicyResponse certificatePolicy;
        private CertificateConfigResponse config;
        private String createTime;
        private String deleteTime;
        private String gcsBucket;
        private IssuingOptionsResponse issuingOptions;
        private KeyVersionSpecResponse keySpec;
        private Map<String,String> labels;
        private String lifetime;
        private String name;
        private List<String> pemCaCertificates;
        private String state;
        private SubordinateConfigResponse subordinateConfig;
        private String tier;
        private String type;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCertificateAuthorityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUrls = defaults.accessUrls;
    	      this.caCertificateDescriptions = defaults.caCertificateDescriptions;
    	      this.certificatePolicy = defaults.certificatePolicy;
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.deleteTime = defaults.deleteTime;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.issuingOptions = defaults.issuingOptions;
    	      this.keySpec = defaults.keySpec;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.name = defaults.name;
    	      this.pemCaCertificates = defaults.pemCaCertificates;
    	      this.state = defaults.state;
    	      this.subordinateConfig = defaults.subordinateConfig;
    	      this.tier = defaults.tier;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder setAccessUrls(AccessUrlsResponse accessUrls) {
            this.accessUrls = Objects.requireNonNull(accessUrls);
            return this;
        }

        public Builder setCaCertificateDescriptions(List<CertificateDescriptionResponse> caCertificateDescriptions) {
            this.caCertificateDescriptions = Objects.requireNonNull(caCertificateDescriptions);
            return this;
        }

        public Builder setCertificatePolicy(CertificateAuthorityPolicyResponse certificatePolicy) {
            this.certificatePolicy = Objects.requireNonNull(certificatePolicy);
            return this;
        }

        public Builder setConfig(CertificateConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDeleteTime(String deleteTime) {
            this.deleteTime = Objects.requireNonNull(deleteTime);
            return this;
        }

        public Builder setGcsBucket(String gcsBucket) {
            this.gcsBucket = Objects.requireNonNull(gcsBucket);
            return this;
        }

        public Builder setIssuingOptions(IssuingOptionsResponse issuingOptions) {
            this.issuingOptions = Objects.requireNonNull(issuingOptions);
            return this;
        }

        public Builder setKeySpec(KeyVersionSpecResponse keySpec) {
            this.keySpec = Objects.requireNonNull(keySpec);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLifetime(String lifetime) {
            this.lifetime = Objects.requireNonNull(lifetime);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPemCaCertificates(List<String> pemCaCertificates) {
            this.pemCaCertificates = Objects.requireNonNull(pemCaCertificates);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setSubordinateConfig(SubordinateConfigResponse subordinateConfig) {
            this.subordinateConfig = Objects.requireNonNull(subordinateConfig);
            return this;
        }

        public Builder setTier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUpdateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }

        public GetCertificateAuthorityResult build() {
            return new GetCertificateAuthorityResult(accessUrls, caCertificateDescriptions, certificatePolicy, config, createTime, deleteTime, gcsBucket, issuingOptions, keySpec, labels, lifetime, name, pemCaCertificates, state, subordinateConfig, tier, type, updateTime);
        }
    }
}
