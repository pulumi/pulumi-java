// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.monitoring_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.monitoring_v1.inputs.WidgetArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A single tile in the mosaic. The placement and size of the tile are configurable.
 * 
 */
public final class TileArgs extends io.pulumi.resources.ResourceArgs {

    public static final TileArgs Empty = new TileArgs();

    /**
     * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
     * 
     */
    @InputImport(name="height")
    private final @Nullable Input<Integer> height;

    public Input<Integer> getHeight() {
        return this.height == null ? Input.empty() : this.height;
    }

    /**
     * The informational widget contained in the tile. For example an XyChart.
     * 
     */
    @InputImport(name="widget")
    private final @Nullable Input<WidgetArgs> widget;

    public Input<WidgetArgs> getWidget() {
        return this.widget == null ? Input.empty() : this.widget;
    }

    /**
     * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
     * 
     */
    @InputImport(name="width")
    private final @Nullable Input<Integer> width;

    public Input<Integer> getWidth() {
        return this.width == null ? Input.empty() : this.width;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.
     * 
     */
    @InputImport(name="xPos")
    private final @Nullable Input<Integer> xPos;

    public Input<Integer> getXPos() {
        return this.xPos == null ? Input.empty() : this.xPos;
    }

    /**
     * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.
     * 
     */
    @InputImport(name="yPos")
    private final @Nullable Input<Integer> yPos;

    public Input<Integer> getYPos() {
        return this.yPos == null ? Input.empty() : this.yPos;
    }

    public TileArgs(
        @Nullable Input<Integer> height,
        @Nullable Input<WidgetArgs> widget,
        @Nullable Input<Integer> width,
        @Nullable Input<Integer> xPos,
        @Nullable Input<Integer> yPos) {
        this.height = height;
        this.widget = widget;
        this.width = width;
        this.xPos = xPos;
        this.yPos = yPos;
    }

    private TileArgs() {
        this.height = Input.empty();
        this.widget = Input.empty();
        this.width = Input.empty();
        this.xPos = Input.empty();
        this.yPos = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> height;
        private @Nullable Input<WidgetArgs> widget;
        private @Nullable Input<Integer> width;
        private @Nullable Input<Integer> xPos;
        private @Nullable Input<Integer> yPos;

        public Builder() {
    	      // Empty
        }

        public Builder(TileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.widget = defaults.widget;
    	      this.width = defaults.width;
    	      this.xPos = defaults.xPos;
    	      this.yPos = defaults.yPos;
        }

        public Builder setHeight(@Nullable Input<Integer> height) {
            this.height = height;
            return this;
        }

        public Builder setHeight(@Nullable Integer height) {
            this.height = Input.ofNullable(height);
            return this;
        }

        public Builder setWidget(@Nullable Input<WidgetArgs> widget) {
            this.widget = widget;
            return this;
        }

        public Builder setWidget(@Nullable WidgetArgs widget) {
            this.widget = Input.ofNullable(widget);
            return this;
        }

        public Builder setWidth(@Nullable Input<Integer> width) {
            this.width = width;
            return this;
        }

        public Builder setWidth(@Nullable Integer width) {
            this.width = Input.ofNullable(width);
            return this;
        }

        public Builder setXPos(@Nullable Input<Integer> xPos) {
            this.xPos = xPos;
            return this;
        }

        public Builder setXPos(@Nullable Integer xPos) {
            this.xPos = Input.ofNullable(xPos);
            return this;
        }

        public Builder setYPos(@Nullable Input<Integer> yPos) {
            this.yPos = yPos;
            return this;
        }

        public Builder setYPos(@Nullable Integer yPos) {
            this.yPos = Input.ofNullable(yPos);
            return this;
        }

        public TileArgs build() {
            return new TileArgs(height, widget, width, xPos, yPos);
        }
    }
}
