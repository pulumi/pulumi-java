// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.testing_v1.inputs.AppBundleArgs;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
 * 
 */
public final class AndroidTestLoopArgs extends io.pulumi.resources.ResourceArgs {

    public static final AndroidTestLoopArgs Empty = new AndroidTestLoopArgs();

    /**
     * The APK for the application under test.
     * 
     */
    @Import(name="appApk")
      private final @Nullable Output<FileReferenceArgs> appApk;

    public Output<FileReferenceArgs> getAppApk() {
        return this.appApk == null ? Codegen.empty() : this.appApk;
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @Import(name="appBundle")
      private final @Nullable Output<AppBundleArgs> appBundle;

    public Output<AppBundleArgs> getAppBundle() {
        return this.appBundle == null ? Codegen.empty() : this.appBundle;
    }

    /**
     * The java package for the application under test. The default is determined by examining the application's manifest.
     * 
     */
    @Import(name="appPackageId")
      private final @Nullable Output<String> appPackageId;

    public Output<String> getAppPackageId() {
        return this.appPackageId == null ? Codegen.empty() : this.appPackageId;
    }

    /**
     * The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
     * 
     */
    @Import(name="scenarioLabels")
      private final @Nullable Output<List<String>> scenarioLabels;

    public Output<List<String>> getScenarioLabels() {
        return this.scenarioLabels == null ? Codegen.empty() : this.scenarioLabels;
    }

    /**
     * The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
     * 
     */
    @Import(name="scenarios")
      private final @Nullable Output<List<Integer>> scenarios;

    public Output<List<Integer>> getScenarios() {
        return this.scenarios == null ? Codegen.empty() : this.scenarios;
    }

    public AndroidTestLoopArgs(
        @Nullable Output<FileReferenceArgs> appApk,
        @Nullable Output<AppBundleArgs> appBundle,
        @Nullable Output<String> appPackageId,
        @Nullable Output<List<String>> scenarioLabels,
        @Nullable Output<List<Integer>> scenarios) {
        this.appApk = appApk;
        this.appBundle = appBundle;
        this.appPackageId = appPackageId;
        this.scenarioLabels = scenarioLabels;
        this.scenarios = scenarios;
    }

    private AndroidTestLoopArgs() {
        this.appApk = Codegen.empty();
        this.appBundle = Codegen.empty();
        this.appPackageId = Codegen.empty();
        this.scenarioLabels = Codegen.empty();
        this.scenarios = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidTestLoopArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FileReferenceArgs> appApk;
        private @Nullable Output<AppBundleArgs> appBundle;
        private @Nullable Output<String> appPackageId;
        private @Nullable Output<List<String>> scenarioLabels;
        private @Nullable Output<List<Integer>> scenarios;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidTestLoopArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appApk = defaults.appApk;
    	      this.appBundle = defaults.appBundle;
    	      this.appPackageId = defaults.appPackageId;
    	      this.scenarioLabels = defaults.scenarioLabels;
    	      this.scenarios = defaults.scenarios;
        }

        public Builder appApk(@Nullable Output<FileReferenceArgs> appApk) {
            this.appApk = appApk;
            return this;
        }
        public Builder appApk(@Nullable FileReferenceArgs appApk) {
            this.appApk = Codegen.ofNullable(appApk);
            return this;
        }
        public Builder appBundle(@Nullable Output<AppBundleArgs> appBundle) {
            this.appBundle = appBundle;
            return this;
        }
        public Builder appBundle(@Nullable AppBundleArgs appBundle) {
            this.appBundle = Codegen.ofNullable(appBundle);
            return this;
        }
        public Builder appPackageId(@Nullable Output<String> appPackageId) {
            this.appPackageId = appPackageId;
            return this;
        }
        public Builder appPackageId(@Nullable String appPackageId) {
            this.appPackageId = Codegen.ofNullable(appPackageId);
            return this;
        }
        public Builder scenarioLabels(@Nullable Output<List<String>> scenarioLabels) {
            this.scenarioLabels = scenarioLabels;
            return this;
        }
        public Builder scenarioLabels(@Nullable List<String> scenarioLabels) {
            this.scenarioLabels = Codegen.ofNullable(scenarioLabels);
            return this;
        }
        public Builder scenarioLabels(String... scenarioLabels) {
            return scenarioLabels(List.of(scenarioLabels));
        }
        public Builder scenarios(@Nullable Output<List<Integer>> scenarios) {
            this.scenarios = scenarios;
            return this;
        }
        public Builder scenarios(@Nullable List<Integer> scenarios) {
            this.scenarios = Codegen.ofNullable(scenarios);
            return this;
        }
        public Builder scenarios(Integer... scenarios) {
            return scenarios(List.of(scenarios));
        }        public AndroidTestLoopArgs build() {
            return new AndroidTestLoopArgs(appApk, appBundle, appPackageId, scenarioLabels, scenarios);
        }
    }
}
