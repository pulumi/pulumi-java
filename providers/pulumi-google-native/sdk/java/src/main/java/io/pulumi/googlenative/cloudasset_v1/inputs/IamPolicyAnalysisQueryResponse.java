// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudasset_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudasset_v1.inputs.AccessSelectorResponse;
import io.pulumi.googlenative.cloudasset_v1.inputs.ConditionContextResponse;
import io.pulumi.googlenative.cloudasset_v1.inputs.IdentitySelectorResponse;
import io.pulumi.googlenative.cloudasset_v1.inputs.OptionsResponse;
import io.pulumi.googlenative.cloudasset_v1.inputs.ResourceSelectorResponse;
import java.lang.String;
import java.util.Objects;


public final class IamPolicyAnalysisQueryResponse extends io.pulumi.resources.InvokeArgs {

    public static final IamPolicyAnalysisQueryResponse Empty = new IamPolicyAnalysisQueryResponse();

    @InputImport(name="accessSelector", required=true)
    private final AccessSelectorResponse accessSelector;

    public AccessSelectorResponse getAccessSelector() {
        return this.accessSelector;
    }

    @InputImport(name="conditionContext", required=true)
    private final ConditionContextResponse conditionContext;

    public ConditionContextResponse getConditionContext() {
        return this.conditionContext;
    }

    @InputImport(name="identitySelector", required=true)
    private final IdentitySelectorResponse identitySelector;

    public IdentitySelectorResponse getIdentitySelector() {
        return this.identitySelector;
    }

    @InputImport(name="options", required=true)
    private final OptionsResponse options;

    public OptionsResponse getOptions() {
        return this.options;
    }

    @InputImport(name="resourceSelector", required=true)
    private final ResourceSelectorResponse resourceSelector;

    public ResourceSelectorResponse getResourceSelector() {
        return this.resourceSelector;
    }

    @InputImport(name="scope", required=true)
    private final String scope;

    public String getScope() {
        return this.scope;
    }

    public IamPolicyAnalysisQueryResponse(
        AccessSelectorResponse accessSelector,
        ConditionContextResponse conditionContext,
        IdentitySelectorResponse identitySelector,
        OptionsResponse options,
        ResourceSelectorResponse resourceSelector,
        String scope) {
        this.accessSelector = Objects.requireNonNull(accessSelector, "expected parameter 'accessSelector' to be non-null");
        this.conditionContext = Objects.requireNonNull(conditionContext, "expected parameter 'conditionContext' to be non-null");
        this.identitySelector = Objects.requireNonNull(identitySelector, "expected parameter 'identitySelector' to be non-null");
        this.options = Objects.requireNonNull(options, "expected parameter 'options' to be non-null");
        this.resourceSelector = Objects.requireNonNull(resourceSelector, "expected parameter 'resourceSelector' to be non-null");
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
    }

    private IamPolicyAnalysisQueryResponse() {
        this.accessSelector = null;
        this.conditionContext = null;
        this.identitySelector = null;
        this.options = null;
        this.resourceSelector = null;
        this.scope = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IamPolicyAnalysisQueryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessSelectorResponse accessSelector;
        private ConditionContextResponse conditionContext;
        private IdentitySelectorResponse identitySelector;
        private OptionsResponse options;
        private ResourceSelectorResponse resourceSelector;
        private String scope;

        public Builder() {
    	      // Empty
        }

        public Builder(IamPolicyAnalysisQueryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessSelector = defaults.accessSelector;
    	      this.conditionContext = defaults.conditionContext;
    	      this.identitySelector = defaults.identitySelector;
    	      this.options = defaults.options;
    	      this.resourceSelector = defaults.resourceSelector;
    	      this.scope = defaults.scope;
        }

        public Builder setAccessSelector(AccessSelectorResponse accessSelector) {
            this.accessSelector = Objects.requireNonNull(accessSelector);
            return this;
        }

        public Builder setConditionContext(ConditionContextResponse conditionContext) {
            this.conditionContext = Objects.requireNonNull(conditionContext);
            return this;
        }

        public Builder setIdentitySelector(IdentitySelectorResponse identitySelector) {
            this.identitySelector = Objects.requireNonNull(identitySelector);
            return this;
        }

        public Builder setOptions(OptionsResponse options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }

        public Builder setResourceSelector(ResourceSelectorResponse resourceSelector) {
            this.resourceSelector = Objects.requireNonNull(resourceSelector);
            return this;
        }

        public Builder setScope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }

        public IamPolicyAnalysisQueryResponse build() {
            return new IamPolicyAnalysisQueryResponse(accessSelector, conditionContext, identitySelector, options, resourceSelector, scope);
        }
    }
}
