// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networkmanagement_v1;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.networkmanagement_v1.inputs.EndpointArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectivityTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectivityTestArgs Empty = new ConnectivityTestArgs();

    /**
     * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
     * 
     */
    @InputImport(name="destination", required=true)
    private final Input<EndpointArgs> destination;

    public Input<EndpointArgs> getDestination() {
        return this.destination;
    }

    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    /**
     * Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test_id}`
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * IP Protocol of the test. When not provided, "TCP" is assumed.
     * 
     */
    @InputImport(name="protocol")
    private final @Nullable Input<String> protocol;

    public Input<String> getProtocol() {
        return this.protocol == null ? Input.empty() : this.protocol;
    }

    /**
     * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
     * 
     */
    @InputImport(name="relatedProjects")
    private final @Nullable Input<List<String>> relatedProjects;

    public Input<List<String>> getRelatedProjects() {
        return this.relatedProjects == null ? Input.empty() : this.relatedProjects;
    }

    /**
     * Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
     * 
     */
    @InputImport(name="source", required=true)
    private final Input<EndpointArgs> source;

    public Input<EndpointArgs> getSource() {
        return this.source;
    }

    @InputImport(name="testId", required=true)
    private final Input<String> testId;

    public Input<String> getTestId() {
        return this.testId;
    }

    public ConnectivityTestArgs(
        @Nullable Input<String> description,
        Input<EndpointArgs> destination,
        @Nullable Input<Map<String,String>> labels,
        Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> protocol,
        @Nullable Input<List<String>> relatedProjects,
        Input<EndpointArgs> source,
        Input<String> testId) {
        this.description = description;
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.labels = labels;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.project = project;
        this.protocol = protocol;
        this.relatedProjects = relatedProjects;
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.testId = Objects.requireNonNull(testId, "expected parameter 'testId' to be non-null");
    }

    private ConnectivityTestArgs() {
        this.description = Input.empty();
        this.destination = Input.empty();
        this.labels = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.protocol = Input.empty();
        this.relatedProjects = Input.empty();
        this.source = Input.empty();
        this.testId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectivityTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private Input<EndpointArgs> destination;
        private @Nullable Input<Map<String,String>> labels;
        private Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> protocol;
        private @Nullable Input<List<String>> relatedProjects;
        private Input<EndpointArgs> source;
        private Input<String> testId;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectivityTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.protocol = defaults.protocol;
    	      this.relatedProjects = defaults.relatedProjects;
    	      this.source = defaults.source;
    	      this.testId = defaults.testId;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDestination(Input<EndpointArgs> destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }

        public Builder setDestination(EndpointArgs destination) {
            this.destination = Input.of(Objects.requireNonNull(destination));
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setProtocol(@Nullable Input<String> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setProtocol(@Nullable String protocol) {
            this.protocol = Input.ofNullable(protocol);
            return this;
        }

        public Builder setRelatedProjects(@Nullable Input<List<String>> relatedProjects) {
            this.relatedProjects = relatedProjects;
            return this;
        }

        public Builder setRelatedProjects(@Nullable List<String> relatedProjects) {
            this.relatedProjects = Input.ofNullable(relatedProjects);
            return this;
        }

        public Builder setSource(Input<EndpointArgs> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder setSource(EndpointArgs source) {
            this.source = Input.of(Objects.requireNonNull(source));
            return this;
        }

        public Builder setTestId(Input<String> testId) {
            this.testId = Objects.requireNonNull(testId);
            return this;
        }

        public Builder setTestId(String testId) {
            this.testId = Input.of(Objects.requireNonNull(testId));
            return this;
        }

        public ConnectivityTestArgs build() {
            return new ConnectivityTestArgs(description, destination, labels, name, project, protocol, relatedProjects, source, testId);
        }
    }
}
