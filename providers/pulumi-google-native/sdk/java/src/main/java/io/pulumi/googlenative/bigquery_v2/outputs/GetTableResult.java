// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.bigquery_v2.outputs.ClusteringResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.EncryptionConfigurationResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ExternalDataConfigurationResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.MaterializedViewDefinitionResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ModelDefinitionResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.RangePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.SnapshotDefinitionResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.StreamingbufferResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TableReferenceResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TableSchemaResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TimePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ViewDefinitionResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetTableResult {
    private final ClusteringResponse clustering;
    private final String creationTime;
    private final String defaultCollation;
    private final String description;
    private final EncryptionConfigurationResponse encryptionConfiguration;
    private final String etag;
    private final String expirationTime;
    private final ExternalDataConfigurationResponse externalDataConfiguration;
    private final String friendlyName;
    private final String kind;
    private final Map<String,String> labels;
    private final String lastModifiedTime;
    private final String location;
    private final MaterializedViewDefinitionResponse materializedView;
    private final ModelDefinitionResponse model;
    private final String numBytes;
    private final String numLongTermBytes;
    private final String numPhysicalBytes;
    private final String numRows;
    private final RangePartitioningResponse rangePartitioning;
    private final Boolean requirePartitionFilter;
    private final TableSchemaResponse schema;
    private final String selfLink;
    private final SnapshotDefinitionResponse snapshotDefinition;
    private final StreamingbufferResponse streamingBuffer;
    private final TableReferenceResponse tableReference;
    private final TimePartitioningResponse timePartitioning;
    private final String type;
    private final ViewDefinitionResponse view;

    @OutputCustomType.Constructor({"clustering","creationTime","defaultCollation","description","encryptionConfiguration","etag","expirationTime","externalDataConfiguration","friendlyName","kind","labels","lastModifiedTime","location","materializedView","model","numBytes","numLongTermBytes","numPhysicalBytes","numRows","rangePartitioning","requirePartitionFilter","schema","selfLink","snapshotDefinition","streamingBuffer","tableReference","timePartitioning","type","view"})
    private GetTableResult(
        ClusteringResponse clustering,
        String creationTime,
        String defaultCollation,
        String description,
        EncryptionConfigurationResponse encryptionConfiguration,
        String etag,
        String expirationTime,
        ExternalDataConfigurationResponse externalDataConfiguration,
        String friendlyName,
        String kind,
        Map<String,String> labels,
        String lastModifiedTime,
        String location,
        MaterializedViewDefinitionResponse materializedView,
        ModelDefinitionResponse model,
        String numBytes,
        String numLongTermBytes,
        String numPhysicalBytes,
        String numRows,
        RangePartitioningResponse rangePartitioning,
        Boolean requirePartitionFilter,
        TableSchemaResponse schema,
        String selfLink,
        SnapshotDefinitionResponse snapshotDefinition,
        StreamingbufferResponse streamingBuffer,
        TableReferenceResponse tableReference,
        TimePartitioningResponse timePartitioning,
        String type,
        ViewDefinitionResponse view) {
        this.clustering = Objects.requireNonNull(clustering);
        this.creationTime = Objects.requireNonNull(creationTime);
        this.defaultCollation = Objects.requireNonNull(defaultCollation);
        this.description = Objects.requireNonNull(description);
        this.encryptionConfiguration = Objects.requireNonNull(encryptionConfiguration);
        this.etag = Objects.requireNonNull(etag);
        this.expirationTime = Objects.requireNonNull(expirationTime);
        this.externalDataConfiguration = Objects.requireNonNull(externalDataConfiguration);
        this.friendlyName = Objects.requireNonNull(friendlyName);
        this.kind = Objects.requireNonNull(kind);
        this.labels = Objects.requireNonNull(labels);
        this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
        this.location = Objects.requireNonNull(location);
        this.materializedView = Objects.requireNonNull(materializedView);
        this.model = Objects.requireNonNull(model);
        this.numBytes = Objects.requireNonNull(numBytes);
        this.numLongTermBytes = Objects.requireNonNull(numLongTermBytes);
        this.numPhysicalBytes = Objects.requireNonNull(numPhysicalBytes);
        this.numRows = Objects.requireNonNull(numRows);
        this.rangePartitioning = Objects.requireNonNull(rangePartitioning);
        this.requirePartitionFilter = Objects.requireNonNull(requirePartitionFilter);
        this.schema = Objects.requireNonNull(schema);
        this.selfLink = Objects.requireNonNull(selfLink);
        this.snapshotDefinition = Objects.requireNonNull(snapshotDefinition);
        this.streamingBuffer = Objects.requireNonNull(streamingBuffer);
        this.tableReference = Objects.requireNonNull(tableReference);
        this.timePartitioning = Objects.requireNonNull(timePartitioning);
        this.type = Objects.requireNonNull(type);
        this.view = Objects.requireNonNull(view);
    }

    public ClusteringResponse getClustering() {
        return this.clustering;
    }
    public String getCreationTime() {
        return this.creationTime;
    }
    public String getDefaultCollation() {
        return this.defaultCollation;
    }
    public String getDescription() {
        return this.description;
    }
    public EncryptionConfigurationResponse getEncryptionConfiguration() {
        return this.encryptionConfiguration;
    }
    public String getEtag() {
        return this.etag;
    }
    public String getExpirationTime() {
        return this.expirationTime;
    }
    public ExternalDataConfigurationResponse getExternalDataConfiguration() {
        return this.externalDataConfiguration;
    }
    public String getFriendlyName() {
        return this.friendlyName;
    }
    public String getKind() {
        return this.kind;
    }
    public Map<String,String> getLabels() {
        return this.labels;
    }
    public String getLastModifiedTime() {
        return this.lastModifiedTime;
    }
    public String getLocation() {
        return this.location;
    }
    public MaterializedViewDefinitionResponse getMaterializedView() {
        return this.materializedView;
    }
    public ModelDefinitionResponse getModel() {
        return this.model;
    }
    public String getNumBytes() {
        return this.numBytes;
    }
    public String getNumLongTermBytes() {
        return this.numLongTermBytes;
    }
    public String getNumPhysicalBytes() {
        return this.numPhysicalBytes;
    }
    public String getNumRows() {
        return this.numRows;
    }
    public RangePartitioningResponse getRangePartitioning() {
        return this.rangePartitioning;
    }
    public Boolean getRequirePartitionFilter() {
        return this.requirePartitionFilter;
    }
    public TableSchemaResponse getSchema() {
        return this.schema;
    }
    public String getSelfLink() {
        return this.selfLink;
    }
    public SnapshotDefinitionResponse getSnapshotDefinition() {
        return this.snapshotDefinition;
    }
    public StreamingbufferResponse getStreamingBuffer() {
        return this.streamingBuffer;
    }
    public TableReferenceResponse getTableReference() {
        return this.tableReference;
    }
    public TimePartitioningResponse getTimePartitioning() {
        return this.timePartitioning;
    }
    public String getType() {
        return this.type;
    }
    public ViewDefinitionResponse getView() {
        return this.view;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusteringResponse clustering;
        private String creationTime;
        private String defaultCollation;
        private String description;
        private EncryptionConfigurationResponse encryptionConfiguration;
        private String etag;
        private String expirationTime;
        private ExternalDataConfigurationResponse externalDataConfiguration;
        private String friendlyName;
        private String kind;
        private Map<String,String> labels;
        private String lastModifiedTime;
        private String location;
        private MaterializedViewDefinitionResponse materializedView;
        private ModelDefinitionResponse model;
        private String numBytes;
        private String numLongTermBytes;
        private String numPhysicalBytes;
        private String numRows;
        private RangePartitioningResponse rangePartitioning;
        private Boolean requirePartitionFilter;
        private TableSchemaResponse schema;
        private String selfLink;
        private SnapshotDefinitionResponse snapshotDefinition;
        private StreamingbufferResponse streamingBuffer;
        private TableReferenceResponse tableReference;
        private TimePartitioningResponse timePartitioning;
        private String type;
        private ViewDefinitionResponse view;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTableResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clustering = defaults.clustering;
    	      this.creationTime = defaults.creationTime;
    	      this.defaultCollation = defaults.defaultCollation;
    	      this.description = defaults.description;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.etag = defaults.etag;
    	      this.expirationTime = defaults.expirationTime;
    	      this.externalDataConfiguration = defaults.externalDataConfiguration;
    	      this.friendlyName = defaults.friendlyName;
    	      this.kind = defaults.kind;
    	      this.labels = defaults.labels;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.location = defaults.location;
    	      this.materializedView = defaults.materializedView;
    	      this.model = defaults.model;
    	      this.numBytes = defaults.numBytes;
    	      this.numLongTermBytes = defaults.numLongTermBytes;
    	      this.numPhysicalBytes = defaults.numPhysicalBytes;
    	      this.numRows = defaults.numRows;
    	      this.rangePartitioning = defaults.rangePartitioning;
    	      this.requirePartitionFilter = defaults.requirePartitionFilter;
    	      this.schema = defaults.schema;
    	      this.selfLink = defaults.selfLink;
    	      this.snapshotDefinition = defaults.snapshotDefinition;
    	      this.streamingBuffer = defaults.streamingBuffer;
    	      this.tableReference = defaults.tableReference;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.type = defaults.type;
    	      this.view = defaults.view;
        }

        public Builder setClustering(ClusteringResponse clustering) {
            this.clustering = Objects.requireNonNull(clustering);
            return this;
        }

        public Builder setCreationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }

        public Builder setDefaultCollation(String defaultCollation) {
            this.defaultCollation = Objects.requireNonNull(defaultCollation);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setEncryptionConfiguration(EncryptionConfigurationResponse encryptionConfiguration) {
            this.encryptionConfiguration = Objects.requireNonNull(encryptionConfiguration);
            return this;
        }

        public Builder setEtag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }

        public Builder setExpirationTime(String expirationTime) {
            this.expirationTime = Objects.requireNonNull(expirationTime);
            return this;
        }

        public Builder setExternalDataConfiguration(ExternalDataConfigurationResponse externalDataConfiguration) {
            this.externalDataConfiguration = Objects.requireNonNull(externalDataConfiguration);
            return this;
        }

        public Builder setFriendlyName(String friendlyName) {
            this.friendlyName = Objects.requireNonNull(friendlyName);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setLabels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }

        public Builder setLastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }

        public Builder setLocation(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }

        public Builder setMaterializedView(MaterializedViewDefinitionResponse materializedView) {
            this.materializedView = Objects.requireNonNull(materializedView);
            return this;
        }

        public Builder setModel(ModelDefinitionResponse model) {
            this.model = Objects.requireNonNull(model);
            return this;
        }

        public Builder setNumBytes(String numBytes) {
            this.numBytes = Objects.requireNonNull(numBytes);
            return this;
        }

        public Builder setNumLongTermBytes(String numLongTermBytes) {
            this.numLongTermBytes = Objects.requireNonNull(numLongTermBytes);
            return this;
        }

        public Builder setNumPhysicalBytes(String numPhysicalBytes) {
            this.numPhysicalBytes = Objects.requireNonNull(numPhysicalBytes);
            return this;
        }

        public Builder setNumRows(String numRows) {
            this.numRows = Objects.requireNonNull(numRows);
            return this;
        }

        public Builder setRangePartitioning(RangePartitioningResponse rangePartitioning) {
            this.rangePartitioning = Objects.requireNonNull(rangePartitioning);
            return this;
        }

        public Builder setRequirePartitionFilter(Boolean requirePartitionFilter) {
            this.requirePartitionFilter = Objects.requireNonNull(requirePartitionFilter);
            return this;
        }

        public Builder setSchema(TableSchemaResponse schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }

        public Builder setSelfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }

        public Builder setSnapshotDefinition(SnapshotDefinitionResponse snapshotDefinition) {
            this.snapshotDefinition = Objects.requireNonNull(snapshotDefinition);
            return this;
        }

        public Builder setStreamingBuffer(StreamingbufferResponse streamingBuffer) {
            this.streamingBuffer = Objects.requireNonNull(streamingBuffer);
            return this;
        }

        public Builder setTableReference(TableReferenceResponse tableReference) {
            this.tableReference = Objects.requireNonNull(tableReference);
            return this;
        }

        public Builder setTimePartitioning(TimePartitioningResponse timePartitioning) {
            this.timePartitioning = Objects.requireNonNull(timePartitioning);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setView(ViewDefinitionResponse view) {
            this.view = Objects.requireNonNull(view);
            return this;
        }

        public GetTableResult build() {
            return new GetTableResult(clustering, creationTime, defaultCollation, description, encryptionConfiguration, etag, expirationTime, externalDataConfiguration, friendlyName, kind, labels, lastModifiedTime, location, materializedView, model, numBytes, numLongTermBytes, numPhysicalBytes, numRows, rangePartitioning, requirePartitionFilter, schema, selfLink, snapshotDefinition, streamingBuffer, tableReference, timePartitioning, type, view);
        }
    }
}
