// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networkservices_v1beta1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.networkservices_v1beta1.enums.EndpointPolicyType;
import io.pulumi.googlenative.networkservices_v1beta1.inputs.EndpointMatcherArgs;
import io.pulumi.googlenative.networkservices_v1beta1.inputs.TrafficPortSelectorArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointPolicyArgs Empty = new EndpointPolicyArgs();

    /**
     * Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.
     * 
     */
    @InputImport(name="authorizationPolicy")
    private final @Nullable Input<String> authorizationPolicy;

    public Input<String> getAuthorizationPolicy() {
        return this.authorizationPolicy == null ? Input.empty() : this.authorizationPolicy;
    }

    /**
     * Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.
     * 
     */
    @InputImport(name="clientTlsPolicy")
    private final @Nullable Input<String> clientTlsPolicy;

    public Input<String> getClientTlsPolicy() {
        return this.clientTlsPolicy == null ? Input.empty() : this.clientTlsPolicy;
    }

    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * A matcher that selects endpoints to which the policies should be applied.
     * 
     */
    @InputImport(name="endpointMatcher", required=true)
    private final Input<EndpointMatcherArgs> endpointMatcher;

    public Input<EndpointMatcherArgs> getEndpointMatcher() {
        return this.endpointMatcher;
    }

    @InputImport(name="endpointPolicyId", required=true)
    private final Input<String> endpointPolicyId;

    public Input<String> getEndpointPolicyId() {
        return this.endpointPolicyId;
    }

    /**
     * Optional. Set of label tags associated with the EndpointPolicy resource.
     * 
     */
    @InputImport(name="labels")
    private final @Nullable Input<Map<String,String>> labels;

    public Input<Map<String,String>> getLabels() {
        return this.labels == null ? Input.empty() : this.labels;
    }

    @InputImport(name="location")
    private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.
     * 
     */
    @InputImport(name="serverTlsPolicy")
    private final @Nullable Input<String> serverTlsPolicy;

    public Input<String> getServerTlsPolicy() {
        return this.serverTlsPolicy == null ? Input.empty() : this.serverTlsPolicy;
    }

    /**
     * Optional. Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
     * 
     */
    @InputImport(name="trafficPortSelector")
    private final @Nullable Input<TrafficPortSelectorArgs> trafficPortSelector;

    public Input<TrafficPortSelectorArgs> getTrafficPortSelector() {
        return this.trafficPortSelector == null ? Input.empty() : this.trafficPortSelector;
    }

    /**
     * The type of endpoint policy. This is primarily used to validate the configuration.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<EndpointPolicyType> type;

    public Input<EndpointPolicyType> getType() {
        return this.type;
    }

    public EndpointPolicyArgs(
        @Nullable Input<String> authorizationPolicy,
        @Nullable Input<String> clientTlsPolicy,
        @Nullable Input<String> description,
        Input<EndpointMatcherArgs> endpointMatcher,
        Input<String> endpointPolicyId,
        @Nullable Input<Map<String,String>> labels,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<String> serverTlsPolicy,
        @Nullable Input<TrafficPortSelectorArgs> trafficPortSelector,
        Input<EndpointPolicyType> type) {
        this.authorizationPolicy = authorizationPolicy;
        this.clientTlsPolicy = clientTlsPolicy;
        this.description = description;
        this.endpointMatcher = Objects.requireNonNull(endpointMatcher, "expected parameter 'endpointMatcher' to be non-null");
        this.endpointPolicyId = Objects.requireNonNull(endpointPolicyId, "expected parameter 'endpointPolicyId' to be non-null");
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.project = project;
        this.serverTlsPolicy = serverTlsPolicy;
        this.trafficPortSelector = trafficPortSelector;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private EndpointPolicyArgs() {
        this.authorizationPolicy = Input.empty();
        this.clientTlsPolicy = Input.empty();
        this.description = Input.empty();
        this.endpointMatcher = Input.empty();
        this.endpointPolicyId = Input.empty();
        this.labels = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.serverTlsPolicy = Input.empty();
        this.trafficPortSelector = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> authorizationPolicy;
        private @Nullable Input<String> clientTlsPolicy;
        private @Nullable Input<String> description;
        private Input<EndpointMatcherArgs> endpointMatcher;
        private Input<String> endpointPolicyId;
        private @Nullable Input<Map<String,String>> labels;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<String> serverTlsPolicy;
        private @Nullable Input<TrafficPortSelectorArgs> trafficPortSelector;
        private Input<EndpointPolicyType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationPolicy = defaults.authorizationPolicy;
    	      this.clientTlsPolicy = defaults.clientTlsPolicy;
    	      this.description = defaults.description;
    	      this.endpointMatcher = defaults.endpointMatcher;
    	      this.endpointPolicyId = defaults.endpointPolicyId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.serverTlsPolicy = defaults.serverTlsPolicy;
    	      this.trafficPortSelector = defaults.trafficPortSelector;
    	      this.type = defaults.type;
        }

        public Builder setAuthorizationPolicy(@Nullable Input<String> authorizationPolicy) {
            this.authorizationPolicy = authorizationPolicy;
            return this;
        }

        public Builder setAuthorizationPolicy(@Nullable String authorizationPolicy) {
            this.authorizationPolicy = Input.ofNullable(authorizationPolicy);
            return this;
        }

        public Builder setClientTlsPolicy(@Nullable Input<String> clientTlsPolicy) {
            this.clientTlsPolicy = clientTlsPolicy;
            return this;
        }

        public Builder setClientTlsPolicy(@Nullable String clientTlsPolicy) {
            this.clientTlsPolicy = Input.ofNullable(clientTlsPolicy);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEndpointMatcher(Input<EndpointMatcherArgs> endpointMatcher) {
            this.endpointMatcher = Objects.requireNonNull(endpointMatcher);
            return this;
        }

        public Builder setEndpointMatcher(EndpointMatcherArgs endpointMatcher) {
            this.endpointMatcher = Input.of(Objects.requireNonNull(endpointMatcher));
            return this;
        }

        public Builder setEndpointPolicyId(Input<String> endpointPolicyId) {
            this.endpointPolicyId = Objects.requireNonNull(endpointPolicyId);
            return this;
        }

        public Builder setEndpointPolicyId(String endpointPolicyId) {
            this.endpointPolicyId = Input.of(Objects.requireNonNull(endpointPolicyId));
            return this;
        }

        public Builder setLabels(@Nullable Input<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder setLabels(@Nullable Map<String,String> labels) {
            this.labels = Input.ofNullable(labels);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setServerTlsPolicy(@Nullable Input<String> serverTlsPolicy) {
            this.serverTlsPolicy = serverTlsPolicy;
            return this;
        }

        public Builder setServerTlsPolicy(@Nullable String serverTlsPolicy) {
            this.serverTlsPolicy = Input.ofNullable(serverTlsPolicy);
            return this;
        }

        public Builder setTrafficPortSelector(@Nullable Input<TrafficPortSelectorArgs> trafficPortSelector) {
            this.trafficPortSelector = trafficPortSelector;
            return this;
        }

        public Builder setTrafficPortSelector(@Nullable TrafficPortSelectorArgs trafficPortSelector) {
            this.trafficPortSelector = Input.ofNullable(trafficPortSelector);
            return this;
        }

        public Builder setType(Input<EndpointPolicyType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(EndpointPolicyType type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public EndpointPolicyArgs build() {
            return new EndpointPolicyArgs(authorizationPolicy, clientTlsPolicy, description, endpointMatcher, endpointPolicyId, labels, location, name, project, serverTlsPolicy, trafficPortSelector, type);
        }
    }
}
