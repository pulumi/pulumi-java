// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1alpha1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.containeranalysis_v1alpha1.outputs.ArtifactResponse;
import io.pulumi.googlenative.containeranalysis_v1alpha1.outputs.CommandResponse;
import io.pulumi.googlenative.containeranalysis_v1alpha1.outputs.SourceResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class BuildProvenanceResponse {
    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     * 
     */
    private final Map<String,String> buildOptions;
    /**
     * Version string of the builder at the time this build was executed.
     * 
     */
    private final String builderVersion;
    /**
     * Output of the build.
     * 
     */
    private final List<ArtifactResponse> builtArtifacts;
    /**
     * Commands requested by the build.
     * 
     */
    private final List<CommandResponse> commands;
    /**
     * Time at which the build was created.
     * 
     */
    private final String createTime;
    /**
     * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     * 
     */
    private final String creator;
    /**
     * Time at which execution of the build was finished.
     * 
     */
    private final String finishTime;
    /**
     * Google Cloud Storage bucket where logs were written.
     * 
     */
    private final String logsBucket;
    /**
     * ID of the project.
     * 
     */
    private final String project;
    /**
     * Details of the Source input to the build.
     * 
     */
    private final SourceResponse sourceProvenance;
    /**
     * Time at which execution of the build was started.
     * 
     */
    private final String startTime;
    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     * 
     */
    private final String triggerId;

    @OutputCustomType.Constructor
    private BuildProvenanceResponse(
        @OutputCustomType.Parameter("buildOptions") Map<String,String> buildOptions,
        @OutputCustomType.Parameter("builderVersion") String builderVersion,
        @OutputCustomType.Parameter("builtArtifacts") List<ArtifactResponse> builtArtifacts,
        @OutputCustomType.Parameter("commands") List<CommandResponse> commands,
        @OutputCustomType.Parameter("createTime") String createTime,
        @OutputCustomType.Parameter("creator") String creator,
        @OutputCustomType.Parameter("finishTime") String finishTime,
        @OutputCustomType.Parameter("logsBucket") String logsBucket,
        @OutputCustomType.Parameter("project") String project,
        @OutputCustomType.Parameter("sourceProvenance") SourceResponse sourceProvenance,
        @OutputCustomType.Parameter("startTime") String startTime,
        @OutputCustomType.Parameter("triggerId") String triggerId) {
        this.buildOptions = buildOptions;
        this.builderVersion = builderVersion;
        this.builtArtifacts = builtArtifacts;
        this.commands = commands;
        this.createTime = createTime;
        this.creator = creator;
        this.finishTime = finishTime;
        this.logsBucket = logsBucket;
        this.project = project;
        this.sourceProvenance = sourceProvenance;
        this.startTime = startTime;
        this.triggerId = triggerId;
    }

    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     * 
    */
    public Map<String,String> getBuildOptions() {
        return this.buildOptions;
    }
    /**
     * Version string of the builder at the time this build was executed.
     * 
    */
    public String getBuilderVersion() {
        return this.builderVersion;
    }
    /**
     * Output of the build.
     * 
    */
    public List<ArtifactResponse> getBuiltArtifacts() {
        return this.builtArtifacts;
    }
    /**
     * Commands requested by the build.
     * 
    */
    public List<CommandResponse> getCommands() {
        return this.commands;
    }
    /**
     * Time at which the build was created.
     * 
    */
    public String getCreateTime() {
        return this.createTime;
    }
    /**
     * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     * 
    */
    public String getCreator() {
        return this.creator;
    }
    /**
     * Time at which execution of the build was finished.
     * 
    */
    public String getFinishTime() {
        return this.finishTime;
    }
    /**
     * Google Cloud Storage bucket where logs were written.
     * 
    */
    public String getLogsBucket() {
        return this.logsBucket;
    }
    /**
     * ID of the project.
     * 
    */
    public String getProject() {
        return this.project;
    }
    /**
     * Details of the Source input to the build.
     * 
    */
    public SourceResponse getSourceProvenance() {
        return this.sourceProvenance;
    }
    /**
     * Time at which execution of the build was started.
     * 
    */
    public String getStartTime() {
        return this.startTime;
    }
    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     * 
    */
    public String getTriggerId() {
        return this.triggerId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildProvenanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> buildOptions;
        private String builderVersion;
        private List<ArtifactResponse> builtArtifacts;
        private List<CommandResponse> commands;
        private String createTime;
        private String creator;
        private String finishTime;
        private String logsBucket;
        private String project;
        private SourceResponse sourceProvenance;
        private String startTime;
        private String triggerId;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildProvenanceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildOptions = defaults.buildOptions;
    	      this.builderVersion = defaults.builderVersion;
    	      this.builtArtifacts = defaults.builtArtifacts;
    	      this.commands = defaults.commands;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.finishTime = defaults.finishTime;
    	      this.logsBucket = defaults.logsBucket;
    	      this.project = defaults.project;
    	      this.sourceProvenance = defaults.sourceProvenance;
    	      this.startTime = defaults.startTime;
    	      this.triggerId = defaults.triggerId;
        }

        public Builder buildOptions(Map<String,String> buildOptions) {
            this.buildOptions = Objects.requireNonNull(buildOptions);
            return this;
        }

        public Builder builderVersion(String builderVersion) {
            this.builderVersion = Objects.requireNonNull(builderVersion);
            return this;
        }

        public Builder builtArtifacts(List<ArtifactResponse> builtArtifacts) {
            this.builtArtifacts = Objects.requireNonNull(builtArtifacts);
            return this;
        }

        public Builder commands(List<CommandResponse> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder creator(String creator) {
            this.creator = Objects.requireNonNull(creator);
            return this;
        }

        public Builder finishTime(String finishTime) {
            this.finishTime = Objects.requireNonNull(finishTime);
            return this;
        }

        public Builder logsBucket(String logsBucket) {
            this.logsBucket = Objects.requireNonNull(logsBucket);
            return this;
        }

        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder sourceProvenance(SourceResponse sourceProvenance) {
            this.sourceProvenance = Objects.requireNonNull(sourceProvenance);
            return this;
        }

        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }

        public Builder triggerId(String triggerId) {
            this.triggerId = Objects.requireNonNull(triggerId);
            return this;
        }
        public BuildProvenanceResponse build() {
            return new BuildProvenanceResponse(buildOptions, builderVersion, builtArtifacts, commands, createTime, creator, finishTime, logsBucket, project, sourceProvenance, startTime, triggerId);
        }
    }
}
