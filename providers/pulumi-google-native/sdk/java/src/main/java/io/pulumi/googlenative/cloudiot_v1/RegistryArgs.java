// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudiot_v1;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.cloudiot_v1.enums.RegistryLogLevel;
import io.pulumi.googlenative.cloudiot_v1.inputs.EventNotificationConfigArgs;
import io.pulumi.googlenative.cloudiot_v1.inputs.HttpConfigArgs;
import io.pulumi.googlenative.cloudiot_v1.inputs.MqttConfigArgs;
import io.pulumi.googlenative.cloudiot_v1.inputs.RegistryCredentialArgs;
import io.pulumi.googlenative.cloudiot_v1.inputs.StateNotificationConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegistryArgs extends io.pulumi.resources.ResourceArgs {

    public static final RegistryArgs Empty = new RegistryArgs();

    /**
     * The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
     * 
     */
    @InputImport(name="credentials")
      private final @Nullable Input<List<RegistryCredentialArgs>> credentials;

    public Input<List<RegistryCredentialArgs>> getCredentials() {
        return this.credentials == null ? Input.empty() : this.credentials;
    }

    /**
     * The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
     * 
     */
    @InputImport(name="eventNotificationConfigs")
      private final @Nullable Input<List<EventNotificationConfigArgs>> eventNotificationConfigs;

    public Input<List<EventNotificationConfigArgs>> getEventNotificationConfigs() {
        return this.eventNotificationConfigs == null ? Input.empty() : this.eventNotificationConfigs;
    }

    /**
     * The DeviceService (HTTP) configuration for this device registry.
     * 
     */
    @InputImport(name="httpConfig")
      private final @Nullable Input<HttpConfigArgs> httpConfig;

    public Input<HttpConfigArgs> getHttpConfig() {
        return this.httpConfig == null ? Input.empty() : this.httpConfig;
    }

    /**
     * The identifier of this device registry. For example, `myRegistry`.
     * 
     */
    @InputImport(name="id")
      private final @Nullable Input<String> id;

    public Input<String> getId() {
        return this.id == null ? Input.empty() : this.id;
    }

    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
     * 
     */
    @InputImport(name="logLevel")
      private final @Nullable Input<RegistryLogLevel> logLevel;

    public Input<RegistryLogLevel> getLogLevel() {
        return this.logLevel == null ? Input.empty() : this.logLevel;
    }

    /**
     * The MQTT configuration for this device registry.
     * 
     */
    @InputImport(name="mqttConfig")
      private final @Nullable Input<MqttConfigArgs> mqttConfig;

    public Input<MqttConfigArgs> getMqttConfig() {
        return this.mqttConfig == null ? Input.empty() : this.mqttConfig;
    }

    /**
     * The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="project")
      private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    /**
     * The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn't exist, no notification will be published but the state will still be stored in Cloud IoT Core.
     * 
     */
    @InputImport(name="stateNotificationConfig")
      private final @Nullable Input<StateNotificationConfigArgs> stateNotificationConfig;

    public Input<StateNotificationConfigArgs> getStateNotificationConfig() {
        return this.stateNotificationConfig == null ? Input.empty() : this.stateNotificationConfig;
    }

    public RegistryArgs(
        @Nullable Input<List<RegistryCredentialArgs>> credentials,
        @Nullable Input<List<EventNotificationConfigArgs>> eventNotificationConfigs,
        @Nullable Input<HttpConfigArgs> httpConfig,
        @Nullable Input<String> id,
        @Nullable Input<String> location,
        @Nullable Input<RegistryLogLevel> logLevel,
        @Nullable Input<MqttConfigArgs> mqttConfig,
        @Nullable Input<String> name,
        @Nullable Input<String> project,
        @Nullable Input<StateNotificationConfigArgs> stateNotificationConfig) {
        this.credentials = credentials;
        this.eventNotificationConfigs = eventNotificationConfigs;
        this.httpConfig = httpConfig;
        this.id = id;
        this.location = location;
        this.logLevel = logLevel;
        this.mqttConfig = mqttConfig;
        this.name = name;
        this.project = project;
        this.stateNotificationConfig = stateNotificationConfig;
    }

    private RegistryArgs() {
        this.credentials = Input.empty();
        this.eventNotificationConfigs = Input.empty();
        this.httpConfig = Input.empty();
        this.id = Input.empty();
        this.location = Input.empty();
        this.logLevel = Input.empty();
        this.mqttConfig = Input.empty();
        this.name = Input.empty();
        this.project = Input.empty();
        this.stateNotificationConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<RegistryCredentialArgs>> credentials;
        private @Nullable Input<List<EventNotificationConfigArgs>> eventNotificationConfigs;
        private @Nullable Input<HttpConfigArgs> httpConfig;
        private @Nullable Input<String> id;
        private @Nullable Input<String> location;
        private @Nullable Input<RegistryLogLevel> logLevel;
        private @Nullable Input<MqttConfigArgs> mqttConfig;
        private @Nullable Input<String> name;
        private @Nullable Input<String> project;
        private @Nullable Input<StateNotificationConfigArgs> stateNotificationConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.eventNotificationConfigs = defaults.eventNotificationConfigs;
    	      this.httpConfig = defaults.httpConfig;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.logLevel = defaults.logLevel;
    	      this.mqttConfig = defaults.mqttConfig;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.stateNotificationConfig = defaults.stateNotificationConfig;
        }

        public Builder setCredentials(@Nullable Input<List<RegistryCredentialArgs>> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder setCredentials(@Nullable List<RegistryCredentialArgs> credentials) {
            this.credentials = Input.ofNullable(credentials);
            return this;
        }

        public Builder setEventNotificationConfigs(@Nullable Input<List<EventNotificationConfigArgs>> eventNotificationConfigs) {
            this.eventNotificationConfigs = eventNotificationConfigs;
            return this;
        }

        public Builder setEventNotificationConfigs(@Nullable List<EventNotificationConfigArgs> eventNotificationConfigs) {
            this.eventNotificationConfigs = Input.ofNullable(eventNotificationConfigs);
            return this;
        }

        public Builder setHttpConfig(@Nullable Input<HttpConfigArgs> httpConfig) {
            this.httpConfig = httpConfig;
            return this;
        }

        public Builder setHttpConfig(@Nullable HttpConfigArgs httpConfig) {
            this.httpConfig = Input.ofNullable(httpConfig);
            return this;
        }

        public Builder setId(@Nullable Input<String> id) {
            this.id = id;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = Input.ofNullable(id);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setLogLevel(@Nullable Input<RegistryLogLevel> logLevel) {
            this.logLevel = logLevel;
            return this;
        }

        public Builder setLogLevel(@Nullable RegistryLogLevel logLevel) {
            this.logLevel = Input.ofNullable(logLevel);
            return this;
        }

        public Builder setMqttConfig(@Nullable Input<MqttConfigArgs> mqttConfig) {
            this.mqttConfig = mqttConfig;
            return this;
        }

        public Builder setMqttConfig(@Nullable MqttConfigArgs mqttConfig) {
            this.mqttConfig = Input.ofNullable(mqttConfig);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setStateNotificationConfig(@Nullable Input<StateNotificationConfigArgs> stateNotificationConfig) {
            this.stateNotificationConfig = stateNotificationConfig;
            return this;
        }

        public Builder setStateNotificationConfig(@Nullable StateNotificationConfigArgs stateNotificationConfig) {
            this.stateNotificationConfig = Input.ofNullable(stateNotificationConfig);
            return this;
        }
        public RegistryArgs build() {
            return new RegistryArgs(credentials, eventNotificationConfigs, httpConfig, id, location, logLevel, mqttConfig, name, project, stateNotificationConfig);
        }
    }
}
