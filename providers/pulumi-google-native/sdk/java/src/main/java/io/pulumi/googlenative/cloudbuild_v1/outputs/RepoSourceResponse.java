// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class RepoSourceResponse {
    /**
     * Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    private final String branchName;
    /**
     * Explicit commit SHA to build.
     * 
     */
    private final String commitSha;
    /**
     * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
     * 
     */
    private final String dir;
    /**
     * Only trigger a build if the revision regex does NOT match the revision regex.
     * 
     */
    private final Boolean invertRegex;
    /**
     * ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
     * 
     */
    private final String project;
    /**
     * Name of the Cloud Source Repository.
     * 
     */
    private final String repoName;
    /**
     * Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
     * 
     */
    private final Map<String,String> substitutions;
    /**
     * Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
     */
    private final String tagName;

    @OutputCustomType.Constructor({"branchName","commitSha","dir","invertRegex","project","repoName","substitutions","tagName"})
    private RepoSourceResponse(
        String branchName,
        String commitSha,
        String dir,
        Boolean invertRegex,
        String project,
        String repoName,
        Map<String,String> substitutions,
        String tagName) {
        this.branchName = Objects.requireNonNull(branchName);
        this.commitSha = Objects.requireNonNull(commitSha);
        this.dir = Objects.requireNonNull(dir);
        this.invertRegex = Objects.requireNonNull(invertRegex);
        this.project = Objects.requireNonNull(project);
        this.repoName = Objects.requireNonNull(repoName);
        this.substitutions = Objects.requireNonNull(substitutions);
        this.tagName = Objects.requireNonNull(tagName);
    }

    /**
     * Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
    */
    public String getBranchName() {
        return this.branchName;
    }
    /**
     * Explicit commit SHA to build.
     * 
    */
    public String getCommitSha() {
        return this.commitSha;
    }
    /**
     * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
     * 
    */
    public String getDir() {
        return this.dir;
    }
    /**
     * Only trigger a build if the revision regex does NOT match the revision regex.
     * 
    */
    public Boolean getInvertRegex() {
        return this.invertRegex;
    }
    /**
     * ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
     * 
    */
    public String getProject() {
        return this.project;
    }
    /**
     * Name of the Cloud Source Repository.
     * 
    */
    public String getRepoName() {
        return this.repoName;
    }
    /**
     * Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
     * 
    */
    public Map<String,String> getSubstitutions() {
        return this.substitutions;
    }
    /**
     * Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     * 
    */
    public String getTagName() {
        return this.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepoSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String branchName;
        private String commitSha;
        private String dir;
        private Boolean invertRegex;
        private String project;
        private String repoName;
        private Map<String,String> substitutions;
        private String tagName;

        public Builder() {
    	      // Empty
        }

        public Builder(RepoSourceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchName = defaults.branchName;
    	      this.commitSha = defaults.commitSha;
    	      this.dir = defaults.dir;
    	      this.invertRegex = defaults.invertRegex;
    	      this.project = defaults.project;
    	      this.repoName = defaults.repoName;
    	      this.substitutions = defaults.substitutions;
    	      this.tagName = defaults.tagName;
        }

        public Builder setBranchName(String branchName) {
            this.branchName = Objects.requireNonNull(branchName);
            return this;
        }

        public Builder setCommitSha(String commitSha) {
            this.commitSha = Objects.requireNonNull(commitSha);
            return this;
        }

        public Builder setDir(String dir) {
            this.dir = Objects.requireNonNull(dir);
            return this;
        }

        public Builder setInvertRegex(Boolean invertRegex) {
            this.invertRegex = Objects.requireNonNull(invertRegex);
            return this;
        }

        public Builder setProject(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }

        public Builder setRepoName(String repoName) {
            this.repoName = Objects.requireNonNull(repoName);
            return this;
        }

        public Builder setSubstitutions(Map<String,String> substitutions) {
            this.substitutions = Objects.requireNonNull(substitutions);
            return this;
        }

        public Builder setTagName(String tagName) {
            this.tagName = Objects.requireNonNull(tagName);
            return this;
        }
        public RepoSourceResponse build() {
            return new RepoSourceResponse(branchName, commitSha, dir, invertRegex, project, repoName, substitutions, tagName);
        }
    }
}
