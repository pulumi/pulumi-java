// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.inputs.ClusteringArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.ConnectionPropertyArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetReferenceArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.EncryptionConfigurationArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.QueryParameterArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.RangePartitioningArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.TableReferenceArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.TimePartitioningArgs;
import io.pulumi.googlenative.bigquery_v2.inputs.UserDefinedFunctionResourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobConfigurationQueryArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobConfigurationQueryArgs Empty = new JobConfigurationQueryArgs();

    @InputImport(name="allowLargeResults")
    private final @Nullable Input<Boolean> allowLargeResults;

    public Input<Boolean> getAllowLargeResults() {
        return this.allowLargeResults == null ? Input.empty() : this.allowLargeResults;
    }

    @InputImport(name="clustering")
    private final @Nullable Input<ClusteringArgs> clustering;

    public Input<ClusteringArgs> getClustering() {
        return this.clustering == null ? Input.empty() : this.clustering;
    }

    @InputImport(name="connectionProperties")
    private final @Nullable Input<List<ConnectionPropertyArgs>> connectionProperties;

    public Input<List<ConnectionPropertyArgs>> getConnectionProperties() {
        return this.connectionProperties == null ? Input.empty() : this.connectionProperties;
    }

    @InputImport(name="createDisposition")
    private final @Nullable Input<String> createDisposition;

    public Input<String> getCreateDisposition() {
        return this.createDisposition == null ? Input.empty() : this.createDisposition;
    }

    @InputImport(name="createSession")
    private final @Nullable Input<Boolean> createSession;

    public Input<Boolean> getCreateSession() {
        return this.createSession == null ? Input.empty() : this.createSession;
    }

    @InputImport(name="defaultDataset")
    private final @Nullable Input<DatasetReferenceArgs> defaultDataset;

    public Input<DatasetReferenceArgs> getDefaultDataset() {
        return this.defaultDataset == null ? Input.empty() : this.defaultDataset;
    }

    @InputImport(name="destinationEncryptionConfiguration")
    private final @Nullable Input<EncryptionConfigurationArgs> destinationEncryptionConfiguration;

    public Input<EncryptionConfigurationArgs> getDestinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration == null ? Input.empty() : this.destinationEncryptionConfiguration;
    }

    @InputImport(name="destinationTable")
    private final @Nullable Input<TableReferenceArgs> destinationTable;

    public Input<TableReferenceArgs> getDestinationTable() {
        return this.destinationTable == null ? Input.empty() : this.destinationTable;
    }

    @InputImport(name="flattenResults")
    private final @Nullable Input<Boolean> flattenResults;

    public Input<Boolean> getFlattenResults() {
        return this.flattenResults == null ? Input.empty() : this.flattenResults;
    }

    @InputImport(name="maximumBillingTier")
    private final @Nullable Input<Integer> maximumBillingTier;

    public Input<Integer> getMaximumBillingTier() {
        return this.maximumBillingTier == null ? Input.empty() : this.maximumBillingTier;
    }

    @InputImport(name="maximumBytesBilled")
    private final @Nullable Input<String> maximumBytesBilled;

    public Input<String> getMaximumBytesBilled() {
        return this.maximumBytesBilled == null ? Input.empty() : this.maximumBytesBilled;
    }

    @InputImport(name="parameterMode")
    private final @Nullable Input<String> parameterMode;

    public Input<String> getParameterMode() {
        return this.parameterMode == null ? Input.empty() : this.parameterMode;
    }

    @InputImport(name="priority")
    private final @Nullable Input<String> priority;

    public Input<String> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    @InputImport(name="query")
    private final @Nullable Input<String> query;

    public Input<String> getQuery() {
        return this.query == null ? Input.empty() : this.query;
    }

    @InputImport(name="queryParameters")
    private final @Nullable Input<List<QueryParameterArgs>> queryParameters;

    public Input<List<QueryParameterArgs>> getQueryParameters() {
        return this.queryParameters == null ? Input.empty() : this.queryParameters;
    }

    @InputImport(name="rangePartitioning")
    private final @Nullable Input<RangePartitioningArgs> rangePartitioning;

    public Input<RangePartitioningArgs> getRangePartitioning() {
        return this.rangePartitioning == null ? Input.empty() : this.rangePartitioning;
    }

    @InputImport(name="schemaUpdateOptions")
    private final @Nullable Input<List<String>> schemaUpdateOptions;

    public Input<List<String>> getSchemaUpdateOptions() {
        return this.schemaUpdateOptions == null ? Input.empty() : this.schemaUpdateOptions;
    }

    @InputImport(name="tableDefinitions")
    private final @Nullable Input<Map<String,String>> tableDefinitions;

    public Input<Map<String,String>> getTableDefinitions() {
        return this.tableDefinitions == null ? Input.empty() : this.tableDefinitions;
    }

    @InputImport(name="timePartitioning")
    private final @Nullable Input<TimePartitioningArgs> timePartitioning;

    public Input<TimePartitioningArgs> getTimePartitioning() {
        return this.timePartitioning == null ? Input.empty() : this.timePartitioning;
    }

    @InputImport(name="useLegacySql")
    private final @Nullable Input<Boolean> useLegacySql;

    public Input<Boolean> getUseLegacySql() {
        return this.useLegacySql == null ? Input.empty() : this.useLegacySql;
    }

    @InputImport(name="useQueryCache")
    private final @Nullable Input<Boolean> useQueryCache;

    public Input<Boolean> getUseQueryCache() {
        return this.useQueryCache == null ? Input.empty() : this.useQueryCache;
    }

    @InputImport(name="userDefinedFunctionResources")
    private final @Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources;

    public Input<List<UserDefinedFunctionResourceArgs>> getUserDefinedFunctionResources() {
        return this.userDefinedFunctionResources == null ? Input.empty() : this.userDefinedFunctionResources;
    }

    @InputImport(name="writeDisposition")
    private final @Nullable Input<String> writeDisposition;

    public Input<String> getWriteDisposition() {
        return this.writeDisposition == null ? Input.empty() : this.writeDisposition;
    }

    public JobConfigurationQueryArgs(
        @Nullable Input<Boolean> allowLargeResults,
        @Nullable Input<ClusteringArgs> clustering,
        @Nullable Input<List<ConnectionPropertyArgs>> connectionProperties,
        @Nullable Input<String> createDisposition,
        @Nullable Input<Boolean> createSession,
        @Nullable Input<DatasetReferenceArgs> defaultDataset,
        @Nullable Input<EncryptionConfigurationArgs> destinationEncryptionConfiguration,
        @Nullable Input<TableReferenceArgs> destinationTable,
        @Nullable Input<Boolean> flattenResults,
        @Nullable Input<Integer> maximumBillingTier,
        @Nullable Input<String> maximumBytesBilled,
        @Nullable Input<String> parameterMode,
        @Nullable Input<String> priority,
        @Nullable Input<String> query,
        @Nullable Input<List<QueryParameterArgs>> queryParameters,
        @Nullable Input<RangePartitioningArgs> rangePartitioning,
        @Nullable Input<List<String>> schemaUpdateOptions,
        @Nullable Input<Map<String,String>> tableDefinitions,
        @Nullable Input<TimePartitioningArgs> timePartitioning,
        @Nullable Input<Boolean> useLegacySql,
        @Nullable Input<Boolean> useQueryCache,
        @Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources,
        @Nullable Input<String> writeDisposition) {
        this.allowLargeResults = allowLargeResults;
        this.clustering = clustering;
        this.connectionProperties = connectionProperties;
        this.createDisposition = createDisposition;
        this.createSession = createSession;
        this.defaultDataset = defaultDataset;
        this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
        this.destinationTable = destinationTable;
        this.flattenResults = flattenResults;
        this.maximumBillingTier = maximumBillingTier;
        this.maximumBytesBilled = maximumBytesBilled;
        this.parameterMode = parameterMode;
        this.priority = priority;
        this.query = query;
        this.queryParameters = queryParameters;
        this.rangePartitioning = rangePartitioning;
        this.schemaUpdateOptions = schemaUpdateOptions;
        this.tableDefinitions = tableDefinitions;
        this.timePartitioning = timePartitioning;
        this.useLegacySql = useLegacySql;
        this.useQueryCache = useQueryCache;
        this.userDefinedFunctionResources = userDefinedFunctionResources;
        this.writeDisposition = writeDisposition;
    }

    private JobConfigurationQueryArgs() {
        this.allowLargeResults = Input.empty();
        this.clustering = Input.empty();
        this.connectionProperties = Input.empty();
        this.createDisposition = Input.empty();
        this.createSession = Input.empty();
        this.defaultDataset = Input.empty();
        this.destinationEncryptionConfiguration = Input.empty();
        this.destinationTable = Input.empty();
        this.flattenResults = Input.empty();
        this.maximumBillingTier = Input.empty();
        this.maximumBytesBilled = Input.empty();
        this.parameterMode = Input.empty();
        this.priority = Input.empty();
        this.query = Input.empty();
        this.queryParameters = Input.empty();
        this.rangePartitioning = Input.empty();
        this.schemaUpdateOptions = Input.empty();
        this.tableDefinitions = Input.empty();
        this.timePartitioning = Input.empty();
        this.useLegacySql = Input.empty();
        this.useQueryCache = Input.empty();
        this.userDefinedFunctionResources = Input.empty();
        this.writeDisposition = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigurationQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowLargeResults;
        private @Nullable Input<ClusteringArgs> clustering;
        private @Nullable Input<List<ConnectionPropertyArgs>> connectionProperties;
        private @Nullable Input<String> createDisposition;
        private @Nullable Input<Boolean> createSession;
        private @Nullable Input<DatasetReferenceArgs> defaultDataset;
        private @Nullable Input<EncryptionConfigurationArgs> destinationEncryptionConfiguration;
        private @Nullable Input<TableReferenceArgs> destinationTable;
        private @Nullable Input<Boolean> flattenResults;
        private @Nullable Input<Integer> maximumBillingTier;
        private @Nullable Input<String> maximumBytesBilled;
        private @Nullable Input<String> parameterMode;
        private @Nullable Input<String> priority;
        private @Nullable Input<String> query;
        private @Nullable Input<List<QueryParameterArgs>> queryParameters;
        private @Nullable Input<RangePartitioningArgs> rangePartitioning;
        private @Nullable Input<List<String>> schemaUpdateOptions;
        private @Nullable Input<Map<String,String>> tableDefinitions;
        private @Nullable Input<TimePartitioningArgs> timePartitioning;
        private @Nullable Input<Boolean> useLegacySql;
        private @Nullable Input<Boolean> useQueryCache;
        private @Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources;
        private @Nullable Input<String> writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigurationQueryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLargeResults = defaults.allowLargeResults;
    	      this.clustering = defaults.clustering;
    	      this.connectionProperties = defaults.connectionProperties;
    	      this.createDisposition = defaults.createDisposition;
    	      this.createSession = defaults.createSession;
    	      this.defaultDataset = defaults.defaultDataset;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.flattenResults = defaults.flattenResults;
    	      this.maximumBillingTier = defaults.maximumBillingTier;
    	      this.maximumBytesBilled = defaults.maximumBytesBilled;
    	      this.parameterMode = defaults.parameterMode;
    	      this.priority = defaults.priority;
    	      this.query = defaults.query;
    	      this.queryParameters = defaults.queryParameters;
    	      this.rangePartitioning = defaults.rangePartitioning;
    	      this.schemaUpdateOptions = defaults.schemaUpdateOptions;
    	      this.tableDefinitions = defaults.tableDefinitions;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.useLegacySql = defaults.useLegacySql;
    	      this.useQueryCache = defaults.useQueryCache;
    	      this.userDefinedFunctionResources = defaults.userDefinedFunctionResources;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder setAllowLargeResults(@Nullable Input<Boolean> allowLargeResults) {
            this.allowLargeResults = allowLargeResults;
            return this;
        }

        public Builder setAllowLargeResults(@Nullable Boolean allowLargeResults) {
            this.allowLargeResults = Input.ofNullable(allowLargeResults);
            return this;
        }

        public Builder setClustering(@Nullable Input<ClusteringArgs> clustering) {
            this.clustering = clustering;
            return this;
        }

        public Builder setClustering(@Nullable ClusteringArgs clustering) {
            this.clustering = Input.ofNullable(clustering);
            return this;
        }

        public Builder setConnectionProperties(@Nullable Input<List<ConnectionPropertyArgs>> connectionProperties) {
            this.connectionProperties = connectionProperties;
            return this;
        }

        public Builder setConnectionProperties(@Nullable List<ConnectionPropertyArgs> connectionProperties) {
            this.connectionProperties = Input.ofNullable(connectionProperties);
            return this;
        }

        public Builder setCreateDisposition(@Nullable Input<String> createDisposition) {
            this.createDisposition = createDisposition;
            return this;
        }

        public Builder setCreateDisposition(@Nullable String createDisposition) {
            this.createDisposition = Input.ofNullable(createDisposition);
            return this;
        }

        public Builder setCreateSession(@Nullable Input<Boolean> createSession) {
            this.createSession = createSession;
            return this;
        }

        public Builder setCreateSession(@Nullable Boolean createSession) {
            this.createSession = Input.ofNullable(createSession);
            return this;
        }

        public Builder setDefaultDataset(@Nullable Input<DatasetReferenceArgs> defaultDataset) {
            this.defaultDataset = defaultDataset;
            return this;
        }

        public Builder setDefaultDataset(@Nullable DatasetReferenceArgs defaultDataset) {
            this.defaultDataset = Input.ofNullable(defaultDataset);
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(@Nullable Input<EncryptionConfigurationArgs> destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(@Nullable EncryptionConfigurationArgs destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Input.ofNullable(destinationEncryptionConfiguration);
            return this;
        }

        public Builder setDestinationTable(@Nullable Input<TableReferenceArgs> destinationTable) {
            this.destinationTable = destinationTable;
            return this;
        }

        public Builder setDestinationTable(@Nullable TableReferenceArgs destinationTable) {
            this.destinationTable = Input.ofNullable(destinationTable);
            return this;
        }

        public Builder setFlattenResults(@Nullable Input<Boolean> flattenResults) {
            this.flattenResults = flattenResults;
            return this;
        }

        public Builder setFlattenResults(@Nullable Boolean flattenResults) {
            this.flattenResults = Input.ofNullable(flattenResults);
            return this;
        }

        public Builder setMaximumBillingTier(@Nullable Input<Integer> maximumBillingTier) {
            this.maximumBillingTier = maximumBillingTier;
            return this;
        }

        public Builder setMaximumBillingTier(@Nullable Integer maximumBillingTier) {
            this.maximumBillingTier = Input.ofNullable(maximumBillingTier);
            return this;
        }

        public Builder setMaximumBytesBilled(@Nullable Input<String> maximumBytesBilled) {
            this.maximumBytesBilled = maximumBytesBilled;
            return this;
        }

        public Builder setMaximumBytesBilled(@Nullable String maximumBytesBilled) {
            this.maximumBytesBilled = Input.ofNullable(maximumBytesBilled);
            return this;
        }

        public Builder setParameterMode(@Nullable Input<String> parameterMode) {
            this.parameterMode = parameterMode;
            return this;
        }

        public Builder setParameterMode(@Nullable String parameterMode) {
            this.parameterMode = Input.ofNullable(parameterMode);
            return this;
        }

        public Builder setPriority(@Nullable Input<String> priority) {
            this.priority = priority;
            return this;
        }

        public Builder setPriority(@Nullable String priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder setQuery(@Nullable Input<String> query) {
            this.query = query;
            return this;
        }

        public Builder setQuery(@Nullable String query) {
            this.query = Input.ofNullable(query);
            return this;
        }

        public Builder setQueryParameters(@Nullable Input<List<QueryParameterArgs>> queryParameters) {
            this.queryParameters = queryParameters;
            return this;
        }

        public Builder setQueryParameters(@Nullable List<QueryParameterArgs> queryParameters) {
            this.queryParameters = Input.ofNullable(queryParameters);
            return this;
        }

        public Builder setRangePartitioning(@Nullable Input<RangePartitioningArgs> rangePartitioning) {
            this.rangePartitioning = rangePartitioning;
            return this;
        }

        public Builder setRangePartitioning(@Nullable RangePartitioningArgs rangePartitioning) {
            this.rangePartitioning = Input.ofNullable(rangePartitioning);
            return this;
        }

        public Builder setSchemaUpdateOptions(@Nullable Input<List<String>> schemaUpdateOptions) {
            this.schemaUpdateOptions = schemaUpdateOptions;
            return this;
        }

        public Builder setSchemaUpdateOptions(@Nullable List<String> schemaUpdateOptions) {
            this.schemaUpdateOptions = Input.ofNullable(schemaUpdateOptions);
            return this;
        }

        public Builder setTableDefinitions(@Nullable Input<Map<String,String>> tableDefinitions) {
            this.tableDefinitions = tableDefinitions;
            return this;
        }

        public Builder setTableDefinitions(@Nullable Map<String,String> tableDefinitions) {
            this.tableDefinitions = Input.ofNullable(tableDefinitions);
            return this;
        }

        public Builder setTimePartitioning(@Nullable Input<TimePartitioningArgs> timePartitioning) {
            this.timePartitioning = timePartitioning;
            return this;
        }

        public Builder setTimePartitioning(@Nullable TimePartitioningArgs timePartitioning) {
            this.timePartitioning = Input.ofNullable(timePartitioning);
            return this;
        }

        public Builder setUseLegacySql(@Nullable Input<Boolean> useLegacySql) {
            this.useLegacySql = useLegacySql;
            return this;
        }

        public Builder setUseLegacySql(@Nullable Boolean useLegacySql) {
            this.useLegacySql = Input.ofNullable(useLegacySql);
            return this;
        }

        public Builder setUseQueryCache(@Nullable Input<Boolean> useQueryCache) {
            this.useQueryCache = useQueryCache;
            return this;
        }

        public Builder setUseQueryCache(@Nullable Boolean useQueryCache) {
            this.useQueryCache = Input.ofNullable(useQueryCache);
            return this;
        }

        public Builder setUserDefinedFunctionResources(@Nullable Input<List<UserDefinedFunctionResourceArgs>> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = userDefinedFunctionResources;
            return this;
        }

        public Builder setUserDefinedFunctionResources(@Nullable List<UserDefinedFunctionResourceArgs> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = Input.ofNullable(userDefinedFunctionResources);
            return this;
        }

        public Builder setWriteDisposition(@Nullable Input<String> writeDisposition) {
            this.writeDisposition = writeDisposition;
            return this;
        }

        public Builder setWriteDisposition(@Nullable String writeDisposition) {
            this.writeDisposition = Input.ofNullable(writeDisposition);
            return this;
        }

        public JobConfigurationQueryArgs build() {
            return new JobConfigurationQueryArgs(allowLargeResults, clustering, connectionProperties, createDisposition, createSession, defaultDataset, destinationEncryptionConfiguration, destinationTable, flattenResults, maximumBillingTier, maximumBytesBilled, parameterMode, priority, query, queryParameters, rangePartitioning, schemaUpdateOptions, tableDefinitions, timePartitioning, useLegacySql, useQueryCache, userDefinedFunctionResources, writeDisposition);
        }
    }
}
