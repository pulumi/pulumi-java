// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.servicemanagement_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.servicemanagement_v1.inputs.JwtLocationResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AuthProviderResponse extends io.pulumi.resources.InvokeArgs {

    public static final AuthProviderResponse Empty = new AuthProviderResponse();

    @InputImport(name="audiences", required=true)
    private final String audiences;

    public String getAudiences() {
        return this.audiences;
    }

    @InputImport(name="authorizationUrl", required=true)
    private final String authorizationUrl;

    public String getAuthorizationUrl() {
        return this.authorizationUrl;
    }

    @InputImport(name="issuer", required=true)
    private final String issuer;

    public String getIssuer() {
        return this.issuer;
    }

    @InputImport(name="jwksUri", required=true)
    private final String jwksUri;

    public String getJwksUri() {
        return this.jwksUri;
    }

    @InputImport(name="jwtLocations", required=true)
    private final List<JwtLocationResponse> jwtLocations;

    public List<JwtLocationResponse> getJwtLocations() {
        return this.jwtLocations;
    }

    public AuthProviderResponse(
        String audiences,
        String authorizationUrl,
        String issuer,
        String jwksUri,
        List<JwtLocationResponse> jwtLocations) {
        this.audiences = Objects.requireNonNull(audiences, "expected parameter 'audiences' to be non-null");
        this.authorizationUrl = Objects.requireNonNull(authorizationUrl, "expected parameter 'authorizationUrl' to be non-null");
        this.issuer = Objects.requireNonNull(issuer, "expected parameter 'issuer' to be non-null");
        this.jwksUri = Objects.requireNonNull(jwksUri, "expected parameter 'jwksUri' to be non-null");
        this.jwtLocations = Objects.requireNonNull(jwtLocations, "expected parameter 'jwtLocations' to be non-null");
    }

    private AuthProviderResponse() {
        this.audiences = null;
        this.authorizationUrl = null;
        this.issuer = null;
        this.jwksUri = null;
        this.jwtLocations = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthProviderResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String audiences;
        private String authorizationUrl;
        private String issuer;
        private String jwksUri;
        private List<JwtLocationResponse> jwtLocations;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthProviderResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.authorizationUrl = defaults.authorizationUrl;
    	      this.issuer = defaults.issuer;
    	      this.jwksUri = defaults.jwksUri;
    	      this.jwtLocations = defaults.jwtLocations;
        }

        public Builder setAudiences(String audiences) {
            this.audiences = Objects.requireNonNull(audiences);
            return this;
        }

        public Builder setAuthorizationUrl(String authorizationUrl) {
            this.authorizationUrl = Objects.requireNonNull(authorizationUrl);
            return this;
        }

        public Builder setIssuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }

        public Builder setJwksUri(String jwksUri) {
            this.jwksUri = Objects.requireNonNull(jwksUri);
            return this;
        }

        public Builder setJwtLocations(List<JwtLocationResponse> jwtLocations) {
            this.jwtLocations = Objects.requireNonNull(jwtLocations);
            return this;
        }

        public AuthProviderResponse build() {
            return new AuthProviderResponse(audiences, authorizationUrl, issuer, jwksUri, jwtLocations);
        }
    }
}
