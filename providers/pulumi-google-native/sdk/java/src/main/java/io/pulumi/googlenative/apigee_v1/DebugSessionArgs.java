// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.apigee_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DebugSessionArgs extends io.pulumi.resources.ResourceArgs {

    public static final DebugSessionArgs Empty = new DebugSessionArgs();

    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> getApiId() {
        return this.apiId;
    }

    /**
     * Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
     * 
     */
    @Import(name="count")
      private final @Nullable Output<Integer> count;

    public Output<Integer> getCount() {
        return this.count == null ? Output.empty() : this.count;
    }

    @Import(name="environmentId", required=true)
      private final Output<String> environmentId;

    public Output<String> getEnvironmentId() {
        return this.environmentId;
    }

    /**
     * Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
     * 
     */
    @Import(name="filter")
      private final @Nullable Output<String> filter;

    public Output<String> getFilter() {
        return this.filter == null ? Output.empty() : this.filter;
    }

    /**
     * A unique ID for this DebugSession.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @Import(name="organizationId", required=true)
      private final Output<String> organizationId;

    public Output<String> getOrganizationId() {
        return this.organizationId;
    }

    @Import(name="revisionId", required=true)
      private final Output<String> revisionId;

    public Output<String> getRevisionId() {
        return this.revisionId;
    }

    /**
     * Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<String> timeout;

    public Output<String> getTimeout() {
        return this.timeout == null ? Output.empty() : this.timeout;
    }

    /**
     * Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
     * 
     */
    @Import(name="tracesize")
      private final @Nullable Output<Integer> tracesize;

    public Output<Integer> getTracesize() {
        return this.tracesize == null ? Output.empty() : this.tracesize;
    }

    /**
     * Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
     * 
     */
    @Import(name="validity")
      private final @Nullable Output<Integer> validity;

    public Output<Integer> getValidity() {
        return this.validity == null ? Output.empty() : this.validity;
    }

    public DebugSessionArgs(
        Output<String> apiId,
        @Nullable Output<Integer> count,
        Output<String> environmentId,
        @Nullable Output<String> filter,
        @Nullable Output<String> name,
        Output<String> organizationId,
        Output<String> revisionId,
        @Nullable Output<String> timeout,
        @Nullable Output<Integer> tracesize,
        @Nullable Output<Integer> validity) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.count = count;
        this.environmentId = Objects.requireNonNull(environmentId, "expected parameter 'environmentId' to be non-null");
        this.filter = filter;
        this.name = name;
        this.organizationId = Objects.requireNonNull(organizationId, "expected parameter 'organizationId' to be non-null");
        this.revisionId = Objects.requireNonNull(revisionId, "expected parameter 'revisionId' to be non-null");
        this.timeout = timeout;
        this.tracesize = tracesize;
        this.validity = validity;
    }

    private DebugSessionArgs() {
        this.apiId = Output.empty();
        this.count = Output.empty();
        this.environmentId = Output.empty();
        this.filter = Output.empty();
        this.name = Output.empty();
        this.organizationId = Output.empty();
        this.revisionId = Output.empty();
        this.timeout = Output.empty();
        this.tracesize = Output.empty();
        this.validity = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DebugSessionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> apiId;
        private @Nullable Output<Integer> count;
        private Output<String> environmentId;
        private @Nullable Output<String> filter;
        private @Nullable Output<String> name;
        private Output<String> organizationId;
        private Output<String> revisionId;
        private @Nullable Output<String> timeout;
        private @Nullable Output<Integer> tracesize;
        private @Nullable Output<Integer> validity;

        public Builder() {
    	      // Empty
        }

        public Builder(DebugSessionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.count = defaults.count;
    	      this.environmentId = defaults.environmentId;
    	      this.filter = defaults.filter;
    	      this.name = defaults.name;
    	      this.organizationId = defaults.organizationId;
    	      this.revisionId = defaults.revisionId;
    	      this.timeout = defaults.timeout;
    	      this.tracesize = defaults.tracesize;
    	      this.validity = defaults.validity;
        }

        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }

        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }

        public Builder count(@Nullable Output<Integer> count) {
            this.count = count;
            return this;
        }

        public Builder count(@Nullable Integer count) {
            this.count = Output.ofNullable(count);
            return this;
        }

        public Builder environmentId(Output<String> environmentId) {
            this.environmentId = Objects.requireNonNull(environmentId);
            return this;
        }

        public Builder environmentId(String environmentId) {
            this.environmentId = Output.of(Objects.requireNonNull(environmentId));
            return this;
        }

        public Builder filter(@Nullable Output<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder filter(@Nullable String filter) {
            this.filter = Output.ofNullable(filter);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder organizationId(Output<String> organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Output.of(Objects.requireNonNull(organizationId));
            return this;
        }

        public Builder revisionId(Output<String> revisionId) {
            this.revisionId = Objects.requireNonNull(revisionId);
            return this;
        }

        public Builder revisionId(String revisionId) {
            this.revisionId = Output.of(Objects.requireNonNull(revisionId));
            return this;
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(@Nullable String timeout) {
            this.timeout = Output.ofNullable(timeout);
            return this;
        }

        public Builder tracesize(@Nullable Output<Integer> tracesize) {
            this.tracesize = tracesize;
            return this;
        }

        public Builder tracesize(@Nullable Integer tracesize) {
            this.tracesize = Output.ofNullable(tracesize);
            return this;
        }

        public Builder validity(@Nullable Output<Integer> validity) {
            this.validity = validity;
            return this;
        }

        public Builder validity(@Nullable Integer validity) {
            this.validity = Output.ofNullable(validity);
            return this;
        }
        public DebugSessionArgs build() {
            return new DebugSessionArgs(apiId, count, environmentId, filter, name, organizationId, revisionId, timeout, tracesize, validity);
        }
    }
}
