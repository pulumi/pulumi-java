// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.spanner_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.spanner_v1.outputs.EncryptionConfigResponse;
import io.pulumi.googlenative.spanner_v1.outputs.EncryptionInfoResponse;
import io.pulumi.googlenative.spanner_v1.outputs.RestoreInfoResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetDatabaseResult {
    private final String createTime;
    private final String databaseDialect;
    private final String defaultLeader;
    private final String earliestVersionTime;
    private final EncryptionConfigResponse encryptionConfig;
    private final List<EncryptionInfoResponse> encryptionInfo;
    private final String name;
    private final RestoreInfoResponse restoreInfo;
    private final String state;
    private final String versionRetentionPeriod;

    @OutputCustomType.Constructor({"createTime","databaseDialect","defaultLeader","earliestVersionTime","encryptionConfig","encryptionInfo","name","restoreInfo","state","versionRetentionPeriod"})
    private GetDatabaseResult(
        String createTime,
        String databaseDialect,
        String defaultLeader,
        String earliestVersionTime,
        EncryptionConfigResponse encryptionConfig,
        List<EncryptionInfoResponse> encryptionInfo,
        String name,
        RestoreInfoResponse restoreInfo,
        String state,
        String versionRetentionPeriod) {
        this.createTime = Objects.requireNonNull(createTime);
        this.databaseDialect = Objects.requireNonNull(databaseDialect);
        this.defaultLeader = Objects.requireNonNull(defaultLeader);
        this.earliestVersionTime = Objects.requireNonNull(earliestVersionTime);
        this.encryptionConfig = Objects.requireNonNull(encryptionConfig);
        this.encryptionInfo = Objects.requireNonNull(encryptionInfo);
        this.name = Objects.requireNonNull(name);
        this.restoreInfo = Objects.requireNonNull(restoreInfo);
        this.state = Objects.requireNonNull(state);
        this.versionRetentionPeriod = Objects.requireNonNull(versionRetentionPeriod);
    }

    public String getCreateTime() {
        return this.createTime;
    }
    public String getDatabaseDialect() {
        return this.databaseDialect;
    }
    public String getDefaultLeader() {
        return this.defaultLeader;
    }
    public String getEarliestVersionTime() {
        return this.earliestVersionTime;
    }
    public EncryptionConfigResponse getEncryptionConfig() {
        return this.encryptionConfig;
    }
    public List<EncryptionInfoResponse> getEncryptionInfo() {
        return this.encryptionInfo;
    }
    public String getName() {
        return this.name;
    }
    public RestoreInfoResponse getRestoreInfo() {
        return this.restoreInfo;
    }
    public String getState() {
        return this.state;
    }
    public String getVersionRetentionPeriod() {
        return this.versionRetentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String databaseDialect;
        private String defaultLeader;
        private String earliestVersionTime;
        private EncryptionConfigResponse encryptionConfig;
        private List<EncryptionInfoResponse> encryptionInfo;
        private String name;
        private RestoreInfoResponse restoreInfo;
        private String state;
        private String versionRetentionPeriod;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.databaseDialect = defaults.databaseDialect;
    	      this.defaultLeader = defaults.defaultLeader;
    	      this.earliestVersionTime = defaults.earliestVersionTime;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.encryptionInfo = defaults.encryptionInfo;
    	      this.name = defaults.name;
    	      this.restoreInfo = defaults.restoreInfo;
    	      this.state = defaults.state;
    	      this.versionRetentionPeriod = defaults.versionRetentionPeriod;
        }

        public Builder setCreateTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }

        public Builder setDatabaseDialect(String databaseDialect) {
            this.databaseDialect = Objects.requireNonNull(databaseDialect);
            return this;
        }

        public Builder setDefaultLeader(String defaultLeader) {
            this.defaultLeader = Objects.requireNonNull(defaultLeader);
            return this;
        }

        public Builder setEarliestVersionTime(String earliestVersionTime) {
            this.earliestVersionTime = Objects.requireNonNull(earliestVersionTime);
            return this;
        }

        public Builder setEncryptionConfig(EncryptionConfigResponse encryptionConfig) {
            this.encryptionConfig = Objects.requireNonNull(encryptionConfig);
            return this;
        }

        public Builder setEncryptionInfo(List<EncryptionInfoResponse> encryptionInfo) {
            this.encryptionInfo = Objects.requireNonNull(encryptionInfo);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setRestoreInfo(RestoreInfoResponse restoreInfo) {
            this.restoreInfo = Objects.requireNonNull(restoreInfo);
            return this;
        }

        public Builder setState(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public Builder setVersionRetentionPeriod(String versionRetentionPeriod) {
            this.versionRetentionPeriod = Objects.requireNonNull(versionRetentionPeriod);
            return this;
        }

        public GetDatabaseResult build() {
            return new GetDatabaseResult(createTime, databaseDialect, defaultLeader, earliestVersionTime, encryptionConfig, encryptionInfo, name, restoreInfo, state, versionRetentionPeriod);
        }
    }
}
