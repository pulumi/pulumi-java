// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.pubsub_v1beta1a;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.pubsub_v1beta1a.inputs.PushConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * For either push or pull delivery, the value is the maximum time after a subscriber receives a message before the subscriber should acknowledge or Nack the message. If the Ack deadline for a message passes without an Ack or a Nack, the Pub/Sub system will eventually redeliver the message. If a subscriber acknowledges after the deadline, the Pub/Sub system may accept the Ack, but it is possible that the message has been already delivered again. Multiple Acks to the message are allowed and will succeed. For push delivery, this value is used to set the request timeout for the call to the push endpoint. For pull delivery, this value is used as the initial value for the Ack deadline. It may be overridden for each message using its corresponding ack_id with ModifyAckDeadline. While a message is outstanding (i.e. it has been delivered to a pull subscriber and the subscriber has not yet Acked or Nacked), the Pub/Sub system will not deliver that message to another pull subscriber (on a best-effort basis).
     * 
     */
    @Import(name="ackDeadlineSeconds")
      private final @Nullable Output<Integer> ackDeadlineSeconds;

    public Output<Integer> getAckDeadlineSeconds() {
        return this.ackDeadlineSeconds == null ? Codegen.empty() : this.ackDeadlineSeconds;
    }

    /**
     * Name of the subscription.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * If push delivery is used with this subscription, this field is used to configure it.
     * 
     */
    @Import(name="pushConfig")
      private final @Nullable Output<PushConfigArgs> pushConfig;

    public Output<PushConfigArgs> getPushConfig() {
        return this.pushConfig == null ? Codegen.empty() : this.pushConfig;
    }

    /**
     * The name of the topic from which this subscription is receiving messages.
     * 
     */
    @Import(name="topic")
      private final @Nullable Output<String> topic;

    public Output<String> getTopic() {
        return this.topic == null ? Codegen.empty() : this.topic;
    }

    public SubscriptionArgs(
        @Nullable Output<Integer> ackDeadlineSeconds,
        @Nullable Output<String> name,
        @Nullable Output<PushConfigArgs> pushConfig,
        @Nullable Output<String> topic) {
        this.ackDeadlineSeconds = ackDeadlineSeconds;
        this.name = name;
        this.pushConfig = pushConfig;
        this.topic = topic;
    }

    private SubscriptionArgs() {
        this.ackDeadlineSeconds = Codegen.empty();
        this.name = Codegen.empty();
        this.pushConfig = Codegen.empty();
        this.topic = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> ackDeadlineSeconds;
        private @Nullable Output<String> name;
        private @Nullable Output<PushConfigArgs> pushConfig;
        private @Nullable Output<String> topic;

        public Builder() {
    	      // Empty
        }

        public Builder(SubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackDeadlineSeconds = defaults.ackDeadlineSeconds;
    	      this.name = defaults.name;
    	      this.pushConfig = defaults.pushConfig;
    	      this.topic = defaults.topic;
        }

        public Builder ackDeadlineSeconds(@Nullable Output<Integer> ackDeadlineSeconds) {
            this.ackDeadlineSeconds = ackDeadlineSeconds;
            return this;
        }
        public Builder ackDeadlineSeconds(@Nullable Integer ackDeadlineSeconds) {
            this.ackDeadlineSeconds = Codegen.ofNullable(ackDeadlineSeconds);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder pushConfig(@Nullable Output<PushConfigArgs> pushConfig) {
            this.pushConfig = pushConfig;
            return this;
        }
        public Builder pushConfig(@Nullable PushConfigArgs pushConfig) {
            this.pushConfig = Codegen.ofNullable(pushConfig);
            return this;
        }
        public Builder topic(@Nullable Output<String> topic) {
            this.topic = topic;
            return this;
        }
        public Builder topic(@Nullable String topic) {
            this.topic = Codegen.ofNullable(topic);
            return this;
        }        public SubscriptionArgs build() {
            return new SubscriptionArgs(ackDeadlineSeconds, name, pushConfig, topic);
        }
    }
}
