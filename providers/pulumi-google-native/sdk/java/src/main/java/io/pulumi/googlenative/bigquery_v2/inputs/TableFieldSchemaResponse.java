// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.bigquery_v2.inputs.TableFieldSchemaCategoriesResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.TableFieldSchemaPolicyTagsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class TableFieldSchemaResponse extends io.pulumi.resources.InvokeArgs {

    public static final TableFieldSchemaResponse Empty = new TableFieldSchemaResponse();

    /**
     * [Optional] The categories attached to this field, used for field-level access control.
     * 
     */
    @Import(name="categories", required=true)
      private final TableFieldSchemaCategoriesResponse categories;

    public TableFieldSchemaCategoriesResponse categories() {
        return this.categories;
    }

    /**
     * Optional. Collation specification of the field. It only can be set on string type field.
     * 
     */
    @Import(name="collationSpec", required=true)
      private final String collationSpec;

    public String collationSpec() {
        return this.collationSpec;
    }

    /**
     * [Optional] The field description. The maximum length is 1,024 characters.
     * 
     */
    @Import(name="description", required=true)
      private final String description;

    public String description() {
        return this.description;
    }

    /**
     * [Optional] Describes the nested schema fields if the type property is set to RECORD.
     * 
     */
    @Import(name="fields", required=true)
      private final List<TableFieldSchemaResponse> fields;

    public List<TableFieldSchemaResponse> fields() {
        return this.fields;
    }

    /**
     * [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
     * 
     */
    @Import(name="maxLength", required=true)
      private final String maxLength;

    public String maxLength() {
        return this.maxLength;
    }

    /**
     * [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
     * 
     */
    @Import(name="mode", required=true)
      private final String mode;

    public String mode() {
        return this.mode;
    }

    /**
     * [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    @Import(name="policyTags", required=true)
      private final TableFieldSchemaPolicyTagsResponse policyTags;

    public TableFieldSchemaPolicyTagsResponse policyTags() {
        return this.policyTags;
    }

    /**
     * [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
     * 
     */
    @Import(name="precision", required=true)
      private final String precision;

    public String precision() {
        return this.precision;
    }

    /**
     * [Optional] See documentation for precision.
     * 
     */
    @Import(name="scale", required=true)
      private final String scale;

    public String scale() {
        return this.scale;
    }

    /**
     * [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public TableFieldSchemaResponse(
        TableFieldSchemaCategoriesResponse categories,
        String collationSpec,
        String description,
        List<TableFieldSchemaResponse> fields,
        String maxLength,
        String mode,
        String name,
        TableFieldSchemaPolicyTagsResponse policyTags,
        String precision,
        String scale,
        String type) {
        this.categories = Objects.requireNonNull(categories, "expected parameter 'categories' to be non-null");
        this.collationSpec = Objects.requireNonNull(collationSpec, "expected parameter 'collationSpec' to be non-null");
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.fields = Objects.requireNonNull(fields, "expected parameter 'fields' to be non-null");
        this.maxLength = Objects.requireNonNull(maxLength, "expected parameter 'maxLength' to be non-null");
        this.mode = Objects.requireNonNull(mode, "expected parameter 'mode' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policyTags = Objects.requireNonNull(policyTags, "expected parameter 'policyTags' to be non-null");
        this.precision = Objects.requireNonNull(precision, "expected parameter 'precision' to be non-null");
        this.scale = Objects.requireNonNull(scale, "expected parameter 'scale' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private TableFieldSchemaResponse() {
        this.categories = null;
        this.collationSpec = null;
        this.description = null;
        this.fields = List.of();
        this.maxLength = null;
        this.mode = null;
        this.name = null;
        this.policyTags = null;
        this.precision = null;
        this.scale = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableFieldSchemaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableFieldSchemaCategoriesResponse categories;
        private String collationSpec;
        private String description;
        private List<TableFieldSchemaResponse> fields;
        private String maxLength;
        private String mode;
        private String name;
        private TableFieldSchemaPolicyTagsResponse policyTags;
        private String precision;
        private String scale;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(TableFieldSchemaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.collationSpec = defaults.collationSpec;
    	      this.description = defaults.description;
    	      this.fields = defaults.fields;
    	      this.maxLength = defaults.maxLength;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.policyTags = defaults.policyTags;
    	      this.precision = defaults.precision;
    	      this.scale = defaults.scale;
    	      this.type = defaults.type;
        }

        public Builder categories(TableFieldSchemaCategoriesResponse categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }
        public Builder collationSpec(String collationSpec) {
            this.collationSpec = Objects.requireNonNull(collationSpec);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder fields(List<TableFieldSchemaResponse> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(TableFieldSchemaResponse... fields) {
            return fields(List.of(fields));
        }
        public Builder maxLength(String maxLength) {
            this.maxLength = Objects.requireNonNull(maxLength);
            return this;
        }
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder policyTags(TableFieldSchemaPolicyTagsResponse policyTags) {
            this.policyTags = Objects.requireNonNull(policyTags);
            return this;
        }
        public Builder precision(String precision) {
            this.precision = Objects.requireNonNull(precision);
            return this;
        }
        public Builder scale(String scale) {
            this.scale = Objects.requireNonNull(scale);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public TableFieldSchemaResponse build() {
            return new TableFieldSchemaResponse(categories, collationSpec, description, fields, maxLength, mode, name, policyTags, precision, scale, type);
        }
    }
}
