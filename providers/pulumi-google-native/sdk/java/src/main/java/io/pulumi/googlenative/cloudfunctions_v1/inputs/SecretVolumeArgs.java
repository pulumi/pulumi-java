// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudfunctions_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.cloudfunctions_v1.inputs.SecretVersionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretVolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecretVolumeArgs Empty = new SecretVolumeArgs();

    @InputImport(name="mountPath")
    private final @Nullable Input<String> mountPath;

    public Input<String> getMountPath() {
        return this.mountPath == null ? Input.empty() : this.mountPath;
    }

    @InputImport(name="project")
    private final @Nullable Input<String> project;

    public Input<String> getProject() {
        return this.project == null ? Input.empty() : this.project;
    }

    @InputImport(name="secret")
    private final @Nullable Input<String> secret;

    public Input<String> getSecret() {
        return this.secret == null ? Input.empty() : this.secret;
    }

    @InputImport(name="versions")
    private final @Nullable Input<List<SecretVersionArgs>> versions;

    public Input<List<SecretVersionArgs>> getVersions() {
        return this.versions == null ? Input.empty() : this.versions;
    }

    public SecretVolumeArgs(
        @Nullable Input<String> mountPath,
        @Nullable Input<String> project,
        @Nullable Input<String> secret,
        @Nullable Input<List<SecretVersionArgs>> versions) {
        this.mountPath = mountPath;
        this.project = project;
        this.secret = secret;
        this.versions = versions;
    }

    private SecretVolumeArgs() {
        this.mountPath = Input.empty();
        this.project = Input.empty();
        this.secret = Input.empty();
        this.versions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> mountPath;
        private @Nullable Input<String> project;
        private @Nullable Input<String> secret;
        private @Nullable Input<List<SecretVersionArgs>> versions;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretVolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountPath = defaults.mountPath;
    	      this.project = defaults.project;
    	      this.secret = defaults.secret;
    	      this.versions = defaults.versions;
        }

        public Builder setMountPath(@Nullable Input<String> mountPath) {
            this.mountPath = mountPath;
            return this;
        }

        public Builder setMountPath(@Nullable String mountPath) {
            this.mountPath = Input.ofNullable(mountPath);
            return this;
        }

        public Builder setProject(@Nullable Input<String> project) {
            this.project = project;
            return this;
        }

        public Builder setProject(@Nullable String project) {
            this.project = Input.ofNullable(project);
            return this;
        }

        public Builder setSecret(@Nullable Input<String> secret) {
            this.secret = secret;
            return this;
        }

        public Builder setSecret(@Nullable String secret) {
            this.secret = Input.ofNullable(secret);
            return this;
        }

        public Builder setVersions(@Nullable Input<List<SecretVersionArgs>> versions) {
            this.versions = versions;
            return this;
        }

        public Builder setVersions(@Nullable List<SecretVersionArgs> versions) {
            this.versions = Input.ofNullable(versions);
            return this;
        }

        public SecretVolumeArgs build() {
            return new SecretVolumeArgs(mountPath, project, secret, versions);
        }
    }
}
