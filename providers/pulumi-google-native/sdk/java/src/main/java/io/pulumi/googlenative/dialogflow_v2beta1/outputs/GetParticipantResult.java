// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.dialogflow_v2beta1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetParticipantResult {
    /**
     * Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ```documents_metadata_filters { key: "market" value: "US,CA" } documents_metadata_filters { key: "user" value: "agent" }```
     * 
     */
    private final Map<String,String> documentsMetadataFilters;
    /**
     * Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
     * 
     */
    private final String name;
    /**
     * Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
     * 
     */
    private final String obfuscatedExternalUserId;
    /**
     * Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
     * 
     */
    private final String role;

    @OutputCustomType.Constructor({"documentsMetadataFilters","name","obfuscatedExternalUserId","role"})
    private GetParticipantResult(
        Map<String,String> documentsMetadataFilters,
        String name,
        String obfuscatedExternalUserId,
        String role) {
        this.documentsMetadataFilters = Objects.requireNonNull(documentsMetadataFilters);
        this.name = Objects.requireNonNull(name);
        this.obfuscatedExternalUserId = Objects.requireNonNull(obfuscatedExternalUserId);
        this.role = Objects.requireNonNull(role);
    }

    /**
     * Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ```documents_metadata_filters { key: "market" value: "US,CA" } documents_metadata_filters { key: "user" value: "agent" }```
     * 
     */
    public Map<String,String> getDocumentsMetadataFilters() {
        return this.documentsMetadataFilters;
    }
    /**
     * Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
     * 
     */
    public String getObfuscatedExternalUserId() {
        return this.obfuscatedExternalUserId;
    }
    /**
     * Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
     * 
     */
    public String getRole() {
        return this.role;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetParticipantResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> documentsMetadataFilters;
        private String name;
        private String obfuscatedExternalUserId;
        private String role;

        public Builder() {
    	      // Empty
        }

        public Builder(GetParticipantResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.documentsMetadataFilters = defaults.documentsMetadataFilters;
    	      this.name = defaults.name;
    	      this.obfuscatedExternalUserId = defaults.obfuscatedExternalUserId;
    	      this.role = defaults.role;
        }

        public Builder setDocumentsMetadataFilters(Map<String,String> documentsMetadataFilters) {
            this.documentsMetadataFilters = Objects.requireNonNull(documentsMetadataFilters);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setObfuscatedExternalUserId(String obfuscatedExternalUserId) {
            this.obfuscatedExternalUserId = Objects.requireNonNull(obfuscatedExternalUserId);
            return this;
        }

        public Builder setRole(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public GetParticipantResult build() {
            return new GetParticipantResult(documentsMetadataFilters, name, obfuscatedExternalUserId, role);
        }
    }
}
