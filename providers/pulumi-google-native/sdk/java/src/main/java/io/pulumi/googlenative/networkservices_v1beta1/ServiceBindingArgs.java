// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.networkservices_v1beta1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceBindingArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceBindingArgs Empty = new ServiceBindingArgs();

    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Optional. The endpoint filter associated with the Service Binding. The syntax is described in http://cloud/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#google.cloud.servicedirectory.v1.ResolveServiceRequest
     * 
     */
    @Import(name="endpointFilter")
      private final @Nullable Output<String> endpointFilter;

    public Output<String> endpointFilter() {
        return this.endpointFilter == null ? Codegen.empty() : this.endpointFilter;
    }

    /**
     * Optional. Set of label tags associated with the ServiceBinding resource.
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Name of the ServiceBinding resource. It matches pattern `projects/*{@literal /}locations/global/serviceBindings/service_binding_name>`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="project")
      private final @Nullable Output<String> project;

    public Output<String> project() {
        return this.project == null ? Codegen.empty() : this.project;
    }

    /**
     * The full service directory service name of the format /projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*
     * 
     */
    @Import(name="service", required=true)
      private final Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    @Import(name="serviceBindingId", required=true)
      private final Output<String> serviceBindingId;

    public Output<String> serviceBindingId() {
        return this.serviceBindingId;
    }

    public ServiceBindingArgs(
        @Nullable Output<String> description,
        @Nullable Output<String> endpointFilter,
        @Nullable Output<Map<String,String>> labels,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> project,
        Output<String> service,
        Output<String> serviceBindingId) {
        this.description = description;
        this.endpointFilter = endpointFilter;
        this.labels = labels;
        this.location = location;
        this.name = name;
        this.project = project;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.serviceBindingId = Objects.requireNonNull(serviceBindingId, "expected parameter 'serviceBindingId' to be non-null");
    }

    private ServiceBindingArgs() {
        this.description = Codegen.empty();
        this.endpointFilter = Codegen.empty();
        this.labels = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.project = Codegen.empty();
        this.service = Codegen.empty();
        this.serviceBindingId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private @Nullable Output<String> endpointFilter;
        private @Nullable Output<Map<String,String>> labels;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> project;
        private Output<String> service;
        private Output<String> serviceBindingId;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceBindingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.endpointFilter = defaults.endpointFilter;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.service = defaults.service;
    	      this.serviceBindingId = defaults.serviceBindingId;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder endpointFilter(@Nullable Output<String> endpointFilter) {
            this.endpointFilter = endpointFilter;
            return this;
        }
        public Builder endpointFilter(@Nullable String endpointFilter) {
            this.endpointFilter = Codegen.ofNullable(endpointFilter);
            return this;
        }
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = Codegen.ofNullable(project);
            return this;
        }
        public Builder service(Output<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public Builder service(String service) {
            this.service = Output.of(Objects.requireNonNull(service));
            return this;
        }
        public Builder serviceBindingId(Output<String> serviceBindingId) {
            this.serviceBindingId = Objects.requireNonNull(serviceBindingId);
            return this;
        }
        public Builder serviceBindingId(String serviceBindingId) {
            this.serviceBindingId = Output.of(Objects.requireNonNull(serviceBindingId));
            return this;
        }        public ServiceBindingArgs build() {
            return new ServiceBindingArgs(description, endpointFilter, labels, location, name, project, service, serviceBindingId);
        }
    }
}
