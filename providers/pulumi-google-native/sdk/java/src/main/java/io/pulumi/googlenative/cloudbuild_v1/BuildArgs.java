// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudbuild_v1;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.cloudbuild_v1.inputs.ArtifactsArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.BuildOptionsArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.BuildStepArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.SecretArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.SecretsArgs;
import io.pulumi.googlenative.cloudbuild_v1.inputs.SourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BuildArgs extends io.pulumi.resources.ResourceArgs {

    public static final BuildArgs Empty = new BuildArgs();

    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     * 
     */
    @InputImport(name="artifacts")
      private final @Nullable Output<ArtifactsArgs> artifacts;

    public Output<ArtifactsArgs> getArtifacts() {
        return this.artifacts == null ? Output.empty() : this.artifacts;
    }

    /**
     * Secrets and secret environment variables.
     * 
     */
    @InputImport(name="availableSecrets")
      private final @Nullable Output<SecretsArgs> availableSecrets;

    public Output<SecretsArgs> getAvailableSecrets() {
        return this.availableSecrets == null ? Output.empty() : this.availableSecrets;
    }

    /**
     * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
     * 
     */
    @InputImport(name="images")
      private final @Nullable Output<List<String>> images;

    public Output<List<String>> getImages() {
        return this.images == null ? Output.empty() : this.images;
    }

    @InputImport(name="location")
      private final @Nullable Output<String> location;

    public Output<String> getLocation() {
        return this.location == null ? Output.empty() : this.location;
    }

    /**
     * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
     * 
     */
    @InputImport(name="logsBucket")
      private final @Nullable Output<String> logsBucket;

    public Output<String> getLogsBucket() {
        return this.logsBucket == null ? Output.empty() : this.logsBucket;
    }

    /**
     * Special options for this build.
     * 
     */
    @InputImport(name="options")
      private final @Nullable Output<BuildOptionsArgs> options;

    public Output<BuildOptionsArgs> getOptions() {
        return this.options == null ? Output.empty() : this.options;
    }

    @InputImport(name="project")
      private final @Nullable Output<String> project;

    public Output<String> getProject() {
        return this.project == null ? Output.empty() : this.project;
    }

    @InputImport(name="projectId", required=true)
      private final Output<String> projectId;

    public Output<String> getProjectId() {
        return this.projectId;
    }

    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
     * 
     */
    @InputImport(name="queueTtl")
      private final @Nullable Output<String> queueTtl;

    public Output<String> getQueueTtl() {
        return this.queueTtl == null ? Output.empty() : this.queueTtl;
    }

    /**
     * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
     * 
     */
    @InputImport(name="secrets")
      private final @Nullable Output<List<SecretArgs>> secrets;

    public Output<List<SecretArgs>> getSecrets() {
        return this.secrets == null ? Output.empty() : this.secrets;
    }

    /**
     * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
     * 
     */
    @InputImport(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount == null ? Output.empty() : this.serviceAccount;
    }

    /**
     * The location of the source files to build.
     * 
     */
    @InputImport(name="source")
      private final @Nullable Output<SourceArgs> source;

    public Output<SourceArgs> getSource() {
        return this.source == null ? Output.empty() : this.source;
    }

    /**
     * The operations to be performed on the workspace.
     * 
     */
    @InputImport(name="steps", required=true)
      private final Output<List<BuildStepArgs>> steps;

    public Output<List<BuildStepArgs>> getSteps() {
        return this.steps;
    }

    /**
     * Substitutions data for `Build` resource.
     * 
     */
    @InputImport(name="substitutions")
      private final @Nullable Output<Map<String,String>> substitutions;

    public Output<Map<String,String>> getSubstitutions() {
        return this.substitutions == null ? Output.empty() : this.substitutions;
    }

    /**
     * Tags for annotation of a `Build`. These are not docker tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<List<String>> tags;

    public Output<List<String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
     * 
     */
    @InputImport(name="timeout")
      private final @Nullable Output<String> timeout;

    public Output<String> getTimeout() {
        return this.timeout == null ? Output.empty() : this.timeout;
    }

    public BuildArgs(
        @Nullable Output<ArtifactsArgs> artifacts,
        @Nullable Output<SecretsArgs> availableSecrets,
        @Nullable Output<List<String>> images,
        @Nullable Output<String> location,
        @Nullable Output<String> logsBucket,
        @Nullable Output<BuildOptionsArgs> options,
        @Nullable Output<String> project,
        Output<String> projectId,
        @Nullable Output<String> queueTtl,
        @Nullable Output<List<SecretArgs>> secrets,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<SourceArgs> source,
        Output<List<BuildStepArgs>> steps,
        @Nullable Output<Map<String,String>> substitutions,
        @Nullable Output<List<String>> tags,
        @Nullable Output<String> timeout) {
        this.artifacts = artifacts;
        this.availableSecrets = availableSecrets;
        this.images = images;
        this.location = location;
        this.logsBucket = logsBucket;
        this.options = options;
        this.project = project;
        this.projectId = Objects.requireNonNull(projectId, "expected parameter 'projectId' to be non-null");
        this.queueTtl = queueTtl;
        this.secrets = secrets;
        this.serviceAccount = serviceAccount;
        this.source = source;
        this.steps = Objects.requireNonNull(steps, "expected parameter 'steps' to be non-null");
        this.substitutions = substitutions;
        this.tags = tags;
        this.timeout = timeout;
    }

    private BuildArgs() {
        this.artifacts = Output.empty();
        this.availableSecrets = Output.empty();
        this.images = Output.empty();
        this.location = Output.empty();
        this.logsBucket = Output.empty();
        this.options = Output.empty();
        this.project = Output.empty();
        this.projectId = Output.empty();
        this.queueTtl = Output.empty();
        this.secrets = Output.empty();
        this.serviceAccount = Output.empty();
        this.source = Output.empty();
        this.steps = Output.empty();
        this.substitutions = Output.empty();
        this.tags = Output.empty();
        this.timeout = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ArtifactsArgs> artifacts;
        private @Nullable Output<SecretsArgs> availableSecrets;
        private @Nullable Output<List<String>> images;
        private @Nullable Output<String> location;
        private @Nullable Output<String> logsBucket;
        private @Nullable Output<BuildOptionsArgs> options;
        private @Nullable Output<String> project;
        private Output<String> projectId;
        private @Nullable Output<String> queueTtl;
        private @Nullable Output<List<SecretArgs>> secrets;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<SourceArgs> source;
        private Output<List<BuildStepArgs>> steps;
        private @Nullable Output<Map<String,String>> substitutions;
        private @Nullable Output<List<String>> tags;
        private @Nullable Output<String> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.availableSecrets = defaults.availableSecrets;
    	      this.images = defaults.images;
    	      this.location = defaults.location;
    	      this.logsBucket = defaults.logsBucket;
    	      this.options = defaults.options;
    	      this.project = defaults.project;
    	      this.projectId = defaults.projectId;
    	      this.queueTtl = defaults.queueTtl;
    	      this.secrets = defaults.secrets;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.source = defaults.source;
    	      this.steps = defaults.steps;
    	      this.substitutions = defaults.substitutions;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
        }

        public Builder artifacts(@Nullable Output<ArtifactsArgs> artifacts) {
            this.artifacts = artifacts;
            return this;
        }

        public Builder artifacts(@Nullable ArtifactsArgs artifacts) {
            this.artifacts = Output.ofNullable(artifacts);
            return this;
        }

        public Builder availableSecrets(@Nullable Output<SecretsArgs> availableSecrets) {
            this.availableSecrets = availableSecrets;
            return this;
        }

        public Builder availableSecrets(@Nullable SecretsArgs availableSecrets) {
            this.availableSecrets = Output.ofNullable(availableSecrets);
            return this;
        }

        public Builder images(@Nullable Output<List<String>> images) {
            this.images = images;
            return this;
        }

        public Builder images(@Nullable List<String> images) {
            this.images = Output.ofNullable(images);
            return this;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = Output.ofNullable(location);
            return this;
        }

        public Builder logsBucket(@Nullable Output<String> logsBucket) {
            this.logsBucket = logsBucket;
            return this;
        }

        public Builder logsBucket(@Nullable String logsBucket) {
            this.logsBucket = Output.ofNullable(logsBucket);
            return this;
        }

        public Builder options(@Nullable Output<BuildOptionsArgs> options) {
            this.options = options;
            return this;
        }

        public Builder options(@Nullable BuildOptionsArgs options) {
            this.options = Output.ofNullable(options);
            return this;
        }

        public Builder project(@Nullable Output<String> project) {
            this.project = project;
            return this;
        }

        public Builder project(@Nullable String project) {
            this.project = Output.ofNullable(project);
            return this;
        }

        public Builder projectId(Output<String> projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }

        public Builder projectId(String projectId) {
            this.projectId = Output.of(Objects.requireNonNull(projectId));
            return this;
        }

        public Builder queueTtl(@Nullable Output<String> queueTtl) {
            this.queueTtl = queueTtl;
            return this;
        }

        public Builder queueTtl(@Nullable String queueTtl) {
            this.queueTtl = Output.ofNullable(queueTtl);
            return this;
        }

        public Builder secrets(@Nullable Output<List<SecretArgs>> secrets) {
            this.secrets = secrets;
            return this;
        }

        public Builder secrets(@Nullable List<SecretArgs> secrets) {
            this.secrets = Output.ofNullable(secrets);
            return this;
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Output.ofNullable(serviceAccount);
            return this;
        }

        public Builder source(@Nullable Output<SourceArgs> source) {
            this.source = source;
            return this;
        }

        public Builder source(@Nullable SourceArgs source) {
            this.source = Output.ofNullable(source);
            return this;
        }

        public Builder steps(Output<List<BuildStepArgs>> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }

        public Builder steps(List<BuildStepArgs> steps) {
            this.steps = Output.of(Objects.requireNonNull(steps));
            return this;
        }

        public Builder substitutions(@Nullable Output<Map<String,String>> substitutions) {
            this.substitutions = substitutions;
            return this;
        }

        public Builder substitutions(@Nullable Map<String,String> substitutions) {
            this.substitutions = Output.ofNullable(substitutions);
            return this;
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable List<String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(@Nullable String timeout) {
            this.timeout = Output.ofNullable(timeout);
            return this;
        }
        public BuildArgs build() {
            return new BuildArgs(artifacts, availableSecrets, images, location, logsBucket, options, project, projectId, queueTtl, secrets, serviceAccount, source, steps, substitutions, tags, timeout);
        }
    }
}
