// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.toolresults_v1beta3.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.DurationResponse;
import io.pulumi.googlenative.toolresults_v1beta3.inputs.FileReferenceResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A summary of a test suite result either parsed from XML or uploaded directly by a user. Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
 * 
 */
public final class TestSuiteOverviewResponse extends io.pulumi.resources.InvokeArgs {

    public static final TestSuiteOverviewResponse Empty = new TestSuiteOverviewResponse();

    /**
     * Elapsed time of test suite.
     * 
     */
    @InputImport(name="elapsedTime", required=true)
    private final DurationResponse elapsedTime;

    public DurationResponse getElapsedTime() {
        return this.elapsedTime;
    }

    /**
     * Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @InputImport(name="errorCount", required=true)
    private final Integer errorCount;

    public Integer getErrorCount() {
        return this.errorCount;
    }

    /**
     * Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     * 
     */
    @InputImport(name="failureCount", required=true)
    private final Integer failureCount;

    public Integer getFailureCount() {
        return this.failureCount;
    }

    /**
     * Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     * 
     */
    @InputImport(name="flakyCount", required=true)
    private final Integer flakyCount;

    public Integer getFlakyCount() {
        return this.flakyCount;
    }

    /**
     * The name of the test suite. - In create/response: always set - In update request: never
     * 
     */
    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @InputImport(name="skippedCount", required=true)
    private final Integer skippedCount;

    public Integer getSkippedCount() {
        return this.skippedCount;
    }

    /**
     * Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    @InputImport(name="totalCount", required=true)
    private final Integer totalCount;

    public Integer getTotalCount() {
        return this.totalCount;
    }

    /**
     * If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     * 
     */
    @InputImport(name="xmlSource", required=true)
    private final FileReferenceResponse xmlSource;

    public FileReferenceResponse getXmlSource() {
        return this.xmlSource;
    }

    public TestSuiteOverviewResponse(
        DurationResponse elapsedTime,
        Integer errorCount,
        Integer failureCount,
        Integer flakyCount,
        String name,
        Integer skippedCount,
        Integer totalCount,
        FileReferenceResponse xmlSource) {
        this.elapsedTime = Objects.requireNonNull(elapsedTime, "expected parameter 'elapsedTime' to be non-null");
        this.errorCount = Objects.requireNonNull(errorCount, "expected parameter 'errorCount' to be non-null");
        this.failureCount = Objects.requireNonNull(failureCount, "expected parameter 'failureCount' to be non-null");
        this.flakyCount = Objects.requireNonNull(flakyCount, "expected parameter 'flakyCount' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.skippedCount = Objects.requireNonNull(skippedCount, "expected parameter 'skippedCount' to be non-null");
        this.totalCount = Objects.requireNonNull(totalCount, "expected parameter 'totalCount' to be non-null");
        this.xmlSource = Objects.requireNonNull(xmlSource, "expected parameter 'xmlSource' to be non-null");
    }

    private TestSuiteOverviewResponse() {
        this.elapsedTime = null;
        this.errorCount = null;
        this.failureCount = null;
        this.flakyCount = null;
        this.name = null;
        this.skippedCount = null;
        this.totalCount = null;
        this.xmlSource = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestSuiteOverviewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DurationResponse elapsedTime;
        private Integer errorCount;
        private Integer failureCount;
        private Integer flakyCount;
        private String name;
        private Integer skippedCount;
        private Integer totalCount;
        private FileReferenceResponse xmlSource;

        public Builder() {
    	      // Empty
        }

        public Builder(TestSuiteOverviewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elapsedTime = defaults.elapsedTime;
    	      this.errorCount = defaults.errorCount;
    	      this.failureCount = defaults.failureCount;
    	      this.flakyCount = defaults.flakyCount;
    	      this.name = defaults.name;
    	      this.skippedCount = defaults.skippedCount;
    	      this.totalCount = defaults.totalCount;
    	      this.xmlSource = defaults.xmlSource;
        }

        public Builder setElapsedTime(DurationResponse elapsedTime) {
            this.elapsedTime = Objects.requireNonNull(elapsedTime);
            return this;
        }

        public Builder setErrorCount(Integer errorCount) {
            this.errorCount = Objects.requireNonNull(errorCount);
            return this;
        }

        public Builder setFailureCount(Integer failureCount) {
            this.failureCount = Objects.requireNonNull(failureCount);
            return this;
        }

        public Builder setFlakyCount(Integer flakyCount) {
            this.flakyCount = Objects.requireNonNull(flakyCount);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setSkippedCount(Integer skippedCount) {
            this.skippedCount = Objects.requireNonNull(skippedCount);
            return this;
        }

        public Builder setTotalCount(Integer totalCount) {
            this.totalCount = Objects.requireNonNull(totalCount);
            return this;
        }

        public Builder setXmlSource(FileReferenceResponse xmlSource) {
            this.xmlSource = Objects.requireNonNull(xmlSource);
            return this;
        }

        public TestSuiteOverviewResponse build() {
            return new TestSuiteOverviewResponse(elapsedTime, errorCount, failureCount, flakyCount, name, skippedCount, totalCount, xmlSource);
        }
    }
}
