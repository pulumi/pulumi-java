// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.storagetransfer_v1.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class GetTransferJobArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetTransferJobArgs Empty = new GetTransferJobArgs();

    @InputImport(name="projectId", required=true)
    private final String projectId;

    public String getProjectId() {
        return this.projectId;
    }

    @InputImport(name="transferJobId", required=true)
    private final String transferJobId;

    public String getTransferJobId() {
        return this.transferJobId;
    }

    public GetTransferJobArgs(
        String projectId,
        String transferJobId) {
        this.projectId = Objects.requireNonNull(projectId, "expected parameter 'projectId' to be non-null");
        this.transferJobId = Objects.requireNonNull(transferJobId, "expected parameter 'transferJobId' to be non-null");
    }

    private GetTransferJobArgs() {
        this.projectId = null;
        this.transferJobId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransferJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String projectId;
        private String transferJobId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTransferJobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.projectId = defaults.projectId;
    	      this.transferJobId = defaults.transferJobId;
        }

        public Builder setProjectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }

        public Builder setTransferJobId(String transferJobId) {
            this.transferJobId = Objects.requireNonNull(transferJobId);
            return this;
        }

        public GetTransferJobArgs build() {
            return new GetTransferJobArgs(projectId, transferJobId);
        }
    }
}
