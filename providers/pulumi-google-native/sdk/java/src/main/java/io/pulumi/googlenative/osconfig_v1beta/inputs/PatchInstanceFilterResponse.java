// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.osconfig_v1beta.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.osconfig_v1beta.inputs.PatchInstanceFilterGroupLabelResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
 * 
 */
public final class PatchInstanceFilterResponse extends io.pulumi.resources.InvokeArgs {

    public static final PatchInstanceFilterResponse Empty = new PatchInstanceFilterResponse();

    /**
     * Target all VM instances in the project. If true, no other criteria is permitted.
     * 
     */
    @Import(name="all", required=true)
      private final Boolean all;

    public Boolean getAll() {
        return this.all;
    }

    /**
     * Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
     * 
     */
    @Import(name="groupLabels", required=true)
      private final List<PatchInstanceFilterGroupLabelResponse> groupLabels;

    public List<PatchInstanceFilterGroupLabelResponse> getGroupLabels() {
        return this.groupLabels;
    }

    /**
     * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
     * 
     */
    @Import(name="instanceNamePrefixes", required=true)
      private final List<String> instanceNamePrefixes;

    public List<String> getInstanceNamePrefixes() {
        return this.instanceNamePrefixes;
    }

    /**
     * Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
     * 
     */
    @Import(name="instances", required=true)
      private final List<String> instances;

    public List<String> getInstances() {
        return this.instances;
    }

    /**
     * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
     * 
     */
    @Import(name="zones", required=true)
      private final List<String> zones;

    public List<String> getZones() {
        return this.zones;
    }

    public PatchInstanceFilterResponse(
        Boolean all,
        List<PatchInstanceFilterGroupLabelResponse> groupLabels,
        List<String> instanceNamePrefixes,
        List<String> instances,
        List<String> zones) {
        this.all = Objects.requireNonNull(all, "expected parameter 'all' to be non-null");
        this.groupLabels = Objects.requireNonNull(groupLabels, "expected parameter 'groupLabels' to be non-null");
        this.instanceNamePrefixes = Objects.requireNonNull(instanceNamePrefixes, "expected parameter 'instanceNamePrefixes' to be non-null");
        this.instances = Objects.requireNonNull(instances, "expected parameter 'instances' to be non-null");
        this.zones = Objects.requireNonNull(zones, "expected parameter 'zones' to be non-null");
    }

    private PatchInstanceFilterResponse() {
        this.all = null;
        this.groupLabels = List.of();
        this.instanceNamePrefixes = List.of();
        this.instances = List.of();
        this.zones = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PatchInstanceFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean all;
        private List<PatchInstanceFilterGroupLabelResponse> groupLabels;
        private List<String> instanceNamePrefixes;
        private List<String> instances;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(PatchInstanceFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.all = defaults.all;
    	      this.groupLabels = defaults.groupLabels;
    	      this.instanceNamePrefixes = defaults.instanceNamePrefixes;
    	      this.instances = defaults.instances;
    	      this.zones = defaults.zones;
        }

        public Builder all(Boolean all) {
            this.all = Objects.requireNonNull(all);
            return this;
        }

        public Builder groupLabels(List<PatchInstanceFilterGroupLabelResponse> groupLabels) {
            this.groupLabels = Objects.requireNonNull(groupLabels);
            return this;
        }

        public Builder instanceNamePrefixes(List<String> instanceNamePrefixes) {
            this.instanceNamePrefixes = Objects.requireNonNull(instanceNamePrefixes);
            return this;
        }

        public Builder instances(List<String> instances) {
            this.instances = Objects.requireNonNull(instances);
            return this;
        }

        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public PatchInstanceFilterResponse build() {
            return new PatchInstanceFilterResponse(all, groupLabels, instanceNamePrefixes, instances, zones);
        }
    }
}
