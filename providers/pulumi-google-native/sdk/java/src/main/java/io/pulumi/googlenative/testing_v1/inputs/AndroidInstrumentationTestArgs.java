// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.testing_v1.enums.AndroidInstrumentationTestOrchestratorOption;
import io.pulumi.googlenative.testing_v1.inputs.AppBundleArgs;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import io.pulumi.googlenative.testing_v1.inputs.ShardingOptionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final AndroidInstrumentationTestArgs Empty = new AndroidInstrumentationTestArgs();

    /**
     * The APK for the application under test.
     * 
     */
    @InputImport(name="appApk")
      private final @Nullable Input<FileReferenceArgs> appApk;

    public Input<FileReferenceArgs> getAppApk() {
        return this.appApk == null ? Input.empty() : this.appApk;
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @InputImport(name="appBundle")
      private final @Nullable Input<AppBundleArgs> appBundle;

    public Input<AppBundleArgs> getAppBundle() {
        return this.appBundle == null ? Input.empty() : this.appBundle;
    }

    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     * 
     */
    @InputImport(name="appPackageId")
      private final @Nullable Input<String> appPackageId;

    public Input<String> getAppPackageId() {
        return this.appPackageId == null ? Input.empty() : this.appPackageId;
    }

    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    @InputImport(name="orchestratorOption")
      private final @Nullable Input<AndroidInstrumentationTestOrchestratorOption> orchestratorOption;

    public Input<AndroidInstrumentationTestOrchestratorOption> getOrchestratorOption() {
        return this.orchestratorOption == null ? Input.empty() : this.orchestratorOption;
    }

    /**
     * The option to run tests in multiple shards in parallel.
     * 
     */
    @InputImport(name="shardingOption")
      private final @Nullable Input<ShardingOptionArgs> shardingOption;

    public Input<ShardingOptionArgs> getShardingOption() {
        return this.shardingOption == null ? Input.empty() : this.shardingOption;
    }

    /**
     * The APK containing the test code to be executed.
     * 
     */
    @InputImport(name="testApk", required=true)
      private final Input<FileReferenceArgs> testApk;

    public Input<FileReferenceArgs> getTestApk() {
        return this.testApk;
    }

    /**
     * The java package for the test to be executed. The default value is determined by examining the application's manifest.
     * 
     */
    @InputImport(name="testPackageId")
      private final @Nullable Input<String> testPackageId;

    public Input<String> getTestPackageId() {
        return this.testPackageId == null ? Input.empty() : this.testPackageId;
    }

    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
     * 
     */
    @InputImport(name="testRunnerClass")
      private final @Nullable Input<String> testRunnerClass;

    public Input<String> getTestRunnerClass() {
        return this.testRunnerClass == null ? Input.empty() : this.testRunnerClass;
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     * 
     */
    @InputImport(name="testTargets")
      private final @Nullable Input<List<String>> testTargets;

    public Input<List<String>> getTestTargets() {
        return this.testTargets == null ? Input.empty() : this.testTargets;
    }

    public AndroidInstrumentationTestArgs(
        @Nullable Input<FileReferenceArgs> appApk,
        @Nullable Input<AppBundleArgs> appBundle,
        @Nullable Input<String> appPackageId,
        @Nullable Input<AndroidInstrumentationTestOrchestratorOption> orchestratorOption,
        @Nullable Input<ShardingOptionArgs> shardingOption,
        Input<FileReferenceArgs> testApk,
        @Nullable Input<String> testPackageId,
        @Nullable Input<String> testRunnerClass,
        @Nullable Input<List<String>> testTargets) {
        this.appApk = appApk;
        this.appBundle = appBundle;
        this.appPackageId = appPackageId;
        this.orchestratorOption = orchestratorOption;
        this.shardingOption = shardingOption;
        this.testApk = Objects.requireNonNull(testApk, "expected parameter 'testApk' to be non-null");
        this.testPackageId = testPackageId;
        this.testRunnerClass = testRunnerClass;
        this.testTargets = testTargets;
    }

    private AndroidInstrumentationTestArgs() {
        this.appApk = Input.empty();
        this.appBundle = Input.empty();
        this.appPackageId = Input.empty();
        this.orchestratorOption = Input.empty();
        this.shardingOption = Input.empty();
        this.testApk = Input.empty();
        this.testPackageId = Input.empty();
        this.testRunnerClass = Input.empty();
        this.testTargets = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidInstrumentationTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<FileReferenceArgs> appApk;
        private @Nullable Input<AppBundleArgs> appBundle;
        private @Nullable Input<String> appPackageId;
        private @Nullable Input<AndroidInstrumentationTestOrchestratorOption> orchestratorOption;
        private @Nullable Input<ShardingOptionArgs> shardingOption;
        private Input<FileReferenceArgs> testApk;
        private @Nullable Input<String> testPackageId;
        private @Nullable Input<String> testRunnerClass;
        private @Nullable Input<List<String>> testTargets;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidInstrumentationTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appApk = defaults.appApk;
    	      this.appBundle = defaults.appBundle;
    	      this.appPackageId = defaults.appPackageId;
    	      this.orchestratorOption = defaults.orchestratorOption;
    	      this.shardingOption = defaults.shardingOption;
    	      this.testApk = defaults.testApk;
    	      this.testPackageId = defaults.testPackageId;
    	      this.testRunnerClass = defaults.testRunnerClass;
    	      this.testTargets = defaults.testTargets;
        }

        public Builder setAppApk(@Nullable Input<FileReferenceArgs> appApk) {
            this.appApk = appApk;
            return this;
        }

        public Builder setAppApk(@Nullable FileReferenceArgs appApk) {
            this.appApk = Input.ofNullable(appApk);
            return this;
        }

        public Builder setAppBundle(@Nullable Input<AppBundleArgs> appBundle) {
            this.appBundle = appBundle;
            return this;
        }

        public Builder setAppBundle(@Nullable AppBundleArgs appBundle) {
            this.appBundle = Input.ofNullable(appBundle);
            return this;
        }

        public Builder setAppPackageId(@Nullable Input<String> appPackageId) {
            this.appPackageId = appPackageId;
            return this;
        }

        public Builder setAppPackageId(@Nullable String appPackageId) {
            this.appPackageId = Input.ofNullable(appPackageId);
            return this;
        }

        public Builder setOrchestratorOption(@Nullable Input<AndroidInstrumentationTestOrchestratorOption> orchestratorOption) {
            this.orchestratorOption = orchestratorOption;
            return this;
        }

        public Builder setOrchestratorOption(@Nullable AndroidInstrumentationTestOrchestratorOption orchestratorOption) {
            this.orchestratorOption = Input.ofNullable(orchestratorOption);
            return this;
        }

        public Builder setShardingOption(@Nullable Input<ShardingOptionArgs> shardingOption) {
            this.shardingOption = shardingOption;
            return this;
        }

        public Builder setShardingOption(@Nullable ShardingOptionArgs shardingOption) {
            this.shardingOption = Input.ofNullable(shardingOption);
            return this;
        }

        public Builder setTestApk(Input<FileReferenceArgs> testApk) {
            this.testApk = Objects.requireNonNull(testApk);
            return this;
        }

        public Builder setTestApk(FileReferenceArgs testApk) {
            this.testApk = Input.of(Objects.requireNonNull(testApk));
            return this;
        }

        public Builder setTestPackageId(@Nullable Input<String> testPackageId) {
            this.testPackageId = testPackageId;
            return this;
        }

        public Builder setTestPackageId(@Nullable String testPackageId) {
            this.testPackageId = Input.ofNullable(testPackageId);
            return this;
        }

        public Builder setTestRunnerClass(@Nullable Input<String> testRunnerClass) {
            this.testRunnerClass = testRunnerClass;
            return this;
        }

        public Builder setTestRunnerClass(@Nullable String testRunnerClass) {
            this.testRunnerClass = Input.ofNullable(testRunnerClass);
            return this;
        }

        public Builder setTestTargets(@Nullable Input<List<String>> testTargets) {
            this.testTargets = testTargets;
            return this;
        }

        public Builder setTestTargets(@Nullable List<String> testTargets) {
            this.testTargets = Input.ofNullable(testTargets);
            return this;
        }
        public AndroidInstrumentationTestArgs build() {
            return new AndroidInstrumentationTestArgs(appApk, appBundle, appPackageId, orchestratorOption, shardingOption, testApk, testPackageId, testRunnerClass, testTargets);
        }
    }
}
