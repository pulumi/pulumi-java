// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.testing_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.testing_v1.enums.AndroidInstrumentationTestOrchestratorOption;
import io.pulumi.googlenative.testing_v1.inputs.AppBundleArgs;
import io.pulumi.googlenative.testing_v1.inputs.FileReferenceArgs;
import io.pulumi.googlenative.testing_v1.inputs.ShardingOptionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 * 
 */
public final class AndroidInstrumentationTestArgs extends io.pulumi.resources.ResourceArgs {

    public static final AndroidInstrumentationTestArgs Empty = new AndroidInstrumentationTestArgs();

    /**
     * The APK for the application under test.
     * 
     */
    @Import(name="appApk")
      private final @Nullable Output<FileReferenceArgs> appApk;

    public Output<FileReferenceArgs> getAppApk() {
        return this.appApk == null ? Output.empty() : this.appApk;
    }

    /**
     * A multi-apk app bundle for the application under test.
     * 
     */
    @Import(name="appBundle")
      private final @Nullable Output<AppBundleArgs> appBundle;

    public Output<AppBundleArgs> getAppBundle() {
        return this.appBundle == null ? Output.empty() : this.appBundle;
    }

    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     * 
     */
    @Import(name="appPackageId")
      private final @Nullable Output<String> appPackageId;

    public Output<String> getAppPackageId() {
        return this.appPackageId == null ? Output.empty() : this.appPackageId;
    }

    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     * 
     */
    @Import(name="orchestratorOption")
      private final @Nullable Output<AndroidInstrumentationTestOrchestratorOption> orchestratorOption;

    public Output<AndroidInstrumentationTestOrchestratorOption> getOrchestratorOption() {
        return this.orchestratorOption == null ? Output.empty() : this.orchestratorOption;
    }

    /**
     * The option to run tests in multiple shards in parallel.
     * 
     */
    @Import(name="shardingOption")
      private final @Nullable Output<ShardingOptionArgs> shardingOption;

    public Output<ShardingOptionArgs> getShardingOption() {
        return this.shardingOption == null ? Output.empty() : this.shardingOption;
    }

    /**
     * The APK containing the test code to be executed.
     * 
     */
    @Import(name="testApk", required=true)
      private final Output<FileReferenceArgs> testApk;

    public Output<FileReferenceArgs> getTestApk() {
        return this.testApk;
    }

    /**
     * The java package for the test to be executed. The default value is determined by examining the application's manifest.
     * 
     */
    @Import(name="testPackageId")
      private final @Nullable Output<String> testPackageId;

    public Output<String> getTestPackageId() {
        return this.testPackageId == null ? Output.empty() : this.testPackageId;
    }

    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
     * 
     */
    @Import(name="testRunnerClass")
      private final @Nullable Output<String> testRunnerClass;

    public Output<String> getTestRunnerClass() {
        return this.testRunnerClass == null ? Output.empty() : this.testRunnerClass;
    }

    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     * 
     */
    @Import(name="testTargets")
      private final @Nullable Output<List<String>> testTargets;

    public Output<List<String>> getTestTargets() {
        return this.testTargets == null ? Output.empty() : this.testTargets;
    }

    public AndroidInstrumentationTestArgs(
        @Nullable Output<FileReferenceArgs> appApk,
        @Nullable Output<AppBundleArgs> appBundle,
        @Nullable Output<String> appPackageId,
        @Nullable Output<AndroidInstrumentationTestOrchestratorOption> orchestratorOption,
        @Nullable Output<ShardingOptionArgs> shardingOption,
        Output<FileReferenceArgs> testApk,
        @Nullable Output<String> testPackageId,
        @Nullable Output<String> testRunnerClass,
        @Nullable Output<List<String>> testTargets) {
        this.appApk = appApk;
        this.appBundle = appBundle;
        this.appPackageId = appPackageId;
        this.orchestratorOption = orchestratorOption;
        this.shardingOption = shardingOption;
        this.testApk = Objects.requireNonNull(testApk, "expected parameter 'testApk' to be non-null");
        this.testPackageId = testPackageId;
        this.testRunnerClass = testRunnerClass;
        this.testTargets = testTargets;
    }

    private AndroidInstrumentationTestArgs() {
        this.appApk = Output.empty();
        this.appBundle = Output.empty();
        this.appPackageId = Output.empty();
        this.orchestratorOption = Output.empty();
        this.shardingOption = Output.empty();
        this.testApk = Output.empty();
        this.testPackageId = Output.empty();
        this.testRunnerClass = Output.empty();
        this.testTargets = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AndroidInstrumentationTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FileReferenceArgs> appApk;
        private @Nullable Output<AppBundleArgs> appBundle;
        private @Nullable Output<String> appPackageId;
        private @Nullable Output<AndroidInstrumentationTestOrchestratorOption> orchestratorOption;
        private @Nullable Output<ShardingOptionArgs> shardingOption;
        private Output<FileReferenceArgs> testApk;
        private @Nullable Output<String> testPackageId;
        private @Nullable Output<String> testRunnerClass;
        private @Nullable Output<List<String>> testTargets;

        public Builder() {
    	      // Empty
        }

        public Builder(AndroidInstrumentationTestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appApk = defaults.appApk;
    	      this.appBundle = defaults.appBundle;
    	      this.appPackageId = defaults.appPackageId;
    	      this.orchestratorOption = defaults.orchestratorOption;
    	      this.shardingOption = defaults.shardingOption;
    	      this.testApk = defaults.testApk;
    	      this.testPackageId = defaults.testPackageId;
    	      this.testRunnerClass = defaults.testRunnerClass;
    	      this.testTargets = defaults.testTargets;
        }

        public Builder appApk(@Nullable Output<FileReferenceArgs> appApk) {
            this.appApk = appApk;
            return this;
        }

        public Builder appApk(@Nullable FileReferenceArgs appApk) {
            this.appApk = Output.ofNullable(appApk);
            return this;
        }

        public Builder appBundle(@Nullable Output<AppBundleArgs> appBundle) {
            this.appBundle = appBundle;
            return this;
        }

        public Builder appBundle(@Nullable AppBundleArgs appBundle) {
            this.appBundle = Output.ofNullable(appBundle);
            return this;
        }

        public Builder appPackageId(@Nullable Output<String> appPackageId) {
            this.appPackageId = appPackageId;
            return this;
        }

        public Builder appPackageId(@Nullable String appPackageId) {
            this.appPackageId = Output.ofNullable(appPackageId);
            return this;
        }

        public Builder orchestratorOption(@Nullable Output<AndroidInstrumentationTestOrchestratorOption> orchestratorOption) {
            this.orchestratorOption = orchestratorOption;
            return this;
        }

        public Builder orchestratorOption(@Nullable AndroidInstrumentationTestOrchestratorOption orchestratorOption) {
            this.orchestratorOption = Output.ofNullable(orchestratorOption);
            return this;
        }

        public Builder shardingOption(@Nullable Output<ShardingOptionArgs> shardingOption) {
            this.shardingOption = shardingOption;
            return this;
        }

        public Builder shardingOption(@Nullable ShardingOptionArgs shardingOption) {
            this.shardingOption = Output.ofNullable(shardingOption);
            return this;
        }

        public Builder testApk(Output<FileReferenceArgs> testApk) {
            this.testApk = Objects.requireNonNull(testApk);
            return this;
        }

        public Builder testApk(FileReferenceArgs testApk) {
            this.testApk = Output.of(Objects.requireNonNull(testApk));
            return this;
        }

        public Builder testPackageId(@Nullable Output<String> testPackageId) {
            this.testPackageId = testPackageId;
            return this;
        }

        public Builder testPackageId(@Nullable String testPackageId) {
            this.testPackageId = Output.ofNullable(testPackageId);
            return this;
        }

        public Builder testRunnerClass(@Nullable Output<String> testRunnerClass) {
            this.testRunnerClass = testRunnerClass;
            return this;
        }

        public Builder testRunnerClass(@Nullable String testRunnerClass) {
            this.testRunnerClass = Output.ofNullable(testRunnerClass);
            return this;
        }

        public Builder testTargets(@Nullable Output<List<String>> testTargets) {
            this.testTargets = testTargets;
            return this;
        }

        public Builder testTargets(@Nullable List<String> testTargets) {
            this.testTargets = Output.ofNullable(testTargets);
            return this;
        }
        public AndroidInstrumentationTestArgs build() {
            return new AndroidInstrumentationTestArgs(appApk, appBundle, appPackageId, orchestratorOption, shardingOption, testApk, testPackageId, testRunnerClass, testTargets);
        }
    }
}
