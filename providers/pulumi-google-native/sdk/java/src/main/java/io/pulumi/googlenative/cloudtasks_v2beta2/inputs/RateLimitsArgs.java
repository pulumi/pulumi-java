// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudtasks_v2beta2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RateLimitsArgs extends io.pulumi.resources.ResourceArgs {

    public static final RateLimitsArgs Empty = new RateLimitsArgs();

    @InputImport(name="maxBurstSize")
    private final @Nullable Input<Integer> maxBurstSize;

    public Input<Integer> getMaxBurstSize() {
        return this.maxBurstSize == null ? Input.empty() : this.maxBurstSize;
    }

    @InputImport(name="maxConcurrentTasks")
    private final @Nullable Input<Integer> maxConcurrentTasks;

    public Input<Integer> getMaxConcurrentTasks() {
        return this.maxConcurrentTasks == null ? Input.empty() : this.maxConcurrentTasks;
    }

    @InputImport(name="maxTasksDispatchedPerSecond")
    private final @Nullable Input<Double> maxTasksDispatchedPerSecond;

    public Input<Double> getMaxTasksDispatchedPerSecond() {
        return this.maxTasksDispatchedPerSecond == null ? Input.empty() : this.maxTasksDispatchedPerSecond;
    }

    public RateLimitsArgs(
        @Nullable Input<Integer> maxBurstSize,
        @Nullable Input<Integer> maxConcurrentTasks,
        @Nullable Input<Double> maxTasksDispatchedPerSecond) {
        this.maxBurstSize = maxBurstSize;
        this.maxConcurrentTasks = maxConcurrentTasks;
        this.maxTasksDispatchedPerSecond = maxTasksDispatchedPerSecond;
    }

    private RateLimitsArgs() {
        this.maxBurstSize = Input.empty();
        this.maxConcurrentTasks = Input.empty();
        this.maxTasksDispatchedPerSecond = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RateLimitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxBurstSize;
        private @Nullable Input<Integer> maxConcurrentTasks;
        private @Nullable Input<Double> maxTasksDispatchedPerSecond;

        public Builder() {
    	      // Empty
        }

        public Builder(RateLimitsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxBurstSize = defaults.maxBurstSize;
    	      this.maxConcurrentTasks = defaults.maxConcurrentTasks;
    	      this.maxTasksDispatchedPerSecond = defaults.maxTasksDispatchedPerSecond;
        }

        public Builder setMaxBurstSize(@Nullable Input<Integer> maxBurstSize) {
            this.maxBurstSize = maxBurstSize;
            return this;
        }

        public Builder setMaxBurstSize(@Nullable Integer maxBurstSize) {
            this.maxBurstSize = Input.ofNullable(maxBurstSize);
            return this;
        }

        public Builder setMaxConcurrentTasks(@Nullable Input<Integer> maxConcurrentTasks) {
            this.maxConcurrentTasks = maxConcurrentTasks;
            return this;
        }

        public Builder setMaxConcurrentTasks(@Nullable Integer maxConcurrentTasks) {
            this.maxConcurrentTasks = Input.ofNullable(maxConcurrentTasks);
            return this;
        }

        public Builder setMaxTasksDispatchedPerSecond(@Nullable Input<Double> maxTasksDispatchedPerSecond) {
            this.maxTasksDispatchedPerSecond = maxTasksDispatchedPerSecond;
            return this;
        }

        public Builder setMaxTasksDispatchedPerSecond(@Nullable Double maxTasksDispatchedPerSecond) {
            this.maxTasksDispatchedPerSecond = Input.ofNullable(maxTasksDispatchedPerSecond);
            return this;
        }

        public RateLimitsArgs build() {
            return new RateLimitsArgs(maxBurstSize, maxConcurrentTasks, maxTasksDispatchedPerSecond);
        }
    }
}
