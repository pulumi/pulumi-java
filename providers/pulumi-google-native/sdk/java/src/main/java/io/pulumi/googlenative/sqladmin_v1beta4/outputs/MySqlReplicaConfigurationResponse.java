// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sqladmin_v1beta4.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class MySqlReplicaConfigurationResponse {
    private final String caCertificate;
    private final String clientCertificate;
    private final String clientKey;
    private final Integer connectRetryInterval;
    private final String dumpFilePath;
    private final String kind;
    private final String masterHeartbeatPeriod;
    private final String password;
    private final String sslCipher;
    private final String username;
    private final Boolean verifyServerCertificate;

    @OutputCustomType.Constructor({"caCertificate","clientCertificate","clientKey","connectRetryInterval","dumpFilePath","kind","masterHeartbeatPeriod","password","sslCipher","username","verifyServerCertificate"})
    private MySqlReplicaConfigurationResponse(
        String caCertificate,
        String clientCertificate,
        String clientKey,
        Integer connectRetryInterval,
        String dumpFilePath,
        String kind,
        String masterHeartbeatPeriod,
        String password,
        String sslCipher,
        String username,
        Boolean verifyServerCertificate) {
        this.caCertificate = Objects.requireNonNull(caCertificate);
        this.clientCertificate = Objects.requireNonNull(clientCertificate);
        this.clientKey = Objects.requireNonNull(clientKey);
        this.connectRetryInterval = Objects.requireNonNull(connectRetryInterval);
        this.dumpFilePath = Objects.requireNonNull(dumpFilePath);
        this.kind = Objects.requireNonNull(kind);
        this.masterHeartbeatPeriod = Objects.requireNonNull(masterHeartbeatPeriod);
        this.password = Objects.requireNonNull(password);
        this.sslCipher = Objects.requireNonNull(sslCipher);
        this.username = Objects.requireNonNull(username);
        this.verifyServerCertificate = Objects.requireNonNull(verifyServerCertificate);
    }

    public String getCaCertificate() {
        return this.caCertificate;
    }
    public String getClientCertificate() {
        return this.clientCertificate;
    }
    public String getClientKey() {
        return this.clientKey;
    }
    public Integer getConnectRetryInterval() {
        return this.connectRetryInterval;
    }
    public String getDumpFilePath() {
        return this.dumpFilePath;
    }
    public String getKind() {
        return this.kind;
    }
    public String getMasterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }
    public String getPassword() {
        return this.password;
    }
    public String getSslCipher() {
        return this.sslCipher;
    }
    public String getUsername() {
        return this.username;
    }
    public Boolean getVerifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MySqlReplicaConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private Integer connectRetryInterval;
        private String dumpFilePath;
        private String kind;
        private String masterHeartbeatPeriod;
        private String password;
        private String sslCipher;
        private String username;
        private Boolean verifyServerCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(MySqlReplicaConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.kind = defaults.kind;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        public Builder setCaCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }

        public Builder setClientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }

        public Builder setClientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }

        public Builder setConnectRetryInterval(Integer connectRetryInterval) {
            this.connectRetryInterval = Objects.requireNonNull(connectRetryInterval);
            return this;
        }

        public Builder setDumpFilePath(String dumpFilePath) {
            this.dumpFilePath = Objects.requireNonNull(dumpFilePath);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setMasterHeartbeatPeriod(String masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = Objects.requireNonNull(masterHeartbeatPeriod);
            return this;
        }

        public Builder setPassword(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder setSslCipher(String sslCipher) {
            this.sslCipher = Objects.requireNonNull(sslCipher);
            return this;
        }

        public Builder setUsername(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }

        public Builder setVerifyServerCertificate(Boolean verifyServerCertificate) {
            this.verifyServerCertificate = Objects.requireNonNull(verifyServerCertificate);
            return this;
        }

        public MySqlReplicaConfigurationResponse build() {
            return new MySqlReplicaConfigurationResponse(caCertificate, clientCertificate, clientKey, connectRetryInterval, dumpFilePath, kind, masterHeartbeatPeriod, password, sslCipher, username, verifyServerCertificate);
        }
    }
}
