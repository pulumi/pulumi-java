// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.composer_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.composer_v1.inputs.DatabaseConfigResponse;
import io.pulumi.googlenative.composer_v1.inputs.EncryptionConfigResponse;
import io.pulumi.googlenative.composer_v1.inputs.MaintenanceWindowResponse;
import io.pulumi.googlenative.composer_v1.inputs.NodeConfigResponse;
import io.pulumi.googlenative.composer_v1.inputs.PrivateEnvironmentConfigResponse;
import io.pulumi.googlenative.composer_v1.inputs.SoftwareConfigResponse;
import io.pulumi.googlenative.composer_v1.inputs.WebServerConfigResponse;
import io.pulumi.googlenative.composer_v1.inputs.WebServerNetworkAccessControlResponse;
import io.pulumi.googlenative.composer_v1.inputs.WorkloadsConfigResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class EnvironmentConfigResponse extends io.pulumi.resources.InvokeArgs {

    public static final EnvironmentConfigResponse Empty = new EnvironmentConfigResponse();

    @InputImport(name="airflowUri", required=true)
    private final String airflowUri;

    public String getAirflowUri() {
        return this.airflowUri;
    }

    @InputImport(name="dagGcsPrefix", required=true)
    private final String dagGcsPrefix;

    public String getDagGcsPrefix() {
        return this.dagGcsPrefix;
    }

    @InputImport(name="databaseConfig", required=true)
    private final DatabaseConfigResponse databaseConfig;

    public DatabaseConfigResponse getDatabaseConfig() {
        return this.databaseConfig;
    }

    @InputImport(name="encryptionConfig", required=true)
    private final EncryptionConfigResponse encryptionConfig;

    public EncryptionConfigResponse getEncryptionConfig() {
        return this.encryptionConfig;
    }

    @InputImport(name="environmentSize", required=true)
    private final String environmentSize;

    public String getEnvironmentSize() {
        return this.environmentSize;
    }

    @InputImport(name="gkeCluster", required=true)
    private final String gkeCluster;

    public String getGkeCluster() {
        return this.gkeCluster;
    }

    @InputImport(name="maintenanceWindow", required=true)
    private final MaintenanceWindowResponse maintenanceWindow;

    public MaintenanceWindowResponse getMaintenanceWindow() {
        return this.maintenanceWindow;
    }

    @InputImport(name="nodeConfig", required=true)
    private final NodeConfigResponse nodeConfig;

    public NodeConfigResponse getNodeConfig() {
        return this.nodeConfig;
    }

    @InputImport(name="nodeCount", required=true)
    private final Integer nodeCount;

    public Integer getNodeCount() {
        return this.nodeCount;
    }

    @InputImport(name="privateEnvironmentConfig", required=true)
    private final PrivateEnvironmentConfigResponse privateEnvironmentConfig;

    public PrivateEnvironmentConfigResponse getPrivateEnvironmentConfig() {
        return this.privateEnvironmentConfig;
    }

    @InputImport(name="softwareConfig", required=true)
    private final SoftwareConfigResponse softwareConfig;

    public SoftwareConfigResponse getSoftwareConfig() {
        return this.softwareConfig;
    }

    @InputImport(name="webServerConfig", required=true)
    private final WebServerConfigResponse webServerConfig;

    public WebServerConfigResponse getWebServerConfig() {
        return this.webServerConfig;
    }

    @InputImport(name="webServerNetworkAccessControl", required=true)
    private final WebServerNetworkAccessControlResponse webServerNetworkAccessControl;

    public WebServerNetworkAccessControlResponse getWebServerNetworkAccessControl() {
        return this.webServerNetworkAccessControl;
    }

    @InputImport(name="workloadsConfig", required=true)
    private final WorkloadsConfigResponse workloadsConfig;

    public WorkloadsConfigResponse getWorkloadsConfig() {
        return this.workloadsConfig;
    }

    public EnvironmentConfigResponse(
        String airflowUri,
        String dagGcsPrefix,
        DatabaseConfigResponse databaseConfig,
        EncryptionConfigResponse encryptionConfig,
        String environmentSize,
        String gkeCluster,
        MaintenanceWindowResponse maintenanceWindow,
        NodeConfigResponse nodeConfig,
        Integer nodeCount,
        PrivateEnvironmentConfigResponse privateEnvironmentConfig,
        SoftwareConfigResponse softwareConfig,
        WebServerConfigResponse webServerConfig,
        WebServerNetworkAccessControlResponse webServerNetworkAccessControl,
        WorkloadsConfigResponse workloadsConfig) {
        this.airflowUri = Objects.requireNonNull(airflowUri, "expected parameter 'airflowUri' to be non-null");
        this.dagGcsPrefix = Objects.requireNonNull(dagGcsPrefix, "expected parameter 'dagGcsPrefix' to be non-null");
        this.databaseConfig = Objects.requireNonNull(databaseConfig, "expected parameter 'databaseConfig' to be non-null");
        this.encryptionConfig = Objects.requireNonNull(encryptionConfig, "expected parameter 'encryptionConfig' to be non-null");
        this.environmentSize = Objects.requireNonNull(environmentSize, "expected parameter 'environmentSize' to be non-null");
        this.gkeCluster = Objects.requireNonNull(gkeCluster, "expected parameter 'gkeCluster' to be non-null");
        this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow, "expected parameter 'maintenanceWindow' to be non-null");
        this.nodeConfig = Objects.requireNonNull(nodeConfig, "expected parameter 'nodeConfig' to be non-null");
        this.nodeCount = Objects.requireNonNull(nodeCount, "expected parameter 'nodeCount' to be non-null");
        this.privateEnvironmentConfig = Objects.requireNonNull(privateEnvironmentConfig, "expected parameter 'privateEnvironmentConfig' to be non-null");
        this.softwareConfig = Objects.requireNonNull(softwareConfig, "expected parameter 'softwareConfig' to be non-null");
        this.webServerConfig = Objects.requireNonNull(webServerConfig, "expected parameter 'webServerConfig' to be non-null");
        this.webServerNetworkAccessControl = Objects.requireNonNull(webServerNetworkAccessControl, "expected parameter 'webServerNetworkAccessControl' to be non-null");
        this.workloadsConfig = Objects.requireNonNull(workloadsConfig, "expected parameter 'workloadsConfig' to be non-null");
    }

    private EnvironmentConfigResponse() {
        this.airflowUri = null;
        this.dagGcsPrefix = null;
        this.databaseConfig = null;
        this.encryptionConfig = null;
        this.environmentSize = null;
        this.gkeCluster = null;
        this.maintenanceWindow = null;
        this.nodeConfig = null;
        this.nodeCount = null;
        this.privateEnvironmentConfig = null;
        this.softwareConfig = null;
        this.webServerConfig = null;
        this.webServerNetworkAccessControl = null;
        this.workloadsConfig = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String airflowUri;
        private String dagGcsPrefix;
        private DatabaseConfigResponse databaseConfig;
        private EncryptionConfigResponse encryptionConfig;
        private String environmentSize;
        private String gkeCluster;
        private MaintenanceWindowResponse maintenanceWindow;
        private NodeConfigResponse nodeConfig;
        private Integer nodeCount;
        private PrivateEnvironmentConfigResponse privateEnvironmentConfig;
        private SoftwareConfigResponse softwareConfig;
        private WebServerConfigResponse webServerConfig;
        private WebServerNetworkAccessControlResponse webServerNetworkAccessControl;
        private WorkloadsConfigResponse workloadsConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.airflowUri = defaults.airflowUri;
    	      this.dagGcsPrefix = defaults.dagGcsPrefix;
    	      this.databaseConfig = defaults.databaseConfig;
    	      this.encryptionConfig = defaults.encryptionConfig;
    	      this.environmentSize = defaults.environmentSize;
    	      this.gkeCluster = defaults.gkeCluster;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.nodeConfig = defaults.nodeConfig;
    	      this.nodeCount = defaults.nodeCount;
    	      this.privateEnvironmentConfig = defaults.privateEnvironmentConfig;
    	      this.softwareConfig = defaults.softwareConfig;
    	      this.webServerConfig = defaults.webServerConfig;
    	      this.webServerNetworkAccessControl = defaults.webServerNetworkAccessControl;
    	      this.workloadsConfig = defaults.workloadsConfig;
        }

        public Builder setAirflowUri(String airflowUri) {
            this.airflowUri = Objects.requireNonNull(airflowUri);
            return this;
        }

        public Builder setDagGcsPrefix(String dagGcsPrefix) {
            this.dagGcsPrefix = Objects.requireNonNull(dagGcsPrefix);
            return this;
        }

        public Builder setDatabaseConfig(DatabaseConfigResponse databaseConfig) {
            this.databaseConfig = Objects.requireNonNull(databaseConfig);
            return this;
        }

        public Builder setEncryptionConfig(EncryptionConfigResponse encryptionConfig) {
            this.encryptionConfig = Objects.requireNonNull(encryptionConfig);
            return this;
        }

        public Builder setEnvironmentSize(String environmentSize) {
            this.environmentSize = Objects.requireNonNull(environmentSize);
            return this;
        }

        public Builder setGkeCluster(String gkeCluster) {
            this.gkeCluster = Objects.requireNonNull(gkeCluster);
            return this;
        }

        public Builder setMaintenanceWindow(MaintenanceWindowResponse maintenanceWindow) {
            this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow);
            return this;
        }

        public Builder setNodeConfig(NodeConfigResponse nodeConfig) {
            this.nodeConfig = Objects.requireNonNull(nodeConfig);
            return this;
        }

        public Builder setNodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }

        public Builder setPrivateEnvironmentConfig(PrivateEnvironmentConfigResponse privateEnvironmentConfig) {
            this.privateEnvironmentConfig = Objects.requireNonNull(privateEnvironmentConfig);
            return this;
        }

        public Builder setSoftwareConfig(SoftwareConfigResponse softwareConfig) {
            this.softwareConfig = Objects.requireNonNull(softwareConfig);
            return this;
        }

        public Builder setWebServerConfig(WebServerConfigResponse webServerConfig) {
            this.webServerConfig = Objects.requireNonNull(webServerConfig);
            return this;
        }

        public Builder setWebServerNetworkAccessControl(WebServerNetworkAccessControlResponse webServerNetworkAccessControl) {
            this.webServerNetworkAccessControl = Objects.requireNonNull(webServerNetworkAccessControl);
            return this;
        }

        public Builder setWorkloadsConfig(WorkloadsConfigResponse workloadsConfig) {
            this.workloadsConfig = Objects.requireNonNull(workloadsConfig);
            return this;
        }

        public EnvironmentConfigResponse build() {
            return new EnvironmentConfigResponse(airflowUri, dagGcsPrefix, databaseConfig, encryptionConfig, environmentSize, gkeCluster, maintenanceWindow, nodeConfig, nodeCount, privateEnvironmentConfig, softwareConfig, webServerConfig, webServerNetworkAccessControl, workloadsConfig);
        }
    }
}
