// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.googlenative.bigquery_v2.outputs.ClusteringResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.ConnectionPropertyResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.DatasetReferenceResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.EncryptionConfigurationResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.QueryParameterResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.RangePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TableReferenceResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.TimePartitioningResponse;
import io.pulumi.googlenative.bigquery_v2.outputs.UserDefinedFunctionResourceResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class JobConfigurationQueryResponse {
    private final Boolean allowLargeResults;
    private final ClusteringResponse clustering;
    private final List<ConnectionPropertyResponse> connectionProperties;
    private final String createDisposition;
    private final Boolean createSession;
    private final DatasetReferenceResponse defaultDataset;
    private final EncryptionConfigurationResponse destinationEncryptionConfiguration;
    private final TableReferenceResponse destinationTable;
    private final Boolean flattenResults;
    private final Integer maximumBillingTier;
    private final String maximumBytesBilled;
    private final String parameterMode;
    private final String priority;
    private final String query;
    private final List<QueryParameterResponse> queryParameters;
    private final RangePartitioningResponse rangePartitioning;
    private final List<String> schemaUpdateOptions;
    private final Map<String,String> tableDefinitions;
    private final TimePartitioningResponse timePartitioning;
    private final Boolean useLegacySql;
    private final Boolean useQueryCache;
    private final List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;
    private final String writeDisposition;

    @OutputCustomType.Constructor({"allowLargeResults","clustering","connectionProperties","createDisposition","createSession","defaultDataset","destinationEncryptionConfiguration","destinationTable","flattenResults","maximumBillingTier","maximumBytesBilled","parameterMode","priority","query","queryParameters","rangePartitioning","schemaUpdateOptions","tableDefinitions","timePartitioning","useLegacySql","useQueryCache","userDefinedFunctionResources","writeDisposition"})
    private JobConfigurationQueryResponse(
        Boolean allowLargeResults,
        ClusteringResponse clustering,
        List<ConnectionPropertyResponse> connectionProperties,
        String createDisposition,
        Boolean createSession,
        DatasetReferenceResponse defaultDataset,
        EncryptionConfigurationResponse destinationEncryptionConfiguration,
        TableReferenceResponse destinationTable,
        Boolean flattenResults,
        Integer maximumBillingTier,
        String maximumBytesBilled,
        String parameterMode,
        String priority,
        String query,
        List<QueryParameterResponse> queryParameters,
        RangePartitioningResponse rangePartitioning,
        List<String> schemaUpdateOptions,
        Map<String,String> tableDefinitions,
        TimePartitioningResponse timePartitioning,
        Boolean useLegacySql,
        Boolean useQueryCache,
        List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources,
        String writeDisposition) {
        this.allowLargeResults = Objects.requireNonNull(allowLargeResults);
        this.clustering = Objects.requireNonNull(clustering);
        this.connectionProperties = Objects.requireNonNull(connectionProperties);
        this.createDisposition = Objects.requireNonNull(createDisposition);
        this.createSession = Objects.requireNonNull(createSession);
        this.defaultDataset = Objects.requireNonNull(defaultDataset);
        this.destinationEncryptionConfiguration = Objects.requireNonNull(destinationEncryptionConfiguration);
        this.destinationTable = Objects.requireNonNull(destinationTable);
        this.flattenResults = Objects.requireNonNull(flattenResults);
        this.maximumBillingTier = Objects.requireNonNull(maximumBillingTier);
        this.maximumBytesBilled = Objects.requireNonNull(maximumBytesBilled);
        this.parameterMode = Objects.requireNonNull(parameterMode);
        this.priority = Objects.requireNonNull(priority);
        this.query = Objects.requireNonNull(query);
        this.queryParameters = Objects.requireNonNull(queryParameters);
        this.rangePartitioning = Objects.requireNonNull(rangePartitioning);
        this.schemaUpdateOptions = Objects.requireNonNull(schemaUpdateOptions);
        this.tableDefinitions = Objects.requireNonNull(tableDefinitions);
        this.timePartitioning = Objects.requireNonNull(timePartitioning);
        this.useLegacySql = Objects.requireNonNull(useLegacySql);
        this.useQueryCache = Objects.requireNonNull(useQueryCache);
        this.userDefinedFunctionResources = Objects.requireNonNull(userDefinedFunctionResources);
        this.writeDisposition = Objects.requireNonNull(writeDisposition);
    }

    public Boolean getAllowLargeResults() {
        return this.allowLargeResults;
    }
    public ClusteringResponse getClustering() {
        return this.clustering;
    }
    public List<ConnectionPropertyResponse> getConnectionProperties() {
        return this.connectionProperties;
    }
    public String getCreateDisposition() {
        return this.createDisposition;
    }
    public Boolean getCreateSession() {
        return this.createSession;
    }
    public DatasetReferenceResponse getDefaultDataset() {
        return this.defaultDataset;
    }
    public EncryptionConfigurationResponse getDestinationEncryptionConfiguration() {
        return this.destinationEncryptionConfiguration;
    }
    public TableReferenceResponse getDestinationTable() {
        return this.destinationTable;
    }
    public Boolean getFlattenResults() {
        return this.flattenResults;
    }
    public Integer getMaximumBillingTier() {
        return this.maximumBillingTier;
    }
    public String getMaximumBytesBilled() {
        return this.maximumBytesBilled;
    }
    public String getParameterMode() {
        return this.parameterMode;
    }
    public String getPriority() {
        return this.priority;
    }
    public String getQuery() {
        return this.query;
    }
    public List<QueryParameterResponse> getQueryParameters() {
        return this.queryParameters;
    }
    public RangePartitioningResponse getRangePartitioning() {
        return this.rangePartitioning;
    }
    public List<String> getSchemaUpdateOptions() {
        return this.schemaUpdateOptions;
    }
    public Map<String,String> getTableDefinitions() {
        return this.tableDefinitions;
    }
    public TimePartitioningResponse getTimePartitioning() {
        return this.timePartitioning;
    }
    public Boolean getUseLegacySql() {
        return this.useLegacySql;
    }
    public Boolean getUseQueryCache() {
        return this.useQueryCache;
    }
    public List<UserDefinedFunctionResourceResponse> getUserDefinedFunctionResources() {
        return this.userDefinedFunctionResources;
    }
    public String getWriteDisposition() {
        return this.writeDisposition;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobConfigurationQueryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowLargeResults;
        private ClusteringResponse clustering;
        private List<ConnectionPropertyResponse> connectionProperties;
        private String createDisposition;
        private Boolean createSession;
        private DatasetReferenceResponse defaultDataset;
        private EncryptionConfigurationResponse destinationEncryptionConfiguration;
        private TableReferenceResponse destinationTable;
        private Boolean flattenResults;
        private Integer maximumBillingTier;
        private String maximumBytesBilled;
        private String parameterMode;
        private String priority;
        private String query;
        private List<QueryParameterResponse> queryParameters;
        private RangePartitioningResponse rangePartitioning;
        private List<String> schemaUpdateOptions;
        private Map<String,String> tableDefinitions;
        private TimePartitioningResponse timePartitioning;
        private Boolean useLegacySql;
        private Boolean useQueryCache;
        private List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources;
        private String writeDisposition;

        public Builder() {
    	      // Empty
        }

        public Builder(JobConfigurationQueryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLargeResults = defaults.allowLargeResults;
    	      this.clustering = defaults.clustering;
    	      this.connectionProperties = defaults.connectionProperties;
    	      this.createDisposition = defaults.createDisposition;
    	      this.createSession = defaults.createSession;
    	      this.defaultDataset = defaults.defaultDataset;
    	      this.destinationEncryptionConfiguration = defaults.destinationEncryptionConfiguration;
    	      this.destinationTable = defaults.destinationTable;
    	      this.flattenResults = defaults.flattenResults;
    	      this.maximumBillingTier = defaults.maximumBillingTier;
    	      this.maximumBytesBilled = defaults.maximumBytesBilled;
    	      this.parameterMode = defaults.parameterMode;
    	      this.priority = defaults.priority;
    	      this.query = defaults.query;
    	      this.queryParameters = defaults.queryParameters;
    	      this.rangePartitioning = defaults.rangePartitioning;
    	      this.schemaUpdateOptions = defaults.schemaUpdateOptions;
    	      this.tableDefinitions = defaults.tableDefinitions;
    	      this.timePartitioning = defaults.timePartitioning;
    	      this.useLegacySql = defaults.useLegacySql;
    	      this.useQueryCache = defaults.useQueryCache;
    	      this.userDefinedFunctionResources = defaults.userDefinedFunctionResources;
    	      this.writeDisposition = defaults.writeDisposition;
        }

        public Builder setAllowLargeResults(Boolean allowLargeResults) {
            this.allowLargeResults = Objects.requireNonNull(allowLargeResults);
            return this;
        }

        public Builder setClustering(ClusteringResponse clustering) {
            this.clustering = Objects.requireNonNull(clustering);
            return this;
        }

        public Builder setConnectionProperties(List<ConnectionPropertyResponse> connectionProperties) {
            this.connectionProperties = Objects.requireNonNull(connectionProperties);
            return this;
        }

        public Builder setCreateDisposition(String createDisposition) {
            this.createDisposition = Objects.requireNonNull(createDisposition);
            return this;
        }

        public Builder setCreateSession(Boolean createSession) {
            this.createSession = Objects.requireNonNull(createSession);
            return this;
        }

        public Builder setDefaultDataset(DatasetReferenceResponse defaultDataset) {
            this.defaultDataset = Objects.requireNonNull(defaultDataset);
            return this;
        }

        public Builder setDestinationEncryptionConfiguration(EncryptionConfigurationResponse destinationEncryptionConfiguration) {
            this.destinationEncryptionConfiguration = Objects.requireNonNull(destinationEncryptionConfiguration);
            return this;
        }

        public Builder setDestinationTable(TableReferenceResponse destinationTable) {
            this.destinationTable = Objects.requireNonNull(destinationTable);
            return this;
        }

        public Builder setFlattenResults(Boolean flattenResults) {
            this.flattenResults = Objects.requireNonNull(flattenResults);
            return this;
        }

        public Builder setMaximumBillingTier(Integer maximumBillingTier) {
            this.maximumBillingTier = Objects.requireNonNull(maximumBillingTier);
            return this;
        }

        public Builder setMaximumBytesBilled(String maximumBytesBilled) {
            this.maximumBytesBilled = Objects.requireNonNull(maximumBytesBilled);
            return this;
        }

        public Builder setParameterMode(String parameterMode) {
            this.parameterMode = Objects.requireNonNull(parameterMode);
            return this;
        }

        public Builder setPriority(String priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }

        public Builder setQuery(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }

        public Builder setQueryParameters(List<QueryParameterResponse> queryParameters) {
            this.queryParameters = Objects.requireNonNull(queryParameters);
            return this;
        }

        public Builder setRangePartitioning(RangePartitioningResponse rangePartitioning) {
            this.rangePartitioning = Objects.requireNonNull(rangePartitioning);
            return this;
        }

        public Builder setSchemaUpdateOptions(List<String> schemaUpdateOptions) {
            this.schemaUpdateOptions = Objects.requireNonNull(schemaUpdateOptions);
            return this;
        }

        public Builder setTableDefinitions(Map<String,String> tableDefinitions) {
            this.tableDefinitions = Objects.requireNonNull(tableDefinitions);
            return this;
        }

        public Builder setTimePartitioning(TimePartitioningResponse timePartitioning) {
            this.timePartitioning = Objects.requireNonNull(timePartitioning);
            return this;
        }

        public Builder setUseLegacySql(Boolean useLegacySql) {
            this.useLegacySql = Objects.requireNonNull(useLegacySql);
            return this;
        }

        public Builder setUseQueryCache(Boolean useQueryCache) {
            this.useQueryCache = Objects.requireNonNull(useQueryCache);
            return this;
        }

        public Builder setUserDefinedFunctionResources(List<UserDefinedFunctionResourceResponse> userDefinedFunctionResources) {
            this.userDefinedFunctionResources = Objects.requireNonNull(userDefinedFunctionResources);
            return this;
        }

        public Builder setWriteDisposition(String writeDisposition) {
            this.writeDisposition = Objects.requireNonNull(writeDisposition);
            return this;
        }

        public JobConfigurationQueryResponse build() {
            return new JobConfigurationQueryResponse(allowLargeResults, clustering, connectionProperties, createDisposition, createSession, defaultDataset, destinationEncryptionConfiguration, destinationTable, flattenResults, maximumBillingTier, maximumBytesBilled, parameterMode, priority, query, queryParameters, rangePartitioning, schemaUpdateOptions, tableDefinitions, timePartitioning, useLegacySql, useQueryCache, userDefinedFunctionResources, writeDisposition);
        }
    }
}
