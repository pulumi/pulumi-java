// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.bigquery_v2.inputs.DatasetAccessEntryResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.RoutineReferenceResponse;
import io.pulumi.googlenative.bigquery_v2.inputs.TableReferenceResponse;
import java.lang.String;
import java.util.Objects;


public final class DatasetAccessItemResponse extends io.pulumi.resources.InvokeArgs {

    public static final DatasetAccessItemResponse Empty = new DatasetAccessItemResponse();

    /**
     * [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
     * 
     */
    @Import(name="dataset", required=true)
      private final DatasetAccessEntryResponse dataset;

    public DatasetAccessEntryResponse getDataset() {
        return this.dataset;
    }

    /**
     * [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
     * 
     */
    @Import(name="domain", required=true)
      private final String domain;

    public String getDomain() {
        return this.domain;
    }

    /**
     * [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
     * 
     */
    @Import(name="groupByEmail", required=true)
      private final String groupByEmail;

    public String getGroupByEmail() {
        return this.groupByEmail;
    }

    /**
     * [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
     * 
     */
    @Import(name="iamMember", required=true)
      private final String iamMember;

    public String getIamMember() {
        return this.iamMember;
    }

    /**
     * [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
     * 
     */
    @Import(name="role", required=true)
      private final String role;

    public String getRole() {
        return this.role;
    }

    /**
     * [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
     * 
     */
    @Import(name="routine", required=true)
      private final RoutineReferenceResponse routine;

    public RoutineReferenceResponse getRoutine() {
        return this.routine;
    }

    /**
     * [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
     * 
     */
    @Import(name="specialGroup", required=true)
      private final String specialGroup;

    public String getSpecialGroup() {
        return this.specialGroup;
    }

    /**
     * [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
     * 
     */
    @Import(name="userByEmail", required=true)
      private final String userByEmail;

    public String getUserByEmail() {
        return this.userByEmail;
    }

    /**
     * [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
     * 
     */
    @Import(name="view", required=true)
      private final TableReferenceResponse view;

    public TableReferenceResponse getView() {
        return this.view;
    }

    public DatasetAccessItemResponse(
        DatasetAccessEntryResponse dataset,
        String domain,
        String groupByEmail,
        String iamMember,
        String role,
        RoutineReferenceResponse routine,
        String specialGroup,
        String userByEmail,
        TableReferenceResponse view) {
        this.dataset = Objects.requireNonNull(dataset, "expected parameter 'dataset' to be non-null");
        this.domain = Objects.requireNonNull(domain, "expected parameter 'domain' to be non-null");
        this.groupByEmail = Objects.requireNonNull(groupByEmail, "expected parameter 'groupByEmail' to be non-null");
        this.iamMember = Objects.requireNonNull(iamMember, "expected parameter 'iamMember' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.routine = Objects.requireNonNull(routine, "expected parameter 'routine' to be non-null");
        this.specialGroup = Objects.requireNonNull(specialGroup, "expected parameter 'specialGroup' to be non-null");
        this.userByEmail = Objects.requireNonNull(userByEmail, "expected parameter 'userByEmail' to be non-null");
        this.view = Objects.requireNonNull(view, "expected parameter 'view' to be non-null");
    }

    private DatasetAccessItemResponse() {
        this.dataset = null;
        this.domain = null;
        this.groupByEmail = null;
        this.iamMember = null;
        this.role = null;
        this.routine = null;
        this.specialGroup = null;
        this.userByEmail = null;
        this.view = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetAccessItemResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetAccessEntryResponse dataset;
        private String domain;
        private String groupByEmail;
        private String iamMember;
        private String role;
        private RoutineReferenceResponse routine;
        private String specialGroup;
        private String userByEmail;
        private TableReferenceResponse view;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetAccessItemResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.domain = defaults.domain;
    	      this.groupByEmail = defaults.groupByEmail;
    	      this.iamMember = defaults.iamMember;
    	      this.role = defaults.role;
    	      this.routine = defaults.routine;
    	      this.specialGroup = defaults.specialGroup;
    	      this.userByEmail = defaults.userByEmail;
    	      this.view = defaults.view;
        }

        public Builder dataset(DatasetAccessEntryResponse dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder groupByEmail(String groupByEmail) {
            this.groupByEmail = Objects.requireNonNull(groupByEmail);
            return this;
        }
        public Builder iamMember(String iamMember) {
            this.iamMember = Objects.requireNonNull(iamMember);
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder routine(RoutineReferenceResponse routine) {
            this.routine = Objects.requireNonNull(routine);
            return this;
        }
        public Builder specialGroup(String specialGroup) {
            this.specialGroup = Objects.requireNonNull(specialGroup);
            return this;
        }
        public Builder userByEmail(String userByEmail) {
            this.userByEmail = Objects.requireNonNull(userByEmail);
            return this;
        }
        public Builder view(TableReferenceResponse view) {
            this.view = Objects.requireNonNull(view);
            return this;
        }        public DatasetAccessItemResponse build() {
            return new DatasetAccessItemResponse(dataset, domain, groupByEmail, iamMember, role, routine, specialGroup, userByEmail, view);
        }
    }
}
