// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.retail_v2.inputs;

import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2AudienceResponse;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2ColorInfoResponse;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2FulfillmentInfoResponse;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2ImageResponse;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2PriceInfoResponse;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2PromotionResponse;
import io.pulumi.googlenative.retail_v2.inputs.GoogleCloudRetailV2RatingResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Product captures all metadata information of items to be recommended or searched.
 * 
 */
public final class GoogleCloudRetailV2ProductResponse extends io.pulumi.resources.InvokeArgs {

    public static final GoogleCloudRetailV2ProductResponse Empty = new GoogleCloudRetailV2ProductResponse();

    /**
     * Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer. For example: `{ "vendor": {"text": ["vendor123", "vendor456"]}, "lengths_cm": {"numbers":[2.3, 15.4]}, "heights_cm": {"numbers":[8.1, 6.4]} }`. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * Max entries count: 200. * The key must be a UTF-8 encoded string with a length limit of 128 characters. * For indexable attribute, the key must match the pattern: `a-zA-Z0-9*`. For example, `key0LikeThis` or `KEY_1_LIKE_THIS`. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed.
     * 
     */
    @InputImport(name="attributes", required=true)
      private final Map<String,String> attributes;

    public Map<String,String> getAttributes() {
        return this.attributes;
    }

    /**
     * The target group associated with a given audience (e.g. male, veterans, car owners, musicians, etc.) of the product.
     * 
     */
    @InputImport(name="audience", required=true)
      private final GoogleCloudRetailV2AudienceResponse audience;

    public GoogleCloudRetailV2AudienceResponse getAudience() {
        return this.audience;
    }

    /**
     * The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).
     * 
     */
    @InputImport(name="availability", required=true)
      private final String availability;

    public String getAvailability() {
        return this.availability;
    }

    /**
     * The available quantity of the item.
     * 
     */
    @InputImport(name="availableQuantity", required=true)
      private final Integer availableQuantity;

    public Integer getAvailableQuantity() {
        return this.availableQuantity;
    }

    /**
     * The timestamp when this Product becomes available for SearchService.Search.
     * 
     */
    @InputImport(name="availableTime", required=true)
      private final String availableTime;

    public String getAvailableTime() {
        return this.availableTime;
    }

    /**
     * The brands of the product. A maximum of 30 brands are allowed. Each brand must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [brand](https://support.google.com/merchants/answer/6324351). Schema.org property [Product.brand](https://schema.org/brand).
     * 
     */
    @InputImport(name="brands", required=true)
      private final List<String> brands;

    public List<String> getBrands() {
        return this.brands;
    }

    /**
     * Product categories. This field is repeated for supporting one product belonging to several parallel categories. Strongly recommended using the full path for better search / recommendation quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, please replace it with other character(s). For example, if a shoes product belongs to both ["Shoes & Accessories" -> "Shoes"] and ["Sports & Fitness" -> "Athletic Clothing" -> "Shoes"], it could be represented as: "categories": [ "Shoes & Accessories > Shoes", "Sports & Fitness > Athletic Clothing > Shoes" ] Must be set for Type.PRIMARY Product otherwise an INVALID_ARGUMENT error is returned. At most 250 values are allowed per Product. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property google_product_category. Schema.org property [Product.category] (https://schema.org/category). [mc_google_product_category]: https://support.google.com/merchants/answer/6324436
     * 
     */
    @InputImport(name="categories", required=true)
      private final List<String> categories;

    public List<String> getCategories() {
        return this.categories;
    }

    /**
     * The id of the collection members when type is Type.COLLECTION. Non-existent product ids are allowed. The type of the members must be either Type.PRIMARY or Type.VARIANT otherwise and INVALID_ARGUMENT error is thrown. Should not set it for other types. A maximum of 1000 values are allowed. Otherwise, an INVALID_ARGUMENT error is return.
     * 
     */
    @InputImport(name="collectionMemberIds", required=true)
      private final List<String> collectionMemberIds;

    public List<String> getCollectionMemberIds() {
        return this.collectionMemberIds;
    }

    /**
     * The color of the product. Corresponding properties: Google Merchant Center property [color](https://support.google.com/merchants/answer/6324487). Schema.org property [Product.color](https://schema.org/color).
     * 
     */
    @InputImport(name="colorInfo", required=true)
      private final GoogleCloudRetailV2ColorInfoResponse colorInfo;

    public GoogleCloudRetailV2ColorInfoResponse getColorInfo() {
        return this.colorInfo;
    }

    /**
     * The condition of the product. Strongly encouraged to use the standard values: "new", "refurbished", "used". A maximum of 1 value is allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [condition](https://support.google.com/merchants/answer/6324469). Schema.org property [Offer.itemCondition](https://schema.org/itemCondition).
     * 
     */
    @InputImport(name="conditions", required=true)
      private final List<String> conditions;

    public List<String> getConditions() {
        return this.conditions;
    }

    /**
     * Product description. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [description](https://support.google.com/merchants/answer/6324468). Schema.org property [Product.description](https://schema.org/description).
     * 
     */
    @InputImport(name="description", required=true)
      private final String description;

    public String getDescription() {
        return this.description;
    }

    /**
     * The timestamp when this product becomes unavailable for SearchService.Search. If it is set, the Product is not available for SearchService.Search after expire_time. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts. expire_time must be later than available_time and publish_time, otherwise an INVALID_ARGUMENT error is thrown. Corresponding properties: Google Merchant Center property [expiration_date](https://support.google.com/merchants/answer/6324499).
     * 
     */
    @InputImport(name="expireTime", required=true)
      private final String expireTime;

    public String getExpireTime() {
        return this.expireTime;
    }

    /**
     * Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods. All the elements must have distinct FulfillmentInfo.type. Otherwise, an INVALID_ARGUMENT error is returned.
     * 
     */
    @InputImport(name="fulfillmentInfo", required=true)
      private final List<GoogleCloudRetailV2FulfillmentInfoResponse> fulfillmentInfo;

    public List<GoogleCloudRetailV2FulfillmentInfoResponse> getFulfillmentInfo() {
        return this.fulfillmentInfo;
    }

    /**
     * The Global Trade Item Number (GTIN) of the product. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. This field must be a Unigram. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [gtin](https://support.google.com/merchants/answer/6324461). Schema.org property [Product.isbn](https://schema.org/isbn), [Product.gtin8](https://schema.org/gtin8), [Product.gtin12](https://schema.org/gtin12), [Product.gtin13](https://schema.org/gtin13), or [Product.gtin14](https://schema.org/gtin14). If the value is not a valid GTIN, an INVALID_ARGUMENT error is returned.
     * 
     */
    @InputImport(name="gtin", required=true)
      private final String gtin;

    public String getGtin() {
        return this.gtin;
    }

    /**
     * Product images for the product.Highly recommended to put the main image to the first. A maximum of 300 images are allowed. Corresponding properties: Google Merchant Center property [image_link](https://support.google.com/merchants/answer/6324350). Schema.org property [Product.image](https://schema.org/image).
     * 
     */
    @InputImport(name="images", required=true)
      private final List<GoogleCloudRetailV2ImageResponse> images;

    public List<GoogleCloudRetailV2ImageResponse> getImages() {
        return this.images;
    }

    /**
     * Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). For product prediction, this field is ignored and the model automatically detects the text language. The Product can include text in different languages, but duplicating Products to provide text in multiple languages can result in degraded model performance. For product search this field is in use. It defaults to "en-US" if unset.
     * 
     */
    @InputImport(name="languageCode", required=true)
      private final String languageCode;

    public String getLanguageCode() {
        return this.languageCode;
    }

    /**
     * The material of the product. For example, "leather", "wooden". A maximum of 20 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [material](https://support.google.com/merchants/answer/6324410). Schema.org property [Product.material](https://schema.org/material).
     * 
     */
    @InputImport(name="materials", required=true)
      private final List<String> materials;

    public List<String> getMaterials() {
        return this.materials;
    }

    /**
     * Immutable. Full resource name of the product, such as `projects/*{@literal /}locations/global/catalogs/default_catalog/branches/default_branch/products/product_id`.
     * 
     */
    @InputImport(name="name", required=true)
      private final String name;

    public String getName() {
        return this.name;
    }

    /**
     * The pattern or graphic print of the product. For example, "striped", "polka dot", "paisley". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [pattern](https://support.google.com/merchants/answer/6324483). Schema.org property [Product.pattern](https://schema.org/pattern).
     * 
     */
    @InputImport(name="patterns", required=true)
      private final List<String> patterns;

    public List<String> getPatterns() {
        return this.patterns;
    }

    /**
     * Product price and cost information. Corresponding properties: Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371).
     * 
     */
    @InputImport(name="priceInfo", required=true)
      private final GoogleCloudRetailV2PriceInfoResponse priceInfo;

    public GoogleCloudRetailV2PriceInfoResponse getPriceInfo() {
        return this.priceInfo;
    }

    /**
     * Variant group identifier. Must be an id, with the same parent branch with this product. Otherwise, an error is thrown. For Type.PRIMARY Products, this field can only be empty or set to the same value as id. For VARIANT Products, this field cannot be empty. A maximum of 2,000 products are allowed to share the same Type.PRIMARY Product. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [item_group_id](https://support.google.com/merchants/answer/6324507). Schema.org property [Product.inProductGroupWithID](https://schema.org/inProductGroupWithID).
     * 
     */
    @InputImport(name="primaryProductId", required=true)
      private final String primaryProductId;

    public String getPrimaryProductId() {
        return this.primaryProductId;
    }

    /**
     * The promotions applied to the product. A maximum of 10 values are allowed per Product. Only Promotion.promotion_id will be used, other fields will be ignored if set.
     * 
     */
    @InputImport(name="promotions", required=true)
      private final List<GoogleCloudRetailV2PromotionResponse> promotions;

    public List<GoogleCloudRetailV2PromotionResponse> getPromotions() {
        return this.promotions;
    }

    /**
     * The timestamp when the product is published by the retailer for the first time, which indicates the freshness of the products. Note that this field is different from available_time, given it purely describes product freshness regardless of when it is available on search and recommendation.
     * 
     */
    @InputImport(name="publishTime", required=true)
      private final String publishTime;

    public String getPublishTime() {
        return this.publishTime;
    }

    /**
     * The rating of this product.
     * 
     */
    @InputImport(name="rating", required=true)
      private final GoogleCloudRetailV2RatingResponse rating;

    public GoogleCloudRetailV2RatingResponse getRating() {
        return this.rating;
    }

    /**
     * Indicates which fields in the Products are returned in SearchResponse. Supported fields for all types: * audience * availability * brands * color_info * conditions * gtin * materials * name * patterns * price_info * rating * sizes * title * uri Supported fields only for Type.PRIMARY and Type.COLLECTION: * categories * description * images Supported fields only for Type.VARIANT: * Only the first image in images To mark attributes as retrievable, include paths of the form "attributes.key" where "key" is the key of a custom attribute, as specified in attributes. For Type.PRIMARY and Type.COLLECTION, the following fields are always returned in SearchResponse by default: * name For Type.VARIANT, the following fields are always returned in by default: * name * color_info Maximum number of paths is 30. Otherwise, an INVALID_ARGUMENT error is returned. Note: Returning more fields in SearchResponse may increase response payload size and serving latency.
     * 
     */
    @InputImport(name="retrievableFields", required=true)
      private final String retrievableFields;

    public String getRetrievableFields() {
        return this.retrievableFields;
    }

    /**
     * The size of the product. To represent different size systems or size types, consider using this format: [[[size_system:]size_type:]size_value]. For example, in "US:MENS:M", "US" represents size system; "MENS" represents size type; "M" represents size value. In "GIRLS:27", size system is empty; "GIRLS" represents size type; "27" represents size value. In "32 inches", both size system and size type are empty, while size value is "32 inches". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [size](https://support.google.com/merchants/answer/6324492), [size_type](https://support.google.com/merchants/answer/6324497), and [size_system](https://support.google.com/merchants/answer/6324502). Schema.org property [Product.size](https://schema.org/size).
     * 
     */
    @InputImport(name="sizes", required=true)
      private final List<String> sizes;

    public List<String> getSizes() {
        return this.sizes;
    }

    /**
     * Custom tags associated with the product. At most 250 values are allowed per Product. This value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This tag can be used for filtering recommendation results by passing the tag as part of the PredictRequest.filter. Corresponding properties: Google Merchant Center property [custom_label_0–4](https://support.google.com/merchants/answer/6324473).
     * 
     */
    @InputImport(name="tags", required=true)
      private final List<String> tags;

    public List<String> getTags() {
        return this.tags;
    }

    /**
     * Product title. This field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [title](https://support.google.com/merchants/answer/6324415). Schema.org property [Product.name](https://schema.org/name).
     * 
     */
    @InputImport(name="title", required=true)
      private final String title;

    public String getTitle() {
        return this.title;
    }

    /**
     * Input only. The TTL (time to live) of the product. If it is set, it must be a non-negative value, and expire_time is set as current timestamp plus ttl. The derived expire_time is returned in the output and ttl is left blank when retrieving the Product. If it is set, the product is not available for SearchService.Search after current timestamp plus ttl. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts.
     * 
     */
    @InputImport(name="ttl", required=true)
      private final String ttl;

    public String getTtl() {
        return this.ttl;
    }

    /**
     * Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.
     * 
     */
    @InputImport(name="type", required=true)
      private final String type;

    public String getType() {
        return this.type;
    }

    /**
     * Canonical URL directly linking to the product detail page. It is strongly recommended to provide a valid uri for the product, otherwise the service performance could be significantly degraded. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [link](https://support.google.com/merchants/answer/6324416). Schema.org property [Offer.url](https://schema.org/url).
     * 
     */
    @InputImport(name="uri", required=true)
      private final String uri;

    public String getUri() {
        return this.uri;
    }

    /**
     * Product variants grouped together on primary product which share similar product attributes. It's automatically grouped by primary_product_id for all the product variants. Only populated for Type.PRIMARY Products. Note: This field is OUTPUT_ONLY for ProductService.GetProduct. Do not set this field in API requests.
     * 
     */
    @InputImport(name="variants", required=true)
      private final List<GoogleCloudRetailV2ProductResponse> variants;

    public List<GoogleCloudRetailV2ProductResponse> getVariants() {
        return this.variants;
    }

    public GoogleCloudRetailV2ProductResponse(
        Map<String,String> attributes,
        GoogleCloudRetailV2AudienceResponse audience,
        String availability,
        Integer availableQuantity,
        String availableTime,
        List<String> brands,
        List<String> categories,
        List<String> collectionMemberIds,
        GoogleCloudRetailV2ColorInfoResponse colorInfo,
        List<String> conditions,
        String description,
        String expireTime,
        List<GoogleCloudRetailV2FulfillmentInfoResponse> fulfillmentInfo,
        String gtin,
        List<GoogleCloudRetailV2ImageResponse> images,
        String languageCode,
        List<String> materials,
        String name,
        List<String> patterns,
        GoogleCloudRetailV2PriceInfoResponse priceInfo,
        String primaryProductId,
        List<GoogleCloudRetailV2PromotionResponse> promotions,
        String publishTime,
        GoogleCloudRetailV2RatingResponse rating,
        String retrievableFields,
        List<String> sizes,
        List<String> tags,
        String title,
        String ttl,
        String type,
        String uri,
        List<GoogleCloudRetailV2ProductResponse> variants) {
        this.attributes = Objects.requireNonNull(attributes, "expected parameter 'attributes' to be non-null");
        this.audience = Objects.requireNonNull(audience, "expected parameter 'audience' to be non-null");
        this.availability = Objects.requireNonNull(availability, "expected parameter 'availability' to be non-null");
        this.availableQuantity = Objects.requireNonNull(availableQuantity, "expected parameter 'availableQuantity' to be non-null");
        this.availableTime = Objects.requireNonNull(availableTime, "expected parameter 'availableTime' to be non-null");
        this.brands = Objects.requireNonNull(brands, "expected parameter 'brands' to be non-null");
        this.categories = Objects.requireNonNull(categories, "expected parameter 'categories' to be non-null");
        this.collectionMemberIds = Objects.requireNonNull(collectionMemberIds, "expected parameter 'collectionMemberIds' to be non-null");
        this.colorInfo = Objects.requireNonNull(colorInfo, "expected parameter 'colorInfo' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.expireTime = Objects.requireNonNull(expireTime, "expected parameter 'expireTime' to be non-null");
        this.fulfillmentInfo = Objects.requireNonNull(fulfillmentInfo, "expected parameter 'fulfillmentInfo' to be non-null");
        this.gtin = Objects.requireNonNull(gtin, "expected parameter 'gtin' to be non-null");
        this.images = Objects.requireNonNull(images, "expected parameter 'images' to be non-null");
        this.languageCode = Objects.requireNonNull(languageCode, "expected parameter 'languageCode' to be non-null");
        this.materials = Objects.requireNonNull(materials, "expected parameter 'materials' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.patterns = Objects.requireNonNull(patterns, "expected parameter 'patterns' to be non-null");
        this.priceInfo = Objects.requireNonNull(priceInfo, "expected parameter 'priceInfo' to be non-null");
        this.primaryProductId = Objects.requireNonNull(primaryProductId, "expected parameter 'primaryProductId' to be non-null");
        this.promotions = Objects.requireNonNull(promotions, "expected parameter 'promotions' to be non-null");
        this.publishTime = Objects.requireNonNull(publishTime, "expected parameter 'publishTime' to be non-null");
        this.rating = Objects.requireNonNull(rating, "expected parameter 'rating' to be non-null");
        this.retrievableFields = Objects.requireNonNull(retrievableFields, "expected parameter 'retrievableFields' to be non-null");
        this.sizes = Objects.requireNonNull(sizes, "expected parameter 'sizes' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
        this.ttl = Objects.requireNonNull(ttl, "expected parameter 'ttl' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.uri = Objects.requireNonNull(uri, "expected parameter 'uri' to be non-null");
        this.variants = Objects.requireNonNull(variants, "expected parameter 'variants' to be non-null");
    }

    private GoogleCloudRetailV2ProductResponse() {
        this.attributes = Map.of();
        this.audience = null;
        this.availability = null;
        this.availableQuantity = null;
        this.availableTime = null;
        this.brands = List.of();
        this.categories = List.of();
        this.collectionMemberIds = List.of();
        this.colorInfo = null;
        this.conditions = List.of();
        this.description = null;
        this.expireTime = null;
        this.fulfillmentInfo = List.of();
        this.gtin = null;
        this.images = List.of();
        this.languageCode = null;
        this.materials = List.of();
        this.name = null;
        this.patterns = List.of();
        this.priceInfo = null;
        this.primaryProductId = null;
        this.promotions = List.of();
        this.publishTime = null;
        this.rating = null;
        this.retrievableFields = null;
        this.sizes = List.of();
        this.tags = List.of();
        this.title = null;
        this.ttl = null;
        this.type = null;
        this.uri = null;
        this.variants = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRetailV2ProductResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> attributes;
        private GoogleCloudRetailV2AudienceResponse audience;
        private String availability;
        private Integer availableQuantity;
        private String availableTime;
        private List<String> brands;
        private List<String> categories;
        private List<String> collectionMemberIds;
        private GoogleCloudRetailV2ColorInfoResponse colorInfo;
        private List<String> conditions;
        private String description;
        private String expireTime;
        private List<GoogleCloudRetailV2FulfillmentInfoResponse> fulfillmentInfo;
        private String gtin;
        private List<GoogleCloudRetailV2ImageResponse> images;
        private String languageCode;
        private List<String> materials;
        private String name;
        private List<String> patterns;
        private GoogleCloudRetailV2PriceInfoResponse priceInfo;
        private String primaryProductId;
        private List<GoogleCloudRetailV2PromotionResponse> promotions;
        private String publishTime;
        private GoogleCloudRetailV2RatingResponse rating;
        private String retrievableFields;
        private List<String> sizes;
        private List<String> tags;
        private String title;
        private String ttl;
        private String type;
        private String uri;
        private List<GoogleCloudRetailV2ProductResponse> variants;

        public Builder() {
    	      // Empty
        }

        public Builder(GoogleCloudRetailV2ProductResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.audience = defaults.audience;
    	      this.availability = defaults.availability;
    	      this.availableQuantity = defaults.availableQuantity;
    	      this.availableTime = defaults.availableTime;
    	      this.brands = defaults.brands;
    	      this.categories = defaults.categories;
    	      this.collectionMemberIds = defaults.collectionMemberIds;
    	      this.colorInfo = defaults.colorInfo;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.expireTime = defaults.expireTime;
    	      this.fulfillmentInfo = defaults.fulfillmentInfo;
    	      this.gtin = defaults.gtin;
    	      this.images = defaults.images;
    	      this.languageCode = defaults.languageCode;
    	      this.materials = defaults.materials;
    	      this.name = defaults.name;
    	      this.patterns = defaults.patterns;
    	      this.priceInfo = defaults.priceInfo;
    	      this.primaryProductId = defaults.primaryProductId;
    	      this.promotions = defaults.promotions;
    	      this.publishTime = defaults.publishTime;
    	      this.rating = defaults.rating;
    	      this.retrievableFields = defaults.retrievableFields;
    	      this.sizes = defaults.sizes;
    	      this.tags = defaults.tags;
    	      this.title = defaults.title;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
    	      this.variants = defaults.variants;
        }

        public Builder setAttributes(Map<String,String> attributes) {
            this.attributes = Objects.requireNonNull(attributes);
            return this;
        }

        public Builder setAudience(GoogleCloudRetailV2AudienceResponse audience) {
            this.audience = Objects.requireNonNull(audience);
            return this;
        }

        public Builder setAvailability(String availability) {
            this.availability = Objects.requireNonNull(availability);
            return this;
        }

        public Builder setAvailableQuantity(Integer availableQuantity) {
            this.availableQuantity = Objects.requireNonNull(availableQuantity);
            return this;
        }

        public Builder setAvailableTime(String availableTime) {
            this.availableTime = Objects.requireNonNull(availableTime);
            return this;
        }

        public Builder setBrands(List<String> brands) {
            this.brands = Objects.requireNonNull(brands);
            return this;
        }

        public Builder setCategories(List<String> categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }

        public Builder setCollectionMemberIds(List<String> collectionMemberIds) {
            this.collectionMemberIds = Objects.requireNonNull(collectionMemberIds);
            return this;
        }

        public Builder setColorInfo(GoogleCloudRetailV2ColorInfoResponse colorInfo) {
            this.colorInfo = Objects.requireNonNull(colorInfo);
            return this;
        }

        public Builder setConditions(List<String> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setExpireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }

        public Builder setFulfillmentInfo(List<GoogleCloudRetailV2FulfillmentInfoResponse> fulfillmentInfo) {
            this.fulfillmentInfo = Objects.requireNonNull(fulfillmentInfo);
            return this;
        }

        public Builder setGtin(String gtin) {
            this.gtin = Objects.requireNonNull(gtin);
            return this;
        }

        public Builder setImages(List<GoogleCloudRetailV2ImageResponse> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }

        public Builder setLanguageCode(String languageCode) {
            this.languageCode = Objects.requireNonNull(languageCode);
            return this;
        }

        public Builder setMaterials(List<String> materials) {
            this.materials = Objects.requireNonNull(materials);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPatterns(List<String> patterns) {
            this.patterns = Objects.requireNonNull(patterns);
            return this;
        }

        public Builder setPriceInfo(GoogleCloudRetailV2PriceInfoResponse priceInfo) {
            this.priceInfo = Objects.requireNonNull(priceInfo);
            return this;
        }

        public Builder setPrimaryProductId(String primaryProductId) {
            this.primaryProductId = Objects.requireNonNull(primaryProductId);
            return this;
        }

        public Builder setPromotions(List<GoogleCloudRetailV2PromotionResponse> promotions) {
            this.promotions = Objects.requireNonNull(promotions);
            return this;
        }

        public Builder setPublishTime(String publishTime) {
            this.publishTime = Objects.requireNonNull(publishTime);
            return this;
        }

        public Builder setRating(GoogleCloudRetailV2RatingResponse rating) {
            this.rating = Objects.requireNonNull(rating);
            return this;
        }

        public Builder setRetrievableFields(String retrievableFields) {
            this.retrievableFields = Objects.requireNonNull(retrievableFields);
            return this;
        }

        public Builder setSizes(List<String> sizes) {
            this.sizes = Objects.requireNonNull(sizes);
            return this;
        }

        public Builder setTags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setTitle(String title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public Builder setTtl(String ttl) {
            this.ttl = Objects.requireNonNull(ttl);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setUri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }

        public Builder setVariants(List<GoogleCloudRetailV2ProductResponse> variants) {
            this.variants = Objects.requireNonNull(variants);
            return this;
        }
        public GoogleCloudRetailV2ProductResponse build() {
            return new GoogleCloudRetailV2ProductResponse(attributes, audience, availability, availableQuantity, availableTime, brands, categories, collectionMemberIds, colorInfo, conditions, description, expireTime, fulfillmentInfo, gtin, images, languageCode, materials, name, patterns, priceInfo, primaryProductId, promotions, publishTime, rating, retrievableFields, sizes, tags, title, ttl, type, uri, variants);
        }
    }
}
