// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.gameservices_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.googlenative.gameservices_v1.inputs.CustomFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
 * 
 */
public final class CounterOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final CounterOptionsArgs Empty = new CounterOptionsArgs();

    /**
     * Custom fields.
     * 
     */
    @Import(name="customFields")
      private final @Nullable Output<List<CustomFieldArgs>> customFields;

    public Output<List<CustomFieldArgs>> getCustomFields() {
        return this.customFields == null ? Output.empty() : this.customFields;
    }

    /**
     * The field value to attribute.
     * 
     */
    @Import(name="field")
      private final @Nullable Output<String> field;

    public Output<String> getField() {
        return this.field == null ? Output.empty() : this.field;
    }

    /**
     * The metric to update.
     * 
     */
    @Import(name="metric")
      private final @Nullable Output<String> metric;

    public Output<String> getMetric() {
        return this.metric == null ? Output.empty() : this.metric;
    }

    public CounterOptionsArgs(
        @Nullable Output<List<CustomFieldArgs>> customFields,
        @Nullable Output<String> field,
        @Nullable Output<String> metric) {
        this.customFields = customFields;
        this.field = field;
        this.metric = metric;
    }

    private CounterOptionsArgs() {
        this.customFields = Output.empty();
        this.field = Output.empty();
        this.metric = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CounterOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<CustomFieldArgs>> customFields;
        private @Nullable Output<String> field;
        private @Nullable Output<String> metric;

        public Builder() {
    	      // Empty
        }

        public Builder(CounterOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customFields = defaults.customFields;
    	      this.field = defaults.field;
    	      this.metric = defaults.metric;
        }

        public Builder customFields(@Nullable Output<List<CustomFieldArgs>> customFields) {
            this.customFields = customFields;
            return this;
        }
        public Builder customFields(@Nullable List<CustomFieldArgs> customFields) {
            this.customFields = Output.ofNullable(customFields);
            return this;
        }
        public Builder customFields(CustomFieldArgs... customFields) {
            return customFields(List.of(customFields));
        }
        public Builder field(@Nullable Output<String> field) {
            this.field = field;
            return this;
        }
        public Builder field(@Nullable String field) {
            this.field = Output.ofNullable(field);
            return this;
        }
        public Builder metric(@Nullable Output<String> metric) {
            this.metric = metric;
            return this;
        }
        public Builder metric(@Nullable String metric) {
            this.metric = Output.ofNullable(metric);
            return this;
        }        public CounterOptionsArgs build() {
            return new CounterOptionsArgs(customFields, field, metric);
        }
    }
}
