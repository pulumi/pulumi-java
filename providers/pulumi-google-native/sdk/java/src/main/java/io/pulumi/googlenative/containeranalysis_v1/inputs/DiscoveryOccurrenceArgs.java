// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.containeranalysis_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.googlenative.containeranalysis_v1.enums.DiscoveryOccurrenceAnalysisStatus;
import io.pulumi.googlenative.containeranalysis_v1.enums.DiscoveryOccurrenceContinuousAnalysis;
import io.pulumi.googlenative.containeranalysis_v1.inputs.StatusArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Provides information about the analysis status of a discovered resource.
 * 
 */
public final class DiscoveryOccurrenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final DiscoveryOccurrenceArgs Empty = new DiscoveryOccurrenceArgs();

    /**
     * The status of discovery for the resource.
     * 
     */
    @InputImport(name="analysisStatus")
      private final @Nullable Input<DiscoveryOccurrenceAnalysisStatus> analysisStatus;

    public Input<DiscoveryOccurrenceAnalysisStatus> getAnalysisStatus() {
        return this.analysisStatus == null ? Input.empty() : this.analysisStatus;
    }

    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     * 
     */
    @InputImport(name="analysisStatusError")
      private final @Nullable Input<StatusArgs> analysisStatusError;

    public Input<StatusArgs> getAnalysisStatusError() {
        return this.analysisStatusError == null ? Input.empty() : this.analysisStatusError;
    }

    /**
     * Whether the resource is continuously analyzed.
     * 
     */
    @InputImport(name="continuousAnalysis")
      private final @Nullable Input<DiscoveryOccurrenceContinuousAnalysis> continuousAnalysis;

    public Input<DiscoveryOccurrenceContinuousAnalysis> getContinuousAnalysis() {
        return this.continuousAnalysis == null ? Input.empty() : this.continuousAnalysis;
    }

    /**
     * The CPE of the resource being scanned.
     * 
     */
    @InputImport(name="cpe")
      private final @Nullable Input<String> cpe;

    public Input<String> getCpe() {
        return this.cpe == null ? Input.empty() : this.cpe;
    }

    /**
     * The last time this resource was scanned.
     * 
     */
    @InputImport(name="lastScanTime")
      private final @Nullable Input<String> lastScanTime;

    public Input<String> getLastScanTime() {
        return this.lastScanTime == null ? Input.empty() : this.lastScanTime;
    }

    public DiscoveryOccurrenceArgs(
        @Nullable Input<DiscoveryOccurrenceAnalysisStatus> analysisStatus,
        @Nullable Input<StatusArgs> analysisStatusError,
        @Nullable Input<DiscoveryOccurrenceContinuousAnalysis> continuousAnalysis,
        @Nullable Input<String> cpe,
        @Nullable Input<String> lastScanTime) {
        this.analysisStatus = analysisStatus;
        this.analysisStatusError = analysisStatusError;
        this.continuousAnalysis = continuousAnalysis;
        this.cpe = cpe;
        this.lastScanTime = lastScanTime;
    }

    private DiscoveryOccurrenceArgs() {
        this.analysisStatus = Input.empty();
        this.analysisStatusError = Input.empty();
        this.continuousAnalysis = Input.empty();
        this.cpe = Input.empty();
        this.lastScanTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiscoveryOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<DiscoveryOccurrenceAnalysisStatus> analysisStatus;
        private @Nullable Input<StatusArgs> analysisStatusError;
        private @Nullable Input<DiscoveryOccurrenceContinuousAnalysis> continuousAnalysis;
        private @Nullable Input<String> cpe;
        private @Nullable Input<String> lastScanTime;

        public Builder() {
    	      // Empty
        }

        public Builder(DiscoveryOccurrenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisStatus = defaults.analysisStatus;
    	      this.analysisStatusError = defaults.analysisStatusError;
    	      this.continuousAnalysis = defaults.continuousAnalysis;
    	      this.cpe = defaults.cpe;
    	      this.lastScanTime = defaults.lastScanTime;
        }

        public Builder setAnalysisStatus(@Nullable Input<DiscoveryOccurrenceAnalysisStatus> analysisStatus) {
            this.analysisStatus = analysisStatus;
            return this;
        }

        public Builder setAnalysisStatus(@Nullable DiscoveryOccurrenceAnalysisStatus analysisStatus) {
            this.analysisStatus = Input.ofNullable(analysisStatus);
            return this;
        }

        public Builder setAnalysisStatusError(@Nullable Input<StatusArgs> analysisStatusError) {
            this.analysisStatusError = analysisStatusError;
            return this;
        }

        public Builder setAnalysisStatusError(@Nullable StatusArgs analysisStatusError) {
            this.analysisStatusError = Input.ofNullable(analysisStatusError);
            return this;
        }

        public Builder setContinuousAnalysis(@Nullable Input<DiscoveryOccurrenceContinuousAnalysis> continuousAnalysis) {
            this.continuousAnalysis = continuousAnalysis;
            return this;
        }

        public Builder setContinuousAnalysis(@Nullable DiscoveryOccurrenceContinuousAnalysis continuousAnalysis) {
            this.continuousAnalysis = Input.ofNullable(continuousAnalysis);
            return this;
        }

        public Builder setCpe(@Nullable Input<String> cpe) {
            this.cpe = cpe;
            return this;
        }

        public Builder setCpe(@Nullable String cpe) {
            this.cpe = Input.ofNullable(cpe);
            return this;
        }

        public Builder setLastScanTime(@Nullable Input<String> lastScanTime) {
            this.lastScanTime = lastScanTime;
            return this;
        }

        public Builder setLastScanTime(@Nullable String lastScanTime) {
            this.lastScanTime = Input.ofNullable(lastScanTime);
            return this;
        }
        public DiscoveryOccurrenceArgs build() {
            return new DiscoveryOccurrenceArgs(analysisStatus, analysisStatusError, continuousAnalysis, cpe, lastScanTime);
        }
    }
}
