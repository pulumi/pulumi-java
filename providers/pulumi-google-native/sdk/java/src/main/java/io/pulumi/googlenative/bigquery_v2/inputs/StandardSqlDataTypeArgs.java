// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.googlenative.bigquery_v2.enums.StandardSqlDataTypeTypeKind;
import io.pulumi.googlenative.bigquery_v2.inputs.StandardSqlStructTypeArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind: "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typekind": "DATE"} } } ] } }
 * 
 */
public final class StandardSqlDataTypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final StandardSqlDataTypeArgs Empty = new StandardSqlDataTypeArgs();

    /**
     * The type of the array's elements, if type_kind = "ARRAY".
     * 
     */
    @Import(name="arrayElementType")
      private final @Nullable Output<StandardSqlDataTypeArgs> arrayElementType;

    public Output<StandardSqlDataTypeArgs> arrayElementType() {
        return this.arrayElementType == null ? Codegen.empty() : this.arrayElementType;
    }

    /**
     * The fields of this struct, in order, if type_kind = "STRUCT".
     * 
     */
    @Import(name="structType")
      private final @Nullable Output<StandardSqlStructTypeArgs> structType;

    public Output<StandardSqlStructTypeArgs> structType() {
        return this.structType == null ? Codegen.empty() : this.structType;
    }

    /**
     * The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
     * 
     */
    @Import(name="typeKind", required=true)
      private final Output<StandardSqlDataTypeTypeKind> typeKind;

    public Output<StandardSqlDataTypeTypeKind> typeKind() {
        return this.typeKind;
    }

    public StandardSqlDataTypeArgs(
        @Nullable Output<StandardSqlDataTypeArgs> arrayElementType,
        @Nullable Output<StandardSqlStructTypeArgs> structType,
        Output<StandardSqlDataTypeTypeKind> typeKind) {
        this.arrayElementType = arrayElementType;
        this.structType = structType;
        this.typeKind = Objects.requireNonNull(typeKind, "expected parameter 'typeKind' to be non-null");
    }

    private StandardSqlDataTypeArgs() {
        this.arrayElementType = Codegen.empty();
        this.structType = Codegen.empty();
        this.typeKind = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardSqlDataTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<StandardSqlDataTypeArgs> arrayElementType;
        private @Nullable Output<StandardSqlStructTypeArgs> structType;
        private Output<StandardSqlDataTypeTypeKind> typeKind;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardSqlDataTypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arrayElementType = defaults.arrayElementType;
    	      this.structType = defaults.structType;
    	      this.typeKind = defaults.typeKind;
        }

        public Builder arrayElementType(@Nullable Output<StandardSqlDataTypeArgs> arrayElementType) {
            this.arrayElementType = arrayElementType;
            return this;
        }
        public Builder arrayElementType(@Nullable StandardSqlDataTypeArgs arrayElementType) {
            this.arrayElementType = Codegen.ofNullable(arrayElementType);
            return this;
        }
        public Builder structType(@Nullable Output<StandardSqlStructTypeArgs> structType) {
            this.structType = structType;
            return this;
        }
        public Builder structType(@Nullable StandardSqlStructTypeArgs structType) {
            this.structType = Codegen.ofNullable(structType);
            return this;
        }
        public Builder typeKind(Output<StandardSqlDataTypeTypeKind> typeKind) {
            this.typeKind = Objects.requireNonNull(typeKind);
            return this;
        }
        public Builder typeKind(StandardSqlDataTypeTypeKind typeKind) {
            this.typeKind = Output.of(Objects.requireNonNull(typeKind));
            return this;
        }        public StandardSqlDataTypeArgs build() {
            return new StandardSqlDataTypeArgs(arrayElementType, structType, typeKind);
        }
    }
}
