// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.bigquery_v2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.bigquery_v2.enums.StandardSqlDataTypeTypeKind;
import io.pulumi.googlenative.bigquery_v2.inputs.StandardSqlStructTypeArgs;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StandardSqlDataTypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final StandardSqlDataTypeArgs Empty = new StandardSqlDataTypeArgs();

    @InputImport(name="arrayElementType")
    private final @Nullable Input<StandardSqlDataTypeArgs> arrayElementType;

    public Input<StandardSqlDataTypeArgs> getArrayElementType() {
        return this.arrayElementType == null ? Input.empty() : this.arrayElementType;
    }

    @InputImport(name="structType")
    private final @Nullable Input<StandardSqlStructTypeArgs> structType;

    public Input<StandardSqlStructTypeArgs> getStructType() {
        return this.structType == null ? Input.empty() : this.structType;
    }

    @InputImport(name="typeKind", required=true)
    private final Input<StandardSqlDataTypeTypeKind> typeKind;

    public Input<StandardSqlDataTypeTypeKind> getTypeKind() {
        return this.typeKind;
    }

    public StandardSqlDataTypeArgs(
        @Nullable Input<StandardSqlDataTypeArgs> arrayElementType,
        @Nullable Input<StandardSqlStructTypeArgs> structType,
        Input<StandardSqlDataTypeTypeKind> typeKind) {
        this.arrayElementType = arrayElementType;
        this.structType = structType;
        this.typeKind = Objects.requireNonNull(typeKind, "expected parameter 'typeKind' to be non-null");
    }

    private StandardSqlDataTypeArgs() {
        this.arrayElementType = Input.empty();
        this.structType = Input.empty();
        this.typeKind = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardSqlDataTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<StandardSqlDataTypeArgs> arrayElementType;
        private @Nullable Input<StandardSqlStructTypeArgs> structType;
        private Input<StandardSqlDataTypeTypeKind> typeKind;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardSqlDataTypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arrayElementType = defaults.arrayElementType;
    	      this.structType = defaults.structType;
    	      this.typeKind = defaults.typeKind;
        }

        public Builder setArrayElementType(@Nullable Input<StandardSqlDataTypeArgs> arrayElementType) {
            this.arrayElementType = arrayElementType;
            return this;
        }

        public Builder setArrayElementType(@Nullable StandardSqlDataTypeArgs arrayElementType) {
            this.arrayElementType = Input.ofNullable(arrayElementType);
            return this;
        }

        public Builder setStructType(@Nullable Input<StandardSqlStructTypeArgs> structType) {
            this.structType = structType;
            return this;
        }

        public Builder setStructType(@Nullable StandardSqlStructTypeArgs structType) {
            this.structType = Input.ofNullable(structType);
            return this;
        }

        public Builder setTypeKind(Input<StandardSqlDataTypeTypeKind> typeKind) {
            this.typeKind = Objects.requireNonNull(typeKind);
            return this;
        }

        public Builder setTypeKind(StandardSqlDataTypeTypeKind typeKind) {
            this.typeKind = Input.of(Objects.requireNonNull(typeKind));
            return this;
        }

        public StandardSqlDataTypeArgs build() {
            return new StandardSqlDataTypeArgs(arrayElementType, structType, typeKind);
        }
    }
}
