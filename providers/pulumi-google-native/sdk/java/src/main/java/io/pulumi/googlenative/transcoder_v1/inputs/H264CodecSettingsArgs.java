// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.transcoder_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * H264 codec settings.
 * 
 */
public final class H264CodecSettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final H264CodecSettingsArgs Empty = new H264CodecSettingsArgs();

    /**
     * Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     * 
     */
    @InputImport(name="allowOpenGop")
      private final @Nullable Input<Boolean> allowOpenGop;

    public Input<Boolean> getAllowOpenGop() {
        return this.allowOpenGop == null ? Input.empty() : this.allowOpenGop;
    }

    /**
     * Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     * 
     */
    @InputImport(name="aqStrength")
      private final @Nullable Input<Double> aqStrength;

    public Input<Double> getAqStrength() {
        return this.aqStrength == null ? Input.empty() : this.aqStrength;
    }

    /**
     * The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     * 
     */
    @InputImport(name="bFrameCount")
      private final @Nullable Input<Integer> bFrameCount;

    public Input<Integer> getBFrameCount() {
        return this.bFrameCount == null ? Input.empty() : this.bFrameCount;
    }

    /**
     * Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     * 
     */
    @InputImport(name="bPyramid")
      private final @Nullable Input<Boolean> bPyramid;

    public Input<Boolean> getBPyramid() {
        return this.bPyramid == null ? Input.empty() : this.bPyramid;
    }

    /**
     * The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     * 
     */
    @InputImport(name="bitrateBps", required=true)
      private final Input<Integer> bitrateBps;

    public Input<Integer> getBitrateBps() {
        return this.bitrateBps;
    }

    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     * 
     */
    @InputImport(name="crfLevel")
      private final @Nullable Input<Integer> crfLevel;

    public Input<Integer> getCrfLevel() {
        return this.crfLevel == null ? Input.empty() : this.crfLevel;
    }

    /**
     * Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     * 
     */
    @InputImport(name="enableTwoPass")
      private final @Nullable Input<Boolean> enableTwoPass;

    public Input<Boolean> getEnableTwoPass() {
        return this.enableTwoPass == null ? Input.empty() : this.enableTwoPass;
    }

    /**
     * The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
     * 
     */
    @InputImport(name="entropyCoder")
      private final @Nullable Input<String> entropyCoder;

    public Input<String> getEntropyCoder() {
        return this.entropyCoder == null ? Input.empty() : this.entropyCoder;
    }

    /**
     * The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     * 
     */
    @InputImport(name="frameRate", required=true)
      private final Input<Double> frameRate;

    public Input<Double> getFrameRate() {
        return this.frameRate;
    }

    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     * 
     */
    @InputImport(name="gopDuration")
      private final @Nullable Input<String> gopDuration;

    public Input<String> getGopDuration() {
        return this.gopDuration == null ? Input.empty() : this.gopDuration;
    }

    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     * 
     */
    @InputImport(name="gopFrameCount")
      private final @Nullable Input<Integer> gopFrameCount;

    public Input<Integer> getGopFrameCount() {
        return this.gopFrameCount == null ? Input.empty() : this.gopFrameCount;
    }

    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
     * 
     */
    @InputImport(name="heightPixels")
      private final @Nullable Input<Integer> heightPixels;

    public Input<Integer> getHeightPixels() {
        return this.heightPixels == null ? Input.empty() : this.heightPixels;
    }

    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     * 
     */
    @InputImport(name="pixelFormat")
      private final @Nullable Input<String> pixelFormat;

    public Input<String> getPixelFormat() {
        return this.pixelFormat == null ? Input.empty() : this.pixelFormat;
    }

    /**
     * Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    @InputImport(name="preset")
      private final @Nullable Input<String> preset;

    public Input<String> getPreset() {
        return this.preset == null ? Input.empty() : this.preset;
    }

    /**
     * Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    @InputImport(name="profile")
      private final @Nullable Input<String> profile;

    public Input<String> getProfile() {
        return this.profile == null ? Input.empty() : this.profile;
    }

    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     * 
     */
    @InputImport(name="rateControlMode")
      private final @Nullable Input<String> rateControlMode;

    public Input<String> getRateControlMode() {
        return this.rateControlMode == null ? Input.empty() : this.rateControlMode;
    }

    /**
     * Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     * 
     */
    @InputImport(name="tune")
      private final @Nullable Input<String> tune;

    public Input<String> getTune() {
        return this.tune == null ? Input.empty() : this.tune;
    }

    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     * 
     */
    @InputImport(name="vbvFullnessBits")
      private final @Nullable Input<Integer> vbvFullnessBits;

    public Input<Integer> getVbvFullnessBits() {
        return this.vbvFullnessBits == null ? Input.empty() : this.vbvFullnessBits;
    }

    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     * 
     */
    @InputImport(name="vbvSizeBits")
      private final @Nullable Input<Integer> vbvSizeBits;

    public Input<Integer> getVbvSizeBits() {
        return this.vbvSizeBits == null ? Input.empty() : this.vbvSizeBits;
    }

    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
     * 
     */
    @InputImport(name="widthPixels")
      private final @Nullable Input<Integer> widthPixels;

    public Input<Integer> getWidthPixels() {
        return this.widthPixels == null ? Input.empty() : this.widthPixels;
    }

    public H264CodecSettingsArgs(
        @Nullable Input<Boolean> allowOpenGop,
        @Nullable Input<Double> aqStrength,
        @Nullable Input<Integer> bFrameCount,
        @Nullable Input<Boolean> bPyramid,
        Input<Integer> bitrateBps,
        @Nullable Input<Integer> crfLevel,
        @Nullable Input<Boolean> enableTwoPass,
        @Nullable Input<String> entropyCoder,
        Input<Double> frameRate,
        @Nullable Input<String> gopDuration,
        @Nullable Input<Integer> gopFrameCount,
        @Nullable Input<Integer> heightPixels,
        @Nullable Input<String> pixelFormat,
        @Nullable Input<String> preset,
        @Nullable Input<String> profile,
        @Nullable Input<String> rateControlMode,
        @Nullable Input<String> tune,
        @Nullable Input<Integer> vbvFullnessBits,
        @Nullable Input<Integer> vbvSizeBits,
        @Nullable Input<Integer> widthPixels) {
        this.allowOpenGop = allowOpenGop;
        this.aqStrength = aqStrength;
        this.bFrameCount = bFrameCount;
        this.bPyramid = bPyramid;
        this.bitrateBps = Objects.requireNonNull(bitrateBps, "expected parameter 'bitrateBps' to be non-null");
        this.crfLevel = crfLevel;
        this.enableTwoPass = enableTwoPass;
        this.entropyCoder = entropyCoder;
        this.frameRate = Objects.requireNonNull(frameRate, "expected parameter 'frameRate' to be non-null");
        this.gopDuration = gopDuration;
        this.gopFrameCount = gopFrameCount;
        this.heightPixels = heightPixels;
        this.pixelFormat = pixelFormat;
        this.preset = preset;
        this.profile = profile;
        this.rateControlMode = rateControlMode;
        this.tune = tune;
        this.vbvFullnessBits = vbvFullnessBits;
        this.vbvSizeBits = vbvSizeBits;
        this.widthPixels = widthPixels;
    }

    private H264CodecSettingsArgs() {
        this.allowOpenGop = Input.empty();
        this.aqStrength = Input.empty();
        this.bFrameCount = Input.empty();
        this.bPyramid = Input.empty();
        this.bitrateBps = Input.empty();
        this.crfLevel = Input.empty();
        this.enableTwoPass = Input.empty();
        this.entropyCoder = Input.empty();
        this.frameRate = Input.empty();
        this.gopDuration = Input.empty();
        this.gopFrameCount = Input.empty();
        this.heightPixels = Input.empty();
        this.pixelFormat = Input.empty();
        this.preset = Input.empty();
        this.profile = Input.empty();
        this.rateControlMode = Input.empty();
        this.tune = Input.empty();
        this.vbvFullnessBits = Input.empty();
        this.vbvSizeBits = Input.empty();
        this.widthPixels = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(H264CodecSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowOpenGop;
        private @Nullable Input<Double> aqStrength;
        private @Nullable Input<Integer> bFrameCount;
        private @Nullable Input<Boolean> bPyramid;
        private Input<Integer> bitrateBps;
        private @Nullable Input<Integer> crfLevel;
        private @Nullable Input<Boolean> enableTwoPass;
        private @Nullable Input<String> entropyCoder;
        private Input<Double> frameRate;
        private @Nullable Input<String> gopDuration;
        private @Nullable Input<Integer> gopFrameCount;
        private @Nullable Input<Integer> heightPixels;
        private @Nullable Input<String> pixelFormat;
        private @Nullable Input<String> preset;
        private @Nullable Input<String> profile;
        private @Nullable Input<String> rateControlMode;
        private @Nullable Input<String> tune;
        private @Nullable Input<Integer> vbvFullnessBits;
        private @Nullable Input<Integer> vbvSizeBits;
        private @Nullable Input<Integer> widthPixels;

        public Builder() {
    	      // Empty
        }

        public Builder(H264CodecSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowOpenGop = defaults.allowOpenGop;
    	      this.aqStrength = defaults.aqStrength;
    	      this.bFrameCount = defaults.bFrameCount;
    	      this.bPyramid = defaults.bPyramid;
    	      this.bitrateBps = defaults.bitrateBps;
    	      this.crfLevel = defaults.crfLevel;
    	      this.enableTwoPass = defaults.enableTwoPass;
    	      this.entropyCoder = defaults.entropyCoder;
    	      this.frameRate = defaults.frameRate;
    	      this.gopDuration = defaults.gopDuration;
    	      this.gopFrameCount = defaults.gopFrameCount;
    	      this.heightPixels = defaults.heightPixels;
    	      this.pixelFormat = defaults.pixelFormat;
    	      this.preset = defaults.preset;
    	      this.profile = defaults.profile;
    	      this.rateControlMode = defaults.rateControlMode;
    	      this.tune = defaults.tune;
    	      this.vbvFullnessBits = defaults.vbvFullnessBits;
    	      this.vbvSizeBits = defaults.vbvSizeBits;
    	      this.widthPixels = defaults.widthPixels;
        }

        public Builder setAllowOpenGop(@Nullable Input<Boolean> allowOpenGop) {
            this.allowOpenGop = allowOpenGop;
            return this;
        }

        public Builder setAllowOpenGop(@Nullable Boolean allowOpenGop) {
            this.allowOpenGop = Input.ofNullable(allowOpenGop);
            return this;
        }

        public Builder setAqStrength(@Nullable Input<Double> aqStrength) {
            this.aqStrength = aqStrength;
            return this;
        }

        public Builder setAqStrength(@Nullable Double aqStrength) {
            this.aqStrength = Input.ofNullable(aqStrength);
            return this;
        }

        public Builder setBFrameCount(@Nullable Input<Integer> bFrameCount) {
            this.bFrameCount = bFrameCount;
            return this;
        }

        public Builder setBFrameCount(@Nullable Integer bFrameCount) {
            this.bFrameCount = Input.ofNullable(bFrameCount);
            return this;
        }

        public Builder setBPyramid(@Nullable Input<Boolean> bPyramid) {
            this.bPyramid = bPyramid;
            return this;
        }

        public Builder setBPyramid(@Nullable Boolean bPyramid) {
            this.bPyramid = Input.ofNullable(bPyramid);
            return this;
        }

        public Builder setBitrateBps(Input<Integer> bitrateBps) {
            this.bitrateBps = Objects.requireNonNull(bitrateBps);
            return this;
        }

        public Builder setBitrateBps(Integer bitrateBps) {
            this.bitrateBps = Input.of(Objects.requireNonNull(bitrateBps));
            return this;
        }

        public Builder setCrfLevel(@Nullable Input<Integer> crfLevel) {
            this.crfLevel = crfLevel;
            return this;
        }

        public Builder setCrfLevel(@Nullable Integer crfLevel) {
            this.crfLevel = Input.ofNullable(crfLevel);
            return this;
        }

        public Builder setEnableTwoPass(@Nullable Input<Boolean> enableTwoPass) {
            this.enableTwoPass = enableTwoPass;
            return this;
        }

        public Builder setEnableTwoPass(@Nullable Boolean enableTwoPass) {
            this.enableTwoPass = Input.ofNullable(enableTwoPass);
            return this;
        }

        public Builder setEntropyCoder(@Nullable Input<String> entropyCoder) {
            this.entropyCoder = entropyCoder;
            return this;
        }

        public Builder setEntropyCoder(@Nullable String entropyCoder) {
            this.entropyCoder = Input.ofNullable(entropyCoder);
            return this;
        }

        public Builder setFrameRate(Input<Double> frameRate) {
            this.frameRate = Objects.requireNonNull(frameRate);
            return this;
        }

        public Builder setFrameRate(Double frameRate) {
            this.frameRate = Input.of(Objects.requireNonNull(frameRate));
            return this;
        }

        public Builder setGopDuration(@Nullable Input<String> gopDuration) {
            this.gopDuration = gopDuration;
            return this;
        }

        public Builder setGopDuration(@Nullable String gopDuration) {
            this.gopDuration = Input.ofNullable(gopDuration);
            return this;
        }

        public Builder setGopFrameCount(@Nullable Input<Integer> gopFrameCount) {
            this.gopFrameCount = gopFrameCount;
            return this;
        }

        public Builder setGopFrameCount(@Nullable Integer gopFrameCount) {
            this.gopFrameCount = Input.ofNullable(gopFrameCount);
            return this;
        }

        public Builder setHeightPixels(@Nullable Input<Integer> heightPixels) {
            this.heightPixels = heightPixels;
            return this;
        }

        public Builder setHeightPixels(@Nullable Integer heightPixels) {
            this.heightPixels = Input.ofNullable(heightPixels);
            return this;
        }

        public Builder setPixelFormat(@Nullable Input<String> pixelFormat) {
            this.pixelFormat = pixelFormat;
            return this;
        }

        public Builder setPixelFormat(@Nullable String pixelFormat) {
            this.pixelFormat = Input.ofNullable(pixelFormat);
            return this;
        }

        public Builder setPreset(@Nullable Input<String> preset) {
            this.preset = preset;
            return this;
        }

        public Builder setPreset(@Nullable String preset) {
            this.preset = Input.ofNullable(preset);
            return this;
        }

        public Builder setProfile(@Nullable Input<String> profile) {
            this.profile = profile;
            return this;
        }

        public Builder setProfile(@Nullable String profile) {
            this.profile = Input.ofNullable(profile);
            return this;
        }

        public Builder setRateControlMode(@Nullable Input<String> rateControlMode) {
            this.rateControlMode = rateControlMode;
            return this;
        }

        public Builder setRateControlMode(@Nullable String rateControlMode) {
            this.rateControlMode = Input.ofNullable(rateControlMode);
            return this;
        }

        public Builder setTune(@Nullable Input<String> tune) {
            this.tune = tune;
            return this;
        }

        public Builder setTune(@Nullable String tune) {
            this.tune = Input.ofNullable(tune);
            return this;
        }

        public Builder setVbvFullnessBits(@Nullable Input<Integer> vbvFullnessBits) {
            this.vbvFullnessBits = vbvFullnessBits;
            return this;
        }

        public Builder setVbvFullnessBits(@Nullable Integer vbvFullnessBits) {
            this.vbvFullnessBits = Input.ofNullable(vbvFullnessBits);
            return this;
        }

        public Builder setVbvSizeBits(@Nullable Input<Integer> vbvSizeBits) {
            this.vbvSizeBits = vbvSizeBits;
            return this;
        }

        public Builder setVbvSizeBits(@Nullable Integer vbvSizeBits) {
            this.vbvSizeBits = Input.ofNullable(vbvSizeBits);
            return this;
        }

        public Builder setWidthPixels(@Nullable Input<Integer> widthPixels) {
            this.widthPixels = widthPixels;
            return this;
        }

        public Builder setWidthPixels(@Nullable Integer widthPixels) {
            this.widthPixels = Input.ofNullable(widthPixels);
            return this;
        }
        public H264CodecSettingsArgs build() {
            return new H264CodecSettingsArgs(allowOpenGop, aqStrength, bFrameCount, bPyramid, bitrateBps, crfLevel, enableTwoPass, entropyCoder, frameRate, gopDuration, gopFrameCount, heightPixels, pixelFormat, preset, profile, rateControlMode, tune, vbvFullnessBits, vbvSizeBits, widthPixels);
        }
    }
}
