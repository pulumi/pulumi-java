// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.compute_beta.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class RouterInterfaceResponse extends io.pulumi.resources.InvokeArgs {

    public static final RouterInterfaceResponse Empty = new RouterInterfaceResponse();

    @InputImport(name="ipRange", required=true)
    private final String ipRange;

    public String getIpRange() {
        return this.ipRange;
    }

    @InputImport(name="linkedInterconnectAttachment", required=true)
    private final String linkedInterconnectAttachment;

    public String getLinkedInterconnectAttachment() {
        return this.linkedInterconnectAttachment;
    }

    @InputImport(name="linkedVpnTunnel", required=true)
    private final String linkedVpnTunnel;

    public String getLinkedVpnTunnel() {
        return this.linkedVpnTunnel;
    }

    @InputImport(name="managementType", required=true)
    private final String managementType;

    public String getManagementType() {
        return this.managementType;
    }

    @InputImport(name="name", required=true)
    private final String name;

    public String getName() {
        return this.name;
    }

    @InputImport(name="privateIpAddress", required=true)
    private final String privateIpAddress;

    public String getPrivateIpAddress() {
        return this.privateIpAddress;
    }

    @InputImport(name="redundantInterface", required=true)
    private final String redundantInterface;

    public String getRedundantInterface() {
        return this.redundantInterface;
    }

    @InputImport(name="subnetwork", required=true)
    private final String subnetwork;

    public String getSubnetwork() {
        return this.subnetwork;
    }

    public RouterInterfaceResponse(
        String ipRange,
        String linkedInterconnectAttachment,
        String linkedVpnTunnel,
        String managementType,
        String name,
        String privateIpAddress,
        String redundantInterface,
        String subnetwork) {
        this.ipRange = Objects.requireNonNull(ipRange, "expected parameter 'ipRange' to be non-null");
        this.linkedInterconnectAttachment = Objects.requireNonNull(linkedInterconnectAttachment, "expected parameter 'linkedInterconnectAttachment' to be non-null");
        this.linkedVpnTunnel = Objects.requireNonNull(linkedVpnTunnel, "expected parameter 'linkedVpnTunnel' to be non-null");
        this.managementType = Objects.requireNonNull(managementType, "expected parameter 'managementType' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.privateIpAddress = Objects.requireNonNull(privateIpAddress, "expected parameter 'privateIpAddress' to be non-null");
        this.redundantInterface = Objects.requireNonNull(redundantInterface, "expected parameter 'redundantInterface' to be non-null");
        this.subnetwork = Objects.requireNonNull(subnetwork, "expected parameter 'subnetwork' to be non-null");
    }

    private RouterInterfaceResponse() {
        this.ipRange = null;
        this.linkedInterconnectAttachment = null;
        this.linkedVpnTunnel = null;
        this.managementType = null;
        this.name = null;
        this.privateIpAddress = null;
        this.redundantInterface = null;
        this.subnetwork = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String ipRange;
        private String linkedInterconnectAttachment;
        private String linkedVpnTunnel;
        private String managementType;
        private String name;
        private String privateIpAddress;
        private String redundantInterface;
        private String subnetwork;

        public Builder() {
    	      // Empty
        }

        public Builder(RouterInterfaceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipRange = defaults.ipRange;
    	      this.linkedInterconnectAttachment = defaults.linkedInterconnectAttachment;
    	      this.linkedVpnTunnel = defaults.linkedVpnTunnel;
    	      this.managementType = defaults.managementType;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.redundantInterface = defaults.redundantInterface;
    	      this.subnetwork = defaults.subnetwork;
        }

        public Builder setIpRange(String ipRange) {
            this.ipRange = Objects.requireNonNull(ipRange);
            return this;
        }

        public Builder setLinkedInterconnectAttachment(String linkedInterconnectAttachment) {
            this.linkedInterconnectAttachment = Objects.requireNonNull(linkedInterconnectAttachment);
            return this;
        }

        public Builder setLinkedVpnTunnel(String linkedVpnTunnel) {
            this.linkedVpnTunnel = Objects.requireNonNull(linkedVpnTunnel);
            return this;
        }

        public Builder setManagementType(String managementType) {
            this.managementType = Objects.requireNonNull(managementType);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setPrivateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }

        public Builder setRedundantInterface(String redundantInterface) {
            this.redundantInterface = Objects.requireNonNull(redundantInterface);
            return this;
        }

        public Builder setSubnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }

        public RouterInterfaceResponse build() {
            return new RouterInterfaceResponse(ipRange, linkedInterconnectAttachment, linkedVpnTunnel, managementType, name, privateIpAddress, redundantInterface, subnetwork);
        }
    }
}
