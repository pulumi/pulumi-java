// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.sqladmin_v1.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.googlenative.sqladmin_v1.inputs.AclEntryResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class IpConfigurationResponse extends io.pulumi.resources.InvokeArgs {

    public static final IpConfigurationResponse Empty = new IpConfigurationResponse();

    @InputImport(name="allocatedIpRange", required=true)
    private final String allocatedIpRange;

    public String getAllocatedIpRange() {
        return this.allocatedIpRange;
    }

    @InputImport(name="authorizedNetworks", required=true)
    private final List<AclEntryResponse> authorizedNetworks;

    public List<AclEntryResponse> getAuthorizedNetworks() {
        return this.authorizedNetworks;
    }

    @InputImport(name="ipv4Enabled", required=true)
    private final Boolean ipv4Enabled;

    public Boolean getIpv4Enabled() {
        return this.ipv4Enabled;
    }

    @InputImport(name="privateNetwork", required=true)
    private final String privateNetwork;

    public String getPrivateNetwork() {
        return this.privateNetwork;
    }

    @InputImport(name="requireSsl", required=true)
    private final Boolean requireSsl;

    public Boolean getRequireSsl() {
        return this.requireSsl;
    }

    public IpConfigurationResponse(
        String allocatedIpRange,
        List<AclEntryResponse> authorizedNetworks,
        Boolean ipv4Enabled,
        String privateNetwork,
        Boolean requireSsl) {
        this.allocatedIpRange = Objects.requireNonNull(allocatedIpRange, "expected parameter 'allocatedIpRange' to be non-null");
        this.authorizedNetworks = Objects.requireNonNull(authorizedNetworks, "expected parameter 'authorizedNetworks' to be non-null");
        this.ipv4Enabled = Objects.requireNonNull(ipv4Enabled, "expected parameter 'ipv4Enabled' to be non-null");
        this.privateNetwork = Objects.requireNonNull(privateNetwork, "expected parameter 'privateNetwork' to be non-null");
        this.requireSsl = Objects.requireNonNull(requireSsl, "expected parameter 'requireSsl' to be non-null");
    }

    private IpConfigurationResponse() {
        this.allocatedIpRange = null;
        this.authorizedNetworks = List.of();
        this.ipv4Enabled = null;
        this.privateNetwork = null;
        this.requireSsl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IpConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String allocatedIpRange;
        private List<AclEntryResponse> authorizedNetworks;
        private Boolean ipv4Enabled;
        private String privateNetwork;
        private Boolean requireSsl;

        public Builder() {
    	      // Empty
        }

        public Builder(IpConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpRange = defaults.allocatedIpRange;
    	      this.authorizedNetworks = defaults.authorizedNetworks;
    	      this.ipv4Enabled = defaults.ipv4Enabled;
    	      this.privateNetwork = defaults.privateNetwork;
    	      this.requireSsl = defaults.requireSsl;
        }

        public Builder setAllocatedIpRange(String allocatedIpRange) {
            this.allocatedIpRange = Objects.requireNonNull(allocatedIpRange);
            return this;
        }

        public Builder setAuthorizedNetworks(List<AclEntryResponse> authorizedNetworks) {
            this.authorizedNetworks = Objects.requireNonNull(authorizedNetworks);
            return this;
        }

        public Builder setIpv4Enabled(Boolean ipv4Enabled) {
            this.ipv4Enabled = Objects.requireNonNull(ipv4Enabled);
            return this;
        }

        public Builder setPrivateNetwork(String privateNetwork) {
            this.privateNetwork = Objects.requireNonNull(privateNetwork);
            return this;
        }

        public Builder setRequireSsl(Boolean requireSsl) {
            this.requireSsl = Objects.requireNonNull(requireSsl);
            return this;
        }

        public IpConfigurationResponse build() {
            return new IpConfigurationResponse(allocatedIpRange, authorizedNetworks, ipv4Enabled, privateNetwork, requireSsl);
        }
    }
}
