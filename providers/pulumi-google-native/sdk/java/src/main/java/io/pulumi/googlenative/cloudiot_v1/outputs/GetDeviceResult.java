// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.googlenative.cloudiot_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.googlenative.cloudiot_v1.outputs.DeviceConfigResponse;
import io.pulumi.googlenative.cloudiot_v1.outputs.DeviceCredentialResponse;
import io.pulumi.googlenative.cloudiot_v1.outputs.DeviceStateResponse;
import io.pulumi.googlenative.cloudiot_v1.outputs.GatewayConfigResponse;
import io.pulumi.googlenative.cloudiot_v1.outputs.StatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetDeviceResult {
    /**
     * If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
     * 
     */
    private final Boolean blocked;
    /**
     * The most recent device configuration, which is eventually sent from Cloud IoT Core to the device. If not present on creation, the configuration will be initialized with an empty payload and version value of `1`. To update this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig` method.
     * 
     */
    private final DeviceConfigResponse config;
    /**
     * The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
     * 
     */
    private final List<DeviceCredentialResponse> credentials;
    /**
     * Gateway-related configuration and state.
     * 
     */
    private final GatewayConfigResponse gatewayConfig;
    /**
     * [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
     * 
     */
    private final String lastConfigAckTime;
    /**
     * [Output only] The last time a cloud-to-device config version was sent to the device.
     * 
     */
    private final String lastConfigSendTime;
    /**
     * [Output only] The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this field. If no errors have occurred, this field has an empty message and the status code 0 == OK. Otherwise, this field is expected to have a status code other than OK.
     * 
     */
    private final StatusResponse lastErrorStatus;
    /**
     * [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.
     * 
     */
    private final String lastErrorTime;
    /**
     * [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    private final String lastEventTime;
    /**
     * [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    private final String lastHeartbeatTime;
    /**
     * [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    private final String lastStateTime;
    /**
     * **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
     * 
     */
    private final String logLevel;
    /**
     * The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
     * 
     */
    private final Map<String,String> metadata;
    /**
     * The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
     * 
     */
    private final String name;
    /**
     * [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
     * 
     */
    private final String numId;
    /**
     * [Output only] The state most recently received from the device. If no state has been reported, this field is not present.
     * 
     */
    private final DeviceStateResponse state;

    @OutputCustomType.Constructor({"blocked","config","credentials","gatewayConfig","lastConfigAckTime","lastConfigSendTime","lastErrorStatus","lastErrorTime","lastEventTime","lastHeartbeatTime","lastStateTime","logLevel","metadata","name","numId","state"})
    private GetDeviceResult(
        Boolean blocked,
        DeviceConfigResponse config,
        List<DeviceCredentialResponse> credentials,
        GatewayConfigResponse gatewayConfig,
        String lastConfigAckTime,
        String lastConfigSendTime,
        StatusResponse lastErrorStatus,
        String lastErrorTime,
        String lastEventTime,
        String lastHeartbeatTime,
        String lastStateTime,
        String logLevel,
        Map<String,String> metadata,
        String name,
        String numId,
        DeviceStateResponse state) {
        this.blocked = Objects.requireNonNull(blocked);
        this.config = Objects.requireNonNull(config);
        this.credentials = Objects.requireNonNull(credentials);
        this.gatewayConfig = Objects.requireNonNull(gatewayConfig);
        this.lastConfigAckTime = Objects.requireNonNull(lastConfigAckTime);
        this.lastConfigSendTime = Objects.requireNonNull(lastConfigSendTime);
        this.lastErrorStatus = Objects.requireNonNull(lastErrorStatus);
        this.lastErrorTime = Objects.requireNonNull(lastErrorTime);
        this.lastEventTime = Objects.requireNonNull(lastEventTime);
        this.lastHeartbeatTime = Objects.requireNonNull(lastHeartbeatTime);
        this.lastStateTime = Objects.requireNonNull(lastStateTime);
        this.logLevel = Objects.requireNonNull(logLevel);
        this.metadata = Objects.requireNonNull(metadata);
        this.name = Objects.requireNonNull(name);
        this.numId = Objects.requireNonNull(numId);
        this.state = Objects.requireNonNull(state);
    }

    /**
     * If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
     * 
     */
    public Boolean getBlocked() {
        return this.blocked;
    }
    /**
     * The most recent device configuration, which is eventually sent from Cloud IoT Core to the device. If not present on creation, the configuration will be initialized with an empty payload and version value of `1`. To update this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig` method.
     * 
     */
    public DeviceConfigResponse getConfig() {
        return this.config;
    }
    /**
     * The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
     * 
     */
    public List<DeviceCredentialResponse> getCredentials() {
        return this.credentials;
    }
    /**
     * Gateway-related configuration and state.
     * 
     */
    public GatewayConfigResponse getGatewayConfig() {
        return this.gatewayConfig;
    }
    /**
     * [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
     * 
     */
    public String getLastConfigAckTime() {
        return this.lastConfigAckTime;
    }
    /**
     * [Output only] The last time a cloud-to-device config version was sent to the device.
     * 
     */
    public String getLastConfigSendTime() {
        return this.lastConfigSendTime;
    }
    /**
     * [Output only] The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this field. If no errors have occurred, this field has an empty message and the status code 0 == OK. Otherwise, this field is expected to have a status code other than OK.
     * 
     */
    public StatusResponse getLastErrorStatus() {
        return this.lastErrorStatus;
    }
    /**
     * [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.
     * 
     */
    public String getLastErrorTime() {
        return this.lastErrorTime;
    }
    /**
     * [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    public String getLastEventTime() {
        return this.lastEventTime;
    }
    /**
     * [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    public String getLastHeartbeatTime() {
        return this.lastHeartbeatTime;
    }
    /**
     * [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    public String getLastStateTime() {
        return this.lastStateTime;
    }
    /**
     * **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
     * 
     */
    public String getLogLevel() {
        return this.logLevel;
    }
    /**
     * The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
     * 
     */
    public Map<String,String> getMetadata() {
        return this.metadata;
    }
    /**
     * The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
     * 
     */
    public String getNumId() {
        return this.numId;
    }
    /**
     * [Output only] The state most recently received from the device. If no state has been reported, this field is not present.
     * 
     */
    public DeviceStateResponse getState() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean blocked;
        private DeviceConfigResponse config;
        private List<DeviceCredentialResponse> credentials;
        private GatewayConfigResponse gatewayConfig;
        private String lastConfigAckTime;
        private String lastConfigSendTime;
        private StatusResponse lastErrorStatus;
        private String lastErrorTime;
        private String lastEventTime;
        private String lastHeartbeatTime;
        private String lastStateTime;
        private String logLevel;
        private Map<String,String> metadata;
        private String name;
        private String numId;
        private DeviceStateResponse state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blocked = defaults.blocked;
    	      this.config = defaults.config;
    	      this.credentials = defaults.credentials;
    	      this.gatewayConfig = defaults.gatewayConfig;
    	      this.lastConfigAckTime = defaults.lastConfigAckTime;
    	      this.lastConfigSendTime = defaults.lastConfigSendTime;
    	      this.lastErrorStatus = defaults.lastErrorStatus;
    	      this.lastErrorTime = defaults.lastErrorTime;
    	      this.lastEventTime = defaults.lastEventTime;
    	      this.lastHeartbeatTime = defaults.lastHeartbeatTime;
    	      this.lastStateTime = defaults.lastStateTime;
    	      this.logLevel = defaults.logLevel;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.numId = defaults.numId;
    	      this.state = defaults.state;
        }

        public Builder setBlocked(Boolean blocked) {
            this.blocked = Objects.requireNonNull(blocked);
            return this;
        }

        public Builder setConfig(DeviceConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }

        public Builder setCredentials(List<DeviceCredentialResponse> credentials) {
            this.credentials = Objects.requireNonNull(credentials);
            return this;
        }

        public Builder setGatewayConfig(GatewayConfigResponse gatewayConfig) {
            this.gatewayConfig = Objects.requireNonNull(gatewayConfig);
            return this;
        }

        public Builder setLastConfigAckTime(String lastConfigAckTime) {
            this.lastConfigAckTime = Objects.requireNonNull(lastConfigAckTime);
            return this;
        }

        public Builder setLastConfigSendTime(String lastConfigSendTime) {
            this.lastConfigSendTime = Objects.requireNonNull(lastConfigSendTime);
            return this;
        }

        public Builder setLastErrorStatus(StatusResponse lastErrorStatus) {
            this.lastErrorStatus = Objects.requireNonNull(lastErrorStatus);
            return this;
        }

        public Builder setLastErrorTime(String lastErrorTime) {
            this.lastErrorTime = Objects.requireNonNull(lastErrorTime);
            return this;
        }

        public Builder setLastEventTime(String lastEventTime) {
            this.lastEventTime = Objects.requireNonNull(lastEventTime);
            return this;
        }

        public Builder setLastHeartbeatTime(String lastHeartbeatTime) {
            this.lastHeartbeatTime = Objects.requireNonNull(lastHeartbeatTime);
            return this;
        }

        public Builder setLastStateTime(String lastStateTime) {
            this.lastStateTime = Objects.requireNonNull(lastStateTime);
            return this;
        }

        public Builder setLogLevel(String logLevel) {
            this.logLevel = Objects.requireNonNull(logLevel);
            return this;
        }

        public Builder setMetadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNumId(String numId) {
            this.numId = Objects.requireNonNull(numId);
            return this;
        }

        public Builder setState(DeviceStateResponse state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }

        public GetDeviceResult build() {
            return new GetDeviceResult(blocked, config, credentials, gatewayConfig, lastConfigAckTime, lastConfigSendTime, lastErrorStatus, lastErrorTime, lastEventTime, lastHeartbeatTime, lastStateTime, logLevel, metadata, name, numId, state);
        }
    }
}
